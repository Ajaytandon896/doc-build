import{S as gWt,i as hWt,s as uWt,e as a,k as l,w as F,t as o,M as pWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as _Wt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Stt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function bWt($){let g,v,u,f,p,d,h,Co,yi,Pm,lt,xi,$i,ty,Bm,Oe,We,ki,Pn,ay,Bn,Nn,ny,Si,In,sy,Ri,Nm,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),yi=a("code"),Pm=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),$i=o('"new-model"'),ty=o(")."),Bm=l(),Oe=a("p"),We=o("Likewise, if your "),ki=a("code"),Pn=o("NewModel"),ay=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),ny=o(`, make sure its
`),Si=a("code"),In=o("config_class"),sy=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),Nm=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var jS=s(u);f=r(jS,"NewModelConfig"),jS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Pi=s(d);h=r(Pi,"PretrainedConfig"),Pi.forEach(t),Co=r(Ae,`, make sure its
`),yi=n(Ae,"CODE",{});var DS=s(yi);Pm=r(DS,"model_type"),DS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),xi=n(Ae,"CODE",{});var GS=s(xi);$i=r(GS,'"new-model"'),GS.forEach(t),ty=r(Ae,")."),Ae.forEach(t),Bm=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),ki=n(wo,"CODE",{});var Ra=s(ki);Pn=r(Ra,"NewModel"),Ra.forEach(t),ay=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var OS=s(Bn);Nn=r(OS,"PreTrainedModel"),OS.forEach(t),ny=r(wo,`, make sure its
`),Si=n(wo,"CODE",{});var Im=s(Si);In=r(Im,"config_class"),Im.forEach(t),sy=r(wo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(wo,"CODE",{});var VS=s(Ri);Nm=r(VS,"NewModelConfig"),VS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Co),e(g,yi),e(yi,Pm),e(g,lt),e(g,xi),e(xi,$i),e(g,ty),b(He,Bm,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,ki),e(ki,Pn),e(Oe,ay),e(Oe,Bn),e(Bn,Nn),e(Oe,ny),e(Oe,Si),e(Si,In),e(Oe,sy),e(Oe,Ri),e(Ri,Nm),e(Oe,Sa)},d(He){He&&t(g),He&&t(Bm),He&&t(Oe)}}}function vWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TWt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Co=s(u);f=r(Co,"use_auth_token=True"),Co.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function MWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EWt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Co=s(u);f=r(Co,"use_auth_token=True"),Co.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function CWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Wt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZWt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function THt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ht($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZHt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ut($){let g,v,u,f,p,d,h,Co,yi,Pm,lt,xi,$i,ty,Bm,Oe,We,ki,Pn,ay,Bn,Nn,ny,Si,In,sy,Ri,Nm,Sa,He,Ae,jS,Pi,DS,GS,wo,Ra,OS,Im,VS,wHe,cXe,Bi,qm,Sae,ly,AHe,Rae,LHe,mXe,qn,yHe,Pae,xHe,$He,Bae,kHe,SHe,fXe,iy,gXe,XS,RHe,hXe,jm,uXe,Ni,Dm,Nae,dy,PHe,Iae,BHe,pXe,Ao,cy,NHe,my,IHe,zS,qHe,jHe,DHe,fy,GHe,qae,OHe,VHe,XHe,Lr,gy,zHe,jae,QHe,WHe,Ii,HHe,Dae,UHe,JHe,Gae,YHe,KHe,ZHe,A,Gm,Oae,eUe,oUe,QS,rUe,tUe,aUe,Om,Vae,nUe,sUe,WS,lUe,iUe,dUe,Vm,Xae,cUe,mUe,HS,fUe,gUe,hUe,Xm,zae,uUe,pUe,US,_Ue,bUe,vUe,zm,Qae,FUe,TUe,JS,MUe,EUe,CUe,Qm,Wae,wUe,AUe,YS,LUe,yUe,xUe,Wm,Hae,$Ue,kUe,KS,SUe,RUe,PUe,Hm,Uae,BUe,NUe,ZS,IUe,qUe,jUe,Um,Jae,DUe,GUe,eR,OUe,VUe,XUe,Jm,Yae,zUe,QUe,oR,WUe,HUe,UUe,Ym,Kae,JUe,YUe,rR,KUe,ZUe,eJe,Km,Zae,oJe,rJe,tR,tJe,aJe,nJe,Zm,ene,sJe,lJe,aR,iJe,dJe,cJe,ef,one,mJe,fJe,nR,gJe,hJe,uJe,of,rne,pJe,_Je,sR,bJe,vJe,FJe,rf,tne,TJe,MJe,lR,EJe,CJe,wJe,tf,ane,AJe,LJe,iR,yJe,xJe,$Je,af,nne,kJe,SJe,dR,RJe,PJe,BJe,nf,sne,NJe,IJe,cR,qJe,jJe,DJe,sf,lne,GJe,OJe,mR,VJe,XJe,zJe,lf,ine,QJe,WJe,fR,HJe,UJe,JJe,df,dne,YJe,KJe,gR,ZJe,eYe,oYe,cf,cne,rYe,tYe,hR,aYe,nYe,sYe,mf,mne,lYe,iYe,uR,dYe,cYe,mYe,ff,fne,fYe,gYe,pR,hYe,uYe,pYe,gf,gne,_Ye,bYe,_R,vYe,FYe,TYe,hf,hne,MYe,EYe,bR,CYe,wYe,AYe,uf,une,LYe,yYe,vR,xYe,$Ye,kYe,pf,pne,SYe,RYe,FR,PYe,BYe,NYe,_f,_ne,IYe,qYe,TR,jYe,DYe,GYe,bf,bne,OYe,VYe,MR,XYe,zYe,QYe,vf,vne,WYe,HYe,ER,UYe,JYe,YYe,Ff,Fne,KYe,ZYe,CR,eKe,oKe,rKe,Tf,Tne,tKe,aKe,wR,nKe,sKe,lKe,Mf,Mne,iKe,dKe,AR,cKe,mKe,fKe,Ef,Ene,gKe,hKe,LR,uKe,pKe,_Ke,Cf,Cne,bKe,vKe,yR,FKe,TKe,MKe,wf,wne,EKe,CKe,xR,wKe,AKe,LKe,Af,Ane,yKe,xKe,$R,$Ke,kKe,SKe,Lf,Lne,RKe,PKe,kR,BKe,NKe,IKe,yf,yne,qKe,jKe,SR,DKe,GKe,OKe,xf,xne,VKe,XKe,RR,zKe,QKe,WKe,$f,$ne,HKe,UKe,PR,JKe,YKe,KKe,kf,kne,ZKe,eZe,BR,oZe,rZe,tZe,Sf,Sne,aZe,nZe,NR,sZe,lZe,iZe,Rf,Rne,dZe,cZe,IR,mZe,fZe,gZe,Pf,Pne,hZe,uZe,qR,pZe,_Ze,bZe,Bf,Bne,vZe,FZe,jR,TZe,MZe,EZe,Nf,Nne,CZe,wZe,DR,AZe,LZe,yZe,If,Ine,xZe,$Ze,GR,kZe,SZe,RZe,qf,qne,PZe,BZe,OR,NZe,IZe,qZe,jf,jne,jZe,DZe,VR,GZe,OZe,VZe,Df,Dne,XZe,zZe,XR,QZe,WZe,HZe,Gf,Gne,UZe,JZe,zR,YZe,KZe,ZZe,Of,One,eeo,oeo,QR,reo,teo,aeo,Vf,Vne,neo,seo,WR,leo,ieo,deo,Xf,Xne,ceo,meo,HR,feo,geo,heo,zf,zne,ueo,peo,UR,_eo,beo,veo,Qf,Qne,Feo,Teo,JR,Meo,Eeo,Ceo,Wf,Wne,weo,Aeo,YR,Leo,yeo,xeo,Hf,Hne,$eo,keo,KR,Seo,Reo,Peo,Uf,Une,Beo,Neo,ZR,Ieo,qeo,jeo,Jf,Jne,Deo,Geo,eP,Oeo,Veo,Xeo,Yf,Yne,zeo,Qeo,oP,Weo,Heo,Ueo,Kf,Kne,Jeo,Yeo,rP,Keo,Zeo,eoo,Zf,Zne,ooo,roo,tP,too,aoo,noo,eg,ese,soo,loo,aP,ioo,doo,coo,og,ose,moo,foo,nP,goo,hoo,uoo,rg,rse,poo,_oo,sP,boo,voo,Foo,tg,tse,Too,Moo,lP,Eoo,Coo,woo,ag,ase,Aoo,Loo,iP,yoo,xoo,$oo,ng,nse,koo,Soo,dP,Roo,Poo,Boo,sg,sse,Noo,Ioo,cP,qoo,joo,Doo,lg,lse,Goo,Ooo,mP,Voo,Xoo,zoo,ig,ise,Qoo,Woo,fP,Hoo,Uoo,Joo,dg,dse,Yoo,Koo,gP,Zoo,ero,oro,cg,cse,rro,tro,hP,aro,nro,sro,mg,mse,lro,iro,uP,dro,cro,mro,fg,fse,fro,gro,pP,hro,uro,pro,gg,gse,_ro,bro,_P,vro,Fro,Tro,hg,hse,Mro,Ero,bP,Cro,wro,Aro,ug,use,Lro,yro,vP,xro,$ro,kro,pg,pse,Sro,Rro,FP,Pro,Bro,Nro,_g,_se,Iro,qro,TP,jro,Dro,Gro,bg,bse,Oro,Vro,MP,Xro,zro,Qro,vg,vse,Wro,Hro,EP,Uro,Jro,Yro,Fg,Fse,Kro,Zro,CP,eto,oto,rto,Tg,Tse,tto,ato,wP,nto,sto,lto,Mg,Mse,ito,dto,AP,cto,mto,fto,Eg,Ese,gto,hto,LP,uto,pto,_to,Cg,Cse,bto,vto,yP,Fto,Tto,Mto,wg,wse,Eto,Cto,xP,wto,Ato,Lto,Ag,Ase,yto,xto,$P,$to,kto,Sto,Lg,Lse,Rto,Pto,kP,Bto,Nto,Ito,yg,yse,qto,jto,SP,Dto,Gto,Oto,xg,xse,Vto,Xto,RP,zto,Qto,Wto,$g,$se,Hto,Uto,PP,Jto,Yto,Kto,kg,kse,Zto,eao,BP,oao,rao,tao,Sg,Sse,aao,nao,NP,sao,lao,iao,Rg,Rse,dao,cao,IP,mao,fao,gao,Pg,Pse,hao,uao,qP,pao,_ao,bao,Bg,Bse,vao,Fao,jP,Tao,Mao,Eao,Ng,Nse,Cao,wao,DP,Aao,Lao,yao,Ig,Ise,xao,$ao,GP,kao,Sao,Rao,qg,qse,Pao,Bao,OP,Nao,Iao,qao,jg,jse,jao,Dao,VP,Gao,Oao,Vao,Dg,Dse,Xao,zao,XP,Qao,Wao,Hao,Gg,Gse,Uao,Jao,zP,Yao,Kao,Zao,Og,Ose,eno,ono,QP,rno,tno,ano,Vg,Vse,nno,sno,WP,lno,ino,dno,Xg,Xse,cno,mno,HP,fno,gno,hno,zg,zse,uno,pno,UP,_no,bno,vno,Qg,Qse,Fno,Tno,JP,Mno,Eno,Cno,Wg,Wse,wno,Ano,YP,Lno,yno,xno,Hg,Hse,$no,kno,KP,Sno,Rno,Pno,Ug,Use,Bno,Nno,ZP,Ino,qno,jno,Jg,Jse,Dno,Gno,eB,Ono,Vno,Xno,Yg,Yse,zno,Qno,oB,Wno,Hno,Uno,Kg,Jno,Zg,hy,Yno,Kse,Kno,_Xe,qi,eh,Zse,uy,Zno,ele,eso,bXe,Lo,py,oso,_y,rso,rB,tso,aso,nso,by,sso,ole,lso,iso,dso,yr,vy,cso,rle,mso,fso,Pa,gso,tle,hso,uso,ale,pso,_so,nle,bso,vso,Fso,k,jn,sle,Tso,Mso,tB,Eso,Cso,aB,wso,Aso,Lso,Dn,lle,yso,xso,nB,$so,kso,sB,Sso,Rso,Pso,Gn,ile,Bso,Nso,lB,Iso,qso,iB,jso,Dso,Gso,oh,dle,Oso,Vso,dB,Xso,zso,Qso,On,cle,Wso,Hso,cB,Uso,Jso,mB,Yso,Kso,Zso,rh,mle,elo,olo,fB,rlo,tlo,alo,th,fle,nlo,slo,gB,llo,ilo,dlo,ah,gle,clo,mlo,hB,flo,glo,hlo,Vn,hle,ulo,plo,uB,_lo,blo,pB,vlo,Flo,Tlo,Xn,ule,Mlo,Elo,_B,Clo,wlo,bB,Alo,Llo,ylo,zn,ple,xlo,$lo,vB,klo,Slo,FB,Rlo,Plo,Blo,nh,_le,Nlo,Ilo,TB,qlo,jlo,Dlo,sh,ble,Glo,Olo,MB,Vlo,Xlo,zlo,lh,vle,Qlo,Wlo,EB,Hlo,Ulo,Jlo,Qn,Fle,Ylo,Klo,CB,Zlo,eio,wB,oio,rio,tio,ih,Tle,aio,nio,AB,sio,lio,iio,Wn,Mle,dio,cio,LB,mio,fio,yB,gio,hio,uio,Hn,Ele,pio,_io,xB,bio,vio,$B,Fio,Tio,Mio,Un,Cle,Eio,Cio,kB,wio,Aio,SB,Lio,yio,xio,Jn,wle,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Nio,dh,Ale,Iio,qio,BB,jio,Dio,Gio,Yn,Lle,Oio,Vio,NB,Xio,zio,IB,Qio,Wio,Hio,Kn,yle,Uio,Jio,qB,Yio,Kio,jB,Zio,edo,odo,Zn,xle,rdo,tdo,DB,ado,ndo,GB,sdo,ldo,ido,es,$le,ddo,cdo,OB,mdo,fdo,VB,gdo,hdo,udo,os,kle,pdo,_do,XB,bdo,vdo,zB,Fdo,Tdo,Mdo,rs,Sle,Edo,Cdo,QB,wdo,Ado,WB,Ldo,ydo,xdo,ch,Rle,$do,kdo,HB,Sdo,Rdo,Pdo,ts,Ple,Bdo,Ndo,UB,Ido,qdo,JB,jdo,Ddo,Gdo,mh,Ble,Odo,Vdo,YB,Xdo,zdo,Qdo,as,Nle,Wdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,ns,Ile,eco,oco,eN,rco,tco,oN,aco,nco,sco,ss,qle,lco,ico,rN,dco,cco,tN,mco,fco,gco,fh,jle,hco,uco,aN,pco,_co,bco,ls,Dle,vco,Fco,nN,Tco,Mco,sN,Eco,Cco,wco,is,Gle,Aco,Lco,lN,yco,xco,iN,$co,kco,Sco,ds,Ole,Rco,Pco,dN,Bco,Nco,cN,Ico,qco,jco,gh,Vle,Dco,Gco,mN,Oco,Vco,Xco,cs,Xle,zco,Qco,fN,Wco,Hco,gN,Uco,Jco,Yco,ms,zle,Kco,Zco,hN,emo,omo,uN,rmo,tmo,amo,fs,Qle,nmo,smo,pN,lmo,imo,_N,dmo,cmo,mmo,gs,Wle,fmo,gmo,bN,hmo,umo,vN,pmo,_mo,bmo,hs,Hle,vmo,Fmo,FN,Tmo,Mmo,TN,Emo,Cmo,wmo,us,Ule,Amo,Lmo,MN,ymo,xmo,EN,$mo,kmo,Smo,ps,Jle,Rmo,Pmo,CN,Bmo,Nmo,wN,Imo,qmo,jmo,_s,Yle,Dmo,Gmo,AN,Omo,Vmo,LN,Xmo,zmo,Qmo,hh,Kle,Wmo,Hmo,yN,Umo,Jmo,Ymo,bs,Zle,Kmo,Zmo,xN,efo,ofo,$N,rfo,tfo,afo,uh,eie,nfo,sfo,kN,lfo,ifo,dfo,ph,oie,cfo,mfo,SN,ffo,gfo,hfo,vs,rie,ufo,pfo,RN,_fo,bfo,PN,vfo,Ffo,Tfo,Fs,tie,Mfo,Efo,BN,Cfo,wfo,NN,Afo,Lfo,yfo,Ts,aie,xfo,$fo,IN,kfo,Sfo,qN,Rfo,Pfo,Bfo,_h,nie,Nfo,Ifo,jN,qfo,jfo,Dfo,Ms,sie,Gfo,Ofo,DN,Vfo,Xfo,GN,zfo,Qfo,Wfo,Es,lie,Hfo,Ufo,ON,Jfo,Yfo,VN,Kfo,Zfo,ego,Cs,iie,ogo,rgo,XN,tgo,ago,zN,ngo,sgo,lgo,ws,die,igo,dgo,QN,cgo,mgo,WN,fgo,ggo,hgo,As,cie,ugo,pgo,HN,_go,bgo,UN,vgo,Fgo,Tgo,Ls,mie,Mgo,Ego,JN,Cgo,wgo,YN,Ago,Lgo,ygo,ys,fie,xgo,$go,KN,kgo,Sgo,ZN,Rgo,Pgo,Bgo,xs,gie,Ngo,Igo,eI,qgo,jgo,oI,Dgo,Ggo,Ogo,bh,hie,Vgo,Xgo,rI,zgo,Qgo,Wgo,$s,uie,Hgo,Ugo,tI,Jgo,Ygo,aI,Kgo,Zgo,eho,vh,pie,oho,rho,nI,tho,aho,nho,Fh,_ie,sho,lho,sI,iho,dho,cho,Th,bie,mho,fho,lI,gho,hho,uho,Mh,vie,pho,_ho,iI,bho,vho,Fho,ks,Fie,Tho,Mho,dI,Eho,Cho,cI,who,Aho,Lho,Eh,Tie,yho,xho,mI,$ho,kho,Sho,Ss,Mie,Rho,Pho,fI,Bho,Nho,gI,Iho,qho,jho,Rs,Eie,Dho,Gho,hI,Oho,Vho,uI,Xho,zho,Qho,Ps,Cie,Who,Hho,pI,Uho,Jho,_I,Yho,Kho,Zho,Bs,wie,euo,ouo,bI,ruo,tuo,vI,auo,nuo,suo,Ns,Aie,luo,iuo,FI,duo,cuo,TI,muo,fuo,guo,Is,Lie,huo,uuo,MI,puo,_uo,EI,buo,vuo,Fuo,Ch,yie,Tuo,Muo,CI,Euo,Cuo,wuo,wh,xie,Auo,Luo,wI,yuo,xuo,$uo,qs,$ie,kuo,Suo,AI,Ruo,Puo,LI,Buo,Nuo,Iuo,js,kie,quo,juo,yI,Duo,Guo,xI,Ouo,Vuo,Xuo,Ds,Sie,zuo,Quo,$I,Wuo,Huo,kI,Uuo,Juo,Yuo,Ah,Rie,Kuo,Zuo,SI,epo,opo,rpo,Lh,Pie,tpo,apo,RI,npo,spo,lpo,yh,Bie,ipo,dpo,PI,cpo,mpo,fpo,Gs,Nie,gpo,hpo,BI,upo,ppo,NI,_po,bpo,vpo,Os,Iie,Fpo,Tpo,II,Mpo,Epo,qI,Cpo,wpo,Apo,xh,qie,Lpo,ypo,jI,xpo,$po,kpo,$h,jie,Spo,Rpo,DI,Ppo,Bpo,Npo,kh,Die,Ipo,qpo,GI,jpo,Dpo,Gpo,Vs,Gie,Opo,Vpo,OI,Xpo,zpo,VI,Qpo,Wpo,Hpo,Sh,Oie,Upo,Jpo,XI,Ypo,Kpo,Zpo,Rh,Vie,e_o,o_o,zI,r_o,t_o,a_o,Xs,Xie,n_o,s_o,QI,l_o,i_o,WI,d_o,c_o,m_o,zs,zie,f_o,g_o,HI,h_o,u_o,UI,p_o,__o,b_o,Qs,Qie,v_o,F_o,JI,T_o,M_o,YI,E_o,C_o,w_o,Ws,Wie,A_o,L_o,KI,y_o,x_o,ZI,$_o,k_o,S_o,Ph,R_o,Bh,Fy,P_o,Hie,B_o,vXe,ji,Nh,Uie,Ty,N_o,Jie,I_o,FXe,yo,My,q_o,Ey,j_o,eq,D_o,G_o,O_o,Cy,V_o,Yie,X_o,z_o,Q_o,Ue,wy,W_o,Kie,H_o,U_o,Ba,J_o,Zie,Y_o,K_o,ede,Z_o,e2o,ode,o2o,r2o,t2o,Y,Ih,rde,a2o,n2o,oq,s2o,l2o,i2o,qh,tde,d2o,c2o,rq,m2o,f2o,g2o,jh,ade,h2o,u2o,tq,p2o,_2o,b2o,Dh,nde,v2o,F2o,aq,T2o,M2o,E2o,Gh,sde,C2o,w2o,nq,A2o,L2o,y2o,Oh,lde,x2o,$2o,sq,k2o,S2o,R2o,Vh,ide,P2o,B2o,lq,N2o,I2o,q2o,Xh,dde,j2o,D2o,iq,G2o,O2o,V2o,zh,cde,X2o,z2o,dq,Q2o,W2o,H2o,Qh,mde,U2o,J2o,cq,Y2o,K2o,Z2o,Wh,fde,ebo,obo,mq,rbo,tbo,abo,Hh,gde,nbo,sbo,fq,lbo,ibo,dbo,Uh,hde,cbo,mbo,gq,fbo,gbo,hbo,Jh,ude,ubo,pbo,hq,_bo,bbo,vbo,Yh,pde,Fbo,Tbo,uq,Mbo,Ebo,Cbo,Kh,_de,wbo,Abo,pq,Lbo,ybo,xbo,Zh,bde,$bo,kbo,_q,Sbo,Rbo,Pbo,eu,vde,Bbo,Nbo,bq,Ibo,qbo,jbo,ou,Fde,Dbo,Gbo,vq,Obo,Vbo,Xbo,ru,Tde,zbo,Qbo,Fq,Wbo,Hbo,Ubo,tu,Mde,Jbo,Ybo,Tq,Kbo,Zbo,evo,au,Ede,ovo,rvo,Mq,tvo,avo,nvo,nu,Cde,svo,lvo,Eq,ivo,dvo,cvo,su,wde,mvo,fvo,Cq,gvo,hvo,uvo,lu,Ade,pvo,_vo,wq,bvo,vvo,Fvo,iu,Lde,Tvo,Mvo,Aq,Evo,Cvo,wvo,du,yde,Avo,Lvo,Lq,yvo,xvo,$vo,cu,xde,kvo,Svo,yq,Rvo,Pvo,Bvo,mu,$de,Nvo,Ivo,xq,qvo,jvo,Dvo,fu,kde,Gvo,Ovo,$q,Vvo,Xvo,zvo,gu,Sde,Qvo,Wvo,kq,Hvo,Uvo,Jvo,hu,Rde,Yvo,Kvo,Sq,Zvo,e1o,o1o,uu,Pde,r1o,t1o,Rq,a1o,n1o,s1o,pu,Bde,l1o,i1o,Pq,d1o,c1o,m1o,_u,f1o,bu,g1o,vu,Ay,h1o,Nde,u1o,TXe,Di,Fu,Ide,Ly,p1o,qde,_1o,MXe,xo,yy,b1o,xy,v1o,Bq,F1o,T1o,M1o,$y,E1o,jde,C1o,w1o,A1o,Je,ky,L1o,Dde,y1o,x1o,Gi,$1o,Gde,k1o,S1o,Ode,R1o,P1o,B1o,ue,Tu,Vde,N1o,I1o,Nq,q1o,j1o,D1o,Mu,Xde,G1o,O1o,zde,V1o,X1o,z1o,Eu,Qde,Q1o,W1o,Iq,H1o,U1o,J1o,Cu,Wde,Y1o,K1o,qq,Z1o,eFo,oFo,wu,Hde,rFo,tFo,jq,aFo,nFo,sFo,Au,Ude,lFo,iFo,Dq,dFo,cFo,mFo,Lu,Jde,fFo,gFo,Gq,hFo,uFo,pFo,yu,Yde,_Fo,bFo,Oq,vFo,FFo,TFo,xu,Kde,MFo,EFo,Vq,CFo,wFo,AFo,$u,Zde,LFo,yFo,Xq,xFo,$Fo,kFo,ku,ece,SFo,RFo,zq,PFo,BFo,NFo,Su,oce,IFo,qFo,Qq,jFo,DFo,GFo,Ru,rce,OFo,VFo,Wq,XFo,zFo,QFo,Pu,tce,WFo,HFo,Hq,UFo,JFo,YFo,Bu,ace,KFo,ZFo,Uq,eTo,oTo,rTo,Nu,nce,tTo,aTo,Jq,nTo,sTo,lTo,Iu,sce,iTo,dTo,Yq,cTo,mTo,fTo,qu,lce,gTo,hTo,Kq,uTo,pTo,_To,ju,bTo,Du,vTo,Gu,Sy,FTo,ice,TTo,EXe,Oi,Ou,dce,Ry,MTo,cce,ETo,CXe,$o,Py,CTo,Vi,wTo,Zq,ATo,LTo,ej,yTo,xTo,$To,By,kTo,mce,STo,RTo,PTo,it,Ny,BTo,fce,NTo,ITo,Xi,qTo,gce,jTo,DTo,oj,GTo,OTo,VTo,Vu,XTo,Ye,Iy,zTo,hce,QTo,WTo,Na,HTo,uce,UTo,JTo,pce,YTo,KTo,_ce,ZTo,eMo,oMo,y,Xu,bce,rMo,tMo,rj,aMo,nMo,sMo,zu,vce,lMo,iMo,tj,dMo,cMo,mMo,Qu,Fce,fMo,gMo,aj,hMo,uMo,pMo,Wu,Tce,_Mo,bMo,nj,vMo,FMo,TMo,Hu,Mce,MMo,EMo,sj,CMo,wMo,AMo,Uu,Ece,LMo,yMo,lj,xMo,$Mo,kMo,Ju,Cce,SMo,RMo,ij,PMo,BMo,NMo,Yu,wce,IMo,qMo,dj,jMo,DMo,GMo,Ku,Ace,OMo,VMo,cj,XMo,zMo,QMo,Zu,Lce,WMo,HMo,mj,UMo,JMo,YMo,ep,yce,KMo,ZMo,fj,e4o,o4o,r4o,op,xce,t4o,a4o,gj,n4o,s4o,l4o,rp,$ce,i4o,d4o,hj,c4o,m4o,f4o,tp,kce,g4o,h4o,uj,u4o,p4o,_4o,ap,Sce,b4o,v4o,pj,F4o,T4o,M4o,np,Rce,E4o,C4o,_j,w4o,A4o,L4o,sp,Pce,y4o,x4o,bj,$4o,k4o,S4o,lp,Bce,R4o,P4o,vj,B4o,N4o,I4o,ip,Nce,q4o,j4o,Fj,D4o,G4o,O4o,dp,Ice,V4o,X4o,Tj,z4o,Q4o,W4o,cp,qce,H4o,U4o,Mj,J4o,Y4o,K4o,mp,jce,Z4o,eEo,Ej,oEo,rEo,tEo,fp,Dce,aEo,nEo,Cj,sEo,lEo,iEo,gp,Gce,dEo,cEo,wj,mEo,fEo,gEo,hp,Oce,hEo,uEo,Aj,pEo,_Eo,bEo,up,Vce,vEo,FEo,Lj,TEo,MEo,EEo,pp,Xce,CEo,wEo,yj,AEo,LEo,yEo,_p,zce,xEo,$Eo,xj,kEo,SEo,REo,bp,Qce,PEo,BEo,$j,NEo,IEo,qEo,vp,Wce,jEo,DEo,kj,GEo,OEo,VEo,Fp,Hce,XEo,zEo,Sj,QEo,WEo,HEo,Tp,Uce,UEo,JEo,Rj,YEo,KEo,ZEo,Mp,Jce,eCo,oCo,Pj,rCo,tCo,aCo,Ep,Yce,nCo,sCo,Bj,lCo,iCo,dCo,Hs,Kce,cCo,mCo,Nj,fCo,gCo,Ij,hCo,uCo,pCo,Cp,Zce,_Co,bCo,qj,vCo,FCo,TCo,wp,eme,MCo,ECo,jj,CCo,wCo,ACo,Ap,ome,LCo,yCo,Dj,xCo,$Co,kCo,Lp,rme,SCo,RCo,Gj,PCo,BCo,NCo,yp,tme,ICo,qCo,Oj,jCo,DCo,GCo,xp,ame,OCo,VCo,Vj,XCo,zCo,QCo,$p,nme,WCo,HCo,Xj,UCo,JCo,YCo,kp,sme,KCo,ZCo,zj,e3o,o3o,r3o,Sp,lme,t3o,a3o,Qj,n3o,s3o,l3o,Rp,ime,i3o,d3o,Wj,c3o,m3o,f3o,Pp,dme,g3o,h3o,Hj,u3o,p3o,_3o,Bp,cme,b3o,v3o,Uj,F3o,T3o,M3o,Np,mme,E3o,C3o,Jj,w3o,A3o,L3o,Ip,fme,y3o,x3o,Yj,$3o,k3o,S3o,qp,gme,R3o,P3o,Kj,B3o,N3o,I3o,jp,hme,q3o,j3o,Zj,D3o,G3o,O3o,Dp,ume,V3o,X3o,eD,z3o,Q3o,W3o,Gp,pme,H3o,U3o,oD,J3o,Y3o,K3o,Op,_me,Z3o,e5o,rD,o5o,r5o,t5o,Vp,bme,a5o,n5o,tD,s5o,l5o,i5o,Xp,vme,d5o,c5o,aD,m5o,f5o,g5o,zp,Fme,h5o,u5o,nD,p5o,_5o,b5o,Qp,Tme,v5o,F5o,sD,T5o,M5o,E5o,Wp,Mme,C5o,w5o,lD,A5o,L5o,y5o,Hp,Eme,x5o,$5o,iD,k5o,S5o,R5o,Up,Cme,P5o,B5o,dD,N5o,I5o,q5o,Jp,wme,j5o,D5o,cD,G5o,O5o,V5o,Yp,Ame,X5o,z5o,mD,Q5o,W5o,H5o,Kp,Lme,U5o,J5o,fD,Y5o,K5o,Z5o,Zp,yme,e0o,o0o,gD,r0o,t0o,a0o,e_,xme,n0o,s0o,hD,l0o,i0o,d0o,o_,$me,c0o,m0o,uD,f0o,g0o,h0o,r_,kme,u0o,p0o,pD,_0o,b0o,v0o,t_,Sme,F0o,T0o,_D,M0o,E0o,C0o,a_,Rme,w0o,A0o,bD,L0o,y0o,x0o,n_,Pme,$0o,k0o,vD,S0o,R0o,P0o,s_,Bme,B0o,N0o,FD,I0o,q0o,j0o,l_,Nme,D0o,G0o,TD,O0o,V0o,X0o,i_,Ime,z0o,Q0o,MD,W0o,H0o,U0o,d_,qme,J0o,Y0o,ED,K0o,Z0o,ewo,c_,jme,owo,rwo,CD,two,awo,nwo,m_,Dme,swo,lwo,wD,iwo,dwo,cwo,f_,Gme,mwo,fwo,AD,gwo,hwo,uwo,g_,Ome,pwo,_wo,LD,bwo,vwo,Fwo,h_,Vme,Two,Mwo,yD,Ewo,Cwo,wwo,u_,Xme,Awo,Lwo,xD,ywo,xwo,$wo,p_,zme,kwo,Swo,$D,Rwo,Pwo,Bwo,__,Qme,Nwo,Iwo,kD,qwo,jwo,Dwo,b_,Wme,Gwo,Owo,SD,Vwo,Xwo,zwo,v_,Hme,Qwo,Wwo,RD,Hwo,Uwo,Jwo,F_,Ume,Ywo,Kwo,PD,Zwo,eAo,oAo,T_,Jme,rAo,tAo,BD,aAo,nAo,sAo,M_,Yme,lAo,iAo,ND,dAo,cAo,mAo,E_,Kme,fAo,gAo,ID,hAo,uAo,pAo,C_,Zme,_Ao,bAo,qD,vAo,FAo,TAo,w_,efe,MAo,EAo,jD,CAo,wAo,AAo,A_,ofe,LAo,yAo,DD,xAo,$Ao,kAo,L_,rfe,SAo,RAo,GD,PAo,BAo,NAo,y_,tfe,IAo,qAo,OD,jAo,DAo,GAo,x_,afe,OAo,VAo,VD,XAo,zAo,QAo,$_,nfe,WAo,HAo,XD,UAo,JAo,YAo,k_,sfe,KAo,ZAo,zD,e6o,o6o,r6o,S_,lfe,t6o,a6o,QD,n6o,s6o,l6o,R_,ife,i6o,d6o,WD,c6o,m6o,f6o,P_,dfe,g6o,h6o,HD,u6o,p6o,_6o,B_,cfe,b6o,v6o,UD,F6o,T6o,M6o,N_,mfe,E6o,C6o,JD,w6o,A6o,L6o,I_,ffe,y6o,x6o,YD,$6o,k6o,S6o,q_,gfe,R6o,P6o,KD,B6o,N6o,I6o,j_,hfe,q6o,j6o,ZD,D6o,G6o,O6o,D_,ufe,V6o,X6o,eG,z6o,Q6o,W6o,G_,pfe,H6o,U6o,oG,J6o,Y6o,K6o,O_,_fe,Z6o,e7o,rG,o7o,r7o,t7o,V_,bfe,a7o,n7o,tG,s7o,l7o,i7o,X_,vfe,d7o,c7o,aG,m7o,f7o,g7o,z_,Ffe,h7o,u7o,nG,p7o,_7o,b7o,Q_,Tfe,v7o,F7o,sG,T7o,M7o,E7o,W_,C7o,Mfe,w7o,A7o,Efe,L7o,y7o,H_,wXe,zi,U_,Cfe,qy,x7o,wfe,$7o,AXe,ko,jy,k7o,Qi,S7o,lG,R7o,P7o,iG,B7o,N7o,I7o,Dy,q7o,Afe,j7o,D7o,G7o,dt,Gy,O7o,Lfe,V7o,X7o,Wi,z7o,yfe,Q7o,W7o,dG,H7o,U7o,J7o,J_,Y7o,Ke,Oy,K7o,xfe,Z7o,eLo,Ia,oLo,$fe,rLo,tLo,kfe,aLo,nLo,Sfe,sLo,lLo,iLo,G,Y_,Rfe,dLo,cLo,cG,mLo,fLo,gLo,K_,Pfe,hLo,uLo,mG,pLo,_Lo,bLo,Z_,Bfe,vLo,FLo,fG,TLo,MLo,ELo,e2,Nfe,CLo,wLo,gG,ALo,LLo,yLo,o2,Ife,xLo,$Lo,hG,kLo,SLo,RLo,r2,qfe,PLo,BLo,uG,NLo,ILo,qLo,t2,jfe,jLo,DLo,pG,GLo,OLo,VLo,a2,Dfe,XLo,zLo,_G,QLo,WLo,HLo,n2,Gfe,ULo,JLo,bG,YLo,KLo,ZLo,s2,Ofe,eyo,oyo,vG,ryo,tyo,ayo,l2,Vfe,nyo,syo,FG,lyo,iyo,dyo,i2,Xfe,cyo,myo,TG,fyo,gyo,hyo,d2,zfe,uyo,pyo,MG,_yo,byo,vyo,c2,Qfe,Fyo,Tyo,EG,Myo,Eyo,Cyo,m2,Wfe,wyo,Ayo,CG,Lyo,yyo,xyo,f2,Hfe,$yo,kyo,wG,Syo,Ryo,Pyo,g2,Ufe,Byo,Nyo,AG,Iyo,qyo,jyo,h2,Jfe,Dyo,Gyo,LG,Oyo,Vyo,Xyo,u2,Yfe,zyo,Qyo,yG,Wyo,Hyo,Uyo,p2,Kfe,Jyo,Yyo,xG,Kyo,Zyo,e8o,_2,Zfe,o8o,r8o,$G,t8o,a8o,n8o,b2,ege,s8o,l8o,kG,i8o,d8o,c8o,v2,oge,m8o,f8o,SG,g8o,h8o,u8o,F2,rge,p8o,_8o,RG,b8o,v8o,F8o,T2,tge,T8o,M8o,PG,E8o,C8o,w8o,M2,age,A8o,L8o,BG,y8o,x8o,$8o,E2,nge,k8o,S8o,NG,R8o,P8o,B8o,C2,sge,N8o,I8o,IG,q8o,j8o,D8o,w2,lge,G8o,O8o,qG,V8o,X8o,z8o,A2,ige,Q8o,W8o,jG,H8o,U8o,J8o,L2,dge,Y8o,K8o,DG,Z8o,e9o,o9o,y2,cge,r9o,t9o,GG,a9o,n9o,s9o,x2,mge,l9o,i9o,OG,d9o,c9o,m9o,$2,fge,f9o,g9o,VG,h9o,u9o,p9o,k2,gge,_9o,b9o,XG,v9o,F9o,T9o,S2,hge,M9o,E9o,zG,C9o,w9o,A9o,R2,uge,L9o,y9o,QG,x9o,$9o,k9o,P2,pge,S9o,R9o,WG,P9o,B9o,N9o,B2,_ge,I9o,q9o,HG,j9o,D9o,G9o,N2,bge,O9o,V9o,UG,X9o,z9o,Q9o,I2,vge,W9o,H9o,JG,U9o,J9o,Y9o,q2,Fge,K9o,Z9o,YG,exo,oxo,rxo,j2,Tge,txo,axo,KG,nxo,sxo,lxo,D2,Mge,ixo,dxo,ZG,cxo,mxo,fxo,G2,Ege,gxo,hxo,eO,uxo,pxo,_xo,O2,bxo,Cge,vxo,Fxo,wge,Txo,Mxo,V2,LXe,Hi,X2,Age,Vy,Exo,Lge,Cxo,yXe,So,Xy,wxo,Ui,Axo,oO,Lxo,yxo,rO,xxo,$xo,kxo,zy,Sxo,yge,Rxo,Pxo,Bxo,ct,Qy,Nxo,xge,Ixo,qxo,Ji,jxo,$ge,Dxo,Gxo,tO,Oxo,Vxo,Xxo,z2,zxo,Ze,Wy,Qxo,kge,Wxo,Hxo,qa,Uxo,Sge,Jxo,Yxo,Rge,Kxo,Zxo,Pge,e$o,o$o,r$o,z,Q2,Bge,t$o,a$o,aO,n$o,s$o,l$o,W2,Nge,i$o,d$o,nO,c$o,m$o,f$o,H2,Ige,g$o,h$o,sO,u$o,p$o,_$o,U2,qge,b$o,v$o,lO,F$o,T$o,M$o,J2,jge,E$o,C$o,iO,w$o,A$o,L$o,Y2,Dge,y$o,x$o,dO,$$o,k$o,S$o,K2,Gge,R$o,P$o,cO,B$o,N$o,I$o,Z2,Oge,q$o,j$o,mO,D$o,G$o,O$o,eb,Vge,V$o,X$o,fO,z$o,Q$o,W$o,ob,Xge,H$o,U$o,gO,J$o,Y$o,K$o,rb,zge,Z$o,eko,hO,oko,rko,tko,tb,Qge,ako,nko,uO,sko,lko,iko,ab,Wge,dko,cko,pO,mko,fko,gko,nb,Hge,hko,uko,_O,pko,_ko,bko,sb,Uge,vko,Fko,bO,Tko,Mko,Eko,lb,Jge,Cko,wko,vO,Ako,Lko,yko,ib,Yge,xko,$ko,FO,kko,Sko,Rko,db,Kge,Pko,Bko,TO,Nko,Iko,qko,cb,Zge,jko,Dko,MO,Gko,Oko,Vko,mb,ehe,Xko,zko,EO,Qko,Wko,Hko,fb,ohe,Uko,Jko,CO,Yko,Kko,Zko,gb,rhe,eSo,oSo,wO,rSo,tSo,aSo,hb,the,nSo,sSo,AO,lSo,iSo,dSo,ub,ahe,cSo,mSo,LO,fSo,gSo,hSo,pb,nhe,uSo,pSo,yO,_So,bSo,vSo,_b,she,FSo,TSo,xO,MSo,ESo,CSo,bb,lhe,wSo,ASo,$O,LSo,ySo,xSo,vb,ihe,$So,kSo,kO,SSo,RSo,PSo,Fb,dhe,BSo,NSo,SO,ISo,qSo,jSo,Tb,che,DSo,GSo,RO,OSo,VSo,XSo,Mb,mhe,zSo,QSo,PO,WSo,HSo,USo,Eb,fhe,JSo,YSo,BO,KSo,ZSo,eRo,Cb,ghe,oRo,rRo,NO,tRo,aRo,nRo,wb,hhe,sRo,lRo,IO,iRo,dRo,cRo,Ab,uhe,mRo,fRo,qO,gRo,hRo,uRo,Lb,phe,pRo,_Ro,jO,bRo,vRo,FRo,yb,_he,TRo,MRo,DO,ERo,CRo,wRo,xb,bhe,ARo,LRo,GO,yRo,xRo,$Ro,$b,vhe,kRo,SRo,OO,RRo,PRo,BRo,kb,Fhe,NRo,IRo,VO,qRo,jRo,DRo,Sb,GRo,The,ORo,VRo,Mhe,XRo,zRo,Rb,xXe,Yi,Pb,Ehe,Hy,QRo,Che,WRo,$Xe,Ro,Uy,HRo,Ki,URo,XO,JRo,YRo,zO,KRo,ZRo,ePo,Jy,oPo,whe,rPo,tPo,aPo,mt,Yy,nPo,Ahe,sPo,lPo,Zi,iPo,Lhe,dPo,cPo,QO,mPo,fPo,gPo,Bb,hPo,eo,Ky,uPo,yhe,pPo,_Po,ja,bPo,xhe,vPo,FPo,$he,TPo,MPo,khe,EPo,CPo,wPo,W,Nb,She,APo,LPo,WO,yPo,xPo,$Po,Ib,Rhe,kPo,SPo,HO,RPo,PPo,BPo,qb,Phe,NPo,IPo,UO,qPo,jPo,DPo,jb,Bhe,GPo,OPo,JO,VPo,XPo,zPo,Db,Nhe,QPo,WPo,YO,HPo,UPo,JPo,Gb,Ihe,YPo,KPo,KO,ZPo,eBo,oBo,Ob,qhe,rBo,tBo,ZO,aBo,nBo,sBo,Vb,jhe,lBo,iBo,eV,dBo,cBo,mBo,Xb,Dhe,fBo,gBo,oV,hBo,uBo,pBo,zb,Ghe,_Bo,bBo,rV,vBo,FBo,TBo,Qb,Ohe,MBo,EBo,tV,CBo,wBo,ABo,Wb,Vhe,LBo,yBo,aV,xBo,$Bo,kBo,Hb,Xhe,SBo,RBo,nV,PBo,BBo,NBo,Ub,zhe,IBo,qBo,sV,jBo,DBo,GBo,Jb,Qhe,OBo,VBo,lV,XBo,zBo,QBo,Yb,Whe,WBo,HBo,iV,UBo,JBo,YBo,Kb,Hhe,KBo,ZBo,dV,eNo,oNo,rNo,Zb,Uhe,tNo,aNo,cV,nNo,sNo,lNo,ev,Jhe,iNo,dNo,mV,cNo,mNo,fNo,ov,Yhe,gNo,hNo,fV,uNo,pNo,_No,rv,Khe,bNo,vNo,gV,FNo,TNo,MNo,tv,Zhe,ENo,CNo,hV,wNo,ANo,LNo,av,eue,yNo,xNo,uV,$No,kNo,SNo,nv,oue,RNo,PNo,pV,BNo,NNo,INo,sv,rue,qNo,jNo,_V,DNo,GNo,ONo,lv,tue,VNo,XNo,bV,zNo,QNo,WNo,iv,aue,HNo,UNo,vV,JNo,YNo,KNo,dv,nue,ZNo,eIo,FV,oIo,rIo,tIo,cv,sue,aIo,nIo,TV,sIo,lIo,iIo,mv,lue,dIo,cIo,MV,mIo,fIo,gIo,fv,iue,hIo,uIo,EV,pIo,_Io,bIo,gv,due,vIo,FIo,CV,TIo,MIo,EIo,hv,cue,CIo,wIo,wV,AIo,LIo,yIo,uv,mue,xIo,$Io,fue,kIo,SIo,RIo,pv,gue,PIo,BIo,AV,NIo,IIo,qIo,_v,hue,jIo,DIo,LV,GIo,OIo,VIo,bv,uue,XIo,zIo,yV,QIo,WIo,HIo,vv,pue,UIo,JIo,xV,YIo,KIo,ZIo,Fv,eqo,_ue,oqo,rqo,bue,tqo,aqo,Tv,kXe,ed,Mv,vue,Zy,nqo,Fue,sqo,SXe,Po,e8,lqo,od,iqo,$V,dqo,cqo,kV,mqo,fqo,gqo,o8,hqo,Tue,uqo,pqo,_qo,ft,r8,bqo,Mue,vqo,Fqo,rd,Tqo,Eue,Mqo,Eqo,SV,Cqo,wqo,Aqo,Ev,Lqo,oo,t8,yqo,Cue,xqo,$qo,Da,kqo,wue,Sqo,Rqo,Aue,Pqo,Bqo,Lue,Nqo,Iqo,qqo,me,Cv,yue,jqo,Dqo,RV,Gqo,Oqo,Vqo,wv,xue,Xqo,zqo,PV,Qqo,Wqo,Hqo,Av,$ue,Uqo,Jqo,BV,Yqo,Kqo,Zqo,Lv,kue,ejo,ojo,NV,rjo,tjo,ajo,yv,Sue,njo,sjo,IV,ljo,ijo,djo,xv,Rue,cjo,mjo,qV,fjo,gjo,hjo,$v,Pue,ujo,pjo,jV,_jo,bjo,vjo,kv,Bue,Fjo,Tjo,DV,Mjo,Ejo,Cjo,Sv,Nue,wjo,Ajo,GV,Ljo,yjo,xjo,Rv,Iue,$jo,kjo,OV,Sjo,Rjo,Pjo,Pv,que,Bjo,Njo,VV,Ijo,qjo,jjo,Bv,jue,Djo,Gjo,XV,Ojo,Vjo,Xjo,Nv,Due,zjo,Qjo,zV,Wjo,Hjo,Ujo,Iv,Gue,Jjo,Yjo,QV,Kjo,Zjo,eDo,qv,Oue,oDo,rDo,WV,tDo,aDo,nDo,jv,Vue,sDo,lDo,HV,iDo,dDo,cDo,Dv,Xue,mDo,fDo,UV,gDo,hDo,uDo,Gv,zue,pDo,_Do,JV,bDo,vDo,FDo,Ov,Que,TDo,MDo,YV,EDo,CDo,wDo,Vv,ADo,Wue,LDo,yDo,Hue,xDo,$Do,Xv,RXe,td,zv,Uue,a8,kDo,Jue,SDo,PXe,Bo,n8,RDo,ad,PDo,KV,BDo,NDo,ZV,IDo,qDo,jDo,s8,DDo,Yue,GDo,ODo,VDo,gt,l8,XDo,Kue,zDo,QDo,nd,WDo,Zue,HDo,UDo,eX,JDo,YDo,KDo,Qv,ZDo,ro,i8,eGo,epe,oGo,rGo,Ga,tGo,ope,aGo,nGo,rpe,sGo,lGo,tpe,iGo,dGo,cGo,I,Wv,ape,mGo,fGo,oX,gGo,hGo,uGo,Hv,npe,pGo,_Go,rX,bGo,vGo,FGo,Uv,spe,TGo,MGo,tX,EGo,CGo,wGo,Jv,lpe,AGo,LGo,aX,yGo,xGo,$Go,Yv,ipe,kGo,SGo,nX,RGo,PGo,BGo,Kv,dpe,NGo,IGo,sX,qGo,jGo,DGo,Zv,cpe,GGo,OGo,lX,VGo,XGo,zGo,e1,mpe,QGo,WGo,iX,HGo,UGo,JGo,o1,fpe,YGo,KGo,dX,ZGo,eOo,oOo,r1,gpe,rOo,tOo,cX,aOo,nOo,sOo,t1,hpe,lOo,iOo,mX,dOo,cOo,mOo,a1,upe,fOo,gOo,fX,hOo,uOo,pOo,n1,ppe,_Oo,bOo,gX,vOo,FOo,TOo,s1,_pe,MOo,EOo,hX,COo,wOo,AOo,l1,bpe,LOo,yOo,uX,xOo,$Oo,kOo,i1,vpe,SOo,ROo,pX,POo,BOo,NOo,d1,Fpe,IOo,qOo,_X,jOo,DOo,GOo,c1,Tpe,OOo,VOo,bX,XOo,zOo,QOo,m1,Mpe,WOo,HOo,vX,UOo,JOo,YOo,f1,Epe,KOo,ZOo,FX,eVo,oVo,rVo,g1,Cpe,tVo,aVo,TX,nVo,sVo,lVo,h1,wpe,iVo,dVo,MX,cVo,mVo,fVo,u1,Ape,gVo,hVo,EX,uVo,pVo,_Vo,p1,Lpe,bVo,vVo,CX,FVo,TVo,MVo,_1,ype,EVo,CVo,wX,wVo,AVo,LVo,b1,xpe,yVo,xVo,AX,$Vo,kVo,SVo,v1,$pe,RVo,PVo,LX,BVo,NVo,IVo,F1,kpe,qVo,jVo,yX,DVo,GVo,OVo,T1,Spe,VVo,XVo,xX,zVo,QVo,WVo,M1,Rpe,HVo,UVo,$X,JVo,YVo,KVo,E1,Ppe,ZVo,eXo,kX,oXo,rXo,tXo,C1,Bpe,aXo,nXo,SX,sXo,lXo,iXo,w1,Npe,dXo,cXo,RX,mXo,fXo,gXo,A1,Ipe,hXo,uXo,PX,pXo,_Xo,bXo,L1,qpe,vXo,FXo,BX,TXo,MXo,EXo,y1,jpe,CXo,wXo,NX,AXo,LXo,yXo,x1,Dpe,xXo,$Xo,IX,kXo,SXo,RXo,$1,Gpe,PXo,BXo,qX,NXo,IXo,qXo,k1,Ope,jXo,DXo,jX,GXo,OXo,VXo,S1,Vpe,XXo,zXo,DX,QXo,WXo,HXo,R1,Xpe,UXo,JXo,GX,YXo,KXo,ZXo,P1,zpe,ezo,ozo,OX,rzo,tzo,azo,B1,Qpe,nzo,szo,VX,lzo,izo,dzo,N1,Wpe,czo,mzo,XX,fzo,gzo,hzo,I1,Hpe,uzo,pzo,zX,_zo,bzo,vzo,q1,Upe,Fzo,Tzo,QX,Mzo,Ezo,Czo,j1,Jpe,wzo,Azo,WX,Lzo,yzo,xzo,D1,Ype,$zo,kzo,HX,Szo,Rzo,Pzo,G1,Kpe,Bzo,Nzo,UX,Izo,qzo,jzo,O1,Zpe,Dzo,Gzo,JX,Ozo,Vzo,Xzo,V1,zzo,e_e,Qzo,Wzo,o_e,Hzo,Uzo,X1,BXe,sd,z1,r_e,d8,Jzo,t_e,Yzo,NXe,No,c8,Kzo,ld,Zzo,YX,eQo,oQo,KX,rQo,tQo,aQo,m8,nQo,a_e,sQo,lQo,iQo,ht,f8,dQo,n_e,cQo,mQo,id,fQo,s_e,gQo,hQo,ZX,uQo,pQo,_Qo,Q1,bQo,to,g8,vQo,l_e,FQo,TQo,Oa,MQo,i_e,EQo,CQo,d_e,wQo,AQo,c_e,LQo,yQo,xQo,Z,W1,m_e,$Qo,kQo,ez,SQo,RQo,PQo,H1,f_e,BQo,NQo,oz,IQo,qQo,jQo,U1,g_e,DQo,GQo,rz,OQo,VQo,XQo,J1,h_e,zQo,QQo,tz,WQo,HQo,UQo,Y1,u_e,JQo,YQo,az,KQo,ZQo,eWo,K1,p_e,oWo,rWo,nz,tWo,aWo,nWo,Z1,__e,sWo,lWo,sz,iWo,dWo,cWo,eF,b_e,mWo,fWo,lz,gWo,hWo,uWo,oF,v_e,pWo,_Wo,iz,bWo,vWo,FWo,rF,F_e,TWo,MWo,dz,EWo,CWo,wWo,tF,T_e,AWo,LWo,cz,yWo,xWo,$Wo,aF,M_e,kWo,SWo,mz,RWo,PWo,BWo,nF,E_e,NWo,IWo,fz,qWo,jWo,DWo,sF,C_e,GWo,OWo,gz,VWo,XWo,zWo,lF,w_e,QWo,WWo,hz,HWo,UWo,JWo,iF,A_e,YWo,KWo,uz,ZWo,eHo,oHo,dF,L_e,rHo,tHo,pz,aHo,nHo,sHo,cF,y_e,lHo,iHo,_z,dHo,cHo,mHo,mF,x_e,fHo,gHo,bz,hHo,uHo,pHo,fF,$_e,_Ho,bHo,vz,vHo,FHo,THo,gF,k_e,MHo,EHo,Fz,CHo,wHo,AHo,hF,S_e,LHo,yHo,Tz,xHo,$Ho,kHo,uF,R_e,SHo,RHo,Mz,PHo,BHo,NHo,pF,P_e,IHo,qHo,Ez,jHo,DHo,GHo,_F,B_e,OHo,VHo,Cz,XHo,zHo,QHo,bF,N_e,WHo,HHo,wz,UHo,JHo,YHo,vF,I_e,KHo,ZHo,Az,eUo,oUo,rUo,FF,q_e,tUo,aUo,Lz,nUo,sUo,lUo,TF,j_e,iUo,dUo,yz,cUo,mUo,fUo,MF,D_e,gUo,hUo,xz,uUo,pUo,_Uo,EF,bUo,G_e,vUo,FUo,O_e,TUo,MUo,CF,IXe,dd,wF,V_e,h8,EUo,X_e,CUo,qXe,Io,u8,wUo,cd,AUo,$z,LUo,yUo,kz,xUo,$Uo,kUo,p8,SUo,z_e,RUo,PUo,BUo,ut,_8,NUo,Q_e,IUo,qUo,md,jUo,W_e,DUo,GUo,Sz,OUo,VUo,XUo,AF,zUo,ao,b8,QUo,H_e,WUo,HUo,Va,UUo,U_e,JUo,YUo,J_e,KUo,ZUo,Y_e,eJo,oJo,rJo,qo,LF,K_e,tJo,aJo,Rz,nJo,sJo,lJo,yF,Z_e,iJo,dJo,Pz,cJo,mJo,fJo,xF,e2e,gJo,hJo,Bz,uJo,pJo,_Jo,$F,o2e,bJo,vJo,Nz,FJo,TJo,MJo,kF,r2e,EJo,CJo,Iz,wJo,AJo,LJo,SF,t2e,yJo,xJo,qz,$Jo,kJo,SJo,RF,RJo,a2e,PJo,BJo,n2e,NJo,IJo,PF,jXe,fd,BF,s2e,v8,qJo,l2e,jJo,DXe,jo,F8,DJo,gd,GJo,jz,OJo,VJo,Dz,XJo,zJo,QJo,T8,WJo,i2e,HJo,UJo,JJo,pt,M8,YJo,d2e,KJo,ZJo,hd,eYo,c2e,oYo,rYo,Gz,tYo,aYo,nYo,NF,sYo,no,E8,lYo,m2e,iYo,dYo,Xa,cYo,f2e,mYo,fYo,g2e,gYo,hYo,h2e,uYo,pYo,_Yo,U,IF,u2e,bYo,vYo,Oz,FYo,TYo,MYo,qF,p2e,EYo,CYo,Vz,wYo,AYo,LYo,jF,_2e,yYo,xYo,Xz,$Yo,kYo,SYo,DF,b2e,RYo,PYo,zz,BYo,NYo,IYo,GF,v2e,qYo,jYo,Qz,DYo,GYo,OYo,OF,F2e,VYo,XYo,Wz,zYo,QYo,WYo,VF,T2e,HYo,UYo,Hz,JYo,YYo,KYo,XF,M2e,ZYo,eKo,Uz,oKo,rKo,tKo,zF,E2e,aKo,nKo,Jz,sKo,lKo,iKo,QF,C2e,dKo,cKo,Yz,mKo,fKo,gKo,WF,w2e,hKo,uKo,Kz,pKo,_Ko,bKo,HF,A2e,vKo,FKo,Zz,TKo,MKo,EKo,UF,L2e,CKo,wKo,eQ,AKo,LKo,yKo,JF,y2e,xKo,$Ko,oQ,kKo,SKo,RKo,YF,x2e,PKo,BKo,rQ,NKo,IKo,qKo,KF,$2e,jKo,DKo,tQ,GKo,OKo,VKo,ZF,k2e,XKo,zKo,aQ,QKo,WKo,HKo,eT,S2e,UKo,JKo,nQ,YKo,KKo,ZKo,oT,R2e,eZo,oZo,sQ,rZo,tZo,aZo,rT,P2e,nZo,sZo,lQ,lZo,iZo,dZo,tT,B2e,cZo,mZo,iQ,fZo,gZo,hZo,aT,N2e,uZo,pZo,dQ,_Zo,bZo,vZo,nT,I2e,FZo,TZo,cQ,MZo,EZo,CZo,sT,q2e,wZo,AZo,mQ,LZo,yZo,xZo,lT,j2e,$Zo,kZo,fQ,SZo,RZo,PZo,iT,D2e,BZo,NZo,gQ,IZo,qZo,jZo,dT,G2e,DZo,GZo,hQ,OZo,VZo,XZo,cT,O2e,zZo,QZo,uQ,WZo,HZo,UZo,mT,V2e,JZo,YZo,pQ,KZo,ZZo,eer,fT,X2e,oer,rer,_Q,ter,aer,ner,gT,z2e,ser,ler,bQ,ier,der,cer,hT,Q2e,mer,fer,vQ,ger,her,uer,uT,W2e,per,_er,FQ,ber,ver,Fer,pT,H2e,Ter,Mer,TQ,Eer,Cer,wer,_T,U2e,Aer,Ler,MQ,yer,xer,$er,bT,J2e,ker,Ser,EQ,Rer,Per,Ber,vT,Ner,Y2e,Ier,qer,K2e,jer,Der,FT,GXe,ud,TT,Z2e,C8,Ger,ebe,Oer,OXe,Do,w8,Ver,pd,Xer,CQ,zer,Qer,wQ,Wer,Her,Uer,A8,Jer,obe,Yer,Ker,Zer,_t,L8,eor,rbe,oor,ror,_d,tor,tbe,aor,nor,AQ,sor,lor,ior,MT,dor,so,y8,cor,abe,mor,gor,za,hor,nbe,uor,por,sbe,_or,bor,lbe,vor,For,Tor,V,ET,ibe,Mor,Eor,LQ,Cor,wor,Aor,CT,dbe,Lor,yor,yQ,xor,$or,kor,wT,cbe,Sor,Ror,xQ,Por,Bor,Nor,AT,mbe,Ior,qor,$Q,jor,Dor,Gor,LT,fbe,Oor,Vor,kQ,Xor,zor,Qor,yT,gbe,Wor,Hor,SQ,Uor,Jor,Yor,xT,hbe,Kor,Zor,RQ,err,orr,rrr,$T,ube,trr,arr,PQ,nrr,srr,lrr,kT,pbe,irr,drr,BQ,crr,mrr,frr,ST,_be,grr,hrr,NQ,urr,prr,_rr,RT,bbe,brr,vrr,IQ,Frr,Trr,Mrr,PT,vbe,Err,Crr,qQ,wrr,Arr,Lrr,BT,Fbe,yrr,xrr,jQ,$rr,krr,Srr,NT,Tbe,Rrr,Prr,DQ,Brr,Nrr,Irr,IT,Mbe,qrr,jrr,GQ,Drr,Grr,Orr,qT,Ebe,Vrr,Xrr,OQ,zrr,Qrr,Wrr,jT,Cbe,Hrr,Urr,VQ,Jrr,Yrr,Krr,DT,wbe,Zrr,etr,XQ,otr,rtr,ttr,GT,Abe,atr,ntr,zQ,str,ltr,itr,OT,Lbe,dtr,ctr,QQ,mtr,ftr,gtr,VT,ybe,htr,utr,WQ,ptr,_tr,btr,XT,xbe,vtr,Ftr,HQ,Ttr,Mtr,Etr,zT,$be,Ctr,wtr,UQ,Atr,Ltr,ytr,QT,kbe,xtr,$tr,JQ,ktr,Str,Rtr,WT,Sbe,Ptr,Btr,YQ,Ntr,Itr,qtr,HT,Rbe,jtr,Dtr,KQ,Gtr,Otr,Vtr,UT,Pbe,Xtr,ztr,ZQ,Qtr,Wtr,Htr,JT,Bbe,Utr,Jtr,eW,Ytr,Ktr,Ztr,YT,Nbe,ear,oar,oW,rar,tar,aar,KT,Ibe,nar,sar,rW,lar,iar,dar,ZT,qbe,car,mar,tW,far,gar,har,eM,jbe,uar,par,aW,_ar,bar,Far,oM,Dbe,Tar,Mar,nW,Ear,Car,war,rM,Gbe,Aar,Lar,sW,yar,xar,$ar,tM,Obe,kar,Sar,lW,Rar,Par,Bar,aM,Vbe,Nar,Iar,iW,qar,jar,Dar,nM,Xbe,Gar,Oar,dW,Var,Xar,zar,sM,zbe,Qar,War,cW,Har,Uar,Jar,lM,Qbe,Yar,Kar,mW,Zar,enr,onr,iM,Wbe,rnr,tnr,fW,anr,nnr,snr,dM,Hbe,lnr,inr,gW,dnr,cnr,mnr,cM,Ube,fnr,gnr,hW,hnr,unr,pnr,mM,_nr,Jbe,bnr,vnr,Ybe,Fnr,Tnr,fM,VXe,bd,gM,Kbe,x8,Mnr,Zbe,Enr,XXe,Go,$8,Cnr,vd,wnr,uW,Anr,Lnr,pW,ynr,xnr,$nr,k8,knr,eve,Snr,Rnr,Pnr,bt,S8,Bnr,ove,Nnr,Inr,Fd,qnr,rve,jnr,Dnr,_W,Gnr,Onr,Vnr,hM,Xnr,lo,R8,znr,tve,Qnr,Wnr,Qa,Hnr,ave,Unr,Jnr,nve,Ynr,Knr,sve,Znr,esr,osr,lve,uM,ive,rsr,tsr,bW,asr,nsr,ssr,pM,lsr,dve,isr,dsr,cve,csr,msr,_M,zXe,Td,bM,mve,P8,fsr,fve,gsr,QXe,Oo,B8,hsr,Md,usr,vW,psr,_sr,FW,bsr,vsr,Fsr,N8,Tsr,gve,Msr,Esr,Csr,vt,I8,wsr,hve,Asr,Lsr,Ed,ysr,uve,xsr,$sr,TW,ksr,Ssr,Rsr,vM,Psr,io,q8,Bsr,pve,Nsr,Isr,Wa,qsr,_ve,jsr,Dsr,bve,Gsr,Osr,vve,Vsr,Xsr,zsr,ve,FM,Fve,Qsr,Wsr,MW,Hsr,Usr,Jsr,TM,Tve,Ysr,Ksr,EW,Zsr,elr,olr,MM,Mve,rlr,tlr,CW,alr,nlr,slr,EM,Eve,llr,ilr,wW,dlr,clr,mlr,Us,Cve,flr,glr,AW,hlr,ulr,LW,plr,_lr,blr,CM,wve,vlr,Flr,yW,Tlr,Mlr,Elr,Js,Ave,Clr,wlr,xW,Alr,Llr,$W,ylr,xlr,$lr,wM,Lve,klr,Slr,kW,Rlr,Plr,Blr,Ft,yve,Nlr,Ilr,SW,qlr,jlr,RW,Dlr,Glr,PW,Olr,Vlr,Xlr,AM,xve,zlr,Qlr,BW,Wlr,Hlr,Ulr,LM,$ve,Jlr,Ylr,NW,Klr,Zlr,eir,yM,kve,oir,rir,IW,tir,air,nir,xM,Sve,sir,lir,qW,iir,dir,cir,$M,Rve,mir,fir,jW,gir,hir,uir,kM,Pve,pir,_ir,DW,bir,vir,Fir,SM,Bve,Tir,Mir,GW,Eir,Cir,wir,RM,Air,Nve,Lir,yir,Ive,xir,$ir,PM,WXe,Cd,BM,qve,j8,kir,jve,Sir,HXe,Vo,D8,Rir,wd,Pir,OW,Bir,Nir,VW,Iir,qir,jir,G8,Dir,Dve,Gir,Oir,Vir,Tt,O8,Xir,Gve,zir,Qir,Ad,Wir,Ove,Hir,Uir,XW,Jir,Yir,Kir,NM,Zir,co,V8,edr,Vve,odr,rdr,Ha,tdr,Xve,adr,ndr,zve,sdr,ldr,Qve,idr,ddr,cdr,Wve,IM,Hve,mdr,fdr,zW,gdr,hdr,udr,qM,pdr,Uve,_dr,bdr,Jve,vdr,Fdr,jM,UXe,Ld,DM,Yve,X8,Tdr,Kve,Mdr,JXe,Xo,z8,Edr,yd,Cdr,QW,wdr,Adr,WW,Ldr,ydr,xdr,Q8,$dr,Zve,kdr,Sdr,Rdr,Mt,W8,Pdr,e1e,Bdr,Ndr,xd,Idr,o1e,qdr,jdr,HW,Ddr,Gdr,Odr,GM,Vdr,mo,H8,Xdr,r1e,zdr,Qdr,Ua,Wdr,t1e,Hdr,Udr,a1e,Jdr,Ydr,n1e,Kdr,Zdr,ecr,s1e,OM,l1e,ocr,rcr,UW,tcr,acr,ncr,VM,scr,i1e,lcr,icr,d1e,dcr,ccr,XM,YXe,$d,zM,c1e,U8,mcr,m1e,fcr,KXe,zo,J8,gcr,kd,hcr,JW,ucr,pcr,YW,_cr,bcr,vcr,Y8,Fcr,f1e,Tcr,Mcr,Ecr,Et,K8,Ccr,g1e,wcr,Acr,Sd,Lcr,h1e,ycr,xcr,KW,$cr,kcr,Scr,QM,Rcr,fo,Z8,Pcr,u1e,Bcr,Ncr,Ja,Icr,p1e,qcr,jcr,_1e,Dcr,Gcr,b1e,Ocr,Vcr,Xcr,Pe,WM,v1e,zcr,Qcr,ZW,Wcr,Hcr,Ucr,HM,F1e,Jcr,Ycr,eH,Kcr,Zcr,emr,UM,T1e,omr,rmr,oH,tmr,amr,nmr,JM,M1e,smr,lmr,rH,imr,dmr,cmr,YM,E1e,mmr,fmr,tH,gmr,hmr,umr,KM,C1e,pmr,_mr,aH,bmr,vmr,Fmr,ZM,w1e,Tmr,Mmr,nH,Emr,Cmr,wmr,e4,A1e,Amr,Lmr,sH,ymr,xmr,$mr,o4,L1e,kmr,Smr,lH,Rmr,Pmr,Bmr,r4,Nmr,y1e,Imr,qmr,x1e,jmr,Dmr,t4,ZXe,Rd,a4,$1e,e9,Gmr,k1e,Omr,eze,Qo,o9,Vmr,Pd,Xmr,iH,zmr,Qmr,dH,Wmr,Hmr,Umr,r9,Jmr,S1e,Ymr,Kmr,Zmr,Ct,t9,efr,R1e,ofr,rfr,Bd,tfr,P1e,afr,nfr,cH,sfr,lfr,ifr,n4,dfr,go,a9,cfr,B1e,mfr,ffr,Ya,gfr,N1e,hfr,ufr,I1e,pfr,_fr,q1e,bfr,vfr,Ffr,rt,s4,j1e,Tfr,Mfr,mH,Efr,Cfr,wfr,l4,D1e,Afr,Lfr,fH,yfr,xfr,$fr,i4,G1e,kfr,Sfr,gH,Rfr,Pfr,Bfr,d4,O1e,Nfr,Ifr,hH,qfr,jfr,Dfr,c4,V1e,Gfr,Ofr,uH,Vfr,Xfr,zfr,m4,Qfr,X1e,Wfr,Hfr,z1e,Ufr,Jfr,f4,oze,Nd,g4,Q1e,n9,Yfr,W1e,Kfr,rze,Wo,s9,Zfr,Id,egr,pH,ogr,rgr,_H,tgr,agr,ngr,l9,sgr,H1e,lgr,igr,dgr,wt,i9,cgr,U1e,mgr,fgr,qd,ggr,J1e,hgr,ugr,bH,pgr,_gr,bgr,h4,vgr,ho,d9,Fgr,Y1e,Tgr,Mgr,Ka,Egr,K1e,Cgr,wgr,Z1e,Agr,Lgr,eFe,ygr,xgr,$gr,Le,u4,oFe,kgr,Sgr,vH,Rgr,Pgr,Bgr,p4,rFe,Ngr,Igr,FH,qgr,jgr,Dgr,_4,tFe,Ggr,Ogr,TH,Vgr,Xgr,zgr,b4,aFe,Qgr,Wgr,MH,Hgr,Ugr,Jgr,v4,nFe,Ygr,Kgr,EH,Zgr,ehr,ohr,F4,sFe,rhr,thr,CH,ahr,nhr,shr,T4,lFe,lhr,ihr,wH,dhr,chr,mhr,M4,iFe,fhr,ghr,AH,hhr,uhr,phr,E4,dFe,_hr,bhr,LH,vhr,Fhr,Thr,C4,cFe,Mhr,Ehr,yH,Chr,whr,Ahr,w4,Lhr,mFe,yhr,xhr,fFe,$hr,khr,A4,tze,jd,L4,gFe,c9,Shr,hFe,Rhr,aze,Ho,m9,Phr,Dd,Bhr,xH,Nhr,Ihr,$H,qhr,jhr,Dhr,f9,Ghr,uFe,Ohr,Vhr,Xhr,At,g9,zhr,pFe,Qhr,Whr,Gd,Hhr,_Fe,Uhr,Jhr,kH,Yhr,Khr,Zhr,y4,eur,uo,h9,our,bFe,rur,tur,Za,aur,vFe,nur,sur,FFe,lur,iur,TFe,dur,cur,mur,u9,x4,MFe,fur,gur,SH,hur,uur,pur,$4,EFe,_ur,bur,RH,vur,Fur,Tur,k4,Mur,CFe,Eur,Cur,wFe,wur,Aur,S4,nze,Od,R4,AFe,p9,Lur,LFe,yur,sze,Uo,_9,xur,Vd,$ur,PH,kur,Sur,BH,Rur,Pur,Bur,b9,Nur,yFe,Iur,qur,jur,Lt,v9,Dur,xFe,Gur,Our,Xd,Vur,$Fe,Xur,zur,NH,Qur,Wur,Hur,P4,Uur,po,F9,Jur,kFe,Yur,Kur,en,Zur,SFe,epr,opr,RFe,rpr,tpr,PFe,apr,npr,spr,tt,B4,BFe,lpr,ipr,IH,dpr,cpr,mpr,N4,NFe,fpr,gpr,qH,hpr,upr,ppr,I4,IFe,_pr,bpr,jH,vpr,Fpr,Tpr,q4,qFe,Mpr,Epr,DH,Cpr,wpr,Apr,j4,jFe,Lpr,ypr,GH,xpr,$pr,kpr,D4,Spr,DFe,Rpr,Ppr,GFe,Bpr,Npr,G4,lze,zd,O4,OFe,T9,Ipr,VFe,qpr,ize,Jo,M9,jpr,Qd,Dpr,OH,Gpr,Opr,VH,Vpr,Xpr,zpr,E9,Qpr,XFe,Wpr,Hpr,Upr,yt,C9,Jpr,zFe,Ypr,Kpr,Wd,Zpr,QFe,e_r,o_r,XH,r_r,t_r,a_r,V4,n_r,_o,w9,s_r,WFe,l_r,i_r,on,d_r,HFe,c_r,m_r,UFe,f_r,g_r,JFe,h_r,u_r,p_r,Hd,X4,YFe,__r,b_r,zH,v_r,F_r,T_r,z4,KFe,M_r,E_r,QH,C_r,w_r,A_r,Q4,ZFe,L_r,y_r,WH,x_r,$_r,k_r,W4,S_r,eTe,R_r,P_r,oTe,B_r,N_r,H4,dze,Ud,U4,rTe,A9,I_r,tTe,q_r,cze,Yo,L9,j_r,Jd,D_r,HH,G_r,O_r,UH,V_r,X_r,z_r,y9,Q_r,aTe,W_r,H_r,U_r,xt,x9,J_r,nTe,Y_r,K_r,Yd,Z_r,sTe,e2r,o2r,JH,r2r,t2r,a2r,J4,n2r,bo,$9,s2r,lTe,l2r,i2r,rn,d2r,iTe,c2r,m2r,dTe,f2r,g2r,cTe,h2r,u2r,p2r,k9,Y4,mTe,_2r,b2r,YH,v2r,F2r,T2r,K4,fTe,M2r,E2r,KH,C2r,w2r,A2r,Z4,L2r,gTe,y2r,x2r,hTe,$2r,k2r,eE,mze,Kd,oE,uTe,S9,S2r,pTe,R2r,fze,Ko,R9,P2r,Zd,B2r,ZH,N2r,I2r,eU,q2r,j2r,D2r,P9,G2r,_Te,O2r,V2r,X2r,$t,B9,z2r,bTe,Q2r,W2r,ec,H2r,vTe,U2r,J2r,oU,Y2r,K2r,Z2r,rE,ebr,vo,N9,obr,FTe,rbr,tbr,tn,abr,TTe,nbr,sbr,MTe,lbr,ibr,ETe,dbr,cbr,mbr,CTe,tE,wTe,fbr,gbr,rU,hbr,ubr,pbr,aE,_br,ATe,bbr,vbr,LTe,Fbr,Tbr,nE,gze,oc,sE,yTe,I9,Mbr,xTe,Ebr,hze,Zo,q9,Cbr,rc,wbr,tU,Abr,Lbr,aU,ybr,xbr,$br,j9,kbr,$Te,Sbr,Rbr,Pbr,kt,D9,Bbr,kTe,Nbr,Ibr,tc,qbr,STe,jbr,Dbr,nU,Gbr,Obr,Vbr,lE,Xbr,Fo,G9,zbr,RTe,Qbr,Wbr,an,Hbr,PTe,Ubr,Jbr,BTe,Ybr,Kbr,NTe,Zbr,evr,ovr,at,iE,ITe,rvr,tvr,sU,avr,nvr,svr,dE,qTe,lvr,ivr,lU,dvr,cvr,mvr,cE,jTe,fvr,gvr,iU,hvr,uvr,pvr,mE,DTe,_vr,bvr,dU,vvr,Fvr,Tvr,fE,GTe,Mvr,Evr,cU,Cvr,wvr,Avr,gE,Lvr,OTe,yvr,xvr,VTe,$vr,kvr,hE,uze,ac,uE,XTe,O9,Svr,zTe,Rvr,pze,er,V9,Pvr,nc,Bvr,mU,Nvr,Ivr,fU,qvr,jvr,Dvr,X9,Gvr,QTe,Ovr,Vvr,Xvr,St,z9,zvr,WTe,Qvr,Wvr,sc,Hvr,HTe,Uvr,Jvr,gU,Yvr,Kvr,Zvr,pE,e1r,To,Q9,o1r,UTe,r1r,t1r,nn,a1r,JTe,n1r,s1r,YTe,l1r,i1r,KTe,d1r,c1r,m1r,ZTe,_E,eMe,f1r,g1r,hU,h1r,u1r,p1r,bE,_1r,oMe,b1r,v1r,rMe,F1r,T1r,vE,_ze,lc,FE,tMe,W9,M1r,aMe,E1r,bze,or,H9,C1r,ic,w1r,uU,A1r,L1r,pU,y1r,x1r,$1r,U9,k1r,nMe,S1r,R1r,P1r,Rt,J9,B1r,sMe,N1r,I1r,dc,q1r,lMe,j1r,D1r,_U,G1r,O1r,V1r,TE,X1r,xr,Y9,z1r,iMe,Q1r,W1r,sn,H1r,dMe,U1r,J1r,cMe,Y1r,K1r,mMe,Z1r,eFr,oFr,q,ME,fMe,rFr,tFr,bU,aFr,nFr,sFr,EE,gMe,lFr,iFr,vU,dFr,cFr,mFr,CE,hMe,fFr,gFr,FU,hFr,uFr,pFr,wE,uMe,_Fr,bFr,TU,vFr,FFr,TFr,AE,pMe,MFr,EFr,MU,CFr,wFr,AFr,LE,_Me,LFr,yFr,EU,xFr,$Fr,kFr,yE,bMe,SFr,RFr,CU,PFr,BFr,NFr,xE,vMe,IFr,qFr,wU,jFr,DFr,GFr,$E,FMe,OFr,VFr,AU,XFr,zFr,QFr,kE,TMe,WFr,HFr,LU,UFr,JFr,YFr,SE,MMe,KFr,ZFr,yU,eTr,oTr,rTr,RE,EMe,tTr,aTr,xU,nTr,sTr,lTr,PE,CMe,iTr,dTr,$U,cTr,mTr,fTr,BE,wMe,gTr,hTr,kU,uTr,pTr,_Tr,NE,AMe,bTr,vTr,SU,FTr,TTr,MTr,IE,LMe,ETr,CTr,RU,wTr,ATr,LTr,qE,yMe,yTr,xTr,PU,$Tr,kTr,STr,jE,xMe,RTr,PTr,BU,BTr,NTr,ITr,Ys,$Me,qTr,jTr,NU,DTr,GTr,IU,OTr,VTr,XTr,DE,kMe,zTr,QTr,qU,WTr,HTr,UTr,GE,SMe,JTr,YTr,jU,KTr,ZTr,eMr,OE,RMe,oMr,rMr,DU,tMr,aMr,nMr,VE,PMe,sMr,lMr,GU,iMr,dMr,cMr,XE,BMe,mMr,fMr,OU,gMr,hMr,uMr,zE,NMe,pMr,_Mr,VU,bMr,vMr,FMr,QE,IMe,TMr,MMr,XU,EMr,CMr,wMr,WE,qMe,AMr,LMr,zU,yMr,xMr,$Mr,HE,jMe,kMr,SMr,QU,RMr,PMr,BMr,UE,DMe,NMr,IMr,WU,qMr,jMr,DMr,JE,GMe,GMr,OMr,HU,VMr,XMr,zMr,YE,OMe,QMr,WMr,UU,HMr,UMr,JMr,KE,VMe,YMr,KMr,JU,ZMr,e4r,o4r,ZE,XMe,r4r,t4r,YU,a4r,n4r,s4r,eC,zMe,l4r,i4r,KU,d4r,c4r,m4r,oC,QMe,f4r,g4r,ZU,h4r,u4r,p4r,rC,WMe,_4r,b4r,eJ,v4r,F4r,T4r,tC,HMe,M4r,E4r,oJ,C4r,w4r,A4r,aC,UMe,L4r,y4r,rJ,x4r,$4r,k4r,nC,JMe,S4r,R4r,tJ,P4r,B4r,N4r,sC,YMe,I4r,q4r,aJ,j4r,D4r,G4r,lC,KMe,O4r,V4r,nJ,X4r,z4r,Q4r,iC,ZMe,W4r,H4r,sJ,U4r,J4r,Y4r,dC,e4e,K4r,Z4r,lJ,eEr,oEr,rEr,cC,o4e,tEr,aEr,iJ,nEr,sEr,lEr,mC,r4e,iEr,dEr,dJ,cEr,mEr,fEr,fC,t4e,gEr,hEr,cJ,uEr,pEr,_Er,gC,a4e,bEr,vEr,mJ,FEr,TEr,MEr,hC,n4e,EEr,CEr,fJ,wEr,AEr,LEr,uC,s4e,yEr,xEr,gJ,$Er,kEr,SEr,pC,l4e,REr,PEr,hJ,BEr,NEr,IEr,_C,vze,cc,bC,i4e,K9,qEr,d4e,jEr,Fze,rr,Z9,DEr,mc,GEr,uJ,OEr,VEr,pJ,XEr,zEr,QEr,ex,WEr,c4e,HEr,UEr,JEr,Pt,ox,YEr,m4e,KEr,ZEr,fc,eCr,f4e,oCr,rCr,_J,tCr,aCr,nCr,vC,sCr,$r,rx,lCr,g4e,iCr,dCr,ln,cCr,h4e,mCr,fCr,u4e,gCr,hCr,p4e,uCr,pCr,_Cr,se,FC,_4e,bCr,vCr,bJ,FCr,TCr,MCr,TC,b4e,ECr,CCr,vJ,wCr,ACr,LCr,MC,v4e,yCr,xCr,FJ,$Cr,kCr,SCr,EC,F4e,RCr,PCr,TJ,BCr,NCr,ICr,CC,T4e,qCr,jCr,MJ,DCr,GCr,OCr,wC,M4e,VCr,XCr,EJ,zCr,QCr,WCr,AC,E4e,HCr,UCr,CJ,JCr,YCr,KCr,LC,C4e,ZCr,e3r,wJ,o3r,r3r,t3r,yC,w4e,a3r,n3r,AJ,s3r,l3r,i3r,xC,A4e,d3r,c3r,LJ,m3r,f3r,g3r,$C,L4e,h3r,u3r,yJ,p3r,_3r,b3r,kC,y4e,v3r,F3r,xJ,T3r,M3r,E3r,SC,x4e,C3r,w3r,$J,A3r,L3r,y3r,RC,$4e,x3r,$3r,kJ,k3r,S3r,R3r,PC,k4e,P3r,B3r,SJ,N3r,I3r,q3r,BC,S4e,j3r,D3r,RJ,G3r,O3r,V3r,NC,R4e,X3r,z3r,PJ,Q3r,W3r,H3r,IC,P4e,U3r,J3r,BJ,Y3r,K3r,Z3r,qC,B4e,e5r,o5r,NJ,r5r,t5r,a5r,jC,N4e,n5r,s5r,IJ,l5r,i5r,d5r,DC,I4e,c5r,m5r,qJ,f5r,g5r,h5r,GC,q4e,u5r,p5r,jJ,_5r,b5r,v5r,OC,j4e,F5r,T5r,DJ,M5r,E5r,C5r,VC,Tze,gc,XC,D4e,tx,w5r,G4e,A5r,Mze,tr,ax,L5r,hc,y5r,GJ,x5r,$5r,OJ,k5r,S5r,R5r,nx,P5r,O4e,B5r,N5r,I5r,Bt,sx,q5r,V4e,j5r,D5r,uc,G5r,X4e,O5r,V5r,VJ,X5r,z5r,Q5r,zC,W5r,kr,lx,H5r,z4e,U5r,J5r,dn,Y5r,Q4e,K5r,Z5r,W4e,e0r,o0r,H4e,r0r,t0r,a0r,Me,QC,U4e,n0r,s0r,XJ,l0r,i0r,d0r,WC,J4e,c0r,m0r,zJ,f0r,g0r,h0r,HC,Y4e,u0r,p0r,QJ,_0r,b0r,v0r,UC,K4e,F0r,T0r,WJ,M0r,E0r,C0r,JC,Z4e,w0r,A0r,HJ,L0r,y0r,x0r,YC,eEe,$0r,k0r,UJ,S0r,R0r,P0r,KC,oEe,B0r,N0r,JJ,I0r,q0r,j0r,ZC,rEe,D0r,G0r,YJ,O0r,V0r,X0r,e3,tEe,z0r,Q0r,KJ,W0r,H0r,U0r,o3,aEe,J0r,Y0r,ZJ,K0r,Z0r,ewr,r3,nEe,owr,rwr,eY,twr,awr,nwr,t3,sEe,swr,lwr,oY,iwr,dwr,cwr,a3,lEe,mwr,fwr,rY,gwr,hwr,uwr,n3,Eze,pc,s3,iEe,ix,pwr,dEe,_wr,Cze,ar,dx,bwr,_c,vwr,tY,Fwr,Twr,aY,Mwr,Ewr,Cwr,cx,wwr,cEe,Awr,Lwr,ywr,Nt,mx,xwr,mEe,$wr,kwr,bc,Swr,fEe,Rwr,Pwr,nY,Bwr,Nwr,Iwr,l3,qwr,Sr,fx,jwr,gEe,Dwr,Gwr,cn,Owr,hEe,Vwr,Xwr,uEe,zwr,Qwr,pEe,Wwr,Hwr,Uwr,Qe,i3,_Ee,Jwr,Ywr,sY,Kwr,Zwr,eAr,d3,bEe,oAr,rAr,lY,tAr,aAr,nAr,Ks,vEe,sAr,lAr,iY,iAr,dAr,dY,cAr,mAr,fAr,c3,FEe,gAr,hAr,cY,uAr,pAr,_Ar,m3,TEe,bAr,vAr,mY,FAr,TAr,MAr,f3,MEe,EAr,CAr,fY,wAr,AAr,LAr,g3,EEe,yAr,xAr,gY,$Ar,kAr,SAr,h3,wze,vc,u3,CEe,gx,RAr,wEe,PAr,Aze,nr,hx,BAr,Fc,NAr,hY,IAr,qAr,uY,jAr,DAr,GAr,ux,OAr,AEe,VAr,XAr,zAr,It,px,QAr,LEe,WAr,HAr,Tc,UAr,yEe,JAr,YAr,pY,KAr,ZAr,e6r,p3,o6r,Rr,_x,r6r,xEe,t6r,a6r,mn,n6r,$Ee,s6r,l6r,kEe,i6r,d6r,SEe,c6r,m6r,f6r,ie,_3,REe,g6r,h6r,_Y,u6r,p6r,_6r,b3,PEe,b6r,v6r,bY,F6r,T6r,M6r,v3,BEe,E6r,C6r,vY,w6r,A6r,L6r,F3,NEe,y6r,x6r,FY,$6r,k6r,S6r,T3,IEe,R6r,P6r,TY,B6r,N6r,I6r,M3,qEe,q6r,j6r,MY,D6r,G6r,O6r,E3,jEe,V6r,X6r,EY,z6r,Q6r,W6r,C3,DEe,H6r,U6r,CY,J6r,Y6r,K6r,w3,GEe,Z6r,e7r,wY,o7r,r7r,t7r,A3,OEe,a7r,n7r,AY,s7r,l7r,i7r,L3,VEe,d7r,c7r,LY,m7r,f7r,g7r,y3,XEe,h7r,u7r,yY,p7r,_7r,b7r,x3,zEe,v7r,F7r,xY,T7r,M7r,E7r,$3,QEe,C7r,w7r,$Y,A7r,L7r,y7r,k3,WEe,x7r,$7r,kY,k7r,S7r,R7r,S3,HEe,P7r,B7r,SY,N7r,I7r,q7r,R3,UEe,j7r,D7r,RY,G7r,O7r,V7r,P3,JEe,X7r,z7r,PY,Q7r,W7r,H7r,B3,YEe,U7r,J7r,BY,Y7r,K7r,Z7r,N3,KEe,eLr,oLr,NY,rLr,tLr,aLr,I3,Lze,Mc,q3,ZEe,bx,nLr,eCe,sLr,yze,sr,vx,lLr,Ec,iLr,IY,dLr,cLr,qY,mLr,fLr,gLr,Fx,hLr,oCe,uLr,pLr,_Lr,qt,Tx,bLr,rCe,vLr,FLr,Cc,TLr,tCe,MLr,ELr,jY,CLr,wLr,ALr,j3,LLr,Pr,Mx,yLr,aCe,xLr,$Lr,fn,kLr,nCe,SLr,RLr,sCe,PLr,BLr,lCe,NLr,ILr,qLr,ye,D3,iCe,jLr,DLr,DY,GLr,OLr,VLr,G3,dCe,XLr,zLr,GY,QLr,WLr,HLr,O3,cCe,ULr,JLr,OY,YLr,KLr,ZLr,V3,mCe,eyr,oyr,VY,ryr,tyr,ayr,X3,fCe,nyr,syr,XY,lyr,iyr,dyr,z3,gCe,cyr,myr,zY,fyr,gyr,hyr,Q3,hCe,uyr,pyr,QY,_yr,byr,vyr,W3,uCe,Fyr,Tyr,WY,Myr,Eyr,Cyr,H3,pCe,wyr,Ayr,HY,Lyr,yyr,xyr,U3,_Ce,$yr,kyr,UY,Syr,Ryr,Pyr,J3,xze,wc,Y3,bCe,Ex,Byr,vCe,Nyr,$ze,lr,Cx,Iyr,Ac,qyr,JY,jyr,Dyr,YY,Gyr,Oyr,Vyr,wx,Xyr,FCe,zyr,Qyr,Wyr,jt,Ax,Hyr,TCe,Uyr,Jyr,Lc,Yyr,MCe,Kyr,Zyr,KY,e8r,o8r,r8r,K3,t8r,Br,Lx,a8r,ECe,n8r,s8r,gn,l8r,CCe,i8r,d8r,wCe,c8r,m8r,ACe,f8r,g8r,h8r,te,Z3,LCe,u8r,p8r,ZY,_8r,b8r,v8r,e5,yCe,F8r,T8r,eK,M8r,E8r,C8r,o5,xCe,w8r,A8r,oK,L8r,y8r,x8r,r5,$Ce,$8r,k8r,rK,S8r,R8r,P8r,t5,kCe,B8r,N8r,tK,I8r,q8r,j8r,a5,SCe,D8r,G8r,aK,O8r,V8r,X8r,n5,RCe,z8r,Q8r,nK,W8r,H8r,U8r,s5,PCe,J8r,Y8r,sK,K8r,Z8r,e9r,l5,BCe,o9r,r9r,lK,t9r,a9r,n9r,i5,NCe,s9r,l9r,iK,i9r,d9r,c9r,d5,ICe,m9r,f9r,dK,g9r,h9r,u9r,c5,qCe,p9r,_9r,cK,b9r,v9r,F9r,m5,jCe,T9r,M9r,mK,E9r,C9r,w9r,f5,DCe,A9r,L9r,fK,y9r,x9r,$9r,g5,GCe,k9r,S9r,gK,R9r,P9r,B9r,h5,OCe,N9r,I9r,hK,q9r,j9r,D9r,u5,VCe,G9r,O9r,uK,V9r,X9r,z9r,p5,XCe,Q9r,W9r,pK,H9r,U9r,J9r,_5,zCe,Y9r,K9r,_K,Z9r,exr,oxr,b5,QCe,rxr,txr,bK,axr,nxr,sxr,v5,WCe,lxr,ixr,vK,dxr,cxr,mxr,F5,HCe,fxr,gxr,FK,hxr,uxr,pxr,T5,UCe,_xr,bxr,TK,vxr,Fxr,Txr,M5,JCe,Mxr,Exr,MK,Cxr,wxr,Axr,E5,YCe,Lxr,yxr,EK,xxr,$xr,kxr,C5,KCe,Sxr,Rxr,CK,Pxr,Bxr,Nxr,w5,kze,yc,A5,ZCe,yx,Ixr,e3e,qxr,Sze,ir,xx,jxr,xc,Dxr,wK,Gxr,Oxr,AK,Vxr,Xxr,zxr,$x,Qxr,o3e,Wxr,Hxr,Uxr,Dt,kx,Jxr,r3e,Yxr,Kxr,$c,Zxr,t3e,e$r,o$r,LK,r$r,t$r,a$r,L5,n$r,Nr,Sx,s$r,a3e,l$r,i$r,hn,d$r,n3e,c$r,m$r,s3e,f$r,g$r,l3e,h$r,u$r,p$r,_e,y5,i3e,_$r,b$r,yK,v$r,F$r,T$r,x5,d3e,M$r,E$r,xK,C$r,w$r,A$r,$5,c3e,L$r,y$r,$K,x$r,$$r,k$r,k5,m3e,S$r,R$r,kK,P$r,B$r,N$r,S5,f3e,I$r,q$r,SK,j$r,D$r,G$r,R5,g3e,O$r,V$r,RK,X$r,z$r,Q$r,P5,h3e,W$r,H$r,PK,U$r,J$r,Y$r,B5,u3e,K$r,Z$r,BK,ekr,okr,rkr,N5,p3e,tkr,akr,NK,nkr,skr,lkr,I5,_3e,ikr,dkr,IK,ckr,mkr,fkr,q5,b3e,gkr,hkr,qK,ukr,pkr,_kr,j5,v3e,bkr,vkr,jK,Fkr,Tkr,Mkr,D5,F3e,Ekr,Ckr,DK,wkr,Akr,Lkr,G5,T3e,ykr,xkr,GK,$kr,kkr,Skr,O5,M3e,Rkr,Pkr,OK,Bkr,Nkr,Ikr,V5,E3e,qkr,jkr,VK,Dkr,Gkr,Okr,X5,C3e,Vkr,Xkr,XK,zkr,Qkr,Wkr,z5,Rze,kc,Q5,w3e,Rx,Hkr,A3e,Ukr,Pze,dr,Px,Jkr,Sc,Ykr,zK,Kkr,Zkr,QK,eSr,oSr,rSr,Bx,tSr,L3e,aSr,nSr,sSr,Gt,Nx,lSr,y3e,iSr,dSr,Rc,cSr,x3e,mSr,fSr,WK,gSr,hSr,uSr,W5,pSr,Ir,Ix,_Sr,$3e,bSr,vSr,un,FSr,k3e,TSr,MSr,S3e,ESr,CSr,R3e,wSr,ASr,LSr,qx,H5,P3e,ySr,xSr,HK,$Sr,kSr,SSr,U5,B3e,RSr,PSr,UK,BSr,NSr,ISr,J5,Bze,Pc,Y5,N3e,jx,qSr,I3e,jSr,Nze,cr,Dx,DSr,Bc,GSr,JK,OSr,VSr,YK,XSr,zSr,QSr,Gx,WSr,q3e,HSr,USr,JSr,Ot,Ox,YSr,j3e,KSr,ZSr,Nc,eRr,D3e,oRr,rRr,KK,tRr,aRr,nRr,K5,sRr,qr,Vx,lRr,G3e,iRr,dRr,pn,cRr,O3e,mRr,fRr,V3e,gRr,hRr,X3e,uRr,pRr,_Rr,z3e,Z5,Q3e,bRr,vRr,ZK,FRr,TRr,MRr,e0,Ize,Ic,o0,W3e,Xx,ERr,H3e,CRr,qze,mr,zx,wRr,qc,ARr,eZ,LRr,yRr,oZ,xRr,$Rr,kRr,Qx,SRr,U3e,RRr,PRr,BRr,Vt,Wx,NRr,J3e,IRr,qRr,jc,jRr,Y3e,DRr,GRr,rZ,ORr,VRr,XRr,r0,zRr,jr,Hx,QRr,K3e,WRr,HRr,_n,URr,Z3e,JRr,YRr,e5e,KRr,ZRr,o5e,ePr,oPr,rPr,de,t0,r5e,tPr,aPr,tZ,nPr,sPr,lPr,a0,t5e,iPr,dPr,aZ,cPr,mPr,fPr,n0,a5e,gPr,hPr,nZ,uPr,pPr,_Pr,s0,n5e,bPr,vPr,sZ,FPr,TPr,MPr,l0,s5e,EPr,CPr,lZ,wPr,APr,LPr,i0,l5e,yPr,xPr,iZ,$Pr,kPr,SPr,d0,i5e,RPr,PPr,dZ,BPr,NPr,IPr,c0,d5e,qPr,jPr,cZ,DPr,GPr,OPr,m0,c5e,VPr,XPr,mZ,zPr,QPr,WPr,f0,m5e,HPr,UPr,fZ,JPr,YPr,KPr,g0,f5e,ZPr,eBr,gZ,oBr,rBr,tBr,h0,g5e,aBr,nBr,hZ,sBr,lBr,iBr,u0,h5e,dBr,cBr,uZ,mBr,fBr,gBr,p0,u5e,hBr,uBr,pZ,pBr,_Br,bBr,_0,p5e,vBr,FBr,_Z,TBr,MBr,EBr,b0,_5e,CBr,wBr,bZ,ABr,LBr,yBr,v0,b5e,xBr,$Br,vZ,kBr,SBr,RBr,F0,v5e,PBr,BBr,FZ,NBr,IBr,qBr,T0,F5e,jBr,DBr,TZ,GBr,OBr,VBr,M0,T5e,XBr,zBr,MZ,QBr,WBr,HBr,E0,jze,Dc,C0,M5e,Ux,UBr,E5e,JBr,Dze,fr,Jx,YBr,Gc,KBr,EZ,ZBr,eNr,CZ,oNr,rNr,tNr,Yx,aNr,C5e,nNr,sNr,lNr,Xt,Kx,iNr,w5e,dNr,cNr,Oc,mNr,A5e,fNr,gNr,wZ,hNr,uNr,pNr,w0,_Nr,Dr,Zx,bNr,L5e,vNr,FNr,bn,TNr,y5e,MNr,ENr,x5e,CNr,wNr,$5e,ANr,LNr,yNr,ce,A0,k5e,xNr,$Nr,AZ,kNr,SNr,RNr,L0,S5e,PNr,BNr,LZ,NNr,INr,qNr,y0,R5e,jNr,DNr,yZ,GNr,ONr,VNr,x0,P5e,XNr,zNr,xZ,QNr,WNr,HNr,$0,B5e,UNr,JNr,$Z,YNr,KNr,ZNr,k0,N5e,eIr,oIr,kZ,rIr,tIr,aIr,S0,I5e,nIr,sIr,SZ,lIr,iIr,dIr,R0,q5e,cIr,mIr,RZ,fIr,gIr,hIr,P0,j5e,uIr,pIr,PZ,_Ir,bIr,vIr,B0,D5e,FIr,TIr,BZ,MIr,EIr,CIr,N0,G5e,wIr,AIr,NZ,LIr,yIr,xIr,I0,O5e,$Ir,kIr,IZ,SIr,RIr,PIr,q0,V5e,BIr,NIr,qZ,IIr,qIr,jIr,j0,X5e,DIr,GIr,jZ,OIr,VIr,XIr,D0,z5e,zIr,QIr,DZ,WIr,HIr,UIr,G0,Q5e,JIr,YIr,GZ,KIr,ZIr,eqr,O0,W5e,oqr,rqr,OZ,tqr,aqr,nqr,V0,H5e,sqr,lqr,VZ,iqr,dqr,cqr,X0,U5e,mqr,fqr,XZ,gqr,hqr,uqr,z0,J5e,pqr,_qr,zZ,bqr,vqr,Fqr,Q0,Gze,Vc,W0,Y5e,e$,Tqr,K5e,Mqr,Oze,gr,o$,Eqr,Xc,Cqr,QZ,wqr,Aqr,WZ,Lqr,yqr,xqr,r$,$qr,Z5e,kqr,Sqr,Rqr,zt,t$,Pqr,e0e,Bqr,Nqr,zc,Iqr,o0e,qqr,jqr,HZ,Dqr,Gqr,Oqr,H0,Vqr,Gr,a$,Xqr,r0e,zqr,Qqr,vn,Wqr,t0e,Hqr,Uqr,a0e,Jqr,Yqr,n0e,Kqr,Zqr,ejr,s0e,U0,l0e,ojr,rjr,UZ,tjr,ajr,njr,J0,Vze,Qc,Y0,i0e,n$,sjr,d0e,ljr,Xze,hr,s$,ijr,Wc,djr,JZ,cjr,mjr,YZ,fjr,gjr,hjr,l$,ujr,c0e,pjr,_jr,bjr,Qt,i$,vjr,m0e,Fjr,Tjr,Hc,Mjr,f0e,Ejr,Cjr,KZ,wjr,Ajr,Ljr,K0,yjr,Or,d$,xjr,g0e,$jr,kjr,Fn,Sjr,h0e,Rjr,Pjr,u0e,Bjr,Njr,p0e,Ijr,qjr,jjr,_0e,Z0,b0e,Djr,Gjr,ZZ,Ojr,Vjr,Xjr,ew,zze,Uc,ow,v0e,c$,zjr,F0e,Qjr,Qze,ur,m$,Wjr,Jc,Hjr,eee,Ujr,Jjr,oee,Yjr,Kjr,Zjr,f$,eDr,T0e,oDr,rDr,tDr,Wt,g$,aDr,M0e,nDr,sDr,Yc,lDr,E0e,iDr,dDr,ree,cDr,mDr,fDr,rw,gDr,Vr,h$,hDr,C0e,uDr,pDr,Tn,_Dr,w0e,bDr,vDr,A0e,FDr,TDr,L0e,MDr,EDr,CDr,oe,tw,y0e,wDr,ADr,tee,LDr,yDr,xDr,aw,x0e,$Dr,kDr,aee,SDr,RDr,PDr,nw,$0e,BDr,NDr,nee,IDr,qDr,jDr,sw,k0e,DDr,GDr,see,ODr,VDr,XDr,lw,S0e,zDr,QDr,lee,WDr,HDr,UDr,iw,R0e,JDr,YDr,iee,KDr,ZDr,eGr,dw,P0e,oGr,rGr,dee,tGr,aGr,nGr,cw,B0e,sGr,lGr,cee,iGr,dGr,cGr,mw,N0e,mGr,fGr,mee,gGr,hGr,uGr,fw,I0e,pGr,_Gr,fee,bGr,vGr,FGr,gw,q0e,TGr,MGr,gee,EGr,CGr,wGr,hw,j0e,AGr,LGr,hee,yGr,xGr,$Gr,uw,D0e,kGr,SGr,uee,RGr,PGr,BGr,pw,G0e,NGr,IGr,pee,qGr,jGr,DGr,_w,O0e,GGr,OGr,_ee,VGr,XGr,zGr,bw,V0e,QGr,WGr,bee,HGr,UGr,JGr,vw,X0e,YGr,KGr,vee,ZGr,eOr,oOr,Fw,z0e,rOr,tOr,Fee,aOr,nOr,sOr,Tw,Q0e,lOr,iOr,Tee,dOr,cOr,mOr,Mw,W0e,fOr,gOr,Mee,hOr,uOr,pOr,Ew,H0e,_Or,bOr,Eee,vOr,FOr,TOr,Cw,U0e,MOr,EOr,Cee,COr,wOr,AOr,ww,J0e,LOr,yOr,wee,xOr,$Or,kOr,Aw,Y0e,SOr,ROr,Aee,POr,BOr,NOr,Lw,K0e,IOr,qOr,Lee,jOr,DOr,GOr,yw,Z0e,OOr,VOr,yee,XOr,zOr,QOr,xw,ewe,WOr,HOr,xee,UOr,JOr,YOr,$w,Wze,Kc,kw,owe,u$,KOr,rwe,ZOr,Hze,pr,p$,eVr,Zc,oVr,$ee,rVr,tVr,kee,aVr,nVr,sVr,_$,lVr,twe,iVr,dVr,cVr,Ht,b$,mVr,awe,fVr,gVr,em,hVr,nwe,uVr,pVr,See,_Vr,bVr,vVr,Sw,FVr,Xr,v$,TVr,swe,MVr,EVr,Mn,CVr,lwe,wVr,AVr,iwe,LVr,yVr,dwe,xVr,$Vr,kVr,xe,Rw,cwe,SVr,RVr,Ree,PVr,BVr,NVr,Pw,mwe,IVr,qVr,Pee,jVr,DVr,GVr,Bw,fwe,OVr,VVr,Bee,XVr,zVr,QVr,Nw,gwe,WVr,HVr,Nee,UVr,JVr,YVr,Iw,hwe,KVr,ZVr,Iee,eXr,oXr,rXr,qw,uwe,tXr,aXr,qee,nXr,sXr,lXr,jw,pwe,iXr,dXr,jee,cXr,mXr,fXr,Dw,_we,gXr,hXr,Dee,uXr,pXr,_Xr,Gw,bwe,bXr,vXr,Gee,FXr,TXr,MXr,Ow,vwe,EXr,CXr,Oee,wXr,AXr,LXr,Vw,Uze,om,Xw,Fwe,F$,yXr,Twe,xXr,Jze,_r,T$,$Xr,rm,kXr,Vee,SXr,RXr,Xee,PXr,BXr,NXr,M$,IXr,Mwe,qXr,jXr,DXr,Ut,E$,GXr,Ewe,OXr,VXr,tm,XXr,Cwe,zXr,QXr,zee,WXr,HXr,UXr,zw,JXr,zr,C$,YXr,wwe,KXr,ZXr,En,ezr,Awe,ozr,rzr,Lwe,tzr,azr,ywe,nzr,szr,lzr,Ee,Qw,xwe,izr,dzr,Qee,czr,mzr,fzr,Ww,$we,gzr,hzr,Wee,uzr,pzr,_zr,Hw,kwe,bzr,vzr,Hee,Fzr,Tzr,Mzr,Uw,Swe,Ezr,Czr,Uee,wzr,Azr,Lzr,Jw,Rwe,yzr,xzr,Jee,$zr,kzr,Szr,Yw,Pwe,Rzr,Pzr,Yee,Bzr,Nzr,Izr,Kw,Bwe,qzr,jzr,Kee,Dzr,Gzr,Ozr,Zw,Nwe,Vzr,Xzr,Zee,zzr,Qzr,Wzr,eA,Iwe,Hzr,Uzr,eoe,Jzr,Yzr,Kzr,oA,qwe,Zzr,eQr,ooe,oQr,rQr,tQr,rA,jwe,aQr,nQr,roe,sQr,lQr,iQr,tA,Dwe,dQr,cQr,toe,mQr,fQr,gQr,aA,Gwe,hQr,uQr,aoe,pQr,_Qr,bQr,nA,Yze,am,sA,Owe,w$,vQr,Vwe,FQr,Kze,br,A$,TQr,nm,MQr,noe,EQr,CQr,soe,wQr,AQr,LQr,L$,yQr,Xwe,xQr,$Qr,kQr,Jt,y$,SQr,zwe,RQr,PQr,sm,BQr,Qwe,NQr,IQr,loe,qQr,jQr,DQr,lA,GQr,Qr,x$,OQr,Wwe,VQr,XQr,Cn,zQr,Hwe,QQr,WQr,Uwe,HQr,UQr,Jwe,JQr,YQr,KQr,$e,iA,Ywe,ZQr,eWr,ioe,oWr,rWr,tWr,dA,Kwe,aWr,nWr,doe,sWr,lWr,iWr,cA,Zwe,dWr,cWr,coe,mWr,fWr,gWr,mA,eAe,hWr,uWr,moe,pWr,_Wr,bWr,fA,oAe,vWr,FWr,foe,TWr,MWr,EWr,gA,rAe,CWr,wWr,goe,AWr,LWr,yWr,hA,tAe,xWr,$Wr,hoe,kWr,SWr,RWr,uA,aAe,PWr,BWr,uoe,NWr,IWr,qWr,pA,nAe,jWr,DWr,poe,GWr,OWr,VWr,_A,sAe,XWr,zWr,_oe,QWr,WWr,HWr,bA,Zze,lm,vA,lAe,$$,UWr,iAe,JWr,eQe,vr,k$,YWr,im,KWr,boe,ZWr,eHr,voe,oHr,rHr,tHr,S$,aHr,dAe,nHr,sHr,lHr,Yt,R$,iHr,cAe,dHr,cHr,dm,mHr,mAe,fHr,gHr,Foe,hHr,uHr,pHr,FA,_Hr,Wr,P$,bHr,fAe,vHr,FHr,wn,THr,gAe,MHr,EHr,hAe,CHr,wHr,uAe,AHr,LHr,yHr,ke,TA,pAe,xHr,$Hr,Toe,kHr,SHr,RHr,MA,_Ae,PHr,BHr,Moe,NHr,IHr,qHr,EA,bAe,jHr,DHr,Eoe,GHr,OHr,VHr,CA,vAe,XHr,zHr,Coe,QHr,WHr,HHr,wA,FAe,UHr,JHr,woe,YHr,KHr,ZHr,AA,TAe,eUr,oUr,Aoe,rUr,tUr,aUr,LA,MAe,nUr,sUr,Loe,lUr,iUr,dUr,yA,EAe,cUr,mUr,yoe,fUr,gUr,hUr,xA,CAe,uUr,pUr,xoe,_Ur,bUr,vUr,$A,wAe,FUr,TUr,$oe,MUr,EUr,CUr,kA,oQe,cm,SA,AAe,B$,wUr,LAe,AUr,rQe,Fr,N$,LUr,mm,yUr,koe,xUr,$Ur,Soe,kUr,SUr,RUr,I$,PUr,yAe,BUr,NUr,IUr,Kt,q$,qUr,xAe,jUr,DUr,fm,GUr,$Ae,OUr,VUr,Roe,XUr,zUr,QUr,RA,WUr,Hr,j$,HUr,kAe,UUr,JUr,An,YUr,SAe,KUr,ZUr,RAe,eJr,oJr,PAe,rJr,tJr,aJr,Se,PA,BAe,nJr,sJr,Poe,lJr,iJr,dJr,BA,NAe,cJr,mJr,Boe,fJr,gJr,hJr,NA,IAe,uJr,pJr,Noe,_Jr,bJr,vJr,IA,qAe,FJr,TJr,Ioe,MJr,EJr,CJr,qA,jAe,wJr,AJr,qoe,LJr,yJr,xJr,jA,DAe,$Jr,kJr,joe,SJr,RJr,PJr,DA,GAe,BJr,NJr,Doe,IJr,qJr,jJr,GA,OAe,DJr,GJr,Goe,OJr,VJr,XJr,OA,VAe,zJr,QJr,Ooe,WJr,HJr,UJr,VA,XAe,JJr,YJr,Voe,KJr,ZJr,eYr,XA,tQe,gm,zA,zAe,D$,oYr,QAe,rYr,aQe,Tr,G$,tYr,hm,aYr,Xoe,nYr,sYr,zoe,lYr,iYr,dYr,O$,cYr,WAe,mYr,fYr,gYr,Zt,V$,hYr,HAe,uYr,pYr,um,_Yr,UAe,bYr,vYr,Qoe,FYr,TYr,MYr,QA,EYr,Ur,X$,CYr,JAe,wYr,AYr,Ln,LYr,YAe,yYr,xYr,KAe,$Yr,kYr,ZAe,SYr,RYr,PYr,Re,WA,e6e,BYr,NYr,Woe,IYr,qYr,jYr,HA,o6e,DYr,GYr,Hoe,OYr,VYr,XYr,UA,r6e,zYr,QYr,Uoe,WYr,HYr,UYr,JA,t6e,JYr,YYr,Joe,KYr,ZYr,eKr,YA,a6e,oKr,rKr,Yoe,tKr,aKr,nKr,KA,n6e,sKr,lKr,Koe,iKr,dKr,cKr,ZA,s6e,mKr,fKr,Zoe,gKr,hKr,uKr,e6,l6e,pKr,_Kr,ere,bKr,vKr,FKr,o6,i6e,TKr,MKr,ore,EKr,CKr,wKr,r6,d6e,AKr,LKr,rre,yKr,xKr,$Kr,t6,nQe,pm,a6,c6e,z$,kKr,m6e,SKr,sQe,Mr,Q$,RKr,_m,PKr,tre,BKr,NKr,are,IKr,qKr,jKr,W$,DKr,f6e,GKr,OKr,VKr,ea,H$,XKr,g6e,zKr,QKr,bm,WKr,h6e,HKr,UKr,nre,JKr,YKr,KKr,n6,ZKr,Jr,U$,eZr,u6e,oZr,rZr,yn,tZr,p6e,aZr,nZr,_6e,sZr,lZr,b6e,iZr,dZr,cZr,Ve,s6,v6e,mZr,fZr,sre,gZr,hZr,uZr,l6,F6e,pZr,_Zr,lre,bZr,vZr,FZr,i6,T6e,TZr,MZr,ire,EZr,CZr,wZr,d6,M6e,AZr,LZr,dre,yZr,xZr,$Zr,c6,E6e,kZr,SZr,cre,RZr,PZr,BZr,m6,C6e,NZr,IZr,mre,qZr,jZr,DZr,f6,w6e,GZr,OZr,fre,VZr,XZr,zZr,g6,A6e,QZr,WZr,gre,HZr,UZr,JZr,h6,lQe,vm,u6,L6e,J$,YZr,y6e,KZr,iQe,Er,Y$,ZZr,Fm,eet,hre,oet,ret,ure,tet,aet,net,K$,set,x6e,iet,det,cet,oa,Z$,met,$6e,fet,get,Tm,het,k6e,uet,pet,pre,_et,bet,vet,p6,Fet,Yr,ek,Tet,S6e,Met,Eet,xn,Cet,R6e,wet,Aet,P6e,Let,yet,B6e,xet,$et,ket,Xe,_6,N6e,Set,Ret,_re,Pet,Bet,Net,b6,I6e,Iet,qet,bre,jet,Det,Get,v6,q6e,Oet,Vet,vre,Xet,zet,Qet,F6,j6e,Wet,Het,Fre,Uet,Jet,Yet,T6,D6e,Ket,Zet,Tre,eot,oot,rot,M6,G6e,tot,aot,Mre,not,sot,lot,E6,O6e,iot,dot,Ere,cot,mot,fot,C6,V6e,got,hot,Cre,uot,pot,_ot,w6,dQe,Mm,A6,X6e,ok,bot,z6e,vot,cQe,Cr,rk,Fot,Em,Tot,wre,Mot,Eot,Are,Cot,wot,Aot,tk,Lot,Q6e,yot,xot,$ot,ra,ak,kot,W6e,Sot,Rot,Cm,Pot,H6e,Bot,Not,Lre,Iot,qot,jot,L6,Dot,Kr,nk,Got,U6e,Oot,Vot,$n,Xot,J6e,zot,Qot,Y6e,Wot,Hot,K6e,Uot,Jot,Yot,Z6e,y6,e7e,Kot,Zot,yre,ert,ort,rrt,x6,mQe,wm,$6,o7e,sk,trt,r7e,art,fQe,wr,lk,nrt,Am,srt,xre,lrt,irt,$re,drt,crt,mrt,ik,frt,t7e,grt,hrt,urt,ta,dk,prt,a7e,_rt,brt,Lm,vrt,n7e,Frt,Trt,kre,Mrt,Ert,Crt,k6,wrt,Zr,ck,Art,s7e,Lrt,yrt,kn,xrt,l7e,$rt,krt,i7e,Srt,Rrt,d7e,Prt,Brt,Nrt,mk,S6,c7e,Irt,qrt,Sre,jrt,Drt,Grt,R6,m7e,Ort,Vrt,Rre,Xrt,zrt,Qrt,P6,gQe,ym,B6,f7e,fk,Wrt,g7e,Hrt,hQe,Ar,gk,Urt,xm,Jrt,Pre,Yrt,Krt,Bre,Zrt,ett,ott,hk,rtt,h7e,ttt,att,ntt,aa,uk,stt,u7e,ltt,itt,$m,dtt,p7e,ctt,mtt,Nre,ftt,gtt,htt,N6,utt,et,pk,ptt,_7e,_tt,btt,Sn,vtt,b7e,Ftt,Ttt,v7e,Mtt,Ett,F7e,Ctt,wtt,Att,T7e,I6,M7e,Ltt,ytt,Ire,xtt,$tt,ktt,q6,uQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ly=new re({}),iy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jm=new Stt({props:{warning:!0,$$slots:{default:[bWt]},$$scope:{ctx:$}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L611"}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L634"}}),Kg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L757"}}),uy=new re({}),py=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L410"}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L424"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L623"}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),_u=new Stt({props:{$$slots:{default:[TWt]},$$scope:{ctx:$}}}),bu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L89"}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L103"}}),ju=new Stt({props:{$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Du=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L256"}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L785"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L792"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Zy=new re({}),e8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L821"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L830"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),d8=new re({}),c8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L875"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),h8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L882"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),v8=new re({}),F8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),C8=new re({}),w8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L839"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),x8=new re({}),$8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),P8=new re({}),B8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),j8=new re({}),D8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L930"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L857"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L937"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L960"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L944"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),c9=new re({}),m9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L951"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),p9=new re({}),_9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L969"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),T9=new re({}),M9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L976"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),A9=new re({}),L9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L923"}}),x9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),S9=new re({}),R9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L898"}}),B9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),I9=new re({}),q9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L905"}}),D9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),O9=new re({}),V9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L914"}}),z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),W9=new re({}),H9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),i$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),c$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),u$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),B$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),sk=new re({}),lk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),fk=new re({}),gk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),uk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),yi=o("Auto Classes"),Pm=l(),lt=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=a("code"),ty=o("from_pretrained()"),Bm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),ki=o("Instantiating one of "),Pn=a("a"),ay=o("AutoConfig"),Bn=o(", "),Nn=a("a"),ny=o("AutoModel"),Si=o(`, and
`),In=a("a"),sy=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),jS=o("will create a model that is an instance of "),Pi=a("a"),DS=o("BertModel"),GS=o("."),wo=l(),Ra=a("p"),OS=o("There is one class of "),Im=a("code"),VS=o("AutoModel"),wHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cXe=l(),Bi=a("h2"),qm=a("a"),Sae=a("span"),F(ly.$$.fragment),AHe=l(),Rae=a("span"),LHe=o("Extending the Auto Classes"),mXe=l(),qn=a("p"),yHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pae=a("code"),xHe=o("NewModel"),$He=o(", make sure you have a "),Bae=a("code"),kHe=o("NewModelConfig"),SHe=o(` then you can add those to the auto
classes like this:`),fXe=l(),F(iy.$$.fragment),gXe=l(),XS=a("p"),RHe=o("You will then be able to use the auto classes like you would usually do!"),hXe=l(),F(jm.$$.fragment),uXe=l(),Ni=a("h2"),Dm=a("a"),Nae=a("span"),F(dy.$$.fragment),PHe=l(),Iae=a("span"),BHe=o("AutoConfig"),pXe=l(),Ao=a("div"),F(cy.$$.fragment),NHe=l(),my=a("p"),IHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zS=a("a"),qHe=o("from_pretrained()"),jHe=o(" class method."),DHe=l(),fy=a("p"),GHe=o("This class cannot be instantiated directly using "),qae=a("code"),OHe=o("__init__()"),VHe=o(" (throws an error)."),XHe=l(),Lr=a("div"),F(gy.$$.fragment),zHe=l(),jae=a("p"),QHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),WHe=l(),Ii=a("p"),HHe=o("The configuration class to instantiate is selected based on the "),Dae=a("code"),UHe=o("model_type"),JHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gae=a("code"),YHe=o("pretrained_model_name_or_path"),KHe=o(":"),ZHe=l(),A=a("ul"),Gm=a("li"),Oae=a("strong"),eUe=o("albert"),oUe=o(" \u2014 "),QS=a("a"),rUe=o("AlbertConfig"),tUe=o(" (ALBERT model)"),aUe=l(),Om=a("li"),Vae=a("strong"),nUe=o("bart"),sUe=o(" \u2014 "),WS=a("a"),lUe=o("BartConfig"),iUe=o(" (BART model)"),dUe=l(),Vm=a("li"),Xae=a("strong"),cUe=o("beit"),mUe=o(" \u2014 "),HS=a("a"),fUe=o("BeitConfig"),gUe=o(" (BEiT model)"),hUe=l(),Xm=a("li"),zae=a("strong"),uUe=o("bert"),pUe=o(" \u2014 "),US=a("a"),_Ue=o("BertConfig"),bUe=o(" (BERT model)"),vUe=l(),zm=a("li"),Qae=a("strong"),FUe=o("bert-generation"),TUe=o(" \u2014 "),JS=a("a"),MUe=o("BertGenerationConfig"),EUe=o(" (Bert Generation model)"),CUe=l(),Qm=a("li"),Wae=a("strong"),wUe=o("big_bird"),AUe=o(" \u2014 "),YS=a("a"),LUe=o("BigBirdConfig"),yUe=o(" (BigBird model)"),xUe=l(),Wm=a("li"),Hae=a("strong"),$Ue=o("bigbird_pegasus"),kUe=o(" \u2014 "),KS=a("a"),SUe=o("BigBirdPegasusConfig"),RUe=o(" (BigBird-Pegasus model)"),PUe=l(),Hm=a("li"),Uae=a("strong"),BUe=o("blenderbot"),NUe=o(" \u2014 "),ZS=a("a"),IUe=o("BlenderbotConfig"),qUe=o(" (Blenderbot model)"),jUe=l(),Um=a("li"),Jae=a("strong"),DUe=o("blenderbot-small"),GUe=o(" \u2014 "),eR=a("a"),OUe=o("BlenderbotSmallConfig"),VUe=o(" (BlenderbotSmall model)"),XUe=l(),Jm=a("li"),Yae=a("strong"),zUe=o("bloom"),QUe=o(" \u2014 "),oR=a("a"),WUe=o("BloomConfig"),HUe=o(" (BLOOM model)"),UUe=l(),Ym=a("li"),Kae=a("strong"),JUe=o("camembert"),YUe=o(" \u2014 "),rR=a("a"),KUe=o("CamembertConfig"),ZUe=o(" (CamemBERT model)"),eJe=l(),Km=a("li"),Zae=a("strong"),oJe=o("canine"),rJe=o(" \u2014 "),tR=a("a"),tJe=o("CanineConfig"),aJe=o(" (CANINE model)"),nJe=l(),Zm=a("li"),ene=a("strong"),sJe=o("clip"),lJe=o(" \u2014 "),aR=a("a"),iJe=o("CLIPConfig"),dJe=o(" (CLIP model)"),cJe=l(),ef=a("li"),one=a("strong"),mJe=o("codegen"),fJe=o(" \u2014 "),nR=a("a"),gJe=o("CodeGenConfig"),hJe=o(" (CodeGen model)"),uJe=l(),of=a("li"),rne=a("strong"),pJe=o("convbert"),_Je=o(" \u2014 "),sR=a("a"),bJe=o("ConvBertConfig"),vJe=o(" (ConvBERT model)"),FJe=l(),rf=a("li"),tne=a("strong"),TJe=o("convnext"),MJe=o(" \u2014 "),lR=a("a"),EJe=o("ConvNextConfig"),CJe=o(" (ConvNeXT model)"),wJe=l(),tf=a("li"),ane=a("strong"),AJe=o("ctrl"),LJe=o(" \u2014 "),iR=a("a"),yJe=o("CTRLConfig"),xJe=o(" (CTRL model)"),$Je=l(),af=a("li"),nne=a("strong"),kJe=o("cvt"),SJe=o(" \u2014 "),dR=a("a"),RJe=o("CvtConfig"),PJe=o(" (CvT model)"),BJe=l(),nf=a("li"),sne=a("strong"),NJe=o("data2vec-audio"),IJe=o(" \u2014 "),cR=a("a"),qJe=o("Data2VecAudioConfig"),jJe=o(" (Data2VecAudio model)"),DJe=l(),sf=a("li"),lne=a("strong"),GJe=o("data2vec-text"),OJe=o(" \u2014 "),mR=a("a"),VJe=o("Data2VecTextConfig"),XJe=o(" (Data2VecText model)"),zJe=l(),lf=a("li"),ine=a("strong"),QJe=o("data2vec-vision"),WJe=o(" \u2014 "),fR=a("a"),HJe=o("Data2VecVisionConfig"),UJe=o(" (Data2VecVision model)"),JJe=l(),df=a("li"),dne=a("strong"),YJe=o("deberta"),KJe=o(" \u2014 "),gR=a("a"),ZJe=o("DebertaConfig"),eYe=o(" (DeBERTa model)"),oYe=l(),cf=a("li"),cne=a("strong"),rYe=o("deberta-v2"),tYe=o(" \u2014 "),hR=a("a"),aYe=o("DebertaV2Config"),nYe=o(" (DeBERTa-v2 model)"),sYe=l(),mf=a("li"),mne=a("strong"),lYe=o("decision_transformer"),iYe=o(" \u2014 "),uR=a("a"),dYe=o("DecisionTransformerConfig"),cYe=o(" (Decision Transformer model)"),mYe=l(),ff=a("li"),fne=a("strong"),fYe=o("deit"),gYe=o(" \u2014 "),pR=a("a"),hYe=o("DeiTConfig"),uYe=o(" (DeiT model)"),pYe=l(),gf=a("li"),gne=a("strong"),_Ye=o("detr"),bYe=o(" \u2014 "),_R=a("a"),vYe=o("DetrConfig"),FYe=o(" (DETR model)"),TYe=l(),hf=a("li"),hne=a("strong"),MYe=o("distilbert"),EYe=o(" \u2014 "),bR=a("a"),CYe=o("DistilBertConfig"),wYe=o(" (DistilBERT model)"),AYe=l(),uf=a("li"),une=a("strong"),LYe=o("dpr"),yYe=o(" \u2014 "),vR=a("a"),xYe=o("DPRConfig"),$Ye=o(" (DPR model)"),kYe=l(),pf=a("li"),pne=a("strong"),SYe=o("dpt"),RYe=o(" \u2014 "),FR=a("a"),PYe=o("DPTConfig"),BYe=o(" (DPT model)"),NYe=l(),_f=a("li"),_ne=a("strong"),IYe=o("electra"),qYe=o(" \u2014 "),TR=a("a"),jYe=o("ElectraConfig"),DYe=o(" (ELECTRA model)"),GYe=l(),bf=a("li"),bne=a("strong"),OYe=o("encoder-decoder"),VYe=o(" \u2014 "),MR=a("a"),XYe=o("EncoderDecoderConfig"),zYe=o(" (Encoder decoder model)"),QYe=l(),vf=a("li"),vne=a("strong"),WYe=o("flaubert"),HYe=o(" \u2014 "),ER=a("a"),UYe=o("FlaubertConfig"),JYe=o(" (FlauBERT model)"),YYe=l(),Ff=a("li"),Fne=a("strong"),KYe=o("flava"),ZYe=o(" \u2014 "),CR=a("a"),eKe=o("FlavaConfig"),oKe=o(" (FLAVA model)"),rKe=l(),Tf=a("li"),Tne=a("strong"),tKe=o("fnet"),aKe=o(" \u2014 "),wR=a("a"),nKe=o("FNetConfig"),sKe=o(" (FNet model)"),lKe=l(),Mf=a("li"),Mne=a("strong"),iKe=o("fsmt"),dKe=o(" \u2014 "),AR=a("a"),cKe=o("FSMTConfig"),mKe=o(" (FairSeq Machine-Translation model)"),fKe=l(),Ef=a("li"),Ene=a("strong"),gKe=o("funnel"),hKe=o(" \u2014 "),LR=a("a"),uKe=o("FunnelConfig"),pKe=o(" (Funnel Transformer model)"),_Ke=l(),Cf=a("li"),Cne=a("strong"),bKe=o("glpn"),vKe=o(" \u2014 "),yR=a("a"),FKe=o("GLPNConfig"),TKe=o(" (GLPN model)"),MKe=l(),wf=a("li"),wne=a("strong"),EKe=o("gpt2"),CKe=o(" \u2014 "),xR=a("a"),wKe=o("GPT2Config"),AKe=o(" (OpenAI GPT-2 model)"),LKe=l(),Af=a("li"),Ane=a("strong"),yKe=o("gpt_neo"),xKe=o(" \u2014 "),$R=a("a"),$Ke=o("GPTNeoConfig"),kKe=o(" (GPT Neo model)"),SKe=l(),Lf=a("li"),Lne=a("strong"),RKe=o("gpt_neox"),PKe=o(" \u2014 "),kR=a("a"),BKe=o("GPTNeoXConfig"),NKe=o(" (GPT NeoX model)"),IKe=l(),yf=a("li"),yne=a("strong"),qKe=o("gptj"),jKe=o(" \u2014 "),SR=a("a"),DKe=o("GPTJConfig"),GKe=o(" (GPT-J model)"),OKe=l(),xf=a("li"),xne=a("strong"),VKe=o("groupvit"),XKe=o(" \u2014 "),RR=a("a"),zKe=o("GroupViTConfig"),QKe=o(" (GroupViT model)"),WKe=l(),$f=a("li"),$ne=a("strong"),HKe=o("hubert"),UKe=o(" \u2014 "),PR=a("a"),JKe=o("HubertConfig"),YKe=o(" (Hubert model)"),KKe=l(),kf=a("li"),kne=a("strong"),ZKe=o("ibert"),eZe=o(" \u2014 "),BR=a("a"),oZe=o("IBertConfig"),rZe=o(" (I-BERT model)"),tZe=l(),Sf=a("li"),Sne=a("strong"),aZe=o("imagegpt"),nZe=o(" \u2014 "),NR=a("a"),sZe=o("ImageGPTConfig"),lZe=o(" (ImageGPT model)"),iZe=l(),Rf=a("li"),Rne=a("strong"),dZe=o("layoutlm"),cZe=o(" \u2014 "),IR=a("a"),mZe=o("LayoutLMConfig"),fZe=o(" (LayoutLM model)"),gZe=l(),Pf=a("li"),Pne=a("strong"),hZe=o("layoutlmv2"),uZe=o(" \u2014 "),qR=a("a"),pZe=o("LayoutLMv2Config"),_Ze=o(" (LayoutLMv2 model)"),bZe=l(),Bf=a("li"),Bne=a("strong"),vZe=o("layoutlmv3"),FZe=o(" \u2014 "),jR=a("a"),TZe=o("LayoutLMv3Config"),MZe=o(" (LayoutLMv3 model)"),EZe=l(),Nf=a("li"),Nne=a("strong"),CZe=o("led"),wZe=o(" \u2014 "),DR=a("a"),AZe=o("LEDConfig"),LZe=o(" (LED model)"),yZe=l(),If=a("li"),Ine=a("strong"),xZe=o("levit"),$Ze=o(" \u2014 "),GR=a("a"),kZe=o("LevitConfig"),SZe=o(" (LeViT model)"),RZe=l(),qf=a("li"),qne=a("strong"),PZe=o("longformer"),BZe=o(" \u2014 "),OR=a("a"),NZe=o("LongformerConfig"),IZe=o(" (Longformer model)"),qZe=l(),jf=a("li"),jne=a("strong"),jZe=o("longt5"),DZe=o(" \u2014 "),VR=a("a"),GZe=o("LongT5Config"),OZe=o(" (LongT5 model)"),VZe=l(),Df=a("li"),Dne=a("strong"),XZe=o("luke"),zZe=o(" \u2014 "),XR=a("a"),QZe=o("LukeConfig"),WZe=o(" (LUKE model)"),HZe=l(),Gf=a("li"),Gne=a("strong"),UZe=o("lxmert"),JZe=o(" \u2014 "),zR=a("a"),YZe=o("LxmertConfig"),KZe=o(" (LXMERT model)"),ZZe=l(),Of=a("li"),One=a("strong"),eeo=o("m2m_100"),oeo=o(" \u2014 "),QR=a("a"),reo=o("M2M100Config"),teo=o(" (M2M100 model)"),aeo=l(),Vf=a("li"),Vne=a("strong"),neo=o("marian"),seo=o(" \u2014 "),WR=a("a"),leo=o("MarianConfig"),ieo=o(" (Marian model)"),deo=l(),Xf=a("li"),Xne=a("strong"),ceo=o("maskformer"),meo=o(" \u2014 "),HR=a("a"),feo=o("MaskFormerConfig"),geo=o(" (MaskFormer model)"),heo=l(),zf=a("li"),zne=a("strong"),ueo=o("mbart"),peo=o(" \u2014 "),UR=a("a"),_eo=o("MBartConfig"),beo=o(" (mBART model)"),veo=l(),Qf=a("li"),Qne=a("strong"),Feo=o("mctct"),Teo=o(" \u2014 "),JR=a("a"),Meo=o("MCTCTConfig"),Eeo=o(" (M-CTC-T model)"),Ceo=l(),Wf=a("li"),Wne=a("strong"),weo=o("megatron-bert"),Aeo=o(" \u2014 "),YR=a("a"),Leo=o("MegatronBertConfig"),yeo=o(" (Megatron-BERT model)"),xeo=l(),Hf=a("li"),Hne=a("strong"),$eo=o("mobilebert"),keo=o(" \u2014 "),KR=a("a"),Seo=o("MobileBertConfig"),Reo=o(" (MobileBERT model)"),Peo=l(),Uf=a("li"),Une=a("strong"),Beo=o("mobilevit"),Neo=o(" \u2014 "),ZR=a("a"),Ieo=o("MobileViTConfig"),qeo=o(" (MobileViT model)"),jeo=l(),Jf=a("li"),Jne=a("strong"),Deo=o("mpnet"),Geo=o(" \u2014 "),eP=a("a"),Oeo=o("MPNetConfig"),Veo=o(" (MPNet model)"),Xeo=l(),Yf=a("li"),Yne=a("strong"),zeo=o("mt5"),Qeo=o(" \u2014 "),oP=a("a"),Weo=o("MT5Config"),Heo=o(" (MT5 model)"),Ueo=l(),Kf=a("li"),Kne=a("strong"),Jeo=o("mvp"),Yeo=o(" \u2014 "),rP=a("a"),Keo=o("MvpConfig"),Zeo=o(" (MVP model)"),eoo=l(),Zf=a("li"),Zne=a("strong"),ooo=o("nezha"),roo=o(" \u2014 "),tP=a("a"),too=o("NezhaConfig"),aoo=o(" (Nezha model)"),noo=l(),eg=a("li"),ese=a("strong"),soo=o("nystromformer"),loo=o(" \u2014 "),aP=a("a"),ioo=o("NystromformerConfig"),doo=o(" (Nystr\xF6mformer model)"),coo=l(),og=a("li"),ose=a("strong"),moo=o("openai-gpt"),foo=o(" \u2014 "),nP=a("a"),goo=o("OpenAIGPTConfig"),hoo=o(" (OpenAI GPT model)"),uoo=l(),rg=a("li"),rse=a("strong"),poo=o("opt"),_oo=o(" \u2014 "),sP=a("a"),boo=o("OPTConfig"),voo=o(" (OPT model)"),Foo=l(),tg=a("li"),tse=a("strong"),Too=o("pegasus"),Moo=o(" \u2014 "),lP=a("a"),Eoo=o("PegasusConfig"),Coo=o(" (Pegasus model)"),woo=l(),ag=a("li"),ase=a("strong"),Aoo=o("perceiver"),Loo=o(" \u2014 "),iP=a("a"),yoo=o("PerceiverConfig"),xoo=o(" (Perceiver model)"),$oo=l(),ng=a("li"),nse=a("strong"),koo=o("plbart"),Soo=o(" \u2014 "),dP=a("a"),Roo=o("PLBartConfig"),Poo=o(" (PLBart model)"),Boo=l(),sg=a("li"),sse=a("strong"),Noo=o("poolformer"),Ioo=o(" \u2014 "),cP=a("a"),qoo=o("PoolFormerConfig"),joo=o(" (PoolFormer model)"),Doo=l(),lg=a("li"),lse=a("strong"),Goo=o("prophetnet"),Ooo=o(" \u2014 "),mP=a("a"),Voo=o("ProphetNetConfig"),Xoo=o(" (ProphetNet model)"),zoo=l(),ig=a("li"),ise=a("strong"),Qoo=o("qdqbert"),Woo=o(" \u2014 "),fP=a("a"),Hoo=o("QDQBertConfig"),Uoo=o(" (QDQBert model)"),Joo=l(),dg=a("li"),dse=a("strong"),Yoo=o("rag"),Koo=o(" \u2014 "),gP=a("a"),Zoo=o("RagConfig"),ero=o(" (RAG model)"),oro=l(),cg=a("li"),cse=a("strong"),rro=o("realm"),tro=o(" \u2014 "),hP=a("a"),aro=o("RealmConfig"),nro=o(" (REALM model)"),sro=l(),mg=a("li"),mse=a("strong"),lro=o("reformer"),iro=o(" \u2014 "),uP=a("a"),dro=o("ReformerConfig"),cro=o(" (Reformer model)"),mro=l(),fg=a("li"),fse=a("strong"),fro=o("regnet"),gro=o(" \u2014 "),pP=a("a"),hro=o("RegNetConfig"),uro=o(" (RegNet model)"),pro=l(),gg=a("li"),gse=a("strong"),_ro=o("rembert"),bro=o(" \u2014 "),_P=a("a"),vro=o("RemBertConfig"),Fro=o(" (RemBERT model)"),Tro=l(),hg=a("li"),hse=a("strong"),Mro=o("resnet"),Ero=o(" \u2014 "),bP=a("a"),Cro=o("ResNetConfig"),wro=o(" (ResNet model)"),Aro=l(),ug=a("li"),use=a("strong"),Lro=o("retribert"),yro=o(" \u2014 "),vP=a("a"),xro=o("RetriBertConfig"),$ro=o(" (RetriBERT model)"),kro=l(),pg=a("li"),pse=a("strong"),Sro=o("roberta"),Rro=o(" \u2014 "),FP=a("a"),Pro=o("RobertaConfig"),Bro=o(" (RoBERTa model)"),Nro=l(),_g=a("li"),_se=a("strong"),Iro=o("roformer"),qro=o(" \u2014 "),TP=a("a"),jro=o("RoFormerConfig"),Dro=o(" (RoFormer model)"),Gro=l(),bg=a("li"),bse=a("strong"),Oro=o("segformer"),Vro=o(" \u2014 "),MP=a("a"),Xro=o("SegformerConfig"),zro=o(" (SegFormer model)"),Qro=l(),vg=a("li"),vse=a("strong"),Wro=o("sew"),Hro=o(" \u2014 "),EP=a("a"),Uro=o("SEWConfig"),Jro=o(" (SEW model)"),Yro=l(),Fg=a("li"),Fse=a("strong"),Kro=o("sew-d"),Zro=o(" \u2014 "),CP=a("a"),eto=o("SEWDConfig"),oto=o(" (SEW-D model)"),rto=l(),Tg=a("li"),Tse=a("strong"),tto=o("speech-encoder-decoder"),ato=o(" \u2014 "),wP=a("a"),nto=o("SpeechEncoderDecoderConfig"),sto=o(" (Speech Encoder decoder model)"),lto=l(),Mg=a("li"),Mse=a("strong"),ito=o("speech_to_text"),dto=o(" \u2014 "),AP=a("a"),cto=o("Speech2TextConfig"),mto=o(" (Speech2Text model)"),fto=l(),Eg=a("li"),Ese=a("strong"),gto=o("speech_to_text_2"),hto=o(" \u2014 "),LP=a("a"),uto=o("Speech2Text2Config"),pto=o(" (Speech2Text2 model)"),_to=l(),Cg=a("li"),Cse=a("strong"),bto=o("splinter"),vto=o(" \u2014 "),yP=a("a"),Fto=o("SplinterConfig"),Tto=o(" (Splinter model)"),Mto=l(),wg=a("li"),wse=a("strong"),Eto=o("squeezebert"),Cto=o(" \u2014 "),xP=a("a"),wto=o("SqueezeBertConfig"),Ato=o(" (SqueezeBERT model)"),Lto=l(),Ag=a("li"),Ase=a("strong"),yto=o("swin"),xto=o(" \u2014 "),$P=a("a"),$to=o("SwinConfig"),kto=o(" (Swin Transformer model)"),Sto=l(),Lg=a("li"),Lse=a("strong"),Rto=o("t5"),Pto=o(" \u2014 "),kP=a("a"),Bto=o("T5Config"),Nto=o(" (T5 model)"),Ito=l(),yg=a("li"),yse=a("strong"),qto=o("tapas"),jto=o(" \u2014 "),SP=a("a"),Dto=o("TapasConfig"),Gto=o(" (TAPAS model)"),Oto=l(),xg=a("li"),xse=a("strong"),Vto=o("trajectory_transformer"),Xto=o(" \u2014 "),RP=a("a"),zto=o("TrajectoryTransformerConfig"),Qto=o(" (Trajectory Transformer model)"),Wto=l(),$g=a("li"),$se=a("strong"),Hto=o("transfo-xl"),Uto=o(" \u2014 "),PP=a("a"),Jto=o("TransfoXLConfig"),Yto=o(" (Transformer-XL model)"),Kto=l(),kg=a("li"),kse=a("strong"),Zto=o("trocr"),eao=o(" \u2014 "),BP=a("a"),oao=o("TrOCRConfig"),rao=o(" (TrOCR model)"),tao=l(),Sg=a("li"),Sse=a("strong"),aao=o("unispeech"),nao=o(" \u2014 "),NP=a("a"),sao=o("UniSpeechConfig"),lao=o(" (UniSpeech model)"),iao=l(),Rg=a("li"),Rse=a("strong"),dao=o("unispeech-sat"),cao=o(" \u2014 "),IP=a("a"),mao=o("UniSpeechSatConfig"),fao=o(" (UniSpeechSat model)"),gao=l(),Pg=a("li"),Pse=a("strong"),hao=o("van"),uao=o(" \u2014 "),qP=a("a"),pao=o("VanConfig"),_ao=o(" (VAN model)"),bao=l(),Bg=a("li"),Bse=a("strong"),vao=o("vilt"),Fao=o(" \u2014 "),jP=a("a"),Tao=o("ViltConfig"),Mao=o(" (ViLT model)"),Eao=l(),Ng=a("li"),Nse=a("strong"),Cao=o("vision-encoder-decoder"),wao=o(" \u2014 "),DP=a("a"),Aao=o("VisionEncoderDecoderConfig"),Lao=o(" (Vision Encoder decoder model)"),yao=l(),Ig=a("li"),Ise=a("strong"),xao=o("vision-text-dual-encoder"),$ao=o(" \u2014 "),GP=a("a"),kao=o("VisionTextDualEncoderConfig"),Sao=o(" (VisionTextDualEncoder model)"),Rao=l(),qg=a("li"),qse=a("strong"),Pao=o("visual_bert"),Bao=o(" \u2014 "),OP=a("a"),Nao=o("VisualBertConfig"),Iao=o(" (VisualBERT model)"),qao=l(),jg=a("li"),jse=a("strong"),jao=o("vit"),Dao=o(" \u2014 "),VP=a("a"),Gao=o("ViTConfig"),Oao=o(" (ViT model)"),Vao=l(),Dg=a("li"),Dse=a("strong"),Xao=o("vit_mae"),zao=o(" \u2014 "),XP=a("a"),Qao=o("ViTMAEConfig"),Wao=o(" (ViTMAE model)"),Hao=l(),Gg=a("li"),Gse=a("strong"),Uao=o("wav2vec2"),Jao=o(" \u2014 "),zP=a("a"),Yao=o("Wav2Vec2Config"),Kao=o(" (Wav2Vec2 model)"),Zao=l(),Og=a("li"),Ose=a("strong"),eno=o("wav2vec2-conformer"),ono=o(" \u2014 "),QP=a("a"),rno=o("Wav2Vec2ConformerConfig"),tno=o(" (Wav2Vec2-Conformer model)"),ano=l(),Vg=a("li"),Vse=a("strong"),nno=o("wavlm"),sno=o(" \u2014 "),WP=a("a"),lno=o("WavLMConfig"),ino=o(" (WavLM model)"),dno=l(),Xg=a("li"),Xse=a("strong"),cno=o("xglm"),mno=o(" \u2014 "),HP=a("a"),fno=o("XGLMConfig"),gno=o(" (XGLM model)"),hno=l(),zg=a("li"),zse=a("strong"),uno=o("xlm"),pno=o(" \u2014 "),UP=a("a"),_no=o("XLMConfig"),bno=o(" (XLM model)"),vno=l(),Qg=a("li"),Qse=a("strong"),Fno=o("xlm-prophetnet"),Tno=o(" \u2014 "),JP=a("a"),Mno=o("XLMProphetNetConfig"),Eno=o(" (XLM-ProphetNet model)"),Cno=l(),Wg=a("li"),Wse=a("strong"),wno=o("xlm-roberta"),Ano=o(" \u2014 "),YP=a("a"),Lno=o("XLMRobertaConfig"),yno=o(" (XLM-RoBERTa model)"),xno=l(),Hg=a("li"),Hse=a("strong"),$no=o("xlm-roberta-xl"),kno=o(" \u2014 "),KP=a("a"),Sno=o("XLMRobertaXLConfig"),Rno=o(" (XLM-RoBERTa-XL model)"),Pno=l(),Ug=a("li"),Use=a("strong"),Bno=o("xlnet"),Nno=o(" \u2014 "),ZP=a("a"),Ino=o("XLNetConfig"),qno=o(" (XLNet model)"),jno=l(),Jg=a("li"),Jse=a("strong"),Dno=o("yolos"),Gno=o(" \u2014 "),eB=a("a"),Ono=o("YolosConfig"),Vno=o(" (YOLOS model)"),Xno=l(),Yg=a("li"),Yse=a("strong"),zno=o("yoso"),Qno=o(" \u2014 "),oB=a("a"),Wno=o("YosoConfig"),Hno=o(" (YOSO model)"),Uno=l(),F(Kg.$$.fragment),Jno=l(),Zg=a("div"),F(hy.$$.fragment),Yno=l(),Kse=a("p"),Kno=o("Register a new configuration for this class."),_Xe=l(),qi=a("h2"),eh=a("a"),Zse=a("span"),F(uy.$$.fragment),Zno=l(),ele=a("span"),eso=o("AutoTokenizer"),bXe=l(),Lo=a("div"),F(py.$$.fragment),oso=l(),_y=a("p"),rso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=a("a"),tso=o("AutoTokenizer.from_pretrained()"),aso=o(" class method."),nso=l(),by=a("p"),sso=o("This class cannot be instantiated directly using "),ole=a("code"),lso=o("__init__()"),iso=o(" (throws an error)."),dso=l(),yr=a("div"),F(vy.$$.fragment),cso=l(),rle=a("p"),mso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fso=l(),Pa=a("p"),gso=o("The tokenizer class to instantiate is selected based on the "),tle=a("code"),hso=o("model_type"),uso=o(` property of the config object (either
passed as an argument or loaded from `),ale=a("code"),pso=o("pretrained_model_name_or_path"),_so=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=a("code"),bso=o("pretrained_model_name_or_path"),vso=o(":"),Fso=l(),k=a("ul"),jn=a("li"),sle=a("strong"),Tso=o("albert"),Mso=o(" \u2014 "),tB=a("a"),Eso=o("AlbertTokenizer"),Cso=o(" or "),aB=a("a"),wso=o("AlbertTokenizerFast"),Aso=o(" (ALBERT model)"),Lso=l(),Dn=a("li"),lle=a("strong"),yso=o("bart"),xso=o(" \u2014 "),nB=a("a"),$so=o("BartTokenizer"),kso=o(" or "),sB=a("a"),Sso=o("BartTokenizerFast"),Rso=o(" (BART model)"),Pso=l(),Gn=a("li"),ile=a("strong"),Bso=o("barthez"),Nso=o(" \u2014 "),lB=a("a"),Iso=o("BarthezTokenizer"),qso=o(" or "),iB=a("a"),jso=o("BarthezTokenizerFast"),Dso=o(" (BARThez model)"),Gso=l(),oh=a("li"),dle=a("strong"),Oso=o("bartpho"),Vso=o(" \u2014 "),dB=a("a"),Xso=o("BartphoTokenizer"),zso=o(" (BARTpho model)"),Qso=l(),On=a("li"),cle=a("strong"),Wso=o("bert"),Hso=o(" \u2014 "),cB=a("a"),Uso=o("BertTokenizer"),Jso=o(" or "),mB=a("a"),Yso=o("BertTokenizerFast"),Kso=o(" (BERT model)"),Zso=l(),rh=a("li"),mle=a("strong"),elo=o("bert-generation"),olo=o(" \u2014 "),fB=a("a"),rlo=o("BertGenerationTokenizer"),tlo=o(" (Bert Generation model)"),alo=l(),th=a("li"),fle=a("strong"),nlo=o("bert-japanese"),slo=o(" \u2014 "),gB=a("a"),llo=o("BertJapaneseTokenizer"),ilo=o(" (BertJapanese model)"),dlo=l(),ah=a("li"),gle=a("strong"),clo=o("bertweet"),mlo=o(" \u2014 "),hB=a("a"),flo=o("BertweetTokenizer"),glo=o(" (BERTweet model)"),hlo=l(),Vn=a("li"),hle=a("strong"),ulo=o("big_bird"),plo=o(" \u2014 "),uB=a("a"),_lo=o("BigBirdTokenizer"),blo=o(" or "),pB=a("a"),vlo=o("BigBirdTokenizerFast"),Flo=o(" (BigBird model)"),Tlo=l(),Xn=a("li"),ule=a("strong"),Mlo=o("bigbird_pegasus"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("PegasusTokenizer"),wlo=o(" or "),bB=a("a"),Alo=o("PegasusTokenizerFast"),Llo=o(" (BigBird-Pegasus model)"),ylo=l(),zn=a("li"),ple=a("strong"),xlo=o("blenderbot"),$lo=o(" \u2014 "),vB=a("a"),klo=o("BlenderbotTokenizer"),Slo=o(" or "),FB=a("a"),Rlo=o("BlenderbotTokenizerFast"),Plo=o(" (Blenderbot model)"),Blo=l(),nh=a("li"),_le=a("strong"),Nlo=o("blenderbot-small"),Ilo=o(" \u2014 "),TB=a("a"),qlo=o("BlenderbotSmallTokenizer"),jlo=o(" (BlenderbotSmall model)"),Dlo=l(),sh=a("li"),ble=a("strong"),Glo=o("bloom"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("BloomTokenizerFast"),Xlo=o(" (BLOOM model)"),zlo=l(),lh=a("li"),vle=a("strong"),Qlo=o("byt5"),Wlo=o(" \u2014 "),EB=a("a"),Hlo=o("ByT5Tokenizer"),Ulo=o(" (ByT5 model)"),Jlo=l(),Qn=a("li"),Fle=a("strong"),Ylo=o("camembert"),Klo=o(" \u2014 "),CB=a("a"),Zlo=o("CamembertTokenizer"),eio=o(" or "),wB=a("a"),oio=o("CamembertTokenizerFast"),rio=o(" (CamemBERT model)"),tio=l(),ih=a("li"),Tle=a("strong"),aio=o("canine"),nio=o(" \u2014 "),AB=a("a"),sio=o("CanineTokenizer"),lio=o(" (CANINE model)"),iio=l(),Wn=a("li"),Mle=a("strong"),dio=o("clip"),cio=o(" \u2014 "),LB=a("a"),mio=o("CLIPTokenizer"),fio=o(" or "),yB=a("a"),gio=o("CLIPTokenizerFast"),hio=o(" (CLIP model)"),uio=l(),Hn=a("li"),Ele=a("strong"),pio=o("codegen"),_io=o(" \u2014 "),xB=a("a"),bio=o("CodeGenTokenizer"),vio=o(" or "),$B=a("a"),Fio=o("CodeGenTokenizerFast"),Tio=o(" (CodeGen model)"),Mio=l(),Un=a("li"),Cle=a("strong"),Eio=o("convbert"),Cio=o(" \u2014 "),kB=a("a"),wio=o("ConvBertTokenizer"),Aio=o(" or "),SB=a("a"),Lio=o("ConvBertTokenizerFast"),yio=o(" (ConvBERT model)"),xio=l(),Jn=a("li"),wle=a("strong"),$io=o("cpm"),kio=o(" \u2014 "),RB=a("a"),Sio=o("CpmTokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("CpmTokenizerFast"),Bio=o(" (CPM model)"),Nio=l(),dh=a("li"),Ale=a("strong"),Iio=o("ctrl"),qio=o(" \u2014 "),BB=a("a"),jio=o("CTRLTokenizer"),Dio=o(" (CTRL model)"),Gio=l(),Yn=a("li"),Lle=a("strong"),Oio=o("data2vec-text"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("RobertaTokenizer"),zio=o(" or "),IB=a("a"),Qio=o("RobertaTokenizerFast"),Wio=o(" (Data2VecText model)"),Hio=l(),Kn=a("li"),yle=a("strong"),Uio=o("deberta"),Jio=o(" \u2014 "),qB=a("a"),Yio=o("DebertaTokenizer"),Kio=o(" or "),jB=a("a"),Zio=o("DebertaTokenizerFast"),edo=o(" (DeBERTa model)"),odo=l(),Zn=a("li"),xle=a("strong"),rdo=o("deberta-v2"),tdo=o(" \u2014 "),DB=a("a"),ado=o("DebertaV2Tokenizer"),ndo=o(" or "),GB=a("a"),sdo=o("DebertaV2TokenizerFast"),ldo=o(" (DeBERTa-v2 model)"),ido=l(),es=a("li"),$le=a("strong"),ddo=o("distilbert"),cdo=o(" \u2014 "),OB=a("a"),mdo=o("DistilBertTokenizer"),fdo=o(" or "),VB=a("a"),gdo=o("DistilBertTokenizerFast"),hdo=o(" (DistilBERT model)"),udo=l(),os=a("li"),kle=a("strong"),pdo=o("dpr"),_do=o(" \u2014 "),XB=a("a"),bdo=o("DPRQuestionEncoderTokenizer"),vdo=o(" or "),zB=a("a"),Fdo=o("DPRQuestionEncoderTokenizerFast"),Tdo=o(" (DPR model)"),Mdo=l(),rs=a("li"),Sle=a("strong"),Edo=o("electra"),Cdo=o(" \u2014 "),QB=a("a"),wdo=o("ElectraTokenizer"),Ado=o(" or "),WB=a("a"),Ldo=o("ElectraTokenizerFast"),ydo=o(" (ELECTRA model)"),xdo=l(),ch=a("li"),Rle=a("strong"),$do=o("flaubert"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("FlaubertTokenizer"),Rdo=o(" (FlauBERT model)"),Pdo=l(),ts=a("li"),Ple=a("strong"),Bdo=o("fnet"),Ndo=o(" \u2014 "),UB=a("a"),Ido=o("FNetTokenizer"),qdo=o(" or "),JB=a("a"),jdo=o("FNetTokenizerFast"),Ddo=o(" (FNet model)"),Gdo=l(),mh=a("li"),Ble=a("strong"),Odo=o("fsmt"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("FSMTTokenizer"),zdo=o(" (FairSeq Machine-Translation model)"),Qdo=l(),as=a("li"),Nle=a("strong"),Wdo=o("funnel"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("FunnelTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("FunnelTokenizerFast"),Kdo=o(" (Funnel Transformer model)"),Zdo=l(),ns=a("li"),Ile=a("strong"),eco=o("gpt2"),oco=o(" \u2014 "),eN=a("a"),rco=o("GPT2Tokenizer"),tco=o(" or "),oN=a("a"),aco=o("GPT2TokenizerFast"),nco=o(" (OpenAI GPT-2 model)"),sco=l(),ss=a("li"),qle=a("strong"),lco=o("gpt_neo"),ico=o(" \u2014 "),rN=a("a"),dco=o("GPT2Tokenizer"),cco=o(" or "),tN=a("a"),mco=o("GPT2TokenizerFast"),fco=o(" (GPT Neo model)"),gco=l(),fh=a("li"),jle=a("strong"),hco=o("gpt_neox"),uco=o(" \u2014 "),aN=a("a"),pco=o("GPTNeoXTokenizerFast"),_co=o(" (GPT NeoX model)"),bco=l(),ls=a("li"),Dle=a("strong"),vco=o("gptj"),Fco=o(" \u2014 "),nN=a("a"),Tco=o("GPT2Tokenizer"),Mco=o(" or "),sN=a("a"),Eco=o("GPT2TokenizerFast"),Cco=o(" (GPT-J model)"),wco=l(),is=a("li"),Gle=a("strong"),Aco=o("groupvit"),Lco=o(" \u2014 "),lN=a("a"),yco=o("CLIPTokenizer"),xco=o(" or "),iN=a("a"),$co=o("CLIPTokenizerFast"),kco=o(" (GroupViT model)"),Sco=l(),ds=a("li"),Ole=a("strong"),Rco=o("herbert"),Pco=o(" \u2014 "),dN=a("a"),Bco=o("HerbertTokenizer"),Nco=o(" or "),cN=a("a"),Ico=o("HerbertTokenizerFast"),qco=o(" (HerBERT model)"),jco=l(),gh=a("li"),Vle=a("strong"),Dco=o("hubert"),Gco=o(" \u2014 "),mN=a("a"),Oco=o("Wav2Vec2CTCTokenizer"),Vco=o(" (Hubert model)"),Xco=l(),cs=a("li"),Xle=a("strong"),zco=o("ibert"),Qco=o(" \u2014 "),fN=a("a"),Wco=o("RobertaTokenizer"),Hco=o(" or "),gN=a("a"),Uco=o("RobertaTokenizerFast"),Jco=o(" (I-BERT model)"),Yco=l(),ms=a("li"),zle=a("strong"),Kco=o("layoutlm"),Zco=o(" \u2014 "),hN=a("a"),emo=o("LayoutLMTokenizer"),omo=o(" or "),uN=a("a"),rmo=o("LayoutLMTokenizerFast"),tmo=o(" (LayoutLM model)"),amo=l(),fs=a("li"),Qle=a("strong"),nmo=o("layoutlmv2"),smo=o(" \u2014 "),pN=a("a"),lmo=o("LayoutLMv2Tokenizer"),imo=o(" or "),_N=a("a"),dmo=o("LayoutLMv2TokenizerFast"),cmo=o(" (LayoutLMv2 model)"),mmo=l(),gs=a("li"),Wle=a("strong"),fmo=o("layoutlmv3"),gmo=o(" \u2014 "),bN=a("a"),hmo=o("LayoutLMv3Tokenizer"),umo=o(" or "),vN=a("a"),pmo=o("LayoutLMv3TokenizerFast"),_mo=o(" (LayoutLMv3 model)"),bmo=l(),hs=a("li"),Hle=a("strong"),vmo=o("layoutxlm"),Fmo=o(" \u2014 "),FN=a("a"),Tmo=o("LayoutXLMTokenizer"),Mmo=o(" or "),TN=a("a"),Emo=o("LayoutXLMTokenizerFast"),Cmo=o(" (LayoutXLM model)"),wmo=l(),us=a("li"),Ule=a("strong"),Amo=o("led"),Lmo=o(" \u2014 "),MN=a("a"),ymo=o("LEDTokenizer"),xmo=o(" or "),EN=a("a"),$mo=o("LEDTokenizerFast"),kmo=o(" (LED model)"),Smo=l(),ps=a("li"),Jle=a("strong"),Rmo=o("longformer"),Pmo=o(" \u2014 "),CN=a("a"),Bmo=o("LongformerTokenizer"),Nmo=o(" or "),wN=a("a"),Imo=o("LongformerTokenizerFast"),qmo=o(" (Longformer model)"),jmo=l(),_s=a("li"),Yle=a("strong"),Dmo=o("longt5"),Gmo=o(" \u2014 "),AN=a("a"),Omo=o("T5Tokenizer"),Vmo=o(" or "),LN=a("a"),Xmo=o("T5TokenizerFast"),zmo=o(" (LongT5 model)"),Qmo=l(),hh=a("li"),Kle=a("strong"),Wmo=o("luke"),Hmo=o(" \u2014 "),yN=a("a"),Umo=o("LukeTokenizer"),Jmo=o(" (LUKE model)"),Ymo=l(),bs=a("li"),Zle=a("strong"),Kmo=o("lxmert"),Zmo=o(" \u2014 "),xN=a("a"),efo=o("LxmertTokenizer"),ofo=o(" or "),$N=a("a"),rfo=o("LxmertTokenizerFast"),tfo=o(" (LXMERT model)"),afo=l(),uh=a("li"),eie=a("strong"),nfo=o("m2m_100"),sfo=o(" \u2014 "),kN=a("a"),lfo=o("M2M100Tokenizer"),ifo=o(" (M2M100 model)"),dfo=l(),ph=a("li"),oie=a("strong"),cfo=o("marian"),mfo=o(" \u2014 "),SN=a("a"),ffo=o("MarianTokenizer"),gfo=o(" (Marian model)"),hfo=l(),vs=a("li"),rie=a("strong"),ufo=o("mbart"),pfo=o(" \u2014 "),RN=a("a"),_fo=o("MBartTokenizer"),bfo=o(" or "),PN=a("a"),vfo=o("MBartTokenizerFast"),Ffo=o(" (mBART model)"),Tfo=l(),Fs=a("li"),tie=a("strong"),Mfo=o("mbart50"),Efo=o(" \u2014 "),BN=a("a"),Cfo=o("MBart50Tokenizer"),wfo=o(" or "),NN=a("a"),Afo=o("MBart50TokenizerFast"),Lfo=o(" (mBART-50 model)"),yfo=l(),Ts=a("li"),aie=a("strong"),xfo=o("megatron-bert"),$fo=o(" \u2014 "),IN=a("a"),kfo=o("BertTokenizer"),Sfo=o(" or "),qN=a("a"),Rfo=o("BertTokenizerFast"),Pfo=o(" (Megatron-BERT model)"),Bfo=l(),_h=a("li"),nie=a("strong"),Nfo=o("mluke"),Ifo=o(" \u2014 "),jN=a("a"),qfo=o("MLukeTokenizer"),jfo=o(" (mLUKE model)"),Dfo=l(),Ms=a("li"),sie=a("strong"),Gfo=o("mobilebert"),Ofo=o(" \u2014 "),DN=a("a"),Vfo=o("MobileBertTokenizer"),Xfo=o(" or "),GN=a("a"),zfo=o("MobileBertTokenizerFast"),Qfo=o(" (MobileBERT model)"),Wfo=l(),Es=a("li"),lie=a("strong"),Hfo=o("mpnet"),Ufo=o(" \u2014 "),ON=a("a"),Jfo=o("MPNetTokenizer"),Yfo=o(" or "),VN=a("a"),Kfo=o("MPNetTokenizerFast"),Zfo=o(" (MPNet model)"),ego=l(),Cs=a("li"),iie=a("strong"),ogo=o("mt5"),rgo=o(" \u2014 "),XN=a("a"),tgo=o("MT5Tokenizer"),ago=o(" or "),zN=a("a"),ngo=o("MT5TokenizerFast"),sgo=o(" (MT5 model)"),lgo=l(),ws=a("li"),die=a("strong"),igo=o("mvp"),dgo=o(" \u2014 "),QN=a("a"),cgo=o("MvpTokenizer"),mgo=o(" or "),WN=a("a"),fgo=o("MvpTokenizerFast"),ggo=o(" (MVP model)"),hgo=l(),As=a("li"),cie=a("strong"),ugo=o("nezha"),pgo=o(" \u2014 "),HN=a("a"),_go=o("BertTokenizer"),bgo=o(" or "),UN=a("a"),vgo=o("BertTokenizerFast"),Fgo=o(" (Nezha model)"),Tgo=l(),Ls=a("li"),mie=a("strong"),Mgo=o("nllb"),Ego=o(" \u2014 "),JN=a("a"),Cgo=o("NllbTokenizer"),wgo=o(" or "),YN=a("a"),Ago=o("NllbTokenizerFast"),Lgo=o(" (NLLB model)"),ygo=l(),ys=a("li"),fie=a("strong"),xgo=o("nystromformer"),$go=o(" \u2014 "),KN=a("a"),kgo=o("AlbertTokenizer"),Sgo=o(" or "),ZN=a("a"),Rgo=o("AlbertTokenizerFast"),Pgo=o(" (Nystr\xF6mformer model)"),Bgo=l(),xs=a("li"),gie=a("strong"),Ngo=o("openai-gpt"),Igo=o(" \u2014 "),eI=a("a"),qgo=o("OpenAIGPTTokenizer"),jgo=o(" or "),oI=a("a"),Dgo=o("OpenAIGPTTokenizerFast"),Ggo=o(" (OpenAI GPT model)"),Ogo=l(),bh=a("li"),hie=a("strong"),Vgo=o("opt"),Xgo=o(" \u2014 "),rI=a("a"),zgo=o("GPT2Tokenizer"),Qgo=o(" (OPT model)"),Wgo=l(),$s=a("li"),uie=a("strong"),Hgo=o("pegasus"),Ugo=o(" \u2014 "),tI=a("a"),Jgo=o("PegasusTokenizer"),Ygo=o(" or "),aI=a("a"),Kgo=o("PegasusTokenizerFast"),Zgo=o(" (Pegasus model)"),eho=l(),vh=a("li"),pie=a("strong"),oho=o("perceiver"),rho=o(" \u2014 "),nI=a("a"),tho=o("PerceiverTokenizer"),aho=o(" (Perceiver model)"),nho=l(),Fh=a("li"),_ie=a("strong"),sho=o("phobert"),lho=o(" \u2014 "),sI=a("a"),iho=o("PhobertTokenizer"),dho=o(" (PhoBERT model)"),cho=l(),Th=a("li"),bie=a("strong"),mho=o("plbart"),fho=o(" \u2014 "),lI=a("a"),gho=o("PLBartTokenizer"),hho=o(" (PLBart model)"),uho=l(),Mh=a("li"),vie=a("strong"),pho=o("prophetnet"),_ho=o(" \u2014 "),iI=a("a"),bho=o("ProphetNetTokenizer"),vho=o(" (ProphetNet model)"),Fho=l(),ks=a("li"),Fie=a("strong"),Tho=o("qdqbert"),Mho=o(" \u2014 "),dI=a("a"),Eho=o("BertTokenizer"),Cho=o(" or "),cI=a("a"),who=o("BertTokenizerFast"),Aho=o(" (QDQBert model)"),Lho=l(),Eh=a("li"),Tie=a("strong"),yho=o("rag"),xho=o(" \u2014 "),mI=a("a"),$ho=o("RagTokenizer"),kho=o(" (RAG model)"),Sho=l(),Ss=a("li"),Mie=a("strong"),Rho=o("realm"),Pho=o(" \u2014 "),fI=a("a"),Bho=o("RealmTokenizer"),Nho=o(" or "),gI=a("a"),Iho=o("RealmTokenizerFast"),qho=o(" (REALM model)"),jho=l(),Rs=a("li"),Eie=a("strong"),Dho=o("reformer"),Gho=o(" \u2014 "),hI=a("a"),Oho=o("ReformerTokenizer"),Vho=o(" or "),uI=a("a"),Xho=o("ReformerTokenizerFast"),zho=o(" (Reformer model)"),Qho=l(),Ps=a("li"),Cie=a("strong"),Who=o("rembert"),Hho=o(" \u2014 "),pI=a("a"),Uho=o("RemBertTokenizer"),Jho=o(" or "),_I=a("a"),Yho=o("RemBertTokenizerFast"),Kho=o(" (RemBERT model)"),Zho=l(),Bs=a("li"),wie=a("strong"),euo=o("retribert"),ouo=o(" \u2014 "),bI=a("a"),ruo=o("RetriBertTokenizer"),tuo=o(" or "),vI=a("a"),auo=o("RetriBertTokenizerFast"),nuo=o(" (RetriBERT model)"),suo=l(),Ns=a("li"),Aie=a("strong"),luo=o("roberta"),iuo=o(" \u2014 "),FI=a("a"),duo=o("RobertaTokenizer"),cuo=o(" or "),TI=a("a"),muo=o("RobertaTokenizerFast"),fuo=o(" (RoBERTa model)"),guo=l(),Is=a("li"),Lie=a("strong"),huo=o("roformer"),uuo=o(" \u2014 "),MI=a("a"),puo=o("RoFormerTokenizer"),_uo=o(" or "),EI=a("a"),buo=o("RoFormerTokenizerFast"),vuo=o(" (RoFormer model)"),Fuo=l(),Ch=a("li"),yie=a("strong"),Tuo=o("speech_to_text"),Muo=o(" \u2014 "),CI=a("a"),Euo=o("Speech2TextTokenizer"),Cuo=o(" (Speech2Text model)"),wuo=l(),wh=a("li"),xie=a("strong"),Auo=o("speech_to_text_2"),Luo=o(" \u2014 "),wI=a("a"),yuo=o("Speech2Text2Tokenizer"),xuo=o(" (Speech2Text2 model)"),$uo=l(),qs=a("li"),$ie=a("strong"),kuo=o("splinter"),Suo=o(" \u2014 "),AI=a("a"),Ruo=o("SplinterTokenizer"),Puo=o(" or "),LI=a("a"),Buo=o("SplinterTokenizerFast"),Nuo=o(" (Splinter model)"),Iuo=l(),js=a("li"),kie=a("strong"),quo=o("squeezebert"),juo=o(" \u2014 "),yI=a("a"),Duo=o("SqueezeBertTokenizer"),Guo=o(" or "),xI=a("a"),Ouo=o("SqueezeBertTokenizerFast"),Vuo=o(" (SqueezeBERT model)"),Xuo=l(),Ds=a("li"),Sie=a("strong"),zuo=o("t5"),Quo=o(" \u2014 "),$I=a("a"),Wuo=o("T5Tokenizer"),Huo=o(" or "),kI=a("a"),Uuo=o("T5TokenizerFast"),Juo=o(" (T5 model)"),Yuo=l(),Ah=a("li"),Rie=a("strong"),Kuo=o("tapas"),Zuo=o(" \u2014 "),SI=a("a"),epo=o("TapasTokenizer"),opo=o(" (TAPAS model)"),rpo=l(),Lh=a("li"),Pie=a("strong"),tpo=o("tapex"),apo=o(" \u2014 "),RI=a("a"),npo=o("TapexTokenizer"),spo=o(" (TAPEX model)"),lpo=l(),yh=a("li"),Bie=a("strong"),ipo=o("transfo-xl"),dpo=o(" \u2014 "),PI=a("a"),cpo=o("TransfoXLTokenizer"),mpo=o(" (Transformer-XL model)"),fpo=l(),Gs=a("li"),Nie=a("strong"),gpo=o("vilt"),hpo=o(" \u2014 "),BI=a("a"),upo=o("BertTokenizer"),ppo=o(" or "),NI=a("a"),_po=o("BertTokenizerFast"),bpo=o(" (ViLT model)"),vpo=l(),Os=a("li"),Iie=a("strong"),Fpo=o("visual_bert"),Tpo=o(" \u2014 "),II=a("a"),Mpo=o("BertTokenizer"),Epo=o(" or "),qI=a("a"),Cpo=o("BertTokenizerFast"),wpo=o(" (VisualBERT model)"),Apo=l(),xh=a("li"),qie=a("strong"),Lpo=o("wav2vec2"),ypo=o(" \u2014 "),jI=a("a"),xpo=o("Wav2Vec2CTCTokenizer"),$po=o(" (Wav2Vec2 model)"),kpo=l(),$h=a("li"),jie=a("strong"),Spo=o("wav2vec2-conformer"),Rpo=o(" \u2014 "),DI=a("a"),Ppo=o("Wav2Vec2CTCTokenizer"),Bpo=o(" (Wav2Vec2-Conformer model)"),Npo=l(),kh=a("li"),Die=a("strong"),Ipo=o("wav2vec2_phoneme"),qpo=o(" \u2014 "),GI=a("a"),jpo=o("Wav2Vec2PhonemeCTCTokenizer"),Dpo=o(" (Wav2Vec2Phoneme model)"),Gpo=l(),Vs=a("li"),Gie=a("strong"),Opo=o("xglm"),Vpo=o(" \u2014 "),OI=a("a"),Xpo=o("XGLMTokenizer"),zpo=o(" or "),VI=a("a"),Qpo=o("XGLMTokenizerFast"),Wpo=o(" (XGLM model)"),Hpo=l(),Sh=a("li"),Oie=a("strong"),Upo=o("xlm"),Jpo=o(" \u2014 "),XI=a("a"),Ypo=o("XLMTokenizer"),Kpo=o(" (XLM model)"),Zpo=l(),Rh=a("li"),Vie=a("strong"),e_o=o("xlm-prophetnet"),o_o=o(" \u2014 "),zI=a("a"),r_o=o("XLMProphetNetTokenizer"),t_o=o(" (XLM-ProphetNet model)"),a_o=l(),Xs=a("li"),Xie=a("strong"),n_o=o("xlm-roberta"),s_o=o(" \u2014 "),QI=a("a"),l_o=o("XLMRobertaTokenizer"),i_o=o(" or "),WI=a("a"),d_o=o("XLMRobertaTokenizerFast"),c_o=o(" (XLM-RoBERTa model)"),m_o=l(),zs=a("li"),zie=a("strong"),f_o=o("xlm-roberta-xl"),g_o=o(" \u2014 "),HI=a("a"),h_o=o("RobertaTokenizer"),u_o=o(" or "),UI=a("a"),p_o=o("RobertaTokenizerFast"),__o=o(" (XLM-RoBERTa-XL model)"),b_o=l(),Qs=a("li"),Qie=a("strong"),v_o=o("xlnet"),F_o=o(" \u2014 "),JI=a("a"),T_o=o("XLNetTokenizer"),M_o=o(" or "),YI=a("a"),E_o=o("XLNetTokenizerFast"),C_o=o(" (XLNet model)"),w_o=l(),Ws=a("li"),Wie=a("strong"),A_o=o("yoso"),L_o=o(" \u2014 "),KI=a("a"),y_o=o("AlbertTokenizer"),x_o=o(" or "),ZI=a("a"),$_o=o("AlbertTokenizerFast"),k_o=o(" (YOSO model)"),S_o=l(),F(Ph.$$.fragment),R_o=l(),Bh=a("div"),F(Fy.$$.fragment),P_o=l(),Hie=a("p"),B_o=o("Register a new tokenizer in this mapping."),vXe=l(),ji=a("h2"),Nh=a("a"),Uie=a("span"),F(Ty.$$.fragment),N_o=l(),Jie=a("span"),I_o=o("AutoFeatureExtractor"),FXe=l(),yo=a("div"),F(My.$$.fragment),q_o=l(),Ey=a("p"),j_o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=a("a"),D_o=o("AutoFeatureExtractor.from_pretrained()"),G_o=o(" class method."),O_o=l(),Cy=a("p"),V_o=o("This class cannot be instantiated directly using "),Yie=a("code"),X_o=o("__init__()"),z_o=o(" (throws an error)."),Q_o=l(),Ue=a("div"),F(wy.$$.fragment),W_o=l(),Kie=a("p"),H_o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),U_o=l(),Ba=a("p"),J_o=o("The feature extractor class to instantiate is selected based on the "),Zie=a("code"),Y_o=o("model_type"),K_o=o(` property of the config object
(either passed as an argument or loaded from `),ede=a("code"),Z_o=o("pretrained_model_name_or_path"),e2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ode=a("code"),o2o=o("pretrained_model_name_or_path"),r2o=o(":"),t2o=l(),Y=a("ul"),Ih=a("li"),rde=a("strong"),a2o=o("beit"),n2o=o(" \u2014 "),oq=a("a"),s2o=o("BeitFeatureExtractor"),l2o=o(" (BEiT model)"),i2o=l(),qh=a("li"),tde=a("strong"),d2o=o("clip"),c2o=o(" \u2014 "),rq=a("a"),m2o=o("CLIPFeatureExtractor"),f2o=o(" (CLIP model)"),g2o=l(),jh=a("li"),ade=a("strong"),h2o=o("convnext"),u2o=o(" \u2014 "),tq=a("a"),p2o=o("ConvNextFeatureExtractor"),_2o=o(" (ConvNeXT model)"),b2o=l(),Dh=a("li"),nde=a("strong"),v2o=o("cvt"),F2o=o(" \u2014 "),aq=a("a"),T2o=o("ConvNextFeatureExtractor"),M2o=o(" (CvT model)"),E2o=l(),Gh=a("li"),sde=a("strong"),C2o=o("data2vec-audio"),w2o=o(" \u2014 "),nq=a("a"),A2o=o("Wav2Vec2FeatureExtractor"),L2o=o(" (Data2VecAudio model)"),y2o=l(),Oh=a("li"),lde=a("strong"),x2o=o("data2vec-vision"),$2o=o(" \u2014 "),sq=a("a"),k2o=o("BeitFeatureExtractor"),S2o=o(" (Data2VecVision model)"),R2o=l(),Vh=a("li"),ide=a("strong"),P2o=o("deit"),B2o=o(" \u2014 "),lq=a("a"),N2o=o("DeiTFeatureExtractor"),I2o=o(" (DeiT model)"),q2o=l(),Xh=a("li"),dde=a("strong"),j2o=o("detr"),D2o=o(" \u2014 "),iq=a("a"),G2o=o("DetrFeatureExtractor"),O2o=o(" (DETR model)"),V2o=l(),zh=a("li"),cde=a("strong"),X2o=o("dpt"),z2o=o(" \u2014 "),dq=a("a"),Q2o=o("DPTFeatureExtractor"),W2o=o(" (DPT model)"),H2o=l(),Qh=a("li"),mde=a("strong"),U2o=o("flava"),J2o=o(" \u2014 "),cq=a("a"),Y2o=o("FlavaFeatureExtractor"),K2o=o(" (FLAVA model)"),Z2o=l(),Wh=a("li"),fde=a("strong"),ebo=o("glpn"),obo=o(" \u2014 "),mq=a("a"),rbo=o("GLPNFeatureExtractor"),tbo=o(" (GLPN model)"),abo=l(),Hh=a("li"),gde=a("strong"),nbo=o("groupvit"),sbo=o(" \u2014 "),fq=a("a"),lbo=o("CLIPFeatureExtractor"),ibo=o(" (GroupViT model)"),dbo=l(),Uh=a("li"),hde=a("strong"),cbo=o("hubert"),mbo=o(" \u2014 "),gq=a("a"),fbo=o("Wav2Vec2FeatureExtractor"),gbo=o(" (Hubert model)"),hbo=l(),Jh=a("li"),ude=a("strong"),ubo=o("imagegpt"),pbo=o(" \u2014 "),hq=a("a"),_bo=o("ImageGPTFeatureExtractor"),bbo=o(" (ImageGPT model)"),vbo=l(),Yh=a("li"),pde=a("strong"),Fbo=o("layoutlmv2"),Tbo=o(" \u2014 "),uq=a("a"),Mbo=o("LayoutLMv2FeatureExtractor"),Ebo=o(" (LayoutLMv2 model)"),Cbo=l(),Kh=a("li"),_de=a("strong"),wbo=o("layoutlmv3"),Abo=o(" \u2014 "),pq=a("a"),Lbo=o("LayoutLMv3FeatureExtractor"),ybo=o(" (LayoutLMv3 model)"),xbo=l(),Zh=a("li"),bde=a("strong"),$bo=o("levit"),kbo=o(" \u2014 "),_q=a("a"),Sbo=o("LevitFeatureExtractor"),Rbo=o(" (LeViT model)"),Pbo=l(),eu=a("li"),vde=a("strong"),Bbo=o("maskformer"),Nbo=o(" \u2014 "),bq=a("a"),Ibo=o("MaskFormerFeatureExtractor"),qbo=o(" (MaskFormer model)"),jbo=l(),ou=a("li"),Fde=a("strong"),Dbo=o("mctct"),Gbo=o(" \u2014 "),vq=a("a"),Obo=o("MCTCTFeatureExtractor"),Vbo=o(" (M-CTC-T model)"),Xbo=l(),ru=a("li"),Tde=a("strong"),zbo=o("mobilevit"),Qbo=o(" \u2014 "),Fq=a("a"),Wbo=o("MobileViTFeatureExtractor"),Hbo=o(" (MobileViT model)"),Ubo=l(),tu=a("li"),Mde=a("strong"),Jbo=o("perceiver"),Ybo=o(" \u2014 "),Tq=a("a"),Kbo=o("PerceiverFeatureExtractor"),Zbo=o(" (Perceiver model)"),evo=l(),au=a("li"),Ede=a("strong"),ovo=o("poolformer"),rvo=o(" \u2014 "),Mq=a("a"),tvo=o("PoolFormerFeatureExtractor"),avo=o(" (PoolFormer model)"),nvo=l(),nu=a("li"),Cde=a("strong"),svo=o("regnet"),lvo=o(" \u2014 "),Eq=a("a"),ivo=o("ConvNextFeatureExtractor"),dvo=o(" (RegNet model)"),cvo=l(),su=a("li"),wde=a("strong"),mvo=o("resnet"),fvo=o(" \u2014 "),Cq=a("a"),gvo=o("ConvNextFeatureExtractor"),hvo=o(" (ResNet model)"),uvo=l(),lu=a("li"),Ade=a("strong"),pvo=o("segformer"),_vo=o(" \u2014 "),wq=a("a"),bvo=o("SegformerFeatureExtractor"),vvo=o(" (SegFormer model)"),Fvo=l(),iu=a("li"),Lde=a("strong"),Tvo=o("speech_to_text"),Mvo=o(" \u2014 "),Aq=a("a"),Evo=o("Speech2TextFeatureExtractor"),Cvo=o(" (Speech2Text model)"),wvo=l(),du=a("li"),yde=a("strong"),Avo=o("swin"),Lvo=o(" \u2014 "),Lq=a("a"),yvo=o("ViTFeatureExtractor"),xvo=o(" (Swin Transformer model)"),$vo=l(),cu=a("li"),xde=a("strong"),kvo=o("van"),Svo=o(" \u2014 "),yq=a("a"),Rvo=o("ConvNextFeatureExtractor"),Pvo=o(" (VAN model)"),Bvo=l(),mu=a("li"),$de=a("strong"),Nvo=o("vilt"),Ivo=o(" \u2014 "),xq=a("a"),qvo=o("ViltFeatureExtractor"),jvo=o(" (ViLT model)"),Dvo=l(),fu=a("li"),kde=a("strong"),Gvo=o("vit"),Ovo=o(" \u2014 "),$q=a("a"),Vvo=o("ViTFeatureExtractor"),Xvo=o(" (ViT model)"),zvo=l(),gu=a("li"),Sde=a("strong"),Qvo=o("vit_mae"),Wvo=o(" \u2014 "),kq=a("a"),Hvo=o("ViTFeatureExtractor"),Uvo=o(" (ViTMAE model)"),Jvo=l(),hu=a("li"),Rde=a("strong"),Yvo=o("wav2vec2"),Kvo=o(" \u2014 "),Sq=a("a"),Zvo=o("Wav2Vec2FeatureExtractor"),e1o=o(" (Wav2Vec2 model)"),o1o=l(),uu=a("li"),Pde=a("strong"),r1o=o("wav2vec2-conformer"),t1o=o(" \u2014 "),Rq=a("a"),a1o=o("Wav2Vec2FeatureExtractor"),n1o=o(" (Wav2Vec2-Conformer model)"),s1o=l(),pu=a("li"),Bde=a("strong"),l1o=o("yolos"),i1o=o(" \u2014 "),Pq=a("a"),d1o=o("YolosFeatureExtractor"),c1o=o(" (YOLOS model)"),m1o=l(),F(_u.$$.fragment),f1o=l(),F(bu.$$.fragment),g1o=l(),vu=a("div"),F(Ay.$$.fragment),h1o=l(),Nde=a("p"),u1o=o("Register a new feature extractor for this class."),TXe=l(),Di=a("h2"),Fu=a("a"),Ide=a("span"),F(Ly.$$.fragment),p1o=l(),qde=a("span"),_1o=o("AutoProcessor"),MXe=l(),xo=a("div"),F(yy.$$.fragment),b1o=l(),xy=a("p"),v1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bq=a("a"),F1o=o("AutoProcessor.from_pretrained()"),T1o=o(" class method."),M1o=l(),$y=a("p"),E1o=o("This class cannot be instantiated directly using "),jde=a("code"),C1o=o("__init__()"),w1o=o(" (throws an error)."),A1o=l(),Je=a("div"),F(ky.$$.fragment),L1o=l(),Dde=a("p"),y1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),x1o=l(),Gi=a("p"),$1o=o("The processor class to instantiate is selected based on the "),Gde=a("code"),k1o=o("model_type"),S1o=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),R1o=o("pretrained_model_name_or_path"),P1o=o(" if possible):"),B1o=l(),ue=a("ul"),Tu=a("li"),Vde=a("strong"),N1o=o("clip"),I1o=o(" \u2014 "),Nq=a("a"),q1o=o("CLIPProcessor"),j1o=o(" (CLIP model)"),D1o=l(),Mu=a("li"),Xde=a("strong"),G1o=o("flava"),O1o=o(" \u2014 "),zde=a("code"),V1o=o("FLAVAProcessor"),X1o=o(" (FLAVA model)"),z1o=l(),Eu=a("li"),Qde=a("strong"),Q1o=o("groupvit"),W1o=o(" \u2014 "),Iq=a("a"),H1o=o("CLIPProcessor"),U1o=o(" (GroupViT model)"),J1o=l(),Cu=a("li"),Wde=a("strong"),Y1o=o("layoutlmv2"),K1o=o(" \u2014 "),qq=a("a"),Z1o=o("LayoutLMv2Processor"),eFo=o(" (LayoutLMv2 model)"),oFo=l(),wu=a("li"),Hde=a("strong"),rFo=o("layoutlmv3"),tFo=o(" \u2014 "),jq=a("a"),aFo=o("LayoutLMv3Processor"),nFo=o(" (LayoutLMv3 model)"),sFo=l(),Au=a("li"),Ude=a("strong"),lFo=o("layoutxlm"),iFo=o(" \u2014 "),Dq=a("a"),dFo=o("LayoutXLMProcessor"),cFo=o(" (LayoutXLM model)"),mFo=l(),Lu=a("li"),Jde=a("strong"),fFo=o("sew"),gFo=o(" \u2014 "),Gq=a("a"),hFo=o("Wav2Vec2Processor"),uFo=o(" (SEW model)"),pFo=l(),yu=a("li"),Yde=a("strong"),_Fo=o("sew-d"),bFo=o(" \u2014 "),Oq=a("a"),vFo=o("Wav2Vec2Processor"),FFo=o(" (SEW-D model)"),TFo=l(),xu=a("li"),Kde=a("strong"),MFo=o("speech_to_text"),EFo=o(" \u2014 "),Vq=a("a"),CFo=o("Speech2TextProcessor"),wFo=o(" (Speech2Text model)"),AFo=l(),$u=a("li"),Zde=a("strong"),LFo=o("speech_to_text_2"),yFo=o(" \u2014 "),Xq=a("a"),xFo=o("Speech2Text2Processor"),$Fo=o(" (Speech2Text2 model)"),kFo=l(),ku=a("li"),ece=a("strong"),SFo=o("trocr"),RFo=o(" \u2014 "),zq=a("a"),PFo=o("TrOCRProcessor"),BFo=o(" (TrOCR model)"),NFo=l(),Su=a("li"),oce=a("strong"),IFo=o("unispeech"),qFo=o(" \u2014 "),Qq=a("a"),jFo=o("Wav2Vec2Processor"),DFo=o(" (UniSpeech model)"),GFo=l(),Ru=a("li"),rce=a("strong"),OFo=o("unispeech-sat"),VFo=o(" \u2014 "),Wq=a("a"),XFo=o("Wav2Vec2Processor"),zFo=o(" (UniSpeechSat model)"),QFo=l(),Pu=a("li"),tce=a("strong"),WFo=o("vilt"),HFo=o(" \u2014 "),Hq=a("a"),UFo=o("ViltProcessor"),JFo=o(" (ViLT model)"),YFo=l(),Bu=a("li"),ace=a("strong"),KFo=o("vision-text-dual-encoder"),ZFo=o(" \u2014 "),Uq=a("a"),eTo=o("VisionTextDualEncoderProcessor"),oTo=o(" (VisionTextDualEncoder model)"),rTo=l(),Nu=a("li"),nce=a("strong"),tTo=o("wav2vec2"),aTo=o(" \u2014 "),Jq=a("a"),nTo=o("Wav2Vec2Processor"),sTo=o(" (Wav2Vec2 model)"),lTo=l(),Iu=a("li"),sce=a("strong"),iTo=o("wav2vec2-conformer"),dTo=o(" \u2014 "),Yq=a("a"),cTo=o("Wav2Vec2Processor"),mTo=o(" (Wav2Vec2-Conformer model)"),fTo=l(),qu=a("li"),lce=a("strong"),gTo=o("wavlm"),hTo=o(" \u2014 "),Kq=a("a"),uTo=o("Wav2Vec2Processor"),pTo=o(" (WavLM model)"),_To=l(),F(ju.$$.fragment),bTo=l(),F(Du.$$.fragment),vTo=l(),Gu=a("div"),F(Sy.$$.fragment),FTo=l(),ice=a("p"),TTo=o("Register a new processor for this class."),EXe=l(),Oi=a("h2"),Ou=a("a"),dce=a("span"),F(Ry.$$.fragment),MTo=l(),cce=a("span"),ETo=o("AutoModel"),CXe=l(),$o=a("div"),F(Py.$$.fragment),CTo=l(),Vi=a("p"),wTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zq=a("a"),ATo=o("from_pretrained()"),LTo=o(" class method or the "),ej=a("a"),yTo=o("from_config()"),xTo=o(` class
method.`),$To=l(),By=a("p"),kTo=o("This class cannot be instantiated directly using "),mce=a("code"),STo=o("__init__()"),RTo=o(" (throws an error)."),PTo=l(),it=a("div"),F(Ny.$$.fragment),BTo=l(),fce=a("p"),NTo=o("Instantiates one of the base model classes of the library from a configuration."),ITo=l(),Xi=a("p"),qTo=o(`Note:
Loading a model from its configuration file does `),gce=a("strong"),jTo=o("not"),DTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=a("a"),GTo=o("from_pretrained()"),OTo=o(" to load the model weights."),VTo=l(),F(Vu.$$.fragment),XTo=l(),Ye=a("div"),F(Iy.$$.fragment),zTo=l(),hce=a("p"),QTo=o("Instantiate one of the base model classes of the library from a pretrained model."),WTo=l(),Na=a("p"),HTo=o("The model class to instantiate is selected based on the "),uce=a("code"),UTo=o("model_type"),JTo=o(` property of the config object (either
passed as an argument or loaded from `),pce=a("code"),YTo=o("pretrained_model_name_or_path"),KTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ce=a("code"),ZTo=o("pretrained_model_name_or_path"),eMo=o(":"),oMo=l(),y=a("ul"),Xu=a("li"),bce=a("strong"),rMo=o("albert"),tMo=o(" \u2014 "),rj=a("a"),aMo=o("AlbertModel"),nMo=o(" (ALBERT model)"),sMo=l(),zu=a("li"),vce=a("strong"),lMo=o("bart"),iMo=o(" \u2014 "),tj=a("a"),dMo=o("BartModel"),cMo=o(" (BART model)"),mMo=l(),Qu=a("li"),Fce=a("strong"),fMo=o("beit"),gMo=o(" \u2014 "),aj=a("a"),hMo=o("BeitModel"),uMo=o(" (BEiT model)"),pMo=l(),Wu=a("li"),Tce=a("strong"),_Mo=o("bert"),bMo=o(" \u2014 "),nj=a("a"),vMo=o("BertModel"),FMo=o(" (BERT model)"),TMo=l(),Hu=a("li"),Mce=a("strong"),MMo=o("bert-generation"),EMo=o(" \u2014 "),sj=a("a"),CMo=o("BertGenerationEncoder"),wMo=o(" (Bert Generation model)"),AMo=l(),Uu=a("li"),Ece=a("strong"),LMo=o("big_bird"),yMo=o(" \u2014 "),lj=a("a"),xMo=o("BigBirdModel"),$Mo=o(" (BigBird model)"),kMo=l(),Ju=a("li"),Cce=a("strong"),SMo=o("bigbird_pegasus"),RMo=o(" \u2014 "),ij=a("a"),PMo=o("BigBirdPegasusModel"),BMo=o(" (BigBird-Pegasus model)"),NMo=l(),Yu=a("li"),wce=a("strong"),IMo=o("blenderbot"),qMo=o(" \u2014 "),dj=a("a"),jMo=o("BlenderbotModel"),DMo=o(" (Blenderbot model)"),GMo=l(),Ku=a("li"),Ace=a("strong"),OMo=o("blenderbot-small"),VMo=o(" \u2014 "),cj=a("a"),XMo=o("BlenderbotSmallModel"),zMo=o(" (BlenderbotSmall model)"),QMo=l(),Zu=a("li"),Lce=a("strong"),WMo=o("bloom"),HMo=o(" \u2014 "),mj=a("a"),UMo=o("BloomModel"),JMo=o(" (BLOOM model)"),YMo=l(),ep=a("li"),yce=a("strong"),KMo=o("camembert"),ZMo=o(" \u2014 "),fj=a("a"),e4o=o("CamembertModel"),o4o=o(" (CamemBERT model)"),r4o=l(),op=a("li"),xce=a("strong"),t4o=o("canine"),a4o=o(" \u2014 "),gj=a("a"),n4o=o("CanineModel"),s4o=o(" (CANINE model)"),l4o=l(),rp=a("li"),$ce=a("strong"),i4o=o("clip"),d4o=o(" \u2014 "),hj=a("a"),c4o=o("CLIPModel"),m4o=o(" (CLIP model)"),f4o=l(),tp=a("li"),kce=a("strong"),g4o=o("codegen"),h4o=o(" \u2014 "),uj=a("a"),u4o=o("CodeGenModel"),p4o=o(" (CodeGen model)"),_4o=l(),ap=a("li"),Sce=a("strong"),b4o=o("convbert"),v4o=o(" \u2014 "),pj=a("a"),F4o=o("ConvBertModel"),T4o=o(" (ConvBERT model)"),M4o=l(),np=a("li"),Rce=a("strong"),E4o=o("convnext"),C4o=o(" \u2014 "),_j=a("a"),w4o=o("ConvNextModel"),A4o=o(" (ConvNeXT model)"),L4o=l(),sp=a("li"),Pce=a("strong"),y4o=o("ctrl"),x4o=o(" \u2014 "),bj=a("a"),$4o=o("CTRLModel"),k4o=o(" (CTRL model)"),S4o=l(),lp=a("li"),Bce=a("strong"),R4o=o("cvt"),P4o=o(" \u2014 "),vj=a("a"),B4o=o("CvtModel"),N4o=o(" (CvT model)"),I4o=l(),ip=a("li"),Nce=a("strong"),q4o=o("data2vec-audio"),j4o=o(" \u2014 "),Fj=a("a"),D4o=o("Data2VecAudioModel"),G4o=o(" (Data2VecAudio model)"),O4o=l(),dp=a("li"),Ice=a("strong"),V4o=o("data2vec-text"),X4o=o(" \u2014 "),Tj=a("a"),z4o=o("Data2VecTextModel"),Q4o=o(" (Data2VecText model)"),W4o=l(),cp=a("li"),qce=a("strong"),H4o=o("data2vec-vision"),U4o=o(" \u2014 "),Mj=a("a"),J4o=o("Data2VecVisionModel"),Y4o=o(" (Data2VecVision model)"),K4o=l(),mp=a("li"),jce=a("strong"),Z4o=o("deberta"),eEo=o(" \u2014 "),Ej=a("a"),oEo=o("DebertaModel"),rEo=o(" (DeBERTa model)"),tEo=l(),fp=a("li"),Dce=a("strong"),aEo=o("deberta-v2"),nEo=o(" \u2014 "),Cj=a("a"),sEo=o("DebertaV2Model"),lEo=o(" (DeBERTa-v2 model)"),iEo=l(),gp=a("li"),Gce=a("strong"),dEo=o("decision_transformer"),cEo=o(" \u2014 "),wj=a("a"),mEo=o("DecisionTransformerModel"),fEo=o(" (Decision Transformer model)"),gEo=l(),hp=a("li"),Oce=a("strong"),hEo=o("deit"),uEo=o(" \u2014 "),Aj=a("a"),pEo=o("DeiTModel"),_Eo=o(" (DeiT model)"),bEo=l(),up=a("li"),Vce=a("strong"),vEo=o("detr"),FEo=o(" \u2014 "),Lj=a("a"),TEo=o("DetrModel"),MEo=o(" (DETR model)"),EEo=l(),pp=a("li"),Xce=a("strong"),CEo=o("distilbert"),wEo=o(" \u2014 "),yj=a("a"),AEo=o("DistilBertModel"),LEo=o(" (DistilBERT model)"),yEo=l(),_p=a("li"),zce=a("strong"),xEo=o("dpr"),$Eo=o(" \u2014 "),xj=a("a"),kEo=o("DPRQuestionEncoder"),SEo=o(" (DPR model)"),REo=l(),bp=a("li"),Qce=a("strong"),PEo=o("dpt"),BEo=o(" \u2014 "),$j=a("a"),NEo=o("DPTModel"),IEo=o(" (DPT model)"),qEo=l(),vp=a("li"),Wce=a("strong"),jEo=o("electra"),DEo=o(" \u2014 "),kj=a("a"),GEo=o("ElectraModel"),OEo=o(" (ELECTRA model)"),VEo=l(),Fp=a("li"),Hce=a("strong"),XEo=o("flaubert"),zEo=o(" \u2014 "),Sj=a("a"),QEo=o("FlaubertModel"),WEo=o(" (FlauBERT model)"),HEo=l(),Tp=a("li"),Uce=a("strong"),UEo=o("flava"),JEo=o(" \u2014 "),Rj=a("a"),YEo=o("FlavaModel"),KEo=o(" (FLAVA model)"),ZEo=l(),Mp=a("li"),Jce=a("strong"),eCo=o("fnet"),oCo=o(" \u2014 "),Pj=a("a"),rCo=o("FNetModel"),tCo=o(" (FNet model)"),aCo=l(),Ep=a("li"),Yce=a("strong"),nCo=o("fsmt"),sCo=o(" \u2014 "),Bj=a("a"),lCo=o("FSMTModel"),iCo=o(" (FairSeq Machine-Translation model)"),dCo=l(),Hs=a("li"),Kce=a("strong"),cCo=o("funnel"),mCo=o(" \u2014 "),Nj=a("a"),fCo=o("FunnelModel"),gCo=o(" or "),Ij=a("a"),hCo=o("FunnelBaseModel"),uCo=o(" (Funnel Transformer model)"),pCo=l(),Cp=a("li"),Zce=a("strong"),_Co=o("glpn"),bCo=o(" \u2014 "),qj=a("a"),vCo=o("GLPNModel"),FCo=o(" (GLPN model)"),TCo=l(),wp=a("li"),eme=a("strong"),MCo=o("gpt2"),ECo=o(" \u2014 "),jj=a("a"),CCo=o("GPT2Model"),wCo=o(" (OpenAI GPT-2 model)"),ACo=l(),Ap=a("li"),ome=a("strong"),LCo=o("gpt_neo"),yCo=o(" \u2014 "),Dj=a("a"),xCo=o("GPTNeoModel"),$Co=o(" (GPT Neo model)"),kCo=l(),Lp=a("li"),rme=a("strong"),SCo=o("gpt_neox"),RCo=o(" \u2014 "),Gj=a("a"),PCo=o("GPTNeoXModel"),BCo=o(" (GPT NeoX model)"),NCo=l(),yp=a("li"),tme=a("strong"),ICo=o("gptj"),qCo=o(" \u2014 "),Oj=a("a"),jCo=o("GPTJModel"),DCo=o(" (GPT-J model)"),GCo=l(),xp=a("li"),ame=a("strong"),OCo=o("groupvit"),VCo=o(" \u2014 "),Vj=a("a"),XCo=o("GroupViTModel"),zCo=o(" (GroupViT model)"),QCo=l(),$p=a("li"),nme=a("strong"),WCo=o("hubert"),HCo=o(" \u2014 "),Xj=a("a"),UCo=o("HubertModel"),JCo=o(" (Hubert model)"),YCo=l(),kp=a("li"),sme=a("strong"),KCo=o("ibert"),ZCo=o(" \u2014 "),zj=a("a"),e3o=o("IBertModel"),o3o=o(" (I-BERT model)"),r3o=l(),Sp=a("li"),lme=a("strong"),t3o=o("imagegpt"),a3o=o(" \u2014 "),Qj=a("a"),n3o=o("ImageGPTModel"),s3o=o(" (ImageGPT model)"),l3o=l(),Rp=a("li"),ime=a("strong"),i3o=o("layoutlm"),d3o=o(" \u2014 "),Wj=a("a"),c3o=o("LayoutLMModel"),m3o=o(" (LayoutLM model)"),f3o=l(),Pp=a("li"),dme=a("strong"),g3o=o("layoutlmv2"),h3o=o(" \u2014 "),Hj=a("a"),u3o=o("LayoutLMv2Model"),p3o=o(" (LayoutLMv2 model)"),_3o=l(),Bp=a("li"),cme=a("strong"),b3o=o("layoutlmv3"),v3o=o(" \u2014 "),Uj=a("a"),F3o=o("LayoutLMv3Model"),T3o=o(" (LayoutLMv3 model)"),M3o=l(),Np=a("li"),mme=a("strong"),E3o=o("led"),C3o=o(" \u2014 "),Jj=a("a"),w3o=o("LEDModel"),A3o=o(" (LED model)"),L3o=l(),Ip=a("li"),fme=a("strong"),y3o=o("levit"),x3o=o(" \u2014 "),Yj=a("a"),$3o=o("LevitModel"),k3o=o(" (LeViT model)"),S3o=l(),qp=a("li"),gme=a("strong"),R3o=o("longformer"),P3o=o(" \u2014 "),Kj=a("a"),B3o=o("LongformerModel"),N3o=o(" (Longformer model)"),I3o=l(),jp=a("li"),hme=a("strong"),q3o=o("longt5"),j3o=o(" \u2014 "),Zj=a("a"),D3o=o("LongT5Model"),G3o=o(" (LongT5 model)"),O3o=l(),Dp=a("li"),ume=a("strong"),V3o=o("luke"),X3o=o(" \u2014 "),eD=a("a"),z3o=o("LukeModel"),Q3o=o(" (LUKE model)"),W3o=l(),Gp=a("li"),pme=a("strong"),H3o=o("lxmert"),U3o=o(" \u2014 "),oD=a("a"),J3o=o("LxmertModel"),Y3o=o(" (LXMERT model)"),K3o=l(),Op=a("li"),_me=a("strong"),Z3o=o("m2m_100"),e5o=o(" \u2014 "),rD=a("a"),o5o=o("M2M100Model"),r5o=o(" (M2M100 model)"),t5o=l(),Vp=a("li"),bme=a("strong"),a5o=o("marian"),n5o=o(" \u2014 "),tD=a("a"),s5o=o("MarianModel"),l5o=o(" (Marian model)"),i5o=l(),Xp=a("li"),vme=a("strong"),d5o=o("maskformer"),c5o=o(" \u2014 "),aD=a("a"),m5o=o("MaskFormerModel"),f5o=o(" (MaskFormer model)"),g5o=l(),zp=a("li"),Fme=a("strong"),h5o=o("mbart"),u5o=o(" \u2014 "),nD=a("a"),p5o=o("MBartModel"),_5o=o(" (mBART model)"),b5o=l(),Qp=a("li"),Tme=a("strong"),v5o=o("mctct"),F5o=o(" \u2014 "),sD=a("a"),T5o=o("MCTCTModel"),M5o=o(" (M-CTC-T model)"),E5o=l(),Wp=a("li"),Mme=a("strong"),C5o=o("megatron-bert"),w5o=o(" \u2014 "),lD=a("a"),A5o=o("MegatronBertModel"),L5o=o(" (Megatron-BERT model)"),y5o=l(),Hp=a("li"),Eme=a("strong"),x5o=o("mobilebert"),$5o=o(" \u2014 "),iD=a("a"),k5o=o("MobileBertModel"),S5o=o(" (MobileBERT model)"),R5o=l(),Up=a("li"),Cme=a("strong"),P5o=o("mobilevit"),B5o=o(" \u2014 "),dD=a("a"),N5o=o("MobileViTModel"),I5o=o(" (MobileViT model)"),q5o=l(),Jp=a("li"),wme=a("strong"),j5o=o("mpnet"),D5o=o(" \u2014 "),cD=a("a"),G5o=o("MPNetModel"),O5o=o(" (MPNet model)"),V5o=l(),Yp=a("li"),Ame=a("strong"),X5o=o("mt5"),z5o=o(" \u2014 "),mD=a("a"),Q5o=o("MT5Model"),W5o=o(" (MT5 model)"),H5o=l(),Kp=a("li"),Lme=a("strong"),U5o=o("mvp"),J5o=o(" \u2014 "),fD=a("a"),Y5o=o("MvpModel"),K5o=o(" (MVP model)"),Z5o=l(),Zp=a("li"),yme=a("strong"),e0o=o("nezha"),o0o=o(" \u2014 "),gD=a("a"),r0o=o("NezhaModel"),t0o=o(" (Nezha model)"),a0o=l(),e_=a("li"),xme=a("strong"),n0o=o("nllb"),s0o=o(" \u2014 "),hD=a("a"),l0o=o("M2M100Model"),i0o=o(" (NLLB model)"),d0o=l(),o_=a("li"),$me=a("strong"),c0o=o("nystromformer"),m0o=o(" \u2014 "),uD=a("a"),f0o=o("NystromformerModel"),g0o=o(" (Nystr\xF6mformer model)"),h0o=l(),r_=a("li"),kme=a("strong"),u0o=o("openai-gpt"),p0o=o(" \u2014 "),pD=a("a"),_0o=o("OpenAIGPTModel"),b0o=o(" (OpenAI GPT model)"),v0o=l(),t_=a("li"),Sme=a("strong"),F0o=o("opt"),T0o=o(" \u2014 "),_D=a("a"),M0o=o("OPTModel"),E0o=o(" (OPT model)"),C0o=l(),a_=a("li"),Rme=a("strong"),w0o=o("pegasus"),A0o=o(" \u2014 "),bD=a("a"),L0o=o("PegasusModel"),y0o=o(" (Pegasus model)"),x0o=l(),n_=a("li"),Pme=a("strong"),$0o=o("perceiver"),k0o=o(" \u2014 "),vD=a("a"),S0o=o("PerceiverModel"),R0o=o(" (Perceiver model)"),P0o=l(),s_=a("li"),Bme=a("strong"),B0o=o("plbart"),N0o=o(" \u2014 "),FD=a("a"),I0o=o("PLBartModel"),q0o=o(" (PLBart model)"),j0o=l(),l_=a("li"),Nme=a("strong"),D0o=o("poolformer"),G0o=o(" \u2014 "),TD=a("a"),O0o=o("PoolFormerModel"),V0o=o(" (PoolFormer model)"),X0o=l(),i_=a("li"),Ime=a("strong"),z0o=o("prophetnet"),Q0o=o(" \u2014 "),MD=a("a"),W0o=o("ProphetNetModel"),H0o=o(" (ProphetNet model)"),U0o=l(),d_=a("li"),qme=a("strong"),J0o=o("qdqbert"),Y0o=o(" \u2014 "),ED=a("a"),K0o=o("QDQBertModel"),Z0o=o(" (QDQBert model)"),ewo=l(),c_=a("li"),jme=a("strong"),owo=o("reformer"),rwo=o(" \u2014 "),CD=a("a"),two=o("ReformerModel"),awo=o(" (Reformer model)"),nwo=l(),m_=a("li"),Dme=a("strong"),swo=o("regnet"),lwo=o(" \u2014 "),wD=a("a"),iwo=o("RegNetModel"),dwo=o(" (RegNet model)"),cwo=l(),f_=a("li"),Gme=a("strong"),mwo=o("rembert"),fwo=o(" \u2014 "),AD=a("a"),gwo=o("RemBertModel"),hwo=o(" (RemBERT model)"),uwo=l(),g_=a("li"),Ome=a("strong"),pwo=o("resnet"),_wo=o(" \u2014 "),LD=a("a"),bwo=o("ResNetModel"),vwo=o(" (ResNet model)"),Fwo=l(),h_=a("li"),Vme=a("strong"),Two=o("retribert"),Mwo=o(" \u2014 "),yD=a("a"),Ewo=o("RetriBertModel"),Cwo=o(" (RetriBERT model)"),wwo=l(),u_=a("li"),Xme=a("strong"),Awo=o("roberta"),Lwo=o(" \u2014 "),xD=a("a"),ywo=o("RobertaModel"),xwo=o(" (RoBERTa model)"),$wo=l(),p_=a("li"),zme=a("strong"),kwo=o("roformer"),Swo=o(" \u2014 "),$D=a("a"),Rwo=o("RoFormerModel"),Pwo=o(" (RoFormer model)"),Bwo=l(),__=a("li"),Qme=a("strong"),Nwo=o("segformer"),Iwo=o(" \u2014 "),kD=a("a"),qwo=o("SegformerModel"),jwo=o(" (SegFormer model)"),Dwo=l(),b_=a("li"),Wme=a("strong"),Gwo=o("sew"),Owo=o(" \u2014 "),SD=a("a"),Vwo=o("SEWModel"),Xwo=o(" (SEW model)"),zwo=l(),v_=a("li"),Hme=a("strong"),Qwo=o("sew-d"),Wwo=o(" \u2014 "),RD=a("a"),Hwo=o("SEWDModel"),Uwo=o(" (SEW-D model)"),Jwo=l(),F_=a("li"),Ume=a("strong"),Ywo=o("speech_to_text"),Kwo=o(" \u2014 "),PD=a("a"),Zwo=o("Speech2TextModel"),eAo=o(" (Speech2Text model)"),oAo=l(),T_=a("li"),Jme=a("strong"),rAo=o("splinter"),tAo=o(" \u2014 "),BD=a("a"),aAo=o("SplinterModel"),nAo=o(" (Splinter model)"),sAo=l(),M_=a("li"),Yme=a("strong"),lAo=o("squeezebert"),iAo=o(" \u2014 "),ND=a("a"),dAo=o("SqueezeBertModel"),cAo=o(" (SqueezeBERT model)"),mAo=l(),E_=a("li"),Kme=a("strong"),fAo=o("swin"),gAo=o(" \u2014 "),ID=a("a"),hAo=o("SwinModel"),uAo=o(" (Swin Transformer model)"),pAo=l(),C_=a("li"),Zme=a("strong"),_Ao=o("t5"),bAo=o(" \u2014 "),qD=a("a"),vAo=o("T5Model"),FAo=o(" (T5 model)"),TAo=l(),w_=a("li"),efe=a("strong"),MAo=o("tapas"),EAo=o(" \u2014 "),jD=a("a"),CAo=o("TapasModel"),wAo=o(" (TAPAS model)"),AAo=l(),A_=a("li"),ofe=a("strong"),LAo=o("trajectory_transformer"),yAo=o(" \u2014 "),DD=a("a"),xAo=o("TrajectoryTransformerModel"),$Ao=o(" (Trajectory Transformer model)"),kAo=l(),L_=a("li"),rfe=a("strong"),SAo=o("transfo-xl"),RAo=o(" \u2014 "),GD=a("a"),PAo=o("TransfoXLModel"),BAo=o(" (Transformer-XL model)"),NAo=l(),y_=a("li"),tfe=a("strong"),IAo=o("unispeech"),qAo=o(" \u2014 "),OD=a("a"),jAo=o("UniSpeechModel"),DAo=o(" (UniSpeech model)"),GAo=l(),x_=a("li"),afe=a("strong"),OAo=o("unispeech-sat"),VAo=o(" \u2014 "),VD=a("a"),XAo=o("UniSpeechSatModel"),zAo=o(" (UniSpeechSat model)"),QAo=l(),$_=a("li"),nfe=a("strong"),WAo=o("van"),HAo=o(" \u2014 "),XD=a("a"),UAo=o("VanModel"),JAo=o(" (VAN model)"),YAo=l(),k_=a("li"),sfe=a("strong"),KAo=o("vilt"),ZAo=o(" \u2014 "),zD=a("a"),e6o=o("ViltModel"),o6o=o(" (ViLT model)"),r6o=l(),S_=a("li"),lfe=a("strong"),t6o=o("vision-text-dual-encoder"),a6o=o(" \u2014 "),QD=a("a"),n6o=o("VisionTextDualEncoderModel"),s6o=o(" (VisionTextDualEncoder model)"),l6o=l(),R_=a("li"),ife=a("strong"),i6o=o("visual_bert"),d6o=o(" \u2014 "),WD=a("a"),c6o=o("VisualBertModel"),m6o=o(" (VisualBERT model)"),f6o=l(),P_=a("li"),dfe=a("strong"),g6o=o("vit"),h6o=o(" \u2014 "),HD=a("a"),u6o=o("ViTModel"),p6o=o(" (ViT model)"),_6o=l(),B_=a("li"),cfe=a("strong"),b6o=o("vit_mae"),v6o=o(" \u2014 "),UD=a("a"),F6o=o("ViTMAEModel"),T6o=o(" (ViTMAE model)"),M6o=l(),N_=a("li"),mfe=a("strong"),E6o=o("wav2vec2"),C6o=o(" \u2014 "),JD=a("a"),w6o=o("Wav2Vec2Model"),A6o=o(" (Wav2Vec2 model)"),L6o=l(),I_=a("li"),ffe=a("strong"),y6o=o("wav2vec2-conformer"),x6o=o(" \u2014 "),YD=a("a"),$6o=o("Wav2Vec2ConformerModel"),k6o=o(" (Wav2Vec2-Conformer model)"),S6o=l(),q_=a("li"),gfe=a("strong"),R6o=o("wavlm"),P6o=o(" \u2014 "),KD=a("a"),B6o=o("WavLMModel"),N6o=o(" (WavLM model)"),I6o=l(),j_=a("li"),hfe=a("strong"),q6o=o("xglm"),j6o=o(" \u2014 "),ZD=a("a"),D6o=o("XGLMModel"),G6o=o(" (XGLM model)"),O6o=l(),D_=a("li"),ufe=a("strong"),V6o=o("xlm"),X6o=o(" \u2014 "),eG=a("a"),z6o=o("XLMModel"),Q6o=o(" (XLM model)"),W6o=l(),G_=a("li"),pfe=a("strong"),H6o=o("xlm-prophetnet"),U6o=o(" \u2014 "),oG=a("a"),J6o=o("XLMProphetNetModel"),Y6o=o(" (XLM-ProphetNet model)"),K6o=l(),O_=a("li"),_fe=a("strong"),Z6o=o("xlm-roberta"),e7o=o(" \u2014 "),rG=a("a"),o7o=o("XLMRobertaModel"),r7o=o(" (XLM-RoBERTa model)"),t7o=l(),V_=a("li"),bfe=a("strong"),a7o=o("xlm-roberta-xl"),n7o=o(" \u2014 "),tG=a("a"),s7o=o("XLMRobertaXLModel"),l7o=o(" (XLM-RoBERTa-XL model)"),i7o=l(),X_=a("li"),vfe=a("strong"),d7o=o("xlnet"),c7o=o(" \u2014 "),aG=a("a"),m7o=o("XLNetModel"),f7o=o(" (XLNet model)"),g7o=l(),z_=a("li"),Ffe=a("strong"),h7o=o("yolos"),u7o=o(" \u2014 "),nG=a("a"),p7o=o("YolosModel"),_7o=o(" (YOLOS model)"),b7o=l(),Q_=a("li"),Tfe=a("strong"),v7o=o("yoso"),F7o=o(" \u2014 "),sG=a("a"),T7o=o("YosoModel"),M7o=o(" (YOSO model)"),E7o=l(),W_=a("p"),C7o=o("The model is set in evaluation mode by default using "),Mfe=a("code"),w7o=o("model.eval()"),A7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),L7o=o("model.train()"),y7o=l(),F(H_.$$.fragment),wXe=l(),zi=a("h2"),U_=a("a"),Cfe=a("span"),F(qy.$$.fragment),x7o=l(),wfe=a("span"),$7o=o("AutoModelForPreTraining"),AXe=l(),ko=a("div"),F(jy.$$.fragment),k7o=l(),Qi=a("p"),S7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lG=a("a"),R7o=o("from_pretrained()"),P7o=o(" class method or the "),iG=a("a"),B7o=o("from_config()"),N7o=o(` class
method.`),I7o=l(),Dy=a("p"),q7o=o("This class cannot be instantiated directly using "),Afe=a("code"),j7o=o("__init__()"),D7o=o(" (throws an error)."),G7o=l(),dt=a("div"),F(Gy.$$.fragment),O7o=l(),Lfe=a("p"),V7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X7o=l(),Wi=a("p"),z7o=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),Q7o=o("not"),W7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=a("a"),H7o=o("from_pretrained()"),U7o=o(" to load the model weights."),J7o=l(),F(J_.$$.fragment),Y7o=l(),Ke=a("div"),F(Oy.$$.fragment),K7o=l(),xfe=a("p"),Z7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eLo=l(),Ia=a("p"),oLo=o("The model class to instantiate is selected based on the "),$fe=a("code"),rLo=o("model_type"),tLo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),aLo=o("pretrained_model_name_or_path"),nLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),sLo=o("pretrained_model_name_or_path"),lLo=o(":"),iLo=l(),G=a("ul"),Y_=a("li"),Rfe=a("strong"),dLo=o("albert"),cLo=o(" \u2014 "),cG=a("a"),mLo=o("AlbertForPreTraining"),fLo=o(" (ALBERT model)"),gLo=l(),K_=a("li"),Pfe=a("strong"),hLo=o("bart"),uLo=o(" \u2014 "),mG=a("a"),pLo=o("BartForConditionalGeneration"),_Lo=o(" (BART model)"),bLo=l(),Z_=a("li"),Bfe=a("strong"),vLo=o("bert"),FLo=o(" \u2014 "),fG=a("a"),TLo=o("BertForPreTraining"),MLo=o(" (BERT model)"),ELo=l(),e2=a("li"),Nfe=a("strong"),CLo=o("big_bird"),wLo=o(" \u2014 "),gG=a("a"),ALo=o("BigBirdForPreTraining"),LLo=o(" (BigBird model)"),yLo=l(),o2=a("li"),Ife=a("strong"),xLo=o("bloom"),$Lo=o(" \u2014 "),hG=a("a"),kLo=o("BloomForCausalLM"),SLo=o(" (BLOOM model)"),RLo=l(),r2=a("li"),qfe=a("strong"),PLo=o("camembert"),BLo=o(" \u2014 "),uG=a("a"),NLo=o("CamembertForMaskedLM"),ILo=o(" (CamemBERT model)"),qLo=l(),t2=a("li"),jfe=a("strong"),jLo=o("ctrl"),DLo=o(" \u2014 "),pG=a("a"),GLo=o("CTRLLMHeadModel"),OLo=o(" (CTRL model)"),VLo=l(),a2=a("li"),Dfe=a("strong"),XLo=o("data2vec-text"),zLo=o(" \u2014 "),_G=a("a"),QLo=o("Data2VecTextForMaskedLM"),WLo=o(" (Data2VecText model)"),HLo=l(),n2=a("li"),Gfe=a("strong"),ULo=o("deberta"),JLo=o(" \u2014 "),bG=a("a"),YLo=o("DebertaForMaskedLM"),KLo=o(" (DeBERTa model)"),ZLo=l(),s2=a("li"),Ofe=a("strong"),eyo=o("deberta-v2"),oyo=o(" \u2014 "),vG=a("a"),ryo=o("DebertaV2ForMaskedLM"),tyo=o(" (DeBERTa-v2 model)"),ayo=l(),l2=a("li"),Vfe=a("strong"),nyo=o("distilbert"),syo=o(" \u2014 "),FG=a("a"),lyo=o("DistilBertForMaskedLM"),iyo=o(" (DistilBERT model)"),dyo=l(),i2=a("li"),Xfe=a("strong"),cyo=o("electra"),myo=o(" \u2014 "),TG=a("a"),fyo=o("ElectraForPreTraining"),gyo=o(" (ELECTRA model)"),hyo=l(),d2=a("li"),zfe=a("strong"),uyo=o("flaubert"),pyo=o(" \u2014 "),MG=a("a"),_yo=o("FlaubertWithLMHeadModel"),byo=o(" (FlauBERT model)"),vyo=l(),c2=a("li"),Qfe=a("strong"),Fyo=o("flava"),Tyo=o(" \u2014 "),EG=a("a"),Myo=o("FlavaForPreTraining"),Eyo=o(" (FLAVA model)"),Cyo=l(),m2=a("li"),Wfe=a("strong"),wyo=o("fnet"),Ayo=o(" \u2014 "),CG=a("a"),Lyo=o("FNetForPreTraining"),yyo=o(" (FNet model)"),xyo=l(),f2=a("li"),Hfe=a("strong"),$yo=o("fsmt"),kyo=o(" \u2014 "),wG=a("a"),Syo=o("FSMTForConditionalGeneration"),Ryo=o(" (FairSeq Machine-Translation model)"),Pyo=l(),g2=a("li"),Ufe=a("strong"),Byo=o("funnel"),Nyo=o(" \u2014 "),AG=a("a"),Iyo=o("FunnelForPreTraining"),qyo=o(" (Funnel Transformer model)"),jyo=l(),h2=a("li"),Jfe=a("strong"),Dyo=o("gpt2"),Gyo=o(" \u2014 "),LG=a("a"),Oyo=o("GPT2LMHeadModel"),Vyo=o(" (OpenAI GPT-2 model)"),Xyo=l(),u2=a("li"),Yfe=a("strong"),zyo=o("ibert"),Qyo=o(" \u2014 "),yG=a("a"),Wyo=o("IBertForMaskedLM"),Hyo=o(" (I-BERT model)"),Uyo=l(),p2=a("li"),Kfe=a("strong"),Jyo=o("layoutlm"),Yyo=o(" \u2014 "),xG=a("a"),Kyo=o("LayoutLMForMaskedLM"),Zyo=o(" (LayoutLM model)"),e8o=l(),_2=a("li"),Zfe=a("strong"),o8o=o("longformer"),r8o=o(" \u2014 "),$G=a("a"),t8o=o("LongformerForMaskedLM"),a8o=o(" (Longformer model)"),n8o=l(),b2=a("li"),ege=a("strong"),s8o=o("lxmert"),l8o=o(" \u2014 "),kG=a("a"),i8o=o("LxmertForPreTraining"),d8o=o(" (LXMERT model)"),c8o=l(),v2=a("li"),oge=a("strong"),m8o=o("megatron-bert"),f8o=o(" \u2014 "),SG=a("a"),g8o=o("MegatronBertForPreTraining"),h8o=o(" (Megatron-BERT model)"),u8o=l(),F2=a("li"),rge=a("strong"),p8o=o("mobilebert"),_8o=o(" \u2014 "),RG=a("a"),b8o=o("MobileBertForPreTraining"),v8o=o(" (MobileBERT model)"),F8o=l(),T2=a("li"),tge=a("strong"),T8o=o("mpnet"),M8o=o(" \u2014 "),PG=a("a"),E8o=o("MPNetForMaskedLM"),C8o=o(" (MPNet model)"),w8o=l(),M2=a("li"),age=a("strong"),A8o=o("mvp"),L8o=o(" \u2014 "),BG=a("a"),y8o=o("MvpForConditionalGeneration"),x8o=o(" (MVP model)"),$8o=l(),E2=a("li"),nge=a("strong"),k8o=o("nezha"),S8o=o(" \u2014 "),NG=a("a"),R8o=o("NezhaForPreTraining"),P8o=o(" (Nezha model)"),B8o=l(),C2=a("li"),sge=a("strong"),N8o=o("openai-gpt"),I8o=o(" \u2014 "),IG=a("a"),q8o=o("OpenAIGPTLMHeadModel"),j8o=o(" (OpenAI GPT model)"),D8o=l(),w2=a("li"),lge=a("strong"),G8o=o("retribert"),O8o=o(" \u2014 "),qG=a("a"),V8o=o("RetriBertModel"),X8o=o(" (RetriBERT model)"),z8o=l(),A2=a("li"),ige=a("strong"),Q8o=o("roberta"),W8o=o(" \u2014 "),jG=a("a"),H8o=o("RobertaForMaskedLM"),U8o=o(" (RoBERTa model)"),J8o=l(),L2=a("li"),dge=a("strong"),Y8o=o("splinter"),K8o=o(" \u2014 "),DG=a("a"),Z8o=o("SplinterForPreTraining"),e9o=o(" (Splinter model)"),o9o=l(),y2=a("li"),cge=a("strong"),r9o=o("squeezebert"),t9o=o(" \u2014 "),GG=a("a"),a9o=o("SqueezeBertForMaskedLM"),n9o=o(" (SqueezeBERT model)"),s9o=l(),x2=a("li"),mge=a("strong"),l9o=o("t5"),i9o=o(" \u2014 "),OG=a("a"),d9o=o("T5ForConditionalGeneration"),c9o=o(" (T5 model)"),m9o=l(),$2=a("li"),fge=a("strong"),f9o=o("tapas"),g9o=o(" \u2014 "),VG=a("a"),h9o=o("TapasForMaskedLM"),u9o=o(" (TAPAS model)"),p9o=l(),k2=a("li"),gge=a("strong"),_9o=o("transfo-xl"),b9o=o(" \u2014 "),XG=a("a"),v9o=o("TransfoXLLMHeadModel"),F9o=o(" (Transformer-XL model)"),T9o=l(),S2=a("li"),hge=a("strong"),M9o=o("unispeech"),E9o=o(" \u2014 "),zG=a("a"),C9o=o("UniSpeechForPreTraining"),w9o=o(" (UniSpeech model)"),A9o=l(),R2=a("li"),uge=a("strong"),L9o=o("unispeech-sat"),y9o=o(" \u2014 "),QG=a("a"),x9o=o("UniSpeechSatForPreTraining"),$9o=o(" (UniSpeechSat model)"),k9o=l(),P2=a("li"),pge=a("strong"),S9o=o("visual_bert"),R9o=o(" \u2014 "),WG=a("a"),P9o=o("VisualBertForPreTraining"),B9o=o(" (VisualBERT model)"),N9o=l(),B2=a("li"),_ge=a("strong"),I9o=o("vit_mae"),q9o=o(" \u2014 "),HG=a("a"),j9o=o("ViTMAEForPreTraining"),D9o=o(" (ViTMAE model)"),G9o=l(),N2=a("li"),bge=a("strong"),O9o=o("wav2vec2"),V9o=o(" \u2014 "),UG=a("a"),X9o=o("Wav2Vec2ForPreTraining"),z9o=o(" (Wav2Vec2 model)"),Q9o=l(),I2=a("li"),vge=a("strong"),W9o=o("wav2vec2-conformer"),H9o=o(" \u2014 "),JG=a("a"),U9o=o("Wav2Vec2ConformerForPreTraining"),J9o=o(" (Wav2Vec2-Conformer model)"),Y9o=l(),q2=a("li"),Fge=a("strong"),K9o=o("xlm"),Z9o=o(" \u2014 "),YG=a("a"),exo=o("XLMWithLMHeadModel"),oxo=o(" (XLM model)"),rxo=l(),j2=a("li"),Tge=a("strong"),txo=o("xlm-roberta"),axo=o(" \u2014 "),KG=a("a"),nxo=o("XLMRobertaForMaskedLM"),sxo=o(" (XLM-RoBERTa model)"),lxo=l(),D2=a("li"),Mge=a("strong"),ixo=o("xlm-roberta-xl"),dxo=o(" \u2014 "),ZG=a("a"),cxo=o("XLMRobertaXLForMaskedLM"),mxo=o(" (XLM-RoBERTa-XL model)"),fxo=l(),G2=a("li"),Ege=a("strong"),gxo=o("xlnet"),hxo=o(" \u2014 "),eO=a("a"),uxo=o("XLNetLMHeadModel"),pxo=o(" (XLNet model)"),_xo=l(),O2=a("p"),bxo=o("The model is set in evaluation mode by default using "),Cge=a("code"),vxo=o("model.eval()"),Fxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),Txo=o("model.train()"),Mxo=l(),F(V2.$$.fragment),LXe=l(),Hi=a("h2"),X2=a("a"),Age=a("span"),F(Vy.$$.fragment),Exo=l(),Lge=a("span"),Cxo=o("AutoModelForCausalLM"),yXe=l(),So=a("div"),F(Xy.$$.fragment),wxo=l(),Ui=a("p"),Axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oO=a("a"),Lxo=o("from_pretrained()"),yxo=o(" class method or the "),rO=a("a"),xxo=o("from_config()"),$xo=o(` class
method.`),kxo=l(),zy=a("p"),Sxo=o("This class cannot be instantiated directly using "),yge=a("code"),Rxo=o("__init__()"),Pxo=o(" (throws an error)."),Bxo=l(),ct=a("div"),F(Qy.$$.fragment),Nxo=l(),xge=a("p"),Ixo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qxo=l(),Ji=a("p"),jxo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),Dxo=o("not"),Gxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),Oxo=o("from_pretrained()"),Vxo=o(" to load the model weights."),Xxo=l(),F(z2.$$.fragment),zxo=l(),Ze=a("div"),F(Wy.$$.fragment),Qxo=l(),kge=a("p"),Wxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hxo=l(),qa=a("p"),Uxo=o("The model class to instantiate is selected based on the "),Sge=a("code"),Jxo=o("model_type"),Yxo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),Kxo=o("pretrained_model_name_or_path"),Zxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(":"),r$o=l(),z=a("ul"),Q2=a("li"),Bge=a("strong"),t$o=o("bart"),a$o=o(" \u2014 "),aO=a("a"),n$o=o("BartForCausalLM"),s$o=o(" (BART model)"),l$o=l(),W2=a("li"),Nge=a("strong"),i$o=o("bert"),d$o=o(" \u2014 "),nO=a("a"),c$o=o("BertLMHeadModel"),m$o=o(" (BERT model)"),f$o=l(),H2=a("li"),Ige=a("strong"),g$o=o("bert-generation"),h$o=o(" \u2014 "),sO=a("a"),u$o=o("BertGenerationDecoder"),p$o=o(" (Bert Generation model)"),_$o=l(),U2=a("li"),qge=a("strong"),b$o=o("big_bird"),v$o=o(" \u2014 "),lO=a("a"),F$o=o("BigBirdForCausalLM"),T$o=o(" (BigBird model)"),M$o=l(),J2=a("li"),jge=a("strong"),E$o=o("bigbird_pegasus"),C$o=o(" \u2014 "),iO=a("a"),w$o=o("BigBirdPegasusForCausalLM"),A$o=o(" (BigBird-Pegasus model)"),L$o=l(),Y2=a("li"),Dge=a("strong"),y$o=o("blenderbot"),x$o=o(" \u2014 "),dO=a("a"),$$o=o("BlenderbotForCausalLM"),k$o=o(" (Blenderbot model)"),S$o=l(),K2=a("li"),Gge=a("strong"),R$o=o("blenderbot-small"),P$o=o(" \u2014 "),cO=a("a"),B$o=o("BlenderbotSmallForCausalLM"),N$o=o(" (BlenderbotSmall model)"),I$o=l(),Z2=a("li"),Oge=a("strong"),q$o=o("bloom"),j$o=o(" \u2014 "),mO=a("a"),D$o=o("BloomForCausalLM"),G$o=o(" (BLOOM model)"),O$o=l(),eb=a("li"),Vge=a("strong"),V$o=o("camembert"),X$o=o(" \u2014 "),fO=a("a"),z$o=o("CamembertForCausalLM"),Q$o=o(" (CamemBERT model)"),W$o=l(),ob=a("li"),Xge=a("strong"),H$o=o("codegen"),U$o=o(" \u2014 "),gO=a("a"),J$o=o("CodeGenForCausalLM"),Y$o=o(" (CodeGen model)"),K$o=l(),rb=a("li"),zge=a("strong"),Z$o=o("ctrl"),eko=o(" \u2014 "),hO=a("a"),oko=o("CTRLLMHeadModel"),rko=o(" (CTRL model)"),tko=l(),tb=a("li"),Qge=a("strong"),ako=o("data2vec-text"),nko=o(" \u2014 "),uO=a("a"),sko=o("Data2VecTextForCausalLM"),lko=o(" (Data2VecText model)"),iko=l(),ab=a("li"),Wge=a("strong"),dko=o("electra"),cko=o(" \u2014 "),pO=a("a"),mko=o("ElectraForCausalLM"),fko=o(" (ELECTRA model)"),gko=l(),nb=a("li"),Hge=a("strong"),hko=o("gpt2"),uko=o(" \u2014 "),_O=a("a"),pko=o("GPT2LMHeadModel"),_ko=o(" (OpenAI GPT-2 model)"),bko=l(),sb=a("li"),Uge=a("strong"),vko=o("gpt_neo"),Fko=o(" \u2014 "),bO=a("a"),Tko=o("GPTNeoForCausalLM"),Mko=o(" (GPT Neo model)"),Eko=l(),lb=a("li"),Jge=a("strong"),Cko=o("gpt_neox"),wko=o(" \u2014 "),vO=a("a"),Ako=o("GPTNeoXForCausalLM"),Lko=o(" (GPT NeoX model)"),yko=l(),ib=a("li"),Yge=a("strong"),xko=o("gptj"),$ko=o(" \u2014 "),FO=a("a"),kko=o("GPTJForCausalLM"),Sko=o(" (GPT-J model)"),Rko=l(),db=a("li"),Kge=a("strong"),Pko=o("marian"),Bko=o(" \u2014 "),TO=a("a"),Nko=o("MarianForCausalLM"),Iko=o(" (Marian model)"),qko=l(),cb=a("li"),Zge=a("strong"),jko=o("mbart"),Dko=o(" \u2014 "),MO=a("a"),Gko=o("MBartForCausalLM"),Oko=o(" (mBART model)"),Vko=l(),mb=a("li"),ehe=a("strong"),Xko=o("megatron-bert"),zko=o(" \u2014 "),EO=a("a"),Qko=o("MegatronBertForCausalLM"),Wko=o(" (Megatron-BERT model)"),Hko=l(),fb=a("li"),ohe=a("strong"),Uko=o("mvp"),Jko=o(" \u2014 "),CO=a("a"),Yko=o("MvpForCausalLM"),Kko=o(" (MVP model)"),Zko=l(),gb=a("li"),rhe=a("strong"),eSo=o("openai-gpt"),oSo=o(" \u2014 "),wO=a("a"),rSo=o("OpenAIGPTLMHeadModel"),tSo=o(" (OpenAI GPT model)"),aSo=l(),hb=a("li"),the=a("strong"),nSo=o("opt"),sSo=o(" \u2014 "),AO=a("a"),lSo=o("OPTForCausalLM"),iSo=o(" (OPT model)"),dSo=l(),ub=a("li"),ahe=a("strong"),cSo=o("pegasus"),mSo=o(" \u2014 "),LO=a("a"),fSo=o("PegasusForCausalLM"),gSo=o(" (Pegasus model)"),hSo=l(),pb=a("li"),nhe=a("strong"),uSo=o("plbart"),pSo=o(" \u2014 "),yO=a("a"),_So=o("PLBartForCausalLM"),bSo=o(" (PLBart model)"),vSo=l(),_b=a("li"),she=a("strong"),FSo=o("prophetnet"),TSo=o(" \u2014 "),xO=a("a"),MSo=o("ProphetNetForCausalLM"),ESo=o(" (ProphetNet model)"),CSo=l(),bb=a("li"),lhe=a("strong"),wSo=o("qdqbert"),ASo=o(" \u2014 "),$O=a("a"),LSo=o("QDQBertLMHeadModel"),ySo=o(" (QDQBert model)"),xSo=l(),vb=a("li"),ihe=a("strong"),$So=o("reformer"),kSo=o(" \u2014 "),kO=a("a"),SSo=o("ReformerModelWithLMHead"),RSo=o(" (Reformer model)"),PSo=l(),Fb=a("li"),dhe=a("strong"),BSo=o("rembert"),NSo=o(" \u2014 "),SO=a("a"),ISo=o("RemBertForCausalLM"),qSo=o(" (RemBERT model)"),jSo=l(),Tb=a("li"),che=a("strong"),DSo=o("roberta"),GSo=o(" \u2014 "),RO=a("a"),OSo=o("RobertaForCausalLM"),VSo=o(" (RoBERTa model)"),XSo=l(),Mb=a("li"),mhe=a("strong"),zSo=o("roformer"),QSo=o(" \u2014 "),PO=a("a"),WSo=o("RoFormerForCausalLM"),HSo=o(" (RoFormer model)"),USo=l(),Eb=a("li"),fhe=a("strong"),JSo=o("speech_to_text_2"),YSo=o(" \u2014 "),BO=a("a"),KSo=o("Speech2Text2ForCausalLM"),ZSo=o(" (Speech2Text2 model)"),eRo=l(),Cb=a("li"),ghe=a("strong"),oRo=o("transfo-xl"),rRo=o(" \u2014 "),NO=a("a"),tRo=o("TransfoXLLMHeadModel"),aRo=o(" (Transformer-XL model)"),nRo=l(),wb=a("li"),hhe=a("strong"),sRo=o("trocr"),lRo=o(" \u2014 "),IO=a("a"),iRo=o("TrOCRForCausalLM"),dRo=o(" (TrOCR model)"),cRo=l(),Ab=a("li"),uhe=a("strong"),mRo=o("xglm"),fRo=o(" \u2014 "),qO=a("a"),gRo=o("XGLMForCausalLM"),hRo=o(" (XGLM model)"),uRo=l(),Lb=a("li"),phe=a("strong"),pRo=o("xlm"),_Ro=o(" \u2014 "),jO=a("a"),bRo=o("XLMWithLMHeadModel"),vRo=o(" (XLM model)"),FRo=l(),yb=a("li"),_he=a("strong"),TRo=o("xlm-prophetnet"),MRo=o(" \u2014 "),DO=a("a"),ERo=o("XLMProphetNetForCausalLM"),CRo=o(" (XLM-ProphetNet model)"),wRo=l(),xb=a("li"),bhe=a("strong"),ARo=o("xlm-roberta"),LRo=o(" \u2014 "),GO=a("a"),yRo=o("XLMRobertaForCausalLM"),xRo=o(" (XLM-RoBERTa model)"),$Ro=l(),$b=a("li"),vhe=a("strong"),kRo=o("xlm-roberta-xl"),SRo=o(" \u2014 "),OO=a("a"),RRo=o("XLMRobertaXLForCausalLM"),PRo=o(" (XLM-RoBERTa-XL model)"),BRo=l(),kb=a("li"),Fhe=a("strong"),NRo=o("xlnet"),IRo=o(" \u2014 "),VO=a("a"),qRo=o("XLNetLMHeadModel"),jRo=o(" (XLNet model)"),DRo=l(),Sb=a("p"),GRo=o("The model is set in evaluation mode by default using "),The=a("code"),ORo=o("model.eval()"),VRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),XRo=o("model.train()"),zRo=l(),F(Rb.$$.fragment),xXe=l(),Yi=a("h2"),Pb=a("a"),Ehe=a("span"),F(Hy.$$.fragment),QRo=l(),Che=a("span"),WRo=o("AutoModelForMaskedLM"),$Xe=l(),Ro=a("div"),F(Uy.$$.fragment),HRo=l(),Ki=a("p"),URo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XO=a("a"),JRo=o("from_pretrained()"),YRo=o(" class method or the "),zO=a("a"),KRo=o("from_config()"),ZRo=o(` class
method.`),ePo=l(),Jy=a("p"),oPo=o("This class cannot be instantiated directly using "),whe=a("code"),rPo=o("__init__()"),tPo=o(" (throws an error)."),aPo=l(),mt=a("div"),F(Yy.$$.fragment),nPo=l(),Ahe=a("p"),sPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lPo=l(),Zi=a("p"),iPo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),dPo=o("not"),cPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),mPo=o("from_pretrained()"),fPo=o(" to load the model weights."),gPo=l(),F(Bb.$$.fragment),hPo=l(),eo=a("div"),F(Ky.$$.fragment),uPo=l(),yhe=a("p"),pPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Po=l(),ja=a("p"),bPo=o("The model class to instantiate is selected based on the "),xhe=a("code"),vPo=o("model_type"),FPo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),TPo=o("pretrained_model_name_or_path"),MPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),EPo=o("pretrained_model_name_or_path"),CPo=o(":"),wPo=l(),W=a("ul"),Nb=a("li"),She=a("strong"),APo=o("albert"),LPo=o(" \u2014 "),WO=a("a"),yPo=o("AlbertForMaskedLM"),xPo=o(" (ALBERT model)"),$Po=l(),Ib=a("li"),Rhe=a("strong"),kPo=o("bart"),SPo=o(" \u2014 "),HO=a("a"),RPo=o("BartForConditionalGeneration"),PPo=o(" (BART model)"),BPo=l(),qb=a("li"),Phe=a("strong"),NPo=o("bert"),IPo=o(" \u2014 "),UO=a("a"),qPo=o("BertForMaskedLM"),jPo=o(" (BERT model)"),DPo=l(),jb=a("li"),Bhe=a("strong"),GPo=o("big_bird"),OPo=o(" \u2014 "),JO=a("a"),VPo=o("BigBirdForMaskedLM"),XPo=o(" (BigBird model)"),zPo=l(),Db=a("li"),Nhe=a("strong"),QPo=o("camembert"),WPo=o(" \u2014 "),YO=a("a"),HPo=o("CamembertForMaskedLM"),UPo=o(" (CamemBERT model)"),JPo=l(),Gb=a("li"),Ihe=a("strong"),YPo=o("convbert"),KPo=o(" \u2014 "),KO=a("a"),ZPo=o("ConvBertForMaskedLM"),eBo=o(" (ConvBERT model)"),oBo=l(),Ob=a("li"),qhe=a("strong"),rBo=o("data2vec-text"),tBo=o(" \u2014 "),ZO=a("a"),aBo=o("Data2VecTextForMaskedLM"),nBo=o(" (Data2VecText model)"),sBo=l(),Vb=a("li"),jhe=a("strong"),lBo=o("deberta"),iBo=o(" \u2014 "),eV=a("a"),dBo=o("DebertaForMaskedLM"),cBo=o(" (DeBERTa model)"),mBo=l(),Xb=a("li"),Dhe=a("strong"),fBo=o("deberta-v2"),gBo=o(" \u2014 "),oV=a("a"),hBo=o("DebertaV2ForMaskedLM"),uBo=o(" (DeBERTa-v2 model)"),pBo=l(),zb=a("li"),Ghe=a("strong"),_Bo=o("distilbert"),bBo=o(" \u2014 "),rV=a("a"),vBo=o("DistilBertForMaskedLM"),FBo=o(" (DistilBERT model)"),TBo=l(),Qb=a("li"),Ohe=a("strong"),MBo=o("electra"),EBo=o(" \u2014 "),tV=a("a"),CBo=o("ElectraForMaskedLM"),wBo=o(" (ELECTRA model)"),ABo=l(),Wb=a("li"),Vhe=a("strong"),LBo=o("flaubert"),yBo=o(" \u2014 "),aV=a("a"),xBo=o("FlaubertWithLMHeadModel"),$Bo=o(" (FlauBERT model)"),kBo=l(),Hb=a("li"),Xhe=a("strong"),SBo=o("fnet"),RBo=o(" \u2014 "),nV=a("a"),PBo=o("FNetForMaskedLM"),BBo=o(" (FNet model)"),NBo=l(),Ub=a("li"),zhe=a("strong"),IBo=o("funnel"),qBo=o(" \u2014 "),sV=a("a"),jBo=o("FunnelForMaskedLM"),DBo=o(" (Funnel Transformer model)"),GBo=l(),Jb=a("li"),Qhe=a("strong"),OBo=o("ibert"),VBo=o(" \u2014 "),lV=a("a"),XBo=o("IBertForMaskedLM"),zBo=o(" (I-BERT model)"),QBo=l(),Yb=a("li"),Whe=a("strong"),WBo=o("layoutlm"),HBo=o(" \u2014 "),iV=a("a"),UBo=o("LayoutLMForMaskedLM"),JBo=o(" (LayoutLM model)"),YBo=l(),Kb=a("li"),Hhe=a("strong"),KBo=o("longformer"),ZBo=o(" \u2014 "),dV=a("a"),eNo=o("LongformerForMaskedLM"),oNo=o(" (Longformer model)"),rNo=l(),Zb=a("li"),Uhe=a("strong"),tNo=o("luke"),aNo=o(" \u2014 "),cV=a("a"),nNo=o("LukeForMaskedLM"),sNo=o(" (LUKE model)"),lNo=l(),ev=a("li"),Jhe=a("strong"),iNo=o("mbart"),dNo=o(" \u2014 "),mV=a("a"),cNo=o("MBartForConditionalGeneration"),mNo=o(" (mBART model)"),fNo=l(),ov=a("li"),Yhe=a("strong"),gNo=o("megatron-bert"),hNo=o(" \u2014 "),fV=a("a"),uNo=o("MegatronBertForMaskedLM"),pNo=o(" (Megatron-BERT model)"),_No=l(),rv=a("li"),Khe=a("strong"),bNo=o("mobilebert"),vNo=o(" \u2014 "),gV=a("a"),FNo=o("MobileBertForMaskedLM"),TNo=o(" (MobileBERT model)"),MNo=l(),tv=a("li"),Zhe=a("strong"),ENo=o("mpnet"),CNo=o(" \u2014 "),hV=a("a"),wNo=o("MPNetForMaskedLM"),ANo=o(" (MPNet model)"),LNo=l(),av=a("li"),eue=a("strong"),yNo=o("mvp"),xNo=o(" \u2014 "),uV=a("a"),$No=o("MvpForConditionalGeneration"),kNo=o(" (MVP model)"),SNo=l(),nv=a("li"),oue=a("strong"),RNo=o("nezha"),PNo=o(" \u2014 "),pV=a("a"),BNo=o("NezhaForMaskedLM"),NNo=o(" (Nezha model)"),INo=l(),sv=a("li"),rue=a("strong"),qNo=o("nystromformer"),jNo=o(" \u2014 "),_V=a("a"),DNo=o("NystromformerForMaskedLM"),GNo=o(" (Nystr\xF6mformer model)"),ONo=l(),lv=a("li"),tue=a("strong"),VNo=o("perceiver"),XNo=o(" \u2014 "),bV=a("a"),zNo=o("PerceiverForMaskedLM"),QNo=o(" (Perceiver model)"),WNo=l(),iv=a("li"),aue=a("strong"),HNo=o("qdqbert"),UNo=o(" \u2014 "),vV=a("a"),JNo=o("QDQBertForMaskedLM"),YNo=o(" (QDQBert model)"),KNo=l(),dv=a("li"),nue=a("strong"),ZNo=o("reformer"),eIo=o(" \u2014 "),FV=a("a"),oIo=o("ReformerForMaskedLM"),rIo=o(" (Reformer model)"),tIo=l(),cv=a("li"),sue=a("strong"),aIo=o("rembert"),nIo=o(" \u2014 "),TV=a("a"),sIo=o("RemBertForMaskedLM"),lIo=o(" (RemBERT model)"),iIo=l(),mv=a("li"),lue=a("strong"),dIo=o("roberta"),cIo=o(" \u2014 "),MV=a("a"),mIo=o("RobertaForMaskedLM"),fIo=o(" (RoBERTa model)"),gIo=l(),fv=a("li"),iue=a("strong"),hIo=o("roformer"),uIo=o(" \u2014 "),EV=a("a"),pIo=o("RoFormerForMaskedLM"),_Io=o(" (RoFormer model)"),bIo=l(),gv=a("li"),due=a("strong"),vIo=o("squeezebert"),FIo=o(" \u2014 "),CV=a("a"),TIo=o("SqueezeBertForMaskedLM"),MIo=o(" (SqueezeBERT model)"),EIo=l(),hv=a("li"),cue=a("strong"),CIo=o("tapas"),wIo=o(" \u2014 "),wV=a("a"),AIo=o("TapasForMaskedLM"),LIo=o(" (TAPAS model)"),yIo=l(),uv=a("li"),mue=a("strong"),xIo=o("wav2vec2"),$Io=o(" \u2014 "),fue=a("code"),kIo=o("Wav2Vec2ForMaskedLM"),SIo=o(" (Wav2Vec2 model)"),RIo=l(),pv=a("li"),gue=a("strong"),PIo=o("xlm"),BIo=o(" \u2014 "),AV=a("a"),NIo=o("XLMWithLMHeadModel"),IIo=o(" (XLM model)"),qIo=l(),_v=a("li"),hue=a("strong"),jIo=o("xlm-roberta"),DIo=o(" \u2014 "),LV=a("a"),GIo=o("XLMRobertaForMaskedLM"),OIo=o(" (XLM-RoBERTa model)"),VIo=l(),bv=a("li"),uue=a("strong"),XIo=o("xlm-roberta-xl"),zIo=o(" \u2014 "),yV=a("a"),QIo=o("XLMRobertaXLForMaskedLM"),WIo=o(" (XLM-RoBERTa-XL model)"),HIo=l(),vv=a("li"),pue=a("strong"),UIo=o("yoso"),JIo=o(" \u2014 "),xV=a("a"),YIo=o("YosoForMaskedLM"),KIo=o(" (YOSO model)"),ZIo=l(),Fv=a("p"),eqo=o("The model is set in evaluation mode by default using "),_ue=a("code"),oqo=o("model.eval()"),rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),tqo=o("model.train()"),aqo=l(),F(Tv.$$.fragment),kXe=l(),ed=a("h2"),Mv=a("a"),vue=a("span"),F(Zy.$$.fragment),nqo=l(),Fue=a("span"),sqo=o("AutoModelForSeq2SeqLM"),SXe=l(),Po=a("div"),F(e8.$$.fragment),lqo=l(),od=a("p"),iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$V=a("a"),dqo=o("from_pretrained()"),cqo=o(" class method or the "),kV=a("a"),mqo=o("from_config()"),fqo=o(` class
method.`),gqo=l(),o8=a("p"),hqo=o("This class cannot be instantiated directly using "),Tue=a("code"),uqo=o("__init__()"),pqo=o(" (throws an error)."),_qo=l(),ft=a("div"),F(r8.$$.fragment),bqo=l(),Mue=a("p"),vqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fqo=l(),rd=a("p"),Tqo=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),Mqo=o("not"),Eqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),Cqo=o("from_pretrained()"),wqo=o(" to load the model weights."),Aqo=l(),F(Ev.$$.fragment),Lqo=l(),oo=a("div"),F(t8.$$.fragment),yqo=l(),Cue=a("p"),xqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$qo=l(),Da=a("p"),kqo=o("The model class to instantiate is selected based on the "),wue=a("code"),Sqo=o("model_type"),Rqo=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),Pqo=o("pretrained_model_name_or_path"),Bqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),Nqo=o("pretrained_model_name_or_path"),Iqo=o(":"),qqo=l(),me=a("ul"),Cv=a("li"),yue=a("strong"),jqo=o("bart"),Dqo=o(" \u2014 "),RV=a("a"),Gqo=o("BartForConditionalGeneration"),Oqo=o(" (BART model)"),Vqo=l(),wv=a("li"),xue=a("strong"),Xqo=o("bigbird_pegasus"),zqo=o(" \u2014 "),PV=a("a"),Qqo=o("BigBirdPegasusForConditionalGeneration"),Wqo=o(" (BigBird-Pegasus model)"),Hqo=l(),Av=a("li"),$ue=a("strong"),Uqo=o("blenderbot"),Jqo=o(" \u2014 "),BV=a("a"),Yqo=o("BlenderbotForConditionalGeneration"),Kqo=o(" (Blenderbot model)"),Zqo=l(),Lv=a("li"),kue=a("strong"),ejo=o("blenderbot-small"),ojo=o(" \u2014 "),NV=a("a"),rjo=o("BlenderbotSmallForConditionalGeneration"),tjo=o(" (BlenderbotSmall model)"),ajo=l(),yv=a("li"),Sue=a("strong"),njo=o("encoder-decoder"),sjo=o(" \u2014 "),IV=a("a"),ljo=o("EncoderDecoderModel"),ijo=o(" (Encoder decoder model)"),djo=l(),xv=a("li"),Rue=a("strong"),cjo=o("fsmt"),mjo=o(" \u2014 "),qV=a("a"),fjo=o("FSMTForConditionalGeneration"),gjo=o(" (FairSeq Machine-Translation model)"),hjo=l(),$v=a("li"),Pue=a("strong"),ujo=o("led"),pjo=o(" \u2014 "),jV=a("a"),_jo=o("LEDForConditionalGeneration"),bjo=o(" (LED model)"),vjo=l(),kv=a("li"),Bue=a("strong"),Fjo=o("longt5"),Tjo=o(" \u2014 "),DV=a("a"),Mjo=o("LongT5ForConditionalGeneration"),Ejo=o(" (LongT5 model)"),Cjo=l(),Sv=a("li"),Nue=a("strong"),wjo=o("m2m_100"),Ajo=o(" \u2014 "),GV=a("a"),Ljo=o("M2M100ForConditionalGeneration"),yjo=o(" (M2M100 model)"),xjo=l(),Rv=a("li"),Iue=a("strong"),$jo=o("marian"),kjo=o(" \u2014 "),OV=a("a"),Sjo=o("MarianMTModel"),Rjo=o(" (Marian model)"),Pjo=l(),Pv=a("li"),que=a("strong"),Bjo=o("mbart"),Njo=o(" \u2014 "),VV=a("a"),Ijo=o("MBartForConditionalGeneration"),qjo=o(" (mBART model)"),jjo=l(),Bv=a("li"),jue=a("strong"),Djo=o("mt5"),Gjo=o(" \u2014 "),XV=a("a"),Ojo=o("MT5ForConditionalGeneration"),Vjo=o(" (MT5 model)"),Xjo=l(),Nv=a("li"),Due=a("strong"),zjo=o("mvp"),Qjo=o(" \u2014 "),zV=a("a"),Wjo=o("MvpForConditionalGeneration"),Hjo=o(" (MVP model)"),Ujo=l(),Iv=a("li"),Gue=a("strong"),Jjo=o("nllb"),Yjo=o(" \u2014 "),QV=a("a"),Kjo=o("M2M100ForConditionalGeneration"),Zjo=o(" (NLLB model)"),eDo=l(),qv=a("li"),Oue=a("strong"),oDo=o("pegasus"),rDo=o(" \u2014 "),WV=a("a"),tDo=o("PegasusForConditionalGeneration"),aDo=o(" (Pegasus model)"),nDo=l(),jv=a("li"),Vue=a("strong"),sDo=o("plbart"),lDo=o(" \u2014 "),HV=a("a"),iDo=o("PLBartForConditionalGeneration"),dDo=o(" (PLBart model)"),cDo=l(),Dv=a("li"),Xue=a("strong"),mDo=o("prophetnet"),fDo=o(" \u2014 "),UV=a("a"),gDo=o("ProphetNetForConditionalGeneration"),hDo=o(" (ProphetNet model)"),uDo=l(),Gv=a("li"),zue=a("strong"),pDo=o("t5"),_Do=o(" \u2014 "),JV=a("a"),bDo=o("T5ForConditionalGeneration"),vDo=o(" (T5 model)"),FDo=l(),Ov=a("li"),Que=a("strong"),TDo=o("xlm-prophetnet"),MDo=o(" \u2014 "),YV=a("a"),EDo=o("XLMProphetNetForConditionalGeneration"),CDo=o(" (XLM-ProphetNet model)"),wDo=l(),Vv=a("p"),ADo=o("The model is set in evaluation mode by default using "),Wue=a("code"),LDo=o("model.eval()"),yDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),xDo=o("model.train()"),$Do=l(),F(Xv.$$.fragment),RXe=l(),td=a("h2"),zv=a("a"),Uue=a("span"),F(a8.$$.fragment),kDo=l(),Jue=a("span"),SDo=o("AutoModelForSequenceClassification"),PXe=l(),Bo=a("div"),F(n8.$$.fragment),RDo=l(),ad=a("p"),PDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KV=a("a"),BDo=o("from_pretrained()"),NDo=o(" class method or the "),ZV=a("a"),IDo=o("from_config()"),qDo=o(` class
method.`),jDo=l(),s8=a("p"),DDo=o("This class cannot be instantiated directly using "),Yue=a("code"),GDo=o("__init__()"),ODo=o(" (throws an error)."),VDo=l(),gt=a("div"),F(l8.$$.fragment),XDo=l(),Kue=a("p"),zDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QDo=l(),nd=a("p"),WDo=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),HDo=o("not"),UDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),JDo=o("from_pretrained()"),YDo=o(" to load the model weights."),KDo=l(),F(Qv.$$.fragment),ZDo=l(),ro=a("div"),F(i8.$$.fragment),eGo=l(),epe=a("p"),oGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rGo=l(),Ga=a("p"),tGo=o("The model class to instantiate is selected based on the "),ope=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),I=a("ul"),Wv=a("li"),ape=a("strong"),mGo=o("albert"),fGo=o(" \u2014 "),oX=a("a"),gGo=o("AlbertForSequenceClassification"),hGo=o(" (ALBERT model)"),uGo=l(),Hv=a("li"),npe=a("strong"),pGo=o("bart"),_Go=o(" \u2014 "),rX=a("a"),bGo=o("BartForSequenceClassification"),vGo=o(" (BART model)"),FGo=l(),Uv=a("li"),spe=a("strong"),TGo=o("bert"),MGo=o(" \u2014 "),tX=a("a"),EGo=o("BertForSequenceClassification"),CGo=o(" (BERT model)"),wGo=l(),Jv=a("li"),lpe=a("strong"),AGo=o("big_bird"),LGo=o(" \u2014 "),aX=a("a"),yGo=o("BigBirdForSequenceClassification"),xGo=o(" (BigBird model)"),$Go=l(),Yv=a("li"),ipe=a("strong"),kGo=o("bigbird_pegasus"),SGo=o(" \u2014 "),nX=a("a"),RGo=o("BigBirdPegasusForSequenceClassification"),PGo=o(" (BigBird-Pegasus model)"),BGo=l(),Kv=a("li"),dpe=a("strong"),NGo=o("bloom"),IGo=o(" \u2014 "),sX=a("a"),qGo=o("BloomForSequenceClassification"),jGo=o(" (BLOOM model)"),DGo=l(),Zv=a("li"),cpe=a("strong"),GGo=o("camembert"),OGo=o(" \u2014 "),lX=a("a"),VGo=o("CamembertForSequenceClassification"),XGo=o(" (CamemBERT model)"),zGo=l(),e1=a("li"),mpe=a("strong"),QGo=o("canine"),WGo=o(" \u2014 "),iX=a("a"),HGo=o("CanineForSequenceClassification"),UGo=o(" (CANINE model)"),JGo=l(),o1=a("li"),fpe=a("strong"),YGo=o("convbert"),KGo=o(" \u2014 "),dX=a("a"),ZGo=o("ConvBertForSequenceClassification"),eOo=o(" (ConvBERT model)"),oOo=l(),r1=a("li"),gpe=a("strong"),rOo=o("ctrl"),tOo=o(" \u2014 "),cX=a("a"),aOo=o("CTRLForSequenceClassification"),nOo=o(" (CTRL model)"),sOo=l(),t1=a("li"),hpe=a("strong"),lOo=o("data2vec-text"),iOo=o(" \u2014 "),mX=a("a"),dOo=o("Data2VecTextForSequenceClassification"),cOo=o(" (Data2VecText model)"),mOo=l(),a1=a("li"),upe=a("strong"),fOo=o("deberta"),gOo=o(" \u2014 "),fX=a("a"),hOo=o("DebertaForSequenceClassification"),uOo=o(" (DeBERTa model)"),pOo=l(),n1=a("li"),ppe=a("strong"),_Oo=o("deberta-v2"),bOo=o(" \u2014 "),gX=a("a"),vOo=o("DebertaV2ForSequenceClassification"),FOo=o(" (DeBERTa-v2 model)"),TOo=l(),s1=a("li"),_pe=a("strong"),MOo=o("distilbert"),EOo=o(" \u2014 "),hX=a("a"),COo=o("DistilBertForSequenceClassification"),wOo=o(" (DistilBERT model)"),AOo=l(),l1=a("li"),bpe=a("strong"),LOo=o("electra"),yOo=o(" \u2014 "),uX=a("a"),xOo=o("ElectraForSequenceClassification"),$Oo=o(" (ELECTRA model)"),kOo=l(),i1=a("li"),vpe=a("strong"),SOo=o("flaubert"),ROo=o(" \u2014 "),pX=a("a"),POo=o("FlaubertForSequenceClassification"),BOo=o(" (FlauBERT model)"),NOo=l(),d1=a("li"),Fpe=a("strong"),IOo=o("fnet"),qOo=o(" \u2014 "),_X=a("a"),jOo=o("FNetForSequenceClassification"),DOo=o(" (FNet model)"),GOo=l(),c1=a("li"),Tpe=a("strong"),OOo=o("funnel"),VOo=o(" \u2014 "),bX=a("a"),XOo=o("FunnelForSequenceClassification"),zOo=o(" (Funnel Transformer model)"),QOo=l(),m1=a("li"),Mpe=a("strong"),WOo=o("gpt2"),HOo=o(" \u2014 "),vX=a("a"),UOo=o("GPT2ForSequenceClassification"),JOo=o(" (OpenAI GPT-2 model)"),YOo=l(),f1=a("li"),Epe=a("strong"),KOo=o("gpt_neo"),ZOo=o(" \u2014 "),FX=a("a"),eVo=o("GPTNeoForSequenceClassification"),oVo=o(" (GPT Neo model)"),rVo=l(),g1=a("li"),Cpe=a("strong"),tVo=o("gptj"),aVo=o(" \u2014 "),TX=a("a"),nVo=o("GPTJForSequenceClassification"),sVo=o(" (GPT-J model)"),lVo=l(),h1=a("li"),wpe=a("strong"),iVo=o("ibert"),dVo=o(" \u2014 "),MX=a("a"),cVo=o("IBertForSequenceClassification"),mVo=o(" (I-BERT model)"),fVo=l(),u1=a("li"),Ape=a("strong"),gVo=o("layoutlm"),hVo=o(" \u2014 "),EX=a("a"),uVo=o("LayoutLMForSequenceClassification"),pVo=o(" (LayoutLM model)"),_Vo=l(),p1=a("li"),Lpe=a("strong"),bVo=o("layoutlmv2"),vVo=o(" \u2014 "),CX=a("a"),FVo=o("LayoutLMv2ForSequenceClassification"),TVo=o(" (LayoutLMv2 model)"),MVo=l(),_1=a("li"),ype=a("strong"),EVo=o("layoutlmv3"),CVo=o(" \u2014 "),wX=a("a"),wVo=o("LayoutLMv3ForSequenceClassification"),AVo=o(" (LayoutLMv3 model)"),LVo=l(),b1=a("li"),xpe=a("strong"),yVo=o("led"),xVo=o(" \u2014 "),AX=a("a"),$Vo=o("LEDForSequenceClassification"),kVo=o(" (LED model)"),SVo=l(),v1=a("li"),$pe=a("strong"),RVo=o("longformer"),PVo=o(" \u2014 "),LX=a("a"),BVo=o("LongformerForSequenceClassification"),NVo=o(" (Longformer model)"),IVo=l(),F1=a("li"),kpe=a("strong"),qVo=o("mbart"),jVo=o(" \u2014 "),yX=a("a"),DVo=o("MBartForSequenceClassification"),GVo=o(" (mBART model)"),OVo=l(),T1=a("li"),Spe=a("strong"),VVo=o("megatron-bert"),XVo=o(" \u2014 "),xX=a("a"),zVo=o("MegatronBertForSequenceClassification"),QVo=o(" (Megatron-BERT model)"),WVo=l(),M1=a("li"),Rpe=a("strong"),HVo=o("mobilebert"),UVo=o(" \u2014 "),$X=a("a"),JVo=o("MobileBertForSequenceClassification"),YVo=o(" (MobileBERT model)"),KVo=l(),E1=a("li"),Ppe=a("strong"),ZVo=o("mpnet"),eXo=o(" \u2014 "),kX=a("a"),oXo=o("MPNetForSequenceClassification"),rXo=o(" (MPNet model)"),tXo=l(),C1=a("li"),Bpe=a("strong"),aXo=o("mvp"),nXo=o(" \u2014 "),SX=a("a"),sXo=o("MvpForSequenceClassification"),lXo=o(" (MVP model)"),iXo=l(),w1=a("li"),Npe=a("strong"),dXo=o("nezha"),cXo=o(" \u2014 "),RX=a("a"),mXo=o("NezhaForSequenceClassification"),fXo=o(" (Nezha model)"),gXo=l(),A1=a("li"),Ipe=a("strong"),hXo=o("nystromformer"),uXo=o(" \u2014 "),PX=a("a"),pXo=o("NystromformerForSequenceClassification"),_Xo=o(" (Nystr\xF6mformer model)"),bXo=l(),L1=a("li"),qpe=a("strong"),vXo=o("openai-gpt"),FXo=o(" \u2014 "),BX=a("a"),TXo=o("OpenAIGPTForSequenceClassification"),MXo=o(" (OpenAI GPT model)"),EXo=l(),y1=a("li"),jpe=a("strong"),CXo=o("perceiver"),wXo=o(" \u2014 "),NX=a("a"),AXo=o("PerceiverForSequenceClassification"),LXo=o(" (Perceiver model)"),yXo=l(),x1=a("li"),Dpe=a("strong"),xXo=o("plbart"),$Xo=o(" \u2014 "),IX=a("a"),kXo=o("PLBartForSequenceClassification"),SXo=o(" (PLBart model)"),RXo=l(),$1=a("li"),Gpe=a("strong"),PXo=o("qdqbert"),BXo=o(" \u2014 "),qX=a("a"),NXo=o("QDQBertForSequenceClassification"),IXo=o(" (QDQBert model)"),qXo=l(),k1=a("li"),Ope=a("strong"),jXo=o("reformer"),DXo=o(" \u2014 "),jX=a("a"),GXo=o("ReformerForSequenceClassification"),OXo=o(" (Reformer model)"),VXo=l(),S1=a("li"),Vpe=a("strong"),XXo=o("rembert"),zXo=o(" \u2014 "),DX=a("a"),QXo=o("RemBertForSequenceClassification"),WXo=o(" (RemBERT model)"),HXo=l(),R1=a("li"),Xpe=a("strong"),UXo=o("roberta"),JXo=o(" \u2014 "),GX=a("a"),YXo=o("RobertaForSequenceClassification"),KXo=o(" (RoBERTa model)"),ZXo=l(),P1=a("li"),zpe=a("strong"),ezo=o("roformer"),ozo=o(" \u2014 "),OX=a("a"),rzo=o("RoFormerForSequenceClassification"),tzo=o(" (RoFormer model)"),azo=l(),B1=a("li"),Qpe=a("strong"),nzo=o("squeezebert"),szo=o(" \u2014 "),VX=a("a"),lzo=o("SqueezeBertForSequenceClassification"),izo=o(" (SqueezeBERT model)"),dzo=l(),N1=a("li"),Wpe=a("strong"),czo=o("tapas"),mzo=o(" \u2014 "),XX=a("a"),fzo=o("TapasForSequenceClassification"),gzo=o(" (TAPAS model)"),hzo=l(),I1=a("li"),Hpe=a("strong"),uzo=o("transfo-xl"),pzo=o(" \u2014 "),zX=a("a"),_zo=o("TransfoXLForSequenceClassification"),bzo=o(" (Transformer-XL model)"),vzo=l(),q1=a("li"),Upe=a("strong"),Fzo=o("xlm"),Tzo=o(" \u2014 "),QX=a("a"),Mzo=o("XLMForSequenceClassification"),Ezo=o(" (XLM model)"),Czo=l(),j1=a("li"),Jpe=a("strong"),wzo=o("xlm-roberta"),Azo=o(" \u2014 "),WX=a("a"),Lzo=o("XLMRobertaForSequenceClassification"),yzo=o(" (XLM-RoBERTa model)"),xzo=l(),D1=a("li"),Ype=a("strong"),$zo=o("xlm-roberta-xl"),kzo=o(" \u2014 "),HX=a("a"),Szo=o("XLMRobertaXLForSequenceClassification"),Rzo=o(" (XLM-RoBERTa-XL model)"),Pzo=l(),G1=a("li"),Kpe=a("strong"),Bzo=o("xlnet"),Nzo=o(" \u2014 "),UX=a("a"),Izo=o("XLNetForSequenceClassification"),qzo=o(" (XLNet model)"),jzo=l(),O1=a("li"),Zpe=a("strong"),Dzo=o("yoso"),Gzo=o(" \u2014 "),JX=a("a"),Ozo=o("YosoForSequenceClassification"),Vzo=o(" (YOSO model)"),Xzo=l(),V1=a("p"),zzo=o("The model is set in evaluation mode by default using "),e_e=a("code"),Qzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),Hzo=o("model.train()"),Uzo=l(),F(X1.$$.fragment),BXe=l(),sd=a("h2"),z1=a("a"),r_e=a("span"),F(d8.$$.fragment),Jzo=l(),t_e=a("span"),Yzo=o("AutoModelForMultipleChoice"),NXe=l(),No=a("div"),F(c8.$$.fragment),Kzo=l(),ld=a("p"),Zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=a("a"),eQo=o("from_pretrained()"),oQo=o(" class method or the "),KX=a("a"),rQo=o("from_config()"),tQo=o(` class
method.`),aQo=l(),m8=a("p"),nQo=o("This class cannot be instantiated directly using "),a_e=a("code"),sQo=o("__init__()"),lQo=o(" (throws an error)."),iQo=l(),ht=a("div"),F(f8.$$.fragment),dQo=l(),n_e=a("p"),cQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mQo=l(),id=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),gQo=o("not"),hQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),uQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),F(Q1.$$.fragment),bQo=l(),to=a("div"),F(g8.$$.fragment),vQo=l(),l_e=a("p"),FQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TQo=l(),Oa=a("p"),MQo=o("The model class to instantiate is selected based on the "),i_e=a("code"),EQo=o("model_type"),CQo=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),LQo=o("pretrained_model_name_or_path"),yQo=o(":"),xQo=l(),Z=a("ul"),W1=a("li"),m_e=a("strong"),$Qo=o("albert"),kQo=o(" \u2014 "),ez=a("a"),SQo=o("AlbertForMultipleChoice"),RQo=o(" (ALBERT model)"),PQo=l(),H1=a("li"),f_e=a("strong"),BQo=o("bert"),NQo=o(" \u2014 "),oz=a("a"),IQo=o("BertForMultipleChoice"),qQo=o(" (BERT model)"),jQo=l(),U1=a("li"),g_e=a("strong"),DQo=o("big_bird"),GQo=o(" \u2014 "),rz=a("a"),OQo=o("BigBirdForMultipleChoice"),VQo=o(" (BigBird model)"),XQo=l(),J1=a("li"),h_e=a("strong"),zQo=o("camembert"),QQo=o(" \u2014 "),tz=a("a"),WQo=o("CamembertForMultipleChoice"),HQo=o(" (CamemBERT model)"),UQo=l(),Y1=a("li"),u_e=a("strong"),JQo=o("canine"),YQo=o(" \u2014 "),az=a("a"),KQo=o("CanineForMultipleChoice"),ZQo=o(" (CANINE model)"),eWo=l(),K1=a("li"),p_e=a("strong"),oWo=o("convbert"),rWo=o(" \u2014 "),nz=a("a"),tWo=o("ConvBertForMultipleChoice"),aWo=o(" (ConvBERT model)"),nWo=l(),Z1=a("li"),__e=a("strong"),sWo=o("data2vec-text"),lWo=o(" \u2014 "),sz=a("a"),iWo=o("Data2VecTextForMultipleChoice"),dWo=o(" (Data2VecText model)"),cWo=l(),eF=a("li"),b_e=a("strong"),mWo=o("deberta-v2"),fWo=o(" \u2014 "),lz=a("a"),gWo=o("DebertaV2ForMultipleChoice"),hWo=o(" (DeBERTa-v2 model)"),uWo=l(),oF=a("li"),v_e=a("strong"),pWo=o("distilbert"),_Wo=o(" \u2014 "),iz=a("a"),bWo=o("DistilBertForMultipleChoice"),vWo=o(" (DistilBERT model)"),FWo=l(),rF=a("li"),F_e=a("strong"),TWo=o("electra"),MWo=o(" \u2014 "),dz=a("a"),EWo=o("ElectraForMultipleChoice"),CWo=o(" (ELECTRA model)"),wWo=l(),tF=a("li"),T_e=a("strong"),AWo=o("flaubert"),LWo=o(" \u2014 "),cz=a("a"),yWo=o("FlaubertForMultipleChoice"),xWo=o(" (FlauBERT model)"),$Wo=l(),aF=a("li"),M_e=a("strong"),kWo=o("fnet"),SWo=o(" \u2014 "),mz=a("a"),RWo=o("FNetForMultipleChoice"),PWo=o(" (FNet model)"),BWo=l(),nF=a("li"),E_e=a("strong"),NWo=o("funnel"),IWo=o(" \u2014 "),fz=a("a"),qWo=o("FunnelForMultipleChoice"),jWo=o(" (Funnel Transformer model)"),DWo=l(),sF=a("li"),C_e=a("strong"),GWo=o("ibert"),OWo=o(" \u2014 "),gz=a("a"),VWo=o("IBertForMultipleChoice"),XWo=o(" (I-BERT model)"),zWo=l(),lF=a("li"),w_e=a("strong"),QWo=o("longformer"),WWo=o(" \u2014 "),hz=a("a"),HWo=o("LongformerForMultipleChoice"),UWo=o(" (Longformer model)"),JWo=l(),iF=a("li"),A_e=a("strong"),YWo=o("megatron-bert"),KWo=o(" \u2014 "),uz=a("a"),ZWo=o("MegatronBertForMultipleChoice"),eHo=o(" (Megatron-BERT model)"),oHo=l(),dF=a("li"),L_e=a("strong"),rHo=o("mobilebert"),tHo=o(" \u2014 "),pz=a("a"),aHo=o("MobileBertForMultipleChoice"),nHo=o(" (MobileBERT model)"),sHo=l(),cF=a("li"),y_e=a("strong"),lHo=o("mpnet"),iHo=o(" \u2014 "),_z=a("a"),dHo=o("MPNetForMultipleChoice"),cHo=o(" (MPNet model)"),mHo=l(),mF=a("li"),x_e=a("strong"),fHo=o("nezha"),gHo=o(" \u2014 "),bz=a("a"),hHo=o("NezhaForMultipleChoice"),uHo=o(" (Nezha model)"),pHo=l(),fF=a("li"),$_e=a("strong"),_Ho=o("nystromformer"),bHo=o(" \u2014 "),vz=a("a"),vHo=o("NystromformerForMultipleChoice"),FHo=o(" (Nystr\xF6mformer model)"),THo=l(),gF=a("li"),k_e=a("strong"),MHo=o("qdqbert"),EHo=o(" \u2014 "),Fz=a("a"),CHo=o("QDQBertForMultipleChoice"),wHo=o(" (QDQBert model)"),AHo=l(),hF=a("li"),S_e=a("strong"),LHo=o("rembert"),yHo=o(" \u2014 "),Tz=a("a"),xHo=o("RemBertForMultipleChoice"),$Ho=o(" (RemBERT model)"),kHo=l(),uF=a("li"),R_e=a("strong"),SHo=o("roberta"),RHo=o(" \u2014 "),Mz=a("a"),PHo=o("RobertaForMultipleChoice"),BHo=o(" (RoBERTa model)"),NHo=l(),pF=a("li"),P_e=a("strong"),IHo=o("roformer"),qHo=o(" \u2014 "),Ez=a("a"),jHo=o("RoFormerForMultipleChoice"),DHo=o(" (RoFormer model)"),GHo=l(),_F=a("li"),B_e=a("strong"),OHo=o("squeezebert"),VHo=o(" \u2014 "),Cz=a("a"),XHo=o("SqueezeBertForMultipleChoice"),zHo=o(" (SqueezeBERT model)"),QHo=l(),bF=a("li"),N_e=a("strong"),WHo=o("xlm"),HHo=o(" \u2014 "),wz=a("a"),UHo=o("XLMForMultipleChoice"),JHo=o(" (XLM model)"),YHo=l(),vF=a("li"),I_e=a("strong"),KHo=o("xlm-roberta"),ZHo=o(" \u2014 "),Az=a("a"),eUo=o("XLMRobertaForMultipleChoice"),oUo=o(" (XLM-RoBERTa model)"),rUo=l(),FF=a("li"),q_e=a("strong"),tUo=o("xlm-roberta-xl"),aUo=o(" \u2014 "),Lz=a("a"),nUo=o("XLMRobertaXLForMultipleChoice"),sUo=o(" (XLM-RoBERTa-XL model)"),lUo=l(),TF=a("li"),j_e=a("strong"),iUo=o("xlnet"),dUo=o(" \u2014 "),yz=a("a"),cUo=o("XLNetForMultipleChoice"),mUo=o(" (XLNet model)"),fUo=l(),MF=a("li"),D_e=a("strong"),gUo=o("yoso"),hUo=o(" \u2014 "),xz=a("a"),uUo=o("YosoForMultipleChoice"),pUo=o(" (YOSO model)"),_Uo=l(),EF=a("p"),bUo=o("The model is set in evaluation mode by default using "),G_e=a("code"),vUo=o("model.eval()"),FUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),TUo=o("model.train()"),MUo=l(),F(CF.$$.fragment),IXe=l(),dd=a("h2"),wF=a("a"),V_e=a("span"),F(h8.$$.fragment),EUo=l(),X_e=a("span"),CUo=o("AutoModelForNextSentencePrediction"),qXe=l(),Io=a("div"),F(u8.$$.fragment),wUo=l(),cd=a("p"),AUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$z=a("a"),LUo=o("from_pretrained()"),yUo=o(" class method or the "),kz=a("a"),xUo=o("from_config()"),$Uo=o(` class
method.`),kUo=l(),p8=a("p"),SUo=o("This class cannot be instantiated directly using "),z_e=a("code"),RUo=o("__init__()"),PUo=o(" (throws an error)."),BUo=l(),ut=a("div"),F(_8.$$.fragment),NUo=l(),Q_e=a("p"),IUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qUo=l(),md=a("p"),jUo=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),DUo=o("not"),GUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),OUo=o("from_pretrained()"),VUo=o(" to load the model weights."),XUo=l(),F(AF.$$.fragment),zUo=l(),ao=a("div"),F(b8.$$.fragment),QUo=l(),H_e=a("p"),WUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HUo=l(),Va=a("p"),UUo=o("The model class to instantiate is selected based on the "),U_e=a("code"),JUo=o("model_type"),YUo=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),KUo=o("pretrained_model_name_or_path"),ZUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(":"),rJo=l(),qo=a("ul"),LF=a("li"),K_e=a("strong"),tJo=o("bert"),aJo=o(" \u2014 "),Rz=a("a"),nJo=o("BertForNextSentencePrediction"),sJo=o(" (BERT model)"),lJo=l(),yF=a("li"),Z_e=a("strong"),iJo=o("fnet"),dJo=o(" \u2014 "),Pz=a("a"),cJo=o("FNetForNextSentencePrediction"),mJo=o(" (FNet model)"),fJo=l(),xF=a("li"),e2e=a("strong"),gJo=o("megatron-bert"),hJo=o(" \u2014 "),Bz=a("a"),uJo=o("MegatronBertForNextSentencePrediction"),pJo=o(" (Megatron-BERT model)"),_Jo=l(),$F=a("li"),o2e=a("strong"),bJo=o("mobilebert"),vJo=o(" \u2014 "),Nz=a("a"),FJo=o("MobileBertForNextSentencePrediction"),TJo=o(" (MobileBERT model)"),MJo=l(),kF=a("li"),r2e=a("strong"),EJo=o("nezha"),CJo=o(" \u2014 "),Iz=a("a"),wJo=o("NezhaForNextSentencePrediction"),AJo=o(" (Nezha model)"),LJo=l(),SF=a("li"),t2e=a("strong"),yJo=o("qdqbert"),xJo=o(" \u2014 "),qz=a("a"),$Jo=o("QDQBertForNextSentencePrediction"),kJo=o(" (QDQBert model)"),SJo=l(),RF=a("p"),RJo=o("The model is set in evaluation mode by default using "),a2e=a("code"),PJo=o("model.eval()"),BJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=a("code"),NJo=o("model.train()"),IJo=l(),F(PF.$$.fragment),jXe=l(),fd=a("h2"),BF=a("a"),s2e=a("span"),F(v8.$$.fragment),qJo=l(),l2e=a("span"),jJo=o("AutoModelForTokenClassification"),DXe=l(),jo=a("div"),F(F8.$$.fragment),DJo=l(),gd=a("p"),GJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=a("a"),OJo=o("from_pretrained()"),VJo=o(" class method or the "),Dz=a("a"),XJo=o("from_config()"),zJo=o(` class
method.`),QJo=l(),T8=a("p"),WJo=o("This class cannot be instantiated directly using "),i2e=a("code"),HJo=o("__init__()"),UJo=o(" (throws an error)."),JJo=l(),pt=a("div"),F(M8.$$.fragment),YJo=l(),d2e=a("p"),KJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZJo=l(),hd=a("p"),eYo=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),oYo=o("not"),rYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),tYo=o("from_pretrained()"),aYo=o(" to load the model weights."),nYo=l(),F(NF.$$.fragment),sYo=l(),no=a("div"),F(E8.$$.fragment),lYo=l(),m2e=a("p"),iYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dYo=l(),Xa=a("p"),cYo=o("The model class to instantiate is selected based on the "),f2e=a("code"),mYo=o("model_type"),fYo=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),uYo=o("pretrained_model_name_or_path"),pYo=o(":"),_Yo=l(),U=a("ul"),IF=a("li"),u2e=a("strong"),bYo=o("albert"),vYo=o(" \u2014 "),Oz=a("a"),FYo=o("AlbertForTokenClassification"),TYo=o(" (ALBERT model)"),MYo=l(),qF=a("li"),p2e=a("strong"),EYo=o("bert"),CYo=o(" \u2014 "),Vz=a("a"),wYo=o("BertForTokenClassification"),AYo=o(" (BERT model)"),LYo=l(),jF=a("li"),_2e=a("strong"),yYo=o("big_bird"),xYo=o(" \u2014 "),Xz=a("a"),$Yo=o("BigBirdForTokenClassification"),kYo=o(" (BigBird model)"),SYo=l(),DF=a("li"),b2e=a("strong"),RYo=o("bloom"),PYo=o(" \u2014 "),zz=a("a"),BYo=o("BloomForTokenClassification"),NYo=o(" (BLOOM model)"),IYo=l(),GF=a("li"),v2e=a("strong"),qYo=o("camembert"),jYo=o(" \u2014 "),Qz=a("a"),DYo=o("CamembertForTokenClassification"),GYo=o(" (CamemBERT model)"),OYo=l(),OF=a("li"),F2e=a("strong"),VYo=o("canine"),XYo=o(" \u2014 "),Wz=a("a"),zYo=o("CanineForTokenClassification"),QYo=o(" (CANINE model)"),WYo=l(),VF=a("li"),T2e=a("strong"),HYo=o("convbert"),UYo=o(" \u2014 "),Hz=a("a"),JYo=o("ConvBertForTokenClassification"),YYo=o(" (ConvBERT model)"),KYo=l(),XF=a("li"),M2e=a("strong"),ZYo=o("data2vec-text"),eKo=o(" \u2014 "),Uz=a("a"),oKo=o("Data2VecTextForTokenClassification"),rKo=o(" (Data2VecText model)"),tKo=l(),zF=a("li"),E2e=a("strong"),aKo=o("deberta"),nKo=o(" \u2014 "),Jz=a("a"),sKo=o("DebertaForTokenClassification"),lKo=o(" (DeBERTa model)"),iKo=l(),QF=a("li"),C2e=a("strong"),dKo=o("deberta-v2"),cKo=o(" \u2014 "),Yz=a("a"),mKo=o("DebertaV2ForTokenClassification"),fKo=o(" (DeBERTa-v2 model)"),gKo=l(),WF=a("li"),w2e=a("strong"),hKo=o("distilbert"),uKo=o(" \u2014 "),Kz=a("a"),pKo=o("DistilBertForTokenClassification"),_Ko=o(" (DistilBERT model)"),bKo=l(),HF=a("li"),A2e=a("strong"),vKo=o("electra"),FKo=o(" \u2014 "),Zz=a("a"),TKo=o("ElectraForTokenClassification"),MKo=o(" (ELECTRA model)"),EKo=l(),UF=a("li"),L2e=a("strong"),CKo=o("flaubert"),wKo=o(" \u2014 "),eQ=a("a"),AKo=o("FlaubertForTokenClassification"),LKo=o(" (FlauBERT model)"),yKo=l(),JF=a("li"),y2e=a("strong"),xKo=o("fnet"),$Ko=o(" \u2014 "),oQ=a("a"),kKo=o("FNetForTokenClassification"),SKo=o(" (FNet model)"),RKo=l(),YF=a("li"),x2e=a("strong"),PKo=o("funnel"),BKo=o(" \u2014 "),rQ=a("a"),NKo=o("FunnelForTokenClassification"),IKo=o(" (Funnel Transformer model)"),qKo=l(),KF=a("li"),$2e=a("strong"),jKo=o("gpt2"),DKo=o(" \u2014 "),tQ=a("a"),GKo=o("GPT2ForTokenClassification"),OKo=o(" (OpenAI GPT-2 model)"),VKo=l(),ZF=a("li"),k2e=a("strong"),XKo=o("ibert"),zKo=o(" \u2014 "),aQ=a("a"),QKo=o("IBertForTokenClassification"),WKo=o(" (I-BERT model)"),HKo=l(),eT=a("li"),S2e=a("strong"),UKo=o("layoutlm"),JKo=o(" \u2014 "),nQ=a("a"),YKo=o("LayoutLMForTokenClassification"),KKo=o(" (LayoutLM model)"),ZKo=l(),oT=a("li"),R2e=a("strong"),eZo=o("layoutlmv2"),oZo=o(" \u2014 "),sQ=a("a"),rZo=o("LayoutLMv2ForTokenClassification"),tZo=o(" (LayoutLMv2 model)"),aZo=l(),rT=a("li"),P2e=a("strong"),nZo=o("layoutlmv3"),sZo=o(" \u2014 "),lQ=a("a"),lZo=o("LayoutLMv3ForTokenClassification"),iZo=o(" (LayoutLMv3 model)"),dZo=l(),tT=a("li"),B2e=a("strong"),cZo=o("longformer"),mZo=o(" \u2014 "),iQ=a("a"),fZo=o("LongformerForTokenClassification"),gZo=o(" (Longformer model)"),hZo=l(),aT=a("li"),N2e=a("strong"),uZo=o("megatron-bert"),pZo=o(" \u2014 "),dQ=a("a"),_Zo=o("MegatronBertForTokenClassification"),bZo=o(" (Megatron-BERT model)"),vZo=l(),nT=a("li"),I2e=a("strong"),FZo=o("mobilebert"),TZo=o(" \u2014 "),cQ=a("a"),MZo=o("MobileBertForTokenClassification"),EZo=o(" (MobileBERT model)"),CZo=l(),sT=a("li"),q2e=a("strong"),wZo=o("mpnet"),AZo=o(" \u2014 "),mQ=a("a"),LZo=o("MPNetForTokenClassification"),yZo=o(" (MPNet model)"),xZo=l(),lT=a("li"),j2e=a("strong"),$Zo=o("nezha"),kZo=o(" \u2014 "),fQ=a("a"),SZo=o("NezhaForTokenClassification"),RZo=o(" (Nezha model)"),PZo=l(),iT=a("li"),D2e=a("strong"),BZo=o("nystromformer"),NZo=o(" \u2014 "),gQ=a("a"),IZo=o("NystromformerForTokenClassification"),qZo=o(" (Nystr\xF6mformer model)"),jZo=l(),dT=a("li"),G2e=a("strong"),DZo=o("qdqbert"),GZo=o(" \u2014 "),hQ=a("a"),OZo=o("QDQBertForTokenClassification"),VZo=o(" (QDQBert model)"),XZo=l(),cT=a("li"),O2e=a("strong"),zZo=o("rembert"),QZo=o(" \u2014 "),uQ=a("a"),WZo=o("RemBertForTokenClassification"),HZo=o(" (RemBERT model)"),UZo=l(),mT=a("li"),V2e=a("strong"),JZo=o("roberta"),YZo=o(" \u2014 "),pQ=a("a"),KZo=o("RobertaForTokenClassification"),ZZo=o(" (RoBERTa model)"),eer=l(),fT=a("li"),X2e=a("strong"),oer=o("roformer"),rer=o(" \u2014 "),_Q=a("a"),ter=o("RoFormerForTokenClassification"),aer=o(" (RoFormer model)"),ner=l(),gT=a("li"),z2e=a("strong"),ser=o("squeezebert"),ler=o(" \u2014 "),bQ=a("a"),ier=o("SqueezeBertForTokenClassification"),der=o(" (SqueezeBERT model)"),cer=l(),hT=a("li"),Q2e=a("strong"),mer=o("xlm"),fer=o(" \u2014 "),vQ=a("a"),ger=o("XLMForTokenClassification"),her=o(" (XLM model)"),uer=l(),uT=a("li"),W2e=a("strong"),per=o("xlm-roberta"),_er=o(" \u2014 "),FQ=a("a"),ber=o("XLMRobertaForTokenClassification"),ver=o(" (XLM-RoBERTa model)"),Fer=l(),pT=a("li"),H2e=a("strong"),Ter=o("xlm-roberta-xl"),Mer=o(" \u2014 "),TQ=a("a"),Eer=o("XLMRobertaXLForTokenClassification"),Cer=o(" (XLM-RoBERTa-XL model)"),wer=l(),_T=a("li"),U2e=a("strong"),Aer=o("xlnet"),Ler=o(" \u2014 "),MQ=a("a"),yer=o("XLNetForTokenClassification"),xer=o(" (XLNet model)"),$er=l(),bT=a("li"),J2e=a("strong"),ker=o("yoso"),Ser=o(" \u2014 "),EQ=a("a"),Rer=o("YosoForTokenClassification"),Per=o(" (YOSO model)"),Ber=l(),vT=a("p"),Ner=o("The model is set in evaluation mode by default using "),Y2e=a("code"),Ier=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K2e=a("code"),jer=o("model.train()"),Der=l(),F(FT.$$.fragment),GXe=l(),ud=a("h2"),TT=a("a"),Z2e=a("span"),F(C8.$$.fragment),Ger=l(),ebe=a("span"),Oer=o("AutoModelForQuestionAnswering"),OXe=l(),Do=a("div"),F(w8.$$.fragment),Ver=l(),pd=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CQ=a("a"),zer=o("from_pretrained()"),Qer=o(" class method or the "),wQ=a("a"),Wer=o("from_config()"),Her=o(` class
method.`),Uer=l(),A8=a("p"),Jer=o("This class cannot be instantiated directly using "),obe=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),_t=a("div"),F(L8.$$.fragment),eor=l(),rbe=a("p"),oor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ror=l(),_d=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(MT.$$.fragment),dor=l(),so=a("div"),F(y8.$$.fragment),cor=l(),abe=a("p"),mor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gor=l(),za=a("p"),hor=o("The model class to instantiate is selected based on the "),nbe=a("code"),uor=o("model_type"),por=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),_or=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),V=a("ul"),ET=a("li"),ibe=a("strong"),Mor=o("albert"),Eor=o(" \u2014 "),LQ=a("a"),Cor=o("AlbertForQuestionAnswering"),wor=o(" (ALBERT model)"),Aor=l(),CT=a("li"),dbe=a("strong"),Lor=o("bart"),yor=o(" \u2014 "),yQ=a("a"),xor=o("BartForQuestionAnswering"),$or=o(" (BART model)"),kor=l(),wT=a("li"),cbe=a("strong"),Sor=o("bert"),Ror=o(" \u2014 "),xQ=a("a"),Por=o("BertForQuestionAnswering"),Bor=o(" (BERT model)"),Nor=l(),AT=a("li"),mbe=a("strong"),Ior=o("big_bird"),qor=o(" \u2014 "),$Q=a("a"),jor=o("BigBirdForQuestionAnswering"),Dor=o(" (BigBird model)"),Gor=l(),LT=a("li"),fbe=a("strong"),Oor=o("bigbird_pegasus"),Vor=o(" \u2014 "),kQ=a("a"),Xor=o("BigBirdPegasusForQuestionAnswering"),zor=o(" (BigBird-Pegasus model)"),Qor=l(),yT=a("li"),gbe=a("strong"),Wor=o("camembert"),Hor=o(" \u2014 "),SQ=a("a"),Uor=o("CamembertForQuestionAnswering"),Jor=o(" (CamemBERT model)"),Yor=l(),xT=a("li"),hbe=a("strong"),Kor=o("canine"),Zor=o(" \u2014 "),RQ=a("a"),err=o("CanineForQuestionAnswering"),orr=o(" (CANINE model)"),rrr=l(),$T=a("li"),ube=a("strong"),trr=o("convbert"),arr=o(" \u2014 "),PQ=a("a"),nrr=o("ConvBertForQuestionAnswering"),srr=o(" (ConvBERT model)"),lrr=l(),kT=a("li"),pbe=a("strong"),irr=o("data2vec-text"),drr=o(" \u2014 "),BQ=a("a"),crr=o("Data2VecTextForQuestionAnswering"),mrr=o(" (Data2VecText model)"),frr=l(),ST=a("li"),_be=a("strong"),grr=o("deberta"),hrr=o(" \u2014 "),NQ=a("a"),urr=o("DebertaForQuestionAnswering"),prr=o(" (DeBERTa model)"),_rr=l(),RT=a("li"),bbe=a("strong"),brr=o("deberta-v2"),vrr=o(" \u2014 "),IQ=a("a"),Frr=o("DebertaV2ForQuestionAnswering"),Trr=o(" (DeBERTa-v2 model)"),Mrr=l(),PT=a("li"),vbe=a("strong"),Err=o("distilbert"),Crr=o(" \u2014 "),qQ=a("a"),wrr=o("DistilBertForQuestionAnswering"),Arr=o(" (DistilBERT model)"),Lrr=l(),BT=a("li"),Fbe=a("strong"),yrr=o("electra"),xrr=o(" \u2014 "),jQ=a("a"),$rr=o("ElectraForQuestionAnswering"),krr=o(" (ELECTRA model)"),Srr=l(),NT=a("li"),Tbe=a("strong"),Rrr=o("flaubert"),Prr=o(" \u2014 "),DQ=a("a"),Brr=o("FlaubertForQuestionAnsweringSimple"),Nrr=o(" (FlauBERT model)"),Irr=l(),IT=a("li"),Mbe=a("strong"),qrr=o("fnet"),jrr=o(" \u2014 "),GQ=a("a"),Drr=o("FNetForQuestionAnswering"),Grr=o(" (FNet model)"),Orr=l(),qT=a("li"),Ebe=a("strong"),Vrr=o("funnel"),Xrr=o(" \u2014 "),OQ=a("a"),zrr=o("FunnelForQuestionAnswering"),Qrr=o(" (Funnel Transformer model)"),Wrr=l(),jT=a("li"),Cbe=a("strong"),Hrr=o("gptj"),Urr=o(" \u2014 "),VQ=a("a"),Jrr=o("GPTJForQuestionAnswering"),Yrr=o(" (GPT-J model)"),Krr=l(),DT=a("li"),wbe=a("strong"),Zrr=o("ibert"),etr=o(" \u2014 "),XQ=a("a"),otr=o("IBertForQuestionAnswering"),rtr=o(" (I-BERT model)"),ttr=l(),GT=a("li"),Abe=a("strong"),atr=o("layoutlmv2"),ntr=o(" \u2014 "),zQ=a("a"),str=o("LayoutLMv2ForQuestionAnswering"),ltr=o(" (LayoutLMv2 model)"),itr=l(),OT=a("li"),Lbe=a("strong"),dtr=o("layoutlmv3"),ctr=o(" \u2014 "),QQ=a("a"),mtr=o("LayoutLMv3ForQuestionAnswering"),ftr=o(" (LayoutLMv3 model)"),gtr=l(),VT=a("li"),ybe=a("strong"),htr=o("led"),utr=o(" \u2014 "),WQ=a("a"),ptr=o("LEDForQuestionAnswering"),_tr=o(" (LED model)"),btr=l(),XT=a("li"),xbe=a("strong"),vtr=o("longformer"),Ftr=o(" \u2014 "),HQ=a("a"),Ttr=o("LongformerForQuestionAnswering"),Mtr=o(" (Longformer model)"),Etr=l(),zT=a("li"),$be=a("strong"),Ctr=o("lxmert"),wtr=o(" \u2014 "),UQ=a("a"),Atr=o("LxmertForQuestionAnswering"),Ltr=o(" (LXMERT model)"),ytr=l(),QT=a("li"),kbe=a("strong"),xtr=o("mbart"),$tr=o(" \u2014 "),JQ=a("a"),ktr=o("MBartForQuestionAnswering"),Str=o(" (mBART model)"),Rtr=l(),WT=a("li"),Sbe=a("strong"),Ptr=o("megatron-bert"),Btr=o(" \u2014 "),YQ=a("a"),Ntr=o("MegatronBertForQuestionAnswering"),Itr=o(" (Megatron-BERT model)"),qtr=l(),HT=a("li"),Rbe=a("strong"),jtr=o("mobilebert"),Dtr=o(" \u2014 "),KQ=a("a"),Gtr=o("MobileBertForQuestionAnswering"),Otr=o(" (MobileBERT model)"),Vtr=l(),UT=a("li"),Pbe=a("strong"),Xtr=o("mpnet"),ztr=o(" \u2014 "),ZQ=a("a"),Qtr=o("MPNetForQuestionAnswering"),Wtr=o(" (MPNet model)"),Htr=l(),JT=a("li"),Bbe=a("strong"),Utr=o("mvp"),Jtr=o(" \u2014 "),eW=a("a"),Ytr=o("MvpForQuestionAnswering"),Ktr=o(" (MVP model)"),Ztr=l(),YT=a("li"),Nbe=a("strong"),ear=o("nezha"),oar=o(" \u2014 "),oW=a("a"),rar=o("NezhaForQuestionAnswering"),tar=o(" (Nezha model)"),aar=l(),KT=a("li"),Ibe=a("strong"),nar=o("nystromformer"),sar=o(" \u2014 "),rW=a("a"),lar=o("NystromformerForQuestionAnswering"),iar=o(" (Nystr\xF6mformer model)"),dar=l(),ZT=a("li"),qbe=a("strong"),car=o("qdqbert"),mar=o(" \u2014 "),tW=a("a"),far=o("QDQBertForQuestionAnswering"),gar=o(" (QDQBert model)"),har=l(),eM=a("li"),jbe=a("strong"),uar=o("reformer"),par=o(" \u2014 "),aW=a("a"),_ar=o("ReformerForQuestionAnswering"),bar=o(" (Reformer model)"),Far=l(),oM=a("li"),Dbe=a("strong"),Tar=o("rembert"),Mar=o(" \u2014 "),nW=a("a"),Ear=o("RemBertForQuestionAnswering"),Car=o(" (RemBERT model)"),war=l(),rM=a("li"),Gbe=a("strong"),Aar=o("roberta"),Lar=o(" \u2014 "),sW=a("a"),yar=o("RobertaForQuestionAnswering"),xar=o(" (RoBERTa model)"),$ar=l(),tM=a("li"),Obe=a("strong"),kar=o("roformer"),Sar=o(" \u2014 "),lW=a("a"),Rar=o("RoFormerForQuestionAnswering"),Par=o(" (RoFormer model)"),Bar=l(),aM=a("li"),Vbe=a("strong"),Nar=o("splinter"),Iar=o(" \u2014 "),iW=a("a"),qar=o("SplinterForQuestionAnswering"),jar=o(" (Splinter model)"),Dar=l(),nM=a("li"),Xbe=a("strong"),Gar=o("squeezebert"),Oar=o(" \u2014 "),dW=a("a"),Var=o("SqueezeBertForQuestionAnswering"),Xar=o(" (SqueezeBERT model)"),zar=l(),sM=a("li"),zbe=a("strong"),Qar=o("xlm"),War=o(" \u2014 "),cW=a("a"),Har=o("XLMForQuestionAnsweringSimple"),Uar=o(" (XLM model)"),Jar=l(),lM=a("li"),Qbe=a("strong"),Yar=o("xlm-roberta"),Kar=o(" \u2014 "),mW=a("a"),Zar=o("XLMRobertaForQuestionAnswering"),enr=o(" (XLM-RoBERTa model)"),onr=l(),iM=a("li"),Wbe=a("strong"),rnr=o("xlm-roberta-xl"),tnr=o(" \u2014 "),fW=a("a"),anr=o("XLMRobertaXLForQuestionAnswering"),nnr=o(" (XLM-RoBERTa-XL model)"),snr=l(),dM=a("li"),Hbe=a("strong"),lnr=o("xlnet"),inr=o(" \u2014 "),gW=a("a"),dnr=o("XLNetForQuestionAnsweringSimple"),cnr=o(" (XLNet model)"),mnr=l(),cM=a("li"),Ube=a("strong"),fnr=o("yoso"),gnr=o(" \u2014 "),hW=a("a"),hnr=o("YosoForQuestionAnswering"),unr=o(" (YOSO model)"),pnr=l(),mM=a("p"),_nr=o("The model is set in evaluation mode by default using "),Jbe=a("code"),bnr=o("model.eval()"),vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),Fnr=o("model.train()"),Tnr=l(),F(fM.$$.fragment),VXe=l(),bd=a("h2"),gM=a("a"),Kbe=a("span"),F(x8.$$.fragment),Mnr=l(),Zbe=a("span"),Enr=o("AutoModelForTableQuestionAnswering"),XXe=l(),Go=a("div"),F($8.$$.fragment),Cnr=l(),vd=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=a("a"),Anr=o("from_pretrained()"),Lnr=o(" class method or the "),pW=a("a"),ynr=o("from_config()"),xnr=o(` class
method.`),$nr=l(),k8=a("p"),knr=o("This class cannot be instantiated directly using "),eve=a("code"),Snr=o("__init__()"),Rnr=o(" (throws an error)."),Pnr=l(),bt=a("div"),F(S8.$$.fragment),Bnr=l(),ove=a("p"),Nnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Inr=l(),Fd=a("p"),qnr=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),F(hM.$$.fragment),Xnr=l(),lo=a("div"),F(R8.$$.fragment),znr=l(),tve=a("p"),Qnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wnr=l(),Qa=a("p"),Hnr=o("The model class to instantiate is selected based on the "),ave=a("code"),Unr=o("model_type"),Jnr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(":"),osr=l(),lve=a("ul"),uM=a("li"),ive=a("strong"),rsr=o("tapas"),tsr=o(" \u2014 "),bW=a("a"),asr=o("TapasForQuestionAnswering"),nsr=o(" (TAPAS model)"),ssr=l(),pM=a("p"),lsr=o("The model is set in evaluation mode by default using "),dve=a("code"),isr=o("model.eval()"),dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=a("code"),csr=o("model.train()"),msr=l(),F(_M.$$.fragment),zXe=l(),Td=a("h2"),bM=a("a"),mve=a("span"),F(P8.$$.fragment),fsr=l(),fve=a("span"),gsr=o("AutoModelForImageClassification"),QXe=l(),Oo=a("div"),F(B8.$$.fragment),hsr=l(),Md=a("p"),usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vW=a("a"),psr=o("from_pretrained()"),_sr=o(" class method or the "),FW=a("a"),bsr=o("from_config()"),vsr=o(` class
method.`),Fsr=l(),N8=a("p"),Tsr=o("This class cannot be instantiated directly using "),gve=a("code"),Msr=o("__init__()"),Esr=o(" (throws an error)."),Csr=l(),vt=a("div"),F(I8.$$.fragment),wsr=l(),hve=a("p"),Asr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lsr=l(),Ed=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),xsr=o("not"),$sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),ksr=o("from_pretrained()"),Ssr=o(" to load the model weights."),Rsr=l(),F(vM.$$.fragment),Psr=l(),io=a("div"),F(q8.$$.fragment),Bsr=l(),pve=a("p"),Nsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Isr=l(),Wa=a("p"),qsr=o("The model class to instantiate is selected based on the "),_ve=a("code"),jsr=o("model_type"),Dsr=o(` property of the config object (either
passed as an argument or loaded from `),bve=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),Vsr=o("pretrained_model_name_or_path"),Xsr=o(":"),zsr=l(),ve=a("ul"),FM=a("li"),Fve=a("strong"),Qsr=o("beit"),Wsr=o(" \u2014 "),MW=a("a"),Hsr=o("BeitForImageClassification"),Usr=o(" (BEiT model)"),Jsr=l(),TM=a("li"),Tve=a("strong"),Ysr=o("convnext"),Ksr=o(" \u2014 "),EW=a("a"),Zsr=o("ConvNextForImageClassification"),elr=o(" (ConvNeXT model)"),olr=l(),MM=a("li"),Mve=a("strong"),rlr=o("cvt"),tlr=o(" \u2014 "),CW=a("a"),alr=o("CvtForImageClassification"),nlr=o(" (CvT model)"),slr=l(),EM=a("li"),Eve=a("strong"),llr=o("data2vec-vision"),ilr=o(" \u2014 "),wW=a("a"),dlr=o("Data2VecVisionForImageClassification"),clr=o(" (Data2VecVision model)"),mlr=l(),Us=a("li"),Cve=a("strong"),flr=o("deit"),glr=o(" \u2014 "),AW=a("a"),hlr=o("DeiTForImageClassification"),ulr=o(" or "),LW=a("a"),plr=o("DeiTForImageClassificationWithTeacher"),_lr=o(" (DeiT model)"),blr=l(),CM=a("li"),wve=a("strong"),vlr=o("imagegpt"),Flr=o(" \u2014 "),yW=a("a"),Tlr=o("ImageGPTForImageClassification"),Mlr=o(" (ImageGPT model)"),Elr=l(),Js=a("li"),Ave=a("strong"),Clr=o("levit"),wlr=o(" \u2014 "),xW=a("a"),Alr=o("LevitForImageClassification"),Llr=o(" or "),$W=a("a"),ylr=o("LevitForImageClassificationWithTeacher"),xlr=o(" (LeViT model)"),$lr=l(),wM=a("li"),Lve=a("strong"),klr=o("mobilevit"),Slr=o(" \u2014 "),kW=a("a"),Rlr=o("MobileViTForImageClassification"),Plr=o(" (MobileViT model)"),Blr=l(),Ft=a("li"),yve=a("strong"),Nlr=o("perceiver"),Ilr=o(" \u2014 "),SW=a("a"),qlr=o("PerceiverForImageClassificationLearned"),jlr=o(" or "),RW=a("a"),Dlr=o("PerceiverForImageClassificationFourier"),Glr=o(" or "),PW=a("a"),Olr=o("PerceiverForImageClassificationConvProcessing"),Vlr=o(" (Perceiver model)"),Xlr=l(),AM=a("li"),xve=a("strong"),zlr=o("poolformer"),Qlr=o(" \u2014 "),BW=a("a"),Wlr=o("PoolFormerForImageClassification"),Hlr=o(" (PoolFormer model)"),Ulr=l(),LM=a("li"),$ve=a("strong"),Jlr=o("regnet"),Ylr=o(" \u2014 "),NW=a("a"),Klr=o("RegNetForImageClassification"),Zlr=o(" (RegNet model)"),eir=l(),yM=a("li"),kve=a("strong"),oir=o("resnet"),rir=o(" \u2014 "),IW=a("a"),tir=o("ResNetForImageClassification"),air=o(" (ResNet model)"),nir=l(),xM=a("li"),Sve=a("strong"),sir=o("segformer"),lir=o(" \u2014 "),qW=a("a"),iir=o("SegformerForImageClassification"),dir=o(" (SegFormer model)"),cir=l(),$M=a("li"),Rve=a("strong"),mir=o("swin"),fir=o(" \u2014 "),jW=a("a"),gir=o("SwinForImageClassification"),hir=o(" (Swin Transformer model)"),uir=l(),kM=a("li"),Pve=a("strong"),pir=o("van"),_ir=o(" \u2014 "),DW=a("a"),bir=o("VanForImageClassification"),vir=o(" (VAN model)"),Fir=l(),SM=a("li"),Bve=a("strong"),Tir=o("vit"),Mir=o(" \u2014 "),GW=a("a"),Eir=o("ViTForImageClassification"),Cir=o(" (ViT model)"),wir=l(),RM=a("p"),Air=o("The model is set in evaluation mode by default using "),Nve=a("code"),Lir=o("model.eval()"),yir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ive=a("code"),xir=o("model.train()"),$ir=l(),F(PM.$$.fragment),WXe=l(),Cd=a("h2"),BM=a("a"),qve=a("span"),F(j8.$$.fragment),kir=l(),jve=a("span"),Sir=o("AutoModelForVision2Seq"),HXe=l(),Vo=a("div"),F(D8.$$.fragment),Rir=l(),wd=a("p"),Pir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OW=a("a"),Bir=o("from_pretrained()"),Nir=o(" class method or the "),VW=a("a"),Iir=o("from_config()"),qir=o(` class
method.`),jir=l(),G8=a("p"),Dir=o("This class cannot be instantiated directly using "),Dve=a("code"),Gir=o("__init__()"),Oir=o(" (throws an error)."),Vir=l(),Tt=a("div"),F(O8.$$.fragment),Xir=l(),Gve=a("p"),zir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qir=l(),Ad=a("p"),Wir=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),Hir=o("not"),Uir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Jir=o("from_pretrained()"),Yir=o(" to load the model weights."),Kir=l(),F(NM.$$.fragment),Zir=l(),co=a("div"),F(V8.$$.fragment),edr=l(),Vve=a("p"),odr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rdr=l(),Ha=a("p"),tdr=o("The model class to instantiate is selected based on the "),Xve=a("code"),adr=o("model_type"),ndr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),sdr=o("pretrained_model_name_or_path"),ldr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),idr=o("pretrained_model_name_or_path"),ddr=o(":"),cdr=l(),Wve=a("ul"),IM=a("li"),Hve=a("strong"),mdr=o("vision-encoder-decoder"),fdr=o(" \u2014 "),zW=a("a"),gdr=o("VisionEncoderDecoderModel"),hdr=o(" (Vision Encoder decoder model)"),udr=l(),qM=a("p"),pdr=o("The model is set in evaluation mode by default using "),Uve=a("code"),_dr=o("model.eval()"),bdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jve=a("code"),vdr=o("model.train()"),Fdr=l(),F(jM.$$.fragment),UXe=l(),Ld=a("h2"),DM=a("a"),Yve=a("span"),F(X8.$$.fragment),Tdr=l(),Kve=a("span"),Mdr=o("AutoModelForVisualQuestionAnswering"),JXe=l(),Xo=a("div"),F(z8.$$.fragment),Edr=l(),yd=a("p"),Cdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QW=a("a"),wdr=o("from_pretrained()"),Adr=o(" class method or the "),WW=a("a"),Ldr=o("from_config()"),ydr=o(` class
method.`),xdr=l(),Q8=a("p"),$dr=o("This class cannot be instantiated directly using "),Zve=a("code"),kdr=o("__init__()"),Sdr=o(" (throws an error)."),Rdr=l(),Mt=a("div"),F(W8.$$.fragment),Pdr=l(),e1e=a("p"),Bdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ndr=l(),xd=a("p"),Idr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),qdr=o("not"),jdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Ddr=o("from_pretrained()"),Gdr=o(" to load the model weights."),Odr=l(),F(GM.$$.fragment),Vdr=l(),mo=a("div"),F(H8.$$.fragment),Xdr=l(),r1e=a("p"),zdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Qdr=l(),Ua=a("p"),Wdr=o("The model class to instantiate is selected based on the "),t1e=a("code"),Hdr=o("model_type"),Udr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Jdr=o("pretrained_model_name_or_path"),Ydr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Kdr=o("pretrained_model_name_or_path"),Zdr=o(":"),ecr=l(),s1e=a("ul"),OM=a("li"),l1e=a("strong"),ocr=o("vilt"),rcr=o(" \u2014 "),UW=a("a"),tcr=o("ViltForQuestionAnswering"),acr=o(" (ViLT model)"),ncr=l(),VM=a("p"),scr=o("The model is set in evaluation mode by default using "),i1e=a("code"),lcr=o("model.eval()"),icr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=a("code"),dcr=o("model.train()"),ccr=l(),F(XM.$$.fragment),YXe=l(),$d=a("h2"),zM=a("a"),c1e=a("span"),F(U8.$$.fragment),mcr=l(),m1e=a("span"),fcr=o("AutoModelForAudioClassification"),KXe=l(),zo=a("div"),F(J8.$$.fragment),gcr=l(),kd=a("p"),hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JW=a("a"),ucr=o("from_pretrained()"),pcr=o(" class method or the "),YW=a("a"),_cr=o("from_config()"),bcr=o(` class
method.`),vcr=l(),Y8=a("p"),Fcr=o("This class cannot be instantiated directly using "),f1e=a("code"),Tcr=o("__init__()"),Mcr=o(" (throws an error)."),Ecr=l(),Et=a("div"),F(K8.$$.fragment),Ccr=l(),g1e=a("p"),wcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Acr=l(),Sd=a("p"),Lcr=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),ycr=o("not"),xcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),$cr=o("from_pretrained()"),kcr=o(" to load the model weights."),Scr=l(),F(QM.$$.fragment),Rcr=l(),fo=a("div"),F(Z8.$$.fragment),Pcr=l(),u1e=a("p"),Bcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ncr=l(),Ja=a("p"),Icr=o("The model class to instantiate is selected based on the "),p1e=a("code"),qcr=o("model_type"),jcr=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),Ocr=o("pretrained_model_name_or_path"),Vcr=o(":"),Xcr=l(),Pe=a("ul"),WM=a("li"),v1e=a("strong"),zcr=o("data2vec-audio"),Qcr=o(" \u2014 "),ZW=a("a"),Wcr=o("Data2VecAudioForSequenceClassification"),Hcr=o(" (Data2VecAudio model)"),Ucr=l(),HM=a("li"),F1e=a("strong"),Jcr=o("hubert"),Ycr=o(" \u2014 "),eH=a("a"),Kcr=o("HubertForSequenceClassification"),Zcr=o(" (Hubert model)"),emr=l(),UM=a("li"),T1e=a("strong"),omr=o("sew"),rmr=o(" \u2014 "),oH=a("a"),tmr=o("SEWForSequenceClassification"),amr=o(" (SEW model)"),nmr=l(),JM=a("li"),M1e=a("strong"),smr=o("sew-d"),lmr=o(" \u2014 "),rH=a("a"),imr=o("SEWDForSequenceClassification"),dmr=o(" (SEW-D model)"),cmr=l(),YM=a("li"),E1e=a("strong"),mmr=o("unispeech"),fmr=o(" \u2014 "),tH=a("a"),gmr=o("UniSpeechForSequenceClassification"),hmr=o(" (UniSpeech model)"),umr=l(),KM=a("li"),C1e=a("strong"),pmr=o("unispeech-sat"),_mr=o(" \u2014 "),aH=a("a"),bmr=o("UniSpeechSatForSequenceClassification"),vmr=o(" (UniSpeechSat model)"),Fmr=l(),ZM=a("li"),w1e=a("strong"),Tmr=o("wav2vec2"),Mmr=o(" \u2014 "),nH=a("a"),Emr=o("Wav2Vec2ForSequenceClassification"),Cmr=o(" (Wav2Vec2 model)"),wmr=l(),e4=a("li"),A1e=a("strong"),Amr=o("wav2vec2-conformer"),Lmr=o(" \u2014 "),sH=a("a"),ymr=o("Wav2Vec2ConformerForSequenceClassification"),xmr=o(" (Wav2Vec2-Conformer model)"),$mr=l(),o4=a("li"),L1e=a("strong"),kmr=o("wavlm"),Smr=o(" \u2014 "),lH=a("a"),Rmr=o("WavLMForSequenceClassification"),Pmr=o(" (WavLM model)"),Bmr=l(),r4=a("p"),Nmr=o("The model is set in evaluation mode by default using "),y1e=a("code"),Imr=o("model.eval()"),qmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=a("code"),jmr=o("model.train()"),Dmr=l(),F(t4.$$.fragment),ZXe=l(),Rd=a("h2"),a4=a("a"),$1e=a("span"),F(e9.$$.fragment),Gmr=l(),k1e=a("span"),Omr=o("AutoModelForAudioFrameClassification"),eze=l(),Qo=a("div"),F(o9.$$.fragment),Vmr=l(),Pd=a("p"),Xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iH=a("a"),zmr=o("from_pretrained()"),Qmr=o(" class method or the "),dH=a("a"),Wmr=o("from_config()"),Hmr=o(` class
method.`),Umr=l(),r9=a("p"),Jmr=o("This class cannot be instantiated directly using "),S1e=a("code"),Ymr=o("__init__()"),Kmr=o(" (throws an error)."),Zmr=l(),Ct=a("div"),F(t9.$$.fragment),efr=l(),R1e=a("p"),ofr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),rfr=l(),Bd=a("p"),tfr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),afr=o("not"),nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),sfr=o("from_pretrained()"),lfr=o(" to load the model weights."),ifr=l(),F(n4.$$.fragment),dfr=l(),go=a("div"),F(a9.$$.fragment),cfr=l(),B1e=a("p"),mfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ffr=l(),Ya=a("p"),gfr=o("The model class to instantiate is selected based on the "),N1e=a("code"),hfr=o("model_type"),ufr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),pfr=o("pretrained_model_name_or_path"),_fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=a("code"),bfr=o("pretrained_model_name_or_path"),vfr=o(":"),Ffr=l(),rt=a("ul"),s4=a("li"),j1e=a("strong"),Tfr=o("data2vec-audio"),Mfr=o(" \u2014 "),mH=a("a"),Efr=o("Data2VecAudioForAudioFrameClassification"),Cfr=o(" (Data2VecAudio model)"),wfr=l(),l4=a("li"),D1e=a("strong"),Afr=o("unispeech-sat"),Lfr=o(" \u2014 "),fH=a("a"),yfr=o("UniSpeechSatForAudioFrameClassification"),xfr=o(" (UniSpeechSat model)"),$fr=l(),i4=a("li"),G1e=a("strong"),kfr=o("wav2vec2"),Sfr=o(" \u2014 "),gH=a("a"),Rfr=o("Wav2Vec2ForAudioFrameClassification"),Pfr=o(" (Wav2Vec2 model)"),Bfr=l(),d4=a("li"),O1e=a("strong"),Nfr=o("wav2vec2-conformer"),Ifr=o(" \u2014 "),hH=a("a"),qfr=o("Wav2Vec2ConformerForAudioFrameClassification"),jfr=o(" (Wav2Vec2-Conformer model)"),Dfr=l(),c4=a("li"),V1e=a("strong"),Gfr=o("wavlm"),Ofr=o(" \u2014 "),uH=a("a"),Vfr=o("WavLMForAudioFrameClassification"),Xfr=o(" (WavLM model)"),zfr=l(),m4=a("p"),Qfr=o("The model is set in evaluation mode by default using "),X1e=a("code"),Wfr=o("model.eval()"),Hfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),Ufr=o("model.train()"),Jfr=l(),F(f4.$$.fragment),oze=l(),Nd=a("h2"),g4=a("a"),Q1e=a("span"),F(n9.$$.fragment),Yfr=l(),W1e=a("span"),Kfr=o("AutoModelForCTC"),rze=l(),Wo=a("div"),F(s9.$$.fragment),Zfr=l(),Id=a("p"),egr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pH=a("a"),ogr=o("from_pretrained()"),rgr=o(" class method or the "),_H=a("a"),tgr=o("from_config()"),agr=o(` class
method.`),ngr=l(),l9=a("p"),sgr=o("This class cannot be instantiated directly using "),H1e=a("code"),lgr=o("__init__()"),igr=o(" (throws an error)."),dgr=l(),wt=a("div"),F(i9.$$.fragment),cgr=l(),U1e=a("p"),mgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),fgr=l(),qd=a("p"),ggr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),hgr=o("not"),ugr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),pgr=o("from_pretrained()"),_gr=o(" to load the model weights."),bgr=l(),F(h4.$$.fragment),vgr=l(),ho=a("div"),F(d9.$$.fragment),Fgr=l(),Y1e=a("p"),Tgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Mgr=l(),Ka=a("p"),Egr=o("The model class to instantiate is selected based on the "),K1e=a("code"),Cgr=o("model_type"),wgr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),Agr=o("pretrained_model_name_or_path"),Lgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(":"),$gr=l(),Le=a("ul"),u4=a("li"),oFe=a("strong"),kgr=o("data2vec-audio"),Sgr=o(" \u2014 "),vH=a("a"),Rgr=o("Data2VecAudioForCTC"),Pgr=o(" (Data2VecAudio model)"),Bgr=l(),p4=a("li"),rFe=a("strong"),Ngr=o("hubert"),Igr=o(" \u2014 "),FH=a("a"),qgr=o("HubertForCTC"),jgr=o(" (Hubert model)"),Dgr=l(),_4=a("li"),tFe=a("strong"),Ggr=o("mctct"),Ogr=o(" \u2014 "),TH=a("a"),Vgr=o("MCTCTForCTC"),Xgr=o(" (M-CTC-T model)"),zgr=l(),b4=a("li"),aFe=a("strong"),Qgr=o("sew"),Wgr=o(" \u2014 "),MH=a("a"),Hgr=o("SEWForCTC"),Ugr=o(" (SEW model)"),Jgr=l(),v4=a("li"),nFe=a("strong"),Ygr=o("sew-d"),Kgr=o(" \u2014 "),EH=a("a"),Zgr=o("SEWDForCTC"),ehr=o(" (SEW-D model)"),ohr=l(),F4=a("li"),sFe=a("strong"),rhr=o("unispeech"),thr=o(" \u2014 "),CH=a("a"),ahr=o("UniSpeechForCTC"),nhr=o(" (UniSpeech model)"),shr=l(),T4=a("li"),lFe=a("strong"),lhr=o("unispeech-sat"),ihr=o(" \u2014 "),wH=a("a"),dhr=o("UniSpeechSatForCTC"),chr=o(" (UniSpeechSat model)"),mhr=l(),M4=a("li"),iFe=a("strong"),fhr=o("wav2vec2"),ghr=o(" \u2014 "),AH=a("a"),hhr=o("Wav2Vec2ForCTC"),uhr=o(" (Wav2Vec2 model)"),phr=l(),E4=a("li"),dFe=a("strong"),_hr=o("wav2vec2-conformer"),bhr=o(" \u2014 "),LH=a("a"),vhr=o("Wav2Vec2ConformerForCTC"),Fhr=o(" (Wav2Vec2-Conformer model)"),Thr=l(),C4=a("li"),cFe=a("strong"),Mhr=o("wavlm"),Ehr=o(" \u2014 "),yH=a("a"),Chr=o("WavLMForCTC"),whr=o(" (WavLM model)"),Ahr=l(),w4=a("p"),Lhr=o("The model is set in evaluation mode by default using "),mFe=a("code"),yhr=o("model.eval()"),xhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fFe=a("code"),$hr=o("model.train()"),khr=l(),F(A4.$$.fragment),tze=l(),jd=a("h2"),L4=a("a"),gFe=a("span"),F(c9.$$.fragment),Shr=l(),hFe=a("span"),Rhr=o("AutoModelForSpeechSeq2Seq"),aze=l(),Ho=a("div"),F(m9.$$.fragment),Phr=l(),Dd=a("p"),Bhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xH=a("a"),Nhr=o("from_pretrained()"),Ihr=o(" class method or the "),$H=a("a"),qhr=o("from_config()"),jhr=o(` class
method.`),Dhr=l(),f9=a("p"),Ghr=o("This class cannot be instantiated directly using "),uFe=a("code"),Ohr=o("__init__()"),Vhr=o(" (throws an error)."),Xhr=l(),At=a("div"),F(g9.$$.fragment),zhr=l(),pFe=a("p"),Qhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Whr=l(),Gd=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),Uhr=o("not"),Jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),Yhr=o("from_pretrained()"),Khr=o(" to load the model weights."),Zhr=l(),F(y4.$$.fragment),eur=l(),uo=a("div"),F(h9.$$.fragment),our=l(),bFe=a("p"),rur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tur=l(),Za=a("p"),aur=o("The model class to instantiate is selected based on the "),vFe=a("code"),nur=o("model_type"),sur=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),dur=o("pretrained_model_name_or_path"),cur=o(":"),mur=l(),u9=a("ul"),x4=a("li"),MFe=a("strong"),fur=o("speech-encoder-decoder"),gur=o(" \u2014 "),SH=a("a"),hur=o("SpeechEncoderDecoderModel"),uur=o(" (Speech Encoder decoder model)"),pur=l(),$4=a("li"),EFe=a("strong"),_ur=o("speech_to_text"),bur=o(" \u2014 "),RH=a("a"),vur=o("Speech2TextForConditionalGeneration"),Fur=o(" (Speech2Text model)"),Tur=l(),k4=a("p"),Mur=o("The model is set in evaluation mode by default using "),CFe=a("code"),Eur=o("model.eval()"),Cur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=a("code"),wur=o("model.train()"),Aur=l(),F(S4.$$.fragment),nze=l(),Od=a("h2"),R4=a("a"),AFe=a("span"),F(p9.$$.fragment),Lur=l(),LFe=a("span"),yur=o("AutoModelForAudioXVector"),sze=l(),Uo=a("div"),F(_9.$$.fragment),xur=l(),Vd=a("p"),$ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PH=a("a"),kur=o("from_pretrained()"),Sur=o(" class method or the "),BH=a("a"),Rur=o("from_config()"),Pur=o(` class
method.`),Bur=l(),b9=a("p"),Nur=o("This class cannot be instantiated directly using "),yFe=a("code"),Iur=o("__init__()"),qur=o(" (throws an error)."),jur=l(),Lt=a("div"),F(v9.$$.fragment),Dur=l(),xFe=a("p"),Gur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Our=l(),Xd=a("p"),Vur=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),Xur=o("not"),zur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Qur=o("from_pretrained()"),Wur=o(" to load the model weights."),Hur=l(),F(P4.$$.fragment),Uur=l(),po=a("div"),F(F9.$$.fragment),Jur=l(),kFe=a("p"),Yur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Kur=l(),en=a("p"),Zur=o("The model class to instantiate is selected based on the "),SFe=a("code"),epr=o("model_type"),opr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(":"),spr=l(),tt=a("ul"),B4=a("li"),BFe=a("strong"),lpr=o("data2vec-audio"),ipr=o(" \u2014 "),IH=a("a"),dpr=o("Data2VecAudioForXVector"),cpr=o(" (Data2VecAudio model)"),mpr=l(),N4=a("li"),NFe=a("strong"),fpr=o("unispeech-sat"),gpr=o(" \u2014 "),qH=a("a"),hpr=o("UniSpeechSatForXVector"),upr=o(" (UniSpeechSat model)"),ppr=l(),I4=a("li"),IFe=a("strong"),_pr=o("wav2vec2"),bpr=o(" \u2014 "),jH=a("a"),vpr=o("Wav2Vec2ForXVector"),Fpr=o(" (Wav2Vec2 model)"),Tpr=l(),q4=a("li"),qFe=a("strong"),Mpr=o("wav2vec2-conformer"),Epr=o(" \u2014 "),DH=a("a"),Cpr=o("Wav2Vec2ConformerForXVector"),wpr=o(" (Wav2Vec2-Conformer model)"),Apr=l(),j4=a("li"),jFe=a("strong"),Lpr=o("wavlm"),ypr=o(" \u2014 "),GH=a("a"),xpr=o("WavLMForXVector"),$pr=o(" (WavLM model)"),kpr=l(),D4=a("p"),Spr=o("The model is set in evaluation mode by default using "),DFe=a("code"),Rpr=o("model.eval()"),Ppr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=a("code"),Bpr=o("model.train()"),Npr=l(),F(G4.$$.fragment),lze=l(),zd=a("h2"),O4=a("a"),OFe=a("span"),F(T9.$$.fragment),Ipr=l(),VFe=a("span"),qpr=o("AutoModelForMaskedImageModeling"),ize=l(),Jo=a("div"),F(M9.$$.fragment),jpr=l(),Qd=a("p"),Dpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OH=a("a"),Gpr=o("from_pretrained()"),Opr=o(" class method or the "),VH=a("a"),Vpr=o("from_config()"),Xpr=o(` class
method.`),zpr=l(),E9=a("p"),Qpr=o("This class cannot be instantiated directly using "),XFe=a("code"),Wpr=o("__init__()"),Hpr=o(" (throws an error)."),Upr=l(),yt=a("div"),F(C9.$$.fragment),Jpr=l(),zFe=a("p"),Ypr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Kpr=l(),Wd=a("p"),Zpr=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),e_r=o("not"),o_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),r_r=o("from_pretrained()"),t_r=o(" to load the model weights."),a_r=l(),F(V4.$$.fragment),n_r=l(),_o=a("div"),F(w9.$$.fragment),s_r=l(),WFe=a("p"),l_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),i_r=l(),on=a("p"),d_r=o("The model class to instantiate is selected based on the "),HFe=a("code"),c_r=o("model_type"),m_r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),f_r=o("pretrained_model_name_or_path"),g_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),h_r=o("pretrained_model_name_or_path"),u_r=o(":"),p_r=l(),Hd=a("ul"),X4=a("li"),YFe=a("strong"),__r=o("deit"),b_r=o(" \u2014 "),zH=a("a"),v_r=o("DeiTForMaskedImageModeling"),F_r=o(" (DeiT model)"),T_r=l(),z4=a("li"),KFe=a("strong"),M_r=o("swin"),E_r=o(" \u2014 "),QH=a("a"),C_r=o("SwinForMaskedImageModeling"),w_r=o(" (Swin Transformer model)"),A_r=l(),Q4=a("li"),ZFe=a("strong"),L_r=o("vit"),y_r=o(" \u2014 "),WH=a("a"),x_r=o("ViTForMaskedImageModeling"),$_r=o(" (ViT model)"),k_r=l(),W4=a("p"),S_r=o("The model is set in evaluation mode by default using "),eTe=a("code"),R_r=o("model.eval()"),P_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oTe=a("code"),B_r=o("model.train()"),N_r=l(),F(H4.$$.fragment),dze=l(),Ud=a("h2"),U4=a("a"),rTe=a("span"),F(A9.$$.fragment),I_r=l(),tTe=a("span"),q_r=o("AutoModelForObjectDetection"),cze=l(),Yo=a("div"),F(L9.$$.fragment),j_r=l(),Jd=a("p"),D_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HH=a("a"),G_r=o("from_pretrained()"),O_r=o(" class method or the "),UH=a("a"),V_r=o("from_config()"),X_r=o(` class
method.`),z_r=l(),y9=a("p"),Q_r=o("This class cannot be instantiated directly using "),aTe=a("code"),W_r=o("__init__()"),H_r=o(" (throws an error)."),U_r=l(),xt=a("div"),F(x9.$$.fragment),J_r=l(),nTe=a("p"),Y_r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),K_r=l(),Yd=a("p"),Z_r=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),e2r=o("not"),o2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),r2r=o("from_pretrained()"),t2r=o(" to load the model weights."),a2r=l(),F(J4.$$.fragment),n2r=l(),bo=a("div"),F($9.$$.fragment),s2r=l(),lTe=a("p"),l2r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),i2r=l(),rn=a("p"),d2r=o("The model class to instantiate is selected based on the "),iTe=a("code"),c2r=o("model_type"),m2r=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),f2r=o("pretrained_model_name_or_path"),g2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),h2r=o("pretrained_model_name_or_path"),u2r=o(":"),p2r=l(),k9=a("ul"),Y4=a("li"),mTe=a("strong"),_2r=o("detr"),b2r=o(" \u2014 "),YH=a("a"),v2r=o("DetrForObjectDetection"),F2r=o(" (DETR model)"),T2r=l(),K4=a("li"),fTe=a("strong"),M2r=o("yolos"),E2r=o(" \u2014 "),KH=a("a"),C2r=o("YolosForObjectDetection"),w2r=o(" (YOLOS model)"),A2r=l(),Z4=a("p"),L2r=o("The model is set in evaluation mode by default using "),gTe=a("code"),y2r=o("model.eval()"),x2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=a("code"),$2r=o("model.train()"),k2r=l(),F(eE.$$.fragment),mze=l(),Kd=a("h2"),oE=a("a"),uTe=a("span"),F(S9.$$.fragment),S2r=l(),pTe=a("span"),R2r=o("AutoModelForImageSegmentation"),fze=l(),Ko=a("div"),F(R9.$$.fragment),P2r=l(),Zd=a("p"),B2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZH=a("a"),N2r=o("from_pretrained()"),I2r=o(" class method or the "),eU=a("a"),q2r=o("from_config()"),j2r=o(` class
method.`),D2r=l(),P9=a("p"),G2r=o("This class cannot be instantiated directly using "),_Te=a("code"),O2r=o("__init__()"),V2r=o(" (throws an error)."),X2r=l(),$t=a("div"),F(B9.$$.fragment),z2r=l(),bTe=a("p"),Q2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),W2r=l(),ec=a("p"),H2r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),U2r=o("not"),J2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),Y2r=o("from_pretrained()"),K2r=o(" to load the model weights."),Z2r=l(),F(rE.$$.fragment),ebr=l(),vo=a("div"),F(N9.$$.fragment),obr=l(),FTe=a("p"),rbr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tbr=l(),tn=a("p"),abr=o("The model class to instantiate is selected based on the "),TTe=a("code"),nbr=o("model_type"),sbr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),lbr=o("pretrained_model_name_or_path"),ibr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),dbr=o("pretrained_model_name_or_path"),cbr=o(":"),mbr=l(),CTe=a("ul"),tE=a("li"),wTe=a("strong"),fbr=o("detr"),gbr=o(" \u2014 "),rU=a("a"),hbr=o("DetrForSegmentation"),ubr=o(" (DETR model)"),pbr=l(),aE=a("p"),_br=o("The model is set in evaluation mode by default using "),ATe=a("code"),bbr=o("model.eval()"),vbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LTe=a("code"),Fbr=o("model.train()"),Tbr=l(),F(nE.$$.fragment),gze=l(),oc=a("h2"),sE=a("a"),yTe=a("span"),F(I9.$$.fragment),Mbr=l(),xTe=a("span"),Ebr=o("AutoModelForSemanticSegmentation"),hze=l(),Zo=a("div"),F(q9.$$.fragment),Cbr=l(),rc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tU=a("a"),Abr=o("from_pretrained()"),Lbr=o(" class method or the "),aU=a("a"),ybr=o("from_config()"),xbr=o(` class
method.`),$br=l(),j9=a("p"),kbr=o("This class cannot be instantiated directly using "),$Te=a("code"),Sbr=o("__init__()"),Rbr=o(" (throws an error)."),Pbr=l(),kt=a("div"),F(D9.$$.fragment),Bbr=l(),kTe=a("p"),Nbr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ibr=l(),tc=a("p"),qbr=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),jbr=o("not"),Dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),Gbr=o("from_pretrained()"),Obr=o(" to load the model weights."),Vbr=l(),F(lE.$$.fragment),Xbr=l(),Fo=a("div"),F(G9.$$.fragment),zbr=l(),RTe=a("p"),Qbr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wbr=l(),an=a("p"),Hbr=o("The model class to instantiate is selected based on the "),PTe=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),Zbr=o("pretrained_model_name_or_path"),evr=o(":"),ovr=l(),at=a("ul"),iE=a("li"),ITe=a("strong"),rvr=o("beit"),tvr=o(" \u2014 "),sU=a("a"),avr=o("BeitForSemanticSegmentation"),nvr=o(" (BEiT model)"),svr=l(),dE=a("li"),qTe=a("strong"),lvr=o("data2vec-vision"),ivr=o(" \u2014 "),lU=a("a"),dvr=o("Data2VecVisionForSemanticSegmentation"),cvr=o(" (Data2VecVision model)"),mvr=l(),cE=a("li"),jTe=a("strong"),fvr=o("dpt"),gvr=o(" \u2014 "),iU=a("a"),hvr=o("DPTForSemanticSegmentation"),uvr=o(" (DPT model)"),pvr=l(),mE=a("li"),DTe=a("strong"),_vr=o("mobilevit"),bvr=o(" \u2014 "),dU=a("a"),vvr=o("MobileViTForSemanticSegmentation"),Fvr=o(" (MobileViT model)"),Tvr=l(),fE=a("li"),GTe=a("strong"),Mvr=o("segformer"),Evr=o(" \u2014 "),cU=a("a"),Cvr=o("SegformerForSemanticSegmentation"),wvr=o(" (SegFormer model)"),Avr=l(),gE=a("p"),Lvr=o("The model is set in evaluation mode by default using "),OTe=a("code"),yvr=o("model.eval()"),xvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VTe=a("code"),$vr=o("model.train()"),kvr=l(),F(hE.$$.fragment),uze=l(),ac=a("h2"),uE=a("a"),XTe=a("span"),F(O9.$$.fragment),Svr=l(),zTe=a("span"),Rvr=o("AutoModelForInstanceSegmentation"),pze=l(),er=a("div"),F(V9.$$.fragment),Pvr=l(),nc=a("p"),Bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mU=a("a"),Nvr=o("from_pretrained()"),Ivr=o(" class method or the "),fU=a("a"),qvr=o("from_config()"),jvr=o(` class
method.`),Dvr=l(),X9=a("p"),Gvr=o("This class cannot be instantiated directly using "),QTe=a("code"),Ovr=o("__init__()"),Vvr=o(" (throws an error)."),Xvr=l(),St=a("div"),F(z9.$$.fragment),zvr=l(),WTe=a("p"),Qvr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wvr=l(),sc=a("p"),Hvr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),Uvr=o("not"),Jvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" to load the model weights."),Zvr=l(),F(pE.$$.fragment),e1r=l(),To=a("div"),F(Q9.$$.fragment),o1r=l(),UTe=a("p"),r1r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),t1r=l(),nn=a("p"),a1r=o("The model class to instantiate is selected based on the "),JTe=a("code"),n1r=o("model_type"),s1r=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(":"),m1r=l(),ZTe=a("ul"),_E=a("li"),eMe=a("strong"),f1r=o("maskformer"),g1r=o(" \u2014 "),hU=a("a"),h1r=o("MaskFormerForInstanceSegmentation"),u1r=o(" (MaskFormer model)"),p1r=l(),bE=a("p"),_1r=o("The model is set in evaluation mode by default using "),oMe=a("code"),b1r=o("model.eval()"),v1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rMe=a("code"),F1r=o("model.train()"),T1r=l(),F(vE.$$.fragment),_ze=l(),lc=a("h2"),FE=a("a"),tMe=a("span"),F(W9.$$.fragment),M1r=l(),aMe=a("span"),E1r=o("TFAutoModel"),bze=l(),or=a("div"),F(H9.$$.fragment),C1r=l(),ic=a("p"),w1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=a("a"),A1r=o("from_pretrained()"),L1r=o(" class method or the "),pU=a("a"),y1r=o("from_config()"),x1r=o(` class
method.`),$1r=l(),U9=a("p"),k1r=o("This class cannot be instantiated directly using "),nMe=a("code"),S1r=o("__init__()"),R1r=o(" (throws an error)."),P1r=l(),Rt=a("div"),F(J9.$$.fragment),B1r=l(),sMe=a("p"),N1r=o("Instantiates one of the base model classes of the library from a configuration."),I1r=l(),dc=a("p"),q1r=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),j1r=o("not"),D1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),G1r=o("from_pretrained()"),O1r=o(" to load the model weights."),V1r=l(),F(TE.$$.fragment),X1r=l(),xr=a("div"),F(Y9.$$.fragment),z1r=l(),iMe=a("p"),Q1r=o("Instantiate one of the base model classes of the library from a pretrained model."),W1r=l(),sn=a("p"),H1r=o("The model class to instantiate is selected based on the "),dMe=a("code"),U1r=o("model_type"),J1r=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),Y1r=o("pretrained_model_name_or_path"),K1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),Z1r=o("pretrained_model_name_or_path"),eFr=o(":"),oFr=l(),q=a("ul"),ME=a("li"),fMe=a("strong"),rFr=o("albert"),tFr=o(" \u2014 "),bU=a("a"),aFr=o("TFAlbertModel"),nFr=o(" (ALBERT model)"),sFr=l(),EE=a("li"),gMe=a("strong"),lFr=o("bart"),iFr=o(" \u2014 "),vU=a("a"),dFr=o("TFBartModel"),cFr=o(" (BART model)"),mFr=l(),CE=a("li"),hMe=a("strong"),fFr=o("bert"),gFr=o(" \u2014 "),FU=a("a"),hFr=o("TFBertModel"),uFr=o(" (BERT model)"),pFr=l(),wE=a("li"),uMe=a("strong"),_Fr=o("blenderbot"),bFr=o(" \u2014 "),TU=a("a"),vFr=o("TFBlenderbotModel"),FFr=o(" (Blenderbot model)"),TFr=l(),AE=a("li"),pMe=a("strong"),MFr=o("blenderbot-small"),EFr=o(" \u2014 "),MU=a("a"),CFr=o("TFBlenderbotSmallModel"),wFr=o(" (BlenderbotSmall model)"),AFr=l(),LE=a("li"),_Me=a("strong"),LFr=o("camembert"),yFr=o(" \u2014 "),EU=a("a"),xFr=o("TFCamembertModel"),$Fr=o(" (CamemBERT model)"),kFr=l(),yE=a("li"),bMe=a("strong"),SFr=o("clip"),RFr=o(" \u2014 "),CU=a("a"),PFr=o("TFCLIPModel"),BFr=o(" (CLIP model)"),NFr=l(),xE=a("li"),vMe=a("strong"),IFr=o("convbert"),qFr=o(" \u2014 "),wU=a("a"),jFr=o("TFConvBertModel"),DFr=o(" (ConvBERT model)"),GFr=l(),$E=a("li"),FMe=a("strong"),OFr=o("convnext"),VFr=o(" \u2014 "),AU=a("a"),XFr=o("TFConvNextModel"),zFr=o(" (ConvNeXT model)"),QFr=l(),kE=a("li"),TMe=a("strong"),WFr=o("ctrl"),HFr=o(" \u2014 "),LU=a("a"),UFr=o("TFCTRLModel"),JFr=o(" (CTRL model)"),YFr=l(),SE=a("li"),MMe=a("strong"),KFr=o("data2vec-vision"),ZFr=o(" \u2014 "),yU=a("a"),eTr=o("TFData2VecVisionModel"),oTr=o(" (Data2VecVision model)"),rTr=l(),RE=a("li"),EMe=a("strong"),tTr=o("deberta"),aTr=o(" \u2014 "),xU=a("a"),nTr=o("TFDebertaModel"),sTr=o(" (DeBERTa model)"),lTr=l(),PE=a("li"),CMe=a("strong"),iTr=o("deberta-v2"),dTr=o(" \u2014 "),$U=a("a"),cTr=o("TFDebertaV2Model"),mTr=o(" (DeBERTa-v2 model)"),fTr=l(),BE=a("li"),wMe=a("strong"),gTr=o("deit"),hTr=o(" \u2014 "),kU=a("a"),uTr=o("TFDeiTModel"),pTr=o(" (DeiT model)"),_Tr=l(),NE=a("li"),AMe=a("strong"),bTr=o("distilbert"),vTr=o(" \u2014 "),SU=a("a"),FTr=o("TFDistilBertModel"),TTr=o(" (DistilBERT model)"),MTr=l(),IE=a("li"),LMe=a("strong"),ETr=o("dpr"),CTr=o(" \u2014 "),RU=a("a"),wTr=o("TFDPRQuestionEncoder"),ATr=o(" (DPR model)"),LTr=l(),qE=a("li"),yMe=a("strong"),yTr=o("electra"),xTr=o(" \u2014 "),PU=a("a"),$Tr=o("TFElectraModel"),kTr=o(" (ELECTRA model)"),STr=l(),jE=a("li"),xMe=a("strong"),RTr=o("flaubert"),PTr=o(" \u2014 "),BU=a("a"),BTr=o("TFFlaubertModel"),NTr=o(" (FlauBERT model)"),ITr=l(),Ys=a("li"),$Me=a("strong"),qTr=o("funnel"),jTr=o(" \u2014 "),NU=a("a"),DTr=o("TFFunnelModel"),GTr=o(" or "),IU=a("a"),OTr=o("TFFunnelBaseModel"),VTr=o(" (Funnel Transformer model)"),XTr=l(),DE=a("li"),kMe=a("strong"),zTr=o("gpt2"),QTr=o(" \u2014 "),qU=a("a"),WTr=o("TFGPT2Model"),HTr=o(" (OpenAI GPT-2 model)"),UTr=l(),GE=a("li"),SMe=a("strong"),JTr=o("gptj"),YTr=o(" \u2014 "),jU=a("a"),KTr=o("TFGPTJModel"),ZTr=o(" (GPT-J model)"),eMr=l(),OE=a("li"),RMe=a("strong"),oMr=o("hubert"),rMr=o(" \u2014 "),DU=a("a"),tMr=o("TFHubertModel"),aMr=o(" (Hubert model)"),nMr=l(),VE=a("li"),PMe=a("strong"),sMr=o("layoutlm"),lMr=o(" \u2014 "),GU=a("a"),iMr=o("TFLayoutLMModel"),dMr=o(" (LayoutLM model)"),cMr=l(),XE=a("li"),BMe=a("strong"),mMr=o("led"),fMr=o(" \u2014 "),OU=a("a"),gMr=o("TFLEDModel"),hMr=o(" (LED model)"),uMr=l(),zE=a("li"),NMe=a("strong"),pMr=o("longformer"),_Mr=o(" \u2014 "),VU=a("a"),bMr=o("TFLongformerModel"),vMr=o(" (Longformer model)"),FMr=l(),QE=a("li"),IMe=a("strong"),TMr=o("lxmert"),MMr=o(" \u2014 "),XU=a("a"),EMr=o("TFLxmertModel"),CMr=o(" (LXMERT model)"),wMr=l(),WE=a("li"),qMe=a("strong"),AMr=o("marian"),LMr=o(" \u2014 "),zU=a("a"),yMr=o("TFMarianModel"),xMr=o(" (Marian model)"),$Mr=l(),HE=a("li"),jMe=a("strong"),kMr=o("mbart"),SMr=o(" \u2014 "),QU=a("a"),RMr=o("TFMBartModel"),PMr=o(" (mBART model)"),BMr=l(),UE=a("li"),DMe=a("strong"),NMr=o("mobilebert"),IMr=o(" \u2014 "),WU=a("a"),qMr=o("TFMobileBertModel"),jMr=o(" (MobileBERT model)"),DMr=l(),JE=a("li"),GMe=a("strong"),GMr=o("mpnet"),OMr=o(" \u2014 "),HU=a("a"),VMr=o("TFMPNetModel"),XMr=o(" (MPNet model)"),zMr=l(),YE=a("li"),OMe=a("strong"),QMr=o("mt5"),WMr=o(" \u2014 "),UU=a("a"),HMr=o("TFMT5Model"),UMr=o(" (MT5 model)"),JMr=l(),KE=a("li"),VMe=a("strong"),YMr=o("openai-gpt"),KMr=o(" \u2014 "),JU=a("a"),ZMr=o("TFOpenAIGPTModel"),e4r=o(" (OpenAI GPT model)"),o4r=l(),ZE=a("li"),XMe=a("strong"),r4r=o("opt"),t4r=o(" \u2014 "),YU=a("a"),a4r=o("TFOPTModel"),n4r=o(" (OPT model)"),s4r=l(),eC=a("li"),zMe=a("strong"),l4r=o("pegasus"),i4r=o(" \u2014 "),KU=a("a"),d4r=o("TFPegasusModel"),c4r=o(" (Pegasus model)"),m4r=l(),oC=a("li"),QMe=a("strong"),f4r=o("regnet"),g4r=o(" \u2014 "),ZU=a("a"),h4r=o("TFRegNetModel"),u4r=o(" (RegNet model)"),p4r=l(),rC=a("li"),WMe=a("strong"),_4r=o("rembert"),b4r=o(" \u2014 "),eJ=a("a"),v4r=o("TFRemBertModel"),F4r=o(" (RemBERT model)"),T4r=l(),tC=a("li"),HMe=a("strong"),M4r=o("resnet"),E4r=o(" \u2014 "),oJ=a("a"),C4r=o("TFResNetModel"),w4r=o(" (ResNet model)"),A4r=l(),aC=a("li"),UMe=a("strong"),L4r=o("roberta"),y4r=o(" \u2014 "),rJ=a("a"),x4r=o("TFRobertaModel"),$4r=o(" (RoBERTa model)"),k4r=l(),nC=a("li"),JMe=a("strong"),S4r=o("roformer"),R4r=o(" \u2014 "),tJ=a("a"),P4r=o("TFRoFormerModel"),B4r=o(" (RoFormer model)"),N4r=l(),sC=a("li"),YMe=a("strong"),I4r=o("speech_to_text"),q4r=o(" \u2014 "),aJ=a("a"),j4r=o("TFSpeech2TextModel"),D4r=o(" (Speech2Text model)"),G4r=l(),lC=a("li"),KMe=a("strong"),O4r=o("swin"),V4r=o(" \u2014 "),nJ=a("a"),X4r=o("TFSwinModel"),z4r=o(" (Swin Transformer model)"),Q4r=l(),iC=a("li"),ZMe=a("strong"),W4r=o("t5"),H4r=o(" \u2014 "),sJ=a("a"),U4r=o("TFT5Model"),J4r=o(" (T5 model)"),Y4r=l(),dC=a("li"),e4e=a("strong"),K4r=o("tapas"),Z4r=o(" \u2014 "),lJ=a("a"),eEr=o("TFTapasModel"),oEr=o(" (TAPAS model)"),rEr=l(),cC=a("li"),o4e=a("strong"),tEr=o("transfo-xl"),aEr=o(" \u2014 "),iJ=a("a"),nEr=o("TFTransfoXLModel"),sEr=o(" (Transformer-XL model)"),lEr=l(),mC=a("li"),r4e=a("strong"),iEr=o("vit"),dEr=o(" \u2014 "),dJ=a("a"),cEr=o("TFViTModel"),mEr=o(" (ViT model)"),fEr=l(),fC=a("li"),t4e=a("strong"),gEr=o("vit_mae"),hEr=o(" \u2014 "),cJ=a("a"),uEr=o("TFViTMAEModel"),pEr=o(" (ViTMAE model)"),_Er=l(),gC=a("li"),a4e=a("strong"),bEr=o("wav2vec2"),vEr=o(" \u2014 "),mJ=a("a"),FEr=o("TFWav2Vec2Model"),TEr=o(" (Wav2Vec2 model)"),MEr=l(),hC=a("li"),n4e=a("strong"),EEr=o("xlm"),CEr=o(" \u2014 "),fJ=a("a"),wEr=o("TFXLMModel"),AEr=o(" (XLM model)"),LEr=l(),uC=a("li"),s4e=a("strong"),yEr=o("xlm-roberta"),xEr=o(" \u2014 "),gJ=a("a"),$Er=o("TFXLMRobertaModel"),kEr=o(" (XLM-RoBERTa model)"),SEr=l(),pC=a("li"),l4e=a("strong"),REr=o("xlnet"),PEr=o(" \u2014 "),hJ=a("a"),BEr=o("TFXLNetModel"),NEr=o(" (XLNet model)"),IEr=l(),F(_C.$$.fragment),vze=l(),cc=a("h2"),bC=a("a"),i4e=a("span"),F(K9.$$.fragment),qEr=l(),d4e=a("span"),jEr=o("TFAutoModelForPreTraining"),Fze=l(),rr=a("div"),F(Z9.$$.fragment),DEr=l(),mc=a("p"),GEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=a("a"),OEr=o("from_pretrained()"),VEr=o(" class method or the "),pJ=a("a"),XEr=o("from_config()"),zEr=o(` class
method.`),QEr=l(),ex=a("p"),WEr=o("This class cannot be instantiated directly using "),c4e=a("code"),HEr=o("__init__()"),UEr=o(" (throws an error)."),JEr=l(),Pt=a("div"),F(ox.$$.fragment),YEr=l(),m4e=a("p"),KEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZEr=l(),fc=a("p"),eCr=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),oCr=o("not"),rCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),tCr=o("from_pretrained()"),aCr=o(" to load the model weights."),nCr=l(),F(vC.$$.fragment),sCr=l(),$r=a("div"),F(rx.$$.fragment),lCr=l(),g4e=a("p"),iCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dCr=l(),ln=a("p"),cCr=o("The model class to instantiate is selected based on the "),h4e=a("code"),mCr=o("model_type"),fCr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),gCr=o("pretrained_model_name_or_path"),hCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),uCr=o("pretrained_model_name_or_path"),pCr=o(":"),_Cr=l(),se=a("ul"),FC=a("li"),_4e=a("strong"),bCr=o("albert"),vCr=o(" \u2014 "),bJ=a("a"),FCr=o("TFAlbertForPreTraining"),TCr=o(" (ALBERT model)"),MCr=l(),TC=a("li"),b4e=a("strong"),ECr=o("bart"),CCr=o(" \u2014 "),vJ=a("a"),wCr=o("TFBartForConditionalGeneration"),ACr=o(" (BART model)"),LCr=l(),MC=a("li"),v4e=a("strong"),yCr=o("bert"),xCr=o(" \u2014 "),FJ=a("a"),$Cr=o("TFBertForPreTraining"),kCr=o(" (BERT model)"),SCr=l(),EC=a("li"),F4e=a("strong"),RCr=o("camembert"),PCr=o(" \u2014 "),TJ=a("a"),BCr=o("TFCamembertForMaskedLM"),NCr=o(" (CamemBERT model)"),ICr=l(),CC=a("li"),T4e=a("strong"),qCr=o("ctrl"),jCr=o(" \u2014 "),MJ=a("a"),DCr=o("TFCTRLLMHeadModel"),GCr=o(" (CTRL model)"),OCr=l(),wC=a("li"),M4e=a("strong"),VCr=o("distilbert"),XCr=o(" \u2014 "),EJ=a("a"),zCr=o("TFDistilBertForMaskedLM"),QCr=o(" (DistilBERT model)"),WCr=l(),AC=a("li"),E4e=a("strong"),HCr=o("electra"),UCr=o(" \u2014 "),CJ=a("a"),JCr=o("TFElectraForPreTraining"),YCr=o(" (ELECTRA model)"),KCr=l(),LC=a("li"),C4e=a("strong"),ZCr=o("flaubert"),e3r=o(" \u2014 "),wJ=a("a"),o3r=o("TFFlaubertWithLMHeadModel"),r3r=o(" (FlauBERT model)"),t3r=l(),yC=a("li"),w4e=a("strong"),a3r=o("funnel"),n3r=o(" \u2014 "),AJ=a("a"),s3r=o("TFFunnelForPreTraining"),l3r=o(" (Funnel Transformer model)"),i3r=l(),xC=a("li"),A4e=a("strong"),d3r=o("gpt2"),c3r=o(" \u2014 "),LJ=a("a"),m3r=o("TFGPT2LMHeadModel"),f3r=o(" (OpenAI GPT-2 model)"),g3r=l(),$C=a("li"),L4e=a("strong"),h3r=o("layoutlm"),u3r=o(" \u2014 "),yJ=a("a"),p3r=o("TFLayoutLMForMaskedLM"),_3r=o(" (LayoutLM model)"),b3r=l(),kC=a("li"),y4e=a("strong"),v3r=o("lxmert"),F3r=o(" \u2014 "),xJ=a("a"),T3r=o("TFLxmertForPreTraining"),M3r=o(" (LXMERT model)"),E3r=l(),SC=a("li"),x4e=a("strong"),C3r=o("mobilebert"),w3r=o(" \u2014 "),$J=a("a"),A3r=o("TFMobileBertForPreTraining"),L3r=o(" (MobileBERT model)"),y3r=l(),RC=a("li"),$4e=a("strong"),x3r=o("mpnet"),$3r=o(" \u2014 "),kJ=a("a"),k3r=o("TFMPNetForMaskedLM"),S3r=o(" (MPNet model)"),R3r=l(),PC=a("li"),k4e=a("strong"),P3r=o("openai-gpt"),B3r=o(" \u2014 "),SJ=a("a"),N3r=o("TFOpenAIGPTLMHeadModel"),I3r=o(" (OpenAI GPT model)"),q3r=l(),BC=a("li"),S4e=a("strong"),j3r=o("roberta"),D3r=o(" \u2014 "),RJ=a("a"),G3r=o("TFRobertaForMaskedLM"),O3r=o(" (RoBERTa model)"),V3r=l(),NC=a("li"),R4e=a("strong"),X3r=o("t5"),z3r=o(" \u2014 "),PJ=a("a"),Q3r=o("TFT5ForConditionalGeneration"),W3r=o(" (T5 model)"),H3r=l(),IC=a("li"),P4e=a("strong"),U3r=o("tapas"),J3r=o(" \u2014 "),BJ=a("a"),Y3r=o("TFTapasForMaskedLM"),K3r=o(" (TAPAS model)"),Z3r=l(),qC=a("li"),B4e=a("strong"),e5r=o("transfo-xl"),o5r=o(" \u2014 "),NJ=a("a"),r5r=o("TFTransfoXLLMHeadModel"),t5r=o(" (Transformer-XL model)"),a5r=l(),jC=a("li"),N4e=a("strong"),n5r=o("vit_mae"),s5r=o(" \u2014 "),IJ=a("a"),l5r=o("TFViTMAEForPreTraining"),i5r=o(" (ViTMAE model)"),d5r=l(),DC=a("li"),I4e=a("strong"),c5r=o("xlm"),m5r=o(" \u2014 "),qJ=a("a"),f5r=o("TFXLMWithLMHeadModel"),g5r=o(" (XLM model)"),h5r=l(),GC=a("li"),q4e=a("strong"),u5r=o("xlm-roberta"),p5r=o(" \u2014 "),jJ=a("a"),_5r=o("TFXLMRobertaForMaskedLM"),b5r=o(" (XLM-RoBERTa model)"),v5r=l(),OC=a("li"),j4e=a("strong"),F5r=o("xlnet"),T5r=o(" \u2014 "),DJ=a("a"),M5r=o("TFXLNetLMHeadModel"),E5r=o(" (XLNet model)"),C5r=l(),F(VC.$$.fragment),Tze=l(),gc=a("h2"),XC=a("a"),D4e=a("span"),F(tx.$$.fragment),w5r=l(),G4e=a("span"),A5r=o("TFAutoModelForCausalLM"),Mze=l(),tr=a("div"),F(ax.$$.fragment),L5r=l(),hc=a("p"),y5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=a("a"),x5r=o("from_pretrained()"),$5r=o(" class method or the "),OJ=a("a"),k5r=o("from_config()"),S5r=o(` class
method.`),R5r=l(),nx=a("p"),P5r=o("This class cannot be instantiated directly using "),O4e=a("code"),B5r=o("__init__()"),N5r=o(" (throws an error)."),I5r=l(),Bt=a("div"),F(sx.$$.fragment),q5r=l(),V4e=a("p"),j5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D5r=l(),uc=a("p"),G5r=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),O5r=o("not"),V5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),X5r=o("from_pretrained()"),z5r=o(" to load the model weights."),Q5r=l(),F(zC.$$.fragment),W5r=l(),kr=a("div"),F(lx.$$.fragment),H5r=l(),z4e=a("p"),U5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J5r=l(),dn=a("p"),Y5r=o("The model class to instantiate is selected based on the "),Q4e=a("code"),K5r=o("model_type"),Z5r=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(":"),a0r=l(),Me=a("ul"),QC=a("li"),U4e=a("strong"),n0r=o("bert"),s0r=o(" \u2014 "),XJ=a("a"),l0r=o("TFBertLMHeadModel"),i0r=o(" (BERT model)"),d0r=l(),WC=a("li"),J4e=a("strong"),c0r=o("camembert"),m0r=o(" \u2014 "),zJ=a("a"),f0r=o("TFCamembertForCausalLM"),g0r=o(" (CamemBERT model)"),h0r=l(),HC=a("li"),Y4e=a("strong"),u0r=o("ctrl"),p0r=o(" \u2014 "),QJ=a("a"),_0r=o("TFCTRLLMHeadModel"),b0r=o(" (CTRL model)"),v0r=l(),UC=a("li"),K4e=a("strong"),F0r=o("gpt2"),T0r=o(" \u2014 "),WJ=a("a"),M0r=o("TFGPT2LMHeadModel"),E0r=o(" (OpenAI GPT-2 model)"),C0r=l(),JC=a("li"),Z4e=a("strong"),w0r=o("gptj"),A0r=o(" \u2014 "),HJ=a("a"),L0r=o("TFGPTJForCausalLM"),y0r=o(" (GPT-J model)"),x0r=l(),YC=a("li"),eEe=a("strong"),$0r=o("openai-gpt"),k0r=o(" \u2014 "),UJ=a("a"),S0r=o("TFOpenAIGPTLMHeadModel"),R0r=o(" (OpenAI GPT model)"),P0r=l(),KC=a("li"),oEe=a("strong"),B0r=o("opt"),N0r=o(" \u2014 "),JJ=a("a"),I0r=o("TFOPTForCausalLM"),q0r=o(" (OPT model)"),j0r=l(),ZC=a("li"),rEe=a("strong"),D0r=o("rembert"),G0r=o(" \u2014 "),YJ=a("a"),O0r=o("TFRemBertForCausalLM"),V0r=o(" (RemBERT model)"),X0r=l(),e3=a("li"),tEe=a("strong"),z0r=o("roberta"),Q0r=o(" \u2014 "),KJ=a("a"),W0r=o("TFRobertaForCausalLM"),H0r=o(" (RoBERTa model)"),U0r=l(),o3=a("li"),aEe=a("strong"),J0r=o("roformer"),Y0r=o(" \u2014 "),ZJ=a("a"),K0r=o("TFRoFormerForCausalLM"),Z0r=o(" (RoFormer model)"),ewr=l(),r3=a("li"),nEe=a("strong"),owr=o("transfo-xl"),rwr=o(" \u2014 "),eY=a("a"),twr=o("TFTransfoXLLMHeadModel"),awr=o(" (Transformer-XL model)"),nwr=l(),t3=a("li"),sEe=a("strong"),swr=o("xlm"),lwr=o(" \u2014 "),oY=a("a"),iwr=o("TFXLMWithLMHeadModel"),dwr=o(" (XLM model)"),cwr=l(),a3=a("li"),lEe=a("strong"),mwr=o("xlnet"),fwr=o(" \u2014 "),rY=a("a"),gwr=o("TFXLNetLMHeadModel"),hwr=o(" (XLNet model)"),uwr=l(),F(n3.$$.fragment),Eze=l(),pc=a("h2"),s3=a("a"),iEe=a("span"),F(ix.$$.fragment),pwr=l(),dEe=a("span"),_wr=o("TFAutoModelForImageClassification"),Cze=l(),ar=a("div"),F(dx.$$.fragment),bwr=l(),_c=a("p"),vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=a("a"),Fwr=o("from_pretrained()"),Twr=o(" class method or the "),aY=a("a"),Mwr=o("from_config()"),Ewr=o(` class
method.`),Cwr=l(),cx=a("p"),wwr=o("This class cannot be instantiated directly using "),cEe=a("code"),Awr=o("__init__()"),Lwr=o(" (throws an error)."),ywr=l(),Nt=a("div"),F(mx.$$.fragment),xwr=l(),mEe=a("p"),$wr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kwr=l(),bc=a("p"),Swr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),Rwr=o("not"),Pwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),Bwr=o("from_pretrained()"),Nwr=o(" to load the model weights."),Iwr=l(),F(l3.$$.fragment),qwr=l(),Sr=a("div"),F(fx.$$.fragment),jwr=l(),gEe=a("p"),Dwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gwr=l(),cn=a("p"),Owr=o("The model class to instantiate is selected based on the "),hEe=a("code"),Vwr=o("model_type"),Xwr=o(` property of the config object (either
passed as an argument or loaded from `),uEe=a("code"),zwr=o("pretrained_model_name_or_path"),Qwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),Wwr=o("pretrained_model_name_or_path"),Hwr=o(":"),Uwr=l(),Qe=a("ul"),i3=a("li"),_Ee=a("strong"),Jwr=o("convnext"),Ywr=o(" \u2014 "),sY=a("a"),Kwr=o("TFConvNextForImageClassification"),Zwr=o(" (ConvNeXT model)"),eAr=l(),d3=a("li"),bEe=a("strong"),oAr=o("data2vec-vision"),rAr=o(" \u2014 "),lY=a("a"),tAr=o("TFData2VecVisionForImageClassification"),aAr=o(" (Data2VecVision model)"),nAr=l(),Ks=a("li"),vEe=a("strong"),sAr=o("deit"),lAr=o(" \u2014 "),iY=a("a"),iAr=o("TFDeiTForImageClassification"),dAr=o(" or "),dY=a("a"),cAr=o("TFDeiTForImageClassificationWithTeacher"),mAr=o(" (DeiT model)"),fAr=l(),c3=a("li"),FEe=a("strong"),gAr=o("regnet"),hAr=o(" \u2014 "),cY=a("a"),uAr=o("TFRegNetForImageClassification"),pAr=o(" (RegNet model)"),_Ar=l(),m3=a("li"),TEe=a("strong"),bAr=o("resnet"),vAr=o(" \u2014 "),mY=a("a"),FAr=o("TFResNetForImageClassification"),TAr=o(" (ResNet model)"),MAr=l(),f3=a("li"),MEe=a("strong"),EAr=o("swin"),CAr=o(" \u2014 "),fY=a("a"),wAr=o("TFSwinForImageClassification"),AAr=o(" (Swin Transformer model)"),LAr=l(),g3=a("li"),EEe=a("strong"),yAr=o("vit"),xAr=o(" \u2014 "),gY=a("a"),$Ar=o("TFViTForImageClassification"),kAr=o(" (ViT model)"),SAr=l(),F(h3.$$.fragment),wze=l(),vc=a("h2"),u3=a("a"),CEe=a("span"),F(gx.$$.fragment),RAr=l(),wEe=a("span"),PAr=o("TFAutoModelForMaskedLM"),Aze=l(),nr=a("div"),F(hx.$$.fragment),BAr=l(),Fc=a("p"),NAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hY=a("a"),IAr=o("from_pretrained()"),qAr=o(" class method or the "),uY=a("a"),jAr=o("from_config()"),DAr=o(` class
method.`),GAr=l(),ux=a("p"),OAr=o("This class cannot be instantiated directly using "),AEe=a("code"),VAr=o("__init__()"),XAr=o(" (throws an error)."),zAr=l(),It=a("div"),F(px.$$.fragment),QAr=l(),LEe=a("p"),WAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HAr=l(),Tc=a("p"),UAr=o(`Note:
Loading a model from its configuration file does `),yEe=a("strong"),JAr=o("not"),YAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),KAr=o("from_pretrained()"),ZAr=o(" to load the model weights."),e6r=l(),F(p3.$$.fragment),o6r=l(),Rr=a("div"),F(_x.$$.fragment),r6r=l(),xEe=a("p"),t6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a6r=l(),mn=a("p"),n6r=o("The model class to instantiate is selected based on the "),$Ee=a("code"),s6r=o("model_type"),l6r=o(` property of the config object (either
passed as an argument or loaded from `),kEe=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=a("code"),c6r=o("pretrained_model_name_or_path"),m6r=o(":"),f6r=l(),ie=a("ul"),_3=a("li"),REe=a("strong"),g6r=o("albert"),h6r=o(" \u2014 "),_Y=a("a"),u6r=o("TFAlbertForMaskedLM"),p6r=o(" (ALBERT model)"),_6r=l(),b3=a("li"),PEe=a("strong"),b6r=o("bert"),v6r=o(" \u2014 "),bY=a("a"),F6r=o("TFBertForMaskedLM"),T6r=o(" (BERT model)"),M6r=l(),v3=a("li"),BEe=a("strong"),E6r=o("camembert"),C6r=o(" \u2014 "),vY=a("a"),w6r=o("TFCamembertForMaskedLM"),A6r=o(" (CamemBERT model)"),L6r=l(),F3=a("li"),NEe=a("strong"),y6r=o("convbert"),x6r=o(" \u2014 "),FY=a("a"),$6r=o("TFConvBertForMaskedLM"),k6r=o(" (ConvBERT model)"),S6r=l(),T3=a("li"),IEe=a("strong"),R6r=o("deberta"),P6r=o(" \u2014 "),TY=a("a"),B6r=o("TFDebertaForMaskedLM"),N6r=o(" (DeBERTa model)"),I6r=l(),M3=a("li"),qEe=a("strong"),q6r=o("deberta-v2"),j6r=o(" \u2014 "),MY=a("a"),D6r=o("TFDebertaV2ForMaskedLM"),G6r=o(" (DeBERTa-v2 model)"),O6r=l(),E3=a("li"),jEe=a("strong"),V6r=o("distilbert"),X6r=o(" \u2014 "),EY=a("a"),z6r=o("TFDistilBertForMaskedLM"),Q6r=o(" (DistilBERT model)"),W6r=l(),C3=a("li"),DEe=a("strong"),H6r=o("electra"),U6r=o(" \u2014 "),CY=a("a"),J6r=o("TFElectraForMaskedLM"),Y6r=o(" (ELECTRA model)"),K6r=l(),w3=a("li"),GEe=a("strong"),Z6r=o("flaubert"),e7r=o(" \u2014 "),wY=a("a"),o7r=o("TFFlaubertWithLMHeadModel"),r7r=o(" (FlauBERT model)"),t7r=l(),A3=a("li"),OEe=a("strong"),a7r=o("funnel"),n7r=o(" \u2014 "),AY=a("a"),s7r=o("TFFunnelForMaskedLM"),l7r=o(" (Funnel Transformer model)"),i7r=l(),L3=a("li"),VEe=a("strong"),d7r=o("layoutlm"),c7r=o(" \u2014 "),LY=a("a"),m7r=o("TFLayoutLMForMaskedLM"),f7r=o(" (LayoutLM model)"),g7r=l(),y3=a("li"),XEe=a("strong"),h7r=o("longformer"),u7r=o(" \u2014 "),yY=a("a"),p7r=o("TFLongformerForMaskedLM"),_7r=o(" (Longformer model)"),b7r=l(),x3=a("li"),zEe=a("strong"),v7r=o("mobilebert"),F7r=o(" \u2014 "),xY=a("a"),T7r=o("TFMobileBertForMaskedLM"),M7r=o(" (MobileBERT model)"),E7r=l(),$3=a("li"),QEe=a("strong"),C7r=o("mpnet"),w7r=o(" \u2014 "),$Y=a("a"),A7r=o("TFMPNetForMaskedLM"),L7r=o(" (MPNet model)"),y7r=l(),k3=a("li"),WEe=a("strong"),x7r=o("rembert"),$7r=o(" \u2014 "),kY=a("a"),k7r=o("TFRemBertForMaskedLM"),S7r=o(" (RemBERT model)"),R7r=l(),S3=a("li"),HEe=a("strong"),P7r=o("roberta"),B7r=o(" \u2014 "),SY=a("a"),N7r=o("TFRobertaForMaskedLM"),I7r=o(" (RoBERTa model)"),q7r=l(),R3=a("li"),UEe=a("strong"),j7r=o("roformer"),D7r=o(" \u2014 "),RY=a("a"),G7r=o("TFRoFormerForMaskedLM"),O7r=o(" (RoFormer model)"),V7r=l(),P3=a("li"),JEe=a("strong"),X7r=o("tapas"),z7r=o(" \u2014 "),PY=a("a"),Q7r=o("TFTapasForMaskedLM"),W7r=o(" (TAPAS model)"),H7r=l(),B3=a("li"),YEe=a("strong"),U7r=o("xlm"),J7r=o(" \u2014 "),BY=a("a"),Y7r=o("TFXLMWithLMHeadModel"),K7r=o(" (XLM model)"),Z7r=l(),N3=a("li"),KEe=a("strong"),eLr=o("xlm-roberta"),oLr=o(" \u2014 "),NY=a("a"),rLr=o("TFXLMRobertaForMaskedLM"),tLr=o(" (XLM-RoBERTa model)"),aLr=l(),F(I3.$$.fragment),Lze=l(),Mc=a("h2"),q3=a("a"),ZEe=a("span"),F(bx.$$.fragment),nLr=l(),eCe=a("span"),sLr=o("TFAutoModelForSeq2SeqLM"),yze=l(),sr=a("div"),F(vx.$$.fragment),lLr=l(),Ec=a("p"),iLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IY=a("a"),dLr=o("from_pretrained()"),cLr=o(" class method or the "),qY=a("a"),mLr=o("from_config()"),fLr=o(` class
method.`),gLr=l(),Fx=a("p"),hLr=o("This class cannot be instantiated directly using "),oCe=a("code"),uLr=o("__init__()"),pLr=o(" (throws an error)."),_Lr=l(),qt=a("div"),F(Tx.$$.fragment),bLr=l(),rCe=a("p"),vLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FLr=l(),Cc=a("p"),TLr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),MLr=o("not"),ELr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),CLr=o("from_pretrained()"),wLr=o(" to load the model weights."),ALr=l(),F(j3.$$.fragment),LLr=l(),Pr=a("div"),F(Mx.$$.fragment),yLr=l(),aCe=a("p"),xLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Lr=l(),fn=a("p"),kLr=o("The model class to instantiate is selected based on the "),nCe=a("code"),SLr=o("model_type"),RLr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),PLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),NLr=o("pretrained_model_name_or_path"),ILr=o(":"),qLr=l(),ye=a("ul"),D3=a("li"),iCe=a("strong"),jLr=o("bart"),DLr=o(" \u2014 "),DY=a("a"),GLr=o("TFBartForConditionalGeneration"),OLr=o(" (BART model)"),VLr=l(),G3=a("li"),dCe=a("strong"),XLr=o("blenderbot"),zLr=o(" \u2014 "),GY=a("a"),QLr=o("TFBlenderbotForConditionalGeneration"),WLr=o(" (Blenderbot model)"),HLr=l(),O3=a("li"),cCe=a("strong"),ULr=o("blenderbot-small"),JLr=o(" \u2014 "),OY=a("a"),YLr=o("TFBlenderbotSmallForConditionalGeneration"),KLr=o(" (BlenderbotSmall model)"),ZLr=l(),V3=a("li"),mCe=a("strong"),eyr=o("encoder-decoder"),oyr=o(" \u2014 "),VY=a("a"),ryr=o("TFEncoderDecoderModel"),tyr=o(" (Encoder decoder model)"),ayr=l(),X3=a("li"),fCe=a("strong"),nyr=o("led"),syr=o(" \u2014 "),XY=a("a"),lyr=o("TFLEDForConditionalGeneration"),iyr=o(" (LED model)"),dyr=l(),z3=a("li"),gCe=a("strong"),cyr=o("marian"),myr=o(" \u2014 "),zY=a("a"),fyr=o("TFMarianMTModel"),gyr=o(" (Marian model)"),hyr=l(),Q3=a("li"),hCe=a("strong"),uyr=o("mbart"),pyr=o(" \u2014 "),QY=a("a"),_yr=o("TFMBartForConditionalGeneration"),byr=o(" (mBART model)"),vyr=l(),W3=a("li"),uCe=a("strong"),Fyr=o("mt5"),Tyr=o(" \u2014 "),WY=a("a"),Myr=o("TFMT5ForConditionalGeneration"),Eyr=o(" (MT5 model)"),Cyr=l(),H3=a("li"),pCe=a("strong"),wyr=o("pegasus"),Ayr=o(" \u2014 "),HY=a("a"),Lyr=o("TFPegasusForConditionalGeneration"),yyr=o(" (Pegasus model)"),xyr=l(),U3=a("li"),_Ce=a("strong"),$yr=o("t5"),kyr=o(" \u2014 "),UY=a("a"),Syr=o("TFT5ForConditionalGeneration"),Ryr=o(" (T5 model)"),Pyr=l(),F(J3.$$.fragment),xze=l(),wc=a("h2"),Y3=a("a"),bCe=a("span"),F(Ex.$$.fragment),Byr=l(),vCe=a("span"),Nyr=o("TFAutoModelForSequenceClassification"),$ze=l(),lr=a("div"),F(Cx.$$.fragment),Iyr=l(),Ac=a("p"),qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JY=a("a"),jyr=o("from_pretrained()"),Dyr=o(" class method or the "),YY=a("a"),Gyr=o("from_config()"),Oyr=o(` class
method.`),Vyr=l(),wx=a("p"),Xyr=o("This class cannot be instantiated directly using "),FCe=a("code"),zyr=o("__init__()"),Qyr=o(" (throws an error)."),Wyr=l(),jt=a("div"),F(Ax.$$.fragment),Hyr=l(),TCe=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jyr=l(),Lc=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),MCe=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),e8r=o("from_pretrained()"),o8r=o(" to load the model weights."),r8r=l(),F(K3.$$.fragment),t8r=l(),Br=a("div"),F(Lx.$$.fragment),a8r=l(),ECe=a("p"),n8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s8r=l(),gn=a("p"),l8r=o("The model class to instantiate is selected based on the "),CCe=a("code"),i8r=o("model_type"),d8r=o(` property of the config object (either
passed as an argument or loaded from `),wCe=a("code"),c8r=o("pretrained_model_name_or_path"),m8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=a("code"),f8r=o("pretrained_model_name_or_path"),g8r=o(":"),h8r=l(),te=a("ul"),Z3=a("li"),LCe=a("strong"),u8r=o("albert"),p8r=o(" \u2014 "),ZY=a("a"),_8r=o("TFAlbertForSequenceClassification"),b8r=o(" (ALBERT model)"),v8r=l(),e5=a("li"),yCe=a("strong"),F8r=o("bert"),T8r=o(" \u2014 "),eK=a("a"),M8r=o("TFBertForSequenceClassification"),E8r=o(" (BERT model)"),C8r=l(),o5=a("li"),xCe=a("strong"),w8r=o("camembert"),A8r=o(" \u2014 "),oK=a("a"),L8r=o("TFCamembertForSequenceClassification"),y8r=o(" (CamemBERT model)"),x8r=l(),r5=a("li"),$Ce=a("strong"),$8r=o("convbert"),k8r=o(" \u2014 "),rK=a("a"),S8r=o("TFConvBertForSequenceClassification"),R8r=o(" (ConvBERT model)"),P8r=l(),t5=a("li"),kCe=a("strong"),B8r=o("ctrl"),N8r=o(" \u2014 "),tK=a("a"),I8r=o("TFCTRLForSequenceClassification"),q8r=o(" (CTRL model)"),j8r=l(),a5=a("li"),SCe=a("strong"),D8r=o("deberta"),G8r=o(" \u2014 "),aK=a("a"),O8r=o("TFDebertaForSequenceClassification"),V8r=o(" (DeBERTa model)"),X8r=l(),n5=a("li"),RCe=a("strong"),z8r=o("deberta-v2"),Q8r=o(" \u2014 "),nK=a("a"),W8r=o("TFDebertaV2ForSequenceClassification"),H8r=o(" (DeBERTa-v2 model)"),U8r=l(),s5=a("li"),PCe=a("strong"),J8r=o("distilbert"),Y8r=o(" \u2014 "),sK=a("a"),K8r=o("TFDistilBertForSequenceClassification"),Z8r=o(" (DistilBERT model)"),e9r=l(),l5=a("li"),BCe=a("strong"),o9r=o("electra"),r9r=o(" \u2014 "),lK=a("a"),t9r=o("TFElectraForSequenceClassification"),a9r=o(" (ELECTRA model)"),n9r=l(),i5=a("li"),NCe=a("strong"),s9r=o("flaubert"),l9r=o(" \u2014 "),iK=a("a"),i9r=o("TFFlaubertForSequenceClassification"),d9r=o(" (FlauBERT model)"),c9r=l(),d5=a("li"),ICe=a("strong"),m9r=o("funnel"),f9r=o(" \u2014 "),dK=a("a"),g9r=o("TFFunnelForSequenceClassification"),h9r=o(" (Funnel Transformer model)"),u9r=l(),c5=a("li"),qCe=a("strong"),p9r=o("gpt2"),_9r=o(" \u2014 "),cK=a("a"),b9r=o("TFGPT2ForSequenceClassification"),v9r=o(" (OpenAI GPT-2 model)"),F9r=l(),m5=a("li"),jCe=a("strong"),T9r=o("gptj"),M9r=o(" \u2014 "),mK=a("a"),E9r=o("TFGPTJForSequenceClassification"),C9r=o(" (GPT-J model)"),w9r=l(),f5=a("li"),DCe=a("strong"),A9r=o("layoutlm"),L9r=o(" \u2014 "),fK=a("a"),y9r=o("TFLayoutLMForSequenceClassification"),x9r=o(" (LayoutLM model)"),$9r=l(),g5=a("li"),GCe=a("strong"),k9r=o("longformer"),S9r=o(" \u2014 "),gK=a("a"),R9r=o("TFLongformerForSequenceClassification"),P9r=o(" (Longformer model)"),B9r=l(),h5=a("li"),OCe=a("strong"),N9r=o("mobilebert"),I9r=o(" \u2014 "),hK=a("a"),q9r=o("TFMobileBertForSequenceClassification"),j9r=o(" (MobileBERT model)"),D9r=l(),u5=a("li"),VCe=a("strong"),G9r=o("mpnet"),O9r=o(" \u2014 "),uK=a("a"),V9r=o("TFMPNetForSequenceClassification"),X9r=o(" (MPNet model)"),z9r=l(),p5=a("li"),XCe=a("strong"),Q9r=o("openai-gpt"),W9r=o(" \u2014 "),pK=a("a"),H9r=o("TFOpenAIGPTForSequenceClassification"),U9r=o(" (OpenAI GPT model)"),J9r=l(),_5=a("li"),zCe=a("strong"),Y9r=o("rembert"),K9r=o(" \u2014 "),_K=a("a"),Z9r=o("TFRemBertForSequenceClassification"),exr=o(" (RemBERT model)"),oxr=l(),b5=a("li"),QCe=a("strong"),rxr=o("roberta"),txr=o(" \u2014 "),bK=a("a"),axr=o("TFRobertaForSequenceClassification"),nxr=o(" (RoBERTa model)"),sxr=l(),v5=a("li"),WCe=a("strong"),lxr=o("roformer"),ixr=o(" \u2014 "),vK=a("a"),dxr=o("TFRoFormerForSequenceClassification"),cxr=o(" (RoFormer model)"),mxr=l(),F5=a("li"),HCe=a("strong"),fxr=o("tapas"),gxr=o(" \u2014 "),FK=a("a"),hxr=o("TFTapasForSequenceClassification"),uxr=o(" (TAPAS model)"),pxr=l(),T5=a("li"),UCe=a("strong"),_xr=o("transfo-xl"),bxr=o(" \u2014 "),TK=a("a"),vxr=o("TFTransfoXLForSequenceClassification"),Fxr=o(" (Transformer-XL model)"),Txr=l(),M5=a("li"),JCe=a("strong"),Mxr=o("xlm"),Exr=o(" \u2014 "),MK=a("a"),Cxr=o("TFXLMForSequenceClassification"),wxr=o(" (XLM model)"),Axr=l(),E5=a("li"),YCe=a("strong"),Lxr=o("xlm-roberta"),yxr=o(" \u2014 "),EK=a("a"),xxr=o("TFXLMRobertaForSequenceClassification"),$xr=o(" (XLM-RoBERTa model)"),kxr=l(),C5=a("li"),KCe=a("strong"),Sxr=o("xlnet"),Rxr=o(" \u2014 "),CK=a("a"),Pxr=o("TFXLNetForSequenceClassification"),Bxr=o(" (XLNet model)"),Nxr=l(),F(w5.$$.fragment),kze=l(),yc=a("h2"),A5=a("a"),ZCe=a("span"),F(yx.$$.fragment),Ixr=l(),e3e=a("span"),qxr=o("TFAutoModelForMultipleChoice"),Sze=l(),ir=a("div"),F(xx.$$.fragment),jxr=l(),xc=a("p"),Dxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wK=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" class method or the "),AK=a("a"),Vxr=o("from_config()"),Xxr=o(` class
method.`),zxr=l(),$x=a("p"),Qxr=o("This class cannot be instantiated directly using "),o3e=a("code"),Wxr=o("__init__()"),Hxr=o(" (throws an error)."),Uxr=l(),Dt=a("div"),F(kx.$$.fragment),Jxr=l(),r3e=a("p"),Yxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kxr=l(),$c=a("p"),Zxr=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),e$r=o("not"),o$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),r$r=o("from_pretrained()"),t$r=o(" to load the model weights."),a$r=l(),F(L5.$$.fragment),n$r=l(),Nr=a("div"),F(Sx.$$.fragment),s$r=l(),a3e=a("p"),l$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),i$r=l(),hn=a("p"),d$r=o("The model class to instantiate is selected based on the "),n3e=a("code"),c$r=o("model_type"),m$r=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),f$r=o("pretrained_model_name_or_path"),g$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),h$r=o("pretrained_model_name_or_path"),u$r=o(":"),p$r=l(),_e=a("ul"),y5=a("li"),i3e=a("strong"),_$r=o("albert"),b$r=o(" \u2014 "),yK=a("a"),v$r=o("TFAlbertForMultipleChoice"),F$r=o(" (ALBERT model)"),T$r=l(),x5=a("li"),d3e=a("strong"),M$r=o("bert"),E$r=o(" \u2014 "),xK=a("a"),C$r=o("TFBertForMultipleChoice"),w$r=o(" (BERT model)"),A$r=l(),$5=a("li"),c3e=a("strong"),L$r=o("camembert"),y$r=o(" \u2014 "),$K=a("a"),x$r=o("TFCamembertForMultipleChoice"),$$r=o(" (CamemBERT model)"),k$r=l(),k5=a("li"),m3e=a("strong"),S$r=o("convbert"),R$r=o(" \u2014 "),kK=a("a"),P$r=o("TFConvBertForMultipleChoice"),B$r=o(" (ConvBERT model)"),N$r=l(),S5=a("li"),f3e=a("strong"),I$r=o("distilbert"),q$r=o(" \u2014 "),SK=a("a"),j$r=o("TFDistilBertForMultipleChoice"),D$r=o(" (DistilBERT model)"),G$r=l(),R5=a("li"),g3e=a("strong"),O$r=o("electra"),V$r=o(" \u2014 "),RK=a("a"),X$r=o("TFElectraForMultipleChoice"),z$r=o(" (ELECTRA model)"),Q$r=l(),P5=a("li"),h3e=a("strong"),W$r=o("flaubert"),H$r=o(" \u2014 "),PK=a("a"),U$r=o("TFFlaubertForMultipleChoice"),J$r=o(" (FlauBERT model)"),Y$r=l(),B5=a("li"),u3e=a("strong"),K$r=o("funnel"),Z$r=o(" \u2014 "),BK=a("a"),ekr=o("TFFunnelForMultipleChoice"),okr=o(" (Funnel Transformer model)"),rkr=l(),N5=a("li"),p3e=a("strong"),tkr=o("longformer"),akr=o(" \u2014 "),NK=a("a"),nkr=o("TFLongformerForMultipleChoice"),skr=o(" (Longformer model)"),lkr=l(),I5=a("li"),_3e=a("strong"),ikr=o("mobilebert"),dkr=o(" \u2014 "),IK=a("a"),ckr=o("TFMobileBertForMultipleChoice"),mkr=o(" (MobileBERT model)"),fkr=l(),q5=a("li"),b3e=a("strong"),gkr=o("mpnet"),hkr=o(" \u2014 "),qK=a("a"),ukr=o("TFMPNetForMultipleChoice"),pkr=o(" (MPNet model)"),_kr=l(),j5=a("li"),v3e=a("strong"),bkr=o("rembert"),vkr=o(" \u2014 "),jK=a("a"),Fkr=o("TFRemBertForMultipleChoice"),Tkr=o(" (RemBERT model)"),Mkr=l(),D5=a("li"),F3e=a("strong"),Ekr=o("roberta"),Ckr=o(" \u2014 "),DK=a("a"),wkr=o("TFRobertaForMultipleChoice"),Akr=o(" (RoBERTa model)"),Lkr=l(),G5=a("li"),T3e=a("strong"),ykr=o("roformer"),xkr=o(" \u2014 "),GK=a("a"),$kr=o("TFRoFormerForMultipleChoice"),kkr=o(" (RoFormer model)"),Skr=l(),O5=a("li"),M3e=a("strong"),Rkr=o("xlm"),Pkr=o(" \u2014 "),OK=a("a"),Bkr=o("TFXLMForMultipleChoice"),Nkr=o(" (XLM model)"),Ikr=l(),V5=a("li"),E3e=a("strong"),qkr=o("xlm-roberta"),jkr=o(" \u2014 "),VK=a("a"),Dkr=o("TFXLMRobertaForMultipleChoice"),Gkr=o(" (XLM-RoBERTa model)"),Okr=l(),X5=a("li"),C3e=a("strong"),Vkr=o("xlnet"),Xkr=o(" \u2014 "),XK=a("a"),zkr=o("TFXLNetForMultipleChoice"),Qkr=o(" (XLNet model)"),Wkr=l(),F(z5.$$.fragment),Rze=l(),kc=a("h2"),Q5=a("a"),w3e=a("span"),F(Rx.$$.fragment),Hkr=l(),A3e=a("span"),Ukr=o("TFAutoModelForNextSentencePrediction"),Pze=l(),dr=a("div"),F(Px.$$.fragment),Jkr=l(),Sc=a("p"),Ykr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" class method or the "),QK=a("a"),eSr=o("from_config()"),oSr=o(` class
method.`),rSr=l(),Bx=a("p"),tSr=o("This class cannot be instantiated directly using "),L3e=a("code"),aSr=o("__init__()"),nSr=o(" (throws an error)."),sSr=l(),Gt=a("div"),F(Nx.$$.fragment),lSr=l(),y3e=a("p"),iSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dSr=l(),Rc=a("p"),cSr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),mSr=o("not"),fSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),gSr=o("from_pretrained()"),hSr=o(" to load the model weights."),uSr=l(),F(W5.$$.fragment),pSr=l(),Ir=a("div"),F(Ix.$$.fragment),_Sr=l(),$3e=a("p"),bSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vSr=l(),un=a("p"),FSr=o("The model class to instantiate is selected based on the "),k3e=a("code"),TSr=o("model_type"),MSr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(":"),LSr=l(),qx=a("ul"),H5=a("li"),P3e=a("strong"),ySr=o("bert"),xSr=o(" \u2014 "),HK=a("a"),$Sr=o("TFBertForNextSentencePrediction"),kSr=o(" (BERT model)"),SSr=l(),U5=a("li"),B3e=a("strong"),RSr=o("mobilebert"),PSr=o(" \u2014 "),UK=a("a"),BSr=o("TFMobileBertForNextSentencePrediction"),NSr=o(" (MobileBERT model)"),ISr=l(),F(J5.$$.fragment),Bze=l(),Pc=a("h2"),Y5=a("a"),N3e=a("span"),F(jx.$$.fragment),qSr=l(),I3e=a("span"),jSr=o("TFAutoModelForTableQuestionAnswering"),Nze=l(),cr=a("div"),F(Dx.$$.fragment),DSr=l(),Bc=a("p"),GSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JK=a("a"),OSr=o("from_pretrained()"),VSr=o(" class method or the "),YK=a("a"),XSr=o("from_config()"),zSr=o(` class
method.`),QSr=l(),Gx=a("p"),WSr=o("This class cannot be instantiated directly using "),q3e=a("code"),HSr=o("__init__()"),USr=o(" (throws an error)."),JSr=l(),Ot=a("div"),F(Ox.$$.fragment),YSr=l(),j3e=a("p"),KSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZSr=l(),Nc=a("p"),eRr=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),oRr=o("not"),rRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),tRr=o("from_pretrained()"),aRr=o(" to load the model weights."),nRr=l(),F(K5.$$.fragment),sRr=l(),qr=a("div"),F(Vx.$$.fragment),lRr=l(),G3e=a("p"),iRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dRr=l(),pn=a("p"),cRr=o("The model class to instantiate is selected based on the "),O3e=a("code"),mRr=o("model_type"),fRr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),uRr=o("pretrained_model_name_or_path"),pRr=o(":"),_Rr=l(),z3e=a("ul"),Z5=a("li"),Q3e=a("strong"),bRr=o("tapas"),vRr=o(" \u2014 "),ZK=a("a"),FRr=o("TFTapasForQuestionAnswering"),TRr=o(" (TAPAS model)"),MRr=l(),F(e0.$$.fragment),Ize=l(),Ic=a("h2"),o0=a("a"),W3e=a("span"),F(Xx.$$.fragment),ERr=l(),H3e=a("span"),CRr=o("TFAutoModelForTokenClassification"),qze=l(),mr=a("div"),F(zx.$$.fragment),wRr=l(),qc=a("p"),ARr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eZ=a("a"),LRr=o("from_pretrained()"),yRr=o(" class method or the "),oZ=a("a"),xRr=o("from_config()"),$Rr=o(` class
method.`),kRr=l(),Qx=a("p"),SRr=o("This class cannot be instantiated directly using "),U3e=a("code"),RRr=o("__init__()"),PRr=o(" (throws an error)."),BRr=l(),Vt=a("div"),F(Wx.$$.fragment),NRr=l(),J3e=a("p"),IRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qRr=l(),jc=a("p"),jRr=o(`Note:
Loading a model from its configuration file does `),Y3e=a("strong"),DRr=o("not"),GRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),ORr=o("from_pretrained()"),VRr=o(" to load the model weights."),XRr=l(),F(r0.$$.fragment),zRr=l(),jr=a("div"),F(Hx.$$.fragment),QRr=l(),K3e=a("p"),WRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HRr=l(),_n=a("p"),URr=o("The model class to instantiate is selected based on the "),Z3e=a("code"),JRr=o("model_type"),YRr=o(` property of the config object (either
passed as an argument or loaded from `),e5e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=a("code"),ePr=o("pretrained_model_name_or_path"),oPr=o(":"),rPr=l(),de=a("ul"),t0=a("li"),r5e=a("strong"),tPr=o("albert"),aPr=o(" \u2014 "),tZ=a("a"),nPr=o("TFAlbertForTokenClassification"),sPr=o(" (ALBERT model)"),lPr=l(),a0=a("li"),t5e=a("strong"),iPr=o("bert"),dPr=o(" \u2014 "),aZ=a("a"),cPr=o("TFBertForTokenClassification"),mPr=o(" (BERT model)"),fPr=l(),n0=a("li"),a5e=a("strong"),gPr=o("camembert"),hPr=o(" \u2014 "),nZ=a("a"),uPr=o("TFCamembertForTokenClassification"),pPr=o(" (CamemBERT model)"),_Pr=l(),s0=a("li"),n5e=a("strong"),bPr=o("convbert"),vPr=o(" \u2014 "),sZ=a("a"),FPr=o("TFConvBertForTokenClassification"),TPr=o(" (ConvBERT model)"),MPr=l(),l0=a("li"),s5e=a("strong"),EPr=o("deberta"),CPr=o(" \u2014 "),lZ=a("a"),wPr=o("TFDebertaForTokenClassification"),APr=o(" (DeBERTa model)"),LPr=l(),i0=a("li"),l5e=a("strong"),yPr=o("deberta-v2"),xPr=o(" \u2014 "),iZ=a("a"),$Pr=o("TFDebertaV2ForTokenClassification"),kPr=o(" (DeBERTa-v2 model)"),SPr=l(),d0=a("li"),i5e=a("strong"),RPr=o("distilbert"),PPr=o(" \u2014 "),dZ=a("a"),BPr=o("TFDistilBertForTokenClassification"),NPr=o(" (DistilBERT model)"),IPr=l(),c0=a("li"),d5e=a("strong"),qPr=o("electra"),jPr=o(" \u2014 "),cZ=a("a"),DPr=o("TFElectraForTokenClassification"),GPr=o(" (ELECTRA model)"),OPr=l(),m0=a("li"),c5e=a("strong"),VPr=o("flaubert"),XPr=o(" \u2014 "),mZ=a("a"),zPr=o("TFFlaubertForTokenClassification"),QPr=o(" (FlauBERT model)"),WPr=l(),f0=a("li"),m5e=a("strong"),HPr=o("funnel"),UPr=o(" \u2014 "),fZ=a("a"),JPr=o("TFFunnelForTokenClassification"),YPr=o(" (Funnel Transformer model)"),KPr=l(),g0=a("li"),f5e=a("strong"),ZPr=o("layoutlm"),eBr=o(" \u2014 "),gZ=a("a"),oBr=o("TFLayoutLMForTokenClassification"),rBr=o(" (LayoutLM model)"),tBr=l(),h0=a("li"),g5e=a("strong"),aBr=o("longformer"),nBr=o(" \u2014 "),hZ=a("a"),sBr=o("TFLongformerForTokenClassification"),lBr=o(" (Longformer model)"),iBr=l(),u0=a("li"),h5e=a("strong"),dBr=o("mobilebert"),cBr=o(" \u2014 "),uZ=a("a"),mBr=o("TFMobileBertForTokenClassification"),fBr=o(" (MobileBERT model)"),gBr=l(),p0=a("li"),u5e=a("strong"),hBr=o("mpnet"),uBr=o(" \u2014 "),pZ=a("a"),pBr=o("TFMPNetForTokenClassification"),_Br=o(" (MPNet model)"),bBr=l(),_0=a("li"),p5e=a("strong"),vBr=o("rembert"),FBr=o(" \u2014 "),_Z=a("a"),TBr=o("TFRemBertForTokenClassification"),MBr=o(" (RemBERT model)"),EBr=l(),b0=a("li"),_5e=a("strong"),CBr=o("roberta"),wBr=o(" \u2014 "),bZ=a("a"),ABr=o("TFRobertaForTokenClassification"),LBr=o(" (RoBERTa model)"),yBr=l(),v0=a("li"),b5e=a("strong"),xBr=o("roformer"),$Br=o(" \u2014 "),vZ=a("a"),kBr=o("TFRoFormerForTokenClassification"),SBr=o(" (RoFormer model)"),RBr=l(),F0=a("li"),v5e=a("strong"),PBr=o("xlm"),BBr=o(" \u2014 "),FZ=a("a"),NBr=o("TFXLMForTokenClassification"),IBr=o(" (XLM model)"),qBr=l(),T0=a("li"),F5e=a("strong"),jBr=o("xlm-roberta"),DBr=o(" \u2014 "),TZ=a("a"),GBr=o("TFXLMRobertaForTokenClassification"),OBr=o(" (XLM-RoBERTa model)"),VBr=l(),M0=a("li"),T5e=a("strong"),XBr=o("xlnet"),zBr=o(" \u2014 "),MZ=a("a"),QBr=o("TFXLNetForTokenClassification"),WBr=o(" (XLNet model)"),HBr=l(),F(E0.$$.fragment),jze=l(),Dc=a("h2"),C0=a("a"),M5e=a("span"),F(Ux.$$.fragment),UBr=l(),E5e=a("span"),JBr=o("TFAutoModelForQuestionAnswering"),Dze=l(),fr=a("div"),F(Jx.$$.fragment),YBr=l(),Gc=a("p"),KBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EZ=a("a"),ZBr=o("from_pretrained()"),eNr=o(" class method or the "),CZ=a("a"),oNr=o("from_config()"),rNr=o(` class
method.`),tNr=l(),Yx=a("p"),aNr=o("This class cannot be instantiated directly using "),C5e=a("code"),nNr=o("__init__()"),sNr=o(" (throws an error)."),lNr=l(),Xt=a("div"),F(Kx.$$.fragment),iNr=l(),w5e=a("p"),dNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cNr=l(),Oc=a("p"),mNr=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),fNr=o("not"),gNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),hNr=o("from_pretrained()"),uNr=o(" to load the model weights."),pNr=l(),F(w0.$$.fragment),_Nr=l(),Dr=a("div"),F(Zx.$$.fragment),bNr=l(),L5e=a("p"),vNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FNr=l(),bn=a("p"),TNr=o("The model class to instantiate is selected based on the "),y5e=a("code"),MNr=o("model_type"),ENr=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),ANr=o("pretrained_model_name_or_path"),LNr=o(":"),yNr=l(),ce=a("ul"),A0=a("li"),k5e=a("strong"),xNr=o("albert"),$Nr=o(" \u2014 "),AZ=a("a"),kNr=o("TFAlbertForQuestionAnswering"),SNr=o(" (ALBERT model)"),RNr=l(),L0=a("li"),S5e=a("strong"),PNr=o("bert"),BNr=o(" \u2014 "),LZ=a("a"),NNr=o("TFBertForQuestionAnswering"),INr=o(" (BERT model)"),qNr=l(),y0=a("li"),R5e=a("strong"),jNr=o("camembert"),DNr=o(" \u2014 "),yZ=a("a"),GNr=o("TFCamembertForQuestionAnswering"),ONr=o(" (CamemBERT model)"),VNr=l(),x0=a("li"),P5e=a("strong"),XNr=o("convbert"),zNr=o(" \u2014 "),xZ=a("a"),QNr=o("TFConvBertForQuestionAnswering"),WNr=o(" (ConvBERT model)"),HNr=l(),$0=a("li"),B5e=a("strong"),UNr=o("deberta"),JNr=o(" \u2014 "),$Z=a("a"),YNr=o("TFDebertaForQuestionAnswering"),KNr=o(" (DeBERTa model)"),ZNr=l(),k0=a("li"),N5e=a("strong"),eIr=o("deberta-v2"),oIr=o(" \u2014 "),kZ=a("a"),rIr=o("TFDebertaV2ForQuestionAnswering"),tIr=o(" (DeBERTa-v2 model)"),aIr=l(),S0=a("li"),I5e=a("strong"),nIr=o("distilbert"),sIr=o(" \u2014 "),SZ=a("a"),lIr=o("TFDistilBertForQuestionAnswering"),iIr=o(" (DistilBERT model)"),dIr=l(),R0=a("li"),q5e=a("strong"),cIr=o("electra"),mIr=o(" \u2014 "),RZ=a("a"),fIr=o("TFElectraForQuestionAnswering"),gIr=o(" (ELECTRA model)"),hIr=l(),P0=a("li"),j5e=a("strong"),uIr=o("flaubert"),pIr=o(" \u2014 "),PZ=a("a"),_Ir=o("TFFlaubertForQuestionAnsweringSimple"),bIr=o(" (FlauBERT model)"),vIr=l(),B0=a("li"),D5e=a("strong"),FIr=o("funnel"),TIr=o(" \u2014 "),BZ=a("a"),MIr=o("TFFunnelForQuestionAnswering"),EIr=o(" (Funnel Transformer model)"),CIr=l(),N0=a("li"),G5e=a("strong"),wIr=o("gptj"),AIr=o(" \u2014 "),NZ=a("a"),LIr=o("TFGPTJForQuestionAnswering"),yIr=o(" (GPT-J model)"),xIr=l(),I0=a("li"),O5e=a("strong"),$Ir=o("longformer"),kIr=o(" \u2014 "),IZ=a("a"),SIr=o("TFLongformerForQuestionAnswering"),RIr=o(" (Longformer model)"),PIr=l(),q0=a("li"),V5e=a("strong"),BIr=o("mobilebert"),NIr=o(" \u2014 "),qZ=a("a"),IIr=o("TFMobileBertForQuestionAnswering"),qIr=o(" (MobileBERT model)"),jIr=l(),j0=a("li"),X5e=a("strong"),DIr=o("mpnet"),GIr=o(" \u2014 "),jZ=a("a"),OIr=o("TFMPNetForQuestionAnswering"),VIr=o(" (MPNet model)"),XIr=l(),D0=a("li"),z5e=a("strong"),zIr=o("rembert"),QIr=o(" \u2014 "),DZ=a("a"),WIr=o("TFRemBertForQuestionAnswering"),HIr=o(" (RemBERT model)"),UIr=l(),G0=a("li"),Q5e=a("strong"),JIr=o("roberta"),YIr=o(" \u2014 "),GZ=a("a"),KIr=o("TFRobertaForQuestionAnswering"),ZIr=o(" (RoBERTa model)"),eqr=l(),O0=a("li"),W5e=a("strong"),oqr=o("roformer"),rqr=o(" \u2014 "),OZ=a("a"),tqr=o("TFRoFormerForQuestionAnswering"),aqr=o(" (RoFormer model)"),nqr=l(),V0=a("li"),H5e=a("strong"),sqr=o("xlm"),lqr=o(" \u2014 "),VZ=a("a"),iqr=o("TFXLMForQuestionAnsweringSimple"),dqr=o(" (XLM model)"),cqr=l(),X0=a("li"),U5e=a("strong"),mqr=o("xlm-roberta"),fqr=o(" \u2014 "),XZ=a("a"),gqr=o("TFXLMRobertaForQuestionAnswering"),hqr=o(" (XLM-RoBERTa model)"),uqr=l(),z0=a("li"),J5e=a("strong"),pqr=o("xlnet"),_qr=o(" \u2014 "),zZ=a("a"),bqr=o("TFXLNetForQuestionAnsweringSimple"),vqr=o(" (XLNet model)"),Fqr=l(),F(Q0.$$.fragment),Gze=l(),Vc=a("h2"),W0=a("a"),Y5e=a("span"),F(e$.$$.fragment),Tqr=l(),K5e=a("span"),Mqr=o("TFAutoModelForVision2Seq"),Oze=l(),gr=a("div"),F(o$.$$.fragment),Eqr=l(),Xc=a("p"),Cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QZ=a("a"),wqr=o("from_pretrained()"),Aqr=o(" class method or the "),WZ=a("a"),Lqr=o("from_config()"),yqr=o(` class
method.`),xqr=l(),r$=a("p"),$qr=o("This class cannot be instantiated directly using "),Z5e=a("code"),kqr=o("__init__()"),Sqr=o(" (throws an error)."),Rqr=l(),zt=a("div"),F(t$.$$.fragment),Pqr=l(),e0e=a("p"),Bqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nqr=l(),zc=a("p"),Iqr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),qqr=o("not"),jqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" to load the model weights."),Oqr=l(),F(H0.$$.fragment),Vqr=l(),Gr=a("div"),F(a$.$$.fragment),Xqr=l(),r0e=a("p"),zqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qqr=l(),vn=a("p"),Wqr=o("The model class to instantiate is selected based on the "),t0e=a("code"),Hqr=o("model_type"),Uqr=o(` property of the config object (either
passed as an argument or loaded from `),a0e=a("code"),Jqr=o("pretrained_model_name_or_path"),Yqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=a("code"),Kqr=o("pretrained_model_name_or_path"),Zqr=o(":"),ejr=l(),s0e=a("ul"),U0=a("li"),l0e=a("strong"),ojr=o("vision-encoder-decoder"),rjr=o(" \u2014 "),UZ=a("a"),tjr=o("TFVisionEncoderDecoderModel"),ajr=o(" (Vision Encoder decoder model)"),njr=l(),F(J0.$$.fragment),Vze=l(),Qc=a("h2"),Y0=a("a"),i0e=a("span"),F(n$.$$.fragment),sjr=l(),d0e=a("span"),ljr=o("TFAutoModelForSpeechSeq2Seq"),Xze=l(),hr=a("div"),F(s$.$$.fragment),ijr=l(),Wc=a("p"),djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JZ=a("a"),cjr=o("from_pretrained()"),mjr=o(" class method or the "),YZ=a("a"),fjr=o("from_config()"),gjr=o(` class
method.`),hjr=l(),l$=a("p"),ujr=o("This class cannot be instantiated directly using "),c0e=a("code"),pjr=o("__init__()"),_jr=o(" (throws an error)."),bjr=l(),Qt=a("div"),F(i$.$$.fragment),vjr=l(),m0e=a("p"),Fjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tjr=l(),Hc=a("p"),Mjr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),Ejr=o("not"),Cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=a("a"),wjr=o("from_pretrained()"),Ajr=o(" to load the model weights."),Ljr=l(),F(K0.$$.fragment),yjr=l(),Or=a("div"),F(d$.$$.fragment),xjr=l(),g0e=a("p"),$jr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kjr=l(),Fn=a("p"),Sjr=o("The model class to instantiate is selected based on the "),h0e=a("code"),Rjr=o("model_type"),Pjr=o(` property of the config object (either
passed as an argument or loaded from `),u0e=a("code"),Bjr=o("pretrained_model_name_or_path"),Njr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(":"),jjr=l(),_0e=a("ul"),Z0=a("li"),b0e=a("strong"),Djr=o("speech_to_text"),Gjr=o(" \u2014 "),ZZ=a("a"),Ojr=o("TFSpeech2TextForConditionalGeneration"),Vjr=o(" (Speech2Text model)"),Xjr=l(),F(ew.$$.fragment),zze=l(),Uc=a("h2"),ow=a("a"),v0e=a("span"),F(c$.$$.fragment),zjr=l(),F0e=a("span"),Qjr=o("FlaxAutoModel"),Qze=l(),ur=a("div"),F(m$.$$.fragment),Wjr=l(),Jc=a("p"),Hjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eee=a("a"),Ujr=o("from_pretrained()"),Jjr=o(" class method or the "),oee=a("a"),Yjr=o("from_config()"),Kjr=o(` class
method.`),Zjr=l(),f$=a("p"),eDr=o("This class cannot be instantiated directly using "),T0e=a("code"),oDr=o("__init__()"),rDr=o(" (throws an error)."),tDr=l(),Wt=a("div"),F(g$.$$.fragment),aDr=l(),M0e=a("p"),nDr=o("Instantiates one of the base model classes of the library from a configuration."),sDr=l(),Yc=a("p"),lDr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),iDr=o("not"),dDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=a("a"),cDr=o("from_pretrained()"),mDr=o(" to load the model weights."),fDr=l(),F(rw.$$.fragment),gDr=l(),Vr=a("div"),F(h$.$$.fragment),hDr=l(),C0e=a("p"),uDr=o("Instantiate one of the base model classes of the library from a pretrained model."),pDr=l(),Tn=a("p"),_Dr=o("The model class to instantiate is selected based on the "),w0e=a("code"),bDr=o("model_type"),vDr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),MDr=o("pretrained_model_name_or_path"),EDr=o(":"),CDr=l(),oe=a("ul"),tw=a("li"),y0e=a("strong"),wDr=o("albert"),ADr=o(" \u2014 "),tee=a("a"),LDr=o("FlaxAlbertModel"),yDr=o(" (ALBERT model)"),xDr=l(),aw=a("li"),x0e=a("strong"),$Dr=o("bart"),kDr=o(" \u2014 "),aee=a("a"),SDr=o("FlaxBartModel"),RDr=o(" (BART model)"),PDr=l(),nw=a("li"),$0e=a("strong"),BDr=o("beit"),NDr=o(" \u2014 "),nee=a("a"),IDr=o("FlaxBeitModel"),qDr=o(" (BEiT model)"),jDr=l(),sw=a("li"),k0e=a("strong"),DDr=o("bert"),GDr=o(" \u2014 "),see=a("a"),ODr=o("FlaxBertModel"),VDr=o(" (BERT model)"),XDr=l(),lw=a("li"),S0e=a("strong"),zDr=o("big_bird"),QDr=o(" \u2014 "),lee=a("a"),WDr=o("FlaxBigBirdModel"),HDr=o(" (BigBird model)"),UDr=l(),iw=a("li"),R0e=a("strong"),JDr=o("blenderbot"),YDr=o(" \u2014 "),iee=a("a"),KDr=o("FlaxBlenderbotModel"),ZDr=o(" (Blenderbot model)"),eGr=l(),dw=a("li"),P0e=a("strong"),oGr=o("blenderbot-small"),rGr=o(" \u2014 "),dee=a("a"),tGr=o("FlaxBlenderbotSmallModel"),aGr=o(" (BlenderbotSmall model)"),nGr=l(),cw=a("li"),B0e=a("strong"),sGr=o("clip"),lGr=o(" \u2014 "),cee=a("a"),iGr=o("FlaxCLIPModel"),dGr=o(" (CLIP model)"),cGr=l(),mw=a("li"),N0e=a("strong"),mGr=o("distilbert"),fGr=o(" \u2014 "),mee=a("a"),gGr=o("FlaxDistilBertModel"),hGr=o(" (DistilBERT model)"),uGr=l(),fw=a("li"),I0e=a("strong"),pGr=o("electra"),_Gr=o(" \u2014 "),fee=a("a"),bGr=o("FlaxElectraModel"),vGr=o(" (ELECTRA model)"),FGr=l(),gw=a("li"),q0e=a("strong"),TGr=o("gpt2"),MGr=o(" \u2014 "),gee=a("a"),EGr=o("FlaxGPT2Model"),CGr=o(" (OpenAI GPT-2 model)"),wGr=l(),hw=a("li"),j0e=a("strong"),AGr=o("gpt_neo"),LGr=o(" \u2014 "),hee=a("a"),yGr=o("FlaxGPTNeoModel"),xGr=o(" (GPT Neo model)"),$Gr=l(),uw=a("li"),D0e=a("strong"),kGr=o("gptj"),SGr=o(" \u2014 "),uee=a("a"),RGr=o("FlaxGPTJModel"),PGr=o(" (GPT-J model)"),BGr=l(),pw=a("li"),G0e=a("strong"),NGr=o("longt5"),IGr=o(" \u2014 "),pee=a("a"),qGr=o("FlaxLongT5Model"),jGr=o(" (LongT5 model)"),DGr=l(),_w=a("li"),O0e=a("strong"),GGr=o("marian"),OGr=o(" \u2014 "),_ee=a("a"),VGr=o("FlaxMarianModel"),XGr=o(" (Marian model)"),zGr=l(),bw=a("li"),V0e=a("strong"),QGr=o("mbart"),WGr=o(" \u2014 "),bee=a("a"),HGr=o("FlaxMBartModel"),UGr=o(" (mBART model)"),JGr=l(),vw=a("li"),X0e=a("strong"),YGr=o("mt5"),KGr=o(" \u2014 "),vee=a("a"),ZGr=o("FlaxMT5Model"),eOr=o(" (MT5 model)"),oOr=l(),Fw=a("li"),z0e=a("strong"),rOr=o("opt"),tOr=o(" \u2014 "),Fee=a("a"),aOr=o("FlaxOPTModel"),nOr=o(" (OPT model)"),sOr=l(),Tw=a("li"),Q0e=a("strong"),lOr=o("pegasus"),iOr=o(" \u2014 "),Tee=a("a"),dOr=o("FlaxPegasusModel"),cOr=o(" (Pegasus model)"),mOr=l(),Mw=a("li"),W0e=a("strong"),fOr=o("roberta"),gOr=o(" \u2014 "),Mee=a("a"),hOr=o("FlaxRobertaModel"),uOr=o(" (RoBERTa model)"),pOr=l(),Ew=a("li"),H0e=a("strong"),_Or=o("roformer"),bOr=o(" \u2014 "),Eee=a("a"),vOr=o("FlaxRoFormerModel"),FOr=o(" (RoFormer model)"),TOr=l(),Cw=a("li"),U0e=a("strong"),MOr=o("t5"),EOr=o(" \u2014 "),Cee=a("a"),COr=o("FlaxT5Model"),wOr=o(" (T5 model)"),AOr=l(),ww=a("li"),J0e=a("strong"),LOr=o("vision-text-dual-encoder"),yOr=o(" \u2014 "),wee=a("a"),xOr=o("FlaxVisionTextDualEncoderModel"),$Or=o(" (VisionTextDualEncoder model)"),kOr=l(),Aw=a("li"),Y0e=a("strong"),SOr=o("vit"),ROr=o(" \u2014 "),Aee=a("a"),POr=o("FlaxViTModel"),BOr=o(" (ViT model)"),NOr=l(),Lw=a("li"),K0e=a("strong"),IOr=o("wav2vec2"),qOr=o(" \u2014 "),Lee=a("a"),jOr=o("FlaxWav2Vec2Model"),DOr=o(" (Wav2Vec2 model)"),GOr=l(),yw=a("li"),Z0e=a("strong"),OOr=o("xglm"),VOr=o(" \u2014 "),yee=a("a"),XOr=o("FlaxXGLMModel"),zOr=o(" (XGLM model)"),QOr=l(),xw=a("li"),ewe=a("strong"),WOr=o("xlm-roberta"),HOr=o(" \u2014 "),xee=a("a"),UOr=o("FlaxXLMRobertaModel"),JOr=o(" (XLM-RoBERTa model)"),YOr=l(),F($w.$$.fragment),Wze=l(),Kc=a("h2"),kw=a("a"),owe=a("span"),F(u$.$$.fragment),KOr=l(),rwe=a("span"),ZOr=o("FlaxAutoModelForCausalLM"),Hze=l(),pr=a("div"),F(p$.$$.fragment),eVr=l(),Zc=a("p"),oVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$ee=a("a"),rVr=o("from_pretrained()"),tVr=o(" class method or the "),kee=a("a"),aVr=o("from_config()"),nVr=o(` class
method.`),sVr=l(),_$=a("p"),lVr=o("This class cannot be instantiated directly using "),twe=a("code"),iVr=o("__init__()"),dVr=o(" (throws an error)."),cVr=l(),Ht=a("div"),F(b$.$$.fragment),mVr=l(),awe=a("p"),fVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gVr=l(),em=a("p"),hVr=o(`Note:
Loading a model from its configuration file does `),nwe=a("strong"),uVr=o("not"),pVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),_Vr=o("from_pretrained()"),bVr=o(" to load the model weights."),vVr=l(),F(Sw.$$.fragment),FVr=l(),Xr=a("div"),F(v$.$$.fragment),TVr=l(),swe=a("p"),MVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EVr=l(),Mn=a("p"),CVr=o("The model class to instantiate is selected based on the "),lwe=a("code"),wVr=o("model_type"),AVr=o(` property of the config object (either
passed as an argument or loaded from `),iwe=a("code"),LVr=o("pretrained_model_name_or_path"),yVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=a("code"),xVr=o("pretrained_model_name_or_path"),$Vr=o(":"),kVr=l(),xe=a("ul"),Rw=a("li"),cwe=a("strong"),SVr=o("bart"),RVr=o(" \u2014 "),Ree=a("a"),PVr=o("FlaxBartForCausalLM"),BVr=o(" (BART model)"),NVr=l(),Pw=a("li"),mwe=a("strong"),IVr=o("bert"),qVr=o(" \u2014 "),Pee=a("a"),jVr=o("FlaxBertForCausalLM"),DVr=o(" (BERT model)"),GVr=l(),Bw=a("li"),fwe=a("strong"),OVr=o("big_bird"),VVr=o(" \u2014 "),Bee=a("a"),XVr=o("FlaxBigBirdForCausalLM"),zVr=o(" (BigBird model)"),QVr=l(),Nw=a("li"),gwe=a("strong"),WVr=o("electra"),HVr=o(" \u2014 "),Nee=a("a"),UVr=o("FlaxElectraForCausalLM"),JVr=o(" (ELECTRA model)"),YVr=l(),Iw=a("li"),hwe=a("strong"),KVr=o("gpt2"),ZVr=o(" \u2014 "),Iee=a("a"),eXr=o("FlaxGPT2LMHeadModel"),oXr=o(" (OpenAI GPT-2 model)"),rXr=l(),qw=a("li"),uwe=a("strong"),tXr=o("gpt_neo"),aXr=o(" \u2014 "),qee=a("a"),nXr=o("FlaxGPTNeoForCausalLM"),sXr=o(" (GPT Neo model)"),lXr=l(),jw=a("li"),pwe=a("strong"),iXr=o("gptj"),dXr=o(" \u2014 "),jee=a("a"),cXr=o("FlaxGPTJForCausalLM"),mXr=o(" (GPT-J model)"),fXr=l(),Dw=a("li"),_we=a("strong"),gXr=o("opt"),hXr=o(" \u2014 "),Dee=a("a"),uXr=o("FlaxOPTForCausalLM"),pXr=o(" (OPT model)"),_Xr=l(),Gw=a("li"),bwe=a("strong"),bXr=o("roberta"),vXr=o(" \u2014 "),Gee=a("a"),FXr=o("FlaxRobertaForCausalLM"),TXr=o(" (RoBERTa model)"),MXr=l(),Ow=a("li"),vwe=a("strong"),EXr=o("xglm"),CXr=o(" \u2014 "),Oee=a("a"),wXr=o("FlaxXGLMForCausalLM"),AXr=o(" (XGLM model)"),LXr=l(),F(Vw.$$.fragment),Uze=l(),om=a("h2"),Xw=a("a"),Fwe=a("span"),F(F$.$$.fragment),yXr=l(),Twe=a("span"),xXr=o("FlaxAutoModelForPreTraining"),Jze=l(),_r=a("div"),F(T$.$$.fragment),$Xr=l(),rm=a("p"),kXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vee=a("a"),SXr=o("from_pretrained()"),RXr=o(" class method or the "),Xee=a("a"),PXr=o("from_config()"),BXr=o(` class
method.`),NXr=l(),M$=a("p"),IXr=o("This class cannot be instantiated directly using "),Mwe=a("code"),qXr=o("__init__()"),jXr=o(" (throws an error)."),DXr=l(),Ut=a("div"),F(E$.$$.fragment),GXr=l(),Ewe=a("p"),OXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VXr=l(),tm=a("p"),XXr=o(`Note:
Loading a model from its configuration file does `),Cwe=a("strong"),zXr=o("not"),QXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),WXr=o("from_pretrained()"),HXr=o(" to load the model weights."),UXr=l(),F(zw.$$.fragment),JXr=l(),zr=a("div"),F(C$.$$.fragment),YXr=l(),wwe=a("p"),KXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZXr=l(),En=a("p"),ezr=o("The model class to instantiate is selected based on the "),Awe=a("code"),ozr=o("model_type"),rzr=o(` property of the config object (either
passed as an argument or loaded from `),Lwe=a("code"),tzr=o("pretrained_model_name_or_path"),azr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ywe=a("code"),nzr=o("pretrained_model_name_or_path"),szr=o(":"),lzr=l(),Ee=a("ul"),Qw=a("li"),xwe=a("strong"),izr=o("albert"),dzr=o(" \u2014 "),Qee=a("a"),czr=o("FlaxAlbertForPreTraining"),mzr=o(" (ALBERT model)"),fzr=l(),Ww=a("li"),$we=a("strong"),gzr=o("bart"),hzr=o(" \u2014 "),Wee=a("a"),uzr=o("FlaxBartForConditionalGeneration"),pzr=o(" (BART model)"),_zr=l(),Hw=a("li"),kwe=a("strong"),bzr=o("bert"),vzr=o(" \u2014 "),Hee=a("a"),Fzr=o("FlaxBertForPreTraining"),Tzr=o(" (BERT model)"),Mzr=l(),Uw=a("li"),Swe=a("strong"),Ezr=o("big_bird"),Czr=o(" \u2014 "),Uee=a("a"),wzr=o("FlaxBigBirdForPreTraining"),Azr=o(" (BigBird model)"),Lzr=l(),Jw=a("li"),Rwe=a("strong"),yzr=o("electra"),xzr=o(" \u2014 "),Jee=a("a"),$zr=o("FlaxElectraForPreTraining"),kzr=o(" (ELECTRA model)"),Szr=l(),Yw=a("li"),Pwe=a("strong"),Rzr=o("longt5"),Pzr=o(" \u2014 "),Yee=a("a"),Bzr=o("FlaxLongT5ForConditionalGeneration"),Nzr=o(" (LongT5 model)"),Izr=l(),Kw=a("li"),Bwe=a("strong"),qzr=o("mbart"),jzr=o(" \u2014 "),Kee=a("a"),Dzr=o("FlaxMBartForConditionalGeneration"),Gzr=o(" (mBART model)"),Ozr=l(),Zw=a("li"),Nwe=a("strong"),Vzr=o("mt5"),Xzr=o(" \u2014 "),Zee=a("a"),zzr=o("FlaxMT5ForConditionalGeneration"),Qzr=o(" (MT5 model)"),Wzr=l(),eA=a("li"),Iwe=a("strong"),Hzr=o("roberta"),Uzr=o(" \u2014 "),eoe=a("a"),Jzr=o("FlaxRobertaForMaskedLM"),Yzr=o(" (RoBERTa model)"),Kzr=l(),oA=a("li"),qwe=a("strong"),Zzr=o("roformer"),eQr=o(" \u2014 "),ooe=a("a"),oQr=o("FlaxRoFormerForMaskedLM"),rQr=o(" (RoFormer model)"),tQr=l(),rA=a("li"),jwe=a("strong"),aQr=o("t5"),nQr=o(" \u2014 "),roe=a("a"),sQr=o("FlaxT5ForConditionalGeneration"),lQr=o(" (T5 model)"),iQr=l(),tA=a("li"),Dwe=a("strong"),dQr=o("wav2vec2"),cQr=o(" \u2014 "),toe=a("a"),mQr=o("FlaxWav2Vec2ForPreTraining"),fQr=o(" (Wav2Vec2 model)"),gQr=l(),aA=a("li"),Gwe=a("strong"),hQr=o("xlm-roberta"),uQr=o(" \u2014 "),aoe=a("a"),pQr=o("FlaxXLMRobertaForMaskedLM"),_Qr=o(" (XLM-RoBERTa model)"),bQr=l(),F(nA.$$.fragment),Yze=l(),am=a("h2"),sA=a("a"),Owe=a("span"),F(w$.$$.fragment),vQr=l(),Vwe=a("span"),FQr=o("FlaxAutoModelForMaskedLM"),Kze=l(),br=a("div"),F(A$.$$.fragment),TQr=l(),nm=a("p"),MQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),noe=a("a"),EQr=o("from_pretrained()"),CQr=o(" class method or the "),soe=a("a"),wQr=o("from_config()"),AQr=o(` class
method.`),LQr=l(),L$=a("p"),yQr=o("This class cannot be instantiated directly using "),Xwe=a("code"),xQr=o("__init__()"),$Qr=o(" (throws an error)."),kQr=l(),Jt=a("div"),F(y$.$$.fragment),SQr=l(),zwe=a("p"),RQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PQr=l(),sm=a("p"),BQr=o(`Note:
Loading a model from its configuration file does `),Qwe=a("strong"),NQr=o("not"),IQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=a("a"),qQr=o("from_pretrained()"),jQr=o(" to load the model weights."),DQr=l(),F(lA.$$.fragment),GQr=l(),Qr=a("div"),F(x$.$$.fragment),OQr=l(),Wwe=a("p"),VQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XQr=l(),Cn=a("p"),zQr=o("The model class to instantiate is selected based on the "),Hwe=a("code"),QQr=o("model_type"),WQr=o(` property of the config object (either
passed as an argument or loaded from `),Uwe=a("code"),HQr=o("pretrained_model_name_or_path"),UQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=a("code"),JQr=o("pretrained_model_name_or_path"),YQr=o(":"),KQr=l(),$e=a("ul"),iA=a("li"),Ywe=a("strong"),ZQr=o("albert"),eWr=o(" \u2014 "),ioe=a("a"),oWr=o("FlaxAlbertForMaskedLM"),rWr=o(" (ALBERT model)"),tWr=l(),dA=a("li"),Kwe=a("strong"),aWr=o("bart"),nWr=o(" \u2014 "),doe=a("a"),sWr=o("FlaxBartForConditionalGeneration"),lWr=o(" (BART model)"),iWr=l(),cA=a("li"),Zwe=a("strong"),dWr=o("bert"),cWr=o(" \u2014 "),coe=a("a"),mWr=o("FlaxBertForMaskedLM"),fWr=o(" (BERT model)"),gWr=l(),mA=a("li"),eAe=a("strong"),hWr=o("big_bird"),uWr=o(" \u2014 "),moe=a("a"),pWr=o("FlaxBigBirdForMaskedLM"),_Wr=o(" (BigBird model)"),bWr=l(),fA=a("li"),oAe=a("strong"),vWr=o("distilbert"),FWr=o(" \u2014 "),foe=a("a"),TWr=o("FlaxDistilBertForMaskedLM"),MWr=o(" (DistilBERT model)"),EWr=l(),gA=a("li"),rAe=a("strong"),CWr=o("electra"),wWr=o(" \u2014 "),goe=a("a"),AWr=o("FlaxElectraForMaskedLM"),LWr=o(" (ELECTRA model)"),yWr=l(),hA=a("li"),tAe=a("strong"),xWr=o("mbart"),$Wr=o(" \u2014 "),hoe=a("a"),kWr=o("FlaxMBartForConditionalGeneration"),SWr=o(" (mBART model)"),RWr=l(),uA=a("li"),aAe=a("strong"),PWr=o("roberta"),BWr=o(" \u2014 "),uoe=a("a"),NWr=o("FlaxRobertaForMaskedLM"),IWr=o(" (RoBERTa model)"),qWr=l(),pA=a("li"),nAe=a("strong"),jWr=o("roformer"),DWr=o(" \u2014 "),poe=a("a"),GWr=o("FlaxRoFormerForMaskedLM"),OWr=o(" (RoFormer model)"),VWr=l(),_A=a("li"),sAe=a("strong"),XWr=o("xlm-roberta"),zWr=o(" \u2014 "),_oe=a("a"),QWr=o("FlaxXLMRobertaForMaskedLM"),WWr=o(" (XLM-RoBERTa model)"),HWr=l(),F(bA.$$.fragment),Zze=l(),lm=a("h2"),vA=a("a"),lAe=a("span"),F($$.$$.fragment),UWr=l(),iAe=a("span"),JWr=o("FlaxAutoModelForSeq2SeqLM"),eQe=l(),vr=a("div"),F(k$.$$.fragment),YWr=l(),im=a("p"),KWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),boe=a("a"),ZWr=o("from_pretrained()"),eHr=o(" class method or the "),voe=a("a"),oHr=o("from_config()"),rHr=o(` class
method.`),tHr=l(),S$=a("p"),aHr=o("This class cannot be instantiated directly using "),dAe=a("code"),nHr=o("__init__()"),sHr=o(" (throws an error)."),lHr=l(),Yt=a("div"),F(R$.$$.fragment),iHr=l(),cAe=a("p"),dHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cHr=l(),dm=a("p"),mHr=o(`Note:
Loading a model from its configuration file does `),mAe=a("strong"),fHr=o("not"),gHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=a("a"),hHr=o("from_pretrained()"),uHr=o(" to load the model weights."),pHr=l(),F(FA.$$.fragment),_Hr=l(),Wr=a("div"),F(P$.$$.fragment),bHr=l(),fAe=a("p"),vHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FHr=l(),wn=a("p"),THr=o("The model class to instantiate is selected based on the "),gAe=a("code"),MHr=o("model_type"),EHr=o(` property of the config object (either
passed as an argument or loaded from `),hAe=a("code"),CHr=o("pretrained_model_name_or_path"),wHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=a("code"),AHr=o("pretrained_model_name_or_path"),LHr=o(":"),yHr=l(),ke=a("ul"),TA=a("li"),pAe=a("strong"),xHr=o("bart"),$Hr=o(" \u2014 "),Toe=a("a"),kHr=o("FlaxBartForConditionalGeneration"),SHr=o(" (BART model)"),RHr=l(),MA=a("li"),_Ae=a("strong"),PHr=o("blenderbot"),BHr=o(" \u2014 "),Moe=a("a"),NHr=o("FlaxBlenderbotForConditionalGeneration"),IHr=o(" (Blenderbot model)"),qHr=l(),EA=a("li"),bAe=a("strong"),jHr=o("blenderbot-small"),DHr=o(" \u2014 "),Eoe=a("a"),GHr=o("FlaxBlenderbotSmallForConditionalGeneration"),OHr=o(" (BlenderbotSmall model)"),VHr=l(),CA=a("li"),vAe=a("strong"),XHr=o("encoder-decoder"),zHr=o(" \u2014 "),Coe=a("a"),QHr=o("FlaxEncoderDecoderModel"),WHr=o(" (Encoder decoder model)"),HHr=l(),wA=a("li"),FAe=a("strong"),UHr=o("longt5"),JHr=o(" \u2014 "),woe=a("a"),YHr=o("FlaxLongT5ForConditionalGeneration"),KHr=o(" (LongT5 model)"),ZHr=l(),AA=a("li"),TAe=a("strong"),eUr=o("marian"),oUr=o(" \u2014 "),Aoe=a("a"),rUr=o("FlaxMarianMTModel"),tUr=o(" (Marian model)"),aUr=l(),LA=a("li"),MAe=a("strong"),nUr=o("mbart"),sUr=o(" \u2014 "),Loe=a("a"),lUr=o("FlaxMBartForConditionalGeneration"),iUr=o(" (mBART model)"),dUr=l(),yA=a("li"),EAe=a("strong"),cUr=o("mt5"),mUr=o(" \u2014 "),yoe=a("a"),fUr=o("FlaxMT5ForConditionalGeneration"),gUr=o(" (MT5 model)"),hUr=l(),xA=a("li"),CAe=a("strong"),uUr=o("pegasus"),pUr=o(" \u2014 "),xoe=a("a"),_Ur=o("FlaxPegasusForConditionalGeneration"),bUr=o(" (Pegasus model)"),vUr=l(),$A=a("li"),wAe=a("strong"),FUr=o("t5"),TUr=o(" \u2014 "),$oe=a("a"),MUr=o("FlaxT5ForConditionalGeneration"),EUr=o(" (T5 model)"),CUr=l(),F(kA.$$.fragment),oQe=l(),cm=a("h2"),SA=a("a"),AAe=a("span"),F(B$.$$.fragment),wUr=l(),LAe=a("span"),AUr=o("FlaxAutoModelForSequenceClassification"),rQe=l(),Fr=a("div"),F(N$.$$.fragment),LUr=l(),mm=a("p"),yUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),koe=a("a"),xUr=o("from_pretrained()"),$Ur=o(" class method or the "),Soe=a("a"),kUr=o("from_config()"),SUr=o(` class
method.`),RUr=l(),I$=a("p"),PUr=o("This class cannot be instantiated directly using "),yAe=a("code"),BUr=o("__init__()"),NUr=o(" (throws an error)."),IUr=l(),Kt=a("div"),F(q$.$$.fragment),qUr=l(),xAe=a("p"),jUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DUr=l(),fm=a("p"),GUr=o(`Note:
Loading a model from its configuration file does `),$Ae=a("strong"),OUr=o("not"),VUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),XUr=o("from_pretrained()"),zUr=o(" to load the model weights."),QUr=l(),F(RA.$$.fragment),WUr=l(),Hr=a("div"),F(j$.$$.fragment),HUr=l(),kAe=a("p"),UUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JUr=l(),An=a("p"),YUr=o("The model class to instantiate is selected based on the "),SAe=a("code"),KUr=o("model_type"),ZUr=o(` property of the config object (either
passed as an argument or loaded from `),RAe=a("code"),eJr=o("pretrained_model_name_or_path"),oJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=a("code"),rJr=o("pretrained_model_name_or_path"),tJr=o(":"),aJr=l(),Se=a("ul"),PA=a("li"),BAe=a("strong"),nJr=o("albert"),sJr=o(" \u2014 "),Poe=a("a"),lJr=o("FlaxAlbertForSequenceClassification"),iJr=o(" (ALBERT model)"),dJr=l(),BA=a("li"),NAe=a("strong"),cJr=o("bart"),mJr=o(" \u2014 "),Boe=a("a"),fJr=o("FlaxBartForSequenceClassification"),gJr=o(" (BART model)"),hJr=l(),NA=a("li"),IAe=a("strong"),uJr=o("bert"),pJr=o(" \u2014 "),Noe=a("a"),_Jr=o("FlaxBertForSequenceClassification"),bJr=o(" (BERT model)"),vJr=l(),IA=a("li"),qAe=a("strong"),FJr=o("big_bird"),TJr=o(" \u2014 "),Ioe=a("a"),MJr=o("FlaxBigBirdForSequenceClassification"),EJr=o(" (BigBird model)"),CJr=l(),qA=a("li"),jAe=a("strong"),wJr=o("distilbert"),AJr=o(" \u2014 "),qoe=a("a"),LJr=o("FlaxDistilBertForSequenceClassification"),yJr=o(" (DistilBERT model)"),xJr=l(),jA=a("li"),DAe=a("strong"),$Jr=o("electra"),kJr=o(" \u2014 "),joe=a("a"),SJr=o("FlaxElectraForSequenceClassification"),RJr=o(" (ELECTRA model)"),PJr=l(),DA=a("li"),GAe=a("strong"),BJr=o("mbart"),NJr=o(" \u2014 "),Doe=a("a"),IJr=o("FlaxMBartForSequenceClassification"),qJr=o(" (mBART model)"),jJr=l(),GA=a("li"),OAe=a("strong"),DJr=o("roberta"),GJr=o(" \u2014 "),Goe=a("a"),OJr=o("FlaxRobertaForSequenceClassification"),VJr=o(" (RoBERTa model)"),XJr=l(),OA=a("li"),VAe=a("strong"),zJr=o("roformer"),QJr=o(" \u2014 "),Ooe=a("a"),WJr=o("FlaxRoFormerForSequenceClassification"),HJr=o(" (RoFormer model)"),UJr=l(),VA=a("li"),XAe=a("strong"),JJr=o("xlm-roberta"),YJr=o(" \u2014 "),Voe=a("a"),KJr=o("FlaxXLMRobertaForSequenceClassification"),ZJr=o(" (XLM-RoBERTa model)"),eYr=l(),F(XA.$$.fragment),tQe=l(),gm=a("h2"),zA=a("a"),zAe=a("span"),F(D$.$$.fragment),oYr=l(),QAe=a("span"),rYr=o("FlaxAutoModelForQuestionAnswering"),aQe=l(),Tr=a("div"),F(G$.$$.fragment),tYr=l(),hm=a("p"),aYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xoe=a("a"),nYr=o("from_pretrained()"),sYr=o(" class method or the "),zoe=a("a"),lYr=o("from_config()"),iYr=o(` class
method.`),dYr=l(),O$=a("p"),cYr=o("This class cannot be instantiated directly using "),WAe=a("code"),mYr=o("__init__()"),fYr=o(" (throws an error)."),gYr=l(),Zt=a("div"),F(V$.$$.fragment),hYr=l(),HAe=a("p"),uYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pYr=l(),um=a("p"),_Yr=o(`Note:
Loading a model from its configuration file does `),UAe=a("strong"),bYr=o("not"),vYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=a("a"),FYr=o("from_pretrained()"),TYr=o(" to load the model weights."),MYr=l(),F(QA.$$.fragment),EYr=l(),Ur=a("div"),F(X$.$$.fragment),CYr=l(),JAe=a("p"),wYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AYr=l(),Ln=a("p"),LYr=o("The model class to instantiate is selected based on the "),YAe=a("code"),yYr=o("model_type"),xYr=o(` property of the config object (either
passed as an argument or loaded from `),KAe=a("code"),$Yr=o("pretrained_model_name_or_path"),kYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=a("code"),SYr=o("pretrained_model_name_or_path"),RYr=o(":"),PYr=l(),Re=a("ul"),WA=a("li"),e6e=a("strong"),BYr=o("albert"),NYr=o(" \u2014 "),Woe=a("a"),IYr=o("FlaxAlbertForQuestionAnswering"),qYr=o(" (ALBERT model)"),jYr=l(),HA=a("li"),o6e=a("strong"),DYr=o("bart"),GYr=o(" \u2014 "),Hoe=a("a"),OYr=o("FlaxBartForQuestionAnswering"),VYr=o(" (BART model)"),XYr=l(),UA=a("li"),r6e=a("strong"),zYr=o("bert"),QYr=o(" \u2014 "),Uoe=a("a"),WYr=o("FlaxBertForQuestionAnswering"),HYr=o(" (BERT model)"),UYr=l(),JA=a("li"),t6e=a("strong"),JYr=o("big_bird"),YYr=o(" \u2014 "),Joe=a("a"),KYr=o("FlaxBigBirdForQuestionAnswering"),ZYr=o(" (BigBird model)"),eKr=l(),YA=a("li"),a6e=a("strong"),oKr=o("distilbert"),rKr=o(" \u2014 "),Yoe=a("a"),tKr=o("FlaxDistilBertForQuestionAnswering"),aKr=o(" (DistilBERT model)"),nKr=l(),KA=a("li"),n6e=a("strong"),sKr=o("electra"),lKr=o(" \u2014 "),Koe=a("a"),iKr=o("FlaxElectraForQuestionAnswering"),dKr=o(" (ELECTRA model)"),cKr=l(),ZA=a("li"),s6e=a("strong"),mKr=o("mbart"),fKr=o(" \u2014 "),Zoe=a("a"),gKr=o("FlaxMBartForQuestionAnswering"),hKr=o(" (mBART model)"),uKr=l(),e6=a("li"),l6e=a("strong"),pKr=o("roberta"),_Kr=o(" \u2014 "),ere=a("a"),bKr=o("FlaxRobertaForQuestionAnswering"),vKr=o(" (RoBERTa model)"),FKr=l(),o6=a("li"),i6e=a("strong"),TKr=o("roformer"),MKr=o(" \u2014 "),ore=a("a"),EKr=o("FlaxRoFormerForQuestionAnswering"),CKr=o(" (RoFormer model)"),wKr=l(),r6=a("li"),d6e=a("strong"),AKr=o("xlm-roberta"),LKr=o(" \u2014 "),rre=a("a"),yKr=o("FlaxXLMRobertaForQuestionAnswering"),xKr=o(" (XLM-RoBERTa model)"),$Kr=l(),F(t6.$$.fragment),nQe=l(),pm=a("h2"),a6=a("a"),c6e=a("span"),F(z$.$$.fragment),kKr=l(),m6e=a("span"),SKr=o("FlaxAutoModelForTokenClassification"),sQe=l(),Mr=a("div"),F(Q$.$$.fragment),RKr=l(),_m=a("p"),PKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tre=a("a"),BKr=o("from_pretrained()"),NKr=o(" class method or the "),are=a("a"),IKr=o("from_config()"),qKr=o(` class
method.`),jKr=l(),W$=a("p"),DKr=o("This class cannot be instantiated directly using "),f6e=a("code"),GKr=o("__init__()"),OKr=o(" (throws an error)."),VKr=l(),ea=a("div"),F(H$.$$.fragment),XKr=l(),g6e=a("p"),zKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QKr=l(),bm=a("p"),WKr=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),HKr=o("not"),UKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),JKr=o("from_pretrained()"),YKr=o(" to load the model weights."),KKr=l(),F(n6.$$.fragment),ZKr=l(),Jr=a("div"),F(U$.$$.fragment),eZr=l(),u6e=a("p"),oZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rZr=l(),yn=a("p"),tZr=o("The model class to instantiate is selected based on the "),p6e=a("code"),aZr=o("model_type"),nZr=o(` property of the config object (either
passed as an argument or loaded from `),_6e=a("code"),sZr=o("pretrained_model_name_or_path"),lZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),iZr=o("pretrained_model_name_or_path"),dZr=o(":"),cZr=l(),Ve=a("ul"),s6=a("li"),v6e=a("strong"),mZr=o("albert"),fZr=o(" \u2014 "),sre=a("a"),gZr=o("FlaxAlbertForTokenClassification"),hZr=o(" (ALBERT model)"),uZr=l(),l6=a("li"),F6e=a("strong"),pZr=o("bert"),_Zr=o(" \u2014 "),lre=a("a"),bZr=o("FlaxBertForTokenClassification"),vZr=o(" (BERT model)"),FZr=l(),i6=a("li"),T6e=a("strong"),TZr=o("big_bird"),MZr=o(" \u2014 "),ire=a("a"),EZr=o("FlaxBigBirdForTokenClassification"),CZr=o(" (BigBird model)"),wZr=l(),d6=a("li"),M6e=a("strong"),AZr=o("distilbert"),LZr=o(" \u2014 "),dre=a("a"),yZr=o("FlaxDistilBertForTokenClassification"),xZr=o(" (DistilBERT model)"),$Zr=l(),c6=a("li"),E6e=a("strong"),kZr=o("electra"),SZr=o(" \u2014 "),cre=a("a"),RZr=o("FlaxElectraForTokenClassification"),PZr=o(" (ELECTRA model)"),BZr=l(),m6=a("li"),C6e=a("strong"),NZr=o("roberta"),IZr=o(" \u2014 "),mre=a("a"),qZr=o("FlaxRobertaForTokenClassification"),jZr=o(" (RoBERTa model)"),DZr=l(),f6=a("li"),w6e=a("strong"),GZr=o("roformer"),OZr=o(" \u2014 "),fre=a("a"),VZr=o("FlaxRoFormerForTokenClassification"),XZr=o(" (RoFormer model)"),zZr=l(),g6=a("li"),A6e=a("strong"),QZr=o("xlm-roberta"),WZr=o(" \u2014 "),gre=a("a"),HZr=o("FlaxXLMRobertaForTokenClassification"),UZr=o(" (XLM-RoBERTa model)"),JZr=l(),F(h6.$$.fragment),lQe=l(),vm=a("h2"),u6=a("a"),L6e=a("span"),F(J$.$$.fragment),YZr=l(),y6e=a("span"),KZr=o("FlaxAutoModelForMultipleChoice"),iQe=l(),Er=a("div"),F(Y$.$$.fragment),ZZr=l(),Fm=a("p"),eet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hre=a("a"),oet=o("from_pretrained()"),ret=o(" class method or the "),ure=a("a"),tet=o("from_config()"),aet=o(` class
method.`),net=l(),K$=a("p"),set=o("This class cannot be instantiated directly using "),x6e=a("code"),iet=o("__init__()"),det=o(" (throws an error)."),cet=l(),oa=a("div"),F(Z$.$$.fragment),met=l(),$6e=a("p"),fet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),get=l(),Tm=a("p"),het=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),uet=o("not"),pet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=a("a"),_et=o("from_pretrained()"),bet=o(" to load the model weights."),vet=l(),F(p6.$$.fragment),Fet=l(),Yr=a("div"),F(ek.$$.fragment),Tet=l(),S6e=a("p"),Met=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Eet=l(),xn=a("p"),Cet=o("The model class to instantiate is selected based on the "),R6e=a("code"),wet=o("model_type"),Aet=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),Let=o("pretrained_model_name_or_path"),yet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=a("code"),xet=o("pretrained_model_name_or_path"),$et=o(":"),ket=l(),Xe=a("ul"),_6=a("li"),N6e=a("strong"),Set=o("albert"),Ret=o(" \u2014 "),_re=a("a"),Pet=o("FlaxAlbertForMultipleChoice"),Bet=o(" (ALBERT model)"),Net=l(),b6=a("li"),I6e=a("strong"),Iet=o("bert"),qet=o(" \u2014 "),bre=a("a"),jet=o("FlaxBertForMultipleChoice"),Det=o(" (BERT model)"),Get=l(),v6=a("li"),q6e=a("strong"),Oet=o("big_bird"),Vet=o(" \u2014 "),vre=a("a"),Xet=o("FlaxBigBirdForMultipleChoice"),zet=o(" (BigBird model)"),Qet=l(),F6=a("li"),j6e=a("strong"),Wet=o("distilbert"),Het=o(" \u2014 "),Fre=a("a"),Uet=o("FlaxDistilBertForMultipleChoice"),Jet=o(" (DistilBERT model)"),Yet=l(),T6=a("li"),D6e=a("strong"),Ket=o("electra"),Zet=o(" \u2014 "),Tre=a("a"),eot=o("FlaxElectraForMultipleChoice"),oot=o(" (ELECTRA model)"),rot=l(),M6=a("li"),G6e=a("strong"),tot=o("roberta"),aot=o(" \u2014 "),Mre=a("a"),not=o("FlaxRobertaForMultipleChoice"),sot=o(" (RoBERTa model)"),lot=l(),E6=a("li"),O6e=a("strong"),iot=o("roformer"),dot=o(" \u2014 "),Ere=a("a"),cot=o("FlaxRoFormerForMultipleChoice"),mot=o(" (RoFormer model)"),fot=l(),C6=a("li"),V6e=a("strong"),got=o("xlm-roberta"),hot=o(" \u2014 "),Cre=a("a"),uot=o("FlaxXLMRobertaForMultipleChoice"),pot=o(" (XLM-RoBERTa model)"),_ot=l(),F(w6.$$.fragment),dQe=l(),Mm=a("h2"),A6=a("a"),X6e=a("span"),F(ok.$$.fragment),bot=l(),z6e=a("span"),vot=o("FlaxAutoModelForNextSentencePrediction"),cQe=l(),Cr=a("div"),F(rk.$$.fragment),Fot=l(),Em=a("p"),Tot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wre=a("a"),Mot=o("from_pretrained()"),Eot=o(" class method or the "),Are=a("a"),Cot=o("from_config()"),wot=o(` class
method.`),Aot=l(),tk=a("p"),Lot=o("This class cannot be instantiated directly using "),Q6e=a("code"),yot=o("__init__()"),xot=o(" (throws an error)."),$ot=l(),ra=a("div"),F(ak.$$.fragment),kot=l(),W6e=a("p"),Sot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rot=l(),Cm=a("p"),Pot=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),Bot=o("not"),Not=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("a"),Iot=o("from_pretrained()"),qot=o(" to load the model weights."),jot=l(),F(L6.$$.fragment),Dot=l(),Kr=a("div"),F(nk.$$.fragment),Got=l(),U6e=a("p"),Oot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vot=l(),$n=a("p"),Xot=o("The model class to instantiate is selected based on the "),J6e=a("code"),zot=o("model_type"),Qot=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),Wot=o("pretrained_model_name_or_path"),Hot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),Uot=o("pretrained_model_name_or_path"),Jot=o(":"),Yot=l(),Z6e=a("ul"),y6=a("li"),e7e=a("strong"),Kot=o("bert"),Zot=o(" \u2014 "),yre=a("a"),ert=o("FlaxBertForNextSentencePrediction"),ort=o(" (BERT model)"),rrt=l(),F(x6.$$.fragment),mQe=l(),wm=a("h2"),$6=a("a"),o7e=a("span"),F(sk.$$.fragment),trt=l(),r7e=a("span"),art=o("FlaxAutoModelForImageClassification"),fQe=l(),wr=a("div"),F(lk.$$.fragment),nrt=l(),Am=a("p"),srt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xre=a("a"),lrt=o("from_pretrained()"),irt=o(" class method or the "),$re=a("a"),drt=o("from_config()"),crt=o(` class
method.`),mrt=l(),ik=a("p"),frt=o("This class cannot be instantiated directly using "),t7e=a("code"),grt=o("__init__()"),hrt=o(" (throws an error)."),urt=l(),ta=a("div"),F(dk.$$.fragment),prt=l(),a7e=a("p"),_rt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),brt=l(),Lm=a("p"),vrt=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),Frt=o("not"),Trt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("a"),Mrt=o("from_pretrained()"),Ert=o(" to load the model weights."),Crt=l(),F(k6.$$.fragment),wrt=l(),Zr=a("div"),F(ck.$$.fragment),Art=l(),s7e=a("p"),Lrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yrt=l(),kn=a("p"),xrt=o("The model class to instantiate is selected based on the "),l7e=a("code"),$rt=o("model_type"),krt=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),Srt=o("pretrained_model_name_or_path"),Rrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),Prt=o("pretrained_model_name_or_path"),Brt=o(":"),Nrt=l(),mk=a("ul"),S6=a("li"),c7e=a("strong"),Irt=o("beit"),qrt=o(" \u2014 "),Sre=a("a"),jrt=o("FlaxBeitForImageClassification"),Drt=o(" (BEiT model)"),Grt=l(),R6=a("li"),m7e=a("strong"),Ort=o("vit"),Vrt=o(" \u2014 "),Rre=a("a"),Xrt=o("FlaxViTForImageClassification"),zrt=o(" (ViT model)"),Qrt=l(),F(P6.$$.fragment),gQe=l(),ym=a("h2"),B6=a("a"),f7e=a("span"),F(fk.$$.fragment),Wrt=l(),g7e=a("span"),Hrt=o("FlaxAutoModelForVision2Seq"),hQe=l(),Ar=a("div"),F(gk.$$.fragment),Urt=l(),xm=a("p"),Jrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Pre=a("a"),Yrt=o("from_pretrained()"),Krt=o(" class method or the "),Bre=a("a"),Zrt=o("from_config()"),ett=o(` class
method.`),ott=l(),hk=a("p"),rtt=o("This class cannot be instantiated directly using "),h7e=a("code"),ttt=o("__init__()"),att=o(" (throws an error)."),ntt=l(),aa=a("div"),F(uk.$$.fragment),stt=l(),u7e=a("p"),ltt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),itt=l(),$m=a("p"),dtt=o(`Note:
Loading a model from its configuration file does `),p7e=a("strong"),ctt=o("not"),mtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=a("a"),ftt=o("from_pretrained()"),gtt=o(" to load the model weights."),htt=l(),F(N6.$$.fragment),utt=l(),et=a("div"),F(pk.$$.fragment),ptt=l(),_7e=a("p"),_tt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),btt=l(),Sn=a("p"),vtt=o("The model class to instantiate is selected based on the "),b7e=a("code"),Ftt=o("model_type"),Ttt=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),Mtt=o("pretrained_model_name_or_path"),Ett=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),Ctt=o("pretrained_model_name_or_path"),wtt=o(":"),Att=l(),T7e=a("ul"),I6=a("li"),M7e=a("strong"),Ltt=o("vision-encoder-decoder"),ytt=o(" \u2014 "),Ire=a("a"),xtt=o("FlaxVisionEncoderDecoderModel"),$tt=o(" (Vision Encoder decoder model)"),ktt=l(),F(q6.$$.fragment),this.h()},l(m){const _=pWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var _k=s(u);f=n(_k,"A",{id:!0,class:!0,href:!0});var E7e=s(f);p=n(E7e,"SPAN",{});var C7e=s(p);T(d.$$.fragment,C7e),C7e.forEach(t),E7e.forEach(t),h=i(_k),Co=n(_k,"SPAN",{});var w7e=s(Co);yi=r(w7e,"Auto Classes"),w7e.forEach(t),_k.forEach(t),Pm=i(m),lt=n(m,"P",{});var bk=s(lt);xi=r(bk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),$i=n(bk,"CODE",{});var A7e=s($i);ty=r(A7e,"from_pretrained()"),A7e.forEach(t),Bm=r(bk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bk.forEach(t),Oe=i(m),We=n(m,"P",{});var Rn=s(We);ki=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var L7e=s(Pn);ay=r(L7e,"AutoConfig"),L7e.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var y7e=s(Nn);ny=r(y7e,"AutoModel"),y7e.forEach(t),Si=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var x7e=s(In);sy=r(x7e,"AutoTokenizer"),x7e.forEach(t),Ri=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Nm=i(m),T(Sa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var vk=s(Ae);jS=r(vk,"will create a model that is an instance of "),Pi=n(vk,"A",{href:!0});var $7e=s(Pi);DS=r($7e,"BertModel"),$7e.forEach(t),GS=r(vk,"."),vk.forEach(t),wo=i(m),Ra=n(m,"P",{});var Fk=s(Ra);OS=r(Fk,"There is one class of "),Im=n(Fk,"CODE",{});var k7e=s(Im);VS=r(k7e,"AutoModel"),k7e.forEach(t),wHe=r(Fk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Fk.forEach(t),cXe=i(m),Bi=n(m,"H2",{class:!0});var Tk=s(Bi);qm=n(Tk,"A",{id:!0,class:!0,href:!0});var S7e=s(qm);Sae=n(S7e,"SPAN",{});var R7e=s(Sae);T(ly.$$.fragment,R7e),R7e.forEach(t),S7e.forEach(t),AHe=i(Tk),Rae=n(Tk,"SPAN",{});var P7e=s(Rae);LHe=r(P7e,"Extending the Auto Classes"),P7e.forEach(t),Tk.forEach(t),mXe=i(m),qn=n(m,"P",{});var km=s(qn);yHe=r(km,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pae=n(km,"CODE",{});var B7e=s(Pae);xHe=r(B7e,"NewModel"),B7e.forEach(t),$He=r(km,", make sure you have a "),Bae=n(km,"CODE",{});var N7e=s(Bae);kHe=r(N7e,"NewModelConfig"),N7e.forEach(t),SHe=r(km,` then you can add those to the auto
classes like this:`),km.forEach(t),fXe=i(m),T(iy.$$.fragment,m),gXe=i(m),XS=n(m,"P",{});var I7e=s(XS);RHe=r(I7e,"You will then be able to use the auto classes like you would usually do!"),I7e.forEach(t),hXe=i(m),T(jm.$$.fragment,m),uXe=i(m),Ni=n(m,"H2",{class:!0});var Mk=s(Ni);Dm=n(Mk,"A",{id:!0,class:!0,href:!0});var q7e=s(Dm);Nae=n(q7e,"SPAN",{});var j7e=s(Nae);T(dy.$$.fragment,j7e),j7e.forEach(t),q7e.forEach(t),PHe=i(Mk),Iae=n(Mk,"SPAN",{});var D7e=s(Iae);BHe=r(D7e,"AutoConfig"),D7e.forEach(t),Mk.forEach(t),pXe=i(m),Ao=n(m,"DIV",{class:!0});var nt=s(Ao);T(cy.$$.fragment,nt),NHe=i(nt),my=n(nt,"P",{});var Ek=s(my);IHe=r(Ek,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zS=n(Ek,"A",{href:!0});var G7e=s(zS);qHe=r(G7e,"from_pretrained()"),G7e.forEach(t),jHe=r(Ek," class method."),Ek.forEach(t),DHe=i(nt),fy=n(nt,"P",{});var Ck=s(fy);GHe=r(Ck,"This class cannot be instantiated directly using "),qae=n(Ck,"CODE",{});var O7e=s(qae);OHe=r(O7e,"__init__()"),O7e.forEach(t),VHe=r(Ck," (throws an error)."),Ck.forEach(t),XHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(gy.$$.fragment,st),zHe=i(st),jae=n(st,"P",{});var V7e=s(jae);QHe=r(V7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),V7e.forEach(t),WHe=i(st),Ii=n(st,"P",{});var Sm=s(Ii);HHe=r(Sm,"The configuration class to instantiate is selected based on the "),Dae=n(Sm,"CODE",{});var X7e=s(Dae);UHe=r(X7e,"model_type"),X7e.forEach(t),JHe=r(Sm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gae=n(Sm,"CODE",{});var z7e=s(Gae);YHe=r(z7e,"pretrained_model_name_or_path"),z7e.forEach(t),KHe=r(Sm,":"),Sm.forEach(t),ZHe=i(st),A=n(st,"UL",{});var L=s(A);Gm=n(L,"LI",{});var j6=s(Gm);Oae=n(j6,"STRONG",{});var Q7e=s(Oae);eUe=r(Q7e,"albert"),Q7e.forEach(t),oUe=r(j6," \u2014 "),QS=n(j6,"A",{href:!0});var W7e=s(QS);rUe=r(W7e,"AlbertConfig"),W7e.forEach(t),tUe=r(j6," (ALBERT model)"),j6.forEach(t),aUe=i(L),Om=n(L,"LI",{});var D6=s(Om);Vae=n(D6,"STRONG",{});var H7e=s(Vae);nUe=r(H7e,"bart"),H7e.forEach(t),sUe=r(D6," \u2014 "),WS=n(D6,"A",{href:!0});var U7e=s(WS);lUe=r(U7e,"BartConfig"),U7e.forEach(t),iUe=r(D6," (BART model)"),D6.forEach(t),dUe=i(L),Vm=n(L,"LI",{});var G6=s(Vm);Xae=n(G6,"STRONG",{});var J7e=s(Xae);cUe=r(J7e,"beit"),J7e.forEach(t),mUe=r(G6," \u2014 "),HS=n(G6,"A",{href:!0});var Y7e=s(HS);fUe=r(Y7e,"BeitConfig"),Y7e.forEach(t),gUe=r(G6," (BEiT model)"),G6.forEach(t),hUe=i(L),Xm=n(L,"LI",{});var O6=s(Xm);zae=n(O6,"STRONG",{});var K7e=s(zae);uUe=r(K7e,"bert"),K7e.forEach(t),pUe=r(O6," \u2014 "),US=n(O6,"A",{href:!0});var Z7e=s(US);_Ue=r(Z7e,"BertConfig"),Z7e.forEach(t),bUe=r(O6," (BERT model)"),O6.forEach(t),vUe=i(L),zm=n(L,"LI",{});var V6=s(zm);Qae=n(V6,"STRONG",{});var eLe=s(Qae);FUe=r(eLe,"bert-generation"),eLe.forEach(t),TUe=r(V6," \u2014 "),JS=n(V6,"A",{href:!0});var oLe=s(JS);MUe=r(oLe,"BertGenerationConfig"),oLe.forEach(t),EUe=r(V6," (Bert Generation model)"),V6.forEach(t),CUe=i(L),Qm=n(L,"LI",{});var X6=s(Qm);Wae=n(X6,"STRONG",{});var rLe=s(Wae);wUe=r(rLe,"big_bird"),rLe.forEach(t),AUe=r(X6," \u2014 "),YS=n(X6,"A",{href:!0});var tLe=s(YS);LUe=r(tLe,"BigBirdConfig"),tLe.forEach(t),yUe=r(X6," (BigBird model)"),X6.forEach(t),xUe=i(L),Wm=n(L,"LI",{});var z6=s(Wm);Hae=n(z6,"STRONG",{});var aLe=s(Hae);$Ue=r(aLe,"bigbird_pegasus"),aLe.forEach(t),kUe=r(z6," \u2014 "),KS=n(z6,"A",{href:!0});var nLe=s(KS);SUe=r(nLe,"BigBirdPegasusConfig"),nLe.forEach(t),RUe=r(z6," (BigBird-Pegasus model)"),z6.forEach(t),PUe=i(L),Hm=n(L,"LI",{});var Q6=s(Hm);Uae=n(Q6,"STRONG",{});var sLe=s(Uae);BUe=r(sLe,"blenderbot"),sLe.forEach(t),NUe=r(Q6," \u2014 "),ZS=n(Q6,"A",{href:!0});var lLe=s(ZS);IUe=r(lLe,"BlenderbotConfig"),lLe.forEach(t),qUe=r(Q6," (Blenderbot model)"),Q6.forEach(t),jUe=i(L),Um=n(L,"LI",{});var W6=s(Um);Jae=n(W6,"STRONG",{});var iLe=s(Jae);DUe=r(iLe,"blenderbot-small"),iLe.forEach(t),GUe=r(W6," \u2014 "),eR=n(W6,"A",{href:!0});var dLe=s(eR);OUe=r(dLe,"BlenderbotSmallConfig"),dLe.forEach(t),VUe=r(W6," (BlenderbotSmall model)"),W6.forEach(t),XUe=i(L),Jm=n(L,"LI",{});var H6=s(Jm);Yae=n(H6,"STRONG",{});var cLe=s(Yae);zUe=r(cLe,"bloom"),cLe.forEach(t),QUe=r(H6," \u2014 "),oR=n(H6,"A",{href:!0});var mLe=s(oR);WUe=r(mLe,"BloomConfig"),mLe.forEach(t),HUe=r(H6," (BLOOM model)"),H6.forEach(t),UUe=i(L),Ym=n(L,"LI",{});var U6=s(Ym);Kae=n(U6,"STRONG",{});var fLe=s(Kae);JUe=r(fLe,"camembert"),fLe.forEach(t),YUe=r(U6," \u2014 "),rR=n(U6,"A",{href:!0});var gLe=s(rR);KUe=r(gLe,"CamembertConfig"),gLe.forEach(t),ZUe=r(U6," (CamemBERT model)"),U6.forEach(t),eJe=i(L),Km=n(L,"LI",{});var J6=s(Km);Zae=n(J6,"STRONG",{});var hLe=s(Zae);oJe=r(hLe,"canine"),hLe.forEach(t),rJe=r(J6," \u2014 "),tR=n(J6,"A",{href:!0});var uLe=s(tR);tJe=r(uLe,"CanineConfig"),uLe.forEach(t),aJe=r(J6," (CANINE model)"),J6.forEach(t),nJe=i(L),Zm=n(L,"LI",{});var Y6=s(Zm);ene=n(Y6,"STRONG",{});var pLe=s(ene);sJe=r(pLe,"clip"),pLe.forEach(t),lJe=r(Y6," \u2014 "),aR=n(Y6,"A",{href:!0});var _Le=s(aR);iJe=r(_Le,"CLIPConfig"),_Le.forEach(t),dJe=r(Y6," (CLIP model)"),Y6.forEach(t),cJe=i(L),ef=n(L,"LI",{});var K6=s(ef);one=n(K6,"STRONG",{});var bLe=s(one);mJe=r(bLe,"codegen"),bLe.forEach(t),fJe=r(K6," \u2014 "),nR=n(K6,"A",{href:!0});var vLe=s(nR);gJe=r(vLe,"CodeGenConfig"),vLe.forEach(t),hJe=r(K6," (CodeGen model)"),K6.forEach(t),uJe=i(L),of=n(L,"LI",{});var Z6=s(of);rne=n(Z6,"STRONG",{});var FLe=s(rne);pJe=r(FLe,"convbert"),FLe.forEach(t),_Je=r(Z6," \u2014 "),sR=n(Z6,"A",{href:!0});var TLe=s(sR);bJe=r(TLe,"ConvBertConfig"),TLe.forEach(t),vJe=r(Z6," (ConvBERT model)"),Z6.forEach(t),FJe=i(L),rf=n(L,"LI",{});var e7=s(rf);tne=n(e7,"STRONG",{});var MLe=s(tne);TJe=r(MLe,"convnext"),MLe.forEach(t),MJe=r(e7," \u2014 "),lR=n(e7,"A",{href:!0});var ELe=s(lR);EJe=r(ELe,"ConvNextConfig"),ELe.forEach(t),CJe=r(e7," (ConvNeXT model)"),e7.forEach(t),wJe=i(L),tf=n(L,"LI",{});var o7=s(tf);ane=n(o7,"STRONG",{});var CLe=s(ane);AJe=r(CLe,"ctrl"),CLe.forEach(t),LJe=r(o7," \u2014 "),iR=n(o7,"A",{href:!0});var wLe=s(iR);yJe=r(wLe,"CTRLConfig"),wLe.forEach(t),xJe=r(o7," (CTRL model)"),o7.forEach(t),$Je=i(L),af=n(L,"LI",{});var r7=s(af);nne=n(r7,"STRONG",{});var ALe=s(nne);kJe=r(ALe,"cvt"),ALe.forEach(t),SJe=r(r7," \u2014 "),dR=n(r7,"A",{href:!0});var LLe=s(dR);RJe=r(LLe,"CvtConfig"),LLe.forEach(t),PJe=r(r7," (CvT model)"),r7.forEach(t),BJe=i(L),nf=n(L,"LI",{});var t7=s(nf);sne=n(t7,"STRONG",{});var yLe=s(sne);NJe=r(yLe,"data2vec-audio"),yLe.forEach(t),IJe=r(t7," \u2014 "),cR=n(t7,"A",{href:!0});var xLe=s(cR);qJe=r(xLe,"Data2VecAudioConfig"),xLe.forEach(t),jJe=r(t7," (Data2VecAudio model)"),t7.forEach(t),DJe=i(L),sf=n(L,"LI",{});var a7=s(sf);lne=n(a7,"STRONG",{});var $Le=s(lne);GJe=r($Le,"data2vec-text"),$Le.forEach(t),OJe=r(a7," \u2014 "),mR=n(a7,"A",{href:!0});var kLe=s(mR);VJe=r(kLe,"Data2VecTextConfig"),kLe.forEach(t),XJe=r(a7," (Data2VecText model)"),a7.forEach(t),zJe=i(L),lf=n(L,"LI",{});var n7=s(lf);ine=n(n7,"STRONG",{});var SLe=s(ine);QJe=r(SLe,"data2vec-vision"),SLe.forEach(t),WJe=r(n7," \u2014 "),fR=n(n7,"A",{href:!0});var RLe=s(fR);HJe=r(RLe,"Data2VecVisionConfig"),RLe.forEach(t),UJe=r(n7," (Data2VecVision model)"),n7.forEach(t),JJe=i(L),df=n(L,"LI",{});var s7=s(df);dne=n(s7,"STRONG",{});var PLe=s(dne);YJe=r(PLe,"deberta"),PLe.forEach(t),KJe=r(s7," \u2014 "),gR=n(s7,"A",{href:!0});var BLe=s(gR);ZJe=r(BLe,"DebertaConfig"),BLe.forEach(t),eYe=r(s7," (DeBERTa model)"),s7.forEach(t),oYe=i(L),cf=n(L,"LI",{});var l7=s(cf);cne=n(l7,"STRONG",{});var NLe=s(cne);rYe=r(NLe,"deberta-v2"),NLe.forEach(t),tYe=r(l7," \u2014 "),hR=n(l7,"A",{href:!0});var ILe=s(hR);aYe=r(ILe,"DebertaV2Config"),ILe.forEach(t),nYe=r(l7," (DeBERTa-v2 model)"),l7.forEach(t),sYe=i(L),mf=n(L,"LI",{});var i7=s(mf);mne=n(i7,"STRONG",{});var Rtt=s(mne);lYe=r(Rtt,"decision_transformer"),Rtt.forEach(t),iYe=r(i7," \u2014 "),uR=n(i7,"A",{href:!0});var Ptt=s(uR);dYe=r(Ptt,"DecisionTransformerConfig"),Ptt.forEach(t),cYe=r(i7," (Decision Transformer model)"),i7.forEach(t),mYe=i(L),ff=n(L,"LI",{});var qLe=s(ff);fne=n(qLe,"STRONG",{});var Btt=s(fne);fYe=r(Btt,"deit"),Btt.forEach(t),gYe=r(qLe," \u2014 "),pR=n(qLe,"A",{href:!0});var Ntt=s(pR);hYe=r(Ntt,"DeiTConfig"),Ntt.forEach(t),uYe=r(qLe," (DeiT model)"),qLe.forEach(t),pYe=i(L),gf=n(L,"LI",{});var jLe=s(gf);gne=n(jLe,"STRONG",{});var Itt=s(gne);_Ye=r(Itt,"detr"),Itt.forEach(t),bYe=r(jLe," \u2014 "),_R=n(jLe,"A",{href:!0});var qtt=s(_R);vYe=r(qtt,"DetrConfig"),qtt.forEach(t),FYe=r(jLe," (DETR model)"),jLe.forEach(t),TYe=i(L),hf=n(L,"LI",{});var DLe=s(hf);hne=n(DLe,"STRONG",{});var jtt=s(hne);MYe=r(jtt,"distilbert"),jtt.forEach(t),EYe=r(DLe," \u2014 "),bR=n(DLe,"A",{href:!0});var Dtt=s(bR);CYe=r(Dtt,"DistilBertConfig"),Dtt.forEach(t),wYe=r(DLe," (DistilBERT model)"),DLe.forEach(t),AYe=i(L),uf=n(L,"LI",{});var GLe=s(uf);une=n(GLe,"STRONG",{});var Gtt=s(une);LYe=r(Gtt,"dpr"),Gtt.forEach(t),yYe=r(GLe," \u2014 "),vR=n(GLe,"A",{href:!0});var Ott=s(vR);xYe=r(Ott,"DPRConfig"),Ott.forEach(t),$Ye=r(GLe," (DPR model)"),GLe.forEach(t),kYe=i(L),pf=n(L,"LI",{});var OLe=s(pf);pne=n(OLe,"STRONG",{});var Vtt=s(pne);SYe=r(Vtt,"dpt"),Vtt.forEach(t),RYe=r(OLe," \u2014 "),FR=n(OLe,"A",{href:!0});var Xtt=s(FR);PYe=r(Xtt,"DPTConfig"),Xtt.forEach(t),BYe=r(OLe," (DPT model)"),OLe.forEach(t),NYe=i(L),_f=n(L,"LI",{});var VLe=s(_f);_ne=n(VLe,"STRONG",{});var ztt=s(_ne);IYe=r(ztt,"electra"),ztt.forEach(t),qYe=r(VLe," \u2014 "),TR=n(VLe,"A",{href:!0});var Qtt=s(TR);jYe=r(Qtt,"ElectraConfig"),Qtt.forEach(t),DYe=r(VLe," (ELECTRA model)"),VLe.forEach(t),GYe=i(L),bf=n(L,"LI",{});var XLe=s(bf);bne=n(XLe,"STRONG",{});var Wtt=s(bne);OYe=r(Wtt,"encoder-decoder"),Wtt.forEach(t),VYe=r(XLe," \u2014 "),MR=n(XLe,"A",{href:!0});var Htt=s(MR);XYe=r(Htt,"EncoderDecoderConfig"),Htt.forEach(t),zYe=r(XLe," (Encoder decoder model)"),XLe.forEach(t),QYe=i(L),vf=n(L,"LI",{});var zLe=s(vf);vne=n(zLe,"STRONG",{});var Utt=s(vne);WYe=r(Utt,"flaubert"),Utt.forEach(t),HYe=r(zLe," \u2014 "),ER=n(zLe,"A",{href:!0});var Jtt=s(ER);UYe=r(Jtt,"FlaubertConfig"),Jtt.forEach(t),JYe=r(zLe," (FlauBERT model)"),zLe.forEach(t),YYe=i(L),Ff=n(L,"LI",{});var QLe=s(Ff);Fne=n(QLe,"STRONG",{});var Ytt=s(Fne);KYe=r(Ytt,"flava"),Ytt.forEach(t),ZYe=r(QLe," \u2014 "),CR=n(QLe,"A",{href:!0});var Ktt=s(CR);eKe=r(Ktt,"FlavaConfig"),Ktt.forEach(t),oKe=r(QLe," (FLAVA model)"),QLe.forEach(t),rKe=i(L),Tf=n(L,"LI",{});var WLe=s(Tf);Tne=n(WLe,"STRONG",{});var Ztt=s(Tne);tKe=r(Ztt,"fnet"),Ztt.forEach(t),aKe=r(WLe," \u2014 "),wR=n(WLe,"A",{href:!0});var eat=s(wR);nKe=r(eat,"FNetConfig"),eat.forEach(t),sKe=r(WLe," (FNet model)"),WLe.forEach(t),lKe=i(L),Mf=n(L,"LI",{});var HLe=s(Mf);Mne=n(HLe,"STRONG",{});var oat=s(Mne);iKe=r(oat,"fsmt"),oat.forEach(t),dKe=r(HLe," \u2014 "),AR=n(HLe,"A",{href:!0});var rat=s(AR);cKe=r(rat,"FSMTConfig"),rat.forEach(t),mKe=r(HLe," (FairSeq Machine-Translation model)"),HLe.forEach(t),fKe=i(L),Ef=n(L,"LI",{});var ULe=s(Ef);Ene=n(ULe,"STRONG",{});var tat=s(Ene);gKe=r(tat,"funnel"),tat.forEach(t),hKe=r(ULe," \u2014 "),LR=n(ULe,"A",{href:!0});var aat=s(LR);uKe=r(aat,"FunnelConfig"),aat.forEach(t),pKe=r(ULe," (Funnel Transformer model)"),ULe.forEach(t),_Ke=i(L),Cf=n(L,"LI",{});var JLe=s(Cf);Cne=n(JLe,"STRONG",{});var nat=s(Cne);bKe=r(nat,"glpn"),nat.forEach(t),vKe=r(JLe," \u2014 "),yR=n(JLe,"A",{href:!0});var sat=s(yR);FKe=r(sat,"GLPNConfig"),sat.forEach(t),TKe=r(JLe," (GLPN model)"),JLe.forEach(t),MKe=i(L),wf=n(L,"LI",{});var YLe=s(wf);wne=n(YLe,"STRONG",{});var lat=s(wne);EKe=r(lat,"gpt2"),lat.forEach(t),CKe=r(YLe," \u2014 "),xR=n(YLe,"A",{href:!0});var iat=s(xR);wKe=r(iat,"GPT2Config"),iat.forEach(t),AKe=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),LKe=i(L),Af=n(L,"LI",{});var KLe=s(Af);Ane=n(KLe,"STRONG",{});var dat=s(Ane);yKe=r(dat,"gpt_neo"),dat.forEach(t),xKe=r(KLe," \u2014 "),$R=n(KLe,"A",{href:!0});var cat=s($R);$Ke=r(cat,"GPTNeoConfig"),cat.forEach(t),kKe=r(KLe," (GPT Neo model)"),KLe.forEach(t),SKe=i(L),Lf=n(L,"LI",{});var ZLe=s(Lf);Lne=n(ZLe,"STRONG",{});var mat=s(Lne);RKe=r(mat,"gpt_neox"),mat.forEach(t),PKe=r(ZLe," \u2014 "),kR=n(ZLe,"A",{href:!0});var fat=s(kR);BKe=r(fat,"GPTNeoXConfig"),fat.forEach(t),NKe=r(ZLe," (GPT NeoX model)"),ZLe.forEach(t),IKe=i(L),yf=n(L,"LI",{});var eye=s(yf);yne=n(eye,"STRONG",{});var gat=s(yne);qKe=r(gat,"gptj"),gat.forEach(t),jKe=r(eye," \u2014 "),SR=n(eye,"A",{href:!0});var hat=s(SR);DKe=r(hat,"GPTJConfig"),hat.forEach(t),GKe=r(eye," (GPT-J model)"),eye.forEach(t),OKe=i(L),xf=n(L,"LI",{});var oye=s(xf);xne=n(oye,"STRONG",{});var uat=s(xne);VKe=r(uat,"groupvit"),uat.forEach(t),XKe=r(oye," \u2014 "),RR=n(oye,"A",{href:!0});var pat=s(RR);zKe=r(pat,"GroupViTConfig"),pat.forEach(t),QKe=r(oye," (GroupViT model)"),oye.forEach(t),WKe=i(L),$f=n(L,"LI",{});var rye=s($f);$ne=n(rye,"STRONG",{});var _at=s($ne);HKe=r(_at,"hubert"),_at.forEach(t),UKe=r(rye," \u2014 "),PR=n(rye,"A",{href:!0});var bat=s(PR);JKe=r(bat,"HubertConfig"),bat.forEach(t),YKe=r(rye," (Hubert model)"),rye.forEach(t),KKe=i(L),kf=n(L,"LI",{});var tye=s(kf);kne=n(tye,"STRONG",{});var vat=s(kne);ZKe=r(vat,"ibert"),vat.forEach(t),eZe=r(tye," \u2014 "),BR=n(tye,"A",{href:!0});var Fat=s(BR);oZe=r(Fat,"IBertConfig"),Fat.forEach(t),rZe=r(tye," (I-BERT model)"),tye.forEach(t),tZe=i(L),Sf=n(L,"LI",{});var aye=s(Sf);Sne=n(aye,"STRONG",{});var Tat=s(Sne);aZe=r(Tat,"imagegpt"),Tat.forEach(t),nZe=r(aye," \u2014 "),NR=n(aye,"A",{href:!0});var Mat=s(NR);sZe=r(Mat,"ImageGPTConfig"),Mat.forEach(t),lZe=r(aye," (ImageGPT model)"),aye.forEach(t),iZe=i(L),Rf=n(L,"LI",{});var nye=s(Rf);Rne=n(nye,"STRONG",{});var Eat=s(Rne);dZe=r(Eat,"layoutlm"),Eat.forEach(t),cZe=r(nye," \u2014 "),IR=n(nye,"A",{href:!0});var Cat=s(IR);mZe=r(Cat,"LayoutLMConfig"),Cat.forEach(t),fZe=r(nye," (LayoutLM model)"),nye.forEach(t),gZe=i(L),Pf=n(L,"LI",{});var sye=s(Pf);Pne=n(sye,"STRONG",{});var wat=s(Pne);hZe=r(wat,"layoutlmv2"),wat.forEach(t),uZe=r(sye," \u2014 "),qR=n(sye,"A",{href:!0});var Aat=s(qR);pZe=r(Aat,"LayoutLMv2Config"),Aat.forEach(t),_Ze=r(sye," (LayoutLMv2 model)"),sye.forEach(t),bZe=i(L),Bf=n(L,"LI",{});var lye=s(Bf);Bne=n(lye,"STRONG",{});var Lat=s(Bne);vZe=r(Lat,"layoutlmv3"),Lat.forEach(t),FZe=r(lye," \u2014 "),jR=n(lye,"A",{href:!0});var yat=s(jR);TZe=r(yat,"LayoutLMv3Config"),yat.forEach(t),MZe=r(lye," (LayoutLMv3 model)"),lye.forEach(t),EZe=i(L),Nf=n(L,"LI",{});var iye=s(Nf);Nne=n(iye,"STRONG",{});var xat=s(Nne);CZe=r(xat,"led"),xat.forEach(t),wZe=r(iye," \u2014 "),DR=n(iye,"A",{href:!0});var $at=s(DR);AZe=r($at,"LEDConfig"),$at.forEach(t),LZe=r(iye," (LED model)"),iye.forEach(t),yZe=i(L),If=n(L,"LI",{});var dye=s(If);Ine=n(dye,"STRONG",{});var kat=s(Ine);xZe=r(kat,"levit"),kat.forEach(t),$Ze=r(dye," \u2014 "),GR=n(dye,"A",{href:!0});var Sat=s(GR);kZe=r(Sat,"LevitConfig"),Sat.forEach(t),SZe=r(dye," (LeViT model)"),dye.forEach(t),RZe=i(L),qf=n(L,"LI",{});var cye=s(qf);qne=n(cye,"STRONG",{});var Rat=s(qne);PZe=r(Rat,"longformer"),Rat.forEach(t),BZe=r(cye," \u2014 "),OR=n(cye,"A",{href:!0});var Pat=s(OR);NZe=r(Pat,"LongformerConfig"),Pat.forEach(t),IZe=r(cye," (Longformer model)"),cye.forEach(t),qZe=i(L),jf=n(L,"LI",{});var mye=s(jf);jne=n(mye,"STRONG",{});var Bat=s(jne);jZe=r(Bat,"longt5"),Bat.forEach(t),DZe=r(mye," \u2014 "),VR=n(mye,"A",{href:!0});var Nat=s(VR);GZe=r(Nat,"LongT5Config"),Nat.forEach(t),OZe=r(mye," (LongT5 model)"),mye.forEach(t),VZe=i(L),Df=n(L,"LI",{});var fye=s(Df);Dne=n(fye,"STRONG",{});var Iat=s(Dne);XZe=r(Iat,"luke"),Iat.forEach(t),zZe=r(fye," \u2014 "),XR=n(fye,"A",{href:!0});var qat=s(XR);QZe=r(qat,"LukeConfig"),qat.forEach(t),WZe=r(fye," (LUKE model)"),fye.forEach(t),HZe=i(L),Gf=n(L,"LI",{});var gye=s(Gf);Gne=n(gye,"STRONG",{});var jat=s(Gne);UZe=r(jat,"lxmert"),jat.forEach(t),JZe=r(gye," \u2014 "),zR=n(gye,"A",{href:!0});var Dat=s(zR);YZe=r(Dat,"LxmertConfig"),Dat.forEach(t),KZe=r(gye," (LXMERT model)"),gye.forEach(t),ZZe=i(L),Of=n(L,"LI",{});var hye=s(Of);One=n(hye,"STRONG",{});var Gat=s(One);eeo=r(Gat,"m2m_100"),Gat.forEach(t),oeo=r(hye," \u2014 "),QR=n(hye,"A",{href:!0});var Oat=s(QR);reo=r(Oat,"M2M100Config"),Oat.forEach(t),teo=r(hye," (M2M100 model)"),hye.forEach(t),aeo=i(L),Vf=n(L,"LI",{});var uye=s(Vf);Vne=n(uye,"STRONG",{});var Vat=s(Vne);neo=r(Vat,"marian"),Vat.forEach(t),seo=r(uye," \u2014 "),WR=n(uye,"A",{href:!0});var Xat=s(WR);leo=r(Xat,"MarianConfig"),Xat.forEach(t),ieo=r(uye," (Marian model)"),uye.forEach(t),deo=i(L),Xf=n(L,"LI",{});var pye=s(Xf);Xne=n(pye,"STRONG",{});var zat=s(Xne);ceo=r(zat,"maskformer"),zat.forEach(t),meo=r(pye," \u2014 "),HR=n(pye,"A",{href:!0});var Qat=s(HR);feo=r(Qat,"MaskFormerConfig"),Qat.forEach(t),geo=r(pye," (MaskFormer model)"),pye.forEach(t),heo=i(L),zf=n(L,"LI",{});var _ye=s(zf);zne=n(_ye,"STRONG",{});var Wat=s(zne);ueo=r(Wat,"mbart"),Wat.forEach(t),peo=r(_ye," \u2014 "),UR=n(_ye,"A",{href:!0});var Hat=s(UR);_eo=r(Hat,"MBartConfig"),Hat.forEach(t),beo=r(_ye," (mBART model)"),_ye.forEach(t),veo=i(L),Qf=n(L,"LI",{});var bye=s(Qf);Qne=n(bye,"STRONG",{});var Uat=s(Qne);Feo=r(Uat,"mctct"),Uat.forEach(t),Teo=r(bye," \u2014 "),JR=n(bye,"A",{href:!0});var Jat=s(JR);Meo=r(Jat,"MCTCTConfig"),Jat.forEach(t),Eeo=r(bye," (M-CTC-T model)"),bye.forEach(t),Ceo=i(L),Wf=n(L,"LI",{});var vye=s(Wf);Wne=n(vye,"STRONG",{});var Yat=s(Wne);weo=r(Yat,"megatron-bert"),Yat.forEach(t),Aeo=r(vye," \u2014 "),YR=n(vye,"A",{href:!0});var Kat=s(YR);Leo=r(Kat,"MegatronBertConfig"),Kat.forEach(t),yeo=r(vye," (Megatron-BERT model)"),vye.forEach(t),xeo=i(L),Hf=n(L,"LI",{});var Fye=s(Hf);Hne=n(Fye,"STRONG",{});var Zat=s(Hne);$eo=r(Zat,"mobilebert"),Zat.forEach(t),keo=r(Fye," \u2014 "),KR=n(Fye,"A",{href:!0});var ent=s(KR);Seo=r(ent,"MobileBertConfig"),ent.forEach(t),Reo=r(Fye," (MobileBERT model)"),Fye.forEach(t),Peo=i(L),Uf=n(L,"LI",{});var Tye=s(Uf);Une=n(Tye,"STRONG",{});var ont=s(Une);Beo=r(ont,"mobilevit"),ont.forEach(t),Neo=r(Tye," \u2014 "),ZR=n(Tye,"A",{href:!0});var rnt=s(ZR);Ieo=r(rnt,"MobileViTConfig"),rnt.forEach(t),qeo=r(Tye," (MobileViT model)"),Tye.forEach(t),jeo=i(L),Jf=n(L,"LI",{});var Mye=s(Jf);Jne=n(Mye,"STRONG",{});var tnt=s(Jne);Deo=r(tnt,"mpnet"),tnt.forEach(t),Geo=r(Mye," \u2014 "),eP=n(Mye,"A",{href:!0});var ant=s(eP);Oeo=r(ant,"MPNetConfig"),ant.forEach(t),Veo=r(Mye," (MPNet model)"),Mye.forEach(t),Xeo=i(L),Yf=n(L,"LI",{});var Eye=s(Yf);Yne=n(Eye,"STRONG",{});var nnt=s(Yne);zeo=r(nnt,"mt5"),nnt.forEach(t),Qeo=r(Eye," \u2014 "),oP=n(Eye,"A",{href:!0});var snt=s(oP);Weo=r(snt,"MT5Config"),snt.forEach(t),Heo=r(Eye," (MT5 model)"),Eye.forEach(t),Ueo=i(L),Kf=n(L,"LI",{});var Cye=s(Kf);Kne=n(Cye,"STRONG",{});var lnt=s(Kne);Jeo=r(lnt,"mvp"),lnt.forEach(t),Yeo=r(Cye," \u2014 "),rP=n(Cye,"A",{href:!0});var int=s(rP);Keo=r(int,"MvpConfig"),int.forEach(t),Zeo=r(Cye," (MVP model)"),Cye.forEach(t),eoo=i(L),Zf=n(L,"LI",{});var wye=s(Zf);Zne=n(wye,"STRONG",{});var dnt=s(Zne);ooo=r(dnt,"nezha"),dnt.forEach(t),roo=r(wye," \u2014 "),tP=n(wye,"A",{href:!0});var cnt=s(tP);too=r(cnt,"NezhaConfig"),cnt.forEach(t),aoo=r(wye," (Nezha model)"),wye.forEach(t),noo=i(L),eg=n(L,"LI",{});var Aye=s(eg);ese=n(Aye,"STRONG",{});var mnt=s(ese);soo=r(mnt,"nystromformer"),mnt.forEach(t),loo=r(Aye," \u2014 "),aP=n(Aye,"A",{href:!0});var fnt=s(aP);ioo=r(fnt,"NystromformerConfig"),fnt.forEach(t),doo=r(Aye," (Nystr\xF6mformer model)"),Aye.forEach(t),coo=i(L),og=n(L,"LI",{});var Lye=s(og);ose=n(Lye,"STRONG",{});var gnt=s(ose);moo=r(gnt,"openai-gpt"),gnt.forEach(t),foo=r(Lye," \u2014 "),nP=n(Lye,"A",{href:!0});var hnt=s(nP);goo=r(hnt,"OpenAIGPTConfig"),hnt.forEach(t),hoo=r(Lye," (OpenAI GPT model)"),Lye.forEach(t),uoo=i(L),rg=n(L,"LI",{});var yye=s(rg);rse=n(yye,"STRONG",{});var unt=s(rse);poo=r(unt,"opt"),unt.forEach(t),_oo=r(yye," \u2014 "),sP=n(yye,"A",{href:!0});var pnt=s(sP);boo=r(pnt,"OPTConfig"),pnt.forEach(t),voo=r(yye," (OPT model)"),yye.forEach(t),Foo=i(L),tg=n(L,"LI",{});var xye=s(tg);tse=n(xye,"STRONG",{});var _nt=s(tse);Too=r(_nt,"pegasus"),_nt.forEach(t),Moo=r(xye," \u2014 "),lP=n(xye,"A",{href:!0});var bnt=s(lP);Eoo=r(bnt,"PegasusConfig"),bnt.forEach(t),Coo=r(xye," (Pegasus model)"),xye.forEach(t),woo=i(L),ag=n(L,"LI",{});var $ye=s(ag);ase=n($ye,"STRONG",{});var vnt=s(ase);Aoo=r(vnt,"perceiver"),vnt.forEach(t),Loo=r($ye," \u2014 "),iP=n($ye,"A",{href:!0});var Fnt=s(iP);yoo=r(Fnt,"PerceiverConfig"),Fnt.forEach(t),xoo=r($ye," (Perceiver model)"),$ye.forEach(t),$oo=i(L),ng=n(L,"LI",{});var kye=s(ng);nse=n(kye,"STRONG",{});var Tnt=s(nse);koo=r(Tnt,"plbart"),Tnt.forEach(t),Soo=r(kye," \u2014 "),dP=n(kye,"A",{href:!0});var Mnt=s(dP);Roo=r(Mnt,"PLBartConfig"),Mnt.forEach(t),Poo=r(kye," (PLBart model)"),kye.forEach(t),Boo=i(L),sg=n(L,"LI",{});var Sye=s(sg);sse=n(Sye,"STRONG",{});var Ent=s(sse);Noo=r(Ent,"poolformer"),Ent.forEach(t),Ioo=r(Sye," \u2014 "),cP=n(Sye,"A",{href:!0});var Cnt=s(cP);qoo=r(Cnt,"PoolFormerConfig"),Cnt.forEach(t),joo=r(Sye," (PoolFormer model)"),Sye.forEach(t),Doo=i(L),lg=n(L,"LI",{});var Rye=s(lg);lse=n(Rye,"STRONG",{});var wnt=s(lse);Goo=r(wnt,"prophetnet"),wnt.forEach(t),Ooo=r(Rye," \u2014 "),mP=n(Rye,"A",{href:!0});var Ant=s(mP);Voo=r(Ant,"ProphetNetConfig"),Ant.forEach(t),Xoo=r(Rye," (ProphetNet model)"),Rye.forEach(t),zoo=i(L),ig=n(L,"LI",{});var Pye=s(ig);ise=n(Pye,"STRONG",{});var Lnt=s(ise);Qoo=r(Lnt,"qdqbert"),Lnt.forEach(t),Woo=r(Pye," \u2014 "),fP=n(Pye,"A",{href:!0});var ynt=s(fP);Hoo=r(ynt,"QDQBertConfig"),ynt.forEach(t),Uoo=r(Pye," (QDQBert model)"),Pye.forEach(t),Joo=i(L),dg=n(L,"LI",{});var Bye=s(dg);dse=n(Bye,"STRONG",{});var xnt=s(dse);Yoo=r(xnt,"rag"),xnt.forEach(t),Koo=r(Bye," \u2014 "),gP=n(Bye,"A",{href:!0});var $nt=s(gP);Zoo=r($nt,"RagConfig"),$nt.forEach(t),ero=r(Bye," (RAG model)"),Bye.forEach(t),oro=i(L),cg=n(L,"LI",{});var Nye=s(cg);cse=n(Nye,"STRONG",{});var knt=s(cse);rro=r(knt,"realm"),knt.forEach(t),tro=r(Nye," \u2014 "),hP=n(Nye,"A",{href:!0});var Snt=s(hP);aro=r(Snt,"RealmConfig"),Snt.forEach(t),nro=r(Nye," (REALM model)"),Nye.forEach(t),sro=i(L),mg=n(L,"LI",{});var Iye=s(mg);mse=n(Iye,"STRONG",{});var Rnt=s(mse);lro=r(Rnt,"reformer"),Rnt.forEach(t),iro=r(Iye," \u2014 "),uP=n(Iye,"A",{href:!0});var Pnt=s(uP);dro=r(Pnt,"ReformerConfig"),Pnt.forEach(t),cro=r(Iye," (Reformer model)"),Iye.forEach(t),mro=i(L),fg=n(L,"LI",{});var qye=s(fg);fse=n(qye,"STRONG",{});var Bnt=s(fse);fro=r(Bnt,"regnet"),Bnt.forEach(t),gro=r(qye," \u2014 "),pP=n(qye,"A",{href:!0});var Nnt=s(pP);hro=r(Nnt,"RegNetConfig"),Nnt.forEach(t),uro=r(qye," (RegNet model)"),qye.forEach(t),pro=i(L),gg=n(L,"LI",{});var jye=s(gg);gse=n(jye,"STRONG",{});var Int=s(gse);_ro=r(Int,"rembert"),Int.forEach(t),bro=r(jye," \u2014 "),_P=n(jye,"A",{href:!0});var qnt=s(_P);vro=r(qnt,"RemBertConfig"),qnt.forEach(t),Fro=r(jye," (RemBERT model)"),jye.forEach(t),Tro=i(L),hg=n(L,"LI",{});var Dye=s(hg);hse=n(Dye,"STRONG",{});var jnt=s(hse);Mro=r(jnt,"resnet"),jnt.forEach(t),Ero=r(Dye," \u2014 "),bP=n(Dye,"A",{href:!0});var Dnt=s(bP);Cro=r(Dnt,"ResNetConfig"),Dnt.forEach(t),wro=r(Dye," (ResNet model)"),Dye.forEach(t),Aro=i(L),ug=n(L,"LI",{});var Gye=s(ug);use=n(Gye,"STRONG",{});var Gnt=s(use);Lro=r(Gnt,"retribert"),Gnt.forEach(t),yro=r(Gye," \u2014 "),vP=n(Gye,"A",{href:!0});var Ont=s(vP);xro=r(Ont,"RetriBertConfig"),Ont.forEach(t),$ro=r(Gye," (RetriBERT model)"),Gye.forEach(t),kro=i(L),pg=n(L,"LI",{});var Oye=s(pg);pse=n(Oye,"STRONG",{});var Vnt=s(pse);Sro=r(Vnt,"roberta"),Vnt.forEach(t),Rro=r(Oye," \u2014 "),FP=n(Oye,"A",{href:!0});var Xnt=s(FP);Pro=r(Xnt,"RobertaConfig"),Xnt.forEach(t),Bro=r(Oye," (RoBERTa model)"),Oye.forEach(t),Nro=i(L),_g=n(L,"LI",{});var Vye=s(_g);_se=n(Vye,"STRONG",{});var znt=s(_se);Iro=r(znt,"roformer"),znt.forEach(t),qro=r(Vye," \u2014 "),TP=n(Vye,"A",{href:!0});var Qnt=s(TP);jro=r(Qnt,"RoFormerConfig"),Qnt.forEach(t),Dro=r(Vye," (RoFormer model)"),Vye.forEach(t),Gro=i(L),bg=n(L,"LI",{});var Xye=s(bg);bse=n(Xye,"STRONG",{});var Wnt=s(bse);Oro=r(Wnt,"segformer"),Wnt.forEach(t),Vro=r(Xye," \u2014 "),MP=n(Xye,"A",{href:!0});var Hnt=s(MP);Xro=r(Hnt,"SegformerConfig"),Hnt.forEach(t),zro=r(Xye," (SegFormer model)"),Xye.forEach(t),Qro=i(L),vg=n(L,"LI",{});var zye=s(vg);vse=n(zye,"STRONG",{});var Unt=s(vse);Wro=r(Unt,"sew"),Unt.forEach(t),Hro=r(zye," \u2014 "),EP=n(zye,"A",{href:!0});var Jnt=s(EP);Uro=r(Jnt,"SEWConfig"),Jnt.forEach(t),Jro=r(zye," (SEW model)"),zye.forEach(t),Yro=i(L),Fg=n(L,"LI",{});var Qye=s(Fg);Fse=n(Qye,"STRONG",{});var Ynt=s(Fse);Kro=r(Ynt,"sew-d"),Ynt.forEach(t),Zro=r(Qye," \u2014 "),CP=n(Qye,"A",{href:!0});var Knt=s(CP);eto=r(Knt,"SEWDConfig"),Knt.forEach(t),oto=r(Qye," (SEW-D model)"),Qye.forEach(t),rto=i(L),Tg=n(L,"LI",{});var Wye=s(Tg);Tse=n(Wye,"STRONG",{});var Znt=s(Tse);tto=r(Znt,"speech-encoder-decoder"),Znt.forEach(t),ato=r(Wye," \u2014 "),wP=n(Wye,"A",{href:!0});var est=s(wP);nto=r(est,"SpeechEncoderDecoderConfig"),est.forEach(t),sto=r(Wye," (Speech Encoder decoder model)"),Wye.forEach(t),lto=i(L),Mg=n(L,"LI",{});var Hye=s(Mg);Mse=n(Hye,"STRONG",{});var ost=s(Mse);ito=r(ost,"speech_to_text"),ost.forEach(t),dto=r(Hye," \u2014 "),AP=n(Hye,"A",{href:!0});var rst=s(AP);cto=r(rst,"Speech2TextConfig"),rst.forEach(t),mto=r(Hye," (Speech2Text model)"),Hye.forEach(t),fto=i(L),Eg=n(L,"LI",{});var Uye=s(Eg);Ese=n(Uye,"STRONG",{});var tst=s(Ese);gto=r(tst,"speech_to_text_2"),tst.forEach(t),hto=r(Uye," \u2014 "),LP=n(Uye,"A",{href:!0});var ast=s(LP);uto=r(ast,"Speech2Text2Config"),ast.forEach(t),pto=r(Uye," (Speech2Text2 model)"),Uye.forEach(t),_to=i(L),Cg=n(L,"LI",{});var Jye=s(Cg);Cse=n(Jye,"STRONG",{});var nst=s(Cse);bto=r(nst,"splinter"),nst.forEach(t),vto=r(Jye," \u2014 "),yP=n(Jye,"A",{href:!0});var sst=s(yP);Fto=r(sst,"SplinterConfig"),sst.forEach(t),Tto=r(Jye," (Splinter model)"),Jye.forEach(t),Mto=i(L),wg=n(L,"LI",{});var Yye=s(wg);wse=n(Yye,"STRONG",{});var lst=s(wse);Eto=r(lst,"squeezebert"),lst.forEach(t),Cto=r(Yye," \u2014 "),xP=n(Yye,"A",{href:!0});var ist=s(xP);wto=r(ist,"SqueezeBertConfig"),ist.forEach(t),Ato=r(Yye," (SqueezeBERT model)"),Yye.forEach(t),Lto=i(L),Ag=n(L,"LI",{});var Kye=s(Ag);Ase=n(Kye,"STRONG",{});var dst=s(Ase);yto=r(dst,"swin"),dst.forEach(t),xto=r(Kye," \u2014 "),$P=n(Kye,"A",{href:!0});var cst=s($P);$to=r(cst,"SwinConfig"),cst.forEach(t),kto=r(Kye," (Swin Transformer model)"),Kye.forEach(t),Sto=i(L),Lg=n(L,"LI",{});var Zye=s(Lg);Lse=n(Zye,"STRONG",{});var mst=s(Lse);Rto=r(mst,"t5"),mst.forEach(t),Pto=r(Zye," \u2014 "),kP=n(Zye,"A",{href:!0});var fst=s(kP);Bto=r(fst,"T5Config"),fst.forEach(t),Nto=r(Zye," (T5 model)"),Zye.forEach(t),Ito=i(L),yg=n(L,"LI",{});var e8e=s(yg);yse=n(e8e,"STRONG",{});var gst=s(yse);qto=r(gst,"tapas"),gst.forEach(t),jto=r(e8e," \u2014 "),SP=n(e8e,"A",{href:!0});var hst=s(SP);Dto=r(hst,"TapasConfig"),hst.forEach(t),Gto=r(e8e," (TAPAS model)"),e8e.forEach(t),Oto=i(L),xg=n(L,"LI",{});var o8e=s(xg);xse=n(o8e,"STRONG",{});var ust=s(xse);Vto=r(ust,"trajectory_transformer"),ust.forEach(t),Xto=r(o8e," \u2014 "),RP=n(o8e,"A",{href:!0});var pst=s(RP);zto=r(pst,"TrajectoryTransformerConfig"),pst.forEach(t),Qto=r(o8e," (Trajectory Transformer model)"),o8e.forEach(t),Wto=i(L),$g=n(L,"LI",{});var r8e=s($g);$se=n(r8e,"STRONG",{});var _st=s($se);Hto=r(_st,"transfo-xl"),_st.forEach(t),Uto=r(r8e," \u2014 "),PP=n(r8e,"A",{href:!0});var bst=s(PP);Jto=r(bst,"TransfoXLConfig"),bst.forEach(t),Yto=r(r8e," (Transformer-XL model)"),r8e.forEach(t),Kto=i(L),kg=n(L,"LI",{});var t8e=s(kg);kse=n(t8e,"STRONG",{});var vst=s(kse);Zto=r(vst,"trocr"),vst.forEach(t),eao=r(t8e," \u2014 "),BP=n(t8e,"A",{href:!0});var Fst=s(BP);oao=r(Fst,"TrOCRConfig"),Fst.forEach(t),rao=r(t8e," (TrOCR model)"),t8e.forEach(t),tao=i(L),Sg=n(L,"LI",{});var a8e=s(Sg);Sse=n(a8e,"STRONG",{});var Tst=s(Sse);aao=r(Tst,"unispeech"),Tst.forEach(t),nao=r(a8e," \u2014 "),NP=n(a8e,"A",{href:!0});var Mst=s(NP);sao=r(Mst,"UniSpeechConfig"),Mst.forEach(t),lao=r(a8e," (UniSpeech model)"),a8e.forEach(t),iao=i(L),Rg=n(L,"LI",{});var n8e=s(Rg);Rse=n(n8e,"STRONG",{});var Est=s(Rse);dao=r(Est,"unispeech-sat"),Est.forEach(t),cao=r(n8e," \u2014 "),IP=n(n8e,"A",{href:!0});var Cst=s(IP);mao=r(Cst,"UniSpeechSatConfig"),Cst.forEach(t),fao=r(n8e," (UniSpeechSat model)"),n8e.forEach(t),gao=i(L),Pg=n(L,"LI",{});var s8e=s(Pg);Pse=n(s8e,"STRONG",{});var wst=s(Pse);hao=r(wst,"van"),wst.forEach(t),uao=r(s8e," \u2014 "),qP=n(s8e,"A",{href:!0});var Ast=s(qP);pao=r(Ast,"VanConfig"),Ast.forEach(t),_ao=r(s8e," (VAN model)"),s8e.forEach(t),bao=i(L),Bg=n(L,"LI",{});var l8e=s(Bg);Bse=n(l8e,"STRONG",{});var Lst=s(Bse);vao=r(Lst,"vilt"),Lst.forEach(t),Fao=r(l8e," \u2014 "),jP=n(l8e,"A",{href:!0});var yst=s(jP);Tao=r(yst,"ViltConfig"),yst.forEach(t),Mao=r(l8e," (ViLT model)"),l8e.forEach(t),Eao=i(L),Ng=n(L,"LI",{});var i8e=s(Ng);Nse=n(i8e,"STRONG",{});var xst=s(Nse);Cao=r(xst,"vision-encoder-decoder"),xst.forEach(t),wao=r(i8e," \u2014 "),DP=n(i8e,"A",{href:!0});var $st=s(DP);Aao=r($st,"VisionEncoderDecoderConfig"),$st.forEach(t),Lao=r(i8e," (Vision Encoder decoder model)"),i8e.forEach(t),yao=i(L),Ig=n(L,"LI",{});var d8e=s(Ig);Ise=n(d8e,"STRONG",{});var kst=s(Ise);xao=r(kst,"vision-text-dual-encoder"),kst.forEach(t),$ao=r(d8e," \u2014 "),GP=n(d8e,"A",{href:!0});var Sst=s(GP);kao=r(Sst,"VisionTextDualEncoderConfig"),Sst.forEach(t),Sao=r(d8e," (VisionTextDualEncoder model)"),d8e.forEach(t),Rao=i(L),qg=n(L,"LI",{});var c8e=s(qg);qse=n(c8e,"STRONG",{});var Rst=s(qse);Pao=r(Rst,"visual_bert"),Rst.forEach(t),Bao=r(c8e," \u2014 "),OP=n(c8e,"A",{href:!0});var Pst=s(OP);Nao=r(Pst,"VisualBertConfig"),Pst.forEach(t),Iao=r(c8e," (VisualBERT model)"),c8e.forEach(t),qao=i(L),jg=n(L,"LI",{});var m8e=s(jg);jse=n(m8e,"STRONG",{});var Bst=s(jse);jao=r(Bst,"vit"),Bst.forEach(t),Dao=r(m8e," \u2014 "),VP=n(m8e,"A",{href:!0});var Nst=s(VP);Gao=r(Nst,"ViTConfig"),Nst.forEach(t),Oao=r(m8e," (ViT model)"),m8e.forEach(t),Vao=i(L),Dg=n(L,"LI",{});var f8e=s(Dg);Dse=n(f8e,"STRONG",{});var Ist=s(Dse);Xao=r(Ist,"vit_mae"),Ist.forEach(t),zao=r(f8e," \u2014 "),XP=n(f8e,"A",{href:!0});var qst=s(XP);Qao=r(qst,"ViTMAEConfig"),qst.forEach(t),Wao=r(f8e," (ViTMAE model)"),f8e.forEach(t),Hao=i(L),Gg=n(L,"LI",{});var g8e=s(Gg);Gse=n(g8e,"STRONG",{});var jst=s(Gse);Uao=r(jst,"wav2vec2"),jst.forEach(t),Jao=r(g8e," \u2014 "),zP=n(g8e,"A",{href:!0});var Dst=s(zP);Yao=r(Dst,"Wav2Vec2Config"),Dst.forEach(t),Kao=r(g8e," (Wav2Vec2 model)"),g8e.forEach(t),Zao=i(L),Og=n(L,"LI",{});var h8e=s(Og);Ose=n(h8e,"STRONG",{});var Gst=s(Ose);eno=r(Gst,"wav2vec2-conformer"),Gst.forEach(t),ono=r(h8e," \u2014 "),QP=n(h8e,"A",{href:!0});var Ost=s(QP);rno=r(Ost,"Wav2Vec2ConformerConfig"),Ost.forEach(t),tno=r(h8e," (Wav2Vec2-Conformer model)"),h8e.forEach(t),ano=i(L),Vg=n(L,"LI",{});var u8e=s(Vg);Vse=n(u8e,"STRONG",{});var Vst=s(Vse);nno=r(Vst,"wavlm"),Vst.forEach(t),sno=r(u8e," \u2014 "),WP=n(u8e,"A",{href:!0});var Xst=s(WP);lno=r(Xst,"WavLMConfig"),Xst.forEach(t),ino=r(u8e," (WavLM model)"),u8e.forEach(t),dno=i(L),Xg=n(L,"LI",{});var p8e=s(Xg);Xse=n(p8e,"STRONG",{});var zst=s(Xse);cno=r(zst,"xglm"),zst.forEach(t),mno=r(p8e," \u2014 "),HP=n(p8e,"A",{href:!0});var Qst=s(HP);fno=r(Qst,"XGLMConfig"),Qst.forEach(t),gno=r(p8e," (XGLM model)"),p8e.forEach(t),hno=i(L),zg=n(L,"LI",{});var _8e=s(zg);zse=n(_8e,"STRONG",{});var Wst=s(zse);uno=r(Wst,"xlm"),Wst.forEach(t),pno=r(_8e," \u2014 "),UP=n(_8e,"A",{href:!0});var Hst=s(UP);_no=r(Hst,"XLMConfig"),Hst.forEach(t),bno=r(_8e," (XLM model)"),_8e.forEach(t),vno=i(L),Qg=n(L,"LI",{});var b8e=s(Qg);Qse=n(b8e,"STRONG",{});var Ust=s(Qse);Fno=r(Ust,"xlm-prophetnet"),Ust.forEach(t),Tno=r(b8e," \u2014 "),JP=n(b8e,"A",{href:!0});var Jst=s(JP);Mno=r(Jst,"XLMProphetNetConfig"),Jst.forEach(t),Eno=r(b8e," (XLM-ProphetNet model)"),b8e.forEach(t),Cno=i(L),Wg=n(L,"LI",{});var v8e=s(Wg);Wse=n(v8e,"STRONG",{});var Yst=s(Wse);wno=r(Yst,"xlm-roberta"),Yst.forEach(t),Ano=r(v8e," \u2014 "),YP=n(v8e,"A",{href:!0});var Kst=s(YP);Lno=r(Kst,"XLMRobertaConfig"),Kst.forEach(t),yno=r(v8e," (XLM-RoBERTa model)"),v8e.forEach(t),xno=i(L),Hg=n(L,"LI",{});var F8e=s(Hg);Hse=n(F8e,"STRONG",{});var Zst=s(Hse);$no=r(Zst,"xlm-roberta-xl"),Zst.forEach(t),kno=r(F8e," \u2014 "),KP=n(F8e,"A",{href:!0});var elt=s(KP);Sno=r(elt,"XLMRobertaXLConfig"),elt.forEach(t),Rno=r(F8e," (XLM-RoBERTa-XL model)"),F8e.forEach(t),Pno=i(L),Ug=n(L,"LI",{});var T8e=s(Ug);Use=n(T8e,"STRONG",{});var olt=s(Use);Bno=r(olt,"xlnet"),olt.forEach(t),Nno=r(T8e," \u2014 "),ZP=n(T8e,"A",{href:!0});var rlt=s(ZP);Ino=r(rlt,"XLNetConfig"),rlt.forEach(t),qno=r(T8e," (XLNet model)"),T8e.forEach(t),jno=i(L),Jg=n(L,"LI",{});var M8e=s(Jg);Jse=n(M8e,"STRONG",{});var tlt=s(Jse);Dno=r(tlt,"yolos"),tlt.forEach(t),Gno=r(M8e," \u2014 "),eB=n(M8e,"A",{href:!0});var alt=s(eB);Ono=r(alt,"YolosConfig"),alt.forEach(t),Vno=r(M8e," (YOLOS model)"),M8e.forEach(t),Xno=i(L),Yg=n(L,"LI",{});var E8e=s(Yg);Yse=n(E8e,"STRONG",{});var nlt=s(Yse);zno=r(nlt,"yoso"),nlt.forEach(t),Qno=r(E8e," \u2014 "),oB=n(E8e,"A",{href:!0});var slt=s(oB);Wno=r(slt,"YosoConfig"),slt.forEach(t),Hno=r(E8e," (YOSO model)"),E8e.forEach(t),L.forEach(t),Uno=i(st),T(Kg.$$.fragment,st),st.forEach(t),Jno=i(nt),Zg=n(nt,"DIV",{class:!0});var pQe=s(Zg);T(hy.$$.fragment,pQe),Yno=i(pQe),Kse=n(pQe,"P",{});var llt=s(Kse);Kno=r(llt,"Register a new configuration for this class."),llt.forEach(t),pQe.forEach(t),nt.forEach(t),_Xe=i(m),qi=n(m,"H2",{class:!0});var _Qe=s(qi);eh=n(_Qe,"A",{id:!0,class:!0,href:!0});var ilt=s(eh);Zse=n(ilt,"SPAN",{});var dlt=s(Zse);T(uy.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),Zno=i(_Qe),ele=n(_Qe,"SPAN",{});var clt=s(ele);eso=r(clt,"AutoTokenizer"),clt.forEach(t),_Qe.forEach(t),bXe=i(m),Lo=n(m,"DIV",{class:!0});var Zs=s(Lo);T(py.$$.fragment,Zs),oso=i(Zs),_y=n(Zs,"P",{});var bQe=s(_y);rso=r(bQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=n(bQe,"A",{href:!0});var mlt=s(rB);tso=r(mlt,"AutoTokenizer.from_pretrained()"),mlt.forEach(t),aso=r(bQe," class method."),bQe.forEach(t),nso=i(Zs),by=n(Zs,"P",{});var vQe=s(by);sso=r(vQe,"This class cannot be instantiated directly using "),ole=n(vQe,"CODE",{});var flt=s(ole);lso=r(flt,"__init__()"),flt.forEach(t),iso=r(vQe," (throws an error)."),vQe.forEach(t),dso=i(Zs),yr=n(Zs,"DIV",{class:!0});var el=s(yr);T(vy.$$.fragment,el),cso=i(el),rle=n(el,"P",{});var glt=s(rle);mso=r(glt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),glt.forEach(t),fso=i(el),Pa=n(el,"P",{});var d7=s(Pa);gso=r(d7,"The tokenizer class to instantiate is selected based on the "),tle=n(d7,"CODE",{});var hlt=s(tle);hso=r(hlt,"model_type"),hlt.forEach(t),uso=r(d7,` property of the config object (either
passed as an argument or loaded from `),ale=n(d7,"CODE",{});var ult=s(ale);pso=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),_so=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=n(d7,"CODE",{});var plt=s(nle);bso=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),vso=r(d7,":"),d7.forEach(t),Fso=i(el),k=n(el,"UL",{});var S=s(k);jn=n(S,"LI",{});var wk=s(jn);sle=n(wk,"STRONG",{});var _lt=s(sle);Tso=r(_lt,"albert"),_lt.forEach(t),Mso=r(wk," \u2014 "),tB=n(wk,"A",{href:!0});var blt=s(tB);Eso=r(blt,"AlbertTokenizer"),blt.forEach(t),Cso=r(wk," or "),aB=n(wk,"A",{href:!0});var vlt=s(aB);wso=r(vlt,"AlbertTokenizerFast"),vlt.forEach(t),Aso=r(wk," (ALBERT model)"),wk.forEach(t),Lso=i(S),Dn=n(S,"LI",{});var Ak=s(Dn);lle=n(Ak,"STRONG",{});var Flt=s(lle);yso=r(Flt,"bart"),Flt.forEach(t),xso=r(Ak," \u2014 "),nB=n(Ak,"A",{href:!0});var Tlt=s(nB);$so=r(Tlt,"BartTokenizer"),Tlt.forEach(t),kso=r(Ak," or "),sB=n(Ak,"A",{href:!0});var Mlt=s(sB);Sso=r(Mlt,"BartTokenizerFast"),Mlt.forEach(t),Rso=r(Ak," (BART model)"),Ak.forEach(t),Pso=i(S),Gn=n(S,"LI",{});var Lk=s(Gn);ile=n(Lk,"STRONG",{});var Elt=s(ile);Bso=r(Elt,"barthez"),Elt.forEach(t),Nso=r(Lk," \u2014 "),lB=n(Lk,"A",{href:!0});var Clt=s(lB);Iso=r(Clt,"BarthezTokenizer"),Clt.forEach(t),qso=r(Lk," or "),iB=n(Lk,"A",{href:!0});var wlt=s(iB);jso=r(wlt,"BarthezTokenizerFast"),wlt.forEach(t),Dso=r(Lk," (BARThez model)"),Lk.forEach(t),Gso=i(S),oh=n(S,"LI",{});var C8e=s(oh);dle=n(C8e,"STRONG",{});var Alt=s(dle);Oso=r(Alt,"bartpho"),Alt.forEach(t),Vso=r(C8e," \u2014 "),dB=n(C8e,"A",{href:!0});var Llt=s(dB);Xso=r(Llt,"BartphoTokenizer"),Llt.forEach(t),zso=r(C8e," (BARTpho model)"),C8e.forEach(t),Qso=i(S),On=n(S,"LI",{});var yk=s(On);cle=n(yk,"STRONG",{});var ylt=s(cle);Wso=r(ylt,"bert"),ylt.forEach(t),Hso=r(yk," \u2014 "),cB=n(yk,"A",{href:!0});var xlt=s(cB);Uso=r(xlt,"BertTokenizer"),xlt.forEach(t),Jso=r(yk," or "),mB=n(yk,"A",{href:!0});var $lt=s(mB);Yso=r($lt,"BertTokenizerFast"),$lt.forEach(t),Kso=r(yk," (BERT model)"),yk.forEach(t),Zso=i(S),rh=n(S,"LI",{});var w8e=s(rh);mle=n(w8e,"STRONG",{});var klt=s(mle);elo=r(klt,"bert-generation"),klt.forEach(t),olo=r(w8e," \u2014 "),fB=n(w8e,"A",{href:!0});var Slt=s(fB);rlo=r(Slt,"BertGenerationTokenizer"),Slt.forEach(t),tlo=r(w8e," (Bert Generation model)"),w8e.forEach(t),alo=i(S),th=n(S,"LI",{});var A8e=s(th);fle=n(A8e,"STRONG",{});var Rlt=s(fle);nlo=r(Rlt,"bert-japanese"),Rlt.forEach(t),slo=r(A8e," \u2014 "),gB=n(A8e,"A",{href:!0});var Plt=s(gB);llo=r(Plt,"BertJapaneseTokenizer"),Plt.forEach(t),ilo=r(A8e," (BertJapanese model)"),A8e.forEach(t),dlo=i(S),ah=n(S,"LI",{});var L8e=s(ah);gle=n(L8e,"STRONG",{});var Blt=s(gle);clo=r(Blt,"bertweet"),Blt.forEach(t),mlo=r(L8e," \u2014 "),hB=n(L8e,"A",{href:!0});var Nlt=s(hB);flo=r(Nlt,"BertweetTokenizer"),Nlt.forEach(t),glo=r(L8e," (BERTweet model)"),L8e.forEach(t),hlo=i(S),Vn=n(S,"LI",{});var xk=s(Vn);hle=n(xk,"STRONG",{});var Ilt=s(hle);ulo=r(Ilt,"big_bird"),Ilt.forEach(t),plo=r(xk," \u2014 "),uB=n(xk,"A",{href:!0});var qlt=s(uB);_lo=r(qlt,"BigBirdTokenizer"),qlt.forEach(t),blo=r(xk," or "),pB=n(xk,"A",{href:!0});var jlt=s(pB);vlo=r(jlt,"BigBirdTokenizerFast"),jlt.forEach(t),Flo=r(xk," (BigBird model)"),xk.forEach(t),Tlo=i(S),Xn=n(S,"LI",{});var $k=s(Xn);ule=n($k,"STRONG",{});var Dlt=s(ule);Mlo=r(Dlt,"bigbird_pegasus"),Dlt.forEach(t),Elo=r($k," \u2014 "),_B=n($k,"A",{href:!0});var Glt=s(_B);Clo=r(Glt,"PegasusTokenizer"),Glt.forEach(t),wlo=r($k," or "),bB=n($k,"A",{href:!0});var Olt=s(bB);Alo=r(Olt,"PegasusTokenizerFast"),Olt.forEach(t),Llo=r($k," (BigBird-Pegasus model)"),$k.forEach(t),ylo=i(S),zn=n(S,"LI",{});var kk=s(zn);ple=n(kk,"STRONG",{});var Vlt=s(ple);xlo=r(Vlt,"blenderbot"),Vlt.forEach(t),$lo=r(kk," \u2014 "),vB=n(kk,"A",{href:!0});var Xlt=s(vB);klo=r(Xlt,"BlenderbotTokenizer"),Xlt.forEach(t),Slo=r(kk," or "),FB=n(kk,"A",{href:!0});var zlt=s(FB);Rlo=r(zlt,"BlenderbotTokenizerFast"),zlt.forEach(t),Plo=r(kk," (Blenderbot model)"),kk.forEach(t),Blo=i(S),nh=n(S,"LI",{});var y8e=s(nh);_le=n(y8e,"STRONG",{});var Qlt=s(_le);Nlo=r(Qlt,"blenderbot-small"),Qlt.forEach(t),Ilo=r(y8e," \u2014 "),TB=n(y8e,"A",{href:!0});var Wlt=s(TB);qlo=r(Wlt,"BlenderbotSmallTokenizer"),Wlt.forEach(t),jlo=r(y8e," (BlenderbotSmall model)"),y8e.forEach(t),Dlo=i(S),sh=n(S,"LI",{});var x8e=s(sh);ble=n(x8e,"STRONG",{});var Hlt=s(ble);Glo=r(Hlt,"bloom"),Hlt.forEach(t),Olo=r(x8e," \u2014 "),MB=n(x8e,"A",{href:!0});var Ult=s(MB);Vlo=r(Ult,"BloomTokenizerFast"),Ult.forEach(t),Xlo=r(x8e," (BLOOM model)"),x8e.forEach(t),zlo=i(S),lh=n(S,"LI",{});var $8e=s(lh);vle=n($8e,"STRONG",{});var Jlt=s(vle);Qlo=r(Jlt,"byt5"),Jlt.forEach(t),Wlo=r($8e," \u2014 "),EB=n($8e,"A",{href:!0});var Ylt=s(EB);Hlo=r(Ylt,"ByT5Tokenizer"),Ylt.forEach(t),Ulo=r($8e," (ByT5 model)"),$8e.forEach(t),Jlo=i(S),Qn=n(S,"LI",{});var Sk=s(Qn);Fle=n(Sk,"STRONG",{});var Klt=s(Fle);Ylo=r(Klt,"camembert"),Klt.forEach(t),Klo=r(Sk," \u2014 "),CB=n(Sk,"A",{href:!0});var Zlt=s(CB);Zlo=r(Zlt,"CamembertTokenizer"),Zlt.forEach(t),eio=r(Sk," or "),wB=n(Sk,"A",{href:!0});var eit=s(wB);oio=r(eit,"CamembertTokenizerFast"),eit.forEach(t),rio=r(Sk," (CamemBERT model)"),Sk.forEach(t),tio=i(S),ih=n(S,"LI",{});var k8e=s(ih);Tle=n(k8e,"STRONG",{});var oit=s(Tle);aio=r(oit,"canine"),oit.forEach(t),nio=r(k8e," \u2014 "),AB=n(k8e,"A",{href:!0});var rit=s(AB);sio=r(rit,"CanineTokenizer"),rit.forEach(t),lio=r(k8e," (CANINE model)"),k8e.forEach(t),iio=i(S),Wn=n(S,"LI",{});var Rk=s(Wn);Mle=n(Rk,"STRONG",{});var tit=s(Mle);dio=r(tit,"clip"),tit.forEach(t),cio=r(Rk," \u2014 "),LB=n(Rk,"A",{href:!0});var ait=s(LB);mio=r(ait,"CLIPTokenizer"),ait.forEach(t),fio=r(Rk," or "),yB=n(Rk,"A",{href:!0});var nit=s(yB);gio=r(nit,"CLIPTokenizerFast"),nit.forEach(t),hio=r(Rk," (CLIP model)"),Rk.forEach(t),uio=i(S),Hn=n(S,"LI",{});var Pk=s(Hn);Ele=n(Pk,"STRONG",{});var sit=s(Ele);pio=r(sit,"codegen"),sit.forEach(t),_io=r(Pk," \u2014 "),xB=n(Pk,"A",{href:!0});var lit=s(xB);bio=r(lit,"CodeGenTokenizer"),lit.forEach(t),vio=r(Pk," or "),$B=n(Pk,"A",{href:!0});var iit=s($B);Fio=r(iit,"CodeGenTokenizerFast"),iit.forEach(t),Tio=r(Pk," (CodeGen model)"),Pk.forEach(t),Mio=i(S),Un=n(S,"LI",{});var Bk=s(Un);Cle=n(Bk,"STRONG",{});var dit=s(Cle);Eio=r(dit,"convbert"),dit.forEach(t),Cio=r(Bk," \u2014 "),kB=n(Bk,"A",{href:!0});var cit=s(kB);wio=r(cit,"ConvBertTokenizer"),cit.forEach(t),Aio=r(Bk," or "),SB=n(Bk,"A",{href:!0});var mit=s(SB);Lio=r(mit,"ConvBertTokenizerFast"),mit.forEach(t),yio=r(Bk," (ConvBERT model)"),Bk.forEach(t),xio=i(S),Jn=n(S,"LI",{});var Nk=s(Jn);wle=n(Nk,"STRONG",{});var fit=s(wle);$io=r(fit,"cpm"),fit.forEach(t),kio=r(Nk," \u2014 "),RB=n(Nk,"A",{href:!0});var git=s(RB);Sio=r(git,"CpmTokenizer"),git.forEach(t),Rio=r(Nk," or "),PB=n(Nk,"A",{href:!0});var hit=s(PB);Pio=r(hit,"CpmTokenizerFast"),hit.forEach(t),Bio=r(Nk," (CPM model)"),Nk.forEach(t),Nio=i(S),dh=n(S,"LI",{});var S8e=s(dh);Ale=n(S8e,"STRONG",{});var uit=s(Ale);Iio=r(uit,"ctrl"),uit.forEach(t),qio=r(S8e," \u2014 "),BB=n(S8e,"A",{href:!0});var pit=s(BB);jio=r(pit,"CTRLTokenizer"),pit.forEach(t),Dio=r(S8e," (CTRL model)"),S8e.forEach(t),Gio=i(S),Yn=n(S,"LI",{});var Ik=s(Yn);Lle=n(Ik,"STRONG",{});var _it=s(Lle);Oio=r(_it,"data2vec-text"),_it.forEach(t),Vio=r(Ik," \u2014 "),NB=n(Ik,"A",{href:!0});var bit=s(NB);Xio=r(bit,"RobertaTokenizer"),bit.forEach(t),zio=r(Ik," or "),IB=n(Ik,"A",{href:!0});var vit=s(IB);Qio=r(vit,"RobertaTokenizerFast"),vit.forEach(t),Wio=r(Ik," (Data2VecText model)"),Ik.forEach(t),Hio=i(S),Kn=n(S,"LI",{});var qk=s(Kn);yle=n(qk,"STRONG",{});var Fit=s(yle);Uio=r(Fit,"deberta"),Fit.forEach(t),Jio=r(qk," \u2014 "),qB=n(qk,"A",{href:!0});var Tit=s(qB);Yio=r(Tit,"DebertaTokenizer"),Tit.forEach(t),Kio=r(qk," or "),jB=n(qk,"A",{href:!0});var Mit=s(jB);Zio=r(Mit,"DebertaTokenizerFast"),Mit.forEach(t),edo=r(qk," (DeBERTa model)"),qk.forEach(t),odo=i(S),Zn=n(S,"LI",{});var jk=s(Zn);xle=n(jk,"STRONG",{});var Eit=s(xle);rdo=r(Eit,"deberta-v2"),Eit.forEach(t),tdo=r(jk," \u2014 "),DB=n(jk,"A",{href:!0});var Cit=s(DB);ado=r(Cit,"DebertaV2Tokenizer"),Cit.forEach(t),ndo=r(jk," or "),GB=n(jk,"A",{href:!0});var wit=s(GB);sdo=r(wit,"DebertaV2TokenizerFast"),wit.forEach(t),ldo=r(jk," (DeBERTa-v2 model)"),jk.forEach(t),ido=i(S),es=n(S,"LI",{});var Dk=s(es);$le=n(Dk,"STRONG",{});var Ait=s($le);ddo=r(Ait,"distilbert"),Ait.forEach(t),cdo=r(Dk," \u2014 "),OB=n(Dk,"A",{href:!0});var Lit=s(OB);mdo=r(Lit,"DistilBertTokenizer"),Lit.forEach(t),fdo=r(Dk," or "),VB=n(Dk,"A",{href:!0});var yit=s(VB);gdo=r(yit,"DistilBertTokenizerFast"),yit.forEach(t),hdo=r(Dk," (DistilBERT model)"),Dk.forEach(t),udo=i(S),os=n(S,"LI",{});var Gk=s(os);kle=n(Gk,"STRONG",{});var xit=s(kle);pdo=r(xit,"dpr"),xit.forEach(t),_do=r(Gk," \u2014 "),XB=n(Gk,"A",{href:!0});var $it=s(XB);bdo=r($it,"DPRQuestionEncoderTokenizer"),$it.forEach(t),vdo=r(Gk," or "),zB=n(Gk,"A",{href:!0});var kit=s(zB);Fdo=r(kit,"DPRQuestionEncoderTokenizerFast"),kit.forEach(t),Tdo=r(Gk," (DPR model)"),Gk.forEach(t),Mdo=i(S),rs=n(S,"LI",{});var Ok=s(rs);Sle=n(Ok,"STRONG",{});var Sit=s(Sle);Edo=r(Sit,"electra"),Sit.forEach(t),Cdo=r(Ok," \u2014 "),QB=n(Ok,"A",{href:!0});var Rit=s(QB);wdo=r(Rit,"ElectraTokenizer"),Rit.forEach(t),Ado=r(Ok," or "),WB=n(Ok,"A",{href:!0});var Pit=s(WB);Ldo=r(Pit,"ElectraTokenizerFast"),Pit.forEach(t),ydo=r(Ok," (ELECTRA model)"),Ok.forEach(t),xdo=i(S),ch=n(S,"LI",{});var R8e=s(ch);Rle=n(R8e,"STRONG",{});var Bit=s(Rle);$do=r(Bit,"flaubert"),Bit.forEach(t),kdo=r(R8e," \u2014 "),HB=n(R8e,"A",{href:!0});var Nit=s(HB);Sdo=r(Nit,"FlaubertTokenizer"),Nit.forEach(t),Rdo=r(R8e," (FlauBERT model)"),R8e.forEach(t),Pdo=i(S),ts=n(S,"LI",{});var Vk=s(ts);Ple=n(Vk,"STRONG",{});var Iit=s(Ple);Bdo=r(Iit,"fnet"),Iit.forEach(t),Ndo=r(Vk," \u2014 "),UB=n(Vk,"A",{href:!0});var qit=s(UB);Ido=r(qit,"FNetTokenizer"),qit.forEach(t),qdo=r(Vk," or "),JB=n(Vk,"A",{href:!0});var jit=s(JB);jdo=r(jit,"FNetTokenizerFast"),jit.forEach(t),Ddo=r(Vk," (FNet model)"),Vk.forEach(t),Gdo=i(S),mh=n(S,"LI",{});var P8e=s(mh);Ble=n(P8e,"STRONG",{});var Dit=s(Ble);Odo=r(Dit,"fsmt"),Dit.forEach(t),Vdo=r(P8e," \u2014 "),YB=n(P8e,"A",{href:!0});var Git=s(YB);Xdo=r(Git,"FSMTTokenizer"),Git.forEach(t),zdo=r(P8e," (FairSeq Machine-Translation model)"),P8e.forEach(t),Qdo=i(S),as=n(S,"LI",{});var Xk=s(as);Nle=n(Xk,"STRONG",{});var Oit=s(Nle);Wdo=r(Oit,"funnel"),Oit.forEach(t),Hdo=r(Xk," \u2014 "),KB=n(Xk,"A",{href:!0});var Vit=s(KB);Udo=r(Vit,"FunnelTokenizer"),Vit.forEach(t),Jdo=r(Xk," or "),ZB=n(Xk,"A",{href:!0});var Xit=s(ZB);Ydo=r(Xit,"FunnelTokenizerFast"),Xit.forEach(t),Kdo=r(Xk," (Funnel Transformer model)"),Xk.forEach(t),Zdo=i(S),ns=n(S,"LI",{});var zk=s(ns);Ile=n(zk,"STRONG",{});var zit=s(Ile);eco=r(zit,"gpt2"),zit.forEach(t),oco=r(zk," \u2014 "),eN=n(zk,"A",{href:!0});var Qit=s(eN);rco=r(Qit,"GPT2Tokenizer"),Qit.forEach(t),tco=r(zk," or "),oN=n(zk,"A",{href:!0});var Wit=s(oN);aco=r(Wit,"GPT2TokenizerFast"),Wit.forEach(t),nco=r(zk," (OpenAI GPT-2 model)"),zk.forEach(t),sco=i(S),ss=n(S,"LI",{});var Qk=s(ss);qle=n(Qk,"STRONG",{});var Hit=s(qle);lco=r(Hit,"gpt_neo"),Hit.forEach(t),ico=r(Qk," \u2014 "),rN=n(Qk,"A",{href:!0});var Uit=s(rN);dco=r(Uit,"GPT2Tokenizer"),Uit.forEach(t),cco=r(Qk," or "),tN=n(Qk,"A",{href:!0});var Jit=s(tN);mco=r(Jit,"GPT2TokenizerFast"),Jit.forEach(t),fco=r(Qk," (GPT Neo model)"),Qk.forEach(t),gco=i(S),fh=n(S,"LI",{});var B8e=s(fh);jle=n(B8e,"STRONG",{});var Yit=s(jle);hco=r(Yit,"gpt_neox"),Yit.forEach(t),uco=r(B8e," \u2014 "),aN=n(B8e,"A",{href:!0});var Kit=s(aN);pco=r(Kit,"GPTNeoXTokenizerFast"),Kit.forEach(t),_co=r(B8e," (GPT NeoX model)"),B8e.forEach(t),bco=i(S),ls=n(S,"LI",{});var Wk=s(ls);Dle=n(Wk,"STRONG",{});var Zit=s(Dle);vco=r(Zit,"gptj"),Zit.forEach(t),Fco=r(Wk," \u2014 "),nN=n(Wk,"A",{href:!0});var edt=s(nN);Tco=r(edt,"GPT2Tokenizer"),edt.forEach(t),Mco=r(Wk," or "),sN=n(Wk,"A",{href:!0});var odt=s(sN);Eco=r(odt,"GPT2TokenizerFast"),odt.forEach(t),Cco=r(Wk," (GPT-J model)"),Wk.forEach(t),wco=i(S),is=n(S,"LI",{});var Hk=s(is);Gle=n(Hk,"STRONG",{});var rdt=s(Gle);Aco=r(rdt,"groupvit"),rdt.forEach(t),Lco=r(Hk," \u2014 "),lN=n(Hk,"A",{href:!0});var tdt=s(lN);yco=r(tdt,"CLIPTokenizer"),tdt.forEach(t),xco=r(Hk," or "),iN=n(Hk,"A",{href:!0});var adt=s(iN);$co=r(adt,"CLIPTokenizerFast"),adt.forEach(t),kco=r(Hk," (GroupViT model)"),Hk.forEach(t),Sco=i(S),ds=n(S,"LI",{});var Uk=s(ds);Ole=n(Uk,"STRONG",{});var ndt=s(Ole);Rco=r(ndt,"herbert"),ndt.forEach(t),Pco=r(Uk," \u2014 "),dN=n(Uk,"A",{href:!0});var sdt=s(dN);Bco=r(sdt,"HerbertTokenizer"),sdt.forEach(t),Nco=r(Uk," or "),cN=n(Uk,"A",{href:!0});var ldt=s(cN);Ico=r(ldt,"HerbertTokenizerFast"),ldt.forEach(t),qco=r(Uk," (HerBERT model)"),Uk.forEach(t),jco=i(S),gh=n(S,"LI",{});var N8e=s(gh);Vle=n(N8e,"STRONG",{});var idt=s(Vle);Dco=r(idt,"hubert"),idt.forEach(t),Gco=r(N8e," \u2014 "),mN=n(N8e,"A",{href:!0});var ddt=s(mN);Oco=r(ddt,"Wav2Vec2CTCTokenizer"),ddt.forEach(t),Vco=r(N8e," (Hubert model)"),N8e.forEach(t),Xco=i(S),cs=n(S,"LI",{});var Jk=s(cs);Xle=n(Jk,"STRONG",{});var cdt=s(Xle);zco=r(cdt,"ibert"),cdt.forEach(t),Qco=r(Jk," \u2014 "),fN=n(Jk,"A",{href:!0});var mdt=s(fN);Wco=r(mdt,"RobertaTokenizer"),mdt.forEach(t),Hco=r(Jk," or "),gN=n(Jk,"A",{href:!0});var fdt=s(gN);Uco=r(fdt,"RobertaTokenizerFast"),fdt.forEach(t),Jco=r(Jk," (I-BERT model)"),Jk.forEach(t),Yco=i(S),ms=n(S,"LI",{});var Yk=s(ms);zle=n(Yk,"STRONG",{});var gdt=s(zle);Kco=r(gdt,"layoutlm"),gdt.forEach(t),Zco=r(Yk," \u2014 "),hN=n(Yk,"A",{href:!0});var hdt=s(hN);emo=r(hdt,"LayoutLMTokenizer"),hdt.forEach(t),omo=r(Yk," or "),uN=n(Yk,"A",{href:!0});var udt=s(uN);rmo=r(udt,"LayoutLMTokenizerFast"),udt.forEach(t),tmo=r(Yk," (LayoutLM model)"),Yk.forEach(t),amo=i(S),fs=n(S,"LI",{});var Kk=s(fs);Qle=n(Kk,"STRONG",{});var pdt=s(Qle);nmo=r(pdt,"layoutlmv2"),pdt.forEach(t),smo=r(Kk," \u2014 "),pN=n(Kk,"A",{href:!0});var _dt=s(pN);lmo=r(_dt,"LayoutLMv2Tokenizer"),_dt.forEach(t),imo=r(Kk," or "),_N=n(Kk,"A",{href:!0});var bdt=s(_N);dmo=r(bdt,"LayoutLMv2TokenizerFast"),bdt.forEach(t),cmo=r(Kk," (LayoutLMv2 model)"),Kk.forEach(t),mmo=i(S),gs=n(S,"LI",{});var Zk=s(gs);Wle=n(Zk,"STRONG",{});var vdt=s(Wle);fmo=r(vdt,"layoutlmv3"),vdt.forEach(t),gmo=r(Zk," \u2014 "),bN=n(Zk,"A",{href:!0});var Fdt=s(bN);hmo=r(Fdt,"LayoutLMv3Tokenizer"),Fdt.forEach(t),umo=r(Zk," or "),vN=n(Zk,"A",{href:!0});var Tdt=s(vN);pmo=r(Tdt,"LayoutLMv3TokenizerFast"),Tdt.forEach(t),_mo=r(Zk," (LayoutLMv3 model)"),Zk.forEach(t),bmo=i(S),hs=n(S,"LI",{});var eS=s(hs);Hle=n(eS,"STRONG",{});var Mdt=s(Hle);vmo=r(Mdt,"layoutxlm"),Mdt.forEach(t),Fmo=r(eS," \u2014 "),FN=n(eS,"A",{href:!0});var Edt=s(FN);Tmo=r(Edt,"LayoutXLMTokenizer"),Edt.forEach(t),Mmo=r(eS," or "),TN=n(eS,"A",{href:!0});var Cdt=s(TN);Emo=r(Cdt,"LayoutXLMTokenizerFast"),Cdt.forEach(t),Cmo=r(eS," (LayoutXLM model)"),eS.forEach(t),wmo=i(S),us=n(S,"LI",{});var oS=s(us);Ule=n(oS,"STRONG",{});var wdt=s(Ule);Amo=r(wdt,"led"),wdt.forEach(t),Lmo=r(oS," \u2014 "),MN=n(oS,"A",{href:!0});var Adt=s(MN);ymo=r(Adt,"LEDTokenizer"),Adt.forEach(t),xmo=r(oS," or "),EN=n(oS,"A",{href:!0});var Ldt=s(EN);$mo=r(Ldt,"LEDTokenizerFast"),Ldt.forEach(t),kmo=r(oS," (LED model)"),oS.forEach(t),Smo=i(S),ps=n(S,"LI",{});var rS=s(ps);Jle=n(rS,"STRONG",{});var ydt=s(Jle);Rmo=r(ydt,"longformer"),ydt.forEach(t),Pmo=r(rS," \u2014 "),CN=n(rS,"A",{href:!0});var xdt=s(CN);Bmo=r(xdt,"LongformerTokenizer"),xdt.forEach(t),Nmo=r(rS," or "),wN=n(rS,"A",{href:!0});var $dt=s(wN);Imo=r($dt,"LongformerTokenizerFast"),$dt.forEach(t),qmo=r(rS," (Longformer model)"),rS.forEach(t),jmo=i(S),_s=n(S,"LI",{});var tS=s(_s);Yle=n(tS,"STRONG",{});var kdt=s(Yle);Dmo=r(kdt,"longt5"),kdt.forEach(t),Gmo=r(tS," \u2014 "),AN=n(tS,"A",{href:!0});var Sdt=s(AN);Omo=r(Sdt,"T5Tokenizer"),Sdt.forEach(t),Vmo=r(tS," or "),LN=n(tS,"A",{href:!0});var Rdt=s(LN);Xmo=r(Rdt,"T5TokenizerFast"),Rdt.forEach(t),zmo=r(tS," (LongT5 model)"),tS.forEach(t),Qmo=i(S),hh=n(S,"LI",{});var I8e=s(hh);Kle=n(I8e,"STRONG",{});var Pdt=s(Kle);Wmo=r(Pdt,"luke"),Pdt.forEach(t),Hmo=r(I8e," \u2014 "),yN=n(I8e,"A",{href:!0});var Bdt=s(yN);Umo=r(Bdt,"LukeTokenizer"),Bdt.forEach(t),Jmo=r(I8e," (LUKE model)"),I8e.forEach(t),Ymo=i(S),bs=n(S,"LI",{});var aS=s(bs);Zle=n(aS,"STRONG",{});var Ndt=s(Zle);Kmo=r(Ndt,"lxmert"),Ndt.forEach(t),Zmo=r(aS," \u2014 "),xN=n(aS,"A",{href:!0});var Idt=s(xN);efo=r(Idt,"LxmertTokenizer"),Idt.forEach(t),ofo=r(aS," or "),$N=n(aS,"A",{href:!0});var qdt=s($N);rfo=r(qdt,"LxmertTokenizerFast"),qdt.forEach(t),tfo=r(aS," (LXMERT model)"),aS.forEach(t),afo=i(S),uh=n(S,"LI",{});var q8e=s(uh);eie=n(q8e,"STRONG",{});var jdt=s(eie);nfo=r(jdt,"m2m_100"),jdt.forEach(t),sfo=r(q8e," \u2014 "),kN=n(q8e,"A",{href:!0});var Ddt=s(kN);lfo=r(Ddt,"M2M100Tokenizer"),Ddt.forEach(t),ifo=r(q8e," (M2M100 model)"),q8e.forEach(t),dfo=i(S),ph=n(S,"LI",{});var j8e=s(ph);oie=n(j8e,"STRONG",{});var Gdt=s(oie);cfo=r(Gdt,"marian"),Gdt.forEach(t),mfo=r(j8e," \u2014 "),SN=n(j8e,"A",{href:!0});var Odt=s(SN);ffo=r(Odt,"MarianTokenizer"),Odt.forEach(t),gfo=r(j8e," (Marian model)"),j8e.forEach(t),hfo=i(S),vs=n(S,"LI",{});var nS=s(vs);rie=n(nS,"STRONG",{});var Vdt=s(rie);ufo=r(Vdt,"mbart"),Vdt.forEach(t),pfo=r(nS," \u2014 "),RN=n(nS,"A",{href:!0});var Xdt=s(RN);_fo=r(Xdt,"MBartTokenizer"),Xdt.forEach(t),bfo=r(nS," or "),PN=n(nS,"A",{href:!0});var zdt=s(PN);vfo=r(zdt,"MBartTokenizerFast"),zdt.forEach(t),Ffo=r(nS," (mBART model)"),nS.forEach(t),Tfo=i(S),Fs=n(S,"LI",{});var sS=s(Fs);tie=n(sS,"STRONG",{});var Qdt=s(tie);Mfo=r(Qdt,"mbart50"),Qdt.forEach(t),Efo=r(sS," \u2014 "),BN=n(sS,"A",{href:!0});var Wdt=s(BN);Cfo=r(Wdt,"MBart50Tokenizer"),Wdt.forEach(t),wfo=r(sS," or "),NN=n(sS,"A",{href:!0});var Hdt=s(NN);Afo=r(Hdt,"MBart50TokenizerFast"),Hdt.forEach(t),Lfo=r(sS," (mBART-50 model)"),sS.forEach(t),yfo=i(S),Ts=n(S,"LI",{});var lS=s(Ts);aie=n(lS,"STRONG",{});var Udt=s(aie);xfo=r(Udt,"megatron-bert"),Udt.forEach(t),$fo=r(lS," \u2014 "),IN=n(lS,"A",{href:!0});var Jdt=s(IN);kfo=r(Jdt,"BertTokenizer"),Jdt.forEach(t),Sfo=r(lS," or "),qN=n(lS,"A",{href:!0});var Ydt=s(qN);Rfo=r(Ydt,"BertTokenizerFast"),Ydt.forEach(t),Pfo=r(lS," (Megatron-BERT model)"),lS.forEach(t),Bfo=i(S),_h=n(S,"LI",{});var D8e=s(_h);nie=n(D8e,"STRONG",{});var Kdt=s(nie);Nfo=r(Kdt,"mluke"),Kdt.forEach(t),Ifo=r(D8e," \u2014 "),jN=n(D8e,"A",{href:!0});var Zdt=s(jN);qfo=r(Zdt,"MLukeTokenizer"),Zdt.forEach(t),jfo=r(D8e," (mLUKE model)"),D8e.forEach(t),Dfo=i(S),Ms=n(S,"LI",{});var iS=s(Ms);sie=n(iS,"STRONG",{});var ect=s(sie);Gfo=r(ect,"mobilebert"),ect.forEach(t),Ofo=r(iS," \u2014 "),DN=n(iS,"A",{href:!0});var oct=s(DN);Vfo=r(oct,"MobileBertTokenizer"),oct.forEach(t),Xfo=r(iS," or "),GN=n(iS,"A",{href:!0});var rct=s(GN);zfo=r(rct,"MobileBertTokenizerFast"),rct.forEach(t),Qfo=r(iS," (MobileBERT model)"),iS.forEach(t),Wfo=i(S),Es=n(S,"LI",{});var dS=s(Es);lie=n(dS,"STRONG",{});var tct=s(lie);Hfo=r(tct,"mpnet"),tct.forEach(t),Ufo=r(dS," \u2014 "),ON=n(dS,"A",{href:!0});var act=s(ON);Jfo=r(act,"MPNetTokenizer"),act.forEach(t),Yfo=r(dS," or "),VN=n(dS,"A",{href:!0});var nct=s(VN);Kfo=r(nct,"MPNetTokenizerFast"),nct.forEach(t),Zfo=r(dS," (MPNet model)"),dS.forEach(t),ego=i(S),Cs=n(S,"LI",{});var cS=s(Cs);iie=n(cS,"STRONG",{});var sct=s(iie);ogo=r(sct,"mt5"),sct.forEach(t),rgo=r(cS," \u2014 "),XN=n(cS,"A",{href:!0});var lct=s(XN);tgo=r(lct,"MT5Tokenizer"),lct.forEach(t),ago=r(cS," or "),zN=n(cS,"A",{href:!0});var ict=s(zN);ngo=r(ict,"MT5TokenizerFast"),ict.forEach(t),sgo=r(cS," (MT5 model)"),cS.forEach(t),lgo=i(S),ws=n(S,"LI",{});var mS=s(ws);die=n(mS,"STRONG",{});var dct=s(die);igo=r(dct,"mvp"),dct.forEach(t),dgo=r(mS," \u2014 "),QN=n(mS,"A",{href:!0});var cct=s(QN);cgo=r(cct,"MvpTokenizer"),cct.forEach(t),mgo=r(mS," or "),WN=n(mS,"A",{href:!0});var mct=s(WN);fgo=r(mct,"MvpTokenizerFast"),mct.forEach(t),ggo=r(mS," (MVP model)"),mS.forEach(t),hgo=i(S),As=n(S,"LI",{});var fS=s(As);cie=n(fS,"STRONG",{});var fct=s(cie);ugo=r(fct,"nezha"),fct.forEach(t),pgo=r(fS," \u2014 "),HN=n(fS,"A",{href:!0});var gct=s(HN);_go=r(gct,"BertTokenizer"),gct.forEach(t),bgo=r(fS," or "),UN=n(fS,"A",{href:!0});var hct=s(UN);vgo=r(hct,"BertTokenizerFast"),hct.forEach(t),Fgo=r(fS," (Nezha model)"),fS.forEach(t),Tgo=i(S),Ls=n(S,"LI",{});var gS=s(Ls);mie=n(gS,"STRONG",{});var uct=s(mie);Mgo=r(uct,"nllb"),uct.forEach(t),Ego=r(gS," \u2014 "),JN=n(gS,"A",{href:!0});var pct=s(JN);Cgo=r(pct,"NllbTokenizer"),pct.forEach(t),wgo=r(gS," or "),YN=n(gS,"A",{href:!0});var _ct=s(YN);Ago=r(_ct,"NllbTokenizerFast"),_ct.forEach(t),Lgo=r(gS," (NLLB model)"),gS.forEach(t),ygo=i(S),ys=n(S,"LI",{});var hS=s(ys);fie=n(hS,"STRONG",{});var bct=s(fie);xgo=r(bct,"nystromformer"),bct.forEach(t),$go=r(hS," \u2014 "),KN=n(hS,"A",{href:!0});var vct=s(KN);kgo=r(vct,"AlbertTokenizer"),vct.forEach(t),Sgo=r(hS," or "),ZN=n(hS,"A",{href:!0});var Fct=s(ZN);Rgo=r(Fct,"AlbertTokenizerFast"),Fct.forEach(t),Pgo=r(hS," (Nystr\xF6mformer model)"),hS.forEach(t),Bgo=i(S),xs=n(S,"LI",{});var uS=s(xs);gie=n(uS,"STRONG",{});var Tct=s(gie);Ngo=r(Tct,"openai-gpt"),Tct.forEach(t),Igo=r(uS," \u2014 "),eI=n(uS,"A",{href:!0});var Mct=s(eI);qgo=r(Mct,"OpenAIGPTTokenizer"),Mct.forEach(t),jgo=r(uS," or "),oI=n(uS,"A",{href:!0});var Ect=s(oI);Dgo=r(Ect,"OpenAIGPTTokenizerFast"),Ect.forEach(t),Ggo=r(uS," (OpenAI GPT model)"),uS.forEach(t),Ogo=i(S),bh=n(S,"LI",{});var G8e=s(bh);hie=n(G8e,"STRONG",{});var Cct=s(hie);Vgo=r(Cct,"opt"),Cct.forEach(t),Xgo=r(G8e," \u2014 "),rI=n(G8e,"A",{href:!0});var wct=s(rI);zgo=r(wct,"GPT2Tokenizer"),wct.forEach(t),Qgo=r(G8e," (OPT model)"),G8e.forEach(t),Wgo=i(S),$s=n(S,"LI",{});var pS=s($s);uie=n(pS,"STRONG",{});var Act=s(uie);Hgo=r(Act,"pegasus"),Act.forEach(t),Ugo=r(pS," \u2014 "),tI=n(pS,"A",{href:!0});var Lct=s(tI);Jgo=r(Lct,"PegasusTokenizer"),Lct.forEach(t),Ygo=r(pS," or "),aI=n(pS,"A",{href:!0});var yct=s(aI);Kgo=r(yct,"PegasusTokenizerFast"),yct.forEach(t),Zgo=r(pS," (Pegasus model)"),pS.forEach(t),eho=i(S),vh=n(S,"LI",{});var O8e=s(vh);pie=n(O8e,"STRONG",{});var xct=s(pie);oho=r(xct,"perceiver"),xct.forEach(t),rho=r(O8e," \u2014 "),nI=n(O8e,"A",{href:!0});var $ct=s(nI);tho=r($ct,"PerceiverTokenizer"),$ct.forEach(t),aho=r(O8e," (Perceiver model)"),O8e.forEach(t),nho=i(S),Fh=n(S,"LI",{});var V8e=s(Fh);_ie=n(V8e,"STRONG",{});var kct=s(_ie);sho=r(kct,"phobert"),kct.forEach(t),lho=r(V8e," \u2014 "),sI=n(V8e,"A",{href:!0});var Sct=s(sI);iho=r(Sct,"PhobertTokenizer"),Sct.forEach(t),dho=r(V8e," (PhoBERT model)"),V8e.forEach(t),cho=i(S),Th=n(S,"LI",{});var X8e=s(Th);bie=n(X8e,"STRONG",{});var Rct=s(bie);mho=r(Rct,"plbart"),Rct.forEach(t),fho=r(X8e," \u2014 "),lI=n(X8e,"A",{href:!0});var Pct=s(lI);gho=r(Pct,"PLBartTokenizer"),Pct.forEach(t),hho=r(X8e," (PLBart model)"),X8e.forEach(t),uho=i(S),Mh=n(S,"LI",{});var z8e=s(Mh);vie=n(z8e,"STRONG",{});var Bct=s(vie);pho=r(Bct,"prophetnet"),Bct.forEach(t),_ho=r(z8e," \u2014 "),iI=n(z8e,"A",{href:!0});var Nct=s(iI);bho=r(Nct,"ProphetNetTokenizer"),Nct.forEach(t),vho=r(z8e," (ProphetNet model)"),z8e.forEach(t),Fho=i(S),ks=n(S,"LI",{});var _S=s(ks);Fie=n(_S,"STRONG",{});var Ict=s(Fie);Tho=r(Ict,"qdqbert"),Ict.forEach(t),Mho=r(_S," \u2014 "),dI=n(_S,"A",{href:!0});var qct=s(dI);Eho=r(qct,"BertTokenizer"),qct.forEach(t),Cho=r(_S," or "),cI=n(_S,"A",{href:!0});var jct=s(cI);who=r(jct,"BertTokenizerFast"),jct.forEach(t),Aho=r(_S," (QDQBert model)"),_S.forEach(t),Lho=i(S),Eh=n(S,"LI",{});var Q8e=s(Eh);Tie=n(Q8e,"STRONG",{});var Dct=s(Tie);yho=r(Dct,"rag"),Dct.forEach(t),xho=r(Q8e," \u2014 "),mI=n(Q8e,"A",{href:!0});var Gct=s(mI);$ho=r(Gct,"RagTokenizer"),Gct.forEach(t),kho=r(Q8e," (RAG model)"),Q8e.forEach(t),Sho=i(S),Ss=n(S,"LI",{});var bS=s(Ss);Mie=n(bS,"STRONG",{});var Oct=s(Mie);Rho=r(Oct,"realm"),Oct.forEach(t),Pho=r(bS," \u2014 "),fI=n(bS,"A",{href:!0});var Vct=s(fI);Bho=r(Vct,"RealmTokenizer"),Vct.forEach(t),Nho=r(bS," or "),gI=n(bS,"A",{href:!0});var Xct=s(gI);Iho=r(Xct,"RealmTokenizerFast"),Xct.forEach(t),qho=r(bS," (REALM model)"),bS.forEach(t),jho=i(S),Rs=n(S,"LI",{});var vS=s(Rs);Eie=n(vS,"STRONG",{});var zct=s(Eie);Dho=r(zct,"reformer"),zct.forEach(t),Gho=r(vS," \u2014 "),hI=n(vS,"A",{href:!0});var Qct=s(hI);Oho=r(Qct,"ReformerTokenizer"),Qct.forEach(t),Vho=r(vS," or "),uI=n(vS,"A",{href:!0});var Wct=s(uI);Xho=r(Wct,"ReformerTokenizerFast"),Wct.forEach(t),zho=r(vS," (Reformer model)"),vS.forEach(t),Qho=i(S),Ps=n(S,"LI",{});var FS=s(Ps);Cie=n(FS,"STRONG",{});var Hct=s(Cie);Who=r(Hct,"rembert"),Hct.forEach(t),Hho=r(FS," \u2014 "),pI=n(FS,"A",{href:!0});var Uct=s(pI);Uho=r(Uct,"RemBertTokenizer"),Uct.forEach(t),Jho=r(FS," or "),_I=n(FS,"A",{href:!0});var Jct=s(_I);Yho=r(Jct,"RemBertTokenizerFast"),Jct.forEach(t),Kho=r(FS," (RemBERT model)"),FS.forEach(t),Zho=i(S),Bs=n(S,"LI",{});var TS=s(Bs);wie=n(TS,"STRONG",{});var Yct=s(wie);euo=r(Yct,"retribert"),Yct.forEach(t),ouo=r(TS," \u2014 "),bI=n(TS,"A",{href:!0});var Kct=s(bI);ruo=r(Kct,"RetriBertTokenizer"),Kct.forEach(t),tuo=r(TS," or "),vI=n(TS,"A",{href:!0});var Zct=s(vI);auo=r(Zct,"RetriBertTokenizerFast"),Zct.forEach(t),nuo=r(TS," (RetriBERT model)"),TS.forEach(t),suo=i(S),Ns=n(S,"LI",{});var MS=s(Ns);Aie=n(MS,"STRONG",{});var emt=s(Aie);luo=r(emt,"roberta"),emt.forEach(t),iuo=r(MS," \u2014 "),FI=n(MS,"A",{href:!0});var omt=s(FI);duo=r(omt,"RobertaTokenizer"),omt.forEach(t),cuo=r(MS," or "),TI=n(MS,"A",{href:!0});var rmt=s(TI);muo=r(rmt,"RobertaTokenizerFast"),rmt.forEach(t),fuo=r(MS," (RoBERTa model)"),MS.forEach(t),guo=i(S),Is=n(S,"LI",{});var ES=s(Is);Lie=n(ES,"STRONG",{});var tmt=s(Lie);huo=r(tmt,"roformer"),tmt.forEach(t),uuo=r(ES," \u2014 "),MI=n(ES,"A",{href:!0});var amt=s(MI);puo=r(amt,"RoFormerTokenizer"),amt.forEach(t),_uo=r(ES," or "),EI=n(ES,"A",{href:!0});var nmt=s(EI);buo=r(nmt,"RoFormerTokenizerFast"),nmt.forEach(t),vuo=r(ES," (RoFormer model)"),ES.forEach(t),Fuo=i(S),Ch=n(S,"LI",{});var W8e=s(Ch);yie=n(W8e,"STRONG",{});var smt=s(yie);Tuo=r(smt,"speech_to_text"),smt.forEach(t),Muo=r(W8e," \u2014 "),CI=n(W8e,"A",{href:!0});var lmt=s(CI);Euo=r(lmt,"Speech2TextTokenizer"),lmt.forEach(t),Cuo=r(W8e," (Speech2Text model)"),W8e.forEach(t),wuo=i(S),wh=n(S,"LI",{});var H8e=s(wh);xie=n(H8e,"STRONG",{});var imt=s(xie);Auo=r(imt,"speech_to_text_2"),imt.forEach(t),Luo=r(H8e," \u2014 "),wI=n(H8e,"A",{href:!0});var dmt=s(wI);yuo=r(dmt,"Speech2Text2Tokenizer"),dmt.forEach(t),xuo=r(H8e," (Speech2Text2 model)"),H8e.forEach(t),$uo=i(S),qs=n(S,"LI",{});var CS=s(qs);$ie=n(CS,"STRONG",{});var cmt=s($ie);kuo=r(cmt,"splinter"),cmt.forEach(t),Suo=r(CS," \u2014 "),AI=n(CS,"A",{href:!0});var mmt=s(AI);Ruo=r(mmt,"SplinterTokenizer"),mmt.forEach(t),Puo=r(CS," or "),LI=n(CS,"A",{href:!0});var fmt=s(LI);Buo=r(fmt,"SplinterTokenizerFast"),fmt.forEach(t),Nuo=r(CS," (Splinter model)"),CS.forEach(t),Iuo=i(S),js=n(S,"LI",{});var wS=s(js);kie=n(wS,"STRONG",{});var gmt=s(kie);quo=r(gmt,"squeezebert"),gmt.forEach(t),juo=r(wS," \u2014 "),yI=n(wS,"A",{href:!0});var hmt=s(yI);Duo=r(hmt,"SqueezeBertTokenizer"),hmt.forEach(t),Guo=r(wS," or "),xI=n(wS,"A",{href:!0});var umt=s(xI);Ouo=r(umt,"SqueezeBertTokenizerFast"),umt.forEach(t),Vuo=r(wS," (SqueezeBERT model)"),wS.forEach(t),Xuo=i(S),Ds=n(S,"LI",{});var AS=s(Ds);Sie=n(AS,"STRONG",{});var pmt=s(Sie);zuo=r(pmt,"t5"),pmt.forEach(t),Quo=r(AS," \u2014 "),$I=n(AS,"A",{href:!0});var _mt=s($I);Wuo=r(_mt,"T5Tokenizer"),_mt.forEach(t),Huo=r(AS," or "),kI=n(AS,"A",{href:!0});var bmt=s(kI);Uuo=r(bmt,"T5TokenizerFast"),bmt.forEach(t),Juo=r(AS," (T5 model)"),AS.forEach(t),Yuo=i(S),Ah=n(S,"LI",{});var U8e=s(Ah);Rie=n(U8e,"STRONG",{});var vmt=s(Rie);Kuo=r(vmt,"tapas"),vmt.forEach(t),Zuo=r(U8e," \u2014 "),SI=n(U8e,"A",{href:!0});var Fmt=s(SI);epo=r(Fmt,"TapasTokenizer"),Fmt.forEach(t),opo=r(U8e," (TAPAS model)"),U8e.forEach(t),rpo=i(S),Lh=n(S,"LI",{});var J8e=s(Lh);Pie=n(J8e,"STRONG",{});var Tmt=s(Pie);tpo=r(Tmt,"tapex"),Tmt.forEach(t),apo=r(J8e," \u2014 "),RI=n(J8e,"A",{href:!0});var Mmt=s(RI);npo=r(Mmt,"TapexTokenizer"),Mmt.forEach(t),spo=r(J8e," (TAPEX model)"),J8e.forEach(t),lpo=i(S),yh=n(S,"LI",{});var Y8e=s(yh);Bie=n(Y8e,"STRONG",{});var Emt=s(Bie);ipo=r(Emt,"transfo-xl"),Emt.forEach(t),dpo=r(Y8e," \u2014 "),PI=n(Y8e,"A",{href:!0});var Cmt=s(PI);cpo=r(Cmt,"TransfoXLTokenizer"),Cmt.forEach(t),mpo=r(Y8e," (Transformer-XL model)"),Y8e.forEach(t),fpo=i(S),Gs=n(S,"LI",{});var LS=s(Gs);Nie=n(LS,"STRONG",{});var wmt=s(Nie);gpo=r(wmt,"vilt"),wmt.forEach(t),hpo=r(LS," \u2014 "),BI=n(LS,"A",{href:!0});var Amt=s(BI);upo=r(Amt,"BertTokenizer"),Amt.forEach(t),ppo=r(LS," or "),NI=n(LS,"A",{href:!0});var Lmt=s(NI);_po=r(Lmt,"BertTokenizerFast"),Lmt.forEach(t),bpo=r(LS," (ViLT model)"),LS.forEach(t),vpo=i(S),Os=n(S,"LI",{});var yS=s(Os);Iie=n(yS,"STRONG",{});var ymt=s(Iie);Fpo=r(ymt,"visual_bert"),ymt.forEach(t),Tpo=r(yS," \u2014 "),II=n(yS,"A",{href:!0});var xmt=s(II);Mpo=r(xmt,"BertTokenizer"),xmt.forEach(t),Epo=r(yS," or "),qI=n(yS,"A",{href:!0});var $mt=s(qI);Cpo=r($mt,"BertTokenizerFast"),$mt.forEach(t),wpo=r(yS," (VisualBERT model)"),yS.forEach(t),Apo=i(S),xh=n(S,"LI",{});var K8e=s(xh);qie=n(K8e,"STRONG",{});var kmt=s(qie);Lpo=r(kmt,"wav2vec2"),kmt.forEach(t),ypo=r(K8e," \u2014 "),jI=n(K8e,"A",{href:!0});var Smt=s(jI);xpo=r(Smt,"Wav2Vec2CTCTokenizer"),Smt.forEach(t),$po=r(K8e," (Wav2Vec2 model)"),K8e.forEach(t),kpo=i(S),$h=n(S,"LI",{});var Z8e=s($h);jie=n(Z8e,"STRONG",{});var Rmt=s(jie);Spo=r(Rmt,"wav2vec2-conformer"),Rmt.forEach(t),Rpo=r(Z8e," \u2014 "),DI=n(Z8e,"A",{href:!0});var Pmt=s(DI);Ppo=r(Pmt,"Wav2Vec2CTCTokenizer"),Pmt.forEach(t),Bpo=r(Z8e," (Wav2Vec2-Conformer model)"),Z8e.forEach(t),Npo=i(S),kh=n(S,"LI",{});var e9e=s(kh);Die=n(e9e,"STRONG",{});var Bmt=s(Die);Ipo=r(Bmt,"wav2vec2_phoneme"),Bmt.forEach(t),qpo=r(e9e," \u2014 "),GI=n(e9e,"A",{href:!0});var Nmt=s(GI);jpo=r(Nmt,"Wav2Vec2PhonemeCTCTokenizer"),Nmt.forEach(t),Dpo=r(e9e," (Wav2Vec2Phoneme model)"),e9e.forEach(t),Gpo=i(S),Vs=n(S,"LI",{});var xS=s(Vs);Gie=n(xS,"STRONG",{});var Imt=s(Gie);Opo=r(Imt,"xglm"),Imt.forEach(t),Vpo=r(xS," \u2014 "),OI=n(xS,"A",{href:!0});var qmt=s(OI);Xpo=r(qmt,"XGLMTokenizer"),qmt.forEach(t),zpo=r(xS," or "),VI=n(xS,"A",{href:!0});var jmt=s(VI);Qpo=r(jmt,"XGLMTokenizerFast"),jmt.forEach(t),Wpo=r(xS," (XGLM model)"),xS.forEach(t),Hpo=i(S),Sh=n(S,"LI",{});var o9e=s(Sh);Oie=n(o9e,"STRONG",{});var Dmt=s(Oie);Upo=r(Dmt,"xlm"),Dmt.forEach(t),Jpo=r(o9e," \u2014 "),XI=n(o9e,"A",{href:!0});var Gmt=s(XI);Ypo=r(Gmt,"XLMTokenizer"),Gmt.forEach(t),Kpo=r(o9e," (XLM model)"),o9e.forEach(t),Zpo=i(S),Rh=n(S,"LI",{});var r9e=s(Rh);Vie=n(r9e,"STRONG",{});var Omt=s(Vie);e_o=r(Omt,"xlm-prophetnet"),Omt.forEach(t),o_o=r(r9e," \u2014 "),zI=n(r9e,"A",{href:!0});var Vmt=s(zI);r_o=r(Vmt,"XLMProphetNetTokenizer"),Vmt.forEach(t),t_o=r(r9e," (XLM-ProphetNet model)"),r9e.forEach(t),a_o=i(S),Xs=n(S,"LI",{});var $S=s(Xs);Xie=n($S,"STRONG",{});var Xmt=s(Xie);n_o=r(Xmt,"xlm-roberta"),Xmt.forEach(t),s_o=r($S," \u2014 "),QI=n($S,"A",{href:!0});var zmt=s(QI);l_o=r(zmt,"XLMRobertaTokenizer"),zmt.forEach(t),i_o=r($S," or "),WI=n($S,"A",{href:!0});var Qmt=s(WI);d_o=r(Qmt,"XLMRobertaTokenizerFast"),Qmt.forEach(t),c_o=r($S," (XLM-RoBERTa model)"),$S.forEach(t),m_o=i(S),zs=n(S,"LI",{});var kS=s(zs);zie=n(kS,"STRONG",{});var Wmt=s(zie);f_o=r(Wmt,"xlm-roberta-xl"),Wmt.forEach(t),g_o=r(kS," \u2014 "),HI=n(kS,"A",{href:!0});var Hmt=s(HI);h_o=r(Hmt,"RobertaTokenizer"),Hmt.forEach(t),u_o=r(kS," or "),UI=n(kS,"A",{href:!0});var Umt=s(UI);p_o=r(Umt,"RobertaTokenizerFast"),Umt.forEach(t),__o=r(kS," (XLM-RoBERTa-XL model)"),kS.forEach(t),b_o=i(S),Qs=n(S,"LI",{});var SS=s(Qs);Qie=n(SS,"STRONG",{});var Jmt=s(Qie);v_o=r(Jmt,"xlnet"),Jmt.forEach(t),F_o=r(SS," \u2014 "),JI=n(SS,"A",{href:!0});var Ymt=s(JI);T_o=r(Ymt,"XLNetTokenizer"),Ymt.forEach(t),M_o=r(SS," or "),YI=n(SS,"A",{href:!0});var Kmt=s(YI);E_o=r(Kmt,"XLNetTokenizerFast"),Kmt.forEach(t),C_o=r(SS," (XLNet model)"),SS.forEach(t),w_o=i(S),Ws=n(S,"LI",{});var RS=s(Ws);Wie=n(RS,"STRONG",{});var Zmt=s(Wie);A_o=r(Zmt,"yoso"),Zmt.forEach(t),L_o=r(RS," \u2014 "),KI=n(RS,"A",{href:!0});var eft=s(KI);y_o=r(eft,"AlbertTokenizer"),eft.forEach(t),x_o=r(RS," or "),ZI=n(RS,"A",{href:!0});var oft=s(ZI);$_o=r(oft,"AlbertTokenizerFast"),oft.forEach(t),k_o=r(RS," (YOSO model)"),RS.forEach(t),S.forEach(t),S_o=i(el),T(Ph.$$.fragment,el),el.forEach(t),R_o=i(Zs),Bh=n(Zs,"DIV",{class:!0});var FQe=s(Bh);T(Fy.$$.fragment,FQe),P_o=i(FQe),Hie=n(FQe,"P",{});var rft=s(Hie);B_o=r(rft,"Register a new tokenizer in this mapping."),rft.forEach(t),FQe.forEach(t),Zs.forEach(t),vXe=i(m),ji=n(m,"H2",{class:!0});var TQe=s(ji);Nh=n(TQe,"A",{id:!0,class:!0,href:!0});var tft=s(Nh);Uie=n(tft,"SPAN",{});var aft=s(Uie);T(Ty.$$.fragment,aft),aft.forEach(t),tft.forEach(t),N_o=i(TQe),Jie=n(TQe,"SPAN",{});var nft=s(Jie);I_o=r(nft,"AutoFeatureExtractor"),nft.forEach(t),TQe.forEach(t),FXe=i(m),yo=n(m,"DIV",{class:!0});var ol=s(yo);T(My.$$.fragment,ol),q_o=i(ol),Ey=n(ol,"P",{});var MQe=s(Ey);j_o=r(MQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=n(MQe,"A",{href:!0});var sft=s(eq);D_o=r(sft,"AutoFeatureExtractor.from_pretrained()"),sft.forEach(t),G_o=r(MQe," class method."),MQe.forEach(t),O_o=i(ol),Cy=n(ol,"P",{});var EQe=s(Cy);V_o=r(EQe,"This class cannot be instantiated directly using "),Yie=n(EQe,"CODE",{});var lft=s(Yie);X_o=r(lft,"__init__()"),lft.forEach(t),z_o=r(EQe," (throws an error)."),EQe.forEach(t),Q_o=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(wy.$$.fragment,na),W_o=i(na),Kie=n(na,"P",{});var ift=s(Kie);H_o=r(ift,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ift.forEach(t),U_o=i(na),Ba=n(na,"P",{});var c7=s(Ba);J_o=r(c7,"The feature extractor class to instantiate is selected based on the "),Zie=n(c7,"CODE",{});var dft=s(Zie);Y_o=r(dft,"model_type"),dft.forEach(t),K_o=r(c7,` property of the config object
(either passed as an argument or loaded from `),ede=n(c7,"CODE",{});var cft=s(ede);Z_o=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),e2o=r(c7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ode=n(c7,"CODE",{});var mft=s(ode);o2o=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),r2o=r(c7,":"),c7.forEach(t),t2o=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var t9e=s(Ih);rde=n(t9e,"STRONG",{});var fft=s(rde);a2o=r(fft,"beit"),fft.forEach(t),n2o=r(t9e," \u2014 "),oq=n(t9e,"A",{href:!0});var gft=s(oq);s2o=r(gft,"BeitFeatureExtractor"),gft.forEach(t),l2o=r(t9e," (BEiT model)"),t9e.forEach(t),i2o=i(K),qh=n(K,"LI",{});var a9e=s(qh);tde=n(a9e,"STRONG",{});var hft=s(tde);d2o=r(hft,"clip"),hft.forEach(t),c2o=r(a9e," \u2014 "),rq=n(a9e,"A",{href:!0});var uft=s(rq);m2o=r(uft,"CLIPFeatureExtractor"),uft.forEach(t),f2o=r(a9e," (CLIP model)"),a9e.forEach(t),g2o=i(K),jh=n(K,"LI",{});var n9e=s(jh);ade=n(n9e,"STRONG",{});var pft=s(ade);h2o=r(pft,"convnext"),pft.forEach(t),u2o=r(n9e," \u2014 "),tq=n(n9e,"A",{href:!0});var _ft=s(tq);p2o=r(_ft,"ConvNextFeatureExtractor"),_ft.forEach(t),_2o=r(n9e," (ConvNeXT model)"),n9e.forEach(t),b2o=i(K),Dh=n(K,"LI",{});var s9e=s(Dh);nde=n(s9e,"STRONG",{});var bft=s(nde);v2o=r(bft,"cvt"),bft.forEach(t),F2o=r(s9e," \u2014 "),aq=n(s9e,"A",{href:!0});var vft=s(aq);T2o=r(vft,"ConvNextFeatureExtractor"),vft.forEach(t),M2o=r(s9e," (CvT model)"),s9e.forEach(t),E2o=i(K),Gh=n(K,"LI",{});var l9e=s(Gh);sde=n(l9e,"STRONG",{});var Fft=s(sde);C2o=r(Fft,"data2vec-audio"),Fft.forEach(t),w2o=r(l9e," \u2014 "),nq=n(l9e,"A",{href:!0});var Tft=s(nq);A2o=r(Tft,"Wav2Vec2FeatureExtractor"),Tft.forEach(t),L2o=r(l9e," (Data2VecAudio model)"),l9e.forEach(t),y2o=i(K),Oh=n(K,"LI",{});var i9e=s(Oh);lde=n(i9e,"STRONG",{});var Mft=s(lde);x2o=r(Mft,"data2vec-vision"),Mft.forEach(t),$2o=r(i9e," \u2014 "),sq=n(i9e,"A",{href:!0});var Eft=s(sq);k2o=r(Eft,"BeitFeatureExtractor"),Eft.forEach(t),S2o=r(i9e," (Data2VecVision model)"),i9e.forEach(t),R2o=i(K),Vh=n(K,"LI",{});var d9e=s(Vh);ide=n(d9e,"STRONG",{});var Cft=s(ide);P2o=r(Cft,"deit"),Cft.forEach(t),B2o=r(d9e," \u2014 "),lq=n(d9e,"A",{href:!0});var wft=s(lq);N2o=r(wft,"DeiTFeatureExtractor"),wft.forEach(t),I2o=r(d9e," (DeiT model)"),d9e.forEach(t),q2o=i(K),Xh=n(K,"LI",{});var c9e=s(Xh);dde=n(c9e,"STRONG",{});var Aft=s(dde);j2o=r(Aft,"detr"),Aft.forEach(t),D2o=r(c9e," \u2014 "),iq=n(c9e,"A",{href:!0});var Lft=s(iq);G2o=r(Lft,"DetrFeatureExtractor"),Lft.forEach(t),O2o=r(c9e," (DETR model)"),c9e.forEach(t),V2o=i(K),zh=n(K,"LI",{});var m9e=s(zh);cde=n(m9e,"STRONG",{});var yft=s(cde);X2o=r(yft,"dpt"),yft.forEach(t),z2o=r(m9e," \u2014 "),dq=n(m9e,"A",{href:!0});var xft=s(dq);Q2o=r(xft,"DPTFeatureExtractor"),xft.forEach(t),W2o=r(m9e," (DPT model)"),m9e.forEach(t),H2o=i(K),Qh=n(K,"LI",{});var f9e=s(Qh);mde=n(f9e,"STRONG",{});var $ft=s(mde);U2o=r($ft,"flava"),$ft.forEach(t),J2o=r(f9e," \u2014 "),cq=n(f9e,"A",{href:!0});var kft=s(cq);Y2o=r(kft,"FlavaFeatureExtractor"),kft.forEach(t),K2o=r(f9e," (FLAVA model)"),f9e.forEach(t),Z2o=i(K),Wh=n(K,"LI",{});var g9e=s(Wh);fde=n(g9e,"STRONG",{});var Sft=s(fde);ebo=r(Sft,"glpn"),Sft.forEach(t),obo=r(g9e," \u2014 "),mq=n(g9e,"A",{href:!0});var Rft=s(mq);rbo=r(Rft,"GLPNFeatureExtractor"),Rft.forEach(t),tbo=r(g9e," (GLPN model)"),g9e.forEach(t),abo=i(K),Hh=n(K,"LI",{});var h9e=s(Hh);gde=n(h9e,"STRONG",{});var Pft=s(gde);nbo=r(Pft,"groupvit"),Pft.forEach(t),sbo=r(h9e," \u2014 "),fq=n(h9e,"A",{href:!0});var Bft=s(fq);lbo=r(Bft,"CLIPFeatureExtractor"),Bft.forEach(t),ibo=r(h9e," (GroupViT model)"),h9e.forEach(t),dbo=i(K),Uh=n(K,"LI",{});var u9e=s(Uh);hde=n(u9e,"STRONG",{});var Nft=s(hde);cbo=r(Nft,"hubert"),Nft.forEach(t),mbo=r(u9e," \u2014 "),gq=n(u9e,"A",{href:!0});var Ift=s(gq);fbo=r(Ift,"Wav2Vec2FeatureExtractor"),Ift.forEach(t),gbo=r(u9e," (Hubert model)"),u9e.forEach(t),hbo=i(K),Jh=n(K,"LI",{});var p9e=s(Jh);ude=n(p9e,"STRONG",{});var qft=s(ude);ubo=r(qft,"imagegpt"),qft.forEach(t),pbo=r(p9e," \u2014 "),hq=n(p9e,"A",{href:!0});var jft=s(hq);_bo=r(jft,"ImageGPTFeatureExtractor"),jft.forEach(t),bbo=r(p9e," (ImageGPT model)"),p9e.forEach(t),vbo=i(K),Yh=n(K,"LI",{});var _9e=s(Yh);pde=n(_9e,"STRONG",{});var Dft=s(pde);Fbo=r(Dft,"layoutlmv2"),Dft.forEach(t),Tbo=r(_9e," \u2014 "),uq=n(_9e,"A",{href:!0});var Gft=s(uq);Mbo=r(Gft,"LayoutLMv2FeatureExtractor"),Gft.forEach(t),Ebo=r(_9e," (LayoutLMv2 model)"),_9e.forEach(t),Cbo=i(K),Kh=n(K,"LI",{});var b9e=s(Kh);_de=n(b9e,"STRONG",{});var Oft=s(_de);wbo=r(Oft,"layoutlmv3"),Oft.forEach(t),Abo=r(b9e," \u2014 "),pq=n(b9e,"A",{href:!0});var Vft=s(pq);Lbo=r(Vft,"LayoutLMv3FeatureExtractor"),Vft.forEach(t),ybo=r(b9e," (LayoutLMv3 model)"),b9e.forEach(t),xbo=i(K),Zh=n(K,"LI",{});var v9e=s(Zh);bde=n(v9e,"STRONG",{});var Xft=s(bde);$bo=r(Xft,"levit"),Xft.forEach(t),kbo=r(v9e," \u2014 "),_q=n(v9e,"A",{href:!0});var zft=s(_q);Sbo=r(zft,"LevitFeatureExtractor"),zft.forEach(t),Rbo=r(v9e," (LeViT model)"),v9e.forEach(t),Pbo=i(K),eu=n(K,"LI",{});var F9e=s(eu);vde=n(F9e,"STRONG",{});var Qft=s(vde);Bbo=r(Qft,"maskformer"),Qft.forEach(t),Nbo=r(F9e," \u2014 "),bq=n(F9e,"A",{href:!0});var Wft=s(bq);Ibo=r(Wft,"MaskFormerFeatureExtractor"),Wft.forEach(t),qbo=r(F9e," (MaskFormer model)"),F9e.forEach(t),jbo=i(K),ou=n(K,"LI",{});var T9e=s(ou);Fde=n(T9e,"STRONG",{});var Hft=s(Fde);Dbo=r(Hft,"mctct"),Hft.forEach(t),Gbo=r(T9e," \u2014 "),vq=n(T9e,"A",{href:!0});var Uft=s(vq);Obo=r(Uft,"MCTCTFeatureExtractor"),Uft.forEach(t),Vbo=r(T9e," (M-CTC-T model)"),T9e.forEach(t),Xbo=i(K),ru=n(K,"LI",{});var M9e=s(ru);Tde=n(M9e,"STRONG",{});var Jft=s(Tde);zbo=r(Jft,"mobilevit"),Jft.forEach(t),Qbo=r(M9e," \u2014 "),Fq=n(M9e,"A",{href:!0});var Yft=s(Fq);Wbo=r(Yft,"MobileViTFeatureExtractor"),Yft.forEach(t),Hbo=r(M9e," (MobileViT model)"),M9e.forEach(t),Ubo=i(K),tu=n(K,"LI",{});var E9e=s(tu);Mde=n(E9e,"STRONG",{});var Kft=s(Mde);Jbo=r(Kft,"perceiver"),Kft.forEach(t),Ybo=r(E9e," \u2014 "),Tq=n(E9e,"A",{href:!0});var Zft=s(Tq);Kbo=r(Zft,"PerceiverFeatureExtractor"),Zft.forEach(t),Zbo=r(E9e," (Perceiver model)"),E9e.forEach(t),evo=i(K),au=n(K,"LI",{});var C9e=s(au);Ede=n(C9e,"STRONG",{});var egt=s(Ede);ovo=r(egt,"poolformer"),egt.forEach(t),rvo=r(C9e," \u2014 "),Mq=n(C9e,"A",{href:!0});var ogt=s(Mq);tvo=r(ogt,"PoolFormerFeatureExtractor"),ogt.forEach(t),avo=r(C9e," (PoolFormer model)"),C9e.forEach(t),nvo=i(K),nu=n(K,"LI",{});var w9e=s(nu);Cde=n(w9e,"STRONG",{});var rgt=s(Cde);svo=r(rgt,"regnet"),rgt.forEach(t),lvo=r(w9e," \u2014 "),Eq=n(w9e,"A",{href:!0});var tgt=s(Eq);ivo=r(tgt,"ConvNextFeatureExtractor"),tgt.forEach(t),dvo=r(w9e," (RegNet model)"),w9e.forEach(t),cvo=i(K),su=n(K,"LI",{});var A9e=s(su);wde=n(A9e,"STRONG",{});var agt=s(wde);mvo=r(agt,"resnet"),agt.forEach(t),fvo=r(A9e," \u2014 "),Cq=n(A9e,"A",{href:!0});var ngt=s(Cq);gvo=r(ngt,"ConvNextFeatureExtractor"),ngt.forEach(t),hvo=r(A9e," (ResNet model)"),A9e.forEach(t),uvo=i(K),lu=n(K,"LI",{});var L9e=s(lu);Ade=n(L9e,"STRONG",{});var sgt=s(Ade);pvo=r(sgt,"segformer"),sgt.forEach(t),_vo=r(L9e," \u2014 "),wq=n(L9e,"A",{href:!0});var lgt=s(wq);bvo=r(lgt,"SegformerFeatureExtractor"),lgt.forEach(t),vvo=r(L9e," (SegFormer model)"),L9e.forEach(t),Fvo=i(K),iu=n(K,"LI",{});var y9e=s(iu);Lde=n(y9e,"STRONG",{});var igt=s(Lde);Tvo=r(igt,"speech_to_text"),igt.forEach(t),Mvo=r(y9e," \u2014 "),Aq=n(y9e,"A",{href:!0});var dgt=s(Aq);Evo=r(dgt,"Speech2TextFeatureExtractor"),dgt.forEach(t),Cvo=r(y9e," (Speech2Text model)"),y9e.forEach(t),wvo=i(K),du=n(K,"LI",{});var x9e=s(du);yde=n(x9e,"STRONG",{});var cgt=s(yde);Avo=r(cgt,"swin"),cgt.forEach(t),Lvo=r(x9e," \u2014 "),Lq=n(x9e,"A",{href:!0});var mgt=s(Lq);yvo=r(mgt,"ViTFeatureExtractor"),mgt.forEach(t),xvo=r(x9e," (Swin Transformer model)"),x9e.forEach(t),$vo=i(K),cu=n(K,"LI",{});var $9e=s(cu);xde=n($9e,"STRONG",{});var fgt=s(xde);kvo=r(fgt,"van"),fgt.forEach(t),Svo=r($9e," \u2014 "),yq=n($9e,"A",{href:!0});var ggt=s(yq);Rvo=r(ggt,"ConvNextFeatureExtractor"),ggt.forEach(t),Pvo=r($9e," (VAN model)"),$9e.forEach(t),Bvo=i(K),mu=n(K,"LI",{});var k9e=s(mu);$de=n(k9e,"STRONG",{});var hgt=s($de);Nvo=r(hgt,"vilt"),hgt.forEach(t),Ivo=r(k9e," \u2014 "),xq=n(k9e,"A",{href:!0});var ugt=s(xq);qvo=r(ugt,"ViltFeatureExtractor"),ugt.forEach(t),jvo=r(k9e," (ViLT model)"),k9e.forEach(t),Dvo=i(K),fu=n(K,"LI",{});var S9e=s(fu);kde=n(S9e,"STRONG",{});var pgt=s(kde);Gvo=r(pgt,"vit"),pgt.forEach(t),Ovo=r(S9e," \u2014 "),$q=n(S9e,"A",{href:!0});var _gt=s($q);Vvo=r(_gt,"ViTFeatureExtractor"),_gt.forEach(t),Xvo=r(S9e," (ViT model)"),S9e.forEach(t),zvo=i(K),gu=n(K,"LI",{});var R9e=s(gu);Sde=n(R9e,"STRONG",{});var bgt=s(Sde);Qvo=r(bgt,"vit_mae"),bgt.forEach(t),Wvo=r(R9e," \u2014 "),kq=n(R9e,"A",{href:!0});var vgt=s(kq);Hvo=r(vgt,"ViTFeatureExtractor"),vgt.forEach(t),Uvo=r(R9e," (ViTMAE model)"),R9e.forEach(t),Jvo=i(K),hu=n(K,"LI",{});var P9e=s(hu);Rde=n(P9e,"STRONG",{});var Fgt=s(Rde);Yvo=r(Fgt,"wav2vec2"),Fgt.forEach(t),Kvo=r(P9e," \u2014 "),Sq=n(P9e,"A",{href:!0});var Tgt=s(Sq);Zvo=r(Tgt,"Wav2Vec2FeatureExtractor"),Tgt.forEach(t),e1o=r(P9e," (Wav2Vec2 model)"),P9e.forEach(t),o1o=i(K),uu=n(K,"LI",{});var B9e=s(uu);Pde=n(B9e,"STRONG",{});var Mgt=s(Pde);r1o=r(Mgt,"wav2vec2-conformer"),Mgt.forEach(t),t1o=r(B9e," \u2014 "),Rq=n(B9e,"A",{href:!0});var Egt=s(Rq);a1o=r(Egt,"Wav2Vec2FeatureExtractor"),Egt.forEach(t),n1o=r(B9e," (Wav2Vec2-Conformer model)"),B9e.forEach(t),s1o=i(K),pu=n(K,"LI",{});var N9e=s(pu);Bde=n(N9e,"STRONG",{});var Cgt=s(Bde);l1o=r(Cgt,"yolos"),Cgt.forEach(t),i1o=r(N9e," \u2014 "),Pq=n(N9e,"A",{href:!0});var wgt=s(Pq);d1o=r(wgt,"YolosFeatureExtractor"),wgt.forEach(t),c1o=r(N9e," (YOLOS model)"),N9e.forEach(t),K.forEach(t),m1o=i(na),T(_u.$$.fragment,na),f1o=i(na),T(bu.$$.fragment,na),na.forEach(t),g1o=i(ol),vu=n(ol,"DIV",{class:!0});var CQe=s(vu);T(Ay.$$.fragment,CQe),h1o=i(CQe),Nde=n(CQe,"P",{});var Agt=s(Nde);u1o=r(Agt,"Register a new feature extractor for this class."),Agt.forEach(t),CQe.forEach(t),ol.forEach(t),TXe=i(m),Di=n(m,"H2",{class:!0});var wQe=s(Di);Fu=n(wQe,"A",{id:!0,class:!0,href:!0});var Lgt=s(Fu);Ide=n(Lgt,"SPAN",{});var ygt=s(Ide);T(Ly.$$.fragment,ygt),ygt.forEach(t),Lgt.forEach(t),p1o=i(wQe),qde=n(wQe,"SPAN",{});var xgt=s(qde);_1o=r(xgt,"AutoProcessor"),xgt.forEach(t),wQe.forEach(t),MXe=i(m),xo=n(m,"DIV",{class:!0});var rl=s(xo);T(yy.$$.fragment,rl),b1o=i(rl),xy=n(rl,"P",{});var AQe=s(xy);v1o=r(AQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bq=n(AQe,"A",{href:!0});var $gt=s(Bq);F1o=r($gt,"AutoProcessor.from_pretrained()"),$gt.forEach(t),T1o=r(AQe," class method."),AQe.forEach(t),M1o=i(rl),$y=n(rl,"P",{});var LQe=s($y);E1o=r(LQe,"This class cannot be instantiated directly using "),jde=n(LQe,"CODE",{});var kgt=s(jde);C1o=r(kgt,"__init__()"),kgt.forEach(t),w1o=r(LQe," (throws an error)."),LQe.forEach(t),A1o=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(ky.$$.fragment,sa),L1o=i(sa),Dde=n(sa,"P",{});var Sgt=s(Dde);y1o=r(Sgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Sgt.forEach(t),x1o=i(sa),Gi=n(sa,"P",{});var qre=s(Gi);$1o=r(qre,"The processor class to instantiate is selected based on the "),Gde=n(qre,"CODE",{});var Rgt=s(Gde);k1o=r(Rgt,"model_type"),Rgt.forEach(t),S1o=r(qre,` property of the config object (either
passed as an argument or loaded from `),Ode=n(qre,"CODE",{});var Pgt=s(Ode);R1o=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),P1o=r(qre," if possible):"),qre.forEach(t),B1o=i(sa),ue=n(sa,"UL",{});var be=s(ue);Tu=n(be,"LI",{});var I9e=s(Tu);Vde=n(I9e,"STRONG",{});var Bgt=s(Vde);N1o=r(Bgt,"clip"),Bgt.forEach(t),I1o=r(I9e," \u2014 "),Nq=n(I9e,"A",{href:!0});var Ngt=s(Nq);q1o=r(Ngt,"CLIPProcessor"),Ngt.forEach(t),j1o=r(I9e," (CLIP model)"),I9e.forEach(t),D1o=i(be),Mu=n(be,"LI",{});var q9e=s(Mu);Xde=n(q9e,"STRONG",{});var Igt=s(Xde);G1o=r(Igt,"flava"),Igt.forEach(t),O1o=r(q9e," \u2014 "),zde=n(q9e,"CODE",{});var qgt=s(zde);V1o=r(qgt,"FLAVAProcessor"),qgt.forEach(t),X1o=r(q9e," (FLAVA model)"),q9e.forEach(t),z1o=i(be),Eu=n(be,"LI",{});var j9e=s(Eu);Qde=n(j9e,"STRONG",{});var jgt=s(Qde);Q1o=r(jgt,"groupvit"),jgt.forEach(t),W1o=r(j9e," \u2014 "),Iq=n(j9e,"A",{href:!0});var Dgt=s(Iq);H1o=r(Dgt,"CLIPProcessor"),Dgt.forEach(t),U1o=r(j9e," (GroupViT model)"),j9e.forEach(t),J1o=i(be),Cu=n(be,"LI",{});var D9e=s(Cu);Wde=n(D9e,"STRONG",{});var Ggt=s(Wde);Y1o=r(Ggt,"layoutlmv2"),Ggt.forEach(t),K1o=r(D9e," \u2014 "),qq=n(D9e,"A",{href:!0});var Ogt=s(qq);Z1o=r(Ogt,"LayoutLMv2Processor"),Ogt.forEach(t),eFo=r(D9e," (LayoutLMv2 model)"),D9e.forEach(t),oFo=i(be),wu=n(be,"LI",{});var G9e=s(wu);Hde=n(G9e,"STRONG",{});var Vgt=s(Hde);rFo=r(Vgt,"layoutlmv3"),Vgt.forEach(t),tFo=r(G9e," \u2014 "),jq=n(G9e,"A",{href:!0});var Xgt=s(jq);aFo=r(Xgt,"LayoutLMv3Processor"),Xgt.forEach(t),nFo=r(G9e," (LayoutLMv3 model)"),G9e.forEach(t),sFo=i(be),Au=n(be,"LI",{});var O9e=s(Au);Ude=n(O9e,"STRONG",{});var zgt=s(Ude);lFo=r(zgt,"layoutxlm"),zgt.forEach(t),iFo=r(O9e," \u2014 "),Dq=n(O9e,"A",{href:!0});var Qgt=s(Dq);dFo=r(Qgt,"LayoutXLMProcessor"),Qgt.forEach(t),cFo=r(O9e," (LayoutXLM model)"),O9e.forEach(t),mFo=i(be),Lu=n(be,"LI",{});var V9e=s(Lu);Jde=n(V9e,"STRONG",{});var Wgt=s(Jde);fFo=r(Wgt,"sew"),Wgt.forEach(t),gFo=r(V9e," \u2014 "),Gq=n(V9e,"A",{href:!0});var Hgt=s(Gq);hFo=r(Hgt,"Wav2Vec2Processor"),Hgt.forEach(t),uFo=r(V9e," (SEW model)"),V9e.forEach(t),pFo=i(be),yu=n(be,"LI",{});var X9e=s(yu);Yde=n(X9e,"STRONG",{});var Ugt=s(Yde);_Fo=r(Ugt,"sew-d"),Ugt.forEach(t),bFo=r(X9e," \u2014 "),Oq=n(X9e,"A",{href:!0});var Jgt=s(Oq);vFo=r(Jgt,"Wav2Vec2Processor"),Jgt.forEach(t),FFo=r(X9e," (SEW-D model)"),X9e.forEach(t),TFo=i(be),xu=n(be,"LI",{});var z9e=s(xu);Kde=n(z9e,"STRONG",{});var Ygt=s(Kde);MFo=r(Ygt,"speech_to_text"),Ygt.forEach(t),EFo=r(z9e," \u2014 "),Vq=n(z9e,"A",{href:!0});var Kgt=s(Vq);CFo=r(Kgt,"Speech2TextProcessor"),Kgt.forEach(t),wFo=r(z9e," (Speech2Text model)"),z9e.forEach(t),AFo=i(be),$u=n(be,"LI",{});var Q9e=s($u);Zde=n(Q9e,"STRONG",{});var Zgt=s(Zde);LFo=r(Zgt,"speech_to_text_2"),Zgt.forEach(t),yFo=r(Q9e," \u2014 "),Xq=n(Q9e,"A",{href:!0});var eht=s(Xq);xFo=r(eht,"Speech2Text2Processor"),eht.forEach(t),$Fo=r(Q9e," (Speech2Text2 model)"),Q9e.forEach(t),kFo=i(be),ku=n(be,"LI",{});var W9e=s(ku);ece=n(W9e,"STRONG",{});var oht=s(ece);SFo=r(oht,"trocr"),oht.forEach(t),RFo=r(W9e," \u2014 "),zq=n(W9e,"A",{href:!0});var rht=s(zq);PFo=r(rht,"TrOCRProcessor"),rht.forEach(t),BFo=r(W9e," (TrOCR model)"),W9e.forEach(t),NFo=i(be),Su=n(be,"LI",{});var H9e=s(Su);oce=n(H9e,"STRONG",{});var tht=s(oce);IFo=r(tht,"unispeech"),tht.forEach(t),qFo=r(H9e," \u2014 "),Qq=n(H9e,"A",{href:!0});var aht=s(Qq);jFo=r(aht,"Wav2Vec2Processor"),aht.forEach(t),DFo=r(H9e," (UniSpeech model)"),H9e.forEach(t),GFo=i(be),Ru=n(be,"LI",{});var U9e=s(Ru);rce=n(U9e,"STRONG",{});var nht=s(rce);OFo=r(nht,"unispeech-sat"),nht.forEach(t),VFo=r(U9e," \u2014 "),Wq=n(U9e,"A",{href:!0});var sht=s(Wq);XFo=r(sht,"Wav2Vec2Processor"),sht.forEach(t),zFo=r(U9e," (UniSpeechSat model)"),U9e.forEach(t),QFo=i(be),Pu=n(be,"LI",{});var J9e=s(Pu);tce=n(J9e,"STRONG",{});var lht=s(tce);WFo=r(lht,"vilt"),lht.forEach(t),HFo=r(J9e," \u2014 "),Hq=n(J9e,"A",{href:!0});var iht=s(Hq);UFo=r(iht,"ViltProcessor"),iht.forEach(t),JFo=r(J9e," (ViLT model)"),J9e.forEach(t),YFo=i(be),Bu=n(be,"LI",{});var Y9e=s(Bu);ace=n(Y9e,"STRONG",{});var dht=s(ace);KFo=r(dht,"vision-text-dual-encoder"),dht.forEach(t),ZFo=r(Y9e," \u2014 "),Uq=n(Y9e,"A",{href:!0});var cht=s(Uq);eTo=r(cht,"VisionTextDualEncoderProcessor"),cht.forEach(t),oTo=r(Y9e," (VisionTextDualEncoder model)"),Y9e.forEach(t),rTo=i(be),Nu=n(be,"LI",{});var K9e=s(Nu);nce=n(K9e,"STRONG",{});var mht=s(nce);tTo=r(mht,"wav2vec2"),mht.forEach(t),aTo=r(K9e," \u2014 "),Jq=n(K9e,"A",{href:!0});var fht=s(Jq);nTo=r(fht,"Wav2Vec2Processor"),fht.forEach(t),sTo=r(K9e," (Wav2Vec2 model)"),K9e.forEach(t),lTo=i(be),Iu=n(be,"LI",{});var Z9e=s(Iu);sce=n(Z9e,"STRONG",{});var ght=s(sce);iTo=r(ght,"wav2vec2-conformer"),ght.forEach(t),dTo=r(Z9e," \u2014 "),Yq=n(Z9e,"A",{href:!0});var hht=s(Yq);cTo=r(hht,"Wav2Vec2Processor"),hht.forEach(t),mTo=r(Z9e," (Wav2Vec2-Conformer model)"),Z9e.forEach(t),fTo=i(be),qu=n(be,"LI",{});var exe=s(qu);lce=n(exe,"STRONG",{});var uht=s(lce);gTo=r(uht,"wavlm"),uht.forEach(t),hTo=r(exe," \u2014 "),Kq=n(exe,"A",{href:!0});var pht=s(Kq);uTo=r(pht,"Wav2Vec2Processor"),pht.forEach(t),pTo=r(exe," (WavLM model)"),exe.forEach(t),be.forEach(t),_To=i(sa),T(ju.$$.fragment,sa),bTo=i(sa),T(Du.$$.fragment,sa),sa.forEach(t),vTo=i(rl),Gu=n(rl,"DIV",{class:!0});var yQe=s(Gu);T(Sy.$$.fragment,yQe),FTo=i(yQe),ice=n(yQe,"P",{});var _ht=s(ice);TTo=r(_ht,"Register a new processor for this class."),_ht.forEach(t),yQe.forEach(t),rl.forEach(t),EXe=i(m),Oi=n(m,"H2",{class:!0});var xQe=s(Oi);Ou=n(xQe,"A",{id:!0,class:!0,href:!0});var bht=s(Ou);dce=n(bht,"SPAN",{});var vht=s(dce);T(Ry.$$.fragment,vht),vht.forEach(t),bht.forEach(t),MTo=i(xQe),cce=n(xQe,"SPAN",{});var Fht=s(cce);ETo=r(Fht,"AutoModel"),Fht.forEach(t),xQe.forEach(t),CXe=i(m),$o=n(m,"DIV",{class:!0});var tl=s($o);T(Py.$$.fragment,tl),CTo=i(tl),Vi=n(tl,"P",{});var jre=s(Vi);wTo=r(jre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zq=n(jre,"A",{href:!0});var Tht=s(Zq);ATo=r(Tht,"from_pretrained()"),Tht.forEach(t),LTo=r(jre," class method or the "),ej=n(jre,"A",{href:!0});var Mht=s(ej);yTo=r(Mht,"from_config()"),Mht.forEach(t),xTo=r(jre,` class
method.`),jre.forEach(t),$To=i(tl),By=n(tl,"P",{});var $Qe=s(By);kTo=r($Qe,"This class cannot be instantiated directly using "),mce=n($Qe,"CODE",{});var Eht=s(mce);STo=r(Eht,"__init__()"),Eht.forEach(t),RTo=r($Qe," (throws an error)."),$Qe.forEach(t),PTo=i(tl),it=n(tl,"DIV",{class:!0});var m7=s(it);T(Ny.$$.fragment,m7),BTo=i(m7),fce=n(m7,"P",{});var Cht=s(fce);NTo=r(Cht,"Instantiates one of the base model classes of the library from a configuration."),Cht.forEach(t),ITo=i(m7),Xi=n(m7,"P",{});var Dre=s(Xi);qTo=r(Dre,`Note:
Loading a model from its configuration file does `),gce=n(Dre,"STRONG",{});var wht=s(gce);jTo=r(wht,"not"),wht.forEach(t),DTo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=n(Dre,"A",{href:!0});var Aht=s(oj);GTo=r(Aht,"from_pretrained()"),Aht.forEach(t),OTo=r(Dre," to load the model weights."),Dre.forEach(t),VTo=i(m7),T(Vu.$$.fragment,m7),m7.forEach(t),XTo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(Iy.$$.fragment,la),zTo=i(la),hce=n(la,"P",{});var Lht=s(hce);QTo=r(Lht,"Instantiate one of the base model classes of the library from a pretrained model."),Lht.forEach(t),WTo=i(la),Na=n(la,"P",{});var f7=s(Na);HTo=r(f7,"The model class to instantiate is selected based on the "),uce=n(f7,"CODE",{});var yht=s(uce);UTo=r(yht,"model_type"),yht.forEach(t),JTo=r(f7,` property of the config object (either
passed as an argument or loaded from `),pce=n(f7,"CODE",{});var xht=s(pce);YTo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),KTo=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ce=n(f7,"CODE",{});var $ht=s(_ce);ZTo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),eMo=r(f7,":"),f7.forEach(t),oMo=i(la),y=n(la,"UL",{});var x=s(y);Xu=n(x,"LI",{});var oxe=s(Xu);bce=n(oxe,"STRONG",{});var kht=s(bce);rMo=r(kht,"albert"),kht.forEach(t),tMo=r(oxe," \u2014 "),rj=n(oxe,"A",{href:!0});var Sht=s(rj);aMo=r(Sht,"AlbertModel"),Sht.forEach(t),nMo=r(oxe," (ALBERT model)"),oxe.forEach(t),sMo=i(x),zu=n(x,"LI",{});var rxe=s(zu);vce=n(rxe,"STRONG",{});var Rht=s(vce);lMo=r(Rht,"bart"),Rht.forEach(t),iMo=r(rxe," \u2014 "),tj=n(rxe,"A",{href:!0});var Pht=s(tj);dMo=r(Pht,"BartModel"),Pht.forEach(t),cMo=r(rxe," (BART model)"),rxe.forEach(t),mMo=i(x),Qu=n(x,"LI",{});var txe=s(Qu);Fce=n(txe,"STRONG",{});var Bht=s(Fce);fMo=r(Bht,"beit"),Bht.forEach(t),gMo=r(txe," \u2014 "),aj=n(txe,"A",{href:!0});var Nht=s(aj);hMo=r(Nht,"BeitModel"),Nht.forEach(t),uMo=r(txe," (BEiT model)"),txe.forEach(t),pMo=i(x),Wu=n(x,"LI",{});var axe=s(Wu);Tce=n(axe,"STRONG",{});var Iht=s(Tce);_Mo=r(Iht,"bert"),Iht.forEach(t),bMo=r(axe," \u2014 "),nj=n(axe,"A",{href:!0});var qht=s(nj);vMo=r(qht,"BertModel"),qht.forEach(t),FMo=r(axe," (BERT model)"),axe.forEach(t),TMo=i(x),Hu=n(x,"LI",{});var nxe=s(Hu);Mce=n(nxe,"STRONG",{});var jht=s(Mce);MMo=r(jht,"bert-generation"),jht.forEach(t),EMo=r(nxe," \u2014 "),sj=n(nxe,"A",{href:!0});var Dht=s(sj);CMo=r(Dht,"BertGenerationEncoder"),Dht.forEach(t),wMo=r(nxe," (Bert Generation model)"),nxe.forEach(t),AMo=i(x),Uu=n(x,"LI",{});var sxe=s(Uu);Ece=n(sxe,"STRONG",{});var Ght=s(Ece);LMo=r(Ght,"big_bird"),Ght.forEach(t),yMo=r(sxe," \u2014 "),lj=n(sxe,"A",{href:!0});var Oht=s(lj);xMo=r(Oht,"BigBirdModel"),Oht.forEach(t),$Mo=r(sxe," (BigBird model)"),sxe.forEach(t),kMo=i(x),Ju=n(x,"LI",{});var lxe=s(Ju);Cce=n(lxe,"STRONG",{});var Vht=s(Cce);SMo=r(Vht,"bigbird_pegasus"),Vht.forEach(t),RMo=r(lxe," \u2014 "),ij=n(lxe,"A",{href:!0});var Xht=s(ij);PMo=r(Xht,"BigBirdPegasusModel"),Xht.forEach(t),BMo=r(lxe," (BigBird-Pegasus model)"),lxe.forEach(t),NMo=i(x),Yu=n(x,"LI",{});var ixe=s(Yu);wce=n(ixe,"STRONG",{});var zht=s(wce);IMo=r(zht,"blenderbot"),zht.forEach(t),qMo=r(ixe," \u2014 "),dj=n(ixe,"A",{href:!0});var Qht=s(dj);jMo=r(Qht,"BlenderbotModel"),Qht.forEach(t),DMo=r(ixe," (Blenderbot model)"),ixe.forEach(t),GMo=i(x),Ku=n(x,"LI",{});var dxe=s(Ku);Ace=n(dxe,"STRONG",{});var Wht=s(Ace);OMo=r(Wht,"blenderbot-small"),Wht.forEach(t),VMo=r(dxe," \u2014 "),cj=n(dxe,"A",{href:!0});var Hht=s(cj);XMo=r(Hht,"BlenderbotSmallModel"),Hht.forEach(t),zMo=r(dxe," (BlenderbotSmall model)"),dxe.forEach(t),QMo=i(x),Zu=n(x,"LI",{});var cxe=s(Zu);Lce=n(cxe,"STRONG",{});var Uht=s(Lce);WMo=r(Uht,"bloom"),Uht.forEach(t),HMo=r(cxe," \u2014 "),mj=n(cxe,"A",{href:!0});var Jht=s(mj);UMo=r(Jht,"BloomModel"),Jht.forEach(t),JMo=r(cxe," (BLOOM model)"),cxe.forEach(t),YMo=i(x),ep=n(x,"LI",{});var mxe=s(ep);yce=n(mxe,"STRONG",{});var Yht=s(yce);KMo=r(Yht,"camembert"),Yht.forEach(t),ZMo=r(mxe," \u2014 "),fj=n(mxe,"A",{href:!0});var Kht=s(fj);e4o=r(Kht,"CamembertModel"),Kht.forEach(t),o4o=r(mxe," (CamemBERT model)"),mxe.forEach(t),r4o=i(x),op=n(x,"LI",{});var fxe=s(op);xce=n(fxe,"STRONG",{});var Zht=s(xce);t4o=r(Zht,"canine"),Zht.forEach(t),a4o=r(fxe," \u2014 "),gj=n(fxe,"A",{href:!0});var eut=s(gj);n4o=r(eut,"CanineModel"),eut.forEach(t),s4o=r(fxe," (CANINE model)"),fxe.forEach(t),l4o=i(x),rp=n(x,"LI",{});var gxe=s(rp);$ce=n(gxe,"STRONG",{});var out=s($ce);i4o=r(out,"clip"),out.forEach(t),d4o=r(gxe," \u2014 "),hj=n(gxe,"A",{href:!0});var rut=s(hj);c4o=r(rut,"CLIPModel"),rut.forEach(t),m4o=r(gxe," (CLIP model)"),gxe.forEach(t),f4o=i(x),tp=n(x,"LI",{});var hxe=s(tp);kce=n(hxe,"STRONG",{});var tut=s(kce);g4o=r(tut,"codegen"),tut.forEach(t),h4o=r(hxe," \u2014 "),uj=n(hxe,"A",{href:!0});var aut=s(uj);u4o=r(aut,"CodeGenModel"),aut.forEach(t),p4o=r(hxe," (CodeGen model)"),hxe.forEach(t),_4o=i(x),ap=n(x,"LI",{});var uxe=s(ap);Sce=n(uxe,"STRONG",{});var nut=s(Sce);b4o=r(nut,"convbert"),nut.forEach(t),v4o=r(uxe," \u2014 "),pj=n(uxe,"A",{href:!0});var sut=s(pj);F4o=r(sut,"ConvBertModel"),sut.forEach(t),T4o=r(uxe," (ConvBERT model)"),uxe.forEach(t),M4o=i(x),np=n(x,"LI",{});var pxe=s(np);Rce=n(pxe,"STRONG",{});var lut=s(Rce);E4o=r(lut,"convnext"),lut.forEach(t),C4o=r(pxe," \u2014 "),_j=n(pxe,"A",{href:!0});var iut=s(_j);w4o=r(iut,"ConvNextModel"),iut.forEach(t),A4o=r(pxe," (ConvNeXT model)"),pxe.forEach(t),L4o=i(x),sp=n(x,"LI",{});var _xe=s(sp);Pce=n(_xe,"STRONG",{});var dut=s(Pce);y4o=r(dut,"ctrl"),dut.forEach(t),x4o=r(_xe," \u2014 "),bj=n(_xe,"A",{href:!0});var cut=s(bj);$4o=r(cut,"CTRLModel"),cut.forEach(t),k4o=r(_xe," (CTRL model)"),_xe.forEach(t),S4o=i(x),lp=n(x,"LI",{});var bxe=s(lp);Bce=n(bxe,"STRONG",{});var mut=s(Bce);R4o=r(mut,"cvt"),mut.forEach(t),P4o=r(bxe," \u2014 "),vj=n(bxe,"A",{href:!0});var fut=s(vj);B4o=r(fut,"CvtModel"),fut.forEach(t),N4o=r(bxe," (CvT model)"),bxe.forEach(t),I4o=i(x),ip=n(x,"LI",{});var vxe=s(ip);Nce=n(vxe,"STRONG",{});var gut=s(Nce);q4o=r(gut,"data2vec-audio"),gut.forEach(t),j4o=r(vxe," \u2014 "),Fj=n(vxe,"A",{href:!0});var hut=s(Fj);D4o=r(hut,"Data2VecAudioModel"),hut.forEach(t),G4o=r(vxe," (Data2VecAudio model)"),vxe.forEach(t),O4o=i(x),dp=n(x,"LI",{});var Fxe=s(dp);Ice=n(Fxe,"STRONG",{});var uut=s(Ice);V4o=r(uut,"data2vec-text"),uut.forEach(t),X4o=r(Fxe," \u2014 "),Tj=n(Fxe,"A",{href:!0});var put=s(Tj);z4o=r(put,"Data2VecTextModel"),put.forEach(t),Q4o=r(Fxe," (Data2VecText model)"),Fxe.forEach(t),W4o=i(x),cp=n(x,"LI",{});var Txe=s(cp);qce=n(Txe,"STRONG",{});var _ut=s(qce);H4o=r(_ut,"data2vec-vision"),_ut.forEach(t),U4o=r(Txe," \u2014 "),Mj=n(Txe,"A",{href:!0});var but=s(Mj);J4o=r(but,"Data2VecVisionModel"),but.forEach(t),Y4o=r(Txe," (Data2VecVision model)"),Txe.forEach(t),K4o=i(x),mp=n(x,"LI",{});var Mxe=s(mp);jce=n(Mxe,"STRONG",{});var vut=s(jce);Z4o=r(vut,"deberta"),vut.forEach(t),eEo=r(Mxe," \u2014 "),Ej=n(Mxe,"A",{href:!0});var Fut=s(Ej);oEo=r(Fut,"DebertaModel"),Fut.forEach(t),rEo=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),tEo=i(x),fp=n(x,"LI",{});var Exe=s(fp);Dce=n(Exe,"STRONG",{});var Tut=s(Dce);aEo=r(Tut,"deberta-v2"),Tut.forEach(t),nEo=r(Exe," \u2014 "),Cj=n(Exe,"A",{href:!0});var Mut=s(Cj);sEo=r(Mut,"DebertaV2Model"),Mut.forEach(t),lEo=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),iEo=i(x),gp=n(x,"LI",{});var Cxe=s(gp);Gce=n(Cxe,"STRONG",{});var Eut=s(Gce);dEo=r(Eut,"decision_transformer"),Eut.forEach(t),cEo=r(Cxe," \u2014 "),wj=n(Cxe,"A",{href:!0});var Cut=s(wj);mEo=r(Cut,"DecisionTransformerModel"),Cut.forEach(t),fEo=r(Cxe," (Decision Transformer model)"),Cxe.forEach(t),gEo=i(x),hp=n(x,"LI",{});var wxe=s(hp);Oce=n(wxe,"STRONG",{});var wut=s(Oce);hEo=r(wut,"deit"),wut.forEach(t),uEo=r(wxe," \u2014 "),Aj=n(wxe,"A",{href:!0});var Aut=s(Aj);pEo=r(Aut,"DeiTModel"),Aut.forEach(t),_Eo=r(wxe," (DeiT model)"),wxe.forEach(t),bEo=i(x),up=n(x,"LI",{});var Axe=s(up);Vce=n(Axe,"STRONG",{});var Lut=s(Vce);vEo=r(Lut,"detr"),Lut.forEach(t),FEo=r(Axe," \u2014 "),Lj=n(Axe,"A",{href:!0});var yut=s(Lj);TEo=r(yut,"DetrModel"),yut.forEach(t),MEo=r(Axe," (DETR model)"),Axe.forEach(t),EEo=i(x),pp=n(x,"LI",{});var Lxe=s(pp);Xce=n(Lxe,"STRONG",{});var xut=s(Xce);CEo=r(xut,"distilbert"),xut.forEach(t),wEo=r(Lxe," \u2014 "),yj=n(Lxe,"A",{href:!0});var $ut=s(yj);AEo=r($ut,"DistilBertModel"),$ut.forEach(t),LEo=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),yEo=i(x),_p=n(x,"LI",{});var yxe=s(_p);zce=n(yxe,"STRONG",{});var kut=s(zce);xEo=r(kut,"dpr"),kut.forEach(t),$Eo=r(yxe," \u2014 "),xj=n(yxe,"A",{href:!0});var Sut=s(xj);kEo=r(Sut,"DPRQuestionEncoder"),Sut.forEach(t),SEo=r(yxe," (DPR model)"),yxe.forEach(t),REo=i(x),bp=n(x,"LI",{});var xxe=s(bp);Qce=n(xxe,"STRONG",{});var Rut=s(Qce);PEo=r(Rut,"dpt"),Rut.forEach(t),BEo=r(xxe," \u2014 "),$j=n(xxe,"A",{href:!0});var Put=s($j);NEo=r(Put,"DPTModel"),Put.forEach(t),IEo=r(xxe," (DPT model)"),xxe.forEach(t),qEo=i(x),vp=n(x,"LI",{});var $xe=s(vp);Wce=n($xe,"STRONG",{});var But=s(Wce);jEo=r(But,"electra"),But.forEach(t),DEo=r($xe," \u2014 "),kj=n($xe,"A",{href:!0});var Nut=s(kj);GEo=r(Nut,"ElectraModel"),Nut.forEach(t),OEo=r($xe," (ELECTRA model)"),$xe.forEach(t),VEo=i(x),Fp=n(x,"LI",{});var kxe=s(Fp);Hce=n(kxe,"STRONG",{});var Iut=s(Hce);XEo=r(Iut,"flaubert"),Iut.forEach(t),zEo=r(kxe," \u2014 "),Sj=n(kxe,"A",{href:!0});var qut=s(Sj);QEo=r(qut,"FlaubertModel"),qut.forEach(t),WEo=r(kxe," (FlauBERT model)"),kxe.forEach(t),HEo=i(x),Tp=n(x,"LI",{});var Sxe=s(Tp);Uce=n(Sxe,"STRONG",{});var jut=s(Uce);UEo=r(jut,"flava"),jut.forEach(t),JEo=r(Sxe," \u2014 "),Rj=n(Sxe,"A",{href:!0});var Dut=s(Rj);YEo=r(Dut,"FlavaModel"),Dut.forEach(t),KEo=r(Sxe," (FLAVA model)"),Sxe.forEach(t),ZEo=i(x),Mp=n(x,"LI",{});var Rxe=s(Mp);Jce=n(Rxe,"STRONG",{});var Gut=s(Jce);eCo=r(Gut,"fnet"),Gut.forEach(t),oCo=r(Rxe," \u2014 "),Pj=n(Rxe,"A",{href:!0});var Out=s(Pj);rCo=r(Out,"FNetModel"),Out.forEach(t),tCo=r(Rxe," (FNet model)"),Rxe.forEach(t),aCo=i(x),Ep=n(x,"LI",{});var Pxe=s(Ep);Yce=n(Pxe,"STRONG",{});var Vut=s(Yce);nCo=r(Vut,"fsmt"),Vut.forEach(t),sCo=r(Pxe," \u2014 "),Bj=n(Pxe,"A",{href:!0});var Xut=s(Bj);lCo=r(Xut,"FSMTModel"),Xut.forEach(t),iCo=r(Pxe," (FairSeq Machine-Translation model)"),Pxe.forEach(t),dCo=i(x),Hs=n(x,"LI",{});var PS=s(Hs);Kce=n(PS,"STRONG",{});var zut=s(Kce);cCo=r(zut,"funnel"),zut.forEach(t),mCo=r(PS," \u2014 "),Nj=n(PS,"A",{href:!0});var Qut=s(Nj);fCo=r(Qut,"FunnelModel"),Qut.forEach(t),gCo=r(PS," or "),Ij=n(PS,"A",{href:!0});var Wut=s(Ij);hCo=r(Wut,"FunnelBaseModel"),Wut.forEach(t),uCo=r(PS," (Funnel Transformer model)"),PS.forEach(t),pCo=i(x),Cp=n(x,"LI",{});var Bxe=s(Cp);Zce=n(Bxe,"STRONG",{});var Hut=s(Zce);_Co=r(Hut,"glpn"),Hut.forEach(t),bCo=r(Bxe," \u2014 "),qj=n(Bxe,"A",{href:!0});var Uut=s(qj);vCo=r(Uut,"GLPNModel"),Uut.forEach(t),FCo=r(Bxe," (GLPN model)"),Bxe.forEach(t),TCo=i(x),wp=n(x,"LI",{});var Nxe=s(wp);eme=n(Nxe,"STRONG",{});var Jut=s(eme);MCo=r(Jut,"gpt2"),Jut.forEach(t),ECo=r(Nxe," \u2014 "),jj=n(Nxe,"A",{href:!0});var Yut=s(jj);CCo=r(Yut,"GPT2Model"),Yut.forEach(t),wCo=r(Nxe," (OpenAI GPT-2 model)"),Nxe.forEach(t),ACo=i(x),Ap=n(x,"LI",{});var Ixe=s(Ap);ome=n(Ixe,"STRONG",{});var Kut=s(ome);LCo=r(Kut,"gpt_neo"),Kut.forEach(t),yCo=r(Ixe," \u2014 "),Dj=n(Ixe,"A",{href:!0});var Zut=s(Dj);xCo=r(Zut,"GPTNeoModel"),Zut.forEach(t),$Co=r(Ixe," (GPT Neo model)"),Ixe.forEach(t),kCo=i(x),Lp=n(x,"LI",{});var qxe=s(Lp);rme=n(qxe,"STRONG",{});var ept=s(rme);SCo=r(ept,"gpt_neox"),ept.forEach(t),RCo=r(qxe," \u2014 "),Gj=n(qxe,"A",{href:!0});var opt=s(Gj);PCo=r(opt,"GPTNeoXModel"),opt.forEach(t),BCo=r(qxe," (GPT NeoX model)"),qxe.forEach(t),NCo=i(x),yp=n(x,"LI",{});var jxe=s(yp);tme=n(jxe,"STRONG",{});var rpt=s(tme);ICo=r(rpt,"gptj"),rpt.forEach(t),qCo=r(jxe," \u2014 "),Oj=n(jxe,"A",{href:!0});var tpt=s(Oj);jCo=r(tpt,"GPTJModel"),tpt.forEach(t),DCo=r(jxe," (GPT-J model)"),jxe.forEach(t),GCo=i(x),xp=n(x,"LI",{});var Dxe=s(xp);ame=n(Dxe,"STRONG",{});var apt=s(ame);OCo=r(apt,"groupvit"),apt.forEach(t),VCo=r(Dxe," \u2014 "),Vj=n(Dxe,"A",{href:!0});var npt=s(Vj);XCo=r(npt,"GroupViTModel"),npt.forEach(t),zCo=r(Dxe," (GroupViT model)"),Dxe.forEach(t),QCo=i(x),$p=n(x,"LI",{});var Gxe=s($p);nme=n(Gxe,"STRONG",{});var spt=s(nme);WCo=r(spt,"hubert"),spt.forEach(t),HCo=r(Gxe," \u2014 "),Xj=n(Gxe,"A",{href:!0});var lpt=s(Xj);UCo=r(lpt,"HubertModel"),lpt.forEach(t),JCo=r(Gxe," (Hubert model)"),Gxe.forEach(t),YCo=i(x),kp=n(x,"LI",{});var Oxe=s(kp);sme=n(Oxe,"STRONG",{});var ipt=s(sme);KCo=r(ipt,"ibert"),ipt.forEach(t),ZCo=r(Oxe," \u2014 "),zj=n(Oxe,"A",{href:!0});var dpt=s(zj);e3o=r(dpt,"IBertModel"),dpt.forEach(t),o3o=r(Oxe," (I-BERT model)"),Oxe.forEach(t),r3o=i(x),Sp=n(x,"LI",{});var Vxe=s(Sp);lme=n(Vxe,"STRONG",{});var cpt=s(lme);t3o=r(cpt,"imagegpt"),cpt.forEach(t),a3o=r(Vxe," \u2014 "),Qj=n(Vxe,"A",{href:!0});var mpt=s(Qj);n3o=r(mpt,"ImageGPTModel"),mpt.forEach(t),s3o=r(Vxe," (ImageGPT model)"),Vxe.forEach(t),l3o=i(x),Rp=n(x,"LI",{});var Xxe=s(Rp);ime=n(Xxe,"STRONG",{});var fpt=s(ime);i3o=r(fpt,"layoutlm"),fpt.forEach(t),d3o=r(Xxe," \u2014 "),Wj=n(Xxe,"A",{href:!0});var gpt=s(Wj);c3o=r(gpt,"LayoutLMModel"),gpt.forEach(t),m3o=r(Xxe," (LayoutLM model)"),Xxe.forEach(t),f3o=i(x),Pp=n(x,"LI",{});var zxe=s(Pp);dme=n(zxe,"STRONG",{});var hpt=s(dme);g3o=r(hpt,"layoutlmv2"),hpt.forEach(t),h3o=r(zxe," \u2014 "),Hj=n(zxe,"A",{href:!0});var upt=s(Hj);u3o=r(upt,"LayoutLMv2Model"),upt.forEach(t),p3o=r(zxe," (LayoutLMv2 model)"),zxe.forEach(t),_3o=i(x),Bp=n(x,"LI",{});var Qxe=s(Bp);cme=n(Qxe,"STRONG",{});var ppt=s(cme);b3o=r(ppt,"layoutlmv3"),ppt.forEach(t),v3o=r(Qxe," \u2014 "),Uj=n(Qxe,"A",{href:!0});var _pt=s(Uj);F3o=r(_pt,"LayoutLMv3Model"),_pt.forEach(t),T3o=r(Qxe," (LayoutLMv3 model)"),Qxe.forEach(t),M3o=i(x),Np=n(x,"LI",{});var Wxe=s(Np);mme=n(Wxe,"STRONG",{});var bpt=s(mme);E3o=r(bpt,"led"),bpt.forEach(t),C3o=r(Wxe," \u2014 "),Jj=n(Wxe,"A",{href:!0});var vpt=s(Jj);w3o=r(vpt,"LEDModel"),vpt.forEach(t),A3o=r(Wxe," (LED model)"),Wxe.forEach(t),L3o=i(x),Ip=n(x,"LI",{});var Hxe=s(Ip);fme=n(Hxe,"STRONG",{});var Fpt=s(fme);y3o=r(Fpt,"levit"),Fpt.forEach(t),x3o=r(Hxe," \u2014 "),Yj=n(Hxe,"A",{href:!0});var Tpt=s(Yj);$3o=r(Tpt,"LevitModel"),Tpt.forEach(t),k3o=r(Hxe," (LeViT model)"),Hxe.forEach(t),S3o=i(x),qp=n(x,"LI",{});var Uxe=s(qp);gme=n(Uxe,"STRONG",{});var Mpt=s(gme);R3o=r(Mpt,"longformer"),Mpt.forEach(t),P3o=r(Uxe," \u2014 "),Kj=n(Uxe,"A",{href:!0});var Ept=s(Kj);B3o=r(Ept,"LongformerModel"),Ept.forEach(t),N3o=r(Uxe," (Longformer model)"),Uxe.forEach(t),I3o=i(x),jp=n(x,"LI",{});var Jxe=s(jp);hme=n(Jxe,"STRONG",{});var Cpt=s(hme);q3o=r(Cpt,"longt5"),Cpt.forEach(t),j3o=r(Jxe," \u2014 "),Zj=n(Jxe,"A",{href:!0});var wpt=s(Zj);D3o=r(wpt,"LongT5Model"),wpt.forEach(t),G3o=r(Jxe," (LongT5 model)"),Jxe.forEach(t),O3o=i(x),Dp=n(x,"LI",{});var Yxe=s(Dp);ume=n(Yxe,"STRONG",{});var Apt=s(ume);V3o=r(Apt,"luke"),Apt.forEach(t),X3o=r(Yxe," \u2014 "),eD=n(Yxe,"A",{href:!0});var Lpt=s(eD);z3o=r(Lpt,"LukeModel"),Lpt.forEach(t),Q3o=r(Yxe," (LUKE model)"),Yxe.forEach(t),W3o=i(x),Gp=n(x,"LI",{});var Kxe=s(Gp);pme=n(Kxe,"STRONG",{});var ypt=s(pme);H3o=r(ypt,"lxmert"),ypt.forEach(t),U3o=r(Kxe," \u2014 "),oD=n(Kxe,"A",{href:!0});var xpt=s(oD);J3o=r(xpt,"LxmertModel"),xpt.forEach(t),Y3o=r(Kxe," (LXMERT model)"),Kxe.forEach(t),K3o=i(x),Op=n(x,"LI",{});var Zxe=s(Op);_me=n(Zxe,"STRONG",{});var $pt=s(_me);Z3o=r($pt,"m2m_100"),$pt.forEach(t),e5o=r(Zxe," \u2014 "),rD=n(Zxe,"A",{href:!0});var kpt=s(rD);o5o=r(kpt,"M2M100Model"),kpt.forEach(t),r5o=r(Zxe," (M2M100 model)"),Zxe.forEach(t),t5o=i(x),Vp=n(x,"LI",{});var e$e=s(Vp);bme=n(e$e,"STRONG",{});var Spt=s(bme);a5o=r(Spt,"marian"),Spt.forEach(t),n5o=r(e$e," \u2014 "),tD=n(e$e,"A",{href:!0});var Rpt=s(tD);s5o=r(Rpt,"MarianModel"),Rpt.forEach(t),l5o=r(e$e," (Marian model)"),e$e.forEach(t),i5o=i(x),Xp=n(x,"LI",{});var o$e=s(Xp);vme=n(o$e,"STRONG",{});var Ppt=s(vme);d5o=r(Ppt,"maskformer"),Ppt.forEach(t),c5o=r(o$e," \u2014 "),aD=n(o$e,"A",{href:!0});var Bpt=s(aD);m5o=r(Bpt,"MaskFormerModel"),Bpt.forEach(t),f5o=r(o$e," (MaskFormer model)"),o$e.forEach(t),g5o=i(x),zp=n(x,"LI",{});var r$e=s(zp);Fme=n(r$e,"STRONG",{});var Npt=s(Fme);h5o=r(Npt,"mbart"),Npt.forEach(t),u5o=r(r$e," \u2014 "),nD=n(r$e,"A",{href:!0});var Ipt=s(nD);p5o=r(Ipt,"MBartModel"),Ipt.forEach(t),_5o=r(r$e," (mBART model)"),r$e.forEach(t),b5o=i(x),Qp=n(x,"LI",{});var t$e=s(Qp);Tme=n(t$e,"STRONG",{});var qpt=s(Tme);v5o=r(qpt,"mctct"),qpt.forEach(t),F5o=r(t$e," \u2014 "),sD=n(t$e,"A",{href:!0});var jpt=s(sD);T5o=r(jpt,"MCTCTModel"),jpt.forEach(t),M5o=r(t$e," (M-CTC-T model)"),t$e.forEach(t),E5o=i(x),Wp=n(x,"LI",{});var a$e=s(Wp);Mme=n(a$e,"STRONG",{});var Dpt=s(Mme);C5o=r(Dpt,"megatron-bert"),Dpt.forEach(t),w5o=r(a$e," \u2014 "),lD=n(a$e,"A",{href:!0});var Gpt=s(lD);A5o=r(Gpt,"MegatronBertModel"),Gpt.forEach(t),L5o=r(a$e," (Megatron-BERT model)"),a$e.forEach(t),y5o=i(x),Hp=n(x,"LI",{});var n$e=s(Hp);Eme=n(n$e,"STRONG",{});var Opt=s(Eme);x5o=r(Opt,"mobilebert"),Opt.forEach(t),$5o=r(n$e," \u2014 "),iD=n(n$e,"A",{href:!0});var Vpt=s(iD);k5o=r(Vpt,"MobileBertModel"),Vpt.forEach(t),S5o=r(n$e," (MobileBERT model)"),n$e.forEach(t),R5o=i(x),Up=n(x,"LI",{});var s$e=s(Up);Cme=n(s$e,"STRONG",{});var Xpt=s(Cme);P5o=r(Xpt,"mobilevit"),Xpt.forEach(t),B5o=r(s$e," \u2014 "),dD=n(s$e,"A",{href:!0});var zpt=s(dD);N5o=r(zpt,"MobileViTModel"),zpt.forEach(t),I5o=r(s$e," (MobileViT model)"),s$e.forEach(t),q5o=i(x),Jp=n(x,"LI",{});var l$e=s(Jp);wme=n(l$e,"STRONG",{});var Qpt=s(wme);j5o=r(Qpt,"mpnet"),Qpt.forEach(t),D5o=r(l$e," \u2014 "),cD=n(l$e,"A",{href:!0});var Wpt=s(cD);G5o=r(Wpt,"MPNetModel"),Wpt.forEach(t),O5o=r(l$e," (MPNet model)"),l$e.forEach(t),V5o=i(x),Yp=n(x,"LI",{});var i$e=s(Yp);Ame=n(i$e,"STRONG",{});var Hpt=s(Ame);X5o=r(Hpt,"mt5"),Hpt.forEach(t),z5o=r(i$e," \u2014 "),mD=n(i$e,"A",{href:!0});var Upt=s(mD);Q5o=r(Upt,"MT5Model"),Upt.forEach(t),W5o=r(i$e," (MT5 model)"),i$e.forEach(t),H5o=i(x),Kp=n(x,"LI",{});var d$e=s(Kp);Lme=n(d$e,"STRONG",{});var Jpt=s(Lme);U5o=r(Jpt,"mvp"),Jpt.forEach(t),J5o=r(d$e," \u2014 "),fD=n(d$e,"A",{href:!0});var Ypt=s(fD);Y5o=r(Ypt,"MvpModel"),Ypt.forEach(t),K5o=r(d$e," (MVP model)"),d$e.forEach(t),Z5o=i(x),Zp=n(x,"LI",{});var c$e=s(Zp);yme=n(c$e,"STRONG",{});var Kpt=s(yme);e0o=r(Kpt,"nezha"),Kpt.forEach(t),o0o=r(c$e," \u2014 "),gD=n(c$e,"A",{href:!0});var Zpt=s(gD);r0o=r(Zpt,"NezhaModel"),Zpt.forEach(t),t0o=r(c$e," (Nezha model)"),c$e.forEach(t),a0o=i(x),e_=n(x,"LI",{});var m$e=s(e_);xme=n(m$e,"STRONG",{});var e_t=s(xme);n0o=r(e_t,"nllb"),e_t.forEach(t),s0o=r(m$e," \u2014 "),hD=n(m$e,"A",{href:!0});var o_t=s(hD);l0o=r(o_t,"M2M100Model"),o_t.forEach(t),i0o=r(m$e," (NLLB model)"),m$e.forEach(t),d0o=i(x),o_=n(x,"LI",{});var f$e=s(o_);$me=n(f$e,"STRONG",{});var r_t=s($me);c0o=r(r_t,"nystromformer"),r_t.forEach(t),m0o=r(f$e," \u2014 "),uD=n(f$e,"A",{href:!0});var t_t=s(uD);f0o=r(t_t,"NystromformerModel"),t_t.forEach(t),g0o=r(f$e," (Nystr\xF6mformer model)"),f$e.forEach(t),h0o=i(x),r_=n(x,"LI",{});var g$e=s(r_);kme=n(g$e,"STRONG",{});var a_t=s(kme);u0o=r(a_t,"openai-gpt"),a_t.forEach(t),p0o=r(g$e," \u2014 "),pD=n(g$e,"A",{href:!0});var n_t=s(pD);_0o=r(n_t,"OpenAIGPTModel"),n_t.forEach(t),b0o=r(g$e," (OpenAI GPT model)"),g$e.forEach(t),v0o=i(x),t_=n(x,"LI",{});var h$e=s(t_);Sme=n(h$e,"STRONG",{});var s_t=s(Sme);F0o=r(s_t,"opt"),s_t.forEach(t),T0o=r(h$e," \u2014 "),_D=n(h$e,"A",{href:!0});var l_t=s(_D);M0o=r(l_t,"OPTModel"),l_t.forEach(t),E0o=r(h$e," (OPT model)"),h$e.forEach(t),C0o=i(x),a_=n(x,"LI",{});var u$e=s(a_);Rme=n(u$e,"STRONG",{});var i_t=s(Rme);w0o=r(i_t,"pegasus"),i_t.forEach(t),A0o=r(u$e," \u2014 "),bD=n(u$e,"A",{href:!0});var d_t=s(bD);L0o=r(d_t,"PegasusModel"),d_t.forEach(t),y0o=r(u$e," (Pegasus model)"),u$e.forEach(t),x0o=i(x),n_=n(x,"LI",{});var p$e=s(n_);Pme=n(p$e,"STRONG",{});var c_t=s(Pme);$0o=r(c_t,"perceiver"),c_t.forEach(t),k0o=r(p$e," \u2014 "),vD=n(p$e,"A",{href:!0});var m_t=s(vD);S0o=r(m_t,"PerceiverModel"),m_t.forEach(t),R0o=r(p$e," (Perceiver model)"),p$e.forEach(t),P0o=i(x),s_=n(x,"LI",{});var _$e=s(s_);Bme=n(_$e,"STRONG",{});var f_t=s(Bme);B0o=r(f_t,"plbart"),f_t.forEach(t),N0o=r(_$e," \u2014 "),FD=n(_$e,"A",{href:!0});var g_t=s(FD);I0o=r(g_t,"PLBartModel"),g_t.forEach(t),q0o=r(_$e," (PLBart model)"),_$e.forEach(t),j0o=i(x),l_=n(x,"LI",{});var b$e=s(l_);Nme=n(b$e,"STRONG",{});var h_t=s(Nme);D0o=r(h_t,"poolformer"),h_t.forEach(t),G0o=r(b$e," \u2014 "),TD=n(b$e,"A",{href:!0});var u_t=s(TD);O0o=r(u_t,"PoolFormerModel"),u_t.forEach(t),V0o=r(b$e," (PoolFormer model)"),b$e.forEach(t),X0o=i(x),i_=n(x,"LI",{});var v$e=s(i_);Ime=n(v$e,"STRONG",{});var p_t=s(Ime);z0o=r(p_t,"prophetnet"),p_t.forEach(t),Q0o=r(v$e," \u2014 "),MD=n(v$e,"A",{href:!0});var __t=s(MD);W0o=r(__t,"ProphetNetModel"),__t.forEach(t),H0o=r(v$e," (ProphetNet model)"),v$e.forEach(t),U0o=i(x),d_=n(x,"LI",{});var F$e=s(d_);qme=n(F$e,"STRONG",{});var b_t=s(qme);J0o=r(b_t,"qdqbert"),b_t.forEach(t),Y0o=r(F$e," \u2014 "),ED=n(F$e,"A",{href:!0});var v_t=s(ED);K0o=r(v_t,"QDQBertModel"),v_t.forEach(t),Z0o=r(F$e," (QDQBert model)"),F$e.forEach(t),ewo=i(x),c_=n(x,"LI",{});var T$e=s(c_);jme=n(T$e,"STRONG",{});var F_t=s(jme);owo=r(F_t,"reformer"),F_t.forEach(t),rwo=r(T$e," \u2014 "),CD=n(T$e,"A",{href:!0});var T_t=s(CD);two=r(T_t,"ReformerModel"),T_t.forEach(t),awo=r(T$e," (Reformer model)"),T$e.forEach(t),nwo=i(x),m_=n(x,"LI",{});var M$e=s(m_);Dme=n(M$e,"STRONG",{});var M_t=s(Dme);swo=r(M_t,"regnet"),M_t.forEach(t),lwo=r(M$e," \u2014 "),wD=n(M$e,"A",{href:!0});var E_t=s(wD);iwo=r(E_t,"RegNetModel"),E_t.forEach(t),dwo=r(M$e," (RegNet model)"),M$e.forEach(t),cwo=i(x),f_=n(x,"LI",{});var E$e=s(f_);Gme=n(E$e,"STRONG",{});var C_t=s(Gme);mwo=r(C_t,"rembert"),C_t.forEach(t),fwo=r(E$e," \u2014 "),AD=n(E$e,"A",{href:!0});var w_t=s(AD);gwo=r(w_t,"RemBertModel"),w_t.forEach(t),hwo=r(E$e," (RemBERT model)"),E$e.forEach(t),uwo=i(x),g_=n(x,"LI",{});var C$e=s(g_);Ome=n(C$e,"STRONG",{});var A_t=s(Ome);pwo=r(A_t,"resnet"),A_t.forEach(t),_wo=r(C$e," \u2014 "),LD=n(C$e,"A",{href:!0});var L_t=s(LD);bwo=r(L_t,"ResNetModel"),L_t.forEach(t),vwo=r(C$e," (ResNet model)"),C$e.forEach(t),Fwo=i(x),h_=n(x,"LI",{});var w$e=s(h_);Vme=n(w$e,"STRONG",{});var y_t=s(Vme);Two=r(y_t,"retribert"),y_t.forEach(t),Mwo=r(w$e," \u2014 "),yD=n(w$e,"A",{href:!0});var x_t=s(yD);Ewo=r(x_t,"RetriBertModel"),x_t.forEach(t),Cwo=r(w$e," (RetriBERT model)"),w$e.forEach(t),wwo=i(x),u_=n(x,"LI",{});var A$e=s(u_);Xme=n(A$e,"STRONG",{});var $_t=s(Xme);Awo=r($_t,"roberta"),$_t.forEach(t),Lwo=r(A$e," \u2014 "),xD=n(A$e,"A",{href:!0});var k_t=s(xD);ywo=r(k_t,"RobertaModel"),k_t.forEach(t),xwo=r(A$e," (RoBERTa model)"),A$e.forEach(t),$wo=i(x),p_=n(x,"LI",{});var L$e=s(p_);zme=n(L$e,"STRONG",{});var S_t=s(zme);kwo=r(S_t,"roformer"),S_t.forEach(t),Swo=r(L$e," \u2014 "),$D=n(L$e,"A",{href:!0});var R_t=s($D);Rwo=r(R_t,"RoFormerModel"),R_t.forEach(t),Pwo=r(L$e," (RoFormer model)"),L$e.forEach(t),Bwo=i(x),__=n(x,"LI",{});var y$e=s(__);Qme=n(y$e,"STRONG",{});var P_t=s(Qme);Nwo=r(P_t,"segformer"),P_t.forEach(t),Iwo=r(y$e," \u2014 "),kD=n(y$e,"A",{href:!0});var B_t=s(kD);qwo=r(B_t,"SegformerModel"),B_t.forEach(t),jwo=r(y$e," (SegFormer model)"),y$e.forEach(t),Dwo=i(x),b_=n(x,"LI",{});var x$e=s(b_);Wme=n(x$e,"STRONG",{});var N_t=s(Wme);Gwo=r(N_t,"sew"),N_t.forEach(t),Owo=r(x$e," \u2014 "),SD=n(x$e,"A",{href:!0});var I_t=s(SD);Vwo=r(I_t,"SEWModel"),I_t.forEach(t),Xwo=r(x$e," (SEW model)"),x$e.forEach(t),zwo=i(x),v_=n(x,"LI",{});var $$e=s(v_);Hme=n($$e,"STRONG",{});var q_t=s(Hme);Qwo=r(q_t,"sew-d"),q_t.forEach(t),Wwo=r($$e," \u2014 "),RD=n($$e,"A",{href:!0});var j_t=s(RD);Hwo=r(j_t,"SEWDModel"),j_t.forEach(t),Uwo=r($$e," (SEW-D model)"),$$e.forEach(t),Jwo=i(x),F_=n(x,"LI",{});var k$e=s(F_);Ume=n(k$e,"STRONG",{});var D_t=s(Ume);Ywo=r(D_t,"speech_to_text"),D_t.forEach(t),Kwo=r(k$e," \u2014 "),PD=n(k$e,"A",{href:!0});var G_t=s(PD);Zwo=r(G_t,"Speech2TextModel"),G_t.forEach(t),eAo=r(k$e," (Speech2Text model)"),k$e.forEach(t),oAo=i(x),T_=n(x,"LI",{});var S$e=s(T_);Jme=n(S$e,"STRONG",{});var O_t=s(Jme);rAo=r(O_t,"splinter"),O_t.forEach(t),tAo=r(S$e," \u2014 "),BD=n(S$e,"A",{href:!0});var V_t=s(BD);aAo=r(V_t,"SplinterModel"),V_t.forEach(t),nAo=r(S$e," (Splinter model)"),S$e.forEach(t),sAo=i(x),M_=n(x,"LI",{});var R$e=s(M_);Yme=n(R$e,"STRONG",{});var X_t=s(Yme);lAo=r(X_t,"squeezebert"),X_t.forEach(t),iAo=r(R$e," \u2014 "),ND=n(R$e,"A",{href:!0});var z_t=s(ND);dAo=r(z_t,"SqueezeBertModel"),z_t.forEach(t),cAo=r(R$e," (SqueezeBERT model)"),R$e.forEach(t),mAo=i(x),E_=n(x,"LI",{});var P$e=s(E_);Kme=n(P$e,"STRONG",{});var Q_t=s(Kme);fAo=r(Q_t,"swin"),Q_t.forEach(t),gAo=r(P$e," \u2014 "),ID=n(P$e,"A",{href:!0});var W_t=s(ID);hAo=r(W_t,"SwinModel"),W_t.forEach(t),uAo=r(P$e," (Swin Transformer model)"),P$e.forEach(t),pAo=i(x),C_=n(x,"LI",{});var B$e=s(C_);Zme=n(B$e,"STRONG",{});var H_t=s(Zme);_Ao=r(H_t,"t5"),H_t.forEach(t),bAo=r(B$e," \u2014 "),qD=n(B$e,"A",{href:!0});var U_t=s(qD);vAo=r(U_t,"T5Model"),U_t.forEach(t),FAo=r(B$e," (T5 model)"),B$e.forEach(t),TAo=i(x),w_=n(x,"LI",{});var N$e=s(w_);efe=n(N$e,"STRONG",{});var J_t=s(efe);MAo=r(J_t,"tapas"),J_t.forEach(t),EAo=r(N$e," \u2014 "),jD=n(N$e,"A",{href:!0});var Y_t=s(jD);CAo=r(Y_t,"TapasModel"),Y_t.forEach(t),wAo=r(N$e," (TAPAS model)"),N$e.forEach(t),AAo=i(x),A_=n(x,"LI",{});var I$e=s(A_);ofe=n(I$e,"STRONG",{});var K_t=s(ofe);LAo=r(K_t,"trajectory_transformer"),K_t.forEach(t),yAo=r(I$e," \u2014 "),DD=n(I$e,"A",{href:!0});var Z_t=s(DD);xAo=r(Z_t,"TrajectoryTransformerModel"),Z_t.forEach(t),$Ao=r(I$e," (Trajectory Transformer model)"),I$e.forEach(t),kAo=i(x),L_=n(x,"LI",{});var q$e=s(L_);rfe=n(q$e,"STRONG",{});var e2t=s(rfe);SAo=r(e2t,"transfo-xl"),e2t.forEach(t),RAo=r(q$e," \u2014 "),GD=n(q$e,"A",{href:!0});var o2t=s(GD);PAo=r(o2t,"TransfoXLModel"),o2t.forEach(t),BAo=r(q$e," (Transformer-XL model)"),q$e.forEach(t),NAo=i(x),y_=n(x,"LI",{});var j$e=s(y_);tfe=n(j$e,"STRONG",{});var r2t=s(tfe);IAo=r(r2t,"unispeech"),r2t.forEach(t),qAo=r(j$e," \u2014 "),OD=n(j$e,"A",{href:!0});var t2t=s(OD);jAo=r(t2t,"UniSpeechModel"),t2t.forEach(t),DAo=r(j$e," (UniSpeech model)"),j$e.forEach(t),GAo=i(x),x_=n(x,"LI",{});var D$e=s(x_);afe=n(D$e,"STRONG",{});var a2t=s(afe);OAo=r(a2t,"unispeech-sat"),a2t.forEach(t),VAo=r(D$e," \u2014 "),VD=n(D$e,"A",{href:!0});var n2t=s(VD);XAo=r(n2t,"UniSpeechSatModel"),n2t.forEach(t),zAo=r(D$e," (UniSpeechSat model)"),D$e.forEach(t),QAo=i(x),$_=n(x,"LI",{});var G$e=s($_);nfe=n(G$e,"STRONG",{});var s2t=s(nfe);WAo=r(s2t,"van"),s2t.forEach(t),HAo=r(G$e," \u2014 "),XD=n(G$e,"A",{href:!0});var l2t=s(XD);UAo=r(l2t,"VanModel"),l2t.forEach(t),JAo=r(G$e," (VAN model)"),G$e.forEach(t),YAo=i(x),k_=n(x,"LI",{});var O$e=s(k_);sfe=n(O$e,"STRONG",{});var i2t=s(sfe);KAo=r(i2t,"vilt"),i2t.forEach(t),ZAo=r(O$e," \u2014 "),zD=n(O$e,"A",{href:!0});var d2t=s(zD);e6o=r(d2t,"ViltModel"),d2t.forEach(t),o6o=r(O$e," (ViLT model)"),O$e.forEach(t),r6o=i(x),S_=n(x,"LI",{});var V$e=s(S_);lfe=n(V$e,"STRONG",{});var c2t=s(lfe);t6o=r(c2t,"vision-text-dual-encoder"),c2t.forEach(t),a6o=r(V$e," \u2014 "),QD=n(V$e,"A",{href:!0});var m2t=s(QD);n6o=r(m2t,"VisionTextDualEncoderModel"),m2t.forEach(t),s6o=r(V$e," (VisionTextDualEncoder model)"),V$e.forEach(t),l6o=i(x),R_=n(x,"LI",{});var X$e=s(R_);ife=n(X$e,"STRONG",{});var f2t=s(ife);i6o=r(f2t,"visual_bert"),f2t.forEach(t),d6o=r(X$e," \u2014 "),WD=n(X$e,"A",{href:!0});var g2t=s(WD);c6o=r(g2t,"VisualBertModel"),g2t.forEach(t),m6o=r(X$e," (VisualBERT model)"),X$e.forEach(t),f6o=i(x),P_=n(x,"LI",{});var z$e=s(P_);dfe=n(z$e,"STRONG",{});var h2t=s(dfe);g6o=r(h2t,"vit"),h2t.forEach(t),h6o=r(z$e," \u2014 "),HD=n(z$e,"A",{href:!0});var u2t=s(HD);u6o=r(u2t,"ViTModel"),u2t.forEach(t),p6o=r(z$e," (ViT model)"),z$e.forEach(t),_6o=i(x),B_=n(x,"LI",{});var Q$e=s(B_);cfe=n(Q$e,"STRONG",{});var p2t=s(cfe);b6o=r(p2t,"vit_mae"),p2t.forEach(t),v6o=r(Q$e," \u2014 "),UD=n(Q$e,"A",{href:!0});var _2t=s(UD);F6o=r(_2t,"ViTMAEModel"),_2t.forEach(t),T6o=r(Q$e," (ViTMAE model)"),Q$e.forEach(t),M6o=i(x),N_=n(x,"LI",{});var W$e=s(N_);mfe=n(W$e,"STRONG",{});var b2t=s(mfe);E6o=r(b2t,"wav2vec2"),b2t.forEach(t),C6o=r(W$e," \u2014 "),JD=n(W$e,"A",{href:!0});var v2t=s(JD);w6o=r(v2t,"Wav2Vec2Model"),v2t.forEach(t),A6o=r(W$e," (Wav2Vec2 model)"),W$e.forEach(t),L6o=i(x),I_=n(x,"LI",{});var H$e=s(I_);ffe=n(H$e,"STRONG",{});var F2t=s(ffe);y6o=r(F2t,"wav2vec2-conformer"),F2t.forEach(t),x6o=r(H$e," \u2014 "),YD=n(H$e,"A",{href:!0});var T2t=s(YD);$6o=r(T2t,"Wav2Vec2ConformerModel"),T2t.forEach(t),k6o=r(H$e," (Wav2Vec2-Conformer model)"),H$e.forEach(t),S6o=i(x),q_=n(x,"LI",{});var U$e=s(q_);gfe=n(U$e,"STRONG",{});var M2t=s(gfe);R6o=r(M2t,"wavlm"),M2t.forEach(t),P6o=r(U$e," \u2014 "),KD=n(U$e,"A",{href:!0});var E2t=s(KD);B6o=r(E2t,"WavLMModel"),E2t.forEach(t),N6o=r(U$e," (WavLM model)"),U$e.forEach(t),I6o=i(x),j_=n(x,"LI",{});var J$e=s(j_);hfe=n(J$e,"STRONG",{});var C2t=s(hfe);q6o=r(C2t,"xglm"),C2t.forEach(t),j6o=r(J$e," \u2014 "),ZD=n(J$e,"A",{href:!0});var w2t=s(ZD);D6o=r(w2t,"XGLMModel"),w2t.forEach(t),G6o=r(J$e," (XGLM model)"),J$e.forEach(t),O6o=i(x),D_=n(x,"LI",{});var Y$e=s(D_);ufe=n(Y$e,"STRONG",{});var A2t=s(ufe);V6o=r(A2t,"xlm"),A2t.forEach(t),X6o=r(Y$e," \u2014 "),eG=n(Y$e,"A",{href:!0});var L2t=s(eG);z6o=r(L2t,"XLMModel"),L2t.forEach(t),Q6o=r(Y$e," (XLM model)"),Y$e.forEach(t),W6o=i(x),G_=n(x,"LI",{});var K$e=s(G_);pfe=n(K$e,"STRONG",{});var y2t=s(pfe);H6o=r(y2t,"xlm-prophetnet"),y2t.forEach(t),U6o=r(K$e," \u2014 "),oG=n(K$e,"A",{href:!0});var x2t=s(oG);J6o=r(x2t,"XLMProphetNetModel"),x2t.forEach(t),Y6o=r(K$e," (XLM-ProphetNet model)"),K$e.forEach(t),K6o=i(x),O_=n(x,"LI",{});var Z$e=s(O_);_fe=n(Z$e,"STRONG",{});var $2t=s(_fe);Z6o=r($2t,"xlm-roberta"),$2t.forEach(t),e7o=r(Z$e," \u2014 "),rG=n(Z$e,"A",{href:!0});var k2t=s(rG);o7o=r(k2t,"XLMRobertaModel"),k2t.forEach(t),r7o=r(Z$e," (XLM-RoBERTa model)"),Z$e.forEach(t),t7o=i(x),V_=n(x,"LI",{});var eke=s(V_);bfe=n(eke,"STRONG",{});var S2t=s(bfe);a7o=r(S2t,"xlm-roberta-xl"),S2t.forEach(t),n7o=r(eke," \u2014 "),tG=n(eke,"A",{href:!0});var R2t=s(tG);s7o=r(R2t,"XLMRobertaXLModel"),R2t.forEach(t),l7o=r(eke," (XLM-RoBERTa-XL model)"),eke.forEach(t),i7o=i(x),X_=n(x,"LI",{});var oke=s(X_);vfe=n(oke,"STRONG",{});var P2t=s(vfe);d7o=r(P2t,"xlnet"),P2t.forEach(t),c7o=r(oke," \u2014 "),aG=n(oke,"A",{href:!0});var B2t=s(aG);m7o=r(B2t,"XLNetModel"),B2t.forEach(t),f7o=r(oke," (XLNet model)"),oke.forEach(t),g7o=i(x),z_=n(x,"LI",{});var rke=s(z_);Ffe=n(rke,"STRONG",{});var N2t=s(Ffe);h7o=r(N2t,"yolos"),N2t.forEach(t),u7o=r(rke," \u2014 "),nG=n(rke,"A",{href:!0});var I2t=s(nG);p7o=r(I2t,"YolosModel"),I2t.forEach(t),_7o=r(rke," (YOLOS model)"),rke.forEach(t),b7o=i(x),Q_=n(x,"LI",{});var tke=s(Q_);Tfe=n(tke,"STRONG",{});var q2t=s(Tfe);v7o=r(q2t,"yoso"),q2t.forEach(t),F7o=r(tke," \u2014 "),sG=n(tke,"A",{href:!0});var j2t=s(sG);T7o=r(j2t,"YosoModel"),j2t.forEach(t),M7o=r(tke," (YOSO model)"),tke.forEach(t),x.forEach(t),E7o=i(la),W_=n(la,"P",{});var ake=s(W_);C7o=r(ake,"The model is set in evaluation mode by default using "),Mfe=n(ake,"CODE",{});var D2t=s(Mfe);w7o=r(D2t,"model.eval()"),D2t.forEach(t),A7o=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(ake,"CODE",{});var G2t=s(Efe);L7o=r(G2t,"model.train()"),G2t.forEach(t),ake.forEach(t),y7o=i(la),T(H_.$$.fragment,la),la.forEach(t),tl.forEach(t),wXe=i(m),zi=n(m,"H2",{class:!0});var kQe=s(zi);U_=n(kQe,"A",{id:!0,class:!0,href:!0});var O2t=s(U_);Cfe=n(O2t,"SPAN",{});var V2t=s(Cfe);T(qy.$$.fragment,V2t),V2t.forEach(t),O2t.forEach(t),x7o=i(kQe),wfe=n(kQe,"SPAN",{});var X2t=s(wfe);$7o=r(X2t,"AutoModelForPreTraining"),X2t.forEach(t),kQe.forEach(t),AXe=i(m),ko=n(m,"DIV",{class:!0});var al=s(ko);T(jy.$$.fragment,al),k7o=i(al),Qi=n(al,"P",{});var Gre=s(Qi);S7o=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lG=n(Gre,"A",{href:!0});var z2t=s(lG);R7o=r(z2t,"from_pretrained()"),z2t.forEach(t),P7o=r(Gre," class method or the "),iG=n(Gre,"A",{href:!0});var Q2t=s(iG);B7o=r(Q2t,"from_config()"),Q2t.forEach(t),N7o=r(Gre,` class
method.`),Gre.forEach(t),I7o=i(al),Dy=n(al,"P",{});var SQe=s(Dy);q7o=r(SQe,"This class cannot be instantiated directly using "),Afe=n(SQe,"CODE",{});var W2t=s(Afe);j7o=r(W2t,"__init__()"),W2t.forEach(t),D7o=r(SQe," (throws an error)."),SQe.forEach(t),G7o=i(al),dt=n(al,"DIV",{class:!0});var g7=s(dt);T(Gy.$$.fragment,g7),O7o=i(g7),Lfe=n(g7,"P",{});var H2t=s(Lfe);V7o=r(H2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H2t.forEach(t),X7o=i(g7),Wi=n(g7,"P",{});var Ore=s(Wi);z7o=r(Ore,`Note:
Loading a model from its configuration file does `),yfe=n(Ore,"STRONG",{});var U2t=s(yfe);Q7o=r(U2t,"not"),U2t.forEach(t),W7o=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=n(Ore,"A",{href:!0});var J2t=s(dG);H7o=r(J2t,"from_pretrained()"),J2t.forEach(t),U7o=r(Ore," to load the model weights."),Ore.forEach(t),J7o=i(g7),T(J_.$$.fragment,g7),g7.forEach(t),Y7o=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(Oy.$$.fragment,ia),K7o=i(ia),xfe=n(ia,"P",{});var Y2t=s(xfe);Z7o=r(Y2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y2t.forEach(t),eLo=i(ia),Ia=n(ia,"P",{});var h7=s(Ia);oLo=r(h7,"The model class to instantiate is selected based on the "),$fe=n(h7,"CODE",{});var K2t=s($fe);rLo=r(K2t,"model_type"),K2t.forEach(t),tLo=r(h7,` property of the config object (either
passed as an argument or loaded from `),kfe=n(h7,"CODE",{});var Z2t=s(kfe);aLo=r(Z2t,"pretrained_model_name_or_path"),Z2t.forEach(t),nLo=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(h7,"CODE",{});var ebt=s(Sfe);sLo=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),lLo=r(h7,":"),h7.forEach(t),iLo=i(ia),G=n(ia,"UL",{});var O=s(G);Y_=n(O,"LI",{});var nke=s(Y_);Rfe=n(nke,"STRONG",{});var obt=s(Rfe);dLo=r(obt,"albert"),obt.forEach(t),cLo=r(nke," \u2014 "),cG=n(nke,"A",{href:!0});var rbt=s(cG);mLo=r(rbt,"AlbertForPreTraining"),rbt.forEach(t),fLo=r(nke," (ALBERT model)"),nke.forEach(t),gLo=i(O),K_=n(O,"LI",{});var ske=s(K_);Pfe=n(ske,"STRONG",{});var tbt=s(Pfe);hLo=r(tbt,"bart"),tbt.forEach(t),uLo=r(ske," \u2014 "),mG=n(ske,"A",{href:!0});var abt=s(mG);pLo=r(abt,"BartForConditionalGeneration"),abt.forEach(t),_Lo=r(ske," (BART model)"),ske.forEach(t),bLo=i(O),Z_=n(O,"LI",{});var lke=s(Z_);Bfe=n(lke,"STRONG",{});var nbt=s(Bfe);vLo=r(nbt,"bert"),nbt.forEach(t),FLo=r(lke," \u2014 "),fG=n(lke,"A",{href:!0});var sbt=s(fG);TLo=r(sbt,"BertForPreTraining"),sbt.forEach(t),MLo=r(lke," (BERT model)"),lke.forEach(t),ELo=i(O),e2=n(O,"LI",{});var ike=s(e2);Nfe=n(ike,"STRONG",{});var lbt=s(Nfe);CLo=r(lbt,"big_bird"),lbt.forEach(t),wLo=r(ike," \u2014 "),gG=n(ike,"A",{href:!0});var ibt=s(gG);ALo=r(ibt,"BigBirdForPreTraining"),ibt.forEach(t),LLo=r(ike," (BigBird model)"),ike.forEach(t),yLo=i(O),o2=n(O,"LI",{});var dke=s(o2);Ife=n(dke,"STRONG",{});var dbt=s(Ife);xLo=r(dbt,"bloom"),dbt.forEach(t),$Lo=r(dke," \u2014 "),hG=n(dke,"A",{href:!0});var cbt=s(hG);kLo=r(cbt,"BloomForCausalLM"),cbt.forEach(t),SLo=r(dke," (BLOOM model)"),dke.forEach(t),RLo=i(O),r2=n(O,"LI",{});var cke=s(r2);qfe=n(cke,"STRONG",{});var mbt=s(qfe);PLo=r(mbt,"camembert"),mbt.forEach(t),BLo=r(cke," \u2014 "),uG=n(cke,"A",{href:!0});var fbt=s(uG);NLo=r(fbt,"CamembertForMaskedLM"),fbt.forEach(t),ILo=r(cke," (CamemBERT model)"),cke.forEach(t),qLo=i(O),t2=n(O,"LI",{});var mke=s(t2);jfe=n(mke,"STRONG",{});var gbt=s(jfe);jLo=r(gbt,"ctrl"),gbt.forEach(t),DLo=r(mke," \u2014 "),pG=n(mke,"A",{href:!0});var hbt=s(pG);GLo=r(hbt,"CTRLLMHeadModel"),hbt.forEach(t),OLo=r(mke," (CTRL model)"),mke.forEach(t),VLo=i(O),a2=n(O,"LI",{});var fke=s(a2);Dfe=n(fke,"STRONG",{});var ubt=s(Dfe);XLo=r(ubt,"data2vec-text"),ubt.forEach(t),zLo=r(fke," \u2014 "),_G=n(fke,"A",{href:!0});var pbt=s(_G);QLo=r(pbt,"Data2VecTextForMaskedLM"),pbt.forEach(t),WLo=r(fke," (Data2VecText model)"),fke.forEach(t),HLo=i(O),n2=n(O,"LI",{});var gke=s(n2);Gfe=n(gke,"STRONG",{});var _bt=s(Gfe);ULo=r(_bt,"deberta"),_bt.forEach(t),JLo=r(gke," \u2014 "),bG=n(gke,"A",{href:!0});var bbt=s(bG);YLo=r(bbt,"DebertaForMaskedLM"),bbt.forEach(t),KLo=r(gke," (DeBERTa model)"),gke.forEach(t),ZLo=i(O),s2=n(O,"LI",{});var hke=s(s2);Ofe=n(hke,"STRONG",{});var vbt=s(Ofe);eyo=r(vbt,"deberta-v2"),vbt.forEach(t),oyo=r(hke," \u2014 "),vG=n(hke,"A",{href:!0});var Fbt=s(vG);ryo=r(Fbt,"DebertaV2ForMaskedLM"),Fbt.forEach(t),tyo=r(hke," (DeBERTa-v2 model)"),hke.forEach(t),ayo=i(O),l2=n(O,"LI",{});var uke=s(l2);Vfe=n(uke,"STRONG",{});var Tbt=s(Vfe);nyo=r(Tbt,"distilbert"),Tbt.forEach(t),syo=r(uke," \u2014 "),FG=n(uke,"A",{href:!0});var Mbt=s(FG);lyo=r(Mbt,"DistilBertForMaskedLM"),Mbt.forEach(t),iyo=r(uke," (DistilBERT model)"),uke.forEach(t),dyo=i(O),i2=n(O,"LI",{});var pke=s(i2);Xfe=n(pke,"STRONG",{});var Ebt=s(Xfe);cyo=r(Ebt,"electra"),Ebt.forEach(t),myo=r(pke," \u2014 "),TG=n(pke,"A",{href:!0});var Cbt=s(TG);fyo=r(Cbt,"ElectraForPreTraining"),Cbt.forEach(t),gyo=r(pke," (ELECTRA model)"),pke.forEach(t),hyo=i(O),d2=n(O,"LI",{});var _ke=s(d2);zfe=n(_ke,"STRONG",{});var wbt=s(zfe);uyo=r(wbt,"flaubert"),wbt.forEach(t),pyo=r(_ke," \u2014 "),MG=n(_ke,"A",{href:!0});var Abt=s(MG);_yo=r(Abt,"FlaubertWithLMHeadModel"),Abt.forEach(t),byo=r(_ke," (FlauBERT model)"),_ke.forEach(t),vyo=i(O),c2=n(O,"LI",{});var bke=s(c2);Qfe=n(bke,"STRONG",{});var Lbt=s(Qfe);Fyo=r(Lbt,"flava"),Lbt.forEach(t),Tyo=r(bke," \u2014 "),EG=n(bke,"A",{href:!0});var ybt=s(EG);Myo=r(ybt,"FlavaForPreTraining"),ybt.forEach(t),Eyo=r(bke," (FLAVA model)"),bke.forEach(t),Cyo=i(O),m2=n(O,"LI",{});var vke=s(m2);Wfe=n(vke,"STRONG",{});var xbt=s(Wfe);wyo=r(xbt,"fnet"),xbt.forEach(t),Ayo=r(vke," \u2014 "),CG=n(vke,"A",{href:!0});var $bt=s(CG);Lyo=r($bt,"FNetForPreTraining"),$bt.forEach(t),yyo=r(vke," (FNet model)"),vke.forEach(t),xyo=i(O),f2=n(O,"LI",{});var Fke=s(f2);Hfe=n(Fke,"STRONG",{});var kbt=s(Hfe);$yo=r(kbt,"fsmt"),kbt.forEach(t),kyo=r(Fke," \u2014 "),wG=n(Fke,"A",{href:!0});var Sbt=s(wG);Syo=r(Sbt,"FSMTForConditionalGeneration"),Sbt.forEach(t),Ryo=r(Fke," (FairSeq Machine-Translation model)"),Fke.forEach(t),Pyo=i(O),g2=n(O,"LI",{});var Tke=s(g2);Ufe=n(Tke,"STRONG",{});var Rbt=s(Ufe);Byo=r(Rbt,"funnel"),Rbt.forEach(t),Nyo=r(Tke," \u2014 "),AG=n(Tke,"A",{href:!0});var Pbt=s(AG);Iyo=r(Pbt,"FunnelForPreTraining"),Pbt.forEach(t),qyo=r(Tke," (Funnel Transformer model)"),Tke.forEach(t),jyo=i(O),h2=n(O,"LI",{});var Mke=s(h2);Jfe=n(Mke,"STRONG",{});var Bbt=s(Jfe);Dyo=r(Bbt,"gpt2"),Bbt.forEach(t),Gyo=r(Mke," \u2014 "),LG=n(Mke,"A",{href:!0});var Nbt=s(LG);Oyo=r(Nbt,"GPT2LMHeadModel"),Nbt.forEach(t),Vyo=r(Mke," (OpenAI GPT-2 model)"),Mke.forEach(t),Xyo=i(O),u2=n(O,"LI",{});var Eke=s(u2);Yfe=n(Eke,"STRONG",{});var Ibt=s(Yfe);zyo=r(Ibt,"ibert"),Ibt.forEach(t),Qyo=r(Eke," \u2014 "),yG=n(Eke,"A",{href:!0});var qbt=s(yG);Wyo=r(qbt,"IBertForMaskedLM"),qbt.forEach(t),Hyo=r(Eke," (I-BERT model)"),Eke.forEach(t),Uyo=i(O),p2=n(O,"LI",{});var Cke=s(p2);Kfe=n(Cke,"STRONG",{});var jbt=s(Kfe);Jyo=r(jbt,"layoutlm"),jbt.forEach(t),Yyo=r(Cke," \u2014 "),xG=n(Cke,"A",{href:!0});var Dbt=s(xG);Kyo=r(Dbt,"LayoutLMForMaskedLM"),Dbt.forEach(t),Zyo=r(Cke," (LayoutLM model)"),Cke.forEach(t),e8o=i(O),_2=n(O,"LI",{});var wke=s(_2);Zfe=n(wke,"STRONG",{});var Gbt=s(Zfe);o8o=r(Gbt,"longformer"),Gbt.forEach(t),r8o=r(wke," \u2014 "),$G=n(wke,"A",{href:!0});var Obt=s($G);t8o=r(Obt,"LongformerForMaskedLM"),Obt.forEach(t),a8o=r(wke," (Longformer model)"),wke.forEach(t),n8o=i(O),b2=n(O,"LI",{});var Ake=s(b2);ege=n(Ake,"STRONG",{});var Vbt=s(ege);s8o=r(Vbt,"lxmert"),Vbt.forEach(t),l8o=r(Ake," \u2014 "),kG=n(Ake,"A",{href:!0});var Xbt=s(kG);i8o=r(Xbt,"LxmertForPreTraining"),Xbt.forEach(t),d8o=r(Ake," (LXMERT model)"),Ake.forEach(t),c8o=i(O),v2=n(O,"LI",{});var Lke=s(v2);oge=n(Lke,"STRONG",{});var zbt=s(oge);m8o=r(zbt,"megatron-bert"),zbt.forEach(t),f8o=r(Lke," \u2014 "),SG=n(Lke,"A",{href:!0});var Qbt=s(SG);g8o=r(Qbt,"MegatronBertForPreTraining"),Qbt.forEach(t),h8o=r(Lke," (Megatron-BERT model)"),Lke.forEach(t),u8o=i(O),F2=n(O,"LI",{});var yke=s(F2);rge=n(yke,"STRONG",{});var Wbt=s(rge);p8o=r(Wbt,"mobilebert"),Wbt.forEach(t),_8o=r(yke," \u2014 "),RG=n(yke,"A",{href:!0});var Hbt=s(RG);b8o=r(Hbt,"MobileBertForPreTraining"),Hbt.forEach(t),v8o=r(yke," (MobileBERT model)"),yke.forEach(t),F8o=i(O),T2=n(O,"LI",{});var xke=s(T2);tge=n(xke,"STRONG",{});var Ubt=s(tge);T8o=r(Ubt,"mpnet"),Ubt.forEach(t),M8o=r(xke," \u2014 "),PG=n(xke,"A",{href:!0});var Jbt=s(PG);E8o=r(Jbt,"MPNetForMaskedLM"),Jbt.forEach(t),C8o=r(xke," (MPNet model)"),xke.forEach(t),w8o=i(O),M2=n(O,"LI",{});var $ke=s(M2);age=n($ke,"STRONG",{});var Ybt=s(age);A8o=r(Ybt,"mvp"),Ybt.forEach(t),L8o=r($ke," \u2014 "),BG=n($ke,"A",{href:!0});var Kbt=s(BG);y8o=r(Kbt,"MvpForConditionalGeneration"),Kbt.forEach(t),x8o=r($ke," (MVP model)"),$ke.forEach(t),$8o=i(O),E2=n(O,"LI",{});var kke=s(E2);nge=n(kke,"STRONG",{});var Zbt=s(nge);k8o=r(Zbt,"nezha"),Zbt.forEach(t),S8o=r(kke," \u2014 "),NG=n(kke,"A",{href:!0});var evt=s(NG);R8o=r(evt,"NezhaForPreTraining"),evt.forEach(t),P8o=r(kke," (Nezha model)"),kke.forEach(t),B8o=i(O),C2=n(O,"LI",{});var Ske=s(C2);sge=n(Ske,"STRONG",{});var ovt=s(sge);N8o=r(ovt,"openai-gpt"),ovt.forEach(t),I8o=r(Ske," \u2014 "),IG=n(Ske,"A",{href:!0});var rvt=s(IG);q8o=r(rvt,"OpenAIGPTLMHeadModel"),rvt.forEach(t),j8o=r(Ske," (OpenAI GPT model)"),Ske.forEach(t),D8o=i(O),w2=n(O,"LI",{});var Rke=s(w2);lge=n(Rke,"STRONG",{});var tvt=s(lge);G8o=r(tvt,"retribert"),tvt.forEach(t),O8o=r(Rke," \u2014 "),qG=n(Rke,"A",{href:!0});var avt=s(qG);V8o=r(avt,"RetriBertModel"),avt.forEach(t),X8o=r(Rke," (RetriBERT model)"),Rke.forEach(t),z8o=i(O),A2=n(O,"LI",{});var Pke=s(A2);ige=n(Pke,"STRONG",{});var nvt=s(ige);Q8o=r(nvt,"roberta"),nvt.forEach(t),W8o=r(Pke," \u2014 "),jG=n(Pke,"A",{href:!0});var svt=s(jG);H8o=r(svt,"RobertaForMaskedLM"),svt.forEach(t),U8o=r(Pke," (RoBERTa model)"),Pke.forEach(t),J8o=i(O),L2=n(O,"LI",{});var Bke=s(L2);dge=n(Bke,"STRONG",{});var lvt=s(dge);Y8o=r(lvt,"splinter"),lvt.forEach(t),K8o=r(Bke," \u2014 "),DG=n(Bke,"A",{href:!0});var ivt=s(DG);Z8o=r(ivt,"SplinterForPreTraining"),ivt.forEach(t),e9o=r(Bke," (Splinter model)"),Bke.forEach(t),o9o=i(O),y2=n(O,"LI",{});var Nke=s(y2);cge=n(Nke,"STRONG",{});var dvt=s(cge);r9o=r(dvt,"squeezebert"),dvt.forEach(t),t9o=r(Nke," \u2014 "),GG=n(Nke,"A",{href:!0});var cvt=s(GG);a9o=r(cvt,"SqueezeBertForMaskedLM"),cvt.forEach(t),n9o=r(Nke," (SqueezeBERT model)"),Nke.forEach(t),s9o=i(O),x2=n(O,"LI",{});var Ike=s(x2);mge=n(Ike,"STRONG",{});var mvt=s(mge);l9o=r(mvt,"t5"),mvt.forEach(t),i9o=r(Ike," \u2014 "),OG=n(Ike,"A",{href:!0});var fvt=s(OG);d9o=r(fvt,"T5ForConditionalGeneration"),fvt.forEach(t),c9o=r(Ike," (T5 model)"),Ike.forEach(t),m9o=i(O),$2=n(O,"LI",{});var qke=s($2);fge=n(qke,"STRONG",{});var gvt=s(fge);f9o=r(gvt,"tapas"),gvt.forEach(t),g9o=r(qke," \u2014 "),VG=n(qke,"A",{href:!0});var hvt=s(VG);h9o=r(hvt,"TapasForMaskedLM"),hvt.forEach(t),u9o=r(qke," (TAPAS model)"),qke.forEach(t),p9o=i(O),k2=n(O,"LI",{});var jke=s(k2);gge=n(jke,"STRONG",{});var uvt=s(gge);_9o=r(uvt,"transfo-xl"),uvt.forEach(t),b9o=r(jke," \u2014 "),XG=n(jke,"A",{href:!0});var pvt=s(XG);v9o=r(pvt,"TransfoXLLMHeadModel"),pvt.forEach(t),F9o=r(jke," (Transformer-XL model)"),jke.forEach(t),T9o=i(O),S2=n(O,"LI",{});var Dke=s(S2);hge=n(Dke,"STRONG",{});var _vt=s(hge);M9o=r(_vt,"unispeech"),_vt.forEach(t),E9o=r(Dke," \u2014 "),zG=n(Dke,"A",{href:!0});var bvt=s(zG);C9o=r(bvt,"UniSpeechForPreTraining"),bvt.forEach(t),w9o=r(Dke," (UniSpeech model)"),Dke.forEach(t),A9o=i(O),R2=n(O,"LI",{});var Gke=s(R2);uge=n(Gke,"STRONG",{});var vvt=s(uge);L9o=r(vvt,"unispeech-sat"),vvt.forEach(t),y9o=r(Gke," \u2014 "),QG=n(Gke,"A",{href:!0});var Fvt=s(QG);x9o=r(Fvt,"UniSpeechSatForPreTraining"),Fvt.forEach(t),$9o=r(Gke," (UniSpeechSat model)"),Gke.forEach(t),k9o=i(O),P2=n(O,"LI",{});var Oke=s(P2);pge=n(Oke,"STRONG",{});var Tvt=s(pge);S9o=r(Tvt,"visual_bert"),Tvt.forEach(t),R9o=r(Oke," \u2014 "),WG=n(Oke,"A",{href:!0});var Mvt=s(WG);P9o=r(Mvt,"VisualBertForPreTraining"),Mvt.forEach(t),B9o=r(Oke," (VisualBERT model)"),Oke.forEach(t),N9o=i(O),B2=n(O,"LI",{});var Vke=s(B2);_ge=n(Vke,"STRONG",{});var Evt=s(_ge);I9o=r(Evt,"vit_mae"),Evt.forEach(t),q9o=r(Vke," \u2014 "),HG=n(Vke,"A",{href:!0});var Cvt=s(HG);j9o=r(Cvt,"ViTMAEForPreTraining"),Cvt.forEach(t),D9o=r(Vke," (ViTMAE model)"),Vke.forEach(t),G9o=i(O),N2=n(O,"LI",{});var Xke=s(N2);bge=n(Xke,"STRONG",{});var wvt=s(bge);O9o=r(wvt,"wav2vec2"),wvt.forEach(t),V9o=r(Xke," \u2014 "),UG=n(Xke,"A",{href:!0});var Avt=s(UG);X9o=r(Avt,"Wav2Vec2ForPreTraining"),Avt.forEach(t),z9o=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),Q9o=i(O),I2=n(O,"LI",{});var zke=s(I2);vge=n(zke,"STRONG",{});var Lvt=s(vge);W9o=r(Lvt,"wav2vec2-conformer"),Lvt.forEach(t),H9o=r(zke," \u2014 "),JG=n(zke,"A",{href:!0});var yvt=s(JG);U9o=r(yvt,"Wav2Vec2ConformerForPreTraining"),yvt.forEach(t),J9o=r(zke," (Wav2Vec2-Conformer model)"),zke.forEach(t),Y9o=i(O),q2=n(O,"LI",{});var Qke=s(q2);Fge=n(Qke,"STRONG",{});var xvt=s(Fge);K9o=r(xvt,"xlm"),xvt.forEach(t),Z9o=r(Qke," \u2014 "),YG=n(Qke,"A",{href:!0});var $vt=s(YG);exo=r($vt,"XLMWithLMHeadModel"),$vt.forEach(t),oxo=r(Qke," (XLM model)"),Qke.forEach(t),rxo=i(O),j2=n(O,"LI",{});var Wke=s(j2);Tge=n(Wke,"STRONG",{});var kvt=s(Tge);txo=r(kvt,"xlm-roberta"),kvt.forEach(t),axo=r(Wke," \u2014 "),KG=n(Wke,"A",{href:!0});var Svt=s(KG);nxo=r(Svt,"XLMRobertaForMaskedLM"),Svt.forEach(t),sxo=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),lxo=i(O),D2=n(O,"LI",{});var Hke=s(D2);Mge=n(Hke,"STRONG",{});var Rvt=s(Mge);ixo=r(Rvt,"xlm-roberta-xl"),Rvt.forEach(t),dxo=r(Hke," \u2014 "),ZG=n(Hke,"A",{href:!0});var Pvt=s(ZG);cxo=r(Pvt,"XLMRobertaXLForMaskedLM"),Pvt.forEach(t),mxo=r(Hke," (XLM-RoBERTa-XL model)"),Hke.forEach(t),fxo=i(O),G2=n(O,"LI",{});var Uke=s(G2);Ege=n(Uke,"STRONG",{});var Bvt=s(Ege);gxo=r(Bvt,"xlnet"),Bvt.forEach(t),hxo=r(Uke," \u2014 "),eO=n(Uke,"A",{href:!0});var Nvt=s(eO);uxo=r(Nvt,"XLNetLMHeadModel"),Nvt.forEach(t),pxo=r(Uke," (XLNet model)"),Uke.forEach(t),O.forEach(t),_xo=i(ia),O2=n(ia,"P",{});var Jke=s(O2);bxo=r(Jke,"The model is set in evaluation mode by default using "),Cge=n(Jke,"CODE",{});var Ivt=s(Cge);vxo=r(Ivt,"model.eval()"),Ivt.forEach(t),Fxo=r(Jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(Jke,"CODE",{});var qvt=s(wge);Txo=r(qvt,"model.train()"),qvt.forEach(t),Jke.forEach(t),Mxo=i(ia),T(V2.$$.fragment,ia),ia.forEach(t),al.forEach(t),LXe=i(m),Hi=n(m,"H2",{class:!0});var RQe=s(Hi);X2=n(RQe,"A",{id:!0,class:!0,href:!0});var jvt=s(X2);Age=n(jvt,"SPAN",{});var Dvt=s(Age);T(Vy.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),Exo=i(RQe),Lge=n(RQe,"SPAN",{});var Gvt=s(Lge);Cxo=r(Gvt,"AutoModelForCausalLM"),Gvt.forEach(t),RQe.forEach(t),yXe=i(m),So=n(m,"DIV",{class:!0});var nl=s(So);T(Xy.$$.fragment,nl),wxo=i(nl),Ui=n(nl,"P",{});var Vre=s(Ui);Axo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oO=n(Vre,"A",{href:!0});var Ovt=s(oO);Lxo=r(Ovt,"from_pretrained()"),Ovt.forEach(t),yxo=r(Vre," class method or the "),rO=n(Vre,"A",{href:!0});var Vvt=s(rO);xxo=r(Vvt,"from_config()"),Vvt.forEach(t),$xo=r(Vre,` class
method.`),Vre.forEach(t),kxo=i(nl),zy=n(nl,"P",{});var PQe=s(zy);Sxo=r(PQe,"This class cannot be instantiated directly using "),yge=n(PQe,"CODE",{});var Xvt=s(yge);Rxo=r(Xvt,"__init__()"),Xvt.forEach(t),Pxo=r(PQe," (throws an error)."),PQe.forEach(t),Bxo=i(nl),ct=n(nl,"DIV",{class:!0});var u7=s(ct);T(Qy.$$.fragment,u7),Nxo=i(u7),xge=n(u7,"P",{});var zvt=s(xge);Ixo=r(zvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zvt.forEach(t),qxo=i(u7),Ji=n(u7,"P",{});var Xre=s(Ji);jxo=r(Xre,`Note:
Loading a model from its configuration file does `),$ge=n(Xre,"STRONG",{});var Qvt=s($ge);Dxo=r(Qvt,"not"),Qvt.forEach(t),Gxo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(Xre,"A",{href:!0});var Wvt=s(tO);Oxo=r(Wvt,"from_pretrained()"),Wvt.forEach(t),Vxo=r(Xre," to load the model weights."),Xre.forEach(t),Xxo=i(u7),T(z2.$$.fragment,u7),u7.forEach(t),zxo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(Wy.$$.fragment,da),Qxo=i(da),kge=n(da,"P",{});var Hvt=s(kge);Wxo=r(Hvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hvt.forEach(t),Hxo=i(da),qa=n(da,"P",{});var p7=s(qa);Uxo=r(p7,"The model class to instantiate is selected based on the "),Sge=n(p7,"CODE",{});var Uvt=s(Sge);Jxo=r(Uvt,"model_type"),Uvt.forEach(t),Yxo=r(p7,` property of the config object (either
passed as an argument or loaded from `),Rge=n(p7,"CODE",{});var Jvt=s(Rge);Kxo=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),Zxo=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(p7,"CODE",{});var Yvt=s(Pge);e$o=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),o$o=r(p7,":"),p7.forEach(t),r$o=i(da),z=n(da,"UL",{});var Q=s(z);Q2=n(Q,"LI",{});var Yke=s(Q2);Bge=n(Yke,"STRONG",{});var Kvt=s(Bge);t$o=r(Kvt,"bart"),Kvt.forEach(t),a$o=r(Yke," \u2014 "),aO=n(Yke,"A",{href:!0});var Zvt=s(aO);n$o=r(Zvt,"BartForCausalLM"),Zvt.forEach(t),s$o=r(Yke," (BART model)"),Yke.forEach(t),l$o=i(Q),W2=n(Q,"LI",{});var Kke=s(W2);Nge=n(Kke,"STRONG",{});var e1t=s(Nge);i$o=r(e1t,"bert"),e1t.forEach(t),d$o=r(Kke," \u2014 "),nO=n(Kke,"A",{href:!0});var o1t=s(nO);c$o=r(o1t,"BertLMHeadModel"),o1t.forEach(t),m$o=r(Kke," (BERT model)"),Kke.forEach(t),f$o=i(Q),H2=n(Q,"LI",{});var Zke=s(H2);Ige=n(Zke,"STRONG",{});var r1t=s(Ige);g$o=r(r1t,"bert-generation"),r1t.forEach(t),h$o=r(Zke," \u2014 "),sO=n(Zke,"A",{href:!0});var t1t=s(sO);u$o=r(t1t,"BertGenerationDecoder"),t1t.forEach(t),p$o=r(Zke," (Bert Generation model)"),Zke.forEach(t),_$o=i(Q),U2=n(Q,"LI",{});var eSe=s(U2);qge=n(eSe,"STRONG",{});var a1t=s(qge);b$o=r(a1t,"big_bird"),a1t.forEach(t),v$o=r(eSe," \u2014 "),lO=n(eSe,"A",{href:!0});var n1t=s(lO);F$o=r(n1t,"BigBirdForCausalLM"),n1t.forEach(t),T$o=r(eSe," (BigBird model)"),eSe.forEach(t),M$o=i(Q),J2=n(Q,"LI",{});var oSe=s(J2);jge=n(oSe,"STRONG",{});var s1t=s(jge);E$o=r(s1t,"bigbird_pegasus"),s1t.forEach(t),C$o=r(oSe," \u2014 "),iO=n(oSe,"A",{href:!0});var l1t=s(iO);w$o=r(l1t,"BigBirdPegasusForCausalLM"),l1t.forEach(t),A$o=r(oSe," (BigBird-Pegasus model)"),oSe.forEach(t),L$o=i(Q),Y2=n(Q,"LI",{});var rSe=s(Y2);Dge=n(rSe,"STRONG",{});var i1t=s(Dge);y$o=r(i1t,"blenderbot"),i1t.forEach(t),x$o=r(rSe," \u2014 "),dO=n(rSe,"A",{href:!0});var d1t=s(dO);$$o=r(d1t,"BlenderbotForCausalLM"),d1t.forEach(t),k$o=r(rSe," (Blenderbot model)"),rSe.forEach(t),S$o=i(Q),K2=n(Q,"LI",{});var tSe=s(K2);Gge=n(tSe,"STRONG",{});var c1t=s(Gge);R$o=r(c1t,"blenderbot-small"),c1t.forEach(t),P$o=r(tSe," \u2014 "),cO=n(tSe,"A",{href:!0});var m1t=s(cO);B$o=r(m1t,"BlenderbotSmallForCausalLM"),m1t.forEach(t),N$o=r(tSe," (BlenderbotSmall model)"),tSe.forEach(t),I$o=i(Q),Z2=n(Q,"LI",{});var aSe=s(Z2);Oge=n(aSe,"STRONG",{});var f1t=s(Oge);q$o=r(f1t,"bloom"),f1t.forEach(t),j$o=r(aSe," \u2014 "),mO=n(aSe,"A",{href:!0});var g1t=s(mO);D$o=r(g1t,"BloomForCausalLM"),g1t.forEach(t),G$o=r(aSe," (BLOOM model)"),aSe.forEach(t),O$o=i(Q),eb=n(Q,"LI",{});var nSe=s(eb);Vge=n(nSe,"STRONG",{});var h1t=s(Vge);V$o=r(h1t,"camembert"),h1t.forEach(t),X$o=r(nSe," \u2014 "),fO=n(nSe,"A",{href:!0});var u1t=s(fO);z$o=r(u1t,"CamembertForCausalLM"),u1t.forEach(t),Q$o=r(nSe," (CamemBERT model)"),nSe.forEach(t),W$o=i(Q),ob=n(Q,"LI",{});var sSe=s(ob);Xge=n(sSe,"STRONG",{});var p1t=s(Xge);H$o=r(p1t,"codegen"),p1t.forEach(t),U$o=r(sSe," \u2014 "),gO=n(sSe,"A",{href:!0});var _1t=s(gO);J$o=r(_1t,"CodeGenForCausalLM"),_1t.forEach(t),Y$o=r(sSe," (CodeGen model)"),sSe.forEach(t),K$o=i(Q),rb=n(Q,"LI",{});var lSe=s(rb);zge=n(lSe,"STRONG",{});var b1t=s(zge);Z$o=r(b1t,"ctrl"),b1t.forEach(t),eko=r(lSe," \u2014 "),hO=n(lSe,"A",{href:!0});var v1t=s(hO);oko=r(v1t,"CTRLLMHeadModel"),v1t.forEach(t),rko=r(lSe," (CTRL model)"),lSe.forEach(t),tko=i(Q),tb=n(Q,"LI",{});var iSe=s(tb);Qge=n(iSe,"STRONG",{});var F1t=s(Qge);ako=r(F1t,"data2vec-text"),F1t.forEach(t),nko=r(iSe," \u2014 "),uO=n(iSe,"A",{href:!0});var T1t=s(uO);sko=r(T1t,"Data2VecTextForCausalLM"),T1t.forEach(t),lko=r(iSe," (Data2VecText model)"),iSe.forEach(t),iko=i(Q),ab=n(Q,"LI",{});var dSe=s(ab);Wge=n(dSe,"STRONG",{});var M1t=s(Wge);dko=r(M1t,"electra"),M1t.forEach(t),cko=r(dSe," \u2014 "),pO=n(dSe,"A",{href:!0});var E1t=s(pO);mko=r(E1t,"ElectraForCausalLM"),E1t.forEach(t),fko=r(dSe," (ELECTRA model)"),dSe.forEach(t),gko=i(Q),nb=n(Q,"LI",{});var cSe=s(nb);Hge=n(cSe,"STRONG",{});var C1t=s(Hge);hko=r(C1t,"gpt2"),C1t.forEach(t),uko=r(cSe," \u2014 "),_O=n(cSe,"A",{href:!0});var w1t=s(_O);pko=r(w1t,"GPT2LMHeadModel"),w1t.forEach(t),_ko=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),bko=i(Q),sb=n(Q,"LI",{});var mSe=s(sb);Uge=n(mSe,"STRONG",{});var A1t=s(Uge);vko=r(A1t,"gpt_neo"),A1t.forEach(t),Fko=r(mSe," \u2014 "),bO=n(mSe,"A",{href:!0});var L1t=s(bO);Tko=r(L1t,"GPTNeoForCausalLM"),L1t.forEach(t),Mko=r(mSe," (GPT Neo model)"),mSe.forEach(t),Eko=i(Q),lb=n(Q,"LI",{});var fSe=s(lb);Jge=n(fSe,"STRONG",{});var y1t=s(Jge);Cko=r(y1t,"gpt_neox"),y1t.forEach(t),wko=r(fSe," \u2014 "),vO=n(fSe,"A",{href:!0});var x1t=s(vO);Ako=r(x1t,"GPTNeoXForCausalLM"),x1t.forEach(t),Lko=r(fSe," (GPT NeoX model)"),fSe.forEach(t),yko=i(Q),ib=n(Q,"LI",{});var gSe=s(ib);Yge=n(gSe,"STRONG",{});var $1t=s(Yge);xko=r($1t,"gptj"),$1t.forEach(t),$ko=r(gSe," \u2014 "),FO=n(gSe,"A",{href:!0});var k1t=s(FO);kko=r(k1t,"GPTJForCausalLM"),k1t.forEach(t),Sko=r(gSe," (GPT-J model)"),gSe.forEach(t),Rko=i(Q),db=n(Q,"LI",{});var hSe=s(db);Kge=n(hSe,"STRONG",{});var S1t=s(Kge);Pko=r(S1t,"marian"),S1t.forEach(t),Bko=r(hSe," \u2014 "),TO=n(hSe,"A",{href:!0});var R1t=s(TO);Nko=r(R1t,"MarianForCausalLM"),R1t.forEach(t),Iko=r(hSe," (Marian model)"),hSe.forEach(t),qko=i(Q),cb=n(Q,"LI",{});var uSe=s(cb);Zge=n(uSe,"STRONG",{});var P1t=s(Zge);jko=r(P1t,"mbart"),P1t.forEach(t),Dko=r(uSe," \u2014 "),MO=n(uSe,"A",{href:!0});var B1t=s(MO);Gko=r(B1t,"MBartForCausalLM"),B1t.forEach(t),Oko=r(uSe," (mBART model)"),uSe.forEach(t),Vko=i(Q),mb=n(Q,"LI",{});var pSe=s(mb);ehe=n(pSe,"STRONG",{});var N1t=s(ehe);Xko=r(N1t,"megatron-bert"),N1t.forEach(t),zko=r(pSe," \u2014 "),EO=n(pSe,"A",{href:!0});var I1t=s(EO);Qko=r(I1t,"MegatronBertForCausalLM"),I1t.forEach(t),Wko=r(pSe," (Megatron-BERT model)"),pSe.forEach(t),Hko=i(Q),fb=n(Q,"LI",{});var _Se=s(fb);ohe=n(_Se,"STRONG",{});var q1t=s(ohe);Uko=r(q1t,"mvp"),q1t.forEach(t),Jko=r(_Se," \u2014 "),CO=n(_Se,"A",{href:!0});var j1t=s(CO);Yko=r(j1t,"MvpForCausalLM"),j1t.forEach(t),Kko=r(_Se," (MVP model)"),_Se.forEach(t),Zko=i(Q),gb=n(Q,"LI",{});var bSe=s(gb);rhe=n(bSe,"STRONG",{});var D1t=s(rhe);eSo=r(D1t,"openai-gpt"),D1t.forEach(t),oSo=r(bSe," \u2014 "),wO=n(bSe,"A",{href:!0});var G1t=s(wO);rSo=r(G1t,"OpenAIGPTLMHeadModel"),G1t.forEach(t),tSo=r(bSe," (OpenAI GPT model)"),bSe.forEach(t),aSo=i(Q),hb=n(Q,"LI",{});var vSe=s(hb);the=n(vSe,"STRONG",{});var O1t=s(the);nSo=r(O1t,"opt"),O1t.forEach(t),sSo=r(vSe," \u2014 "),AO=n(vSe,"A",{href:!0});var V1t=s(AO);lSo=r(V1t,"OPTForCausalLM"),V1t.forEach(t),iSo=r(vSe," (OPT model)"),vSe.forEach(t),dSo=i(Q),ub=n(Q,"LI",{});var FSe=s(ub);ahe=n(FSe,"STRONG",{});var X1t=s(ahe);cSo=r(X1t,"pegasus"),X1t.forEach(t),mSo=r(FSe," \u2014 "),LO=n(FSe,"A",{href:!0});var z1t=s(LO);fSo=r(z1t,"PegasusForCausalLM"),z1t.forEach(t),gSo=r(FSe," (Pegasus model)"),FSe.forEach(t),hSo=i(Q),pb=n(Q,"LI",{});var TSe=s(pb);nhe=n(TSe,"STRONG",{});var Q1t=s(nhe);uSo=r(Q1t,"plbart"),Q1t.forEach(t),pSo=r(TSe," \u2014 "),yO=n(TSe,"A",{href:!0});var W1t=s(yO);_So=r(W1t,"PLBartForCausalLM"),W1t.forEach(t),bSo=r(TSe," (PLBart model)"),TSe.forEach(t),vSo=i(Q),_b=n(Q,"LI",{});var MSe=s(_b);she=n(MSe,"STRONG",{});var H1t=s(she);FSo=r(H1t,"prophetnet"),H1t.forEach(t),TSo=r(MSe," \u2014 "),xO=n(MSe,"A",{href:!0});var U1t=s(xO);MSo=r(U1t,"ProphetNetForCausalLM"),U1t.forEach(t),ESo=r(MSe," (ProphetNet model)"),MSe.forEach(t),CSo=i(Q),bb=n(Q,"LI",{});var ESe=s(bb);lhe=n(ESe,"STRONG",{});var J1t=s(lhe);wSo=r(J1t,"qdqbert"),J1t.forEach(t),ASo=r(ESe," \u2014 "),$O=n(ESe,"A",{href:!0});var Y1t=s($O);LSo=r(Y1t,"QDQBertLMHeadModel"),Y1t.forEach(t),ySo=r(ESe," (QDQBert model)"),ESe.forEach(t),xSo=i(Q),vb=n(Q,"LI",{});var CSe=s(vb);ihe=n(CSe,"STRONG",{});var K1t=s(ihe);$So=r(K1t,"reformer"),K1t.forEach(t),kSo=r(CSe," \u2014 "),kO=n(CSe,"A",{href:!0});var Z1t=s(kO);SSo=r(Z1t,"ReformerModelWithLMHead"),Z1t.forEach(t),RSo=r(CSe," (Reformer model)"),CSe.forEach(t),PSo=i(Q),Fb=n(Q,"LI",{});var wSe=s(Fb);dhe=n(wSe,"STRONG",{});var eFt=s(dhe);BSo=r(eFt,"rembert"),eFt.forEach(t),NSo=r(wSe," \u2014 "),SO=n(wSe,"A",{href:!0});var oFt=s(SO);ISo=r(oFt,"RemBertForCausalLM"),oFt.forEach(t),qSo=r(wSe," (RemBERT model)"),wSe.forEach(t),jSo=i(Q),Tb=n(Q,"LI",{});var ASe=s(Tb);che=n(ASe,"STRONG",{});var rFt=s(che);DSo=r(rFt,"roberta"),rFt.forEach(t),GSo=r(ASe," \u2014 "),RO=n(ASe,"A",{href:!0});var tFt=s(RO);OSo=r(tFt,"RobertaForCausalLM"),tFt.forEach(t),VSo=r(ASe," (RoBERTa model)"),ASe.forEach(t),XSo=i(Q),Mb=n(Q,"LI",{});var LSe=s(Mb);mhe=n(LSe,"STRONG",{});var aFt=s(mhe);zSo=r(aFt,"roformer"),aFt.forEach(t),QSo=r(LSe," \u2014 "),PO=n(LSe,"A",{href:!0});var nFt=s(PO);WSo=r(nFt,"RoFormerForCausalLM"),nFt.forEach(t),HSo=r(LSe," (RoFormer model)"),LSe.forEach(t),USo=i(Q),Eb=n(Q,"LI",{});var ySe=s(Eb);fhe=n(ySe,"STRONG",{});var sFt=s(fhe);JSo=r(sFt,"speech_to_text_2"),sFt.forEach(t),YSo=r(ySe," \u2014 "),BO=n(ySe,"A",{href:!0});var lFt=s(BO);KSo=r(lFt,"Speech2Text2ForCausalLM"),lFt.forEach(t),ZSo=r(ySe," (Speech2Text2 model)"),ySe.forEach(t),eRo=i(Q),Cb=n(Q,"LI",{});var xSe=s(Cb);ghe=n(xSe,"STRONG",{});var iFt=s(ghe);oRo=r(iFt,"transfo-xl"),iFt.forEach(t),rRo=r(xSe," \u2014 "),NO=n(xSe,"A",{href:!0});var dFt=s(NO);tRo=r(dFt,"TransfoXLLMHeadModel"),dFt.forEach(t),aRo=r(xSe," (Transformer-XL model)"),xSe.forEach(t),nRo=i(Q),wb=n(Q,"LI",{});var $Se=s(wb);hhe=n($Se,"STRONG",{});var cFt=s(hhe);sRo=r(cFt,"trocr"),cFt.forEach(t),lRo=r($Se," \u2014 "),IO=n($Se,"A",{href:!0});var mFt=s(IO);iRo=r(mFt,"TrOCRForCausalLM"),mFt.forEach(t),dRo=r($Se," (TrOCR model)"),$Se.forEach(t),cRo=i(Q),Ab=n(Q,"LI",{});var kSe=s(Ab);uhe=n(kSe,"STRONG",{});var fFt=s(uhe);mRo=r(fFt,"xglm"),fFt.forEach(t),fRo=r(kSe," \u2014 "),qO=n(kSe,"A",{href:!0});var gFt=s(qO);gRo=r(gFt,"XGLMForCausalLM"),gFt.forEach(t),hRo=r(kSe," (XGLM model)"),kSe.forEach(t),uRo=i(Q),Lb=n(Q,"LI",{});var SSe=s(Lb);phe=n(SSe,"STRONG",{});var hFt=s(phe);pRo=r(hFt,"xlm"),hFt.forEach(t),_Ro=r(SSe," \u2014 "),jO=n(SSe,"A",{href:!0});var uFt=s(jO);bRo=r(uFt,"XLMWithLMHeadModel"),uFt.forEach(t),vRo=r(SSe," (XLM model)"),SSe.forEach(t),FRo=i(Q),yb=n(Q,"LI",{});var RSe=s(yb);_he=n(RSe,"STRONG",{});var pFt=s(_he);TRo=r(pFt,"xlm-prophetnet"),pFt.forEach(t),MRo=r(RSe," \u2014 "),DO=n(RSe,"A",{href:!0});var _Ft=s(DO);ERo=r(_Ft,"XLMProphetNetForCausalLM"),_Ft.forEach(t),CRo=r(RSe," (XLM-ProphetNet model)"),RSe.forEach(t),wRo=i(Q),xb=n(Q,"LI",{});var PSe=s(xb);bhe=n(PSe,"STRONG",{});var bFt=s(bhe);ARo=r(bFt,"xlm-roberta"),bFt.forEach(t),LRo=r(PSe," \u2014 "),GO=n(PSe,"A",{href:!0});var vFt=s(GO);yRo=r(vFt,"XLMRobertaForCausalLM"),vFt.forEach(t),xRo=r(PSe," (XLM-RoBERTa model)"),PSe.forEach(t),$Ro=i(Q),$b=n(Q,"LI",{});var BSe=s($b);vhe=n(BSe,"STRONG",{});var FFt=s(vhe);kRo=r(FFt,"xlm-roberta-xl"),FFt.forEach(t),SRo=r(BSe," \u2014 "),OO=n(BSe,"A",{href:!0});var TFt=s(OO);RRo=r(TFt,"XLMRobertaXLForCausalLM"),TFt.forEach(t),PRo=r(BSe," (XLM-RoBERTa-XL model)"),BSe.forEach(t),BRo=i(Q),kb=n(Q,"LI",{});var NSe=s(kb);Fhe=n(NSe,"STRONG",{});var MFt=s(Fhe);NRo=r(MFt,"xlnet"),MFt.forEach(t),IRo=r(NSe," \u2014 "),VO=n(NSe,"A",{href:!0});var EFt=s(VO);qRo=r(EFt,"XLNetLMHeadModel"),EFt.forEach(t),jRo=r(NSe," (XLNet model)"),NSe.forEach(t),Q.forEach(t),DRo=i(da),Sb=n(da,"P",{});var ISe=s(Sb);GRo=r(ISe,"The model is set in evaluation mode by default using "),The=n(ISe,"CODE",{});var CFt=s(The);ORo=r(CFt,"model.eval()"),CFt.forEach(t),VRo=r(ISe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(ISe,"CODE",{});var wFt=s(Mhe);XRo=r(wFt,"model.train()"),wFt.forEach(t),ISe.forEach(t),zRo=i(da),T(Rb.$$.fragment,da),da.forEach(t),nl.forEach(t),xXe=i(m),Yi=n(m,"H2",{class:!0});var BQe=s(Yi);Pb=n(BQe,"A",{id:!0,class:!0,href:!0});var AFt=s(Pb);Ehe=n(AFt,"SPAN",{});var LFt=s(Ehe);T(Hy.$$.fragment,LFt),LFt.forEach(t),AFt.forEach(t),QRo=i(BQe),Che=n(BQe,"SPAN",{});var yFt=s(Che);WRo=r(yFt,"AutoModelForMaskedLM"),yFt.forEach(t),BQe.forEach(t),$Xe=i(m),Ro=n(m,"DIV",{class:!0});var sl=s(Ro);T(Uy.$$.fragment,sl),HRo=i(sl),Ki=n(sl,"P",{});var zre=s(Ki);URo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XO=n(zre,"A",{href:!0});var xFt=s(XO);JRo=r(xFt,"from_pretrained()"),xFt.forEach(t),YRo=r(zre," class method or the "),zO=n(zre,"A",{href:!0});var $Ft=s(zO);KRo=r($Ft,"from_config()"),$Ft.forEach(t),ZRo=r(zre,` class
method.`),zre.forEach(t),ePo=i(sl),Jy=n(sl,"P",{});var NQe=s(Jy);oPo=r(NQe,"This class cannot be instantiated directly using "),whe=n(NQe,"CODE",{});var kFt=s(whe);rPo=r(kFt,"__init__()"),kFt.forEach(t),tPo=r(NQe," (throws an error)."),NQe.forEach(t),aPo=i(sl),mt=n(sl,"DIV",{class:!0});var _7=s(mt);T(Yy.$$.fragment,_7),nPo=i(_7),Ahe=n(_7,"P",{});var SFt=s(Ahe);sPo=r(SFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SFt.forEach(t),lPo=i(_7),Zi=n(_7,"P",{});var Qre=s(Zi);iPo=r(Qre,`Note:
Loading a model from its configuration file does `),Lhe=n(Qre,"STRONG",{});var RFt=s(Lhe);dPo=r(RFt,"not"),RFt.forEach(t),cPo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(Qre,"A",{href:!0});var PFt=s(QO);mPo=r(PFt,"from_pretrained()"),PFt.forEach(t),fPo=r(Qre," to load the model weights."),Qre.forEach(t),gPo=i(_7),T(Bb.$$.fragment,_7),_7.forEach(t),hPo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(Ky.$$.fragment,ca),uPo=i(ca),yhe=n(ca,"P",{});var BFt=s(yhe);pPo=r(BFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BFt.forEach(t),_Po=i(ca),ja=n(ca,"P",{});var b7=s(ja);bPo=r(b7,"The model class to instantiate is selected based on the "),xhe=n(b7,"CODE",{});var NFt=s(xhe);vPo=r(NFt,"model_type"),NFt.forEach(t),FPo=r(b7,` property of the config object (either
passed as an argument or loaded from `),$he=n(b7,"CODE",{});var IFt=s($he);TPo=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),MPo=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(b7,"CODE",{});var qFt=s(khe);EPo=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),CPo=r(b7,":"),b7.forEach(t),wPo=i(ca),W=n(ca,"UL",{});var H=s(W);Nb=n(H,"LI",{});var qSe=s(Nb);She=n(qSe,"STRONG",{});var jFt=s(She);APo=r(jFt,"albert"),jFt.forEach(t),LPo=r(qSe," \u2014 "),WO=n(qSe,"A",{href:!0});var DFt=s(WO);yPo=r(DFt,"AlbertForMaskedLM"),DFt.forEach(t),xPo=r(qSe," (ALBERT model)"),qSe.forEach(t),$Po=i(H),Ib=n(H,"LI",{});var jSe=s(Ib);Rhe=n(jSe,"STRONG",{});var GFt=s(Rhe);kPo=r(GFt,"bart"),GFt.forEach(t),SPo=r(jSe," \u2014 "),HO=n(jSe,"A",{href:!0});var OFt=s(HO);RPo=r(OFt,"BartForConditionalGeneration"),OFt.forEach(t),PPo=r(jSe," (BART model)"),jSe.forEach(t),BPo=i(H),qb=n(H,"LI",{});var DSe=s(qb);Phe=n(DSe,"STRONG",{});var VFt=s(Phe);NPo=r(VFt,"bert"),VFt.forEach(t),IPo=r(DSe," \u2014 "),UO=n(DSe,"A",{href:!0});var XFt=s(UO);qPo=r(XFt,"BertForMaskedLM"),XFt.forEach(t),jPo=r(DSe," (BERT model)"),DSe.forEach(t),DPo=i(H),jb=n(H,"LI",{});var GSe=s(jb);Bhe=n(GSe,"STRONG",{});var zFt=s(Bhe);GPo=r(zFt,"big_bird"),zFt.forEach(t),OPo=r(GSe," \u2014 "),JO=n(GSe,"A",{href:!0});var QFt=s(JO);VPo=r(QFt,"BigBirdForMaskedLM"),QFt.forEach(t),XPo=r(GSe," (BigBird model)"),GSe.forEach(t),zPo=i(H),Db=n(H,"LI",{});var OSe=s(Db);Nhe=n(OSe,"STRONG",{});var WFt=s(Nhe);QPo=r(WFt,"camembert"),WFt.forEach(t),WPo=r(OSe," \u2014 "),YO=n(OSe,"A",{href:!0});var HFt=s(YO);HPo=r(HFt,"CamembertForMaskedLM"),HFt.forEach(t),UPo=r(OSe," (CamemBERT model)"),OSe.forEach(t),JPo=i(H),Gb=n(H,"LI",{});var VSe=s(Gb);Ihe=n(VSe,"STRONG",{});var UFt=s(Ihe);YPo=r(UFt,"convbert"),UFt.forEach(t),KPo=r(VSe," \u2014 "),KO=n(VSe,"A",{href:!0});var JFt=s(KO);ZPo=r(JFt,"ConvBertForMaskedLM"),JFt.forEach(t),eBo=r(VSe," (ConvBERT model)"),VSe.forEach(t),oBo=i(H),Ob=n(H,"LI",{});var XSe=s(Ob);qhe=n(XSe,"STRONG",{});var YFt=s(qhe);rBo=r(YFt,"data2vec-text"),YFt.forEach(t),tBo=r(XSe," \u2014 "),ZO=n(XSe,"A",{href:!0});var KFt=s(ZO);aBo=r(KFt,"Data2VecTextForMaskedLM"),KFt.forEach(t),nBo=r(XSe," (Data2VecText model)"),XSe.forEach(t),sBo=i(H),Vb=n(H,"LI",{});var zSe=s(Vb);jhe=n(zSe,"STRONG",{});var ZFt=s(jhe);lBo=r(ZFt,"deberta"),ZFt.forEach(t),iBo=r(zSe," \u2014 "),eV=n(zSe,"A",{href:!0});var eTt=s(eV);dBo=r(eTt,"DebertaForMaskedLM"),eTt.forEach(t),cBo=r(zSe," (DeBERTa model)"),zSe.forEach(t),mBo=i(H),Xb=n(H,"LI",{});var QSe=s(Xb);Dhe=n(QSe,"STRONG",{});var oTt=s(Dhe);fBo=r(oTt,"deberta-v2"),oTt.forEach(t),gBo=r(QSe," \u2014 "),oV=n(QSe,"A",{href:!0});var rTt=s(oV);hBo=r(rTt,"DebertaV2ForMaskedLM"),rTt.forEach(t),uBo=r(QSe," (DeBERTa-v2 model)"),QSe.forEach(t),pBo=i(H),zb=n(H,"LI",{});var WSe=s(zb);Ghe=n(WSe,"STRONG",{});var tTt=s(Ghe);_Bo=r(tTt,"distilbert"),tTt.forEach(t),bBo=r(WSe," \u2014 "),rV=n(WSe,"A",{href:!0});var aTt=s(rV);vBo=r(aTt,"DistilBertForMaskedLM"),aTt.forEach(t),FBo=r(WSe," (DistilBERT model)"),WSe.forEach(t),TBo=i(H),Qb=n(H,"LI",{});var HSe=s(Qb);Ohe=n(HSe,"STRONG",{});var nTt=s(Ohe);MBo=r(nTt,"electra"),nTt.forEach(t),EBo=r(HSe," \u2014 "),tV=n(HSe,"A",{href:!0});var sTt=s(tV);CBo=r(sTt,"ElectraForMaskedLM"),sTt.forEach(t),wBo=r(HSe," (ELECTRA model)"),HSe.forEach(t),ABo=i(H),Wb=n(H,"LI",{});var USe=s(Wb);Vhe=n(USe,"STRONG",{});var lTt=s(Vhe);LBo=r(lTt,"flaubert"),lTt.forEach(t),yBo=r(USe," \u2014 "),aV=n(USe,"A",{href:!0});var iTt=s(aV);xBo=r(iTt,"FlaubertWithLMHeadModel"),iTt.forEach(t),$Bo=r(USe," (FlauBERT model)"),USe.forEach(t),kBo=i(H),Hb=n(H,"LI",{});var JSe=s(Hb);Xhe=n(JSe,"STRONG",{});var dTt=s(Xhe);SBo=r(dTt,"fnet"),dTt.forEach(t),RBo=r(JSe," \u2014 "),nV=n(JSe,"A",{href:!0});var cTt=s(nV);PBo=r(cTt,"FNetForMaskedLM"),cTt.forEach(t),BBo=r(JSe," (FNet model)"),JSe.forEach(t),NBo=i(H),Ub=n(H,"LI",{});var YSe=s(Ub);zhe=n(YSe,"STRONG",{});var mTt=s(zhe);IBo=r(mTt,"funnel"),mTt.forEach(t),qBo=r(YSe," \u2014 "),sV=n(YSe,"A",{href:!0});var fTt=s(sV);jBo=r(fTt,"FunnelForMaskedLM"),fTt.forEach(t),DBo=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),GBo=i(H),Jb=n(H,"LI",{});var KSe=s(Jb);Qhe=n(KSe,"STRONG",{});var gTt=s(Qhe);OBo=r(gTt,"ibert"),gTt.forEach(t),VBo=r(KSe," \u2014 "),lV=n(KSe,"A",{href:!0});var hTt=s(lV);XBo=r(hTt,"IBertForMaskedLM"),hTt.forEach(t),zBo=r(KSe," (I-BERT model)"),KSe.forEach(t),QBo=i(H),Yb=n(H,"LI",{});var ZSe=s(Yb);Whe=n(ZSe,"STRONG",{});var uTt=s(Whe);WBo=r(uTt,"layoutlm"),uTt.forEach(t),HBo=r(ZSe," \u2014 "),iV=n(ZSe,"A",{href:!0});var pTt=s(iV);UBo=r(pTt,"LayoutLMForMaskedLM"),pTt.forEach(t),JBo=r(ZSe," (LayoutLM model)"),ZSe.forEach(t),YBo=i(H),Kb=n(H,"LI",{});var eRe=s(Kb);Hhe=n(eRe,"STRONG",{});var _Tt=s(Hhe);KBo=r(_Tt,"longformer"),_Tt.forEach(t),ZBo=r(eRe," \u2014 "),dV=n(eRe,"A",{href:!0});var bTt=s(dV);eNo=r(bTt,"LongformerForMaskedLM"),bTt.forEach(t),oNo=r(eRe," (Longformer model)"),eRe.forEach(t),rNo=i(H),Zb=n(H,"LI",{});var oRe=s(Zb);Uhe=n(oRe,"STRONG",{});var vTt=s(Uhe);tNo=r(vTt,"luke"),vTt.forEach(t),aNo=r(oRe," \u2014 "),cV=n(oRe,"A",{href:!0});var FTt=s(cV);nNo=r(FTt,"LukeForMaskedLM"),FTt.forEach(t),sNo=r(oRe," (LUKE model)"),oRe.forEach(t),lNo=i(H),ev=n(H,"LI",{});var rRe=s(ev);Jhe=n(rRe,"STRONG",{});var TTt=s(Jhe);iNo=r(TTt,"mbart"),TTt.forEach(t),dNo=r(rRe," \u2014 "),mV=n(rRe,"A",{href:!0});var MTt=s(mV);cNo=r(MTt,"MBartForConditionalGeneration"),MTt.forEach(t),mNo=r(rRe," (mBART model)"),rRe.forEach(t),fNo=i(H),ov=n(H,"LI",{});var tRe=s(ov);Yhe=n(tRe,"STRONG",{});var ETt=s(Yhe);gNo=r(ETt,"megatron-bert"),ETt.forEach(t),hNo=r(tRe," \u2014 "),fV=n(tRe,"A",{href:!0});var CTt=s(fV);uNo=r(CTt,"MegatronBertForMaskedLM"),CTt.forEach(t),pNo=r(tRe," (Megatron-BERT model)"),tRe.forEach(t),_No=i(H),rv=n(H,"LI",{});var aRe=s(rv);Khe=n(aRe,"STRONG",{});var wTt=s(Khe);bNo=r(wTt,"mobilebert"),wTt.forEach(t),vNo=r(aRe," \u2014 "),gV=n(aRe,"A",{href:!0});var ATt=s(gV);FNo=r(ATt,"MobileBertForMaskedLM"),ATt.forEach(t),TNo=r(aRe," (MobileBERT model)"),aRe.forEach(t),MNo=i(H),tv=n(H,"LI",{});var nRe=s(tv);Zhe=n(nRe,"STRONG",{});var LTt=s(Zhe);ENo=r(LTt,"mpnet"),LTt.forEach(t),CNo=r(nRe," \u2014 "),hV=n(nRe,"A",{href:!0});var yTt=s(hV);wNo=r(yTt,"MPNetForMaskedLM"),yTt.forEach(t),ANo=r(nRe," (MPNet model)"),nRe.forEach(t),LNo=i(H),av=n(H,"LI",{});var sRe=s(av);eue=n(sRe,"STRONG",{});var xTt=s(eue);yNo=r(xTt,"mvp"),xTt.forEach(t),xNo=r(sRe," \u2014 "),uV=n(sRe,"A",{href:!0});var $Tt=s(uV);$No=r($Tt,"MvpForConditionalGeneration"),$Tt.forEach(t),kNo=r(sRe," (MVP model)"),sRe.forEach(t),SNo=i(H),nv=n(H,"LI",{});var lRe=s(nv);oue=n(lRe,"STRONG",{});var kTt=s(oue);RNo=r(kTt,"nezha"),kTt.forEach(t),PNo=r(lRe," \u2014 "),pV=n(lRe,"A",{href:!0});var STt=s(pV);BNo=r(STt,"NezhaForMaskedLM"),STt.forEach(t),NNo=r(lRe," (Nezha model)"),lRe.forEach(t),INo=i(H),sv=n(H,"LI",{});var iRe=s(sv);rue=n(iRe,"STRONG",{});var RTt=s(rue);qNo=r(RTt,"nystromformer"),RTt.forEach(t),jNo=r(iRe," \u2014 "),_V=n(iRe,"A",{href:!0});var PTt=s(_V);DNo=r(PTt,"NystromformerForMaskedLM"),PTt.forEach(t),GNo=r(iRe," (Nystr\xF6mformer model)"),iRe.forEach(t),ONo=i(H),lv=n(H,"LI",{});var dRe=s(lv);tue=n(dRe,"STRONG",{});var BTt=s(tue);VNo=r(BTt,"perceiver"),BTt.forEach(t),XNo=r(dRe," \u2014 "),bV=n(dRe,"A",{href:!0});var NTt=s(bV);zNo=r(NTt,"PerceiverForMaskedLM"),NTt.forEach(t),QNo=r(dRe," (Perceiver model)"),dRe.forEach(t),WNo=i(H),iv=n(H,"LI",{});var cRe=s(iv);aue=n(cRe,"STRONG",{});var ITt=s(aue);HNo=r(ITt,"qdqbert"),ITt.forEach(t),UNo=r(cRe," \u2014 "),vV=n(cRe,"A",{href:!0});var qTt=s(vV);JNo=r(qTt,"QDQBertForMaskedLM"),qTt.forEach(t),YNo=r(cRe," (QDQBert model)"),cRe.forEach(t),KNo=i(H),dv=n(H,"LI",{});var mRe=s(dv);nue=n(mRe,"STRONG",{});var jTt=s(nue);ZNo=r(jTt,"reformer"),jTt.forEach(t),eIo=r(mRe," \u2014 "),FV=n(mRe,"A",{href:!0});var DTt=s(FV);oIo=r(DTt,"ReformerForMaskedLM"),DTt.forEach(t),rIo=r(mRe," (Reformer model)"),mRe.forEach(t),tIo=i(H),cv=n(H,"LI",{});var fRe=s(cv);sue=n(fRe,"STRONG",{});var GTt=s(sue);aIo=r(GTt,"rembert"),GTt.forEach(t),nIo=r(fRe," \u2014 "),TV=n(fRe,"A",{href:!0});var OTt=s(TV);sIo=r(OTt,"RemBertForMaskedLM"),OTt.forEach(t),lIo=r(fRe," (RemBERT model)"),fRe.forEach(t),iIo=i(H),mv=n(H,"LI",{});var gRe=s(mv);lue=n(gRe,"STRONG",{});var VTt=s(lue);dIo=r(VTt,"roberta"),VTt.forEach(t),cIo=r(gRe," \u2014 "),MV=n(gRe,"A",{href:!0});var XTt=s(MV);mIo=r(XTt,"RobertaForMaskedLM"),XTt.forEach(t),fIo=r(gRe," (RoBERTa model)"),gRe.forEach(t),gIo=i(H),fv=n(H,"LI",{});var hRe=s(fv);iue=n(hRe,"STRONG",{});var zTt=s(iue);hIo=r(zTt,"roformer"),zTt.forEach(t),uIo=r(hRe," \u2014 "),EV=n(hRe,"A",{href:!0});var QTt=s(EV);pIo=r(QTt,"RoFormerForMaskedLM"),QTt.forEach(t),_Io=r(hRe," (RoFormer model)"),hRe.forEach(t),bIo=i(H),gv=n(H,"LI",{});var uRe=s(gv);due=n(uRe,"STRONG",{});var WTt=s(due);vIo=r(WTt,"squeezebert"),WTt.forEach(t),FIo=r(uRe," \u2014 "),CV=n(uRe,"A",{href:!0});var HTt=s(CV);TIo=r(HTt,"SqueezeBertForMaskedLM"),HTt.forEach(t),MIo=r(uRe," (SqueezeBERT model)"),uRe.forEach(t),EIo=i(H),hv=n(H,"LI",{});var pRe=s(hv);cue=n(pRe,"STRONG",{});var UTt=s(cue);CIo=r(UTt,"tapas"),UTt.forEach(t),wIo=r(pRe," \u2014 "),wV=n(pRe,"A",{href:!0});var JTt=s(wV);AIo=r(JTt,"TapasForMaskedLM"),JTt.forEach(t),LIo=r(pRe," (TAPAS model)"),pRe.forEach(t),yIo=i(H),uv=n(H,"LI",{});var _Re=s(uv);mue=n(_Re,"STRONG",{});var YTt=s(mue);xIo=r(YTt,"wav2vec2"),YTt.forEach(t),$Io=r(_Re," \u2014 "),fue=n(_Re,"CODE",{});var KTt=s(fue);kIo=r(KTt,"Wav2Vec2ForMaskedLM"),KTt.forEach(t),SIo=r(_Re," (Wav2Vec2 model)"),_Re.forEach(t),RIo=i(H),pv=n(H,"LI",{});var bRe=s(pv);gue=n(bRe,"STRONG",{});var ZTt=s(gue);PIo=r(ZTt,"xlm"),ZTt.forEach(t),BIo=r(bRe," \u2014 "),AV=n(bRe,"A",{href:!0});var eMt=s(AV);NIo=r(eMt,"XLMWithLMHeadModel"),eMt.forEach(t),IIo=r(bRe," (XLM model)"),bRe.forEach(t),qIo=i(H),_v=n(H,"LI",{});var vRe=s(_v);hue=n(vRe,"STRONG",{});var oMt=s(hue);jIo=r(oMt,"xlm-roberta"),oMt.forEach(t),DIo=r(vRe," \u2014 "),LV=n(vRe,"A",{href:!0});var rMt=s(LV);GIo=r(rMt,"XLMRobertaForMaskedLM"),rMt.forEach(t),OIo=r(vRe," (XLM-RoBERTa model)"),vRe.forEach(t),VIo=i(H),bv=n(H,"LI",{});var FRe=s(bv);uue=n(FRe,"STRONG",{});var tMt=s(uue);XIo=r(tMt,"xlm-roberta-xl"),tMt.forEach(t),zIo=r(FRe," \u2014 "),yV=n(FRe,"A",{href:!0});var aMt=s(yV);QIo=r(aMt,"XLMRobertaXLForMaskedLM"),aMt.forEach(t),WIo=r(FRe," (XLM-RoBERTa-XL model)"),FRe.forEach(t),HIo=i(H),vv=n(H,"LI",{});var TRe=s(vv);pue=n(TRe,"STRONG",{});var nMt=s(pue);UIo=r(nMt,"yoso"),nMt.forEach(t),JIo=r(TRe," \u2014 "),xV=n(TRe,"A",{href:!0});var sMt=s(xV);YIo=r(sMt,"YosoForMaskedLM"),sMt.forEach(t),KIo=r(TRe," (YOSO model)"),TRe.forEach(t),H.forEach(t),ZIo=i(ca),Fv=n(ca,"P",{});var MRe=s(Fv);eqo=r(MRe,"The model is set in evaluation mode by default using "),_ue=n(MRe,"CODE",{});var lMt=s(_ue);oqo=r(lMt,"model.eval()"),lMt.forEach(t),rqo=r(MRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(MRe,"CODE",{});var iMt=s(bue);tqo=r(iMt,"model.train()"),iMt.forEach(t),MRe.forEach(t),aqo=i(ca),T(Tv.$$.fragment,ca),ca.forEach(t),sl.forEach(t),kXe=i(m),ed=n(m,"H2",{class:!0});var IQe=s(ed);Mv=n(IQe,"A",{id:!0,class:!0,href:!0});var dMt=s(Mv);vue=n(dMt,"SPAN",{});var cMt=s(vue);T(Zy.$$.fragment,cMt),cMt.forEach(t),dMt.forEach(t),nqo=i(IQe),Fue=n(IQe,"SPAN",{});var mMt=s(Fue);sqo=r(mMt,"AutoModelForSeq2SeqLM"),mMt.forEach(t),IQe.forEach(t),SXe=i(m),Po=n(m,"DIV",{class:!0});var ll=s(Po);T(e8.$$.fragment,ll),lqo=i(ll),od=n(ll,"P",{});var Wre=s(od);iqo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$V=n(Wre,"A",{href:!0});var fMt=s($V);dqo=r(fMt,"from_pretrained()"),fMt.forEach(t),cqo=r(Wre," class method or the "),kV=n(Wre,"A",{href:!0});var gMt=s(kV);mqo=r(gMt,"from_config()"),gMt.forEach(t),fqo=r(Wre,` class
method.`),Wre.forEach(t),gqo=i(ll),o8=n(ll,"P",{});var qQe=s(o8);hqo=r(qQe,"This class cannot be instantiated directly using "),Tue=n(qQe,"CODE",{});var hMt=s(Tue);uqo=r(hMt,"__init__()"),hMt.forEach(t),pqo=r(qQe," (throws an error)."),qQe.forEach(t),_qo=i(ll),ft=n(ll,"DIV",{class:!0});var v7=s(ft);T(r8.$$.fragment,v7),bqo=i(v7),Mue=n(v7,"P",{});var uMt=s(Mue);vqo=r(uMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uMt.forEach(t),Fqo=i(v7),rd=n(v7,"P",{});var Hre=s(rd);Tqo=r(Hre,`Note:
Loading a model from its configuration file does `),Eue=n(Hre,"STRONG",{});var pMt=s(Eue);Mqo=r(pMt,"not"),pMt.forEach(t),Eqo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(Hre,"A",{href:!0});var _Mt=s(SV);Cqo=r(_Mt,"from_pretrained()"),_Mt.forEach(t),wqo=r(Hre," to load the model weights."),Hre.forEach(t),Aqo=i(v7),T(Ev.$$.fragment,v7),v7.forEach(t),Lqo=i(ll),oo=n(ll,"DIV",{class:!0});var ma=s(oo);T(t8.$$.fragment,ma),yqo=i(ma),Cue=n(ma,"P",{});var bMt=s(Cue);xqo=r(bMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bMt.forEach(t),$qo=i(ma),Da=n(ma,"P",{});var F7=s(Da);kqo=r(F7,"The model class to instantiate is selected based on the "),wue=n(F7,"CODE",{});var vMt=s(wue);Sqo=r(vMt,"model_type"),vMt.forEach(t),Rqo=r(F7,` property of the config object (either
passed as an argument or loaded from `),Aue=n(F7,"CODE",{});var FMt=s(Aue);Pqo=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),Bqo=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(F7,"CODE",{});var TMt=s(Lue);Nqo=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),Iqo=r(F7,":"),F7.forEach(t),qqo=i(ma),me=n(ma,"UL",{});var pe=s(me);Cv=n(pe,"LI",{});var ERe=s(Cv);yue=n(ERe,"STRONG",{});var MMt=s(yue);jqo=r(MMt,"bart"),MMt.forEach(t),Dqo=r(ERe," \u2014 "),RV=n(ERe,"A",{href:!0});var EMt=s(RV);Gqo=r(EMt,"BartForConditionalGeneration"),EMt.forEach(t),Oqo=r(ERe," (BART model)"),ERe.forEach(t),Vqo=i(pe),wv=n(pe,"LI",{});var CRe=s(wv);xue=n(CRe,"STRONG",{});var CMt=s(xue);Xqo=r(CMt,"bigbird_pegasus"),CMt.forEach(t),zqo=r(CRe," \u2014 "),PV=n(CRe,"A",{href:!0});var wMt=s(PV);Qqo=r(wMt,"BigBirdPegasusForConditionalGeneration"),wMt.forEach(t),Wqo=r(CRe," (BigBird-Pegasus model)"),CRe.forEach(t),Hqo=i(pe),Av=n(pe,"LI",{});var wRe=s(Av);$ue=n(wRe,"STRONG",{});var AMt=s($ue);Uqo=r(AMt,"blenderbot"),AMt.forEach(t),Jqo=r(wRe," \u2014 "),BV=n(wRe,"A",{href:!0});var LMt=s(BV);Yqo=r(LMt,"BlenderbotForConditionalGeneration"),LMt.forEach(t),Kqo=r(wRe," (Blenderbot model)"),wRe.forEach(t),Zqo=i(pe),Lv=n(pe,"LI",{});var ARe=s(Lv);kue=n(ARe,"STRONG",{});var yMt=s(kue);ejo=r(yMt,"blenderbot-small"),yMt.forEach(t),ojo=r(ARe," \u2014 "),NV=n(ARe,"A",{href:!0});var xMt=s(NV);rjo=r(xMt,"BlenderbotSmallForConditionalGeneration"),xMt.forEach(t),tjo=r(ARe," (BlenderbotSmall model)"),ARe.forEach(t),ajo=i(pe),yv=n(pe,"LI",{});var LRe=s(yv);Sue=n(LRe,"STRONG",{});var $Mt=s(Sue);njo=r($Mt,"encoder-decoder"),$Mt.forEach(t),sjo=r(LRe," \u2014 "),IV=n(LRe,"A",{href:!0});var kMt=s(IV);ljo=r(kMt,"EncoderDecoderModel"),kMt.forEach(t),ijo=r(LRe," (Encoder decoder model)"),LRe.forEach(t),djo=i(pe),xv=n(pe,"LI",{});var yRe=s(xv);Rue=n(yRe,"STRONG",{});var SMt=s(Rue);cjo=r(SMt,"fsmt"),SMt.forEach(t),mjo=r(yRe," \u2014 "),qV=n(yRe,"A",{href:!0});var RMt=s(qV);fjo=r(RMt,"FSMTForConditionalGeneration"),RMt.forEach(t),gjo=r(yRe," (FairSeq Machine-Translation model)"),yRe.forEach(t),hjo=i(pe),$v=n(pe,"LI",{});var xRe=s($v);Pue=n(xRe,"STRONG",{});var PMt=s(Pue);ujo=r(PMt,"led"),PMt.forEach(t),pjo=r(xRe," \u2014 "),jV=n(xRe,"A",{href:!0});var BMt=s(jV);_jo=r(BMt,"LEDForConditionalGeneration"),BMt.forEach(t),bjo=r(xRe," (LED model)"),xRe.forEach(t),vjo=i(pe),kv=n(pe,"LI",{});var $Re=s(kv);Bue=n($Re,"STRONG",{});var NMt=s(Bue);Fjo=r(NMt,"longt5"),NMt.forEach(t),Tjo=r($Re," \u2014 "),DV=n($Re,"A",{href:!0});var IMt=s(DV);Mjo=r(IMt,"LongT5ForConditionalGeneration"),IMt.forEach(t),Ejo=r($Re," (LongT5 model)"),$Re.forEach(t),Cjo=i(pe),Sv=n(pe,"LI",{});var kRe=s(Sv);Nue=n(kRe,"STRONG",{});var qMt=s(Nue);wjo=r(qMt,"m2m_100"),qMt.forEach(t),Ajo=r(kRe," \u2014 "),GV=n(kRe,"A",{href:!0});var jMt=s(GV);Ljo=r(jMt,"M2M100ForConditionalGeneration"),jMt.forEach(t),yjo=r(kRe," (M2M100 model)"),kRe.forEach(t),xjo=i(pe),Rv=n(pe,"LI",{});var SRe=s(Rv);Iue=n(SRe,"STRONG",{});var DMt=s(Iue);$jo=r(DMt,"marian"),DMt.forEach(t),kjo=r(SRe," \u2014 "),OV=n(SRe,"A",{href:!0});var GMt=s(OV);Sjo=r(GMt,"MarianMTModel"),GMt.forEach(t),Rjo=r(SRe," (Marian model)"),SRe.forEach(t),Pjo=i(pe),Pv=n(pe,"LI",{});var RRe=s(Pv);que=n(RRe,"STRONG",{});var OMt=s(que);Bjo=r(OMt,"mbart"),OMt.forEach(t),Njo=r(RRe," \u2014 "),VV=n(RRe,"A",{href:!0});var VMt=s(VV);Ijo=r(VMt,"MBartForConditionalGeneration"),VMt.forEach(t),qjo=r(RRe," (mBART model)"),RRe.forEach(t),jjo=i(pe),Bv=n(pe,"LI",{});var PRe=s(Bv);jue=n(PRe,"STRONG",{});var XMt=s(jue);Djo=r(XMt,"mt5"),XMt.forEach(t),Gjo=r(PRe," \u2014 "),XV=n(PRe,"A",{href:!0});var zMt=s(XV);Ojo=r(zMt,"MT5ForConditionalGeneration"),zMt.forEach(t),Vjo=r(PRe," (MT5 model)"),PRe.forEach(t),Xjo=i(pe),Nv=n(pe,"LI",{});var BRe=s(Nv);Due=n(BRe,"STRONG",{});var QMt=s(Due);zjo=r(QMt,"mvp"),QMt.forEach(t),Qjo=r(BRe," \u2014 "),zV=n(BRe,"A",{href:!0});var WMt=s(zV);Wjo=r(WMt,"MvpForConditionalGeneration"),WMt.forEach(t),Hjo=r(BRe," (MVP model)"),BRe.forEach(t),Ujo=i(pe),Iv=n(pe,"LI",{});var NRe=s(Iv);Gue=n(NRe,"STRONG",{});var HMt=s(Gue);Jjo=r(HMt,"nllb"),HMt.forEach(t),Yjo=r(NRe," \u2014 "),QV=n(NRe,"A",{href:!0});var UMt=s(QV);Kjo=r(UMt,"M2M100ForConditionalGeneration"),UMt.forEach(t),Zjo=r(NRe," (NLLB model)"),NRe.forEach(t),eDo=i(pe),qv=n(pe,"LI",{});var IRe=s(qv);Oue=n(IRe,"STRONG",{});var JMt=s(Oue);oDo=r(JMt,"pegasus"),JMt.forEach(t),rDo=r(IRe," \u2014 "),WV=n(IRe,"A",{href:!0});var YMt=s(WV);tDo=r(YMt,"PegasusForConditionalGeneration"),YMt.forEach(t),aDo=r(IRe," (Pegasus model)"),IRe.forEach(t),nDo=i(pe),jv=n(pe,"LI",{});var qRe=s(jv);Vue=n(qRe,"STRONG",{});var KMt=s(Vue);sDo=r(KMt,"plbart"),KMt.forEach(t),lDo=r(qRe," \u2014 "),HV=n(qRe,"A",{href:!0});var ZMt=s(HV);iDo=r(ZMt,"PLBartForConditionalGeneration"),ZMt.forEach(t),dDo=r(qRe," (PLBart model)"),qRe.forEach(t),cDo=i(pe),Dv=n(pe,"LI",{});var jRe=s(Dv);Xue=n(jRe,"STRONG",{});var e4t=s(Xue);mDo=r(e4t,"prophetnet"),e4t.forEach(t),fDo=r(jRe," \u2014 "),UV=n(jRe,"A",{href:!0});var o4t=s(UV);gDo=r(o4t,"ProphetNetForConditionalGeneration"),o4t.forEach(t),hDo=r(jRe," (ProphetNet model)"),jRe.forEach(t),uDo=i(pe),Gv=n(pe,"LI",{});var DRe=s(Gv);zue=n(DRe,"STRONG",{});var r4t=s(zue);pDo=r(r4t,"t5"),r4t.forEach(t),_Do=r(DRe," \u2014 "),JV=n(DRe,"A",{href:!0});var t4t=s(JV);bDo=r(t4t,"T5ForConditionalGeneration"),t4t.forEach(t),vDo=r(DRe," (T5 model)"),DRe.forEach(t),FDo=i(pe),Ov=n(pe,"LI",{});var GRe=s(Ov);Que=n(GRe,"STRONG",{});var a4t=s(Que);TDo=r(a4t,"xlm-prophetnet"),a4t.forEach(t),MDo=r(GRe," \u2014 "),YV=n(GRe,"A",{href:!0});var n4t=s(YV);EDo=r(n4t,"XLMProphetNetForConditionalGeneration"),n4t.forEach(t),CDo=r(GRe," (XLM-ProphetNet model)"),GRe.forEach(t),pe.forEach(t),wDo=i(ma),Vv=n(ma,"P",{});var ORe=s(Vv);ADo=r(ORe,"The model is set in evaluation mode by default using "),Wue=n(ORe,"CODE",{});var s4t=s(Wue);LDo=r(s4t,"model.eval()"),s4t.forEach(t),yDo=r(ORe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(ORe,"CODE",{});var l4t=s(Hue);xDo=r(l4t,"model.train()"),l4t.forEach(t),ORe.forEach(t),$Do=i(ma),T(Xv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),RXe=i(m),td=n(m,"H2",{class:!0});var jQe=s(td);zv=n(jQe,"A",{id:!0,class:!0,href:!0});var i4t=s(zv);Uue=n(i4t,"SPAN",{});var d4t=s(Uue);T(a8.$$.fragment,d4t),d4t.forEach(t),i4t.forEach(t),kDo=i(jQe),Jue=n(jQe,"SPAN",{});var c4t=s(Jue);SDo=r(c4t,"AutoModelForSequenceClassification"),c4t.forEach(t),jQe.forEach(t),PXe=i(m),Bo=n(m,"DIV",{class:!0});var il=s(Bo);T(n8.$$.fragment,il),RDo=i(il),ad=n(il,"P",{});var Ure=s(ad);PDo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KV=n(Ure,"A",{href:!0});var m4t=s(KV);BDo=r(m4t,"from_pretrained()"),m4t.forEach(t),NDo=r(Ure," class method or the "),ZV=n(Ure,"A",{href:!0});var f4t=s(ZV);IDo=r(f4t,"from_config()"),f4t.forEach(t),qDo=r(Ure,` class
method.`),Ure.forEach(t),jDo=i(il),s8=n(il,"P",{});var DQe=s(s8);DDo=r(DQe,"This class cannot be instantiated directly using "),Yue=n(DQe,"CODE",{});var g4t=s(Yue);GDo=r(g4t,"__init__()"),g4t.forEach(t),ODo=r(DQe," (throws an error)."),DQe.forEach(t),VDo=i(il),gt=n(il,"DIV",{class:!0});var T7=s(gt);T(l8.$$.fragment,T7),XDo=i(T7),Kue=n(T7,"P",{});var h4t=s(Kue);zDo=r(h4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h4t.forEach(t),QDo=i(T7),nd=n(T7,"P",{});var Jre=s(nd);WDo=r(Jre,`Note:
Loading a model from its configuration file does `),Zue=n(Jre,"STRONG",{});var u4t=s(Zue);HDo=r(u4t,"not"),u4t.forEach(t),UDo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(Jre,"A",{href:!0});var p4t=s(eX);JDo=r(p4t,"from_pretrained()"),p4t.forEach(t),YDo=r(Jre," to load the model weights."),Jre.forEach(t),KDo=i(T7),T(Qv.$$.fragment,T7),T7.forEach(t),ZDo=i(il),ro=n(il,"DIV",{class:!0});var fa=s(ro);T(i8.$$.fragment,fa),eGo=i(fa),epe=n(fa,"P",{});var _4t=s(epe);oGo=r(_4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_4t.forEach(t),rGo=i(fa),Ga=n(fa,"P",{});var M7=s(Ga);tGo=r(M7,"The model class to instantiate is selected based on the "),ope=n(M7,"CODE",{});var b4t=s(ope);aGo=r(b4t,"model_type"),b4t.forEach(t),nGo=r(M7,` property of the config object (either
passed as an argument or loaded from `),rpe=n(M7,"CODE",{});var v4t=s(rpe);sGo=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),lGo=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(M7,"CODE",{});var F4t=s(tpe);iGo=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),dGo=r(M7,":"),M7.forEach(t),cGo=i(fa),I=n(fa,"UL",{});var j=s(I);Wv=n(j,"LI",{});var VRe=s(Wv);ape=n(VRe,"STRONG",{});var T4t=s(ape);mGo=r(T4t,"albert"),T4t.forEach(t),fGo=r(VRe," \u2014 "),oX=n(VRe,"A",{href:!0});var M4t=s(oX);gGo=r(M4t,"AlbertForSequenceClassification"),M4t.forEach(t),hGo=r(VRe," (ALBERT model)"),VRe.forEach(t),uGo=i(j),Hv=n(j,"LI",{});var XRe=s(Hv);npe=n(XRe,"STRONG",{});var E4t=s(npe);pGo=r(E4t,"bart"),E4t.forEach(t),_Go=r(XRe," \u2014 "),rX=n(XRe,"A",{href:!0});var C4t=s(rX);bGo=r(C4t,"BartForSequenceClassification"),C4t.forEach(t),vGo=r(XRe," (BART model)"),XRe.forEach(t),FGo=i(j),Uv=n(j,"LI",{});var zRe=s(Uv);spe=n(zRe,"STRONG",{});var w4t=s(spe);TGo=r(w4t,"bert"),w4t.forEach(t),MGo=r(zRe," \u2014 "),tX=n(zRe,"A",{href:!0});var A4t=s(tX);EGo=r(A4t,"BertForSequenceClassification"),A4t.forEach(t),CGo=r(zRe," (BERT model)"),zRe.forEach(t),wGo=i(j),Jv=n(j,"LI",{});var QRe=s(Jv);lpe=n(QRe,"STRONG",{});var L4t=s(lpe);AGo=r(L4t,"big_bird"),L4t.forEach(t),LGo=r(QRe," \u2014 "),aX=n(QRe,"A",{href:!0});var y4t=s(aX);yGo=r(y4t,"BigBirdForSequenceClassification"),y4t.forEach(t),xGo=r(QRe," (BigBird model)"),QRe.forEach(t),$Go=i(j),Yv=n(j,"LI",{});var WRe=s(Yv);ipe=n(WRe,"STRONG",{});var x4t=s(ipe);kGo=r(x4t,"bigbird_pegasus"),x4t.forEach(t),SGo=r(WRe," \u2014 "),nX=n(WRe,"A",{href:!0});var $4t=s(nX);RGo=r($4t,"BigBirdPegasusForSequenceClassification"),$4t.forEach(t),PGo=r(WRe," (BigBird-Pegasus model)"),WRe.forEach(t),BGo=i(j),Kv=n(j,"LI",{});var HRe=s(Kv);dpe=n(HRe,"STRONG",{});var k4t=s(dpe);NGo=r(k4t,"bloom"),k4t.forEach(t),IGo=r(HRe," \u2014 "),sX=n(HRe,"A",{href:!0});var S4t=s(sX);qGo=r(S4t,"BloomForSequenceClassification"),S4t.forEach(t),jGo=r(HRe," (BLOOM model)"),HRe.forEach(t),DGo=i(j),Zv=n(j,"LI",{});var URe=s(Zv);cpe=n(URe,"STRONG",{});var R4t=s(cpe);GGo=r(R4t,"camembert"),R4t.forEach(t),OGo=r(URe," \u2014 "),lX=n(URe,"A",{href:!0});var P4t=s(lX);VGo=r(P4t,"CamembertForSequenceClassification"),P4t.forEach(t),XGo=r(URe," (CamemBERT model)"),URe.forEach(t),zGo=i(j),e1=n(j,"LI",{});var JRe=s(e1);mpe=n(JRe,"STRONG",{});var B4t=s(mpe);QGo=r(B4t,"canine"),B4t.forEach(t),WGo=r(JRe," \u2014 "),iX=n(JRe,"A",{href:!0});var N4t=s(iX);HGo=r(N4t,"CanineForSequenceClassification"),N4t.forEach(t),UGo=r(JRe," (CANINE model)"),JRe.forEach(t),JGo=i(j),o1=n(j,"LI",{});var YRe=s(o1);fpe=n(YRe,"STRONG",{});var I4t=s(fpe);YGo=r(I4t,"convbert"),I4t.forEach(t),KGo=r(YRe," \u2014 "),dX=n(YRe,"A",{href:!0});var q4t=s(dX);ZGo=r(q4t,"ConvBertForSequenceClassification"),q4t.forEach(t),eOo=r(YRe," (ConvBERT model)"),YRe.forEach(t),oOo=i(j),r1=n(j,"LI",{});var KRe=s(r1);gpe=n(KRe,"STRONG",{});var j4t=s(gpe);rOo=r(j4t,"ctrl"),j4t.forEach(t),tOo=r(KRe," \u2014 "),cX=n(KRe,"A",{href:!0});var D4t=s(cX);aOo=r(D4t,"CTRLForSequenceClassification"),D4t.forEach(t),nOo=r(KRe," (CTRL model)"),KRe.forEach(t),sOo=i(j),t1=n(j,"LI",{});var ZRe=s(t1);hpe=n(ZRe,"STRONG",{});var G4t=s(hpe);lOo=r(G4t,"data2vec-text"),G4t.forEach(t),iOo=r(ZRe," \u2014 "),mX=n(ZRe,"A",{href:!0});var O4t=s(mX);dOo=r(O4t,"Data2VecTextForSequenceClassification"),O4t.forEach(t),cOo=r(ZRe," (Data2VecText model)"),ZRe.forEach(t),mOo=i(j),a1=n(j,"LI",{});var ePe=s(a1);upe=n(ePe,"STRONG",{});var V4t=s(upe);fOo=r(V4t,"deberta"),V4t.forEach(t),gOo=r(ePe," \u2014 "),fX=n(ePe,"A",{href:!0});var X4t=s(fX);hOo=r(X4t,"DebertaForSequenceClassification"),X4t.forEach(t),uOo=r(ePe," (DeBERTa model)"),ePe.forEach(t),pOo=i(j),n1=n(j,"LI",{});var oPe=s(n1);ppe=n(oPe,"STRONG",{});var z4t=s(ppe);_Oo=r(z4t,"deberta-v2"),z4t.forEach(t),bOo=r(oPe," \u2014 "),gX=n(oPe,"A",{href:!0});var Q4t=s(gX);vOo=r(Q4t,"DebertaV2ForSequenceClassification"),Q4t.forEach(t),FOo=r(oPe," (DeBERTa-v2 model)"),oPe.forEach(t),TOo=i(j),s1=n(j,"LI",{});var rPe=s(s1);_pe=n(rPe,"STRONG",{});var W4t=s(_pe);MOo=r(W4t,"distilbert"),W4t.forEach(t),EOo=r(rPe," \u2014 "),hX=n(rPe,"A",{href:!0});var H4t=s(hX);COo=r(H4t,"DistilBertForSequenceClassification"),H4t.forEach(t),wOo=r(rPe," (DistilBERT model)"),rPe.forEach(t),AOo=i(j),l1=n(j,"LI",{});var tPe=s(l1);bpe=n(tPe,"STRONG",{});var U4t=s(bpe);LOo=r(U4t,"electra"),U4t.forEach(t),yOo=r(tPe," \u2014 "),uX=n(tPe,"A",{href:!0});var J4t=s(uX);xOo=r(J4t,"ElectraForSequenceClassification"),J4t.forEach(t),$Oo=r(tPe," (ELECTRA model)"),tPe.forEach(t),kOo=i(j),i1=n(j,"LI",{});var aPe=s(i1);vpe=n(aPe,"STRONG",{});var Y4t=s(vpe);SOo=r(Y4t,"flaubert"),Y4t.forEach(t),ROo=r(aPe," \u2014 "),pX=n(aPe,"A",{href:!0});var K4t=s(pX);POo=r(K4t,"FlaubertForSequenceClassification"),K4t.forEach(t),BOo=r(aPe," (FlauBERT model)"),aPe.forEach(t),NOo=i(j),d1=n(j,"LI",{});var nPe=s(d1);Fpe=n(nPe,"STRONG",{});var Z4t=s(Fpe);IOo=r(Z4t,"fnet"),Z4t.forEach(t),qOo=r(nPe," \u2014 "),_X=n(nPe,"A",{href:!0});var eEt=s(_X);jOo=r(eEt,"FNetForSequenceClassification"),eEt.forEach(t),DOo=r(nPe," (FNet model)"),nPe.forEach(t),GOo=i(j),c1=n(j,"LI",{});var sPe=s(c1);Tpe=n(sPe,"STRONG",{});var oEt=s(Tpe);OOo=r(oEt,"funnel"),oEt.forEach(t),VOo=r(sPe," \u2014 "),bX=n(sPe,"A",{href:!0});var rEt=s(bX);XOo=r(rEt,"FunnelForSequenceClassification"),rEt.forEach(t),zOo=r(sPe," (Funnel Transformer model)"),sPe.forEach(t),QOo=i(j),m1=n(j,"LI",{});var lPe=s(m1);Mpe=n(lPe,"STRONG",{});var tEt=s(Mpe);WOo=r(tEt,"gpt2"),tEt.forEach(t),HOo=r(lPe," \u2014 "),vX=n(lPe,"A",{href:!0});var aEt=s(vX);UOo=r(aEt,"GPT2ForSequenceClassification"),aEt.forEach(t),JOo=r(lPe," (OpenAI GPT-2 model)"),lPe.forEach(t),YOo=i(j),f1=n(j,"LI",{});var iPe=s(f1);Epe=n(iPe,"STRONG",{});var nEt=s(Epe);KOo=r(nEt,"gpt_neo"),nEt.forEach(t),ZOo=r(iPe," \u2014 "),FX=n(iPe,"A",{href:!0});var sEt=s(FX);eVo=r(sEt,"GPTNeoForSequenceClassification"),sEt.forEach(t),oVo=r(iPe," (GPT Neo model)"),iPe.forEach(t),rVo=i(j),g1=n(j,"LI",{});var dPe=s(g1);Cpe=n(dPe,"STRONG",{});var lEt=s(Cpe);tVo=r(lEt,"gptj"),lEt.forEach(t),aVo=r(dPe," \u2014 "),TX=n(dPe,"A",{href:!0});var iEt=s(TX);nVo=r(iEt,"GPTJForSequenceClassification"),iEt.forEach(t),sVo=r(dPe," (GPT-J model)"),dPe.forEach(t),lVo=i(j),h1=n(j,"LI",{});var cPe=s(h1);wpe=n(cPe,"STRONG",{});var dEt=s(wpe);iVo=r(dEt,"ibert"),dEt.forEach(t),dVo=r(cPe," \u2014 "),MX=n(cPe,"A",{href:!0});var cEt=s(MX);cVo=r(cEt,"IBertForSequenceClassification"),cEt.forEach(t),mVo=r(cPe," (I-BERT model)"),cPe.forEach(t),fVo=i(j),u1=n(j,"LI",{});var mPe=s(u1);Ape=n(mPe,"STRONG",{});var mEt=s(Ape);gVo=r(mEt,"layoutlm"),mEt.forEach(t),hVo=r(mPe," \u2014 "),EX=n(mPe,"A",{href:!0});var fEt=s(EX);uVo=r(fEt,"LayoutLMForSequenceClassification"),fEt.forEach(t),pVo=r(mPe," (LayoutLM model)"),mPe.forEach(t),_Vo=i(j),p1=n(j,"LI",{});var fPe=s(p1);Lpe=n(fPe,"STRONG",{});var gEt=s(Lpe);bVo=r(gEt,"layoutlmv2"),gEt.forEach(t),vVo=r(fPe," \u2014 "),CX=n(fPe,"A",{href:!0});var hEt=s(CX);FVo=r(hEt,"LayoutLMv2ForSequenceClassification"),hEt.forEach(t),TVo=r(fPe," (LayoutLMv2 model)"),fPe.forEach(t),MVo=i(j),_1=n(j,"LI",{});var gPe=s(_1);ype=n(gPe,"STRONG",{});var uEt=s(ype);EVo=r(uEt,"layoutlmv3"),uEt.forEach(t),CVo=r(gPe," \u2014 "),wX=n(gPe,"A",{href:!0});var pEt=s(wX);wVo=r(pEt,"LayoutLMv3ForSequenceClassification"),pEt.forEach(t),AVo=r(gPe," (LayoutLMv3 model)"),gPe.forEach(t),LVo=i(j),b1=n(j,"LI",{});var hPe=s(b1);xpe=n(hPe,"STRONG",{});var _Et=s(xpe);yVo=r(_Et,"led"),_Et.forEach(t),xVo=r(hPe," \u2014 "),AX=n(hPe,"A",{href:!0});var bEt=s(AX);$Vo=r(bEt,"LEDForSequenceClassification"),bEt.forEach(t),kVo=r(hPe," (LED model)"),hPe.forEach(t),SVo=i(j),v1=n(j,"LI",{});var uPe=s(v1);$pe=n(uPe,"STRONG",{});var vEt=s($pe);RVo=r(vEt,"longformer"),vEt.forEach(t),PVo=r(uPe," \u2014 "),LX=n(uPe,"A",{href:!0});var FEt=s(LX);BVo=r(FEt,"LongformerForSequenceClassification"),FEt.forEach(t),NVo=r(uPe," (Longformer model)"),uPe.forEach(t),IVo=i(j),F1=n(j,"LI",{});var pPe=s(F1);kpe=n(pPe,"STRONG",{});var TEt=s(kpe);qVo=r(TEt,"mbart"),TEt.forEach(t),jVo=r(pPe," \u2014 "),yX=n(pPe,"A",{href:!0});var MEt=s(yX);DVo=r(MEt,"MBartForSequenceClassification"),MEt.forEach(t),GVo=r(pPe," (mBART model)"),pPe.forEach(t),OVo=i(j),T1=n(j,"LI",{});var _Pe=s(T1);Spe=n(_Pe,"STRONG",{});var EEt=s(Spe);VVo=r(EEt,"megatron-bert"),EEt.forEach(t),XVo=r(_Pe," \u2014 "),xX=n(_Pe,"A",{href:!0});var CEt=s(xX);zVo=r(CEt,"MegatronBertForSequenceClassification"),CEt.forEach(t),QVo=r(_Pe," (Megatron-BERT model)"),_Pe.forEach(t),WVo=i(j),M1=n(j,"LI",{});var bPe=s(M1);Rpe=n(bPe,"STRONG",{});var wEt=s(Rpe);HVo=r(wEt,"mobilebert"),wEt.forEach(t),UVo=r(bPe," \u2014 "),$X=n(bPe,"A",{href:!0});var AEt=s($X);JVo=r(AEt,"MobileBertForSequenceClassification"),AEt.forEach(t),YVo=r(bPe," (MobileBERT model)"),bPe.forEach(t),KVo=i(j),E1=n(j,"LI",{});var vPe=s(E1);Ppe=n(vPe,"STRONG",{});var LEt=s(Ppe);ZVo=r(LEt,"mpnet"),LEt.forEach(t),eXo=r(vPe," \u2014 "),kX=n(vPe,"A",{href:!0});var yEt=s(kX);oXo=r(yEt,"MPNetForSequenceClassification"),yEt.forEach(t),rXo=r(vPe," (MPNet model)"),vPe.forEach(t),tXo=i(j),C1=n(j,"LI",{});var FPe=s(C1);Bpe=n(FPe,"STRONG",{});var xEt=s(Bpe);aXo=r(xEt,"mvp"),xEt.forEach(t),nXo=r(FPe," \u2014 "),SX=n(FPe,"A",{href:!0});var $Et=s(SX);sXo=r($Et,"MvpForSequenceClassification"),$Et.forEach(t),lXo=r(FPe," (MVP model)"),FPe.forEach(t),iXo=i(j),w1=n(j,"LI",{});var TPe=s(w1);Npe=n(TPe,"STRONG",{});var kEt=s(Npe);dXo=r(kEt,"nezha"),kEt.forEach(t),cXo=r(TPe," \u2014 "),RX=n(TPe,"A",{href:!0});var SEt=s(RX);mXo=r(SEt,"NezhaForSequenceClassification"),SEt.forEach(t),fXo=r(TPe," (Nezha model)"),TPe.forEach(t),gXo=i(j),A1=n(j,"LI",{});var MPe=s(A1);Ipe=n(MPe,"STRONG",{});var REt=s(Ipe);hXo=r(REt,"nystromformer"),REt.forEach(t),uXo=r(MPe," \u2014 "),PX=n(MPe,"A",{href:!0});var PEt=s(PX);pXo=r(PEt,"NystromformerForSequenceClassification"),PEt.forEach(t),_Xo=r(MPe," (Nystr\xF6mformer model)"),MPe.forEach(t),bXo=i(j),L1=n(j,"LI",{});var EPe=s(L1);qpe=n(EPe,"STRONG",{});var BEt=s(qpe);vXo=r(BEt,"openai-gpt"),BEt.forEach(t),FXo=r(EPe," \u2014 "),BX=n(EPe,"A",{href:!0});var NEt=s(BX);TXo=r(NEt,"OpenAIGPTForSequenceClassification"),NEt.forEach(t),MXo=r(EPe," (OpenAI GPT model)"),EPe.forEach(t),EXo=i(j),y1=n(j,"LI",{});var CPe=s(y1);jpe=n(CPe,"STRONG",{});var IEt=s(jpe);CXo=r(IEt,"perceiver"),IEt.forEach(t),wXo=r(CPe," \u2014 "),NX=n(CPe,"A",{href:!0});var qEt=s(NX);AXo=r(qEt,"PerceiverForSequenceClassification"),qEt.forEach(t),LXo=r(CPe," (Perceiver model)"),CPe.forEach(t),yXo=i(j),x1=n(j,"LI",{});var wPe=s(x1);Dpe=n(wPe,"STRONG",{});var jEt=s(Dpe);xXo=r(jEt,"plbart"),jEt.forEach(t),$Xo=r(wPe," \u2014 "),IX=n(wPe,"A",{href:!0});var DEt=s(IX);kXo=r(DEt,"PLBartForSequenceClassification"),DEt.forEach(t),SXo=r(wPe," (PLBart model)"),wPe.forEach(t),RXo=i(j),$1=n(j,"LI",{});var APe=s($1);Gpe=n(APe,"STRONG",{});var GEt=s(Gpe);PXo=r(GEt,"qdqbert"),GEt.forEach(t),BXo=r(APe," \u2014 "),qX=n(APe,"A",{href:!0});var OEt=s(qX);NXo=r(OEt,"QDQBertForSequenceClassification"),OEt.forEach(t),IXo=r(APe," (QDQBert model)"),APe.forEach(t),qXo=i(j),k1=n(j,"LI",{});var LPe=s(k1);Ope=n(LPe,"STRONG",{});var VEt=s(Ope);jXo=r(VEt,"reformer"),VEt.forEach(t),DXo=r(LPe," \u2014 "),jX=n(LPe,"A",{href:!0});var XEt=s(jX);GXo=r(XEt,"ReformerForSequenceClassification"),XEt.forEach(t),OXo=r(LPe," (Reformer model)"),LPe.forEach(t),VXo=i(j),S1=n(j,"LI",{});var yPe=s(S1);Vpe=n(yPe,"STRONG",{});var zEt=s(Vpe);XXo=r(zEt,"rembert"),zEt.forEach(t),zXo=r(yPe," \u2014 "),DX=n(yPe,"A",{href:!0});var QEt=s(DX);QXo=r(QEt,"RemBertForSequenceClassification"),QEt.forEach(t),WXo=r(yPe," (RemBERT model)"),yPe.forEach(t),HXo=i(j),R1=n(j,"LI",{});var xPe=s(R1);Xpe=n(xPe,"STRONG",{});var WEt=s(Xpe);UXo=r(WEt,"roberta"),WEt.forEach(t),JXo=r(xPe," \u2014 "),GX=n(xPe,"A",{href:!0});var HEt=s(GX);YXo=r(HEt,"RobertaForSequenceClassification"),HEt.forEach(t),KXo=r(xPe," (RoBERTa model)"),xPe.forEach(t),ZXo=i(j),P1=n(j,"LI",{});var $Pe=s(P1);zpe=n($Pe,"STRONG",{});var UEt=s(zpe);ezo=r(UEt,"roformer"),UEt.forEach(t),ozo=r($Pe," \u2014 "),OX=n($Pe,"A",{href:!0});var JEt=s(OX);rzo=r(JEt,"RoFormerForSequenceClassification"),JEt.forEach(t),tzo=r($Pe," (RoFormer model)"),$Pe.forEach(t),azo=i(j),B1=n(j,"LI",{});var kPe=s(B1);Qpe=n(kPe,"STRONG",{});var YEt=s(Qpe);nzo=r(YEt,"squeezebert"),YEt.forEach(t),szo=r(kPe," \u2014 "),VX=n(kPe,"A",{href:!0});var KEt=s(VX);lzo=r(KEt,"SqueezeBertForSequenceClassification"),KEt.forEach(t),izo=r(kPe," (SqueezeBERT model)"),kPe.forEach(t),dzo=i(j),N1=n(j,"LI",{});var SPe=s(N1);Wpe=n(SPe,"STRONG",{});var ZEt=s(Wpe);czo=r(ZEt,"tapas"),ZEt.forEach(t),mzo=r(SPe," \u2014 "),XX=n(SPe,"A",{href:!0});var eCt=s(XX);fzo=r(eCt,"TapasForSequenceClassification"),eCt.forEach(t),gzo=r(SPe," (TAPAS model)"),SPe.forEach(t),hzo=i(j),I1=n(j,"LI",{});var RPe=s(I1);Hpe=n(RPe,"STRONG",{});var oCt=s(Hpe);uzo=r(oCt,"transfo-xl"),oCt.forEach(t),pzo=r(RPe," \u2014 "),zX=n(RPe,"A",{href:!0});var rCt=s(zX);_zo=r(rCt,"TransfoXLForSequenceClassification"),rCt.forEach(t),bzo=r(RPe," (Transformer-XL model)"),RPe.forEach(t),vzo=i(j),q1=n(j,"LI",{});var PPe=s(q1);Upe=n(PPe,"STRONG",{});var tCt=s(Upe);Fzo=r(tCt,"xlm"),tCt.forEach(t),Tzo=r(PPe," \u2014 "),QX=n(PPe,"A",{href:!0});var aCt=s(QX);Mzo=r(aCt,"XLMForSequenceClassification"),aCt.forEach(t),Ezo=r(PPe," (XLM model)"),PPe.forEach(t),Czo=i(j),j1=n(j,"LI",{});var BPe=s(j1);Jpe=n(BPe,"STRONG",{});var nCt=s(Jpe);wzo=r(nCt,"xlm-roberta"),nCt.forEach(t),Azo=r(BPe," \u2014 "),WX=n(BPe,"A",{href:!0});var sCt=s(WX);Lzo=r(sCt,"XLMRobertaForSequenceClassification"),sCt.forEach(t),yzo=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),xzo=i(j),D1=n(j,"LI",{});var NPe=s(D1);Ype=n(NPe,"STRONG",{});var lCt=s(Ype);$zo=r(lCt,"xlm-roberta-xl"),lCt.forEach(t),kzo=r(NPe," \u2014 "),HX=n(NPe,"A",{href:!0});var iCt=s(HX);Szo=r(iCt,"XLMRobertaXLForSequenceClassification"),iCt.forEach(t),Rzo=r(NPe," (XLM-RoBERTa-XL model)"),NPe.forEach(t),Pzo=i(j),G1=n(j,"LI",{});var IPe=s(G1);Kpe=n(IPe,"STRONG",{});var dCt=s(Kpe);Bzo=r(dCt,"xlnet"),dCt.forEach(t),Nzo=r(IPe," \u2014 "),UX=n(IPe,"A",{href:!0});var cCt=s(UX);Izo=r(cCt,"XLNetForSequenceClassification"),cCt.forEach(t),qzo=r(IPe," (XLNet model)"),IPe.forEach(t),jzo=i(j),O1=n(j,"LI",{});var qPe=s(O1);Zpe=n(qPe,"STRONG",{});var mCt=s(Zpe);Dzo=r(mCt,"yoso"),mCt.forEach(t),Gzo=r(qPe," \u2014 "),JX=n(qPe,"A",{href:!0});var fCt=s(JX);Ozo=r(fCt,"YosoForSequenceClassification"),fCt.forEach(t),Vzo=r(qPe," (YOSO model)"),qPe.forEach(t),j.forEach(t),Xzo=i(fa),V1=n(fa,"P",{});var jPe=s(V1);zzo=r(jPe,"The model is set in evaluation mode by default using "),e_e=n(jPe,"CODE",{});var gCt=s(e_e);Qzo=r(gCt,"model.eval()"),gCt.forEach(t),Wzo=r(jPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(jPe,"CODE",{});var hCt=s(o_e);Hzo=r(hCt,"model.train()"),hCt.forEach(t),jPe.forEach(t),Uzo=i(fa),T(X1.$$.fragment,fa),fa.forEach(t),il.forEach(t),BXe=i(m),sd=n(m,"H2",{class:!0});var GQe=s(sd);z1=n(GQe,"A",{id:!0,class:!0,href:!0});var uCt=s(z1);r_e=n(uCt,"SPAN",{});var pCt=s(r_e);T(d8.$$.fragment,pCt),pCt.forEach(t),uCt.forEach(t),Jzo=i(GQe),t_e=n(GQe,"SPAN",{});var _Ct=s(t_e);Yzo=r(_Ct,"AutoModelForMultipleChoice"),_Ct.forEach(t),GQe.forEach(t),NXe=i(m),No=n(m,"DIV",{class:!0});var dl=s(No);T(c8.$$.fragment,dl),Kzo=i(dl),ld=n(dl,"P",{});var Yre=s(ld);Zzo=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=n(Yre,"A",{href:!0});var bCt=s(YX);eQo=r(bCt,"from_pretrained()"),bCt.forEach(t),oQo=r(Yre," class method or the "),KX=n(Yre,"A",{href:!0});var vCt=s(KX);rQo=r(vCt,"from_config()"),vCt.forEach(t),tQo=r(Yre,` class
method.`),Yre.forEach(t),aQo=i(dl),m8=n(dl,"P",{});var OQe=s(m8);nQo=r(OQe,"This class cannot be instantiated directly using "),a_e=n(OQe,"CODE",{});var FCt=s(a_e);sQo=r(FCt,"__init__()"),FCt.forEach(t),lQo=r(OQe," (throws an error)."),OQe.forEach(t),iQo=i(dl),ht=n(dl,"DIV",{class:!0});var E7=s(ht);T(f8.$$.fragment,E7),dQo=i(E7),n_e=n(E7,"P",{});var TCt=s(n_e);cQo=r(TCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TCt.forEach(t),mQo=i(E7),id=n(E7,"P",{});var Kre=s(id);fQo=r(Kre,`Note:
Loading a model from its configuration file does `),s_e=n(Kre,"STRONG",{});var MCt=s(s_e);gQo=r(MCt,"not"),MCt.forEach(t),hQo=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Kre,"A",{href:!0});var ECt=s(ZX);uQo=r(ECt,"from_pretrained()"),ECt.forEach(t),pQo=r(Kre," to load the model weights."),Kre.forEach(t),_Qo=i(E7),T(Q1.$$.fragment,E7),E7.forEach(t),bQo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(g8.$$.fragment,ga),vQo=i(ga),l_e=n(ga,"P",{});var CCt=s(l_e);FQo=r(CCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CCt.forEach(t),TQo=i(ga),Oa=n(ga,"P",{});var C7=s(Oa);MQo=r(C7,"The model class to instantiate is selected based on the "),i_e=n(C7,"CODE",{});var wCt=s(i_e);EQo=r(wCt,"model_type"),wCt.forEach(t),CQo=r(C7,` property of the config object (either
passed as an argument or loaded from `),d_e=n(C7,"CODE",{});var ACt=s(d_e);wQo=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),AQo=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(C7,"CODE",{});var LCt=s(c_e);LQo=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),yQo=r(C7,":"),C7.forEach(t),xQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);W1=n(ee,"LI",{});var DPe=s(W1);m_e=n(DPe,"STRONG",{});var yCt=s(m_e);$Qo=r(yCt,"albert"),yCt.forEach(t),kQo=r(DPe," \u2014 "),ez=n(DPe,"A",{href:!0});var xCt=s(ez);SQo=r(xCt,"AlbertForMultipleChoice"),xCt.forEach(t),RQo=r(DPe," (ALBERT model)"),DPe.forEach(t),PQo=i(ee),H1=n(ee,"LI",{});var GPe=s(H1);f_e=n(GPe,"STRONG",{});var $Ct=s(f_e);BQo=r($Ct,"bert"),$Ct.forEach(t),NQo=r(GPe," \u2014 "),oz=n(GPe,"A",{href:!0});var kCt=s(oz);IQo=r(kCt,"BertForMultipleChoice"),kCt.forEach(t),qQo=r(GPe," (BERT model)"),GPe.forEach(t),jQo=i(ee),U1=n(ee,"LI",{});var OPe=s(U1);g_e=n(OPe,"STRONG",{});var SCt=s(g_e);DQo=r(SCt,"big_bird"),SCt.forEach(t),GQo=r(OPe," \u2014 "),rz=n(OPe,"A",{href:!0});var RCt=s(rz);OQo=r(RCt,"BigBirdForMultipleChoice"),RCt.forEach(t),VQo=r(OPe," (BigBird model)"),OPe.forEach(t),XQo=i(ee),J1=n(ee,"LI",{});var VPe=s(J1);h_e=n(VPe,"STRONG",{});var PCt=s(h_e);zQo=r(PCt,"camembert"),PCt.forEach(t),QQo=r(VPe," \u2014 "),tz=n(VPe,"A",{href:!0});var BCt=s(tz);WQo=r(BCt,"CamembertForMultipleChoice"),BCt.forEach(t),HQo=r(VPe," (CamemBERT model)"),VPe.forEach(t),UQo=i(ee),Y1=n(ee,"LI",{});var XPe=s(Y1);u_e=n(XPe,"STRONG",{});var NCt=s(u_e);JQo=r(NCt,"canine"),NCt.forEach(t),YQo=r(XPe," \u2014 "),az=n(XPe,"A",{href:!0});var ICt=s(az);KQo=r(ICt,"CanineForMultipleChoice"),ICt.forEach(t),ZQo=r(XPe," (CANINE model)"),XPe.forEach(t),eWo=i(ee),K1=n(ee,"LI",{});var zPe=s(K1);p_e=n(zPe,"STRONG",{});var qCt=s(p_e);oWo=r(qCt,"convbert"),qCt.forEach(t),rWo=r(zPe," \u2014 "),nz=n(zPe,"A",{href:!0});var jCt=s(nz);tWo=r(jCt,"ConvBertForMultipleChoice"),jCt.forEach(t),aWo=r(zPe," (ConvBERT model)"),zPe.forEach(t),nWo=i(ee),Z1=n(ee,"LI",{});var QPe=s(Z1);__e=n(QPe,"STRONG",{});var DCt=s(__e);sWo=r(DCt,"data2vec-text"),DCt.forEach(t),lWo=r(QPe," \u2014 "),sz=n(QPe,"A",{href:!0});var GCt=s(sz);iWo=r(GCt,"Data2VecTextForMultipleChoice"),GCt.forEach(t),dWo=r(QPe," (Data2VecText model)"),QPe.forEach(t),cWo=i(ee),eF=n(ee,"LI",{});var WPe=s(eF);b_e=n(WPe,"STRONG",{});var OCt=s(b_e);mWo=r(OCt,"deberta-v2"),OCt.forEach(t),fWo=r(WPe," \u2014 "),lz=n(WPe,"A",{href:!0});var VCt=s(lz);gWo=r(VCt,"DebertaV2ForMultipleChoice"),VCt.forEach(t),hWo=r(WPe," (DeBERTa-v2 model)"),WPe.forEach(t),uWo=i(ee),oF=n(ee,"LI",{});var HPe=s(oF);v_e=n(HPe,"STRONG",{});var XCt=s(v_e);pWo=r(XCt,"distilbert"),XCt.forEach(t),_Wo=r(HPe," \u2014 "),iz=n(HPe,"A",{href:!0});var zCt=s(iz);bWo=r(zCt,"DistilBertForMultipleChoice"),zCt.forEach(t),vWo=r(HPe," (DistilBERT model)"),HPe.forEach(t),FWo=i(ee),rF=n(ee,"LI",{});var UPe=s(rF);F_e=n(UPe,"STRONG",{});var QCt=s(F_e);TWo=r(QCt,"electra"),QCt.forEach(t),MWo=r(UPe," \u2014 "),dz=n(UPe,"A",{href:!0});var WCt=s(dz);EWo=r(WCt,"ElectraForMultipleChoice"),WCt.forEach(t),CWo=r(UPe," (ELECTRA model)"),UPe.forEach(t),wWo=i(ee),tF=n(ee,"LI",{});var JPe=s(tF);T_e=n(JPe,"STRONG",{});var HCt=s(T_e);AWo=r(HCt,"flaubert"),HCt.forEach(t),LWo=r(JPe," \u2014 "),cz=n(JPe,"A",{href:!0});var UCt=s(cz);yWo=r(UCt,"FlaubertForMultipleChoice"),UCt.forEach(t),xWo=r(JPe," (FlauBERT model)"),JPe.forEach(t),$Wo=i(ee),aF=n(ee,"LI",{});var YPe=s(aF);M_e=n(YPe,"STRONG",{});var JCt=s(M_e);kWo=r(JCt,"fnet"),JCt.forEach(t),SWo=r(YPe," \u2014 "),mz=n(YPe,"A",{href:!0});var YCt=s(mz);RWo=r(YCt,"FNetForMultipleChoice"),YCt.forEach(t),PWo=r(YPe," (FNet model)"),YPe.forEach(t),BWo=i(ee),nF=n(ee,"LI",{});var KPe=s(nF);E_e=n(KPe,"STRONG",{});var KCt=s(E_e);NWo=r(KCt,"funnel"),KCt.forEach(t),IWo=r(KPe," \u2014 "),fz=n(KPe,"A",{href:!0});var ZCt=s(fz);qWo=r(ZCt,"FunnelForMultipleChoice"),ZCt.forEach(t),jWo=r(KPe," (Funnel Transformer model)"),KPe.forEach(t),DWo=i(ee),sF=n(ee,"LI",{});var ZPe=s(sF);C_e=n(ZPe,"STRONG",{});var e3t=s(C_e);GWo=r(e3t,"ibert"),e3t.forEach(t),OWo=r(ZPe," \u2014 "),gz=n(ZPe,"A",{href:!0});var o3t=s(gz);VWo=r(o3t,"IBertForMultipleChoice"),o3t.forEach(t),XWo=r(ZPe," (I-BERT model)"),ZPe.forEach(t),zWo=i(ee),lF=n(ee,"LI",{});var eBe=s(lF);w_e=n(eBe,"STRONG",{});var r3t=s(w_e);QWo=r(r3t,"longformer"),r3t.forEach(t),WWo=r(eBe," \u2014 "),hz=n(eBe,"A",{href:!0});var t3t=s(hz);HWo=r(t3t,"LongformerForMultipleChoice"),t3t.forEach(t),UWo=r(eBe," (Longformer model)"),eBe.forEach(t),JWo=i(ee),iF=n(ee,"LI",{});var oBe=s(iF);A_e=n(oBe,"STRONG",{});var a3t=s(A_e);YWo=r(a3t,"megatron-bert"),a3t.forEach(t),KWo=r(oBe," \u2014 "),uz=n(oBe,"A",{href:!0});var n3t=s(uz);ZWo=r(n3t,"MegatronBertForMultipleChoice"),n3t.forEach(t),eHo=r(oBe," (Megatron-BERT model)"),oBe.forEach(t),oHo=i(ee),dF=n(ee,"LI",{});var rBe=s(dF);L_e=n(rBe,"STRONG",{});var s3t=s(L_e);rHo=r(s3t,"mobilebert"),s3t.forEach(t),tHo=r(rBe," \u2014 "),pz=n(rBe,"A",{href:!0});var l3t=s(pz);aHo=r(l3t,"MobileBertForMultipleChoice"),l3t.forEach(t),nHo=r(rBe," (MobileBERT model)"),rBe.forEach(t),sHo=i(ee),cF=n(ee,"LI",{});var tBe=s(cF);y_e=n(tBe,"STRONG",{});var i3t=s(y_e);lHo=r(i3t,"mpnet"),i3t.forEach(t),iHo=r(tBe," \u2014 "),_z=n(tBe,"A",{href:!0});var d3t=s(_z);dHo=r(d3t,"MPNetForMultipleChoice"),d3t.forEach(t),cHo=r(tBe," (MPNet model)"),tBe.forEach(t),mHo=i(ee),mF=n(ee,"LI",{});var aBe=s(mF);x_e=n(aBe,"STRONG",{});var c3t=s(x_e);fHo=r(c3t,"nezha"),c3t.forEach(t),gHo=r(aBe," \u2014 "),bz=n(aBe,"A",{href:!0});var m3t=s(bz);hHo=r(m3t,"NezhaForMultipleChoice"),m3t.forEach(t),uHo=r(aBe," (Nezha model)"),aBe.forEach(t),pHo=i(ee),fF=n(ee,"LI",{});var nBe=s(fF);$_e=n(nBe,"STRONG",{});var f3t=s($_e);_Ho=r(f3t,"nystromformer"),f3t.forEach(t),bHo=r(nBe," \u2014 "),vz=n(nBe,"A",{href:!0});var g3t=s(vz);vHo=r(g3t,"NystromformerForMultipleChoice"),g3t.forEach(t),FHo=r(nBe," (Nystr\xF6mformer model)"),nBe.forEach(t),THo=i(ee),gF=n(ee,"LI",{});var sBe=s(gF);k_e=n(sBe,"STRONG",{});var h3t=s(k_e);MHo=r(h3t,"qdqbert"),h3t.forEach(t),EHo=r(sBe," \u2014 "),Fz=n(sBe,"A",{href:!0});var u3t=s(Fz);CHo=r(u3t,"QDQBertForMultipleChoice"),u3t.forEach(t),wHo=r(sBe," (QDQBert model)"),sBe.forEach(t),AHo=i(ee),hF=n(ee,"LI",{});var lBe=s(hF);S_e=n(lBe,"STRONG",{});var p3t=s(S_e);LHo=r(p3t,"rembert"),p3t.forEach(t),yHo=r(lBe," \u2014 "),Tz=n(lBe,"A",{href:!0});var _3t=s(Tz);xHo=r(_3t,"RemBertForMultipleChoice"),_3t.forEach(t),$Ho=r(lBe," (RemBERT model)"),lBe.forEach(t),kHo=i(ee),uF=n(ee,"LI",{});var iBe=s(uF);R_e=n(iBe,"STRONG",{});var b3t=s(R_e);SHo=r(b3t,"roberta"),b3t.forEach(t),RHo=r(iBe," \u2014 "),Mz=n(iBe,"A",{href:!0});var v3t=s(Mz);PHo=r(v3t,"RobertaForMultipleChoice"),v3t.forEach(t),BHo=r(iBe," (RoBERTa model)"),iBe.forEach(t),NHo=i(ee),pF=n(ee,"LI",{});var dBe=s(pF);P_e=n(dBe,"STRONG",{});var F3t=s(P_e);IHo=r(F3t,"roformer"),F3t.forEach(t),qHo=r(dBe," \u2014 "),Ez=n(dBe,"A",{href:!0});var T3t=s(Ez);jHo=r(T3t,"RoFormerForMultipleChoice"),T3t.forEach(t),DHo=r(dBe," (RoFormer model)"),dBe.forEach(t),GHo=i(ee),_F=n(ee,"LI",{});var cBe=s(_F);B_e=n(cBe,"STRONG",{});var M3t=s(B_e);OHo=r(M3t,"squeezebert"),M3t.forEach(t),VHo=r(cBe," \u2014 "),Cz=n(cBe,"A",{href:!0});var E3t=s(Cz);XHo=r(E3t,"SqueezeBertForMultipleChoice"),E3t.forEach(t),zHo=r(cBe," (SqueezeBERT model)"),cBe.forEach(t),QHo=i(ee),bF=n(ee,"LI",{});var mBe=s(bF);N_e=n(mBe,"STRONG",{});var C3t=s(N_e);WHo=r(C3t,"xlm"),C3t.forEach(t),HHo=r(mBe," \u2014 "),wz=n(mBe,"A",{href:!0});var w3t=s(wz);UHo=r(w3t,"XLMForMultipleChoice"),w3t.forEach(t),JHo=r(mBe," (XLM model)"),mBe.forEach(t),YHo=i(ee),vF=n(ee,"LI",{});var fBe=s(vF);I_e=n(fBe,"STRONG",{});var A3t=s(I_e);KHo=r(A3t,"xlm-roberta"),A3t.forEach(t),ZHo=r(fBe," \u2014 "),Az=n(fBe,"A",{href:!0});var L3t=s(Az);eUo=r(L3t,"XLMRobertaForMultipleChoice"),L3t.forEach(t),oUo=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),rUo=i(ee),FF=n(ee,"LI",{});var gBe=s(FF);q_e=n(gBe,"STRONG",{});var y3t=s(q_e);tUo=r(y3t,"xlm-roberta-xl"),y3t.forEach(t),aUo=r(gBe," \u2014 "),Lz=n(gBe,"A",{href:!0});var x3t=s(Lz);nUo=r(x3t,"XLMRobertaXLForMultipleChoice"),x3t.forEach(t),sUo=r(gBe," (XLM-RoBERTa-XL model)"),gBe.forEach(t),lUo=i(ee),TF=n(ee,"LI",{});var hBe=s(TF);j_e=n(hBe,"STRONG",{});var $3t=s(j_e);iUo=r($3t,"xlnet"),$3t.forEach(t),dUo=r(hBe," \u2014 "),yz=n(hBe,"A",{href:!0});var k3t=s(yz);cUo=r(k3t,"XLNetForMultipleChoice"),k3t.forEach(t),mUo=r(hBe," (XLNet model)"),hBe.forEach(t),fUo=i(ee),MF=n(ee,"LI",{});var uBe=s(MF);D_e=n(uBe,"STRONG",{});var S3t=s(D_e);gUo=r(S3t,"yoso"),S3t.forEach(t),hUo=r(uBe," \u2014 "),xz=n(uBe,"A",{href:!0});var R3t=s(xz);uUo=r(R3t,"YosoForMultipleChoice"),R3t.forEach(t),pUo=r(uBe," (YOSO model)"),uBe.forEach(t),ee.forEach(t),_Uo=i(ga),EF=n(ga,"P",{});var pBe=s(EF);bUo=r(pBe,"The model is set in evaluation mode by default using "),G_e=n(pBe,"CODE",{});var P3t=s(G_e);vUo=r(P3t,"model.eval()"),P3t.forEach(t),FUo=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(pBe,"CODE",{});var B3t=s(O_e);TUo=r(B3t,"model.train()"),B3t.forEach(t),pBe.forEach(t),MUo=i(ga),T(CF.$$.fragment,ga),ga.forEach(t),dl.forEach(t),IXe=i(m),dd=n(m,"H2",{class:!0});var VQe=s(dd);wF=n(VQe,"A",{id:!0,class:!0,href:!0});var N3t=s(wF);V_e=n(N3t,"SPAN",{});var I3t=s(V_e);T(h8.$$.fragment,I3t),I3t.forEach(t),N3t.forEach(t),EUo=i(VQe),X_e=n(VQe,"SPAN",{});var q3t=s(X_e);CUo=r(q3t,"AutoModelForNextSentencePrediction"),q3t.forEach(t),VQe.forEach(t),qXe=i(m),Io=n(m,"DIV",{class:!0});var cl=s(Io);T(u8.$$.fragment,cl),wUo=i(cl),cd=n(cl,"P",{});var Zre=s(cd);AUo=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$z=n(Zre,"A",{href:!0});var j3t=s($z);LUo=r(j3t,"from_pretrained()"),j3t.forEach(t),yUo=r(Zre," class method or the "),kz=n(Zre,"A",{href:!0});var D3t=s(kz);xUo=r(D3t,"from_config()"),D3t.forEach(t),$Uo=r(Zre,` class
method.`),Zre.forEach(t),kUo=i(cl),p8=n(cl,"P",{});var XQe=s(p8);SUo=r(XQe,"This class cannot be instantiated directly using "),z_e=n(XQe,"CODE",{});var G3t=s(z_e);RUo=r(G3t,"__init__()"),G3t.forEach(t),PUo=r(XQe," (throws an error)."),XQe.forEach(t),BUo=i(cl),ut=n(cl,"DIV",{class:!0});var w7=s(ut);T(_8.$$.fragment,w7),NUo=i(w7),Q_e=n(w7,"P",{});var O3t=s(Q_e);IUo=r(O3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O3t.forEach(t),qUo=i(w7),md=n(w7,"P",{});var ete=s(md);jUo=r(ete,`Note:
Loading a model from its configuration file does `),W_e=n(ete,"STRONG",{});var V3t=s(W_e);DUo=r(V3t,"not"),V3t.forEach(t),GUo=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(ete,"A",{href:!0});var X3t=s(Sz);OUo=r(X3t,"from_pretrained()"),X3t.forEach(t),VUo=r(ete," to load the model weights."),ete.forEach(t),XUo=i(w7),T(AF.$$.fragment,w7),w7.forEach(t),zUo=i(cl),ao=n(cl,"DIV",{class:!0});var ha=s(ao);T(b8.$$.fragment,ha),QUo=i(ha),H_e=n(ha,"P",{});var z3t=s(H_e);WUo=r(z3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z3t.forEach(t),HUo=i(ha),Va=n(ha,"P",{});var A7=s(Va);UUo=r(A7,"The model class to instantiate is selected based on the "),U_e=n(A7,"CODE",{});var Q3t=s(U_e);JUo=r(Q3t,"model_type"),Q3t.forEach(t),YUo=r(A7,` property of the config object (either
passed as an argument or loaded from `),J_e=n(A7,"CODE",{});var W3t=s(J_e);KUo=r(W3t,"pretrained_model_name_or_path"),W3t.forEach(t),ZUo=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(A7,"CODE",{});var H3t=s(Y_e);eJo=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),oJo=r(A7,":"),A7.forEach(t),rJo=i(ha),qo=n(ha,"UL",{});var ua=s(qo);LF=n(ua,"LI",{});var _Be=s(LF);K_e=n(_Be,"STRONG",{});var U3t=s(K_e);tJo=r(U3t,"bert"),U3t.forEach(t),aJo=r(_Be," \u2014 "),Rz=n(_Be,"A",{href:!0});var J3t=s(Rz);nJo=r(J3t,"BertForNextSentencePrediction"),J3t.forEach(t),sJo=r(_Be," (BERT model)"),_Be.forEach(t),lJo=i(ua),yF=n(ua,"LI",{});var bBe=s(yF);Z_e=n(bBe,"STRONG",{});var Y3t=s(Z_e);iJo=r(Y3t,"fnet"),Y3t.forEach(t),dJo=r(bBe," \u2014 "),Pz=n(bBe,"A",{href:!0});var K3t=s(Pz);cJo=r(K3t,"FNetForNextSentencePrediction"),K3t.forEach(t),mJo=r(bBe," (FNet model)"),bBe.forEach(t),fJo=i(ua),xF=n(ua,"LI",{});var vBe=s(xF);e2e=n(vBe,"STRONG",{});var Z3t=s(e2e);gJo=r(Z3t,"megatron-bert"),Z3t.forEach(t),hJo=r(vBe," \u2014 "),Bz=n(vBe,"A",{href:!0});var e5t=s(Bz);uJo=r(e5t,"MegatronBertForNextSentencePrediction"),e5t.forEach(t),pJo=r(vBe," (Megatron-BERT model)"),vBe.forEach(t),_Jo=i(ua),$F=n(ua,"LI",{});var FBe=s($F);o2e=n(FBe,"STRONG",{});var o5t=s(o2e);bJo=r(o5t,"mobilebert"),o5t.forEach(t),vJo=r(FBe," \u2014 "),Nz=n(FBe,"A",{href:!0});var r5t=s(Nz);FJo=r(r5t,"MobileBertForNextSentencePrediction"),r5t.forEach(t),TJo=r(FBe," (MobileBERT model)"),FBe.forEach(t),MJo=i(ua),kF=n(ua,"LI",{});var TBe=s(kF);r2e=n(TBe,"STRONG",{});var t5t=s(r2e);EJo=r(t5t,"nezha"),t5t.forEach(t),CJo=r(TBe," \u2014 "),Iz=n(TBe,"A",{href:!0});var a5t=s(Iz);wJo=r(a5t,"NezhaForNextSentencePrediction"),a5t.forEach(t),AJo=r(TBe," (Nezha model)"),TBe.forEach(t),LJo=i(ua),SF=n(ua,"LI",{});var MBe=s(SF);t2e=n(MBe,"STRONG",{});var n5t=s(t2e);yJo=r(n5t,"qdqbert"),n5t.forEach(t),xJo=r(MBe," \u2014 "),qz=n(MBe,"A",{href:!0});var s5t=s(qz);$Jo=r(s5t,"QDQBertForNextSentencePrediction"),s5t.forEach(t),kJo=r(MBe," (QDQBert model)"),MBe.forEach(t),ua.forEach(t),SJo=i(ha),RF=n(ha,"P",{});var EBe=s(RF);RJo=r(EBe,"The model is set in evaluation mode by default using "),a2e=n(EBe,"CODE",{});var l5t=s(a2e);PJo=r(l5t,"model.eval()"),l5t.forEach(t),BJo=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=n(EBe,"CODE",{});var i5t=s(n2e);NJo=r(i5t,"model.train()"),i5t.forEach(t),EBe.forEach(t),IJo=i(ha),T(PF.$$.fragment,ha),ha.forEach(t),cl.forEach(t),jXe=i(m),fd=n(m,"H2",{class:!0});var zQe=s(fd);BF=n(zQe,"A",{id:!0,class:!0,href:!0});var d5t=s(BF);s2e=n(d5t,"SPAN",{});var c5t=s(s2e);T(v8.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),qJo=i(zQe),l2e=n(zQe,"SPAN",{});var m5t=s(l2e);jJo=r(m5t,"AutoModelForTokenClassification"),m5t.forEach(t),zQe.forEach(t),DXe=i(m),jo=n(m,"DIV",{class:!0});var ml=s(jo);T(F8.$$.fragment,ml),DJo=i(ml),gd=n(ml,"P",{});var ote=s(gd);GJo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=n(ote,"A",{href:!0});var f5t=s(jz);OJo=r(f5t,"from_pretrained()"),f5t.forEach(t),VJo=r(ote," class method or the "),Dz=n(ote,"A",{href:!0});var g5t=s(Dz);XJo=r(g5t,"from_config()"),g5t.forEach(t),zJo=r(ote,` class
method.`),ote.forEach(t),QJo=i(ml),T8=n(ml,"P",{});var QQe=s(T8);WJo=r(QQe,"This class cannot be instantiated directly using "),i2e=n(QQe,"CODE",{});var h5t=s(i2e);HJo=r(h5t,"__init__()"),h5t.forEach(t),UJo=r(QQe," (throws an error)."),QQe.forEach(t),JJo=i(ml),pt=n(ml,"DIV",{class:!0});var L7=s(pt);T(M8.$$.fragment,L7),YJo=i(L7),d2e=n(L7,"P",{});var u5t=s(d2e);KJo=r(u5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),u5t.forEach(t),ZJo=i(L7),hd=n(L7,"P",{});var rte=s(hd);eYo=r(rte,`Note:
Loading a model from its configuration file does `),c2e=n(rte,"STRONG",{});var p5t=s(c2e);oYo=r(p5t,"not"),p5t.forEach(t),rYo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(rte,"A",{href:!0});var _5t=s(Gz);tYo=r(_5t,"from_pretrained()"),_5t.forEach(t),aYo=r(rte," to load the model weights."),rte.forEach(t),nYo=i(L7),T(NF.$$.fragment,L7),L7.forEach(t),sYo=i(ml),no=n(ml,"DIV",{class:!0});var pa=s(no);T(E8.$$.fragment,pa),lYo=i(pa),m2e=n(pa,"P",{});var b5t=s(m2e);iYo=r(b5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b5t.forEach(t),dYo=i(pa),Xa=n(pa,"P",{});var y7=s(Xa);cYo=r(y7,"The model class to instantiate is selected based on the "),f2e=n(y7,"CODE",{});var v5t=s(f2e);mYo=r(v5t,"model_type"),v5t.forEach(t),fYo=r(y7,` property of the config object (either
passed as an argument or loaded from `),g2e=n(y7,"CODE",{});var F5t=s(g2e);gYo=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),hYo=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(y7,"CODE",{});var T5t=s(h2e);uYo=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),pYo=r(y7,":"),y7.forEach(t),_Yo=i(pa),U=n(pa,"UL",{});var J=s(U);IF=n(J,"LI",{});var CBe=s(IF);u2e=n(CBe,"STRONG",{});var M5t=s(u2e);bYo=r(M5t,"albert"),M5t.forEach(t),vYo=r(CBe," \u2014 "),Oz=n(CBe,"A",{href:!0});var E5t=s(Oz);FYo=r(E5t,"AlbertForTokenClassification"),E5t.forEach(t),TYo=r(CBe," (ALBERT model)"),CBe.forEach(t),MYo=i(J),qF=n(J,"LI",{});var wBe=s(qF);p2e=n(wBe,"STRONG",{});var C5t=s(p2e);EYo=r(C5t,"bert"),C5t.forEach(t),CYo=r(wBe," \u2014 "),Vz=n(wBe,"A",{href:!0});var w5t=s(Vz);wYo=r(w5t,"BertForTokenClassification"),w5t.forEach(t),AYo=r(wBe," (BERT model)"),wBe.forEach(t),LYo=i(J),jF=n(J,"LI",{});var ABe=s(jF);_2e=n(ABe,"STRONG",{});var A5t=s(_2e);yYo=r(A5t,"big_bird"),A5t.forEach(t),xYo=r(ABe," \u2014 "),Xz=n(ABe,"A",{href:!0});var L5t=s(Xz);$Yo=r(L5t,"BigBirdForTokenClassification"),L5t.forEach(t),kYo=r(ABe," (BigBird model)"),ABe.forEach(t),SYo=i(J),DF=n(J,"LI",{});var LBe=s(DF);b2e=n(LBe,"STRONG",{});var y5t=s(b2e);RYo=r(y5t,"bloom"),y5t.forEach(t),PYo=r(LBe," \u2014 "),zz=n(LBe,"A",{href:!0});var x5t=s(zz);BYo=r(x5t,"BloomForTokenClassification"),x5t.forEach(t),NYo=r(LBe," (BLOOM model)"),LBe.forEach(t),IYo=i(J),GF=n(J,"LI",{});var yBe=s(GF);v2e=n(yBe,"STRONG",{});var $5t=s(v2e);qYo=r($5t,"camembert"),$5t.forEach(t),jYo=r(yBe," \u2014 "),Qz=n(yBe,"A",{href:!0});var k5t=s(Qz);DYo=r(k5t,"CamembertForTokenClassification"),k5t.forEach(t),GYo=r(yBe," (CamemBERT model)"),yBe.forEach(t),OYo=i(J),OF=n(J,"LI",{});var xBe=s(OF);F2e=n(xBe,"STRONG",{});var S5t=s(F2e);VYo=r(S5t,"canine"),S5t.forEach(t),XYo=r(xBe," \u2014 "),Wz=n(xBe,"A",{href:!0});var R5t=s(Wz);zYo=r(R5t,"CanineForTokenClassification"),R5t.forEach(t),QYo=r(xBe," (CANINE model)"),xBe.forEach(t),WYo=i(J),VF=n(J,"LI",{});var $Be=s(VF);T2e=n($Be,"STRONG",{});var P5t=s(T2e);HYo=r(P5t,"convbert"),P5t.forEach(t),UYo=r($Be," \u2014 "),Hz=n($Be,"A",{href:!0});var B5t=s(Hz);JYo=r(B5t,"ConvBertForTokenClassification"),B5t.forEach(t),YYo=r($Be," (ConvBERT model)"),$Be.forEach(t),KYo=i(J),XF=n(J,"LI",{});var kBe=s(XF);M2e=n(kBe,"STRONG",{});var N5t=s(M2e);ZYo=r(N5t,"data2vec-text"),N5t.forEach(t),eKo=r(kBe," \u2014 "),Uz=n(kBe,"A",{href:!0});var I5t=s(Uz);oKo=r(I5t,"Data2VecTextForTokenClassification"),I5t.forEach(t),rKo=r(kBe," (Data2VecText model)"),kBe.forEach(t),tKo=i(J),zF=n(J,"LI",{});var SBe=s(zF);E2e=n(SBe,"STRONG",{});var q5t=s(E2e);aKo=r(q5t,"deberta"),q5t.forEach(t),nKo=r(SBe," \u2014 "),Jz=n(SBe,"A",{href:!0});var j5t=s(Jz);sKo=r(j5t,"DebertaForTokenClassification"),j5t.forEach(t),lKo=r(SBe," (DeBERTa model)"),SBe.forEach(t),iKo=i(J),QF=n(J,"LI",{});var RBe=s(QF);C2e=n(RBe,"STRONG",{});var D5t=s(C2e);dKo=r(D5t,"deberta-v2"),D5t.forEach(t),cKo=r(RBe," \u2014 "),Yz=n(RBe,"A",{href:!0});var G5t=s(Yz);mKo=r(G5t,"DebertaV2ForTokenClassification"),G5t.forEach(t),fKo=r(RBe," (DeBERTa-v2 model)"),RBe.forEach(t),gKo=i(J),WF=n(J,"LI",{});var PBe=s(WF);w2e=n(PBe,"STRONG",{});var O5t=s(w2e);hKo=r(O5t,"distilbert"),O5t.forEach(t),uKo=r(PBe," \u2014 "),Kz=n(PBe,"A",{href:!0});var V5t=s(Kz);pKo=r(V5t,"DistilBertForTokenClassification"),V5t.forEach(t),_Ko=r(PBe," (DistilBERT model)"),PBe.forEach(t),bKo=i(J),HF=n(J,"LI",{});var BBe=s(HF);A2e=n(BBe,"STRONG",{});var X5t=s(A2e);vKo=r(X5t,"electra"),X5t.forEach(t),FKo=r(BBe," \u2014 "),Zz=n(BBe,"A",{href:!0});var z5t=s(Zz);TKo=r(z5t,"ElectraForTokenClassification"),z5t.forEach(t),MKo=r(BBe," (ELECTRA model)"),BBe.forEach(t),EKo=i(J),UF=n(J,"LI",{});var NBe=s(UF);L2e=n(NBe,"STRONG",{});var Q5t=s(L2e);CKo=r(Q5t,"flaubert"),Q5t.forEach(t),wKo=r(NBe," \u2014 "),eQ=n(NBe,"A",{href:!0});var W5t=s(eQ);AKo=r(W5t,"FlaubertForTokenClassification"),W5t.forEach(t),LKo=r(NBe," (FlauBERT model)"),NBe.forEach(t),yKo=i(J),JF=n(J,"LI",{});var IBe=s(JF);y2e=n(IBe,"STRONG",{});var H5t=s(y2e);xKo=r(H5t,"fnet"),H5t.forEach(t),$Ko=r(IBe," \u2014 "),oQ=n(IBe,"A",{href:!0});var U5t=s(oQ);kKo=r(U5t,"FNetForTokenClassification"),U5t.forEach(t),SKo=r(IBe," (FNet model)"),IBe.forEach(t),RKo=i(J),YF=n(J,"LI",{});var qBe=s(YF);x2e=n(qBe,"STRONG",{});var J5t=s(x2e);PKo=r(J5t,"funnel"),J5t.forEach(t),BKo=r(qBe," \u2014 "),rQ=n(qBe,"A",{href:!0});var Y5t=s(rQ);NKo=r(Y5t,"FunnelForTokenClassification"),Y5t.forEach(t),IKo=r(qBe," (Funnel Transformer model)"),qBe.forEach(t),qKo=i(J),KF=n(J,"LI",{});var jBe=s(KF);$2e=n(jBe,"STRONG",{});var K5t=s($2e);jKo=r(K5t,"gpt2"),K5t.forEach(t),DKo=r(jBe," \u2014 "),tQ=n(jBe,"A",{href:!0});var Z5t=s(tQ);GKo=r(Z5t,"GPT2ForTokenClassification"),Z5t.forEach(t),OKo=r(jBe," (OpenAI GPT-2 model)"),jBe.forEach(t),VKo=i(J),ZF=n(J,"LI",{});var DBe=s(ZF);k2e=n(DBe,"STRONG",{});var e0t=s(k2e);XKo=r(e0t,"ibert"),e0t.forEach(t),zKo=r(DBe," \u2014 "),aQ=n(DBe,"A",{href:!0});var o0t=s(aQ);QKo=r(o0t,"IBertForTokenClassification"),o0t.forEach(t),WKo=r(DBe," (I-BERT model)"),DBe.forEach(t),HKo=i(J),eT=n(J,"LI",{});var GBe=s(eT);S2e=n(GBe,"STRONG",{});var r0t=s(S2e);UKo=r(r0t,"layoutlm"),r0t.forEach(t),JKo=r(GBe," \u2014 "),nQ=n(GBe,"A",{href:!0});var t0t=s(nQ);YKo=r(t0t,"LayoutLMForTokenClassification"),t0t.forEach(t),KKo=r(GBe," (LayoutLM model)"),GBe.forEach(t),ZKo=i(J),oT=n(J,"LI",{});var OBe=s(oT);R2e=n(OBe,"STRONG",{});var a0t=s(R2e);eZo=r(a0t,"layoutlmv2"),a0t.forEach(t),oZo=r(OBe," \u2014 "),sQ=n(OBe,"A",{href:!0});var n0t=s(sQ);rZo=r(n0t,"LayoutLMv2ForTokenClassification"),n0t.forEach(t),tZo=r(OBe," (LayoutLMv2 model)"),OBe.forEach(t),aZo=i(J),rT=n(J,"LI",{});var VBe=s(rT);P2e=n(VBe,"STRONG",{});var s0t=s(P2e);nZo=r(s0t,"layoutlmv3"),s0t.forEach(t),sZo=r(VBe," \u2014 "),lQ=n(VBe,"A",{href:!0});var l0t=s(lQ);lZo=r(l0t,"LayoutLMv3ForTokenClassification"),l0t.forEach(t),iZo=r(VBe," (LayoutLMv3 model)"),VBe.forEach(t),dZo=i(J),tT=n(J,"LI",{});var XBe=s(tT);B2e=n(XBe,"STRONG",{});var i0t=s(B2e);cZo=r(i0t,"longformer"),i0t.forEach(t),mZo=r(XBe," \u2014 "),iQ=n(XBe,"A",{href:!0});var d0t=s(iQ);fZo=r(d0t,"LongformerForTokenClassification"),d0t.forEach(t),gZo=r(XBe," (Longformer model)"),XBe.forEach(t),hZo=i(J),aT=n(J,"LI",{});var zBe=s(aT);N2e=n(zBe,"STRONG",{});var c0t=s(N2e);uZo=r(c0t,"megatron-bert"),c0t.forEach(t),pZo=r(zBe," \u2014 "),dQ=n(zBe,"A",{href:!0});var m0t=s(dQ);_Zo=r(m0t,"MegatronBertForTokenClassification"),m0t.forEach(t),bZo=r(zBe," (Megatron-BERT model)"),zBe.forEach(t),vZo=i(J),nT=n(J,"LI",{});var QBe=s(nT);I2e=n(QBe,"STRONG",{});var f0t=s(I2e);FZo=r(f0t,"mobilebert"),f0t.forEach(t),TZo=r(QBe," \u2014 "),cQ=n(QBe,"A",{href:!0});var g0t=s(cQ);MZo=r(g0t,"MobileBertForTokenClassification"),g0t.forEach(t),EZo=r(QBe," (MobileBERT model)"),QBe.forEach(t),CZo=i(J),sT=n(J,"LI",{});var WBe=s(sT);q2e=n(WBe,"STRONG",{});var h0t=s(q2e);wZo=r(h0t,"mpnet"),h0t.forEach(t),AZo=r(WBe," \u2014 "),mQ=n(WBe,"A",{href:!0});var u0t=s(mQ);LZo=r(u0t,"MPNetForTokenClassification"),u0t.forEach(t),yZo=r(WBe," (MPNet model)"),WBe.forEach(t),xZo=i(J),lT=n(J,"LI",{});var HBe=s(lT);j2e=n(HBe,"STRONG",{});var p0t=s(j2e);$Zo=r(p0t,"nezha"),p0t.forEach(t),kZo=r(HBe," \u2014 "),fQ=n(HBe,"A",{href:!0});var _0t=s(fQ);SZo=r(_0t,"NezhaForTokenClassification"),_0t.forEach(t),RZo=r(HBe," (Nezha model)"),HBe.forEach(t),PZo=i(J),iT=n(J,"LI",{});var UBe=s(iT);D2e=n(UBe,"STRONG",{});var b0t=s(D2e);BZo=r(b0t,"nystromformer"),b0t.forEach(t),NZo=r(UBe," \u2014 "),gQ=n(UBe,"A",{href:!0});var v0t=s(gQ);IZo=r(v0t,"NystromformerForTokenClassification"),v0t.forEach(t),qZo=r(UBe," (Nystr\xF6mformer model)"),UBe.forEach(t),jZo=i(J),dT=n(J,"LI",{});var JBe=s(dT);G2e=n(JBe,"STRONG",{});var F0t=s(G2e);DZo=r(F0t,"qdqbert"),F0t.forEach(t),GZo=r(JBe," \u2014 "),hQ=n(JBe,"A",{href:!0});var T0t=s(hQ);OZo=r(T0t,"QDQBertForTokenClassification"),T0t.forEach(t),VZo=r(JBe," (QDQBert model)"),JBe.forEach(t),XZo=i(J),cT=n(J,"LI",{});var YBe=s(cT);O2e=n(YBe,"STRONG",{});var M0t=s(O2e);zZo=r(M0t,"rembert"),M0t.forEach(t),QZo=r(YBe," \u2014 "),uQ=n(YBe,"A",{href:!0});var E0t=s(uQ);WZo=r(E0t,"RemBertForTokenClassification"),E0t.forEach(t),HZo=r(YBe," (RemBERT model)"),YBe.forEach(t),UZo=i(J),mT=n(J,"LI",{});var KBe=s(mT);V2e=n(KBe,"STRONG",{});var C0t=s(V2e);JZo=r(C0t,"roberta"),C0t.forEach(t),YZo=r(KBe," \u2014 "),pQ=n(KBe,"A",{href:!0});var w0t=s(pQ);KZo=r(w0t,"RobertaForTokenClassification"),w0t.forEach(t),ZZo=r(KBe," (RoBERTa model)"),KBe.forEach(t),eer=i(J),fT=n(J,"LI",{});var ZBe=s(fT);X2e=n(ZBe,"STRONG",{});var A0t=s(X2e);oer=r(A0t,"roformer"),A0t.forEach(t),rer=r(ZBe," \u2014 "),_Q=n(ZBe,"A",{href:!0});var L0t=s(_Q);ter=r(L0t,"RoFormerForTokenClassification"),L0t.forEach(t),aer=r(ZBe," (RoFormer model)"),ZBe.forEach(t),ner=i(J),gT=n(J,"LI",{});var eNe=s(gT);z2e=n(eNe,"STRONG",{});var y0t=s(z2e);ser=r(y0t,"squeezebert"),y0t.forEach(t),ler=r(eNe," \u2014 "),bQ=n(eNe,"A",{href:!0});var x0t=s(bQ);ier=r(x0t,"SqueezeBertForTokenClassification"),x0t.forEach(t),der=r(eNe," (SqueezeBERT model)"),eNe.forEach(t),cer=i(J),hT=n(J,"LI",{});var oNe=s(hT);Q2e=n(oNe,"STRONG",{});var $0t=s(Q2e);mer=r($0t,"xlm"),$0t.forEach(t),fer=r(oNe," \u2014 "),vQ=n(oNe,"A",{href:!0});var k0t=s(vQ);ger=r(k0t,"XLMForTokenClassification"),k0t.forEach(t),her=r(oNe," (XLM model)"),oNe.forEach(t),uer=i(J),uT=n(J,"LI",{});var rNe=s(uT);W2e=n(rNe,"STRONG",{});var S0t=s(W2e);per=r(S0t,"xlm-roberta"),S0t.forEach(t),_er=r(rNe," \u2014 "),FQ=n(rNe,"A",{href:!0});var R0t=s(FQ);ber=r(R0t,"XLMRobertaForTokenClassification"),R0t.forEach(t),ver=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),Fer=i(J),pT=n(J,"LI",{});var tNe=s(pT);H2e=n(tNe,"STRONG",{});var P0t=s(H2e);Ter=r(P0t,"xlm-roberta-xl"),P0t.forEach(t),Mer=r(tNe," \u2014 "),TQ=n(tNe,"A",{href:!0});var B0t=s(TQ);Eer=r(B0t,"XLMRobertaXLForTokenClassification"),B0t.forEach(t),Cer=r(tNe," (XLM-RoBERTa-XL model)"),tNe.forEach(t),wer=i(J),_T=n(J,"LI",{});var aNe=s(_T);U2e=n(aNe,"STRONG",{});var N0t=s(U2e);Aer=r(N0t,"xlnet"),N0t.forEach(t),Ler=r(aNe," \u2014 "),MQ=n(aNe,"A",{href:!0});var I0t=s(MQ);yer=r(I0t,"XLNetForTokenClassification"),I0t.forEach(t),xer=r(aNe," (XLNet model)"),aNe.forEach(t),$er=i(J),bT=n(J,"LI",{});var nNe=s(bT);J2e=n(nNe,"STRONG",{});var q0t=s(J2e);ker=r(q0t,"yoso"),q0t.forEach(t),Ser=r(nNe," \u2014 "),EQ=n(nNe,"A",{href:!0});var j0t=s(EQ);Rer=r(j0t,"YosoForTokenClassification"),j0t.forEach(t),Per=r(nNe," (YOSO model)"),nNe.forEach(t),J.forEach(t),Ber=i(pa),vT=n(pa,"P",{});var sNe=s(vT);Ner=r(sNe,"The model is set in evaluation mode by default using "),Y2e=n(sNe,"CODE",{});var D0t=s(Y2e);Ier=r(D0t,"model.eval()"),D0t.forEach(t),qer=r(sNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K2e=n(sNe,"CODE",{});var G0t=s(K2e);jer=r(G0t,"model.train()"),G0t.forEach(t),sNe.forEach(t),Der=i(pa),T(FT.$$.fragment,pa),pa.forEach(t),ml.forEach(t),GXe=i(m),ud=n(m,"H2",{class:!0});var WQe=s(ud);TT=n(WQe,"A",{id:!0,class:!0,href:!0});var O0t=s(TT);Z2e=n(O0t,"SPAN",{});var V0t=s(Z2e);T(C8.$$.fragment,V0t),V0t.forEach(t),O0t.forEach(t),Ger=i(WQe),ebe=n(WQe,"SPAN",{});var X0t=s(ebe);Oer=r(X0t,"AutoModelForQuestionAnswering"),X0t.forEach(t),WQe.forEach(t),OXe=i(m),Do=n(m,"DIV",{class:!0});var fl=s(Do);T(w8.$$.fragment,fl),Ver=i(fl),pd=n(fl,"P",{});var tte=s(pd);Xer=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CQ=n(tte,"A",{href:!0});var z0t=s(CQ);zer=r(z0t,"from_pretrained()"),z0t.forEach(t),Qer=r(tte," class method or the "),wQ=n(tte,"A",{href:!0});var Q0t=s(wQ);Wer=r(Q0t,"from_config()"),Q0t.forEach(t),Her=r(tte,` class
method.`),tte.forEach(t),Uer=i(fl),A8=n(fl,"P",{});var HQe=s(A8);Jer=r(HQe,"This class cannot be instantiated directly using "),obe=n(HQe,"CODE",{});var W0t=s(obe);Yer=r(W0t,"__init__()"),W0t.forEach(t),Ker=r(HQe," (throws an error)."),HQe.forEach(t),Zer=i(fl),_t=n(fl,"DIV",{class:!0});var x7=s(_t);T(L8.$$.fragment,x7),eor=i(x7),rbe=n(x7,"P",{});var H0t=s(rbe);oor=r(H0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H0t.forEach(t),ror=i(x7),_d=n(x7,"P",{});var ate=s(_d);tor=r(ate,`Note:
Loading a model from its configuration file does `),tbe=n(ate,"STRONG",{});var U0t=s(tbe);aor=r(U0t,"not"),U0t.forEach(t),nor=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(ate,"A",{href:!0});var J0t=s(AQ);sor=r(J0t,"from_pretrained()"),J0t.forEach(t),lor=r(ate," to load the model weights."),ate.forEach(t),ior=i(x7),T(MT.$$.fragment,x7),x7.forEach(t),dor=i(fl),so=n(fl,"DIV",{class:!0});var _a=s(so);T(y8.$$.fragment,_a),cor=i(_a),abe=n(_a,"P",{});var Y0t=s(abe);mor=r(Y0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Y0t.forEach(t),gor=i(_a),za=n(_a,"P",{});var $7=s(za);hor=r($7,"The model class to instantiate is selected based on the "),nbe=n($7,"CODE",{});var K0t=s(nbe);uor=r(K0t,"model_type"),K0t.forEach(t),por=r($7,` property of the config object (either
passed as an argument or loaded from `),sbe=n($7,"CODE",{});var Z0t=s(sbe);_or=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),bor=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n($7,"CODE",{});var ewt=s(lbe);vor=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),For=r($7,":"),$7.forEach(t),Tor=i(_a),V=n(_a,"UL",{});var X=s(V);ET=n(X,"LI",{});var lNe=s(ET);ibe=n(lNe,"STRONG",{});var owt=s(ibe);Mor=r(owt,"albert"),owt.forEach(t),Eor=r(lNe," \u2014 "),LQ=n(lNe,"A",{href:!0});var rwt=s(LQ);Cor=r(rwt,"AlbertForQuestionAnswering"),rwt.forEach(t),wor=r(lNe," (ALBERT model)"),lNe.forEach(t),Aor=i(X),CT=n(X,"LI",{});var iNe=s(CT);dbe=n(iNe,"STRONG",{});var twt=s(dbe);Lor=r(twt,"bart"),twt.forEach(t),yor=r(iNe," \u2014 "),yQ=n(iNe,"A",{href:!0});var awt=s(yQ);xor=r(awt,"BartForQuestionAnswering"),awt.forEach(t),$or=r(iNe," (BART model)"),iNe.forEach(t),kor=i(X),wT=n(X,"LI",{});var dNe=s(wT);cbe=n(dNe,"STRONG",{});var nwt=s(cbe);Sor=r(nwt,"bert"),nwt.forEach(t),Ror=r(dNe," \u2014 "),xQ=n(dNe,"A",{href:!0});var swt=s(xQ);Por=r(swt,"BertForQuestionAnswering"),swt.forEach(t),Bor=r(dNe," (BERT model)"),dNe.forEach(t),Nor=i(X),AT=n(X,"LI",{});var cNe=s(AT);mbe=n(cNe,"STRONG",{});var lwt=s(mbe);Ior=r(lwt,"big_bird"),lwt.forEach(t),qor=r(cNe," \u2014 "),$Q=n(cNe,"A",{href:!0});var iwt=s($Q);jor=r(iwt,"BigBirdForQuestionAnswering"),iwt.forEach(t),Dor=r(cNe," (BigBird model)"),cNe.forEach(t),Gor=i(X),LT=n(X,"LI",{});var mNe=s(LT);fbe=n(mNe,"STRONG",{});var dwt=s(fbe);Oor=r(dwt,"bigbird_pegasus"),dwt.forEach(t),Vor=r(mNe," \u2014 "),kQ=n(mNe,"A",{href:!0});var cwt=s(kQ);Xor=r(cwt,"BigBirdPegasusForQuestionAnswering"),cwt.forEach(t),zor=r(mNe," (BigBird-Pegasus model)"),mNe.forEach(t),Qor=i(X),yT=n(X,"LI",{});var fNe=s(yT);gbe=n(fNe,"STRONG",{});var mwt=s(gbe);Wor=r(mwt,"camembert"),mwt.forEach(t),Hor=r(fNe," \u2014 "),SQ=n(fNe,"A",{href:!0});var fwt=s(SQ);Uor=r(fwt,"CamembertForQuestionAnswering"),fwt.forEach(t),Jor=r(fNe," (CamemBERT model)"),fNe.forEach(t),Yor=i(X),xT=n(X,"LI",{});var gNe=s(xT);hbe=n(gNe,"STRONG",{});var gwt=s(hbe);Kor=r(gwt,"canine"),gwt.forEach(t),Zor=r(gNe," \u2014 "),RQ=n(gNe,"A",{href:!0});var hwt=s(RQ);err=r(hwt,"CanineForQuestionAnswering"),hwt.forEach(t),orr=r(gNe," (CANINE model)"),gNe.forEach(t),rrr=i(X),$T=n(X,"LI",{});var hNe=s($T);ube=n(hNe,"STRONG",{});var uwt=s(ube);trr=r(uwt,"convbert"),uwt.forEach(t),arr=r(hNe," \u2014 "),PQ=n(hNe,"A",{href:!0});var pwt=s(PQ);nrr=r(pwt,"ConvBertForQuestionAnswering"),pwt.forEach(t),srr=r(hNe," (ConvBERT model)"),hNe.forEach(t),lrr=i(X),kT=n(X,"LI",{});var uNe=s(kT);pbe=n(uNe,"STRONG",{});var _wt=s(pbe);irr=r(_wt,"data2vec-text"),_wt.forEach(t),drr=r(uNe," \u2014 "),BQ=n(uNe,"A",{href:!0});var bwt=s(BQ);crr=r(bwt,"Data2VecTextForQuestionAnswering"),bwt.forEach(t),mrr=r(uNe," (Data2VecText model)"),uNe.forEach(t),frr=i(X),ST=n(X,"LI",{});var pNe=s(ST);_be=n(pNe,"STRONG",{});var vwt=s(_be);grr=r(vwt,"deberta"),vwt.forEach(t),hrr=r(pNe," \u2014 "),NQ=n(pNe,"A",{href:!0});var Fwt=s(NQ);urr=r(Fwt,"DebertaForQuestionAnswering"),Fwt.forEach(t),prr=r(pNe," (DeBERTa model)"),pNe.forEach(t),_rr=i(X),RT=n(X,"LI",{});var _Ne=s(RT);bbe=n(_Ne,"STRONG",{});var Twt=s(bbe);brr=r(Twt,"deberta-v2"),Twt.forEach(t),vrr=r(_Ne," \u2014 "),IQ=n(_Ne,"A",{href:!0});var Mwt=s(IQ);Frr=r(Mwt,"DebertaV2ForQuestionAnswering"),Mwt.forEach(t),Trr=r(_Ne," (DeBERTa-v2 model)"),_Ne.forEach(t),Mrr=i(X),PT=n(X,"LI",{});var bNe=s(PT);vbe=n(bNe,"STRONG",{});var Ewt=s(vbe);Err=r(Ewt,"distilbert"),Ewt.forEach(t),Crr=r(bNe," \u2014 "),qQ=n(bNe,"A",{href:!0});var Cwt=s(qQ);wrr=r(Cwt,"DistilBertForQuestionAnswering"),Cwt.forEach(t),Arr=r(bNe," (DistilBERT model)"),bNe.forEach(t),Lrr=i(X),BT=n(X,"LI",{});var vNe=s(BT);Fbe=n(vNe,"STRONG",{});var wwt=s(Fbe);yrr=r(wwt,"electra"),wwt.forEach(t),xrr=r(vNe," \u2014 "),jQ=n(vNe,"A",{href:!0});var Awt=s(jQ);$rr=r(Awt,"ElectraForQuestionAnswering"),Awt.forEach(t),krr=r(vNe," (ELECTRA model)"),vNe.forEach(t),Srr=i(X),NT=n(X,"LI",{});var FNe=s(NT);Tbe=n(FNe,"STRONG",{});var Lwt=s(Tbe);Rrr=r(Lwt,"flaubert"),Lwt.forEach(t),Prr=r(FNe," \u2014 "),DQ=n(FNe,"A",{href:!0});var ywt=s(DQ);Brr=r(ywt,"FlaubertForQuestionAnsweringSimple"),ywt.forEach(t),Nrr=r(FNe," (FlauBERT model)"),FNe.forEach(t),Irr=i(X),IT=n(X,"LI",{});var TNe=s(IT);Mbe=n(TNe,"STRONG",{});var xwt=s(Mbe);qrr=r(xwt,"fnet"),xwt.forEach(t),jrr=r(TNe," \u2014 "),GQ=n(TNe,"A",{href:!0});var $wt=s(GQ);Drr=r($wt,"FNetForQuestionAnswering"),$wt.forEach(t),Grr=r(TNe," (FNet model)"),TNe.forEach(t),Orr=i(X),qT=n(X,"LI",{});var MNe=s(qT);Ebe=n(MNe,"STRONG",{});var kwt=s(Ebe);Vrr=r(kwt,"funnel"),kwt.forEach(t),Xrr=r(MNe," \u2014 "),OQ=n(MNe,"A",{href:!0});var Swt=s(OQ);zrr=r(Swt,"FunnelForQuestionAnswering"),Swt.forEach(t),Qrr=r(MNe," (Funnel Transformer model)"),MNe.forEach(t),Wrr=i(X),jT=n(X,"LI",{});var ENe=s(jT);Cbe=n(ENe,"STRONG",{});var Rwt=s(Cbe);Hrr=r(Rwt,"gptj"),Rwt.forEach(t),Urr=r(ENe," \u2014 "),VQ=n(ENe,"A",{href:!0});var Pwt=s(VQ);Jrr=r(Pwt,"GPTJForQuestionAnswering"),Pwt.forEach(t),Yrr=r(ENe," (GPT-J model)"),ENe.forEach(t),Krr=i(X),DT=n(X,"LI",{});var CNe=s(DT);wbe=n(CNe,"STRONG",{});var Bwt=s(wbe);Zrr=r(Bwt,"ibert"),Bwt.forEach(t),etr=r(CNe," \u2014 "),XQ=n(CNe,"A",{href:!0});var Nwt=s(XQ);otr=r(Nwt,"IBertForQuestionAnswering"),Nwt.forEach(t),rtr=r(CNe," (I-BERT model)"),CNe.forEach(t),ttr=i(X),GT=n(X,"LI",{});var wNe=s(GT);Abe=n(wNe,"STRONG",{});var Iwt=s(Abe);atr=r(Iwt,"layoutlmv2"),Iwt.forEach(t),ntr=r(wNe," \u2014 "),zQ=n(wNe,"A",{href:!0});var qwt=s(zQ);str=r(qwt,"LayoutLMv2ForQuestionAnswering"),qwt.forEach(t),ltr=r(wNe," (LayoutLMv2 model)"),wNe.forEach(t),itr=i(X),OT=n(X,"LI",{});var ANe=s(OT);Lbe=n(ANe,"STRONG",{});var jwt=s(Lbe);dtr=r(jwt,"layoutlmv3"),jwt.forEach(t),ctr=r(ANe," \u2014 "),QQ=n(ANe,"A",{href:!0});var Dwt=s(QQ);mtr=r(Dwt,"LayoutLMv3ForQuestionAnswering"),Dwt.forEach(t),ftr=r(ANe," (LayoutLMv3 model)"),ANe.forEach(t),gtr=i(X),VT=n(X,"LI",{});var LNe=s(VT);ybe=n(LNe,"STRONG",{});var Gwt=s(ybe);htr=r(Gwt,"led"),Gwt.forEach(t),utr=r(LNe," \u2014 "),WQ=n(LNe,"A",{href:!0});var Owt=s(WQ);ptr=r(Owt,"LEDForQuestionAnswering"),Owt.forEach(t),_tr=r(LNe," (LED model)"),LNe.forEach(t),btr=i(X),XT=n(X,"LI",{});var yNe=s(XT);xbe=n(yNe,"STRONG",{});var Vwt=s(xbe);vtr=r(Vwt,"longformer"),Vwt.forEach(t),Ftr=r(yNe," \u2014 "),HQ=n(yNe,"A",{href:!0});var Xwt=s(HQ);Ttr=r(Xwt,"LongformerForQuestionAnswering"),Xwt.forEach(t),Mtr=r(yNe," (Longformer model)"),yNe.forEach(t),Etr=i(X),zT=n(X,"LI",{});var xNe=s(zT);$be=n(xNe,"STRONG",{});var zwt=s($be);Ctr=r(zwt,"lxmert"),zwt.forEach(t),wtr=r(xNe," \u2014 "),UQ=n(xNe,"A",{href:!0});var Qwt=s(UQ);Atr=r(Qwt,"LxmertForQuestionAnswering"),Qwt.forEach(t),Ltr=r(xNe," (LXMERT model)"),xNe.forEach(t),ytr=i(X),QT=n(X,"LI",{});var $Ne=s(QT);kbe=n($Ne,"STRONG",{});var Wwt=s(kbe);xtr=r(Wwt,"mbart"),Wwt.forEach(t),$tr=r($Ne," \u2014 "),JQ=n($Ne,"A",{href:!0});var Hwt=s(JQ);ktr=r(Hwt,"MBartForQuestionAnswering"),Hwt.forEach(t),Str=r($Ne," (mBART model)"),$Ne.forEach(t),Rtr=i(X),WT=n(X,"LI",{});var kNe=s(WT);Sbe=n(kNe,"STRONG",{});var Uwt=s(Sbe);Ptr=r(Uwt,"megatron-bert"),Uwt.forEach(t),Btr=r(kNe," \u2014 "),YQ=n(kNe,"A",{href:!0});var Jwt=s(YQ);Ntr=r(Jwt,"MegatronBertForQuestionAnswering"),Jwt.forEach(t),Itr=r(kNe," (Megatron-BERT model)"),kNe.forEach(t),qtr=i(X),HT=n(X,"LI",{});var SNe=s(HT);Rbe=n(SNe,"STRONG",{});var Ywt=s(Rbe);jtr=r(Ywt,"mobilebert"),Ywt.forEach(t),Dtr=r(SNe," \u2014 "),KQ=n(SNe,"A",{href:!0});var Kwt=s(KQ);Gtr=r(Kwt,"MobileBertForQuestionAnswering"),Kwt.forEach(t),Otr=r(SNe," (MobileBERT model)"),SNe.forEach(t),Vtr=i(X),UT=n(X,"LI",{});var RNe=s(UT);Pbe=n(RNe,"STRONG",{});var Zwt=s(Pbe);Xtr=r(Zwt,"mpnet"),Zwt.forEach(t),ztr=r(RNe," \u2014 "),ZQ=n(RNe,"A",{href:!0});var eAt=s(ZQ);Qtr=r(eAt,"MPNetForQuestionAnswering"),eAt.forEach(t),Wtr=r(RNe," (MPNet model)"),RNe.forEach(t),Htr=i(X),JT=n(X,"LI",{});var PNe=s(JT);Bbe=n(PNe,"STRONG",{});var oAt=s(Bbe);Utr=r(oAt,"mvp"),oAt.forEach(t),Jtr=r(PNe," \u2014 "),eW=n(PNe,"A",{href:!0});var rAt=s(eW);Ytr=r(rAt,"MvpForQuestionAnswering"),rAt.forEach(t),Ktr=r(PNe," (MVP model)"),PNe.forEach(t),Ztr=i(X),YT=n(X,"LI",{});var BNe=s(YT);Nbe=n(BNe,"STRONG",{});var tAt=s(Nbe);ear=r(tAt,"nezha"),tAt.forEach(t),oar=r(BNe," \u2014 "),oW=n(BNe,"A",{href:!0});var aAt=s(oW);rar=r(aAt,"NezhaForQuestionAnswering"),aAt.forEach(t),tar=r(BNe," (Nezha model)"),BNe.forEach(t),aar=i(X),KT=n(X,"LI",{});var NNe=s(KT);Ibe=n(NNe,"STRONG",{});var nAt=s(Ibe);nar=r(nAt,"nystromformer"),nAt.forEach(t),sar=r(NNe," \u2014 "),rW=n(NNe,"A",{href:!0});var sAt=s(rW);lar=r(sAt,"NystromformerForQuestionAnswering"),sAt.forEach(t),iar=r(NNe," (Nystr\xF6mformer model)"),NNe.forEach(t),dar=i(X),ZT=n(X,"LI",{});var INe=s(ZT);qbe=n(INe,"STRONG",{});var lAt=s(qbe);car=r(lAt,"qdqbert"),lAt.forEach(t),mar=r(INe," \u2014 "),tW=n(INe,"A",{href:!0});var iAt=s(tW);far=r(iAt,"QDQBertForQuestionAnswering"),iAt.forEach(t),gar=r(INe," (QDQBert model)"),INe.forEach(t),har=i(X),eM=n(X,"LI",{});var qNe=s(eM);jbe=n(qNe,"STRONG",{});var dAt=s(jbe);uar=r(dAt,"reformer"),dAt.forEach(t),par=r(qNe," \u2014 "),aW=n(qNe,"A",{href:!0});var cAt=s(aW);_ar=r(cAt,"ReformerForQuestionAnswering"),cAt.forEach(t),bar=r(qNe," (Reformer model)"),qNe.forEach(t),Far=i(X),oM=n(X,"LI",{});var jNe=s(oM);Dbe=n(jNe,"STRONG",{});var mAt=s(Dbe);Tar=r(mAt,"rembert"),mAt.forEach(t),Mar=r(jNe," \u2014 "),nW=n(jNe,"A",{href:!0});var fAt=s(nW);Ear=r(fAt,"RemBertForQuestionAnswering"),fAt.forEach(t),Car=r(jNe," (RemBERT model)"),jNe.forEach(t),war=i(X),rM=n(X,"LI",{});var DNe=s(rM);Gbe=n(DNe,"STRONG",{});var gAt=s(Gbe);Aar=r(gAt,"roberta"),gAt.forEach(t),Lar=r(DNe," \u2014 "),sW=n(DNe,"A",{href:!0});var hAt=s(sW);yar=r(hAt,"RobertaForQuestionAnswering"),hAt.forEach(t),xar=r(DNe," (RoBERTa model)"),DNe.forEach(t),$ar=i(X),tM=n(X,"LI",{});var GNe=s(tM);Obe=n(GNe,"STRONG",{});var uAt=s(Obe);kar=r(uAt,"roformer"),uAt.forEach(t),Sar=r(GNe," \u2014 "),lW=n(GNe,"A",{href:!0});var pAt=s(lW);Rar=r(pAt,"RoFormerForQuestionAnswering"),pAt.forEach(t),Par=r(GNe," (RoFormer model)"),GNe.forEach(t),Bar=i(X),aM=n(X,"LI",{});var ONe=s(aM);Vbe=n(ONe,"STRONG",{});var _At=s(Vbe);Nar=r(_At,"splinter"),_At.forEach(t),Iar=r(ONe," \u2014 "),iW=n(ONe,"A",{href:!0});var bAt=s(iW);qar=r(bAt,"SplinterForQuestionAnswering"),bAt.forEach(t),jar=r(ONe," (Splinter model)"),ONe.forEach(t),Dar=i(X),nM=n(X,"LI",{});var VNe=s(nM);Xbe=n(VNe,"STRONG",{});var vAt=s(Xbe);Gar=r(vAt,"squeezebert"),vAt.forEach(t),Oar=r(VNe," \u2014 "),dW=n(VNe,"A",{href:!0});var FAt=s(dW);Var=r(FAt,"SqueezeBertForQuestionAnswering"),FAt.forEach(t),Xar=r(VNe," (SqueezeBERT model)"),VNe.forEach(t),zar=i(X),sM=n(X,"LI",{});var XNe=s(sM);zbe=n(XNe,"STRONG",{});var TAt=s(zbe);Qar=r(TAt,"xlm"),TAt.forEach(t),War=r(XNe," \u2014 "),cW=n(XNe,"A",{href:!0});var MAt=s(cW);Har=r(MAt,"XLMForQuestionAnsweringSimple"),MAt.forEach(t),Uar=r(XNe," (XLM model)"),XNe.forEach(t),Jar=i(X),lM=n(X,"LI",{});var zNe=s(lM);Qbe=n(zNe,"STRONG",{});var EAt=s(Qbe);Yar=r(EAt,"xlm-roberta"),EAt.forEach(t),Kar=r(zNe," \u2014 "),mW=n(zNe,"A",{href:!0});var CAt=s(mW);Zar=r(CAt,"XLMRobertaForQuestionAnswering"),CAt.forEach(t),enr=r(zNe," (XLM-RoBERTa model)"),zNe.forEach(t),onr=i(X),iM=n(X,"LI",{});var QNe=s(iM);Wbe=n(QNe,"STRONG",{});var wAt=s(Wbe);rnr=r(wAt,"xlm-roberta-xl"),wAt.forEach(t),tnr=r(QNe," \u2014 "),fW=n(QNe,"A",{href:!0});var AAt=s(fW);anr=r(AAt,"XLMRobertaXLForQuestionAnswering"),AAt.forEach(t),nnr=r(QNe," (XLM-RoBERTa-XL model)"),QNe.forEach(t),snr=i(X),dM=n(X,"LI",{});var WNe=s(dM);Hbe=n(WNe,"STRONG",{});var LAt=s(Hbe);lnr=r(LAt,"xlnet"),LAt.forEach(t),inr=r(WNe," \u2014 "),gW=n(WNe,"A",{href:!0});var yAt=s(gW);dnr=r(yAt,"XLNetForQuestionAnsweringSimple"),yAt.forEach(t),cnr=r(WNe," (XLNet model)"),WNe.forEach(t),mnr=i(X),cM=n(X,"LI",{});var HNe=s(cM);Ube=n(HNe,"STRONG",{});var xAt=s(Ube);fnr=r(xAt,"yoso"),xAt.forEach(t),gnr=r(HNe," \u2014 "),hW=n(HNe,"A",{href:!0});var $At=s(hW);hnr=r($At,"YosoForQuestionAnswering"),$At.forEach(t),unr=r(HNe," (YOSO model)"),HNe.forEach(t),X.forEach(t),pnr=i(_a),mM=n(_a,"P",{});var UNe=s(mM);_nr=r(UNe,"The model is set in evaluation mode by default using "),Jbe=n(UNe,"CODE",{});var kAt=s(Jbe);bnr=r(kAt,"model.eval()"),kAt.forEach(t),vnr=r(UNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(UNe,"CODE",{});var SAt=s(Ybe);Fnr=r(SAt,"model.train()"),SAt.forEach(t),UNe.forEach(t),Tnr=i(_a),T(fM.$$.fragment,_a),_a.forEach(t),fl.forEach(t),VXe=i(m),bd=n(m,"H2",{class:!0});var UQe=s(bd);gM=n(UQe,"A",{id:!0,class:!0,href:!0});var RAt=s(gM);Kbe=n(RAt,"SPAN",{});var PAt=s(Kbe);T(x8.$$.fragment,PAt),PAt.forEach(t),RAt.forEach(t),Mnr=i(UQe),Zbe=n(UQe,"SPAN",{});var BAt=s(Zbe);Enr=r(BAt,"AutoModelForTableQuestionAnswering"),BAt.forEach(t),UQe.forEach(t),XXe=i(m),Go=n(m,"DIV",{class:!0});var gl=s(Go);T($8.$$.fragment,gl),Cnr=i(gl),vd=n(gl,"P",{});var nte=s(vd);wnr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=n(nte,"A",{href:!0});var NAt=s(uW);Anr=r(NAt,"from_pretrained()"),NAt.forEach(t),Lnr=r(nte," class method or the "),pW=n(nte,"A",{href:!0});var IAt=s(pW);ynr=r(IAt,"from_config()"),IAt.forEach(t),xnr=r(nte,` class
method.`),nte.forEach(t),$nr=i(gl),k8=n(gl,"P",{});var JQe=s(k8);knr=r(JQe,"This class cannot be instantiated directly using "),eve=n(JQe,"CODE",{});var qAt=s(eve);Snr=r(qAt,"__init__()"),qAt.forEach(t),Rnr=r(JQe," (throws an error)."),JQe.forEach(t),Pnr=i(gl),bt=n(gl,"DIV",{class:!0});var k7=s(bt);T(S8.$$.fragment,k7),Bnr=i(k7),ove=n(k7,"P",{});var jAt=s(ove);Nnr=r(jAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jAt.forEach(t),Inr=i(k7),Fd=n(k7,"P",{});var ste=s(Fd);qnr=r(ste,`Note:
Loading a model from its configuration file does `),rve=n(ste,"STRONG",{});var DAt=s(rve);jnr=r(DAt,"not"),DAt.forEach(t),Dnr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(ste,"A",{href:!0});var GAt=s(_W);Gnr=r(GAt,"from_pretrained()"),GAt.forEach(t),Onr=r(ste," to load the model weights."),ste.forEach(t),Vnr=i(k7),T(hM.$$.fragment,k7),k7.forEach(t),Xnr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(R8.$$.fragment,ba),znr=i(ba),tve=n(ba,"P",{});var OAt=s(tve);Qnr=r(OAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OAt.forEach(t),Wnr=i(ba),Qa=n(ba,"P",{});var S7=s(Qa);Hnr=r(S7,"The model class to instantiate is selected based on the "),ave=n(S7,"CODE",{});var VAt=s(ave);Unr=r(VAt,"model_type"),VAt.forEach(t),Jnr=r(S7,` property of the config object (either
passed as an argument or loaded from `),nve=n(S7,"CODE",{});var XAt=s(nve);Ynr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),Knr=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(S7,"CODE",{});var zAt=s(sve);Znr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),esr=r(S7,":"),S7.forEach(t),osr=i(ba),lve=n(ba,"UL",{});var QAt=s(lve);uM=n(QAt,"LI",{});var JNe=s(uM);ive=n(JNe,"STRONG",{});var WAt=s(ive);rsr=r(WAt,"tapas"),WAt.forEach(t),tsr=r(JNe," \u2014 "),bW=n(JNe,"A",{href:!0});var HAt=s(bW);asr=r(HAt,"TapasForQuestionAnswering"),HAt.forEach(t),nsr=r(JNe," (TAPAS model)"),JNe.forEach(t),QAt.forEach(t),ssr=i(ba),pM=n(ba,"P",{});var YNe=s(pM);lsr=r(YNe,"The model is set in evaluation mode by default using "),dve=n(YNe,"CODE",{});var UAt=s(dve);isr=r(UAt,"model.eval()"),UAt.forEach(t),dsr=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cve=n(YNe,"CODE",{});var JAt=s(cve);csr=r(JAt,"model.train()"),JAt.forEach(t),YNe.forEach(t),msr=i(ba),T(_M.$$.fragment,ba),ba.forEach(t),gl.forEach(t),zXe=i(m),Td=n(m,"H2",{class:!0});var YQe=s(Td);bM=n(YQe,"A",{id:!0,class:!0,href:!0});var YAt=s(bM);mve=n(YAt,"SPAN",{});var KAt=s(mve);T(P8.$$.fragment,KAt),KAt.forEach(t),YAt.forEach(t),fsr=i(YQe),fve=n(YQe,"SPAN",{});var ZAt=s(fve);gsr=r(ZAt,"AutoModelForImageClassification"),ZAt.forEach(t),YQe.forEach(t),QXe=i(m),Oo=n(m,"DIV",{class:!0});var hl=s(Oo);T(B8.$$.fragment,hl),hsr=i(hl),Md=n(hl,"P",{});var lte=s(Md);usr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vW=n(lte,"A",{href:!0});var e6t=s(vW);psr=r(e6t,"from_pretrained()"),e6t.forEach(t),_sr=r(lte," class method or the "),FW=n(lte,"A",{href:!0});var o6t=s(FW);bsr=r(o6t,"from_config()"),o6t.forEach(t),vsr=r(lte,` class
method.`),lte.forEach(t),Fsr=i(hl),N8=n(hl,"P",{});var KQe=s(N8);Tsr=r(KQe,"This class cannot be instantiated directly using "),gve=n(KQe,"CODE",{});var r6t=s(gve);Msr=r(r6t,"__init__()"),r6t.forEach(t),Esr=r(KQe," (throws an error)."),KQe.forEach(t),Csr=i(hl),vt=n(hl,"DIV",{class:!0});var R7=s(vt);T(I8.$$.fragment,R7),wsr=i(R7),hve=n(R7,"P",{});var t6t=s(hve);Asr=r(t6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t6t.forEach(t),Lsr=i(R7),Ed=n(R7,"P",{});var ite=s(Ed);ysr=r(ite,`Note:
Loading a model from its configuration file does `),uve=n(ite,"STRONG",{});var a6t=s(uve);xsr=r(a6t,"not"),a6t.forEach(t),$sr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(ite,"A",{href:!0});var n6t=s(TW);ksr=r(n6t,"from_pretrained()"),n6t.forEach(t),Ssr=r(ite," to load the model weights."),ite.forEach(t),Rsr=i(R7),T(vM.$$.fragment,R7),R7.forEach(t),Psr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(q8.$$.fragment,va),Bsr=i(va),pve=n(va,"P",{});var s6t=s(pve);Nsr=r(s6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s6t.forEach(t),Isr=i(va),Wa=n(va,"P",{});var P7=s(Wa);qsr=r(P7,"The model class to instantiate is selected based on the "),_ve=n(P7,"CODE",{});var l6t=s(_ve);jsr=r(l6t,"model_type"),l6t.forEach(t),Dsr=r(P7,` property of the config object (either
passed as an argument or loaded from `),bve=n(P7,"CODE",{});var i6t=s(bve);Gsr=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),Osr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(P7,"CODE",{});var d6t=s(vve);Vsr=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),Xsr=r(P7,":"),P7.forEach(t),zsr=i(va),ve=n(va,"UL",{});var Te=s(ve);FM=n(Te,"LI",{});var KNe=s(FM);Fve=n(KNe,"STRONG",{});var c6t=s(Fve);Qsr=r(c6t,"beit"),c6t.forEach(t),Wsr=r(KNe," \u2014 "),MW=n(KNe,"A",{href:!0});var m6t=s(MW);Hsr=r(m6t,"BeitForImageClassification"),m6t.forEach(t),Usr=r(KNe," (BEiT model)"),KNe.forEach(t),Jsr=i(Te),TM=n(Te,"LI",{});var ZNe=s(TM);Tve=n(ZNe,"STRONG",{});var f6t=s(Tve);Ysr=r(f6t,"convnext"),f6t.forEach(t),Ksr=r(ZNe," \u2014 "),EW=n(ZNe,"A",{href:!0});var g6t=s(EW);Zsr=r(g6t,"ConvNextForImageClassification"),g6t.forEach(t),elr=r(ZNe," (ConvNeXT model)"),ZNe.forEach(t),olr=i(Te),MM=n(Te,"LI",{});var eIe=s(MM);Mve=n(eIe,"STRONG",{});var h6t=s(Mve);rlr=r(h6t,"cvt"),h6t.forEach(t),tlr=r(eIe," \u2014 "),CW=n(eIe,"A",{href:!0});var u6t=s(CW);alr=r(u6t,"CvtForImageClassification"),u6t.forEach(t),nlr=r(eIe," (CvT model)"),eIe.forEach(t),slr=i(Te),EM=n(Te,"LI",{});var oIe=s(EM);Eve=n(oIe,"STRONG",{});var p6t=s(Eve);llr=r(p6t,"data2vec-vision"),p6t.forEach(t),ilr=r(oIe," \u2014 "),wW=n(oIe,"A",{href:!0});var _6t=s(wW);dlr=r(_6t,"Data2VecVisionForImageClassification"),_6t.forEach(t),clr=r(oIe," (Data2VecVision model)"),oIe.forEach(t),mlr=i(Te),Us=n(Te,"LI",{});var BS=s(Us);Cve=n(BS,"STRONG",{});var b6t=s(Cve);flr=r(b6t,"deit"),b6t.forEach(t),glr=r(BS," \u2014 "),AW=n(BS,"A",{href:!0});var v6t=s(AW);hlr=r(v6t,"DeiTForImageClassification"),v6t.forEach(t),ulr=r(BS," or "),LW=n(BS,"A",{href:!0});var F6t=s(LW);plr=r(F6t,"DeiTForImageClassificationWithTeacher"),F6t.forEach(t),_lr=r(BS," (DeiT model)"),BS.forEach(t),blr=i(Te),CM=n(Te,"LI",{});var rIe=s(CM);wve=n(rIe,"STRONG",{});var T6t=s(wve);vlr=r(T6t,"imagegpt"),T6t.forEach(t),Flr=r(rIe," \u2014 "),yW=n(rIe,"A",{href:!0});var M6t=s(yW);Tlr=r(M6t,"ImageGPTForImageClassification"),M6t.forEach(t),Mlr=r(rIe," (ImageGPT model)"),rIe.forEach(t),Elr=i(Te),Js=n(Te,"LI",{});var NS=s(Js);Ave=n(NS,"STRONG",{});var E6t=s(Ave);Clr=r(E6t,"levit"),E6t.forEach(t),wlr=r(NS," \u2014 "),xW=n(NS,"A",{href:!0});var C6t=s(xW);Alr=r(C6t,"LevitForImageClassification"),C6t.forEach(t),Llr=r(NS," or "),$W=n(NS,"A",{href:!0});var w6t=s($W);ylr=r(w6t,"LevitForImageClassificationWithTeacher"),w6t.forEach(t),xlr=r(NS," (LeViT model)"),NS.forEach(t),$lr=i(Te),wM=n(Te,"LI",{});var tIe=s(wM);Lve=n(tIe,"STRONG",{});var A6t=s(Lve);klr=r(A6t,"mobilevit"),A6t.forEach(t),Slr=r(tIe," \u2014 "),kW=n(tIe,"A",{href:!0});var L6t=s(kW);Rlr=r(L6t,"MobileViTForImageClassification"),L6t.forEach(t),Plr=r(tIe," (MobileViT model)"),tIe.forEach(t),Blr=i(Te),Ft=n(Te,"LI",{});var Rm=s(Ft);yve=n(Rm,"STRONG",{});var y6t=s(yve);Nlr=r(y6t,"perceiver"),y6t.forEach(t),Ilr=r(Rm," \u2014 "),SW=n(Rm,"A",{href:!0});var x6t=s(SW);qlr=r(x6t,"PerceiverForImageClassificationLearned"),x6t.forEach(t),jlr=r(Rm," or "),RW=n(Rm,"A",{href:!0});var $6t=s(RW);Dlr=r($6t,"PerceiverForImageClassificationFourier"),$6t.forEach(t),Glr=r(Rm," or "),PW=n(Rm,"A",{href:!0});var k6t=s(PW);Olr=r(k6t,"PerceiverForImageClassificationConvProcessing"),k6t.forEach(t),Vlr=r(Rm," (Perceiver model)"),Rm.forEach(t),Xlr=i(Te),AM=n(Te,"LI",{});var aIe=s(AM);xve=n(aIe,"STRONG",{});var S6t=s(xve);zlr=r(S6t,"poolformer"),S6t.forEach(t),Qlr=r(aIe," \u2014 "),BW=n(aIe,"A",{href:!0});var R6t=s(BW);Wlr=r(R6t,"PoolFormerForImageClassification"),R6t.forEach(t),Hlr=r(aIe," (PoolFormer model)"),aIe.forEach(t),Ulr=i(Te),LM=n(Te,"LI",{});var nIe=s(LM);$ve=n(nIe,"STRONG",{});var P6t=s($ve);Jlr=r(P6t,"regnet"),P6t.forEach(t),Ylr=r(nIe," \u2014 "),NW=n(nIe,"A",{href:!0});var B6t=s(NW);Klr=r(B6t,"RegNetForImageClassification"),B6t.forEach(t),Zlr=r(nIe," (RegNet model)"),nIe.forEach(t),eir=i(Te),yM=n(Te,"LI",{});var sIe=s(yM);kve=n(sIe,"STRONG",{});var N6t=s(kve);oir=r(N6t,"resnet"),N6t.forEach(t),rir=r(sIe," \u2014 "),IW=n(sIe,"A",{href:!0});var I6t=s(IW);tir=r(I6t,"ResNetForImageClassification"),I6t.forEach(t),air=r(sIe," (ResNet model)"),sIe.forEach(t),nir=i(Te),xM=n(Te,"LI",{});var lIe=s(xM);Sve=n(lIe,"STRONG",{});var q6t=s(Sve);sir=r(q6t,"segformer"),q6t.forEach(t),lir=r(lIe," \u2014 "),qW=n(lIe,"A",{href:!0});var j6t=s(qW);iir=r(j6t,"SegformerForImageClassification"),j6t.forEach(t),dir=r(lIe," (SegFormer model)"),lIe.forEach(t),cir=i(Te),$M=n(Te,"LI",{});var iIe=s($M);Rve=n(iIe,"STRONG",{});var D6t=s(Rve);mir=r(D6t,"swin"),D6t.forEach(t),fir=r(iIe," \u2014 "),jW=n(iIe,"A",{href:!0});var G6t=s(jW);gir=r(G6t,"SwinForImageClassification"),G6t.forEach(t),hir=r(iIe," (Swin Transformer model)"),iIe.forEach(t),uir=i(Te),kM=n(Te,"LI",{});var dIe=s(kM);Pve=n(dIe,"STRONG",{});var O6t=s(Pve);pir=r(O6t,"van"),O6t.forEach(t),_ir=r(dIe," \u2014 "),DW=n(dIe,"A",{href:!0});var V6t=s(DW);bir=r(V6t,"VanForImageClassification"),V6t.forEach(t),vir=r(dIe," (VAN model)"),dIe.forEach(t),Fir=i(Te),SM=n(Te,"LI",{});var cIe=s(SM);Bve=n(cIe,"STRONG",{});var X6t=s(Bve);Tir=r(X6t,"vit"),X6t.forEach(t),Mir=r(cIe," \u2014 "),GW=n(cIe,"A",{href:!0});var z6t=s(GW);Eir=r(z6t,"ViTForImageClassification"),z6t.forEach(t),Cir=r(cIe," (ViT model)"),cIe.forEach(t),Te.forEach(t),wir=i(va),RM=n(va,"P",{});var mIe=s(RM);Air=r(mIe,"The model is set in evaluation mode by default using "),Nve=n(mIe,"CODE",{});var Q6t=s(Nve);Lir=r(Q6t,"model.eval()"),Q6t.forEach(t),yir=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ive=n(mIe,"CODE",{});var W6t=s(Ive);xir=r(W6t,"model.train()"),W6t.forEach(t),mIe.forEach(t),$ir=i(va),T(PM.$$.fragment,va),va.forEach(t),hl.forEach(t),WXe=i(m),Cd=n(m,"H2",{class:!0});var ZQe=s(Cd);BM=n(ZQe,"A",{id:!0,class:!0,href:!0});var H6t=s(BM);qve=n(H6t,"SPAN",{});var U6t=s(qve);T(j8.$$.fragment,U6t),U6t.forEach(t),H6t.forEach(t),kir=i(ZQe),jve=n(ZQe,"SPAN",{});var J6t=s(jve);Sir=r(J6t,"AutoModelForVision2Seq"),J6t.forEach(t),ZQe.forEach(t),HXe=i(m),Vo=n(m,"DIV",{class:!0});var ul=s(Vo);T(D8.$$.fragment,ul),Rir=i(ul),wd=n(ul,"P",{});var dte=s(wd);Pir=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OW=n(dte,"A",{href:!0});var Y6t=s(OW);Bir=r(Y6t,"from_pretrained()"),Y6t.forEach(t),Nir=r(dte," class method or the "),VW=n(dte,"A",{href:!0});var K6t=s(VW);Iir=r(K6t,"from_config()"),K6t.forEach(t),qir=r(dte,` class
method.`),dte.forEach(t),jir=i(ul),G8=n(ul,"P",{});var eWe=s(G8);Dir=r(eWe,"This class cannot be instantiated directly using "),Dve=n(eWe,"CODE",{});var Z6t=s(Dve);Gir=r(Z6t,"__init__()"),Z6t.forEach(t),Oir=r(eWe," (throws an error)."),eWe.forEach(t),Vir=i(ul),Tt=n(ul,"DIV",{class:!0});var B7=s(Tt);T(O8.$$.fragment,B7),Xir=i(B7),Gve=n(B7,"P",{});var e7t=s(Gve);zir=r(e7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),e7t.forEach(t),Qir=i(B7),Ad=n(B7,"P",{});var cte=s(Ad);Wir=r(cte,`Note:
Loading a model from its configuration file does `),Ove=n(cte,"STRONG",{});var o7t=s(Ove);Hir=r(o7t,"not"),o7t.forEach(t),Uir=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(cte,"A",{href:!0});var r7t=s(XW);Jir=r(r7t,"from_pretrained()"),r7t.forEach(t),Yir=r(cte," to load the model weights."),cte.forEach(t),Kir=i(B7),T(NM.$$.fragment,B7),B7.forEach(t),Zir=i(ul),co=n(ul,"DIV",{class:!0});var Fa=s(co);T(V8.$$.fragment,Fa),edr=i(Fa),Vve=n(Fa,"P",{});var t7t=s(Vve);odr=r(t7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),t7t.forEach(t),rdr=i(Fa),Ha=n(Fa,"P",{});var N7=s(Ha);tdr=r(N7,"The model class to instantiate is selected based on the "),Xve=n(N7,"CODE",{});var a7t=s(Xve);adr=r(a7t,"model_type"),a7t.forEach(t),ndr=r(N7,` property of the config object (either
passed as an argument or loaded from `),zve=n(N7,"CODE",{});var n7t=s(zve);sdr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),ldr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(N7,"CODE",{});var s7t=s(Qve);idr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),ddr=r(N7,":"),N7.forEach(t),cdr=i(Fa),Wve=n(Fa,"UL",{});var l7t=s(Wve);IM=n(l7t,"LI",{});var fIe=s(IM);Hve=n(fIe,"STRONG",{});var i7t=s(Hve);mdr=r(i7t,"vision-encoder-decoder"),i7t.forEach(t),fdr=r(fIe," \u2014 "),zW=n(fIe,"A",{href:!0});var d7t=s(zW);gdr=r(d7t,"VisionEncoderDecoderModel"),d7t.forEach(t),hdr=r(fIe," (Vision Encoder decoder model)"),fIe.forEach(t),l7t.forEach(t),udr=i(Fa),qM=n(Fa,"P",{});var gIe=s(qM);pdr=r(gIe,"The model is set in evaluation mode by default using "),Uve=n(gIe,"CODE",{});var c7t=s(Uve);_dr=r(c7t,"model.eval()"),c7t.forEach(t),bdr=r(gIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jve=n(gIe,"CODE",{});var m7t=s(Jve);vdr=r(m7t,"model.train()"),m7t.forEach(t),gIe.forEach(t),Fdr=i(Fa),T(jM.$$.fragment,Fa),Fa.forEach(t),ul.forEach(t),UXe=i(m),Ld=n(m,"H2",{class:!0});var oWe=s(Ld);DM=n(oWe,"A",{id:!0,class:!0,href:!0});var f7t=s(DM);Yve=n(f7t,"SPAN",{});var g7t=s(Yve);T(X8.$$.fragment,g7t),g7t.forEach(t),f7t.forEach(t),Tdr=i(oWe),Kve=n(oWe,"SPAN",{});var h7t=s(Kve);Mdr=r(h7t,"AutoModelForVisualQuestionAnswering"),h7t.forEach(t),oWe.forEach(t),JXe=i(m),Xo=n(m,"DIV",{class:!0});var pl=s(Xo);T(z8.$$.fragment,pl),Edr=i(pl),yd=n(pl,"P",{});var mte=s(yd);Cdr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),QW=n(mte,"A",{href:!0});var u7t=s(QW);wdr=r(u7t,"from_pretrained()"),u7t.forEach(t),Adr=r(mte," class method or the "),WW=n(mte,"A",{href:!0});var p7t=s(WW);Ldr=r(p7t,"from_config()"),p7t.forEach(t),ydr=r(mte,` class
method.`),mte.forEach(t),xdr=i(pl),Q8=n(pl,"P",{});var rWe=s(Q8);$dr=r(rWe,"This class cannot be instantiated directly using "),Zve=n(rWe,"CODE",{});var _7t=s(Zve);kdr=r(_7t,"__init__()"),_7t.forEach(t),Sdr=r(rWe," (throws an error)."),rWe.forEach(t),Rdr=i(pl),Mt=n(pl,"DIV",{class:!0});var I7=s(Mt);T(W8.$$.fragment,I7),Pdr=i(I7),e1e=n(I7,"P",{});var b7t=s(e1e);Bdr=r(b7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),b7t.forEach(t),Ndr=i(I7),xd=n(I7,"P",{});var fte=s(xd);Idr=r(fte,`Note:
Loading a model from its configuration file does `),o1e=n(fte,"STRONG",{});var v7t=s(o1e);qdr=r(v7t,"not"),v7t.forEach(t),jdr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(fte,"A",{href:!0});var F7t=s(HW);Ddr=r(F7t,"from_pretrained()"),F7t.forEach(t),Gdr=r(fte," to load the model weights."),fte.forEach(t),Odr=i(I7),T(GM.$$.fragment,I7),I7.forEach(t),Vdr=i(pl),mo=n(pl,"DIV",{class:!0});var Ta=s(mo);T(H8.$$.fragment,Ta),Xdr=i(Ta),r1e=n(Ta,"P",{});var T7t=s(r1e);zdr=r(T7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),T7t.forEach(t),Qdr=i(Ta),Ua=n(Ta,"P",{});var q7=s(Ua);Wdr=r(q7,"The model class to instantiate is selected based on the "),t1e=n(q7,"CODE",{});var M7t=s(t1e);Hdr=r(M7t,"model_type"),M7t.forEach(t),Udr=r(q7,` property of the config object (either
passed as an argument or loaded from `),a1e=n(q7,"CODE",{});var E7t=s(a1e);Jdr=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),Ydr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(q7,"CODE",{});var C7t=s(n1e);Kdr=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),Zdr=r(q7,":"),q7.forEach(t),ecr=i(Ta),s1e=n(Ta,"UL",{});var w7t=s(s1e);OM=n(w7t,"LI",{});var hIe=s(OM);l1e=n(hIe,"STRONG",{});var A7t=s(l1e);ocr=r(A7t,"vilt"),A7t.forEach(t),rcr=r(hIe," \u2014 "),UW=n(hIe,"A",{href:!0});var L7t=s(UW);tcr=r(L7t,"ViltForQuestionAnswering"),L7t.forEach(t),acr=r(hIe," (ViLT model)"),hIe.forEach(t),w7t.forEach(t),ncr=i(Ta),VM=n(Ta,"P",{});var uIe=s(VM);scr=r(uIe,"The model is set in evaluation mode by default using "),i1e=n(uIe,"CODE",{});var y7t=s(i1e);lcr=r(y7t,"model.eval()"),y7t.forEach(t),icr=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=n(uIe,"CODE",{});var x7t=s(d1e);dcr=r(x7t,"model.train()"),x7t.forEach(t),uIe.forEach(t),ccr=i(Ta),T(XM.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),YXe=i(m),$d=n(m,"H2",{class:!0});var tWe=s($d);zM=n(tWe,"A",{id:!0,class:!0,href:!0});var $7t=s(zM);c1e=n($7t,"SPAN",{});var k7t=s(c1e);T(U8.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),mcr=i(tWe),m1e=n(tWe,"SPAN",{});var S7t=s(m1e);fcr=r(S7t,"AutoModelForAudioClassification"),S7t.forEach(t),tWe.forEach(t),KXe=i(m),zo=n(m,"DIV",{class:!0});var _l=s(zo);T(J8.$$.fragment,_l),gcr=i(_l),kd=n(_l,"P",{});var gte=s(kd);hcr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),JW=n(gte,"A",{href:!0});var R7t=s(JW);ucr=r(R7t,"from_pretrained()"),R7t.forEach(t),pcr=r(gte," class method or the "),YW=n(gte,"A",{href:!0});var P7t=s(YW);_cr=r(P7t,"from_config()"),P7t.forEach(t),bcr=r(gte,` class
method.`),gte.forEach(t),vcr=i(_l),Y8=n(_l,"P",{});var aWe=s(Y8);Fcr=r(aWe,"This class cannot be instantiated directly using "),f1e=n(aWe,"CODE",{});var B7t=s(f1e);Tcr=r(B7t,"__init__()"),B7t.forEach(t),Mcr=r(aWe," (throws an error)."),aWe.forEach(t),Ecr=i(_l),Et=n(_l,"DIV",{class:!0});var j7=s(Et);T(K8.$$.fragment,j7),Ccr=i(j7),g1e=n(j7,"P",{});var N7t=s(g1e);wcr=r(N7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),N7t.forEach(t),Acr=i(j7),Sd=n(j7,"P",{});var hte=s(Sd);Lcr=r(hte,`Note:
Loading a model from its configuration file does `),h1e=n(hte,"STRONG",{});var I7t=s(h1e);ycr=r(I7t,"not"),I7t.forEach(t),xcr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(hte,"A",{href:!0});var q7t=s(KW);$cr=r(q7t,"from_pretrained()"),q7t.forEach(t),kcr=r(hte," to load the model weights."),hte.forEach(t),Scr=i(j7),T(QM.$$.fragment,j7),j7.forEach(t),Rcr=i(_l),fo=n(_l,"DIV",{class:!0});var Ma=s(fo);T(Z8.$$.fragment,Ma),Pcr=i(Ma),u1e=n(Ma,"P",{});var j7t=s(u1e);Bcr=r(j7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),j7t.forEach(t),Ncr=i(Ma),Ja=n(Ma,"P",{});var D7=s(Ja);Icr=r(D7,"The model class to instantiate is selected based on the "),p1e=n(D7,"CODE",{});var D7t=s(p1e);qcr=r(D7t,"model_type"),D7t.forEach(t),jcr=r(D7,` property of the config object (either
passed as an argument or loaded from `),_1e=n(D7,"CODE",{});var G7t=s(_1e);Dcr=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),Gcr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(D7,"CODE",{});var O7t=s(b1e);Ocr=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),Vcr=r(D7,":"),D7.forEach(t),Xcr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);WM=n(ze,"LI",{});var pIe=s(WM);v1e=n(pIe,"STRONG",{});var V7t=s(v1e);zcr=r(V7t,"data2vec-audio"),V7t.forEach(t),Qcr=r(pIe," \u2014 "),ZW=n(pIe,"A",{href:!0});var X7t=s(ZW);Wcr=r(X7t,"Data2VecAudioForSequenceClassification"),X7t.forEach(t),Hcr=r(pIe," (Data2VecAudio model)"),pIe.forEach(t),Ucr=i(ze),HM=n(ze,"LI",{});var _Ie=s(HM);F1e=n(_Ie,"STRONG",{});var z7t=s(F1e);Jcr=r(z7t,"hubert"),z7t.forEach(t),Ycr=r(_Ie," \u2014 "),eH=n(_Ie,"A",{href:!0});var Q7t=s(eH);Kcr=r(Q7t,"HubertForSequenceClassification"),Q7t.forEach(t),Zcr=r(_Ie," (Hubert model)"),_Ie.forEach(t),emr=i(ze),UM=n(ze,"LI",{});var bIe=s(UM);T1e=n(bIe,"STRONG",{});var W7t=s(T1e);omr=r(W7t,"sew"),W7t.forEach(t),rmr=r(bIe," \u2014 "),oH=n(bIe,"A",{href:!0});var H7t=s(oH);tmr=r(H7t,"SEWForSequenceClassification"),H7t.forEach(t),amr=r(bIe," (SEW model)"),bIe.forEach(t),nmr=i(ze),JM=n(ze,"LI",{});var vIe=s(JM);M1e=n(vIe,"STRONG",{});var U7t=s(M1e);smr=r(U7t,"sew-d"),U7t.forEach(t),lmr=r(vIe," \u2014 "),rH=n(vIe,"A",{href:!0});var J7t=s(rH);imr=r(J7t,"SEWDForSequenceClassification"),J7t.forEach(t),dmr=r(vIe," (SEW-D model)"),vIe.forEach(t),cmr=i(ze),YM=n(ze,"LI",{});var FIe=s(YM);E1e=n(FIe,"STRONG",{});var Y7t=s(E1e);mmr=r(Y7t,"unispeech"),Y7t.forEach(t),fmr=r(FIe," \u2014 "),tH=n(FIe,"A",{href:!0});var K7t=s(tH);gmr=r(K7t,"UniSpeechForSequenceClassification"),K7t.forEach(t),hmr=r(FIe," (UniSpeech model)"),FIe.forEach(t),umr=i(ze),KM=n(ze,"LI",{});var TIe=s(KM);C1e=n(TIe,"STRONG",{});var Z7t=s(C1e);pmr=r(Z7t,"unispeech-sat"),Z7t.forEach(t),_mr=r(TIe," \u2014 "),aH=n(TIe,"A",{href:!0});var eLt=s(aH);bmr=r(eLt,"UniSpeechSatForSequenceClassification"),eLt.forEach(t),vmr=r(TIe," (UniSpeechSat model)"),TIe.forEach(t),Fmr=i(ze),ZM=n(ze,"LI",{});var MIe=s(ZM);w1e=n(MIe,"STRONG",{});var oLt=s(w1e);Tmr=r(oLt,"wav2vec2"),oLt.forEach(t),Mmr=r(MIe," \u2014 "),nH=n(MIe,"A",{href:!0});var rLt=s(nH);Emr=r(rLt,"Wav2Vec2ForSequenceClassification"),rLt.forEach(t),Cmr=r(MIe," (Wav2Vec2 model)"),MIe.forEach(t),wmr=i(ze),e4=n(ze,"LI",{});var EIe=s(e4);A1e=n(EIe,"STRONG",{});var tLt=s(A1e);Amr=r(tLt,"wav2vec2-conformer"),tLt.forEach(t),Lmr=r(EIe," \u2014 "),sH=n(EIe,"A",{href:!0});var aLt=s(sH);ymr=r(aLt,"Wav2Vec2ConformerForSequenceClassification"),aLt.forEach(t),xmr=r(EIe," (Wav2Vec2-Conformer model)"),EIe.forEach(t),$mr=i(ze),o4=n(ze,"LI",{});var CIe=s(o4);L1e=n(CIe,"STRONG",{});var nLt=s(L1e);kmr=r(nLt,"wavlm"),nLt.forEach(t),Smr=r(CIe," \u2014 "),lH=n(CIe,"A",{href:!0});var sLt=s(lH);Rmr=r(sLt,"WavLMForSequenceClassification"),sLt.forEach(t),Pmr=r(CIe," (WavLM model)"),CIe.forEach(t),ze.forEach(t),Bmr=i(Ma),r4=n(Ma,"P",{});var wIe=s(r4);Nmr=r(wIe,"The model is set in evaluation mode by default using "),y1e=n(wIe,"CODE",{});var lLt=s(y1e);Imr=r(lLt,"model.eval()"),lLt.forEach(t),qmr=r(wIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=n(wIe,"CODE",{});var iLt=s(x1e);jmr=r(iLt,"model.train()"),iLt.forEach(t),wIe.forEach(t),Dmr=i(Ma),T(t4.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),ZXe=i(m),Rd=n(m,"H2",{class:!0});var nWe=s(Rd);a4=n(nWe,"A",{id:!0,class:!0,href:!0});var dLt=s(a4);$1e=n(dLt,"SPAN",{});var cLt=s($1e);T(e9.$$.fragment,cLt),cLt.forEach(t),dLt.forEach(t),Gmr=i(nWe),k1e=n(nWe,"SPAN",{});var mLt=s(k1e);Omr=r(mLt,"AutoModelForAudioFrameClassification"),mLt.forEach(t),nWe.forEach(t),eze=i(m),Qo=n(m,"DIV",{class:!0});var bl=s(Qo);T(o9.$$.fragment,bl),Vmr=i(bl),Pd=n(bl,"P",{});var ute=s(Pd);Xmr=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iH=n(ute,"A",{href:!0});var fLt=s(iH);zmr=r(fLt,"from_pretrained()"),fLt.forEach(t),Qmr=r(ute," class method or the "),dH=n(ute,"A",{href:!0});var gLt=s(dH);Wmr=r(gLt,"from_config()"),gLt.forEach(t),Hmr=r(ute,` class
method.`),ute.forEach(t),Umr=i(bl),r9=n(bl,"P",{});var sWe=s(r9);Jmr=r(sWe,"This class cannot be instantiated directly using "),S1e=n(sWe,"CODE",{});var hLt=s(S1e);Ymr=r(hLt,"__init__()"),hLt.forEach(t),Kmr=r(sWe," (throws an error)."),sWe.forEach(t),Zmr=i(bl),Ct=n(bl,"DIV",{class:!0});var G7=s(Ct);T(t9.$$.fragment,G7),efr=i(G7),R1e=n(G7,"P",{});var uLt=s(R1e);ofr=r(uLt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),uLt.forEach(t),rfr=i(G7),Bd=n(G7,"P",{});var pte=s(Bd);tfr=r(pte,`Note:
Loading a model from its configuration file does `),P1e=n(pte,"STRONG",{});var pLt=s(P1e);afr=r(pLt,"not"),pLt.forEach(t),nfr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(pte,"A",{href:!0});var _Lt=s(cH);sfr=r(_Lt,"from_pretrained()"),_Lt.forEach(t),lfr=r(pte," to load the model weights."),pte.forEach(t),ifr=i(G7),T(n4.$$.fragment,G7),G7.forEach(t),dfr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(a9.$$.fragment,Ea),cfr=i(Ea),B1e=n(Ea,"P",{});var bLt=s(B1e);mfr=r(bLt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bLt.forEach(t),ffr=i(Ea),Ya=n(Ea,"P",{});var O7=s(Ya);gfr=r(O7,"The model class to instantiate is selected based on the "),N1e=n(O7,"CODE",{});var vLt=s(N1e);hfr=r(vLt,"model_type"),vLt.forEach(t),ufr=r(O7,` property of the config object (either
passed as an argument or loaded from `),I1e=n(O7,"CODE",{});var FLt=s(I1e);pfr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),_fr=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=n(O7,"CODE",{});var TLt=s(q1e);bfr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),vfr=r(O7,":"),O7.forEach(t),Ffr=i(Ea),rt=n(Ea,"UL",{});var vl=s(rt);s4=n(vl,"LI",{});var AIe=s(s4);j1e=n(AIe,"STRONG",{});var MLt=s(j1e);Tfr=r(MLt,"data2vec-audio"),MLt.forEach(t),Mfr=r(AIe," \u2014 "),mH=n(AIe,"A",{href:!0});var ELt=s(mH);Efr=r(ELt,"Data2VecAudioForAudioFrameClassification"),ELt.forEach(t),Cfr=r(AIe," (Data2VecAudio model)"),AIe.forEach(t),wfr=i(vl),l4=n(vl,"LI",{});var LIe=s(l4);D1e=n(LIe,"STRONG",{});var CLt=s(D1e);Afr=r(CLt,"unispeech-sat"),CLt.forEach(t),Lfr=r(LIe," \u2014 "),fH=n(LIe,"A",{href:!0});var wLt=s(fH);yfr=r(wLt,"UniSpeechSatForAudioFrameClassification"),wLt.forEach(t),xfr=r(LIe," (UniSpeechSat model)"),LIe.forEach(t),$fr=i(vl),i4=n(vl,"LI",{});var yIe=s(i4);G1e=n(yIe,"STRONG",{});var ALt=s(G1e);kfr=r(ALt,"wav2vec2"),ALt.forEach(t),Sfr=r(yIe," \u2014 "),gH=n(yIe,"A",{href:!0});var LLt=s(gH);Rfr=r(LLt,"Wav2Vec2ForAudioFrameClassification"),LLt.forEach(t),Pfr=r(yIe," (Wav2Vec2 model)"),yIe.forEach(t),Bfr=i(vl),d4=n(vl,"LI",{});var xIe=s(d4);O1e=n(xIe,"STRONG",{});var yLt=s(O1e);Nfr=r(yLt,"wav2vec2-conformer"),yLt.forEach(t),Ifr=r(xIe," \u2014 "),hH=n(xIe,"A",{href:!0});var xLt=s(hH);qfr=r(xLt,"Wav2Vec2ConformerForAudioFrameClassification"),xLt.forEach(t),jfr=r(xIe," (Wav2Vec2-Conformer model)"),xIe.forEach(t),Dfr=i(vl),c4=n(vl,"LI",{});var $Ie=s(c4);V1e=n($Ie,"STRONG",{});var $Lt=s(V1e);Gfr=r($Lt,"wavlm"),$Lt.forEach(t),Ofr=r($Ie," \u2014 "),uH=n($Ie,"A",{href:!0});var kLt=s(uH);Vfr=r(kLt,"WavLMForAudioFrameClassification"),kLt.forEach(t),Xfr=r($Ie," (WavLM model)"),$Ie.forEach(t),vl.forEach(t),zfr=i(Ea),m4=n(Ea,"P",{});var kIe=s(m4);Qfr=r(kIe,"The model is set in evaluation mode by default using "),X1e=n(kIe,"CODE",{});var SLt=s(X1e);Wfr=r(SLt,"model.eval()"),SLt.forEach(t),Hfr=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(kIe,"CODE",{});var RLt=s(z1e);Ufr=r(RLt,"model.train()"),RLt.forEach(t),kIe.forEach(t),Jfr=i(Ea),T(f4.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),oze=i(m),Nd=n(m,"H2",{class:!0});var lWe=s(Nd);g4=n(lWe,"A",{id:!0,class:!0,href:!0});var PLt=s(g4);Q1e=n(PLt,"SPAN",{});var BLt=s(Q1e);T(n9.$$.fragment,BLt),BLt.forEach(t),PLt.forEach(t),Yfr=i(lWe),W1e=n(lWe,"SPAN",{});var NLt=s(W1e);Kfr=r(NLt,"AutoModelForCTC"),NLt.forEach(t),lWe.forEach(t),rze=i(m),Wo=n(m,"DIV",{class:!0});var Fl=s(Wo);T(s9.$$.fragment,Fl),Zfr=i(Fl),Id=n(Fl,"P",{});var _te=s(Id);egr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pH=n(_te,"A",{href:!0});var ILt=s(pH);ogr=r(ILt,"from_pretrained()"),ILt.forEach(t),rgr=r(_te," class method or the "),_H=n(_te,"A",{href:!0});var qLt=s(_H);tgr=r(qLt,"from_config()"),qLt.forEach(t),agr=r(_te,` class
method.`),_te.forEach(t),ngr=i(Fl),l9=n(Fl,"P",{});var iWe=s(l9);sgr=r(iWe,"This class cannot be instantiated directly using "),H1e=n(iWe,"CODE",{});var jLt=s(H1e);lgr=r(jLt,"__init__()"),jLt.forEach(t),igr=r(iWe," (throws an error)."),iWe.forEach(t),dgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var V7=s(wt);T(i9.$$.fragment,V7),cgr=i(V7),U1e=n(V7,"P",{});var DLt=s(U1e);mgr=r(DLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),DLt.forEach(t),fgr=i(V7),qd=n(V7,"P",{});var bte=s(qd);ggr=r(bte,`Note:
Loading a model from its configuration file does `),J1e=n(bte,"STRONG",{});var GLt=s(J1e);hgr=r(GLt,"not"),GLt.forEach(t),ugr=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(bte,"A",{href:!0});var OLt=s(bH);pgr=r(OLt,"from_pretrained()"),OLt.forEach(t),_gr=r(bte," to load the model weights."),bte.forEach(t),bgr=i(V7),T(h4.$$.fragment,V7),V7.forEach(t),vgr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(d9.$$.fragment,Ca),Fgr=i(Ca),Y1e=n(Ca,"P",{});var VLt=s(Y1e);Tgr=r(VLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),VLt.forEach(t),Mgr=i(Ca),Ka=n(Ca,"P",{});var X7=s(Ka);Egr=r(X7,"The model class to instantiate is selected based on the "),K1e=n(X7,"CODE",{});var XLt=s(K1e);Cgr=r(XLt,"model_type"),XLt.forEach(t),wgr=r(X7,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(X7,"CODE",{});var zLt=s(Z1e);Agr=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),Lgr=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(X7,"CODE",{});var QLt=s(eFe);ygr=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),xgr=r(X7,":"),X7.forEach(t),$gr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);u4=n(Be,"LI",{});var SIe=s(u4);oFe=n(SIe,"STRONG",{});var WLt=s(oFe);kgr=r(WLt,"data2vec-audio"),WLt.forEach(t),Sgr=r(SIe," \u2014 "),vH=n(SIe,"A",{href:!0});var HLt=s(vH);Rgr=r(HLt,"Data2VecAudioForCTC"),HLt.forEach(t),Pgr=r(SIe," (Data2VecAudio model)"),SIe.forEach(t),Bgr=i(Be),p4=n(Be,"LI",{});var RIe=s(p4);rFe=n(RIe,"STRONG",{});var ULt=s(rFe);Ngr=r(ULt,"hubert"),ULt.forEach(t),Igr=r(RIe," \u2014 "),FH=n(RIe,"A",{href:!0});var JLt=s(FH);qgr=r(JLt,"HubertForCTC"),JLt.forEach(t),jgr=r(RIe," (Hubert model)"),RIe.forEach(t),Dgr=i(Be),_4=n(Be,"LI",{});var PIe=s(_4);tFe=n(PIe,"STRONG",{});var YLt=s(tFe);Ggr=r(YLt,"mctct"),YLt.forEach(t),Ogr=r(PIe," \u2014 "),TH=n(PIe,"A",{href:!0});var KLt=s(TH);Vgr=r(KLt,"MCTCTForCTC"),KLt.forEach(t),Xgr=r(PIe," (M-CTC-T model)"),PIe.forEach(t),zgr=i(Be),b4=n(Be,"LI",{});var BIe=s(b4);aFe=n(BIe,"STRONG",{});var ZLt=s(aFe);Qgr=r(ZLt,"sew"),ZLt.forEach(t),Wgr=r(BIe," \u2014 "),MH=n(BIe,"A",{href:!0});var eyt=s(MH);Hgr=r(eyt,"SEWForCTC"),eyt.forEach(t),Ugr=r(BIe," (SEW model)"),BIe.forEach(t),Jgr=i(Be),v4=n(Be,"LI",{});var NIe=s(v4);nFe=n(NIe,"STRONG",{});var oyt=s(nFe);Ygr=r(oyt,"sew-d"),oyt.forEach(t),Kgr=r(NIe," \u2014 "),EH=n(NIe,"A",{href:!0});var ryt=s(EH);Zgr=r(ryt,"SEWDForCTC"),ryt.forEach(t),ehr=r(NIe," (SEW-D model)"),NIe.forEach(t),ohr=i(Be),F4=n(Be,"LI",{});var IIe=s(F4);sFe=n(IIe,"STRONG",{});var tyt=s(sFe);rhr=r(tyt,"unispeech"),tyt.forEach(t),thr=r(IIe," \u2014 "),CH=n(IIe,"A",{href:!0});var ayt=s(CH);ahr=r(ayt,"UniSpeechForCTC"),ayt.forEach(t),nhr=r(IIe," (UniSpeech model)"),IIe.forEach(t),shr=i(Be),T4=n(Be,"LI",{});var qIe=s(T4);lFe=n(qIe,"STRONG",{});var nyt=s(lFe);lhr=r(nyt,"unispeech-sat"),nyt.forEach(t),ihr=r(qIe," \u2014 "),wH=n(qIe,"A",{href:!0});var syt=s(wH);dhr=r(syt,"UniSpeechSatForCTC"),syt.forEach(t),chr=r(qIe," (UniSpeechSat model)"),qIe.forEach(t),mhr=i(Be),M4=n(Be,"LI",{});var jIe=s(M4);iFe=n(jIe,"STRONG",{});var lyt=s(iFe);fhr=r(lyt,"wav2vec2"),lyt.forEach(t),ghr=r(jIe," \u2014 "),AH=n(jIe,"A",{href:!0});var iyt=s(AH);hhr=r(iyt,"Wav2Vec2ForCTC"),iyt.forEach(t),uhr=r(jIe," (Wav2Vec2 model)"),jIe.forEach(t),phr=i(Be),E4=n(Be,"LI",{});var DIe=s(E4);dFe=n(DIe,"STRONG",{});var dyt=s(dFe);_hr=r(dyt,"wav2vec2-conformer"),dyt.forEach(t),bhr=r(DIe," \u2014 "),LH=n(DIe,"A",{href:!0});var cyt=s(LH);vhr=r(cyt,"Wav2Vec2ConformerForCTC"),cyt.forEach(t),Fhr=r(DIe," (Wav2Vec2-Conformer model)"),DIe.forEach(t),Thr=i(Be),C4=n(Be,"LI",{});var GIe=s(C4);cFe=n(GIe,"STRONG",{});var myt=s(cFe);Mhr=r(myt,"wavlm"),myt.forEach(t),Ehr=r(GIe," \u2014 "),yH=n(GIe,"A",{href:!0});var fyt=s(yH);Chr=r(fyt,"WavLMForCTC"),fyt.forEach(t),whr=r(GIe," (WavLM model)"),GIe.forEach(t),Be.forEach(t),Ahr=i(Ca),w4=n(Ca,"P",{});var OIe=s(w4);Lhr=r(OIe,"The model is set in evaluation mode by default using "),mFe=n(OIe,"CODE",{});var gyt=s(mFe);yhr=r(gyt,"model.eval()"),gyt.forEach(t),xhr=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fFe=n(OIe,"CODE",{});var hyt=s(fFe);$hr=r(hyt,"model.train()"),hyt.forEach(t),OIe.forEach(t),khr=i(Ca),T(A4.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),tze=i(m),jd=n(m,"H2",{class:!0});var dWe=s(jd);L4=n(dWe,"A",{id:!0,class:!0,href:!0});var uyt=s(L4);gFe=n(uyt,"SPAN",{});var pyt=s(gFe);T(c9.$$.fragment,pyt),pyt.forEach(t),uyt.forEach(t),Shr=i(dWe),hFe=n(dWe,"SPAN",{});var _yt=s(hFe);Rhr=r(_yt,"AutoModelForSpeechSeq2Seq"),_yt.forEach(t),dWe.forEach(t),aze=i(m),Ho=n(m,"DIV",{class:!0});var Tl=s(Ho);T(m9.$$.fragment,Tl),Phr=i(Tl),Dd=n(Tl,"P",{});var vte=s(Dd);Bhr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xH=n(vte,"A",{href:!0});var byt=s(xH);Nhr=r(byt,"from_pretrained()"),byt.forEach(t),Ihr=r(vte," class method or the "),$H=n(vte,"A",{href:!0});var vyt=s($H);qhr=r(vyt,"from_config()"),vyt.forEach(t),jhr=r(vte,` class
method.`),vte.forEach(t),Dhr=i(Tl),f9=n(Tl,"P",{});var cWe=s(f9);Ghr=r(cWe,"This class cannot be instantiated directly using "),uFe=n(cWe,"CODE",{});var Fyt=s(uFe);Ohr=r(Fyt,"__init__()"),Fyt.forEach(t),Vhr=r(cWe," (throws an error)."),cWe.forEach(t),Xhr=i(Tl),At=n(Tl,"DIV",{class:!0});var z7=s(At);T(g9.$$.fragment,z7),zhr=i(z7),pFe=n(z7,"P",{});var Tyt=s(pFe);Qhr=r(Tyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Tyt.forEach(t),Whr=i(z7),Gd=n(z7,"P",{});var Fte=s(Gd);Hhr=r(Fte,`Note:
Loading a model from its configuration file does `),_Fe=n(Fte,"STRONG",{});var Myt=s(_Fe);Uhr=r(Myt,"not"),Myt.forEach(t),Jhr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(Fte,"A",{href:!0});var Eyt=s(kH);Yhr=r(Eyt,"from_pretrained()"),Eyt.forEach(t),Khr=r(Fte," to load the model weights."),Fte.forEach(t),Zhr=i(z7),T(y4.$$.fragment,z7),z7.forEach(t),eur=i(Tl),uo=n(Tl,"DIV",{class:!0});var wa=s(uo);T(h9.$$.fragment,wa),our=i(wa),bFe=n(wa,"P",{});var Cyt=s(bFe);rur=r(Cyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Cyt.forEach(t),tur=i(wa),Za=n(wa,"P",{});var Q7=s(Za);aur=r(Q7,"The model class to instantiate is selected based on the "),vFe=n(Q7,"CODE",{});var wyt=s(vFe);nur=r(wyt,"model_type"),wyt.forEach(t),sur=r(Q7,` property of the config object (either
passed as an argument or loaded from `),FFe=n(Q7,"CODE",{});var Ayt=s(FFe);lur=r(Ayt,"pretrained_model_name_or_path"),Ayt.forEach(t),iur=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(Q7,"CODE",{});var Lyt=s(TFe);dur=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),cur=r(Q7,":"),Q7.forEach(t),mur=i(wa),u9=n(wa,"UL",{});var mWe=s(u9);x4=n(mWe,"LI",{});var VIe=s(x4);MFe=n(VIe,"STRONG",{});var yyt=s(MFe);fur=r(yyt,"speech-encoder-decoder"),yyt.forEach(t),gur=r(VIe," \u2014 "),SH=n(VIe,"A",{href:!0});var xyt=s(SH);hur=r(xyt,"SpeechEncoderDecoderModel"),xyt.forEach(t),uur=r(VIe," (Speech Encoder decoder model)"),VIe.forEach(t),pur=i(mWe),$4=n(mWe,"LI",{});var XIe=s($4);EFe=n(XIe,"STRONG",{});var $yt=s(EFe);_ur=r($yt,"speech_to_text"),$yt.forEach(t),bur=r(XIe," \u2014 "),RH=n(XIe,"A",{href:!0});var kyt=s(RH);vur=r(kyt,"Speech2TextForConditionalGeneration"),kyt.forEach(t),Fur=r(XIe," (Speech2Text model)"),XIe.forEach(t),mWe.forEach(t),Tur=i(wa),k4=n(wa,"P",{});var zIe=s(k4);Mur=r(zIe,"The model is set in evaluation mode by default using "),CFe=n(zIe,"CODE",{});var Syt=s(CFe);Eur=r(Syt,"model.eval()"),Syt.forEach(t),Cur=r(zIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=n(zIe,"CODE",{});var Ryt=s(wFe);wur=r(Ryt,"model.train()"),Ryt.forEach(t),zIe.forEach(t),Aur=i(wa),T(S4.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),nze=i(m),Od=n(m,"H2",{class:!0});var fWe=s(Od);R4=n(fWe,"A",{id:!0,class:!0,href:!0});var Pyt=s(R4);AFe=n(Pyt,"SPAN",{});var Byt=s(AFe);T(p9.$$.fragment,Byt),Byt.forEach(t),Pyt.forEach(t),Lur=i(fWe),LFe=n(fWe,"SPAN",{});var Nyt=s(LFe);yur=r(Nyt,"AutoModelForAudioXVector"),Nyt.forEach(t),fWe.forEach(t),sze=i(m),Uo=n(m,"DIV",{class:!0});var Ml=s(Uo);T(_9.$$.fragment,Ml),xur=i(Ml),Vd=n(Ml,"P",{});var Tte=s(Vd);$ur=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),PH=n(Tte,"A",{href:!0});var Iyt=s(PH);kur=r(Iyt,"from_pretrained()"),Iyt.forEach(t),Sur=r(Tte," class method or the "),BH=n(Tte,"A",{href:!0});var qyt=s(BH);Rur=r(qyt,"from_config()"),qyt.forEach(t),Pur=r(Tte,` class
method.`),Tte.forEach(t),Bur=i(Ml),b9=n(Ml,"P",{});var gWe=s(b9);Nur=r(gWe,"This class cannot be instantiated directly using "),yFe=n(gWe,"CODE",{});var jyt=s(yFe);Iur=r(jyt,"__init__()"),jyt.forEach(t),qur=r(gWe," (throws an error)."),gWe.forEach(t),jur=i(Ml),Lt=n(Ml,"DIV",{class:!0});var W7=s(Lt);T(v9.$$.fragment,W7),Dur=i(W7),xFe=n(W7,"P",{});var Dyt=s(xFe);Gur=r(Dyt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dyt.forEach(t),Our=i(W7),Xd=n(W7,"P",{});var Mte=s(Xd);Vur=r(Mte,`Note:
Loading a model from its configuration file does `),$Fe=n(Mte,"STRONG",{});var Gyt=s($Fe);Xur=r(Gyt,"not"),Gyt.forEach(t),zur=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Mte,"A",{href:!0});var Oyt=s(NH);Qur=r(Oyt,"from_pretrained()"),Oyt.forEach(t),Wur=r(Mte," to load the model weights."),Mte.forEach(t),Hur=i(W7),T(P4.$$.fragment,W7),W7.forEach(t),Uur=i(Ml),po=n(Ml,"DIV",{class:!0});var Aa=s(po);T(F9.$$.fragment,Aa),Jur=i(Aa),kFe=n(Aa,"P",{});var Vyt=s(kFe);Yur=r(Vyt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vyt.forEach(t),Kur=i(Aa),en=n(Aa,"P",{});var H7=s(en);Zur=r(H7,"The model class to instantiate is selected based on the "),SFe=n(H7,"CODE",{});var Xyt=s(SFe);epr=r(Xyt,"model_type"),Xyt.forEach(t),opr=r(H7,` property of the config object (either
passed as an argument or loaded from `),RFe=n(H7,"CODE",{});var zyt=s(RFe);rpr=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),tpr=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(H7,"CODE",{});var Qyt=s(PFe);apr=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),npr=r(H7,":"),H7.forEach(t),spr=i(Aa),tt=n(Aa,"UL",{});var El=s(tt);B4=n(El,"LI",{});var QIe=s(B4);BFe=n(QIe,"STRONG",{});var Wyt=s(BFe);lpr=r(Wyt,"data2vec-audio"),Wyt.forEach(t),ipr=r(QIe," \u2014 "),IH=n(QIe,"A",{href:!0});var Hyt=s(IH);dpr=r(Hyt,"Data2VecAudioForXVector"),Hyt.forEach(t),cpr=r(QIe," (Data2VecAudio model)"),QIe.forEach(t),mpr=i(El),N4=n(El,"LI",{});var WIe=s(N4);NFe=n(WIe,"STRONG",{});var Uyt=s(NFe);fpr=r(Uyt,"unispeech-sat"),Uyt.forEach(t),gpr=r(WIe," \u2014 "),qH=n(WIe,"A",{href:!0});var Jyt=s(qH);hpr=r(Jyt,"UniSpeechSatForXVector"),Jyt.forEach(t),upr=r(WIe," (UniSpeechSat model)"),WIe.forEach(t),ppr=i(El),I4=n(El,"LI",{});var HIe=s(I4);IFe=n(HIe,"STRONG",{});var Yyt=s(IFe);_pr=r(Yyt,"wav2vec2"),Yyt.forEach(t),bpr=r(HIe," \u2014 "),jH=n(HIe,"A",{href:!0});var Kyt=s(jH);vpr=r(Kyt,"Wav2Vec2ForXVector"),Kyt.forEach(t),Fpr=r(HIe," (Wav2Vec2 model)"),HIe.forEach(t),Tpr=i(El),q4=n(El,"LI",{});var UIe=s(q4);qFe=n(UIe,"STRONG",{});var Zyt=s(qFe);Mpr=r(Zyt,"wav2vec2-conformer"),Zyt.forEach(t),Epr=r(UIe," \u2014 "),DH=n(UIe,"A",{href:!0});var e8t=s(DH);Cpr=r(e8t,"Wav2Vec2ConformerForXVector"),e8t.forEach(t),wpr=r(UIe," (Wav2Vec2-Conformer model)"),UIe.forEach(t),Apr=i(El),j4=n(El,"LI",{});var JIe=s(j4);jFe=n(JIe,"STRONG",{});var o8t=s(jFe);Lpr=r(o8t,"wavlm"),o8t.forEach(t),ypr=r(JIe," \u2014 "),GH=n(JIe,"A",{href:!0});var r8t=s(GH);xpr=r(r8t,"WavLMForXVector"),r8t.forEach(t),$pr=r(JIe," (WavLM model)"),JIe.forEach(t),El.forEach(t),kpr=i(Aa),D4=n(Aa,"P",{});var YIe=s(D4);Spr=r(YIe,"The model is set in evaluation mode by default using "),DFe=n(YIe,"CODE",{});var t8t=s(DFe);Rpr=r(t8t,"model.eval()"),t8t.forEach(t),Ppr=r(YIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=n(YIe,"CODE",{});var a8t=s(GFe);Bpr=r(a8t,"model.train()"),a8t.forEach(t),YIe.forEach(t),Npr=i(Aa),T(G4.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),lze=i(m),zd=n(m,"H2",{class:!0});var hWe=s(zd);O4=n(hWe,"A",{id:!0,class:!0,href:!0});var n8t=s(O4);OFe=n(n8t,"SPAN",{});var s8t=s(OFe);T(T9.$$.fragment,s8t),s8t.forEach(t),n8t.forEach(t),Ipr=i(hWe),VFe=n(hWe,"SPAN",{});var l8t=s(VFe);qpr=r(l8t,"AutoModelForMaskedImageModeling"),l8t.forEach(t),hWe.forEach(t),ize=i(m),Jo=n(m,"DIV",{class:!0});var Cl=s(Jo);T(M9.$$.fragment,Cl),jpr=i(Cl),Qd=n(Cl,"P",{});var Ete=s(Qd);Dpr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),OH=n(Ete,"A",{href:!0});var i8t=s(OH);Gpr=r(i8t,"from_pretrained()"),i8t.forEach(t),Opr=r(Ete," class method or the "),VH=n(Ete,"A",{href:!0});var d8t=s(VH);Vpr=r(d8t,"from_config()"),d8t.forEach(t),Xpr=r(Ete,` class
method.`),Ete.forEach(t),zpr=i(Cl),E9=n(Cl,"P",{});var uWe=s(E9);Qpr=r(uWe,"This class cannot be instantiated directly using "),XFe=n(uWe,"CODE",{});var c8t=s(XFe);Wpr=r(c8t,"__init__()"),c8t.forEach(t),Hpr=r(uWe," (throws an error)."),uWe.forEach(t),Upr=i(Cl),yt=n(Cl,"DIV",{class:!0});var U7=s(yt);T(C9.$$.fragment,U7),Jpr=i(U7),zFe=n(U7,"P",{});var m8t=s(zFe);Ypr=r(m8t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),m8t.forEach(t),Kpr=i(U7),Wd=n(U7,"P",{});var Cte=s(Wd);Zpr=r(Cte,`Note:
Loading a model from its configuration file does `),QFe=n(Cte,"STRONG",{});var f8t=s(QFe);e_r=r(f8t,"not"),f8t.forEach(t),o_r=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Cte,"A",{href:!0});var g8t=s(XH);r_r=r(g8t,"from_pretrained()"),g8t.forEach(t),t_r=r(Cte," to load the model weights."),Cte.forEach(t),a_r=i(U7),T(V4.$$.fragment,U7),U7.forEach(t),n_r=i(Cl),_o=n(Cl,"DIV",{class:!0});var La=s(_o);T(w9.$$.fragment,La),s_r=i(La),WFe=n(La,"P",{});var h8t=s(WFe);l_r=r(h8t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),h8t.forEach(t),i_r=i(La),on=n(La,"P",{});var J7=s(on);d_r=r(J7,"The model class to instantiate is selected based on the "),HFe=n(J7,"CODE",{});var u8t=s(HFe);c_r=r(u8t,"model_type"),u8t.forEach(t),m_r=r(J7,` property of the config object (either
passed as an argument or loaded from `),UFe=n(J7,"CODE",{});var p8t=s(UFe);f_r=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),g_r=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(J7,"CODE",{});var _8t=s(JFe);h_r=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),u_r=r(J7,":"),J7.forEach(t),p_r=i(La),Hd=n(La,"UL",{});var wte=s(Hd);X4=n(wte,"LI",{});var KIe=s(X4);YFe=n(KIe,"STRONG",{});var b8t=s(YFe);__r=r(b8t,"deit"),b8t.forEach(t),b_r=r(KIe," \u2014 "),zH=n(KIe,"A",{href:!0});var v8t=s(zH);v_r=r(v8t,"DeiTForMaskedImageModeling"),v8t.forEach(t),F_r=r(KIe," (DeiT model)"),KIe.forEach(t),T_r=i(wte),z4=n(wte,"LI",{});var ZIe=s(z4);KFe=n(ZIe,"STRONG",{});var F8t=s(KFe);M_r=r(F8t,"swin"),F8t.forEach(t),E_r=r(ZIe," \u2014 "),QH=n(ZIe,"A",{href:!0});var T8t=s(QH);C_r=r(T8t,"SwinForMaskedImageModeling"),T8t.forEach(t),w_r=r(ZIe," (Swin Transformer model)"),ZIe.forEach(t),A_r=i(wte),Q4=n(wte,"LI",{});var eqe=s(Q4);ZFe=n(eqe,"STRONG",{});var M8t=s(ZFe);L_r=r(M8t,"vit"),M8t.forEach(t),y_r=r(eqe," \u2014 "),WH=n(eqe,"A",{href:!0});var E8t=s(WH);x_r=r(E8t,"ViTForMaskedImageModeling"),E8t.forEach(t),$_r=r(eqe," (ViT model)"),eqe.forEach(t),wte.forEach(t),k_r=i(La),W4=n(La,"P",{});var oqe=s(W4);S_r=r(oqe,"The model is set in evaluation mode by default using "),eTe=n(oqe,"CODE",{});var C8t=s(eTe);R_r=r(C8t,"model.eval()"),C8t.forEach(t),P_r=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oTe=n(oqe,"CODE",{});var w8t=s(oTe);B_r=r(w8t,"model.train()"),w8t.forEach(t),oqe.forEach(t),N_r=i(La),T(H4.$$.fragment,La),La.forEach(t),Cl.forEach(t),dze=i(m),Ud=n(m,"H2",{class:!0});var pWe=s(Ud);U4=n(pWe,"A",{id:!0,class:!0,href:!0});var A8t=s(U4);rTe=n(A8t,"SPAN",{});var L8t=s(rTe);T(A9.$$.fragment,L8t),L8t.forEach(t),A8t.forEach(t),I_r=i(pWe),tTe=n(pWe,"SPAN",{});var y8t=s(tTe);q_r=r(y8t,"AutoModelForObjectDetection"),y8t.forEach(t),pWe.forEach(t),cze=i(m),Yo=n(m,"DIV",{class:!0});var wl=s(Yo);T(L9.$$.fragment,wl),j_r=i(wl),Jd=n(wl,"P",{});var Ate=s(Jd);D_r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HH=n(Ate,"A",{href:!0});var x8t=s(HH);G_r=r(x8t,"from_pretrained()"),x8t.forEach(t),O_r=r(Ate," class method or the "),UH=n(Ate,"A",{href:!0});var $8t=s(UH);V_r=r($8t,"from_config()"),$8t.forEach(t),X_r=r(Ate,` class
method.`),Ate.forEach(t),z_r=i(wl),y9=n(wl,"P",{});var _We=s(y9);Q_r=r(_We,"This class cannot be instantiated directly using "),aTe=n(_We,"CODE",{});var k8t=s(aTe);W_r=r(k8t,"__init__()"),k8t.forEach(t),H_r=r(_We," (throws an error)."),_We.forEach(t),U_r=i(wl),xt=n(wl,"DIV",{class:!0});var Y7=s(xt);T(x9.$$.fragment,Y7),J_r=i(Y7),nTe=n(Y7,"P",{});var S8t=s(nTe);Y_r=r(S8t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),S8t.forEach(t),K_r=i(Y7),Yd=n(Y7,"P",{});var Lte=s(Yd);Z_r=r(Lte,`Note:
Loading a model from its configuration file does `),sTe=n(Lte,"STRONG",{});var R8t=s(sTe);e2r=r(R8t,"not"),R8t.forEach(t),o2r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(Lte,"A",{href:!0});var P8t=s(JH);r2r=r(P8t,"from_pretrained()"),P8t.forEach(t),t2r=r(Lte," to load the model weights."),Lte.forEach(t),a2r=i(Y7),T(J4.$$.fragment,Y7),Y7.forEach(t),n2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T($9.$$.fragment,ya),s2r=i(ya),lTe=n(ya,"P",{});var B8t=s(lTe);l2r=r(B8t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),B8t.forEach(t),i2r=i(ya),rn=n(ya,"P",{});var K7=s(rn);d2r=r(K7,"The model class to instantiate is selected based on the "),iTe=n(K7,"CODE",{});var N8t=s(iTe);c2r=r(N8t,"model_type"),N8t.forEach(t),m2r=r(K7,` property of the config object (either
passed as an argument or loaded from `),dTe=n(K7,"CODE",{});var I8t=s(dTe);f2r=r(I8t,"pretrained_model_name_or_path"),I8t.forEach(t),g2r=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(K7,"CODE",{});var q8t=s(cTe);h2r=r(q8t,"pretrained_model_name_or_path"),q8t.forEach(t),u2r=r(K7,":"),K7.forEach(t),p2r=i(ya),k9=n(ya,"UL",{});var bWe=s(k9);Y4=n(bWe,"LI",{});var rqe=s(Y4);mTe=n(rqe,"STRONG",{});var j8t=s(mTe);_2r=r(j8t,"detr"),j8t.forEach(t),b2r=r(rqe," \u2014 "),YH=n(rqe,"A",{href:!0});var D8t=s(YH);v2r=r(D8t,"DetrForObjectDetection"),D8t.forEach(t),F2r=r(rqe," (DETR model)"),rqe.forEach(t),T2r=i(bWe),K4=n(bWe,"LI",{});var tqe=s(K4);fTe=n(tqe,"STRONG",{});var G8t=s(fTe);M2r=r(G8t,"yolos"),G8t.forEach(t),E2r=r(tqe," \u2014 "),KH=n(tqe,"A",{href:!0});var O8t=s(KH);C2r=r(O8t,"YolosForObjectDetection"),O8t.forEach(t),w2r=r(tqe," (YOLOS model)"),tqe.forEach(t),bWe.forEach(t),A2r=i(ya),Z4=n(ya,"P",{});var aqe=s(Z4);L2r=r(aqe,"The model is set in evaluation mode by default using "),gTe=n(aqe,"CODE",{});var V8t=s(gTe);y2r=r(V8t,"model.eval()"),V8t.forEach(t),x2r=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hTe=n(aqe,"CODE",{});var X8t=s(hTe);$2r=r(X8t,"model.train()"),X8t.forEach(t),aqe.forEach(t),k2r=i(ya),T(eE.$$.fragment,ya),ya.forEach(t),wl.forEach(t),mze=i(m),Kd=n(m,"H2",{class:!0});var vWe=s(Kd);oE=n(vWe,"A",{id:!0,class:!0,href:!0});var z8t=s(oE);uTe=n(z8t,"SPAN",{});var Q8t=s(uTe);T(S9.$$.fragment,Q8t),Q8t.forEach(t),z8t.forEach(t),S2r=i(vWe),pTe=n(vWe,"SPAN",{});var W8t=s(pTe);R2r=r(W8t,"AutoModelForImageSegmentation"),W8t.forEach(t),vWe.forEach(t),fze=i(m),Ko=n(m,"DIV",{class:!0});var Al=s(Ko);T(R9.$$.fragment,Al),P2r=i(Al),Zd=n(Al,"P",{});var yte=s(Zd);B2r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZH=n(yte,"A",{href:!0});var H8t=s(ZH);N2r=r(H8t,"from_pretrained()"),H8t.forEach(t),I2r=r(yte," class method or the "),eU=n(yte,"A",{href:!0});var U8t=s(eU);q2r=r(U8t,"from_config()"),U8t.forEach(t),j2r=r(yte,` class
method.`),yte.forEach(t),D2r=i(Al),P9=n(Al,"P",{});var FWe=s(P9);G2r=r(FWe,"This class cannot be instantiated directly using "),_Te=n(FWe,"CODE",{});var J8t=s(_Te);O2r=r(J8t,"__init__()"),J8t.forEach(t),V2r=r(FWe," (throws an error)."),FWe.forEach(t),X2r=i(Al),$t=n(Al,"DIV",{class:!0});var Z7=s($t);T(B9.$$.fragment,Z7),z2r=i(Z7),bTe=n(Z7,"P",{});var Y8t=s(bTe);Q2r=r(Y8t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Y8t.forEach(t),W2r=i(Z7),ec=n(Z7,"P",{});var xte=s(ec);H2r=r(xte,`Note:
Loading a model from its configuration file does `),vTe=n(xte,"STRONG",{});var K8t=s(vTe);U2r=r(K8t,"not"),K8t.forEach(t),J2r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(xte,"A",{href:!0});var Z8t=s(oU);Y2r=r(Z8t,"from_pretrained()"),Z8t.forEach(t),K2r=r(xte," to load the model weights."),xte.forEach(t),Z2r=i(Z7),T(rE.$$.fragment,Z7),Z7.forEach(t),ebr=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(N9.$$.fragment,xa),obr=i(xa),FTe=n(xa,"P",{});var e9t=s(FTe);rbr=r(e9t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),e9t.forEach(t),tbr=i(xa),tn=n(xa,"P",{});var eL=s(tn);abr=r(eL,"The model class to instantiate is selected based on the "),TTe=n(eL,"CODE",{});var o9t=s(TTe);nbr=r(o9t,"model_type"),o9t.forEach(t),sbr=r(eL,` property of the config object (either
passed as an argument or loaded from `),MTe=n(eL,"CODE",{});var r9t=s(MTe);lbr=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),ibr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(eL,"CODE",{});var t9t=s(ETe);dbr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),cbr=r(eL,":"),eL.forEach(t),mbr=i(xa),CTe=n(xa,"UL",{});var a9t=s(CTe);tE=n(a9t,"LI",{});var nqe=s(tE);wTe=n(nqe,"STRONG",{});var n9t=s(wTe);fbr=r(n9t,"detr"),n9t.forEach(t),gbr=r(nqe," \u2014 "),rU=n(nqe,"A",{href:!0});var s9t=s(rU);hbr=r(s9t,"DetrForSegmentation"),s9t.forEach(t),ubr=r(nqe," (DETR model)"),nqe.forEach(t),a9t.forEach(t),pbr=i(xa),aE=n(xa,"P",{});var sqe=s(aE);_br=r(sqe,"The model is set in evaluation mode by default using "),ATe=n(sqe,"CODE",{});var l9t=s(ATe);bbr=r(l9t,"model.eval()"),l9t.forEach(t),vbr=r(sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LTe=n(sqe,"CODE",{});var i9t=s(LTe);Fbr=r(i9t,"model.train()"),i9t.forEach(t),sqe.forEach(t),Tbr=i(xa),T(nE.$$.fragment,xa),xa.forEach(t),Al.forEach(t),gze=i(m),oc=n(m,"H2",{class:!0});var TWe=s(oc);sE=n(TWe,"A",{id:!0,class:!0,href:!0});var d9t=s(sE);yTe=n(d9t,"SPAN",{});var c9t=s(yTe);T(I9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),Mbr=i(TWe),xTe=n(TWe,"SPAN",{});var m9t=s(xTe);Ebr=r(m9t,"AutoModelForSemanticSegmentation"),m9t.forEach(t),TWe.forEach(t),hze=i(m),Zo=n(m,"DIV",{class:!0});var Ll=s(Zo);T(q9.$$.fragment,Ll),Cbr=i(Ll),rc=n(Ll,"P",{});var $te=s(rc);wbr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tU=n($te,"A",{href:!0});var f9t=s(tU);Abr=r(f9t,"from_pretrained()"),f9t.forEach(t),Lbr=r($te," class method or the "),aU=n($te,"A",{href:!0});var g9t=s(aU);ybr=r(g9t,"from_config()"),g9t.forEach(t),xbr=r($te,` class
method.`),$te.forEach(t),$br=i(Ll),j9=n(Ll,"P",{});var MWe=s(j9);kbr=r(MWe,"This class cannot be instantiated directly using "),$Te=n(MWe,"CODE",{});var h9t=s($Te);Sbr=r(h9t,"__init__()"),h9t.forEach(t),Rbr=r(MWe," (throws an error)."),MWe.forEach(t),Pbr=i(Ll),kt=n(Ll,"DIV",{class:!0});var oL=s(kt);T(D9.$$.fragment,oL),Bbr=i(oL),kTe=n(oL,"P",{});var u9t=s(kTe);Nbr=r(u9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),u9t.forEach(t),Ibr=i(oL),tc=n(oL,"P",{});var kte=s(tc);qbr=r(kte,`Note:
Loading a model from its configuration file does `),STe=n(kte,"STRONG",{});var p9t=s(STe);jbr=r(p9t,"not"),p9t.forEach(t),Dbr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(kte,"A",{href:!0});var _9t=s(nU);Gbr=r(_9t,"from_pretrained()"),_9t.forEach(t),Obr=r(kte," to load the model weights."),kte.forEach(t),Vbr=i(oL),T(lE.$$.fragment,oL),oL.forEach(t),Xbr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(G9.$$.fragment,$a),zbr=i($a),RTe=n($a,"P",{});var b9t=s(RTe);Qbr=r(b9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),b9t.forEach(t),Wbr=i($a),an=n($a,"P",{});var rL=s(an);Hbr=r(rL,"The model class to instantiate is selected based on the "),PTe=n(rL,"CODE",{});var v9t=s(PTe);Ubr=r(v9t,"model_type"),v9t.forEach(t),Jbr=r(rL,` property of the config object (either
passed as an argument or loaded from `),BTe=n(rL,"CODE",{});var F9t=s(BTe);Ybr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),Kbr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(rL,"CODE",{});var T9t=s(NTe);Zbr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),evr=r(rL,":"),rL.forEach(t),ovr=i($a),at=n($a,"UL",{});var yl=s(at);iE=n(yl,"LI",{});var lqe=s(iE);ITe=n(lqe,"STRONG",{});var M9t=s(ITe);rvr=r(M9t,"beit"),M9t.forEach(t),tvr=r(lqe," \u2014 "),sU=n(lqe,"A",{href:!0});var E9t=s(sU);avr=r(E9t,"BeitForSemanticSegmentation"),E9t.forEach(t),nvr=r(lqe," (BEiT model)"),lqe.forEach(t),svr=i(yl),dE=n(yl,"LI",{});var iqe=s(dE);qTe=n(iqe,"STRONG",{});var C9t=s(qTe);lvr=r(C9t,"data2vec-vision"),C9t.forEach(t),ivr=r(iqe," \u2014 "),lU=n(iqe,"A",{href:!0});var w9t=s(lU);dvr=r(w9t,"Data2VecVisionForSemanticSegmentation"),w9t.forEach(t),cvr=r(iqe," (Data2VecVision model)"),iqe.forEach(t),mvr=i(yl),cE=n(yl,"LI",{});var dqe=s(cE);jTe=n(dqe,"STRONG",{});var A9t=s(jTe);fvr=r(A9t,"dpt"),A9t.forEach(t),gvr=r(dqe," \u2014 "),iU=n(dqe,"A",{href:!0});var L9t=s(iU);hvr=r(L9t,"DPTForSemanticSegmentation"),L9t.forEach(t),uvr=r(dqe," (DPT model)"),dqe.forEach(t),pvr=i(yl),mE=n(yl,"LI",{});var cqe=s(mE);DTe=n(cqe,"STRONG",{});var y9t=s(DTe);_vr=r(y9t,"mobilevit"),y9t.forEach(t),bvr=r(cqe," \u2014 "),dU=n(cqe,"A",{href:!0});var x9t=s(dU);vvr=r(x9t,"MobileViTForSemanticSegmentation"),x9t.forEach(t),Fvr=r(cqe," (MobileViT model)"),cqe.forEach(t),Tvr=i(yl),fE=n(yl,"LI",{});var mqe=s(fE);GTe=n(mqe,"STRONG",{});var $9t=s(GTe);Mvr=r($9t,"segformer"),$9t.forEach(t),Evr=r(mqe," \u2014 "),cU=n(mqe,"A",{href:!0});var k9t=s(cU);Cvr=r(k9t,"SegformerForSemanticSegmentation"),k9t.forEach(t),wvr=r(mqe," (SegFormer model)"),mqe.forEach(t),yl.forEach(t),Avr=i($a),gE=n($a,"P",{});var fqe=s(gE);Lvr=r(fqe,"The model is set in evaluation mode by default using "),OTe=n(fqe,"CODE",{});var S9t=s(OTe);yvr=r(S9t,"model.eval()"),S9t.forEach(t),xvr=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VTe=n(fqe,"CODE",{});var R9t=s(VTe);$vr=r(R9t,"model.train()"),R9t.forEach(t),fqe.forEach(t),kvr=i($a),T(hE.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),uze=i(m),ac=n(m,"H2",{class:!0});var EWe=s(ac);uE=n(EWe,"A",{id:!0,class:!0,href:!0});var P9t=s(uE);XTe=n(P9t,"SPAN",{});var B9t=s(XTe);T(O9.$$.fragment,B9t),B9t.forEach(t),P9t.forEach(t),Svr=i(EWe),zTe=n(EWe,"SPAN",{});var N9t=s(zTe);Rvr=r(N9t,"AutoModelForInstanceSegmentation"),N9t.forEach(t),EWe.forEach(t),pze=i(m),er=n(m,"DIV",{class:!0});var xl=s(er);T(V9.$$.fragment,xl),Pvr=i(xl),nc=n(xl,"P",{});var Ste=s(nc);Bvr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mU=n(Ste,"A",{href:!0});var I9t=s(mU);Nvr=r(I9t,"from_pretrained()"),I9t.forEach(t),Ivr=r(Ste," class method or the "),fU=n(Ste,"A",{href:!0});var q9t=s(fU);qvr=r(q9t,"from_config()"),q9t.forEach(t),jvr=r(Ste,` class
method.`),Ste.forEach(t),Dvr=i(xl),X9=n(xl,"P",{});var CWe=s(X9);Gvr=r(CWe,"This class cannot be instantiated directly using "),QTe=n(CWe,"CODE",{});var j9t=s(QTe);Ovr=r(j9t,"__init__()"),j9t.forEach(t),Vvr=r(CWe," (throws an error)."),CWe.forEach(t),Xvr=i(xl),St=n(xl,"DIV",{class:!0});var tL=s(St);T(z9.$$.fragment,tL),zvr=i(tL),WTe=n(tL,"P",{});var D9t=s(WTe);Qvr=r(D9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),D9t.forEach(t),Wvr=i(tL),sc=n(tL,"P",{});var Rte=s(sc);Hvr=r(Rte,`Note:
Loading a model from its configuration file does `),HTe=n(Rte,"STRONG",{});var G9t=s(HTe);Uvr=r(G9t,"not"),G9t.forEach(t),Jvr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(Rte,"A",{href:!0});var O9t=s(gU);Yvr=r(O9t,"from_pretrained()"),O9t.forEach(t),Kvr=r(Rte," to load the model weights."),Rte.forEach(t),Zvr=i(tL),T(pE.$$.fragment,tL),tL.forEach(t),e1r=i(xl),To=n(xl,"DIV",{class:!0});var ka=s(To);T(Q9.$$.fragment,ka),o1r=i(ka),UTe=n(ka,"P",{});var V9t=s(UTe);r1r=r(V9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),V9t.forEach(t),t1r=i(ka),nn=n(ka,"P",{});var aL=s(nn);a1r=r(aL,"The model class to instantiate is selected based on the "),JTe=n(aL,"CODE",{});var X9t=s(JTe);n1r=r(X9t,"model_type"),X9t.forEach(t),s1r=r(aL,` property of the config object (either
passed as an argument or loaded from `),YTe=n(aL,"CODE",{});var z9t=s(YTe);l1r=r(z9t,"pretrained_model_name_or_path"),z9t.forEach(t),i1r=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(aL,"CODE",{});var Q9t=s(KTe);d1r=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),c1r=r(aL,":"),aL.forEach(t),m1r=i(ka),ZTe=n(ka,"UL",{});var W9t=s(ZTe);_E=n(W9t,"LI",{});var gqe=s(_E);eMe=n(gqe,"STRONG",{});var H9t=s(eMe);f1r=r(H9t,"maskformer"),H9t.forEach(t),g1r=r(gqe," \u2014 "),hU=n(gqe,"A",{href:!0});var U9t=s(hU);h1r=r(U9t,"MaskFormerForInstanceSegmentation"),U9t.forEach(t),u1r=r(gqe," (MaskFormer model)"),gqe.forEach(t),W9t.forEach(t),p1r=i(ka),bE=n(ka,"P",{});var hqe=s(bE);_1r=r(hqe,"The model is set in evaluation mode by default using "),oMe=n(hqe,"CODE",{});var J9t=s(oMe);b1r=r(J9t,"model.eval()"),J9t.forEach(t),v1r=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rMe=n(hqe,"CODE",{});var Y9t=s(rMe);F1r=r(Y9t,"model.train()"),Y9t.forEach(t),hqe.forEach(t),T1r=i(ka),T(vE.$$.fragment,ka),ka.forEach(t),xl.forEach(t),_ze=i(m),lc=n(m,"H2",{class:!0});var wWe=s(lc);FE=n(wWe,"A",{id:!0,class:!0,href:!0});var K9t=s(FE);tMe=n(K9t,"SPAN",{});var Z9t=s(tMe);T(W9.$$.fragment,Z9t),Z9t.forEach(t),K9t.forEach(t),M1r=i(wWe),aMe=n(wWe,"SPAN",{});var ext=s(aMe);E1r=r(ext,"TFAutoModel"),ext.forEach(t),wWe.forEach(t),bze=i(m),or=n(m,"DIV",{class:!0});var $l=s(or);T(H9.$$.fragment,$l),C1r=i($l),ic=n($l,"P",{});var Pte=s(ic);w1r=r(Pte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=n(Pte,"A",{href:!0});var oxt=s(uU);A1r=r(oxt,"from_pretrained()"),oxt.forEach(t),L1r=r(Pte," class method or the "),pU=n(Pte,"A",{href:!0});var rxt=s(pU);y1r=r(rxt,"from_config()"),rxt.forEach(t),x1r=r(Pte,` class
method.`),Pte.forEach(t),$1r=i($l),U9=n($l,"P",{});var AWe=s(U9);k1r=r(AWe,"This class cannot be instantiated directly using "),nMe=n(AWe,"CODE",{});var txt=s(nMe);S1r=r(txt,"__init__()"),txt.forEach(t),R1r=r(AWe," (throws an error)."),AWe.forEach(t),P1r=i($l),Rt=n($l,"DIV",{class:!0});var nL=s(Rt);T(J9.$$.fragment,nL),B1r=i(nL),sMe=n(nL,"P",{});var axt=s(sMe);N1r=r(axt,"Instantiates one of the base model classes of the library from a configuration."),axt.forEach(t),I1r=i(nL),dc=n(nL,"P",{});var Bte=s(dc);q1r=r(Bte,`Note:
Loading a model from its configuration file does `),lMe=n(Bte,"STRONG",{});var nxt=s(lMe);j1r=r(nxt,"not"),nxt.forEach(t),D1r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(Bte,"A",{href:!0});var sxt=s(_U);G1r=r(sxt,"from_pretrained()"),sxt.forEach(t),O1r=r(Bte," to load the model weights."),Bte.forEach(t),V1r=i(nL),T(TE.$$.fragment,nL),nL.forEach(t),X1r=i($l),xr=n($l,"DIV",{class:!0});var kl=s(xr);T(Y9.$$.fragment,kl),z1r=i(kl),iMe=n(kl,"P",{});var lxt=s(iMe);Q1r=r(lxt,"Instantiate one of the base model classes of the library from a pretrained model."),lxt.forEach(t),W1r=i(kl),sn=n(kl,"P",{});var sL=s(sn);H1r=r(sL,"The model class to instantiate is selected based on the "),dMe=n(sL,"CODE",{});var ixt=s(dMe);U1r=r(ixt,"model_type"),ixt.forEach(t),J1r=r(sL,` property of the config object (either
passed as an argument or loaded from `),cMe=n(sL,"CODE",{});var dxt=s(cMe);Y1r=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),K1r=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(sL,"CODE",{});var cxt=s(mMe);Z1r=r(cxt,"pretrained_model_name_or_path"),cxt.forEach(t),eFr=r(sL,":"),sL.forEach(t),oFr=i(kl),q=n(kl,"UL",{});var D=s(q);ME=n(D,"LI",{});var uqe=s(ME);fMe=n(uqe,"STRONG",{});var mxt=s(fMe);rFr=r(mxt,"albert"),mxt.forEach(t),tFr=r(uqe," \u2014 "),bU=n(uqe,"A",{href:!0});var fxt=s(bU);aFr=r(fxt,"TFAlbertModel"),fxt.forEach(t),nFr=r(uqe," (ALBERT model)"),uqe.forEach(t),sFr=i(D),EE=n(D,"LI",{});var pqe=s(EE);gMe=n(pqe,"STRONG",{});var gxt=s(gMe);lFr=r(gxt,"bart"),gxt.forEach(t),iFr=r(pqe," \u2014 "),vU=n(pqe,"A",{href:!0});var hxt=s(vU);dFr=r(hxt,"TFBartModel"),hxt.forEach(t),cFr=r(pqe," (BART model)"),pqe.forEach(t),mFr=i(D),CE=n(D,"LI",{});var _qe=s(CE);hMe=n(_qe,"STRONG",{});var uxt=s(hMe);fFr=r(uxt,"bert"),uxt.forEach(t),gFr=r(_qe," \u2014 "),FU=n(_qe,"A",{href:!0});var pxt=s(FU);hFr=r(pxt,"TFBertModel"),pxt.forEach(t),uFr=r(_qe," (BERT model)"),_qe.forEach(t),pFr=i(D),wE=n(D,"LI",{});var bqe=s(wE);uMe=n(bqe,"STRONG",{});var _xt=s(uMe);_Fr=r(_xt,"blenderbot"),_xt.forEach(t),bFr=r(bqe," \u2014 "),TU=n(bqe,"A",{href:!0});var bxt=s(TU);vFr=r(bxt,"TFBlenderbotModel"),bxt.forEach(t),FFr=r(bqe," (Blenderbot model)"),bqe.forEach(t),TFr=i(D),AE=n(D,"LI",{});var vqe=s(AE);pMe=n(vqe,"STRONG",{});var vxt=s(pMe);MFr=r(vxt,"blenderbot-small"),vxt.forEach(t),EFr=r(vqe," \u2014 "),MU=n(vqe,"A",{href:!0});var Fxt=s(MU);CFr=r(Fxt,"TFBlenderbotSmallModel"),Fxt.forEach(t),wFr=r(vqe," (BlenderbotSmall model)"),vqe.forEach(t),AFr=i(D),LE=n(D,"LI",{});var Fqe=s(LE);_Me=n(Fqe,"STRONG",{});var Txt=s(_Me);LFr=r(Txt,"camembert"),Txt.forEach(t),yFr=r(Fqe," \u2014 "),EU=n(Fqe,"A",{href:!0});var Mxt=s(EU);xFr=r(Mxt,"TFCamembertModel"),Mxt.forEach(t),$Fr=r(Fqe," (CamemBERT model)"),Fqe.forEach(t),kFr=i(D),yE=n(D,"LI",{});var Tqe=s(yE);bMe=n(Tqe,"STRONG",{});var Ext=s(bMe);SFr=r(Ext,"clip"),Ext.forEach(t),RFr=r(Tqe," \u2014 "),CU=n(Tqe,"A",{href:!0});var Cxt=s(CU);PFr=r(Cxt,"TFCLIPModel"),Cxt.forEach(t),BFr=r(Tqe," (CLIP model)"),Tqe.forEach(t),NFr=i(D),xE=n(D,"LI",{});var Mqe=s(xE);vMe=n(Mqe,"STRONG",{});var wxt=s(vMe);IFr=r(wxt,"convbert"),wxt.forEach(t),qFr=r(Mqe," \u2014 "),wU=n(Mqe,"A",{href:!0});var Axt=s(wU);jFr=r(Axt,"TFConvBertModel"),Axt.forEach(t),DFr=r(Mqe," (ConvBERT model)"),Mqe.forEach(t),GFr=i(D),$E=n(D,"LI",{});var Eqe=s($E);FMe=n(Eqe,"STRONG",{});var Lxt=s(FMe);OFr=r(Lxt,"convnext"),Lxt.forEach(t),VFr=r(Eqe," \u2014 "),AU=n(Eqe,"A",{href:!0});var yxt=s(AU);XFr=r(yxt,"TFConvNextModel"),yxt.forEach(t),zFr=r(Eqe," (ConvNeXT model)"),Eqe.forEach(t),QFr=i(D),kE=n(D,"LI",{});var Cqe=s(kE);TMe=n(Cqe,"STRONG",{});var xxt=s(TMe);WFr=r(xxt,"ctrl"),xxt.forEach(t),HFr=r(Cqe," \u2014 "),LU=n(Cqe,"A",{href:!0});var $xt=s(LU);UFr=r($xt,"TFCTRLModel"),$xt.forEach(t),JFr=r(Cqe," (CTRL model)"),Cqe.forEach(t),YFr=i(D),SE=n(D,"LI",{});var wqe=s(SE);MMe=n(wqe,"STRONG",{});var kxt=s(MMe);KFr=r(kxt,"data2vec-vision"),kxt.forEach(t),ZFr=r(wqe," \u2014 "),yU=n(wqe,"A",{href:!0});var Sxt=s(yU);eTr=r(Sxt,"TFData2VecVisionModel"),Sxt.forEach(t),oTr=r(wqe," (Data2VecVision model)"),wqe.forEach(t),rTr=i(D),RE=n(D,"LI",{});var Aqe=s(RE);EMe=n(Aqe,"STRONG",{});var Rxt=s(EMe);tTr=r(Rxt,"deberta"),Rxt.forEach(t),aTr=r(Aqe," \u2014 "),xU=n(Aqe,"A",{href:!0});var Pxt=s(xU);nTr=r(Pxt,"TFDebertaModel"),Pxt.forEach(t),sTr=r(Aqe," (DeBERTa model)"),Aqe.forEach(t),lTr=i(D),PE=n(D,"LI",{});var Lqe=s(PE);CMe=n(Lqe,"STRONG",{});var Bxt=s(CMe);iTr=r(Bxt,"deberta-v2"),Bxt.forEach(t),dTr=r(Lqe," \u2014 "),$U=n(Lqe,"A",{href:!0});var Nxt=s($U);cTr=r(Nxt,"TFDebertaV2Model"),Nxt.forEach(t),mTr=r(Lqe," (DeBERTa-v2 model)"),Lqe.forEach(t),fTr=i(D),BE=n(D,"LI",{});var yqe=s(BE);wMe=n(yqe,"STRONG",{});var Ixt=s(wMe);gTr=r(Ixt,"deit"),Ixt.forEach(t),hTr=r(yqe," \u2014 "),kU=n(yqe,"A",{href:!0});var qxt=s(kU);uTr=r(qxt,"TFDeiTModel"),qxt.forEach(t),pTr=r(yqe," (DeiT model)"),yqe.forEach(t),_Tr=i(D),NE=n(D,"LI",{});var xqe=s(NE);AMe=n(xqe,"STRONG",{});var jxt=s(AMe);bTr=r(jxt,"distilbert"),jxt.forEach(t),vTr=r(xqe," \u2014 "),SU=n(xqe,"A",{href:!0});var Dxt=s(SU);FTr=r(Dxt,"TFDistilBertModel"),Dxt.forEach(t),TTr=r(xqe," (DistilBERT model)"),xqe.forEach(t),MTr=i(D),IE=n(D,"LI",{});var $qe=s(IE);LMe=n($qe,"STRONG",{});var Gxt=s(LMe);ETr=r(Gxt,"dpr"),Gxt.forEach(t),CTr=r($qe," \u2014 "),RU=n($qe,"A",{href:!0});var Oxt=s(RU);wTr=r(Oxt,"TFDPRQuestionEncoder"),Oxt.forEach(t),ATr=r($qe," (DPR model)"),$qe.forEach(t),LTr=i(D),qE=n(D,"LI",{});var kqe=s(qE);yMe=n(kqe,"STRONG",{});var Vxt=s(yMe);yTr=r(Vxt,"electra"),Vxt.forEach(t),xTr=r(kqe," \u2014 "),PU=n(kqe,"A",{href:!0});var Xxt=s(PU);$Tr=r(Xxt,"TFElectraModel"),Xxt.forEach(t),kTr=r(kqe," (ELECTRA model)"),kqe.forEach(t),STr=i(D),jE=n(D,"LI",{});var Sqe=s(jE);xMe=n(Sqe,"STRONG",{});var zxt=s(xMe);RTr=r(zxt,"flaubert"),zxt.forEach(t),PTr=r(Sqe," \u2014 "),BU=n(Sqe,"A",{href:!0});var Qxt=s(BU);BTr=r(Qxt,"TFFlaubertModel"),Qxt.forEach(t),NTr=r(Sqe," (FlauBERT model)"),Sqe.forEach(t),ITr=i(D),Ys=n(D,"LI",{});var IS=s(Ys);$Me=n(IS,"STRONG",{});var Wxt=s($Me);qTr=r(Wxt,"funnel"),Wxt.forEach(t),jTr=r(IS," \u2014 "),NU=n(IS,"A",{href:!0});var Hxt=s(NU);DTr=r(Hxt,"TFFunnelModel"),Hxt.forEach(t),GTr=r(IS," or "),IU=n(IS,"A",{href:!0});var Uxt=s(IU);OTr=r(Uxt,"TFFunnelBaseModel"),Uxt.forEach(t),VTr=r(IS," (Funnel Transformer model)"),IS.forEach(t),XTr=i(D),DE=n(D,"LI",{});var Rqe=s(DE);kMe=n(Rqe,"STRONG",{});var Jxt=s(kMe);zTr=r(Jxt,"gpt2"),Jxt.forEach(t),QTr=r(Rqe," \u2014 "),qU=n(Rqe,"A",{href:!0});var Yxt=s(qU);WTr=r(Yxt,"TFGPT2Model"),Yxt.forEach(t),HTr=r(Rqe," (OpenAI GPT-2 model)"),Rqe.forEach(t),UTr=i(D),GE=n(D,"LI",{});var Pqe=s(GE);SMe=n(Pqe,"STRONG",{});var Kxt=s(SMe);JTr=r(Kxt,"gptj"),Kxt.forEach(t),YTr=r(Pqe," \u2014 "),jU=n(Pqe,"A",{href:!0});var Zxt=s(jU);KTr=r(Zxt,"TFGPTJModel"),Zxt.forEach(t),ZTr=r(Pqe," (GPT-J model)"),Pqe.forEach(t),eMr=i(D),OE=n(D,"LI",{});var Bqe=s(OE);RMe=n(Bqe,"STRONG",{});var e$t=s(RMe);oMr=r(e$t,"hubert"),e$t.forEach(t),rMr=r(Bqe," \u2014 "),DU=n(Bqe,"A",{href:!0});var o$t=s(DU);tMr=r(o$t,"TFHubertModel"),o$t.forEach(t),aMr=r(Bqe," (Hubert model)"),Bqe.forEach(t),nMr=i(D),VE=n(D,"LI",{});var Nqe=s(VE);PMe=n(Nqe,"STRONG",{});var r$t=s(PMe);sMr=r(r$t,"layoutlm"),r$t.forEach(t),lMr=r(Nqe," \u2014 "),GU=n(Nqe,"A",{href:!0});var t$t=s(GU);iMr=r(t$t,"TFLayoutLMModel"),t$t.forEach(t),dMr=r(Nqe," (LayoutLM model)"),Nqe.forEach(t),cMr=i(D),XE=n(D,"LI",{});var Iqe=s(XE);BMe=n(Iqe,"STRONG",{});var a$t=s(BMe);mMr=r(a$t,"led"),a$t.forEach(t),fMr=r(Iqe," \u2014 "),OU=n(Iqe,"A",{href:!0});var n$t=s(OU);gMr=r(n$t,"TFLEDModel"),n$t.forEach(t),hMr=r(Iqe," (LED model)"),Iqe.forEach(t),uMr=i(D),zE=n(D,"LI",{});var qqe=s(zE);NMe=n(qqe,"STRONG",{});var s$t=s(NMe);pMr=r(s$t,"longformer"),s$t.forEach(t),_Mr=r(qqe," \u2014 "),VU=n(qqe,"A",{href:!0});var l$t=s(VU);bMr=r(l$t,"TFLongformerModel"),l$t.forEach(t),vMr=r(qqe," (Longformer model)"),qqe.forEach(t),FMr=i(D),QE=n(D,"LI",{});var jqe=s(QE);IMe=n(jqe,"STRONG",{});var i$t=s(IMe);TMr=r(i$t,"lxmert"),i$t.forEach(t),MMr=r(jqe," \u2014 "),XU=n(jqe,"A",{href:!0});var d$t=s(XU);EMr=r(d$t,"TFLxmertModel"),d$t.forEach(t),CMr=r(jqe," (LXMERT model)"),jqe.forEach(t),wMr=i(D),WE=n(D,"LI",{});var Dqe=s(WE);qMe=n(Dqe,"STRONG",{});var c$t=s(qMe);AMr=r(c$t,"marian"),c$t.forEach(t),LMr=r(Dqe," \u2014 "),zU=n(Dqe,"A",{href:!0});var m$t=s(zU);yMr=r(m$t,"TFMarianModel"),m$t.forEach(t),xMr=r(Dqe," (Marian model)"),Dqe.forEach(t),$Mr=i(D),HE=n(D,"LI",{});var Gqe=s(HE);jMe=n(Gqe,"STRONG",{});var f$t=s(jMe);kMr=r(f$t,"mbart"),f$t.forEach(t),SMr=r(Gqe," \u2014 "),QU=n(Gqe,"A",{href:!0});var g$t=s(QU);RMr=r(g$t,"TFMBartModel"),g$t.forEach(t),PMr=r(Gqe," (mBART model)"),Gqe.forEach(t),BMr=i(D),UE=n(D,"LI",{});var Oqe=s(UE);DMe=n(Oqe,"STRONG",{});var h$t=s(DMe);NMr=r(h$t,"mobilebert"),h$t.forEach(t),IMr=r(Oqe," \u2014 "),WU=n(Oqe,"A",{href:!0});var u$t=s(WU);qMr=r(u$t,"TFMobileBertModel"),u$t.forEach(t),jMr=r(Oqe," (MobileBERT model)"),Oqe.forEach(t),DMr=i(D),JE=n(D,"LI",{});var Vqe=s(JE);GMe=n(Vqe,"STRONG",{});var p$t=s(GMe);GMr=r(p$t,"mpnet"),p$t.forEach(t),OMr=r(Vqe," \u2014 "),HU=n(Vqe,"A",{href:!0});var _$t=s(HU);VMr=r(_$t,"TFMPNetModel"),_$t.forEach(t),XMr=r(Vqe," (MPNet model)"),Vqe.forEach(t),zMr=i(D),YE=n(D,"LI",{});var Xqe=s(YE);OMe=n(Xqe,"STRONG",{});var b$t=s(OMe);QMr=r(b$t,"mt5"),b$t.forEach(t),WMr=r(Xqe," \u2014 "),UU=n(Xqe,"A",{href:!0});var v$t=s(UU);HMr=r(v$t,"TFMT5Model"),v$t.forEach(t),UMr=r(Xqe," (MT5 model)"),Xqe.forEach(t),JMr=i(D),KE=n(D,"LI",{});var zqe=s(KE);VMe=n(zqe,"STRONG",{});var F$t=s(VMe);YMr=r(F$t,"openai-gpt"),F$t.forEach(t),KMr=r(zqe," \u2014 "),JU=n(zqe,"A",{href:!0});var T$t=s(JU);ZMr=r(T$t,"TFOpenAIGPTModel"),T$t.forEach(t),e4r=r(zqe," (OpenAI GPT model)"),zqe.forEach(t),o4r=i(D),ZE=n(D,"LI",{});var Qqe=s(ZE);XMe=n(Qqe,"STRONG",{});var M$t=s(XMe);r4r=r(M$t,"opt"),M$t.forEach(t),t4r=r(Qqe," \u2014 "),YU=n(Qqe,"A",{href:!0});var E$t=s(YU);a4r=r(E$t,"TFOPTModel"),E$t.forEach(t),n4r=r(Qqe," (OPT model)"),Qqe.forEach(t),s4r=i(D),eC=n(D,"LI",{});var Wqe=s(eC);zMe=n(Wqe,"STRONG",{});var C$t=s(zMe);l4r=r(C$t,"pegasus"),C$t.forEach(t),i4r=r(Wqe," \u2014 "),KU=n(Wqe,"A",{href:!0});var w$t=s(KU);d4r=r(w$t,"TFPegasusModel"),w$t.forEach(t),c4r=r(Wqe," (Pegasus model)"),Wqe.forEach(t),m4r=i(D),oC=n(D,"LI",{});var Hqe=s(oC);QMe=n(Hqe,"STRONG",{});var A$t=s(QMe);f4r=r(A$t,"regnet"),A$t.forEach(t),g4r=r(Hqe," \u2014 "),ZU=n(Hqe,"A",{href:!0});var L$t=s(ZU);h4r=r(L$t,"TFRegNetModel"),L$t.forEach(t),u4r=r(Hqe," (RegNet model)"),Hqe.forEach(t),p4r=i(D),rC=n(D,"LI",{});var Uqe=s(rC);WMe=n(Uqe,"STRONG",{});var y$t=s(WMe);_4r=r(y$t,"rembert"),y$t.forEach(t),b4r=r(Uqe," \u2014 "),eJ=n(Uqe,"A",{href:!0});var x$t=s(eJ);v4r=r(x$t,"TFRemBertModel"),x$t.forEach(t),F4r=r(Uqe," (RemBERT model)"),Uqe.forEach(t),T4r=i(D),tC=n(D,"LI",{});var Jqe=s(tC);HMe=n(Jqe,"STRONG",{});var $$t=s(HMe);M4r=r($$t,"resnet"),$$t.forEach(t),E4r=r(Jqe," \u2014 "),oJ=n(Jqe,"A",{href:!0});var k$t=s(oJ);C4r=r(k$t,"TFResNetModel"),k$t.forEach(t),w4r=r(Jqe," (ResNet model)"),Jqe.forEach(t),A4r=i(D),aC=n(D,"LI",{});var Yqe=s(aC);UMe=n(Yqe,"STRONG",{});var S$t=s(UMe);L4r=r(S$t,"roberta"),S$t.forEach(t),y4r=r(Yqe," \u2014 "),rJ=n(Yqe,"A",{href:!0});var R$t=s(rJ);x4r=r(R$t,"TFRobertaModel"),R$t.forEach(t),$4r=r(Yqe," (RoBERTa model)"),Yqe.forEach(t),k4r=i(D),nC=n(D,"LI",{});var Kqe=s(nC);JMe=n(Kqe,"STRONG",{});var P$t=s(JMe);S4r=r(P$t,"roformer"),P$t.forEach(t),R4r=r(Kqe," \u2014 "),tJ=n(Kqe,"A",{href:!0});var B$t=s(tJ);P4r=r(B$t,"TFRoFormerModel"),B$t.forEach(t),B4r=r(Kqe," (RoFormer model)"),Kqe.forEach(t),N4r=i(D),sC=n(D,"LI",{});var Zqe=s(sC);YMe=n(Zqe,"STRONG",{});var N$t=s(YMe);I4r=r(N$t,"speech_to_text"),N$t.forEach(t),q4r=r(Zqe," \u2014 "),aJ=n(Zqe,"A",{href:!0});var I$t=s(aJ);j4r=r(I$t,"TFSpeech2TextModel"),I$t.forEach(t),D4r=r(Zqe," (Speech2Text model)"),Zqe.forEach(t),G4r=i(D),lC=n(D,"LI",{});var eje=s(lC);KMe=n(eje,"STRONG",{});var q$t=s(KMe);O4r=r(q$t,"swin"),q$t.forEach(t),V4r=r(eje," \u2014 "),nJ=n(eje,"A",{href:!0});var j$t=s(nJ);X4r=r(j$t,"TFSwinModel"),j$t.forEach(t),z4r=r(eje," (Swin Transformer model)"),eje.forEach(t),Q4r=i(D),iC=n(D,"LI",{});var oje=s(iC);ZMe=n(oje,"STRONG",{});var D$t=s(ZMe);W4r=r(D$t,"t5"),D$t.forEach(t),H4r=r(oje," \u2014 "),sJ=n(oje,"A",{href:!0});var G$t=s(sJ);U4r=r(G$t,"TFT5Model"),G$t.forEach(t),J4r=r(oje," (T5 model)"),oje.forEach(t),Y4r=i(D),dC=n(D,"LI",{});var rje=s(dC);e4e=n(rje,"STRONG",{});var O$t=s(e4e);K4r=r(O$t,"tapas"),O$t.forEach(t),Z4r=r(rje," \u2014 "),lJ=n(rje,"A",{href:!0});var V$t=s(lJ);eEr=r(V$t,"TFTapasModel"),V$t.forEach(t),oEr=r(rje," (TAPAS model)"),rje.forEach(t),rEr=i(D),cC=n(D,"LI",{});var tje=s(cC);o4e=n(tje,"STRONG",{});var X$t=s(o4e);tEr=r(X$t,"transfo-xl"),X$t.forEach(t),aEr=r(tje," \u2014 "),iJ=n(tje,"A",{href:!0});var z$t=s(iJ);nEr=r(z$t,"TFTransfoXLModel"),z$t.forEach(t),sEr=r(tje," (Transformer-XL model)"),tje.forEach(t),lEr=i(D),mC=n(D,"LI",{});var aje=s(mC);r4e=n(aje,"STRONG",{});var Q$t=s(r4e);iEr=r(Q$t,"vit"),Q$t.forEach(t),dEr=r(aje," \u2014 "),dJ=n(aje,"A",{href:!0});var W$t=s(dJ);cEr=r(W$t,"TFViTModel"),W$t.forEach(t),mEr=r(aje," (ViT model)"),aje.forEach(t),fEr=i(D),fC=n(D,"LI",{});var nje=s(fC);t4e=n(nje,"STRONG",{});var H$t=s(t4e);gEr=r(H$t,"vit_mae"),H$t.forEach(t),hEr=r(nje," \u2014 "),cJ=n(nje,"A",{href:!0});var U$t=s(cJ);uEr=r(U$t,"TFViTMAEModel"),U$t.forEach(t),pEr=r(nje," (ViTMAE model)"),nje.forEach(t),_Er=i(D),gC=n(D,"LI",{});var sje=s(gC);a4e=n(sje,"STRONG",{});var J$t=s(a4e);bEr=r(J$t,"wav2vec2"),J$t.forEach(t),vEr=r(sje," \u2014 "),mJ=n(sje,"A",{href:!0});var Y$t=s(mJ);FEr=r(Y$t,"TFWav2Vec2Model"),Y$t.forEach(t),TEr=r(sje," (Wav2Vec2 model)"),sje.forEach(t),MEr=i(D),hC=n(D,"LI",{});var lje=s(hC);n4e=n(lje,"STRONG",{});var K$t=s(n4e);EEr=r(K$t,"xlm"),K$t.forEach(t),CEr=r(lje," \u2014 "),fJ=n(lje,"A",{href:!0});var Z$t=s(fJ);wEr=r(Z$t,"TFXLMModel"),Z$t.forEach(t),AEr=r(lje," (XLM model)"),lje.forEach(t),LEr=i(D),uC=n(D,"LI",{});var ije=s(uC);s4e=n(ije,"STRONG",{});var ekt=s(s4e);yEr=r(ekt,"xlm-roberta"),ekt.forEach(t),xEr=r(ije," \u2014 "),gJ=n(ije,"A",{href:!0});var okt=s(gJ);$Er=r(okt,"TFXLMRobertaModel"),okt.forEach(t),kEr=r(ije," (XLM-RoBERTa model)"),ije.forEach(t),SEr=i(D),pC=n(D,"LI",{});var dje=s(pC);l4e=n(dje,"STRONG",{});var rkt=s(l4e);REr=r(rkt,"xlnet"),rkt.forEach(t),PEr=r(dje," \u2014 "),hJ=n(dje,"A",{href:!0});var tkt=s(hJ);BEr=r(tkt,"TFXLNetModel"),tkt.forEach(t),NEr=r(dje," (XLNet model)"),dje.forEach(t),D.forEach(t),IEr=i(kl),T(_C.$$.fragment,kl),kl.forEach(t),$l.forEach(t),vze=i(m),cc=n(m,"H2",{class:!0});var LWe=s(cc);bC=n(LWe,"A",{id:!0,class:!0,href:!0});var akt=s(bC);i4e=n(akt,"SPAN",{});var nkt=s(i4e);T(K9.$$.fragment,nkt),nkt.forEach(t),akt.forEach(t),qEr=i(LWe),d4e=n(LWe,"SPAN",{});var skt=s(d4e);jEr=r(skt,"TFAutoModelForPreTraining"),skt.forEach(t),LWe.forEach(t),Fze=i(m),rr=n(m,"DIV",{class:!0});var Sl=s(rr);T(Z9.$$.fragment,Sl),DEr=i(Sl),mc=n(Sl,"P",{});var Nte=s(mc);GEr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=n(Nte,"A",{href:!0});var lkt=s(uJ);OEr=r(lkt,"from_pretrained()"),lkt.forEach(t),VEr=r(Nte," class method or the "),pJ=n(Nte,"A",{href:!0});var ikt=s(pJ);XEr=r(ikt,"from_config()"),ikt.forEach(t),zEr=r(Nte,` class
method.`),Nte.forEach(t),QEr=i(Sl),ex=n(Sl,"P",{});var yWe=s(ex);WEr=r(yWe,"This class cannot be instantiated directly using "),c4e=n(yWe,"CODE",{});var dkt=s(c4e);HEr=r(dkt,"__init__()"),dkt.forEach(t),UEr=r(yWe," (throws an error)."),yWe.forEach(t),JEr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var lL=s(Pt);T(ox.$$.fragment,lL),YEr=i(lL),m4e=n(lL,"P",{});var ckt=s(m4e);KEr=r(ckt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ckt.forEach(t),ZEr=i(lL),fc=n(lL,"P",{});var Ite=s(fc);eCr=r(Ite,`Note:
Loading a model from its configuration file does `),f4e=n(Ite,"STRONG",{});var mkt=s(f4e);oCr=r(mkt,"not"),mkt.forEach(t),rCr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Ite,"A",{href:!0});var fkt=s(_J);tCr=r(fkt,"from_pretrained()"),fkt.forEach(t),aCr=r(Ite," to load the model weights."),Ite.forEach(t),nCr=i(lL),T(vC.$$.fragment,lL),lL.forEach(t),sCr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(rx.$$.fragment,Rl),lCr=i(Rl),g4e=n(Rl,"P",{});var gkt=s(g4e);iCr=r(gkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gkt.forEach(t),dCr=i(Rl),ln=n(Rl,"P",{});var iL=s(ln);cCr=r(iL,"The model class to instantiate is selected based on the "),h4e=n(iL,"CODE",{});var hkt=s(h4e);mCr=r(hkt,"model_type"),hkt.forEach(t),fCr=r(iL,` property of the config object (either
passed as an argument or loaded from `),u4e=n(iL,"CODE",{});var ukt=s(u4e);gCr=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),hCr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(iL,"CODE",{});var pkt=s(p4e);uCr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),pCr=r(iL,":"),iL.forEach(t),_Cr=i(Rl),se=n(Rl,"UL",{});var le=s(se);FC=n(le,"LI",{});var cje=s(FC);_4e=n(cje,"STRONG",{});var _kt=s(_4e);bCr=r(_kt,"albert"),_kt.forEach(t),vCr=r(cje," \u2014 "),bJ=n(cje,"A",{href:!0});var bkt=s(bJ);FCr=r(bkt,"TFAlbertForPreTraining"),bkt.forEach(t),TCr=r(cje," (ALBERT model)"),cje.forEach(t),MCr=i(le),TC=n(le,"LI",{});var mje=s(TC);b4e=n(mje,"STRONG",{});var vkt=s(b4e);ECr=r(vkt,"bart"),vkt.forEach(t),CCr=r(mje," \u2014 "),vJ=n(mje,"A",{href:!0});var Fkt=s(vJ);wCr=r(Fkt,"TFBartForConditionalGeneration"),Fkt.forEach(t),ACr=r(mje," (BART model)"),mje.forEach(t),LCr=i(le),MC=n(le,"LI",{});var fje=s(MC);v4e=n(fje,"STRONG",{});var Tkt=s(v4e);yCr=r(Tkt,"bert"),Tkt.forEach(t),xCr=r(fje," \u2014 "),FJ=n(fje,"A",{href:!0});var Mkt=s(FJ);$Cr=r(Mkt,"TFBertForPreTraining"),Mkt.forEach(t),kCr=r(fje," (BERT model)"),fje.forEach(t),SCr=i(le),EC=n(le,"LI",{});var gje=s(EC);F4e=n(gje,"STRONG",{});var Ekt=s(F4e);RCr=r(Ekt,"camembert"),Ekt.forEach(t),PCr=r(gje," \u2014 "),TJ=n(gje,"A",{href:!0});var Ckt=s(TJ);BCr=r(Ckt,"TFCamembertForMaskedLM"),Ckt.forEach(t),NCr=r(gje," (CamemBERT model)"),gje.forEach(t),ICr=i(le),CC=n(le,"LI",{});var hje=s(CC);T4e=n(hje,"STRONG",{});var wkt=s(T4e);qCr=r(wkt,"ctrl"),wkt.forEach(t),jCr=r(hje," \u2014 "),MJ=n(hje,"A",{href:!0});var Akt=s(MJ);DCr=r(Akt,"TFCTRLLMHeadModel"),Akt.forEach(t),GCr=r(hje," (CTRL model)"),hje.forEach(t),OCr=i(le),wC=n(le,"LI",{});var uje=s(wC);M4e=n(uje,"STRONG",{});var Lkt=s(M4e);VCr=r(Lkt,"distilbert"),Lkt.forEach(t),XCr=r(uje," \u2014 "),EJ=n(uje,"A",{href:!0});var ykt=s(EJ);zCr=r(ykt,"TFDistilBertForMaskedLM"),ykt.forEach(t),QCr=r(uje," (DistilBERT model)"),uje.forEach(t),WCr=i(le),AC=n(le,"LI",{});var pje=s(AC);E4e=n(pje,"STRONG",{});var xkt=s(E4e);HCr=r(xkt,"electra"),xkt.forEach(t),UCr=r(pje," \u2014 "),CJ=n(pje,"A",{href:!0});var $kt=s(CJ);JCr=r($kt,"TFElectraForPreTraining"),$kt.forEach(t),YCr=r(pje," (ELECTRA model)"),pje.forEach(t),KCr=i(le),LC=n(le,"LI",{});var _je=s(LC);C4e=n(_je,"STRONG",{});var kkt=s(C4e);ZCr=r(kkt,"flaubert"),kkt.forEach(t),e3r=r(_je," \u2014 "),wJ=n(_je,"A",{href:!0});var Skt=s(wJ);o3r=r(Skt,"TFFlaubertWithLMHeadModel"),Skt.forEach(t),r3r=r(_je," (FlauBERT model)"),_je.forEach(t),t3r=i(le),yC=n(le,"LI",{});var bje=s(yC);w4e=n(bje,"STRONG",{});var Rkt=s(w4e);a3r=r(Rkt,"funnel"),Rkt.forEach(t),n3r=r(bje," \u2014 "),AJ=n(bje,"A",{href:!0});var Pkt=s(AJ);s3r=r(Pkt,"TFFunnelForPreTraining"),Pkt.forEach(t),l3r=r(bje," (Funnel Transformer model)"),bje.forEach(t),i3r=i(le),xC=n(le,"LI",{});var vje=s(xC);A4e=n(vje,"STRONG",{});var Bkt=s(A4e);d3r=r(Bkt,"gpt2"),Bkt.forEach(t),c3r=r(vje," \u2014 "),LJ=n(vje,"A",{href:!0});var Nkt=s(LJ);m3r=r(Nkt,"TFGPT2LMHeadModel"),Nkt.forEach(t),f3r=r(vje," (OpenAI GPT-2 model)"),vje.forEach(t),g3r=i(le),$C=n(le,"LI",{});var Fje=s($C);L4e=n(Fje,"STRONG",{});var Ikt=s(L4e);h3r=r(Ikt,"layoutlm"),Ikt.forEach(t),u3r=r(Fje," \u2014 "),yJ=n(Fje,"A",{href:!0});var qkt=s(yJ);p3r=r(qkt,"TFLayoutLMForMaskedLM"),qkt.forEach(t),_3r=r(Fje," (LayoutLM model)"),Fje.forEach(t),b3r=i(le),kC=n(le,"LI",{});var Tje=s(kC);y4e=n(Tje,"STRONG",{});var jkt=s(y4e);v3r=r(jkt,"lxmert"),jkt.forEach(t),F3r=r(Tje," \u2014 "),xJ=n(Tje,"A",{href:!0});var Dkt=s(xJ);T3r=r(Dkt,"TFLxmertForPreTraining"),Dkt.forEach(t),M3r=r(Tje," (LXMERT model)"),Tje.forEach(t),E3r=i(le),SC=n(le,"LI",{});var Mje=s(SC);x4e=n(Mje,"STRONG",{});var Gkt=s(x4e);C3r=r(Gkt,"mobilebert"),Gkt.forEach(t),w3r=r(Mje," \u2014 "),$J=n(Mje,"A",{href:!0});var Okt=s($J);A3r=r(Okt,"TFMobileBertForPreTraining"),Okt.forEach(t),L3r=r(Mje," (MobileBERT model)"),Mje.forEach(t),y3r=i(le),RC=n(le,"LI",{});var Eje=s(RC);$4e=n(Eje,"STRONG",{});var Vkt=s($4e);x3r=r(Vkt,"mpnet"),Vkt.forEach(t),$3r=r(Eje," \u2014 "),kJ=n(Eje,"A",{href:!0});var Xkt=s(kJ);k3r=r(Xkt,"TFMPNetForMaskedLM"),Xkt.forEach(t),S3r=r(Eje," (MPNet model)"),Eje.forEach(t),R3r=i(le),PC=n(le,"LI",{});var Cje=s(PC);k4e=n(Cje,"STRONG",{});var zkt=s(k4e);P3r=r(zkt,"openai-gpt"),zkt.forEach(t),B3r=r(Cje," \u2014 "),SJ=n(Cje,"A",{href:!0});var Qkt=s(SJ);N3r=r(Qkt,"TFOpenAIGPTLMHeadModel"),Qkt.forEach(t),I3r=r(Cje," (OpenAI GPT model)"),Cje.forEach(t),q3r=i(le),BC=n(le,"LI",{});var wje=s(BC);S4e=n(wje,"STRONG",{});var Wkt=s(S4e);j3r=r(Wkt,"roberta"),Wkt.forEach(t),D3r=r(wje," \u2014 "),RJ=n(wje,"A",{href:!0});var Hkt=s(RJ);G3r=r(Hkt,"TFRobertaForMaskedLM"),Hkt.forEach(t),O3r=r(wje," (RoBERTa model)"),wje.forEach(t),V3r=i(le),NC=n(le,"LI",{});var Aje=s(NC);R4e=n(Aje,"STRONG",{});var Ukt=s(R4e);X3r=r(Ukt,"t5"),Ukt.forEach(t),z3r=r(Aje," \u2014 "),PJ=n(Aje,"A",{href:!0});var Jkt=s(PJ);Q3r=r(Jkt,"TFT5ForConditionalGeneration"),Jkt.forEach(t),W3r=r(Aje," (T5 model)"),Aje.forEach(t),H3r=i(le),IC=n(le,"LI",{});var Lje=s(IC);P4e=n(Lje,"STRONG",{});var Ykt=s(P4e);U3r=r(Ykt,"tapas"),Ykt.forEach(t),J3r=r(Lje," \u2014 "),BJ=n(Lje,"A",{href:!0});var Kkt=s(BJ);Y3r=r(Kkt,"TFTapasForMaskedLM"),Kkt.forEach(t),K3r=r(Lje," (TAPAS model)"),Lje.forEach(t),Z3r=i(le),qC=n(le,"LI",{});var yje=s(qC);B4e=n(yje,"STRONG",{});var Zkt=s(B4e);e5r=r(Zkt,"transfo-xl"),Zkt.forEach(t),o5r=r(yje," \u2014 "),NJ=n(yje,"A",{href:!0});var eSt=s(NJ);r5r=r(eSt,"TFTransfoXLLMHeadModel"),eSt.forEach(t),t5r=r(yje," (Transformer-XL model)"),yje.forEach(t),a5r=i(le),jC=n(le,"LI",{});var xje=s(jC);N4e=n(xje,"STRONG",{});var oSt=s(N4e);n5r=r(oSt,"vit_mae"),oSt.forEach(t),s5r=r(xje," \u2014 "),IJ=n(xje,"A",{href:!0});var rSt=s(IJ);l5r=r(rSt,"TFViTMAEForPreTraining"),rSt.forEach(t),i5r=r(xje," (ViTMAE model)"),xje.forEach(t),d5r=i(le),DC=n(le,"LI",{});var $je=s(DC);I4e=n($je,"STRONG",{});var tSt=s(I4e);c5r=r(tSt,"xlm"),tSt.forEach(t),m5r=r($je," \u2014 "),qJ=n($je,"A",{href:!0});var aSt=s(qJ);f5r=r(aSt,"TFXLMWithLMHeadModel"),aSt.forEach(t),g5r=r($je," (XLM model)"),$je.forEach(t),h5r=i(le),GC=n(le,"LI",{});var kje=s(GC);q4e=n(kje,"STRONG",{});var nSt=s(q4e);u5r=r(nSt,"xlm-roberta"),nSt.forEach(t),p5r=r(kje," \u2014 "),jJ=n(kje,"A",{href:!0});var sSt=s(jJ);_5r=r(sSt,"TFXLMRobertaForMaskedLM"),sSt.forEach(t),b5r=r(kje," (XLM-RoBERTa model)"),kje.forEach(t),v5r=i(le),OC=n(le,"LI",{});var Sje=s(OC);j4e=n(Sje,"STRONG",{});var lSt=s(j4e);F5r=r(lSt,"xlnet"),lSt.forEach(t),T5r=r(Sje," \u2014 "),DJ=n(Sje,"A",{href:!0});var iSt=s(DJ);M5r=r(iSt,"TFXLNetLMHeadModel"),iSt.forEach(t),E5r=r(Sje," (XLNet model)"),Sje.forEach(t),le.forEach(t),C5r=i(Rl),T(VC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Tze=i(m),gc=n(m,"H2",{class:!0});var xWe=s(gc);XC=n(xWe,"A",{id:!0,class:!0,href:!0});var dSt=s(XC);D4e=n(dSt,"SPAN",{});var cSt=s(D4e);T(tx.$$.fragment,cSt),cSt.forEach(t),dSt.forEach(t),w5r=i(xWe),G4e=n(xWe,"SPAN",{});var mSt=s(G4e);A5r=r(mSt,"TFAutoModelForCausalLM"),mSt.forEach(t),xWe.forEach(t),Mze=i(m),tr=n(m,"DIV",{class:!0});var Pl=s(tr);T(ax.$$.fragment,Pl),L5r=i(Pl),hc=n(Pl,"P",{});var qte=s(hc);y5r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=n(qte,"A",{href:!0});var fSt=s(GJ);x5r=r(fSt,"from_pretrained()"),fSt.forEach(t),$5r=r(qte," class method or the "),OJ=n(qte,"A",{href:!0});var gSt=s(OJ);k5r=r(gSt,"from_config()"),gSt.forEach(t),S5r=r(qte,` class
method.`),qte.forEach(t),R5r=i(Pl),nx=n(Pl,"P",{});var $We=s(nx);P5r=r($We,"This class cannot be instantiated directly using "),O4e=n($We,"CODE",{});var hSt=s(O4e);B5r=r(hSt,"__init__()"),hSt.forEach(t),N5r=r($We," (throws an error)."),$We.forEach(t),I5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var dL=s(Bt);T(sx.$$.fragment,dL),q5r=i(dL),V4e=n(dL,"P",{});var uSt=s(V4e);j5r=r(uSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uSt.forEach(t),D5r=i(dL),uc=n(dL,"P",{});var jte=s(uc);G5r=r(jte,`Note:
Loading a model from its configuration file does `),X4e=n(jte,"STRONG",{});var pSt=s(X4e);O5r=r(pSt,"not"),pSt.forEach(t),V5r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(jte,"A",{href:!0});var _St=s(VJ);X5r=r(_St,"from_pretrained()"),_St.forEach(t),z5r=r(jte," to load the model weights."),jte.forEach(t),Q5r=i(dL),T(zC.$$.fragment,dL),dL.forEach(t),W5r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(lx.$$.fragment,Bl),H5r=i(Bl),z4e=n(Bl,"P",{});var bSt=s(z4e);U5r=r(bSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bSt.forEach(t),J5r=i(Bl),dn=n(Bl,"P",{});var cL=s(dn);Y5r=r(cL,"The model class to instantiate is selected based on the "),Q4e=n(cL,"CODE",{});var vSt=s(Q4e);K5r=r(vSt,"model_type"),vSt.forEach(t),Z5r=r(cL,` property of the config object (either
passed as an argument or loaded from `),W4e=n(cL,"CODE",{});var FSt=s(W4e);e0r=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),o0r=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(cL,"CODE",{});var TSt=s(H4e);r0r=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),t0r=r(cL,":"),cL.forEach(t),a0r=i(Bl),Me=n(Bl,"UL",{});var Ce=s(Me);QC=n(Ce,"LI",{});var Rje=s(QC);U4e=n(Rje,"STRONG",{});var MSt=s(U4e);n0r=r(MSt,"bert"),MSt.forEach(t),s0r=r(Rje," \u2014 "),XJ=n(Rje,"A",{href:!0});var ESt=s(XJ);l0r=r(ESt,"TFBertLMHeadModel"),ESt.forEach(t),i0r=r(Rje," (BERT model)"),Rje.forEach(t),d0r=i(Ce),WC=n(Ce,"LI",{});var Pje=s(WC);J4e=n(Pje,"STRONG",{});var CSt=s(J4e);c0r=r(CSt,"camembert"),CSt.forEach(t),m0r=r(Pje," \u2014 "),zJ=n(Pje,"A",{href:!0});var wSt=s(zJ);f0r=r(wSt,"TFCamembertForCausalLM"),wSt.forEach(t),g0r=r(Pje," (CamemBERT model)"),Pje.forEach(t),h0r=i(Ce),HC=n(Ce,"LI",{});var Bje=s(HC);Y4e=n(Bje,"STRONG",{});var ASt=s(Y4e);u0r=r(ASt,"ctrl"),ASt.forEach(t),p0r=r(Bje," \u2014 "),QJ=n(Bje,"A",{href:!0});var LSt=s(QJ);_0r=r(LSt,"TFCTRLLMHeadModel"),LSt.forEach(t),b0r=r(Bje," (CTRL model)"),Bje.forEach(t),v0r=i(Ce),UC=n(Ce,"LI",{});var Nje=s(UC);K4e=n(Nje,"STRONG",{});var ySt=s(K4e);F0r=r(ySt,"gpt2"),ySt.forEach(t),T0r=r(Nje," \u2014 "),WJ=n(Nje,"A",{href:!0});var xSt=s(WJ);M0r=r(xSt,"TFGPT2LMHeadModel"),xSt.forEach(t),E0r=r(Nje," (OpenAI GPT-2 model)"),Nje.forEach(t),C0r=i(Ce),JC=n(Ce,"LI",{});var Ije=s(JC);Z4e=n(Ije,"STRONG",{});var $St=s(Z4e);w0r=r($St,"gptj"),$St.forEach(t),A0r=r(Ije," \u2014 "),HJ=n(Ije,"A",{href:!0});var kSt=s(HJ);L0r=r(kSt,"TFGPTJForCausalLM"),kSt.forEach(t),y0r=r(Ije," (GPT-J model)"),Ije.forEach(t),x0r=i(Ce),YC=n(Ce,"LI",{});var qje=s(YC);eEe=n(qje,"STRONG",{});var SSt=s(eEe);$0r=r(SSt,"openai-gpt"),SSt.forEach(t),k0r=r(qje," \u2014 "),UJ=n(qje,"A",{href:!0});var RSt=s(UJ);S0r=r(RSt,"TFOpenAIGPTLMHeadModel"),RSt.forEach(t),R0r=r(qje," (OpenAI GPT model)"),qje.forEach(t),P0r=i(Ce),KC=n(Ce,"LI",{});var jje=s(KC);oEe=n(jje,"STRONG",{});var PSt=s(oEe);B0r=r(PSt,"opt"),PSt.forEach(t),N0r=r(jje," \u2014 "),JJ=n(jje,"A",{href:!0});var BSt=s(JJ);I0r=r(BSt,"TFOPTForCausalLM"),BSt.forEach(t),q0r=r(jje," (OPT model)"),jje.forEach(t),j0r=i(Ce),ZC=n(Ce,"LI",{});var Dje=s(ZC);rEe=n(Dje,"STRONG",{});var NSt=s(rEe);D0r=r(NSt,"rembert"),NSt.forEach(t),G0r=r(Dje," \u2014 "),YJ=n(Dje,"A",{href:!0});var ISt=s(YJ);O0r=r(ISt,"TFRemBertForCausalLM"),ISt.forEach(t),V0r=r(Dje," (RemBERT model)"),Dje.forEach(t),X0r=i(Ce),e3=n(Ce,"LI",{});var Gje=s(e3);tEe=n(Gje,"STRONG",{});var qSt=s(tEe);z0r=r(qSt,"roberta"),qSt.forEach(t),Q0r=r(Gje," \u2014 "),KJ=n(Gje,"A",{href:!0});var jSt=s(KJ);W0r=r(jSt,"TFRobertaForCausalLM"),jSt.forEach(t),H0r=r(Gje," (RoBERTa model)"),Gje.forEach(t),U0r=i(Ce),o3=n(Ce,"LI",{});var Oje=s(o3);aEe=n(Oje,"STRONG",{});var DSt=s(aEe);J0r=r(DSt,"roformer"),DSt.forEach(t),Y0r=r(Oje," \u2014 "),ZJ=n(Oje,"A",{href:!0});var GSt=s(ZJ);K0r=r(GSt,"TFRoFormerForCausalLM"),GSt.forEach(t),Z0r=r(Oje," (RoFormer model)"),Oje.forEach(t),ewr=i(Ce),r3=n(Ce,"LI",{});var Vje=s(r3);nEe=n(Vje,"STRONG",{});var OSt=s(nEe);owr=r(OSt,"transfo-xl"),OSt.forEach(t),rwr=r(Vje," \u2014 "),eY=n(Vje,"A",{href:!0});var VSt=s(eY);twr=r(VSt,"TFTransfoXLLMHeadModel"),VSt.forEach(t),awr=r(Vje," (Transformer-XL model)"),Vje.forEach(t),nwr=i(Ce),t3=n(Ce,"LI",{});var Xje=s(t3);sEe=n(Xje,"STRONG",{});var XSt=s(sEe);swr=r(XSt,"xlm"),XSt.forEach(t),lwr=r(Xje," \u2014 "),oY=n(Xje,"A",{href:!0});var zSt=s(oY);iwr=r(zSt,"TFXLMWithLMHeadModel"),zSt.forEach(t),dwr=r(Xje," (XLM model)"),Xje.forEach(t),cwr=i(Ce),a3=n(Ce,"LI",{});var zje=s(a3);lEe=n(zje,"STRONG",{});var QSt=s(lEe);mwr=r(QSt,"xlnet"),QSt.forEach(t),fwr=r(zje," \u2014 "),rY=n(zje,"A",{href:!0});var WSt=s(rY);gwr=r(WSt,"TFXLNetLMHeadModel"),WSt.forEach(t),hwr=r(zje," (XLNet model)"),zje.forEach(t),Ce.forEach(t),uwr=i(Bl),T(n3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Eze=i(m),pc=n(m,"H2",{class:!0});var kWe=s(pc);s3=n(kWe,"A",{id:!0,class:!0,href:!0});var HSt=s(s3);iEe=n(HSt,"SPAN",{});var USt=s(iEe);T(ix.$$.fragment,USt),USt.forEach(t),HSt.forEach(t),pwr=i(kWe),dEe=n(kWe,"SPAN",{});var JSt=s(dEe);_wr=r(JSt,"TFAutoModelForImageClassification"),JSt.forEach(t),kWe.forEach(t),Cze=i(m),ar=n(m,"DIV",{class:!0});var Nl=s(ar);T(dx.$$.fragment,Nl),bwr=i(Nl),_c=n(Nl,"P",{});var Dte=s(_c);vwr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tY=n(Dte,"A",{href:!0});var YSt=s(tY);Fwr=r(YSt,"from_pretrained()"),YSt.forEach(t),Twr=r(Dte," class method or the "),aY=n(Dte,"A",{href:!0});var KSt=s(aY);Mwr=r(KSt,"from_config()"),KSt.forEach(t),Ewr=r(Dte,` class
method.`),Dte.forEach(t),Cwr=i(Nl),cx=n(Nl,"P",{});var SWe=s(cx);wwr=r(SWe,"This class cannot be instantiated directly using "),cEe=n(SWe,"CODE",{});var ZSt=s(cEe);Awr=r(ZSt,"__init__()"),ZSt.forEach(t),Lwr=r(SWe," (throws an error)."),SWe.forEach(t),ywr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var mL=s(Nt);T(mx.$$.fragment,mL),xwr=i(mL),mEe=n(mL,"P",{});var eRt=s(mEe);$wr=r(eRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eRt.forEach(t),kwr=i(mL),bc=n(mL,"P",{});var Gte=s(bc);Swr=r(Gte,`Note:
Loading a model from its configuration file does `),fEe=n(Gte,"STRONG",{});var oRt=s(fEe);Rwr=r(oRt,"not"),oRt.forEach(t),Pwr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(Gte,"A",{href:!0});var rRt=s(nY);Bwr=r(rRt,"from_pretrained()"),rRt.forEach(t),Nwr=r(Gte," to load the model weights."),Gte.forEach(t),Iwr=i(mL),T(l3.$$.fragment,mL),mL.forEach(t),qwr=i(Nl),Sr=n(Nl,"DIV",{class:!0});var Il=s(Sr);T(fx.$$.fragment,Il),jwr=i(Il),gEe=n(Il,"P",{});var tRt=s(gEe);Dwr=r(tRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tRt.forEach(t),Gwr=i(Il),cn=n(Il,"P",{});var fL=s(cn);Owr=r(fL,"The model class to instantiate is selected based on the "),hEe=n(fL,"CODE",{});var aRt=s(hEe);Vwr=r(aRt,"model_type"),aRt.forEach(t),Xwr=r(fL,` property of the config object (either
passed as an argument or loaded from `),uEe=n(fL,"CODE",{});var nRt=s(uEe);zwr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),Qwr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(fL,"CODE",{});var sRt=s(pEe);Wwr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),Hwr=r(fL,":"),fL.forEach(t),Uwr=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);i3=n(ot,"LI",{});var Qje=s(i3);_Ee=n(Qje,"STRONG",{});var lRt=s(_Ee);Jwr=r(lRt,"convnext"),lRt.forEach(t),Ywr=r(Qje," \u2014 "),sY=n(Qje,"A",{href:!0});var iRt=s(sY);Kwr=r(iRt,"TFConvNextForImageClassification"),iRt.forEach(t),Zwr=r(Qje," (ConvNeXT model)"),Qje.forEach(t),eAr=i(ot),d3=n(ot,"LI",{});var Wje=s(d3);bEe=n(Wje,"STRONG",{});var dRt=s(bEe);oAr=r(dRt,"data2vec-vision"),dRt.forEach(t),rAr=r(Wje," \u2014 "),lY=n(Wje,"A",{href:!0});var cRt=s(lY);tAr=r(cRt,"TFData2VecVisionForImageClassification"),cRt.forEach(t),aAr=r(Wje," (Data2VecVision model)"),Wje.forEach(t),nAr=i(ot),Ks=n(ot,"LI",{});var qS=s(Ks);vEe=n(qS,"STRONG",{});var mRt=s(vEe);sAr=r(mRt,"deit"),mRt.forEach(t),lAr=r(qS," \u2014 "),iY=n(qS,"A",{href:!0});var fRt=s(iY);iAr=r(fRt,"TFDeiTForImageClassification"),fRt.forEach(t),dAr=r(qS," or "),dY=n(qS,"A",{href:!0});var gRt=s(dY);cAr=r(gRt,"TFDeiTForImageClassificationWithTeacher"),gRt.forEach(t),mAr=r(qS," (DeiT model)"),qS.forEach(t),fAr=i(ot),c3=n(ot,"LI",{});var Hje=s(c3);FEe=n(Hje,"STRONG",{});var hRt=s(FEe);gAr=r(hRt,"regnet"),hRt.forEach(t),hAr=r(Hje," \u2014 "),cY=n(Hje,"A",{href:!0});var uRt=s(cY);uAr=r(uRt,"TFRegNetForImageClassification"),uRt.forEach(t),pAr=r(Hje," (RegNet model)"),Hje.forEach(t),_Ar=i(ot),m3=n(ot,"LI",{});var Uje=s(m3);TEe=n(Uje,"STRONG",{});var pRt=s(TEe);bAr=r(pRt,"resnet"),pRt.forEach(t),vAr=r(Uje," \u2014 "),mY=n(Uje,"A",{href:!0});var _Rt=s(mY);FAr=r(_Rt,"TFResNetForImageClassification"),_Rt.forEach(t),TAr=r(Uje," (ResNet model)"),Uje.forEach(t),MAr=i(ot),f3=n(ot,"LI",{});var Jje=s(f3);MEe=n(Jje,"STRONG",{});var bRt=s(MEe);EAr=r(bRt,"swin"),bRt.forEach(t),CAr=r(Jje," \u2014 "),fY=n(Jje,"A",{href:!0});var vRt=s(fY);wAr=r(vRt,"TFSwinForImageClassification"),vRt.forEach(t),AAr=r(Jje," (Swin Transformer model)"),Jje.forEach(t),LAr=i(ot),g3=n(ot,"LI",{});var Yje=s(g3);EEe=n(Yje,"STRONG",{});var FRt=s(EEe);yAr=r(FRt,"vit"),FRt.forEach(t),xAr=r(Yje," \u2014 "),gY=n(Yje,"A",{href:!0});var TRt=s(gY);$Ar=r(TRt,"TFViTForImageClassification"),TRt.forEach(t),kAr=r(Yje," (ViT model)"),Yje.forEach(t),ot.forEach(t),SAr=i(Il),T(h3.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),wze=i(m),vc=n(m,"H2",{class:!0});var RWe=s(vc);u3=n(RWe,"A",{id:!0,class:!0,href:!0});var MRt=s(u3);CEe=n(MRt,"SPAN",{});var ERt=s(CEe);T(gx.$$.fragment,ERt),ERt.forEach(t),MRt.forEach(t),RAr=i(RWe),wEe=n(RWe,"SPAN",{});var CRt=s(wEe);PAr=r(CRt,"TFAutoModelForMaskedLM"),CRt.forEach(t),RWe.forEach(t),Aze=i(m),nr=n(m,"DIV",{class:!0});var ql=s(nr);T(hx.$$.fragment,ql),BAr=i(ql),Fc=n(ql,"P",{});var Ote=s(Fc);NAr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hY=n(Ote,"A",{href:!0});var wRt=s(hY);IAr=r(wRt,"from_pretrained()"),wRt.forEach(t),qAr=r(Ote," class method or the "),uY=n(Ote,"A",{href:!0});var ARt=s(uY);jAr=r(ARt,"from_config()"),ARt.forEach(t),DAr=r(Ote,` class
method.`),Ote.forEach(t),GAr=i(ql),ux=n(ql,"P",{});var PWe=s(ux);OAr=r(PWe,"This class cannot be instantiated directly using "),AEe=n(PWe,"CODE",{});var LRt=s(AEe);VAr=r(LRt,"__init__()"),LRt.forEach(t),XAr=r(PWe," (throws an error)."),PWe.forEach(t),zAr=i(ql),It=n(ql,"DIV",{class:!0});var gL=s(It);T(px.$$.fragment,gL),QAr=i(gL),LEe=n(gL,"P",{});var yRt=s(LEe);WAr=r(yRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yRt.forEach(t),HAr=i(gL),Tc=n(gL,"P",{});var Vte=s(Tc);UAr=r(Vte,`Note:
Loading a model from its configuration file does `),yEe=n(Vte,"STRONG",{});var xRt=s(yEe);JAr=r(xRt,"not"),xRt.forEach(t),YAr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Vte,"A",{href:!0});var $Rt=s(pY);KAr=r($Rt,"from_pretrained()"),$Rt.forEach(t),ZAr=r(Vte," to load the model weights."),Vte.forEach(t),e6r=i(gL),T(p3.$$.fragment,gL),gL.forEach(t),o6r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(_x.$$.fragment,jl),r6r=i(jl),xEe=n(jl,"P",{});var kRt=s(xEe);t6r=r(kRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kRt.forEach(t),a6r=i(jl),mn=n(jl,"P",{});var hL=s(mn);n6r=r(hL,"The model class to instantiate is selected based on the "),$Ee=n(hL,"CODE",{});var SRt=s($Ee);s6r=r(SRt,"model_type"),SRt.forEach(t),l6r=r(hL,` property of the config object (either
passed as an argument or loaded from `),kEe=n(hL,"CODE",{});var RRt=s(kEe);i6r=r(RRt,"pretrained_model_name_or_path"),RRt.forEach(t),d6r=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=n(hL,"CODE",{});var PRt=s(SEe);c6r=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),m6r=r(hL,":"),hL.forEach(t),f6r=i(jl),ie=n(jl,"UL",{});var fe=s(ie);_3=n(fe,"LI",{});var Kje=s(_3);REe=n(Kje,"STRONG",{});var BRt=s(REe);g6r=r(BRt,"albert"),BRt.forEach(t),h6r=r(Kje," \u2014 "),_Y=n(Kje,"A",{href:!0});var NRt=s(_Y);u6r=r(NRt,"TFAlbertForMaskedLM"),NRt.forEach(t),p6r=r(Kje," (ALBERT model)"),Kje.forEach(t),_6r=i(fe),b3=n(fe,"LI",{});var Zje=s(b3);PEe=n(Zje,"STRONG",{});var IRt=s(PEe);b6r=r(IRt,"bert"),IRt.forEach(t),v6r=r(Zje," \u2014 "),bY=n(Zje,"A",{href:!0});var qRt=s(bY);F6r=r(qRt,"TFBertForMaskedLM"),qRt.forEach(t),T6r=r(Zje," (BERT model)"),Zje.forEach(t),M6r=i(fe),v3=n(fe,"LI",{});var eDe=s(v3);BEe=n(eDe,"STRONG",{});var jRt=s(BEe);E6r=r(jRt,"camembert"),jRt.forEach(t),C6r=r(eDe," \u2014 "),vY=n(eDe,"A",{href:!0});var DRt=s(vY);w6r=r(DRt,"TFCamembertForMaskedLM"),DRt.forEach(t),A6r=r(eDe," (CamemBERT model)"),eDe.forEach(t),L6r=i(fe),F3=n(fe,"LI",{});var oDe=s(F3);NEe=n(oDe,"STRONG",{});var GRt=s(NEe);y6r=r(GRt,"convbert"),GRt.forEach(t),x6r=r(oDe," \u2014 "),FY=n(oDe,"A",{href:!0});var ORt=s(FY);$6r=r(ORt,"TFConvBertForMaskedLM"),ORt.forEach(t),k6r=r(oDe," (ConvBERT model)"),oDe.forEach(t),S6r=i(fe),T3=n(fe,"LI",{});var rDe=s(T3);IEe=n(rDe,"STRONG",{});var VRt=s(IEe);R6r=r(VRt,"deberta"),VRt.forEach(t),P6r=r(rDe," \u2014 "),TY=n(rDe,"A",{href:!0});var XRt=s(TY);B6r=r(XRt,"TFDebertaForMaskedLM"),XRt.forEach(t),N6r=r(rDe," (DeBERTa model)"),rDe.forEach(t),I6r=i(fe),M3=n(fe,"LI",{});var tDe=s(M3);qEe=n(tDe,"STRONG",{});var zRt=s(qEe);q6r=r(zRt,"deberta-v2"),zRt.forEach(t),j6r=r(tDe," \u2014 "),MY=n(tDe,"A",{href:!0});var QRt=s(MY);D6r=r(QRt,"TFDebertaV2ForMaskedLM"),QRt.forEach(t),G6r=r(tDe," (DeBERTa-v2 model)"),tDe.forEach(t),O6r=i(fe),E3=n(fe,"LI",{});var aDe=s(E3);jEe=n(aDe,"STRONG",{});var WRt=s(jEe);V6r=r(WRt,"distilbert"),WRt.forEach(t),X6r=r(aDe," \u2014 "),EY=n(aDe,"A",{href:!0});var HRt=s(EY);z6r=r(HRt,"TFDistilBertForMaskedLM"),HRt.forEach(t),Q6r=r(aDe," (DistilBERT model)"),aDe.forEach(t),W6r=i(fe),C3=n(fe,"LI",{});var nDe=s(C3);DEe=n(nDe,"STRONG",{});var URt=s(DEe);H6r=r(URt,"electra"),URt.forEach(t),U6r=r(nDe," \u2014 "),CY=n(nDe,"A",{href:!0});var JRt=s(CY);J6r=r(JRt,"TFElectraForMaskedLM"),JRt.forEach(t),Y6r=r(nDe," (ELECTRA model)"),nDe.forEach(t),K6r=i(fe),w3=n(fe,"LI",{});var sDe=s(w3);GEe=n(sDe,"STRONG",{});var YRt=s(GEe);Z6r=r(YRt,"flaubert"),YRt.forEach(t),e7r=r(sDe," \u2014 "),wY=n(sDe,"A",{href:!0});var KRt=s(wY);o7r=r(KRt,"TFFlaubertWithLMHeadModel"),KRt.forEach(t),r7r=r(sDe," (FlauBERT model)"),sDe.forEach(t),t7r=i(fe),A3=n(fe,"LI",{});var lDe=s(A3);OEe=n(lDe,"STRONG",{});var ZRt=s(OEe);a7r=r(ZRt,"funnel"),ZRt.forEach(t),n7r=r(lDe," \u2014 "),AY=n(lDe,"A",{href:!0});var ePt=s(AY);s7r=r(ePt,"TFFunnelForMaskedLM"),ePt.forEach(t),l7r=r(lDe," (Funnel Transformer model)"),lDe.forEach(t),i7r=i(fe),L3=n(fe,"LI",{});var iDe=s(L3);VEe=n(iDe,"STRONG",{});var oPt=s(VEe);d7r=r(oPt,"layoutlm"),oPt.forEach(t),c7r=r(iDe," \u2014 "),LY=n(iDe,"A",{href:!0});var rPt=s(LY);m7r=r(rPt,"TFLayoutLMForMaskedLM"),rPt.forEach(t),f7r=r(iDe," (LayoutLM model)"),iDe.forEach(t),g7r=i(fe),y3=n(fe,"LI",{});var dDe=s(y3);XEe=n(dDe,"STRONG",{});var tPt=s(XEe);h7r=r(tPt,"longformer"),tPt.forEach(t),u7r=r(dDe," \u2014 "),yY=n(dDe,"A",{href:!0});var aPt=s(yY);p7r=r(aPt,"TFLongformerForMaskedLM"),aPt.forEach(t),_7r=r(dDe," (Longformer model)"),dDe.forEach(t),b7r=i(fe),x3=n(fe,"LI",{});var cDe=s(x3);zEe=n(cDe,"STRONG",{});var nPt=s(zEe);v7r=r(nPt,"mobilebert"),nPt.forEach(t),F7r=r(cDe," \u2014 "),xY=n(cDe,"A",{href:!0});var sPt=s(xY);T7r=r(sPt,"TFMobileBertForMaskedLM"),sPt.forEach(t),M7r=r(cDe," (MobileBERT model)"),cDe.forEach(t),E7r=i(fe),$3=n(fe,"LI",{});var mDe=s($3);QEe=n(mDe,"STRONG",{});var lPt=s(QEe);C7r=r(lPt,"mpnet"),lPt.forEach(t),w7r=r(mDe," \u2014 "),$Y=n(mDe,"A",{href:!0});var iPt=s($Y);A7r=r(iPt,"TFMPNetForMaskedLM"),iPt.forEach(t),L7r=r(mDe," (MPNet model)"),mDe.forEach(t),y7r=i(fe),k3=n(fe,"LI",{});var fDe=s(k3);WEe=n(fDe,"STRONG",{});var dPt=s(WEe);x7r=r(dPt,"rembert"),dPt.forEach(t),$7r=r(fDe," \u2014 "),kY=n(fDe,"A",{href:!0});var cPt=s(kY);k7r=r(cPt,"TFRemBertForMaskedLM"),cPt.forEach(t),S7r=r(fDe," (RemBERT model)"),fDe.forEach(t),R7r=i(fe),S3=n(fe,"LI",{});var gDe=s(S3);HEe=n(gDe,"STRONG",{});var mPt=s(HEe);P7r=r(mPt,"roberta"),mPt.forEach(t),B7r=r(gDe," \u2014 "),SY=n(gDe,"A",{href:!0});var fPt=s(SY);N7r=r(fPt,"TFRobertaForMaskedLM"),fPt.forEach(t),I7r=r(gDe," (RoBERTa model)"),gDe.forEach(t),q7r=i(fe),R3=n(fe,"LI",{});var hDe=s(R3);UEe=n(hDe,"STRONG",{});var gPt=s(UEe);j7r=r(gPt,"roformer"),gPt.forEach(t),D7r=r(hDe," \u2014 "),RY=n(hDe,"A",{href:!0});var hPt=s(RY);G7r=r(hPt,"TFRoFormerForMaskedLM"),hPt.forEach(t),O7r=r(hDe," (RoFormer model)"),hDe.forEach(t),V7r=i(fe),P3=n(fe,"LI",{});var uDe=s(P3);JEe=n(uDe,"STRONG",{});var uPt=s(JEe);X7r=r(uPt,"tapas"),uPt.forEach(t),z7r=r(uDe," \u2014 "),PY=n(uDe,"A",{href:!0});var pPt=s(PY);Q7r=r(pPt,"TFTapasForMaskedLM"),pPt.forEach(t),W7r=r(uDe," (TAPAS model)"),uDe.forEach(t),H7r=i(fe),B3=n(fe,"LI",{});var pDe=s(B3);YEe=n(pDe,"STRONG",{});var _Pt=s(YEe);U7r=r(_Pt,"xlm"),_Pt.forEach(t),J7r=r(pDe," \u2014 "),BY=n(pDe,"A",{href:!0});var bPt=s(BY);Y7r=r(bPt,"TFXLMWithLMHeadModel"),bPt.forEach(t),K7r=r(pDe," (XLM model)"),pDe.forEach(t),Z7r=i(fe),N3=n(fe,"LI",{});var _De=s(N3);KEe=n(_De,"STRONG",{});var vPt=s(KEe);eLr=r(vPt,"xlm-roberta"),vPt.forEach(t),oLr=r(_De," \u2014 "),NY=n(_De,"A",{href:!0});var FPt=s(NY);rLr=r(FPt,"TFXLMRobertaForMaskedLM"),FPt.forEach(t),tLr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),fe.forEach(t),aLr=i(jl),T(I3.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Lze=i(m),Mc=n(m,"H2",{class:!0});var BWe=s(Mc);q3=n(BWe,"A",{id:!0,class:!0,href:!0});var TPt=s(q3);ZEe=n(TPt,"SPAN",{});var MPt=s(ZEe);T(bx.$$.fragment,MPt),MPt.forEach(t),TPt.forEach(t),nLr=i(BWe),eCe=n(BWe,"SPAN",{});var EPt=s(eCe);sLr=r(EPt,"TFAutoModelForSeq2SeqLM"),EPt.forEach(t),BWe.forEach(t),yze=i(m),sr=n(m,"DIV",{class:!0});var Dl=s(sr);T(vx.$$.fragment,Dl),lLr=i(Dl),Ec=n(Dl,"P",{});var Xte=s(Ec);iLr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IY=n(Xte,"A",{href:!0});var CPt=s(IY);dLr=r(CPt,"from_pretrained()"),CPt.forEach(t),cLr=r(Xte," class method or the "),qY=n(Xte,"A",{href:!0});var wPt=s(qY);mLr=r(wPt,"from_config()"),wPt.forEach(t),fLr=r(Xte,` class
method.`),Xte.forEach(t),gLr=i(Dl),Fx=n(Dl,"P",{});var NWe=s(Fx);hLr=r(NWe,"This class cannot be instantiated directly using "),oCe=n(NWe,"CODE",{});var APt=s(oCe);uLr=r(APt,"__init__()"),APt.forEach(t),pLr=r(NWe," (throws an error)."),NWe.forEach(t),_Lr=i(Dl),qt=n(Dl,"DIV",{class:!0});var uL=s(qt);T(Tx.$$.fragment,uL),bLr=i(uL),rCe=n(uL,"P",{});var LPt=s(rCe);vLr=r(LPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LPt.forEach(t),FLr=i(uL),Cc=n(uL,"P",{});var zte=s(Cc);TLr=r(zte,`Note:
Loading a model from its configuration file does `),tCe=n(zte,"STRONG",{});var yPt=s(tCe);MLr=r(yPt,"not"),yPt.forEach(t),ELr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(zte,"A",{href:!0});var xPt=s(jY);CLr=r(xPt,"from_pretrained()"),xPt.forEach(t),wLr=r(zte," to load the model weights."),zte.forEach(t),ALr=i(uL),T(j3.$$.fragment,uL),uL.forEach(t),LLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Mx.$$.fragment,Gl),yLr=i(Gl),aCe=n(Gl,"P",{});var $Pt=s(aCe);xLr=r($Pt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Pt.forEach(t),$Lr=i(Gl),fn=n(Gl,"P",{});var pL=s(fn);kLr=r(pL,"The model class to instantiate is selected based on the "),nCe=n(pL,"CODE",{});var kPt=s(nCe);SLr=r(kPt,"model_type"),kPt.forEach(t),RLr=r(pL,` property of the config object (either
passed as an argument or loaded from `),sCe=n(pL,"CODE",{});var SPt=s(sCe);PLr=r(SPt,"pretrained_model_name_or_path"),SPt.forEach(t),BLr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(pL,"CODE",{});var RPt=s(lCe);NLr=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),ILr=r(pL,":"),pL.forEach(t),qLr=i(Gl),ye=n(Gl,"UL",{});var Ne=s(ye);D3=n(Ne,"LI",{});var bDe=s(D3);iCe=n(bDe,"STRONG",{});var PPt=s(iCe);jLr=r(PPt,"bart"),PPt.forEach(t),DLr=r(bDe," \u2014 "),DY=n(bDe,"A",{href:!0});var BPt=s(DY);GLr=r(BPt,"TFBartForConditionalGeneration"),BPt.forEach(t),OLr=r(bDe," (BART model)"),bDe.forEach(t),VLr=i(Ne),G3=n(Ne,"LI",{});var vDe=s(G3);dCe=n(vDe,"STRONG",{});var NPt=s(dCe);XLr=r(NPt,"blenderbot"),NPt.forEach(t),zLr=r(vDe," \u2014 "),GY=n(vDe,"A",{href:!0});var IPt=s(GY);QLr=r(IPt,"TFBlenderbotForConditionalGeneration"),IPt.forEach(t),WLr=r(vDe," (Blenderbot model)"),vDe.forEach(t),HLr=i(Ne),O3=n(Ne,"LI",{});var FDe=s(O3);cCe=n(FDe,"STRONG",{});var qPt=s(cCe);ULr=r(qPt,"blenderbot-small"),qPt.forEach(t),JLr=r(FDe," \u2014 "),OY=n(FDe,"A",{href:!0});var jPt=s(OY);YLr=r(jPt,"TFBlenderbotSmallForConditionalGeneration"),jPt.forEach(t),KLr=r(FDe," (BlenderbotSmall model)"),FDe.forEach(t),ZLr=i(Ne),V3=n(Ne,"LI",{});var TDe=s(V3);mCe=n(TDe,"STRONG",{});var DPt=s(mCe);eyr=r(DPt,"encoder-decoder"),DPt.forEach(t),oyr=r(TDe," \u2014 "),VY=n(TDe,"A",{href:!0});var GPt=s(VY);ryr=r(GPt,"TFEncoderDecoderModel"),GPt.forEach(t),tyr=r(TDe," (Encoder decoder model)"),TDe.forEach(t),ayr=i(Ne),X3=n(Ne,"LI",{});var MDe=s(X3);fCe=n(MDe,"STRONG",{});var OPt=s(fCe);nyr=r(OPt,"led"),OPt.forEach(t),syr=r(MDe," \u2014 "),XY=n(MDe,"A",{href:!0});var VPt=s(XY);lyr=r(VPt,"TFLEDForConditionalGeneration"),VPt.forEach(t),iyr=r(MDe," (LED model)"),MDe.forEach(t),dyr=i(Ne),z3=n(Ne,"LI",{});var EDe=s(z3);gCe=n(EDe,"STRONG",{});var XPt=s(gCe);cyr=r(XPt,"marian"),XPt.forEach(t),myr=r(EDe," \u2014 "),zY=n(EDe,"A",{href:!0});var zPt=s(zY);fyr=r(zPt,"TFMarianMTModel"),zPt.forEach(t),gyr=r(EDe," (Marian model)"),EDe.forEach(t),hyr=i(Ne),Q3=n(Ne,"LI",{});var CDe=s(Q3);hCe=n(CDe,"STRONG",{});var QPt=s(hCe);uyr=r(QPt,"mbart"),QPt.forEach(t),pyr=r(CDe," \u2014 "),QY=n(CDe,"A",{href:!0});var WPt=s(QY);_yr=r(WPt,"TFMBartForConditionalGeneration"),WPt.forEach(t),byr=r(CDe," (mBART model)"),CDe.forEach(t),vyr=i(Ne),W3=n(Ne,"LI",{});var wDe=s(W3);uCe=n(wDe,"STRONG",{});var HPt=s(uCe);Fyr=r(HPt,"mt5"),HPt.forEach(t),Tyr=r(wDe," \u2014 "),WY=n(wDe,"A",{href:!0});var UPt=s(WY);Myr=r(UPt,"TFMT5ForConditionalGeneration"),UPt.forEach(t),Eyr=r(wDe," (MT5 model)"),wDe.forEach(t),Cyr=i(Ne),H3=n(Ne,"LI",{});var ADe=s(H3);pCe=n(ADe,"STRONG",{});var JPt=s(pCe);wyr=r(JPt,"pegasus"),JPt.forEach(t),Ayr=r(ADe," \u2014 "),HY=n(ADe,"A",{href:!0});var YPt=s(HY);Lyr=r(YPt,"TFPegasusForConditionalGeneration"),YPt.forEach(t),yyr=r(ADe," (Pegasus model)"),ADe.forEach(t),xyr=i(Ne),U3=n(Ne,"LI",{});var LDe=s(U3);_Ce=n(LDe,"STRONG",{});var KPt=s(_Ce);$yr=r(KPt,"t5"),KPt.forEach(t),kyr=r(LDe," \u2014 "),UY=n(LDe,"A",{href:!0});var ZPt=s(UY);Syr=r(ZPt,"TFT5ForConditionalGeneration"),ZPt.forEach(t),Ryr=r(LDe," (T5 model)"),LDe.forEach(t),Ne.forEach(t),Pyr=i(Gl),T(J3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),xze=i(m),wc=n(m,"H2",{class:!0});var IWe=s(wc);Y3=n(IWe,"A",{id:!0,class:!0,href:!0});var eBt=s(Y3);bCe=n(eBt,"SPAN",{});var oBt=s(bCe);T(Ex.$$.fragment,oBt),oBt.forEach(t),eBt.forEach(t),Byr=i(IWe),vCe=n(IWe,"SPAN",{});var rBt=s(vCe);Nyr=r(rBt,"TFAutoModelForSequenceClassification"),rBt.forEach(t),IWe.forEach(t),$ze=i(m),lr=n(m,"DIV",{class:!0});var Ol=s(lr);T(Cx.$$.fragment,Ol),Iyr=i(Ol),Ac=n(Ol,"P",{});var Qte=s(Ac);qyr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JY=n(Qte,"A",{href:!0});var tBt=s(JY);jyr=r(tBt,"from_pretrained()"),tBt.forEach(t),Dyr=r(Qte," class method or the "),YY=n(Qte,"A",{href:!0});var aBt=s(YY);Gyr=r(aBt,"from_config()"),aBt.forEach(t),Oyr=r(Qte,` class
method.`),Qte.forEach(t),Vyr=i(Ol),wx=n(Ol,"P",{});var qWe=s(wx);Xyr=r(qWe,"This class cannot be instantiated directly using "),FCe=n(qWe,"CODE",{});var nBt=s(FCe);zyr=r(nBt,"__init__()"),nBt.forEach(t),Qyr=r(qWe," (throws an error)."),qWe.forEach(t),Wyr=i(Ol),jt=n(Ol,"DIV",{class:!0});var _L=s(jt);T(Ax.$$.fragment,_L),Hyr=i(_L),TCe=n(_L,"P",{});var sBt=s(TCe);Uyr=r(sBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sBt.forEach(t),Jyr=i(_L),Lc=n(_L,"P",{});var Wte=s(Lc);Yyr=r(Wte,`Note:
Loading a model from its configuration file does `),MCe=n(Wte,"STRONG",{});var lBt=s(MCe);Kyr=r(lBt,"not"),lBt.forEach(t),Zyr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(Wte,"A",{href:!0});var iBt=s(KY);e8r=r(iBt,"from_pretrained()"),iBt.forEach(t),o8r=r(Wte," to load the model weights."),Wte.forEach(t),r8r=i(_L),T(K3.$$.fragment,_L),_L.forEach(t),t8r=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(Lx.$$.fragment,Vl),a8r=i(Vl),ECe=n(Vl,"P",{});var dBt=s(ECe);n8r=r(dBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dBt.forEach(t),s8r=i(Vl),gn=n(Vl,"P",{});var bL=s(gn);l8r=r(bL,"The model class to instantiate is selected based on the "),CCe=n(bL,"CODE",{});var cBt=s(CCe);i8r=r(cBt,"model_type"),cBt.forEach(t),d8r=r(bL,` property of the config object (either
passed as an argument or loaded from `),wCe=n(bL,"CODE",{});var mBt=s(wCe);c8r=r(mBt,"pretrained_model_name_or_path"),mBt.forEach(t),m8r=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=n(bL,"CODE",{});var fBt=s(ACe);f8r=r(fBt,"pretrained_model_name_or_path"),fBt.forEach(t),g8r=r(bL,":"),bL.forEach(t),h8r=i(Vl),te=n(Vl,"UL",{});var ne=s(te);Z3=n(ne,"LI",{});var yDe=s(Z3);LCe=n(yDe,"STRONG",{});var gBt=s(LCe);u8r=r(gBt,"albert"),gBt.forEach(t),p8r=r(yDe," \u2014 "),ZY=n(yDe,"A",{href:!0});var hBt=s(ZY);_8r=r(hBt,"TFAlbertForSequenceClassification"),hBt.forEach(t),b8r=r(yDe," (ALBERT model)"),yDe.forEach(t),v8r=i(ne),e5=n(ne,"LI",{});var xDe=s(e5);yCe=n(xDe,"STRONG",{});var uBt=s(yCe);F8r=r(uBt,"bert"),uBt.forEach(t),T8r=r(xDe," \u2014 "),eK=n(xDe,"A",{href:!0});var pBt=s(eK);M8r=r(pBt,"TFBertForSequenceClassification"),pBt.forEach(t),E8r=r(xDe," (BERT model)"),xDe.forEach(t),C8r=i(ne),o5=n(ne,"LI",{});var $De=s(o5);xCe=n($De,"STRONG",{});var _Bt=s(xCe);w8r=r(_Bt,"camembert"),_Bt.forEach(t),A8r=r($De," \u2014 "),oK=n($De,"A",{href:!0});var bBt=s(oK);L8r=r(bBt,"TFCamembertForSequenceClassification"),bBt.forEach(t),y8r=r($De," (CamemBERT model)"),$De.forEach(t),x8r=i(ne),r5=n(ne,"LI",{});var kDe=s(r5);$Ce=n(kDe,"STRONG",{});var vBt=s($Ce);$8r=r(vBt,"convbert"),vBt.forEach(t),k8r=r(kDe," \u2014 "),rK=n(kDe,"A",{href:!0});var FBt=s(rK);S8r=r(FBt,"TFConvBertForSequenceClassification"),FBt.forEach(t),R8r=r(kDe," (ConvBERT model)"),kDe.forEach(t),P8r=i(ne),t5=n(ne,"LI",{});var SDe=s(t5);kCe=n(SDe,"STRONG",{});var TBt=s(kCe);B8r=r(TBt,"ctrl"),TBt.forEach(t),N8r=r(SDe," \u2014 "),tK=n(SDe,"A",{href:!0});var MBt=s(tK);I8r=r(MBt,"TFCTRLForSequenceClassification"),MBt.forEach(t),q8r=r(SDe," (CTRL model)"),SDe.forEach(t),j8r=i(ne),a5=n(ne,"LI",{});var RDe=s(a5);SCe=n(RDe,"STRONG",{});var EBt=s(SCe);D8r=r(EBt,"deberta"),EBt.forEach(t),G8r=r(RDe," \u2014 "),aK=n(RDe,"A",{href:!0});var CBt=s(aK);O8r=r(CBt,"TFDebertaForSequenceClassification"),CBt.forEach(t),V8r=r(RDe," (DeBERTa model)"),RDe.forEach(t),X8r=i(ne),n5=n(ne,"LI",{});var PDe=s(n5);RCe=n(PDe,"STRONG",{});var wBt=s(RCe);z8r=r(wBt,"deberta-v2"),wBt.forEach(t),Q8r=r(PDe," \u2014 "),nK=n(PDe,"A",{href:!0});var ABt=s(nK);W8r=r(ABt,"TFDebertaV2ForSequenceClassification"),ABt.forEach(t),H8r=r(PDe," (DeBERTa-v2 model)"),PDe.forEach(t),U8r=i(ne),s5=n(ne,"LI",{});var BDe=s(s5);PCe=n(BDe,"STRONG",{});var LBt=s(PCe);J8r=r(LBt,"distilbert"),LBt.forEach(t),Y8r=r(BDe," \u2014 "),sK=n(BDe,"A",{href:!0});var yBt=s(sK);K8r=r(yBt,"TFDistilBertForSequenceClassification"),yBt.forEach(t),Z8r=r(BDe," (DistilBERT model)"),BDe.forEach(t),e9r=i(ne),l5=n(ne,"LI",{});var NDe=s(l5);BCe=n(NDe,"STRONG",{});var xBt=s(BCe);o9r=r(xBt,"electra"),xBt.forEach(t),r9r=r(NDe," \u2014 "),lK=n(NDe,"A",{href:!0});var $Bt=s(lK);t9r=r($Bt,"TFElectraForSequenceClassification"),$Bt.forEach(t),a9r=r(NDe," (ELECTRA model)"),NDe.forEach(t),n9r=i(ne),i5=n(ne,"LI",{});var IDe=s(i5);NCe=n(IDe,"STRONG",{});var kBt=s(NCe);s9r=r(kBt,"flaubert"),kBt.forEach(t),l9r=r(IDe," \u2014 "),iK=n(IDe,"A",{href:!0});var SBt=s(iK);i9r=r(SBt,"TFFlaubertForSequenceClassification"),SBt.forEach(t),d9r=r(IDe," (FlauBERT model)"),IDe.forEach(t),c9r=i(ne),d5=n(ne,"LI",{});var qDe=s(d5);ICe=n(qDe,"STRONG",{});var RBt=s(ICe);m9r=r(RBt,"funnel"),RBt.forEach(t),f9r=r(qDe," \u2014 "),dK=n(qDe,"A",{href:!0});var PBt=s(dK);g9r=r(PBt,"TFFunnelForSequenceClassification"),PBt.forEach(t),h9r=r(qDe," (Funnel Transformer model)"),qDe.forEach(t),u9r=i(ne),c5=n(ne,"LI",{});var jDe=s(c5);qCe=n(jDe,"STRONG",{});var BBt=s(qCe);p9r=r(BBt,"gpt2"),BBt.forEach(t),_9r=r(jDe," \u2014 "),cK=n(jDe,"A",{href:!0});var NBt=s(cK);b9r=r(NBt,"TFGPT2ForSequenceClassification"),NBt.forEach(t),v9r=r(jDe," (OpenAI GPT-2 model)"),jDe.forEach(t),F9r=i(ne),m5=n(ne,"LI",{});var DDe=s(m5);jCe=n(DDe,"STRONG",{});var IBt=s(jCe);T9r=r(IBt,"gptj"),IBt.forEach(t),M9r=r(DDe," \u2014 "),mK=n(DDe,"A",{href:!0});var qBt=s(mK);E9r=r(qBt,"TFGPTJForSequenceClassification"),qBt.forEach(t),C9r=r(DDe," (GPT-J model)"),DDe.forEach(t),w9r=i(ne),f5=n(ne,"LI",{});var GDe=s(f5);DCe=n(GDe,"STRONG",{});var jBt=s(DCe);A9r=r(jBt,"layoutlm"),jBt.forEach(t),L9r=r(GDe," \u2014 "),fK=n(GDe,"A",{href:!0});var DBt=s(fK);y9r=r(DBt,"TFLayoutLMForSequenceClassification"),DBt.forEach(t),x9r=r(GDe," (LayoutLM model)"),GDe.forEach(t),$9r=i(ne),g5=n(ne,"LI",{});var ODe=s(g5);GCe=n(ODe,"STRONG",{});var GBt=s(GCe);k9r=r(GBt,"longformer"),GBt.forEach(t),S9r=r(ODe," \u2014 "),gK=n(ODe,"A",{href:!0});var OBt=s(gK);R9r=r(OBt,"TFLongformerForSequenceClassification"),OBt.forEach(t),P9r=r(ODe," (Longformer model)"),ODe.forEach(t),B9r=i(ne),h5=n(ne,"LI",{});var VDe=s(h5);OCe=n(VDe,"STRONG",{});var VBt=s(OCe);N9r=r(VBt,"mobilebert"),VBt.forEach(t),I9r=r(VDe," \u2014 "),hK=n(VDe,"A",{href:!0});var XBt=s(hK);q9r=r(XBt,"TFMobileBertForSequenceClassification"),XBt.forEach(t),j9r=r(VDe," (MobileBERT model)"),VDe.forEach(t),D9r=i(ne),u5=n(ne,"LI",{});var XDe=s(u5);VCe=n(XDe,"STRONG",{});var zBt=s(VCe);G9r=r(zBt,"mpnet"),zBt.forEach(t),O9r=r(XDe," \u2014 "),uK=n(XDe,"A",{href:!0});var QBt=s(uK);V9r=r(QBt,"TFMPNetForSequenceClassification"),QBt.forEach(t),X9r=r(XDe," (MPNet model)"),XDe.forEach(t),z9r=i(ne),p5=n(ne,"LI",{});var zDe=s(p5);XCe=n(zDe,"STRONG",{});var WBt=s(XCe);Q9r=r(WBt,"openai-gpt"),WBt.forEach(t),W9r=r(zDe," \u2014 "),pK=n(zDe,"A",{href:!0});var HBt=s(pK);H9r=r(HBt,"TFOpenAIGPTForSequenceClassification"),HBt.forEach(t),U9r=r(zDe," (OpenAI GPT model)"),zDe.forEach(t),J9r=i(ne),_5=n(ne,"LI",{});var QDe=s(_5);zCe=n(QDe,"STRONG",{});var UBt=s(zCe);Y9r=r(UBt,"rembert"),UBt.forEach(t),K9r=r(QDe," \u2014 "),_K=n(QDe,"A",{href:!0});var JBt=s(_K);Z9r=r(JBt,"TFRemBertForSequenceClassification"),JBt.forEach(t),exr=r(QDe," (RemBERT model)"),QDe.forEach(t),oxr=i(ne),b5=n(ne,"LI",{});var WDe=s(b5);QCe=n(WDe,"STRONG",{});var YBt=s(QCe);rxr=r(YBt,"roberta"),YBt.forEach(t),txr=r(WDe," \u2014 "),bK=n(WDe,"A",{href:!0});var KBt=s(bK);axr=r(KBt,"TFRobertaForSequenceClassification"),KBt.forEach(t),nxr=r(WDe," (RoBERTa model)"),WDe.forEach(t),sxr=i(ne),v5=n(ne,"LI",{});var HDe=s(v5);WCe=n(HDe,"STRONG",{});var ZBt=s(WCe);lxr=r(ZBt,"roformer"),ZBt.forEach(t),ixr=r(HDe," \u2014 "),vK=n(HDe,"A",{href:!0});var eNt=s(vK);dxr=r(eNt,"TFRoFormerForSequenceClassification"),eNt.forEach(t),cxr=r(HDe," (RoFormer model)"),HDe.forEach(t),mxr=i(ne),F5=n(ne,"LI",{});var UDe=s(F5);HCe=n(UDe,"STRONG",{});var oNt=s(HCe);fxr=r(oNt,"tapas"),oNt.forEach(t),gxr=r(UDe," \u2014 "),FK=n(UDe,"A",{href:!0});var rNt=s(FK);hxr=r(rNt,"TFTapasForSequenceClassification"),rNt.forEach(t),uxr=r(UDe," (TAPAS model)"),UDe.forEach(t),pxr=i(ne),T5=n(ne,"LI",{});var JDe=s(T5);UCe=n(JDe,"STRONG",{});var tNt=s(UCe);_xr=r(tNt,"transfo-xl"),tNt.forEach(t),bxr=r(JDe," \u2014 "),TK=n(JDe,"A",{href:!0});var aNt=s(TK);vxr=r(aNt,"TFTransfoXLForSequenceClassification"),aNt.forEach(t),Fxr=r(JDe," (Transformer-XL model)"),JDe.forEach(t),Txr=i(ne),M5=n(ne,"LI",{});var YDe=s(M5);JCe=n(YDe,"STRONG",{});var nNt=s(JCe);Mxr=r(nNt,"xlm"),nNt.forEach(t),Exr=r(YDe," \u2014 "),MK=n(YDe,"A",{href:!0});var sNt=s(MK);Cxr=r(sNt,"TFXLMForSequenceClassification"),sNt.forEach(t),wxr=r(YDe," (XLM model)"),YDe.forEach(t),Axr=i(ne),E5=n(ne,"LI",{});var KDe=s(E5);YCe=n(KDe,"STRONG",{});var lNt=s(YCe);Lxr=r(lNt,"xlm-roberta"),lNt.forEach(t),yxr=r(KDe," \u2014 "),EK=n(KDe,"A",{href:!0});var iNt=s(EK);xxr=r(iNt,"TFXLMRobertaForSequenceClassification"),iNt.forEach(t),$xr=r(KDe," (XLM-RoBERTa model)"),KDe.forEach(t),kxr=i(ne),C5=n(ne,"LI",{});var ZDe=s(C5);KCe=n(ZDe,"STRONG",{});var dNt=s(KCe);Sxr=r(dNt,"xlnet"),dNt.forEach(t),Rxr=r(ZDe," \u2014 "),CK=n(ZDe,"A",{href:!0});var cNt=s(CK);Pxr=r(cNt,"TFXLNetForSequenceClassification"),cNt.forEach(t),Bxr=r(ZDe," (XLNet model)"),ZDe.forEach(t),ne.forEach(t),Nxr=i(Vl),T(w5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),kze=i(m),yc=n(m,"H2",{class:!0});var jWe=s(yc);A5=n(jWe,"A",{id:!0,class:!0,href:!0});var mNt=s(A5);ZCe=n(mNt,"SPAN",{});var fNt=s(ZCe);T(yx.$$.fragment,fNt),fNt.forEach(t),mNt.forEach(t),Ixr=i(jWe),e3e=n(jWe,"SPAN",{});var gNt=s(e3e);qxr=r(gNt,"TFAutoModelForMultipleChoice"),gNt.forEach(t),jWe.forEach(t),Sze=i(m),ir=n(m,"DIV",{class:!0});var Xl=s(ir);T(xx.$$.fragment,Xl),jxr=i(Xl),xc=n(Xl,"P",{});var Hte=s(xc);Dxr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wK=n(Hte,"A",{href:!0});var hNt=s(wK);Gxr=r(hNt,"from_pretrained()"),hNt.forEach(t),Oxr=r(Hte," class method or the "),AK=n(Hte,"A",{href:!0});var uNt=s(AK);Vxr=r(uNt,"from_config()"),uNt.forEach(t),Xxr=r(Hte,` class
method.`),Hte.forEach(t),zxr=i(Xl),$x=n(Xl,"P",{});var DWe=s($x);Qxr=r(DWe,"This class cannot be instantiated directly using "),o3e=n(DWe,"CODE",{});var pNt=s(o3e);Wxr=r(pNt,"__init__()"),pNt.forEach(t),Hxr=r(DWe," (throws an error)."),DWe.forEach(t),Uxr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var vL=s(Dt);T(kx.$$.fragment,vL),Jxr=i(vL),r3e=n(vL,"P",{});var _Nt=s(r3e);Yxr=r(_Nt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Nt.forEach(t),Kxr=i(vL),$c=n(vL,"P",{});var Ute=s($c);Zxr=r(Ute,`Note:
Loading a model from its configuration file does `),t3e=n(Ute,"STRONG",{});var bNt=s(t3e);e$r=r(bNt,"not"),bNt.forEach(t),o$r=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Ute,"A",{href:!0});var vNt=s(LK);r$r=r(vNt,"from_pretrained()"),vNt.forEach(t),t$r=r(Ute," to load the model weights."),Ute.forEach(t),a$r=i(vL),T(L5.$$.fragment,vL),vL.forEach(t),n$r=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Sx.$$.fragment,zl),s$r=i(zl),a3e=n(zl,"P",{});var FNt=s(a3e);l$r=r(FNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FNt.forEach(t),i$r=i(zl),hn=n(zl,"P",{});var FL=s(hn);d$r=r(FL,"The model class to instantiate is selected based on the "),n3e=n(FL,"CODE",{});var TNt=s(n3e);c$r=r(TNt,"model_type"),TNt.forEach(t),m$r=r(FL,` property of the config object (either
passed as an argument or loaded from `),s3e=n(FL,"CODE",{});var MNt=s(s3e);f$r=r(MNt,"pretrained_model_name_or_path"),MNt.forEach(t),g$r=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(FL,"CODE",{});var ENt=s(l3e);h$r=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),u$r=r(FL,":"),FL.forEach(t),p$r=i(zl),_e=n(zl,"UL",{});var Fe=s(_e);y5=n(Fe,"LI",{});var eGe=s(y5);i3e=n(eGe,"STRONG",{});var CNt=s(i3e);_$r=r(CNt,"albert"),CNt.forEach(t),b$r=r(eGe," \u2014 "),yK=n(eGe,"A",{href:!0});var wNt=s(yK);v$r=r(wNt,"TFAlbertForMultipleChoice"),wNt.forEach(t),F$r=r(eGe," (ALBERT model)"),eGe.forEach(t),T$r=i(Fe),x5=n(Fe,"LI",{});var oGe=s(x5);d3e=n(oGe,"STRONG",{});var ANt=s(d3e);M$r=r(ANt,"bert"),ANt.forEach(t),E$r=r(oGe," \u2014 "),xK=n(oGe,"A",{href:!0});var LNt=s(xK);C$r=r(LNt,"TFBertForMultipleChoice"),LNt.forEach(t),w$r=r(oGe," (BERT model)"),oGe.forEach(t),A$r=i(Fe),$5=n(Fe,"LI",{});var rGe=s($5);c3e=n(rGe,"STRONG",{});var yNt=s(c3e);L$r=r(yNt,"camembert"),yNt.forEach(t),y$r=r(rGe," \u2014 "),$K=n(rGe,"A",{href:!0});var xNt=s($K);x$r=r(xNt,"TFCamembertForMultipleChoice"),xNt.forEach(t),$$r=r(rGe," (CamemBERT model)"),rGe.forEach(t),k$r=i(Fe),k5=n(Fe,"LI",{});var tGe=s(k5);m3e=n(tGe,"STRONG",{});var $Nt=s(m3e);S$r=r($Nt,"convbert"),$Nt.forEach(t),R$r=r(tGe," \u2014 "),kK=n(tGe,"A",{href:!0});var kNt=s(kK);P$r=r(kNt,"TFConvBertForMultipleChoice"),kNt.forEach(t),B$r=r(tGe," (ConvBERT model)"),tGe.forEach(t),N$r=i(Fe),S5=n(Fe,"LI",{});var aGe=s(S5);f3e=n(aGe,"STRONG",{});var SNt=s(f3e);I$r=r(SNt,"distilbert"),SNt.forEach(t),q$r=r(aGe," \u2014 "),SK=n(aGe,"A",{href:!0});var RNt=s(SK);j$r=r(RNt,"TFDistilBertForMultipleChoice"),RNt.forEach(t),D$r=r(aGe," (DistilBERT model)"),aGe.forEach(t),G$r=i(Fe),R5=n(Fe,"LI",{});var nGe=s(R5);g3e=n(nGe,"STRONG",{});var PNt=s(g3e);O$r=r(PNt,"electra"),PNt.forEach(t),V$r=r(nGe," \u2014 "),RK=n(nGe,"A",{href:!0});var BNt=s(RK);X$r=r(BNt,"TFElectraForMultipleChoice"),BNt.forEach(t),z$r=r(nGe," (ELECTRA model)"),nGe.forEach(t),Q$r=i(Fe),P5=n(Fe,"LI",{});var sGe=s(P5);h3e=n(sGe,"STRONG",{});var NNt=s(h3e);W$r=r(NNt,"flaubert"),NNt.forEach(t),H$r=r(sGe," \u2014 "),PK=n(sGe,"A",{href:!0});var INt=s(PK);U$r=r(INt,"TFFlaubertForMultipleChoice"),INt.forEach(t),J$r=r(sGe," (FlauBERT model)"),sGe.forEach(t),Y$r=i(Fe),B5=n(Fe,"LI",{});var lGe=s(B5);u3e=n(lGe,"STRONG",{});var qNt=s(u3e);K$r=r(qNt,"funnel"),qNt.forEach(t),Z$r=r(lGe," \u2014 "),BK=n(lGe,"A",{href:!0});var jNt=s(BK);ekr=r(jNt,"TFFunnelForMultipleChoice"),jNt.forEach(t),okr=r(lGe," (Funnel Transformer model)"),lGe.forEach(t),rkr=i(Fe),N5=n(Fe,"LI",{});var iGe=s(N5);p3e=n(iGe,"STRONG",{});var DNt=s(p3e);tkr=r(DNt,"longformer"),DNt.forEach(t),akr=r(iGe," \u2014 "),NK=n(iGe,"A",{href:!0});var GNt=s(NK);nkr=r(GNt,"TFLongformerForMultipleChoice"),GNt.forEach(t),skr=r(iGe," (Longformer model)"),iGe.forEach(t),lkr=i(Fe),I5=n(Fe,"LI",{});var dGe=s(I5);_3e=n(dGe,"STRONG",{});var ONt=s(_3e);ikr=r(ONt,"mobilebert"),ONt.forEach(t),dkr=r(dGe," \u2014 "),IK=n(dGe,"A",{href:!0});var VNt=s(IK);ckr=r(VNt,"TFMobileBertForMultipleChoice"),VNt.forEach(t),mkr=r(dGe," (MobileBERT model)"),dGe.forEach(t),fkr=i(Fe),q5=n(Fe,"LI",{});var cGe=s(q5);b3e=n(cGe,"STRONG",{});var XNt=s(b3e);gkr=r(XNt,"mpnet"),XNt.forEach(t),hkr=r(cGe," \u2014 "),qK=n(cGe,"A",{href:!0});var zNt=s(qK);ukr=r(zNt,"TFMPNetForMultipleChoice"),zNt.forEach(t),pkr=r(cGe," (MPNet model)"),cGe.forEach(t),_kr=i(Fe),j5=n(Fe,"LI",{});var mGe=s(j5);v3e=n(mGe,"STRONG",{});var QNt=s(v3e);bkr=r(QNt,"rembert"),QNt.forEach(t),vkr=r(mGe," \u2014 "),jK=n(mGe,"A",{href:!0});var WNt=s(jK);Fkr=r(WNt,"TFRemBertForMultipleChoice"),WNt.forEach(t),Tkr=r(mGe," (RemBERT model)"),mGe.forEach(t),Mkr=i(Fe),D5=n(Fe,"LI",{});var fGe=s(D5);F3e=n(fGe,"STRONG",{});var HNt=s(F3e);Ekr=r(HNt,"roberta"),HNt.forEach(t),Ckr=r(fGe," \u2014 "),DK=n(fGe,"A",{href:!0});var UNt=s(DK);wkr=r(UNt,"TFRobertaForMultipleChoice"),UNt.forEach(t),Akr=r(fGe," (RoBERTa model)"),fGe.forEach(t),Lkr=i(Fe),G5=n(Fe,"LI",{});var gGe=s(G5);T3e=n(gGe,"STRONG",{});var JNt=s(T3e);ykr=r(JNt,"roformer"),JNt.forEach(t),xkr=r(gGe," \u2014 "),GK=n(gGe,"A",{href:!0});var YNt=s(GK);$kr=r(YNt,"TFRoFormerForMultipleChoice"),YNt.forEach(t),kkr=r(gGe," (RoFormer model)"),gGe.forEach(t),Skr=i(Fe),O5=n(Fe,"LI",{});var hGe=s(O5);M3e=n(hGe,"STRONG",{});var KNt=s(M3e);Rkr=r(KNt,"xlm"),KNt.forEach(t),Pkr=r(hGe," \u2014 "),OK=n(hGe,"A",{href:!0});var ZNt=s(OK);Bkr=r(ZNt,"TFXLMForMultipleChoice"),ZNt.forEach(t),Nkr=r(hGe," (XLM model)"),hGe.forEach(t),Ikr=i(Fe),V5=n(Fe,"LI",{});var uGe=s(V5);E3e=n(uGe,"STRONG",{});var eIt=s(E3e);qkr=r(eIt,"xlm-roberta"),eIt.forEach(t),jkr=r(uGe," \u2014 "),VK=n(uGe,"A",{href:!0});var oIt=s(VK);Dkr=r(oIt,"TFXLMRobertaForMultipleChoice"),oIt.forEach(t),Gkr=r(uGe," (XLM-RoBERTa model)"),uGe.forEach(t),Okr=i(Fe),X5=n(Fe,"LI",{});var pGe=s(X5);C3e=n(pGe,"STRONG",{});var rIt=s(C3e);Vkr=r(rIt,"xlnet"),rIt.forEach(t),Xkr=r(pGe," \u2014 "),XK=n(pGe,"A",{href:!0});var tIt=s(XK);zkr=r(tIt,"TFXLNetForMultipleChoice"),tIt.forEach(t),Qkr=r(pGe," (XLNet model)"),pGe.forEach(t),Fe.forEach(t),Wkr=i(zl),T(z5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Rze=i(m),kc=n(m,"H2",{class:!0});var GWe=s(kc);Q5=n(GWe,"A",{id:!0,class:!0,href:!0});var aIt=s(Q5);w3e=n(aIt,"SPAN",{});var nIt=s(w3e);T(Rx.$$.fragment,nIt),nIt.forEach(t),aIt.forEach(t),Hkr=i(GWe),A3e=n(GWe,"SPAN",{});var sIt=s(A3e);Ukr=r(sIt,"TFAutoModelForNextSentencePrediction"),sIt.forEach(t),GWe.forEach(t),Pze=i(m),dr=n(m,"DIV",{class:!0});var Ql=s(dr);T(Px.$$.fragment,Ql),Jkr=i(Ql),Sc=n(Ql,"P",{});var Jte=s(Sc);Ykr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=n(Jte,"A",{href:!0});var lIt=s(zK);Kkr=r(lIt,"from_pretrained()"),lIt.forEach(t),Zkr=r(Jte," class method or the "),QK=n(Jte,"A",{href:!0});var iIt=s(QK);eSr=r(iIt,"from_config()"),iIt.forEach(t),oSr=r(Jte,` class
method.`),Jte.forEach(t),rSr=i(Ql),Bx=n(Ql,"P",{});var OWe=s(Bx);tSr=r(OWe,"This class cannot be instantiated directly using "),L3e=n(OWe,"CODE",{});var dIt=s(L3e);aSr=r(dIt,"__init__()"),dIt.forEach(t),nSr=r(OWe," (throws an error)."),OWe.forEach(t),sSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var TL=s(Gt);T(Nx.$$.fragment,TL),lSr=i(TL),y3e=n(TL,"P",{});var cIt=s(y3e);iSr=r(cIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cIt.forEach(t),dSr=i(TL),Rc=n(TL,"P",{});var Yte=s(Rc);cSr=r(Yte,`Note:
Loading a model from its configuration file does `),x3e=n(Yte,"STRONG",{});var mIt=s(x3e);mSr=r(mIt,"not"),mIt.forEach(t),fSr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Yte,"A",{href:!0});var fIt=s(WK);gSr=r(fIt,"from_pretrained()"),fIt.forEach(t),hSr=r(Yte," to load the model weights."),Yte.forEach(t),uSr=i(TL),T(W5.$$.fragment,TL),TL.forEach(t),pSr=i(Ql),Ir=n(Ql,"DIV",{class:!0});var Wl=s(Ir);T(Ix.$$.fragment,Wl),_Sr=i(Wl),$3e=n(Wl,"P",{});var gIt=s($3e);bSr=r(gIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gIt.forEach(t),vSr=i(Wl),un=n(Wl,"P",{});var ML=s(un);FSr=r(ML,"The model class to instantiate is selected based on the "),k3e=n(ML,"CODE",{});var hIt=s(k3e);TSr=r(hIt,"model_type"),hIt.forEach(t),MSr=r(ML,` property of the config object (either
passed as an argument or loaded from `),S3e=n(ML,"CODE",{});var uIt=s(S3e);ESr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),CSr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(ML,"CODE",{});var pIt=s(R3e);wSr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),ASr=r(ML,":"),ML.forEach(t),LSr=i(Wl),qx=n(Wl,"UL",{});var VWe=s(qx);H5=n(VWe,"LI",{});var _Ge=s(H5);P3e=n(_Ge,"STRONG",{});var _It=s(P3e);ySr=r(_It,"bert"),_It.forEach(t),xSr=r(_Ge," \u2014 "),HK=n(_Ge,"A",{href:!0});var bIt=s(HK);$Sr=r(bIt,"TFBertForNextSentencePrediction"),bIt.forEach(t),kSr=r(_Ge," (BERT model)"),_Ge.forEach(t),SSr=i(VWe),U5=n(VWe,"LI",{});var bGe=s(U5);B3e=n(bGe,"STRONG",{});var vIt=s(B3e);RSr=r(vIt,"mobilebert"),vIt.forEach(t),PSr=r(bGe," \u2014 "),UK=n(bGe,"A",{href:!0});var FIt=s(UK);BSr=r(FIt,"TFMobileBertForNextSentencePrediction"),FIt.forEach(t),NSr=r(bGe," (MobileBERT model)"),bGe.forEach(t),VWe.forEach(t),ISr=i(Wl),T(J5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Bze=i(m),Pc=n(m,"H2",{class:!0});var XWe=s(Pc);Y5=n(XWe,"A",{id:!0,class:!0,href:!0});var TIt=s(Y5);N3e=n(TIt,"SPAN",{});var MIt=s(N3e);T(jx.$$.fragment,MIt),MIt.forEach(t),TIt.forEach(t),qSr=i(XWe),I3e=n(XWe,"SPAN",{});var EIt=s(I3e);jSr=r(EIt,"TFAutoModelForTableQuestionAnswering"),EIt.forEach(t),XWe.forEach(t),Nze=i(m),cr=n(m,"DIV",{class:!0});var Hl=s(cr);T(Dx.$$.fragment,Hl),DSr=i(Hl),Bc=n(Hl,"P",{});var Kte=s(Bc);GSr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JK=n(Kte,"A",{href:!0});var CIt=s(JK);OSr=r(CIt,"from_pretrained()"),CIt.forEach(t),VSr=r(Kte," class method or the "),YK=n(Kte,"A",{href:!0});var wIt=s(YK);XSr=r(wIt,"from_config()"),wIt.forEach(t),zSr=r(Kte,` class
method.`),Kte.forEach(t),QSr=i(Hl),Gx=n(Hl,"P",{});var zWe=s(Gx);WSr=r(zWe,"This class cannot be instantiated directly using "),q3e=n(zWe,"CODE",{});var AIt=s(q3e);HSr=r(AIt,"__init__()"),AIt.forEach(t),USr=r(zWe," (throws an error)."),zWe.forEach(t),JSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var EL=s(Ot);T(Ox.$$.fragment,EL),YSr=i(EL),j3e=n(EL,"P",{});var LIt=s(j3e);KSr=r(LIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LIt.forEach(t),ZSr=i(EL),Nc=n(EL,"P",{});var Zte=s(Nc);eRr=r(Zte,`Note:
Loading a model from its configuration file does `),D3e=n(Zte,"STRONG",{});var yIt=s(D3e);oRr=r(yIt,"not"),yIt.forEach(t),rRr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(Zte,"A",{href:!0});var xIt=s(KK);tRr=r(xIt,"from_pretrained()"),xIt.forEach(t),aRr=r(Zte," to load the model weights."),Zte.forEach(t),nRr=i(EL),T(K5.$$.fragment,EL),EL.forEach(t),sRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Vx.$$.fragment,Ul),lRr=i(Ul),G3e=n(Ul,"P",{});var $It=s(G3e);iRr=r($It,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$It.forEach(t),dRr=i(Ul),pn=n(Ul,"P",{});var CL=s(pn);cRr=r(CL,"The model class to instantiate is selected based on the "),O3e=n(CL,"CODE",{});var kIt=s(O3e);mRr=r(kIt,"model_type"),kIt.forEach(t),fRr=r(CL,` property of the config object (either
passed as an argument or loaded from `),V3e=n(CL,"CODE",{});var SIt=s(V3e);gRr=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),hRr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(CL,"CODE",{});var RIt=s(X3e);uRr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),pRr=r(CL,":"),CL.forEach(t),_Rr=i(Ul),z3e=n(Ul,"UL",{});var PIt=s(z3e);Z5=n(PIt,"LI",{});var vGe=s(Z5);Q3e=n(vGe,"STRONG",{});var BIt=s(Q3e);bRr=r(BIt,"tapas"),BIt.forEach(t),vRr=r(vGe," \u2014 "),ZK=n(vGe,"A",{href:!0});var NIt=s(ZK);FRr=r(NIt,"TFTapasForQuestionAnswering"),NIt.forEach(t),TRr=r(vGe," (TAPAS model)"),vGe.forEach(t),PIt.forEach(t),MRr=i(Ul),T(e0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Ize=i(m),Ic=n(m,"H2",{class:!0});var QWe=s(Ic);o0=n(QWe,"A",{id:!0,class:!0,href:!0});var IIt=s(o0);W3e=n(IIt,"SPAN",{});var qIt=s(W3e);T(Xx.$$.fragment,qIt),qIt.forEach(t),IIt.forEach(t),ERr=i(QWe),H3e=n(QWe,"SPAN",{});var jIt=s(H3e);CRr=r(jIt,"TFAutoModelForTokenClassification"),jIt.forEach(t),QWe.forEach(t),qze=i(m),mr=n(m,"DIV",{class:!0});var Jl=s(mr);T(zx.$$.fragment,Jl),wRr=i(Jl),qc=n(Jl,"P",{});var eae=s(qc);ARr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eZ=n(eae,"A",{href:!0});var DIt=s(eZ);LRr=r(DIt,"from_pretrained()"),DIt.forEach(t),yRr=r(eae," class method or the "),oZ=n(eae,"A",{href:!0});var GIt=s(oZ);xRr=r(GIt,"from_config()"),GIt.forEach(t),$Rr=r(eae,` class
method.`),eae.forEach(t),kRr=i(Jl),Qx=n(Jl,"P",{});var WWe=s(Qx);SRr=r(WWe,"This class cannot be instantiated directly using "),U3e=n(WWe,"CODE",{});var OIt=s(U3e);RRr=r(OIt,"__init__()"),OIt.forEach(t),PRr=r(WWe," (throws an error)."),WWe.forEach(t),BRr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var wL=s(Vt);T(Wx.$$.fragment,wL),NRr=i(wL),J3e=n(wL,"P",{});var VIt=s(J3e);IRr=r(VIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VIt.forEach(t),qRr=i(wL),jc=n(wL,"P",{});var oae=s(jc);jRr=r(oae,`Note:
Loading a model from its configuration file does `),Y3e=n(oae,"STRONG",{});var XIt=s(Y3e);DRr=r(XIt,"not"),XIt.forEach(t),GRr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(oae,"A",{href:!0});var zIt=s(rZ);ORr=r(zIt,"from_pretrained()"),zIt.forEach(t),VRr=r(oae," to load the model weights."),oae.forEach(t),XRr=i(wL),T(r0.$$.fragment,wL),wL.forEach(t),zRr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Hx.$$.fragment,Yl),QRr=i(Yl),K3e=n(Yl,"P",{});var QIt=s(K3e);WRr=r(QIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QIt.forEach(t),HRr=i(Yl),_n=n(Yl,"P",{});var AL=s(_n);URr=r(AL,"The model class to instantiate is selected based on the "),Z3e=n(AL,"CODE",{});var WIt=s(Z3e);JRr=r(WIt,"model_type"),WIt.forEach(t),YRr=r(AL,` property of the config object (either
passed as an argument or loaded from `),e5e=n(AL,"CODE",{});var HIt=s(e5e);KRr=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),ZRr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=n(AL,"CODE",{});var UIt=s(o5e);ePr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),oPr=r(AL,":"),AL.forEach(t),rPr=i(Yl),de=n(Yl,"UL",{});var ge=s(de);t0=n(ge,"LI",{});var FGe=s(t0);r5e=n(FGe,"STRONG",{});var JIt=s(r5e);tPr=r(JIt,"albert"),JIt.forEach(t),aPr=r(FGe," \u2014 "),tZ=n(FGe,"A",{href:!0});var YIt=s(tZ);nPr=r(YIt,"TFAlbertForTokenClassification"),YIt.forEach(t),sPr=r(FGe," (ALBERT model)"),FGe.forEach(t),lPr=i(ge),a0=n(ge,"LI",{});var TGe=s(a0);t5e=n(TGe,"STRONG",{});var KIt=s(t5e);iPr=r(KIt,"bert"),KIt.forEach(t),dPr=r(TGe," \u2014 "),aZ=n(TGe,"A",{href:!0});var ZIt=s(aZ);cPr=r(ZIt,"TFBertForTokenClassification"),ZIt.forEach(t),mPr=r(TGe," (BERT model)"),TGe.forEach(t),fPr=i(ge),n0=n(ge,"LI",{});var MGe=s(n0);a5e=n(MGe,"STRONG",{});var eqt=s(a5e);gPr=r(eqt,"camembert"),eqt.forEach(t),hPr=r(MGe," \u2014 "),nZ=n(MGe,"A",{href:!0});var oqt=s(nZ);uPr=r(oqt,"TFCamembertForTokenClassification"),oqt.forEach(t),pPr=r(MGe," (CamemBERT model)"),MGe.forEach(t),_Pr=i(ge),s0=n(ge,"LI",{});var EGe=s(s0);n5e=n(EGe,"STRONG",{});var rqt=s(n5e);bPr=r(rqt,"convbert"),rqt.forEach(t),vPr=r(EGe," \u2014 "),sZ=n(EGe,"A",{href:!0});var tqt=s(sZ);FPr=r(tqt,"TFConvBertForTokenClassification"),tqt.forEach(t),TPr=r(EGe," (ConvBERT model)"),EGe.forEach(t),MPr=i(ge),l0=n(ge,"LI",{});var CGe=s(l0);s5e=n(CGe,"STRONG",{});var aqt=s(s5e);EPr=r(aqt,"deberta"),aqt.forEach(t),CPr=r(CGe," \u2014 "),lZ=n(CGe,"A",{href:!0});var nqt=s(lZ);wPr=r(nqt,"TFDebertaForTokenClassification"),nqt.forEach(t),APr=r(CGe," (DeBERTa model)"),CGe.forEach(t),LPr=i(ge),i0=n(ge,"LI",{});var wGe=s(i0);l5e=n(wGe,"STRONG",{});var sqt=s(l5e);yPr=r(sqt,"deberta-v2"),sqt.forEach(t),xPr=r(wGe," \u2014 "),iZ=n(wGe,"A",{href:!0});var lqt=s(iZ);$Pr=r(lqt,"TFDebertaV2ForTokenClassification"),lqt.forEach(t),kPr=r(wGe," (DeBERTa-v2 model)"),wGe.forEach(t),SPr=i(ge),d0=n(ge,"LI",{});var AGe=s(d0);i5e=n(AGe,"STRONG",{});var iqt=s(i5e);RPr=r(iqt,"distilbert"),iqt.forEach(t),PPr=r(AGe," \u2014 "),dZ=n(AGe,"A",{href:!0});var dqt=s(dZ);BPr=r(dqt,"TFDistilBertForTokenClassification"),dqt.forEach(t),NPr=r(AGe," (DistilBERT model)"),AGe.forEach(t),IPr=i(ge),c0=n(ge,"LI",{});var LGe=s(c0);d5e=n(LGe,"STRONG",{});var cqt=s(d5e);qPr=r(cqt,"electra"),cqt.forEach(t),jPr=r(LGe," \u2014 "),cZ=n(LGe,"A",{href:!0});var mqt=s(cZ);DPr=r(mqt,"TFElectraForTokenClassification"),mqt.forEach(t),GPr=r(LGe," (ELECTRA model)"),LGe.forEach(t),OPr=i(ge),m0=n(ge,"LI",{});var yGe=s(m0);c5e=n(yGe,"STRONG",{});var fqt=s(c5e);VPr=r(fqt,"flaubert"),fqt.forEach(t),XPr=r(yGe," \u2014 "),mZ=n(yGe,"A",{href:!0});var gqt=s(mZ);zPr=r(gqt,"TFFlaubertForTokenClassification"),gqt.forEach(t),QPr=r(yGe," (FlauBERT model)"),yGe.forEach(t),WPr=i(ge),f0=n(ge,"LI",{});var xGe=s(f0);m5e=n(xGe,"STRONG",{});var hqt=s(m5e);HPr=r(hqt,"funnel"),hqt.forEach(t),UPr=r(xGe," \u2014 "),fZ=n(xGe,"A",{href:!0});var uqt=s(fZ);JPr=r(uqt,"TFFunnelForTokenClassification"),uqt.forEach(t),YPr=r(xGe," (Funnel Transformer model)"),xGe.forEach(t),KPr=i(ge),g0=n(ge,"LI",{});var $Ge=s(g0);f5e=n($Ge,"STRONG",{});var pqt=s(f5e);ZPr=r(pqt,"layoutlm"),pqt.forEach(t),eBr=r($Ge," \u2014 "),gZ=n($Ge,"A",{href:!0});var _qt=s(gZ);oBr=r(_qt,"TFLayoutLMForTokenClassification"),_qt.forEach(t),rBr=r($Ge," (LayoutLM model)"),$Ge.forEach(t),tBr=i(ge),h0=n(ge,"LI",{});var kGe=s(h0);g5e=n(kGe,"STRONG",{});var bqt=s(g5e);aBr=r(bqt,"longformer"),bqt.forEach(t),nBr=r(kGe," \u2014 "),hZ=n(kGe,"A",{href:!0});var vqt=s(hZ);sBr=r(vqt,"TFLongformerForTokenClassification"),vqt.forEach(t),lBr=r(kGe," (Longformer model)"),kGe.forEach(t),iBr=i(ge),u0=n(ge,"LI",{});var SGe=s(u0);h5e=n(SGe,"STRONG",{});var Fqt=s(h5e);dBr=r(Fqt,"mobilebert"),Fqt.forEach(t),cBr=r(SGe," \u2014 "),uZ=n(SGe,"A",{href:!0});var Tqt=s(uZ);mBr=r(Tqt,"TFMobileBertForTokenClassification"),Tqt.forEach(t),fBr=r(SGe," (MobileBERT model)"),SGe.forEach(t),gBr=i(ge),p0=n(ge,"LI",{});var RGe=s(p0);u5e=n(RGe,"STRONG",{});var Mqt=s(u5e);hBr=r(Mqt,"mpnet"),Mqt.forEach(t),uBr=r(RGe," \u2014 "),pZ=n(RGe,"A",{href:!0});var Eqt=s(pZ);pBr=r(Eqt,"TFMPNetForTokenClassification"),Eqt.forEach(t),_Br=r(RGe," (MPNet model)"),RGe.forEach(t),bBr=i(ge),_0=n(ge,"LI",{});var PGe=s(_0);p5e=n(PGe,"STRONG",{});var Cqt=s(p5e);vBr=r(Cqt,"rembert"),Cqt.forEach(t),FBr=r(PGe," \u2014 "),_Z=n(PGe,"A",{href:!0});var wqt=s(_Z);TBr=r(wqt,"TFRemBertForTokenClassification"),wqt.forEach(t),MBr=r(PGe," (RemBERT model)"),PGe.forEach(t),EBr=i(ge),b0=n(ge,"LI",{});var BGe=s(b0);_5e=n(BGe,"STRONG",{});var Aqt=s(_5e);CBr=r(Aqt,"roberta"),Aqt.forEach(t),wBr=r(BGe," \u2014 "),bZ=n(BGe,"A",{href:!0});var Lqt=s(bZ);ABr=r(Lqt,"TFRobertaForTokenClassification"),Lqt.forEach(t),LBr=r(BGe," (RoBERTa model)"),BGe.forEach(t),yBr=i(ge),v0=n(ge,"LI",{});var NGe=s(v0);b5e=n(NGe,"STRONG",{});var yqt=s(b5e);xBr=r(yqt,"roformer"),yqt.forEach(t),$Br=r(NGe," \u2014 "),vZ=n(NGe,"A",{href:!0});var xqt=s(vZ);kBr=r(xqt,"TFRoFormerForTokenClassification"),xqt.forEach(t),SBr=r(NGe," (RoFormer model)"),NGe.forEach(t),RBr=i(ge),F0=n(ge,"LI",{});var IGe=s(F0);v5e=n(IGe,"STRONG",{});var $qt=s(v5e);PBr=r($qt,"xlm"),$qt.forEach(t),BBr=r(IGe," \u2014 "),FZ=n(IGe,"A",{href:!0});var kqt=s(FZ);NBr=r(kqt,"TFXLMForTokenClassification"),kqt.forEach(t),IBr=r(IGe," (XLM model)"),IGe.forEach(t),qBr=i(ge),T0=n(ge,"LI",{});var qGe=s(T0);F5e=n(qGe,"STRONG",{});var Sqt=s(F5e);jBr=r(Sqt,"xlm-roberta"),Sqt.forEach(t),DBr=r(qGe," \u2014 "),TZ=n(qGe,"A",{href:!0});var Rqt=s(TZ);GBr=r(Rqt,"TFXLMRobertaForTokenClassification"),Rqt.forEach(t),OBr=r(qGe," (XLM-RoBERTa model)"),qGe.forEach(t),VBr=i(ge),M0=n(ge,"LI",{});var jGe=s(M0);T5e=n(jGe,"STRONG",{});var Pqt=s(T5e);XBr=r(Pqt,"xlnet"),Pqt.forEach(t),zBr=r(jGe," \u2014 "),MZ=n(jGe,"A",{href:!0});var Bqt=s(MZ);QBr=r(Bqt,"TFXLNetForTokenClassification"),Bqt.forEach(t),WBr=r(jGe," (XLNet model)"),jGe.forEach(t),ge.forEach(t),HBr=i(Yl),T(E0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),jze=i(m),Dc=n(m,"H2",{class:!0});var HWe=s(Dc);C0=n(HWe,"A",{id:!0,class:!0,href:!0});var Nqt=s(C0);M5e=n(Nqt,"SPAN",{});var Iqt=s(M5e);T(Ux.$$.fragment,Iqt),Iqt.forEach(t),Nqt.forEach(t),UBr=i(HWe),E5e=n(HWe,"SPAN",{});var qqt=s(E5e);JBr=r(qqt,"TFAutoModelForQuestionAnswering"),qqt.forEach(t),HWe.forEach(t),Dze=i(m),fr=n(m,"DIV",{class:!0});var Kl=s(fr);T(Jx.$$.fragment,Kl),YBr=i(Kl),Gc=n(Kl,"P",{});var rae=s(Gc);KBr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EZ=n(rae,"A",{href:!0});var jqt=s(EZ);ZBr=r(jqt,"from_pretrained()"),jqt.forEach(t),eNr=r(rae," class method or the "),CZ=n(rae,"A",{href:!0});var Dqt=s(CZ);oNr=r(Dqt,"from_config()"),Dqt.forEach(t),rNr=r(rae,` class
method.`),rae.forEach(t),tNr=i(Kl),Yx=n(Kl,"P",{});var UWe=s(Yx);aNr=r(UWe,"This class cannot be instantiated directly using "),C5e=n(UWe,"CODE",{});var Gqt=s(C5e);nNr=r(Gqt,"__init__()"),Gqt.forEach(t),sNr=r(UWe," (throws an error)."),UWe.forEach(t),lNr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var LL=s(Xt);T(Kx.$$.fragment,LL),iNr=i(LL),w5e=n(LL,"P",{});var Oqt=s(w5e);dNr=r(Oqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oqt.forEach(t),cNr=i(LL),Oc=n(LL,"P",{});var tae=s(Oc);mNr=r(tae,`Note:
Loading a model from its configuration file does `),A5e=n(tae,"STRONG",{});var Vqt=s(A5e);fNr=r(Vqt,"not"),Vqt.forEach(t),gNr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(tae,"A",{href:!0});var Xqt=s(wZ);hNr=r(Xqt,"from_pretrained()"),Xqt.forEach(t),uNr=r(tae," to load the model weights."),tae.forEach(t),pNr=i(LL),T(w0.$$.fragment,LL),LL.forEach(t),_Nr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(Zx.$$.fragment,Zl),bNr=i(Zl),L5e=n(Zl,"P",{});var zqt=s(L5e);vNr=r(zqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zqt.forEach(t),FNr=i(Zl),bn=n(Zl,"P",{});var yL=s(bn);TNr=r(yL,"The model class to instantiate is selected based on the "),y5e=n(yL,"CODE",{});var Qqt=s(y5e);MNr=r(Qqt,"model_type"),Qqt.forEach(t),ENr=r(yL,` property of the config object (either
passed as an argument or loaded from `),x5e=n(yL,"CODE",{});var Wqt=s(x5e);CNr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),wNr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(yL,"CODE",{});var Hqt=s($5e);ANr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),LNr=r(yL,":"),yL.forEach(t),yNr=i(Zl),ce=n(Zl,"UL",{});var he=s(ce);A0=n(he,"LI",{});var DGe=s(A0);k5e=n(DGe,"STRONG",{});var Uqt=s(k5e);xNr=r(Uqt,"albert"),Uqt.forEach(t),$Nr=r(DGe," \u2014 "),AZ=n(DGe,"A",{href:!0});var Jqt=s(AZ);kNr=r(Jqt,"TFAlbertForQuestionAnswering"),Jqt.forEach(t),SNr=r(DGe," (ALBERT model)"),DGe.forEach(t),RNr=i(he),L0=n(he,"LI",{});var GGe=s(L0);S5e=n(GGe,"STRONG",{});var Yqt=s(S5e);PNr=r(Yqt,"bert"),Yqt.forEach(t),BNr=r(GGe," \u2014 "),LZ=n(GGe,"A",{href:!0});var Kqt=s(LZ);NNr=r(Kqt,"TFBertForQuestionAnswering"),Kqt.forEach(t),INr=r(GGe," (BERT model)"),GGe.forEach(t),qNr=i(he),y0=n(he,"LI",{});var OGe=s(y0);R5e=n(OGe,"STRONG",{});var Zqt=s(R5e);jNr=r(Zqt,"camembert"),Zqt.forEach(t),DNr=r(OGe," \u2014 "),yZ=n(OGe,"A",{href:!0});var ejt=s(yZ);GNr=r(ejt,"TFCamembertForQuestionAnswering"),ejt.forEach(t),ONr=r(OGe," (CamemBERT model)"),OGe.forEach(t),VNr=i(he),x0=n(he,"LI",{});var VGe=s(x0);P5e=n(VGe,"STRONG",{});var ojt=s(P5e);XNr=r(ojt,"convbert"),ojt.forEach(t),zNr=r(VGe," \u2014 "),xZ=n(VGe,"A",{href:!0});var rjt=s(xZ);QNr=r(rjt,"TFConvBertForQuestionAnswering"),rjt.forEach(t),WNr=r(VGe," (ConvBERT model)"),VGe.forEach(t),HNr=i(he),$0=n(he,"LI",{});var XGe=s($0);B5e=n(XGe,"STRONG",{});var tjt=s(B5e);UNr=r(tjt,"deberta"),tjt.forEach(t),JNr=r(XGe," \u2014 "),$Z=n(XGe,"A",{href:!0});var ajt=s($Z);YNr=r(ajt,"TFDebertaForQuestionAnswering"),ajt.forEach(t),KNr=r(XGe," (DeBERTa model)"),XGe.forEach(t),ZNr=i(he),k0=n(he,"LI",{});var zGe=s(k0);N5e=n(zGe,"STRONG",{});var njt=s(N5e);eIr=r(njt,"deberta-v2"),njt.forEach(t),oIr=r(zGe," \u2014 "),kZ=n(zGe,"A",{href:!0});var sjt=s(kZ);rIr=r(sjt,"TFDebertaV2ForQuestionAnswering"),sjt.forEach(t),tIr=r(zGe," (DeBERTa-v2 model)"),zGe.forEach(t),aIr=i(he),S0=n(he,"LI",{});var QGe=s(S0);I5e=n(QGe,"STRONG",{});var ljt=s(I5e);nIr=r(ljt,"distilbert"),ljt.forEach(t),sIr=r(QGe," \u2014 "),SZ=n(QGe,"A",{href:!0});var ijt=s(SZ);lIr=r(ijt,"TFDistilBertForQuestionAnswering"),ijt.forEach(t),iIr=r(QGe," (DistilBERT model)"),QGe.forEach(t),dIr=i(he),R0=n(he,"LI",{});var WGe=s(R0);q5e=n(WGe,"STRONG",{});var djt=s(q5e);cIr=r(djt,"electra"),djt.forEach(t),mIr=r(WGe," \u2014 "),RZ=n(WGe,"A",{href:!0});var cjt=s(RZ);fIr=r(cjt,"TFElectraForQuestionAnswering"),cjt.forEach(t),gIr=r(WGe," (ELECTRA model)"),WGe.forEach(t),hIr=i(he),P0=n(he,"LI",{});var HGe=s(P0);j5e=n(HGe,"STRONG",{});var mjt=s(j5e);uIr=r(mjt,"flaubert"),mjt.forEach(t),pIr=r(HGe," \u2014 "),PZ=n(HGe,"A",{href:!0});var fjt=s(PZ);_Ir=r(fjt,"TFFlaubertForQuestionAnsweringSimple"),fjt.forEach(t),bIr=r(HGe," (FlauBERT model)"),HGe.forEach(t),vIr=i(he),B0=n(he,"LI",{});var UGe=s(B0);D5e=n(UGe,"STRONG",{});var gjt=s(D5e);FIr=r(gjt,"funnel"),gjt.forEach(t),TIr=r(UGe," \u2014 "),BZ=n(UGe,"A",{href:!0});var hjt=s(BZ);MIr=r(hjt,"TFFunnelForQuestionAnswering"),hjt.forEach(t),EIr=r(UGe," (Funnel Transformer model)"),UGe.forEach(t),CIr=i(he),N0=n(he,"LI",{});var JGe=s(N0);G5e=n(JGe,"STRONG",{});var ujt=s(G5e);wIr=r(ujt,"gptj"),ujt.forEach(t),AIr=r(JGe," \u2014 "),NZ=n(JGe,"A",{href:!0});var pjt=s(NZ);LIr=r(pjt,"TFGPTJForQuestionAnswering"),pjt.forEach(t),yIr=r(JGe," (GPT-J model)"),JGe.forEach(t),xIr=i(he),I0=n(he,"LI",{});var YGe=s(I0);O5e=n(YGe,"STRONG",{});var _jt=s(O5e);$Ir=r(_jt,"longformer"),_jt.forEach(t),kIr=r(YGe," \u2014 "),IZ=n(YGe,"A",{href:!0});var bjt=s(IZ);SIr=r(bjt,"TFLongformerForQuestionAnswering"),bjt.forEach(t),RIr=r(YGe," (Longformer model)"),YGe.forEach(t),PIr=i(he),q0=n(he,"LI",{});var KGe=s(q0);V5e=n(KGe,"STRONG",{});var vjt=s(V5e);BIr=r(vjt,"mobilebert"),vjt.forEach(t),NIr=r(KGe," \u2014 "),qZ=n(KGe,"A",{href:!0});var Fjt=s(qZ);IIr=r(Fjt,"TFMobileBertForQuestionAnswering"),Fjt.forEach(t),qIr=r(KGe," (MobileBERT model)"),KGe.forEach(t),jIr=i(he),j0=n(he,"LI",{});var ZGe=s(j0);X5e=n(ZGe,"STRONG",{});var Tjt=s(X5e);DIr=r(Tjt,"mpnet"),Tjt.forEach(t),GIr=r(ZGe," \u2014 "),jZ=n(ZGe,"A",{href:!0});var Mjt=s(jZ);OIr=r(Mjt,"TFMPNetForQuestionAnswering"),Mjt.forEach(t),VIr=r(ZGe," (MPNet model)"),ZGe.forEach(t),XIr=i(he),D0=n(he,"LI",{});var eOe=s(D0);z5e=n(eOe,"STRONG",{});var Ejt=s(z5e);zIr=r(Ejt,"rembert"),Ejt.forEach(t),QIr=r(eOe," \u2014 "),DZ=n(eOe,"A",{href:!0});var Cjt=s(DZ);WIr=r(Cjt,"TFRemBertForQuestionAnswering"),Cjt.forEach(t),HIr=r(eOe," (RemBERT model)"),eOe.forEach(t),UIr=i(he),G0=n(he,"LI",{});var oOe=s(G0);Q5e=n(oOe,"STRONG",{});var wjt=s(Q5e);JIr=r(wjt,"roberta"),wjt.forEach(t),YIr=r(oOe," \u2014 "),GZ=n(oOe,"A",{href:!0});var Ajt=s(GZ);KIr=r(Ajt,"TFRobertaForQuestionAnswering"),Ajt.forEach(t),ZIr=r(oOe," (RoBERTa model)"),oOe.forEach(t),eqr=i(he),O0=n(he,"LI",{});var rOe=s(O0);W5e=n(rOe,"STRONG",{});var Ljt=s(W5e);oqr=r(Ljt,"roformer"),Ljt.forEach(t),rqr=r(rOe," \u2014 "),OZ=n(rOe,"A",{href:!0});var yjt=s(OZ);tqr=r(yjt,"TFRoFormerForQuestionAnswering"),yjt.forEach(t),aqr=r(rOe," (RoFormer model)"),rOe.forEach(t),nqr=i(he),V0=n(he,"LI",{});var tOe=s(V0);H5e=n(tOe,"STRONG",{});var xjt=s(H5e);sqr=r(xjt,"xlm"),xjt.forEach(t),lqr=r(tOe," \u2014 "),VZ=n(tOe,"A",{href:!0});var $jt=s(VZ);iqr=r($jt,"TFXLMForQuestionAnsweringSimple"),$jt.forEach(t),dqr=r(tOe," (XLM model)"),tOe.forEach(t),cqr=i(he),X0=n(he,"LI",{});var aOe=s(X0);U5e=n(aOe,"STRONG",{});var kjt=s(U5e);mqr=r(kjt,"xlm-roberta"),kjt.forEach(t),fqr=r(aOe," \u2014 "),XZ=n(aOe,"A",{href:!0});var Sjt=s(XZ);gqr=r(Sjt,"TFXLMRobertaForQuestionAnswering"),Sjt.forEach(t),hqr=r(aOe," (XLM-RoBERTa model)"),aOe.forEach(t),uqr=i(he),z0=n(he,"LI",{});var nOe=s(z0);J5e=n(nOe,"STRONG",{});var Rjt=s(J5e);pqr=r(Rjt,"xlnet"),Rjt.forEach(t),_qr=r(nOe," \u2014 "),zZ=n(nOe,"A",{href:!0});var Pjt=s(zZ);bqr=r(Pjt,"TFXLNetForQuestionAnsweringSimple"),Pjt.forEach(t),vqr=r(nOe," (XLNet model)"),nOe.forEach(t),he.forEach(t),Fqr=i(Zl),T(Q0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Gze=i(m),Vc=n(m,"H2",{class:!0});var JWe=s(Vc);W0=n(JWe,"A",{id:!0,class:!0,href:!0});var Bjt=s(W0);Y5e=n(Bjt,"SPAN",{});var Njt=s(Y5e);T(e$.$$.fragment,Njt),Njt.forEach(t),Bjt.forEach(t),Tqr=i(JWe),K5e=n(JWe,"SPAN",{});var Ijt=s(K5e);Mqr=r(Ijt,"TFAutoModelForVision2Seq"),Ijt.forEach(t),JWe.forEach(t),Oze=i(m),gr=n(m,"DIV",{class:!0});var ei=s(gr);T(o$.$$.fragment,ei),Eqr=i(ei),Xc=n(ei,"P",{});var aae=s(Xc);Cqr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QZ=n(aae,"A",{href:!0});var qjt=s(QZ);wqr=r(qjt,"from_pretrained()"),qjt.forEach(t),Aqr=r(aae," class method or the "),WZ=n(aae,"A",{href:!0});var jjt=s(WZ);Lqr=r(jjt,"from_config()"),jjt.forEach(t),yqr=r(aae,` class
method.`),aae.forEach(t),xqr=i(ei),r$=n(ei,"P",{});var YWe=s(r$);$qr=r(YWe,"This class cannot be instantiated directly using "),Z5e=n(YWe,"CODE",{});var Djt=s(Z5e);kqr=r(Djt,"__init__()"),Djt.forEach(t),Sqr=r(YWe," (throws an error)."),YWe.forEach(t),Rqr=i(ei),zt=n(ei,"DIV",{class:!0});var xL=s(zt);T(t$.$$.fragment,xL),Pqr=i(xL),e0e=n(xL,"P",{});var Gjt=s(e0e);Bqr=r(Gjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gjt.forEach(t),Nqr=i(xL),zc=n(xL,"P",{});var nae=s(zc);Iqr=r(nae,`Note:
Loading a model from its configuration file does `),o0e=n(nae,"STRONG",{});var Ojt=s(o0e);qqr=r(Ojt,"not"),Ojt.forEach(t),jqr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(nae,"A",{href:!0});var Vjt=s(HZ);Dqr=r(Vjt,"from_pretrained()"),Vjt.forEach(t),Gqr=r(nae," to load the model weights."),nae.forEach(t),Oqr=i(xL),T(H0.$$.fragment,xL),xL.forEach(t),Vqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(a$.$$.fragment,oi),Xqr=i(oi),r0e=n(oi,"P",{});var Xjt=s(r0e);zqr=r(Xjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xjt.forEach(t),Qqr=i(oi),vn=n(oi,"P",{});var $L=s(vn);Wqr=r($L,"The model class to instantiate is selected based on the "),t0e=n($L,"CODE",{});var zjt=s(t0e);Hqr=r(zjt,"model_type"),zjt.forEach(t),Uqr=r($L,` property of the config object (either
passed as an argument or loaded from `),a0e=n($L,"CODE",{});var Qjt=s(a0e);Jqr=r(Qjt,"pretrained_model_name_or_path"),Qjt.forEach(t),Yqr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=n($L,"CODE",{});var Wjt=s(n0e);Kqr=r(Wjt,"pretrained_model_name_or_path"),Wjt.forEach(t),Zqr=r($L,":"),$L.forEach(t),ejr=i(oi),s0e=n(oi,"UL",{});var Hjt=s(s0e);U0=n(Hjt,"LI",{});var sOe=s(U0);l0e=n(sOe,"STRONG",{});var Ujt=s(l0e);ojr=r(Ujt,"vision-encoder-decoder"),Ujt.forEach(t),rjr=r(sOe," \u2014 "),UZ=n(sOe,"A",{href:!0});var Jjt=s(UZ);tjr=r(Jjt,"TFVisionEncoderDecoderModel"),Jjt.forEach(t),ajr=r(sOe," (Vision Encoder decoder model)"),sOe.forEach(t),Hjt.forEach(t),njr=i(oi),T(J0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Vze=i(m),Qc=n(m,"H2",{class:!0});var KWe=s(Qc);Y0=n(KWe,"A",{id:!0,class:!0,href:!0});var Yjt=s(Y0);i0e=n(Yjt,"SPAN",{});var Kjt=s(i0e);T(n$.$$.fragment,Kjt),Kjt.forEach(t),Yjt.forEach(t),sjr=i(KWe),d0e=n(KWe,"SPAN",{});var Zjt=s(d0e);ljr=r(Zjt,"TFAutoModelForSpeechSeq2Seq"),Zjt.forEach(t),KWe.forEach(t),Xze=i(m),hr=n(m,"DIV",{class:!0});var ri=s(hr);T(s$.$$.fragment,ri),ijr=i(ri),Wc=n(ri,"P",{});var sae=s(Wc);djr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JZ=n(sae,"A",{href:!0});var eDt=s(JZ);cjr=r(eDt,"from_pretrained()"),eDt.forEach(t),mjr=r(sae," class method or the "),YZ=n(sae,"A",{href:!0});var oDt=s(YZ);fjr=r(oDt,"from_config()"),oDt.forEach(t),gjr=r(sae,` class
method.`),sae.forEach(t),hjr=i(ri),l$=n(ri,"P",{});var ZWe=s(l$);ujr=r(ZWe,"This class cannot be instantiated directly using "),c0e=n(ZWe,"CODE",{});var rDt=s(c0e);pjr=r(rDt,"__init__()"),rDt.forEach(t),_jr=r(ZWe," (throws an error)."),ZWe.forEach(t),bjr=i(ri),Qt=n(ri,"DIV",{class:!0});var kL=s(Qt);T(i$.$$.fragment,kL),vjr=i(kL),m0e=n(kL,"P",{});var tDt=s(m0e);Fjr=r(tDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tDt.forEach(t),Tjr=i(kL),Hc=n(kL,"P",{});var lae=s(Hc);Mjr=r(lae,`Note:
Loading a model from its configuration file does `),f0e=n(lae,"STRONG",{});var aDt=s(f0e);Ejr=r(aDt,"not"),aDt.forEach(t),Cjr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KZ=n(lae,"A",{href:!0});var nDt=s(KZ);wjr=r(nDt,"from_pretrained()"),nDt.forEach(t),Ajr=r(lae," to load the model weights."),lae.forEach(t),Ljr=i(kL),T(K0.$$.fragment,kL),kL.forEach(t),yjr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(d$.$$.fragment,ti),xjr=i(ti),g0e=n(ti,"P",{});var sDt=s(g0e);$jr=r(sDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sDt.forEach(t),kjr=i(ti),Fn=n(ti,"P",{});var SL=s(Fn);Sjr=r(SL,"The model class to instantiate is selected based on the "),h0e=n(SL,"CODE",{});var lDt=s(h0e);Rjr=r(lDt,"model_type"),lDt.forEach(t),Pjr=r(SL,` property of the config object (either
passed as an argument or loaded from `),u0e=n(SL,"CODE",{});var iDt=s(u0e);Bjr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),Njr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(SL,"CODE",{});var dDt=s(p0e);Ijr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),qjr=r(SL,":"),SL.forEach(t),jjr=i(ti),_0e=n(ti,"UL",{});var cDt=s(_0e);Z0=n(cDt,"LI",{});var lOe=s(Z0);b0e=n(lOe,"STRONG",{});var mDt=s(b0e);Djr=r(mDt,"speech_to_text"),mDt.forEach(t),Gjr=r(lOe," \u2014 "),ZZ=n(lOe,"A",{href:!0});var fDt=s(ZZ);Ojr=r(fDt,"TFSpeech2TextForConditionalGeneration"),fDt.forEach(t),Vjr=r(lOe," (Speech2Text model)"),lOe.forEach(t),cDt.forEach(t),Xjr=i(ti),T(ew.$$.fragment,ti),ti.forEach(t),ri.forEach(t),zze=i(m),Uc=n(m,"H2",{class:!0});var eHe=s(Uc);ow=n(eHe,"A",{id:!0,class:!0,href:!0});var gDt=s(ow);v0e=n(gDt,"SPAN",{});var hDt=s(v0e);T(c$.$$.fragment,hDt),hDt.forEach(t),gDt.forEach(t),zjr=i(eHe),F0e=n(eHe,"SPAN",{});var uDt=s(F0e);Qjr=r(uDt,"FlaxAutoModel"),uDt.forEach(t),eHe.forEach(t),Qze=i(m),ur=n(m,"DIV",{class:!0});var ai=s(ur);T(m$.$$.fragment,ai),Wjr=i(ai),Jc=n(ai,"P",{});var iae=s(Jc);Hjr=r(iae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eee=n(iae,"A",{href:!0});var pDt=s(eee);Ujr=r(pDt,"from_pretrained()"),pDt.forEach(t),Jjr=r(iae," class method or the "),oee=n(iae,"A",{href:!0});var _Dt=s(oee);Yjr=r(_Dt,"from_config()"),_Dt.forEach(t),Kjr=r(iae,` class
method.`),iae.forEach(t),Zjr=i(ai),f$=n(ai,"P",{});var oHe=s(f$);eDr=r(oHe,"This class cannot be instantiated directly using "),T0e=n(oHe,"CODE",{});var bDt=s(T0e);oDr=r(bDt,"__init__()"),bDt.forEach(t),rDr=r(oHe," (throws an error)."),oHe.forEach(t),tDr=i(ai),Wt=n(ai,"DIV",{class:!0});var RL=s(Wt);T(g$.$$.fragment,RL),aDr=i(RL),M0e=n(RL,"P",{});var vDt=s(M0e);nDr=r(vDt,"Instantiates one of the base model classes of the library from a configuration."),vDt.forEach(t),sDr=i(RL),Yc=n(RL,"P",{});var dae=s(Yc);lDr=r(dae,`Note:
Loading a model from its configuration file does `),E0e=n(dae,"STRONG",{});var FDt=s(E0e);iDr=r(FDt,"not"),FDt.forEach(t),dDr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ree=n(dae,"A",{href:!0});var TDt=s(ree);cDr=r(TDt,"from_pretrained()"),TDt.forEach(t),mDr=r(dae," to load the model weights."),dae.forEach(t),fDr=i(RL),T(rw.$$.fragment,RL),RL.forEach(t),gDr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(h$.$$.fragment,ni),hDr=i(ni),C0e=n(ni,"P",{});var MDt=s(C0e);uDr=r(MDt,"Instantiate one of the base model classes of the library from a pretrained model."),MDt.forEach(t),pDr=i(ni),Tn=n(ni,"P",{});var PL=s(Tn);_Dr=r(PL,"The model class to instantiate is selected based on the "),w0e=n(PL,"CODE",{});var EDt=s(w0e);bDr=r(EDt,"model_type"),EDt.forEach(t),vDr=r(PL,` property of the config object (either
passed as an argument or loaded from `),A0e=n(PL,"CODE",{});var CDt=s(A0e);FDr=r(CDt,"pretrained_model_name_or_path"),CDt.forEach(t),TDr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(PL,"CODE",{});var wDt=s(L0e);MDr=r(wDt,"pretrained_model_name_or_path"),wDt.forEach(t),EDr=r(PL,":"),PL.forEach(t),CDr=i(ni),oe=n(ni,"UL",{});var ae=s(oe);tw=n(ae,"LI",{});var iOe=s(tw);y0e=n(iOe,"STRONG",{});var ADt=s(y0e);wDr=r(ADt,"albert"),ADt.forEach(t),ADr=r(iOe," \u2014 "),tee=n(iOe,"A",{href:!0});var LDt=s(tee);LDr=r(LDt,"FlaxAlbertModel"),LDt.forEach(t),yDr=r(iOe," (ALBERT model)"),iOe.forEach(t),xDr=i(ae),aw=n(ae,"LI",{});var dOe=s(aw);x0e=n(dOe,"STRONG",{});var yDt=s(x0e);$Dr=r(yDt,"bart"),yDt.forEach(t),kDr=r(dOe," \u2014 "),aee=n(dOe,"A",{href:!0});var xDt=s(aee);SDr=r(xDt,"FlaxBartModel"),xDt.forEach(t),RDr=r(dOe," (BART model)"),dOe.forEach(t),PDr=i(ae),nw=n(ae,"LI",{});var cOe=s(nw);$0e=n(cOe,"STRONG",{});var $Dt=s($0e);BDr=r($Dt,"beit"),$Dt.forEach(t),NDr=r(cOe," \u2014 "),nee=n(cOe,"A",{href:!0});var kDt=s(nee);IDr=r(kDt,"FlaxBeitModel"),kDt.forEach(t),qDr=r(cOe," (BEiT model)"),cOe.forEach(t),jDr=i(ae),sw=n(ae,"LI",{});var mOe=s(sw);k0e=n(mOe,"STRONG",{});var SDt=s(k0e);DDr=r(SDt,"bert"),SDt.forEach(t),GDr=r(mOe," \u2014 "),see=n(mOe,"A",{href:!0});var RDt=s(see);ODr=r(RDt,"FlaxBertModel"),RDt.forEach(t),VDr=r(mOe," (BERT model)"),mOe.forEach(t),XDr=i(ae),lw=n(ae,"LI",{});var fOe=s(lw);S0e=n(fOe,"STRONG",{});var PDt=s(S0e);zDr=r(PDt,"big_bird"),PDt.forEach(t),QDr=r(fOe," \u2014 "),lee=n(fOe,"A",{href:!0});var BDt=s(lee);WDr=r(BDt,"FlaxBigBirdModel"),BDt.forEach(t),HDr=r(fOe," (BigBird model)"),fOe.forEach(t),UDr=i(ae),iw=n(ae,"LI",{});var gOe=s(iw);R0e=n(gOe,"STRONG",{});var NDt=s(R0e);JDr=r(NDt,"blenderbot"),NDt.forEach(t),YDr=r(gOe," \u2014 "),iee=n(gOe,"A",{href:!0});var IDt=s(iee);KDr=r(IDt,"FlaxBlenderbotModel"),IDt.forEach(t),ZDr=r(gOe," (Blenderbot model)"),gOe.forEach(t),eGr=i(ae),dw=n(ae,"LI",{});var hOe=s(dw);P0e=n(hOe,"STRONG",{});var qDt=s(P0e);oGr=r(qDt,"blenderbot-small"),qDt.forEach(t),rGr=r(hOe," \u2014 "),dee=n(hOe,"A",{href:!0});var jDt=s(dee);tGr=r(jDt,"FlaxBlenderbotSmallModel"),jDt.forEach(t),aGr=r(hOe," (BlenderbotSmall model)"),hOe.forEach(t),nGr=i(ae),cw=n(ae,"LI",{});var uOe=s(cw);B0e=n(uOe,"STRONG",{});var DDt=s(B0e);sGr=r(DDt,"clip"),DDt.forEach(t),lGr=r(uOe," \u2014 "),cee=n(uOe,"A",{href:!0});var GDt=s(cee);iGr=r(GDt,"FlaxCLIPModel"),GDt.forEach(t),dGr=r(uOe," (CLIP model)"),uOe.forEach(t),cGr=i(ae),mw=n(ae,"LI",{});var pOe=s(mw);N0e=n(pOe,"STRONG",{});var ODt=s(N0e);mGr=r(ODt,"distilbert"),ODt.forEach(t),fGr=r(pOe," \u2014 "),mee=n(pOe,"A",{href:!0});var VDt=s(mee);gGr=r(VDt,"FlaxDistilBertModel"),VDt.forEach(t),hGr=r(pOe," (DistilBERT model)"),pOe.forEach(t),uGr=i(ae),fw=n(ae,"LI",{});var _Oe=s(fw);I0e=n(_Oe,"STRONG",{});var XDt=s(I0e);pGr=r(XDt,"electra"),XDt.forEach(t),_Gr=r(_Oe," \u2014 "),fee=n(_Oe,"A",{href:!0});var zDt=s(fee);bGr=r(zDt,"FlaxElectraModel"),zDt.forEach(t),vGr=r(_Oe," (ELECTRA model)"),_Oe.forEach(t),FGr=i(ae),gw=n(ae,"LI",{});var bOe=s(gw);q0e=n(bOe,"STRONG",{});var QDt=s(q0e);TGr=r(QDt,"gpt2"),QDt.forEach(t),MGr=r(bOe," \u2014 "),gee=n(bOe,"A",{href:!0});var WDt=s(gee);EGr=r(WDt,"FlaxGPT2Model"),WDt.forEach(t),CGr=r(bOe," (OpenAI GPT-2 model)"),bOe.forEach(t),wGr=i(ae),hw=n(ae,"LI",{});var vOe=s(hw);j0e=n(vOe,"STRONG",{});var HDt=s(j0e);AGr=r(HDt,"gpt_neo"),HDt.forEach(t),LGr=r(vOe," \u2014 "),hee=n(vOe,"A",{href:!0});var UDt=s(hee);yGr=r(UDt,"FlaxGPTNeoModel"),UDt.forEach(t),xGr=r(vOe," (GPT Neo model)"),vOe.forEach(t),$Gr=i(ae),uw=n(ae,"LI",{});var FOe=s(uw);D0e=n(FOe,"STRONG",{});var JDt=s(D0e);kGr=r(JDt,"gptj"),JDt.forEach(t),SGr=r(FOe," \u2014 "),uee=n(FOe,"A",{href:!0});var YDt=s(uee);RGr=r(YDt,"FlaxGPTJModel"),YDt.forEach(t),PGr=r(FOe," (GPT-J model)"),FOe.forEach(t),BGr=i(ae),pw=n(ae,"LI",{});var TOe=s(pw);G0e=n(TOe,"STRONG",{});var KDt=s(G0e);NGr=r(KDt,"longt5"),KDt.forEach(t),IGr=r(TOe," \u2014 "),pee=n(TOe,"A",{href:!0});var ZDt=s(pee);qGr=r(ZDt,"FlaxLongT5Model"),ZDt.forEach(t),jGr=r(TOe," (LongT5 model)"),TOe.forEach(t),DGr=i(ae),_w=n(ae,"LI",{});var MOe=s(_w);O0e=n(MOe,"STRONG",{});var eGt=s(O0e);GGr=r(eGt,"marian"),eGt.forEach(t),OGr=r(MOe," \u2014 "),_ee=n(MOe,"A",{href:!0});var oGt=s(_ee);VGr=r(oGt,"FlaxMarianModel"),oGt.forEach(t),XGr=r(MOe," (Marian model)"),MOe.forEach(t),zGr=i(ae),bw=n(ae,"LI",{});var EOe=s(bw);V0e=n(EOe,"STRONG",{});var rGt=s(V0e);QGr=r(rGt,"mbart"),rGt.forEach(t),WGr=r(EOe," \u2014 "),bee=n(EOe,"A",{href:!0});var tGt=s(bee);HGr=r(tGt,"FlaxMBartModel"),tGt.forEach(t),UGr=r(EOe," (mBART model)"),EOe.forEach(t),JGr=i(ae),vw=n(ae,"LI",{});var COe=s(vw);X0e=n(COe,"STRONG",{});var aGt=s(X0e);YGr=r(aGt,"mt5"),aGt.forEach(t),KGr=r(COe," \u2014 "),vee=n(COe,"A",{href:!0});var nGt=s(vee);ZGr=r(nGt,"FlaxMT5Model"),nGt.forEach(t),eOr=r(COe," (MT5 model)"),COe.forEach(t),oOr=i(ae),Fw=n(ae,"LI",{});var wOe=s(Fw);z0e=n(wOe,"STRONG",{});var sGt=s(z0e);rOr=r(sGt,"opt"),sGt.forEach(t),tOr=r(wOe," \u2014 "),Fee=n(wOe,"A",{href:!0});var lGt=s(Fee);aOr=r(lGt,"FlaxOPTModel"),lGt.forEach(t),nOr=r(wOe," (OPT model)"),wOe.forEach(t),sOr=i(ae),Tw=n(ae,"LI",{});var AOe=s(Tw);Q0e=n(AOe,"STRONG",{});var iGt=s(Q0e);lOr=r(iGt,"pegasus"),iGt.forEach(t),iOr=r(AOe," \u2014 "),Tee=n(AOe,"A",{href:!0});var dGt=s(Tee);dOr=r(dGt,"FlaxPegasusModel"),dGt.forEach(t),cOr=r(AOe," (Pegasus model)"),AOe.forEach(t),mOr=i(ae),Mw=n(ae,"LI",{});var LOe=s(Mw);W0e=n(LOe,"STRONG",{});var cGt=s(W0e);fOr=r(cGt,"roberta"),cGt.forEach(t),gOr=r(LOe," \u2014 "),Mee=n(LOe,"A",{href:!0});var mGt=s(Mee);hOr=r(mGt,"FlaxRobertaModel"),mGt.forEach(t),uOr=r(LOe," (RoBERTa model)"),LOe.forEach(t),pOr=i(ae),Ew=n(ae,"LI",{});var yOe=s(Ew);H0e=n(yOe,"STRONG",{});var fGt=s(H0e);_Or=r(fGt,"roformer"),fGt.forEach(t),bOr=r(yOe," \u2014 "),Eee=n(yOe,"A",{href:!0});var gGt=s(Eee);vOr=r(gGt,"FlaxRoFormerModel"),gGt.forEach(t),FOr=r(yOe," (RoFormer model)"),yOe.forEach(t),TOr=i(ae),Cw=n(ae,"LI",{});var xOe=s(Cw);U0e=n(xOe,"STRONG",{});var hGt=s(U0e);MOr=r(hGt,"t5"),hGt.forEach(t),EOr=r(xOe," \u2014 "),Cee=n(xOe,"A",{href:!0});var uGt=s(Cee);COr=r(uGt,"FlaxT5Model"),uGt.forEach(t),wOr=r(xOe," (T5 model)"),xOe.forEach(t),AOr=i(ae),ww=n(ae,"LI",{});var $Oe=s(ww);J0e=n($Oe,"STRONG",{});var pGt=s(J0e);LOr=r(pGt,"vision-text-dual-encoder"),pGt.forEach(t),yOr=r($Oe," \u2014 "),wee=n($Oe,"A",{href:!0});var _Gt=s(wee);xOr=r(_Gt,"FlaxVisionTextDualEncoderModel"),_Gt.forEach(t),$Or=r($Oe," (VisionTextDualEncoder model)"),$Oe.forEach(t),kOr=i(ae),Aw=n(ae,"LI",{});var kOe=s(Aw);Y0e=n(kOe,"STRONG",{});var bGt=s(Y0e);SOr=r(bGt,"vit"),bGt.forEach(t),ROr=r(kOe," \u2014 "),Aee=n(kOe,"A",{href:!0});var vGt=s(Aee);POr=r(vGt,"FlaxViTModel"),vGt.forEach(t),BOr=r(kOe," (ViT model)"),kOe.forEach(t),NOr=i(ae),Lw=n(ae,"LI",{});var SOe=s(Lw);K0e=n(SOe,"STRONG",{});var FGt=s(K0e);IOr=r(FGt,"wav2vec2"),FGt.forEach(t),qOr=r(SOe," \u2014 "),Lee=n(SOe,"A",{href:!0});var TGt=s(Lee);jOr=r(TGt,"FlaxWav2Vec2Model"),TGt.forEach(t),DOr=r(SOe," (Wav2Vec2 model)"),SOe.forEach(t),GOr=i(ae),yw=n(ae,"LI",{});var ROe=s(yw);Z0e=n(ROe,"STRONG",{});var MGt=s(Z0e);OOr=r(MGt,"xglm"),MGt.forEach(t),VOr=r(ROe," \u2014 "),yee=n(ROe,"A",{href:!0});var EGt=s(yee);XOr=r(EGt,"FlaxXGLMModel"),EGt.forEach(t),zOr=r(ROe," (XGLM model)"),ROe.forEach(t),QOr=i(ae),xw=n(ae,"LI",{});var POe=s(xw);ewe=n(POe,"STRONG",{});var CGt=s(ewe);WOr=r(CGt,"xlm-roberta"),CGt.forEach(t),HOr=r(POe," \u2014 "),xee=n(POe,"A",{href:!0});var wGt=s(xee);UOr=r(wGt,"FlaxXLMRobertaModel"),wGt.forEach(t),JOr=r(POe," (XLM-RoBERTa model)"),POe.forEach(t),ae.forEach(t),YOr=i(ni),T($w.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Wze=i(m),Kc=n(m,"H2",{class:!0});var rHe=s(Kc);kw=n(rHe,"A",{id:!0,class:!0,href:!0});var AGt=s(kw);owe=n(AGt,"SPAN",{});var LGt=s(owe);T(u$.$$.fragment,LGt),LGt.forEach(t),AGt.forEach(t),KOr=i(rHe),rwe=n(rHe,"SPAN",{});var yGt=s(rwe);ZOr=r(yGt,"FlaxAutoModelForCausalLM"),yGt.forEach(t),rHe.forEach(t),Hze=i(m),pr=n(m,"DIV",{class:!0});var si=s(pr);T(p$.$$.fragment,si),eVr=i(si),Zc=n(si,"P",{});var cae=s(Zc);oVr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$ee=n(cae,"A",{href:!0});var xGt=s($ee);rVr=r(xGt,"from_pretrained()"),xGt.forEach(t),tVr=r(cae," class method or the "),kee=n(cae,"A",{href:!0});var $Gt=s(kee);aVr=r($Gt,"from_config()"),$Gt.forEach(t),nVr=r(cae,` class
method.`),cae.forEach(t),sVr=i(si),_$=n(si,"P",{});var tHe=s(_$);lVr=r(tHe,"This class cannot be instantiated directly using "),twe=n(tHe,"CODE",{});var kGt=s(twe);iVr=r(kGt,"__init__()"),kGt.forEach(t),dVr=r(tHe," (throws an error)."),tHe.forEach(t),cVr=i(si),Ht=n(si,"DIV",{class:!0});var BL=s(Ht);T(b$.$$.fragment,BL),mVr=i(BL),awe=n(BL,"P",{});var SGt=s(awe);fVr=r(SGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SGt.forEach(t),gVr=i(BL),em=n(BL,"P",{});var mae=s(em);hVr=r(mae,`Note:
Loading a model from its configuration file does `),nwe=n(mae,"STRONG",{});var RGt=s(nwe);uVr=r(RGt,"not"),RGt.forEach(t),pVr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(mae,"A",{href:!0});var PGt=s(See);_Vr=r(PGt,"from_pretrained()"),PGt.forEach(t),bVr=r(mae," to load the model weights."),mae.forEach(t),vVr=i(BL),T(Sw.$$.fragment,BL),BL.forEach(t),FVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(v$.$$.fragment,li),TVr=i(li),swe=n(li,"P",{});var BGt=s(swe);MVr=r(BGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BGt.forEach(t),EVr=i(li),Mn=n(li,"P",{});var NL=s(Mn);CVr=r(NL,"The model class to instantiate is selected based on the "),lwe=n(NL,"CODE",{});var NGt=s(lwe);wVr=r(NGt,"model_type"),NGt.forEach(t),AVr=r(NL,` property of the config object (either
passed as an argument or loaded from `),iwe=n(NL,"CODE",{});var IGt=s(iwe);LVr=r(IGt,"pretrained_model_name_or_path"),IGt.forEach(t),yVr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=n(NL,"CODE",{});var qGt=s(dwe);xVr=r(qGt,"pretrained_model_name_or_path"),qGt.forEach(t),$Vr=r(NL,":"),NL.forEach(t),kVr=i(li),xe=n(li,"UL",{});var Ie=s(xe);Rw=n(Ie,"LI",{});var BOe=s(Rw);cwe=n(BOe,"STRONG",{});var jGt=s(cwe);SVr=r(jGt,"bart"),jGt.forEach(t),RVr=r(BOe," \u2014 "),Ree=n(BOe,"A",{href:!0});var DGt=s(Ree);PVr=r(DGt,"FlaxBartForCausalLM"),DGt.forEach(t),BVr=r(BOe," (BART model)"),BOe.forEach(t),NVr=i(Ie),Pw=n(Ie,"LI",{});var NOe=s(Pw);mwe=n(NOe,"STRONG",{});var GGt=s(mwe);IVr=r(GGt,"bert"),GGt.forEach(t),qVr=r(NOe," \u2014 "),Pee=n(NOe,"A",{href:!0});var OGt=s(Pee);jVr=r(OGt,"FlaxBertForCausalLM"),OGt.forEach(t),DVr=r(NOe," (BERT model)"),NOe.forEach(t),GVr=i(Ie),Bw=n(Ie,"LI",{});var IOe=s(Bw);fwe=n(IOe,"STRONG",{});var VGt=s(fwe);OVr=r(VGt,"big_bird"),VGt.forEach(t),VVr=r(IOe," \u2014 "),Bee=n(IOe,"A",{href:!0});var XGt=s(Bee);XVr=r(XGt,"FlaxBigBirdForCausalLM"),XGt.forEach(t),zVr=r(IOe," (BigBird model)"),IOe.forEach(t),QVr=i(Ie),Nw=n(Ie,"LI",{});var qOe=s(Nw);gwe=n(qOe,"STRONG",{});var zGt=s(gwe);WVr=r(zGt,"electra"),zGt.forEach(t),HVr=r(qOe," \u2014 "),Nee=n(qOe,"A",{href:!0});var QGt=s(Nee);UVr=r(QGt,"FlaxElectraForCausalLM"),QGt.forEach(t),JVr=r(qOe," (ELECTRA model)"),qOe.forEach(t),YVr=i(Ie),Iw=n(Ie,"LI",{});var jOe=s(Iw);hwe=n(jOe,"STRONG",{});var WGt=s(hwe);KVr=r(WGt,"gpt2"),WGt.forEach(t),ZVr=r(jOe," \u2014 "),Iee=n(jOe,"A",{href:!0});var HGt=s(Iee);eXr=r(HGt,"FlaxGPT2LMHeadModel"),HGt.forEach(t),oXr=r(jOe," (OpenAI GPT-2 model)"),jOe.forEach(t),rXr=i(Ie),qw=n(Ie,"LI",{});var DOe=s(qw);uwe=n(DOe,"STRONG",{});var UGt=s(uwe);tXr=r(UGt,"gpt_neo"),UGt.forEach(t),aXr=r(DOe," \u2014 "),qee=n(DOe,"A",{href:!0});var JGt=s(qee);nXr=r(JGt,"FlaxGPTNeoForCausalLM"),JGt.forEach(t),sXr=r(DOe," (GPT Neo model)"),DOe.forEach(t),lXr=i(Ie),jw=n(Ie,"LI",{});var GOe=s(jw);pwe=n(GOe,"STRONG",{});var YGt=s(pwe);iXr=r(YGt,"gptj"),YGt.forEach(t),dXr=r(GOe," \u2014 "),jee=n(GOe,"A",{href:!0});var KGt=s(jee);cXr=r(KGt,"FlaxGPTJForCausalLM"),KGt.forEach(t),mXr=r(GOe," (GPT-J model)"),GOe.forEach(t),fXr=i(Ie),Dw=n(Ie,"LI",{});var OOe=s(Dw);_we=n(OOe,"STRONG",{});var ZGt=s(_we);gXr=r(ZGt,"opt"),ZGt.forEach(t),hXr=r(OOe," \u2014 "),Dee=n(OOe,"A",{href:!0});var eOt=s(Dee);uXr=r(eOt,"FlaxOPTForCausalLM"),eOt.forEach(t),pXr=r(OOe," (OPT model)"),OOe.forEach(t),_Xr=i(Ie),Gw=n(Ie,"LI",{});var VOe=s(Gw);bwe=n(VOe,"STRONG",{});var oOt=s(bwe);bXr=r(oOt,"roberta"),oOt.forEach(t),vXr=r(VOe," \u2014 "),Gee=n(VOe,"A",{href:!0});var rOt=s(Gee);FXr=r(rOt,"FlaxRobertaForCausalLM"),rOt.forEach(t),TXr=r(VOe," (RoBERTa model)"),VOe.forEach(t),MXr=i(Ie),Ow=n(Ie,"LI",{});var XOe=s(Ow);vwe=n(XOe,"STRONG",{});var tOt=s(vwe);EXr=r(tOt,"xglm"),tOt.forEach(t),CXr=r(XOe," \u2014 "),Oee=n(XOe,"A",{href:!0});var aOt=s(Oee);wXr=r(aOt,"FlaxXGLMForCausalLM"),aOt.forEach(t),AXr=r(XOe," (XGLM model)"),XOe.forEach(t),Ie.forEach(t),LXr=i(li),T(Vw.$$.fragment,li),li.forEach(t),si.forEach(t),Uze=i(m),om=n(m,"H2",{class:!0});var aHe=s(om);Xw=n(aHe,"A",{id:!0,class:!0,href:!0});var nOt=s(Xw);Fwe=n(nOt,"SPAN",{});var sOt=s(Fwe);T(F$.$$.fragment,sOt),sOt.forEach(t),nOt.forEach(t),yXr=i(aHe),Twe=n(aHe,"SPAN",{});var lOt=s(Twe);xXr=r(lOt,"FlaxAutoModelForPreTraining"),lOt.forEach(t),aHe.forEach(t),Jze=i(m),_r=n(m,"DIV",{class:!0});var ii=s(_r);T(T$.$$.fragment,ii),$Xr=i(ii),rm=n(ii,"P",{});var fae=s(rm);kXr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vee=n(fae,"A",{href:!0});var iOt=s(Vee);SXr=r(iOt,"from_pretrained()"),iOt.forEach(t),RXr=r(fae," class method or the "),Xee=n(fae,"A",{href:!0});var dOt=s(Xee);PXr=r(dOt,"from_config()"),dOt.forEach(t),BXr=r(fae,` class
method.`),fae.forEach(t),NXr=i(ii),M$=n(ii,"P",{});var nHe=s(M$);IXr=r(nHe,"This class cannot be instantiated directly using "),Mwe=n(nHe,"CODE",{});var cOt=s(Mwe);qXr=r(cOt,"__init__()"),cOt.forEach(t),jXr=r(nHe," (throws an error)."),nHe.forEach(t),DXr=i(ii),Ut=n(ii,"DIV",{class:!0});var IL=s(Ut);T(E$.$$.fragment,IL),GXr=i(IL),Ewe=n(IL,"P",{});var mOt=s(Ewe);OXr=r(mOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mOt.forEach(t),VXr=i(IL),tm=n(IL,"P",{});var gae=s(tm);XXr=r(gae,`Note:
Loading a model from its configuration file does `),Cwe=n(gae,"STRONG",{});var fOt=s(Cwe);zXr=r(fOt,"not"),fOt.forEach(t),QXr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(gae,"A",{href:!0});var gOt=s(zee);WXr=r(gOt,"from_pretrained()"),gOt.forEach(t),HXr=r(gae," to load the model weights."),gae.forEach(t),UXr=i(IL),T(zw.$$.fragment,IL),IL.forEach(t),JXr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(C$.$$.fragment,di),YXr=i(di),wwe=n(di,"P",{});var hOt=s(wwe);KXr=r(hOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hOt.forEach(t),ZXr=i(di),En=n(di,"P",{});var qL=s(En);ezr=r(qL,"The model class to instantiate is selected based on the "),Awe=n(qL,"CODE",{});var uOt=s(Awe);ozr=r(uOt,"model_type"),uOt.forEach(t),rzr=r(qL,` property of the config object (either
passed as an argument or loaded from `),Lwe=n(qL,"CODE",{});var pOt=s(Lwe);tzr=r(pOt,"pretrained_model_name_or_path"),pOt.forEach(t),azr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ywe=n(qL,"CODE",{});var _Ot=s(ywe);nzr=r(_Ot,"pretrained_model_name_or_path"),_Ot.forEach(t),szr=r(qL,":"),qL.forEach(t),lzr=i(di),Ee=n(di,"UL",{});var we=s(Ee);Qw=n(we,"LI",{});var zOe=s(Qw);xwe=n(zOe,"STRONG",{});var bOt=s(xwe);izr=r(bOt,"albert"),bOt.forEach(t),dzr=r(zOe," \u2014 "),Qee=n(zOe,"A",{href:!0});var vOt=s(Qee);czr=r(vOt,"FlaxAlbertForPreTraining"),vOt.forEach(t),mzr=r(zOe," (ALBERT model)"),zOe.forEach(t),fzr=i(we),Ww=n(we,"LI",{});var QOe=s(Ww);$we=n(QOe,"STRONG",{});var FOt=s($we);gzr=r(FOt,"bart"),FOt.forEach(t),hzr=r(QOe," \u2014 "),Wee=n(QOe,"A",{href:!0});var TOt=s(Wee);uzr=r(TOt,"FlaxBartForConditionalGeneration"),TOt.forEach(t),pzr=r(QOe," (BART model)"),QOe.forEach(t),_zr=i(we),Hw=n(we,"LI",{});var WOe=s(Hw);kwe=n(WOe,"STRONG",{});var MOt=s(kwe);bzr=r(MOt,"bert"),MOt.forEach(t),vzr=r(WOe," \u2014 "),Hee=n(WOe,"A",{href:!0});var EOt=s(Hee);Fzr=r(EOt,"FlaxBertForPreTraining"),EOt.forEach(t),Tzr=r(WOe," (BERT model)"),WOe.forEach(t),Mzr=i(we),Uw=n(we,"LI",{});var HOe=s(Uw);Swe=n(HOe,"STRONG",{});var COt=s(Swe);Ezr=r(COt,"big_bird"),COt.forEach(t),Czr=r(HOe," \u2014 "),Uee=n(HOe,"A",{href:!0});var wOt=s(Uee);wzr=r(wOt,"FlaxBigBirdForPreTraining"),wOt.forEach(t),Azr=r(HOe," (BigBird model)"),HOe.forEach(t),Lzr=i(we),Jw=n(we,"LI",{});var UOe=s(Jw);Rwe=n(UOe,"STRONG",{});var AOt=s(Rwe);yzr=r(AOt,"electra"),AOt.forEach(t),xzr=r(UOe," \u2014 "),Jee=n(UOe,"A",{href:!0});var LOt=s(Jee);$zr=r(LOt,"FlaxElectraForPreTraining"),LOt.forEach(t),kzr=r(UOe," (ELECTRA model)"),UOe.forEach(t),Szr=i(we),Yw=n(we,"LI",{});var JOe=s(Yw);Pwe=n(JOe,"STRONG",{});var yOt=s(Pwe);Rzr=r(yOt,"longt5"),yOt.forEach(t),Pzr=r(JOe," \u2014 "),Yee=n(JOe,"A",{href:!0});var xOt=s(Yee);Bzr=r(xOt,"FlaxLongT5ForConditionalGeneration"),xOt.forEach(t),Nzr=r(JOe," (LongT5 model)"),JOe.forEach(t),Izr=i(we),Kw=n(we,"LI",{});var YOe=s(Kw);Bwe=n(YOe,"STRONG",{});var $Ot=s(Bwe);qzr=r($Ot,"mbart"),$Ot.forEach(t),jzr=r(YOe," \u2014 "),Kee=n(YOe,"A",{href:!0});var kOt=s(Kee);Dzr=r(kOt,"FlaxMBartForConditionalGeneration"),kOt.forEach(t),Gzr=r(YOe," (mBART model)"),YOe.forEach(t),Ozr=i(we),Zw=n(we,"LI",{});var KOe=s(Zw);Nwe=n(KOe,"STRONG",{});var SOt=s(Nwe);Vzr=r(SOt,"mt5"),SOt.forEach(t),Xzr=r(KOe," \u2014 "),Zee=n(KOe,"A",{href:!0});var ROt=s(Zee);zzr=r(ROt,"FlaxMT5ForConditionalGeneration"),ROt.forEach(t),Qzr=r(KOe," (MT5 model)"),KOe.forEach(t),Wzr=i(we),eA=n(we,"LI",{});var ZOe=s(eA);Iwe=n(ZOe,"STRONG",{});var POt=s(Iwe);Hzr=r(POt,"roberta"),POt.forEach(t),Uzr=r(ZOe," \u2014 "),eoe=n(ZOe,"A",{href:!0});var BOt=s(eoe);Jzr=r(BOt,"FlaxRobertaForMaskedLM"),BOt.forEach(t),Yzr=r(ZOe," (RoBERTa model)"),ZOe.forEach(t),Kzr=i(we),oA=n(we,"LI",{});var eVe=s(oA);qwe=n(eVe,"STRONG",{});var NOt=s(qwe);Zzr=r(NOt,"roformer"),NOt.forEach(t),eQr=r(eVe," \u2014 "),ooe=n(eVe,"A",{href:!0});var IOt=s(ooe);oQr=r(IOt,"FlaxRoFormerForMaskedLM"),IOt.forEach(t),rQr=r(eVe," (RoFormer model)"),eVe.forEach(t),tQr=i(we),rA=n(we,"LI",{});var oVe=s(rA);jwe=n(oVe,"STRONG",{});var qOt=s(jwe);aQr=r(qOt,"t5"),qOt.forEach(t),nQr=r(oVe," \u2014 "),roe=n(oVe,"A",{href:!0});var jOt=s(roe);sQr=r(jOt,"FlaxT5ForConditionalGeneration"),jOt.forEach(t),lQr=r(oVe," (T5 model)"),oVe.forEach(t),iQr=i(we),tA=n(we,"LI",{});var rVe=s(tA);Dwe=n(rVe,"STRONG",{});var DOt=s(Dwe);dQr=r(DOt,"wav2vec2"),DOt.forEach(t),cQr=r(rVe," \u2014 "),toe=n(rVe,"A",{href:!0});var GOt=s(toe);mQr=r(GOt,"FlaxWav2Vec2ForPreTraining"),GOt.forEach(t),fQr=r(rVe," (Wav2Vec2 model)"),rVe.forEach(t),gQr=i(we),aA=n(we,"LI",{});var tVe=s(aA);Gwe=n(tVe,"STRONG",{});var OOt=s(Gwe);hQr=r(OOt,"xlm-roberta"),OOt.forEach(t),uQr=r(tVe," \u2014 "),aoe=n(tVe,"A",{href:!0});var VOt=s(aoe);pQr=r(VOt,"FlaxXLMRobertaForMaskedLM"),VOt.forEach(t),_Qr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),we.forEach(t),bQr=i(di),T(nA.$$.fragment,di),di.forEach(t),ii.forEach(t),Yze=i(m),am=n(m,"H2",{class:!0});var sHe=s(am);sA=n(sHe,"A",{id:!0,class:!0,href:!0});var XOt=s(sA);Owe=n(XOt,"SPAN",{});var zOt=s(Owe);T(w$.$$.fragment,zOt),zOt.forEach(t),XOt.forEach(t),vQr=i(sHe),Vwe=n(sHe,"SPAN",{});var QOt=s(Vwe);FQr=r(QOt,"FlaxAutoModelForMaskedLM"),QOt.forEach(t),sHe.forEach(t),Kze=i(m),br=n(m,"DIV",{class:!0});var ci=s(br);T(A$.$$.fragment,ci),TQr=i(ci),nm=n(ci,"P",{});var hae=s(nm);MQr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),noe=n(hae,"A",{href:!0});var WOt=s(noe);EQr=r(WOt,"from_pretrained()"),WOt.forEach(t),CQr=r(hae," class method or the "),soe=n(hae,"A",{href:!0});var HOt=s(soe);wQr=r(HOt,"from_config()"),HOt.forEach(t),AQr=r(hae,` class
method.`),hae.forEach(t),LQr=i(ci),L$=n(ci,"P",{});var lHe=s(L$);yQr=r(lHe,"This class cannot be instantiated directly using "),Xwe=n(lHe,"CODE",{});var UOt=s(Xwe);xQr=r(UOt,"__init__()"),UOt.forEach(t),$Qr=r(lHe," (throws an error)."),lHe.forEach(t),kQr=i(ci),Jt=n(ci,"DIV",{class:!0});var jL=s(Jt);T(y$.$$.fragment,jL),SQr=i(jL),zwe=n(jL,"P",{});var JOt=s(zwe);RQr=r(JOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JOt.forEach(t),PQr=i(jL),sm=n(jL,"P",{});var uae=s(sm);BQr=r(uae,`Note:
Loading a model from its configuration file does `),Qwe=n(uae,"STRONG",{});var YOt=s(Qwe);NQr=r(YOt,"not"),YOt.forEach(t),IQr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=n(uae,"A",{href:!0});var KOt=s(loe);qQr=r(KOt,"from_pretrained()"),KOt.forEach(t),jQr=r(uae," to load the model weights."),uae.forEach(t),DQr=i(jL),T(lA.$$.fragment,jL),jL.forEach(t),GQr=i(ci),Qr=n(ci,"DIV",{class:!0});var mi=s(Qr);T(x$.$$.fragment,mi),OQr=i(mi),Wwe=n(mi,"P",{});var ZOt=s(Wwe);VQr=r(ZOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZOt.forEach(t),XQr=i(mi),Cn=n(mi,"P",{});var DL=s(Cn);zQr=r(DL,"The model class to instantiate is selected based on the "),Hwe=n(DL,"CODE",{});var eVt=s(Hwe);QQr=r(eVt,"model_type"),eVt.forEach(t),WQr=r(DL,` property of the config object (either
passed as an argument or loaded from `),Uwe=n(DL,"CODE",{});var oVt=s(Uwe);HQr=r(oVt,"pretrained_model_name_or_path"),oVt.forEach(t),UQr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=n(DL,"CODE",{});var rVt=s(Jwe);JQr=r(rVt,"pretrained_model_name_or_path"),rVt.forEach(t),YQr=r(DL,":"),DL.forEach(t),KQr=i(mi),$e=n(mi,"UL",{});var qe=s($e);iA=n(qe,"LI",{});var aVe=s(iA);Ywe=n(aVe,"STRONG",{});var tVt=s(Ywe);ZQr=r(tVt,"albert"),tVt.forEach(t),eWr=r(aVe," \u2014 "),ioe=n(aVe,"A",{href:!0});var aVt=s(ioe);oWr=r(aVt,"FlaxAlbertForMaskedLM"),aVt.forEach(t),rWr=r(aVe," (ALBERT model)"),aVe.forEach(t),tWr=i(qe),dA=n(qe,"LI",{});var nVe=s(dA);Kwe=n(nVe,"STRONG",{});var nVt=s(Kwe);aWr=r(nVt,"bart"),nVt.forEach(t),nWr=r(nVe," \u2014 "),doe=n(nVe,"A",{href:!0});var sVt=s(doe);sWr=r(sVt,"FlaxBartForConditionalGeneration"),sVt.forEach(t),lWr=r(nVe," (BART model)"),nVe.forEach(t),iWr=i(qe),cA=n(qe,"LI",{});var sVe=s(cA);Zwe=n(sVe,"STRONG",{});var lVt=s(Zwe);dWr=r(lVt,"bert"),lVt.forEach(t),cWr=r(sVe," \u2014 "),coe=n(sVe,"A",{href:!0});var iVt=s(coe);mWr=r(iVt,"FlaxBertForMaskedLM"),iVt.forEach(t),fWr=r(sVe," (BERT model)"),sVe.forEach(t),gWr=i(qe),mA=n(qe,"LI",{});var lVe=s(mA);eAe=n(lVe,"STRONG",{});var dVt=s(eAe);hWr=r(dVt,"big_bird"),dVt.forEach(t),uWr=r(lVe," \u2014 "),moe=n(lVe,"A",{href:!0});var cVt=s(moe);pWr=r(cVt,"FlaxBigBirdForMaskedLM"),cVt.forEach(t),_Wr=r(lVe," (BigBird model)"),lVe.forEach(t),bWr=i(qe),fA=n(qe,"LI",{});var iVe=s(fA);oAe=n(iVe,"STRONG",{});var mVt=s(oAe);vWr=r(mVt,"distilbert"),mVt.forEach(t),FWr=r(iVe," \u2014 "),foe=n(iVe,"A",{href:!0});var fVt=s(foe);TWr=r(fVt,"FlaxDistilBertForMaskedLM"),fVt.forEach(t),MWr=r(iVe," (DistilBERT model)"),iVe.forEach(t),EWr=i(qe),gA=n(qe,"LI",{});var dVe=s(gA);rAe=n(dVe,"STRONG",{});var gVt=s(rAe);CWr=r(gVt,"electra"),gVt.forEach(t),wWr=r(dVe," \u2014 "),goe=n(dVe,"A",{href:!0});var hVt=s(goe);AWr=r(hVt,"FlaxElectraForMaskedLM"),hVt.forEach(t),LWr=r(dVe," (ELECTRA model)"),dVe.forEach(t),yWr=i(qe),hA=n(qe,"LI",{});var cVe=s(hA);tAe=n(cVe,"STRONG",{});var uVt=s(tAe);xWr=r(uVt,"mbart"),uVt.forEach(t),$Wr=r(cVe," \u2014 "),hoe=n(cVe,"A",{href:!0});var pVt=s(hoe);kWr=r(pVt,"FlaxMBartForConditionalGeneration"),pVt.forEach(t),SWr=r(cVe," (mBART model)"),cVe.forEach(t),RWr=i(qe),uA=n(qe,"LI",{});var mVe=s(uA);aAe=n(mVe,"STRONG",{});var _Vt=s(aAe);PWr=r(_Vt,"roberta"),_Vt.forEach(t),BWr=r(mVe," \u2014 "),uoe=n(mVe,"A",{href:!0});var bVt=s(uoe);NWr=r(bVt,"FlaxRobertaForMaskedLM"),bVt.forEach(t),IWr=r(mVe," (RoBERTa model)"),mVe.forEach(t),qWr=i(qe),pA=n(qe,"LI",{});var fVe=s(pA);nAe=n(fVe,"STRONG",{});var vVt=s(nAe);jWr=r(vVt,"roformer"),vVt.forEach(t),DWr=r(fVe," \u2014 "),poe=n(fVe,"A",{href:!0});var FVt=s(poe);GWr=r(FVt,"FlaxRoFormerForMaskedLM"),FVt.forEach(t),OWr=r(fVe," (RoFormer model)"),fVe.forEach(t),VWr=i(qe),_A=n(qe,"LI",{});var gVe=s(_A);sAe=n(gVe,"STRONG",{});var TVt=s(sAe);XWr=r(TVt,"xlm-roberta"),TVt.forEach(t),zWr=r(gVe," \u2014 "),_oe=n(gVe,"A",{href:!0});var MVt=s(_oe);QWr=r(MVt,"FlaxXLMRobertaForMaskedLM"),MVt.forEach(t),WWr=r(gVe," (XLM-RoBERTa model)"),gVe.forEach(t),qe.forEach(t),HWr=i(mi),T(bA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),Zze=i(m),lm=n(m,"H2",{class:!0});var iHe=s(lm);vA=n(iHe,"A",{id:!0,class:!0,href:!0});var EVt=s(vA);lAe=n(EVt,"SPAN",{});var CVt=s(lAe);T($$.$$.fragment,CVt),CVt.forEach(t),EVt.forEach(t),UWr=i(iHe),iAe=n(iHe,"SPAN",{});var wVt=s(iAe);JWr=r(wVt,"FlaxAutoModelForSeq2SeqLM"),wVt.forEach(t),iHe.forEach(t),eQe=i(m),vr=n(m,"DIV",{class:!0});var fi=s(vr);T(k$.$$.fragment,fi),YWr=i(fi),im=n(fi,"P",{});var pae=s(im);KWr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),boe=n(pae,"A",{href:!0});var AVt=s(boe);ZWr=r(AVt,"from_pretrained()"),AVt.forEach(t),eHr=r(pae," class method or the "),voe=n(pae,"A",{href:!0});var LVt=s(voe);oHr=r(LVt,"from_config()"),LVt.forEach(t),rHr=r(pae,` class
method.`),pae.forEach(t),tHr=i(fi),S$=n(fi,"P",{});var dHe=s(S$);aHr=r(dHe,"This class cannot be instantiated directly using "),dAe=n(dHe,"CODE",{});var yVt=s(dAe);nHr=r(yVt,"__init__()"),yVt.forEach(t),sHr=r(dHe," (throws an error)."),dHe.forEach(t),lHr=i(fi),Yt=n(fi,"DIV",{class:!0});var GL=s(Yt);T(R$.$$.fragment,GL),iHr=i(GL),cAe=n(GL,"P",{});var xVt=s(cAe);dHr=r(xVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xVt.forEach(t),cHr=i(GL),dm=n(GL,"P",{});var _ae=s(dm);mHr=r(_ae,`Note:
Loading a model from its configuration file does `),mAe=n(_ae,"STRONG",{});var $Vt=s(mAe);fHr=r($Vt,"not"),$Vt.forEach(t),gHr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=n(_ae,"A",{href:!0});var kVt=s(Foe);hHr=r(kVt,"from_pretrained()"),kVt.forEach(t),uHr=r(_ae," to load the model weights."),_ae.forEach(t),pHr=i(GL),T(FA.$$.fragment,GL),GL.forEach(t),_Hr=i(fi),Wr=n(fi,"DIV",{class:!0});var gi=s(Wr);T(P$.$$.fragment,gi),bHr=i(gi),fAe=n(gi,"P",{});var SVt=s(fAe);vHr=r(SVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SVt.forEach(t),FHr=i(gi),wn=n(gi,"P",{});var OL=s(wn);THr=r(OL,"The model class to instantiate is selected based on the "),gAe=n(OL,"CODE",{});var RVt=s(gAe);MHr=r(RVt,"model_type"),RVt.forEach(t),EHr=r(OL,` property of the config object (either
passed as an argument or loaded from `),hAe=n(OL,"CODE",{});var PVt=s(hAe);CHr=r(PVt,"pretrained_model_name_or_path"),PVt.forEach(t),wHr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=n(OL,"CODE",{});var BVt=s(uAe);AHr=r(BVt,"pretrained_model_name_or_path"),BVt.forEach(t),LHr=r(OL,":"),OL.forEach(t),yHr=i(gi),ke=n(gi,"UL",{});var je=s(ke);TA=n(je,"LI",{});var hVe=s(TA);pAe=n(hVe,"STRONG",{});var NVt=s(pAe);xHr=r(NVt,"bart"),NVt.forEach(t),$Hr=r(hVe," \u2014 "),Toe=n(hVe,"A",{href:!0});var IVt=s(Toe);kHr=r(IVt,"FlaxBartForConditionalGeneration"),IVt.forEach(t),SHr=r(hVe," (BART model)"),hVe.forEach(t),RHr=i(je),MA=n(je,"LI",{});var uVe=s(MA);_Ae=n(uVe,"STRONG",{});var qVt=s(_Ae);PHr=r(qVt,"blenderbot"),qVt.forEach(t),BHr=r(uVe," \u2014 "),Moe=n(uVe,"A",{href:!0});var jVt=s(Moe);NHr=r(jVt,"FlaxBlenderbotForConditionalGeneration"),jVt.forEach(t),IHr=r(uVe," (Blenderbot model)"),uVe.forEach(t),qHr=i(je),EA=n(je,"LI",{});var pVe=s(EA);bAe=n(pVe,"STRONG",{});var DVt=s(bAe);jHr=r(DVt,"blenderbot-small"),DVt.forEach(t),DHr=r(pVe," \u2014 "),Eoe=n(pVe,"A",{href:!0});var GVt=s(Eoe);GHr=r(GVt,"FlaxBlenderbotSmallForConditionalGeneration"),GVt.forEach(t),OHr=r(pVe," (BlenderbotSmall model)"),pVe.forEach(t),VHr=i(je),CA=n(je,"LI",{});var _Ve=s(CA);vAe=n(_Ve,"STRONG",{});var OVt=s(vAe);XHr=r(OVt,"encoder-decoder"),OVt.forEach(t),zHr=r(_Ve," \u2014 "),Coe=n(_Ve,"A",{href:!0});var VVt=s(Coe);QHr=r(VVt,"FlaxEncoderDecoderModel"),VVt.forEach(t),WHr=r(_Ve," (Encoder decoder model)"),_Ve.forEach(t),HHr=i(je),wA=n(je,"LI",{});var bVe=s(wA);FAe=n(bVe,"STRONG",{});var XVt=s(FAe);UHr=r(XVt,"longt5"),XVt.forEach(t),JHr=r(bVe," \u2014 "),woe=n(bVe,"A",{href:!0});var zVt=s(woe);YHr=r(zVt,"FlaxLongT5ForConditionalGeneration"),zVt.forEach(t),KHr=r(bVe," (LongT5 model)"),bVe.forEach(t),ZHr=i(je),AA=n(je,"LI",{});var vVe=s(AA);TAe=n(vVe,"STRONG",{});var QVt=s(TAe);eUr=r(QVt,"marian"),QVt.forEach(t),oUr=r(vVe," \u2014 "),Aoe=n(vVe,"A",{href:!0});var WVt=s(Aoe);rUr=r(WVt,"FlaxMarianMTModel"),WVt.forEach(t),tUr=r(vVe," (Marian model)"),vVe.forEach(t),aUr=i(je),LA=n(je,"LI",{});var FVe=s(LA);MAe=n(FVe,"STRONG",{});var HVt=s(MAe);nUr=r(HVt,"mbart"),HVt.forEach(t),sUr=r(FVe," \u2014 "),Loe=n(FVe,"A",{href:!0});var UVt=s(Loe);lUr=r(UVt,"FlaxMBartForConditionalGeneration"),UVt.forEach(t),iUr=r(FVe," (mBART model)"),FVe.forEach(t),dUr=i(je),yA=n(je,"LI",{});var TVe=s(yA);EAe=n(TVe,"STRONG",{});var JVt=s(EAe);cUr=r(JVt,"mt5"),JVt.forEach(t),mUr=r(TVe," \u2014 "),yoe=n(TVe,"A",{href:!0});var YVt=s(yoe);fUr=r(YVt,"FlaxMT5ForConditionalGeneration"),YVt.forEach(t),gUr=r(TVe," (MT5 model)"),TVe.forEach(t),hUr=i(je),xA=n(je,"LI",{});var MVe=s(xA);CAe=n(MVe,"STRONG",{});var KVt=s(CAe);uUr=r(KVt,"pegasus"),KVt.forEach(t),pUr=r(MVe," \u2014 "),xoe=n(MVe,"A",{href:!0});var ZVt=s(xoe);_Ur=r(ZVt,"FlaxPegasusForConditionalGeneration"),ZVt.forEach(t),bUr=r(MVe," (Pegasus model)"),MVe.forEach(t),vUr=i(je),$A=n(je,"LI",{});var EVe=s($A);wAe=n(EVe,"STRONG",{});var eXt=s(wAe);FUr=r(eXt,"t5"),eXt.forEach(t),TUr=r(EVe," \u2014 "),$oe=n(EVe,"A",{href:!0});var oXt=s($oe);MUr=r(oXt,"FlaxT5ForConditionalGeneration"),oXt.forEach(t),EUr=r(EVe," (T5 model)"),EVe.forEach(t),je.forEach(t),CUr=i(gi),T(kA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),oQe=i(m),cm=n(m,"H2",{class:!0});var cHe=s(cm);SA=n(cHe,"A",{id:!0,class:!0,href:!0});var rXt=s(SA);AAe=n(rXt,"SPAN",{});var tXt=s(AAe);T(B$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),wUr=i(cHe),LAe=n(cHe,"SPAN",{});var aXt=s(LAe);AUr=r(aXt,"FlaxAutoModelForSequenceClassification"),aXt.forEach(t),cHe.forEach(t),rQe=i(m),Fr=n(m,"DIV",{class:!0});var hi=s(Fr);T(N$.$$.fragment,hi),LUr=i(hi),mm=n(hi,"P",{});var bae=s(mm);yUr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),koe=n(bae,"A",{href:!0});var nXt=s(koe);xUr=r(nXt,"from_pretrained()"),nXt.forEach(t),$Ur=r(bae," class method or the "),Soe=n(bae,"A",{href:!0});var sXt=s(Soe);kUr=r(sXt,"from_config()"),sXt.forEach(t),SUr=r(bae,` class
method.`),bae.forEach(t),RUr=i(hi),I$=n(hi,"P",{});var mHe=s(I$);PUr=r(mHe,"This class cannot be instantiated directly using "),yAe=n(mHe,"CODE",{});var lXt=s(yAe);BUr=r(lXt,"__init__()"),lXt.forEach(t),NUr=r(mHe," (throws an error)."),mHe.forEach(t),IUr=i(hi),Kt=n(hi,"DIV",{class:!0});var VL=s(Kt);T(q$.$$.fragment,VL),qUr=i(VL),xAe=n(VL,"P",{});var iXt=s(xAe);jUr=r(iXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iXt.forEach(t),DUr=i(VL),fm=n(VL,"P",{});var vae=s(fm);GUr=r(vae,`Note:
Loading a model from its configuration file does `),$Ae=n(vae,"STRONG",{});var dXt=s($Ae);OUr=r(dXt,"not"),dXt.forEach(t),VUr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(vae,"A",{href:!0});var cXt=s(Roe);XUr=r(cXt,"from_pretrained()"),cXt.forEach(t),zUr=r(vae," to load the model weights."),vae.forEach(t),QUr=i(VL),T(RA.$$.fragment,VL),VL.forEach(t),WUr=i(hi),Hr=n(hi,"DIV",{class:!0});var ui=s(Hr);T(j$.$$.fragment,ui),HUr=i(ui),kAe=n(ui,"P",{});var mXt=s(kAe);UUr=r(mXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mXt.forEach(t),JUr=i(ui),An=n(ui,"P",{});var XL=s(An);YUr=r(XL,"The model class to instantiate is selected based on the "),SAe=n(XL,"CODE",{});var fXt=s(SAe);KUr=r(fXt,"model_type"),fXt.forEach(t),ZUr=r(XL,` property of the config object (either
passed as an argument or loaded from `),RAe=n(XL,"CODE",{});var gXt=s(RAe);eJr=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),oJr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PAe=n(XL,"CODE",{});var hXt=s(PAe);rJr=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),tJr=r(XL,":"),XL.forEach(t),aJr=i(ui),Se=n(ui,"UL",{});var De=s(Se);PA=n(De,"LI",{});var CVe=s(PA);BAe=n(CVe,"STRONG",{});var uXt=s(BAe);nJr=r(uXt,"albert"),uXt.forEach(t),sJr=r(CVe," \u2014 "),Poe=n(CVe,"A",{href:!0});var pXt=s(Poe);lJr=r(pXt,"FlaxAlbertForSequenceClassification"),pXt.forEach(t),iJr=r(CVe," (ALBERT model)"),CVe.forEach(t),dJr=i(De),BA=n(De,"LI",{});var wVe=s(BA);NAe=n(wVe,"STRONG",{});var _Xt=s(NAe);cJr=r(_Xt,"bart"),_Xt.forEach(t),mJr=r(wVe," \u2014 "),Boe=n(wVe,"A",{href:!0});var bXt=s(Boe);fJr=r(bXt,"FlaxBartForSequenceClassification"),bXt.forEach(t),gJr=r(wVe," (BART model)"),wVe.forEach(t),hJr=i(De),NA=n(De,"LI",{});var AVe=s(NA);IAe=n(AVe,"STRONG",{});var vXt=s(IAe);uJr=r(vXt,"bert"),vXt.forEach(t),pJr=r(AVe," \u2014 "),Noe=n(AVe,"A",{href:!0});var FXt=s(Noe);_Jr=r(FXt,"FlaxBertForSequenceClassification"),FXt.forEach(t),bJr=r(AVe," (BERT model)"),AVe.forEach(t),vJr=i(De),IA=n(De,"LI",{});var LVe=s(IA);qAe=n(LVe,"STRONG",{});var TXt=s(qAe);FJr=r(TXt,"big_bird"),TXt.forEach(t),TJr=r(LVe," \u2014 "),Ioe=n(LVe,"A",{href:!0});var MXt=s(Ioe);MJr=r(MXt,"FlaxBigBirdForSequenceClassification"),MXt.forEach(t),EJr=r(LVe," (BigBird model)"),LVe.forEach(t),CJr=i(De),qA=n(De,"LI",{});var yVe=s(qA);jAe=n(yVe,"STRONG",{});var EXt=s(jAe);wJr=r(EXt,"distilbert"),EXt.forEach(t),AJr=r(yVe," \u2014 "),qoe=n(yVe,"A",{href:!0});var CXt=s(qoe);LJr=r(CXt,"FlaxDistilBertForSequenceClassification"),CXt.forEach(t),yJr=r(yVe," (DistilBERT model)"),yVe.forEach(t),xJr=i(De),jA=n(De,"LI",{});var xVe=s(jA);DAe=n(xVe,"STRONG",{});var wXt=s(DAe);$Jr=r(wXt,"electra"),wXt.forEach(t),kJr=r(xVe," \u2014 "),joe=n(xVe,"A",{href:!0});var AXt=s(joe);SJr=r(AXt,"FlaxElectraForSequenceClassification"),AXt.forEach(t),RJr=r(xVe," (ELECTRA model)"),xVe.forEach(t),PJr=i(De),DA=n(De,"LI",{});var $Ve=s(DA);GAe=n($Ve,"STRONG",{});var LXt=s(GAe);BJr=r(LXt,"mbart"),LXt.forEach(t),NJr=r($Ve," \u2014 "),Doe=n($Ve,"A",{href:!0});var yXt=s(Doe);IJr=r(yXt,"FlaxMBartForSequenceClassification"),yXt.forEach(t),qJr=r($Ve," (mBART model)"),$Ve.forEach(t),jJr=i(De),GA=n(De,"LI",{});var kVe=s(GA);OAe=n(kVe,"STRONG",{});var xXt=s(OAe);DJr=r(xXt,"roberta"),xXt.forEach(t),GJr=r(kVe," \u2014 "),Goe=n(kVe,"A",{href:!0});var $Xt=s(Goe);OJr=r($Xt,"FlaxRobertaForSequenceClassification"),$Xt.forEach(t),VJr=r(kVe," (RoBERTa model)"),kVe.forEach(t),XJr=i(De),OA=n(De,"LI",{});var SVe=s(OA);VAe=n(SVe,"STRONG",{});var kXt=s(VAe);zJr=r(kXt,"roformer"),kXt.forEach(t),QJr=r(SVe," \u2014 "),Ooe=n(SVe,"A",{href:!0});var SXt=s(Ooe);WJr=r(SXt,"FlaxRoFormerForSequenceClassification"),SXt.forEach(t),HJr=r(SVe," (RoFormer model)"),SVe.forEach(t),UJr=i(De),VA=n(De,"LI",{});var RVe=s(VA);XAe=n(RVe,"STRONG",{});var RXt=s(XAe);JJr=r(RXt,"xlm-roberta"),RXt.forEach(t),YJr=r(RVe," \u2014 "),Voe=n(RVe,"A",{href:!0});var PXt=s(Voe);KJr=r(PXt,"FlaxXLMRobertaForSequenceClassification"),PXt.forEach(t),ZJr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),De.forEach(t),eYr=i(ui),T(XA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),tQe=i(m),gm=n(m,"H2",{class:!0});var fHe=s(gm);zA=n(fHe,"A",{id:!0,class:!0,href:!0});var BXt=s(zA);zAe=n(BXt,"SPAN",{});var NXt=s(zAe);T(D$.$$.fragment,NXt),NXt.forEach(t),BXt.forEach(t),oYr=i(fHe),QAe=n(fHe,"SPAN",{});var IXt=s(QAe);rYr=r(IXt,"FlaxAutoModelForQuestionAnswering"),IXt.forEach(t),fHe.forEach(t),aQe=i(m),Tr=n(m,"DIV",{class:!0});var pi=s(Tr);T(G$.$$.fragment,pi),tYr=i(pi),hm=n(pi,"P",{});var Fae=s(hm);aYr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xoe=n(Fae,"A",{href:!0});var qXt=s(Xoe);nYr=r(qXt,"from_pretrained()"),qXt.forEach(t),sYr=r(Fae," class method or the "),zoe=n(Fae,"A",{href:!0});var jXt=s(zoe);lYr=r(jXt,"from_config()"),jXt.forEach(t),iYr=r(Fae,` class
method.`),Fae.forEach(t),dYr=i(pi),O$=n(pi,"P",{});var gHe=s(O$);cYr=r(gHe,"This class cannot be instantiated directly using "),WAe=n(gHe,"CODE",{});var DXt=s(WAe);mYr=r(DXt,"__init__()"),DXt.forEach(t),fYr=r(gHe," (throws an error)."),gHe.forEach(t),gYr=i(pi),Zt=n(pi,"DIV",{class:!0});var zL=s(Zt);T(V$.$$.fragment,zL),hYr=i(zL),HAe=n(zL,"P",{});var GXt=s(HAe);uYr=r(GXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GXt.forEach(t),pYr=i(zL),um=n(zL,"P",{});var Tae=s(um);_Yr=r(Tae,`Note:
Loading a model from its configuration file does `),UAe=n(Tae,"STRONG",{});var OXt=s(UAe);bYr=r(OXt,"not"),OXt.forEach(t),vYr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=n(Tae,"A",{href:!0});var VXt=s(Qoe);FYr=r(VXt,"from_pretrained()"),VXt.forEach(t),TYr=r(Tae," to load the model weights."),Tae.forEach(t),MYr=i(zL),T(QA.$$.fragment,zL),zL.forEach(t),EYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(X$.$$.fragment,_i),CYr=i(_i),JAe=n(_i,"P",{});var XXt=s(JAe);wYr=r(XXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XXt.forEach(t),AYr=i(_i),Ln=n(_i,"P",{});var QL=s(Ln);LYr=r(QL,"The model class to instantiate is selected based on the "),YAe=n(QL,"CODE",{});var zXt=s(YAe);yYr=r(zXt,"model_type"),zXt.forEach(t),xYr=r(QL,` property of the config object (either
passed as an argument or loaded from `),KAe=n(QL,"CODE",{});var QXt=s(KAe);$Yr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),kYr=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=n(QL,"CODE",{});var WXt=s(ZAe);SYr=r(WXt,"pretrained_model_name_or_path"),WXt.forEach(t),RYr=r(QL,":"),QL.forEach(t),PYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);WA=n(Ge,"LI",{});var PVe=s(WA);e6e=n(PVe,"STRONG",{});var HXt=s(e6e);BYr=r(HXt,"albert"),HXt.forEach(t),NYr=r(PVe," \u2014 "),Woe=n(PVe,"A",{href:!0});var UXt=s(Woe);IYr=r(UXt,"FlaxAlbertForQuestionAnswering"),UXt.forEach(t),qYr=r(PVe," (ALBERT model)"),PVe.forEach(t),jYr=i(Ge),HA=n(Ge,"LI",{});var BVe=s(HA);o6e=n(BVe,"STRONG",{});var JXt=s(o6e);DYr=r(JXt,"bart"),JXt.forEach(t),GYr=r(BVe," \u2014 "),Hoe=n(BVe,"A",{href:!0});var YXt=s(Hoe);OYr=r(YXt,"FlaxBartForQuestionAnswering"),YXt.forEach(t),VYr=r(BVe," (BART model)"),BVe.forEach(t),XYr=i(Ge),UA=n(Ge,"LI",{});var NVe=s(UA);r6e=n(NVe,"STRONG",{});var KXt=s(r6e);zYr=r(KXt,"bert"),KXt.forEach(t),QYr=r(NVe," \u2014 "),Uoe=n(NVe,"A",{href:!0});var ZXt=s(Uoe);WYr=r(ZXt,"FlaxBertForQuestionAnswering"),ZXt.forEach(t),HYr=r(NVe," (BERT model)"),NVe.forEach(t),UYr=i(Ge),JA=n(Ge,"LI",{});var IVe=s(JA);t6e=n(IVe,"STRONG",{});var ezt=s(t6e);JYr=r(ezt,"big_bird"),ezt.forEach(t),YYr=r(IVe," \u2014 "),Joe=n(IVe,"A",{href:!0});var ozt=s(Joe);KYr=r(ozt,"FlaxBigBirdForQuestionAnswering"),ozt.forEach(t),ZYr=r(IVe," (BigBird model)"),IVe.forEach(t),eKr=i(Ge),YA=n(Ge,"LI",{});var qVe=s(YA);a6e=n(qVe,"STRONG",{});var rzt=s(a6e);oKr=r(rzt,"distilbert"),rzt.forEach(t),rKr=r(qVe," \u2014 "),Yoe=n(qVe,"A",{href:!0});var tzt=s(Yoe);tKr=r(tzt,"FlaxDistilBertForQuestionAnswering"),tzt.forEach(t),aKr=r(qVe," (DistilBERT model)"),qVe.forEach(t),nKr=i(Ge),KA=n(Ge,"LI",{});var jVe=s(KA);n6e=n(jVe,"STRONG",{});var azt=s(n6e);sKr=r(azt,"electra"),azt.forEach(t),lKr=r(jVe," \u2014 "),Koe=n(jVe,"A",{href:!0});var nzt=s(Koe);iKr=r(nzt,"FlaxElectraForQuestionAnswering"),nzt.forEach(t),dKr=r(jVe," (ELECTRA model)"),jVe.forEach(t),cKr=i(Ge),ZA=n(Ge,"LI",{});var DVe=s(ZA);s6e=n(DVe,"STRONG",{});var szt=s(s6e);mKr=r(szt,"mbart"),szt.forEach(t),fKr=r(DVe," \u2014 "),Zoe=n(DVe,"A",{href:!0});var lzt=s(Zoe);gKr=r(lzt,"FlaxMBartForQuestionAnswering"),lzt.forEach(t),hKr=r(DVe," (mBART model)"),DVe.forEach(t),uKr=i(Ge),e6=n(Ge,"LI",{});var GVe=s(e6);l6e=n(GVe,"STRONG",{});var izt=s(l6e);pKr=r(izt,"roberta"),izt.forEach(t),_Kr=r(GVe," \u2014 "),ere=n(GVe,"A",{href:!0});var dzt=s(ere);bKr=r(dzt,"FlaxRobertaForQuestionAnswering"),dzt.forEach(t),vKr=r(GVe," (RoBERTa model)"),GVe.forEach(t),FKr=i(Ge),o6=n(Ge,"LI",{});var OVe=s(o6);i6e=n(OVe,"STRONG",{});var czt=s(i6e);TKr=r(czt,"roformer"),czt.forEach(t),MKr=r(OVe," \u2014 "),ore=n(OVe,"A",{href:!0});var mzt=s(ore);EKr=r(mzt,"FlaxRoFormerForQuestionAnswering"),mzt.forEach(t),CKr=r(OVe," (RoFormer model)"),OVe.forEach(t),wKr=i(Ge),r6=n(Ge,"LI",{});var VVe=s(r6);d6e=n(VVe,"STRONG",{});var fzt=s(d6e);AKr=r(fzt,"xlm-roberta"),fzt.forEach(t),LKr=r(VVe," \u2014 "),rre=n(VVe,"A",{href:!0});var gzt=s(rre);yKr=r(gzt,"FlaxXLMRobertaForQuestionAnswering"),gzt.forEach(t),xKr=r(VVe," (XLM-RoBERTa model)"),VVe.forEach(t),Ge.forEach(t),$Kr=i(_i),T(t6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),nQe=i(m),pm=n(m,"H2",{class:!0});var hHe=s(pm);a6=n(hHe,"A",{id:!0,class:!0,href:!0});var hzt=s(a6);c6e=n(hzt,"SPAN",{});var uzt=s(c6e);T(z$.$$.fragment,uzt),uzt.forEach(t),hzt.forEach(t),kKr=i(hHe),m6e=n(hHe,"SPAN",{});var pzt=s(m6e);SKr=r(pzt,"FlaxAutoModelForTokenClassification"),pzt.forEach(t),hHe.forEach(t),sQe=i(m),Mr=n(m,"DIV",{class:!0});var bi=s(Mr);T(Q$.$$.fragment,bi),RKr=i(bi),_m=n(bi,"P",{});var Mae=s(_m);PKr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tre=n(Mae,"A",{href:!0});var _zt=s(tre);BKr=r(_zt,"from_pretrained()"),_zt.forEach(t),NKr=r(Mae," class method or the "),are=n(Mae,"A",{href:!0});var bzt=s(are);IKr=r(bzt,"from_config()"),bzt.forEach(t),qKr=r(Mae,` class
method.`),Mae.forEach(t),jKr=i(bi),W$=n(bi,"P",{});var uHe=s(W$);DKr=r(uHe,"This class cannot be instantiated directly using "),f6e=n(uHe,"CODE",{});var vzt=s(f6e);GKr=r(vzt,"__init__()"),vzt.forEach(t),OKr=r(uHe," (throws an error)."),uHe.forEach(t),VKr=i(bi),ea=n(bi,"DIV",{class:!0});var WL=s(ea);T(H$.$$.fragment,WL),XKr=i(WL),g6e=n(WL,"P",{});var Fzt=s(g6e);zKr=r(Fzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fzt.forEach(t),QKr=i(WL),bm=n(WL,"P",{});var Eae=s(bm);WKr=r(Eae,`Note:
Loading a model from its configuration file does `),h6e=n(Eae,"STRONG",{});var Tzt=s(h6e);HKr=r(Tzt,"not"),Tzt.forEach(t),UKr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(Eae,"A",{href:!0});var Mzt=s(nre);JKr=r(Mzt,"from_pretrained()"),Mzt.forEach(t),YKr=r(Eae," to load the model weights."),Eae.forEach(t),KKr=i(WL),T(n6.$$.fragment,WL),WL.forEach(t),ZKr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(U$.$$.fragment,vi),eZr=i(vi),u6e=n(vi,"P",{});var Ezt=s(u6e);oZr=r(Ezt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ezt.forEach(t),rZr=i(vi),yn=n(vi,"P",{});var HL=s(yn);tZr=r(HL,"The model class to instantiate is selected based on the "),p6e=n(HL,"CODE",{});var Czt=s(p6e);aZr=r(Czt,"model_type"),Czt.forEach(t),nZr=r(HL,` property of the config object (either
passed as an argument or loaded from `),_6e=n(HL,"CODE",{});var wzt=s(_6e);sZr=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),lZr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(HL,"CODE",{});var Azt=s(b6e);iZr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),dZr=r(HL,":"),HL.forEach(t),cZr=i(vi),Ve=n(vi,"UL",{});var Mo=s(Ve);s6=n(Mo,"LI",{});var XVe=s(s6);v6e=n(XVe,"STRONG",{});var Lzt=s(v6e);mZr=r(Lzt,"albert"),Lzt.forEach(t),fZr=r(XVe," \u2014 "),sre=n(XVe,"A",{href:!0});var yzt=s(sre);gZr=r(yzt,"FlaxAlbertForTokenClassification"),yzt.forEach(t),hZr=r(XVe," (ALBERT model)"),XVe.forEach(t),uZr=i(Mo),l6=n(Mo,"LI",{});var zVe=s(l6);F6e=n(zVe,"STRONG",{});var xzt=s(F6e);pZr=r(xzt,"bert"),xzt.forEach(t),_Zr=r(zVe," \u2014 "),lre=n(zVe,"A",{href:!0});var $zt=s(lre);bZr=r($zt,"FlaxBertForTokenClassification"),$zt.forEach(t),vZr=r(zVe," (BERT model)"),zVe.forEach(t),FZr=i(Mo),i6=n(Mo,"LI",{});var QVe=s(i6);T6e=n(QVe,"STRONG",{});var kzt=s(T6e);TZr=r(kzt,"big_bird"),kzt.forEach(t),MZr=r(QVe," \u2014 "),ire=n(QVe,"A",{href:!0});var Szt=s(ire);EZr=r(Szt,"FlaxBigBirdForTokenClassification"),Szt.forEach(t),CZr=r(QVe," (BigBird model)"),QVe.forEach(t),wZr=i(Mo),d6=n(Mo,"LI",{});var WVe=s(d6);M6e=n(WVe,"STRONG",{});var Rzt=s(M6e);AZr=r(Rzt,"distilbert"),Rzt.forEach(t),LZr=r(WVe," \u2014 "),dre=n(WVe,"A",{href:!0});var Pzt=s(dre);yZr=r(Pzt,"FlaxDistilBertForTokenClassification"),Pzt.forEach(t),xZr=r(WVe," (DistilBERT model)"),WVe.forEach(t),$Zr=i(Mo),c6=n(Mo,"LI",{});var HVe=s(c6);E6e=n(HVe,"STRONG",{});var Bzt=s(E6e);kZr=r(Bzt,"electra"),Bzt.forEach(t),SZr=r(HVe," \u2014 "),cre=n(HVe,"A",{href:!0});var Nzt=s(cre);RZr=r(Nzt,"FlaxElectraForTokenClassification"),Nzt.forEach(t),PZr=r(HVe," (ELECTRA model)"),HVe.forEach(t),BZr=i(Mo),m6=n(Mo,"LI",{});var UVe=s(m6);C6e=n(UVe,"STRONG",{});var Izt=s(C6e);NZr=r(Izt,"roberta"),Izt.forEach(t),IZr=r(UVe," \u2014 "),mre=n(UVe,"A",{href:!0});var qzt=s(mre);qZr=r(qzt,"FlaxRobertaForTokenClassification"),qzt.forEach(t),jZr=r(UVe," (RoBERTa model)"),UVe.forEach(t),DZr=i(Mo),f6=n(Mo,"LI",{});var JVe=s(f6);w6e=n(JVe,"STRONG",{});var jzt=s(w6e);GZr=r(jzt,"roformer"),jzt.forEach(t),OZr=r(JVe," \u2014 "),fre=n(JVe,"A",{href:!0});var Dzt=s(fre);VZr=r(Dzt,"FlaxRoFormerForTokenClassification"),Dzt.forEach(t),XZr=r(JVe," (RoFormer model)"),JVe.forEach(t),zZr=i(Mo),g6=n(Mo,"LI",{});var YVe=s(g6);A6e=n(YVe,"STRONG",{});var Gzt=s(A6e);QZr=r(Gzt,"xlm-roberta"),Gzt.forEach(t),WZr=r(YVe," \u2014 "),gre=n(YVe,"A",{href:!0});var Ozt=s(gre);HZr=r(Ozt,"FlaxXLMRobertaForTokenClassification"),Ozt.forEach(t),UZr=r(YVe," (XLM-RoBERTa model)"),YVe.forEach(t),Mo.forEach(t),JZr=i(vi),T(h6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),lQe=i(m),vm=n(m,"H2",{class:!0});var pHe=s(vm);u6=n(pHe,"A",{id:!0,class:!0,href:!0});var Vzt=s(u6);L6e=n(Vzt,"SPAN",{});var Xzt=s(L6e);T(J$.$$.fragment,Xzt),Xzt.forEach(t),Vzt.forEach(t),YZr=i(pHe),y6e=n(pHe,"SPAN",{});var zzt=s(y6e);KZr=r(zzt,"FlaxAutoModelForMultipleChoice"),zzt.forEach(t),pHe.forEach(t),iQe=i(m),Er=n(m,"DIV",{class:!0});var Fi=s(Er);T(Y$.$$.fragment,Fi),ZZr=i(Fi),Fm=n(Fi,"P",{});var Cae=s(Fm);eet=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hre=n(Cae,"A",{href:!0});var Qzt=s(hre);oet=r(Qzt,"from_pretrained()"),Qzt.forEach(t),ret=r(Cae," class method or the "),ure=n(Cae,"A",{href:!0});var Wzt=s(ure);tet=r(Wzt,"from_config()"),Wzt.forEach(t),aet=r(Cae,` class
method.`),Cae.forEach(t),net=i(Fi),K$=n(Fi,"P",{});var _He=s(K$);set=r(_He,"This class cannot be instantiated directly using "),x6e=n(_He,"CODE",{});var Hzt=s(x6e);iet=r(Hzt,"__init__()"),Hzt.forEach(t),det=r(_He," (throws an error)."),_He.forEach(t),cet=i(Fi),oa=n(Fi,"DIV",{class:!0});var UL=s(oa);T(Z$.$$.fragment,UL),met=i(UL),$6e=n(UL,"P",{});var Uzt=s($6e);fet=r(Uzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uzt.forEach(t),get=i(UL),Tm=n(UL,"P",{});var wae=s(Tm);het=r(wae,`Note:
Loading a model from its configuration file does `),k6e=n(wae,"STRONG",{});var Jzt=s(k6e);uet=r(Jzt,"not"),Jzt.forEach(t),pet=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=n(wae,"A",{href:!0});var Yzt=s(pre);_et=r(Yzt,"from_pretrained()"),Yzt.forEach(t),bet=r(wae," to load the model weights."),wae.forEach(t),vet=i(UL),T(p6.$$.fragment,UL),UL.forEach(t),Fet=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(ek.$$.fragment,Ti),Tet=i(Ti),S6e=n(Ti,"P",{});var Kzt=s(S6e);Met=r(Kzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kzt.forEach(t),Eet=i(Ti),xn=n(Ti,"P",{});var JL=s(xn);Cet=r(JL,"The model class to instantiate is selected based on the "),R6e=n(JL,"CODE",{});var Zzt=s(R6e);wet=r(Zzt,"model_type"),Zzt.forEach(t),Aet=r(JL,` property of the config object (either
passed as an argument or loaded from `),P6e=n(JL,"CODE",{});var eQt=s(P6e);Let=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),yet=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=n(JL,"CODE",{});var oQt=s(B6e);xet=r(oQt,"pretrained_model_name_or_path"),oQt.forEach(t),$et=r(JL,":"),JL.forEach(t),ket=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);_6=n(Eo,"LI",{});var KVe=s(_6);N6e=n(KVe,"STRONG",{});var rQt=s(N6e);Set=r(rQt,"albert"),rQt.forEach(t),Ret=r(KVe," \u2014 "),_re=n(KVe,"A",{href:!0});var tQt=s(_re);Pet=r(tQt,"FlaxAlbertForMultipleChoice"),tQt.forEach(t),Bet=r(KVe," (ALBERT model)"),KVe.forEach(t),Net=i(Eo),b6=n(Eo,"LI",{});var ZVe=s(b6);I6e=n(ZVe,"STRONG",{});var aQt=s(I6e);Iet=r(aQt,"bert"),aQt.forEach(t),qet=r(ZVe," \u2014 "),bre=n(ZVe,"A",{href:!0});var nQt=s(bre);jet=r(nQt,"FlaxBertForMultipleChoice"),nQt.forEach(t),Det=r(ZVe," (BERT model)"),ZVe.forEach(t),Get=i(Eo),v6=n(Eo,"LI",{});var eXe=s(v6);q6e=n(eXe,"STRONG",{});var sQt=s(q6e);Oet=r(sQt,"big_bird"),sQt.forEach(t),Vet=r(eXe," \u2014 "),vre=n(eXe,"A",{href:!0});var lQt=s(vre);Xet=r(lQt,"FlaxBigBirdForMultipleChoice"),lQt.forEach(t),zet=r(eXe," (BigBird model)"),eXe.forEach(t),Qet=i(Eo),F6=n(Eo,"LI",{});var oXe=s(F6);j6e=n(oXe,"STRONG",{});var iQt=s(j6e);Wet=r(iQt,"distilbert"),iQt.forEach(t),Het=r(oXe," \u2014 "),Fre=n(oXe,"A",{href:!0});var dQt=s(Fre);Uet=r(dQt,"FlaxDistilBertForMultipleChoice"),dQt.forEach(t),Jet=r(oXe," (DistilBERT model)"),oXe.forEach(t),Yet=i(Eo),T6=n(Eo,"LI",{});var rXe=s(T6);D6e=n(rXe,"STRONG",{});var cQt=s(D6e);Ket=r(cQt,"electra"),cQt.forEach(t),Zet=r(rXe," \u2014 "),Tre=n(rXe,"A",{href:!0});var mQt=s(Tre);eot=r(mQt,"FlaxElectraForMultipleChoice"),mQt.forEach(t),oot=r(rXe," (ELECTRA model)"),rXe.forEach(t),rot=i(Eo),M6=n(Eo,"LI",{});var tXe=s(M6);G6e=n(tXe,"STRONG",{});var fQt=s(G6e);tot=r(fQt,"roberta"),fQt.forEach(t),aot=r(tXe," \u2014 "),Mre=n(tXe,"A",{href:!0});var gQt=s(Mre);not=r(gQt,"FlaxRobertaForMultipleChoice"),gQt.forEach(t),sot=r(tXe," (RoBERTa model)"),tXe.forEach(t),lot=i(Eo),E6=n(Eo,"LI",{});var aXe=s(E6);O6e=n(aXe,"STRONG",{});var hQt=s(O6e);iot=r(hQt,"roformer"),hQt.forEach(t),dot=r(aXe," \u2014 "),Ere=n(aXe,"A",{href:!0});var uQt=s(Ere);cot=r(uQt,"FlaxRoFormerForMultipleChoice"),uQt.forEach(t),mot=r(aXe," (RoFormer model)"),aXe.forEach(t),fot=i(Eo),C6=n(Eo,"LI",{});var nXe=s(C6);V6e=n(nXe,"STRONG",{});var pQt=s(V6e);got=r(pQt,"xlm-roberta"),pQt.forEach(t),hot=r(nXe," \u2014 "),Cre=n(nXe,"A",{href:!0});var _Qt=s(Cre);uot=r(_Qt,"FlaxXLMRobertaForMultipleChoice"),_Qt.forEach(t),pot=r(nXe," (XLM-RoBERTa model)"),nXe.forEach(t),Eo.forEach(t),_ot=i(Ti),T(w6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),dQe=i(m),Mm=n(m,"H2",{class:!0});var bHe=s(Mm);A6=n(bHe,"A",{id:!0,class:!0,href:!0});var bQt=s(A6);X6e=n(bQt,"SPAN",{});var vQt=s(X6e);T(ok.$$.fragment,vQt),vQt.forEach(t),bQt.forEach(t),bot=i(bHe),z6e=n(bHe,"SPAN",{});var FQt=s(z6e);vot=r(FQt,"FlaxAutoModelForNextSentencePrediction"),FQt.forEach(t),bHe.forEach(t),cQe=i(m),Cr=n(m,"DIV",{class:!0});var Mi=s(Cr);T(rk.$$.fragment,Mi),Fot=i(Mi),Em=n(Mi,"P",{});var Aae=s(Em);Tot=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wre=n(Aae,"A",{href:!0});var TQt=s(wre);Mot=r(TQt,"from_pretrained()"),TQt.forEach(t),Eot=r(Aae," class method or the "),Are=n(Aae,"A",{href:!0});var MQt=s(Are);Cot=r(MQt,"from_config()"),MQt.forEach(t),wot=r(Aae,` class
method.`),Aae.forEach(t),Aot=i(Mi),tk=n(Mi,"P",{});var vHe=s(tk);Lot=r(vHe,"This class cannot be instantiated directly using "),Q6e=n(vHe,"CODE",{});var EQt=s(Q6e);yot=r(EQt,"__init__()"),EQt.forEach(t),xot=r(vHe," (throws an error)."),vHe.forEach(t),$ot=i(Mi),ra=n(Mi,"DIV",{class:!0});var YL=s(ra);T(ak.$$.fragment,YL),kot=i(YL),W6e=n(YL,"P",{});var CQt=s(W6e);Sot=r(CQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CQt.forEach(t),Rot=i(YL),Cm=n(YL,"P",{});var Lae=s(Cm);Pot=r(Lae,`Note:
Loading a model from its configuration file does `),H6e=n(Lae,"STRONG",{});var wQt=s(H6e);Bot=r(wQt,"not"),wQt.forEach(t),Not=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(Lae,"A",{href:!0});var AQt=s(Lre);Iot=r(AQt,"from_pretrained()"),AQt.forEach(t),qot=r(Lae," to load the model weights."),Lae.forEach(t),jot=i(YL),T(L6.$$.fragment,YL),YL.forEach(t),Dot=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(nk.$$.fragment,Ei),Got=i(Ei),U6e=n(Ei,"P",{});var LQt=s(U6e);Oot=r(LQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LQt.forEach(t),Vot=i(Ei),$n=n(Ei,"P",{});var KL=s($n);Xot=r(KL,"The model class to instantiate is selected based on the "),J6e=n(KL,"CODE",{});var yQt=s(J6e);zot=r(yQt,"model_type"),yQt.forEach(t),Qot=r(KL,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(KL,"CODE",{});var xQt=s(Y6e);Wot=r(xQt,"pretrained_model_name_or_path"),xQt.forEach(t),Hot=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(KL,"CODE",{});var $Qt=s(K6e);Uot=r($Qt,"pretrained_model_name_or_path"),$Qt.forEach(t),Jot=r(KL,":"),KL.forEach(t),Yot=i(Ei),Z6e=n(Ei,"UL",{});var kQt=s(Z6e);y6=n(kQt,"LI",{});var sXe=s(y6);e7e=n(sXe,"STRONG",{});var SQt=s(e7e);Kot=r(SQt,"bert"),SQt.forEach(t),Zot=r(sXe," \u2014 "),yre=n(sXe,"A",{href:!0});var RQt=s(yre);ert=r(RQt,"FlaxBertForNextSentencePrediction"),RQt.forEach(t),ort=r(sXe," (BERT model)"),sXe.forEach(t),kQt.forEach(t),rrt=i(Ei),T(x6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),mQe=i(m),wm=n(m,"H2",{class:!0});var FHe=s(wm);$6=n(FHe,"A",{id:!0,class:!0,href:!0});var PQt=s($6);o7e=n(PQt,"SPAN",{});var BQt=s(o7e);T(sk.$$.fragment,BQt),BQt.forEach(t),PQt.forEach(t),trt=i(FHe),r7e=n(FHe,"SPAN",{});var NQt=s(r7e);art=r(NQt,"FlaxAutoModelForImageClassification"),NQt.forEach(t),FHe.forEach(t),fQe=i(m),wr=n(m,"DIV",{class:!0});var Ci=s(wr);T(lk.$$.fragment,Ci),nrt=i(Ci),Am=n(Ci,"P",{});var yae=s(Am);srt=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xre=n(yae,"A",{href:!0});var IQt=s(xre);lrt=r(IQt,"from_pretrained()"),IQt.forEach(t),irt=r(yae," class method or the "),$re=n(yae,"A",{href:!0});var qQt=s($re);drt=r(qQt,"from_config()"),qQt.forEach(t),crt=r(yae,` class
method.`),yae.forEach(t),mrt=i(Ci),ik=n(Ci,"P",{});var THe=s(ik);frt=r(THe,"This class cannot be instantiated directly using "),t7e=n(THe,"CODE",{});var jQt=s(t7e);grt=r(jQt,"__init__()"),jQt.forEach(t),hrt=r(THe," (throws an error)."),THe.forEach(t),urt=i(Ci),ta=n(Ci,"DIV",{class:!0});var ZL=s(ta);T(dk.$$.fragment,ZL),prt=i(ZL),a7e=n(ZL,"P",{});var DQt=s(a7e);_rt=r(DQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DQt.forEach(t),brt=i(ZL),Lm=n(ZL,"P",{});var xae=s(Lm);vrt=r(xae,`Note:
Loading a model from its configuration file does `),n7e=n(xae,"STRONG",{});var GQt=s(n7e);Frt=r(GQt,"not"),GQt.forEach(t),Trt=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(xae,"A",{href:!0});var OQt=s(kre);Mrt=r(OQt,"from_pretrained()"),OQt.forEach(t),Ert=r(xae," to load the model weights."),xae.forEach(t),Crt=i(ZL),T(k6.$$.fragment,ZL),ZL.forEach(t),wrt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(ck.$$.fragment,wi),Art=i(wi),s7e=n(wi,"P",{});var VQt=s(s7e);Lrt=r(VQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VQt.forEach(t),yrt=i(wi),kn=n(wi,"P",{});var ey=s(kn);xrt=r(ey,"The model class to instantiate is selected based on the "),l7e=n(ey,"CODE",{});var XQt=s(l7e);$rt=r(XQt,"model_type"),XQt.forEach(t),krt=r(ey,` property of the config object (either
passed as an argument or loaded from `),i7e=n(ey,"CODE",{});var zQt=s(i7e);Srt=r(zQt,"pretrained_model_name_or_path"),zQt.forEach(t),Rrt=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(ey,"CODE",{});var QQt=s(d7e);Prt=r(QQt,"pretrained_model_name_or_path"),QQt.forEach(t),Brt=r(ey,":"),ey.forEach(t),Nrt=i(wi),mk=n(wi,"UL",{});var MHe=s(mk);S6=n(MHe,"LI",{});var lXe=s(S6);c7e=n(lXe,"STRONG",{});var WQt=s(c7e);Irt=r(WQt,"beit"),WQt.forEach(t),qrt=r(lXe," \u2014 "),Sre=n(lXe,"A",{href:!0});var HQt=s(Sre);jrt=r(HQt,"FlaxBeitForImageClassification"),HQt.forEach(t),Drt=r(lXe," (BEiT model)"),lXe.forEach(t),Grt=i(MHe),R6=n(MHe,"LI",{});var iXe=s(R6);m7e=n(iXe,"STRONG",{});var UQt=s(m7e);Ort=r(UQt,"vit"),UQt.forEach(t),Vrt=r(iXe," \u2014 "),Rre=n(iXe,"A",{href:!0});var JQt=s(Rre);Xrt=r(JQt,"FlaxViTForImageClassification"),JQt.forEach(t),zrt=r(iXe," (ViT model)"),iXe.forEach(t),MHe.forEach(t),Qrt=i(wi),T(P6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),gQe=i(m),ym=n(m,"H2",{class:!0});var EHe=s(ym);B6=n(EHe,"A",{id:!0,class:!0,href:!0});var YQt=s(B6);f7e=n(YQt,"SPAN",{});var KQt=s(f7e);T(fk.$$.fragment,KQt),KQt.forEach(t),YQt.forEach(t),Wrt=i(EHe),g7e=n(EHe,"SPAN",{});var ZQt=s(g7e);Hrt=r(ZQt,"FlaxAutoModelForVision2Seq"),ZQt.forEach(t),EHe.forEach(t),hQe=i(m),Ar=n(m,"DIV",{class:!0});var Ai=s(Ar);T(gk.$$.fragment,Ai),Urt=i(Ai),xm=n(Ai,"P",{});var $ae=s(xm);Jrt=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Pre=n($ae,"A",{href:!0});var eWt=s(Pre);Yrt=r(eWt,"from_pretrained()"),eWt.forEach(t),Krt=r($ae," class method or the "),Bre=n($ae,"A",{href:!0});var oWt=s(Bre);Zrt=r(oWt,"from_config()"),oWt.forEach(t),ett=r($ae,` class
method.`),$ae.forEach(t),ott=i(Ai),hk=n(Ai,"P",{});var CHe=s(hk);rtt=r(CHe,"This class cannot be instantiated directly using "),h7e=n(CHe,"CODE",{});var rWt=s(h7e);ttt=r(rWt,"__init__()"),rWt.forEach(t),att=r(CHe," (throws an error)."),CHe.forEach(t),ntt=i(Ai),aa=n(Ai,"DIV",{class:!0});var oy=s(aa);T(uk.$$.fragment,oy),stt=i(oy),u7e=n(oy,"P",{});var tWt=s(u7e);ltt=r(tWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tWt.forEach(t),itt=i(oy),$m=n(oy,"P",{});var kae=s($m);dtt=r(kae,`Note:
Loading a model from its configuration file does `),p7e=n(kae,"STRONG",{});var aWt=s(p7e);ctt=r(aWt,"not"),aWt.forEach(t),mtt=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=n(kae,"A",{href:!0});var nWt=s(Nre);ftt=r(nWt,"from_pretrained()"),nWt.forEach(t),gtt=r(kae," to load the model weights."),kae.forEach(t),htt=i(oy),T(N6.$$.fragment,oy),oy.forEach(t),utt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(pk.$$.fragment,Li),ptt=i(Li),_7e=n(Li,"P",{});var sWt=s(_7e);_tt=r(sWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sWt.forEach(t),btt=i(Li),Sn=n(Li,"P",{});var ry=s(Sn);vtt=r(ry,"The model class to instantiate is selected based on the "),b7e=n(ry,"CODE",{});var lWt=s(b7e);Ftt=r(lWt,"model_type"),lWt.forEach(t),Ttt=r(ry,` property of the config object (either
passed as an argument or loaded from `),v7e=n(ry,"CODE",{});var iWt=s(v7e);Mtt=r(iWt,"pretrained_model_name_or_path"),iWt.forEach(t),Ett=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(ry,"CODE",{});var dWt=s(F7e);Ctt=r(dWt,"pretrained_model_name_or_path"),dWt.forEach(t),wtt=r(ry,":"),ry.forEach(t),Att=i(Li),T7e=n(Li,"UL",{});var cWt=s(T7e);I6=n(cWt,"LI",{});var dXe=s(I6);M7e=n(dXe,"STRONG",{});var mWt=s(M7e);Ltt=r(mWt,"vision-encoder-decoder"),mWt.forEach(t),ytt=r(dXe," \u2014 "),Ire=n(dXe,"A",{href:!0});var fWt=s(Ire);xtt=r(fWt,"FlaxVisionEncoderDecoderModel"),fWt.forEach(t),$tt=r(dXe," (Vision Encoder decoder model)"),dXe.forEach(t),cWt.forEach(t),ktt=i(Li),T(q6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(bUt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Pi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(qm,"id","extending-the-auto-classes"),c(qm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qm,"href","#extending-the-auto-classes"),c(Bi,"class","relative group"),c(Dm,"id","transformers.AutoConfig"),c(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dm,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(zS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(QS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(US,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(uR,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c($R,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(kR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(jR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(DR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(XR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(WR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(rP,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(sP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(yP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c($P,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(SP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(jP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(ZP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(eB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(oB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(qi,"class","relative group"),c(rB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(tB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(_B,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(RB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(DB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(GB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(OB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(XB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(QB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(WB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(HB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(YB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(KB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(eN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(mN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(pN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(bN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(vN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(FN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(TN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(MN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(EN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(CN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(wN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(AN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(LN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(yN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(xN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(RN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(IN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(qN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(jN,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(zN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(WN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(HN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(UN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(JN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(YN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(KN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(rI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(gI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(uI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(pI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(_I,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(LI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($I,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(SI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(RI,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(qI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(jI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(zI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(QI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(eq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(iq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(cq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(mq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(fq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(gq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(uq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(pq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(_q,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(bq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Fq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Tq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Mq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Eq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Aq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Lq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c($q,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Pq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fu,"id","transformers.AutoProcessor"),c(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fu,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(Bq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Nq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Iq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(qq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Dq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Gq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Xq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(zq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Qq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(Uq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Jq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Yq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ou,"id","transformers.AutoModel"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModel"),c(Oi,"class","relative group"),c(Zq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(tj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(aj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(nj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(sj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(lj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(ij,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(dj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(cj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(fj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(gj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(hj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(uj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(pj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(_j,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(bj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(vj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(wj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(yj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(xj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c($j,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(kj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(jj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(Dj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(zj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Hj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Uj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Jj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(eD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(oD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(rD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(tD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(aD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(nD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(sD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(lD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(iD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(dD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(cD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(mD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(fD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(gD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(hD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(uD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(pD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(_D,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(bD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(vD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(FD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(TD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(MD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(ED,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(CD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(wD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(AD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(LD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(yD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(xD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c($D,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(kD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(SD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(RD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(PD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(BD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(ND,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(ID,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(qD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(jD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(DD,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(GD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(OD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(VD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(XD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(zD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(QD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(WD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(HD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(UD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(JD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(YD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(KD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(eG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(oG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(rG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(tG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(aG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(nG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(sG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForPreTraining"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(lG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(mG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(gG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(hG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(_G,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(MG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(CG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(wG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(AG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(LG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(xG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c($G,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(kG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(SG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(RG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(PG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(NG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(IG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(jG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(GG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(OG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(VG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(XG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(QG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(WG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(HG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(UG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(JG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(YG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(eO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForCausalLM"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForCausalLM"),c(Hi,"class","relative group"),c(oO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(nO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(sO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(lO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(iO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(dO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(cO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(mO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(gO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(hO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_O,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(vO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(FO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(TO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(MO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(EO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(CO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(wO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(LO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(yO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(xO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c($O,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(kO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(SO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(RO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(PO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(BO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(NO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(IO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(qO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(jO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(GO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(OO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(VO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForMaskedLM"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForMaskedLM"),c(Yi,"class","relative group"),c(XO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(HO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(JO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(YO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ZO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(aV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(sV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(lV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(iV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(dV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(cV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(mV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(fV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(gV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(hV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(pV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(_V,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(bV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(vV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(FV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(TV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(MV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(CV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(yV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForSeq2SeqLM"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForSeq2SeqLM"),c(ed,"class","relative group"),c($V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(BV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(NV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(IV,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(qV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(DV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(GV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(VV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(QV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(HV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(UV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(JV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForSequenceClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForSequenceClassification"),c(td,"class","relative group"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c($X,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForMultipleChoice"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForMultipleChoice"),c(sd,"class","relative group"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(az,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(fz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(uz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(pz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(_z,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(bz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(vz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Fz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Tz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Mz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Ez,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Cz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Az,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Lz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForNextSentencePrediction"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForNextSentencePrediction"),c(dd,"class","relative group"),c($z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Pz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Bz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Nz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Iz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(qz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForTokenClassification"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Vz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(Xz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(eQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(oQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(rQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(tQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(aQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(nQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(lQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(iQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(mQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(fQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(gQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(hQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(pQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(_Q,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(bQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(vQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(FQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(TQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(MQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(EQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForQuestionAnswering"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForQuestionAnswering"),c(ud,"class","relative group"),c(CQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(xQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c($Q,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(kQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(SQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(RQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(PQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(BQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(IQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(DQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(GQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(OQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(VQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(XQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(WQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(HQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(UQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(JQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(YQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(oW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(rW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(tW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(aW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(nW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(sW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(lW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(iW,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(dW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(cW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(gW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(hW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.AutoModelForTableQuestionAnswering"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(bd,"class","relative group"),c(uW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.AutoModelForImageClassification"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yW,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c($W,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(kW,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BW,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.AutoModelForVision2Seq"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ld,"class","relative group"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.AutoModelForAudioClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.AutoModelForAudioClassification"),c($d,"class","relative group"),c(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a4,"id","transformers.AutoModelForAudioFrameClassification"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.AutoModelForAudioFrameClassification"),c(Rd,"class","relative group"),c(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.AutoModelForCTC"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(FH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(TH,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(MH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(EH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(CH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(wH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(AH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(LH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(yH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(jd,"class","relative group"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(RH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.AutoModelForAudioXVector"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.AutoModelForAudioXVector"),c(Od,"class","relative group"),c(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(qH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(jH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(DH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(GH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.AutoModelForMaskedImageModeling"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.AutoModelForMaskedImageModeling"),c(zd,"class","relative group"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(QH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.AutoModelForObjectDetection"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KH,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.AutoModelForImageSegmentation"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.AutoModelForSemanticSegmentation"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iU,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(cU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.AutoModelForInstanceSegmentation"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModel"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(vU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(FU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(TU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(CU,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(wU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(AU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(LU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c($U,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kU,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(SU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(RU,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(PU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(BU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(NU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(IU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(DU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(GU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(OU,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(VU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(XU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(zU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(QU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(WU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(HU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(UU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(JU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(YU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(KU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(oJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(sJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(lJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(iJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(fJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(gJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.TFAutoModelForPreTraining"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($J,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(qJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.TFAutoModelForCausalLM"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(YJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s3,"id","transformers.TFAutoModelForImageClassification"),c(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s3,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(cY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.TFAutoModelForMaskedLM"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(bY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(vY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(TY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(MY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(EY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(wY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(LY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(xY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c($Y,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(SY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(PY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(OY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(VY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(XY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(zY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(QY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(UY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.TFAutoModelForSequenceClassification"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(JY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForMultipleChoice"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(xK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c($K,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(kK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(SK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(RK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(PK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(BK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(NK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(qK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(jK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(DK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(GK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(OK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(VK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(XK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(UK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(JK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.TFAutoModelForTokenClassification"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(aZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(nZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(sZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(lZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(iZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(dZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(cZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(mZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(fZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(gZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(hZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(uZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(pZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(_Z,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(bZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(vZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(FZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(TZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(MZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.TFAutoModelForQuestionAnswering"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(EZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(LZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(xZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c($Z,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(kZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(SZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(PZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(BZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(NZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(qZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(jZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(DZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(GZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(OZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(VZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(XZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(zZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.TFAutoModelForVision2Seq"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(QZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(JZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModel"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(aee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(nee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(see,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(lee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(iee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(dee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(cee,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(mee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(fee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(gee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(hee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(uee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(pee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(_ee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(bee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(vee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Fee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Tee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Mee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Eee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(wee,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Aee,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Lee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(yee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(xee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForCausalLM"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c($ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Pee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Bee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Nee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Iee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(qee,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(jee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Dee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Gee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Oee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xw,"id","transformers.FlaxAutoModelForPreTraining"),c(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xw,"href","#transformers.FlaxAutoModelForPreTraining"),c(om,"class","relative group"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Wee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Hee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Uee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Jee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Yee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Kee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Zee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(eoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ooe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(roe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(toe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(aoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sA,"id","transformers.FlaxAutoModelForMaskedLM"),c(sA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(am,"class","relative group"),c(noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ioe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(doe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(coe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(moe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(foe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(goe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(hoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(poe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_oe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Toe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Moe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Eoe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Coe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(woe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Aoe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Loe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yoe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xoe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c($oe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cm,"class","relative group"),c(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Noe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Ioe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(qoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Goe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Ooe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Voe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gm,"class","relative group"),c(Xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Woe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Hoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Uoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Joe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Yoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Koe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Zoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(ere,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ore,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(rre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.FlaxAutoModelForTokenClassification"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pm,"class","relative group"),c(tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(lre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ire,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(dre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(cre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(mre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(fre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(gre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.FlaxAutoModelForMultipleChoice"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vm,"class","relative group"),c(hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_re,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(bre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(vre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Fre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Tre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Mre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Ere,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Cre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mm,"class","relative group"),c(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.FlaxAutoModelForImageClassification"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.FlaxAutoModelForImageClassification"),c(wm,"class","relative group"),c(xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Rre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.FlaxAutoModelForVision2Seq"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ym,"class","relative group"),c(Pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ire,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Co),e(Co,yi),b(m,Pm,_),b(m,lt,_),e(lt,xi),e(lt,$i),e($i,ty),e(lt,Bm),b(m,Oe,_),b(m,We,_),e(We,ki),e(We,Pn),e(Pn,ay),e(We,Bn),e(We,Nn),e(Nn,ny),e(We,Si),e(We,In),e(In,sy),e(We,Ri),b(m,Nm,_),M(Sa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,jS),e(Ae,Pi),e(Pi,DS),e(Ae,GS),b(m,wo,_),b(m,Ra,_),e(Ra,OS),e(Ra,Im),e(Im,VS),e(Ra,wHe),b(m,cXe,_),b(m,Bi,_),e(Bi,qm),e(qm,Sae),M(ly,Sae,null),e(Bi,AHe),e(Bi,Rae),e(Rae,LHe),b(m,mXe,_),b(m,qn,_),e(qn,yHe),e(qn,Pae),e(Pae,xHe),e(qn,$He),e(qn,Bae),e(Bae,kHe),e(qn,SHe),b(m,fXe,_),M(iy,m,_),b(m,gXe,_),b(m,XS,_),e(XS,RHe),b(m,hXe,_),M(jm,m,_),b(m,uXe,_),b(m,Ni,_),e(Ni,Dm),e(Dm,Nae),M(dy,Nae,null),e(Ni,PHe),e(Ni,Iae),e(Iae,BHe),b(m,pXe,_),b(m,Ao,_),M(cy,Ao,null),e(Ao,NHe),e(Ao,my),e(my,IHe),e(my,zS),e(zS,qHe),e(my,jHe),e(Ao,DHe),e(Ao,fy),e(fy,GHe),e(fy,qae),e(qae,OHe),e(fy,VHe),e(Ao,XHe),e(Ao,Lr),M(gy,Lr,null),e(Lr,zHe),e(Lr,jae),e(jae,QHe),e(Lr,WHe),e(Lr,Ii),e(Ii,HHe),e(Ii,Dae),e(Dae,UHe),e(Ii,JHe),e(Ii,Gae),e(Gae,YHe),e(Ii,KHe),e(Lr,ZHe),e(Lr,A),e(A,Gm),e(Gm,Oae),e(Oae,eUe),e(Gm,oUe),e(Gm,QS),e(QS,rUe),e(Gm,tUe),e(A,aUe),e(A,Om),e(Om,Vae),e(Vae,nUe),e(Om,sUe),e(Om,WS),e(WS,lUe),e(Om,iUe),e(A,dUe),e(A,Vm),e(Vm,Xae),e(Xae,cUe),e(Vm,mUe),e(Vm,HS),e(HS,fUe),e(Vm,gUe),e(A,hUe),e(A,Xm),e(Xm,zae),e(zae,uUe),e(Xm,pUe),e(Xm,US),e(US,_Ue),e(Xm,bUe),e(A,vUe),e(A,zm),e(zm,Qae),e(Qae,FUe),e(zm,TUe),e(zm,JS),e(JS,MUe),e(zm,EUe),e(A,CUe),e(A,Qm),e(Qm,Wae),e(Wae,wUe),e(Qm,AUe),e(Qm,YS),e(YS,LUe),e(Qm,yUe),e(A,xUe),e(A,Wm),e(Wm,Hae),e(Hae,$Ue),e(Wm,kUe),e(Wm,KS),e(KS,SUe),e(Wm,RUe),e(A,PUe),e(A,Hm),e(Hm,Uae),e(Uae,BUe),e(Hm,NUe),e(Hm,ZS),e(ZS,IUe),e(Hm,qUe),e(A,jUe),e(A,Um),e(Um,Jae),e(Jae,DUe),e(Um,GUe),e(Um,eR),e(eR,OUe),e(Um,VUe),e(A,XUe),e(A,Jm),e(Jm,Yae),e(Yae,zUe),e(Jm,QUe),e(Jm,oR),e(oR,WUe),e(Jm,HUe),e(A,UUe),e(A,Ym),e(Ym,Kae),e(Kae,JUe),e(Ym,YUe),e(Ym,rR),e(rR,KUe),e(Ym,ZUe),e(A,eJe),e(A,Km),e(Km,Zae),e(Zae,oJe),e(Km,rJe),e(Km,tR),e(tR,tJe),e(Km,aJe),e(A,nJe),e(A,Zm),e(Zm,ene),e(ene,sJe),e(Zm,lJe),e(Zm,aR),e(aR,iJe),e(Zm,dJe),e(A,cJe),e(A,ef),e(ef,one),e(one,mJe),e(ef,fJe),e(ef,nR),e(nR,gJe),e(ef,hJe),e(A,uJe),e(A,of),e(of,rne),e(rne,pJe),e(of,_Je),e(of,sR),e(sR,bJe),e(of,vJe),e(A,FJe),e(A,rf),e(rf,tne),e(tne,TJe),e(rf,MJe),e(rf,lR),e(lR,EJe),e(rf,CJe),e(A,wJe),e(A,tf),e(tf,ane),e(ane,AJe),e(tf,LJe),e(tf,iR),e(iR,yJe),e(tf,xJe),e(A,$Je),e(A,af),e(af,nne),e(nne,kJe),e(af,SJe),e(af,dR),e(dR,RJe),e(af,PJe),e(A,BJe),e(A,nf),e(nf,sne),e(sne,NJe),e(nf,IJe),e(nf,cR),e(cR,qJe),e(nf,jJe),e(A,DJe),e(A,sf),e(sf,lne),e(lne,GJe),e(sf,OJe),e(sf,mR),e(mR,VJe),e(sf,XJe),e(A,zJe),e(A,lf),e(lf,ine),e(ine,QJe),e(lf,WJe),e(lf,fR),e(fR,HJe),e(lf,UJe),e(A,JJe),e(A,df),e(df,dne),e(dne,YJe),e(df,KJe),e(df,gR),e(gR,ZJe),e(df,eYe),e(A,oYe),e(A,cf),e(cf,cne),e(cne,rYe),e(cf,tYe),e(cf,hR),e(hR,aYe),e(cf,nYe),e(A,sYe),e(A,mf),e(mf,mne),e(mne,lYe),e(mf,iYe),e(mf,uR),e(uR,dYe),e(mf,cYe),e(A,mYe),e(A,ff),e(ff,fne),e(fne,fYe),e(ff,gYe),e(ff,pR),e(pR,hYe),e(ff,uYe),e(A,pYe),e(A,gf),e(gf,gne),e(gne,_Ye),e(gf,bYe),e(gf,_R),e(_R,vYe),e(gf,FYe),e(A,TYe),e(A,hf),e(hf,hne),e(hne,MYe),e(hf,EYe),e(hf,bR),e(bR,CYe),e(hf,wYe),e(A,AYe),e(A,uf),e(uf,une),e(une,LYe),e(uf,yYe),e(uf,vR),e(vR,xYe),e(uf,$Ye),e(A,kYe),e(A,pf),e(pf,pne),e(pne,SYe),e(pf,RYe),e(pf,FR),e(FR,PYe),e(pf,BYe),e(A,NYe),e(A,_f),e(_f,_ne),e(_ne,IYe),e(_f,qYe),e(_f,TR),e(TR,jYe),e(_f,DYe),e(A,GYe),e(A,bf),e(bf,bne),e(bne,OYe),e(bf,VYe),e(bf,MR),e(MR,XYe),e(bf,zYe),e(A,QYe),e(A,vf),e(vf,vne),e(vne,WYe),e(vf,HYe),e(vf,ER),e(ER,UYe),e(vf,JYe),e(A,YYe),e(A,Ff),e(Ff,Fne),e(Fne,KYe),e(Ff,ZYe),e(Ff,CR),e(CR,eKe),e(Ff,oKe),e(A,rKe),e(A,Tf),e(Tf,Tne),e(Tne,tKe),e(Tf,aKe),e(Tf,wR),e(wR,nKe),e(Tf,sKe),e(A,lKe),e(A,Mf),e(Mf,Mne),e(Mne,iKe),e(Mf,dKe),e(Mf,AR),e(AR,cKe),e(Mf,mKe),e(A,fKe),e(A,Ef),e(Ef,Ene),e(Ene,gKe),e(Ef,hKe),e(Ef,LR),e(LR,uKe),e(Ef,pKe),e(A,_Ke),e(A,Cf),e(Cf,Cne),e(Cne,bKe),e(Cf,vKe),e(Cf,yR),e(yR,FKe),e(Cf,TKe),e(A,MKe),e(A,wf),e(wf,wne),e(wne,EKe),e(wf,CKe),e(wf,xR),e(xR,wKe),e(wf,AKe),e(A,LKe),e(A,Af),e(Af,Ane),e(Ane,yKe),e(Af,xKe),e(Af,$R),e($R,$Ke),e(Af,kKe),e(A,SKe),e(A,Lf),e(Lf,Lne),e(Lne,RKe),e(Lf,PKe),e(Lf,kR),e(kR,BKe),e(Lf,NKe),e(A,IKe),e(A,yf),e(yf,yne),e(yne,qKe),e(yf,jKe),e(yf,SR),e(SR,DKe),e(yf,GKe),e(A,OKe),e(A,xf),e(xf,xne),e(xne,VKe),e(xf,XKe),e(xf,RR),e(RR,zKe),e(xf,QKe),e(A,WKe),e(A,$f),e($f,$ne),e($ne,HKe),e($f,UKe),e($f,PR),e(PR,JKe),e($f,YKe),e(A,KKe),e(A,kf),e(kf,kne),e(kne,ZKe),e(kf,eZe),e(kf,BR),e(BR,oZe),e(kf,rZe),e(A,tZe),e(A,Sf),e(Sf,Sne),e(Sne,aZe),e(Sf,nZe),e(Sf,NR),e(NR,sZe),e(Sf,lZe),e(A,iZe),e(A,Rf),e(Rf,Rne),e(Rne,dZe),e(Rf,cZe),e(Rf,IR),e(IR,mZe),e(Rf,fZe),e(A,gZe),e(A,Pf),e(Pf,Pne),e(Pne,hZe),e(Pf,uZe),e(Pf,qR),e(qR,pZe),e(Pf,_Ze),e(A,bZe),e(A,Bf),e(Bf,Bne),e(Bne,vZe),e(Bf,FZe),e(Bf,jR),e(jR,TZe),e(Bf,MZe),e(A,EZe),e(A,Nf),e(Nf,Nne),e(Nne,CZe),e(Nf,wZe),e(Nf,DR),e(DR,AZe),e(Nf,LZe),e(A,yZe),e(A,If),e(If,Ine),e(Ine,xZe),e(If,$Ze),e(If,GR),e(GR,kZe),e(If,SZe),e(A,RZe),e(A,qf),e(qf,qne),e(qne,PZe),e(qf,BZe),e(qf,OR),e(OR,NZe),e(qf,IZe),e(A,qZe),e(A,jf),e(jf,jne),e(jne,jZe),e(jf,DZe),e(jf,VR),e(VR,GZe),e(jf,OZe),e(A,VZe),e(A,Df),e(Df,Dne),e(Dne,XZe),e(Df,zZe),e(Df,XR),e(XR,QZe),e(Df,WZe),e(A,HZe),e(A,Gf),e(Gf,Gne),e(Gne,UZe),e(Gf,JZe),e(Gf,zR),e(zR,YZe),e(Gf,KZe),e(A,ZZe),e(A,Of),e(Of,One),e(One,eeo),e(Of,oeo),e(Of,QR),e(QR,reo),e(Of,teo),e(A,aeo),e(A,Vf),e(Vf,Vne),e(Vne,neo),e(Vf,seo),e(Vf,WR),e(WR,leo),e(Vf,ieo),e(A,deo),e(A,Xf),e(Xf,Xne),e(Xne,ceo),e(Xf,meo),e(Xf,HR),e(HR,feo),e(Xf,geo),e(A,heo),e(A,zf),e(zf,zne),e(zne,ueo),e(zf,peo),e(zf,UR),e(UR,_eo),e(zf,beo),e(A,veo),e(A,Qf),e(Qf,Qne),e(Qne,Feo),e(Qf,Teo),e(Qf,JR),e(JR,Meo),e(Qf,Eeo),e(A,Ceo),e(A,Wf),e(Wf,Wne),e(Wne,weo),e(Wf,Aeo),e(Wf,YR),e(YR,Leo),e(Wf,yeo),e(A,xeo),e(A,Hf),e(Hf,Hne),e(Hne,$eo),e(Hf,keo),e(Hf,KR),e(KR,Seo),e(Hf,Reo),e(A,Peo),e(A,Uf),e(Uf,Une),e(Une,Beo),e(Uf,Neo),e(Uf,ZR),e(ZR,Ieo),e(Uf,qeo),e(A,jeo),e(A,Jf),e(Jf,Jne),e(Jne,Deo),e(Jf,Geo),e(Jf,eP),e(eP,Oeo),e(Jf,Veo),e(A,Xeo),e(A,Yf),e(Yf,Yne),e(Yne,zeo),e(Yf,Qeo),e(Yf,oP),e(oP,Weo),e(Yf,Heo),e(A,Ueo),e(A,Kf),e(Kf,Kne),e(Kne,Jeo),e(Kf,Yeo),e(Kf,rP),e(rP,Keo),e(Kf,Zeo),e(A,eoo),e(A,Zf),e(Zf,Zne),e(Zne,ooo),e(Zf,roo),e(Zf,tP),e(tP,too),e(Zf,aoo),e(A,noo),e(A,eg),e(eg,ese),e(ese,soo),e(eg,loo),e(eg,aP),e(aP,ioo),e(eg,doo),e(A,coo),e(A,og),e(og,ose),e(ose,moo),e(og,foo),e(og,nP),e(nP,goo),e(og,hoo),e(A,uoo),e(A,rg),e(rg,rse),e(rse,poo),e(rg,_oo),e(rg,sP),e(sP,boo),e(rg,voo),e(A,Foo),e(A,tg),e(tg,tse),e(tse,Too),e(tg,Moo),e(tg,lP),e(lP,Eoo),e(tg,Coo),e(A,woo),e(A,ag),e(ag,ase),e(ase,Aoo),e(ag,Loo),e(ag,iP),e(iP,yoo),e(ag,xoo),e(A,$oo),e(A,ng),e(ng,nse),e(nse,koo),e(ng,Soo),e(ng,dP),e(dP,Roo),e(ng,Poo),e(A,Boo),e(A,sg),e(sg,sse),e(sse,Noo),e(sg,Ioo),e(sg,cP),e(cP,qoo),e(sg,joo),e(A,Doo),e(A,lg),e(lg,lse),e(lse,Goo),e(lg,Ooo),e(lg,mP),e(mP,Voo),e(lg,Xoo),e(A,zoo),e(A,ig),e(ig,ise),e(ise,Qoo),e(ig,Woo),e(ig,fP),e(fP,Hoo),e(ig,Uoo),e(A,Joo),e(A,dg),e(dg,dse),e(dse,Yoo),e(dg,Koo),e(dg,gP),e(gP,Zoo),e(dg,ero),e(A,oro),e(A,cg),e(cg,cse),e(cse,rro),e(cg,tro),e(cg,hP),e(hP,aro),e(cg,nro),e(A,sro),e(A,mg),e(mg,mse),e(mse,lro),e(mg,iro),e(mg,uP),e(uP,dro),e(mg,cro),e(A,mro),e(A,fg),e(fg,fse),e(fse,fro),e(fg,gro),e(fg,pP),e(pP,hro),e(fg,uro),e(A,pro),e(A,gg),e(gg,gse),e(gse,_ro),e(gg,bro),e(gg,_P),e(_P,vro),e(gg,Fro),e(A,Tro),e(A,hg),e(hg,hse),e(hse,Mro),e(hg,Ero),e(hg,bP),e(bP,Cro),e(hg,wro),e(A,Aro),e(A,ug),e(ug,use),e(use,Lro),e(ug,yro),e(ug,vP),e(vP,xro),e(ug,$ro),e(A,kro),e(A,pg),e(pg,pse),e(pse,Sro),e(pg,Rro),e(pg,FP),e(FP,Pro),e(pg,Bro),e(A,Nro),e(A,_g),e(_g,_se),e(_se,Iro),e(_g,qro),e(_g,TP),e(TP,jro),e(_g,Dro),e(A,Gro),e(A,bg),e(bg,bse),e(bse,Oro),e(bg,Vro),e(bg,MP),e(MP,Xro),e(bg,zro),e(A,Qro),e(A,vg),e(vg,vse),e(vse,Wro),e(vg,Hro),e(vg,EP),e(EP,Uro),e(vg,Jro),e(A,Yro),e(A,Fg),e(Fg,Fse),e(Fse,Kro),e(Fg,Zro),e(Fg,CP),e(CP,eto),e(Fg,oto),e(A,rto),e(A,Tg),e(Tg,Tse),e(Tse,tto),e(Tg,ato),e(Tg,wP),e(wP,nto),e(Tg,sto),e(A,lto),e(A,Mg),e(Mg,Mse),e(Mse,ito),e(Mg,dto),e(Mg,AP),e(AP,cto),e(Mg,mto),e(A,fto),e(A,Eg),e(Eg,Ese),e(Ese,gto),e(Eg,hto),e(Eg,LP),e(LP,uto),e(Eg,pto),e(A,_to),e(A,Cg),e(Cg,Cse),e(Cse,bto),e(Cg,vto),e(Cg,yP),e(yP,Fto),e(Cg,Tto),e(A,Mto),e(A,wg),e(wg,wse),e(wse,Eto),e(wg,Cto),e(wg,xP),e(xP,wto),e(wg,Ato),e(A,Lto),e(A,Ag),e(Ag,Ase),e(Ase,yto),e(Ag,xto),e(Ag,$P),e($P,$to),e(Ag,kto),e(A,Sto),e(A,Lg),e(Lg,Lse),e(Lse,Rto),e(Lg,Pto),e(Lg,kP),e(kP,Bto),e(Lg,Nto),e(A,Ito),e(A,yg),e(yg,yse),e(yse,qto),e(yg,jto),e(yg,SP),e(SP,Dto),e(yg,Gto),e(A,Oto),e(A,xg),e(xg,xse),e(xse,Vto),e(xg,Xto),e(xg,RP),e(RP,zto),e(xg,Qto),e(A,Wto),e(A,$g),e($g,$se),e($se,Hto),e($g,Uto),e($g,PP),e(PP,Jto),e($g,Yto),e(A,Kto),e(A,kg),e(kg,kse),e(kse,Zto),e(kg,eao),e(kg,BP),e(BP,oao),e(kg,rao),e(A,tao),e(A,Sg),e(Sg,Sse),e(Sse,aao),e(Sg,nao),e(Sg,NP),e(NP,sao),e(Sg,lao),e(A,iao),e(A,Rg),e(Rg,Rse),e(Rse,dao),e(Rg,cao),e(Rg,IP),e(IP,mao),e(Rg,fao),e(A,gao),e(A,Pg),e(Pg,Pse),e(Pse,hao),e(Pg,uao),e(Pg,qP),e(qP,pao),e(Pg,_ao),e(A,bao),e(A,Bg),e(Bg,Bse),e(Bse,vao),e(Bg,Fao),e(Bg,jP),e(jP,Tao),e(Bg,Mao),e(A,Eao),e(A,Ng),e(Ng,Nse),e(Nse,Cao),e(Ng,wao),e(Ng,DP),e(DP,Aao),e(Ng,Lao),e(A,yao),e(A,Ig),e(Ig,Ise),e(Ise,xao),e(Ig,$ao),e(Ig,GP),e(GP,kao),e(Ig,Sao),e(A,Rao),e(A,qg),e(qg,qse),e(qse,Pao),e(qg,Bao),e(qg,OP),e(OP,Nao),e(qg,Iao),e(A,qao),e(A,jg),e(jg,jse),e(jse,jao),e(jg,Dao),e(jg,VP),e(VP,Gao),e(jg,Oao),e(A,Vao),e(A,Dg),e(Dg,Dse),e(Dse,Xao),e(Dg,zao),e(Dg,XP),e(XP,Qao),e(Dg,Wao),e(A,Hao),e(A,Gg),e(Gg,Gse),e(Gse,Uao),e(Gg,Jao),e(Gg,zP),e(zP,Yao),e(Gg,Kao),e(A,Zao),e(A,Og),e(Og,Ose),e(Ose,eno),e(Og,ono),e(Og,QP),e(QP,rno),e(Og,tno),e(A,ano),e(A,Vg),e(Vg,Vse),e(Vse,nno),e(Vg,sno),e(Vg,WP),e(WP,lno),e(Vg,ino),e(A,dno),e(A,Xg),e(Xg,Xse),e(Xse,cno),e(Xg,mno),e(Xg,HP),e(HP,fno),e(Xg,gno),e(A,hno),e(A,zg),e(zg,zse),e(zse,uno),e(zg,pno),e(zg,UP),e(UP,_no),e(zg,bno),e(A,vno),e(A,Qg),e(Qg,Qse),e(Qse,Fno),e(Qg,Tno),e(Qg,JP),e(JP,Mno),e(Qg,Eno),e(A,Cno),e(A,Wg),e(Wg,Wse),e(Wse,wno),e(Wg,Ano),e(Wg,YP),e(YP,Lno),e(Wg,yno),e(A,xno),e(A,Hg),e(Hg,Hse),e(Hse,$no),e(Hg,kno),e(Hg,KP),e(KP,Sno),e(Hg,Rno),e(A,Pno),e(A,Ug),e(Ug,Use),e(Use,Bno),e(Ug,Nno),e(Ug,ZP),e(ZP,Ino),e(Ug,qno),e(A,jno),e(A,Jg),e(Jg,Jse),e(Jse,Dno),e(Jg,Gno),e(Jg,eB),e(eB,Ono),e(Jg,Vno),e(A,Xno),e(A,Yg),e(Yg,Yse),e(Yse,zno),e(Yg,Qno),e(Yg,oB),e(oB,Wno),e(Yg,Hno),e(Lr,Uno),M(Kg,Lr,null),e(Ao,Jno),e(Ao,Zg),M(hy,Zg,null),e(Zg,Yno),e(Zg,Kse),e(Kse,Kno),b(m,_Xe,_),b(m,qi,_),e(qi,eh),e(eh,Zse),M(uy,Zse,null),e(qi,Zno),e(qi,ele),e(ele,eso),b(m,bXe,_),b(m,Lo,_),M(py,Lo,null),e(Lo,oso),e(Lo,_y),e(_y,rso),e(_y,rB),e(rB,tso),e(_y,aso),e(Lo,nso),e(Lo,by),e(by,sso),e(by,ole),e(ole,lso),e(by,iso),e(Lo,dso),e(Lo,yr),M(vy,yr,null),e(yr,cso),e(yr,rle),e(rle,mso),e(yr,fso),e(yr,Pa),e(Pa,gso),e(Pa,tle),e(tle,hso),e(Pa,uso),e(Pa,ale),e(ale,pso),e(Pa,_so),e(Pa,nle),e(nle,bso),e(Pa,vso),e(yr,Fso),e(yr,k),e(k,jn),e(jn,sle),e(sle,Tso),e(jn,Mso),e(jn,tB),e(tB,Eso),e(jn,Cso),e(jn,aB),e(aB,wso),e(jn,Aso),e(k,Lso),e(k,Dn),e(Dn,lle),e(lle,yso),e(Dn,xso),e(Dn,nB),e(nB,$so),e(Dn,kso),e(Dn,sB),e(sB,Sso),e(Dn,Rso),e(k,Pso),e(k,Gn),e(Gn,ile),e(ile,Bso),e(Gn,Nso),e(Gn,lB),e(lB,Iso),e(Gn,qso),e(Gn,iB),e(iB,jso),e(Gn,Dso),e(k,Gso),e(k,oh),e(oh,dle),e(dle,Oso),e(oh,Vso),e(oh,dB),e(dB,Xso),e(oh,zso),e(k,Qso),e(k,On),e(On,cle),e(cle,Wso),e(On,Hso),e(On,cB),e(cB,Uso),e(On,Jso),e(On,mB),e(mB,Yso),e(On,Kso),e(k,Zso),e(k,rh),e(rh,mle),e(mle,elo),e(rh,olo),e(rh,fB),e(fB,rlo),e(rh,tlo),e(k,alo),e(k,th),e(th,fle),e(fle,nlo),e(th,slo),e(th,gB),e(gB,llo),e(th,ilo),e(k,dlo),e(k,ah),e(ah,gle),e(gle,clo),e(ah,mlo),e(ah,hB),e(hB,flo),e(ah,glo),e(k,hlo),e(k,Vn),e(Vn,hle),e(hle,ulo),e(Vn,plo),e(Vn,uB),e(uB,_lo),e(Vn,blo),e(Vn,pB),e(pB,vlo),e(Vn,Flo),e(k,Tlo),e(k,Xn),e(Xn,ule),e(ule,Mlo),e(Xn,Elo),e(Xn,_B),e(_B,Clo),e(Xn,wlo),e(Xn,bB),e(bB,Alo),e(Xn,Llo),e(k,ylo),e(k,zn),e(zn,ple),e(ple,xlo),e(zn,$lo),e(zn,vB),e(vB,klo),e(zn,Slo),e(zn,FB),e(FB,Rlo),e(zn,Plo),e(k,Blo),e(k,nh),e(nh,_le),e(_le,Nlo),e(nh,Ilo),e(nh,TB),e(TB,qlo),e(nh,jlo),e(k,Dlo),e(k,sh),e(sh,ble),e(ble,Glo),e(sh,Olo),e(sh,MB),e(MB,Vlo),e(sh,Xlo),e(k,zlo),e(k,lh),e(lh,vle),e(vle,Qlo),e(lh,Wlo),e(lh,EB),e(EB,Hlo),e(lh,Ulo),e(k,Jlo),e(k,Qn),e(Qn,Fle),e(Fle,Ylo),e(Qn,Klo),e(Qn,CB),e(CB,Zlo),e(Qn,eio),e(Qn,wB),e(wB,oio),e(Qn,rio),e(k,tio),e(k,ih),e(ih,Tle),e(Tle,aio),e(ih,nio),e(ih,AB),e(AB,sio),e(ih,lio),e(k,iio),e(k,Wn),e(Wn,Mle),e(Mle,dio),e(Wn,cio),e(Wn,LB),e(LB,mio),e(Wn,fio),e(Wn,yB),e(yB,gio),e(Wn,hio),e(k,uio),e(k,Hn),e(Hn,Ele),e(Ele,pio),e(Hn,_io),e(Hn,xB),e(xB,bio),e(Hn,vio),e(Hn,$B),e($B,Fio),e(Hn,Tio),e(k,Mio),e(k,Un),e(Un,Cle),e(Cle,Eio),e(Un,Cio),e(Un,kB),e(kB,wio),e(Un,Aio),e(Un,SB),e(SB,Lio),e(Un,yio),e(k,xio),e(k,Jn),e(Jn,wle),e(wle,$io),e(Jn,kio),e(Jn,RB),e(RB,Sio),e(Jn,Rio),e(Jn,PB),e(PB,Pio),e(Jn,Bio),e(k,Nio),e(k,dh),e(dh,Ale),e(Ale,Iio),e(dh,qio),e(dh,BB),e(BB,jio),e(dh,Dio),e(k,Gio),e(k,Yn),e(Yn,Lle),e(Lle,Oio),e(Yn,Vio),e(Yn,NB),e(NB,Xio),e(Yn,zio),e(Yn,IB),e(IB,Qio),e(Yn,Wio),e(k,Hio),e(k,Kn),e(Kn,yle),e(yle,Uio),e(Kn,Jio),e(Kn,qB),e(qB,Yio),e(Kn,Kio),e(Kn,jB),e(jB,Zio),e(Kn,edo),e(k,odo),e(k,Zn),e(Zn,xle),e(xle,rdo),e(Zn,tdo),e(Zn,DB),e(DB,ado),e(Zn,ndo),e(Zn,GB),e(GB,sdo),e(Zn,ldo),e(k,ido),e(k,es),e(es,$le),e($le,ddo),e(es,cdo),e(es,OB),e(OB,mdo),e(es,fdo),e(es,VB),e(VB,gdo),e(es,hdo),e(k,udo),e(k,os),e(os,kle),e(kle,pdo),e(os,_do),e(os,XB),e(XB,bdo),e(os,vdo),e(os,zB),e(zB,Fdo),e(os,Tdo),e(k,Mdo),e(k,rs),e(rs,Sle),e(Sle,Edo),e(rs,Cdo),e(rs,QB),e(QB,wdo),e(rs,Ado),e(rs,WB),e(WB,Ldo),e(rs,ydo),e(k,xdo),e(k,ch),e(ch,Rle),e(Rle,$do),e(ch,kdo),e(ch,HB),e(HB,Sdo),e(ch,Rdo),e(k,Pdo),e(k,ts),e(ts,Ple),e(Ple,Bdo),e(ts,Ndo),e(ts,UB),e(UB,Ido),e(ts,qdo),e(ts,JB),e(JB,jdo),e(ts,Ddo),e(k,Gdo),e(k,mh),e(mh,Ble),e(Ble,Odo),e(mh,Vdo),e(mh,YB),e(YB,Xdo),e(mh,zdo),e(k,Qdo),e(k,as),e(as,Nle),e(Nle,Wdo),e(as,Hdo),e(as,KB),e(KB,Udo),e(as,Jdo),e(as,ZB),e(ZB,Ydo),e(as,Kdo),e(k,Zdo),e(k,ns),e(ns,Ile),e(Ile,eco),e(ns,oco),e(ns,eN),e(eN,rco),e(ns,tco),e(ns,oN),e(oN,aco),e(ns,nco),e(k,sco),e(k,ss),e(ss,qle),e(qle,lco),e(ss,ico),e(ss,rN),e(rN,dco),e(ss,cco),e(ss,tN),e(tN,mco),e(ss,fco),e(k,gco),e(k,fh),e(fh,jle),e(jle,hco),e(fh,uco),e(fh,aN),e(aN,pco),e(fh,_co),e(k,bco),e(k,ls),e(ls,Dle),e(Dle,vco),e(ls,Fco),e(ls,nN),e(nN,Tco),e(ls,Mco),e(ls,sN),e(sN,Eco),e(ls,Cco),e(k,wco),e(k,is),e(is,Gle),e(Gle,Aco),e(is,Lco),e(is,lN),e(lN,yco),e(is,xco),e(is,iN),e(iN,$co),e(is,kco),e(k,Sco),e(k,ds),e(ds,Ole),e(Ole,Rco),e(ds,Pco),e(ds,dN),e(dN,Bco),e(ds,Nco),e(ds,cN),e(cN,Ico),e(ds,qco),e(k,jco),e(k,gh),e(gh,Vle),e(Vle,Dco),e(gh,Gco),e(gh,mN),e(mN,Oco),e(gh,Vco),e(k,Xco),e(k,cs),e(cs,Xle),e(Xle,zco),e(cs,Qco),e(cs,fN),e(fN,Wco),e(cs,Hco),e(cs,gN),e(gN,Uco),e(cs,Jco),e(k,Yco),e(k,ms),e(ms,zle),e(zle,Kco),e(ms,Zco),e(ms,hN),e(hN,emo),e(ms,omo),e(ms,uN),e(uN,rmo),e(ms,tmo),e(k,amo),e(k,fs),e(fs,Qle),e(Qle,nmo),e(fs,smo),e(fs,pN),e(pN,lmo),e(fs,imo),e(fs,_N),e(_N,dmo),e(fs,cmo),e(k,mmo),e(k,gs),e(gs,Wle),e(Wle,fmo),e(gs,gmo),e(gs,bN),e(bN,hmo),e(gs,umo),e(gs,vN),e(vN,pmo),e(gs,_mo),e(k,bmo),e(k,hs),e(hs,Hle),e(Hle,vmo),e(hs,Fmo),e(hs,FN),e(FN,Tmo),e(hs,Mmo),e(hs,TN),e(TN,Emo),e(hs,Cmo),e(k,wmo),e(k,us),e(us,Ule),e(Ule,Amo),e(us,Lmo),e(us,MN),e(MN,ymo),e(us,xmo),e(us,EN),e(EN,$mo),e(us,kmo),e(k,Smo),e(k,ps),e(ps,Jle),e(Jle,Rmo),e(ps,Pmo),e(ps,CN),e(CN,Bmo),e(ps,Nmo),e(ps,wN),e(wN,Imo),e(ps,qmo),e(k,jmo),e(k,_s),e(_s,Yle),e(Yle,Dmo),e(_s,Gmo),e(_s,AN),e(AN,Omo),e(_s,Vmo),e(_s,LN),e(LN,Xmo),e(_s,zmo),e(k,Qmo),e(k,hh),e(hh,Kle),e(Kle,Wmo),e(hh,Hmo),e(hh,yN),e(yN,Umo),e(hh,Jmo),e(k,Ymo),e(k,bs),e(bs,Zle),e(Zle,Kmo),e(bs,Zmo),e(bs,xN),e(xN,efo),e(bs,ofo),e(bs,$N),e($N,rfo),e(bs,tfo),e(k,afo),e(k,uh),e(uh,eie),e(eie,nfo),e(uh,sfo),e(uh,kN),e(kN,lfo),e(uh,ifo),e(k,dfo),e(k,ph),e(ph,oie),e(oie,cfo),e(ph,mfo),e(ph,SN),e(SN,ffo),e(ph,gfo),e(k,hfo),e(k,vs),e(vs,rie),e(rie,ufo),e(vs,pfo),e(vs,RN),e(RN,_fo),e(vs,bfo),e(vs,PN),e(PN,vfo),e(vs,Ffo),e(k,Tfo),e(k,Fs),e(Fs,tie),e(tie,Mfo),e(Fs,Efo),e(Fs,BN),e(BN,Cfo),e(Fs,wfo),e(Fs,NN),e(NN,Afo),e(Fs,Lfo),e(k,yfo),e(k,Ts),e(Ts,aie),e(aie,xfo),e(Ts,$fo),e(Ts,IN),e(IN,kfo),e(Ts,Sfo),e(Ts,qN),e(qN,Rfo),e(Ts,Pfo),e(k,Bfo),e(k,_h),e(_h,nie),e(nie,Nfo),e(_h,Ifo),e(_h,jN),e(jN,qfo),e(_h,jfo),e(k,Dfo),e(k,Ms),e(Ms,sie),e(sie,Gfo),e(Ms,Ofo),e(Ms,DN),e(DN,Vfo),e(Ms,Xfo),e(Ms,GN),e(GN,zfo),e(Ms,Qfo),e(k,Wfo),e(k,Es),e(Es,lie),e(lie,Hfo),e(Es,Ufo),e(Es,ON),e(ON,Jfo),e(Es,Yfo),e(Es,VN),e(VN,Kfo),e(Es,Zfo),e(k,ego),e(k,Cs),e(Cs,iie),e(iie,ogo),e(Cs,rgo),e(Cs,XN),e(XN,tgo),e(Cs,ago),e(Cs,zN),e(zN,ngo),e(Cs,sgo),e(k,lgo),e(k,ws),e(ws,die),e(die,igo),e(ws,dgo),e(ws,QN),e(QN,cgo),e(ws,mgo),e(ws,WN),e(WN,fgo),e(ws,ggo),e(k,hgo),e(k,As),e(As,cie),e(cie,ugo),e(As,pgo),e(As,HN),e(HN,_go),e(As,bgo),e(As,UN),e(UN,vgo),e(As,Fgo),e(k,Tgo),e(k,Ls),e(Ls,mie),e(mie,Mgo),e(Ls,Ego),e(Ls,JN),e(JN,Cgo),e(Ls,wgo),e(Ls,YN),e(YN,Ago),e(Ls,Lgo),e(k,ygo),e(k,ys),e(ys,fie),e(fie,xgo),e(ys,$go),e(ys,KN),e(KN,kgo),e(ys,Sgo),e(ys,ZN),e(ZN,Rgo),e(ys,Pgo),e(k,Bgo),e(k,xs),e(xs,gie),e(gie,Ngo),e(xs,Igo),e(xs,eI),e(eI,qgo),e(xs,jgo),e(xs,oI),e(oI,Dgo),e(xs,Ggo),e(k,Ogo),e(k,bh),e(bh,hie),e(hie,Vgo),e(bh,Xgo),e(bh,rI),e(rI,zgo),e(bh,Qgo),e(k,Wgo),e(k,$s),e($s,uie),e(uie,Hgo),e($s,Ugo),e($s,tI),e(tI,Jgo),e($s,Ygo),e($s,aI),e(aI,Kgo),e($s,Zgo),e(k,eho),e(k,vh),e(vh,pie),e(pie,oho),e(vh,rho),e(vh,nI),e(nI,tho),e(vh,aho),e(k,nho),e(k,Fh),e(Fh,_ie),e(_ie,sho),e(Fh,lho),e(Fh,sI),e(sI,iho),e(Fh,dho),e(k,cho),e(k,Th),e(Th,bie),e(bie,mho),e(Th,fho),e(Th,lI),e(lI,gho),e(Th,hho),e(k,uho),e(k,Mh),e(Mh,vie),e(vie,pho),e(Mh,_ho),e(Mh,iI),e(iI,bho),e(Mh,vho),e(k,Fho),e(k,ks),e(ks,Fie),e(Fie,Tho),e(ks,Mho),e(ks,dI),e(dI,Eho),e(ks,Cho),e(ks,cI),e(cI,who),e(ks,Aho),e(k,Lho),e(k,Eh),e(Eh,Tie),e(Tie,yho),e(Eh,xho),e(Eh,mI),e(mI,$ho),e(Eh,kho),e(k,Sho),e(k,Ss),e(Ss,Mie),e(Mie,Rho),e(Ss,Pho),e(Ss,fI),e(fI,Bho),e(Ss,Nho),e(Ss,gI),e(gI,Iho),e(Ss,qho),e(k,jho),e(k,Rs),e(Rs,Eie),e(Eie,Dho),e(Rs,Gho),e(Rs,hI),e(hI,Oho),e(Rs,Vho),e(Rs,uI),e(uI,Xho),e(Rs,zho),e(k,Qho),e(k,Ps),e(Ps,Cie),e(Cie,Who),e(Ps,Hho),e(Ps,pI),e(pI,Uho),e(Ps,Jho),e(Ps,_I),e(_I,Yho),e(Ps,Kho),e(k,Zho),e(k,Bs),e(Bs,wie),e(wie,euo),e(Bs,ouo),e(Bs,bI),e(bI,ruo),e(Bs,tuo),e(Bs,vI),e(vI,auo),e(Bs,nuo),e(k,suo),e(k,Ns),e(Ns,Aie),e(Aie,luo),e(Ns,iuo),e(Ns,FI),e(FI,duo),e(Ns,cuo),e(Ns,TI),e(TI,muo),e(Ns,fuo),e(k,guo),e(k,Is),e(Is,Lie),e(Lie,huo),e(Is,uuo),e(Is,MI),e(MI,puo),e(Is,_uo),e(Is,EI),e(EI,buo),e(Is,vuo),e(k,Fuo),e(k,Ch),e(Ch,yie),e(yie,Tuo),e(Ch,Muo),e(Ch,CI),e(CI,Euo),e(Ch,Cuo),e(k,wuo),e(k,wh),e(wh,xie),e(xie,Auo),e(wh,Luo),e(wh,wI),e(wI,yuo),e(wh,xuo),e(k,$uo),e(k,qs),e(qs,$ie),e($ie,kuo),e(qs,Suo),e(qs,AI),e(AI,Ruo),e(qs,Puo),e(qs,LI),e(LI,Buo),e(qs,Nuo),e(k,Iuo),e(k,js),e(js,kie),e(kie,quo),e(js,juo),e(js,yI),e(yI,Duo),e(js,Guo),e(js,xI),e(xI,Ouo),e(js,Vuo),e(k,Xuo),e(k,Ds),e(Ds,Sie),e(Sie,zuo),e(Ds,Quo),e(Ds,$I),e($I,Wuo),e(Ds,Huo),e(Ds,kI),e(kI,Uuo),e(Ds,Juo),e(k,Yuo),e(k,Ah),e(Ah,Rie),e(Rie,Kuo),e(Ah,Zuo),e(Ah,SI),e(SI,epo),e(Ah,opo),e(k,rpo),e(k,Lh),e(Lh,Pie),e(Pie,tpo),e(Lh,apo),e(Lh,RI),e(RI,npo),e(Lh,spo),e(k,lpo),e(k,yh),e(yh,Bie),e(Bie,ipo),e(yh,dpo),e(yh,PI),e(PI,cpo),e(yh,mpo),e(k,fpo),e(k,Gs),e(Gs,Nie),e(Nie,gpo),e(Gs,hpo),e(Gs,BI),e(BI,upo),e(Gs,ppo),e(Gs,NI),e(NI,_po),e(Gs,bpo),e(k,vpo),e(k,Os),e(Os,Iie),e(Iie,Fpo),e(Os,Tpo),e(Os,II),e(II,Mpo),e(Os,Epo),e(Os,qI),e(qI,Cpo),e(Os,wpo),e(k,Apo),e(k,xh),e(xh,qie),e(qie,Lpo),e(xh,ypo),e(xh,jI),e(jI,xpo),e(xh,$po),e(k,kpo),e(k,$h),e($h,jie),e(jie,Spo),e($h,Rpo),e($h,DI),e(DI,Ppo),e($h,Bpo),e(k,Npo),e(k,kh),e(kh,Die),e(Die,Ipo),e(kh,qpo),e(kh,GI),e(GI,jpo),e(kh,Dpo),e(k,Gpo),e(k,Vs),e(Vs,Gie),e(Gie,Opo),e(Vs,Vpo),e(Vs,OI),e(OI,Xpo),e(Vs,zpo),e(Vs,VI),e(VI,Qpo),e(Vs,Wpo),e(k,Hpo),e(k,Sh),e(Sh,Oie),e(Oie,Upo),e(Sh,Jpo),e(Sh,XI),e(XI,Ypo),e(Sh,Kpo),e(k,Zpo),e(k,Rh),e(Rh,Vie),e(Vie,e_o),e(Rh,o_o),e(Rh,zI),e(zI,r_o),e(Rh,t_o),e(k,a_o),e(k,Xs),e(Xs,Xie),e(Xie,n_o),e(Xs,s_o),e(Xs,QI),e(QI,l_o),e(Xs,i_o),e(Xs,WI),e(WI,d_o),e(Xs,c_o),e(k,m_o),e(k,zs),e(zs,zie),e(zie,f_o),e(zs,g_o),e(zs,HI),e(HI,h_o),e(zs,u_o),e(zs,UI),e(UI,p_o),e(zs,__o),e(k,b_o),e(k,Qs),e(Qs,Qie),e(Qie,v_o),e(Qs,F_o),e(Qs,JI),e(JI,T_o),e(Qs,M_o),e(Qs,YI),e(YI,E_o),e(Qs,C_o),e(k,w_o),e(k,Ws),e(Ws,Wie),e(Wie,A_o),e(Ws,L_o),e(Ws,KI),e(KI,y_o),e(Ws,x_o),e(Ws,ZI),e(ZI,$_o),e(Ws,k_o),e(yr,S_o),M(Ph,yr,null),e(Lo,R_o),e(Lo,Bh),M(Fy,Bh,null),e(Bh,P_o),e(Bh,Hie),e(Hie,B_o),b(m,vXe,_),b(m,ji,_),e(ji,Nh),e(Nh,Uie),M(Ty,Uie,null),e(ji,N_o),e(ji,Jie),e(Jie,I_o),b(m,FXe,_),b(m,yo,_),M(My,yo,null),e(yo,q_o),e(yo,Ey),e(Ey,j_o),e(Ey,eq),e(eq,D_o),e(Ey,G_o),e(yo,O_o),e(yo,Cy),e(Cy,V_o),e(Cy,Yie),e(Yie,X_o),e(Cy,z_o),e(yo,Q_o),e(yo,Ue),M(wy,Ue,null),e(Ue,W_o),e(Ue,Kie),e(Kie,H_o),e(Ue,U_o),e(Ue,Ba),e(Ba,J_o),e(Ba,Zie),e(Zie,Y_o),e(Ba,K_o),e(Ba,ede),e(ede,Z_o),e(Ba,e2o),e(Ba,ode),e(ode,o2o),e(Ba,r2o),e(Ue,t2o),e(Ue,Y),e(Y,Ih),e(Ih,rde),e(rde,a2o),e(Ih,n2o),e(Ih,oq),e(oq,s2o),e(Ih,l2o),e(Y,i2o),e(Y,qh),e(qh,tde),e(tde,d2o),e(qh,c2o),e(qh,rq),e(rq,m2o),e(qh,f2o),e(Y,g2o),e(Y,jh),e(jh,ade),e(ade,h2o),e(jh,u2o),e(jh,tq),e(tq,p2o),e(jh,_2o),e(Y,b2o),e(Y,Dh),e(Dh,nde),e(nde,v2o),e(Dh,F2o),e(Dh,aq),e(aq,T2o),e(Dh,M2o),e(Y,E2o),e(Y,Gh),e(Gh,sde),e(sde,C2o),e(Gh,w2o),e(Gh,nq),e(nq,A2o),e(Gh,L2o),e(Y,y2o),e(Y,Oh),e(Oh,lde),e(lde,x2o),e(Oh,$2o),e(Oh,sq),e(sq,k2o),e(Oh,S2o),e(Y,R2o),e(Y,Vh),e(Vh,ide),e(ide,P2o),e(Vh,B2o),e(Vh,lq),e(lq,N2o),e(Vh,I2o),e(Y,q2o),e(Y,Xh),e(Xh,dde),e(dde,j2o),e(Xh,D2o),e(Xh,iq),e(iq,G2o),e(Xh,O2o),e(Y,V2o),e(Y,zh),e(zh,cde),e(cde,X2o),e(zh,z2o),e(zh,dq),e(dq,Q2o),e(zh,W2o),e(Y,H2o),e(Y,Qh),e(Qh,mde),e(mde,U2o),e(Qh,J2o),e(Qh,cq),e(cq,Y2o),e(Qh,K2o),e(Y,Z2o),e(Y,Wh),e(Wh,fde),e(fde,ebo),e(Wh,obo),e(Wh,mq),e(mq,rbo),e(Wh,tbo),e(Y,abo),e(Y,Hh),e(Hh,gde),e(gde,nbo),e(Hh,sbo),e(Hh,fq),e(fq,lbo),e(Hh,ibo),e(Y,dbo),e(Y,Uh),e(Uh,hde),e(hde,cbo),e(Uh,mbo),e(Uh,gq),e(gq,fbo),e(Uh,gbo),e(Y,hbo),e(Y,Jh),e(Jh,ude),e(ude,ubo),e(Jh,pbo),e(Jh,hq),e(hq,_bo),e(Jh,bbo),e(Y,vbo),e(Y,Yh),e(Yh,pde),e(pde,Fbo),e(Yh,Tbo),e(Yh,uq),e(uq,Mbo),e(Yh,Ebo),e(Y,Cbo),e(Y,Kh),e(Kh,_de),e(_de,wbo),e(Kh,Abo),e(Kh,pq),e(pq,Lbo),e(Kh,ybo),e(Y,xbo),e(Y,Zh),e(Zh,bde),e(bde,$bo),e(Zh,kbo),e(Zh,_q),e(_q,Sbo),e(Zh,Rbo),e(Y,Pbo),e(Y,eu),e(eu,vde),e(vde,Bbo),e(eu,Nbo),e(eu,bq),e(bq,Ibo),e(eu,qbo),e(Y,jbo),e(Y,ou),e(ou,Fde),e(Fde,Dbo),e(ou,Gbo),e(ou,vq),e(vq,Obo),e(ou,Vbo),e(Y,Xbo),e(Y,ru),e(ru,Tde),e(Tde,zbo),e(ru,Qbo),e(ru,Fq),e(Fq,Wbo),e(ru,Hbo),e(Y,Ubo),e(Y,tu),e(tu,Mde),e(Mde,Jbo),e(tu,Ybo),e(tu,Tq),e(Tq,Kbo),e(tu,Zbo),e(Y,evo),e(Y,au),e(au,Ede),e(Ede,ovo),e(au,rvo),e(au,Mq),e(Mq,tvo),e(au,avo),e(Y,nvo),e(Y,nu),e(nu,Cde),e(Cde,svo),e(nu,lvo),e(nu,Eq),e(Eq,ivo),e(nu,dvo),e(Y,cvo),e(Y,su),e(su,wde),e(wde,mvo),e(su,fvo),e(su,Cq),e(Cq,gvo),e(su,hvo),e(Y,uvo),e(Y,lu),e(lu,Ade),e(Ade,pvo),e(lu,_vo),e(lu,wq),e(wq,bvo),e(lu,vvo),e(Y,Fvo),e(Y,iu),e(iu,Lde),e(Lde,Tvo),e(iu,Mvo),e(iu,Aq),e(Aq,Evo),e(iu,Cvo),e(Y,wvo),e(Y,du),e(du,yde),e(yde,Avo),e(du,Lvo),e(du,Lq),e(Lq,yvo),e(du,xvo),e(Y,$vo),e(Y,cu),e(cu,xde),e(xde,kvo),e(cu,Svo),e(cu,yq),e(yq,Rvo),e(cu,Pvo),e(Y,Bvo),e(Y,mu),e(mu,$de),e($de,Nvo),e(mu,Ivo),e(mu,xq),e(xq,qvo),e(mu,jvo),e(Y,Dvo),e(Y,fu),e(fu,kde),e(kde,Gvo),e(fu,Ovo),e(fu,$q),e($q,Vvo),e(fu,Xvo),e(Y,zvo),e(Y,gu),e(gu,Sde),e(Sde,Qvo),e(gu,Wvo),e(gu,kq),e(kq,Hvo),e(gu,Uvo),e(Y,Jvo),e(Y,hu),e(hu,Rde),e(Rde,Yvo),e(hu,Kvo),e(hu,Sq),e(Sq,Zvo),e(hu,e1o),e(Y,o1o),e(Y,uu),e(uu,Pde),e(Pde,r1o),e(uu,t1o),e(uu,Rq),e(Rq,a1o),e(uu,n1o),e(Y,s1o),e(Y,pu),e(pu,Bde),e(Bde,l1o),e(pu,i1o),e(pu,Pq),e(Pq,d1o),e(pu,c1o),e(Ue,m1o),M(_u,Ue,null),e(Ue,f1o),M(bu,Ue,null),e(yo,g1o),e(yo,vu),M(Ay,vu,null),e(vu,h1o),e(vu,Nde),e(Nde,u1o),b(m,TXe,_),b(m,Di,_),e(Di,Fu),e(Fu,Ide),M(Ly,Ide,null),e(Di,p1o),e(Di,qde),e(qde,_1o),b(m,MXe,_),b(m,xo,_),M(yy,xo,null),e(xo,b1o),e(xo,xy),e(xy,v1o),e(xy,Bq),e(Bq,F1o),e(xy,T1o),e(xo,M1o),e(xo,$y),e($y,E1o),e($y,jde),e(jde,C1o),e($y,w1o),e(xo,A1o),e(xo,Je),M(ky,Je,null),e(Je,L1o),e(Je,Dde),e(Dde,y1o),e(Je,x1o),e(Je,Gi),e(Gi,$1o),e(Gi,Gde),e(Gde,k1o),e(Gi,S1o),e(Gi,Ode),e(Ode,R1o),e(Gi,P1o),e(Je,B1o),e(Je,ue),e(ue,Tu),e(Tu,Vde),e(Vde,N1o),e(Tu,I1o),e(Tu,Nq),e(Nq,q1o),e(Tu,j1o),e(ue,D1o),e(ue,Mu),e(Mu,Xde),e(Xde,G1o),e(Mu,O1o),e(Mu,zde),e(zde,V1o),e(Mu,X1o),e(ue,z1o),e(ue,Eu),e(Eu,Qde),e(Qde,Q1o),e(Eu,W1o),e(Eu,Iq),e(Iq,H1o),e(Eu,U1o),e(ue,J1o),e(ue,Cu),e(Cu,Wde),e(Wde,Y1o),e(Cu,K1o),e(Cu,qq),e(qq,Z1o),e(Cu,eFo),e(ue,oFo),e(ue,wu),e(wu,Hde),e(Hde,rFo),e(wu,tFo),e(wu,jq),e(jq,aFo),e(wu,nFo),e(ue,sFo),e(ue,Au),e(Au,Ude),e(Ude,lFo),e(Au,iFo),e(Au,Dq),e(Dq,dFo),e(Au,cFo),e(ue,mFo),e(ue,Lu),e(Lu,Jde),e(Jde,fFo),e(Lu,gFo),e(Lu,Gq),e(Gq,hFo),e(Lu,uFo),e(ue,pFo),e(ue,yu),e(yu,Yde),e(Yde,_Fo),e(yu,bFo),e(yu,Oq),e(Oq,vFo),e(yu,FFo),e(ue,TFo),e(ue,xu),e(xu,Kde),e(Kde,MFo),e(xu,EFo),e(xu,Vq),e(Vq,CFo),e(xu,wFo),e(ue,AFo),e(ue,$u),e($u,Zde),e(Zde,LFo),e($u,yFo),e($u,Xq),e(Xq,xFo),e($u,$Fo),e(ue,kFo),e(ue,ku),e(ku,ece),e(ece,SFo),e(ku,RFo),e(ku,zq),e(zq,PFo),e(ku,BFo),e(ue,NFo),e(ue,Su),e(Su,oce),e(oce,IFo),e(Su,qFo),e(Su,Qq),e(Qq,jFo),e(Su,DFo),e(ue,GFo),e(ue,Ru),e(Ru,rce),e(rce,OFo),e(Ru,VFo),e(Ru,Wq),e(Wq,XFo),e(Ru,zFo),e(ue,QFo),e(ue,Pu),e(Pu,tce),e(tce,WFo),e(Pu,HFo),e(Pu,Hq),e(Hq,UFo),e(Pu,JFo),e(ue,YFo),e(ue,Bu),e(Bu,ace),e(ace,KFo),e(Bu,ZFo),e(Bu,Uq),e(Uq,eTo),e(Bu,oTo),e(ue,rTo),e(ue,Nu),e(Nu,nce),e(nce,tTo),e(Nu,aTo),e(Nu,Jq),e(Jq,nTo),e(Nu,sTo),e(ue,lTo),e(ue,Iu),e(Iu,sce),e(sce,iTo),e(Iu,dTo),e(Iu,Yq),e(Yq,cTo),e(Iu,mTo),e(ue,fTo),e(ue,qu),e(qu,lce),e(lce,gTo),e(qu,hTo),e(qu,Kq),e(Kq,uTo),e(qu,pTo),e(Je,_To),M(ju,Je,null),e(Je,bTo),M(Du,Je,null),e(xo,vTo),e(xo,Gu),M(Sy,Gu,null),e(Gu,FTo),e(Gu,ice),e(ice,TTo),b(m,EXe,_),b(m,Oi,_),e(Oi,Ou),e(Ou,dce),M(Ry,dce,null),e(Oi,MTo),e(Oi,cce),e(cce,ETo),b(m,CXe,_),b(m,$o,_),M(Py,$o,null),e($o,CTo),e($o,Vi),e(Vi,wTo),e(Vi,Zq),e(Zq,ATo),e(Vi,LTo),e(Vi,ej),e(ej,yTo),e(Vi,xTo),e($o,$To),e($o,By),e(By,kTo),e(By,mce),e(mce,STo),e(By,RTo),e($o,PTo),e($o,it),M(Ny,it,null),e(it,BTo),e(it,fce),e(fce,NTo),e(it,ITo),e(it,Xi),e(Xi,qTo),e(Xi,gce),e(gce,jTo),e(Xi,DTo),e(Xi,oj),e(oj,GTo),e(Xi,OTo),e(it,VTo),M(Vu,it,null),e($o,XTo),e($o,Ye),M(Iy,Ye,null),e(Ye,zTo),e(Ye,hce),e(hce,QTo),e(Ye,WTo),e(Ye,Na),e(Na,HTo),e(Na,uce),e(uce,UTo),e(Na,JTo),e(Na,pce),e(pce,YTo),e(Na,KTo),e(Na,_ce),e(_ce,ZTo),e(Na,eMo),e(Ye,oMo),e(Ye,y),e(y,Xu),e(Xu,bce),e(bce,rMo),e(Xu,tMo),e(Xu,rj),e(rj,aMo),e(Xu,nMo),e(y,sMo),e(y,zu),e(zu,vce),e(vce,lMo),e(zu,iMo),e(zu,tj),e(tj,dMo),e(zu,cMo),e(y,mMo),e(y,Qu),e(Qu,Fce),e(Fce,fMo),e(Qu,gMo),e(Qu,aj),e(aj,hMo),e(Qu,uMo),e(y,pMo),e(y,Wu),e(Wu,Tce),e(Tce,_Mo),e(Wu,bMo),e(Wu,nj),e(nj,vMo),e(Wu,FMo),e(y,TMo),e(y,Hu),e(Hu,Mce),e(Mce,MMo),e(Hu,EMo),e(Hu,sj),e(sj,CMo),e(Hu,wMo),e(y,AMo),e(y,Uu),e(Uu,Ece),e(Ece,LMo),e(Uu,yMo),e(Uu,lj),e(lj,xMo),e(Uu,$Mo),e(y,kMo),e(y,Ju),e(Ju,Cce),e(Cce,SMo),e(Ju,RMo),e(Ju,ij),e(ij,PMo),e(Ju,BMo),e(y,NMo),e(y,Yu),e(Yu,wce),e(wce,IMo),e(Yu,qMo),e(Yu,dj),e(dj,jMo),e(Yu,DMo),e(y,GMo),e(y,Ku),e(Ku,Ace),e(Ace,OMo),e(Ku,VMo),e(Ku,cj),e(cj,XMo),e(Ku,zMo),e(y,QMo),e(y,Zu),e(Zu,Lce),e(Lce,WMo),e(Zu,HMo),e(Zu,mj),e(mj,UMo),e(Zu,JMo),e(y,YMo),e(y,ep),e(ep,yce),e(yce,KMo),e(ep,ZMo),e(ep,fj),e(fj,e4o),e(ep,o4o),e(y,r4o),e(y,op),e(op,xce),e(xce,t4o),e(op,a4o),e(op,gj),e(gj,n4o),e(op,s4o),e(y,l4o),e(y,rp),e(rp,$ce),e($ce,i4o),e(rp,d4o),e(rp,hj),e(hj,c4o),e(rp,m4o),e(y,f4o),e(y,tp),e(tp,kce),e(kce,g4o),e(tp,h4o),e(tp,uj),e(uj,u4o),e(tp,p4o),e(y,_4o),e(y,ap),e(ap,Sce),e(Sce,b4o),e(ap,v4o),e(ap,pj),e(pj,F4o),e(ap,T4o),e(y,M4o),e(y,np),e(np,Rce),e(Rce,E4o),e(np,C4o),e(np,_j),e(_j,w4o),e(np,A4o),e(y,L4o),e(y,sp),e(sp,Pce),e(Pce,y4o),e(sp,x4o),e(sp,bj),e(bj,$4o),e(sp,k4o),e(y,S4o),e(y,lp),e(lp,Bce),e(Bce,R4o),e(lp,P4o),e(lp,vj),e(vj,B4o),e(lp,N4o),e(y,I4o),e(y,ip),e(ip,Nce),e(Nce,q4o),e(ip,j4o),e(ip,Fj),e(Fj,D4o),e(ip,G4o),e(y,O4o),e(y,dp),e(dp,Ice),e(Ice,V4o),e(dp,X4o),e(dp,Tj),e(Tj,z4o),e(dp,Q4o),e(y,W4o),e(y,cp),e(cp,qce),e(qce,H4o),e(cp,U4o),e(cp,Mj),e(Mj,J4o),e(cp,Y4o),e(y,K4o),e(y,mp),e(mp,jce),e(jce,Z4o),e(mp,eEo),e(mp,Ej),e(Ej,oEo),e(mp,rEo),e(y,tEo),e(y,fp),e(fp,Dce),e(Dce,aEo),e(fp,nEo),e(fp,Cj),e(Cj,sEo),e(fp,lEo),e(y,iEo),e(y,gp),e(gp,Gce),e(Gce,dEo),e(gp,cEo),e(gp,wj),e(wj,mEo),e(gp,fEo),e(y,gEo),e(y,hp),e(hp,Oce),e(Oce,hEo),e(hp,uEo),e(hp,Aj),e(Aj,pEo),e(hp,_Eo),e(y,bEo),e(y,up),e(up,Vce),e(Vce,vEo),e(up,FEo),e(up,Lj),e(Lj,TEo),e(up,MEo),e(y,EEo),e(y,pp),e(pp,Xce),e(Xce,CEo),e(pp,wEo),e(pp,yj),e(yj,AEo),e(pp,LEo),e(y,yEo),e(y,_p),e(_p,zce),e(zce,xEo),e(_p,$Eo),e(_p,xj),e(xj,kEo),e(_p,SEo),e(y,REo),e(y,bp),e(bp,Qce),e(Qce,PEo),e(bp,BEo),e(bp,$j),e($j,NEo),e(bp,IEo),e(y,qEo),e(y,vp),e(vp,Wce),e(Wce,jEo),e(vp,DEo),e(vp,kj),e(kj,GEo),e(vp,OEo),e(y,VEo),e(y,Fp),e(Fp,Hce),e(Hce,XEo),e(Fp,zEo),e(Fp,Sj),e(Sj,QEo),e(Fp,WEo),e(y,HEo),e(y,Tp),e(Tp,Uce),e(Uce,UEo),e(Tp,JEo),e(Tp,Rj),e(Rj,YEo),e(Tp,KEo),e(y,ZEo),e(y,Mp),e(Mp,Jce),e(Jce,eCo),e(Mp,oCo),e(Mp,Pj),e(Pj,rCo),e(Mp,tCo),e(y,aCo),e(y,Ep),e(Ep,Yce),e(Yce,nCo),e(Ep,sCo),e(Ep,Bj),e(Bj,lCo),e(Ep,iCo),e(y,dCo),e(y,Hs),e(Hs,Kce),e(Kce,cCo),e(Hs,mCo),e(Hs,Nj),e(Nj,fCo),e(Hs,gCo),e(Hs,Ij),e(Ij,hCo),e(Hs,uCo),e(y,pCo),e(y,Cp),e(Cp,Zce),e(Zce,_Co),e(Cp,bCo),e(Cp,qj),e(qj,vCo),e(Cp,FCo),e(y,TCo),e(y,wp),e(wp,eme),e(eme,MCo),e(wp,ECo),e(wp,jj),e(jj,CCo),e(wp,wCo),e(y,ACo),e(y,Ap),e(Ap,ome),e(ome,LCo),e(Ap,yCo),e(Ap,Dj),e(Dj,xCo),e(Ap,$Co),e(y,kCo),e(y,Lp),e(Lp,rme),e(rme,SCo),e(Lp,RCo),e(Lp,Gj),e(Gj,PCo),e(Lp,BCo),e(y,NCo),e(y,yp),e(yp,tme),e(tme,ICo),e(yp,qCo),e(yp,Oj),e(Oj,jCo),e(yp,DCo),e(y,GCo),e(y,xp),e(xp,ame),e(ame,OCo),e(xp,VCo),e(xp,Vj),e(Vj,XCo),e(xp,zCo),e(y,QCo),e(y,$p),e($p,nme),e(nme,WCo),e($p,HCo),e($p,Xj),e(Xj,UCo),e($p,JCo),e(y,YCo),e(y,kp),e(kp,sme),e(sme,KCo),e(kp,ZCo),e(kp,zj),e(zj,e3o),e(kp,o3o),e(y,r3o),e(y,Sp),e(Sp,lme),e(lme,t3o),e(Sp,a3o),e(Sp,Qj),e(Qj,n3o),e(Sp,s3o),e(y,l3o),e(y,Rp),e(Rp,ime),e(ime,i3o),e(Rp,d3o),e(Rp,Wj),e(Wj,c3o),e(Rp,m3o),e(y,f3o),e(y,Pp),e(Pp,dme),e(dme,g3o),e(Pp,h3o),e(Pp,Hj),e(Hj,u3o),e(Pp,p3o),e(y,_3o),e(y,Bp),e(Bp,cme),e(cme,b3o),e(Bp,v3o),e(Bp,Uj),e(Uj,F3o),e(Bp,T3o),e(y,M3o),e(y,Np),e(Np,mme),e(mme,E3o),e(Np,C3o),e(Np,Jj),e(Jj,w3o),e(Np,A3o),e(y,L3o),e(y,Ip),e(Ip,fme),e(fme,y3o),e(Ip,x3o),e(Ip,Yj),e(Yj,$3o),e(Ip,k3o),e(y,S3o),e(y,qp),e(qp,gme),e(gme,R3o),e(qp,P3o),e(qp,Kj),e(Kj,B3o),e(qp,N3o),e(y,I3o),e(y,jp),e(jp,hme),e(hme,q3o),e(jp,j3o),e(jp,Zj),e(Zj,D3o),e(jp,G3o),e(y,O3o),e(y,Dp),e(Dp,ume),e(ume,V3o),e(Dp,X3o),e(Dp,eD),e(eD,z3o),e(Dp,Q3o),e(y,W3o),e(y,Gp),e(Gp,pme),e(pme,H3o),e(Gp,U3o),e(Gp,oD),e(oD,J3o),e(Gp,Y3o),e(y,K3o),e(y,Op),e(Op,_me),e(_me,Z3o),e(Op,e5o),e(Op,rD),e(rD,o5o),e(Op,r5o),e(y,t5o),e(y,Vp),e(Vp,bme),e(bme,a5o),e(Vp,n5o),e(Vp,tD),e(tD,s5o),e(Vp,l5o),e(y,i5o),e(y,Xp),e(Xp,vme),e(vme,d5o),e(Xp,c5o),e(Xp,aD),e(aD,m5o),e(Xp,f5o),e(y,g5o),e(y,zp),e(zp,Fme),e(Fme,h5o),e(zp,u5o),e(zp,nD),e(nD,p5o),e(zp,_5o),e(y,b5o),e(y,Qp),e(Qp,Tme),e(Tme,v5o),e(Qp,F5o),e(Qp,sD),e(sD,T5o),e(Qp,M5o),e(y,E5o),e(y,Wp),e(Wp,Mme),e(Mme,C5o),e(Wp,w5o),e(Wp,lD),e(lD,A5o),e(Wp,L5o),e(y,y5o),e(y,Hp),e(Hp,Eme),e(Eme,x5o),e(Hp,$5o),e(Hp,iD),e(iD,k5o),e(Hp,S5o),e(y,R5o),e(y,Up),e(Up,Cme),e(Cme,P5o),e(Up,B5o),e(Up,dD),e(dD,N5o),e(Up,I5o),e(y,q5o),e(y,Jp),e(Jp,wme),e(wme,j5o),e(Jp,D5o),e(Jp,cD),e(cD,G5o),e(Jp,O5o),e(y,V5o),e(y,Yp),e(Yp,Ame),e(Ame,X5o),e(Yp,z5o),e(Yp,mD),e(mD,Q5o),e(Yp,W5o),e(y,H5o),e(y,Kp),e(Kp,Lme),e(Lme,U5o),e(Kp,J5o),e(Kp,fD),e(fD,Y5o),e(Kp,K5o),e(y,Z5o),e(y,Zp),e(Zp,yme),e(yme,e0o),e(Zp,o0o),e(Zp,gD),e(gD,r0o),e(Zp,t0o),e(y,a0o),e(y,e_),e(e_,xme),e(xme,n0o),e(e_,s0o),e(e_,hD),e(hD,l0o),e(e_,i0o),e(y,d0o),e(y,o_),e(o_,$me),e($me,c0o),e(o_,m0o),e(o_,uD),e(uD,f0o),e(o_,g0o),e(y,h0o),e(y,r_),e(r_,kme),e(kme,u0o),e(r_,p0o),e(r_,pD),e(pD,_0o),e(r_,b0o),e(y,v0o),e(y,t_),e(t_,Sme),e(Sme,F0o),e(t_,T0o),e(t_,_D),e(_D,M0o),e(t_,E0o),e(y,C0o),e(y,a_),e(a_,Rme),e(Rme,w0o),e(a_,A0o),e(a_,bD),e(bD,L0o),e(a_,y0o),e(y,x0o),e(y,n_),e(n_,Pme),e(Pme,$0o),e(n_,k0o),e(n_,vD),e(vD,S0o),e(n_,R0o),e(y,P0o),e(y,s_),e(s_,Bme),e(Bme,B0o),e(s_,N0o),e(s_,FD),e(FD,I0o),e(s_,q0o),e(y,j0o),e(y,l_),e(l_,Nme),e(Nme,D0o),e(l_,G0o),e(l_,TD),e(TD,O0o),e(l_,V0o),e(y,X0o),e(y,i_),e(i_,Ime),e(Ime,z0o),e(i_,Q0o),e(i_,MD),e(MD,W0o),e(i_,H0o),e(y,U0o),e(y,d_),e(d_,qme),e(qme,J0o),e(d_,Y0o),e(d_,ED),e(ED,K0o),e(d_,Z0o),e(y,ewo),e(y,c_),e(c_,jme),e(jme,owo),e(c_,rwo),e(c_,CD),e(CD,two),e(c_,awo),e(y,nwo),e(y,m_),e(m_,Dme),e(Dme,swo),e(m_,lwo),e(m_,wD),e(wD,iwo),e(m_,dwo),e(y,cwo),e(y,f_),e(f_,Gme),e(Gme,mwo),e(f_,fwo),e(f_,AD),e(AD,gwo),e(f_,hwo),e(y,uwo),e(y,g_),e(g_,Ome),e(Ome,pwo),e(g_,_wo),e(g_,LD),e(LD,bwo),e(g_,vwo),e(y,Fwo),e(y,h_),e(h_,Vme),e(Vme,Two),e(h_,Mwo),e(h_,yD),e(yD,Ewo),e(h_,Cwo),e(y,wwo),e(y,u_),e(u_,Xme),e(Xme,Awo),e(u_,Lwo),e(u_,xD),e(xD,ywo),e(u_,xwo),e(y,$wo),e(y,p_),e(p_,zme),e(zme,kwo),e(p_,Swo),e(p_,$D),e($D,Rwo),e(p_,Pwo),e(y,Bwo),e(y,__),e(__,Qme),e(Qme,Nwo),e(__,Iwo),e(__,kD),e(kD,qwo),e(__,jwo),e(y,Dwo),e(y,b_),e(b_,Wme),e(Wme,Gwo),e(b_,Owo),e(b_,SD),e(SD,Vwo),e(b_,Xwo),e(y,zwo),e(y,v_),e(v_,Hme),e(Hme,Qwo),e(v_,Wwo),e(v_,RD),e(RD,Hwo),e(v_,Uwo),e(y,Jwo),e(y,F_),e(F_,Ume),e(Ume,Ywo),e(F_,Kwo),e(F_,PD),e(PD,Zwo),e(F_,eAo),e(y,oAo),e(y,T_),e(T_,Jme),e(Jme,rAo),e(T_,tAo),e(T_,BD),e(BD,aAo),e(T_,nAo),e(y,sAo),e(y,M_),e(M_,Yme),e(Yme,lAo),e(M_,iAo),e(M_,ND),e(ND,dAo),e(M_,cAo),e(y,mAo),e(y,E_),e(E_,Kme),e(Kme,fAo),e(E_,gAo),e(E_,ID),e(ID,hAo),e(E_,uAo),e(y,pAo),e(y,C_),e(C_,Zme),e(Zme,_Ao),e(C_,bAo),e(C_,qD),e(qD,vAo),e(C_,FAo),e(y,TAo),e(y,w_),e(w_,efe),e(efe,MAo),e(w_,EAo),e(w_,jD),e(jD,CAo),e(w_,wAo),e(y,AAo),e(y,A_),e(A_,ofe),e(ofe,LAo),e(A_,yAo),e(A_,DD),e(DD,xAo),e(A_,$Ao),e(y,kAo),e(y,L_),e(L_,rfe),e(rfe,SAo),e(L_,RAo),e(L_,GD),e(GD,PAo),e(L_,BAo),e(y,NAo),e(y,y_),e(y_,tfe),e(tfe,IAo),e(y_,qAo),e(y_,OD),e(OD,jAo),e(y_,DAo),e(y,GAo),e(y,x_),e(x_,afe),e(afe,OAo),e(x_,VAo),e(x_,VD),e(VD,XAo),e(x_,zAo),e(y,QAo),e(y,$_),e($_,nfe),e(nfe,WAo),e($_,HAo),e($_,XD),e(XD,UAo),e($_,JAo),e(y,YAo),e(y,k_),e(k_,sfe),e(sfe,KAo),e(k_,ZAo),e(k_,zD),e(zD,e6o),e(k_,o6o),e(y,r6o),e(y,S_),e(S_,lfe),e(lfe,t6o),e(S_,a6o),e(S_,QD),e(QD,n6o),e(S_,s6o),e(y,l6o),e(y,R_),e(R_,ife),e(ife,i6o),e(R_,d6o),e(R_,WD),e(WD,c6o),e(R_,m6o),e(y,f6o),e(y,P_),e(P_,dfe),e(dfe,g6o),e(P_,h6o),e(P_,HD),e(HD,u6o),e(P_,p6o),e(y,_6o),e(y,B_),e(B_,cfe),e(cfe,b6o),e(B_,v6o),e(B_,UD),e(UD,F6o),e(B_,T6o),e(y,M6o),e(y,N_),e(N_,mfe),e(mfe,E6o),e(N_,C6o),e(N_,JD),e(JD,w6o),e(N_,A6o),e(y,L6o),e(y,I_),e(I_,ffe),e(ffe,y6o),e(I_,x6o),e(I_,YD),e(YD,$6o),e(I_,k6o),e(y,S6o),e(y,q_),e(q_,gfe),e(gfe,R6o),e(q_,P6o),e(q_,KD),e(KD,B6o),e(q_,N6o),e(y,I6o),e(y,j_),e(j_,hfe),e(hfe,q6o),e(j_,j6o),e(j_,ZD),e(ZD,D6o),e(j_,G6o),e(y,O6o),e(y,D_),e(D_,ufe),e(ufe,V6o),e(D_,X6o),e(D_,eG),e(eG,z6o),e(D_,Q6o),e(y,W6o),e(y,G_),e(G_,pfe),e(pfe,H6o),e(G_,U6o),e(G_,oG),e(oG,J6o),e(G_,Y6o),e(y,K6o),e(y,O_),e(O_,_fe),e(_fe,Z6o),e(O_,e7o),e(O_,rG),e(rG,o7o),e(O_,r7o),e(y,t7o),e(y,V_),e(V_,bfe),e(bfe,a7o),e(V_,n7o),e(V_,tG),e(tG,s7o),e(V_,l7o),e(y,i7o),e(y,X_),e(X_,vfe),e(vfe,d7o),e(X_,c7o),e(X_,aG),e(aG,m7o),e(X_,f7o),e(y,g7o),e(y,z_),e(z_,Ffe),e(Ffe,h7o),e(z_,u7o),e(z_,nG),e(nG,p7o),e(z_,_7o),e(y,b7o),e(y,Q_),e(Q_,Tfe),e(Tfe,v7o),e(Q_,F7o),e(Q_,sG),e(sG,T7o),e(Q_,M7o),e(Ye,E7o),e(Ye,W_),e(W_,C7o),e(W_,Mfe),e(Mfe,w7o),e(W_,A7o),e(W_,Efe),e(Efe,L7o),e(Ye,y7o),M(H_,Ye,null),b(m,wXe,_),b(m,zi,_),e(zi,U_),e(U_,Cfe),M(qy,Cfe,null),e(zi,x7o),e(zi,wfe),e(wfe,$7o),b(m,AXe,_),b(m,ko,_),M(jy,ko,null),e(ko,k7o),e(ko,Qi),e(Qi,S7o),e(Qi,lG),e(lG,R7o),e(Qi,P7o),e(Qi,iG),e(iG,B7o),e(Qi,N7o),e(ko,I7o),e(ko,Dy),e(Dy,q7o),e(Dy,Afe),e(Afe,j7o),e(Dy,D7o),e(ko,G7o),e(ko,dt),M(Gy,dt,null),e(dt,O7o),e(dt,Lfe),e(Lfe,V7o),e(dt,X7o),e(dt,Wi),e(Wi,z7o),e(Wi,yfe),e(yfe,Q7o),e(Wi,W7o),e(Wi,dG),e(dG,H7o),e(Wi,U7o),e(dt,J7o),M(J_,dt,null),e(ko,Y7o),e(ko,Ke),M(Oy,Ke,null),e(Ke,K7o),e(Ke,xfe),e(xfe,Z7o),e(Ke,eLo),e(Ke,Ia),e(Ia,oLo),e(Ia,$fe),e($fe,rLo),e(Ia,tLo),e(Ia,kfe),e(kfe,aLo),e(Ia,nLo),e(Ia,Sfe),e(Sfe,sLo),e(Ia,lLo),e(Ke,iLo),e(Ke,G),e(G,Y_),e(Y_,Rfe),e(Rfe,dLo),e(Y_,cLo),e(Y_,cG),e(cG,mLo),e(Y_,fLo),e(G,gLo),e(G,K_),e(K_,Pfe),e(Pfe,hLo),e(K_,uLo),e(K_,mG),e(mG,pLo),e(K_,_Lo),e(G,bLo),e(G,Z_),e(Z_,Bfe),e(Bfe,vLo),e(Z_,FLo),e(Z_,fG),e(fG,TLo),e(Z_,MLo),e(G,ELo),e(G,e2),e(e2,Nfe),e(Nfe,CLo),e(e2,wLo),e(e2,gG),e(gG,ALo),e(e2,LLo),e(G,yLo),e(G,o2),e(o2,Ife),e(Ife,xLo),e(o2,$Lo),e(o2,hG),e(hG,kLo),e(o2,SLo),e(G,RLo),e(G,r2),e(r2,qfe),e(qfe,PLo),e(r2,BLo),e(r2,uG),e(uG,NLo),e(r2,ILo),e(G,qLo),e(G,t2),e(t2,jfe),e(jfe,jLo),e(t2,DLo),e(t2,pG),e(pG,GLo),e(t2,OLo),e(G,VLo),e(G,a2),e(a2,Dfe),e(Dfe,XLo),e(a2,zLo),e(a2,_G),e(_G,QLo),e(a2,WLo),e(G,HLo),e(G,n2),e(n2,Gfe),e(Gfe,ULo),e(n2,JLo),e(n2,bG),e(bG,YLo),e(n2,KLo),e(G,ZLo),e(G,s2),e(s2,Ofe),e(Ofe,eyo),e(s2,oyo),e(s2,vG),e(vG,ryo),e(s2,tyo),e(G,ayo),e(G,l2),e(l2,Vfe),e(Vfe,nyo),e(l2,syo),e(l2,FG),e(FG,lyo),e(l2,iyo),e(G,dyo),e(G,i2),e(i2,Xfe),e(Xfe,cyo),e(i2,myo),e(i2,TG),e(TG,fyo),e(i2,gyo),e(G,hyo),e(G,d2),e(d2,zfe),e(zfe,uyo),e(d2,pyo),e(d2,MG),e(MG,_yo),e(d2,byo),e(G,vyo),e(G,c2),e(c2,Qfe),e(Qfe,Fyo),e(c2,Tyo),e(c2,EG),e(EG,Myo),e(c2,Eyo),e(G,Cyo),e(G,m2),e(m2,Wfe),e(Wfe,wyo),e(m2,Ayo),e(m2,CG),e(CG,Lyo),e(m2,yyo),e(G,xyo),e(G,f2),e(f2,Hfe),e(Hfe,$yo),e(f2,kyo),e(f2,wG),e(wG,Syo),e(f2,Ryo),e(G,Pyo),e(G,g2),e(g2,Ufe),e(Ufe,Byo),e(g2,Nyo),e(g2,AG),e(AG,Iyo),e(g2,qyo),e(G,jyo),e(G,h2),e(h2,Jfe),e(Jfe,Dyo),e(h2,Gyo),e(h2,LG),e(LG,Oyo),e(h2,Vyo),e(G,Xyo),e(G,u2),e(u2,Yfe),e(Yfe,zyo),e(u2,Qyo),e(u2,yG),e(yG,Wyo),e(u2,Hyo),e(G,Uyo),e(G,p2),e(p2,Kfe),e(Kfe,Jyo),e(p2,Yyo),e(p2,xG),e(xG,Kyo),e(p2,Zyo),e(G,e8o),e(G,_2),e(_2,Zfe),e(Zfe,o8o),e(_2,r8o),e(_2,$G),e($G,t8o),e(_2,a8o),e(G,n8o),e(G,b2),e(b2,ege),e(ege,s8o),e(b2,l8o),e(b2,kG),e(kG,i8o),e(b2,d8o),e(G,c8o),e(G,v2),e(v2,oge),e(oge,m8o),e(v2,f8o),e(v2,SG),e(SG,g8o),e(v2,h8o),e(G,u8o),e(G,F2),e(F2,rge),e(rge,p8o),e(F2,_8o),e(F2,RG),e(RG,b8o),e(F2,v8o),e(G,F8o),e(G,T2),e(T2,tge),e(tge,T8o),e(T2,M8o),e(T2,PG),e(PG,E8o),e(T2,C8o),e(G,w8o),e(G,M2),e(M2,age),e(age,A8o),e(M2,L8o),e(M2,BG),e(BG,y8o),e(M2,x8o),e(G,$8o),e(G,E2),e(E2,nge),e(nge,k8o),e(E2,S8o),e(E2,NG),e(NG,R8o),e(E2,P8o),e(G,B8o),e(G,C2),e(C2,sge),e(sge,N8o),e(C2,I8o),e(C2,IG),e(IG,q8o),e(C2,j8o),e(G,D8o),e(G,w2),e(w2,lge),e(lge,G8o),e(w2,O8o),e(w2,qG),e(qG,V8o),e(w2,X8o),e(G,z8o),e(G,A2),e(A2,ige),e(ige,Q8o),e(A2,W8o),e(A2,jG),e(jG,H8o),e(A2,U8o),e(G,J8o),e(G,L2),e(L2,dge),e(dge,Y8o),e(L2,K8o),e(L2,DG),e(DG,Z8o),e(L2,e9o),e(G,o9o),e(G,y2),e(y2,cge),e(cge,r9o),e(y2,t9o),e(y2,GG),e(GG,a9o),e(y2,n9o),e(G,s9o),e(G,x2),e(x2,mge),e(mge,l9o),e(x2,i9o),e(x2,OG),e(OG,d9o),e(x2,c9o),e(G,m9o),e(G,$2),e($2,fge),e(fge,f9o),e($2,g9o),e($2,VG),e(VG,h9o),e($2,u9o),e(G,p9o),e(G,k2),e(k2,gge),e(gge,_9o),e(k2,b9o),e(k2,XG),e(XG,v9o),e(k2,F9o),e(G,T9o),e(G,S2),e(S2,hge),e(hge,M9o),e(S2,E9o),e(S2,zG),e(zG,C9o),e(S2,w9o),e(G,A9o),e(G,R2),e(R2,uge),e(uge,L9o),e(R2,y9o),e(R2,QG),e(QG,x9o),e(R2,$9o),e(G,k9o),e(G,P2),e(P2,pge),e(pge,S9o),e(P2,R9o),e(P2,WG),e(WG,P9o),e(P2,B9o),e(G,N9o),e(G,B2),e(B2,_ge),e(_ge,I9o),e(B2,q9o),e(B2,HG),e(HG,j9o),e(B2,D9o),e(G,G9o),e(G,N2),e(N2,bge),e(bge,O9o),e(N2,V9o),e(N2,UG),e(UG,X9o),e(N2,z9o),e(G,Q9o),e(G,I2),e(I2,vge),e(vge,W9o),e(I2,H9o),e(I2,JG),e(JG,U9o),e(I2,J9o),e(G,Y9o),e(G,q2),e(q2,Fge),e(Fge,K9o),e(q2,Z9o),e(q2,YG),e(YG,exo),e(q2,oxo),e(G,rxo),e(G,j2),e(j2,Tge),e(Tge,txo),e(j2,axo),e(j2,KG),e(KG,nxo),e(j2,sxo),e(G,lxo),e(G,D2),e(D2,Mge),e(Mge,ixo),e(D2,dxo),e(D2,ZG),e(ZG,cxo),e(D2,mxo),e(G,fxo),e(G,G2),e(G2,Ege),e(Ege,gxo),e(G2,hxo),e(G2,eO),e(eO,uxo),e(G2,pxo),e(Ke,_xo),e(Ke,O2),e(O2,bxo),e(O2,Cge),e(Cge,vxo),e(O2,Fxo),e(O2,wge),e(wge,Txo),e(Ke,Mxo),M(V2,Ke,null),b(m,LXe,_),b(m,Hi,_),e(Hi,X2),e(X2,Age),M(Vy,Age,null),e(Hi,Exo),e(Hi,Lge),e(Lge,Cxo),b(m,yXe,_),b(m,So,_),M(Xy,So,null),e(So,wxo),e(So,Ui),e(Ui,Axo),e(Ui,oO),e(oO,Lxo),e(Ui,yxo),e(Ui,rO),e(rO,xxo),e(Ui,$xo),e(So,kxo),e(So,zy),e(zy,Sxo),e(zy,yge),e(yge,Rxo),e(zy,Pxo),e(So,Bxo),e(So,ct),M(Qy,ct,null),e(ct,Nxo),e(ct,xge),e(xge,Ixo),e(ct,qxo),e(ct,Ji),e(Ji,jxo),e(Ji,$ge),e($ge,Dxo),e(Ji,Gxo),e(Ji,tO),e(tO,Oxo),e(Ji,Vxo),e(ct,Xxo),M(z2,ct,null),e(So,zxo),e(So,Ze),M(Wy,Ze,null),e(Ze,Qxo),e(Ze,kge),e(kge,Wxo),e(Ze,Hxo),e(Ze,qa),e(qa,Uxo),e(qa,Sge),e(Sge,Jxo),e(qa,Yxo),e(qa,Rge),e(Rge,Kxo),e(qa,Zxo),e(qa,Pge),e(Pge,e$o),e(qa,o$o),e(Ze,r$o),e(Ze,z),e(z,Q2),e(Q2,Bge),e(Bge,t$o),e(Q2,a$o),e(Q2,aO),e(aO,n$o),e(Q2,s$o),e(z,l$o),e(z,W2),e(W2,Nge),e(Nge,i$o),e(W2,d$o),e(W2,nO),e(nO,c$o),e(W2,m$o),e(z,f$o),e(z,H2),e(H2,Ige),e(Ige,g$o),e(H2,h$o),e(H2,sO),e(sO,u$o),e(H2,p$o),e(z,_$o),e(z,U2),e(U2,qge),e(qge,b$o),e(U2,v$o),e(U2,lO),e(lO,F$o),e(U2,T$o),e(z,M$o),e(z,J2),e(J2,jge),e(jge,E$o),e(J2,C$o),e(J2,iO),e(iO,w$o),e(J2,A$o),e(z,L$o),e(z,Y2),e(Y2,Dge),e(Dge,y$o),e(Y2,x$o),e(Y2,dO),e(dO,$$o),e(Y2,k$o),e(z,S$o),e(z,K2),e(K2,Gge),e(Gge,R$o),e(K2,P$o),e(K2,cO),e(cO,B$o),e(K2,N$o),e(z,I$o),e(z,Z2),e(Z2,Oge),e(Oge,q$o),e(Z2,j$o),e(Z2,mO),e(mO,D$o),e(Z2,G$o),e(z,O$o),e(z,eb),e(eb,Vge),e(Vge,V$o),e(eb,X$o),e(eb,fO),e(fO,z$o),e(eb,Q$o),e(z,W$o),e(z,ob),e(ob,Xge),e(Xge,H$o),e(ob,U$o),e(ob,gO),e(gO,J$o),e(ob,Y$o),e(z,K$o),e(z,rb),e(rb,zge),e(zge,Z$o),e(rb,eko),e(rb,hO),e(hO,oko),e(rb,rko),e(z,tko),e(z,tb),e(tb,Qge),e(Qge,ako),e(tb,nko),e(tb,uO),e(uO,sko),e(tb,lko),e(z,iko),e(z,ab),e(ab,Wge),e(Wge,dko),e(ab,cko),e(ab,pO),e(pO,mko),e(ab,fko),e(z,gko),e(z,nb),e(nb,Hge),e(Hge,hko),e(nb,uko),e(nb,_O),e(_O,pko),e(nb,_ko),e(z,bko),e(z,sb),e(sb,Uge),e(Uge,vko),e(sb,Fko),e(sb,bO),e(bO,Tko),e(sb,Mko),e(z,Eko),e(z,lb),e(lb,Jge),e(Jge,Cko),e(lb,wko),e(lb,vO),e(vO,Ako),e(lb,Lko),e(z,yko),e(z,ib),e(ib,Yge),e(Yge,xko),e(ib,$ko),e(ib,FO),e(FO,kko),e(ib,Sko),e(z,Rko),e(z,db),e(db,Kge),e(Kge,Pko),e(db,Bko),e(db,TO),e(TO,Nko),e(db,Iko),e(z,qko),e(z,cb),e(cb,Zge),e(Zge,jko),e(cb,Dko),e(cb,MO),e(MO,Gko),e(cb,Oko),e(z,Vko),e(z,mb),e(mb,ehe),e(ehe,Xko),e(mb,zko),e(mb,EO),e(EO,Qko),e(mb,Wko),e(z,Hko),e(z,fb),e(fb,ohe),e(ohe,Uko),e(fb,Jko),e(fb,CO),e(CO,Yko),e(fb,Kko),e(z,Zko),e(z,gb),e(gb,rhe),e(rhe,eSo),e(gb,oSo),e(gb,wO),e(wO,rSo),e(gb,tSo),e(z,aSo),e(z,hb),e(hb,the),e(the,nSo),e(hb,sSo),e(hb,AO),e(AO,lSo),e(hb,iSo),e(z,dSo),e(z,ub),e(ub,ahe),e(ahe,cSo),e(ub,mSo),e(ub,LO),e(LO,fSo),e(ub,gSo),e(z,hSo),e(z,pb),e(pb,nhe),e(nhe,uSo),e(pb,pSo),e(pb,yO),e(yO,_So),e(pb,bSo),e(z,vSo),e(z,_b),e(_b,she),e(she,FSo),e(_b,TSo),e(_b,xO),e(xO,MSo),e(_b,ESo),e(z,CSo),e(z,bb),e(bb,lhe),e(lhe,wSo),e(bb,ASo),e(bb,$O),e($O,LSo),e(bb,ySo),e(z,xSo),e(z,vb),e(vb,ihe),e(ihe,$So),e(vb,kSo),e(vb,kO),e(kO,SSo),e(vb,RSo),e(z,PSo),e(z,Fb),e(Fb,dhe),e(dhe,BSo),e(Fb,NSo),e(Fb,SO),e(SO,ISo),e(Fb,qSo),e(z,jSo),e(z,Tb),e(Tb,che),e(che,DSo),e(Tb,GSo),e(Tb,RO),e(RO,OSo),e(Tb,VSo),e(z,XSo),e(z,Mb),e(Mb,mhe),e(mhe,zSo),e(Mb,QSo),e(Mb,PO),e(PO,WSo),e(Mb,HSo),e(z,USo),e(z,Eb),e(Eb,fhe),e(fhe,JSo),e(Eb,YSo),e(Eb,BO),e(BO,KSo),e(Eb,ZSo),e(z,eRo),e(z,Cb),e(Cb,ghe),e(ghe,oRo),e(Cb,rRo),e(Cb,NO),e(NO,tRo),e(Cb,aRo),e(z,nRo),e(z,wb),e(wb,hhe),e(hhe,sRo),e(wb,lRo),e(wb,IO),e(IO,iRo),e(wb,dRo),e(z,cRo),e(z,Ab),e(Ab,uhe),e(uhe,mRo),e(Ab,fRo),e(Ab,qO),e(qO,gRo),e(Ab,hRo),e(z,uRo),e(z,Lb),e(Lb,phe),e(phe,pRo),e(Lb,_Ro),e(Lb,jO),e(jO,bRo),e(Lb,vRo),e(z,FRo),e(z,yb),e(yb,_he),e(_he,TRo),e(yb,MRo),e(yb,DO),e(DO,ERo),e(yb,CRo),e(z,wRo),e(z,xb),e(xb,bhe),e(bhe,ARo),e(xb,LRo),e(xb,GO),e(GO,yRo),e(xb,xRo),e(z,$Ro),e(z,$b),e($b,vhe),e(vhe,kRo),e($b,SRo),e($b,OO),e(OO,RRo),e($b,PRo),e(z,BRo),e(z,kb),e(kb,Fhe),e(Fhe,NRo),e(kb,IRo),e(kb,VO),e(VO,qRo),e(kb,jRo),e(Ze,DRo),e(Ze,Sb),e(Sb,GRo),e(Sb,The),e(The,ORo),e(Sb,VRo),e(Sb,Mhe),e(Mhe,XRo),e(Ze,zRo),M(Rb,Ze,null),b(m,xXe,_),b(m,Yi,_),e(Yi,Pb),e(Pb,Ehe),M(Hy,Ehe,null),e(Yi,QRo),e(Yi,Che),e(Che,WRo),b(m,$Xe,_),b(m,Ro,_),M(Uy,Ro,null),e(Ro,HRo),e(Ro,Ki),e(Ki,URo),e(Ki,XO),e(XO,JRo),e(Ki,YRo),e(Ki,zO),e(zO,KRo),e(Ki,ZRo),e(Ro,ePo),e(Ro,Jy),e(Jy,oPo),e(Jy,whe),e(whe,rPo),e(Jy,tPo),e(Ro,aPo),e(Ro,mt),M(Yy,mt,null),e(mt,nPo),e(mt,Ahe),e(Ahe,sPo),e(mt,lPo),e(mt,Zi),e(Zi,iPo),e(Zi,Lhe),e(Lhe,dPo),e(Zi,cPo),e(Zi,QO),e(QO,mPo),e(Zi,fPo),e(mt,gPo),M(Bb,mt,null),e(Ro,hPo),e(Ro,eo),M(Ky,eo,null),e(eo,uPo),e(eo,yhe),e(yhe,pPo),e(eo,_Po),e(eo,ja),e(ja,bPo),e(ja,xhe),e(xhe,vPo),e(ja,FPo),e(ja,$he),e($he,TPo),e(ja,MPo),e(ja,khe),e(khe,EPo),e(ja,CPo),e(eo,wPo),e(eo,W),e(W,Nb),e(Nb,She),e(She,APo),e(Nb,LPo),e(Nb,WO),e(WO,yPo),e(Nb,xPo),e(W,$Po),e(W,Ib),e(Ib,Rhe),e(Rhe,kPo),e(Ib,SPo),e(Ib,HO),e(HO,RPo),e(Ib,PPo),e(W,BPo),e(W,qb),e(qb,Phe),e(Phe,NPo),e(qb,IPo),e(qb,UO),e(UO,qPo),e(qb,jPo),e(W,DPo),e(W,jb),e(jb,Bhe),e(Bhe,GPo),e(jb,OPo),e(jb,JO),e(JO,VPo),e(jb,XPo),e(W,zPo),e(W,Db),e(Db,Nhe),e(Nhe,QPo),e(Db,WPo),e(Db,YO),e(YO,HPo),e(Db,UPo),e(W,JPo),e(W,Gb),e(Gb,Ihe),e(Ihe,YPo),e(Gb,KPo),e(Gb,KO),e(KO,ZPo),e(Gb,eBo),e(W,oBo),e(W,Ob),e(Ob,qhe),e(qhe,rBo),e(Ob,tBo),e(Ob,ZO),e(ZO,aBo),e(Ob,nBo),e(W,sBo),e(W,Vb),e(Vb,jhe),e(jhe,lBo),e(Vb,iBo),e(Vb,eV),e(eV,dBo),e(Vb,cBo),e(W,mBo),e(W,Xb),e(Xb,Dhe),e(Dhe,fBo),e(Xb,gBo),e(Xb,oV),e(oV,hBo),e(Xb,uBo),e(W,pBo),e(W,zb),e(zb,Ghe),e(Ghe,_Bo),e(zb,bBo),e(zb,rV),e(rV,vBo),e(zb,FBo),e(W,TBo),e(W,Qb),e(Qb,Ohe),e(Ohe,MBo),e(Qb,EBo),e(Qb,tV),e(tV,CBo),e(Qb,wBo),e(W,ABo),e(W,Wb),e(Wb,Vhe),e(Vhe,LBo),e(Wb,yBo),e(Wb,aV),e(aV,xBo),e(Wb,$Bo),e(W,kBo),e(W,Hb),e(Hb,Xhe),e(Xhe,SBo),e(Hb,RBo),e(Hb,nV),e(nV,PBo),e(Hb,BBo),e(W,NBo),e(W,Ub),e(Ub,zhe),e(zhe,IBo),e(Ub,qBo),e(Ub,sV),e(sV,jBo),e(Ub,DBo),e(W,GBo),e(W,Jb),e(Jb,Qhe),e(Qhe,OBo),e(Jb,VBo),e(Jb,lV),e(lV,XBo),e(Jb,zBo),e(W,QBo),e(W,Yb),e(Yb,Whe),e(Whe,WBo),e(Yb,HBo),e(Yb,iV),e(iV,UBo),e(Yb,JBo),e(W,YBo),e(W,Kb),e(Kb,Hhe),e(Hhe,KBo),e(Kb,ZBo),e(Kb,dV),e(dV,eNo),e(Kb,oNo),e(W,rNo),e(W,Zb),e(Zb,Uhe),e(Uhe,tNo),e(Zb,aNo),e(Zb,cV),e(cV,nNo),e(Zb,sNo),e(W,lNo),e(W,ev),e(ev,Jhe),e(Jhe,iNo),e(ev,dNo),e(ev,mV),e(mV,cNo),e(ev,mNo),e(W,fNo),e(W,ov),e(ov,Yhe),e(Yhe,gNo),e(ov,hNo),e(ov,fV),e(fV,uNo),e(ov,pNo),e(W,_No),e(W,rv),e(rv,Khe),e(Khe,bNo),e(rv,vNo),e(rv,gV),e(gV,FNo),e(rv,TNo),e(W,MNo),e(W,tv),e(tv,Zhe),e(Zhe,ENo),e(tv,CNo),e(tv,hV),e(hV,wNo),e(tv,ANo),e(W,LNo),e(W,av),e(av,eue),e(eue,yNo),e(av,xNo),e(av,uV),e(uV,$No),e(av,kNo),e(W,SNo),e(W,nv),e(nv,oue),e(oue,RNo),e(nv,PNo),e(nv,pV),e(pV,BNo),e(nv,NNo),e(W,INo),e(W,sv),e(sv,rue),e(rue,qNo),e(sv,jNo),e(sv,_V),e(_V,DNo),e(sv,GNo),e(W,ONo),e(W,lv),e(lv,tue),e(tue,VNo),e(lv,XNo),e(lv,bV),e(bV,zNo),e(lv,QNo),e(W,WNo),e(W,iv),e(iv,aue),e(aue,HNo),e(iv,UNo),e(iv,vV),e(vV,JNo),e(iv,YNo),e(W,KNo),e(W,dv),e(dv,nue),e(nue,ZNo),e(dv,eIo),e(dv,FV),e(FV,oIo),e(dv,rIo),e(W,tIo),e(W,cv),e(cv,sue),e(sue,aIo),e(cv,nIo),e(cv,TV),e(TV,sIo),e(cv,lIo),e(W,iIo),e(W,mv),e(mv,lue),e(lue,dIo),e(mv,cIo),e(mv,MV),e(MV,mIo),e(mv,fIo),e(W,gIo),e(W,fv),e(fv,iue),e(iue,hIo),e(fv,uIo),e(fv,EV),e(EV,pIo),e(fv,_Io),e(W,bIo),e(W,gv),e(gv,due),e(due,vIo),e(gv,FIo),e(gv,CV),e(CV,TIo),e(gv,MIo),e(W,EIo),e(W,hv),e(hv,cue),e(cue,CIo),e(hv,wIo),e(hv,wV),e(wV,AIo),e(hv,LIo),e(W,yIo),e(W,uv),e(uv,mue),e(mue,xIo),e(uv,$Io),e(uv,fue),e(fue,kIo),e(uv,SIo),e(W,RIo),e(W,pv),e(pv,gue),e(gue,PIo),e(pv,BIo),e(pv,AV),e(AV,NIo),e(pv,IIo),e(W,qIo),e(W,_v),e(_v,hue),e(hue,jIo),e(_v,DIo),e(_v,LV),e(LV,GIo),e(_v,OIo),e(W,VIo),e(W,bv),e(bv,uue),e(uue,XIo),e(bv,zIo),e(bv,yV),e(yV,QIo),e(bv,WIo),e(W,HIo),e(W,vv),e(vv,pue),e(pue,UIo),e(vv,JIo),e(vv,xV),e(xV,YIo),e(vv,KIo),e(eo,ZIo),e(eo,Fv),e(Fv,eqo),e(Fv,_ue),e(_ue,oqo),e(Fv,rqo),e(Fv,bue),e(bue,tqo),e(eo,aqo),M(Tv,eo,null),b(m,kXe,_),b(m,ed,_),e(ed,Mv),e(Mv,vue),M(Zy,vue,null),e(ed,nqo),e(ed,Fue),e(Fue,sqo),b(m,SXe,_),b(m,Po,_),M(e8,Po,null),e(Po,lqo),e(Po,od),e(od,iqo),e(od,$V),e($V,dqo),e(od,cqo),e(od,kV),e(kV,mqo),e(od,fqo),e(Po,gqo),e(Po,o8),e(o8,hqo),e(o8,Tue),e(Tue,uqo),e(o8,pqo),e(Po,_qo),e(Po,ft),M(r8,ft,null),e(ft,bqo),e(ft,Mue),e(Mue,vqo),e(ft,Fqo),e(ft,rd),e(rd,Tqo),e(rd,Eue),e(Eue,Mqo),e(rd,Eqo),e(rd,SV),e(SV,Cqo),e(rd,wqo),e(ft,Aqo),M(Ev,ft,null),e(Po,Lqo),e(Po,oo),M(t8,oo,null),e(oo,yqo),e(oo,Cue),e(Cue,xqo),e(oo,$qo),e(oo,Da),e(Da,kqo),e(Da,wue),e(wue,Sqo),e(Da,Rqo),e(Da,Aue),e(Aue,Pqo),e(Da,Bqo),e(Da,Lue),e(Lue,Nqo),e(Da,Iqo),e(oo,qqo),e(oo,me),e(me,Cv),e(Cv,yue),e(yue,jqo),e(Cv,Dqo),e(Cv,RV),e(RV,Gqo),e(Cv,Oqo),e(me,Vqo),e(me,wv),e(wv,xue),e(xue,Xqo),e(wv,zqo),e(wv,PV),e(PV,Qqo),e(wv,Wqo),e(me,Hqo),e(me,Av),e(Av,$ue),e($ue,Uqo),e(Av,Jqo),e(Av,BV),e(BV,Yqo),e(Av,Kqo),e(me,Zqo),e(me,Lv),e(Lv,kue),e(kue,ejo),e(Lv,ojo),e(Lv,NV),e(NV,rjo),e(Lv,tjo),e(me,ajo),e(me,yv),e(yv,Sue),e(Sue,njo),e(yv,sjo),e(yv,IV),e(IV,ljo),e(yv,ijo),e(me,djo),e(me,xv),e(xv,Rue),e(Rue,cjo),e(xv,mjo),e(xv,qV),e(qV,fjo),e(xv,gjo),e(me,hjo),e(me,$v),e($v,Pue),e(Pue,ujo),e($v,pjo),e($v,jV),e(jV,_jo),e($v,bjo),e(me,vjo),e(me,kv),e(kv,Bue),e(Bue,Fjo),e(kv,Tjo),e(kv,DV),e(DV,Mjo),e(kv,Ejo),e(me,Cjo),e(me,Sv),e(Sv,Nue),e(Nue,wjo),e(Sv,Ajo),e(Sv,GV),e(GV,Ljo),e(Sv,yjo),e(me,xjo),e(me,Rv),e(Rv,Iue),e(Iue,$jo),e(Rv,kjo),e(Rv,OV),e(OV,Sjo),e(Rv,Rjo),e(me,Pjo),e(me,Pv),e(Pv,que),e(que,Bjo),e(Pv,Njo),e(Pv,VV),e(VV,Ijo),e(Pv,qjo),e(me,jjo),e(me,Bv),e(Bv,jue),e(jue,Djo),e(Bv,Gjo),e(Bv,XV),e(XV,Ojo),e(Bv,Vjo),e(me,Xjo),e(me,Nv),e(Nv,Due),e(Due,zjo),e(Nv,Qjo),e(Nv,zV),e(zV,Wjo),e(Nv,Hjo),e(me,Ujo),e(me,Iv),e(Iv,Gue),e(Gue,Jjo),e(Iv,Yjo),e(Iv,QV),e(QV,Kjo),e(Iv,Zjo),e(me,eDo),e(me,qv),e(qv,Oue),e(Oue,oDo),e(qv,rDo),e(qv,WV),e(WV,tDo),e(qv,aDo),e(me,nDo),e(me,jv),e(jv,Vue),e(Vue,sDo),e(jv,lDo),e(jv,HV),e(HV,iDo),e(jv,dDo),e(me,cDo),e(me,Dv),e(Dv,Xue),e(Xue,mDo),e(Dv,fDo),e(Dv,UV),e(UV,gDo),e(Dv,hDo),e(me,uDo),e(me,Gv),e(Gv,zue),e(zue,pDo),e(Gv,_Do),e(Gv,JV),e(JV,bDo),e(Gv,vDo),e(me,FDo),e(me,Ov),e(Ov,Que),e(Que,TDo),e(Ov,MDo),e(Ov,YV),e(YV,EDo),e(Ov,CDo),e(oo,wDo),e(oo,Vv),e(Vv,ADo),e(Vv,Wue),e(Wue,LDo),e(Vv,yDo),e(Vv,Hue),e(Hue,xDo),e(oo,$Do),M(Xv,oo,null),b(m,RXe,_),b(m,td,_),e(td,zv),e(zv,Uue),M(a8,Uue,null),e(td,kDo),e(td,Jue),e(Jue,SDo),b(m,PXe,_),b(m,Bo,_),M(n8,Bo,null),e(Bo,RDo),e(Bo,ad),e(ad,PDo),e(ad,KV),e(KV,BDo),e(ad,NDo),e(ad,ZV),e(ZV,IDo),e(ad,qDo),e(Bo,jDo),e(Bo,s8),e(s8,DDo),e(s8,Yue),e(Yue,GDo),e(s8,ODo),e(Bo,VDo),e(Bo,gt),M(l8,gt,null),e(gt,XDo),e(gt,Kue),e(Kue,zDo),e(gt,QDo),e(gt,nd),e(nd,WDo),e(nd,Zue),e(Zue,HDo),e(nd,UDo),e(nd,eX),e(eX,JDo),e(nd,YDo),e(gt,KDo),M(Qv,gt,null),e(Bo,ZDo),e(Bo,ro),M(i8,ro,null),e(ro,eGo),e(ro,epe),e(epe,oGo),e(ro,rGo),e(ro,Ga),e(Ga,tGo),e(Ga,ope),e(ope,aGo),e(Ga,nGo),e(Ga,rpe),e(rpe,sGo),e(Ga,lGo),e(Ga,tpe),e(tpe,iGo),e(Ga,dGo),e(ro,cGo),e(ro,I),e(I,Wv),e(Wv,ape),e(ape,mGo),e(Wv,fGo),e(Wv,oX),e(oX,gGo),e(Wv,hGo),e(I,uGo),e(I,Hv),e(Hv,npe),e(npe,pGo),e(Hv,_Go),e(Hv,rX),e(rX,bGo),e(Hv,vGo),e(I,FGo),e(I,Uv),e(Uv,spe),e(spe,TGo),e(Uv,MGo),e(Uv,tX),e(tX,EGo),e(Uv,CGo),e(I,wGo),e(I,Jv),e(Jv,lpe),e(lpe,AGo),e(Jv,LGo),e(Jv,aX),e(aX,yGo),e(Jv,xGo),e(I,$Go),e(I,Yv),e(Yv,ipe),e(ipe,kGo),e(Yv,SGo),e(Yv,nX),e(nX,RGo),e(Yv,PGo),e(I,BGo),e(I,Kv),e(Kv,dpe),e(dpe,NGo),e(Kv,IGo),e(Kv,sX),e(sX,qGo),e(Kv,jGo),e(I,DGo),e(I,Zv),e(Zv,cpe),e(cpe,GGo),e(Zv,OGo),e(Zv,lX),e(lX,VGo),e(Zv,XGo),e(I,zGo),e(I,e1),e(e1,mpe),e(mpe,QGo),e(e1,WGo),e(e1,iX),e(iX,HGo),e(e1,UGo),e(I,JGo),e(I,o1),e(o1,fpe),e(fpe,YGo),e(o1,KGo),e(o1,dX),e(dX,ZGo),e(o1,eOo),e(I,oOo),e(I,r1),e(r1,gpe),e(gpe,rOo),e(r1,tOo),e(r1,cX),e(cX,aOo),e(r1,nOo),e(I,sOo),e(I,t1),e(t1,hpe),e(hpe,lOo),e(t1,iOo),e(t1,mX),e(mX,dOo),e(t1,cOo),e(I,mOo),e(I,a1),e(a1,upe),e(upe,fOo),e(a1,gOo),e(a1,fX),e(fX,hOo),e(a1,uOo),e(I,pOo),e(I,n1),e(n1,ppe),e(ppe,_Oo),e(n1,bOo),e(n1,gX),e(gX,vOo),e(n1,FOo),e(I,TOo),e(I,s1),e(s1,_pe),e(_pe,MOo),e(s1,EOo),e(s1,hX),e(hX,COo),e(s1,wOo),e(I,AOo),e(I,l1),e(l1,bpe),e(bpe,LOo),e(l1,yOo),e(l1,uX),e(uX,xOo),e(l1,$Oo),e(I,kOo),e(I,i1),e(i1,vpe),e(vpe,SOo),e(i1,ROo),e(i1,pX),e(pX,POo),e(i1,BOo),e(I,NOo),e(I,d1),e(d1,Fpe),e(Fpe,IOo),e(d1,qOo),e(d1,_X),e(_X,jOo),e(d1,DOo),e(I,GOo),e(I,c1),e(c1,Tpe),e(Tpe,OOo),e(c1,VOo),e(c1,bX),e(bX,XOo),e(c1,zOo),e(I,QOo),e(I,m1),e(m1,Mpe),e(Mpe,WOo),e(m1,HOo),e(m1,vX),e(vX,UOo),e(m1,JOo),e(I,YOo),e(I,f1),e(f1,Epe),e(Epe,KOo),e(f1,ZOo),e(f1,FX),e(FX,eVo),e(f1,oVo),e(I,rVo),e(I,g1),e(g1,Cpe),e(Cpe,tVo),e(g1,aVo),e(g1,TX),e(TX,nVo),e(g1,sVo),e(I,lVo),e(I,h1),e(h1,wpe),e(wpe,iVo),e(h1,dVo),e(h1,MX),e(MX,cVo),e(h1,mVo),e(I,fVo),e(I,u1),e(u1,Ape),e(Ape,gVo),e(u1,hVo),e(u1,EX),e(EX,uVo),e(u1,pVo),e(I,_Vo),e(I,p1),e(p1,Lpe),e(Lpe,bVo),e(p1,vVo),e(p1,CX),e(CX,FVo),e(p1,TVo),e(I,MVo),e(I,_1),e(_1,ype),e(ype,EVo),e(_1,CVo),e(_1,wX),e(wX,wVo),e(_1,AVo),e(I,LVo),e(I,b1),e(b1,xpe),e(xpe,yVo),e(b1,xVo),e(b1,AX),e(AX,$Vo),e(b1,kVo),e(I,SVo),e(I,v1),e(v1,$pe),e($pe,RVo),e(v1,PVo),e(v1,LX),e(LX,BVo),e(v1,NVo),e(I,IVo),e(I,F1),e(F1,kpe),e(kpe,qVo),e(F1,jVo),e(F1,yX),e(yX,DVo),e(F1,GVo),e(I,OVo),e(I,T1),e(T1,Spe),e(Spe,VVo),e(T1,XVo),e(T1,xX),e(xX,zVo),e(T1,QVo),e(I,WVo),e(I,M1),e(M1,Rpe),e(Rpe,HVo),e(M1,UVo),e(M1,$X),e($X,JVo),e(M1,YVo),e(I,KVo),e(I,E1),e(E1,Ppe),e(Ppe,ZVo),e(E1,eXo),e(E1,kX),e(kX,oXo),e(E1,rXo),e(I,tXo),e(I,C1),e(C1,Bpe),e(Bpe,aXo),e(C1,nXo),e(C1,SX),e(SX,sXo),e(C1,lXo),e(I,iXo),e(I,w1),e(w1,Npe),e(Npe,dXo),e(w1,cXo),e(w1,RX),e(RX,mXo),e(w1,fXo),e(I,gXo),e(I,A1),e(A1,Ipe),e(Ipe,hXo),e(A1,uXo),e(A1,PX),e(PX,pXo),e(A1,_Xo),e(I,bXo),e(I,L1),e(L1,qpe),e(qpe,vXo),e(L1,FXo),e(L1,BX),e(BX,TXo),e(L1,MXo),e(I,EXo),e(I,y1),e(y1,jpe),e(jpe,CXo),e(y1,wXo),e(y1,NX),e(NX,AXo),e(y1,LXo),e(I,yXo),e(I,x1),e(x1,Dpe),e(Dpe,xXo),e(x1,$Xo),e(x1,IX),e(IX,kXo),e(x1,SXo),e(I,RXo),e(I,$1),e($1,Gpe),e(Gpe,PXo),e($1,BXo),e($1,qX),e(qX,NXo),e($1,IXo),e(I,qXo),e(I,k1),e(k1,Ope),e(Ope,jXo),e(k1,DXo),e(k1,jX),e(jX,GXo),e(k1,OXo),e(I,VXo),e(I,S1),e(S1,Vpe),e(Vpe,XXo),e(S1,zXo),e(S1,DX),e(DX,QXo),e(S1,WXo),e(I,HXo),e(I,R1),e(R1,Xpe),e(Xpe,UXo),e(R1,JXo),e(R1,GX),e(GX,YXo),e(R1,KXo),e(I,ZXo),e(I,P1),e(P1,zpe),e(zpe,ezo),e(P1,ozo),e(P1,OX),e(OX,rzo),e(P1,tzo),e(I,azo),e(I,B1),e(B1,Qpe),e(Qpe,nzo),e(B1,szo),e(B1,VX),e(VX,lzo),e(B1,izo),e(I,dzo),e(I,N1),e(N1,Wpe),e(Wpe,czo),e(N1,mzo),e(N1,XX),e(XX,fzo),e(N1,gzo),e(I,hzo),e(I,I1),e(I1,Hpe),e(Hpe,uzo),e(I1,pzo),e(I1,zX),e(zX,_zo),e(I1,bzo),e(I,vzo),e(I,q1),e(q1,Upe),e(Upe,Fzo),e(q1,Tzo),e(q1,QX),e(QX,Mzo),e(q1,Ezo),e(I,Czo),e(I,j1),e(j1,Jpe),e(Jpe,wzo),e(j1,Azo),e(j1,WX),e(WX,Lzo),e(j1,yzo),e(I,xzo),e(I,D1),e(D1,Ype),e(Ype,$zo),e(D1,kzo),e(D1,HX),e(HX,Szo),e(D1,Rzo),e(I,Pzo),e(I,G1),e(G1,Kpe),e(Kpe,Bzo),e(G1,Nzo),e(G1,UX),e(UX,Izo),e(G1,qzo),e(I,jzo),e(I,O1),e(O1,Zpe),e(Zpe,Dzo),e(O1,Gzo),e(O1,JX),e(JX,Ozo),e(O1,Vzo),e(ro,Xzo),e(ro,V1),e(V1,zzo),e(V1,e_e),e(e_e,Qzo),e(V1,Wzo),e(V1,o_e),e(o_e,Hzo),e(ro,Uzo),M(X1,ro,null),b(m,BXe,_),b(m,sd,_),e(sd,z1),e(z1,r_e),M(d8,r_e,null),e(sd,Jzo),e(sd,t_e),e(t_e,Yzo),b(m,NXe,_),b(m,No,_),M(c8,No,null),e(No,Kzo),e(No,ld),e(ld,Zzo),e(ld,YX),e(YX,eQo),e(ld,oQo),e(ld,KX),e(KX,rQo),e(ld,tQo),e(No,aQo),e(No,m8),e(m8,nQo),e(m8,a_e),e(a_e,sQo),e(m8,lQo),e(No,iQo),e(No,ht),M(f8,ht,null),e(ht,dQo),e(ht,n_e),e(n_e,cQo),e(ht,mQo),e(ht,id),e(id,fQo),e(id,s_e),e(s_e,gQo),e(id,hQo),e(id,ZX),e(ZX,uQo),e(id,pQo),e(ht,_Qo),M(Q1,ht,null),e(No,bQo),e(No,to),M(g8,to,null),e(to,vQo),e(to,l_e),e(l_e,FQo),e(to,TQo),e(to,Oa),e(Oa,MQo),e(Oa,i_e),e(i_e,EQo),e(Oa,CQo),e(Oa,d_e),e(d_e,wQo),e(Oa,AQo),e(Oa,c_e),e(c_e,LQo),e(Oa,yQo),e(to,xQo),e(to,Z),e(Z,W1),e(W1,m_e),e(m_e,$Qo),e(W1,kQo),e(W1,ez),e(ez,SQo),e(W1,RQo),e(Z,PQo),e(Z,H1),e(H1,f_e),e(f_e,BQo),e(H1,NQo),e(H1,oz),e(oz,IQo),e(H1,qQo),e(Z,jQo),e(Z,U1),e(U1,g_e),e(g_e,DQo),e(U1,GQo),e(U1,rz),e(rz,OQo),e(U1,VQo),e(Z,XQo),e(Z,J1),e(J1,h_e),e(h_e,zQo),e(J1,QQo),e(J1,tz),e(tz,WQo),e(J1,HQo),e(Z,UQo),e(Z,Y1),e(Y1,u_e),e(u_e,JQo),e(Y1,YQo),e(Y1,az),e(az,KQo),e(Y1,ZQo),e(Z,eWo),e(Z,K1),e(K1,p_e),e(p_e,oWo),e(K1,rWo),e(K1,nz),e(nz,tWo),e(K1,aWo),e(Z,nWo),e(Z,Z1),e(Z1,__e),e(__e,sWo),e(Z1,lWo),e(Z1,sz),e(sz,iWo),e(Z1,dWo),e(Z,cWo),e(Z,eF),e(eF,b_e),e(b_e,mWo),e(eF,fWo),e(eF,lz),e(lz,gWo),e(eF,hWo),e(Z,uWo),e(Z,oF),e(oF,v_e),e(v_e,pWo),e(oF,_Wo),e(oF,iz),e(iz,bWo),e(oF,vWo),e(Z,FWo),e(Z,rF),e(rF,F_e),e(F_e,TWo),e(rF,MWo),e(rF,dz),e(dz,EWo),e(rF,CWo),e(Z,wWo),e(Z,tF),e(tF,T_e),e(T_e,AWo),e(tF,LWo),e(tF,cz),e(cz,yWo),e(tF,xWo),e(Z,$Wo),e(Z,aF),e(aF,M_e),e(M_e,kWo),e(aF,SWo),e(aF,mz),e(mz,RWo),e(aF,PWo),e(Z,BWo),e(Z,nF),e(nF,E_e),e(E_e,NWo),e(nF,IWo),e(nF,fz),e(fz,qWo),e(nF,jWo),e(Z,DWo),e(Z,sF),e(sF,C_e),e(C_e,GWo),e(sF,OWo),e(sF,gz),e(gz,VWo),e(sF,XWo),e(Z,zWo),e(Z,lF),e(lF,w_e),e(w_e,QWo),e(lF,WWo),e(lF,hz),e(hz,HWo),e(lF,UWo),e(Z,JWo),e(Z,iF),e(iF,A_e),e(A_e,YWo),e(iF,KWo),e(iF,uz),e(uz,ZWo),e(iF,eHo),e(Z,oHo),e(Z,dF),e(dF,L_e),e(L_e,rHo),e(dF,tHo),e(dF,pz),e(pz,aHo),e(dF,nHo),e(Z,sHo),e(Z,cF),e(cF,y_e),e(y_e,lHo),e(cF,iHo),e(cF,_z),e(_z,dHo),e(cF,cHo),e(Z,mHo),e(Z,mF),e(mF,x_e),e(x_e,fHo),e(mF,gHo),e(mF,bz),e(bz,hHo),e(mF,uHo),e(Z,pHo),e(Z,fF),e(fF,$_e),e($_e,_Ho),e(fF,bHo),e(fF,vz),e(vz,vHo),e(fF,FHo),e(Z,THo),e(Z,gF),e(gF,k_e),e(k_e,MHo),e(gF,EHo),e(gF,Fz),e(Fz,CHo),e(gF,wHo),e(Z,AHo),e(Z,hF),e(hF,S_e),e(S_e,LHo),e(hF,yHo),e(hF,Tz),e(Tz,xHo),e(hF,$Ho),e(Z,kHo),e(Z,uF),e(uF,R_e),e(R_e,SHo),e(uF,RHo),e(uF,Mz),e(Mz,PHo),e(uF,BHo),e(Z,NHo),e(Z,pF),e(pF,P_e),e(P_e,IHo),e(pF,qHo),e(pF,Ez),e(Ez,jHo),e(pF,DHo),e(Z,GHo),e(Z,_F),e(_F,B_e),e(B_e,OHo),e(_F,VHo),e(_F,Cz),e(Cz,XHo),e(_F,zHo),e(Z,QHo),e(Z,bF),e(bF,N_e),e(N_e,WHo),e(bF,HHo),e(bF,wz),e(wz,UHo),e(bF,JHo),e(Z,YHo),e(Z,vF),e(vF,I_e),e(I_e,KHo),e(vF,ZHo),e(vF,Az),e(Az,eUo),e(vF,oUo),e(Z,rUo),e(Z,FF),e(FF,q_e),e(q_e,tUo),e(FF,aUo),e(FF,Lz),e(Lz,nUo),e(FF,sUo),e(Z,lUo),e(Z,TF),e(TF,j_e),e(j_e,iUo),e(TF,dUo),e(TF,yz),e(yz,cUo),e(TF,mUo),e(Z,fUo),e(Z,MF),e(MF,D_e),e(D_e,gUo),e(MF,hUo),e(MF,xz),e(xz,uUo),e(MF,pUo),e(to,_Uo),e(to,EF),e(EF,bUo),e(EF,G_e),e(G_e,vUo),e(EF,FUo),e(EF,O_e),e(O_e,TUo),e(to,MUo),M(CF,to,null),b(m,IXe,_),b(m,dd,_),e(dd,wF),e(wF,V_e),M(h8,V_e,null),e(dd,EUo),e(dd,X_e),e(X_e,CUo),b(m,qXe,_),b(m,Io,_),M(u8,Io,null),e(Io,wUo),e(Io,cd),e(cd,AUo),e(cd,$z),e($z,LUo),e(cd,yUo),e(cd,kz),e(kz,xUo),e(cd,$Uo),e(Io,kUo),e(Io,p8),e(p8,SUo),e(p8,z_e),e(z_e,RUo),e(p8,PUo),e(Io,BUo),e(Io,ut),M(_8,ut,null),e(ut,NUo),e(ut,Q_e),e(Q_e,IUo),e(ut,qUo),e(ut,md),e(md,jUo),e(md,W_e),e(W_e,DUo),e(md,GUo),e(md,Sz),e(Sz,OUo),e(md,VUo),e(ut,XUo),M(AF,ut,null),e(Io,zUo),e(Io,ao),M(b8,ao,null),e(ao,QUo),e(ao,H_e),e(H_e,WUo),e(ao,HUo),e(ao,Va),e(Va,UUo),e(Va,U_e),e(U_e,JUo),e(Va,YUo),e(Va,J_e),e(J_e,KUo),e(Va,ZUo),e(Va,Y_e),e(Y_e,eJo),e(Va,oJo),e(ao,rJo),e(ao,qo),e(qo,LF),e(LF,K_e),e(K_e,tJo),e(LF,aJo),e(LF,Rz),e(Rz,nJo),e(LF,sJo),e(qo,lJo),e(qo,yF),e(yF,Z_e),e(Z_e,iJo),e(yF,dJo),e(yF,Pz),e(Pz,cJo),e(yF,mJo),e(qo,fJo),e(qo,xF),e(xF,e2e),e(e2e,gJo),e(xF,hJo),e(xF,Bz),e(Bz,uJo),e(xF,pJo),e(qo,_Jo),e(qo,$F),e($F,o2e),e(o2e,bJo),e($F,vJo),e($F,Nz),e(Nz,FJo),e($F,TJo),e(qo,MJo),e(qo,kF),e(kF,r2e),e(r2e,EJo),e(kF,CJo),e(kF,Iz),e(Iz,wJo),e(kF,AJo),e(qo,LJo),e(qo,SF),e(SF,t2e),e(t2e,yJo),e(SF,xJo),e(SF,qz),e(qz,$Jo),e(SF,kJo),e(ao,SJo),e(ao,RF),e(RF,RJo),e(RF,a2e),e(a2e,PJo),e(RF,BJo),e(RF,n2e),e(n2e,NJo),e(ao,IJo),M(PF,ao,null),b(m,jXe,_),b(m,fd,_),e(fd,BF),e(BF,s2e),M(v8,s2e,null),e(fd,qJo),e(fd,l2e),e(l2e,jJo),b(m,DXe,_),b(m,jo,_),M(F8,jo,null),e(jo,DJo),e(jo,gd),e(gd,GJo),e(gd,jz),e(jz,OJo),e(gd,VJo),e(gd,Dz),e(Dz,XJo),e(gd,zJo),e(jo,QJo),e(jo,T8),e(T8,WJo),e(T8,i2e),e(i2e,HJo),e(T8,UJo),e(jo,JJo),e(jo,pt),M(M8,pt,null),e(pt,YJo),e(pt,d2e),e(d2e,KJo),e(pt,ZJo),e(pt,hd),e(hd,eYo),e(hd,c2e),e(c2e,oYo),e(hd,rYo),e(hd,Gz),e(Gz,tYo),e(hd,aYo),e(pt,nYo),M(NF,pt,null),e(jo,sYo),e(jo,no),M(E8,no,null),e(no,lYo),e(no,m2e),e(m2e,iYo),e(no,dYo),e(no,Xa),e(Xa,cYo),e(Xa,f2e),e(f2e,mYo),e(Xa,fYo),e(Xa,g2e),e(g2e,gYo),e(Xa,hYo),e(Xa,h2e),e(h2e,uYo),e(Xa,pYo),e(no,_Yo),e(no,U),e(U,IF),e(IF,u2e),e(u2e,bYo),e(IF,vYo),e(IF,Oz),e(Oz,FYo),e(IF,TYo),e(U,MYo),e(U,qF),e(qF,p2e),e(p2e,EYo),e(qF,CYo),e(qF,Vz),e(Vz,wYo),e(qF,AYo),e(U,LYo),e(U,jF),e(jF,_2e),e(_2e,yYo),e(jF,xYo),e(jF,Xz),e(Xz,$Yo),e(jF,kYo),e(U,SYo),e(U,DF),e(DF,b2e),e(b2e,RYo),e(DF,PYo),e(DF,zz),e(zz,BYo),e(DF,NYo),e(U,IYo),e(U,GF),e(GF,v2e),e(v2e,qYo),e(GF,jYo),e(GF,Qz),e(Qz,DYo),e(GF,GYo),e(U,OYo),e(U,OF),e(OF,F2e),e(F2e,VYo),e(OF,XYo),e(OF,Wz),e(Wz,zYo),e(OF,QYo),e(U,WYo),e(U,VF),e(VF,T2e),e(T2e,HYo),e(VF,UYo),e(VF,Hz),e(Hz,JYo),e(VF,YYo),e(U,KYo),e(U,XF),e(XF,M2e),e(M2e,ZYo),e(XF,eKo),e(XF,Uz),e(Uz,oKo),e(XF,rKo),e(U,tKo),e(U,zF),e(zF,E2e),e(E2e,aKo),e(zF,nKo),e(zF,Jz),e(Jz,sKo),e(zF,lKo),e(U,iKo),e(U,QF),e(QF,C2e),e(C2e,dKo),e(QF,cKo),e(QF,Yz),e(Yz,mKo),e(QF,fKo),e(U,gKo),e(U,WF),e(WF,w2e),e(w2e,hKo),e(WF,uKo),e(WF,Kz),e(Kz,pKo),e(WF,_Ko),e(U,bKo),e(U,HF),e(HF,A2e),e(A2e,vKo),e(HF,FKo),e(HF,Zz),e(Zz,TKo),e(HF,MKo),e(U,EKo),e(U,UF),e(UF,L2e),e(L2e,CKo),e(UF,wKo),e(UF,eQ),e(eQ,AKo),e(UF,LKo),e(U,yKo),e(U,JF),e(JF,y2e),e(y2e,xKo),e(JF,$Ko),e(JF,oQ),e(oQ,kKo),e(JF,SKo),e(U,RKo),e(U,YF),e(YF,x2e),e(x2e,PKo),e(YF,BKo),e(YF,rQ),e(rQ,NKo),e(YF,IKo),e(U,qKo),e(U,KF),e(KF,$2e),e($2e,jKo),e(KF,DKo),e(KF,tQ),e(tQ,GKo),e(KF,OKo),e(U,VKo),e(U,ZF),e(ZF,k2e),e(k2e,XKo),e(ZF,zKo),e(ZF,aQ),e(aQ,QKo),e(ZF,WKo),e(U,HKo),e(U,eT),e(eT,S2e),e(S2e,UKo),e(eT,JKo),e(eT,nQ),e(nQ,YKo),e(eT,KKo),e(U,ZKo),e(U,oT),e(oT,R2e),e(R2e,eZo),e(oT,oZo),e(oT,sQ),e(sQ,rZo),e(oT,tZo),e(U,aZo),e(U,rT),e(rT,P2e),e(P2e,nZo),e(rT,sZo),e(rT,lQ),e(lQ,lZo),e(rT,iZo),e(U,dZo),e(U,tT),e(tT,B2e),e(B2e,cZo),e(tT,mZo),e(tT,iQ),e(iQ,fZo),e(tT,gZo),e(U,hZo),e(U,aT),e(aT,N2e),e(N2e,uZo),e(aT,pZo),e(aT,dQ),e(dQ,_Zo),e(aT,bZo),e(U,vZo),e(U,nT),e(nT,I2e),e(I2e,FZo),e(nT,TZo),e(nT,cQ),e(cQ,MZo),e(nT,EZo),e(U,CZo),e(U,sT),e(sT,q2e),e(q2e,wZo),e(sT,AZo),e(sT,mQ),e(mQ,LZo),e(sT,yZo),e(U,xZo),e(U,lT),e(lT,j2e),e(j2e,$Zo),e(lT,kZo),e(lT,fQ),e(fQ,SZo),e(lT,RZo),e(U,PZo),e(U,iT),e(iT,D2e),e(D2e,BZo),e(iT,NZo),e(iT,gQ),e(gQ,IZo),e(iT,qZo),e(U,jZo),e(U,dT),e(dT,G2e),e(G2e,DZo),e(dT,GZo),e(dT,hQ),e(hQ,OZo),e(dT,VZo),e(U,XZo),e(U,cT),e(cT,O2e),e(O2e,zZo),e(cT,QZo),e(cT,uQ),e(uQ,WZo),e(cT,HZo),e(U,UZo),e(U,mT),e(mT,V2e),e(V2e,JZo),e(mT,YZo),e(mT,pQ),e(pQ,KZo),e(mT,ZZo),e(U,eer),e(U,fT),e(fT,X2e),e(X2e,oer),e(fT,rer),e(fT,_Q),e(_Q,ter),e(fT,aer),e(U,ner),e(U,gT),e(gT,z2e),e(z2e,ser),e(gT,ler),e(gT,bQ),e(bQ,ier),e(gT,der),e(U,cer),e(U,hT),e(hT,Q2e),e(Q2e,mer),e(hT,fer),e(hT,vQ),e(vQ,ger),e(hT,her),e(U,uer),e(U,uT),e(uT,W2e),e(W2e,per),e(uT,_er),e(uT,FQ),e(FQ,ber),e(uT,ver),e(U,Fer),e(U,pT),e(pT,H2e),e(H2e,Ter),e(pT,Mer),e(pT,TQ),e(TQ,Eer),e(pT,Cer),e(U,wer),e(U,_T),e(_T,U2e),e(U2e,Aer),e(_T,Ler),e(_T,MQ),e(MQ,yer),e(_T,xer),e(U,$er),e(U,bT),e(bT,J2e),e(J2e,ker),e(bT,Ser),e(bT,EQ),e(EQ,Rer),e(bT,Per),e(no,Ber),e(no,vT),e(vT,Ner),e(vT,Y2e),e(Y2e,Ier),e(vT,qer),e(vT,K2e),e(K2e,jer),e(no,Der),M(FT,no,null),b(m,GXe,_),b(m,ud,_),e(ud,TT),e(TT,Z2e),M(C8,Z2e,null),e(ud,Ger),e(ud,ebe),e(ebe,Oer),b(m,OXe,_),b(m,Do,_),M(w8,Do,null),e(Do,Ver),e(Do,pd),e(pd,Xer),e(pd,CQ),e(CQ,zer),e(pd,Qer),e(pd,wQ),e(wQ,Wer),e(pd,Her),e(Do,Uer),e(Do,A8),e(A8,Jer),e(A8,obe),e(obe,Yer),e(A8,Ker),e(Do,Zer),e(Do,_t),M(L8,_t,null),e(_t,eor),e(_t,rbe),e(rbe,oor),e(_t,ror),e(_t,_d),e(_d,tor),e(_d,tbe),e(tbe,aor),e(_d,nor),e(_d,AQ),e(AQ,sor),e(_d,lor),e(_t,ior),M(MT,_t,null),e(Do,dor),e(Do,so),M(y8,so,null),e(so,cor),e(so,abe),e(abe,mor),e(so,gor),e(so,za),e(za,hor),e(za,nbe),e(nbe,uor),e(za,por),e(za,sbe),e(sbe,_or),e(za,bor),e(za,lbe),e(lbe,vor),e(za,For),e(so,Tor),e(so,V),e(V,ET),e(ET,ibe),e(ibe,Mor),e(ET,Eor),e(ET,LQ),e(LQ,Cor),e(ET,wor),e(V,Aor),e(V,CT),e(CT,dbe),e(dbe,Lor),e(CT,yor),e(CT,yQ),e(yQ,xor),e(CT,$or),e(V,kor),e(V,wT),e(wT,cbe),e(cbe,Sor),e(wT,Ror),e(wT,xQ),e(xQ,Por),e(wT,Bor),e(V,Nor),e(V,AT),e(AT,mbe),e(mbe,Ior),e(AT,qor),e(AT,$Q),e($Q,jor),e(AT,Dor),e(V,Gor),e(V,LT),e(LT,fbe),e(fbe,Oor),e(LT,Vor),e(LT,kQ),e(kQ,Xor),e(LT,zor),e(V,Qor),e(V,yT),e(yT,gbe),e(gbe,Wor),e(yT,Hor),e(yT,SQ),e(SQ,Uor),e(yT,Jor),e(V,Yor),e(V,xT),e(xT,hbe),e(hbe,Kor),e(xT,Zor),e(xT,RQ),e(RQ,err),e(xT,orr),e(V,rrr),e(V,$T),e($T,ube),e(ube,trr),e($T,arr),e($T,PQ),e(PQ,nrr),e($T,srr),e(V,lrr),e(V,kT),e(kT,pbe),e(pbe,irr),e(kT,drr),e(kT,BQ),e(BQ,crr),e(kT,mrr),e(V,frr),e(V,ST),e(ST,_be),e(_be,grr),e(ST,hrr),e(ST,NQ),e(NQ,urr),e(ST,prr),e(V,_rr),e(V,RT),e(RT,bbe),e(bbe,brr),e(RT,vrr),e(RT,IQ),e(IQ,Frr),e(RT,Trr),e(V,Mrr),e(V,PT),e(PT,vbe),e(vbe,Err),e(PT,Crr),e(PT,qQ),e(qQ,wrr),e(PT,Arr),e(V,Lrr),e(V,BT),e(BT,Fbe),e(Fbe,yrr),e(BT,xrr),e(BT,jQ),e(jQ,$rr),e(BT,krr),e(V,Srr),e(V,NT),e(NT,Tbe),e(Tbe,Rrr),e(NT,Prr),e(NT,DQ),e(DQ,Brr),e(NT,Nrr),e(V,Irr),e(V,IT),e(IT,Mbe),e(Mbe,qrr),e(IT,jrr),e(IT,GQ),e(GQ,Drr),e(IT,Grr),e(V,Orr),e(V,qT),e(qT,Ebe),e(Ebe,Vrr),e(qT,Xrr),e(qT,OQ),e(OQ,zrr),e(qT,Qrr),e(V,Wrr),e(V,jT),e(jT,Cbe),e(Cbe,Hrr),e(jT,Urr),e(jT,VQ),e(VQ,Jrr),e(jT,Yrr),e(V,Krr),e(V,DT),e(DT,wbe),e(wbe,Zrr),e(DT,etr),e(DT,XQ),e(XQ,otr),e(DT,rtr),e(V,ttr),e(V,GT),e(GT,Abe),e(Abe,atr),e(GT,ntr),e(GT,zQ),e(zQ,str),e(GT,ltr),e(V,itr),e(V,OT),e(OT,Lbe),e(Lbe,dtr),e(OT,ctr),e(OT,QQ),e(QQ,mtr),e(OT,ftr),e(V,gtr),e(V,VT),e(VT,ybe),e(ybe,htr),e(VT,utr),e(VT,WQ),e(WQ,ptr),e(VT,_tr),e(V,btr),e(V,XT),e(XT,xbe),e(xbe,vtr),e(XT,Ftr),e(XT,HQ),e(HQ,Ttr),e(XT,Mtr),e(V,Etr),e(V,zT),e(zT,$be),e($be,Ctr),e(zT,wtr),e(zT,UQ),e(UQ,Atr),e(zT,Ltr),e(V,ytr),e(V,QT),e(QT,kbe),e(kbe,xtr),e(QT,$tr),e(QT,JQ),e(JQ,ktr),e(QT,Str),e(V,Rtr),e(V,WT),e(WT,Sbe),e(Sbe,Ptr),e(WT,Btr),e(WT,YQ),e(YQ,Ntr),e(WT,Itr),e(V,qtr),e(V,HT),e(HT,Rbe),e(Rbe,jtr),e(HT,Dtr),e(HT,KQ),e(KQ,Gtr),e(HT,Otr),e(V,Vtr),e(V,UT),e(UT,Pbe),e(Pbe,Xtr),e(UT,ztr),e(UT,ZQ),e(ZQ,Qtr),e(UT,Wtr),e(V,Htr),e(V,JT),e(JT,Bbe),e(Bbe,Utr),e(JT,Jtr),e(JT,eW),e(eW,Ytr),e(JT,Ktr),e(V,Ztr),e(V,YT),e(YT,Nbe),e(Nbe,ear),e(YT,oar),e(YT,oW),e(oW,rar),e(YT,tar),e(V,aar),e(V,KT),e(KT,Ibe),e(Ibe,nar),e(KT,sar),e(KT,rW),e(rW,lar),e(KT,iar),e(V,dar),e(V,ZT),e(ZT,qbe),e(qbe,car),e(ZT,mar),e(ZT,tW),e(tW,far),e(ZT,gar),e(V,har),e(V,eM),e(eM,jbe),e(jbe,uar),e(eM,par),e(eM,aW),e(aW,_ar),e(eM,bar),e(V,Far),e(V,oM),e(oM,Dbe),e(Dbe,Tar),e(oM,Mar),e(oM,nW),e(nW,Ear),e(oM,Car),e(V,war),e(V,rM),e(rM,Gbe),e(Gbe,Aar),e(rM,Lar),e(rM,sW),e(sW,yar),e(rM,xar),e(V,$ar),e(V,tM),e(tM,Obe),e(Obe,kar),e(tM,Sar),e(tM,lW),e(lW,Rar),e(tM,Par),e(V,Bar),e(V,aM),e(aM,Vbe),e(Vbe,Nar),e(aM,Iar),e(aM,iW),e(iW,qar),e(aM,jar),e(V,Dar),e(V,nM),e(nM,Xbe),e(Xbe,Gar),e(nM,Oar),e(nM,dW),e(dW,Var),e(nM,Xar),e(V,zar),e(V,sM),e(sM,zbe),e(zbe,Qar),e(sM,War),e(sM,cW),e(cW,Har),e(sM,Uar),e(V,Jar),e(V,lM),e(lM,Qbe),e(Qbe,Yar),e(lM,Kar),e(lM,mW),e(mW,Zar),e(lM,enr),e(V,onr),e(V,iM),e(iM,Wbe),e(Wbe,rnr),e(iM,tnr),e(iM,fW),e(fW,anr),e(iM,nnr),e(V,snr),e(V,dM),e(dM,Hbe),e(Hbe,lnr),e(dM,inr),e(dM,gW),e(gW,dnr),e(dM,cnr),e(V,mnr),e(V,cM),e(cM,Ube),e(Ube,fnr),e(cM,gnr),e(cM,hW),e(hW,hnr),e(cM,unr),e(so,pnr),e(so,mM),e(mM,_nr),e(mM,Jbe),e(Jbe,bnr),e(mM,vnr),e(mM,Ybe),e(Ybe,Fnr),e(so,Tnr),M(fM,so,null),b(m,VXe,_),b(m,bd,_),e(bd,gM),e(gM,Kbe),M(x8,Kbe,null),e(bd,Mnr),e(bd,Zbe),e(Zbe,Enr),b(m,XXe,_),b(m,Go,_),M($8,Go,null),e(Go,Cnr),e(Go,vd),e(vd,wnr),e(vd,uW),e(uW,Anr),e(vd,Lnr),e(vd,pW),e(pW,ynr),e(vd,xnr),e(Go,$nr),e(Go,k8),e(k8,knr),e(k8,eve),e(eve,Snr),e(k8,Rnr),e(Go,Pnr),e(Go,bt),M(S8,bt,null),e(bt,Bnr),e(bt,ove),e(ove,Nnr),e(bt,Inr),e(bt,Fd),e(Fd,qnr),e(Fd,rve),e(rve,jnr),e(Fd,Dnr),e(Fd,_W),e(_W,Gnr),e(Fd,Onr),e(bt,Vnr),M(hM,bt,null),e(Go,Xnr),e(Go,lo),M(R8,lo,null),e(lo,znr),e(lo,tve),e(tve,Qnr),e(lo,Wnr),e(lo,Qa),e(Qa,Hnr),e(Qa,ave),e(ave,Unr),e(Qa,Jnr),e(Qa,nve),e(nve,Ynr),e(Qa,Knr),e(Qa,sve),e(sve,Znr),e(Qa,esr),e(lo,osr),e(lo,lve),e(lve,uM),e(uM,ive),e(ive,rsr),e(uM,tsr),e(uM,bW),e(bW,asr),e(uM,nsr),e(lo,ssr),e(lo,pM),e(pM,lsr),e(pM,dve),e(dve,isr),e(pM,dsr),e(pM,cve),e(cve,csr),e(lo,msr),M(_M,lo,null),b(m,zXe,_),b(m,Td,_),e(Td,bM),e(bM,mve),M(P8,mve,null),e(Td,fsr),e(Td,fve),e(fve,gsr),b(m,QXe,_),b(m,Oo,_),M(B8,Oo,null),e(Oo,hsr),e(Oo,Md),e(Md,usr),e(Md,vW),e(vW,psr),e(Md,_sr),e(Md,FW),e(FW,bsr),e(Md,vsr),e(Oo,Fsr),e(Oo,N8),e(N8,Tsr),e(N8,gve),e(gve,Msr),e(N8,Esr),e(Oo,Csr),e(Oo,vt),M(I8,vt,null),e(vt,wsr),e(vt,hve),e(hve,Asr),e(vt,Lsr),e(vt,Ed),e(Ed,ysr),e(Ed,uve),e(uve,xsr),e(Ed,$sr),e(Ed,TW),e(TW,ksr),e(Ed,Ssr),e(vt,Rsr),M(vM,vt,null),e(Oo,Psr),e(Oo,io),M(q8,io,null),e(io,Bsr),e(io,pve),e(pve,Nsr),e(io,Isr),e(io,Wa),e(Wa,qsr),e(Wa,_ve),e(_ve,jsr),e(Wa,Dsr),e(Wa,bve),e(bve,Gsr),e(Wa,Osr),e(Wa,vve),e(vve,Vsr),e(Wa,Xsr),e(io,zsr),e(io,ve),e(ve,FM),e(FM,Fve),e(Fve,Qsr),e(FM,Wsr),e(FM,MW),e(MW,Hsr),e(FM,Usr),e(ve,Jsr),e(ve,TM),e(TM,Tve),e(Tve,Ysr),e(TM,Ksr),e(TM,EW),e(EW,Zsr),e(TM,elr),e(ve,olr),e(ve,MM),e(MM,Mve),e(Mve,rlr),e(MM,tlr),e(MM,CW),e(CW,alr),e(MM,nlr),e(ve,slr),e(ve,EM),e(EM,Eve),e(Eve,llr),e(EM,ilr),e(EM,wW),e(wW,dlr),e(EM,clr),e(ve,mlr),e(ve,Us),e(Us,Cve),e(Cve,flr),e(Us,glr),e(Us,AW),e(AW,hlr),e(Us,ulr),e(Us,LW),e(LW,plr),e(Us,_lr),e(ve,blr),e(ve,CM),e(CM,wve),e(wve,vlr),e(CM,Flr),e(CM,yW),e(yW,Tlr),e(CM,Mlr),e(ve,Elr),e(ve,Js),e(Js,Ave),e(Ave,Clr),e(Js,wlr),e(Js,xW),e(xW,Alr),e(Js,Llr),e(Js,$W),e($W,ylr),e(Js,xlr),e(ve,$lr),e(ve,wM),e(wM,Lve),e(Lve,klr),e(wM,Slr),e(wM,kW),e(kW,Rlr),e(wM,Plr),e(ve,Blr),e(ve,Ft),e(Ft,yve),e(yve,Nlr),e(Ft,Ilr),e(Ft,SW),e(SW,qlr),e(Ft,jlr),e(Ft,RW),e(RW,Dlr),e(Ft,Glr),e(Ft,PW),e(PW,Olr),e(Ft,Vlr),e(ve,Xlr),e(ve,AM),e(AM,xve),e(xve,zlr),e(AM,Qlr),e(AM,BW),e(BW,Wlr),e(AM,Hlr),e(ve,Ulr),e(ve,LM),e(LM,$ve),e($ve,Jlr),e(LM,Ylr),e(LM,NW),e(NW,Klr),e(LM,Zlr),e(ve,eir),e(ve,yM),e(yM,kve),e(kve,oir),e(yM,rir),e(yM,IW),e(IW,tir),e(yM,air),e(ve,nir),e(ve,xM),e(xM,Sve),e(Sve,sir),e(xM,lir),e(xM,qW),e(qW,iir),e(xM,dir),e(ve,cir),e(ve,$M),e($M,Rve),e(Rve,mir),e($M,fir),e($M,jW),e(jW,gir),e($M,hir),e(ve,uir),e(ve,kM),e(kM,Pve),e(Pve,pir),e(kM,_ir),e(kM,DW),e(DW,bir),e(kM,vir),e(ve,Fir),e(ve,SM),e(SM,Bve),e(Bve,Tir),e(SM,Mir),e(SM,GW),e(GW,Eir),e(SM,Cir),e(io,wir),e(io,RM),e(RM,Air),e(RM,Nve),e(Nve,Lir),e(RM,yir),e(RM,Ive),e(Ive,xir),e(io,$ir),M(PM,io,null),b(m,WXe,_),b(m,Cd,_),e(Cd,BM),e(BM,qve),M(j8,qve,null),e(Cd,kir),e(Cd,jve),e(jve,Sir),b(m,HXe,_),b(m,Vo,_),M(D8,Vo,null),e(Vo,Rir),e(Vo,wd),e(wd,Pir),e(wd,OW),e(OW,Bir),e(wd,Nir),e(wd,VW),e(VW,Iir),e(wd,qir),e(Vo,jir),e(Vo,G8),e(G8,Dir),e(G8,Dve),e(Dve,Gir),e(G8,Oir),e(Vo,Vir),e(Vo,Tt),M(O8,Tt,null),e(Tt,Xir),e(Tt,Gve),e(Gve,zir),e(Tt,Qir),e(Tt,Ad),e(Ad,Wir),e(Ad,Ove),e(Ove,Hir),e(Ad,Uir),e(Ad,XW),e(XW,Jir),e(Ad,Yir),e(Tt,Kir),M(NM,Tt,null),e(Vo,Zir),e(Vo,co),M(V8,co,null),e(co,edr),e(co,Vve),e(Vve,odr),e(co,rdr),e(co,Ha),e(Ha,tdr),e(Ha,Xve),e(Xve,adr),e(Ha,ndr),e(Ha,zve),e(zve,sdr),e(Ha,ldr),e(Ha,Qve),e(Qve,idr),e(Ha,ddr),e(co,cdr),e(co,Wve),e(Wve,IM),e(IM,Hve),e(Hve,mdr),e(IM,fdr),e(IM,zW),e(zW,gdr),e(IM,hdr),e(co,udr),e(co,qM),e(qM,pdr),e(qM,Uve),e(Uve,_dr),e(qM,bdr),e(qM,Jve),e(Jve,vdr),e(co,Fdr),M(jM,co,null),b(m,UXe,_),b(m,Ld,_),e(Ld,DM),e(DM,Yve),M(X8,Yve,null),e(Ld,Tdr),e(Ld,Kve),e(Kve,Mdr),b(m,JXe,_),b(m,Xo,_),M(z8,Xo,null),e(Xo,Edr),e(Xo,yd),e(yd,Cdr),e(yd,QW),e(QW,wdr),e(yd,Adr),e(yd,WW),e(WW,Ldr),e(yd,ydr),e(Xo,xdr),e(Xo,Q8),e(Q8,$dr),e(Q8,Zve),e(Zve,kdr),e(Q8,Sdr),e(Xo,Rdr),e(Xo,Mt),M(W8,Mt,null),e(Mt,Pdr),e(Mt,e1e),e(e1e,Bdr),e(Mt,Ndr),e(Mt,xd),e(xd,Idr),e(xd,o1e),e(o1e,qdr),e(xd,jdr),e(xd,HW),e(HW,Ddr),e(xd,Gdr),e(Mt,Odr),M(GM,Mt,null),e(Xo,Vdr),e(Xo,mo),M(H8,mo,null),e(mo,Xdr),e(mo,r1e),e(r1e,zdr),e(mo,Qdr),e(mo,Ua),e(Ua,Wdr),e(Ua,t1e),e(t1e,Hdr),e(Ua,Udr),e(Ua,a1e),e(a1e,Jdr),e(Ua,Ydr),e(Ua,n1e),e(n1e,Kdr),e(Ua,Zdr),e(mo,ecr),e(mo,s1e),e(s1e,OM),e(OM,l1e),e(l1e,ocr),e(OM,rcr),e(OM,UW),e(UW,tcr),e(OM,acr),e(mo,ncr),e(mo,VM),e(VM,scr),e(VM,i1e),e(i1e,lcr),e(VM,icr),e(VM,d1e),e(d1e,dcr),e(mo,ccr),M(XM,mo,null),b(m,YXe,_),b(m,$d,_),e($d,zM),e(zM,c1e),M(U8,c1e,null),e($d,mcr),e($d,m1e),e(m1e,fcr),b(m,KXe,_),b(m,zo,_),M(J8,zo,null),e(zo,gcr),e(zo,kd),e(kd,hcr),e(kd,JW),e(JW,ucr),e(kd,pcr),e(kd,YW),e(YW,_cr),e(kd,bcr),e(zo,vcr),e(zo,Y8),e(Y8,Fcr),e(Y8,f1e),e(f1e,Tcr),e(Y8,Mcr),e(zo,Ecr),e(zo,Et),M(K8,Et,null),e(Et,Ccr),e(Et,g1e),e(g1e,wcr),e(Et,Acr),e(Et,Sd),e(Sd,Lcr),e(Sd,h1e),e(h1e,ycr),e(Sd,xcr),e(Sd,KW),e(KW,$cr),e(Sd,kcr),e(Et,Scr),M(QM,Et,null),e(zo,Rcr),e(zo,fo),M(Z8,fo,null),e(fo,Pcr),e(fo,u1e),e(u1e,Bcr),e(fo,Ncr),e(fo,Ja),e(Ja,Icr),e(Ja,p1e),e(p1e,qcr),e(Ja,jcr),e(Ja,_1e),e(_1e,Dcr),e(Ja,Gcr),e(Ja,b1e),e(b1e,Ocr),e(Ja,Vcr),e(fo,Xcr),e(fo,Pe),e(Pe,WM),e(WM,v1e),e(v1e,zcr),e(WM,Qcr),e(WM,ZW),e(ZW,Wcr),e(WM,Hcr),e(Pe,Ucr),e(Pe,HM),e(HM,F1e),e(F1e,Jcr),e(HM,Ycr),e(HM,eH),e(eH,Kcr),e(HM,Zcr),e(Pe,emr),e(Pe,UM),e(UM,T1e),e(T1e,omr),e(UM,rmr),e(UM,oH),e(oH,tmr),e(UM,amr),e(Pe,nmr),e(Pe,JM),e(JM,M1e),e(M1e,smr),e(JM,lmr),e(JM,rH),e(rH,imr),e(JM,dmr),e(Pe,cmr),e(Pe,YM),e(YM,E1e),e(E1e,mmr),e(YM,fmr),e(YM,tH),e(tH,gmr),e(YM,hmr),e(Pe,umr),e(Pe,KM),e(KM,C1e),e(C1e,pmr),e(KM,_mr),e(KM,aH),e(aH,bmr),e(KM,vmr),e(Pe,Fmr),e(Pe,ZM),e(ZM,w1e),e(w1e,Tmr),e(ZM,Mmr),e(ZM,nH),e(nH,Emr),e(ZM,Cmr),e(Pe,wmr),e(Pe,e4),e(e4,A1e),e(A1e,Amr),e(e4,Lmr),e(e4,sH),e(sH,ymr),e(e4,xmr),e(Pe,$mr),e(Pe,o4),e(o4,L1e),e(L1e,kmr),e(o4,Smr),e(o4,lH),e(lH,Rmr),e(o4,Pmr),e(fo,Bmr),e(fo,r4),e(r4,Nmr),e(r4,y1e),e(y1e,Imr),e(r4,qmr),e(r4,x1e),e(x1e,jmr),e(fo,Dmr),M(t4,fo,null),b(m,ZXe,_),b(m,Rd,_),e(Rd,a4),e(a4,$1e),M(e9,$1e,null),e(Rd,Gmr),e(Rd,k1e),e(k1e,Omr),b(m,eze,_),b(m,Qo,_),M(o9,Qo,null),e(Qo,Vmr),e(Qo,Pd),e(Pd,Xmr),e(Pd,iH),e(iH,zmr),e(Pd,Qmr),e(Pd,dH),e(dH,Wmr),e(Pd,Hmr),e(Qo,Umr),e(Qo,r9),e(r9,Jmr),e(r9,S1e),e(S1e,Ymr),e(r9,Kmr),e(Qo,Zmr),e(Qo,Ct),M(t9,Ct,null),e(Ct,efr),e(Ct,R1e),e(R1e,ofr),e(Ct,rfr),e(Ct,Bd),e(Bd,tfr),e(Bd,P1e),e(P1e,afr),e(Bd,nfr),e(Bd,cH),e(cH,sfr),e(Bd,lfr),e(Ct,ifr),M(n4,Ct,null),e(Qo,dfr),e(Qo,go),M(a9,go,null),e(go,cfr),e(go,B1e),e(B1e,mfr),e(go,ffr),e(go,Ya),e(Ya,gfr),e(Ya,N1e),e(N1e,hfr),e(Ya,ufr),e(Ya,I1e),e(I1e,pfr),e(Ya,_fr),e(Ya,q1e),e(q1e,bfr),e(Ya,vfr),e(go,Ffr),e(go,rt),e(rt,s4),e(s4,j1e),e(j1e,Tfr),e(s4,Mfr),e(s4,mH),e(mH,Efr),e(s4,Cfr),e(rt,wfr),e(rt,l4),e(l4,D1e),e(D1e,Afr),e(l4,Lfr),e(l4,fH),e(fH,yfr),e(l4,xfr),e(rt,$fr),e(rt,i4),e(i4,G1e),e(G1e,kfr),e(i4,Sfr),e(i4,gH),e(gH,Rfr),e(i4,Pfr),e(rt,Bfr),e(rt,d4),e(d4,O1e),e(O1e,Nfr),e(d4,Ifr),e(d4,hH),e(hH,qfr),e(d4,jfr),e(rt,Dfr),e(rt,c4),e(c4,V1e),e(V1e,Gfr),e(c4,Ofr),e(c4,uH),e(uH,Vfr),e(c4,Xfr),e(go,zfr),e(go,m4),e(m4,Qfr),e(m4,X1e),e(X1e,Wfr),e(m4,Hfr),e(m4,z1e),e(z1e,Ufr),e(go,Jfr),M(f4,go,null),b(m,oze,_),b(m,Nd,_),e(Nd,g4),e(g4,Q1e),M(n9,Q1e,null),e(Nd,Yfr),e(Nd,W1e),e(W1e,Kfr),b(m,rze,_),b(m,Wo,_),M(s9,Wo,null),e(Wo,Zfr),e(Wo,Id),e(Id,egr),e(Id,pH),e(pH,ogr),e(Id,rgr),e(Id,_H),e(_H,tgr),e(Id,agr),e(Wo,ngr),e(Wo,l9),e(l9,sgr),e(l9,H1e),e(H1e,lgr),e(l9,igr),e(Wo,dgr),e(Wo,wt),M(i9,wt,null),e(wt,cgr),e(wt,U1e),e(U1e,mgr),e(wt,fgr),e(wt,qd),e(qd,ggr),e(qd,J1e),e(J1e,hgr),e(qd,ugr),e(qd,bH),e(bH,pgr),e(qd,_gr),e(wt,bgr),M(h4,wt,null),e(Wo,vgr),e(Wo,ho),M(d9,ho,null),e(ho,Fgr),e(ho,Y1e),e(Y1e,Tgr),e(ho,Mgr),e(ho,Ka),e(Ka,Egr),e(Ka,K1e),e(K1e,Cgr),e(Ka,wgr),e(Ka,Z1e),e(Z1e,Agr),e(Ka,Lgr),e(Ka,eFe),e(eFe,ygr),e(Ka,xgr),e(ho,$gr),e(ho,Le),e(Le,u4),e(u4,oFe),e(oFe,kgr),e(u4,Sgr),e(u4,vH),e(vH,Rgr),e(u4,Pgr),e(Le,Bgr),e(Le,p4),e(p4,rFe),e(rFe,Ngr),e(p4,Igr),e(p4,FH),e(FH,qgr),e(p4,jgr),e(Le,Dgr),e(Le,_4),e(_4,tFe),e(tFe,Ggr),e(_4,Ogr),e(_4,TH),e(TH,Vgr),e(_4,Xgr),e(Le,zgr),e(Le,b4),e(b4,aFe),e(aFe,Qgr),e(b4,Wgr),e(b4,MH),e(MH,Hgr),e(b4,Ugr),e(Le,Jgr),e(Le,v4),e(v4,nFe),e(nFe,Ygr),e(v4,Kgr),e(v4,EH),e(EH,Zgr),e(v4,ehr),e(Le,ohr),e(Le,F4),e(F4,sFe),e(sFe,rhr),e(F4,thr),e(F4,CH),e(CH,ahr),e(F4,nhr),e(Le,shr),e(Le,T4),e(T4,lFe),e(lFe,lhr),e(T4,ihr),e(T4,wH),e(wH,dhr),e(T4,chr),e(Le,mhr),e(Le,M4),e(M4,iFe),e(iFe,fhr),e(M4,ghr),e(M4,AH),e(AH,hhr),e(M4,uhr),e(Le,phr),e(Le,E4),e(E4,dFe),e(dFe,_hr),e(E4,bhr),e(E4,LH),e(LH,vhr),e(E4,Fhr),e(Le,Thr),e(Le,C4),e(C4,cFe),e(cFe,Mhr),e(C4,Ehr),e(C4,yH),e(yH,Chr),e(C4,whr),e(ho,Ahr),e(ho,w4),e(w4,Lhr),e(w4,mFe),e(mFe,yhr),e(w4,xhr),e(w4,fFe),e(fFe,$hr),e(ho,khr),M(A4,ho,null),b(m,tze,_),b(m,jd,_),e(jd,L4),e(L4,gFe),M(c9,gFe,null),e(jd,Shr),e(jd,hFe),e(hFe,Rhr),b(m,aze,_),b(m,Ho,_),M(m9,Ho,null),e(Ho,Phr),e(Ho,Dd),e(Dd,Bhr),e(Dd,xH),e(xH,Nhr),e(Dd,Ihr),e(Dd,$H),e($H,qhr),e(Dd,jhr),e(Ho,Dhr),e(Ho,f9),e(f9,Ghr),e(f9,uFe),e(uFe,Ohr),e(f9,Vhr),e(Ho,Xhr),e(Ho,At),M(g9,At,null),e(At,zhr),e(At,pFe),e(pFe,Qhr),e(At,Whr),e(At,Gd),e(Gd,Hhr),e(Gd,_Fe),e(_Fe,Uhr),e(Gd,Jhr),e(Gd,kH),e(kH,Yhr),e(Gd,Khr),e(At,Zhr),M(y4,At,null),e(Ho,eur),e(Ho,uo),M(h9,uo,null),e(uo,our),e(uo,bFe),e(bFe,rur),e(uo,tur),e(uo,Za),e(Za,aur),e(Za,vFe),e(vFe,nur),e(Za,sur),e(Za,FFe),e(FFe,lur),e(Za,iur),e(Za,TFe),e(TFe,dur),e(Za,cur),e(uo,mur),e(uo,u9),e(u9,x4),e(x4,MFe),e(MFe,fur),e(x4,gur),e(x4,SH),e(SH,hur),e(x4,uur),e(u9,pur),e(u9,$4),e($4,EFe),e(EFe,_ur),e($4,bur),e($4,RH),e(RH,vur),e($4,Fur),e(uo,Tur),e(uo,k4),e(k4,Mur),e(k4,CFe),e(CFe,Eur),e(k4,Cur),e(k4,wFe),e(wFe,wur),e(uo,Aur),M(S4,uo,null),b(m,nze,_),b(m,Od,_),e(Od,R4),e(R4,AFe),M(p9,AFe,null),e(Od,Lur),e(Od,LFe),e(LFe,yur),b(m,sze,_),b(m,Uo,_),M(_9,Uo,null),e(Uo,xur),e(Uo,Vd),e(Vd,$ur),e(Vd,PH),e(PH,kur),e(Vd,Sur),e(Vd,BH),e(BH,Rur),e(Vd,Pur),e(Uo,Bur),e(Uo,b9),e(b9,Nur),e(b9,yFe),e(yFe,Iur),e(b9,qur),e(Uo,jur),e(Uo,Lt),M(v9,Lt,null),e(Lt,Dur),e(Lt,xFe),e(xFe,Gur),e(Lt,Our),e(Lt,Xd),e(Xd,Vur),e(Xd,$Fe),e($Fe,Xur),e(Xd,zur),e(Xd,NH),e(NH,Qur),e(Xd,Wur),e(Lt,Hur),M(P4,Lt,null),e(Uo,Uur),e(Uo,po),M(F9,po,null),e(po,Jur),e(po,kFe),e(kFe,Yur),e(po,Kur),e(po,en),e(en,Zur),e(en,SFe),e(SFe,epr),e(en,opr),e(en,RFe),e(RFe,rpr),e(en,tpr),e(en,PFe),e(PFe,apr),e(en,npr),e(po,spr),e(po,tt),e(tt,B4),e(B4,BFe),e(BFe,lpr),e(B4,ipr),e(B4,IH),e(IH,dpr),e(B4,cpr),e(tt,mpr),e(tt,N4),e(N4,NFe),e(NFe,fpr),e(N4,gpr),e(N4,qH),e(qH,hpr),e(N4,upr),e(tt,ppr),e(tt,I4),e(I4,IFe),e(IFe,_pr),e(I4,bpr),e(I4,jH),e(jH,vpr),e(I4,Fpr),e(tt,Tpr),e(tt,q4),e(q4,qFe),e(qFe,Mpr),e(q4,Epr),e(q4,DH),e(DH,Cpr),e(q4,wpr),e(tt,Apr),e(tt,j4),e(j4,jFe),e(jFe,Lpr),e(j4,ypr),e(j4,GH),e(GH,xpr),e(j4,$pr),e(po,kpr),e(po,D4),e(D4,Spr),e(D4,DFe),e(DFe,Rpr),e(D4,Ppr),e(D4,GFe),e(GFe,Bpr),e(po,Npr),M(G4,po,null),b(m,lze,_),b(m,zd,_),e(zd,O4),e(O4,OFe),M(T9,OFe,null),e(zd,Ipr),e(zd,VFe),e(VFe,qpr),b(m,ize,_),b(m,Jo,_),M(M9,Jo,null),e(Jo,jpr),e(Jo,Qd),e(Qd,Dpr),e(Qd,OH),e(OH,Gpr),e(Qd,Opr),e(Qd,VH),e(VH,Vpr),e(Qd,Xpr),e(Jo,zpr),e(Jo,E9),e(E9,Qpr),e(E9,XFe),e(XFe,Wpr),e(E9,Hpr),e(Jo,Upr),e(Jo,yt),M(C9,yt,null),e(yt,Jpr),e(yt,zFe),e(zFe,Ypr),e(yt,Kpr),e(yt,Wd),e(Wd,Zpr),e(Wd,QFe),e(QFe,e_r),e(Wd,o_r),e(Wd,XH),e(XH,r_r),e(Wd,t_r),e(yt,a_r),M(V4,yt,null),e(Jo,n_r),e(Jo,_o),M(w9,_o,null),e(_o,s_r),e(_o,WFe),e(WFe,l_r),e(_o,i_r),e(_o,on),e(on,d_r),e(on,HFe),e(HFe,c_r),e(on,m_r),e(on,UFe),e(UFe,f_r),e(on,g_r),e(on,JFe),e(JFe,h_r),e(on,u_r),e(_o,p_r),e(_o,Hd),e(Hd,X4),e(X4,YFe),e(YFe,__r),e(X4,b_r),e(X4,zH),e(zH,v_r),e(X4,F_r),e(Hd,T_r),e(Hd,z4),e(z4,KFe),e(KFe,M_r),e(z4,E_r),e(z4,QH),e(QH,C_r),e(z4,w_r),e(Hd,A_r),e(Hd,Q4),e(Q4,ZFe),e(ZFe,L_r),e(Q4,y_r),e(Q4,WH),e(WH,x_r),e(Q4,$_r),e(_o,k_r),e(_o,W4),e(W4,S_r),e(W4,eTe),e(eTe,R_r),e(W4,P_r),e(W4,oTe),e(oTe,B_r),e(_o,N_r),M(H4,_o,null),b(m,dze,_),b(m,Ud,_),e(Ud,U4),e(U4,rTe),M(A9,rTe,null),e(Ud,I_r),e(Ud,tTe),e(tTe,q_r),b(m,cze,_),b(m,Yo,_),M(L9,Yo,null),e(Yo,j_r),e(Yo,Jd),e(Jd,D_r),e(Jd,HH),e(HH,G_r),e(Jd,O_r),e(Jd,UH),e(UH,V_r),e(Jd,X_r),e(Yo,z_r),e(Yo,y9),e(y9,Q_r),e(y9,aTe),e(aTe,W_r),e(y9,H_r),e(Yo,U_r),e(Yo,xt),M(x9,xt,null),e(xt,J_r),e(xt,nTe),e(nTe,Y_r),e(xt,K_r),e(xt,Yd),e(Yd,Z_r),e(Yd,sTe),e(sTe,e2r),e(Yd,o2r),e(Yd,JH),e(JH,r2r),e(Yd,t2r),e(xt,a2r),M(J4,xt,null),e(Yo,n2r),e(Yo,bo),M($9,bo,null),e(bo,s2r),e(bo,lTe),e(lTe,l2r),e(bo,i2r),e(bo,rn),e(rn,d2r),e(rn,iTe),e(iTe,c2r),e(rn,m2r),e(rn,dTe),e(dTe,f2r),e(rn,g2r),e(rn,cTe),e(cTe,h2r),e(rn,u2r),e(bo,p2r),e(bo,k9),e(k9,Y4),e(Y4,mTe),e(mTe,_2r),e(Y4,b2r),e(Y4,YH),e(YH,v2r),e(Y4,F2r),e(k9,T2r),e(k9,K4),e(K4,fTe),e(fTe,M2r),e(K4,E2r),e(K4,KH),e(KH,C2r),e(K4,w2r),e(bo,A2r),e(bo,Z4),e(Z4,L2r),e(Z4,gTe),e(gTe,y2r),e(Z4,x2r),e(Z4,hTe),e(hTe,$2r),e(bo,k2r),M(eE,bo,null),b(m,mze,_),b(m,Kd,_),e(Kd,oE),e(oE,uTe),M(S9,uTe,null),e(Kd,S2r),e(Kd,pTe),e(pTe,R2r),b(m,fze,_),b(m,Ko,_),M(R9,Ko,null),e(Ko,P2r),e(Ko,Zd),e(Zd,B2r),e(Zd,ZH),e(ZH,N2r),e(Zd,I2r),e(Zd,eU),e(eU,q2r),e(Zd,j2r),e(Ko,D2r),e(Ko,P9),e(P9,G2r),e(P9,_Te),e(_Te,O2r),e(P9,V2r),e(Ko,X2r),e(Ko,$t),M(B9,$t,null),e($t,z2r),e($t,bTe),e(bTe,Q2r),e($t,W2r),e($t,ec),e(ec,H2r),e(ec,vTe),e(vTe,U2r),e(ec,J2r),e(ec,oU),e(oU,Y2r),e(ec,K2r),e($t,Z2r),M(rE,$t,null),e(Ko,ebr),e(Ko,vo),M(N9,vo,null),e(vo,obr),e(vo,FTe),e(FTe,rbr),e(vo,tbr),e(vo,tn),e(tn,abr),e(tn,TTe),e(TTe,nbr),e(tn,sbr),e(tn,MTe),e(MTe,lbr),e(tn,ibr),e(tn,ETe),e(ETe,dbr),e(tn,cbr),e(vo,mbr),e(vo,CTe),e(CTe,tE),e(tE,wTe),e(wTe,fbr),e(tE,gbr),e(tE,rU),e(rU,hbr),e(tE,ubr),e(vo,pbr),e(vo,aE),e(aE,_br),e(aE,ATe),e(ATe,bbr),e(aE,vbr),e(aE,LTe),e(LTe,Fbr),e(vo,Tbr),M(nE,vo,null),b(m,gze,_),b(m,oc,_),e(oc,sE),e(sE,yTe),M(I9,yTe,null),e(oc,Mbr),e(oc,xTe),e(xTe,Ebr),b(m,hze,_),b(m,Zo,_),M(q9,Zo,null),e(Zo,Cbr),e(Zo,rc),e(rc,wbr),e(rc,tU),e(tU,Abr),e(rc,Lbr),e(rc,aU),e(aU,ybr),e(rc,xbr),e(Zo,$br),e(Zo,j9),e(j9,kbr),e(j9,$Te),e($Te,Sbr),e(j9,Rbr),e(Zo,Pbr),e(Zo,kt),M(D9,kt,null),e(kt,Bbr),e(kt,kTe),e(kTe,Nbr),e(kt,Ibr),e(kt,tc),e(tc,qbr),e(tc,STe),e(STe,jbr),e(tc,Dbr),e(tc,nU),e(nU,Gbr),e(tc,Obr),e(kt,Vbr),M(lE,kt,null),e(Zo,Xbr),e(Zo,Fo),M(G9,Fo,null),e(Fo,zbr),e(Fo,RTe),e(RTe,Qbr),e(Fo,Wbr),e(Fo,an),e(an,Hbr),e(an,PTe),e(PTe,Ubr),e(an,Jbr),e(an,BTe),e(BTe,Ybr),e(an,Kbr),e(an,NTe),e(NTe,Zbr),e(an,evr),e(Fo,ovr),e(Fo,at),e(at,iE),e(iE,ITe),e(ITe,rvr),e(iE,tvr),e(iE,sU),e(sU,avr),e(iE,nvr),e(at,svr),e(at,dE),e(dE,qTe),e(qTe,lvr),e(dE,ivr),e(dE,lU),e(lU,dvr),e(dE,cvr),e(at,mvr),e(at,cE),e(cE,jTe),e(jTe,fvr),e(cE,gvr),e(cE,iU),e(iU,hvr),e(cE,uvr),e(at,pvr),e(at,mE),e(mE,DTe),e(DTe,_vr),e(mE,bvr),e(mE,dU),e(dU,vvr),e(mE,Fvr),e(at,Tvr),e(at,fE),e(fE,GTe),e(GTe,Mvr),e(fE,Evr),e(fE,cU),e(cU,Cvr),e(fE,wvr),e(Fo,Avr),e(Fo,gE),e(gE,Lvr),e(gE,OTe),e(OTe,yvr),e(gE,xvr),e(gE,VTe),e(VTe,$vr),e(Fo,kvr),M(hE,Fo,null),b(m,uze,_),b(m,ac,_),e(ac,uE),e(uE,XTe),M(O9,XTe,null),e(ac,Svr),e(ac,zTe),e(zTe,Rvr),b(m,pze,_),b(m,er,_),M(V9,er,null),e(er,Pvr),e(er,nc),e(nc,Bvr),e(nc,mU),e(mU,Nvr),e(nc,Ivr),e(nc,fU),e(fU,qvr),e(nc,jvr),e(er,Dvr),e(er,X9),e(X9,Gvr),e(X9,QTe),e(QTe,Ovr),e(X9,Vvr),e(er,Xvr),e(er,St),M(z9,St,null),e(St,zvr),e(St,WTe),e(WTe,Qvr),e(St,Wvr),e(St,sc),e(sc,Hvr),e(sc,HTe),e(HTe,Uvr),e(sc,Jvr),e(sc,gU),e(gU,Yvr),e(sc,Kvr),e(St,Zvr),M(pE,St,null),e(er,e1r),e(er,To),M(Q9,To,null),e(To,o1r),e(To,UTe),e(UTe,r1r),e(To,t1r),e(To,nn),e(nn,a1r),e(nn,JTe),e(JTe,n1r),e(nn,s1r),e(nn,YTe),e(YTe,l1r),e(nn,i1r),e(nn,KTe),e(KTe,d1r),e(nn,c1r),e(To,m1r),e(To,ZTe),e(ZTe,_E),e(_E,eMe),e(eMe,f1r),e(_E,g1r),e(_E,hU),e(hU,h1r),e(_E,u1r),e(To,p1r),e(To,bE),e(bE,_1r),e(bE,oMe),e(oMe,b1r),e(bE,v1r),e(bE,rMe),e(rMe,F1r),e(To,T1r),M(vE,To,null),b(m,_ze,_),b(m,lc,_),e(lc,FE),e(FE,tMe),M(W9,tMe,null),e(lc,M1r),e(lc,aMe),e(aMe,E1r),b(m,bze,_),b(m,or,_),M(H9,or,null),e(or,C1r),e(or,ic),e(ic,w1r),e(ic,uU),e(uU,A1r),e(ic,L1r),e(ic,pU),e(pU,y1r),e(ic,x1r),e(or,$1r),e(or,U9),e(U9,k1r),e(U9,nMe),e(nMe,S1r),e(U9,R1r),e(or,P1r),e(or,Rt),M(J9,Rt,null),e(Rt,B1r),e(Rt,sMe),e(sMe,N1r),e(Rt,I1r),e(Rt,dc),e(dc,q1r),e(dc,lMe),e(lMe,j1r),e(dc,D1r),e(dc,_U),e(_U,G1r),e(dc,O1r),e(Rt,V1r),M(TE,Rt,null),e(or,X1r),e(or,xr),M(Y9,xr,null),e(xr,z1r),e(xr,iMe),e(iMe,Q1r),e(xr,W1r),e(xr,sn),e(sn,H1r),e(sn,dMe),e(dMe,U1r),e(sn,J1r),e(sn,cMe),e(cMe,Y1r),e(sn,K1r),e(sn,mMe),e(mMe,Z1r),e(sn,eFr),e(xr,oFr),e(xr,q),e(q,ME),e(ME,fMe),e(fMe,rFr),e(ME,tFr),e(ME,bU),e(bU,aFr),e(ME,nFr),e(q,sFr),e(q,EE),e(EE,gMe),e(gMe,lFr),e(EE,iFr),e(EE,vU),e(vU,dFr),e(EE,cFr),e(q,mFr),e(q,CE),e(CE,hMe),e(hMe,fFr),e(CE,gFr),e(CE,FU),e(FU,hFr),e(CE,uFr),e(q,pFr),e(q,wE),e(wE,uMe),e(uMe,_Fr),e(wE,bFr),e(wE,TU),e(TU,vFr),e(wE,FFr),e(q,TFr),e(q,AE),e(AE,pMe),e(pMe,MFr),e(AE,EFr),e(AE,MU),e(MU,CFr),e(AE,wFr),e(q,AFr),e(q,LE),e(LE,_Me),e(_Me,LFr),e(LE,yFr),e(LE,EU),e(EU,xFr),e(LE,$Fr),e(q,kFr),e(q,yE),e(yE,bMe),e(bMe,SFr),e(yE,RFr),e(yE,CU),e(CU,PFr),e(yE,BFr),e(q,NFr),e(q,xE),e(xE,vMe),e(vMe,IFr),e(xE,qFr),e(xE,wU),e(wU,jFr),e(xE,DFr),e(q,GFr),e(q,$E),e($E,FMe),e(FMe,OFr),e($E,VFr),e($E,AU),e(AU,XFr),e($E,zFr),e(q,QFr),e(q,kE),e(kE,TMe),e(TMe,WFr),e(kE,HFr),e(kE,LU),e(LU,UFr),e(kE,JFr),e(q,YFr),e(q,SE),e(SE,MMe),e(MMe,KFr),e(SE,ZFr),e(SE,yU),e(yU,eTr),e(SE,oTr),e(q,rTr),e(q,RE),e(RE,EMe),e(EMe,tTr),e(RE,aTr),e(RE,xU),e(xU,nTr),e(RE,sTr),e(q,lTr),e(q,PE),e(PE,CMe),e(CMe,iTr),e(PE,dTr),e(PE,$U),e($U,cTr),e(PE,mTr),e(q,fTr),e(q,BE),e(BE,wMe),e(wMe,gTr),e(BE,hTr),e(BE,kU),e(kU,uTr),e(BE,pTr),e(q,_Tr),e(q,NE),e(NE,AMe),e(AMe,bTr),e(NE,vTr),e(NE,SU),e(SU,FTr),e(NE,TTr),e(q,MTr),e(q,IE),e(IE,LMe),e(LMe,ETr),e(IE,CTr),e(IE,RU),e(RU,wTr),e(IE,ATr),e(q,LTr),e(q,qE),e(qE,yMe),e(yMe,yTr),e(qE,xTr),e(qE,PU),e(PU,$Tr),e(qE,kTr),e(q,STr),e(q,jE),e(jE,xMe),e(xMe,RTr),e(jE,PTr),e(jE,BU),e(BU,BTr),e(jE,NTr),e(q,ITr),e(q,Ys),e(Ys,$Me),e($Me,qTr),e(Ys,jTr),e(Ys,NU),e(NU,DTr),e(Ys,GTr),e(Ys,IU),e(IU,OTr),e(Ys,VTr),e(q,XTr),e(q,DE),e(DE,kMe),e(kMe,zTr),e(DE,QTr),e(DE,qU),e(qU,WTr),e(DE,HTr),e(q,UTr),e(q,GE),e(GE,SMe),e(SMe,JTr),e(GE,YTr),e(GE,jU),e(jU,KTr),e(GE,ZTr),e(q,eMr),e(q,OE),e(OE,RMe),e(RMe,oMr),e(OE,rMr),e(OE,DU),e(DU,tMr),e(OE,aMr),e(q,nMr),e(q,VE),e(VE,PMe),e(PMe,sMr),e(VE,lMr),e(VE,GU),e(GU,iMr),e(VE,dMr),e(q,cMr),e(q,XE),e(XE,BMe),e(BMe,mMr),e(XE,fMr),e(XE,OU),e(OU,gMr),e(XE,hMr),e(q,uMr),e(q,zE),e(zE,NMe),e(NMe,pMr),e(zE,_Mr),e(zE,VU),e(VU,bMr),e(zE,vMr),e(q,FMr),e(q,QE),e(QE,IMe),e(IMe,TMr),e(QE,MMr),e(QE,XU),e(XU,EMr),e(QE,CMr),e(q,wMr),e(q,WE),e(WE,qMe),e(qMe,AMr),e(WE,LMr),e(WE,zU),e(zU,yMr),e(WE,xMr),e(q,$Mr),e(q,HE),e(HE,jMe),e(jMe,kMr),e(HE,SMr),e(HE,QU),e(QU,RMr),e(HE,PMr),e(q,BMr),e(q,UE),e(UE,DMe),e(DMe,NMr),e(UE,IMr),e(UE,WU),e(WU,qMr),e(UE,jMr),e(q,DMr),e(q,JE),e(JE,GMe),e(GMe,GMr),e(JE,OMr),e(JE,HU),e(HU,VMr),e(JE,XMr),e(q,zMr),e(q,YE),e(YE,OMe),e(OMe,QMr),e(YE,WMr),e(YE,UU),e(UU,HMr),e(YE,UMr),e(q,JMr),e(q,KE),e(KE,VMe),e(VMe,YMr),e(KE,KMr),e(KE,JU),e(JU,ZMr),e(KE,e4r),e(q,o4r),e(q,ZE),e(ZE,XMe),e(XMe,r4r),e(ZE,t4r),e(ZE,YU),e(YU,a4r),e(ZE,n4r),e(q,s4r),e(q,eC),e(eC,zMe),e(zMe,l4r),e(eC,i4r),e(eC,KU),e(KU,d4r),e(eC,c4r),e(q,m4r),e(q,oC),e(oC,QMe),e(QMe,f4r),e(oC,g4r),e(oC,ZU),e(ZU,h4r),e(oC,u4r),e(q,p4r),e(q,rC),e(rC,WMe),e(WMe,_4r),e(rC,b4r),e(rC,eJ),e(eJ,v4r),e(rC,F4r),e(q,T4r),e(q,tC),e(tC,HMe),e(HMe,M4r),e(tC,E4r),e(tC,oJ),e(oJ,C4r),e(tC,w4r),e(q,A4r),e(q,aC),e(aC,UMe),e(UMe,L4r),e(aC,y4r),e(aC,rJ),e(rJ,x4r),e(aC,$4r),e(q,k4r),e(q,nC),e(nC,JMe),e(JMe,S4r),e(nC,R4r),e(nC,tJ),e(tJ,P4r),e(nC,B4r),e(q,N4r),e(q,sC),e(sC,YMe),e(YMe,I4r),e(sC,q4r),e(sC,aJ),e(aJ,j4r),e(sC,D4r),e(q,G4r),e(q,lC),e(lC,KMe),e(KMe,O4r),e(lC,V4r),e(lC,nJ),e(nJ,X4r),e(lC,z4r),e(q,Q4r),e(q,iC),e(iC,ZMe),e(ZMe,W4r),e(iC,H4r),e(iC,sJ),e(sJ,U4r),e(iC,J4r),e(q,Y4r),e(q,dC),e(dC,e4e),e(e4e,K4r),e(dC,Z4r),e(dC,lJ),e(lJ,eEr),e(dC,oEr),e(q,rEr),e(q,cC),e(cC,o4e),e(o4e,tEr),e(cC,aEr),e(cC,iJ),e(iJ,nEr),e(cC,sEr),e(q,lEr),e(q,mC),e(mC,r4e),e(r4e,iEr),e(mC,dEr),e(mC,dJ),e(dJ,cEr),e(mC,mEr),e(q,fEr),e(q,fC),e(fC,t4e),e(t4e,gEr),e(fC,hEr),e(fC,cJ),e(cJ,uEr),e(fC,pEr),e(q,_Er),e(q,gC),e(gC,a4e),e(a4e,bEr),e(gC,vEr),e(gC,mJ),e(mJ,FEr),e(gC,TEr),e(q,MEr),e(q,hC),e(hC,n4e),e(n4e,EEr),e(hC,CEr),e(hC,fJ),e(fJ,wEr),e(hC,AEr),e(q,LEr),e(q,uC),e(uC,s4e),e(s4e,yEr),e(uC,xEr),e(uC,gJ),e(gJ,$Er),e(uC,kEr),e(q,SEr),e(q,pC),e(pC,l4e),e(l4e,REr),e(pC,PEr),e(pC,hJ),e(hJ,BEr),e(pC,NEr),e(xr,IEr),M(_C,xr,null),b(m,vze,_),b(m,cc,_),e(cc,bC),e(bC,i4e),M(K9,i4e,null),e(cc,qEr),e(cc,d4e),e(d4e,jEr),b(m,Fze,_),b(m,rr,_),M(Z9,rr,null),e(rr,DEr),e(rr,mc),e(mc,GEr),e(mc,uJ),e(uJ,OEr),e(mc,VEr),e(mc,pJ),e(pJ,XEr),e(mc,zEr),e(rr,QEr),e(rr,ex),e(ex,WEr),e(ex,c4e),e(c4e,HEr),e(ex,UEr),e(rr,JEr),e(rr,Pt),M(ox,Pt,null),e(Pt,YEr),e(Pt,m4e),e(m4e,KEr),e(Pt,ZEr),e(Pt,fc),e(fc,eCr),e(fc,f4e),e(f4e,oCr),e(fc,rCr),e(fc,_J),e(_J,tCr),e(fc,aCr),e(Pt,nCr),M(vC,Pt,null),e(rr,sCr),e(rr,$r),M(rx,$r,null),e($r,lCr),e($r,g4e),e(g4e,iCr),e($r,dCr),e($r,ln),e(ln,cCr),e(ln,h4e),e(h4e,mCr),e(ln,fCr),e(ln,u4e),e(u4e,gCr),e(ln,hCr),e(ln,p4e),e(p4e,uCr),e(ln,pCr),e($r,_Cr),e($r,se),e(se,FC),e(FC,_4e),e(_4e,bCr),e(FC,vCr),e(FC,bJ),e(bJ,FCr),e(FC,TCr),e(se,MCr),e(se,TC),e(TC,b4e),e(b4e,ECr),e(TC,CCr),e(TC,vJ),e(vJ,wCr),e(TC,ACr),e(se,LCr),e(se,MC),e(MC,v4e),e(v4e,yCr),e(MC,xCr),e(MC,FJ),e(FJ,$Cr),e(MC,kCr),e(se,SCr),e(se,EC),e(EC,F4e),e(F4e,RCr),e(EC,PCr),e(EC,TJ),e(TJ,BCr),e(EC,NCr),e(se,ICr),e(se,CC),e(CC,T4e),e(T4e,qCr),e(CC,jCr),e(CC,MJ),e(MJ,DCr),e(CC,GCr),e(se,OCr),e(se,wC),e(wC,M4e),e(M4e,VCr),e(wC,XCr),e(wC,EJ),e(EJ,zCr),e(wC,QCr),e(se,WCr),e(se,AC),e(AC,E4e),e(E4e,HCr),e(AC,UCr),e(AC,CJ),e(CJ,JCr),e(AC,YCr),e(se,KCr),e(se,LC),e(LC,C4e),e(C4e,ZCr),e(LC,e3r),e(LC,wJ),e(wJ,o3r),e(LC,r3r),e(se,t3r),e(se,yC),e(yC,w4e),e(w4e,a3r),e(yC,n3r),e(yC,AJ),e(AJ,s3r),e(yC,l3r),e(se,i3r),e(se,xC),e(xC,A4e),e(A4e,d3r),e(xC,c3r),e(xC,LJ),e(LJ,m3r),e(xC,f3r),e(se,g3r),e(se,$C),e($C,L4e),e(L4e,h3r),e($C,u3r),e($C,yJ),e(yJ,p3r),e($C,_3r),e(se,b3r),e(se,kC),e(kC,y4e),e(y4e,v3r),e(kC,F3r),e(kC,xJ),e(xJ,T3r),e(kC,M3r),e(se,E3r),e(se,SC),e(SC,x4e),e(x4e,C3r),e(SC,w3r),e(SC,$J),e($J,A3r),e(SC,L3r),e(se,y3r),e(se,RC),e(RC,$4e),e($4e,x3r),e(RC,$3r),e(RC,kJ),e(kJ,k3r),e(RC,S3r),e(se,R3r),e(se,PC),e(PC,k4e),e(k4e,P3r),e(PC,B3r),e(PC,SJ),e(SJ,N3r),e(PC,I3r),e(se,q3r),e(se,BC),e(BC,S4e),e(S4e,j3r),e(BC,D3r),e(BC,RJ),e(RJ,G3r),e(BC,O3r),e(se,V3r),e(se,NC),e(NC,R4e),e(R4e,X3r),e(NC,z3r),e(NC,PJ),e(PJ,Q3r),e(NC,W3r),e(se,H3r),e(se,IC),e(IC,P4e),e(P4e,U3r),e(IC,J3r),e(IC,BJ),e(BJ,Y3r),e(IC,K3r),e(se,Z3r),e(se,qC),e(qC,B4e),e(B4e,e5r),e(qC,o5r),e(qC,NJ),e(NJ,r5r),e(qC,t5r),e(se,a5r),e(se,jC),e(jC,N4e),e(N4e,n5r),e(jC,s5r),e(jC,IJ),e(IJ,l5r),e(jC,i5r),e(se,d5r),e(se,DC),e(DC,I4e),e(I4e,c5r),e(DC,m5r),e(DC,qJ),e(qJ,f5r),e(DC,g5r),e(se,h5r),e(se,GC),e(GC,q4e),e(q4e,u5r),e(GC,p5r),e(GC,jJ),e(jJ,_5r),e(GC,b5r),e(se,v5r),e(se,OC),e(OC,j4e),e(j4e,F5r),e(OC,T5r),e(OC,DJ),e(DJ,M5r),e(OC,E5r),e($r,C5r),M(VC,$r,null),b(m,Tze,_),b(m,gc,_),e(gc,XC),e(XC,D4e),M(tx,D4e,null),e(gc,w5r),e(gc,G4e),e(G4e,A5r),b(m,Mze,_),b(m,tr,_),M(ax,tr,null),e(tr,L5r),e(tr,hc),e(hc,y5r),e(hc,GJ),e(GJ,x5r),e(hc,$5r),e(hc,OJ),e(OJ,k5r),e(hc,S5r),e(tr,R5r),e(tr,nx),e(nx,P5r),e(nx,O4e),e(O4e,B5r),e(nx,N5r),e(tr,I5r),e(tr,Bt),M(sx,Bt,null),e(Bt,q5r),e(Bt,V4e),e(V4e,j5r),e(Bt,D5r),e(Bt,uc),e(uc,G5r),e(uc,X4e),e(X4e,O5r),e(uc,V5r),e(uc,VJ),e(VJ,X5r),e(uc,z5r),e(Bt,Q5r),M(zC,Bt,null),e(tr,W5r),e(tr,kr),M(lx,kr,null),e(kr,H5r),e(kr,z4e),e(z4e,U5r),e(kr,J5r),e(kr,dn),e(dn,Y5r),e(dn,Q4e),e(Q4e,K5r),e(dn,Z5r),e(dn,W4e),e(W4e,e0r),e(dn,o0r),e(dn,H4e),e(H4e,r0r),e(dn,t0r),e(kr,a0r),e(kr,Me),e(Me,QC),e(QC,U4e),e(U4e,n0r),e(QC,s0r),e(QC,XJ),e(XJ,l0r),e(QC,i0r),e(Me,d0r),e(Me,WC),e(WC,J4e),e(J4e,c0r),e(WC,m0r),e(WC,zJ),e(zJ,f0r),e(WC,g0r),e(Me,h0r),e(Me,HC),e(HC,Y4e),e(Y4e,u0r),e(HC,p0r),e(HC,QJ),e(QJ,_0r),e(HC,b0r),e(Me,v0r),e(Me,UC),e(UC,K4e),e(K4e,F0r),e(UC,T0r),e(UC,WJ),e(WJ,M0r),e(UC,E0r),e(Me,C0r),e(Me,JC),e(JC,Z4e),e(Z4e,w0r),e(JC,A0r),e(JC,HJ),e(HJ,L0r),e(JC,y0r),e(Me,x0r),e(Me,YC),e(YC,eEe),e(eEe,$0r),e(YC,k0r),e(YC,UJ),e(UJ,S0r),e(YC,R0r),e(Me,P0r),e(Me,KC),e(KC,oEe),e(oEe,B0r),e(KC,N0r),e(KC,JJ),e(JJ,I0r),e(KC,q0r),e(Me,j0r),e(Me,ZC),e(ZC,rEe),e(rEe,D0r),e(ZC,G0r),e(ZC,YJ),e(YJ,O0r),e(ZC,V0r),e(Me,X0r),e(Me,e3),e(e3,tEe),e(tEe,z0r),e(e3,Q0r),e(e3,KJ),e(KJ,W0r),e(e3,H0r),e(Me,U0r),e(Me,o3),e(o3,aEe),e(aEe,J0r),e(o3,Y0r),e(o3,ZJ),e(ZJ,K0r),e(o3,Z0r),e(Me,ewr),e(Me,r3),e(r3,nEe),e(nEe,owr),e(r3,rwr),e(r3,eY),e(eY,twr),e(r3,awr),e(Me,nwr),e(Me,t3),e(t3,sEe),e(sEe,swr),e(t3,lwr),e(t3,oY),e(oY,iwr),e(t3,dwr),e(Me,cwr),e(Me,a3),e(a3,lEe),e(lEe,mwr),e(a3,fwr),e(a3,rY),e(rY,gwr),e(a3,hwr),e(kr,uwr),M(n3,kr,null),b(m,Eze,_),b(m,pc,_),e(pc,s3),e(s3,iEe),M(ix,iEe,null),e(pc,pwr),e(pc,dEe),e(dEe,_wr),b(m,Cze,_),b(m,ar,_),M(dx,ar,null),e(ar,bwr),e(ar,_c),e(_c,vwr),e(_c,tY),e(tY,Fwr),e(_c,Twr),e(_c,aY),e(aY,Mwr),e(_c,Ewr),e(ar,Cwr),e(ar,cx),e(cx,wwr),e(cx,cEe),e(cEe,Awr),e(cx,Lwr),e(ar,ywr),e(ar,Nt),M(mx,Nt,null),e(Nt,xwr),e(Nt,mEe),e(mEe,$wr),e(Nt,kwr),e(Nt,bc),e(bc,Swr),e(bc,fEe),e(fEe,Rwr),e(bc,Pwr),e(bc,nY),e(nY,Bwr),e(bc,Nwr),e(Nt,Iwr),M(l3,Nt,null),e(ar,qwr),e(ar,Sr),M(fx,Sr,null),e(Sr,jwr),e(Sr,gEe),e(gEe,Dwr),e(Sr,Gwr),e(Sr,cn),e(cn,Owr),e(cn,hEe),e(hEe,Vwr),e(cn,Xwr),e(cn,uEe),e(uEe,zwr),e(cn,Qwr),e(cn,pEe),e(pEe,Wwr),e(cn,Hwr),e(Sr,Uwr),e(Sr,Qe),e(Qe,i3),e(i3,_Ee),e(_Ee,Jwr),e(i3,Ywr),e(i3,sY),e(sY,Kwr),e(i3,Zwr),e(Qe,eAr),e(Qe,d3),e(d3,bEe),e(bEe,oAr),e(d3,rAr),e(d3,lY),e(lY,tAr),e(d3,aAr),e(Qe,nAr),e(Qe,Ks),e(Ks,vEe),e(vEe,sAr),e(Ks,lAr),e(Ks,iY),e(iY,iAr),e(Ks,dAr),e(Ks,dY),e(dY,cAr),e(Ks,mAr),e(Qe,fAr),e(Qe,c3),e(c3,FEe),e(FEe,gAr),e(c3,hAr),e(c3,cY),e(cY,uAr),e(c3,pAr),e(Qe,_Ar),e(Qe,m3),e(m3,TEe),e(TEe,bAr),e(m3,vAr),e(m3,mY),e(mY,FAr),e(m3,TAr),e(Qe,MAr),e(Qe,f3),e(f3,MEe),e(MEe,EAr),e(f3,CAr),e(f3,fY),e(fY,wAr),e(f3,AAr),e(Qe,LAr),e(Qe,g3),e(g3,EEe),e(EEe,yAr),e(g3,xAr),e(g3,gY),e(gY,$Ar),e(g3,kAr),e(Sr,SAr),M(h3,Sr,null),b(m,wze,_),b(m,vc,_),e(vc,u3),e(u3,CEe),M(gx,CEe,null),e(vc,RAr),e(vc,wEe),e(wEe,PAr),b(m,Aze,_),b(m,nr,_),M(hx,nr,null),e(nr,BAr),e(nr,Fc),e(Fc,NAr),e(Fc,hY),e(hY,IAr),e(Fc,qAr),e(Fc,uY),e(uY,jAr),e(Fc,DAr),e(nr,GAr),e(nr,ux),e(ux,OAr),e(ux,AEe),e(AEe,VAr),e(ux,XAr),e(nr,zAr),e(nr,It),M(px,It,null),e(It,QAr),e(It,LEe),e(LEe,WAr),e(It,HAr),e(It,Tc),e(Tc,UAr),e(Tc,yEe),e(yEe,JAr),e(Tc,YAr),e(Tc,pY),e(pY,KAr),e(Tc,ZAr),e(It,e6r),M(p3,It,null),e(nr,o6r),e(nr,Rr),M(_x,Rr,null),e(Rr,r6r),e(Rr,xEe),e(xEe,t6r),e(Rr,a6r),e(Rr,mn),e(mn,n6r),e(mn,$Ee),e($Ee,s6r),e(mn,l6r),e(mn,kEe),e(kEe,i6r),e(mn,d6r),e(mn,SEe),e(SEe,c6r),e(mn,m6r),e(Rr,f6r),e(Rr,ie),e(ie,_3),e(_3,REe),e(REe,g6r),e(_3,h6r),e(_3,_Y),e(_Y,u6r),e(_3,p6r),e(ie,_6r),e(ie,b3),e(b3,PEe),e(PEe,b6r),e(b3,v6r),e(b3,bY),e(bY,F6r),e(b3,T6r),e(ie,M6r),e(ie,v3),e(v3,BEe),e(BEe,E6r),e(v3,C6r),e(v3,vY),e(vY,w6r),e(v3,A6r),e(ie,L6r),e(ie,F3),e(F3,NEe),e(NEe,y6r),e(F3,x6r),e(F3,FY),e(FY,$6r),e(F3,k6r),e(ie,S6r),e(ie,T3),e(T3,IEe),e(IEe,R6r),e(T3,P6r),e(T3,TY),e(TY,B6r),e(T3,N6r),e(ie,I6r),e(ie,M3),e(M3,qEe),e(qEe,q6r),e(M3,j6r),e(M3,MY),e(MY,D6r),e(M3,G6r),e(ie,O6r),e(ie,E3),e(E3,jEe),e(jEe,V6r),e(E3,X6r),e(E3,EY),e(EY,z6r),e(E3,Q6r),e(ie,W6r),e(ie,C3),e(C3,DEe),e(DEe,H6r),e(C3,U6r),e(C3,CY),e(CY,J6r),e(C3,Y6r),e(ie,K6r),e(ie,w3),e(w3,GEe),e(GEe,Z6r),e(w3,e7r),e(w3,wY),e(wY,o7r),e(w3,r7r),e(ie,t7r),e(ie,A3),e(A3,OEe),e(OEe,a7r),e(A3,n7r),e(A3,AY),e(AY,s7r),e(A3,l7r),e(ie,i7r),e(ie,L3),e(L3,VEe),e(VEe,d7r),e(L3,c7r),e(L3,LY),e(LY,m7r),e(L3,f7r),e(ie,g7r),e(ie,y3),e(y3,XEe),e(XEe,h7r),e(y3,u7r),e(y3,yY),e(yY,p7r),e(y3,_7r),e(ie,b7r),e(ie,x3),e(x3,zEe),e(zEe,v7r),e(x3,F7r),e(x3,xY),e(xY,T7r),e(x3,M7r),e(ie,E7r),e(ie,$3),e($3,QEe),e(QEe,C7r),e($3,w7r),e($3,$Y),e($Y,A7r),e($3,L7r),e(ie,y7r),e(ie,k3),e(k3,WEe),e(WEe,x7r),e(k3,$7r),e(k3,kY),e(kY,k7r),e(k3,S7r),e(ie,R7r),e(ie,S3),e(S3,HEe),e(HEe,P7r),e(S3,B7r),e(S3,SY),e(SY,N7r),e(S3,I7r),e(ie,q7r),e(ie,R3),e(R3,UEe),e(UEe,j7r),e(R3,D7r),e(R3,RY),e(RY,G7r),e(R3,O7r),e(ie,V7r),e(ie,P3),e(P3,JEe),e(JEe,X7r),e(P3,z7r),e(P3,PY),e(PY,Q7r),e(P3,W7r),e(ie,H7r),e(ie,B3),e(B3,YEe),e(YEe,U7r),e(B3,J7r),e(B3,BY),e(BY,Y7r),e(B3,K7r),e(ie,Z7r),e(ie,N3),e(N3,KEe),e(KEe,eLr),e(N3,oLr),e(N3,NY),e(NY,rLr),e(N3,tLr),e(Rr,aLr),M(I3,Rr,null),b(m,Lze,_),b(m,Mc,_),e(Mc,q3),e(q3,ZEe),M(bx,ZEe,null),e(Mc,nLr),e(Mc,eCe),e(eCe,sLr),b(m,yze,_),b(m,sr,_),M(vx,sr,null),e(sr,lLr),e(sr,Ec),e(Ec,iLr),e(Ec,IY),e(IY,dLr),e(Ec,cLr),e(Ec,qY),e(qY,mLr),e(Ec,fLr),e(sr,gLr),e(sr,Fx),e(Fx,hLr),e(Fx,oCe),e(oCe,uLr),e(Fx,pLr),e(sr,_Lr),e(sr,qt),M(Tx,qt,null),e(qt,bLr),e(qt,rCe),e(rCe,vLr),e(qt,FLr),e(qt,Cc),e(Cc,TLr),e(Cc,tCe),e(tCe,MLr),e(Cc,ELr),e(Cc,jY),e(jY,CLr),e(Cc,wLr),e(qt,ALr),M(j3,qt,null),e(sr,LLr),e(sr,Pr),M(Mx,Pr,null),e(Pr,yLr),e(Pr,aCe),e(aCe,xLr),e(Pr,$Lr),e(Pr,fn),e(fn,kLr),e(fn,nCe),e(nCe,SLr),e(fn,RLr),e(fn,sCe),e(sCe,PLr),e(fn,BLr),e(fn,lCe),e(lCe,NLr),e(fn,ILr),e(Pr,qLr),e(Pr,ye),e(ye,D3),e(D3,iCe),e(iCe,jLr),e(D3,DLr),e(D3,DY),e(DY,GLr),e(D3,OLr),e(ye,VLr),e(ye,G3),e(G3,dCe),e(dCe,XLr),e(G3,zLr),e(G3,GY),e(GY,QLr),e(G3,WLr),e(ye,HLr),e(ye,O3),e(O3,cCe),e(cCe,ULr),e(O3,JLr),e(O3,OY),e(OY,YLr),e(O3,KLr),e(ye,ZLr),e(ye,V3),e(V3,mCe),e(mCe,eyr),e(V3,oyr),e(V3,VY),e(VY,ryr),e(V3,tyr),e(ye,ayr),e(ye,X3),e(X3,fCe),e(fCe,nyr),e(X3,syr),e(X3,XY),e(XY,lyr),e(X3,iyr),e(ye,dyr),e(ye,z3),e(z3,gCe),e(gCe,cyr),e(z3,myr),e(z3,zY),e(zY,fyr),e(z3,gyr),e(ye,hyr),e(ye,Q3),e(Q3,hCe),e(hCe,uyr),e(Q3,pyr),e(Q3,QY),e(QY,_yr),e(Q3,byr),e(ye,vyr),e(ye,W3),e(W3,uCe),e(uCe,Fyr),e(W3,Tyr),e(W3,WY),e(WY,Myr),e(W3,Eyr),e(ye,Cyr),e(ye,H3),e(H3,pCe),e(pCe,wyr),e(H3,Ayr),e(H3,HY),e(HY,Lyr),e(H3,yyr),e(ye,xyr),e(ye,U3),e(U3,_Ce),e(_Ce,$yr),e(U3,kyr),e(U3,UY),e(UY,Syr),e(U3,Ryr),e(Pr,Pyr),M(J3,Pr,null),b(m,xze,_),b(m,wc,_),e(wc,Y3),e(Y3,bCe),M(Ex,bCe,null),e(wc,Byr),e(wc,vCe),e(vCe,Nyr),b(m,$ze,_),b(m,lr,_),M(Cx,lr,null),e(lr,Iyr),e(lr,Ac),e(Ac,qyr),e(Ac,JY),e(JY,jyr),e(Ac,Dyr),e(Ac,YY),e(YY,Gyr),e(Ac,Oyr),e(lr,Vyr),e(lr,wx),e(wx,Xyr),e(wx,FCe),e(FCe,zyr),e(wx,Qyr),e(lr,Wyr),e(lr,jt),M(Ax,jt,null),e(jt,Hyr),e(jt,TCe),e(TCe,Uyr),e(jt,Jyr),e(jt,Lc),e(Lc,Yyr),e(Lc,MCe),e(MCe,Kyr),e(Lc,Zyr),e(Lc,KY),e(KY,e8r),e(Lc,o8r),e(jt,r8r),M(K3,jt,null),e(lr,t8r),e(lr,Br),M(Lx,Br,null),e(Br,a8r),e(Br,ECe),e(ECe,n8r),e(Br,s8r),e(Br,gn),e(gn,l8r),e(gn,CCe),e(CCe,i8r),e(gn,d8r),e(gn,wCe),e(wCe,c8r),e(gn,m8r),e(gn,ACe),e(ACe,f8r),e(gn,g8r),e(Br,h8r),e(Br,te),e(te,Z3),e(Z3,LCe),e(LCe,u8r),e(Z3,p8r),e(Z3,ZY),e(ZY,_8r),e(Z3,b8r),e(te,v8r),e(te,e5),e(e5,yCe),e(yCe,F8r),e(e5,T8r),e(e5,eK),e(eK,M8r),e(e5,E8r),e(te,C8r),e(te,o5),e(o5,xCe),e(xCe,w8r),e(o5,A8r),e(o5,oK),e(oK,L8r),e(o5,y8r),e(te,x8r),e(te,r5),e(r5,$Ce),e($Ce,$8r),e(r5,k8r),e(r5,rK),e(rK,S8r),e(r5,R8r),e(te,P8r),e(te,t5),e(t5,kCe),e(kCe,B8r),e(t5,N8r),e(t5,tK),e(tK,I8r),e(t5,q8r),e(te,j8r),e(te,a5),e(a5,SCe),e(SCe,D8r),e(a5,G8r),e(a5,aK),e(aK,O8r),e(a5,V8r),e(te,X8r),e(te,n5),e(n5,RCe),e(RCe,z8r),e(n5,Q8r),e(n5,nK),e(nK,W8r),e(n5,H8r),e(te,U8r),e(te,s5),e(s5,PCe),e(PCe,J8r),e(s5,Y8r),e(s5,sK),e(sK,K8r),e(s5,Z8r),e(te,e9r),e(te,l5),e(l5,BCe),e(BCe,o9r),e(l5,r9r),e(l5,lK),e(lK,t9r),e(l5,a9r),e(te,n9r),e(te,i5),e(i5,NCe),e(NCe,s9r),e(i5,l9r),e(i5,iK),e(iK,i9r),e(i5,d9r),e(te,c9r),e(te,d5),e(d5,ICe),e(ICe,m9r),e(d5,f9r),e(d5,dK),e(dK,g9r),e(d5,h9r),e(te,u9r),e(te,c5),e(c5,qCe),e(qCe,p9r),e(c5,_9r),e(c5,cK),e(cK,b9r),e(c5,v9r),e(te,F9r),e(te,m5),e(m5,jCe),e(jCe,T9r),e(m5,M9r),e(m5,mK),e(mK,E9r),e(m5,C9r),e(te,w9r),e(te,f5),e(f5,DCe),e(DCe,A9r),e(f5,L9r),e(f5,fK),e(fK,y9r),e(f5,x9r),e(te,$9r),e(te,g5),e(g5,GCe),e(GCe,k9r),e(g5,S9r),e(g5,gK),e(gK,R9r),e(g5,P9r),e(te,B9r),e(te,h5),e(h5,OCe),e(OCe,N9r),e(h5,I9r),e(h5,hK),e(hK,q9r),e(h5,j9r),e(te,D9r),e(te,u5),e(u5,VCe),e(VCe,G9r),e(u5,O9r),e(u5,uK),e(uK,V9r),e(u5,X9r),e(te,z9r),e(te,p5),e(p5,XCe),e(XCe,Q9r),e(p5,W9r),e(p5,pK),e(pK,H9r),e(p5,U9r),e(te,J9r),e(te,_5),e(_5,zCe),e(zCe,Y9r),e(_5,K9r),e(_5,_K),e(_K,Z9r),e(_5,exr),e(te,oxr),e(te,b5),e(b5,QCe),e(QCe,rxr),e(b5,txr),e(b5,bK),e(bK,axr),e(b5,nxr),e(te,sxr),e(te,v5),e(v5,WCe),e(WCe,lxr),e(v5,ixr),e(v5,vK),e(vK,dxr),e(v5,cxr),e(te,mxr),e(te,F5),e(F5,HCe),e(HCe,fxr),e(F5,gxr),e(F5,FK),e(FK,hxr),e(F5,uxr),e(te,pxr),e(te,T5),e(T5,UCe),e(UCe,_xr),e(T5,bxr),e(T5,TK),e(TK,vxr),e(T5,Fxr),e(te,Txr),e(te,M5),e(M5,JCe),e(JCe,Mxr),e(M5,Exr),e(M5,MK),e(MK,Cxr),e(M5,wxr),e(te,Axr),e(te,E5),e(E5,YCe),e(YCe,Lxr),e(E5,yxr),e(E5,EK),e(EK,xxr),e(E5,$xr),e(te,kxr),e(te,C5),e(C5,KCe),e(KCe,Sxr),e(C5,Rxr),e(C5,CK),e(CK,Pxr),e(C5,Bxr),e(Br,Nxr),M(w5,Br,null),b(m,kze,_),b(m,yc,_),e(yc,A5),e(A5,ZCe),M(yx,ZCe,null),e(yc,Ixr),e(yc,e3e),e(e3e,qxr),b(m,Sze,_),b(m,ir,_),M(xx,ir,null),e(ir,jxr),e(ir,xc),e(xc,Dxr),e(xc,wK),e(wK,Gxr),e(xc,Oxr),e(xc,AK),e(AK,Vxr),e(xc,Xxr),e(ir,zxr),e(ir,$x),e($x,Qxr),e($x,o3e),e(o3e,Wxr),e($x,Hxr),e(ir,Uxr),e(ir,Dt),M(kx,Dt,null),e(Dt,Jxr),e(Dt,r3e),e(r3e,Yxr),e(Dt,Kxr),e(Dt,$c),e($c,Zxr),e($c,t3e),e(t3e,e$r),e($c,o$r),e($c,LK),e(LK,r$r),e($c,t$r),e(Dt,a$r),M(L5,Dt,null),e(ir,n$r),e(ir,Nr),M(Sx,Nr,null),e(Nr,s$r),e(Nr,a3e),e(a3e,l$r),e(Nr,i$r),e(Nr,hn),e(hn,d$r),e(hn,n3e),e(n3e,c$r),e(hn,m$r),e(hn,s3e),e(s3e,f$r),e(hn,g$r),e(hn,l3e),e(l3e,h$r),e(hn,u$r),e(Nr,p$r),e(Nr,_e),e(_e,y5),e(y5,i3e),e(i3e,_$r),e(y5,b$r),e(y5,yK),e(yK,v$r),e(y5,F$r),e(_e,T$r),e(_e,x5),e(x5,d3e),e(d3e,M$r),e(x5,E$r),e(x5,xK),e(xK,C$r),e(x5,w$r),e(_e,A$r),e(_e,$5),e($5,c3e),e(c3e,L$r),e($5,y$r),e($5,$K),e($K,x$r),e($5,$$r),e(_e,k$r),e(_e,k5),e(k5,m3e),e(m3e,S$r),e(k5,R$r),e(k5,kK),e(kK,P$r),e(k5,B$r),e(_e,N$r),e(_e,S5),e(S5,f3e),e(f3e,I$r),e(S5,q$r),e(S5,SK),e(SK,j$r),e(S5,D$r),e(_e,G$r),e(_e,R5),e(R5,g3e),e(g3e,O$r),e(R5,V$r),e(R5,RK),e(RK,X$r),e(R5,z$r),e(_e,Q$r),e(_e,P5),e(P5,h3e),e(h3e,W$r),e(P5,H$r),e(P5,PK),e(PK,U$r),e(P5,J$r),e(_e,Y$r),e(_e,B5),e(B5,u3e),e(u3e,K$r),e(B5,Z$r),e(B5,BK),e(BK,ekr),e(B5,okr),e(_e,rkr),e(_e,N5),e(N5,p3e),e(p3e,tkr),e(N5,akr),e(N5,NK),e(NK,nkr),e(N5,skr),e(_e,lkr),e(_e,I5),e(I5,_3e),e(_3e,ikr),e(I5,dkr),e(I5,IK),e(IK,ckr),e(I5,mkr),e(_e,fkr),e(_e,q5),e(q5,b3e),e(b3e,gkr),e(q5,hkr),e(q5,qK),e(qK,ukr),e(q5,pkr),e(_e,_kr),e(_e,j5),e(j5,v3e),e(v3e,bkr),e(j5,vkr),e(j5,jK),e(jK,Fkr),e(j5,Tkr),e(_e,Mkr),e(_e,D5),e(D5,F3e),e(F3e,Ekr),e(D5,Ckr),e(D5,DK),e(DK,wkr),e(D5,Akr),e(_e,Lkr),e(_e,G5),e(G5,T3e),e(T3e,ykr),e(G5,xkr),e(G5,GK),e(GK,$kr),e(G5,kkr),e(_e,Skr),e(_e,O5),e(O5,M3e),e(M3e,Rkr),e(O5,Pkr),e(O5,OK),e(OK,Bkr),e(O5,Nkr),e(_e,Ikr),e(_e,V5),e(V5,E3e),e(E3e,qkr),e(V5,jkr),e(V5,VK),e(VK,Dkr),e(V5,Gkr),e(_e,Okr),e(_e,X5),e(X5,C3e),e(C3e,Vkr),e(X5,Xkr),e(X5,XK),e(XK,zkr),e(X5,Qkr),e(Nr,Wkr),M(z5,Nr,null),b(m,Rze,_),b(m,kc,_),e(kc,Q5),e(Q5,w3e),M(Rx,w3e,null),e(kc,Hkr),e(kc,A3e),e(A3e,Ukr),b(m,Pze,_),b(m,dr,_),M(Px,dr,null),e(dr,Jkr),e(dr,Sc),e(Sc,Ykr),e(Sc,zK),e(zK,Kkr),e(Sc,Zkr),e(Sc,QK),e(QK,eSr),e(Sc,oSr),e(dr,rSr),e(dr,Bx),e(Bx,tSr),e(Bx,L3e),e(L3e,aSr),e(Bx,nSr),e(dr,sSr),e(dr,Gt),M(Nx,Gt,null),e(Gt,lSr),e(Gt,y3e),e(y3e,iSr),e(Gt,dSr),e(Gt,Rc),e(Rc,cSr),e(Rc,x3e),e(x3e,mSr),e(Rc,fSr),e(Rc,WK),e(WK,gSr),e(Rc,hSr),e(Gt,uSr),M(W5,Gt,null),e(dr,pSr),e(dr,Ir),M(Ix,Ir,null),e(Ir,_Sr),e(Ir,$3e),e($3e,bSr),e(Ir,vSr),e(Ir,un),e(un,FSr),e(un,k3e),e(k3e,TSr),e(un,MSr),e(un,S3e),e(S3e,ESr),e(un,CSr),e(un,R3e),e(R3e,wSr),e(un,ASr),e(Ir,LSr),e(Ir,qx),e(qx,H5),e(H5,P3e),e(P3e,ySr),e(H5,xSr),e(H5,HK),e(HK,$Sr),e(H5,kSr),e(qx,SSr),e(qx,U5),e(U5,B3e),e(B3e,RSr),e(U5,PSr),e(U5,UK),e(UK,BSr),e(U5,NSr),e(Ir,ISr),M(J5,Ir,null),b(m,Bze,_),b(m,Pc,_),e(Pc,Y5),e(Y5,N3e),M(jx,N3e,null),e(Pc,qSr),e(Pc,I3e),e(I3e,jSr),b(m,Nze,_),b(m,cr,_),M(Dx,cr,null),e(cr,DSr),e(cr,Bc),e(Bc,GSr),e(Bc,JK),e(JK,OSr),e(Bc,VSr),e(Bc,YK),e(YK,XSr),e(Bc,zSr),e(cr,QSr),e(cr,Gx),e(Gx,WSr),e(Gx,q3e),e(q3e,HSr),e(Gx,USr),e(cr,JSr),e(cr,Ot),M(Ox,Ot,null),e(Ot,YSr),e(Ot,j3e),e(j3e,KSr),e(Ot,ZSr),e(Ot,Nc),e(Nc,eRr),e(Nc,D3e),e(D3e,oRr),e(Nc,rRr),e(Nc,KK),e(KK,tRr),e(Nc,aRr),e(Ot,nRr),M(K5,Ot,null),e(cr,sRr),e(cr,qr),M(Vx,qr,null),e(qr,lRr),e(qr,G3e),e(G3e,iRr),e(qr,dRr),e(qr,pn),e(pn,cRr),e(pn,O3e),e(O3e,mRr),e(pn,fRr),e(pn,V3e),e(V3e,gRr),e(pn,hRr),e(pn,X3e),e(X3e,uRr),e(pn,pRr),e(qr,_Rr),e(qr,z3e),e(z3e,Z5),e(Z5,Q3e),e(Q3e,bRr),e(Z5,vRr),e(Z5,ZK),e(ZK,FRr),e(Z5,TRr),e(qr,MRr),M(e0,qr,null),b(m,Ize,_),b(m,Ic,_),e(Ic,o0),e(o0,W3e),M(Xx,W3e,null),e(Ic,ERr),e(Ic,H3e),e(H3e,CRr),b(m,qze,_),b(m,mr,_),M(zx,mr,null),e(mr,wRr),e(mr,qc),e(qc,ARr),e(qc,eZ),e(eZ,LRr),e(qc,yRr),e(qc,oZ),e(oZ,xRr),e(qc,$Rr),e(mr,kRr),e(mr,Qx),e(Qx,SRr),e(Qx,U3e),e(U3e,RRr),e(Qx,PRr),e(mr,BRr),e(mr,Vt),M(Wx,Vt,null),e(Vt,NRr),e(Vt,J3e),e(J3e,IRr),e(Vt,qRr),e(Vt,jc),e(jc,jRr),e(jc,Y3e),e(Y3e,DRr),e(jc,GRr),e(jc,rZ),e(rZ,ORr),e(jc,VRr),e(Vt,XRr),M(r0,Vt,null),e(mr,zRr),e(mr,jr),M(Hx,jr,null),e(jr,QRr),e(jr,K3e),e(K3e,WRr),e(jr,HRr),e(jr,_n),e(_n,URr),e(_n,Z3e),e(Z3e,JRr),e(_n,YRr),e(_n,e5e),e(e5e,KRr),e(_n,ZRr),e(_n,o5e),e(o5e,ePr),e(_n,oPr),e(jr,rPr),e(jr,de),e(de,t0),e(t0,r5e),e(r5e,tPr),e(t0,aPr),e(t0,tZ),e(tZ,nPr),e(t0,sPr),e(de,lPr),e(de,a0),e(a0,t5e),e(t5e,iPr),e(a0,dPr),e(a0,aZ),e(aZ,cPr),e(a0,mPr),e(de,fPr),e(de,n0),e(n0,a5e),e(a5e,gPr),e(n0,hPr),e(n0,nZ),e(nZ,uPr),e(n0,pPr),e(de,_Pr),e(de,s0),e(s0,n5e),e(n5e,bPr),e(s0,vPr),e(s0,sZ),e(sZ,FPr),e(s0,TPr),e(de,MPr),e(de,l0),e(l0,s5e),e(s5e,EPr),e(l0,CPr),e(l0,lZ),e(lZ,wPr),e(l0,APr),e(de,LPr),e(de,i0),e(i0,l5e),e(l5e,yPr),e(i0,xPr),e(i0,iZ),e(iZ,$Pr),e(i0,kPr),e(de,SPr),e(de,d0),e(d0,i5e),e(i5e,RPr),e(d0,PPr),e(d0,dZ),e(dZ,BPr),e(d0,NPr),e(de,IPr),e(de,c0),e(c0,d5e),e(d5e,qPr),e(c0,jPr),e(c0,cZ),e(cZ,DPr),e(c0,GPr),e(de,OPr),e(de,m0),e(m0,c5e),e(c5e,VPr),e(m0,XPr),e(m0,mZ),e(mZ,zPr),e(m0,QPr),e(de,WPr),e(de,f0),e(f0,m5e),e(m5e,HPr),e(f0,UPr),e(f0,fZ),e(fZ,JPr),e(f0,YPr),e(de,KPr),e(de,g0),e(g0,f5e),e(f5e,ZPr),e(g0,eBr),e(g0,gZ),e(gZ,oBr),e(g0,rBr),e(de,tBr),e(de,h0),e(h0,g5e),e(g5e,aBr),e(h0,nBr),e(h0,hZ),e(hZ,sBr),e(h0,lBr),e(de,iBr),e(de,u0),e(u0,h5e),e(h5e,dBr),e(u0,cBr),e(u0,uZ),e(uZ,mBr),e(u0,fBr),e(de,gBr),e(de,p0),e(p0,u5e),e(u5e,hBr),e(p0,uBr),e(p0,pZ),e(pZ,pBr),e(p0,_Br),e(de,bBr),e(de,_0),e(_0,p5e),e(p5e,vBr),e(_0,FBr),e(_0,_Z),e(_Z,TBr),e(_0,MBr),e(de,EBr),e(de,b0),e(b0,_5e),e(_5e,CBr),e(b0,wBr),e(b0,bZ),e(bZ,ABr),e(b0,LBr),e(de,yBr),e(de,v0),e(v0,b5e),e(b5e,xBr),e(v0,$Br),e(v0,vZ),e(vZ,kBr),e(v0,SBr),e(de,RBr),e(de,F0),e(F0,v5e),e(v5e,PBr),e(F0,BBr),e(F0,FZ),e(FZ,NBr),e(F0,IBr),e(de,qBr),e(de,T0),e(T0,F5e),e(F5e,jBr),e(T0,DBr),e(T0,TZ),e(TZ,GBr),e(T0,OBr),e(de,VBr),e(de,M0),e(M0,T5e),e(T5e,XBr),e(M0,zBr),e(M0,MZ),e(MZ,QBr),e(M0,WBr),e(jr,HBr),M(E0,jr,null),b(m,jze,_),b(m,Dc,_),e(Dc,C0),e(C0,M5e),M(Ux,M5e,null),e(Dc,UBr),e(Dc,E5e),e(E5e,JBr),b(m,Dze,_),b(m,fr,_),M(Jx,fr,null),e(fr,YBr),e(fr,Gc),e(Gc,KBr),e(Gc,EZ),e(EZ,ZBr),e(Gc,eNr),e(Gc,CZ),e(CZ,oNr),e(Gc,rNr),e(fr,tNr),e(fr,Yx),e(Yx,aNr),e(Yx,C5e),e(C5e,nNr),e(Yx,sNr),e(fr,lNr),e(fr,Xt),M(Kx,Xt,null),e(Xt,iNr),e(Xt,w5e),e(w5e,dNr),e(Xt,cNr),e(Xt,Oc),e(Oc,mNr),e(Oc,A5e),e(A5e,fNr),e(Oc,gNr),e(Oc,wZ),e(wZ,hNr),e(Oc,uNr),e(Xt,pNr),M(w0,Xt,null),e(fr,_Nr),e(fr,Dr),M(Zx,Dr,null),e(Dr,bNr),e(Dr,L5e),e(L5e,vNr),e(Dr,FNr),e(Dr,bn),e(bn,TNr),e(bn,y5e),e(y5e,MNr),e(bn,ENr),e(bn,x5e),e(x5e,CNr),e(bn,wNr),e(bn,$5e),e($5e,ANr),e(bn,LNr),e(Dr,yNr),e(Dr,ce),e(ce,A0),e(A0,k5e),e(k5e,xNr),e(A0,$Nr),e(A0,AZ),e(AZ,kNr),e(A0,SNr),e(ce,RNr),e(ce,L0),e(L0,S5e),e(S5e,PNr),e(L0,BNr),e(L0,LZ),e(LZ,NNr),e(L0,INr),e(ce,qNr),e(ce,y0),e(y0,R5e),e(R5e,jNr),e(y0,DNr),e(y0,yZ),e(yZ,GNr),e(y0,ONr),e(ce,VNr),e(ce,x0),e(x0,P5e),e(P5e,XNr),e(x0,zNr),e(x0,xZ),e(xZ,QNr),e(x0,WNr),e(ce,HNr),e(ce,$0),e($0,B5e),e(B5e,UNr),e($0,JNr),e($0,$Z),e($Z,YNr),e($0,KNr),e(ce,ZNr),e(ce,k0),e(k0,N5e),e(N5e,eIr),e(k0,oIr),e(k0,kZ),e(kZ,rIr),e(k0,tIr),e(ce,aIr),e(ce,S0),e(S0,I5e),e(I5e,nIr),e(S0,sIr),e(S0,SZ),e(SZ,lIr),e(S0,iIr),e(ce,dIr),e(ce,R0),e(R0,q5e),e(q5e,cIr),e(R0,mIr),e(R0,RZ),e(RZ,fIr),e(R0,gIr),e(ce,hIr),e(ce,P0),e(P0,j5e),e(j5e,uIr),e(P0,pIr),e(P0,PZ),e(PZ,_Ir),e(P0,bIr),e(ce,vIr),e(ce,B0),e(B0,D5e),e(D5e,FIr),e(B0,TIr),e(B0,BZ),e(BZ,MIr),e(B0,EIr),e(ce,CIr),e(ce,N0),e(N0,G5e),e(G5e,wIr),e(N0,AIr),e(N0,NZ),e(NZ,LIr),e(N0,yIr),e(ce,xIr),e(ce,I0),e(I0,O5e),e(O5e,$Ir),e(I0,kIr),e(I0,IZ),e(IZ,SIr),e(I0,RIr),e(ce,PIr),e(ce,q0),e(q0,V5e),e(V5e,BIr),e(q0,NIr),e(q0,qZ),e(qZ,IIr),e(q0,qIr),e(ce,jIr),e(ce,j0),e(j0,X5e),e(X5e,DIr),e(j0,GIr),e(j0,jZ),e(jZ,OIr),e(j0,VIr),e(ce,XIr),e(ce,D0),e(D0,z5e),e(z5e,zIr),e(D0,QIr),e(D0,DZ),e(DZ,WIr),e(D0,HIr),e(ce,UIr),e(ce,G0),e(G0,Q5e),e(Q5e,JIr),e(G0,YIr),e(G0,GZ),e(GZ,KIr),e(G0,ZIr),e(ce,eqr),e(ce,O0),e(O0,W5e),e(W5e,oqr),e(O0,rqr),e(O0,OZ),e(OZ,tqr),e(O0,aqr),e(ce,nqr),e(ce,V0),e(V0,H5e),e(H5e,sqr),e(V0,lqr),e(V0,VZ),e(VZ,iqr),e(V0,dqr),e(ce,cqr),e(ce,X0),e(X0,U5e),e(U5e,mqr),e(X0,fqr),e(X0,XZ),e(XZ,gqr),e(X0,hqr),e(ce,uqr),e(ce,z0),e(z0,J5e),e(J5e,pqr),e(z0,_qr),e(z0,zZ),e(zZ,bqr),e(z0,vqr),e(Dr,Fqr),M(Q0,Dr,null),b(m,Gze,_),b(m,Vc,_),e(Vc,W0),e(W0,Y5e),M(e$,Y5e,null),e(Vc,Tqr),e(Vc,K5e),e(K5e,Mqr),b(m,Oze,_),b(m,gr,_),M(o$,gr,null),e(gr,Eqr),e(gr,Xc),e(Xc,Cqr),e(Xc,QZ),e(QZ,wqr),e(Xc,Aqr),e(Xc,WZ),e(WZ,Lqr),e(Xc,yqr),e(gr,xqr),e(gr,r$),e(r$,$qr),e(r$,Z5e),e(Z5e,kqr),e(r$,Sqr),e(gr,Rqr),e(gr,zt),M(t$,zt,null),e(zt,Pqr),e(zt,e0e),e(e0e,Bqr),e(zt,Nqr),e(zt,zc),e(zc,Iqr),e(zc,o0e),e(o0e,qqr),e(zc,jqr),e(zc,HZ),e(HZ,Dqr),e(zc,Gqr),e(zt,Oqr),M(H0,zt,null),e(gr,Vqr),e(gr,Gr),M(a$,Gr,null),e(Gr,Xqr),e(Gr,r0e),e(r0e,zqr),e(Gr,Qqr),e(Gr,vn),e(vn,Wqr),e(vn,t0e),e(t0e,Hqr),e(vn,Uqr),e(vn,a0e),e(a0e,Jqr),e(vn,Yqr),e(vn,n0e),e(n0e,Kqr),e(vn,Zqr),e(Gr,ejr),e(Gr,s0e),e(s0e,U0),e(U0,l0e),e(l0e,ojr),e(U0,rjr),e(U0,UZ),e(UZ,tjr),e(U0,ajr),e(Gr,njr),M(J0,Gr,null),b(m,Vze,_),b(m,Qc,_),e(Qc,Y0),e(Y0,i0e),M(n$,i0e,null),e(Qc,sjr),e(Qc,d0e),e(d0e,ljr),b(m,Xze,_),b(m,hr,_),M(s$,hr,null),e(hr,ijr),e(hr,Wc),e(Wc,djr),e(Wc,JZ),e(JZ,cjr),e(Wc,mjr),e(Wc,YZ),e(YZ,fjr),e(Wc,gjr),e(hr,hjr),e(hr,l$),e(l$,ujr),e(l$,c0e),e(c0e,pjr),e(l$,_jr),e(hr,bjr),e(hr,Qt),M(i$,Qt,null),e(Qt,vjr),e(Qt,m0e),e(m0e,Fjr),e(Qt,Tjr),e(Qt,Hc),e(Hc,Mjr),e(Hc,f0e),e(f0e,Ejr),e(Hc,Cjr),e(Hc,KZ),e(KZ,wjr),e(Hc,Ajr),e(Qt,Ljr),M(K0,Qt,null),e(hr,yjr),e(hr,Or),M(d$,Or,null),e(Or,xjr),e(Or,g0e),e(g0e,$jr),e(Or,kjr),e(Or,Fn),e(Fn,Sjr),e(Fn,h0e),e(h0e,Rjr),e(Fn,Pjr),e(Fn,u0e),e(u0e,Bjr),e(Fn,Njr),e(Fn,p0e),e(p0e,Ijr),e(Fn,qjr),e(Or,jjr),e(Or,_0e),e(_0e,Z0),e(Z0,b0e),e(b0e,Djr),e(Z0,Gjr),e(Z0,ZZ),e(ZZ,Ojr),e(Z0,Vjr),e(Or,Xjr),M(ew,Or,null),b(m,zze,_),b(m,Uc,_),e(Uc,ow),e(ow,v0e),M(c$,v0e,null),e(Uc,zjr),e(Uc,F0e),e(F0e,Qjr),b(m,Qze,_),b(m,ur,_),M(m$,ur,null),e(ur,Wjr),e(ur,Jc),e(Jc,Hjr),e(Jc,eee),e(eee,Ujr),e(Jc,Jjr),e(Jc,oee),e(oee,Yjr),e(Jc,Kjr),e(ur,Zjr),e(ur,f$),e(f$,eDr),e(f$,T0e),e(T0e,oDr),e(f$,rDr),e(ur,tDr),e(ur,Wt),M(g$,Wt,null),e(Wt,aDr),e(Wt,M0e),e(M0e,nDr),e(Wt,sDr),e(Wt,Yc),e(Yc,lDr),e(Yc,E0e),e(E0e,iDr),e(Yc,dDr),e(Yc,ree),e(ree,cDr),e(Yc,mDr),e(Wt,fDr),M(rw,Wt,null),e(ur,gDr),e(ur,Vr),M(h$,Vr,null),e(Vr,hDr),e(Vr,C0e),e(C0e,uDr),e(Vr,pDr),e(Vr,Tn),e(Tn,_Dr),e(Tn,w0e),e(w0e,bDr),e(Tn,vDr),e(Tn,A0e),e(A0e,FDr),e(Tn,TDr),e(Tn,L0e),e(L0e,MDr),e(Tn,EDr),e(Vr,CDr),e(Vr,oe),e(oe,tw),e(tw,y0e),e(y0e,wDr),e(tw,ADr),e(tw,tee),e(tee,LDr),e(tw,yDr),e(oe,xDr),e(oe,aw),e(aw,x0e),e(x0e,$Dr),e(aw,kDr),e(aw,aee),e(aee,SDr),e(aw,RDr),e(oe,PDr),e(oe,nw),e(nw,$0e),e($0e,BDr),e(nw,NDr),e(nw,nee),e(nee,IDr),e(nw,qDr),e(oe,jDr),e(oe,sw),e(sw,k0e),e(k0e,DDr),e(sw,GDr),e(sw,see),e(see,ODr),e(sw,VDr),e(oe,XDr),e(oe,lw),e(lw,S0e),e(S0e,zDr),e(lw,QDr),e(lw,lee),e(lee,WDr),e(lw,HDr),e(oe,UDr),e(oe,iw),e(iw,R0e),e(R0e,JDr),e(iw,YDr),e(iw,iee),e(iee,KDr),e(iw,ZDr),e(oe,eGr),e(oe,dw),e(dw,P0e),e(P0e,oGr),e(dw,rGr),e(dw,dee),e(dee,tGr),e(dw,aGr),e(oe,nGr),e(oe,cw),e(cw,B0e),e(B0e,sGr),e(cw,lGr),e(cw,cee),e(cee,iGr),e(cw,dGr),e(oe,cGr),e(oe,mw),e(mw,N0e),e(N0e,mGr),e(mw,fGr),e(mw,mee),e(mee,gGr),e(mw,hGr),e(oe,uGr),e(oe,fw),e(fw,I0e),e(I0e,pGr),e(fw,_Gr),e(fw,fee),e(fee,bGr),e(fw,vGr),e(oe,FGr),e(oe,gw),e(gw,q0e),e(q0e,TGr),e(gw,MGr),e(gw,gee),e(gee,EGr),e(gw,CGr),e(oe,wGr),e(oe,hw),e(hw,j0e),e(j0e,AGr),e(hw,LGr),e(hw,hee),e(hee,yGr),e(hw,xGr),e(oe,$Gr),e(oe,uw),e(uw,D0e),e(D0e,kGr),e(uw,SGr),e(uw,uee),e(uee,RGr),e(uw,PGr),e(oe,BGr),e(oe,pw),e(pw,G0e),e(G0e,NGr),e(pw,IGr),e(pw,pee),e(pee,qGr),e(pw,jGr),e(oe,DGr),e(oe,_w),e(_w,O0e),e(O0e,GGr),e(_w,OGr),e(_w,_ee),e(_ee,VGr),e(_w,XGr),e(oe,zGr),e(oe,bw),e(bw,V0e),e(V0e,QGr),e(bw,WGr),e(bw,bee),e(bee,HGr),e(bw,UGr),e(oe,JGr),e(oe,vw),e(vw,X0e),e(X0e,YGr),e(vw,KGr),e(vw,vee),e(vee,ZGr),e(vw,eOr),e(oe,oOr),e(oe,Fw),e(Fw,z0e),e(z0e,rOr),e(Fw,tOr),e(Fw,Fee),e(Fee,aOr),e(Fw,nOr),e(oe,sOr),e(oe,Tw),e(Tw,Q0e),e(Q0e,lOr),e(Tw,iOr),e(Tw,Tee),e(Tee,dOr),e(Tw,cOr),e(oe,mOr),e(oe,Mw),e(Mw,W0e),e(W0e,fOr),e(Mw,gOr),e(Mw,Mee),e(Mee,hOr),e(Mw,uOr),e(oe,pOr),e(oe,Ew),e(Ew,H0e),e(H0e,_Or),e(Ew,bOr),e(Ew,Eee),e(Eee,vOr),e(Ew,FOr),e(oe,TOr),e(oe,Cw),e(Cw,U0e),e(U0e,MOr),e(Cw,EOr),e(Cw,Cee),e(Cee,COr),e(Cw,wOr),e(oe,AOr),e(oe,ww),e(ww,J0e),e(J0e,LOr),e(ww,yOr),e(ww,wee),e(wee,xOr),e(ww,$Or),e(oe,kOr),e(oe,Aw),e(Aw,Y0e),e(Y0e,SOr),e(Aw,ROr),e(Aw,Aee),e(Aee,POr),e(Aw,BOr),e(oe,NOr),e(oe,Lw),e(Lw,K0e),e(K0e,IOr),e(Lw,qOr),e(Lw,Lee),e(Lee,jOr),e(Lw,DOr),e(oe,GOr),e(oe,yw),e(yw,Z0e),e(Z0e,OOr),e(yw,VOr),e(yw,yee),e(yee,XOr),e(yw,zOr),e(oe,QOr),e(oe,xw),e(xw,ewe),e(ewe,WOr),e(xw,HOr),e(xw,xee),e(xee,UOr),e(xw,JOr),e(Vr,YOr),M($w,Vr,null),b(m,Wze,_),b(m,Kc,_),e(Kc,kw),e(kw,owe),M(u$,owe,null),e(Kc,KOr),e(Kc,rwe),e(rwe,ZOr),b(m,Hze,_),b(m,pr,_),M(p$,pr,null),e(pr,eVr),e(pr,Zc),e(Zc,oVr),e(Zc,$ee),e($ee,rVr),e(Zc,tVr),e(Zc,kee),e(kee,aVr),e(Zc,nVr),e(pr,sVr),e(pr,_$),e(_$,lVr),e(_$,twe),e(twe,iVr),e(_$,dVr),e(pr,cVr),e(pr,Ht),M(b$,Ht,null),e(Ht,mVr),e(Ht,awe),e(awe,fVr),e(Ht,gVr),e(Ht,em),e(em,hVr),e(em,nwe),e(nwe,uVr),e(em,pVr),e(em,See),e(See,_Vr),e(em,bVr),e(Ht,vVr),M(Sw,Ht,null),e(pr,FVr),e(pr,Xr),M(v$,Xr,null),e(Xr,TVr),e(Xr,swe),e(swe,MVr),e(Xr,EVr),e(Xr,Mn),e(Mn,CVr),e(Mn,lwe),e(lwe,wVr),e(Mn,AVr),e(Mn,iwe),e(iwe,LVr),e(Mn,yVr),e(Mn,dwe),e(dwe,xVr),e(Mn,$Vr),e(Xr,kVr),e(Xr,xe),e(xe,Rw),e(Rw,cwe),e(cwe,SVr),e(Rw,RVr),e(Rw,Ree),e(Ree,PVr),e(Rw,BVr),e(xe,NVr),e(xe,Pw),e(Pw,mwe),e(mwe,IVr),e(Pw,qVr),e(Pw,Pee),e(Pee,jVr),e(Pw,DVr),e(xe,GVr),e(xe,Bw),e(Bw,fwe),e(fwe,OVr),e(Bw,VVr),e(Bw,Bee),e(Bee,XVr),e(Bw,zVr),e(xe,QVr),e(xe,Nw),e(Nw,gwe),e(gwe,WVr),e(Nw,HVr),e(Nw,Nee),e(Nee,UVr),e(Nw,JVr),e(xe,YVr),e(xe,Iw),e(Iw,hwe),e(hwe,KVr),e(Iw,ZVr),e(Iw,Iee),e(Iee,eXr),e(Iw,oXr),e(xe,rXr),e(xe,qw),e(qw,uwe),e(uwe,tXr),e(qw,aXr),e(qw,qee),e(qee,nXr),e(qw,sXr),e(xe,lXr),e(xe,jw),e(jw,pwe),e(pwe,iXr),e(jw,dXr),e(jw,jee),e(jee,cXr),e(jw,mXr),e(xe,fXr),e(xe,Dw),e(Dw,_we),e(_we,gXr),e(Dw,hXr),e(Dw,Dee),e(Dee,uXr),e(Dw,pXr),e(xe,_Xr),e(xe,Gw),e(Gw,bwe),e(bwe,bXr),e(Gw,vXr),e(Gw,Gee),e(Gee,FXr),e(Gw,TXr),e(xe,MXr),e(xe,Ow),e(Ow,vwe),e(vwe,EXr),e(Ow,CXr),e(Ow,Oee),e(Oee,wXr),e(Ow,AXr),e(Xr,LXr),M(Vw,Xr,null),b(m,Uze,_),b(m,om,_),e(om,Xw),e(Xw,Fwe),M(F$,Fwe,null),e(om,yXr),e(om,Twe),e(Twe,xXr),b(m,Jze,_),b(m,_r,_),M(T$,_r,null),e(_r,$Xr),e(_r,rm),e(rm,kXr),e(rm,Vee),e(Vee,SXr),e(rm,RXr),e(rm,Xee),e(Xee,PXr),e(rm,BXr),e(_r,NXr),e(_r,M$),e(M$,IXr),e(M$,Mwe),e(Mwe,qXr),e(M$,jXr),e(_r,DXr),e(_r,Ut),M(E$,Ut,null),e(Ut,GXr),e(Ut,Ewe),e(Ewe,OXr),e(Ut,VXr),e(Ut,tm),e(tm,XXr),e(tm,Cwe),e(Cwe,zXr),e(tm,QXr),e(tm,zee),e(zee,WXr),e(tm,HXr),e(Ut,UXr),M(zw,Ut,null),e(_r,JXr),e(_r,zr),M(C$,zr,null),e(zr,YXr),e(zr,wwe),e(wwe,KXr),e(zr,ZXr),e(zr,En),e(En,ezr),e(En,Awe),e(Awe,ozr),e(En,rzr),e(En,Lwe),e(Lwe,tzr),e(En,azr),e(En,ywe),e(ywe,nzr),e(En,szr),e(zr,lzr),e(zr,Ee),e(Ee,Qw),e(Qw,xwe),e(xwe,izr),e(Qw,dzr),e(Qw,Qee),e(Qee,czr),e(Qw,mzr),e(Ee,fzr),e(Ee,Ww),e(Ww,$we),e($we,gzr),e(Ww,hzr),e(Ww,Wee),e(Wee,uzr),e(Ww,pzr),e(Ee,_zr),e(Ee,Hw),e(Hw,kwe),e(kwe,bzr),e(Hw,vzr),e(Hw,Hee),e(Hee,Fzr),e(Hw,Tzr),e(Ee,Mzr),e(Ee,Uw),e(Uw,Swe),e(Swe,Ezr),e(Uw,Czr),e(Uw,Uee),e(Uee,wzr),e(Uw,Azr),e(Ee,Lzr),e(Ee,Jw),e(Jw,Rwe),e(Rwe,yzr),e(Jw,xzr),e(Jw,Jee),e(Jee,$zr),e(Jw,kzr),e(Ee,Szr),e(Ee,Yw),e(Yw,Pwe),e(Pwe,Rzr),e(Yw,Pzr),e(Yw,Yee),e(Yee,Bzr),e(Yw,Nzr),e(Ee,Izr),e(Ee,Kw),e(Kw,Bwe),e(Bwe,qzr),e(Kw,jzr),e(Kw,Kee),e(Kee,Dzr),e(Kw,Gzr),e(Ee,Ozr),e(Ee,Zw),e(Zw,Nwe),e(Nwe,Vzr),e(Zw,Xzr),e(Zw,Zee),e(Zee,zzr),e(Zw,Qzr),e(Ee,Wzr),e(Ee,eA),e(eA,Iwe),e(Iwe,Hzr),e(eA,Uzr),e(eA,eoe),e(eoe,Jzr),e(eA,Yzr),e(Ee,Kzr),e(Ee,oA),e(oA,qwe),e(qwe,Zzr),e(oA,eQr),e(oA,ooe),e(ooe,oQr),e(oA,rQr),e(Ee,tQr),e(Ee,rA),e(rA,jwe),e(jwe,aQr),e(rA,nQr),e(rA,roe),e(roe,sQr),e(rA,lQr),e(Ee,iQr),e(Ee,tA),e(tA,Dwe),e(Dwe,dQr),e(tA,cQr),e(tA,toe),e(toe,mQr),e(tA,fQr),e(Ee,gQr),e(Ee,aA),e(aA,Gwe),e(Gwe,hQr),e(aA,uQr),e(aA,aoe),e(aoe,pQr),e(aA,_Qr),e(zr,bQr),M(nA,zr,null),b(m,Yze,_),b(m,am,_),e(am,sA),e(sA,Owe),M(w$,Owe,null),e(am,vQr),e(am,Vwe),e(Vwe,FQr),b(m,Kze,_),b(m,br,_),M(A$,br,null),e(br,TQr),e(br,nm),e(nm,MQr),e(nm,noe),e(noe,EQr),e(nm,CQr),e(nm,soe),e(soe,wQr),e(nm,AQr),e(br,LQr),e(br,L$),e(L$,yQr),e(L$,Xwe),e(Xwe,xQr),e(L$,$Qr),e(br,kQr),e(br,Jt),M(y$,Jt,null),e(Jt,SQr),e(Jt,zwe),e(zwe,RQr),e(Jt,PQr),e(Jt,sm),e(sm,BQr),e(sm,Qwe),e(Qwe,NQr),e(sm,IQr),e(sm,loe),e(loe,qQr),e(sm,jQr),e(Jt,DQr),M(lA,Jt,null),e(br,GQr),e(br,Qr),M(x$,Qr,null),e(Qr,OQr),e(Qr,Wwe),e(Wwe,VQr),e(Qr,XQr),e(Qr,Cn),e(Cn,zQr),e(Cn,Hwe),e(Hwe,QQr),e(Cn,WQr),e(Cn,Uwe),e(Uwe,HQr),e(Cn,UQr),e(Cn,Jwe),e(Jwe,JQr),e(Cn,YQr),e(Qr,KQr),e(Qr,$e),e($e,iA),e(iA,Ywe),e(Ywe,ZQr),e(iA,eWr),e(iA,ioe),e(ioe,oWr),e(iA,rWr),e($e,tWr),e($e,dA),e(dA,Kwe),e(Kwe,aWr),e(dA,nWr),e(dA,doe),e(doe,sWr),e(dA,lWr),e($e,iWr),e($e,cA),e(cA,Zwe),e(Zwe,dWr),e(cA,cWr),e(cA,coe),e(coe,mWr),e(cA,fWr),e($e,gWr),e($e,mA),e(mA,eAe),e(eAe,hWr),e(mA,uWr),e(mA,moe),e(moe,pWr),e(mA,_Wr),e($e,bWr),e($e,fA),e(fA,oAe),e(oAe,vWr),e(fA,FWr),e(fA,foe),e(foe,TWr),e(fA,MWr),e($e,EWr),e($e,gA),e(gA,rAe),e(rAe,CWr),e(gA,wWr),e(gA,goe),e(goe,AWr),e(gA,LWr),e($e,yWr),e($e,hA),e(hA,tAe),e(tAe,xWr),e(hA,$Wr),e(hA,hoe),e(hoe,kWr),e(hA,SWr),e($e,RWr),e($e,uA),e(uA,aAe),e(aAe,PWr),e(uA,BWr),e(uA,uoe),e(uoe,NWr),e(uA,IWr),e($e,qWr),e($e,pA),e(pA,nAe),e(nAe,jWr),e(pA,DWr),e(pA,poe),e(poe,GWr),e(pA,OWr),e($e,VWr),e($e,_A),e(_A,sAe),e(sAe,XWr),e(_A,zWr),e(_A,_oe),e(_oe,QWr),e(_A,WWr),e(Qr,HWr),M(bA,Qr,null),b(m,Zze,_),b(m,lm,_),e(lm,vA),e(vA,lAe),M($$,lAe,null),e(lm,UWr),e(lm,iAe),e(iAe,JWr),b(m,eQe,_),b(m,vr,_),M(k$,vr,null),e(vr,YWr),e(vr,im),e(im,KWr),e(im,boe),e(boe,ZWr),e(im,eHr),e(im,voe),e(voe,oHr),e(im,rHr),e(vr,tHr),e(vr,S$),e(S$,aHr),e(S$,dAe),e(dAe,nHr),e(S$,sHr),e(vr,lHr),e(vr,Yt),M(R$,Yt,null),e(Yt,iHr),e(Yt,cAe),e(cAe,dHr),e(Yt,cHr),e(Yt,dm),e(dm,mHr),e(dm,mAe),e(mAe,fHr),e(dm,gHr),e(dm,Foe),e(Foe,hHr),e(dm,uHr),e(Yt,pHr),M(FA,Yt,null),e(vr,_Hr),e(vr,Wr),M(P$,Wr,null),e(Wr,bHr),e(Wr,fAe),e(fAe,vHr),e(Wr,FHr),e(Wr,wn),e(wn,THr),e(wn,gAe),e(gAe,MHr),e(wn,EHr),e(wn,hAe),e(hAe,CHr),e(wn,wHr),e(wn,uAe),e(uAe,AHr),e(wn,LHr),e(Wr,yHr),e(Wr,ke),e(ke,TA),e(TA,pAe),e(pAe,xHr),e(TA,$Hr),e(TA,Toe),e(Toe,kHr),e(TA,SHr),e(ke,RHr),e(ke,MA),e(MA,_Ae),e(_Ae,PHr),e(MA,BHr),e(MA,Moe),e(Moe,NHr),e(MA,IHr),e(ke,qHr),e(ke,EA),e(EA,bAe),e(bAe,jHr),e(EA,DHr),e(EA,Eoe),e(Eoe,GHr),e(EA,OHr),e(ke,VHr),e(ke,CA),e(CA,vAe),e(vAe,XHr),e(CA,zHr),e(CA,Coe),e(Coe,QHr),e(CA,WHr),e(ke,HHr),e(ke,wA),e(wA,FAe),e(FAe,UHr),e(wA,JHr),e(wA,woe),e(woe,YHr),e(wA,KHr),e(ke,ZHr),e(ke,AA),e(AA,TAe),e(TAe,eUr),e(AA,oUr),e(AA,Aoe),e(Aoe,rUr),e(AA,tUr),e(ke,aUr),e(ke,LA),e(LA,MAe),e(MAe,nUr),e(LA,sUr),e(LA,Loe),e(Loe,lUr),e(LA,iUr),e(ke,dUr),e(ke,yA),e(yA,EAe),e(EAe,cUr),e(yA,mUr),e(yA,yoe),e(yoe,fUr),e(yA,gUr),e(ke,hUr),e(ke,xA),e(xA,CAe),e(CAe,uUr),e(xA,pUr),e(xA,xoe),e(xoe,_Ur),e(xA,bUr),e(ke,vUr),e(ke,$A),e($A,wAe),e(wAe,FUr),e($A,TUr),e($A,$oe),e($oe,MUr),e($A,EUr),e(Wr,CUr),M(kA,Wr,null),b(m,oQe,_),b(m,cm,_),e(cm,SA),e(SA,AAe),M(B$,AAe,null),e(cm,wUr),e(cm,LAe),e(LAe,AUr),b(m,rQe,_),b(m,Fr,_),M(N$,Fr,null),e(Fr,LUr),e(Fr,mm),e(mm,yUr),e(mm,koe),e(koe,xUr),e(mm,$Ur),e(mm,Soe),e(Soe,kUr),e(mm,SUr),e(Fr,RUr),e(Fr,I$),e(I$,PUr),e(I$,yAe),e(yAe,BUr),e(I$,NUr),e(Fr,IUr),e(Fr,Kt),M(q$,Kt,null),e(Kt,qUr),e(Kt,xAe),e(xAe,jUr),e(Kt,DUr),e(Kt,fm),e(fm,GUr),e(fm,$Ae),e($Ae,OUr),e(fm,VUr),e(fm,Roe),e(Roe,XUr),e(fm,zUr),e(Kt,QUr),M(RA,Kt,null),e(Fr,WUr),e(Fr,Hr),M(j$,Hr,null),e(Hr,HUr),e(Hr,kAe),e(kAe,UUr),e(Hr,JUr),e(Hr,An),e(An,YUr),e(An,SAe),e(SAe,KUr),e(An,ZUr),e(An,RAe),e(RAe,eJr),e(An,oJr),e(An,PAe),e(PAe,rJr),e(An,tJr),e(Hr,aJr),e(Hr,Se),e(Se,PA),e(PA,BAe),e(BAe,nJr),e(PA,sJr),e(PA,Poe),e(Poe,lJr),e(PA,iJr),e(Se,dJr),e(Se,BA),e(BA,NAe),e(NAe,cJr),e(BA,mJr),e(BA,Boe),e(Boe,fJr),e(BA,gJr),e(Se,hJr),e(Se,NA),e(NA,IAe),e(IAe,uJr),e(NA,pJr),e(NA,Noe),e(Noe,_Jr),e(NA,bJr),e(Se,vJr),e(Se,IA),e(IA,qAe),e(qAe,FJr),e(IA,TJr),e(IA,Ioe),e(Ioe,MJr),e(IA,EJr),e(Se,CJr),e(Se,qA),e(qA,jAe),e(jAe,wJr),e(qA,AJr),e(qA,qoe),e(qoe,LJr),e(qA,yJr),e(Se,xJr),e(Se,jA),e(jA,DAe),e(DAe,$Jr),e(jA,kJr),e(jA,joe),e(joe,SJr),e(jA,RJr),e(Se,PJr),e(Se,DA),e(DA,GAe),e(GAe,BJr),e(DA,NJr),e(DA,Doe),e(Doe,IJr),e(DA,qJr),e(Se,jJr),e(Se,GA),e(GA,OAe),e(OAe,DJr),e(GA,GJr),e(GA,Goe),e(Goe,OJr),e(GA,VJr),e(Se,XJr),e(Se,OA),e(OA,VAe),e(VAe,zJr),e(OA,QJr),e(OA,Ooe),e(Ooe,WJr),e(OA,HJr),e(Se,UJr),e(Se,VA),e(VA,XAe),e(XAe,JJr),e(VA,YJr),e(VA,Voe),e(Voe,KJr),e(VA,ZJr),e(Hr,eYr),M(XA,Hr,null),b(m,tQe,_),b(m,gm,_),e(gm,zA),e(zA,zAe),M(D$,zAe,null),e(gm,oYr),e(gm,QAe),e(QAe,rYr),b(m,aQe,_),b(m,Tr,_),M(G$,Tr,null),e(Tr,tYr),e(Tr,hm),e(hm,aYr),e(hm,Xoe),e(Xoe,nYr),e(hm,sYr),e(hm,zoe),e(zoe,lYr),e(hm,iYr),e(Tr,dYr),e(Tr,O$),e(O$,cYr),e(O$,WAe),e(WAe,mYr),e(O$,fYr),e(Tr,gYr),e(Tr,Zt),M(V$,Zt,null),e(Zt,hYr),e(Zt,HAe),e(HAe,uYr),e(Zt,pYr),e(Zt,um),e(um,_Yr),e(um,UAe),e(UAe,bYr),e(um,vYr),e(um,Qoe),e(Qoe,FYr),e(um,TYr),e(Zt,MYr),M(QA,Zt,null),e(Tr,EYr),e(Tr,Ur),M(X$,Ur,null),e(Ur,CYr),e(Ur,JAe),e(JAe,wYr),e(Ur,AYr),e(Ur,Ln),e(Ln,LYr),e(Ln,YAe),e(YAe,yYr),e(Ln,xYr),e(Ln,KAe),e(KAe,$Yr),e(Ln,kYr),e(Ln,ZAe),e(ZAe,SYr),e(Ln,RYr),e(Ur,PYr),e(Ur,Re),e(Re,WA),e(WA,e6e),e(e6e,BYr),e(WA,NYr),e(WA,Woe),e(Woe,IYr),e(WA,qYr),e(Re,jYr),e(Re,HA),e(HA,o6e),e(o6e,DYr),e(HA,GYr),e(HA,Hoe),e(Hoe,OYr),e(HA,VYr),e(Re,XYr),e(Re,UA),e(UA,r6e),e(r6e,zYr),e(UA,QYr),e(UA,Uoe),e(Uoe,WYr),e(UA,HYr),e(Re,UYr),e(Re,JA),e(JA,t6e),e(t6e,JYr),e(JA,YYr),e(JA,Joe),e(Joe,KYr),e(JA,ZYr),e(Re,eKr),e(Re,YA),e(YA,a6e),e(a6e,oKr),e(YA,rKr),e(YA,Yoe),e(Yoe,tKr),e(YA,aKr),e(Re,nKr),e(Re,KA),e(KA,n6e),e(n6e,sKr),e(KA,lKr),e(KA,Koe),e(Koe,iKr),e(KA,dKr),e(Re,cKr),e(Re,ZA),e(ZA,s6e),e(s6e,mKr),e(ZA,fKr),e(ZA,Zoe),e(Zoe,gKr),e(ZA,hKr),e(Re,uKr),e(Re,e6),e(e6,l6e),e(l6e,pKr),e(e6,_Kr),e(e6,ere),e(ere,bKr),e(e6,vKr),e(Re,FKr),e(Re,o6),e(o6,i6e),e(i6e,TKr),e(o6,MKr),e(o6,ore),e(ore,EKr),e(o6,CKr),e(Re,wKr),e(Re,r6),e(r6,d6e),e(d6e,AKr),e(r6,LKr),e(r6,rre),e(rre,yKr),e(r6,xKr),e(Ur,$Kr),M(t6,Ur,null),b(m,nQe,_),b(m,pm,_),e(pm,a6),e(a6,c6e),M(z$,c6e,null),e(pm,kKr),e(pm,m6e),e(m6e,SKr),b(m,sQe,_),b(m,Mr,_),M(Q$,Mr,null),e(Mr,RKr),e(Mr,_m),e(_m,PKr),e(_m,tre),e(tre,BKr),e(_m,NKr),e(_m,are),e(are,IKr),e(_m,qKr),e(Mr,jKr),e(Mr,W$),e(W$,DKr),e(W$,f6e),e(f6e,GKr),e(W$,OKr),e(Mr,VKr),e(Mr,ea),M(H$,ea,null),e(ea,XKr),e(ea,g6e),e(g6e,zKr),e(ea,QKr),e(ea,bm),e(bm,WKr),e(bm,h6e),e(h6e,HKr),e(bm,UKr),e(bm,nre),e(nre,JKr),e(bm,YKr),e(ea,KKr),M(n6,ea,null),e(Mr,ZKr),e(Mr,Jr),M(U$,Jr,null),e(Jr,eZr),e(Jr,u6e),e(u6e,oZr),e(Jr,rZr),e(Jr,yn),e(yn,tZr),e(yn,p6e),e(p6e,aZr),e(yn,nZr),e(yn,_6e),e(_6e,sZr),e(yn,lZr),e(yn,b6e),e(b6e,iZr),e(yn,dZr),e(Jr,cZr),e(Jr,Ve),e(Ve,s6),e(s6,v6e),e(v6e,mZr),e(s6,fZr),e(s6,sre),e(sre,gZr),e(s6,hZr),e(Ve,uZr),e(Ve,l6),e(l6,F6e),e(F6e,pZr),e(l6,_Zr),e(l6,lre),e(lre,bZr),e(l6,vZr),e(Ve,FZr),e(Ve,i6),e(i6,T6e),e(T6e,TZr),e(i6,MZr),e(i6,ire),e(ire,EZr),e(i6,CZr),e(Ve,wZr),e(Ve,d6),e(d6,M6e),e(M6e,AZr),e(d6,LZr),e(d6,dre),e(dre,yZr),e(d6,xZr),e(Ve,$Zr),e(Ve,c6),e(c6,E6e),e(E6e,kZr),e(c6,SZr),e(c6,cre),e(cre,RZr),e(c6,PZr),e(Ve,BZr),e(Ve,m6),e(m6,C6e),e(C6e,NZr),e(m6,IZr),e(m6,mre),e(mre,qZr),e(m6,jZr),e(Ve,DZr),e(Ve,f6),e(f6,w6e),e(w6e,GZr),e(f6,OZr),e(f6,fre),e(fre,VZr),e(f6,XZr),e(Ve,zZr),e(Ve,g6),e(g6,A6e),e(A6e,QZr),e(g6,WZr),e(g6,gre),e(gre,HZr),e(g6,UZr),e(Jr,JZr),M(h6,Jr,null),b(m,lQe,_),b(m,vm,_),e(vm,u6),e(u6,L6e),M(J$,L6e,null),e(vm,YZr),e(vm,y6e),e(y6e,KZr),b(m,iQe,_),b(m,Er,_),M(Y$,Er,null),e(Er,ZZr),e(Er,Fm),e(Fm,eet),e(Fm,hre),e(hre,oet),e(Fm,ret),e(Fm,ure),e(ure,tet),e(Fm,aet),e(Er,net),e(Er,K$),e(K$,set),e(K$,x6e),e(x6e,iet),e(K$,det),e(Er,cet),e(Er,oa),M(Z$,oa,null),e(oa,met),e(oa,$6e),e($6e,fet),e(oa,get),e(oa,Tm),e(Tm,het),e(Tm,k6e),e(k6e,uet),e(Tm,pet),e(Tm,pre),e(pre,_et),e(Tm,bet),e(oa,vet),M(p6,oa,null),e(Er,Fet),e(Er,Yr),M(ek,Yr,null),e(Yr,Tet),e(Yr,S6e),e(S6e,Met),e(Yr,Eet),e(Yr,xn),e(xn,Cet),e(xn,R6e),e(R6e,wet),e(xn,Aet),e(xn,P6e),e(P6e,Let),e(xn,yet),e(xn,B6e),e(B6e,xet),e(xn,$et),e(Yr,ket),e(Yr,Xe),e(Xe,_6),e(_6,N6e),e(N6e,Set),e(_6,Ret),e(_6,_re),e(_re,Pet),e(_6,Bet),e(Xe,Net),e(Xe,b6),e(b6,I6e),e(I6e,Iet),e(b6,qet),e(b6,bre),e(bre,jet),e(b6,Det),e(Xe,Get),e(Xe,v6),e(v6,q6e),e(q6e,Oet),e(v6,Vet),e(v6,vre),e(vre,Xet),e(v6,zet),e(Xe,Qet),e(Xe,F6),e(F6,j6e),e(j6e,Wet),e(F6,Het),e(F6,Fre),e(Fre,Uet),e(F6,Jet),e(Xe,Yet),e(Xe,T6),e(T6,D6e),e(D6e,Ket),e(T6,Zet),e(T6,Tre),e(Tre,eot),e(T6,oot),e(Xe,rot),e(Xe,M6),e(M6,G6e),e(G6e,tot),e(M6,aot),e(M6,Mre),e(Mre,not),e(M6,sot),e(Xe,lot),e(Xe,E6),e(E6,O6e),e(O6e,iot),e(E6,dot),e(E6,Ere),e(Ere,cot),e(E6,mot),e(Xe,fot),e(Xe,C6),e(C6,V6e),e(V6e,got),e(C6,hot),e(C6,Cre),e(Cre,uot),e(C6,pot),e(Yr,_ot),M(w6,Yr,null),b(m,dQe,_),b(m,Mm,_),e(Mm,A6),e(A6,X6e),M(ok,X6e,null),e(Mm,bot),e(Mm,z6e),e(z6e,vot),b(m,cQe,_),b(m,Cr,_),M(rk,Cr,null),e(Cr,Fot),e(Cr,Em),e(Em,Tot),e(Em,wre),e(wre,Mot),e(Em,Eot),e(Em,Are),e(Are,Cot),e(Em,wot),e(Cr,Aot),e(Cr,tk),e(tk,Lot),e(tk,Q6e),e(Q6e,yot),e(tk,xot),e(Cr,$ot),e(Cr,ra),M(ak,ra,null),e(ra,kot),e(ra,W6e),e(W6e,Sot),e(ra,Rot),e(ra,Cm),e(Cm,Pot),e(Cm,H6e),e(H6e,Bot),e(Cm,Not),e(Cm,Lre),e(Lre,Iot),e(Cm,qot),e(ra,jot),M(L6,ra,null),e(Cr,Dot),e(Cr,Kr),M(nk,Kr,null),e(Kr,Got),e(Kr,U6e),e(U6e,Oot),e(Kr,Vot),e(Kr,$n),e($n,Xot),e($n,J6e),e(J6e,zot),e($n,Qot),e($n,Y6e),e(Y6e,Wot),e($n,Hot),e($n,K6e),e(K6e,Uot),e($n,Jot),e(Kr,Yot),e(Kr,Z6e),e(Z6e,y6),e(y6,e7e),e(e7e,Kot),e(y6,Zot),e(y6,yre),e(yre,ert),e(y6,ort),e(Kr,rrt),M(x6,Kr,null),b(m,mQe,_),b(m,wm,_),e(wm,$6),e($6,o7e),M(sk,o7e,null),e(wm,trt),e(wm,r7e),e(r7e,art),b(m,fQe,_),b(m,wr,_),M(lk,wr,null),e(wr,nrt),e(wr,Am),e(Am,srt),e(Am,xre),e(xre,lrt),e(Am,irt),e(Am,$re),e($re,drt),e(Am,crt),e(wr,mrt),e(wr,ik),e(ik,frt),e(ik,t7e),e(t7e,grt),e(ik,hrt),e(wr,urt),e(wr,ta),M(dk,ta,null),e(ta,prt),e(ta,a7e),e(a7e,_rt),e(ta,brt),e(ta,Lm),e(Lm,vrt),e(Lm,n7e),e(n7e,Frt),e(Lm,Trt),e(Lm,kre),e(kre,Mrt),e(Lm,Ert),e(ta,Crt),M(k6,ta,null),e(wr,wrt),e(wr,Zr),M(ck,Zr,null),e(Zr,Art),e(Zr,s7e),e(s7e,Lrt),e(Zr,yrt),e(Zr,kn),e(kn,xrt),e(kn,l7e),e(l7e,$rt),e(kn,krt),e(kn,i7e),e(i7e,Srt),e(kn,Rrt),e(kn,d7e),e(d7e,Prt),e(kn,Brt),e(Zr,Nrt),e(Zr,mk),e(mk,S6),e(S6,c7e),e(c7e,Irt),e(S6,qrt),e(S6,Sre),e(Sre,jrt),e(S6,Drt),e(mk,Grt),e(mk,R6),e(R6,m7e),e(m7e,Ort),e(R6,Vrt),e(R6,Rre),e(Rre,Xrt),e(R6,zrt),e(Zr,Qrt),M(P6,Zr,null),b(m,gQe,_),b(m,ym,_),e(ym,B6),e(B6,f7e),M(fk,f7e,null),e(ym,Wrt),e(ym,g7e),e(g7e,Hrt),b(m,hQe,_),b(m,Ar,_),M(gk,Ar,null),e(Ar,Urt),e(Ar,xm),e(xm,Jrt),e(xm,Pre),e(Pre,Yrt),e(xm,Krt),e(xm,Bre),e(Bre,Zrt),e(xm,ett),e(Ar,ott),e(Ar,hk),e(hk,rtt),e(hk,h7e),e(h7e,ttt),e(hk,att),e(Ar,ntt),e(Ar,aa),M(uk,aa,null),e(aa,stt),e(aa,u7e),e(u7e,ltt),e(aa,itt),e(aa,$m),e($m,dtt),e($m,p7e),e(p7e,ctt),e($m,mtt),e($m,Nre),e(Nre,ftt),e($m,gtt),e(aa,htt),M(N6,aa,null),e(Ar,utt),e(Ar,et),M(pk,et,null),e(et,ptt),e(et,_7e),e(_7e,_tt),e(et,btt),e(et,Sn),e(Sn,vtt),e(Sn,b7e),e(b7e,Ftt),e(Sn,Ttt),e(Sn,v7e),e(v7e,Mtt),e(Sn,Ett),e(Sn,F7e),e(F7e,Ctt),e(Sn,wtt),e(et,Att),e(et,T7e),e(T7e,I6),e(I6,M7e),e(M7e,Ltt),e(I6,ytt),e(I6,Ire),e(Ire,xtt),e(I6,$tt),e(et,ktt),M(q6,et,null),uQe=!0},p(m,[_]){const _k={};_&2&&(_k.$$scope={dirty:_,ctx:m}),jm.$set(_k);const E7e={};_&2&&(E7e.$$scope={dirty:_,ctx:m}),Kg.$set(E7e);const C7e={};_&2&&(C7e.$$scope={dirty:_,ctx:m}),Ph.$set(C7e);const w7e={};_&2&&(w7e.$$scope={dirty:_,ctx:m}),_u.$set(w7e);const bk={};_&2&&(bk.$$scope={dirty:_,ctx:m}),bu.$set(bk);const A7e={};_&2&&(A7e.$$scope={dirty:_,ctx:m}),ju.$set(A7e);const Rn={};_&2&&(Rn.$$scope={dirty:_,ctx:m}),Du.$set(Rn);const L7e={};_&2&&(L7e.$$scope={dirty:_,ctx:m}),Vu.$set(L7e);const y7e={};_&2&&(y7e.$$scope={dirty:_,ctx:m}),H_.$set(y7e);const x7e={};_&2&&(x7e.$$scope={dirty:_,ctx:m}),J_.$set(x7e);const vk={};_&2&&(vk.$$scope={dirty:_,ctx:m}),V2.$set(vk);const $7e={};_&2&&($7e.$$scope={dirty:_,ctx:m}),z2.$set($7e);const Fk={};_&2&&(Fk.$$scope={dirty:_,ctx:m}),Rb.$set(Fk);const k7e={};_&2&&(k7e.$$scope={dirty:_,ctx:m}),Bb.$set(k7e);const Tk={};_&2&&(Tk.$$scope={dirty:_,ctx:m}),Tv.$set(Tk);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:m}),Ev.$set(S7e);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:m}),Xv.$set(R7e);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:m}),Qv.$set(P7e);const km={};_&2&&(km.$$scope={dirty:_,ctx:m}),X1.$set(km);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:m}),Q1.$set(B7e);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:m}),CF.$set(N7e);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:m}),AF.$set(I7e);const Mk={};_&2&&(Mk.$$scope={dirty:_,ctx:m}),PF.$set(Mk);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:m}),NF.$set(q7e);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:m}),FT.$set(j7e);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:m}),MT.$set(D7e);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),fM.$set(nt);const Ek={};_&2&&(Ek.$$scope={dirty:_,ctx:m}),hM.$set(Ek);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:m}),_M.$set(G7e);const Ck={};_&2&&(Ck.$$scope={dirty:_,ctx:m}),vM.$set(Ck);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:m}),PM.$set(O7e);const st={};_&2&&(st.$$scope={dirty:_,ctx:m}),NM.$set(st);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:m}),jM.$set(V7e);const Sm={};_&2&&(Sm.$$scope={dirty:_,ctx:m}),GM.$set(Sm);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:m}),XM.$set(X7e);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:m}),QM.$set(z7e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),t4.$set(L);const j6={};_&2&&(j6.$$scope={dirty:_,ctx:m}),n4.$set(j6);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:m}),f4.$set(Q7e);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:m}),h4.$set(W7e);const D6={};_&2&&(D6.$$scope={dirty:_,ctx:m}),A4.$set(D6);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:m}),y4.$set(H7e);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:m}),S4.$set(U7e);const G6={};_&2&&(G6.$$scope={dirty:_,ctx:m}),P4.$set(G6);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:m}),G4.$set(J7e);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:m}),V4.$set(Y7e);const O6={};_&2&&(O6.$$scope={dirty:_,ctx:m}),H4.$set(O6);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:m}),J4.$set(K7e);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:m}),eE.$set(Z7e);const V6={};_&2&&(V6.$$scope={dirty:_,ctx:m}),rE.$set(V6);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),nE.$set(eLe);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),lE.$set(oLe);const X6={};_&2&&(X6.$$scope={dirty:_,ctx:m}),hE.$set(X6);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),pE.$set(rLe);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),vE.$set(tLe);const z6={};_&2&&(z6.$$scope={dirty:_,ctx:m}),TE.$set(z6);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),_C.$set(aLe);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),vC.$set(nLe);const Q6={};_&2&&(Q6.$$scope={dirty:_,ctx:m}),VC.$set(Q6);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),zC.$set(sLe);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),n3.$set(lLe);const W6={};_&2&&(W6.$$scope={dirty:_,ctx:m}),l3.$set(W6);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),h3.$set(iLe);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),p3.$set(dLe);const H6={};_&2&&(H6.$$scope={dirty:_,ctx:m}),I3.$set(H6);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),j3.$set(cLe);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),J3.$set(mLe);const U6={};_&2&&(U6.$$scope={dirty:_,ctx:m}),K3.$set(U6);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),w5.$set(fLe);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),L5.$set(gLe);const J6={};_&2&&(J6.$$scope={dirty:_,ctx:m}),z5.$set(J6);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),W5.$set(hLe);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),J5.$set(uLe);const Y6={};_&2&&(Y6.$$scope={dirty:_,ctx:m}),K5.$set(Y6);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),e0.$set(pLe);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),r0.$set(_Le);const K6={};_&2&&(K6.$$scope={dirty:_,ctx:m}),E0.$set(K6);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),w0.$set(bLe);const vLe={};_&2&&(vLe.$$scope={dirty:_,ctx:m}),Q0.$set(vLe);const Z6={};_&2&&(Z6.$$scope={dirty:_,ctx:m}),H0.$set(Z6);const FLe={};_&2&&(FLe.$$scope={dirty:_,ctx:m}),J0.$set(FLe);const TLe={};_&2&&(TLe.$$scope={dirty:_,ctx:m}),K0.$set(TLe);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:m}),ew.$set(e7);const MLe={};_&2&&(MLe.$$scope={dirty:_,ctx:m}),rw.$set(MLe);const ELe={};_&2&&(ELe.$$scope={dirty:_,ctx:m}),$w.$set(ELe);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:m}),Sw.$set(o7);const CLe={};_&2&&(CLe.$$scope={dirty:_,ctx:m}),Vw.$set(CLe);const wLe={};_&2&&(wLe.$$scope={dirty:_,ctx:m}),zw.$set(wLe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:m}),nA.$set(r7);const ALe={};_&2&&(ALe.$$scope={dirty:_,ctx:m}),lA.$set(ALe);const LLe={};_&2&&(LLe.$$scope={dirty:_,ctx:m}),bA.$set(LLe);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),FA.$set(t7);const yLe={};_&2&&(yLe.$$scope={dirty:_,ctx:m}),kA.$set(yLe);const xLe={};_&2&&(xLe.$$scope={dirty:_,ctx:m}),RA.$set(xLe);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:m}),XA.$set(a7);const $Le={};_&2&&($Le.$$scope={dirty:_,ctx:m}),QA.$set($Le);const kLe={};_&2&&(kLe.$$scope={dirty:_,ctx:m}),t6.$set(kLe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:m}),n6.$set(n7);const SLe={};_&2&&(SLe.$$scope={dirty:_,ctx:m}),h6.$set(SLe);const RLe={};_&2&&(RLe.$$scope={dirty:_,ctx:m}),p6.$set(RLe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:m}),w6.$set(s7);const PLe={};_&2&&(PLe.$$scope={dirty:_,ctx:m}),L6.$set(PLe);const BLe={};_&2&&(BLe.$$scope={dirty:_,ctx:m}),x6.$set(BLe);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:m}),k6.$set(l7);const NLe={};_&2&&(NLe.$$scope={dirty:_,ctx:m}),P6.$set(NLe);const ILe={};_&2&&(ILe.$$scope={dirty:_,ctx:m}),N6.$set(ILe);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:m}),q6.$set(i7)},i(m){uQe||(E(d.$$.fragment,m),E(Sa.$$.fragment,m),E(ly.$$.fragment,m),E(iy.$$.fragment,m),E(jm.$$.fragment,m),E(dy.$$.fragment,m),E(cy.$$.fragment,m),E(gy.$$.fragment,m),E(Kg.$$.fragment,m),E(hy.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(vy.$$.fragment,m),E(Ph.$$.fragment,m),E(Fy.$$.fragment,m),E(Ty.$$.fragment,m),E(My.$$.fragment,m),E(wy.$$.fragment,m),E(_u.$$.fragment,m),E(bu.$$.fragment,m),E(Ay.$$.fragment,m),E(Ly.$$.fragment,m),E(yy.$$.fragment,m),E(ky.$$.fragment,m),E(ju.$$.fragment,m),E(Du.$$.fragment,m),E(Sy.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(Ny.$$.fragment,m),E(Vu.$$.fragment,m),E(Iy.$$.fragment,m),E(H_.$$.fragment,m),E(qy.$$.fragment,m),E(jy.$$.fragment,m),E(Gy.$$.fragment,m),E(J_.$$.fragment,m),E(Oy.$$.fragment,m),E(V2.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qy.$$.fragment,m),E(z2.$$.fragment,m),E(Wy.$$.fragment,m),E(Rb.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(Bb.$$.fragment,m),E(Ky.$$.fragment,m),E(Tv.$$.fragment,m),E(Zy.$$.fragment,m),E(e8.$$.fragment,m),E(r8.$$.fragment,m),E(Ev.$$.fragment,m),E(t8.$$.fragment,m),E(Xv.$$.fragment,m),E(a8.$$.fragment,m),E(n8.$$.fragment,m),E(l8.$$.fragment,m),E(Qv.$$.fragment,m),E(i8.$$.fragment,m),E(X1.$$.fragment,m),E(d8.$$.fragment,m),E(c8.$$.fragment,m),E(f8.$$.fragment,m),E(Q1.$$.fragment,m),E(g8.$$.fragment,m),E(CF.$$.fragment,m),E(h8.$$.fragment,m),E(u8.$$.fragment,m),E(_8.$$.fragment,m),E(AF.$$.fragment,m),E(b8.$$.fragment,m),E(PF.$$.fragment,m),E(v8.$$.fragment,m),E(F8.$$.fragment,m),E(M8.$$.fragment,m),E(NF.$$.fragment,m),E(E8.$$.fragment,m),E(FT.$$.fragment,m),E(C8.$$.fragment,m),E(w8.$$.fragment,m),E(L8.$$.fragment,m),E(MT.$$.fragment,m),E(y8.$$.fragment,m),E(fM.$$.fragment,m),E(x8.$$.fragment,m),E($8.$$.fragment,m),E(S8.$$.fragment,m),E(hM.$$.fragment,m),E(R8.$$.fragment,m),E(_M.$$.fragment,m),E(P8.$$.fragment,m),E(B8.$$.fragment,m),E(I8.$$.fragment,m),E(vM.$$.fragment,m),E(q8.$$.fragment,m),E(PM.$$.fragment,m),E(j8.$$.fragment,m),E(D8.$$.fragment,m),E(O8.$$.fragment,m),E(NM.$$.fragment,m),E(V8.$$.fragment,m),E(jM.$$.fragment,m),E(X8.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(GM.$$.fragment,m),E(H8.$$.fragment,m),E(XM.$$.fragment,m),E(U8.$$.fragment,m),E(J8.$$.fragment,m),E(K8.$$.fragment,m),E(QM.$$.fragment,m),E(Z8.$$.fragment,m),E(t4.$$.fragment,m),E(e9.$$.fragment,m),E(o9.$$.fragment,m),E(t9.$$.fragment,m),E(n4.$$.fragment,m),E(a9.$$.fragment,m),E(f4.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(h4.$$.fragment,m),E(d9.$$.fragment,m),E(A4.$$.fragment,m),E(c9.$$.fragment,m),E(m9.$$.fragment,m),E(g9.$$.fragment,m),E(y4.$$.fragment,m),E(h9.$$.fragment,m),E(S4.$$.fragment,m),E(p9.$$.fragment,m),E(_9.$$.fragment,m),E(v9.$$.fragment,m),E(P4.$$.fragment,m),E(F9.$$.fragment,m),E(G4.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(C9.$$.fragment,m),E(V4.$$.fragment,m),E(w9.$$.fragment,m),E(H4.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(x9.$$.fragment,m),E(J4.$$.fragment,m),E($9.$$.fragment,m),E(eE.$$.fragment,m),E(S9.$$.fragment,m),E(R9.$$.fragment,m),E(B9.$$.fragment,m),E(rE.$$.fragment,m),E(N9.$$.fragment,m),E(nE.$$.fragment,m),E(I9.$$.fragment,m),E(q9.$$.fragment,m),E(D9.$$.fragment,m),E(lE.$$.fragment,m),E(G9.$$.fragment,m),E(hE.$$.fragment,m),E(O9.$$.fragment,m),E(V9.$$.fragment,m),E(z9.$$.fragment,m),E(pE.$$.fragment,m),E(Q9.$$.fragment,m),E(vE.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(J9.$$.fragment,m),E(TE.$$.fragment,m),E(Y9.$$.fragment,m),E(_C.$$.fragment,m),E(K9.$$.fragment,m),E(Z9.$$.fragment,m),E(ox.$$.fragment,m),E(vC.$$.fragment,m),E(rx.$$.fragment,m),E(VC.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(zC.$$.fragment,m),E(lx.$$.fragment,m),E(n3.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(l3.$$.fragment,m),E(fx.$$.fragment,m),E(h3.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(p3.$$.fragment,m),E(_x.$$.fragment,m),E(I3.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E(j3.$$.fragment,m),E(Mx.$$.fragment,m),E(J3.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(K3.$$.fragment,m),E(Lx.$$.fragment,m),E(w5.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(L5.$$.fragment,m),E(Sx.$$.fragment,m),E(z5.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Nx.$$.fragment,m),E(W5.$$.fragment,m),E(Ix.$$.fragment,m),E(J5.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(K5.$$.fragment,m),E(Vx.$$.fragment,m),E(e0.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(r0.$$.fragment,m),E(Hx.$$.fragment,m),E(E0.$$.fragment,m),E(Ux.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(w0.$$.fragment,m),E(Zx.$$.fragment,m),E(Q0.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(H0.$$.fragment,m),E(a$.$$.fragment,m),E(J0.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(K0.$$.fragment,m),E(d$.$$.fragment,m),E(ew.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(rw.$$.fragment,m),E(h$.$$.fragment,m),E($w.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(Sw.$$.fragment,m),E(v$.$$.fragment,m),E(Vw.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(zw.$$.fragment,m),E(C$.$$.fragment,m),E(nA.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(lA.$$.fragment,m),E(x$.$$.fragment,m),E(bA.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(FA.$$.fragment,m),E(P$.$$.fragment,m),E(kA.$$.fragment,m),E(B$.$$.fragment,m),E(N$.$$.fragment,m),E(q$.$$.fragment,m),E(RA.$$.fragment,m),E(j$.$$.fragment,m),E(XA.$$.fragment,m),E(D$.$$.fragment,m),E(G$.$$.fragment,m),E(V$.$$.fragment,m),E(QA.$$.fragment,m),E(X$.$$.fragment,m),E(t6.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(H$.$$.fragment,m),E(n6.$$.fragment,m),E(U$.$$.fragment,m),E(h6.$$.fragment,m),E(J$.$$.fragment,m),E(Y$.$$.fragment,m),E(Z$.$$.fragment,m),E(p6.$$.fragment,m),E(ek.$$.fragment,m),E(w6.$$.fragment,m),E(ok.$$.fragment,m),E(rk.$$.fragment,m),E(ak.$$.fragment,m),E(L6.$$.fragment,m),E(nk.$$.fragment,m),E(x6.$$.fragment,m),E(sk.$$.fragment,m),E(lk.$$.fragment,m),E(dk.$$.fragment,m),E(k6.$$.fragment,m),E(ck.$$.fragment,m),E(P6.$$.fragment,m),E(fk.$$.fragment,m),E(gk.$$.fragment,m),E(uk.$$.fragment,m),E(N6.$$.fragment,m),E(pk.$$.fragment,m),E(q6.$$.fragment,m),uQe=!0)},o(m){C(d.$$.fragment,m),C(Sa.$$.fragment,m),C(ly.$$.fragment,m),C(iy.$$.fragment,m),C(jm.$$.fragment,m),C(dy.$$.fragment,m),C(cy.$$.fragment,m),C(gy.$$.fragment,m),C(Kg.$$.fragment,m),C(hy.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(vy.$$.fragment,m),C(Ph.$$.fragment,m),C(Fy.$$.fragment,m),C(Ty.$$.fragment,m),C(My.$$.fragment,m),C(wy.$$.fragment,m),C(_u.$$.fragment,m),C(bu.$$.fragment,m),C(Ay.$$.fragment,m),C(Ly.$$.fragment,m),C(yy.$$.fragment,m),C(ky.$$.fragment,m),C(ju.$$.fragment,m),C(Du.$$.fragment,m),C(Sy.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(Ny.$$.fragment,m),C(Vu.$$.fragment,m),C(Iy.$$.fragment,m),C(H_.$$.fragment,m),C(qy.$$.fragment,m),C(jy.$$.fragment,m),C(Gy.$$.fragment,m),C(J_.$$.fragment,m),C(Oy.$$.fragment,m),C(V2.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qy.$$.fragment,m),C(z2.$$.fragment,m),C(Wy.$$.fragment,m),C(Rb.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(Bb.$$.fragment,m),C(Ky.$$.fragment,m),C(Tv.$$.fragment,m),C(Zy.$$.fragment,m),C(e8.$$.fragment,m),C(r8.$$.fragment,m),C(Ev.$$.fragment,m),C(t8.$$.fragment,m),C(Xv.$$.fragment,m),C(a8.$$.fragment,m),C(n8.$$.fragment,m),C(l8.$$.fragment,m),C(Qv.$$.fragment,m),C(i8.$$.fragment,m),C(X1.$$.fragment,m),C(d8.$$.fragment,m),C(c8.$$.fragment,m),C(f8.$$.fragment,m),C(Q1.$$.fragment,m),C(g8.$$.fragment,m),C(CF.$$.fragment,m),C(h8.$$.fragment,m),C(u8.$$.fragment,m),C(_8.$$.fragment,m),C(AF.$$.fragment,m),C(b8.$$.fragment,m),C(PF.$$.fragment,m),C(v8.$$.fragment,m),C(F8.$$.fragment,m),C(M8.$$.fragment,m),C(NF.$$.fragment,m),C(E8.$$.fragment,m),C(FT.$$.fragment,m),C(C8.$$.fragment,m),C(w8.$$.fragment,m),C(L8.$$.fragment,m),C(MT.$$.fragment,m),C(y8.$$.fragment,m),C(fM.$$.fragment,m),C(x8.$$.fragment,m),C($8.$$.fragment,m),C(S8.$$.fragment,m),C(hM.$$.fragment,m),C(R8.$$.fragment,m),C(_M.$$.fragment,m),C(P8.$$.fragment,m),C(B8.$$.fragment,m),C(I8.$$.fragment,m),C(vM.$$.fragment,m),C(q8.$$.fragment,m),C(PM.$$.fragment,m),C(j8.$$.fragment,m),C(D8.$$.fragment,m),C(O8.$$.fragment,m),C(NM.$$.fragment,m),C(V8.$$.fragment,m),C(jM.$$.fragment,m),C(X8.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(GM.$$.fragment,m),C(H8.$$.fragment,m),C(XM.$$.fragment,m),C(U8.$$.fragment,m),C(J8.$$.fragment,m),C(K8.$$.fragment,m),C(QM.$$.fragment,m),C(Z8.$$.fragment,m),C(t4.$$.fragment,m),C(e9.$$.fragment,m),C(o9.$$.fragment,m),C(t9.$$.fragment,m),C(n4.$$.fragment,m),C(a9.$$.fragment,m),C(f4.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(h4.$$.fragment,m),C(d9.$$.fragment,m),C(A4.$$.fragment,m),C(c9.$$.fragment,m),C(m9.$$.fragment,m),C(g9.$$.fragment,m),C(y4.$$.fragment,m),C(h9.$$.fragment,m),C(S4.$$.fragment,m),C(p9.$$.fragment,m),C(_9.$$.fragment,m),C(v9.$$.fragment,m),C(P4.$$.fragment,m),C(F9.$$.fragment,m),C(G4.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(C9.$$.fragment,m),C(V4.$$.fragment,m),C(w9.$$.fragment,m),C(H4.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(x9.$$.fragment,m),C(J4.$$.fragment,m),C($9.$$.fragment,m),C(eE.$$.fragment,m),C(S9.$$.fragment,m),C(R9.$$.fragment,m),C(B9.$$.fragment,m),C(rE.$$.fragment,m),C(N9.$$.fragment,m),C(nE.$$.fragment,m),C(I9.$$.fragment,m),C(q9.$$.fragment,m),C(D9.$$.fragment,m),C(lE.$$.fragment,m),C(G9.$$.fragment,m),C(hE.$$.fragment,m),C(O9.$$.fragment,m),C(V9.$$.fragment,m),C(z9.$$.fragment,m),C(pE.$$.fragment,m),C(Q9.$$.fragment,m),C(vE.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(J9.$$.fragment,m),C(TE.$$.fragment,m),C(Y9.$$.fragment,m),C(_C.$$.fragment,m),C(K9.$$.fragment,m),C(Z9.$$.fragment,m),C(ox.$$.fragment,m),C(vC.$$.fragment,m),C(rx.$$.fragment,m),C(VC.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(zC.$$.fragment,m),C(lx.$$.fragment,m),C(n3.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(l3.$$.fragment,m),C(fx.$$.fragment,m),C(h3.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(p3.$$.fragment,m),C(_x.$$.fragment,m),C(I3.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C(j3.$$.fragment,m),C(Mx.$$.fragment,m),C(J3.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(K3.$$.fragment,m),C(Lx.$$.fragment,m),C(w5.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(L5.$$.fragment,m),C(Sx.$$.fragment,m),C(z5.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Nx.$$.fragment,m),C(W5.$$.fragment,m),C(Ix.$$.fragment,m),C(J5.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(K5.$$.fragment,m),C(Vx.$$.fragment,m),C(e0.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(r0.$$.fragment,m),C(Hx.$$.fragment,m),C(E0.$$.fragment,m),C(Ux.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(w0.$$.fragment,m),C(Zx.$$.fragment,m),C(Q0.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(H0.$$.fragment,m),C(a$.$$.fragment,m),C(J0.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(K0.$$.fragment,m),C(d$.$$.fragment,m),C(ew.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(rw.$$.fragment,m),C(h$.$$.fragment,m),C($w.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(Sw.$$.fragment,m),C(v$.$$.fragment,m),C(Vw.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(zw.$$.fragment,m),C(C$.$$.fragment,m),C(nA.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(lA.$$.fragment,m),C(x$.$$.fragment,m),C(bA.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(FA.$$.fragment,m),C(P$.$$.fragment,m),C(kA.$$.fragment,m),C(B$.$$.fragment,m),C(N$.$$.fragment,m),C(q$.$$.fragment,m),C(RA.$$.fragment,m),C(j$.$$.fragment,m),C(XA.$$.fragment,m),C(D$.$$.fragment,m),C(G$.$$.fragment,m),C(V$.$$.fragment,m),C(QA.$$.fragment,m),C(X$.$$.fragment,m),C(t6.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(H$.$$.fragment,m),C(n6.$$.fragment,m),C(U$.$$.fragment,m),C(h6.$$.fragment,m),C(J$.$$.fragment,m),C(Y$.$$.fragment,m),C(Z$.$$.fragment,m),C(p6.$$.fragment,m),C(ek.$$.fragment,m),C(w6.$$.fragment,m),C(ok.$$.fragment,m),C(rk.$$.fragment,m),C(ak.$$.fragment,m),C(L6.$$.fragment,m),C(nk.$$.fragment,m),C(x6.$$.fragment,m),C(sk.$$.fragment,m),C(lk.$$.fragment,m),C(dk.$$.fragment,m),C(k6.$$.fragment,m),C(ck.$$.fragment,m),C(P6.$$.fragment,m),C(fk.$$.fragment,m),C(gk.$$.fragment,m),C(uk.$$.fragment,m),C(N6.$$.fragment,m),C(pk.$$.fragment,m),C(q6.$$.fragment,m),uQe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Pm),m&&t(lt),m&&t(Oe),m&&t(We),m&&t(Nm),w(Sa,m),m&&t(He),m&&t(Ae),m&&t(wo),m&&t(Ra),m&&t(cXe),m&&t(Bi),w(ly),m&&t(mXe),m&&t(qn),m&&t(fXe),w(iy,m),m&&t(gXe),m&&t(XS),m&&t(hXe),w(jm,m),m&&t(uXe),m&&t(Ni),w(dy),m&&t(pXe),m&&t(Ao),w(cy),w(gy),w(Kg),w(hy),m&&t(_Xe),m&&t(qi),w(uy),m&&t(bXe),m&&t(Lo),w(py),w(vy),w(Ph),w(Fy),m&&t(vXe),m&&t(ji),w(Ty),m&&t(FXe),m&&t(yo),w(My),w(wy),w(_u),w(bu),w(Ay),m&&t(TXe),m&&t(Di),w(Ly),m&&t(MXe),m&&t(xo),w(yy),w(ky),w(ju),w(Du),w(Sy),m&&t(EXe),m&&t(Oi),w(Ry),m&&t(CXe),m&&t($o),w(Py),w(Ny),w(Vu),w(Iy),w(H_),m&&t(wXe),m&&t(zi),w(qy),m&&t(AXe),m&&t(ko),w(jy),w(Gy),w(J_),w(Oy),w(V2),m&&t(LXe),m&&t(Hi),w(Vy),m&&t(yXe),m&&t(So),w(Xy),w(Qy),w(z2),w(Wy),w(Rb),m&&t(xXe),m&&t(Yi),w(Hy),m&&t($Xe),m&&t(Ro),w(Uy),w(Yy),w(Bb),w(Ky),w(Tv),m&&t(kXe),m&&t(ed),w(Zy),m&&t(SXe),m&&t(Po),w(e8),w(r8),w(Ev),w(t8),w(Xv),m&&t(RXe),m&&t(td),w(a8),m&&t(PXe),m&&t(Bo),w(n8),w(l8),w(Qv),w(i8),w(X1),m&&t(BXe),m&&t(sd),w(d8),m&&t(NXe),m&&t(No),w(c8),w(f8),w(Q1),w(g8),w(CF),m&&t(IXe),m&&t(dd),w(h8),m&&t(qXe),m&&t(Io),w(u8),w(_8),w(AF),w(b8),w(PF),m&&t(jXe),m&&t(fd),w(v8),m&&t(DXe),m&&t(jo),w(F8),w(M8),w(NF),w(E8),w(FT),m&&t(GXe),m&&t(ud),w(C8),m&&t(OXe),m&&t(Do),w(w8),w(L8),w(MT),w(y8),w(fM),m&&t(VXe),m&&t(bd),w(x8),m&&t(XXe),m&&t(Go),w($8),w(S8),w(hM),w(R8),w(_M),m&&t(zXe),m&&t(Td),w(P8),m&&t(QXe),m&&t(Oo),w(B8),w(I8),w(vM),w(q8),w(PM),m&&t(WXe),m&&t(Cd),w(j8),m&&t(HXe),m&&t(Vo),w(D8),w(O8),w(NM),w(V8),w(jM),m&&t(UXe),m&&t(Ld),w(X8),m&&t(JXe),m&&t(Xo),w(z8),w(W8),w(GM),w(H8),w(XM),m&&t(YXe),m&&t($d),w(U8),m&&t(KXe),m&&t(zo),w(J8),w(K8),w(QM),w(Z8),w(t4),m&&t(ZXe),m&&t(Rd),w(e9),m&&t(eze),m&&t(Qo),w(o9),w(t9),w(n4),w(a9),w(f4),m&&t(oze),m&&t(Nd),w(n9),m&&t(rze),m&&t(Wo),w(s9),w(i9),w(h4),w(d9),w(A4),m&&t(tze),m&&t(jd),w(c9),m&&t(aze),m&&t(Ho),w(m9),w(g9),w(y4),w(h9),w(S4),m&&t(nze),m&&t(Od),w(p9),m&&t(sze),m&&t(Uo),w(_9),w(v9),w(P4),w(F9),w(G4),m&&t(lze),m&&t(zd),w(T9),m&&t(ize),m&&t(Jo),w(M9),w(C9),w(V4),w(w9),w(H4),m&&t(dze),m&&t(Ud),w(A9),m&&t(cze),m&&t(Yo),w(L9),w(x9),w(J4),w($9),w(eE),m&&t(mze),m&&t(Kd),w(S9),m&&t(fze),m&&t(Ko),w(R9),w(B9),w(rE),w(N9),w(nE),m&&t(gze),m&&t(oc),w(I9),m&&t(hze),m&&t(Zo),w(q9),w(D9),w(lE),w(G9),w(hE),m&&t(uze),m&&t(ac),w(O9),m&&t(pze),m&&t(er),w(V9),w(z9),w(pE),w(Q9),w(vE),m&&t(_ze),m&&t(lc),w(W9),m&&t(bze),m&&t(or),w(H9),w(J9),w(TE),w(Y9),w(_C),m&&t(vze),m&&t(cc),w(K9),m&&t(Fze),m&&t(rr),w(Z9),w(ox),w(vC),w(rx),w(VC),m&&t(Tze),m&&t(gc),w(tx),m&&t(Mze),m&&t(tr),w(ax),w(sx),w(zC),w(lx),w(n3),m&&t(Eze),m&&t(pc),w(ix),m&&t(Cze),m&&t(ar),w(dx),w(mx),w(l3),w(fx),w(h3),m&&t(wze),m&&t(vc),w(gx),m&&t(Aze),m&&t(nr),w(hx),w(px),w(p3),w(_x),w(I3),m&&t(Lze),m&&t(Mc),w(bx),m&&t(yze),m&&t(sr),w(vx),w(Tx),w(j3),w(Mx),w(J3),m&&t(xze),m&&t(wc),w(Ex),m&&t($ze),m&&t(lr),w(Cx),w(Ax),w(K3),w(Lx),w(w5),m&&t(kze),m&&t(yc),w(yx),m&&t(Sze),m&&t(ir),w(xx),w(kx),w(L5),w(Sx),w(z5),m&&t(Rze),m&&t(kc),w(Rx),m&&t(Pze),m&&t(dr),w(Px),w(Nx),w(W5),w(Ix),w(J5),m&&t(Bze),m&&t(Pc),w(jx),m&&t(Nze),m&&t(cr),w(Dx),w(Ox),w(K5),w(Vx),w(e0),m&&t(Ize),m&&t(Ic),w(Xx),m&&t(qze),m&&t(mr),w(zx),w(Wx),w(r0),w(Hx),w(E0),m&&t(jze),m&&t(Dc),w(Ux),m&&t(Dze),m&&t(fr),w(Jx),w(Kx),w(w0),w(Zx),w(Q0),m&&t(Gze),m&&t(Vc),w(e$),m&&t(Oze),m&&t(gr),w(o$),w(t$),w(H0),w(a$),w(J0),m&&t(Vze),m&&t(Qc),w(n$),m&&t(Xze),m&&t(hr),w(s$),w(i$),w(K0),w(d$),w(ew),m&&t(zze),m&&t(Uc),w(c$),m&&t(Qze),m&&t(ur),w(m$),w(g$),w(rw),w(h$),w($w),m&&t(Wze),m&&t(Kc),w(u$),m&&t(Hze),m&&t(pr),w(p$),w(b$),w(Sw),w(v$),w(Vw),m&&t(Uze),m&&t(om),w(F$),m&&t(Jze),m&&t(_r),w(T$),w(E$),w(zw),w(C$),w(nA),m&&t(Yze),m&&t(am),w(w$),m&&t(Kze),m&&t(br),w(A$),w(y$),w(lA),w(x$),w(bA),m&&t(Zze),m&&t(lm),w($$),m&&t(eQe),m&&t(vr),w(k$),w(R$),w(FA),w(P$),w(kA),m&&t(oQe),m&&t(cm),w(B$),m&&t(rQe),m&&t(Fr),w(N$),w(q$),w(RA),w(j$),w(XA),m&&t(tQe),m&&t(gm),w(D$),m&&t(aQe),m&&t(Tr),w(G$),w(V$),w(QA),w(X$),w(t6),m&&t(nQe),m&&t(pm),w(z$),m&&t(sQe),m&&t(Mr),w(Q$),w(H$),w(n6),w(U$),w(h6),m&&t(lQe),m&&t(vm),w(J$),m&&t(iQe),m&&t(Er),w(Y$),w(Z$),w(p6),w(ek),w(w6),m&&t(dQe),m&&t(Mm),w(ok),m&&t(cQe),m&&t(Cr),w(rk),w(ak),w(L6),w(nk),w(x6),m&&t(mQe),m&&t(wm),w(sk),m&&t(fQe),m&&t(wr),w(lk),w(dk),w(k6),w(ck),w(P6),m&&t(gQe),m&&t(ym),w(fk),m&&t(hQe),m&&t(Ar),w(gk),w(uk),w(N6),w(pk),w(q6)}}}const bUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vUt($){return _Wt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class AUt extends gWt{constructor(g){super();hWt(this,g,vUt,_Ut,uWt,{})}}export{AUt as default,bUt as metadata};
