import{S as eFa,i as oFa,s as rFa,e as a,k as l,w as F,t as o,M as tFa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as aFa,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as ECt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function nFa($){let g,v,u,f,p,d,h,xo,dd,Rf,bt,cd,md,Tx,Pf,Ve,He,fd,ns,Mx,ss,ls,Ex,gd,is,Cx,hd,Bf,Ja;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),xo=o(`, make sure its
`),dd=a("code"),Rf=o("model_type"),bt=o(" attribute is set to the same key you use when registering the config (here "),cd=a("code"),md=o('"new-model"'),Tx=o(")."),Pf=l(),Ve=a("p"),He=o("Likewise, if your "),fd=a("code"),ns=o("NewModel"),Mx=o(" is a subclass of "),ss=a("a"),ls=o("PreTrainedModel"),Ex=o(`, make sure its
`),gd=a("code"),is=o("config_class"),Cx=o(` attribute is set to the same class you use when registering the model (here
`),hd=a("code"),Bf=o("NewModelConfig"),Ja=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var xI=s(u);f=r(xI,"NewModelConfig"),xI.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ud=s(d);h=r(ud,"PretrainedConfig"),ud.forEach(t),xo=r(Ae,`, make sure its
`),dd=n(Ae,"CODE",{});var $I=s(dd);Rf=r($I,"model_type"),$I.forEach(t),bt=r(Ae," attribute is set to the same key you use when registering the config (here "),cd=n(Ae,"CODE",{});var kI=s(cd);md=r(kI,'"new-model"'),kI.forEach(t),Tx=r(Ae,")."),Ae.forEach(t),Pf=i(Je),Ve=n(Je,"P",{});var $o=s(Ve);He=r($o,"Likewise, if your "),fd=n($o,"CODE",{});var Ya=s(fd);ns=r(Ya,"NewModel"),Ya.forEach(t),Mx=r($o," is a subclass of "),ss=n($o,"A",{href:!0});var SI=s(ss);ls=r(SI,"PreTrainedModel"),SI.forEach(t),Ex=r($o,`, make sure its
`),gd=n($o,"CODE",{});var If=s(gd);is=r(If,"config_class"),If.forEach(t),Cx=r($o,` attribute is set to the same class you use when registering the model (here
`),hd=n($o,"CODE",{});var RI=s(hd);Bf=r(RI,"NewModelConfig"),RI.forEach(t),Ja=r($o,")."),$o.forEach(t),this.h()},h(){c(ss,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,xo),e(g,dd),e(dd,Rf),e(g,bt),e(g,cd),e(cd,md),e(g,Tx),b(Je,Pf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,fd),e(fd,ns),e(Ve,Mx),e(Ve,ss),e(ss,ls),e(Ve,Ex),e(Ve,gd),e(gd,is),e(Ve,Cx),e(Ve,hd),e(hd,Bf),e(Ve,Ja)},d(Je){Je&&t(g),Je&&t(Pf),Je&&t(Ve)}}}function sFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iFa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);f=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function dFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cFa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);f=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function mFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Fa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Fa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForZeroShotObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForZeroShotObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ETa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ATa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function STa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ITa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hMa($){let g,v,u,f,p,d,h,xo,dd,Rf,bt,cd,md,Tx,Pf,Ve,He,fd,ns,Mx,ss,ls,Ex,gd,is,Cx,hd,Bf,Ja,Je,Ae,xI,ud,$I,kI,$o,Ya,SI,If,RI,Nno,aoo,pd,Nf,Vce,wx,qno,Xce,jno,noo,ds,Dno,zce,Gno,Ono,Qce,Vno,Xno,soo,Ax,loo,PI,zno,ioo,qf,doo,_d,jf,Wce,Lx,Qno,Uce,Wno,coo,ko,yx,Uno,xx,Hno,BI,Jno,Yno,Zno,$x,Kno,Hce,eso,oso,rso,Ir,kx,tso,Jce,aso,nso,bd,sso,Yce,lso,iso,Zce,dso,cso,mso,A,Df,Kce,fso,gso,II,hso,uso,pso,Gf,eme,_so,bso,NI,vso,Fso,Tso,Of,ome,Mso,Eso,qI,Cso,wso,Aso,Vf,rme,Lso,yso,jI,xso,$so,kso,Xf,tme,Sso,Rso,DI,Pso,Bso,Iso,zf,ame,Nso,qso,GI,jso,Dso,Gso,Qf,nme,Oso,Vso,OI,Xso,zso,Qso,Wf,sme,Wso,Uso,VI,Hso,Jso,Yso,Uf,lme,Zso,Kso,XI,elo,olo,rlo,Hf,ime,tlo,alo,zI,nlo,slo,llo,Jf,dme,ilo,dlo,QI,clo,mlo,flo,Yf,cme,glo,hlo,WI,ulo,plo,_lo,Zf,mme,blo,vlo,UI,Flo,Tlo,Mlo,Kf,fme,Elo,Clo,HI,wlo,Alo,Llo,eg,gme,ylo,xlo,JI,$lo,klo,Slo,og,hme,Rlo,Plo,YI,Blo,Ilo,Nlo,rg,ume,qlo,jlo,ZI,Dlo,Glo,Olo,tg,pme,Vlo,Xlo,KI,zlo,Qlo,Wlo,ag,_me,Ulo,Hlo,eN,Jlo,Ylo,Zlo,ng,bme,Klo,eio,oN,oio,rio,tio,sg,vme,aio,nio,rN,sio,lio,iio,lg,Fme,dio,cio,tN,mio,fio,gio,ig,Tme,hio,uio,aN,pio,_io,bio,dg,Mme,vio,Fio,nN,Tio,Mio,Eio,cg,Eme,Cio,wio,sN,Aio,Lio,yio,mg,Cme,xio,$io,lN,kio,Sio,Rio,fg,wme,Pio,Bio,iN,Iio,Nio,qio,gg,Ame,jio,Dio,dN,Gio,Oio,Vio,hg,Lme,Xio,zio,cN,Qio,Wio,Uio,ug,yme,Hio,Jio,mN,Yio,Zio,Kio,pg,xme,edo,odo,fN,rdo,tdo,ado,_g,$me,ndo,sdo,gN,ldo,ido,ddo,bg,kme,cdo,mdo,hN,fdo,gdo,hdo,vg,Sme,udo,pdo,uN,_do,bdo,vdo,Fg,Rme,Fdo,Tdo,pN,Mdo,Edo,Cdo,Tg,Pme,wdo,Ado,_N,Ldo,ydo,xdo,Mg,Bme,$do,kdo,bN,Sdo,Rdo,Pdo,Eg,Ime,Bdo,Ido,vN,Ndo,qdo,jdo,Cg,Nme,Ddo,Gdo,FN,Odo,Vdo,Xdo,wg,qme,zdo,Qdo,TN,Wdo,Udo,Hdo,Ag,jme,Jdo,Ydo,MN,Zdo,Kdo,eco,Lg,Dme,oco,rco,EN,tco,aco,nco,yg,Gme,sco,lco,CN,ico,dco,cco,xg,Ome,mco,fco,wN,gco,hco,uco,$g,Vme,pco,_co,AN,bco,vco,Fco,kg,Xme,Tco,Mco,LN,Eco,Cco,wco,Sg,zme,Aco,Lco,yN,yco,xco,$co,Rg,Qme,kco,Sco,xN,Rco,Pco,Bco,Pg,Wme,Ico,Nco,$N,qco,jco,Dco,Bg,Ume,Gco,Oco,kN,Vco,Xco,zco,Ig,Hme,Qco,Wco,SN,Uco,Hco,Jco,Ng,Jme,Yco,Zco,RN,Kco,emo,omo,qg,Yme,rmo,tmo,PN,amo,nmo,smo,jg,Zme,lmo,imo,BN,dmo,cmo,mmo,Dg,Kme,fmo,gmo,IN,hmo,umo,pmo,Gg,efe,_mo,bmo,NN,vmo,Fmo,Tmo,Og,ofe,Mmo,Emo,qN,Cmo,wmo,Amo,Vg,rfe,Lmo,ymo,jN,xmo,$mo,kmo,Xg,tfe,Smo,Rmo,DN,Pmo,Bmo,Imo,zg,afe,Nmo,qmo,GN,jmo,Dmo,Gmo,Qg,nfe,Omo,Vmo,ON,Xmo,zmo,Qmo,Wg,sfe,Wmo,Umo,VN,Hmo,Jmo,Ymo,Ug,lfe,Zmo,Kmo,XN,efo,ofo,rfo,Hg,ife,tfo,afo,zN,nfo,sfo,lfo,Jg,dfe,ifo,dfo,QN,cfo,mfo,ffo,Yg,cfe,gfo,hfo,WN,ufo,pfo,_fo,Zg,mfe,bfo,vfo,UN,Ffo,Tfo,Mfo,Kg,ffe,Efo,Cfo,HN,wfo,Afo,Lfo,eh,gfe,yfo,xfo,JN,$fo,kfo,Sfo,oh,hfe,Rfo,Pfo,YN,Bfo,Ifo,Nfo,rh,ufe,qfo,jfo,ZN,Dfo,Gfo,Ofo,th,pfe,Vfo,Xfo,KN,zfo,Qfo,Wfo,ah,_fe,Ufo,Hfo,eq,Jfo,Yfo,Zfo,nh,bfe,Kfo,ego,oq,ogo,rgo,tgo,sh,vfe,ago,ngo,rq,sgo,lgo,igo,lh,Ffe,dgo,cgo,tq,mgo,fgo,ggo,ih,Tfe,hgo,ugo,aq,pgo,_go,bgo,dh,Mfe,vgo,Fgo,nq,Tgo,Mgo,Ego,ch,Efe,Cgo,wgo,sq,Ago,Lgo,ygo,mh,Cfe,xgo,$go,lq,kgo,Sgo,Rgo,fh,wfe,Pgo,Bgo,iq,Igo,Ngo,qgo,gh,Afe,jgo,Dgo,dq,Ggo,Ogo,Vgo,hh,Lfe,Xgo,zgo,cq,Qgo,Wgo,Ugo,uh,yfe,Hgo,Jgo,mq,Ygo,Zgo,Kgo,ph,xfe,eho,oho,fq,rho,tho,aho,_h,$fe,nho,sho,gq,lho,iho,dho,bh,kfe,cho,mho,hq,fho,gho,hho,vh,Sfe,uho,pho,uq,_ho,bho,vho,Fh,Rfe,Fho,Tho,pq,Mho,Eho,Cho,Th,Pfe,who,Aho,_q,Lho,yho,xho,Mh,Bfe,$ho,kho,bq,Sho,Rho,Pho,Eh,Ife,Bho,Iho,vq,Nho,qho,jho,Ch,Nfe,Dho,Gho,Fq,Oho,Vho,Xho,wh,qfe,zho,Qho,Tq,Who,Uho,Hho,Ah,jfe,Jho,Yho,Mq,Zho,Kho,euo,Lh,Dfe,ouo,ruo,Eq,tuo,auo,nuo,yh,Gfe,suo,luo,Cq,iuo,duo,cuo,xh,Ofe,muo,fuo,wq,guo,huo,uuo,$h,Vfe,puo,_uo,Aq,buo,vuo,Fuo,kh,Xfe,Tuo,Muo,Lq,Euo,Cuo,wuo,Sh,zfe,Auo,Luo,yq,yuo,xuo,$uo,Rh,Qfe,kuo,Suo,xq,Ruo,Puo,Buo,Ph,Wfe,Iuo,Nuo,$q,quo,juo,Duo,Bh,Ufe,Guo,Ouo,kq,Vuo,Xuo,zuo,Ih,Hfe,Quo,Wuo,Sq,Uuo,Huo,Juo,Nh,Jfe,Yuo,Zuo,Rq,Kuo,epo,opo,qh,Yfe,rpo,tpo,Pq,apo,npo,spo,jh,Zfe,lpo,ipo,Bq,dpo,cpo,mpo,Dh,Kfe,fpo,gpo,Iq,hpo,upo,ppo,Gh,ege,_po,bpo,Nq,vpo,Fpo,Tpo,Oh,oge,Mpo,Epo,qq,Cpo,wpo,Apo,Vh,rge,Lpo,ypo,jq,xpo,$po,kpo,Xh,tge,Spo,Rpo,Dq,Ppo,Bpo,Ipo,zh,age,Npo,qpo,Gq,jpo,Dpo,Gpo,Qh,nge,Opo,Vpo,Oq,Xpo,zpo,Qpo,Wh,sge,Wpo,Upo,Vq,Hpo,Jpo,Ypo,Uh,lge,Zpo,Kpo,Xq,e_o,o_o,r_o,Hh,ige,t_o,a_o,zq,n_o,s_o,l_o,Jh,dge,i_o,d_o,Qq,c_o,m_o,f_o,Yh,cge,g_o,h_o,Wq,u_o,p_o,__o,Zh,mge,b_o,v_o,Uq,F_o,T_o,M_o,Kh,fge,E_o,C_o,Hq,w_o,A_o,L_o,eu,gge,y_o,x_o,Jq,$_o,k_o,S_o,ou,hge,R_o,P_o,Yq,B_o,I_o,N_o,ru,uge,q_o,j_o,Zq,D_o,G_o,O_o,tu,pge,V_o,X_o,Kq,z_o,Q_o,W_o,au,_ge,U_o,H_o,ej,J_o,Y_o,Z_o,nu,bge,K_o,e1o,oj,o1o,r1o,t1o,su,vge,a1o,n1o,rj,s1o,l1o,i1o,lu,Fge,d1o,c1o,tj,m1o,f1o,g1o,iu,Tge,h1o,u1o,aj,p1o,_1o,b1o,du,Mge,v1o,F1o,nj,T1o,M1o,E1o,cu,Ege,C1o,w1o,sj,A1o,L1o,y1o,mu,x1o,fu,Sx,$1o,Cge,k1o,moo,vd,gu,wge,Rx,S1o,Age,R1o,foo,So,Px,P1o,Bx,B1o,lj,I1o,N1o,q1o,Ix,j1o,Lge,D1o,G1o,O1o,Nr,Nx,V1o,yge,X1o,z1o,Za,Q1o,xge,W1o,U1o,$ge,H1o,J1o,kge,Y1o,Z1o,K1o,k,cs,Sge,ebo,obo,ij,rbo,tbo,dj,abo,nbo,sbo,ms,Rge,lbo,ibo,cj,dbo,cbo,mj,mbo,fbo,gbo,fs,Pge,hbo,ubo,fj,pbo,_bo,gj,bbo,vbo,Fbo,hu,Bge,Tbo,Mbo,hj,Ebo,Cbo,wbo,gs,Ige,Abo,Lbo,uj,ybo,xbo,pj,$bo,kbo,Sbo,uu,Nge,Rbo,Pbo,_j,Bbo,Ibo,Nbo,pu,qge,qbo,jbo,bj,Dbo,Gbo,Obo,_u,jge,Vbo,Xbo,vj,zbo,Qbo,Wbo,hs,Dge,Ubo,Hbo,Fj,Jbo,Ybo,Tj,Zbo,Kbo,e2o,us,Gge,o2o,r2o,Mj,t2o,a2o,Ej,n2o,s2o,l2o,ps,Oge,i2o,d2o,Cj,c2o,m2o,wj,f2o,g2o,h2o,bu,Vge,u2o,p2o,Aj,_2o,b2o,v2o,vu,Xge,F2o,T2o,Lj,M2o,E2o,C2o,Fu,zge,w2o,A2o,yj,L2o,y2o,x2o,_s,Qge,$2o,k2o,xj,S2o,R2o,$j,P2o,B2o,I2o,Tu,Wge,N2o,q2o,kj,j2o,D2o,G2o,bs,Uge,O2o,V2o,Sj,X2o,z2o,Rj,Q2o,W2o,U2o,vs,Hge,H2o,J2o,Pj,Y2o,Z2o,Bj,K2o,evo,ovo,Fs,Jge,rvo,tvo,Ij,avo,nvo,Nj,svo,lvo,ivo,Ts,Yge,dvo,cvo,qj,mvo,fvo,jj,gvo,hvo,uvo,Mu,Zge,pvo,_vo,Dj,bvo,vvo,Fvo,Ms,Kge,Tvo,Mvo,Gj,Evo,Cvo,Oj,wvo,Avo,Lvo,Es,ehe,yvo,xvo,Vj,$vo,kvo,Xj,Svo,Rvo,Pvo,Cs,ohe,Bvo,Ivo,zj,Nvo,qvo,Qj,jvo,Dvo,Gvo,ws,rhe,Ovo,Vvo,Wj,Xvo,zvo,Uj,Qvo,Wvo,Uvo,As,the,Hvo,Jvo,Hj,Yvo,Zvo,Jj,Kvo,eFo,oFo,Ls,ahe,rFo,tFo,Yj,aFo,nFo,Zj,sFo,lFo,iFo,ys,nhe,dFo,cFo,Kj,mFo,fFo,eD,gFo,hFo,uFo,Eu,she,pFo,_Fo,oD,bFo,vFo,FFo,xs,lhe,TFo,MFo,rD,EFo,CFo,tD,wFo,AFo,LFo,Cu,ihe,yFo,xFo,aD,$Fo,kFo,SFo,$s,dhe,RFo,PFo,nD,BFo,IFo,sD,NFo,qFo,jFo,ks,che,DFo,GFo,lD,OFo,VFo,iD,XFo,zFo,QFo,Ss,mhe,WFo,UFo,dD,HFo,JFo,cD,YFo,ZFo,KFo,wu,fhe,eTo,oTo,mD,rTo,tTo,aTo,Au,ghe,nTo,sTo,fD,lTo,iTo,dTo,Rs,hhe,cTo,mTo,gD,fTo,gTo,hD,hTo,uTo,pTo,Ps,uhe,_To,bTo,uD,vTo,FTo,pD,TTo,MTo,ETo,Bs,phe,CTo,wTo,_D,ATo,LTo,bD,yTo,xTo,$To,Lu,_he,kTo,STo,vD,RTo,PTo,BTo,Is,bhe,ITo,NTo,FD,qTo,jTo,TD,DTo,GTo,OTo,Ns,vhe,VTo,XTo,MD,zTo,QTo,ED,WTo,UTo,HTo,qs,Fhe,JTo,YTo,CD,ZTo,KTo,wD,eMo,oMo,rMo,js,The,tMo,aMo,AD,nMo,sMo,LD,lMo,iMo,dMo,Ds,Mhe,cMo,mMo,yD,fMo,gMo,xD,hMo,uMo,pMo,Gs,Ehe,_Mo,bMo,$D,vMo,FMo,kD,TMo,MMo,EMo,Os,Che,CMo,wMo,SD,AMo,LMo,RD,yMo,xMo,$Mo,Vs,whe,kMo,SMo,PD,RMo,PMo,BD,BMo,IMo,NMo,yu,Ahe,qMo,jMo,ID,DMo,GMo,OMo,Xs,Lhe,VMo,XMo,ND,zMo,QMo,qD,WMo,UMo,HMo,xu,yhe,JMo,YMo,jD,ZMo,KMo,eEo,$u,xhe,oEo,rEo,DD,tEo,aEo,nEo,zs,$he,sEo,lEo,GD,iEo,dEo,OD,cEo,mEo,fEo,Qs,khe,gEo,hEo,VD,uEo,pEo,XD,_Eo,bEo,vEo,Ws,She,FEo,TEo,zD,MEo,EEo,QD,CEo,wEo,AEo,ku,Rhe,LEo,yEo,WD,xEo,$Eo,kEo,Us,Phe,SEo,REo,UD,PEo,BEo,HD,IEo,NEo,qEo,Hs,Bhe,jEo,DEo,JD,GEo,OEo,YD,VEo,XEo,zEo,Js,Ihe,QEo,WEo,ZD,UEo,HEo,KD,JEo,YEo,ZEo,Ys,Nhe,KEo,e4o,eG,o4o,r4o,oG,t4o,a4o,n4o,Zs,qhe,s4o,l4o,rG,i4o,d4o,tG,c4o,m4o,f4o,Ks,jhe,g4o,h4o,aG,u4o,p4o,nG,_4o,b4o,v4o,el,Dhe,F4o,T4o,sG,M4o,E4o,lG,C4o,w4o,A4o,ol,Ghe,L4o,y4o,iG,x4o,$4o,dG,k4o,S4o,R4o,Su,Ohe,P4o,B4o,cG,I4o,N4o,q4o,rl,Vhe,j4o,D4o,mG,G4o,O4o,fG,V4o,X4o,z4o,tl,Xhe,Q4o,W4o,gG,U4o,H4o,hG,J4o,Y4o,Z4o,Ru,zhe,K4o,eCo,uG,oCo,rCo,tCo,Pu,Qhe,aCo,nCo,pG,sCo,lCo,iCo,Bu,Whe,dCo,cCo,_G,mCo,fCo,gCo,Iu,Uhe,hCo,uCo,bG,pCo,_Co,bCo,al,Hhe,vCo,FCo,vG,TCo,MCo,FG,ECo,CCo,wCo,Nu,Jhe,ACo,LCo,TG,yCo,xCo,$Co,nl,Yhe,kCo,SCo,MG,RCo,PCo,EG,BCo,ICo,NCo,sl,Zhe,qCo,jCo,CG,DCo,GCo,wG,OCo,VCo,XCo,ll,Khe,zCo,QCo,AG,WCo,UCo,LG,HCo,JCo,YCo,il,eue,ZCo,KCo,yG,e3o,o3o,xG,r3o,t3o,a3o,dl,oue,n3o,s3o,$G,l3o,i3o,kG,d3o,c3o,m3o,cl,rue,f3o,g3o,SG,h3o,u3o,RG,p3o,_3o,b3o,qu,tue,v3o,F3o,PG,T3o,M3o,E3o,ju,aue,C3o,w3o,BG,A3o,L3o,y3o,ml,nue,x3o,$3o,IG,k3o,S3o,NG,R3o,P3o,B3o,fl,sue,I3o,N3o,qG,q3o,j3o,jG,D3o,G3o,O3o,gl,lue,V3o,X3o,DG,z3o,Q3o,GG,W3o,U3o,H3o,Du,iue,J3o,Y3o,OG,Z3o,K3o,e5o,Gu,due,o5o,r5o,VG,t5o,a5o,n5o,Ou,cue,s5o,l5o,XG,i5o,d5o,c5o,hl,mue,m5o,f5o,zG,g5o,h5o,QG,u5o,p5o,_5o,ul,fue,b5o,v5o,WG,F5o,T5o,UG,M5o,E5o,C5o,Vu,gue,w5o,A5o,HG,L5o,y5o,x5o,Xu,hue,$5o,k5o,JG,S5o,R5o,P5o,zu,uue,B5o,I5o,YG,N5o,q5o,j5o,Qu,pue,D5o,G5o,ZG,O5o,V5o,X5o,pl,_ue,z5o,Q5o,KG,W5o,U5o,eO,H5o,J5o,Y5o,_l,bue,Z5o,K5o,oO,e0o,o0o,rO,r0o,t0o,a0o,Wu,vue,n0o,s0o,tO,l0o,i0o,d0o,Uu,Fue,c0o,m0o,aO,f0o,g0o,h0o,bl,Tue,u0o,p0o,nO,_0o,b0o,sO,v0o,F0o,T0o,vl,Mue,M0o,E0o,lO,C0o,w0o,iO,A0o,L0o,y0o,Fl,Eue,x0o,$0o,dO,k0o,S0o,cO,R0o,P0o,B0o,Tl,Cue,I0o,N0o,mO,q0o,j0o,fO,D0o,G0o,O0o,Hu,V0o,Ju,qx,X0o,wue,z0o,goo,Fd,Yu,Aue,jx,Q0o,Lue,W0o,hoo,Ro,Dx,U0o,Gx,H0o,gO,J0o,Y0o,Z0o,Ox,K0o,yue,ewo,owo,rwo,Ye,Vx,two,xue,awo,nwo,Ka,swo,$ue,lwo,iwo,kue,dwo,cwo,Sue,mwo,fwo,gwo,z,Zu,Rue,hwo,uwo,hO,pwo,_wo,bwo,Ku,Pue,vwo,Fwo,uO,Two,Mwo,Ewo,ep,Bue,Cwo,wwo,pO,Awo,Lwo,ywo,op,Iue,xwo,$wo,_O,kwo,Swo,Rwo,rp,Nue,Pwo,Bwo,bO,Iwo,Nwo,qwo,tp,que,jwo,Dwo,vO,Gwo,Owo,Vwo,ap,jue,Xwo,zwo,FO,Qwo,Wwo,Uwo,np,Due,Hwo,Jwo,TO,Ywo,Zwo,Kwo,sp,Gue,eAo,oAo,MO,rAo,tAo,aAo,lp,Oue,nAo,sAo,EO,lAo,iAo,dAo,ip,Vue,cAo,mAo,CO,fAo,gAo,hAo,dp,Xue,uAo,pAo,wO,_Ao,bAo,vAo,cp,zue,FAo,TAo,AO,MAo,EAo,CAo,mp,Que,wAo,AAo,LO,LAo,yAo,xAo,fp,Wue,$Ao,kAo,yO,SAo,RAo,PAo,gp,Uue,BAo,IAo,xO,NAo,qAo,jAo,hp,Hue,DAo,GAo,$O,OAo,VAo,XAo,up,Jue,zAo,QAo,kO,WAo,UAo,HAo,pp,Yue,JAo,YAo,SO,ZAo,KAo,e6o,_p,Zue,o6o,r6o,RO,t6o,a6o,n6o,bp,Kue,s6o,l6o,PO,i6o,d6o,c6o,vp,epe,m6o,f6o,BO,g6o,h6o,u6o,Fp,ope,p6o,_6o,IO,b6o,v6o,F6o,Tp,rpe,T6o,M6o,NO,E6o,C6o,w6o,Mp,tpe,A6o,L6o,qO,y6o,x6o,$6o,Ep,ape,k6o,S6o,jO,R6o,P6o,B6o,Cp,npe,I6o,N6o,DO,q6o,j6o,D6o,wp,spe,G6o,O6o,GO,V6o,X6o,z6o,Ap,lpe,Q6o,W6o,OO,U6o,H6o,J6o,Lp,ipe,Y6o,Z6o,VO,K6o,e7o,o7o,yp,dpe,r7o,t7o,XO,a7o,n7o,s7o,xp,cpe,l7o,i7o,zO,d7o,c7o,m7o,$p,mpe,f7o,g7o,QO,h7o,u7o,p7o,kp,fpe,_7o,b7o,WO,v7o,F7o,T7o,Sp,gpe,M7o,E7o,UO,C7o,w7o,A7o,Rp,hpe,L7o,y7o,HO,x7o,$7o,k7o,Pp,upe,S7o,R7o,JO,P7o,B7o,I7o,Bp,ppe,N7o,q7o,YO,j7o,D7o,G7o,Ip,_pe,O7o,V7o,ZO,X7o,z7o,Q7o,Np,bpe,W7o,U7o,KO,H7o,J7o,Y7o,qp,vpe,Z7o,K7o,eV,eLo,oLo,rLo,jp,Fpe,tLo,aLo,oV,nLo,sLo,lLo,Dp,Tpe,iLo,dLo,rV,cLo,mLo,fLo,Gp,gLo,Op,hLo,Vp,Xx,uLo,Mpe,pLo,uoo,Td,Xp,Epe,zx,_Lo,Cpe,bLo,poo,Po,Qx,vLo,Wx,FLo,tV,TLo,MLo,ELo,Ux,CLo,wpe,wLo,ALo,LLo,Ze,Hx,yLo,Ape,xLo,$Lo,Md,kLo,Lpe,SLo,RLo,ype,PLo,BLo,ILo,se,zp,xpe,NLo,qLo,aV,jLo,DLo,GLo,Qp,$pe,OLo,VLo,nV,XLo,zLo,QLo,Wp,kpe,WLo,ULo,sV,HLo,JLo,YLo,Up,Spe,ZLo,KLo,lV,eyo,oyo,ryo,Hp,Rpe,tyo,ayo,iV,nyo,syo,lyo,Jp,Ppe,iyo,dyo,dV,cyo,myo,fyo,Yp,Bpe,gyo,hyo,cV,uyo,pyo,_yo,Zp,Ipe,byo,vyo,mV,Fyo,Tyo,Myo,Kp,Npe,Eyo,Cyo,fV,wyo,Ayo,Lyo,e_,qpe,yyo,xyo,gV,$yo,kyo,Syo,o_,jpe,Ryo,Pyo,hV,Byo,Iyo,Nyo,r_,Dpe,qyo,jyo,uV,Dyo,Gyo,Oyo,t_,Gpe,Vyo,Xyo,pV,zyo,Qyo,Wyo,a_,Ope,Uyo,Hyo,_V,Jyo,Yyo,Zyo,n_,Vpe,Kyo,e8o,bV,o8o,r8o,t8o,s_,Xpe,a8o,n8o,vV,s8o,l8o,i8o,l_,zpe,d8o,c8o,FV,m8o,f8o,g8o,i_,Qpe,h8o,u8o,TV,p8o,_8o,b8o,d_,Wpe,v8o,F8o,MV,T8o,M8o,E8o,c_,Upe,C8o,w8o,EV,A8o,L8o,y8o,m_,Hpe,x8o,$8o,CV,k8o,S8o,R8o,f_,Jpe,P8o,B8o,wV,I8o,N8o,q8o,g_,Ype,j8o,D8o,AV,G8o,O8o,V8o,h_,X8o,u_,z8o,p_,Jx,Q8o,Zpe,W8o,_oo,Ed,__,Kpe,Yx,U8o,e_e,H8o,boo,Bo,Zx,J8o,Cd,Y8o,LV,Z8o,K8o,yV,e9o,o9o,r9o,Kx,t9o,o_e,a9o,n9o,s9o,vt,e$,l9o,r_e,i9o,d9o,wd,c9o,t_e,m9o,f9o,xV,g9o,h9o,u9o,b_,p9o,Ke,o$,_9o,a_e,b9o,v9o,en,F9o,n_e,T9o,M9o,s_e,E9o,C9o,l_e,w9o,A9o,L9o,y,v_,i_e,y9o,x9o,$V,$9o,k9o,S9o,F_,d_e,R9o,P9o,kV,B9o,I9o,N9o,T_,c_e,q9o,j9o,SV,D9o,G9o,O9o,M_,m_e,V9o,X9o,RV,z9o,Q9o,W9o,E_,f_e,U9o,H9o,PV,J9o,Y9o,Z9o,C_,g_e,K9o,exo,BV,oxo,rxo,txo,w_,h_e,axo,nxo,IV,sxo,lxo,ixo,A_,u_e,dxo,cxo,NV,mxo,fxo,gxo,L_,p_e,hxo,uxo,qV,pxo,_xo,bxo,y_,__e,vxo,Fxo,jV,Txo,Mxo,Exo,x_,b_e,Cxo,wxo,DV,Axo,Lxo,yxo,$_,v_e,xxo,$xo,GV,kxo,Sxo,Rxo,k_,F_e,Pxo,Bxo,OV,Ixo,Nxo,qxo,S_,T_e,jxo,Dxo,VV,Gxo,Oxo,Vxo,R_,M_e,Xxo,zxo,XV,Qxo,Wxo,Uxo,P_,E_e,Hxo,Jxo,zV,Yxo,Zxo,Kxo,B_,C_e,e$o,o$o,QV,r$o,t$o,a$o,I_,w_e,n$o,s$o,WV,l$o,i$o,d$o,N_,A_e,c$o,m$o,UV,f$o,g$o,h$o,q_,L_e,u$o,p$o,HV,_$o,b$o,v$o,j_,y_e,F$o,T$o,JV,M$o,E$o,C$o,D_,x_e,w$o,A$o,YV,L$o,y$o,x$o,G_,$_e,$$o,k$o,ZV,S$o,R$o,P$o,O_,k_e,B$o,I$o,KV,N$o,q$o,j$o,V_,S_e,D$o,G$o,eX,O$o,V$o,X$o,X_,R_e,z$o,Q$o,oX,W$o,U$o,H$o,z_,P_e,J$o,Y$o,rX,Z$o,K$o,eko,Q_,B_e,oko,rko,tX,tko,ako,nko,W_,I_e,sko,lko,aX,iko,dko,cko,U_,N_e,mko,fko,nX,gko,hko,uko,H_,q_e,pko,_ko,sX,bko,vko,Fko,J_,j_e,Tko,Mko,lX,Eko,Cko,wko,Y_,D_e,Ako,Lko,iX,yko,xko,$ko,Z_,G_e,kko,Sko,dX,Rko,Pko,Bko,K_,O_e,Iko,Nko,cX,qko,jko,Dko,e1,V_e,Gko,Oko,mX,Vko,Xko,zko,o1,X_e,Qko,Wko,fX,Uko,Hko,Jko,r1,z_e,Yko,Zko,gX,Kko,eSo,oSo,t1,Q_e,rSo,tSo,hX,aSo,nSo,sSo,Ml,W_e,lSo,iSo,uX,dSo,cSo,pX,mSo,fSo,gSo,a1,U_e,hSo,uSo,_X,pSo,_So,bSo,n1,H_e,vSo,FSo,bX,TSo,MSo,ESo,s1,J_e,CSo,wSo,vX,ASo,LSo,ySo,l1,Y_e,xSo,$So,FX,kSo,SSo,RSo,i1,Z_e,PSo,BSo,TX,ISo,NSo,qSo,d1,K_e,jSo,DSo,MX,GSo,OSo,VSo,c1,e1e,XSo,zSo,EX,QSo,WSo,USo,m1,o1e,HSo,JSo,CX,YSo,ZSo,KSo,f1,r1e,eRo,oRo,wX,rRo,tRo,aRo,g1,t1e,nRo,sRo,AX,lRo,iRo,dRo,h1,a1e,cRo,mRo,LX,fRo,gRo,hRo,u1,n1e,uRo,pRo,yX,_Ro,bRo,vRo,p1,s1e,FRo,TRo,xX,MRo,ERo,CRo,_1,l1e,wRo,ARo,$X,LRo,yRo,xRo,b1,i1e,$Ro,kRo,kX,SRo,RRo,PRo,v1,d1e,BRo,IRo,SX,NRo,qRo,jRo,F1,c1e,DRo,GRo,RX,ORo,VRo,XRo,T1,m1e,zRo,QRo,PX,WRo,URo,HRo,M1,f1e,JRo,YRo,BX,ZRo,KRo,ePo,E1,g1e,oPo,rPo,IX,tPo,aPo,nPo,C1,h1e,sPo,lPo,NX,iPo,dPo,cPo,w1,u1e,mPo,fPo,qX,gPo,hPo,uPo,A1,p1e,pPo,_Po,jX,bPo,vPo,FPo,L1,_1e,TPo,MPo,DX,EPo,CPo,wPo,y1,b1e,APo,LPo,GX,yPo,xPo,$Po,x1,v1e,kPo,SPo,OX,RPo,PPo,BPo,$1,F1e,IPo,NPo,VX,qPo,jPo,DPo,k1,T1e,GPo,OPo,XX,VPo,XPo,zPo,S1,M1e,QPo,WPo,zX,UPo,HPo,JPo,R1,E1e,YPo,ZPo,QX,KPo,eBo,oBo,P1,C1e,rBo,tBo,WX,aBo,nBo,sBo,B1,w1e,lBo,iBo,UX,dBo,cBo,mBo,I1,A1e,fBo,gBo,HX,hBo,uBo,pBo,N1,L1e,_Bo,bBo,JX,vBo,FBo,TBo,q1,y1e,MBo,EBo,YX,CBo,wBo,ABo,j1,x1e,LBo,yBo,ZX,xBo,$Bo,kBo,D1,$1e,SBo,RBo,KX,PBo,BBo,IBo,G1,k1e,NBo,qBo,ez,jBo,DBo,GBo,O1,S1e,OBo,VBo,oz,XBo,zBo,QBo,V1,R1e,WBo,UBo,rz,HBo,JBo,YBo,X1,P1e,ZBo,KBo,tz,eIo,oIo,rIo,z1,B1e,tIo,aIo,az,nIo,sIo,lIo,Q1,I1e,iIo,dIo,nz,cIo,mIo,fIo,W1,N1e,gIo,hIo,sz,uIo,pIo,_Io,U1,q1e,bIo,vIo,lz,FIo,TIo,MIo,H1,j1e,EIo,CIo,iz,wIo,AIo,LIo,J1,D1e,yIo,xIo,dz,$Io,kIo,SIo,Y1,G1e,RIo,PIo,cz,BIo,IIo,NIo,Z1,O1e,qIo,jIo,mz,DIo,GIo,OIo,K1,V1e,VIo,XIo,fz,zIo,QIo,WIo,eb,X1e,UIo,HIo,gz,JIo,YIo,ZIo,ob,z1e,KIo,eNo,hz,oNo,rNo,tNo,rb,Q1e,aNo,nNo,uz,sNo,lNo,iNo,tb,W1e,dNo,cNo,pz,mNo,fNo,gNo,ab,U1e,hNo,uNo,_z,pNo,_No,bNo,nb,H1e,vNo,FNo,bz,TNo,MNo,ENo,sb,J1e,CNo,wNo,vz,ANo,LNo,yNo,lb,Y1e,xNo,$No,Fz,kNo,SNo,RNo,ib,Z1e,PNo,BNo,Tz,INo,NNo,qNo,db,K1e,jNo,DNo,Mz,GNo,ONo,VNo,cb,ebe,XNo,zNo,Ez,QNo,WNo,UNo,mb,obe,HNo,JNo,Cz,YNo,ZNo,KNo,fb,rbe,eqo,oqo,wz,rqo,tqo,aqo,gb,tbe,nqo,sqo,Az,lqo,iqo,dqo,hb,abe,cqo,mqo,Lz,fqo,gqo,hqo,ub,nbe,uqo,pqo,yz,_qo,bqo,vqo,pb,sbe,Fqo,Tqo,xz,Mqo,Eqo,Cqo,_b,lbe,wqo,Aqo,$z,Lqo,yqo,xqo,bb,ibe,$qo,kqo,kz,Sqo,Rqo,Pqo,vb,dbe,Bqo,Iqo,Sz,Nqo,qqo,jqo,Fb,cbe,Dqo,Gqo,Rz,Oqo,Vqo,Xqo,Tb,mbe,zqo,Qqo,Pz,Wqo,Uqo,Hqo,Mb,fbe,Jqo,Yqo,Bz,Zqo,Kqo,ejo,Eb,gbe,ojo,rjo,Iz,tjo,ajo,njo,Cb,hbe,sjo,ljo,Nz,ijo,djo,cjo,wb,ube,mjo,fjo,qz,gjo,hjo,ujo,Ab,pbe,pjo,_jo,jz,bjo,vjo,Fjo,Lb,_be,Tjo,Mjo,Dz,Ejo,Cjo,wjo,yb,bbe,Ajo,Ljo,Gz,yjo,xjo,$jo,xb,vbe,kjo,Sjo,Oz,Rjo,Pjo,Bjo,$b,Fbe,Ijo,Njo,Vz,qjo,jjo,Djo,kb,Tbe,Gjo,Ojo,Xz,Vjo,Xjo,zjo,Sb,Mbe,Qjo,Wjo,zz,Ujo,Hjo,Jjo,Rb,Ebe,Yjo,Zjo,Qz,Kjo,eDo,oDo,Pb,Cbe,rDo,tDo,Wz,aDo,nDo,sDo,Bb,wbe,lDo,iDo,Uz,dDo,cDo,mDo,Ib,Abe,fDo,gDo,Hz,hDo,uDo,pDo,Nb,_Do,Lbe,bDo,vDo,ybe,FDo,TDo,qb,voo,Ad,jb,xbe,r$,MDo,$be,EDo,Foo,Io,t$,CDo,Ld,wDo,Jz,ADo,LDo,Yz,yDo,xDo,$Do,a$,kDo,kbe,SDo,RDo,PDo,Ft,n$,BDo,Sbe,IDo,NDo,yd,qDo,Rbe,jDo,DDo,Zz,GDo,ODo,VDo,Db,XDo,eo,s$,zDo,Pbe,QDo,WDo,on,UDo,Bbe,HDo,JDo,Ibe,YDo,ZDo,Nbe,KDo,eGo,oGo,G,Gb,qbe,rGo,tGo,Kz,aGo,nGo,sGo,Ob,jbe,lGo,iGo,eQ,dGo,cGo,mGo,Vb,Dbe,fGo,gGo,oQ,hGo,uGo,pGo,Xb,Gbe,_Go,bGo,rQ,vGo,FGo,TGo,zb,Obe,MGo,EGo,tQ,CGo,wGo,AGo,Qb,Vbe,LGo,yGo,aQ,xGo,$Go,kGo,Wb,Xbe,SGo,RGo,nQ,PGo,BGo,IGo,Ub,zbe,NGo,qGo,sQ,jGo,DGo,GGo,Hb,Qbe,OGo,VGo,lQ,XGo,zGo,QGo,Jb,Wbe,WGo,UGo,iQ,HGo,JGo,YGo,Yb,Ube,ZGo,KGo,dQ,eOo,oOo,rOo,Zb,Hbe,tOo,aOo,cQ,nOo,sOo,lOo,Kb,Jbe,iOo,dOo,mQ,cOo,mOo,fOo,e2,Ybe,gOo,hOo,fQ,uOo,pOo,_Oo,o2,Zbe,bOo,vOo,gQ,FOo,TOo,MOo,r2,Kbe,EOo,COo,hQ,wOo,AOo,LOo,t2,e2e,yOo,xOo,uQ,$Oo,kOo,SOo,a2,o2e,ROo,POo,pQ,BOo,IOo,NOo,n2,r2e,qOo,jOo,_Q,DOo,GOo,OOo,s2,t2e,VOo,XOo,bQ,zOo,QOo,WOo,l2,a2e,UOo,HOo,vQ,JOo,YOo,ZOo,i2,n2e,KOo,eVo,FQ,oVo,rVo,tVo,d2,s2e,aVo,nVo,TQ,sVo,lVo,iVo,c2,l2e,dVo,cVo,MQ,mVo,fVo,gVo,m2,i2e,hVo,uVo,EQ,pVo,_Vo,bVo,f2,d2e,vVo,FVo,CQ,TVo,MVo,EVo,g2,c2e,CVo,wVo,wQ,AVo,LVo,yVo,h2,m2e,xVo,$Vo,AQ,kVo,SVo,RVo,u2,f2e,PVo,BVo,LQ,IVo,NVo,qVo,p2,g2e,jVo,DVo,yQ,GVo,OVo,VVo,_2,h2e,XVo,zVo,xQ,QVo,WVo,UVo,b2,u2e,HVo,JVo,$Q,YVo,ZVo,KVo,v2,p2e,eXo,oXo,kQ,rXo,tXo,aXo,F2,_2e,nXo,sXo,SQ,lXo,iXo,dXo,T2,b2e,cXo,mXo,RQ,fXo,gXo,hXo,M2,v2e,uXo,pXo,PQ,_Xo,bXo,vXo,E2,F2e,FXo,TXo,BQ,MXo,EXo,CXo,C2,T2e,wXo,AXo,IQ,LXo,yXo,xXo,w2,M2e,$Xo,kXo,NQ,SXo,RXo,PXo,A2,E2e,BXo,IXo,qQ,NXo,qXo,jXo,L2,C2e,DXo,GXo,jQ,OXo,VXo,XXo,y2,w2e,zXo,QXo,DQ,WXo,UXo,HXo,x2,A2e,JXo,YXo,GQ,ZXo,KXo,ezo,$2,L2e,ozo,rzo,OQ,tzo,azo,nzo,k2,y2e,szo,lzo,VQ,izo,dzo,czo,S2,x2e,mzo,fzo,XQ,gzo,hzo,uzo,R2,$2e,pzo,_zo,zQ,bzo,vzo,Fzo,P2,k2e,Tzo,Mzo,QQ,Ezo,Czo,wzo,B2,Azo,S2e,Lzo,yzo,R2e,xzo,$zo,I2,Too,xd,N2,P2e,l$,kzo,B2e,Szo,Moo,No,i$,Rzo,$d,Pzo,WQ,Bzo,Izo,UQ,Nzo,qzo,jzo,d$,Dzo,I2e,Gzo,Ozo,Vzo,Tt,c$,Xzo,N2e,zzo,Qzo,kd,Wzo,q2e,Uzo,Hzo,HQ,Jzo,Yzo,Zzo,q2,Kzo,oo,m$,eQo,j2e,oQo,rQo,rn,tQo,D2e,aQo,nQo,G2e,sQo,lQo,O2e,iQo,dQo,cQo,Q,j2,V2e,mQo,fQo,JQ,gQo,hQo,uQo,D2,X2e,pQo,_Qo,YQ,bQo,vQo,FQo,G2,z2e,TQo,MQo,ZQ,EQo,CQo,wQo,O2,Q2e,AQo,LQo,KQ,yQo,xQo,$Qo,V2,W2e,kQo,SQo,eW,RQo,PQo,BQo,X2,U2e,IQo,NQo,oW,qQo,jQo,DQo,z2,H2e,GQo,OQo,rW,VQo,XQo,zQo,Q2,J2e,QQo,WQo,tW,UQo,HQo,JQo,W2,Y2e,YQo,ZQo,aW,KQo,eWo,oWo,U2,Z2e,rWo,tWo,nW,aWo,nWo,sWo,H2,K2e,lWo,iWo,sW,dWo,cWo,mWo,J2,eve,fWo,gWo,lW,hWo,uWo,pWo,Y2,ove,_Wo,bWo,iW,vWo,FWo,TWo,Z2,rve,MWo,EWo,dW,CWo,wWo,AWo,K2,tve,LWo,yWo,cW,xWo,$Wo,kWo,ev,ave,SWo,RWo,mW,PWo,BWo,IWo,ov,nve,NWo,qWo,fW,jWo,DWo,GWo,rv,sve,OWo,VWo,gW,XWo,zWo,QWo,tv,lve,WWo,UWo,hW,HWo,JWo,YWo,av,ive,ZWo,KWo,uW,eUo,oUo,rUo,nv,dve,tUo,aUo,pW,nUo,sUo,lUo,sv,cve,iUo,dUo,_W,cUo,mUo,fUo,lv,mve,gUo,hUo,bW,uUo,pUo,_Uo,iv,fve,bUo,vUo,vW,FUo,TUo,MUo,dv,gve,EUo,CUo,FW,wUo,AUo,LUo,cv,hve,yUo,xUo,TW,$Uo,kUo,SUo,mv,uve,RUo,PUo,MW,BUo,IUo,NUo,fv,pve,qUo,jUo,EW,DUo,GUo,OUo,gv,_ve,VUo,XUo,CW,zUo,QUo,WUo,hv,bve,UUo,HUo,wW,JUo,YUo,ZUo,uv,vve,KUo,eHo,AW,oHo,rHo,tHo,pv,Fve,aHo,nHo,LW,sHo,lHo,iHo,_v,Tve,dHo,cHo,yW,mHo,fHo,gHo,bv,Mve,hHo,uHo,xW,pHo,_Ho,bHo,vv,Eve,vHo,FHo,$W,THo,MHo,EHo,Fv,Cve,CHo,wHo,kW,AHo,LHo,yHo,Tv,wve,xHo,$Ho,SW,kHo,SHo,RHo,Mv,Ave,PHo,BHo,RW,IHo,NHo,qHo,Ev,Lve,jHo,DHo,PW,GHo,OHo,VHo,Cv,yve,XHo,zHo,BW,QHo,WHo,UHo,wv,xve,HHo,JHo,IW,YHo,ZHo,KHo,Av,$ve,eJo,oJo,NW,rJo,tJo,aJo,Lv,nJo,kve,sJo,lJo,Sve,iJo,dJo,yv,Eoo,Sd,xv,Rve,f$,cJo,Pve,mJo,Coo,qo,g$,fJo,Rd,gJo,qW,hJo,uJo,jW,pJo,_Jo,bJo,h$,vJo,Bve,FJo,TJo,MJo,Mt,u$,EJo,Ive,CJo,wJo,Pd,AJo,Nve,LJo,yJo,DW,xJo,$Jo,kJo,$v,SJo,ro,p$,RJo,qve,PJo,BJo,tn,IJo,jve,NJo,qJo,Dve,jJo,DJo,Gve,GJo,OJo,VJo,J,kv,Ove,XJo,zJo,GW,QJo,WJo,UJo,Sv,Vve,HJo,JJo,OW,YJo,ZJo,KJo,Rv,Xve,eYo,oYo,VW,rYo,tYo,aYo,Pv,zve,nYo,sYo,XW,lYo,iYo,dYo,Bv,Qve,cYo,mYo,zW,fYo,gYo,hYo,Iv,Wve,uYo,pYo,QW,_Yo,bYo,vYo,Nv,Uve,FYo,TYo,WW,MYo,EYo,CYo,qv,Hve,wYo,AYo,UW,LYo,yYo,xYo,jv,Jve,$Yo,kYo,HW,SYo,RYo,PYo,Dv,Yve,BYo,IYo,JW,NYo,qYo,jYo,Gv,Zve,DYo,GYo,YW,OYo,VYo,XYo,Ov,Kve,zYo,QYo,ZW,WYo,UYo,HYo,Vv,eFe,JYo,YYo,KW,ZYo,KYo,eZo,Xv,oFe,oZo,rZo,eU,tZo,aZo,nZo,zv,rFe,sZo,lZo,oU,iZo,dZo,cZo,Qv,tFe,mZo,fZo,rU,gZo,hZo,uZo,Wv,aFe,pZo,_Zo,tU,bZo,vZo,FZo,Uv,nFe,TZo,MZo,aU,EZo,CZo,wZo,Hv,sFe,AZo,LZo,nU,yZo,xZo,$Zo,Jv,lFe,kZo,SZo,sU,RZo,PZo,BZo,Yv,iFe,IZo,NZo,lU,qZo,jZo,DZo,Zv,dFe,GZo,OZo,iU,VZo,XZo,zZo,Kv,cFe,QZo,WZo,dU,UZo,HZo,JZo,eF,mFe,YZo,ZZo,cU,KZo,eKo,oKo,oF,fFe,rKo,tKo,mU,aKo,nKo,sKo,rF,gFe,lKo,iKo,fU,dKo,cKo,mKo,tF,hFe,fKo,gKo,gU,hKo,uKo,pKo,aF,uFe,_Ko,bKo,hU,vKo,FKo,TKo,nF,pFe,MKo,EKo,uU,CKo,wKo,AKo,sF,_Fe,LKo,yKo,pU,xKo,$Ko,kKo,lF,bFe,SKo,RKo,_U,PKo,BKo,IKo,iF,vFe,NKo,qKo,bU,jKo,DKo,GKo,dF,FFe,OKo,VKo,vU,XKo,zKo,QKo,cF,TFe,WKo,UKo,FU,HKo,JKo,YKo,mF,MFe,ZKo,KKo,EFe,eer,oer,rer,fF,CFe,ter,aer,TU,ner,ser,ler,gF,wFe,ier,der,MU,cer,mer,fer,hF,AFe,ger,her,EU,uer,per,_er,uF,LFe,ber,ver,CU,Fer,Ter,Mer,pF,Eer,yFe,Cer,wer,xFe,Aer,Ler,_F,woo,Bd,bF,$Fe,_$,yer,kFe,xer,Aoo,jo,b$,$er,Id,ker,wU,Ser,Rer,AU,Per,Ber,Ier,v$,Ner,SFe,qer,jer,Der,Et,F$,Ger,RFe,Oer,Ver,Nd,Xer,PFe,zer,Qer,LU,Wer,Uer,Her,vF,Jer,to,T$,Yer,BFe,Zer,Ker,an,eor,IFe,oor,ror,NFe,tor,aor,qFe,nor,sor,lor,fe,FF,jFe,ior,dor,yU,cor,mor,gor,TF,DFe,hor,uor,xU,por,_or,bor,MF,GFe,vor,For,$U,Tor,Mor,Eor,EF,OFe,Cor,wor,kU,Aor,Lor,yor,CF,VFe,xor,$or,SU,kor,Sor,Ror,wF,XFe,Por,Bor,RU,Ior,Nor,qor,AF,zFe,jor,Dor,PU,Gor,Oor,Vor,LF,QFe,Xor,zor,BU,Qor,Wor,Uor,yF,WFe,Hor,Jor,IU,Yor,Zor,Kor,xF,UFe,err,orr,NU,rrr,trr,arr,$F,HFe,nrr,srr,qU,lrr,irr,drr,kF,JFe,crr,mrr,jU,frr,grr,hrr,SF,YFe,urr,prr,DU,_rr,brr,vrr,RF,ZFe,Frr,Trr,GU,Mrr,Err,Crr,PF,KFe,wrr,Arr,OU,Lrr,yrr,xrr,BF,eTe,$rr,krr,VU,Srr,Rrr,Prr,IF,oTe,Brr,Irr,XU,Nrr,qrr,jrr,NF,rTe,Drr,Grr,zU,Orr,Vrr,Xrr,qF,tTe,zrr,Qrr,QU,Wrr,Urr,Hrr,jF,aTe,Jrr,Yrr,WU,Zrr,Krr,etr,DF,otr,nTe,rtr,ttr,sTe,atr,ntr,GF,Loo,qd,OF,lTe,M$,str,iTe,ltr,yoo,Do,E$,itr,jd,dtr,UU,ctr,mtr,HU,ftr,gtr,htr,C$,utr,dTe,ptr,_tr,btr,Ct,w$,vtr,cTe,Ftr,Ttr,Dd,Mtr,mTe,Etr,Ctr,JU,wtr,Atr,Ltr,VF,ytr,ao,A$,xtr,fTe,$tr,ktr,nn,Str,gTe,Rtr,Ptr,hTe,Btr,Itr,uTe,Ntr,qtr,jtr,N,XF,pTe,Dtr,Gtr,YU,Otr,Vtr,Xtr,zF,_Te,ztr,Qtr,ZU,Wtr,Utr,Htr,QF,bTe,Jtr,Ytr,KU,Ztr,Ktr,ear,WF,vTe,oar,rar,eH,tar,aar,nar,UF,FTe,sar,lar,oH,iar,dar,car,HF,TTe,mar,far,rH,gar,har,uar,JF,MTe,par,_ar,tH,bar,Far,Tar,YF,ETe,Mar,Ear,aH,Car,war,Aar,ZF,CTe,Lar,yar,nH,xar,$ar,kar,KF,wTe,Sar,Rar,sH,Par,Bar,Iar,eT,ATe,Nar,qar,lH,jar,Dar,Gar,oT,LTe,Oar,Var,iH,Xar,zar,Qar,rT,yTe,War,Uar,dH,Har,Jar,Yar,tT,xTe,Zar,Kar,cH,enr,onr,rnr,aT,$Te,tnr,anr,mH,nnr,snr,lnr,nT,kTe,inr,dnr,fH,cnr,mnr,fnr,sT,STe,gnr,hnr,gH,unr,pnr,_nr,lT,RTe,bnr,vnr,hH,Fnr,Tnr,Mnr,iT,PTe,Enr,Cnr,uH,wnr,Anr,Lnr,dT,BTe,ynr,xnr,pH,$nr,knr,Snr,cT,ITe,Rnr,Pnr,_H,Bnr,Inr,Nnr,mT,NTe,qnr,jnr,bH,Dnr,Gnr,Onr,fT,qTe,Vnr,Xnr,vH,znr,Qnr,Wnr,gT,jTe,Unr,Hnr,FH,Jnr,Ynr,Znr,hT,DTe,Knr,esr,TH,osr,rsr,tsr,uT,GTe,asr,nsr,MH,ssr,lsr,isr,pT,OTe,dsr,csr,EH,msr,fsr,gsr,_T,VTe,hsr,usr,CH,psr,_sr,bsr,bT,XTe,vsr,Fsr,wH,Tsr,Msr,Esr,vT,zTe,Csr,wsr,AH,Asr,Lsr,ysr,FT,QTe,xsr,$sr,LH,ksr,Ssr,Rsr,TT,WTe,Psr,Bsr,yH,Isr,Nsr,qsr,MT,UTe,jsr,Dsr,xH,Gsr,Osr,Vsr,ET,HTe,Xsr,zsr,$H,Qsr,Wsr,Usr,CT,JTe,Hsr,Jsr,kH,Ysr,Zsr,Ksr,wT,YTe,elr,olr,SH,rlr,tlr,alr,AT,ZTe,nlr,slr,RH,llr,ilr,dlr,LT,KTe,clr,mlr,PH,flr,glr,hlr,yT,eMe,ulr,plr,BH,_lr,blr,vlr,xT,oMe,Flr,Tlr,IH,Mlr,Elr,Clr,$T,rMe,wlr,Alr,NH,Llr,ylr,xlr,kT,tMe,$lr,klr,qH,Slr,Rlr,Plr,ST,aMe,Blr,Ilr,jH,Nlr,qlr,jlr,RT,nMe,Dlr,Glr,DH,Olr,Vlr,Xlr,PT,sMe,zlr,Qlr,GH,Wlr,Ulr,Hlr,BT,lMe,Jlr,Ylr,OH,Zlr,Klr,eir,IT,iMe,oir,rir,VH,tir,air,nir,NT,dMe,sir,lir,XH,iir,dir,cir,qT,cMe,mir,fir,zH,gir,hir,uir,jT,mMe,pir,_ir,QH,bir,vir,Fir,DT,fMe,Tir,Mir,WH,Eir,Cir,wir,GT,gMe,Air,Lir,UH,yir,xir,$ir,OT,hMe,kir,Sir,HH,Rir,Pir,Bir,VT,uMe,Iir,Nir,JH,qir,jir,Dir,XT,pMe,Gir,Oir,YH,Vir,Xir,zir,zT,Qir,_Me,Wir,Uir,bMe,Hir,Jir,QT,xoo,Gd,WT,vMe,L$,Yir,FMe,Zir,$oo,Go,y$,Kir,Od,edr,ZH,odr,rdr,KH,tdr,adr,ndr,x$,sdr,TMe,ldr,idr,ddr,wt,$$,cdr,MMe,mdr,fdr,Vd,gdr,EMe,hdr,udr,eJ,pdr,_dr,bdr,UT,vdr,no,k$,Fdr,CMe,Tdr,Mdr,sn,Edr,wMe,Cdr,wdr,AMe,Adr,Ldr,LMe,ydr,xdr,$dr,K,HT,yMe,kdr,Sdr,oJ,Rdr,Pdr,Bdr,JT,xMe,Idr,Ndr,rJ,qdr,jdr,Ddr,YT,$Me,Gdr,Odr,tJ,Vdr,Xdr,zdr,ZT,kMe,Qdr,Wdr,aJ,Udr,Hdr,Jdr,KT,SMe,Ydr,Zdr,nJ,Kdr,ecr,ocr,eM,RMe,rcr,tcr,sJ,acr,ncr,scr,oM,PMe,lcr,icr,lJ,dcr,ccr,mcr,rM,BMe,fcr,gcr,iJ,hcr,ucr,pcr,tM,IMe,_cr,bcr,dJ,vcr,Fcr,Tcr,aM,NMe,Mcr,Ecr,cJ,Ccr,wcr,Acr,nM,qMe,Lcr,ycr,mJ,xcr,$cr,kcr,sM,jMe,Scr,Rcr,fJ,Pcr,Bcr,Icr,lM,DMe,Ncr,qcr,gJ,jcr,Dcr,Gcr,iM,GMe,Ocr,Vcr,hJ,Xcr,zcr,Qcr,dM,OMe,Wcr,Ucr,uJ,Hcr,Jcr,Ycr,cM,VMe,Zcr,Kcr,pJ,emr,omr,rmr,mM,XMe,tmr,amr,_J,nmr,smr,lmr,fM,zMe,imr,dmr,bJ,cmr,mmr,fmr,gM,QMe,gmr,hmr,vJ,umr,pmr,_mr,hM,WMe,bmr,vmr,FJ,Fmr,Tmr,Mmr,uM,UMe,Emr,Cmr,TJ,wmr,Amr,Lmr,pM,HMe,ymr,xmr,MJ,$mr,kmr,Smr,_M,JMe,Rmr,Pmr,EJ,Bmr,Imr,Nmr,bM,YMe,qmr,jmr,CJ,Dmr,Gmr,Omr,vM,ZMe,Vmr,Xmr,wJ,zmr,Qmr,Wmr,FM,KMe,Umr,Hmr,AJ,Jmr,Ymr,Zmr,TM,eEe,Kmr,efr,LJ,ofr,rfr,tfr,MM,oEe,afr,nfr,yJ,sfr,lfr,ifr,EM,rEe,dfr,cfr,xJ,mfr,ffr,gfr,CM,tEe,hfr,ufr,$J,pfr,_fr,bfr,wM,aEe,vfr,Ffr,kJ,Tfr,Mfr,Efr,AM,nEe,Cfr,wfr,SJ,Afr,Lfr,yfr,LM,xfr,sEe,$fr,kfr,lEe,Sfr,Rfr,yM,koo,Xd,xM,iEe,S$,Pfr,dEe,Bfr,Soo,Oo,R$,Ifr,zd,Nfr,RJ,qfr,jfr,PJ,Dfr,Gfr,Ofr,P$,Vfr,cEe,Xfr,zfr,Qfr,At,B$,Wfr,mEe,Ufr,Hfr,Qd,Jfr,fEe,Yfr,Zfr,BJ,Kfr,egr,ogr,$M,rgr,so,I$,tgr,gEe,agr,ngr,ln,sgr,hEe,lgr,igr,uEe,dgr,cgr,pEe,mgr,fgr,ggr,Ue,kM,_Ee,hgr,ugr,IJ,pgr,_gr,bgr,SM,bEe,vgr,Fgr,NJ,Tgr,Mgr,Egr,RM,vEe,Cgr,wgr,qJ,Agr,Lgr,ygr,PM,FEe,xgr,$gr,jJ,kgr,Sgr,Rgr,BM,TEe,Pgr,Bgr,DJ,Igr,Ngr,qgr,IM,MEe,jgr,Dgr,GJ,Ggr,Ogr,Vgr,NM,EEe,Xgr,zgr,OJ,Qgr,Wgr,Ugr,qM,Hgr,CEe,Jgr,Ygr,wEe,Zgr,Kgr,jM,Roo,Wd,DM,AEe,N$,ehr,LEe,ohr,Poo,Vo,q$,rhr,Ud,thr,VJ,ahr,nhr,XJ,shr,lhr,ihr,j$,dhr,yEe,chr,mhr,fhr,Lt,D$,ghr,xEe,hhr,uhr,Hd,phr,$Ee,_hr,bhr,zJ,vhr,Fhr,Thr,GM,Mhr,lo,G$,Ehr,kEe,Chr,whr,dn,Ahr,SEe,Lhr,yhr,REe,xhr,$hr,PEe,khr,Shr,Rhr,H,OM,BEe,Phr,Bhr,QJ,Ihr,Nhr,qhr,VM,IEe,jhr,Dhr,WJ,Ghr,Ohr,Vhr,XM,NEe,Xhr,zhr,UJ,Qhr,Whr,Uhr,zM,qEe,Hhr,Jhr,HJ,Yhr,Zhr,Khr,QM,jEe,eur,our,JJ,rur,tur,aur,WM,DEe,nur,sur,YJ,lur,iur,dur,UM,GEe,cur,mur,ZJ,fur,gur,hur,HM,OEe,uur,pur,KJ,_ur,bur,vur,JM,VEe,Fur,Tur,eY,Mur,Eur,Cur,YM,XEe,wur,Aur,oY,Lur,yur,xur,ZM,zEe,$ur,kur,rY,Sur,Rur,Pur,KM,QEe,Bur,Iur,tY,Nur,qur,jur,eE,WEe,Dur,Gur,aY,Our,Vur,Xur,oE,UEe,zur,Qur,nY,Wur,Uur,Hur,rE,HEe,Jur,Yur,sY,Zur,Kur,epr,tE,JEe,opr,rpr,lY,tpr,apr,npr,aE,YEe,spr,lpr,iY,ipr,dpr,cpr,nE,ZEe,mpr,fpr,dY,gpr,hpr,upr,sE,KEe,ppr,_pr,cY,bpr,vpr,Fpr,lE,e4e,Tpr,Mpr,mY,Epr,Cpr,wpr,iE,o4e,Apr,Lpr,fY,ypr,xpr,$pr,dE,r4e,kpr,Spr,gY,Rpr,Ppr,Bpr,cE,t4e,Ipr,Npr,hY,qpr,jpr,Dpr,mE,a4e,Gpr,Opr,uY,Vpr,Xpr,zpr,fE,n4e,Qpr,Wpr,pY,Upr,Hpr,Jpr,gE,s4e,Ypr,Zpr,_Y,Kpr,e_r,o_r,hE,l4e,r_r,t_r,bY,a_r,n_r,s_r,uE,i4e,l_r,i_r,vY,d_r,c_r,m_r,pE,d4e,f_r,g_r,FY,h_r,u_r,p_r,_E,c4e,__r,b_r,TY,v_r,F_r,T_r,bE,m4e,M_r,E_r,MY,C_r,w_r,A_r,vE,f4e,L_r,y_r,EY,x_r,$_r,k_r,FE,g4e,S_r,R_r,CY,P_r,B_r,I_r,TE,h4e,N_r,q_r,wY,j_r,D_r,G_r,ME,u4e,O_r,V_r,AY,X_r,z_r,Q_r,EE,p4e,W_r,U_r,LY,H_r,J_r,Y_r,CE,_4e,Z_r,K_r,yY,e1r,o1r,r1r,wE,b4e,t1r,a1r,xY,n1r,s1r,l1r,AE,v4e,i1r,d1r,$Y,c1r,m1r,f1r,LE,F4e,g1r,h1r,kY,u1r,p1r,_1r,yE,b1r,T4e,v1r,F1r,M4e,T1r,M1r,xE,Boo,Jd,$E,E4e,O$,E1r,C4e,C1r,Ioo,Xo,V$,w1r,Yd,A1r,SY,L1r,y1r,RY,x1r,$1r,k1r,X$,S1r,w4e,R1r,P1r,B1r,yt,z$,I1r,A4e,N1r,q1r,Zd,j1r,L4e,D1r,G1r,PY,O1r,V1r,X1r,kE,z1r,io,Q$,Q1r,y4e,W1r,U1r,cn,H1r,x4e,J1r,Y1r,$4e,Z1r,K1r,k4e,ebr,obr,rbr,V,SE,S4e,tbr,abr,BY,nbr,sbr,lbr,RE,R4e,ibr,dbr,IY,cbr,mbr,fbr,PE,P4e,gbr,hbr,NY,ubr,pbr,_br,BE,B4e,bbr,vbr,qY,Fbr,Tbr,Mbr,IE,I4e,Ebr,Cbr,jY,wbr,Abr,Lbr,NE,N4e,ybr,xbr,DY,$br,kbr,Sbr,qE,q4e,Rbr,Pbr,GY,Bbr,Ibr,Nbr,jE,j4e,qbr,jbr,OY,Dbr,Gbr,Obr,DE,D4e,Vbr,Xbr,VY,zbr,Qbr,Wbr,GE,G4e,Ubr,Hbr,XY,Jbr,Ybr,Zbr,OE,O4e,Kbr,e2r,zY,o2r,r2r,t2r,VE,V4e,a2r,n2r,QY,s2r,l2r,i2r,XE,X4e,d2r,c2r,WY,m2r,f2r,g2r,zE,z4e,h2r,u2r,UY,p2r,_2r,b2r,QE,Q4e,v2r,F2r,HY,T2r,M2r,E2r,WE,W4e,C2r,w2r,JY,A2r,L2r,y2r,UE,U4e,x2r,$2r,YY,k2r,S2r,R2r,HE,H4e,P2r,B2r,ZY,I2r,N2r,q2r,JE,J4e,j2r,D2r,KY,G2r,O2r,V2r,YE,Y4e,X2r,z2r,eZ,Q2r,W2r,U2r,ZE,Z4e,H2r,J2r,oZ,Y2r,Z2r,K2r,KE,K4e,evr,ovr,rZ,rvr,tvr,avr,e4,eCe,nvr,svr,tZ,lvr,ivr,dvr,o4,oCe,cvr,mvr,aZ,fvr,gvr,hvr,r4,rCe,uvr,pvr,nZ,_vr,bvr,vvr,t4,tCe,Fvr,Tvr,sZ,Mvr,Evr,Cvr,a4,aCe,wvr,Avr,lZ,Lvr,yvr,xvr,n4,nCe,$vr,kvr,iZ,Svr,Rvr,Pvr,s4,sCe,Bvr,Ivr,dZ,Nvr,qvr,jvr,l4,lCe,Dvr,Gvr,cZ,Ovr,Vvr,Xvr,i4,iCe,zvr,Qvr,mZ,Wvr,Uvr,Hvr,d4,dCe,Jvr,Yvr,fZ,Zvr,Kvr,eFr,c4,cCe,oFr,rFr,gZ,tFr,aFr,nFr,m4,mCe,sFr,lFr,hZ,iFr,dFr,cFr,f4,fCe,mFr,fFr,uZ,gFr,hFr,uFr,g4,gCe,pFr,_Fr,pZ,bFr,vFr,FFr,h4,hCe,TFr,MFr,_Z,EFr,CFr,wFr,u4,uCe,AFr,LFr,bZ,yFr,xFr,$Fr,p4,pCe,kFr,SFr,vZ,RFr,PFr,BFr,_4,_Ce,IFr,NFr,FZ,qFr,jFr,DFr,b4,bCe,GFr,OFr,TZ,VFr,XFr,zFr,v4,vCe,QFr,WFr,MZ,UFr,HFr,JFr,F4,FCe,YFr,ZFr,EZ,KFr,eTr,oTr,T4,TCe,rTr,tTr,CZ,aTr,nTr,sTr,M4,MCe,lTr,iTr,wZ,dTr,cTr,mTr,E4,ECe,fTr,gTr,AZ,hTr,uTr,pTr,C4,_Tr,CCe,bTr,vTr,wCe,FTr,TTr,w4,Noo,Kd,A4,ACe,W$,MTr,LCe,ETr,qoo,zo,U$,CTr,ec,wTr,LZ,ATr,LTr,yZ,yTr,xTr,$Tr,H$,kTr,yCe,STr,RTr,PTr,xt,J$,BTr,xCe,ITr,NTr,oc,qTr,$Ce,jTr,DTr,xZ,GTr,OTr,VTr,L4,XTr,co,Y$,zTr,kCe,QTr,WTr,mn,UTr,SCe,HTr,JTr,RCe,YTr,ZTr,PCe,KTr,eMr,oMr,BCe,y4,ICe,rMr,tMr,$Z,aMr,nMr,sMr,x4,lMr,NCe,iMr,dMr,qCe,cMr,mMr,$4,joo,rc,k4,jCe,Z$,fMr,DCe,gMr,Doo,Qo,K$,hMr,tc,uMr,kZ,pMr,_Mr,SZ,bMr,vMr,FMr,ek,TMr,GCe,MMr,EMr,CMr,$t,ok,wMr,OCe,AMr,LMr,ac,yMr,VCe,xMr,$Mr,RZ,kMr,SMr,RMr,S4,PMr,mo,rk,BMr,XCe,IMr,NMr,fn,qMr,zCe,jMr,DMr,QCe,GMr,OMr,WCe,VMr,XMr,zMr,nc,R4,UCe,QMr,WMr,PZ,UMr,HMr,JMr,P4,HCe,YMr,ZMr,BZ,KMr,eEr,oEr,B4,JCe,rEr,tEr,IZ,aEr,nEr,sEr,I4,lEr,YCe,iEr,dEr,ZCe,cEr,mEr,N4,Goo,sc,q4,KCe,tk,fEr,e3e,gEr,Ooo,Wo,ak,hEr,lc,uEr,NZ,pEr,_Er,qZ,bEr,vEr,FEr,nk,TEr,o3e,MEr,EEr,CEr,kt,sk,wEr,r3e,AEr,LEr,ic,yEr,t3e,xEr,$Er,jZ,kEr,SEr,REr,j4,PEr,fo,lk,BEr,a3e,IEr,NEr,gn,qEr,n3e,jEr,DEr,s3e,GEr,OEr,l3e,VEr,XEr,zEr,be,D4,i3e,QEr,WEr,DZ,UEr,HEr,JEr,G4,d3e,YEr,ZEr,GZ,KEr,e4r,o4r,O4,c3e,r4r,t4r,OZ,a4r,n4r,s4r,V4,m3e,l4r,i4r,VZ,d4r,c4r,m4r,El,f3e,f4r,g4r,XZ,h4r,u4r,zZ,p4r,_4r,b4r,X4,g3e,v4r,F4r,QZ,T4r,M4r,E4r,Cl,h3e,C4r,w4r,WZ,A4r,L4r,UZ,y4r,x4r,$4r,z4,u3e,k4r,S4r,HZ,R4r,P4r,B4r,St,p3e,I4r,N4r,JZ,q4r,j4r,YZ,D4r,G4r,ZZ,O4r,V4r,X4r,Q4,_3e,z4r,Q4r,KZ,W4r,U4r,H4r,W4,b3e,J4r,Y4r,eK,Z4r,K4r,eCr,U4,v3e,oCr,rCr,oK,tCr,aCr,nCr,H4,F3e,sCr,lCr,rK,iCr,dCr,cCr,J4,T3e,mCr,fCr,tK,gCr,hCr,uCr,Y4,M3e,pCr,_Cr,aK,bCr,vCr,FCr,Z4,E3e,TCr,MCr,nK,ECr,CCr,wCr,K4,C3e,ACr,LCr,sK,yCr,xCr,$Cr,eC,w3e,kCr,SCr,lK,RCr,PCr,BCr,oC,ICr,A3e,NCr,qCr,L3e,jCr,DCr,rC,Voo,dc,tC,y3e,ik,GCr,x3e,OCr,Xoo,Uo,dk,VCr,cc,XCr,iK,zCr,QCr,dK,WCr,UCr,HCr,ck,JCr,$3e,YCr,ZCr,KCr,Rt,mk,e3r,k3e,o3r,r3r,mc,t3r,S3e,a3r,n3r,cK,s3r,l3r,i3r,aC,d3r,go,fk,c3r,R3e,m3r,f3r,hn,g3r,P3e,h3r,u3r,B3e,p3r,_3r,I3e,b3r,v3r,F3r,N3e,nC,q3e,T3r,M3r,mK,E3r,C3r,w3r,sC,A3r,j3e,L3r,y3r,D3e,x3r,$3r,lC,zoo,fc,iC,G3e,gk,k3r,O3e,S3r,Qoo,Ho,hk,R3r,gc,P3r,fK,B3r,I3r,gK,N3r,q3r,j3r,uk,D3r,V3e,G3r,O3r,V3r,Pt,pk,X3r,X3e,z3r,Q3r,hc,W3r,z3e,U3r,H3r,hK,J3r,Y3r,Z3r,dC,K3r,ho,_k,e5r,Q3e,o5r,r5r,un,t5r,W3e,a5r,n5r,U3e,s5r,l5r,H3e,i5r,d5r,c5r,J3e,cC,Y3e,m5r,f5r,uK,g5r,h5r,u5r,mC,p5r,Z3e,_5r,b5r,K3e,v5r,F5r,fC,Woo,uc,gC,e5e,bk,T5r,o5e,M5r,Uoo,Jo,vk,E5r,pc,C5r,pK,w5r,A5r,_K,L5r,y5r,x5r,Fk,$5r,r5e,k5r,S5r,R5r,Bt,Tk,P5r,t5e,B5r,I5r,_c,N5r,a5e,q5r,j5r,bK,D5r,G5r,O5r,hC,V5r,uo,Mk,X5r,n5e,z5r,Q5r,pn,W5r,s5e,U5r,H5r,l5e,J5r,Y5r,i5e,Z5r,K5r,e0r,d5e,uC,c5e,o0r,r0r,vK,t0r,a0r,n0r,pC,s0r,m5e,l0r,i0r,f5e,d0r,c0r,_C,Hoo,bc,bC,g5e,Ek,m0r,h5e,f0r,Joo,Yo,Ck,g0r,vc,h0r,FK,u0r,p0r,TK,_0r,b0r,v0r,wk,F0r,u5e,T0r,M0r,E0r,It,Ak,C0r,p5e,w0r,A0r,Fc,L0r,_5e,y0r,x0r,MK,$0r,k0r,S0r,vC,R0r,po,Lk,P0r,b5e,B0r,I0r,_n,N0r,v5e,q0r,j0r,F5e,D0r,G0r,T5e,O0r,V0r,X0r,Pe,FC,M5e,z0r,Q0r,EK,W0r,U0r,H0r,TC,E5e,J0r,Y0r,CK,Z0r,K0r,ewr,MC,C5e,owr,rwr,wK,twr,awr,nwr,EC,w5e,swr,lwr,AK,iwr,dwr,cwr,CC,A5e,mwr,fwr,LK,gwr,hwr,uwr,wC,L5e,pwr,_wr,yK,bwr,vwr,Fwr,AC,y5e,Twr,Mwr,xK,Ewr,Cwr,wwr,LC,x5e,Awr,Lwr,$K,ywr,xwr,$wr,yC,$5e,kwr,Swr,kK,Rwr,Pwr,Bwr,xC,Iwr,k5e,Nwr,qwr,S5e,jwr,Dwr,$C,Yoo,Tc,kC,R5e,yk,Gwr,P5e,Owr,Zoo,Zo,xk,Vwr,Mc,Xwr,SK,zwr,Qwr,RK,Wwr,Uwr,Hwr,$k,Jwr,B5e,Ywr,Zwr,Kwr,Nt,kk,eAr,I5e,oAr,rAr,Ec,tAr,N5e,aAr,nAr,PK,sAr,lAr,iAr,SC,dAr,_o,Sk,cAr,q5e,mAr,fAr,bn,gAr,j5e,hAr,uAr,D5e,pAr,_Ar,G5e,bAr,vAr,FAr,gt,RC,O5e,TAr,MAr,BK,EAr,CAr,wAr,PC,V5e,AAr,LAr,IK,yAr,xAr,$Ar,BC,X5e,kAr,SAr,NK,RAr,PAr,BAr,IC,z5e,IAr,NAr,qK,qAr,jAr,DAr,NC,Q5e,GAr,OAr,jK,VAr,XAr,zAr,qC,QAr,W5e,WAr,UAr,U5e,HAr,JAr,jC,Koo,Cc,DC,H5e,Rk,YAr,J5e,ZAr,ero,Ko,Pk,KAr,wc,e6r,DK,o6r,r6r,GK,t6r,a6r,n6r,Bk,s6r,Y5e,l6r,i6r,d6r,qt,Ik,c6r,Z5e,m6r,f6r,Ac,g6r,K5e,h6r,u6r,OK,p6r,_6r,b6r,GC,v6r,bo,Nk,F6r,e0e,T6r,M6r,vn,E6r,o0e,C6r,w6r,r0e,A6r,L6r,t0e,y6r,x6r,$6r,Le,OC,a0e,k6r,S6r,VK,R6r,P6r,B6r,VC,n0e,I6r,N6r,XK,q6r,j6r,D6r,XC,s0e,G6r,O6r,zK,V6r,X6r,z6r,zC,l0e,Q6r,W6r,QK,U6r,H6r,J6r,QC,i0e,Y6r,Z6r,WK,K6r,e7r,o7r,WC,d0e,r7r,t7r,UK,a7r,n7r,s7r,UC,c0e,l7r,i7r,HK,d7r,c7r,m7r,HC,m0e,f7r,g7r,JK,h7r,u7r,p7r,JC,f0e,_7r,b7r,YK,v7r,F7r,T7r,YC,g0e,M7r,E7r,ZK,C7r,w7r,A7r,ZC,L7r,h0e,y7r,x7r,u0e,$7r,k7r,KC,oro,Lc,e3,p0e,qk,S7r,_0e,R7r,rro,er,jk,P7r,yc,B7r,KK,I7r,N7r,eee,q7r,j7r,D7r,Dk,G7r,b0e,O7r,V7r,X7r,jt,Gk,z7r,v0e,Q7r,W7r,xc,U7r,F0e,H7r,J7r,oee,Y7r,Z7r,K7r,o3,eLr,vo,Ok,oLr,T0e,rLr,tLr,Fn,aLr,M0e,nLr,sLr,E0e,lLr,iLr,C0e,dLr,cLr,mLr,$c,r3,w0e,fLr,gLr,ree,hLr,uLr,pLr,t3,A0e,_Lr,bLr,tee,vLr,FLr,TLr,a3,L0e,MLr,ELr,aee,CLr,wLr,ALr,n3,LLr,y0e,yLr,xLr,x0e,$Lr,kLr,s3,tro,kc,l3,$0e,Vk,SLr,k0e,RLr,aro,or,Xk,PLr,Sc,BLr,nee,ILr,NLr,see,qLr,jLr,DLr,zk,GLr,S0e,OLr,VLr,XLr,Dt,Qk,zLr,R0e,QLr,WLr,Rc,ULr,P0e,HLr,JLr,lee,YLr,ZLr,KLr,i3,eyr,Fo,Wk,oyr,B0e,ryr,tyr,Tn,ayr,I0e,nyr,syr,N0e,lyr,iyr,q0e,dyr,cyr,myr,ht,d3,j0e,fyr,gyr,iee,hyr,uyr,pyr,c3,D0e,_yr,byr,dee,vyr,Fyr,Tyr,m3,G0e,Myr,Eyr,cee,Cyr,wyr,Ayr,f3,O0e,Lyr,yyr,mee,xyr,$yr,kyr,g3,V0e,Syr,Ryr,fee,Pyr,Byr,Iyr,h3,Nyr,X0e,qyr,jyr,z0e,Dyr,Gyr,u3,nro,Pc,p3,Q0e,Uk,Oyr,W0e,Vyr,sro,rr,Hk,Xyr,Bc,zyr,gee,Qyr,Wyr,hee,Uyr,Hyr,Jyr,Jk,Yyr,U0e,Zyr,Kyr,e8r,Gt,Yk,o8r,H0e,r8r,t8r,Ic,a8r,J0e,n8r,s8r,uee,l8r,i8r,d8r,_3,c8r,To,Zk,m8r,Y0e,f8r,g8r,Mn,h8r,Z0e,u8r,p8r,K0e,_8r,b8r,ewe,v8r,F8r,T8r,En,b3,owe,M8r,E8r,pee,C8r,w8r,A8r,v3,rwe,L8r,y8r,_ee,x8r,$8r,k8r,F3,twe,S8r,R8r,bee,P8r,B8r,I8r,T3,awe,N8r,q8r,vee,j8r,D8r,G8r,M3,O8r,nwe,V8r,X8r,swe,z8r,Q8r,E3,lro,Nc,C3,lwe,Kk,W8r,iwe,U8r,iro,tr,eS,H8r,qc,J8r,Fee,Y8r,Z8r,Tee,K8r,e9r,o9r,oS,r9r,dwe,t9r,a9r,n9r,Ot,rS,s9r,cwe,l9r,i9r,jc,d9r,mwe,c9r,m9r,Mee,f9r,g9r,h9r,w3,u9r,Mo,tS,p9r,fwe,_9r,b9r,Cn,v9r,gwe,F9r,T9r,hwe,M9r,E9r,uwe,C9r,w9r,A9r,wn,A3,pwe,L9r,y9r,Eee,x9r,$9r,k9r,L3,_we,S9r,R9r,Cee,P9r,B9r,I9r,y3,bwe,N9r,q9r,wee,j9r,D9r,G9r,x3,vwe,O9r,V9r,Aee,X9r,z9r,Q9r,$3,W9r,Fwe,U9r,H9r,Twe,J9r,Y9r,k3,dro,Dc,S3,Mwe,aS,Z9r,Ewe,K9r,cro,ar,nS,exr,Gc,oxr,Lee,rxr,txr,yee,axr,nxr,sxr,sS,lxr,Cwe,ixr,dxr,cxr,Vt,lS,mxr,wwe,fxr,gxr,Oc,hxr,Awe,uxr,pxr,xee,_xr,bxr,vxr,R3,Fxr,Eo,iS,Txr,Lwe,Mxr,Exr,An,Cxr,ywe,wxr,Axr,xwe,Lxr,yxr,$we,xxr,$xr,kxr,kwe,P3,Swe,Sxr,Rxr,$ee,Pxr,Bxr,Ixr,B3,Nxr,Rwe,qxr,jxr,Pwe,Dxr,Gxr,I3,mro,Vc,N3,Bwe,dS,Oxr,Iwe,Vxr,fro,nr,cS,Xxr,Xc,zxr,kee,Qxr,Wxr,See,Uxr,Hxr,Jxr,mS,Yxr,Nwe,Zxr,Kxr,e$r,Xt,fS,o$r,qwe,r$r,t$r,zc,a$r,jwe,n$r,s$r,Ree,l$r,i$r,d$r,q3,c$r,Co,gS,m$r,Dwe,f$r,g$r,Ln,h$r,Gwe,u$r,p$r,Owe,_$r,b$r,Vwe,v$r,F$r,T$r,ut,j3,Xwe,M$r,E$r,Pee,C$r,w$r,A$r,D3,zwe,L$r,y$r,Bee,x$r,$$r,k$r,G3,Qwe,S$r,R$r,Iee,P$r,B$r,I$r,O3,Wwe,N$r,q$r,Nee,j$r,D$r,G$r,V3,Uwe,O$r,V$r,qee,X$r,z$r,Q$r,X3,W$r,Hwe,U$r,H$r,Jwe,J$r,Y$r,z3,gro,Qc,Q3,Ywe,hS,Z$r,Zwe,K$r,hro,sr,uS,ekr,Wc,okr,jee,rkr,tkr,Dee,akr,nkr,skr,pS,lkr,Kwe,ikr,dkr,ckr,zt,_S,mkr,eAe,fkr,gkr,Uc,hkr,oAe,ukr,pkr,Gee,_kr,bkr,vkr,W3,Fkr,wo,bS,Tkr,rAe,Mkr,Ekr,yn,Ckr,tAe,wkr,Akr,aAe,Lkr,ykr,nAe,xkr,$kr,kkr,sAe,U3,lAe,Skr,Rkr,Oee,Pkr,Bkr,Ikr,H3,Nkr,iAe,qkr,jkr,dAe,Dkr,Gkr,J3,uro,Hc,Y3,cAe,vS,Okr,mAe,Vkr,pro,lr,FS,Xkr,Jc,zkr,Vee,Qkr,Wkr,Xee,Ukr,Hkr,Jkr,TS,Ykr,fAe,Zkr,Kkr,eSr,Qt,MS,oSr,gAe,rSr,tSr,Yc,aSr,hAe,nSr,sSr,zee,lSr,iSr,dSr,Z3,cSr,Ao,ES,mSr,uAe,fSr,gSr,xn,hSr,pAe,uSr,pSr,_Ae,_Sr,bSr,bAe,vSr,FSr,TSr,vAe,K3,FAe,MSr,ESr,Qee,CSr,wSr,ASr,e5,LSr,TAe,ySr,xSr,MAe,$Sr,kSr,o5,_ro,Zc,r5,EAe,CS,SSr,CAe,RSr,bro,ir,wS,PSr,Kc,BSr,Wee,ISr,NSr,Uee,qSr,jSr,DSr,AS,GSr,wAe,OSr,VSr,XSr,Wt,LS,zSr,AAe,QSr,WSr,em,USr,LAe,HSr,JSr,Hee,YSr,ZSr,KSr,t5,eRr,qr,yS,oRr,yAe,rRr,tRr,$n,aRr,xAe,nRr,sRr,$Ae,lRr,iRr,kAe,dRr,cRr,mRr,q,a5,SAe,fRr,gRr,Jee,hRr,uRr,pRr,n5,RAe,_Rr,bRr,Yee,vRr,FRr,TRr,s5,PAe,MRr,ERr,Zee,CRr,wRr,ARr,l5,BAe,LRr,yRr,Kee,xRr,$Rr,kRr,i5,IAe,SRr,RRr,eoe,PRr,BRr,IRr,d5,NAe,NRr,qRr,ooe,jRr,DRr,GRr,c5,qAe,ORr,VRr,roe,XRr,zRr,QRr,m5,jAe,WRr,URr,toe,HRr,JRr,YRr,f5,DAe,ZRr,KRr,aoe,ePr,oPr,rPr,g5,GAe,tPr,aPr,noe,nPr,sPr,lPr,h5,OAe,iPr,dPr,soe,cPr,mPr,fPr,u5,VAe,gPr,hPr,loe,uPr,pPr,_Pr,p5,XAe,bPr,vPr,ioe,FPr,TPr,MPr,_5,zAe,EPr,CPr,doe,wPr,APr,LPr,b5,QAe,yPr,xPr,coe,$Pr,kPr,SPr,v5,WAe,RPr,PPr,moe,BPr,IPr,NPr,F5,UAe,qPr,jPr,foe,DPr,GPr,OPr,T5,HAe,VPr,XPr,goe,zPr,QPr,WPr,wl,JAe,UPr,HPr,hoe,JPr,YPr,uoe,ZPr,KPr,eBr,M5,YAe,oBr,rBr,poe,tBr,aBr,nBr,E5,ZAe,sBr,lBr,_oe,iBr,dBr,cBr,C5,KAe,mBr,fBr,boe,gBr,hBr,uBr,w5,e6e,pBr,_Br,voe,bBr,vBr,FBr,A5,o6e,TBr,MBr,Foe,EBr,CBr,wBr,L5,r6e,ABr,LBr,Toe,yBr,xBr,$Br,y5,t6e,kBr,SBr,Moe,RBr,PBr,BBr,x5,a6e,IBr,NBr,Eoe,qBr,jBr,DBr,$5,n6e,GBr,OBr,Coe,VBr,XBr,zBr,k5,s6e,QBr,WBr,woe,UBr,HBr,JBr,S5,l6e,YBr,ZBr,Aoe,KBr,eIr,oIr,R5,i6e,rIr,tIr,Loe,aIr,nIr,sIr,P5,d6e,lIr,iIr,yoe,dIr,cIr,mIr,B5,c6e,fIr,gIr,xoe,hIr,uIr,pIr,I5,m6e,_Ir,bIr,$oe,vIr,FIr,TIr,N5,f6e,MIr,EIr,koe,CIr,wIr,AIr,q5,g6e,LIr,yIr,Soe,xIr,$Ir,kIr,j5,h6e,SIr,RIr,Roe,PIr,BIr,IIr,D5,u6e,NIr,qIr,Poe,jIr,DIr,GIr,G5,p6e,OIr,VIr,Boe,XIr,zIr,QIr,O5,_6e,WIr,UIr,Ioe,HIr,JIr,YIr,V5,b6e,ZIr,KIr,Noe,eNr,oNr,rNr,X5,v6e,tNr,aNr,qoe,nNr,sNr,lNr,z5,F6e,iNr,dNr,joe,cNr,mNr,fNr,Q5,T6e,gNr,hNr,Doe,uNr,pNr,_Nr,W5,M6e,bNr,vNr,Goe,FNr,TNr,MNr,U5,E6e,ENr,CNr,Ooe,wNr,ANr,LNr,H5,C6e,yNr,xNr,Voe,$Nr,kNr,SNr,J5,w6e,RNr,PNr,Xoe,BNr,INr,NNr,Y5,A6e,qNr,jNr,zoe,DNr,GNr,ONr,Z5,L6e,VNr,XNr,Qoe,zNr,QNr,WNr,K5,y6e,UNr,HNr,Woe,JNr,YNr,ZNr,e0,x6e,KNr,eqr,Uoe,oqr,rqr,tqr,o0,$6e,aqr,nqr,Hoe,sqr,lqr,iqr,r0,k6e,dqr,cqr,Joe,mqr,fqr,gqr,t0,S6e,hqr,uqr,Yoe,pqr,_qr,bqr,a0,vro,om,n0,R6e,xS,vqr,P6e,Fqr,Fro,dr,$S,Tqr,rm,Mqr,Zoe,Eqr,Cqr,Koe,wqr,Aqr,Lqr,kS,yqr,B6e,xqr,$qr,kqr,Ut,SS,Sqr,I6e,Rqr,Pqr,tm,Bqr,N6e,Iqr,Nqr,ere,qqr,jqr,Dqr,s0,Gqr,jr,RS,Oqr,q6e,Vqr,Xqr,kn,zqr,j6e,Qqr,Wqr,D6e,Uqr,Hqr,G6e,Jqr,Yqr,Zqr,le,l0,O6e,Kqr,ejr,ore,ojr,rjr,tjr,i0,V6e,ajr,njr,rre,sjr,ljr,ijr,d0,X6e,djr,cjr,tre,mjr,fjr,gjr,c0,z6e,hjr,ujr,are,pjr,_jr,bjr,m0,Q6e,vjr,Fjr,nre,Tjr,Mjr,Ejr,f0,W6e,Cjr,wjr,sre,Ajr,Ljr,yjr,g0,U6e,xjr,$jr,lre,kjr,Sjr,Rjr,h0,H6e,Pjr,Bjr,ire,Ijr,Njr,qjr,u0,J6e,jjr,Djr,dre,Gjr,Ojr,Vjr,p0,Y6e,Xjr,zjr,cre,Qjr,Wjr,Ujr,_0,Z6e,Hjr,Jjr,mre,Yjr,Zjr,Kjr,b0,K6e,eDr,oDr,fre,rDr,tDr,aDr,v0,e7e,nDr,sDr,gre,lDr,iDr,dDr,F0,o7e,cDr,mDr,hre,fDr,gDr,hDr,T0,r7e,uDr,pDr,ure,_Dr,bDr,vDr,M0,t7e,FDr,TDr,pre,MDr,EDr,CDr,E0,a7e,wDr,ADr,_re,LDr,yDr,xDr,C0,n7e,$Dr,kDr,bre,SDr,RDr,PDr,w0,s7e,BDr,IDr,vre,NDr,qDr,jDr,A0,l7e,DDr,GDr,Fre,ODr,VDr,XDr,L0,i7e,zDr,QDr,Tre,WDr,UDr,HDr,y0,d7e,JDr,YDr,Mre,ZDr,KDr,eGr,x0,c7e,oGr,rGr,Ere,tGr,aGr,nGr,$0,Tro,am,k0,m7e,PS,sGr,f7e,lGr,Mro,cr,BS,iGr,nm,dGr,Cre,cGr,mGr,wre,fGr,gGr,hGr,IS,uGr,g7e,pGr,_Gr,bGr,Ht,NS,vGr,h7e,FGr,TGr,sm,MGr,u7e,EGr,CGr,Are,wGr,AGr,LGr,S0,yGr,Dr,qS,xGr,p7e,$Gr,kGr,Sn,SGr,_7e,RGr,PGr,b7e,BGr,IGr,v7e,NGr,qGr,jGr,Me,R0,F7e,DGr,GGr,Lre,OGr,VGr,XGr,P0,T7e,zGr,QGr,yre,WGr,UGr,HGr,B0,M7e,JGr,YGr,xre,ZGr,KGr,eOr,I0,E7e,oOr,rOr,$re,tOr,aOr,nOr,N0,C7e,sOr,lOr,kre,iOr,dOr,cOr,q0,w7e,mOr,fOr,Sre,gOr,hOr,uOr,j0,A7e,pOr,_Or,Rre,bOr,vOr,FOr,D0,L7e,TOr,MOr,Pre,EOr,COr,wOr,G0,y7e,AOr,LOr,Bre,yOr,xOr,$Or,O0,x7e,kOr,SOr,Ire,ROr,POr,BOr,V0,$7e,IOr,NOr,Nre,qOr,jOr,DOr,X0,k7e,GOr,OOr,qre,VOr,XOr,zOr,z0,S7e,QOr,WOr,jre,UOr,HOr,JOr,Q0,R7e,YOr,ZOr,Dre,KOr,eVr,oVr,W0,Ero,lm,U0,P7e,jS,rVr,B7e,tVr,Cro,mr,DS,aVr,im,nVr,Gre,sVr,lVr,Ore,iVr,dVr,cVr,GS,mVr,I7e,fVr,gVr,hVr,Jt,OS,uVr,N7e,pVr,_Vr,dm,bVr,q7e,vVr,FVr,Vre,TVr,MVr,EVr,H0,CVr,Gr,VS,wVr,j7e,AVr,LVr,Rn,yVr,D7e,xVr,$Vr,G7e,kVr,SVr,O7e,RVr,PVr,BVr,Be,J0,V7e,IVr,NVr,Xre,qVr,jVr,DVr,Y0,X7e,GVr,OVr,zre,VVr,XVr,zVr,Al,z7e,QVr,WVr,Qre,UVr,HVr,Wre,JVr,YVr,ZVr,Z0,Q7e,KVr,eXr,Ure,oXr,rXr,tXr,K0,W7e,aXr,nXr,Hre,sXr,lXr,iXr,ew,U7e,dXr,cXr,Jre,mXr,fXr,gXr,ow,H7e,hXr,uXr,Yre,pXr,_Xr,bXr,rw,J7e,vXr,FXr,Zre,TXr,MXr,EXr,tw,Y7e,CXr,wXr,Kre,AXr,LXr,yXr,aw,wro,cm,nw,Z7e,XS,xXr,K7e,$Xr,Aro,fr,zS,kXr,mm,SXr,ete,RXr,PXr,ote,BXr,IXr,NXr,QS,qXr,eLe,jXr,DXr,GXr,Yt,WS,OXr,oLe,VXr,XXr,fm,zXr,rLe,QXr,WXr,rte,UXr,HXr,JXr,sw,YXr,Or,US,ZXr,tLe,KXr,ezr,Pn,ozr,aLe,rzr,tzr,nLe,azr,nzr,sLe,szr,lzr,izr,gm,lw,lLe,dzr,czr,tte,mzr,fzr,gzr,iw,iLe,hzr,uzr,ate,pzr,_zr,bzr,dw,dLe,vzr,Fzr,nte,Tzr,Mzr,Ezr,cw,Lro,hm,mw,cLe,HS,Czr,mLe,wzr,yro,gr,JS,Azr,um,Lzr,ste,yzr,xzr,lte,$zr,kzr,Szr,YS,Rzr,fLe,Pzr,Bzr,Izr,Zt,ZS,Nzr,gLe,qzr,jzr,pm,Dzr,hLe,Gzr,Ozr,ite,Vzr,Xzr,zzr,fw,Qzr,Vr,KS,Wzr,uLe,Uzr,Hzr,Bn,Jzr,pLe,Yzr,Zzr,_Le,Kzr,eQr,bLe,oQr,rQr,tQr,ge,gw,vLe,aQr,nQr,dte,sQr,lQr,iQr,hw,FLe,dQr,cQr,cte,mQr,fQr,gQr,uw,TLe,hQr,uQr,mte,pQr,_Qr,bQr,pw,MLe,vQr,FQr,fte,TQr,MQr,EQr,_w,ELe,CQr,wQr,gte,AQr,LQr,yQr,bw,CLe,xQr,$Qr,hte,kQr,SQr,RQr,vw,wLe,PQr,BQr,ute,IQr,NQr,qQr,Fw,ALe,jQr,DQr,pte,GQr,OQr,VQr,Tw,LLe,XQr,zQr,_te,QQr,WQr,UQr,Mw,yLe,HQr,JQr,bte,YQr,ZQr,KQr,Ew,xLe,eWr,oWr,vte,rWr,tWr,aWr,Cw,$Le,nWr,sWr,Fte,lWr,iWr,dWr,ww,kLe,cWr,mWr,Tte,fWr,gWr,hWr,Aw,SLe,uWr,pWr,Mte,_Wr,bWr,vWr,Lw,RLe,FWr,TWr,Ete,MWr,EWr,CWr,yw,PLe,wWr,AWr,Cte,LWr,yWr,xWr,xw,BLe,$Wr,kWr,wte,SWr,RWr,PWr,$w,ILe,BWr,IWr,Ate,NWr,qWr,jWr,kw,NLe,DWr,GWr,Lte,OWr,VWr,XWr,Sw,qLe,zWr,QWr,yte,WWr,UWr,HWr,Rw,xro,_m,Pw,jLe,eR,JWr,DLe,YWr,$ro,hr,oR,ZWr,bm,KWr,xte,eUr,oUr,$te,rUr,tUr,aUr,rR,nUr,GLe,sUr,lUr,iUr,Kt,tR,dUr,OLe,cUr,mUr,vm,fUr,VLe,gUr,hUr,kte,uUr,pUr,_Ur,Bw,bUr,Xr,aR,vUr,XLe,FUr,TUr,In,MUr,zLe,EUr,CUr,QLe,wUr,AUr,WLe,LUr,yUr,xUr,ye,Iw,ULe,$Ur,kUr,Ste,SUr,RUr,PUr,Nw,HLe,BUr,IUr,Rte,NUr,qUr,jUr,qw,JLe,DUr,GUr,Pte,OUr,VUr,XUr,jw,YLe,zUr,QUr,Bte,WUr,UUr,HUr,Dw,ZLe,JUr,YUr,Ite,ZUr,KUr,eHr,Gw,KLe,oHr,rHr,Nte,tHr,aHr,nHr,Ow,eye,sHr,lHr,qte,iHr,dHr,cHr,Vw,oye,mHr,fHr,jte,gHr,hHr,uHr,Xw,rye,pHr,_Hr,Dte,bHr,vHr,FHr,zw,tye,THr,MHr,Gte,EHr,CHr,wHr,Qw,kro,Fm,Ww,aye,nR,AHr,nye,LHr,Sro,ur,sR,yHr,Tm,xHr,Ote,$Hr,kHr,Vte,SHr,RHr,PHr,lR,BHr,sye,IHr,NHr,qHr,ea,iR,jHr,lye,DHr,GHr,Mm,OHr,iye,VHr,XHr,Xte,zHr,QHr,WHr,Uw,UHr,zr,dR,HHr,dye,JHr,YHr,Nn,ZHr,cye,KHr,eJr,mye,oJr,rJr,fye,tJr,aJr,nJr,re,Hw,gye,sJr,lJr,zte,iJr,dJr,cJr,Jw,hye,mJr,fJr,Qte,gJr,hJr,uJr,Yw,uye,pJr,_Jr,Wte,bJr,vJr,FJr,Zw,pye,TJr,MJr,Ute,EJr,CJr,wJr,Kw,_ye,AJr,LJr,Hte,yJr,xJr,$Jr,eA,bye,kJr,SJr,Jte,RJr,PJr,BJr,oA,vye,IJr,NJr,Yte,qJr,jJr,DJr,rA,Fye,GJr,OJr,Zte,VJr,XJr,zJr,tA,Tye,QJr,WJr,Kte,UJr,HJr,JJr,aA,Mye,YJr,ZJr,eae,KJr,eYr,oYr,nA,Eye,rYr,tYr,oae,aYr,nYr,sYr,sA,Cye,lYr,iYr,rae,dYr,cYr,mYr,lA,wye,fYr,gYr,tae,hYr,uYr,pYr,iA,Aye,_Yr,bYr,aae,vYr,FYr,TYr,dA,Lye,MYr,EYr,nae,CYr,wYr,AYr,cA,yye,LYr,yYr,sae,xYr,$Yr,kYr,mA,xye,SYr,RYr,lae,PYr,BYr,IYr,fA,$ye,NYr,qYr,iae,jYr,DYr,GYr,gA,kye,OYr,VYr,dae,XYr,zYr,QYr,hA,Sye,WYr,UYr,cae,HYr,JYr,YYr,uA,Rye,ZYr,KYr,mae,eZr,oZr,rZr,pA,Pye,tZr,aZr,fae,nZr,sZr,lZr,_A,Bye,iZr,dZr,gae,cZr,mZr,fZr,bA,Iye,gZr,hZr,hae,uZr,pZr,_Zr,vA,Nye,bZr,vZr,uae,FZr,TZr,MZr,FA,qye,EZr,CZr,pae,wZr,AZr,LZr,TA,jye,yZr,xZr,_ae,$Zr,kZr,SZr,MA,Rro,Em,EA,Dye,cR,RZr,Gye,PZr,Pro,pr,mR,BZr,Cm,IZr,bae,NZr,qZr,vae,jZr,DZr,GZr,fR,OZr,Oye,VZr,XZr,zZr,oa,gR,QZr,Vye,WZr,UZr,wm,HZr,Xye,JZr,YZr,Fae,ZZr,KZr,eKr,CA,oKr,Qr,hR,rKr,zye,tKr,aKr,qn,nKr,Qye,sKr,lKr,Wye,iKr,dKr,Uye,cKr,mKr,fKr,ve,wA,Hye,gKr,hKr,Tae,uKr,pKr,_Kr,AA,Jye,bKr,vKr,Mae,FKr,TKr,MKr,LA,Yye,EKr,CKr,Eae,wKr,AKr,LKr,yA,Zye,yKr,xKr,Cae,$Kr,kKr,SKr,xA,Kye,RKr,PKr,wae,BKr,IKr,NKr,$A,e8e,qKr,jKr,Aae,DKr,GKr,OKr,kA,o8e,VKr,XKr,Lae,zKr,QKr,WKr,SA,r8e,UKr,HKr,yae,JKr,YKr,ZKr,RA,t8e,KKr,eet,xae,oet,ret,tet,PA,a8e,aet,net,$ae,set,iet,det,BA,n8e,cet,met,kae,fet,get,het,IA,s8e,uet,pet,Sae,_et,bet,vet,NA,l8e,Fet,Tet,Rae,Met,Eet,Cet,qA,i8e,wet,Aet,Pae,Let,yet,xet,jA,d8e,$et,ket,Bae,Set,Ret,Pet,DA,c8e,Bet,Iet,Iae,Net,qet,jet,GA,m8e,Det,Get,Nae,Oet,Vet,Xet,OA,Bro,Am,VA,f8e,uR,zet,g8e,Qet,Iro,_r,pR,Wet,Lm,Uet,qae,Het,Jet,jae,Yet,Zet,Ket,_R,eot,h8e,oot,rot,tot,ra,bR,aot,u8e,not,sot,ym,lot,p8e,iot,dot,Dae,cot,mot,fot,XA,got,Wr,vR,hot,_8e,uot,pot,jn,_ot,b8e,bot,vot,v8e,Fot,Tot,F8e,Mot,Eot,Cot,FR,zA,T8e,wot,Aot,Gae,Lot,yot,xot,QA,M8e,$ot,kot,Oae,Sot,Rot,Pot,WA,Nro,xm,UA,E8e,TR,Bot,C8e,Iot,qro,br,MR,Not,$m,qot,Vae,jot,Dot,Xae,Got,Oot,Vot,ER,Xot,w8e,zot,Qot,Wot,ta,CR,Uot,A8e,Hot,Jot,km,Yot,L8e,Zot,Kot,zae,ert,ort,rrt,HA,trt,Ur,wR,art,y8e,nrt,srt,Dn,lrt,x8e,irt,drt,$8e,crt,mrt,k8e,frt,grt,hrt,S8e,JA,R8e,urt,prt,Qae,_rt,brt,vrt,YA,jro,Sm,ZA,P8e,AR,Frt,B8e,Trt,Dro,vr,LR,Mrt,Rm,Ert,Wae,Crt,wrt,Uae,Art,Lrt,yrt,yR,xrt,I8e,$rt,krt,Srt,aa,xR,Rrt,N8e,Prt,Brt,Pm,Irt,q8e,Nrt,qrt,Hae,jrt,Drt,Grt,KA,Ort,Hr,$R,Vrt,j8e,Xrt,zrt,Gn,Qrt,D8e,Wrt,Urt,G8e,Hrt,Jrt,O8e,Yrt,Zrt,Krt,V8e,e6,X8e,ett,ott,Jae,rtt,ttt,att,o6,Gro,Bm,r6,z8e,kR,ntt,Q8e,stt,Oro,Fr,SR,ltt,Im,itt,Yae,dtt,ctt,Zae,mtt,ftt,gtt,RR,htt,W8e,utt,ptt,_tt,na,PR,btt,U8e,vtt,Ftt,Nm,Ttt,H8e,Mtt,Ett,Kae,Ctt,wtt,Att,t6,Ltt,Jr,BR,ytt,J8e,xtt,$tt,On,ktt,Y8e,Stt,Rtt,Z8e,Ptt,Btt,K8e,Itt,Ntt,qtt,ce,a6,e9e,jtt,Dtt,ene,Gtt,Ott,Vtt,n6,o9e,Xtt,ztt,one,Qtt,Wtt,Utt,s6,r9e,Htt,Jtt,rne,Ytt,Ztt,Ktt,l6,t9e,eat,oat,tne,rat,tat,aat,i6,a9e,nat,sat,ane,lat,iat,dat,d6,n9e,cat,mat,nne,fat,gat,hat,c6,s9e,uat,pat,sne,_at,bat,vat,m6,l9e,Fat,Tat,lne,Mat,Eat,Cat,f6,i9e,wat,Aat,ine,Lat,yat,xat,g6,d9e,$at,kat,dne,Sat,Rat,Pat,h6,c9e,Bat,Iat,cne,Nat,qat,jat,u6,m9e,Dat,Gat,mne,Oat,Vat,Xat,p6,f9e,zat,Qat,fne,Wat,Uat,Hat,_6,g9e,Jat,Yat,gne,Zat,Kat,ent,b6,h9e,ont,rnt,hne,tnt,ant,nnt,v6,u9e,snt,lnt,une,int,dnt,cnt,F6,p9e,mnt,fnt,pne,gnt,hnt,unt,T6,_9e,pnt,_nt,_ne,bnt,vnt,Fnt,M6,b9e,Tnt,Mnt,bne,Ent,Cnt,wnt,E6,v9e,Ant,Lnt,vne,ynt,xnt,$nt,C6,F9e,knt,Snt,Fne,Rnt,Pnt,Bnt,w6,Vro,qm,A6,T9e,IR,Int,M9e,Nnt,Xro,Tr,NR,qnt,jm,jnt,Tne,Dnt,Gnt,Mne,Ont,Vnt,Xnt,qR,znt,E9e,Qnt,Wnt,Unt,sa,jR,Hnt,C9e,Jnt,Ynt,Dm,Znt,w9e,Knt,est,Ene,ost,rst,tst,L6,ast,Yr,DR,nst,A9e,sst,lst,Vn,ist,L9e,dst,cst,y9e,mst,fst,x9e,gst,hst,ust,me,y6,$9e,pst,_st,Cne,bst,vst,Fst,x6,k9e,Tst,Mst,wne,Est,Cst,wst,$6,S9e,Ast,Lst,Ane,yst,xst,$st,k6,R9e,kst,Sst,Lne,Rst,Pst,Bst,S6,P9e,Ist,Nst,yne,qst,jst,Dst,R6,B9e,Gst,Ost,xne,Vst,Xst,zst,P6,I9e,Qst,Wst,$ne,Ust,Hst,Jst,B6,N9e,Yst,Zst,kne,Kst,elt,olt,I6,q9e,rlt,tlt,Sne,alt,nlt,slt,N6,j9e,llt,ilt,Rne,dlt,clt,mlt,q6,D9e,flt,glt,Pne,hlt,ult,plt,j6,G9e,_lt,blt,Bne,vlt,Flt,Tlt,D6,O9e,Mlt,Elt,Ine,Clt,wlt,Alt,G6,V9e,Llt,ylt,Nne,xlt,$lt,klt,O6,X9e,Slt,Rlt,qne,Plt,Blt,Ilt,V6,z9e,Nlt,qlt,jne,jlt,Dlt,Glt,X6,Q9e,Olt,Vlt,Dne,Xlt,zlt,Qlt,z6,W9e,Wlt,Ult,Gne,Hlt,Jlt,Ylt,Q6,U9e,Zlt,Klt,One,eit,oit,rit,W6,H9e,tit,ait,Vne,nit,sit,lit,U6,J9e,iit,dit,Xne,cit,mit,fit,H6,zro,Gm,J6,Y9e,GR,git,Z9e,hit,Qro,Mr,OR,uit,Om,pit,zne,_it,bit,Qne,vit,Fit,Tit,VR,Mit,K9e,Eit,Cit,wit,la,XR,Ait,exe,Lit,yit,Vm,xit,oxe,$it,kit,Wne,Sit,Rit,Pit,Y6,Bit,Zr,zR,Iit,rxe,Nit,qit,Xn,jit,txe,Dit,Git,axe,Oit,Vit,nxe,Xit,zit,Qit,sxe,Z6,lxe,Wit,Uit,Une,Hit,Jit,Yit,K6,Wro,Xm,e7,ixe,QR,Zit,dxe,Kit,Uro,Er,WR,edt,zm,odt,Hne,rdt,tdt,Jne,adt,ndt,sdt,UR,ldt,cxe,idt,ddt,cdt,ia,HR,mdt,mxe,fdt,gdt,Qm,hdt,fxe,udt,pdt,Yne,_dt,bdt,vdt,o7,Fdt,Kr,JR,Tdt,gxe,Mdt,Edt,zn,Cdt,hxe,wdt,Adt,uxe,Ldt,ydt,pxe,xdt,$dt,kdt,_xe,r7,bxe,Sdt,Rdt,Zne,Pdt,Bdt,Idt,t7,Hro,Wm,a7,vxe,YR,Ndt,Fxe,qdt,Jro,Cr,ZR,jdt,Um,Ddt,Kne,Gdt,Odt,ese,Vdt,Xdt,zdt,KR,Qdt,Txe,Wdt,Udt,Hdt,da,eP,Jdt,Mxe,Ydt,Zdt,Hm,Kdt,Exe,ect,oct,ose,rct,tct,act,n7,nct,et,oP,sct,Cxe,lct,ict,Qn,dct,wxe,cct,mct,Axe,fct,gct,Lxe,hct,uct,pct,te,s7,yxe,_ct,bct,rse,vct,Fct,Tct,l7,xxe,Mct,Ect,tse,Cct,wct,Act,i7,$xe,Lct,yct,ase,xct,$ct,kct,d7,kxe,Sct,Rct,nse,Pct,Bct,Ict,c7,Sxe,Nct,qct,sse,jct,Dct,Gct,m7,Rxe,Oct,Vct,lse,Xct,zct,Qct,f7,Pxe,Wct,Uct,ise,Hct,Jct,Yct,g7,Bxe,Zct,Kct,dse,emt,omt,rmt,h7,Ixe,tmt,amt,cse,nmt,smt,lmt,u7,Nxe,imt,dmt,mse,cmt,mmt,fmt,p7,qxe,gmt,hmt,fse,umt,pmt,_mt,_7,jxe,bmt,vmt,gse,Fmt,Tmt,Mmt,b7,Dxe,Emt,Cmt,hse,wmt,Amt,Lmt,v7,Gxe,ymt,xmt,use,$mt,kmt,Smt,F7,Oxe,Rmt,Pmt,pse,Bmt,Imt,Nmt,T7,Vxe,qmt,jmt,_se,Dmt,Gmt,Omt,M7,Xxe,Vmt,Xmt,bse,zmt,Qmt,Wmt,E7,zxe,Umt,Hmt,vse,Jmt,Ymt,Zmt,C7,Qxe,Kmt,eft,Fse,oft,rft,tft,w7,Wxe,aft,nft,Tse,sft,lft,ift,A7,Uxe,dft,cft,Mse,mft,fft,gft,L7,Hxe,hft,uft,Ese,pft,_ft,bft,y7,Jxe,vft,Fft,Cse,Tft,Mft,Eft,x7,Yxe,Cft,wft,wse,Aft,Lft,yft,$7,Zxe,xft,$ft,Ase,kft,Sft,Rft,k7,Kxe,Pft,Bft,Lse,Ift,Nft,qft,S7,e$e,jft,Dft,yse,Gft,Oft,Vft,R7,Yro,Jm,P7,o$e,rP,Xft,r$e,zft,Zro,wr,tP,Qft,Ym,Wft,xse,Uft,Hft,$se,Jft,Yft,Zft,aP,Kft,t$e,egt,ogt,rgt,ca,nP,tgt,a$e,agt,ngt,Zm,sgt,n$e,lgt,igt,kse,dgt,cgt,mgt,B7,fgt,ot,sP,ggt,s$e,hgt,ugt,Wn,pgt,l$e,_gt,bgt,i$e,vgt,Fgt,d$e,Tgt,Mgt,Egt,xe,I7,c$e,Cgt,wgt,Sse,Agt,Lgt,ygt,N7,m$e,xgt,$gt,Rse,kgt,Sgt,Rgt,q7,f$e,Pgt,Bgt,Pse,Igt,Ngt,qgt,j7,g$e,jgt,Dgt,Bse,Ggt,Ogt,Vgt,D7,h$e,Xgt,zgt,Ise,Qgt,Wgt,Ugt,G7,u$e,Hgt,Jgt,Nse,Ygt,Zgt,Kgt,O7,p$e,eht,oht,qse,rht,tht,aht,V7,_$e,nht,sht,jse,lht,iht,dht,X7,b$e,cht,mht,Dse,fht,ght,hht,z7,v$e,uht,pht,Gse,_ht,bht,vht,Q7,Kro,Km,W7,F$e,lP,Fht,T$e,Tht,eto,Ar,iP,Mht,ef,Eht,Ose,Cht,wht,Vse,Aht,Lht,yht,dP,xht,M$e,$ht,kht,Sht,ma,cP,Rht,E$e,Pht,Bht,of,Iht,C$e,Nht,qht,Xse,jht,Dht,Ght,U7,Oht,rt,mP,Vht,w$e,Xht,zht,Un,Qht,A$e,Wht,Uht,L$e,Hht,Jht,y$e,Yht,Zht,Kht,Ee,H7,x$e,eut,out,zse,rut,tut,aut,J7,$$e,nut,sut,Qse,lut,iut,dut,Y7,k$e,cut,mut,Wse,fut,gut,hut,Z7,S$e,uut,put,Use,_ut,but,vut,K7,R$e,Fut,Tut,Hse,Mut,Eut,Cut,eL,P$e,wut,Aut,Jse,Lut,yut,xut,oL,B$e,$ut,kut,Yse,Sut,Rut,Put,rL,I$e,But,Iut,Zse,Nut,qut,jut,tL,N$e,Dut,Gut,Kse,Out,Vut,Xut,aL,q$e,zut,Qut,ele,Wut,Uut,Hut,nL,j$e,Jut,Yut,ole,Zut,Kut,ept,sL,D$e,opt,rpt,rle,tpt,apt,npt,lL,G$e,spt,lpt,tle,ipt,dpt,cpt,iL,oto,rf,dL,O$e,fP,mpt,V$e,fpt,rto,Lr,gP,gpt,tf,hpt,ale,upt,ppt,nle,_pt,bpt,vpt,hP,Fpt,X$e,Tpt,Mpt,Ept,fa,uP,Cpt,z$e,wpt,Apt,af,Lpt,Q$e,ypt,xpt,sle,$pt,kpt,Spt,cL,Rpt,tt,pP,Ppt,W$e,Bpt,Ipt,Hn,Npt,U$e,qpt,jpt,H$e,Dpt,Gpt,J$e,Opt,Vpt,Xpt,$e,mL,Y$e,zpt,Qpt,lle,Wpt,Upt,Hpt,fL,Z$e,Jpt,Ypt,ile,Zpt,Kpt,e_t,gL,K$e,o_t,r_t,dle,t_t,a_t,n_t,hL,eke,s_t,l_t,cle,i_t,d_t,c_t,uL,oke,m_t,f_t,mle,g_t,h_t,u_t,pL,rke,p_t,__t,fle,b_t,v_t,F_t,_L,tke,T_t,M_t,gle,E_t,C_t,w_t,bL,ake,A_t,L_t,hle,y_t,x_t,$_t,vL,nke,k_t,S_t,ule,R_t,P_t,B_t,FL,ske,I_t,N_t,ple,q_t,j_t,D_t,TL,tto,nf,ML,lke,_P,G_t,ike,O_t,ato,yr,bP,V_t,sf,X_t,_le,z_t,Q_t,ble,W_t,U_t,H_t,vP,J_t,dke,Y_t,Z_t,K_t,ga,FP,e1t,cke,o1t,r1t,lf,t1t,mke,a1t,n1t,vle,s1t,l1t,i1t,EL,d1t,at,TP,c1t,fke,m1t,f1t,Jn,g1t,gke,h1t,u1t,hke,p1t,_1t,uke,b1t,v1t,F1t,ke,CL,pke,T1t,M1t,Fle,E1t,C1t,w1t,wL,_ke,A1t,L1t,Tle,y1t,x1t,$1t,AL,bke,k1t,S1t,Mle,R1t,P1t,B1t,LL,vke,I1t,N1t,Ele,q1t,j1t,D1t,yL,Fke,G1t,O1t,Cle,V1t,X1t,z1t,xL,Tke,Q1t,W1t,wle,U1t,H1t,J1t,$L,Mke,Y1t,Z1t,Ale,K1t,ebt,obt,kL,Eke,rbt,tbt,Lle,abt,nbt,sbt,SL,Cke,lbt,ibt,yle,dbt,cbt,mbt,RL,wke,fbt,gbt,xle,hbt,ubt,pbt,PL,nto,df,BL,Ake,MP,_bt,Lke,bbt,sto,xr,EP,vbt,cf,Fbt,$le,Tbt,Mbt,kle,Ebt,Cbt,wbt,CP,Abt,yke,Lbt,ybt,xbt,ha,wP,$bt,xke,kbt,Sbt,mf,Rbt,$ke,Pbt,Bbt,Sle,Ibt,Nbt,qbt,IL,jbt,nt,AP,Dbt,kke,Gbt,Obt,Yn,Vbt,Ske,Xbt,zbt,Rke,Qbt,Wbt,Pke,Ubt,Hbt,Jbt,Se,NL,Bke,Ybt,Zbt,Rle,Kbt,e2t,o2t,qL,Ike,r2t,t2t,Ple,a2t,n2t,s2t,jL,Nke,l2t,i2t,Ble,d2t,c2t,m2t,DL,qke,f2t,g2t,Ile,h2t,u2t,p2t,GL,jke,_2t,b2t,Nle,v2t,F2t,T2t,OL,Dke,M2t,E2t,qle,C2t,w2t,A2t,VL,Gke,L2t,y2t,jle,x2t,$2t,k2t,XL,Oke,S2t,R2t,Dle,P2t,B2t,I2t,zL,Vke,N2t,q2t,Gle,j2t,D2t,G2t,QL,Xke,O2t,V2t,Ole,X2t,z2t,Q2t,WL,lto,ff,UL,zke,LP,W2t,Qke,U2t,ito,$r,yP,H2t,gf,J2t,Vle,Y2t,Z2t,Xle,K2t,evt,ovt,xP,rvt,Wke,tvt,avt,nvt,ua,$P,svt,Uke,lvt,ivt,hf,dvt,Hke,cvt,mvt,zle,fvt,gvt,hvt,HL,uvt,st,kP,pvt,Jke,_vt,bvt,Zn,vvt,Yke,Fvt,Tvt,Zke,Mvt,Evt,Kke,Cvt,wvt,Avt,Re,JL,eSe,Lvt,yvt,Qle,xvt,$vt,kvt,YL,oSe,Svt,Rvt,Wle,Pvt,Bvt,Ivt,ZL,rSe,Nvt,qvt,Ule,jvt,Dvt,Gvt,KL,tSe,Ovt,Vvt,Hle,Xvt,zvt,Qvt,ey,aSe,Wvt,Uvt,Jle,Hvt,Jvt,Yvt,oy,nSe,Zvt,Kvt,Yle,eFt,oFt,rFt,ry,sSe,tFt,aFt,Zle,nFt,sFt,lFt,ty,lSe,iFt,dFt,Kle,cFt,mFt,fFt,ay,iSe,gFt,hFt,eie,uFt,pFt,_Ft,ny,dSe,bFt,vFt,oie,FFt,TFt,MFt,sy,dto,uf,ly,cSe,SP,EFt,mSe,CFt,cto,kr,RP,wFt,pf,AFt,rie,LFt,yFt,tie,xFt,$Ft,kFt,PP,SFt,fSe,RFt,PFt,BFt,pa,BP,IFt,gSe,NFt,qFt,_f,jFt,hSe,DFt,GFt,aie,OFt,VFt,XFt,iy,zFt,lt,IP,QFt,uSe,WFt,UFt,Kn,HFt,pSe,JFt,YFt,_Se,ZFt,KFt,bSe,eTt,oTt,rTt,Xe,dy,vSe,tTt,aTt,nie,nTt,sTt,lTt,cy,FSe,iTt,dTt,sie,cTt,mTt,fTt,my,TSe,gTt,hTt,lie,uTt,pTt,_Tt,fy,MSe,bTt,vTt,iie,FTt,TTt,MTt,gy,ESe,ETt,CTt,die,wTt,ATt,LTt,hy,CSe,yTt,xTt,cie,$Tt,kTt,STt,uy,wSe,RTt,PTt,mie,BTt,ITt,NTt,py,ASe,qTt,jTt,fie,DTt,GTt,OTt,_y,mto,bf,by,LSe,NP,VTt,ySe,XTt,fto,Sr,qP,zTt,vf,QTt,gie,WTt,UTt,hie,HTt,JTt,YTt,jP,ZTt,xSe,KTt,eMt,oMt,_a,DP,rMt,$Se,tMt,aMt,Ff,nMt,kSe,sMt,lMt,uie,iMt,dMt,cMt,vy,mMt,it,GP,fMt,SSe,gMt,hMt,es,uMt,RSe,pMt,_Mt,PSe,bMt,vMt,BSe,FMt,TMt,MMt,ze,Fy,ISe,EMt,CMt,pie,wMt,AMt,LMt,Ty,NSe,yMt,xMt,_ie,$Mt,kMt,SMt,My,qSe,RMt,PMt,bie,BMt,IMt,NMt,Ey,jSe,qMt,jMt,vie,DMt,GMt,OMt,Cy,DSe,VMt,XMt,Fie,zMt,QMt,WMt,wy,GSe,UMt,HMt,Tie,JMt,YMt,ZMt,Ay,OSe,KMt,eEt,Mie,oEt,rEt,tEt,Ly,VSe,aEt,nEt,Eie,sEt,lEt,iEt,yy,gto,Tf,xy,XSe,OP,dEt,zSe,cEt,hto,Rr,VP,mEt,Mf,fEt,Cie,gEt,hEt,wie,uEt,pEt,_Et,XP,bEt,QSe,vEt,FEt,TEt,ba,zP,MEt,WSe,EEt,CEt,Ef,wEt,USe,AEt,LEt,Aie,yEt,xEt,$Et,$y,kEt,dt,QP,SEt,HSe,REt,PEt,os,BEt,JSe,IEt,NEt,YSe,qEt,jEt,ZSe,DEt,GEt,OEt,KSe,ky,eRe,VEt,XEt,Lie,zEt,QEt,WEt,Sy,uto,Cf,Ry,oRe,WP,UEt,rRe,HEt,pto,Pr,UP,JEt,wf,YEt,yie,ZEt,KEt,xie,e4t,o4t,r4t,HP,t4t,tRe,a4t,n4t,s4t,va,JP,l4t,aRe,i4t,d4t,Af,c4t,nRe,m4t,f4t,$ie,g4t,h4t,u4t,Py,p4t,ct,YP,_4t,sRe,b4t,v4t,rs,F4t,lRe,T4t,M4t,iRe,E4t,C4t,dRe,w4t,A4t,L4t,ZP,By,cRe,y4t,x4t,kie,$4t,k4t,S4t,Iy,mRe,R4t,P4t,Sie,B4t,I4t,N4t,Ny,_to,Lf,qy,fRe,KP,q4t,gRe,j4t,bto,Br,eB,D4t,yf,G4t,Rie,O4t,V4t,Pie,X4t,z4t,Q4t,oB,W4t,hRe,U4t,H4t,J4t,Fa,rB,Y4t,uRe,Z4t,K4t,xf,eCt,pRe,oCt,rCt,Bie,tCt,aCt,nCt,jy,sCt,mt,tB,lCt,_Re,iCt,dCt,ts,cCt,bRe,mCt,fCt,vRe,gCt,hCt,FRe,uCt,pCt,_Ct,TRe,Dy,MRe,bCt,vCt,Iie,FCt,TCt,MCt,Gy,vto;return d=new oe({}),Ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),wx=new oe({}),Ax=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new ECt({props:{warning:!0,$$slots:{default:[nFa]},$$scope:{ctx:$}}}),Lx=new oe({}),yx=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L659"}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L682"}}),mu=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[sFa]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L805"}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L428"}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L442"}}),Hu=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[lFa]},$$scope:{ctx:$}}}),qx=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L643"}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L217"}}),Gp=new ECt({props:{$$slots:{default:[iFa]},$$scope:{ctx:$}}}),Op=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[dFa]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L344"}}),zx=new oe({}),Qx=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L96"}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L110"}}),h_=new ECt({props:{$$slots:{default:[cFa]},$$scope:{ctx:$}}}),u_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[mFa]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L277"}}),Yx=new oe({}),Zx=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L873"}}),e$=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig">TimeSeriesTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel">TimeSeriesTransformerModel</a> (Time Series Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel">WhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[fFa]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[gFa]},$$scope:{ctx:$}}}),r$=new oe({}),t$=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),n$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[hFa]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uFa]},$$scope:{ctx:$}}}),l$=new oe({}),i$=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L895"}}),c$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[pFa]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_Fa]},$$scope:{ctx:$}}}),f$=new oe({}),g$=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L902"}}),u$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[bFa]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vFa]},$$scope:{ctx:$}}}),_$=new oe({}),b$=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L909"}}),F$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FFa]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TFa]},$$scope:{ctx:$}}}),M$=new oe({}),E$=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L918"}}),w$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[MFa]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EFa]},$$scope:{ctx:$}}}),L$=new oe({}),y$=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L974"}}),$$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[CFa]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wFa]},$$scope:{ctx:$}}}),S$=new oe({}),R$=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L981"}}),B$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[AFa]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LFa]},$$scope:{ctx:$}}}),N$=new oe({}),q$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L967"}}),D$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[yFa]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[xFa]},$$scope:{ctx:$}}}),O$=new oe({}),V$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L927"}}),z$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering">BloomForQuestionAnswering</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[$Fa]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[kFa]},$$scope:{ctx:$}}}),W$=new oe({}),U$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L934"}}),J$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[SFa]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[RFa]},$$scope:{ctx:$}}}),Z$=new oe({}),K$=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L956"}}),ok=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[PFa]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N4=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[BFa]},$$scope:{ctx:$}}}),tk=new oe({}),ak=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L990"}}),sk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[IFa]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NFa]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1038"}}),mk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[qFa]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[jFa]},$$scope:{ctx:$}}}),gk=new oe({}),hk=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1045"}}),pk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[DFa]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GFa]},$$scope:{ctx:$}}}),bk=new oe({}),vk=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L945"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[OFa]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[VFa]},$$scope:{ctx:$}}}),Ek=new oe({}),Ck=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1052"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[XFa]},$$scope:{ctx:$}}}),Lk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zFa]},$$scope:{ctx:$}}}),yk=new oe({}),xk=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1075"}}),kk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[QFa]},$$scope:{ctx:$}}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[WFa]},$$scope:{ctx:$}}}),Rk=new oe({}),Pk=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1059"}}),Ik=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[UFa]},$$scope:{ctx:$}}}),Nk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[HFa]},$$scope:{ctx:$}}}),qk=new oe({}),jk=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1066"}}),Gk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration">WhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JFa]},$$scope:{ctx:$}}}),Ok=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YFa]},$$scope:{ctx:$}}}),Vk=new oe({}),Xk=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1084"}}),Qk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ZFa]},$$scope:{ctx:$}}}),Wk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[KFa]},$$scope:{ctx:$}}}),Uk=new oe({}),Hk=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1091"}}),Yk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eTa]},$$scope:{ctx:$}}}),Zk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oTa]},$$scope:{ctx:$}}}),Kk=new oe({}),eS=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1022"}}),rS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rTa]},$$scope:{ctx:$}}}),tS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tTa]},$$scope:{ctx:$}}}),aS=new oe({}),nS=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L997"}}),lS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aTa]},$$scope:{ctx:$}}}),iS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nTa]},$$scope:{ctx:$}}}),dS=new oe({}),cS=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1004"}}),fS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sTa]},$$scope:{ctx:$}}}),gS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lTa]},$$scope:{ctx:$}}}),hS=new oe({}),uS=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1013"}}),_S=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iTa]},$$scope:{ctx:$}}}),bS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dTa]},$$scope:{ctx:$}}}),vS=new oe({}),FS=new R({props:{name:"class transformers.AutoModelForZeroShotObjectDetection",anchor:"transformers.AutoModelForZeroShotObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1029"}}),MS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection">OwlViTForObjectDetection</a> (OWL-ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.example",$$slots:{default:[cTa]},$$scope:{ctx:$}}}),ES=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new B({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.example",$$slots:{default:[mTa]},$$scope:{ctx:$}}}),CS=new oe({}),wS=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),LS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fTa]},$$scope:{ctx:$}}}),yS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[gTa]},$$scope:{ctx:$}}}),xS=new oe({}),$S=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),SS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[hTa]},$$scope:{ctx:$}}}),RS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uTa]},$$scope:{ctx:$}}}),PS=new oe({}),BS=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),NS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[pTa]},$$scope:{ctx:$}}}),qS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_Ta]},$$scope:{ctx:$}}}),jS=new oe({}),DS=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),OS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[bTa]},$$scope:{ctx:$}}}),VS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vTa]},$$scope:{ctx:$}}}),XS=new oe({}),zS=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),WS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[FTa]},$$scope:{ctx:$}}}),US=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[TTa]},$$scope:{ctx:$}}}),HS=new oe({}),JS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),ZS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[MTa]},$$scope:{ctx:$}}}),KS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ETa]},$$scope:{ctx:$}}}),eR=new oe({}),oR=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),tR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CTa]},$$scope:{ctx:$}}}),aR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wTa]},$$scope:{ctx:$}}}),nR=new oe({}),sR=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L513"}}),iR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ATa]},$$scope:{ctx:$}}}),dR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LTa]},$$scope:{ctx:$}}}),cR=new oe({}),mR=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L560"}}),gR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CA=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[yTa]},$$scope:{ctx:$}}}),hR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xTa]},$$scope:{ctx:$}}}),uR=new oe({}),pR=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L567"}}),bR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Ta]},$$scope:{ctx:$}}}),vR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kTa]},$$scope:{ctx:$}}}),TR=new oe({}),MR=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),CR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[STa]},$$scope:{ctx:$}}}),wR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[RTa]},$$scope:{ctx:$}}}),AR=new oe({}),LR=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L529"}}),xR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KA=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[PTa]},$$scope:{ctx:$}}}),$R=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[BTa]},$$scope:{ctx:$}}}),kR=new oe({}),SR=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L551"}}),PR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[ITa]},$$scope:{ctx:$}}}),BR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NTa]},$$scope:{ctx:$}}}),IR=new oe({}),NR=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),jR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L6=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qTa]},$$scope:{ctx:$}}}),DR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jTa]},$$scope:{ctx:$}}}),GR=new oe({}),OR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),XR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[DTa]},$$scope:{ctx:$}}}),zR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GTa]},$$scope:{ctx:$}}}),QR=new oe({}),WR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L576"}}),HR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[OTa]},$$scope:{ctx:$}}}),JR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[VTa]},$$scope:{ctx:$}}}),YR=new oe({}),ZR=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),eP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[XTa]},$$scope:{ctx:$}}}),oP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[zTa]},$$scope:{ctx:$}}}),rP=new oe({}),tP=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),nP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[QTa]},$$scope:{ctx:$}}}),sP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[WTa]},$$scope:{ctx:$}}}),lP=new oe({}),iP=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),cP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[UTa]},$$scope:{ctx:$}}}),mP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[HTa]},$$scope:{ctx:$}}}),fP=new oe({}),gP=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),uP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[JTa]},$$scope:{ctx:$}}}),pP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TL=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[YTa]},$$scope:{ctx:$}}}),_P=new oe({}),bP=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),FP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EL=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ZTa]},$$scope:{ctx:$}}}),TP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PL=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[KTa]},$$scope:{ctx:$}}}),MP=new oe({}),EP=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),wP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IL=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[eMa]},$$scope:{ctx:$}}}),AP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[oMa]},$$scope:{ctx:$}}}),LP=new oe({}),yP=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),$P=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HL=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rMa]},$$scope:{ctx:$}}}),kP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[tMa]},$$scope:{ctx:$}}}),SP=new oe({}),RP=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),BP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iy=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[aMa]},$$scope:{ctx:$}}}),IP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_y=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nMa]},$$scope:{ctx:$}}}),NP=new oe({}),qP=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),DP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vy=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sMa]},$$scope:{ctx:$}}}),GP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lMa]},$$scope:{ctx:$}}}),OP=new oe({}),VP=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),zP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$y=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iMa]},$$scope:{ctx:$}}}),QP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sy=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dMa]},$$scope:{ctx:$}}}),WP=new oe({}),UP=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),JP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Py=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[cMa]},$$scope:{ctx:$}}}),YP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ny=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mMa]},$$scope:{ctx:$}}}),KP=new oe({}),eB=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),rB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jy=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[fMa]},$$scope:{ctx:$}}}),tB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Gy=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gMa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),xo=a("span"),dd=o("Auto Classes"),Rf=l(),bt=a("p"),cd=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),md=a("code"),Tx=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),fd=o("Instantiating one of "),ns=a("a"),Mx=o("AutoConfig"),ss=o(", "),ls=a("a"),Ex=o("AutoModel"),gd=o(`, and
`),is=a("a"),Cx=o("AutoTokenizer"),hd=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Ja.$$.fragment),Je=l(),Ae=a("p"),xI=o("will create a model that is an instance of "),ud=a("a"),$I=o("BertModel"),kI=o("."),$o=l(),Ya=a("p"),SI=o("There is one class of "),If=a("code"),RI=o("AutoModel"),Nno=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),aoo=l(),pd=a("h2"),Nf=a("a"),Vce=a("span"),F(wx.$$.fragment),qno=l(),Xce=a("span"),jno=o("Extending the Auto Classes"),noo=l(),ds=a("p"),Dno=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zce=a("code"),Gno=o("NewModel"),Ono=o(", make sure you have a "),Qce=a("code"),Vno=o("NewModelConfig"),Xno=o(` then you can add those to the auto
classes like this:`),soo=l(),F(Ax.$$.fragment),loo=l(),PI=a("p"),zno=o("You will then be able to use the auto classes like you would usually do!"),ioo=l(),F(qf.$$.fragment),doo=l(),_d=a("h2"),jf=a("a"),Wce=a("span"),F(Lx.$$.fragment),Qno=l(),Uce=a("span"),Wno=o("AutoConfig"),coo=l(),ko=a("div"),F(yx.$$.fragment),Uno=l(),xx=a("p"),Hno=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),BI=a("a"),Jno=o("from_pretrained()"),Yno=o(" class method."),Zno=l(),$x=a("p"),Kno=o("This class cannot be instantiated directly using "),Hce=a("code"),eso=o("__init__()"),oso=o(" (throws an error)."),rso=l(),Ir=a("div"),F(kx.$$.fragment),tso=l(),Jce=a("p"),aso=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nso=l(),bd=a("p"),sso=o("The configuration class to instantiate is selected based on the "),Yce=a("code"),lso=o("model_type"),iso=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zce=a("code"),dso=o("pretrained_model_name_or_path"),cso=o(":"),mso=l(),A=a("ul"),Df=a("li"),Kce=a("strong"),fso=o("albert"),gso=o(" \u2014 "),II=a("a"),hso=o("AlbertConfig"),uso=o(" (ALBERT model)"),pso=l(),Gf=a("li"),eme=a("strong"),_so=o("bart"),bso=o(" \u2014 "),NI=a("a"),vso=o("BartConfig"),Fso=o(" (BART model)"),Tso=l(),Of=a("li"),ome=a("strong"),Mso=o("beit"),Eso=o(" \u2014 "),qI=a("a"),Cso=o("BeitConfig"),wso=o(" (BEiT model)"),Aso=l(),Vf=a("li"),rme=a("strong"),Lso=o("bert"),yso=o(" \u2014 "),jI=a("a"),xso=o("BertConfig"),$so=o(" (BERT model)"),kso=l(),Xf=a("li"),tme=a("strong"),Sso=o("bert-generation"),Rso=o(" \u2014 "),DI=a("a"),Pso=o("BertGenerationConfig"),Bso=o(" (Bert Generation model)"),Iso=l(),zf=a("li"),ame=a("strong"),Nso=o("big_bird"),qso=o(" \u2014 "),GI=a("a"),jso=o("BigBirdConfig"),Dso=o(" (BigBird model)"),Gso=l(),Qf=a("li"),nme=a("strong"),Oso=o("bigbird_pegasus"),Vso=o(" \u2014 "),OI=a("a"),Xso=o("BigBirdPegasusConfig"),zso=o(" (BigBird-Pegasus model)"),Qso=l(),Wf=a("li"),sme=a("strong"),Wso=o("blenderbot"),Uso=o(" \u2014 "),VI=a("a"),Hso=o("BlenderbotConfig"),Jso=o(" (Blenderbot model)"),Yso=l(),Uf=a("li"),lme=a("strong"),Zso=o("blenderbot-small"),Kso=o(" \u2014 "),XI=a("a"),elo=o("BlenderbotSmallConfig"),olo=o(" (BlenderbotSmall model)"),rlo=l(),Hf=a("li"),ime=a("strong"),tlo=o("bloom"),alo=o(" \u2014 "),zI=a("a"),nlo=o("BloomConfig"),slo=o(" (BLOOM model)"),llo=l(),Jf=a("li"),dme=a("strong"),ilo=o("camembert"),dlo=o(" \u2014 "),QI=a("a"),clo=o("CamembertConfig"),mlo=o(" (CamemBERT model)"),flo=l(),Yf=a("li"),cme=a("strong"),glo=o("canine"),hlo=o(" \u2014 "),WI=a("a"),ulo=o("CanineConfig"),plo=o(" (CANINE model)"),_lo=l(),Zf=a("li"),mme=a("strong"),blo=o("clip"),vlo=o(" \u2014 "),UI=a("a"),Flo=o("CLIPConfig"),Tlo=o(" (CLIP model)"),Mlo=l(),Kf=a("li"),fme=a("strong"),Elo=o("codegen"),Clo=o(" \u2014 "),HI=a("a"),wlo=o("CodeGenConfig"),Alo=o(" (CodeGen model)"),Llo=l(),eg=a("li"),gme=a("strong"),ylo=o("conditional_detr"),xlo=o(" \u2014 "),JI=a("a"),$lo=o("ConditionalDetrConfig"),klo=o(" (Conditional DETR model)"),Slo=l(),og=a("li"),hme=a("strong"),Rlo=o("convbert"),Plo=o(" \u2014 "),YI=a("a"),Blo=o("ConvBertConfig"),Ilo=o(" (ConvBERT model)"),Nlo=l(),rg=a("li"),ume=a("strong"),qlo=o("convnext"),jlo=o(" \u2014 "),ZI=a("a"),Dlo=o("ConvNextConfig"),Glo=o(" (ConvNeXT model)"),Olo=l(),tg=a("li"),pme=a("strong"),Vlo=o("ctrl"),Xlo=o(" \u2014 "),KI=a("a"),zlo=o("CTRLConfig"),Qlo=o(" (CTRL model)"),Wlo=l(),ag=a("li"),_me=a("strong"),Ulo=o("cvt"),Hlo=o(" \u2014 "),eN=a("a"),Jlo=o("CvtConfig"),Ylo=o(" (CvT model)"),Zlo=l(),ng=a("li"),bme=a("strong"),Klo=o("data2vec-audio"),eio=o(" \u2014 "),oN=a("a"),oio=o("Data2VecAudioConfig"),rio=o(" (Data2VecAudio model)"),tio=l(),sg=a("li"),vme=a("strong"),aio=o("data2vec-text"),nio=o(" \u2014 "),rN=a("a"),sio=o("Data2VecTextConfig"),lio=o(" (Data2VecText model)"),iio=l(),lg=a("li"),Fme=a("strong"),dio=o("data2vec-vision"),cio=o(" \u2014 "),tN=a("a"),mio=o("Data2VecVisionConfig"),fio=o(" (Data2VecVision model)"),gio=l(),ig=a("li"),Tme=a("strong"),hio=o("deberta"),uio=o(" \u2014 "),aN=a("a"),pio=o("DebertaConfig"),_io=o(" (DeBERTa model)"),bio=l(),dg=a("li"),Mme=a("strong"),vio=o("deberta-v2"),Fio=o(" \u2014 "),nN=a("a"),Tio=o("DebertaV2Config"),Mio=o(" (DeBERTa-v2 model)"),Eio=l(),cg=a("li"),Eme=a("strong"),Cio=o("decision_transformer"),wio=o(" \u2014 "),sN=a("a"),Aio=o("DecisionTransformerConfig"),Lio=o(" (Decision Transformer model)"),yio=l(),mg=a("li"),Cme=a("strong"),xio=o("deformable_detr"),$io=o(" \u2014 "),lN=a("a"),kio=o("DeformableDetrConfig"),Sio=o(" (Deformable DETR model)"),Rio=l(),fg=a("li"),wme=a("strong"),Pio=o("deit"),Bio=o(" \u2014 "),iN=a("a"),Iio=o("DeiTConfig"),Nio=o(" (DeiT model)"),qio=l(),gg=a("li"),Ame=a("strong"),jio=o("detr"),Dio=o(" \u2014 "),dN=a("a"),Gio=o("DetrConfig"),Oio=o(" (DETR model)"),Vio=l(),hg=a("li"),Lme=a("strong"),Xio=o("distilbert"),zio=o(" \u2014 "),cN=a("a"),Qio=o("DistilBertConfig"),Wio=o(" (DistilBERT model)"),Uio=l(),ug=a("li"),yme=a("strong"),Hio=o("donut-swin"),Jio=o(" \u2014 "),mN=a("a"),Yio=o("DonutSwinConfig"),Zio=o(" (DonutSwin model)"),Kio=l(),pg=a("li"),xme=a("strong"),edo=o("dpr"),odo=o(" \u2014 "),fN=a("a"),rdo=o("DPRConfig"),tdo=o(" (DPR model)"),ado=l(),_g=a("li"),$me=a("strong"),ndo=o("dpt"),sdo=o(" \u2014 "),gN=a("a"),ldo=o("DPTConfig"),ido=o(" (DPT model)"),ddo=l(),bg=a("li"),kme=a("strong"),cdo=o("electra"),mdo=o(" \u2014 "),hN=a("a"),fdo=o("ElectraConfig"),gdo=o(" (ELECTRA model)"),hdo=l(),vg=a("li"),Sme=a("strong"),udo=o("encoder-decoder"),pdo=o(" \u2014 "),uN=a("a"),_do=o("EncoderDecoderConfig"),bdo=o(" (Encoder decoder model)"),vdo=l(),Fg=a("li"),Rme=a("strong"),Fdo=o("ernie"),Tdo=o(" \u2014 "),pN=a("a"),Mdo=o("ErnieConfig"),Edo=o(" (ERNIE model)"),Cdo=l(),Tg=a("li"),Pme=a("strong"),wdo=o("esm"),Ado=o(" \u2014 "),_N=a("a"),Ldo=o("EsmConfig"),ydo=o(" (ESM model)"),xdo=l(),Mg=a("li"),Bme=a("strong"),$do=o("flaubert"),kdo=o(" \u2014 "),bN=a("a"),Sdo=o("FlaubertConfig"),Rdo=o(" (FlauBERT model)"),Pdo=l(),Eg=a("li"),Ime=a("strong"),Bdo=o("flava"),Ido=o(" \u2014 "),vN=a("a"),Ndo=o("FlavaConfig"),qdo=o(" (FLAVA model)"),jdo=l(),Cg=a("li"),Nme=a("strong"),Ddo=o("fnet"),Gdo=o(" \u2014 "),FN=a("a"),Odo=o("FNetConfig"),Vdo=o(" (FNet model)"),Xdo=l(),wg=a("li"),qme=a("strong"),zdo=o("fsmt"),Qdo=o(" \u2014 "),TN=a("a"),Wdo=o("FSMTConfig"),Udo=o(" (FairSeq Machine-Translation model)"),Hdo=l(),Ag=a("li"),jme=a("strong"),Jdo=o("funnel"),Ydo=o(" \u2014 "),MN=a("a"),Zdo=o("FunnelConfig"),Kdo=o(" (Funnel Transformer model)"),eco=l(),Lg=a("li"),Dme=a("strong"),oco=o("glpn"),rco=o(" \u2014 "),EN=a("a"),tco=o("GLPNConfig"),aco=o(" (GLPN model)"),nco=l(),yg=a("li"),Gme=a("strong"),sco=o("gpt2"),lco=o(" \u2014 "),CN=a("a"),ico=o("GPT2Config"),dco=o(" (OpenAI GPT-2 model)"),cco=l(),xg=a("li"),Ome=a("strong"),mco=o("gpt_neo"),fco=o(" \u2014 "),wN=a("a"),gco=o("GPTNeoConfig"),hco=o(" (GPT Neo model)"),uco=l(),$g=a("li"),Vme=a("strong"),pco=o("gpt_neox"),_co=o(" \u2014 "),AN=a("a"),bco=o("GPTNeoXConfig"),vco=o(" (GPT NeoX model)"),Fco=l(),kg=a("li"),Xme=a("strong"),Tco=o("gpt_neox_japanese"),Mco=o(" \u2014 "),LN=a("a"),Eco=o("GPTNeoXJapaneseConfig"),Cco=o(" (GPT NeoX Japanese model)"),wco=l(),Sg=a("li"),zme=a("strong"),Aco=o("gptj"),Lco=o(" \u2014 "),yN=a("a"),yco=o("GPTJConfig"),xco=o(" (GPT-J model)"),$co=l(),Rg=a("li"),Qme=a("strong"),kco=o("groupvit"),Sco=o(" \u2014 "),xN=a("a"),Rco=o("GroupViTConfig"),Pco=o(" (GroupViT model)"),Bco=l(),Pg=a("li"),Wme=a("strong"),Ico=o("hubert"),Nco=o(" \u2014 "),$N=a("a"),qco=o("HubertConfig"),jco=o(" (Hubert model)"),Dco=l(),Bg=a("li"),Ume=a("strong"),Gco=o("ibert"),Oco=o(" \u2014 "),kN=a("a"),Vco=o("IBertConfig"),Xco=o(" (I-BERT model)"),zco=l(),Ig=a("li"),Hme=a("strong"),Qco=o("imagegpt"),Wco=o(" \u2014 "),SN=a("a"),Uco=o("ImageGPTConfig"),Hco=o(" (ImageGPT model)"),Jco=l(),Ng=a("li"),Jme=a("strong"),Yco=o("layoutlm"),Zco=o(" \u2014 "),RN=a("a"),Kco=o("LayoutLMConfig"),emo=o(" (LayoutLM model)"),omo=l(),qg=a("li"),Yme=a("strong"),rmo=o("layoutlmv2"),tmo=o(" \u2014 "),PN=a("a"),amo=o("LayoutLMv2Config"),nmo=o(" (LayoutLMv2 model)"),smo=l(),jg=a("li"),Zme=a("strong"),lmo=o("layoutlmv3"),imo=o(" \u2014 "),BN=a("a"),dmo=o("LayoutLMv3Config"),cmo=o(" (LayoutLMv3 model)"),mmo=l(),Dg=a("li"),Kme=a("strong"),fmo=o("led"),gmo=o(" \u2014 "),IN=a("a"),hmo=o("LEDConfig"),umo=o(" (LED model)"),pmo=l(),Gg=a("li"),efe=a("strong"),_mo=o("levit"),bmo=o(" \u2014 "),NN=a("a"),vmo=o("LevitConfig"),Fmo=o(" (LeViT model)"),Tmo=l(),Og=a("li"),ofe=a("strong"),Mmo=o("longformer"),Emo=o(" \u2014 "),qN=a("a"),Cmo=o("LongformerConfig"),wmo=o(" (Longformer model)"),Amo=l(),Vg=a("li"),rfe=a("strong"),Lmo=o("longt5"),ymo=o(" \u2014 "),jN=a("a"),xmo=o("LongT5Config"),$mo=o(" (LongT5 model)"),kmo=l(),Xg=a("li"),tfe=a("strong"),Smo=o("luke"),Rmo=o(" \u2014 "),DN=a("a"),Pmo=o("LukeConfig"),Bmo=o(" (LUKE model)"),Imo=l(),zg=a("li"),afe=a("strong"),Nmo=o("lxmert"),qmo=o(" \u2014 "),GN=a("a"),jmo=o("LxmertConfig"),Dmo=o(" (LXMERT model)"),Gmo=l(),Qg=a("li"),nfe=a("strong"),Omo=o("m2m_100"),Vmo=o(" \u2014 "),ON=a("a"),Xmo=o("M2M100Config"),zmo=o(" (M2M100 model)"),Qmo=l(),Wg=a("li"),sfe=a("strong"),Wmo=o("marian"),Umo=o(" \u2014 "),VN=a("a"),Hmo=o("MarianConfig"),Jmo=o(" (Marian model)"),Ymo=l(),Ug=a("li"),lfe=a("strong"),Zmo=o("markuplm"),Kmo=o(" \u2014 "),XN=a("a"),efo=o("MarkupLMConfig"),ofo=o(" (MarkupLM model)"),rfo=l(),Hg=a("li"),ife=a("strong"),tfo=o("maskformer"),afo=o(" \u2014 "),zN=a("a"),nfo=o("MaskFormerConfig"),sfo=o(" (MaskFormer model)"),lfo=l(),Jg=a("li"),dfe=a("strong"),ifo=o("mbart"),dfo=o(" \u2014 "),QN=a("a"),cfo=o("MBartConfig"),mfo=o(" (mBART model)"),ffo=l(),Yg=a("li"),cfe=a("strong"),gfo=o("mctct"),hfo=o(" \u2014 "),WN=a("a"),ufo=o("MCTCTConfig"),pfo=o(" (M-CTC-T model)"),_fo=l(),Zg=a("li"),mfe=a("strong"),bfo=o("megatron-bert"),vfo=o(" \u2014 "),UN=a("a"),Ffo=o("MegatronBertConfig"),Tfo=o(" (Megatron-BERT model)"),Mfo=l(),Kg=a("li"),ffe=a("strong"),Efo=o("mobilebert"),Cfo=o(" \u2014 "),HN=a("a"),wfo=o("MobileBertConfig"),Afo=o(" (MobileBERT model)"),Lfo=l(),eh=a("li"),gfe=a("strong"),yfo=o("mobilevit"),xfo=o(" \u2014 "),JN=a("a"),$fo=o("MobileViTConfig"),kfo=o(" (MobileViT model)"),Sfo=l(),oh=a("li"),hfe=a("strong"),Rfo=o("mpnet"),Pfo=o(" \u2014 "),YN=a("a"),Bfo=o("MPNetConfig"),Ifo=o(" (MPNet model)"),Nfo=l(),rh=a("li"),ufe=a("strong"),qfo=o("mt5"),jfo=o(" \u2014 "),ZN=a("a"),Dfo=o("MT5Config"),Gfo=o(" (MT5 model)"),Ofo=l(),th=a("li"),pfe=a("strong"),Vfo=o("mvp"),Xfo=o(" \u2014 "),KN=a("a"),zfo=o("MvpConfig"),Qfo=o(" (MVP model)"),Wfo=l(),ah=a("li"),_fe=a("strong"),Ufo=o("nezha"),Hfo=o(" \u2014 "),eq=a("a"),Jfo=o("NezhaConfig"),Yfo=o(" (Nezha model)"),Zfo=l(),nh=a("li"),bfe=a("strong"),Kfo=o("nystromformer"),ego=o(" \u2014 "),oq=a("a"),ogo=o("NystromformerConfig"),rgo=o(" (Nystr\xF6mformer model)"),tgo=l(),sh=a("li"),vfe=a("strong"),ago=o("openai-gpt"),ngo=o(" \u2014 "),rq=a("a"),sgo=o("OpenAIGPTConfig"),lgo=o(" (OpenAI GPT model)"),igo=l(),lh=a("li"),Ffe=a("strong"),dgo=o("opt"),cgo=o(" \u2014 "),tq=a("a"),mgo=o("OPTConfig"),fgo=o(" (OPT model)"),ggo=l(),ih=a("li"),Tfe=a("strong"),hgo=o("owlvit"),ugo=o(" \u2014 "),aq=a("a"),pgo=o("OwlViTConfig"),_go=o(" (OWL-ViT model)"),bgo=l(),dh=a("li"),Mfe=a("strong"),vgo=o("pegasus"),Fgo=o(" \u2014 "),nq=a("a"),Tgo=o("PegasusConfig"),Mgo=o(" (Pegasus model)"),Ego=l(),ch=a("li"),Efe=a("strong"),Cgo=o("pegasus_x"),wgo=o(" \u2014 "),sq=a("a"),Ago=o("PegasusXConfig"),Lgo=o(" (PEGASUS-X model)"),ygo=l(),mh=a("li"),Cfe=a("strong"),xgo=o("perceiver"),$go=o(" \u2014 "),lq=a("a"),kgo=o("PerceiverConfig"),Sgo=o(" (Perceiver model)"),Rgo=l(),fh=a("li"),wfe=a("strong"),Pgo=o("plbart"),Bgo=o(" \u2014 "),iq=a("a"),Igo=o("PLBartConfig"),Ngo=o(" (PLBart model)"),qgo=l(),gh=a("li"),Afe=a("strong"),jgo=o("poolformer"),Dgo=o(" \u2014 "),dq=a("a"),Ggo=o("PoolFormerConfig"),Ogo=o(" (PoolFormer model)"),Vgo=l(),hh=a("li"),Lfe=a("strong"),Xgo=o("prophetnet"),zgo=o(" \u2014 "),cq=a("a"),Qgo=o("ProphetNetConfig"),Wgo=o(" (ProphetNet model)"),Ugo=l(),uh=a("li"),yfe=a("strong"),Hgo=o("qdqbert"),Jgo=o(" \u2014 "),mq=a("a"),Ygo=o("QDQBertConfig"),Zgo=o(" (QDQBert model)"),Kgo=l(),ph=a("li"),xfe=a("strong"),eho=o("rag"),oho=o(" \u2014 "),fq=a("a"),rho=o("RagConfig"),tho=o(" (RAG model)"),aho=l(),_h=a("li"),$fe=a("strong"),nho=o("realm"),sho=o(" \u2014 "),gq=a("a"),lho=o("RealmConfig"),iho=o(" (REALM model)"),dho=l(),bh=a("li"),kfe=a("strong"),cho=o("reformer"),mho=o(" \u2014 "),hq=a("a"),fho=o("ReformerConfig"),gho=o(" (Reformer model)"),hho=l(),vh=a("li"),Sfe=a("strong"),uho=o("regnet"),pho=o(" \u2014 "),uq=a("a"),_ho=o("RegNetConfig"),bho=o(" (RegNet model)"),vho=l(),Fh=a("li"),Rfe=a("strong"),Fho=o("rembert"),Tho=o(" \u2014 "),pq=a("a"),Mho=o("RemBertConfig"),Eho=o(" (RemBERT model)"),Cho=l(),Th=a("li"),Pfe=a("strong"),who=o("resnet"),Aho=o(" \u2014 "),_q=a("a"),Lho=o("ResNetConfig"),yho=o(" (ResNet model)"),xho=l(),Mh=a("li"),Bfe=a("strong"),$ho=o("retribert"),kho=o(" \u2014 "),bq=a("a"),Sho=o("RetriBertConfig"),Rho=o(" (RetriBERT model)"),Pho=l(),Eh=a("li"),Ife=a("strong"),Bho=o("roberta"),Iho=o(" \u2014 "),vq=a("a"),Nho=o("RobertaConfig"),qho=o(" (RoBERTa model)"),jho=l(),Ch=a("li"),Nfe=a("strong"),Dho=o("roformer"),Gho=o(" \u2014 "),Fq=a("a"),Oho=o("RoFormerConfig"),Vho=o(" (RoFormer model)"),Xho=l(),wh=a("li"),qfe=a("strong"),zho=o("segformer"),Qho=o(" \u2014 "),Tq=a("a"),Who=o("SegformerConfig"),Uho=o(" (SegFormer model)"),Hho=l(),Ah=a("li"),jfe=a("strong"),Jho=o("sew"),Yho=o(" \u2014 "),Mq=a("a"),Zho=o("SEWConfig"),Kho=o(" (SEW model)"),euo=l(),Lh=a("li"),Dfe=a("strong"),ouo=o("sew-d"),ruo=o(" \u2014 "),Eq=a("a"),tuo=o("SEWDConfig"),auo=o(" (SEW-D model)"),nuo=l(),yh=a("li"),Gfe=a("strong"),suo=o("speech-encoder-decoder"),luo=o(" \u2014 "),Cq=a("a"),iuo=o("SpeechEncoderDecoderConfig"),duo=o(" (Speech Encoder decoder model)"),cuo=l(),xh=a("li"),Ofe=a("strong"),muo=o("speech_to_text"),fuo=o(" \u2014 "),wq=a("a"),guo=o("Speech2TextConfig"),huo=o(" (Speech2Text model)"),uuo=l(),$h=a("li"),Vfe=a("strong"),puo=o("speech_to_text_2"),_uo=o(" \u2014 "),Aq=a("a"),buo=o("Speech2Text2Config"),vuo=o(" (Speech2Text2 model)"),Fuo=l(),kh=a("li"),Xfe=a("strong"),Tuo=o("splinter"),Muo=o(" \u2014 "),Lq=a("a"),Euo=o("SplinterConfig"),Cuo=o(" (Splinter model)"),wuo=l(),Sh=a("li"),zfe=a("strong"),Auo=o("squeezebert"),Luo=o(" \u2014 "),yq=a("a"),yuo=o("SqueezeBertConfig"),xuo=o(" (SqueezeBERT model)"),$uo=l(),Rh=a("li"),Qfe=a("strong"),kuo=o("swin"),Suo=o(" \u2014 "),xq=a("a"),Ruo=o("SwinConfig"),Puo=o(" (Swin Transformer model)"),Buo=l(),Ph=a("li"),Wfe=a("strong"),Iuo=o("swinv2"),Nuo=o(" \u2014 "),$q=a("a"),quo=o("Swinv2Config"),juo=o(" (Swin Transformer V2 model)"),Duo=l(),Bh=a("li"),Ufe=a("strong"),Guo=o("t5"),Ouo=o(" \u2014 "),kq=a("a"),Vuo=o("T5Config"),Xuo=o(" (T5 model)"),zuo=l(),Ih=a("li"),Hfe=a("strong"),Quo=o("tapas"),Wuo=o(" \u2014 "),Sq=a("a"),Uuo=o("TapasConfig"),Huo=o(" (TAPAS model)"),Juo=l(),Nh=a("li"),Jfe=a("strong"),Yuo=o("time_series_transformer"),Zuo=o(" \u2014 "),Rq=a("a"),Kuo=o("TimeSeriesTransformerConfig"),epo=o(" (Time Series Transformer model)"),opo=l(),qh=a("li"),Yfe=a("strong"),rpo=o("trajectory_transformer"),tpo=o(" \u2014 "),Pq=a("a"),apo=o("TrajectoryTransformerConfig"),npo=o(" (Trajectory Transformer model)"),spo=l(),jh=a("li"),Zfe=a("strong"),lpo=o("transfo-xl"),ipo=o(" \u2014 "),Bq=a("a"),dpo=o("TransfoXLConfig"),cpo=o(" (Transformer-XL model)"),mpo=l(),Dh=a("li"),Kfe=a("strong"),fpo=o("trocr"),gpo=o(" \u2014 "),Iq=a("a"),hpo=o("TrOCRConfig"),upo=o(" (TrOCR model)"),ppo=l(),Gh=a("li"),ege=a("strong"),_po=o("unispeech"),bpo=o(" \u2014 "),Nq=a("a"),vpo=o("UniSpeechConfig"),Fpo=o(" (UniSpeech model)"),Tpo=l(),Oh=a("li"),oge=a("strong"),Mpo=o("unispeech-sat"),Epo=o(" \u2014 "),qq=a("a"),Cpo=o("UniSpeechSatConfig"),wpo=o(" (UniSpeechSat model)"),Apo=l(),Vh=a("li"),rge=a("strong"),Lpo=o("van"),ypo=o(" \u2014 "),jq=a("a"),xpo=o("VanConfig"),$po=o(" (VAN model)"),kpo=l(),Xh=a("li"),tge=a("strong"),Spo=o("videomae"),Rpo=o(" \u2014 "),Dq=a("a"),Ppo=o("VideoMAEConfig"),Bpo=o(" (VideoMAE model)"),Ipo=l(),zh=a("li"),age=a("strong"),Npo=o("vilt"),qpo=o(" \u2014 "),Gq=a("a"),jpo=o("ViltConfig"),Dpo=o(" (ViLT model)"),Gpo=l(),Qh=a("li"),nge=a("strong"),Opo=o("vision-encoder-decoder"),Vpo=o(" \u2014 "),Oq=a("a"),Xpo=o("VisionEncoderDecoderConfig"),zpo=o(" (Vision Encoder decoder model)"),Qpo=l(),Wh=a("li"),sge=a("strong"),Wpo=o("vision-text-dual-encoder"),Upo=o(" \u2014 "),Vq=a("a"),Hpo=o("VisionTextDualEncoderConfig"),Jpo=o(" (VisionTextDualEncoder model)"),Ypo=l(),Uh=a("li"),lge=a("strong"),Zpo=o("visual_bert"),Kpo=o(" \u2014 "),Xq=a("a"),e_o=o("VisualBertConfig"),o_o=o(" (VisualBERT model)"),r_o=l(),Hh=a("li"),ige=a("strong"),t_o=o("vit"),a_o=o(" \u2014 "),zq=a("a"),n_o=o("ViTConfig"),s_o=o(" (ViT model)"),l_o=l(),Jh=a("li"),dge=a("strong"),i_o=o("vit_mae"),d_o=o(" \u2014 "),Qq=a("a"),c_o=o("ViTMAEConfig"),m_o=o(" (ViTMAE model)"),f_o=l(),Yh=a("li"),cge=a("strong"),g_o=o("vit_msn"),h_o=o(" \u2014 "),Wq=a("a"),u_o=o("ViTMSNConfig"),p_o=o(" (ViTMSN model)"),__o=l(),Zh=a("li"),mge=a("strong"),b_o=o("wav2vec2"),v_o=o(" \u2014 "),Uq=a("a"),F_o=o("Wav2Vec2Config"),T_o=o(" (Wav2Vec2 model)"),M_o=l(),Kh=a("li"),fge=a("strong"),E_o=o("wav2vec2-conformer"),C_o=o(" \u2014 "),Hq=a("a"),w_o=o("Wav2Vec2ConformerConfig"),A_o=o(" (Wav2Vec2-Conformer model)"),L_o=l(),eu=a("li"),gge=a("strong"),y_o=o("wavlm"),x_o=o(" \u2014 "),Jq=a("a"),$_o=o("WavLMConfig"),k_o=o(" (WavLM model)"),S_o=l(),ou=a("li"),hge=a("strong"),R_o=o("whisper"),P_o=o(" \u2014 "),Yq=a("a"),B_o=o("WhisperConfig"),I_o=o(" (Whisper model)"),N_o=l(),ru=a("li"),uge=a("strong"),q_o=o("xclip"),j_o=o(" \u2014 "),Zq=a("a"),D_o=o("XCLIPConfig"),G_o=o(" (X-CLIP model)"),O_o=l(),tu=a("li"),pge=a("strong"),V_o=o("xglm"),X_o=o(" \u2014 "),Kq=a("a"),z_o=o("XGLMConfig"),Q_o=o(" (XGLM model)"),W_o=l(),au=a("li"),_ge=a("strong"),U_o=o("xlm"),H_o=o(" \u2014 "),ej=a("a"),J_o=o("XLMConfig"),Y_o=o(" (XLM model)"),Z_o=l(),nu=a("li"),bge=a("strong"),K_o=o("xlm-prophetnet"),e1o=o(" \u2014 "),oj=a("a"),o1o=o("XLMProphetNetConfig"),r1o=o(" (XLM-ProphetNet model)"),t1o=l(),su=a("li"),vge=a("strong"),a1o=o("xlm-roberta"),n1o=o(" \u2014 "),rj=a("a"),s1o=o("XLMRobertaConfig"),l1o=o(" (XLM-RoBERTa model)"),i1o=l(),lu=a("li"),Fge=a("strong"),d1o=o("xlm-roberta-xl"),c1o=o(" \u2014 "),tj=a("a"),m1o=o("XLMRobertaXLConfig"),f1o=o(" (XLM-RoBERTa-XL model)"),g1o=l(),iu=a("li"),Tge=a("strong"),h1o=o("xlnet"),u1o=o(" \u2014 "),aj=a("a"),p1o=o("XLNetConfig"),_1o=o(" (XLNet model)"),b1o=l(),du=a("li"),Mge=a("strong"),v1o=o("yolos"),F1o=o(" \u2014 "),nj=a("a"),T1o=o("YolosConfig"),M1o=o(" (YOLOS model)"),E1o=l(),cu=a("li"),Ege=a("strong"),C1o=o("yoso"),w1o=o(" \u2014 "),sj=a("a"),A1o=o("YosoConfig"),L1o=o(" (YOSO model)"),y1o=l(),F(mu.$$.fragment),x1o=l(),fu=a("div"),F(Sx.$$.fragment),$1o=l(),Cge=a("p"),k1o=o("Register a new configuration for this class."),moo=l(),vd=a("h2"),gu=a("a"),wge=a("span"),F(Rx.$$.fragment),S1o=l(),Age=a("span"),R1o=o("AutoTokenizer"),foo=l(),So=a("div"),F(Px.$$.fragment),P1o=l(),Bx=a("p"),B1o=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lj=a("a"),I1o=o("AutoTokenizer.from_pretrained()"),N1o=o(" class method."),q1o=l(),Ix=a("p"),j1o=o("This class cannot be instantiated directly using "),Lge=a("code"),D1o=o("__init__()"),G1o=o(" (throws an error)."),O1o=l(),Nr=a("div"),F(Nx.$$.fragment),V1o=l(),yge=a("p"),X1o=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),z1o=l(),Za=a("p"),Q1o=o("The tokenizer class to instantiate is selected based on the "),xge=a("code"),W1o=o("model_type"),U1o=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),H1o=o("pretrained_model_name_or_path"),J1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),Y1o=o("pretrained_model_name_or_path"),Z1o=o(":"),K1o=l(),k=a("ul"),cs=a("li"),Sge=a("strong"),ebo=o("albert"),obo=o(" \u2014 "),ij=a("a"),rbo=o("AlbertTokenizer"),tbo=o(" or "),dj=a("a"),abo=o("AlbertTokenizerFast"),nbo=o(" (ALBERT model)"),sbo=l(),ms=a("li"),Rge=a("strong"),lbo=o("bart"),ibo=o(" \u2014 "),cj=a("a"),dbo=o("BartTokenizer"),cbo=o(" or "),mj=a("a"),mbo=o("BartTokenizerFast"),fbo=o(" (BART model)"),gbo=l(),fs=a("li"),Pge=a("strong"),hbo=o("barthez"),ubo=o(" \u2014 "),fj=a("a"),pbo=o("BarthezTokenizer"),_bo=o(" or "),gj=a("a"),bbo=o("BarthezTokenizerFast"),vbo=o(" (BARThez model)"),Fbo=l(),hu=a("li"),Bge=a("strong"),Tbo=o("bartpho"),Mbo=o(" \u2014 "),hj=a("a"),Ebo=o("BartphoTokenizer"),Cbo=o(" (BARTpho model)"),wbo=l(),gs=a("li"),Ige=a("strong"),Abo=o("bert"),Lbo=o(" \u2014 "),uj=a("a"),ybo=o("BertTokenizer"),xbo=o(" or "),pj=a("a"),$bo=o("BertTokenizerFast"),kbo=o(" (BERT model)"),Sbo=l(),uu=a("li"),Nge=a("strong"),Rbo=o("bert-generation"),Pbo=o(" \u2014 "),_j=a("a"),Bbo=o("BertGenerationTokenizer"),Ibo=o(" (Bert Generation model)"),Nbo=l(),pu=a("li"),qge=a("strong"),qbo=o("bert-japanese"),jbo=o(" \u2014 "),bj=a("a"),Dbo=o("BertJapaneseTokenizer"),Gbo=o(" (BertJapanese model)"),Obo=l(),_u=a("li"),jge=a("strong"),Vbo=o("bertweet"),Xbo=o(" \u2014 "),vj=a("a"),zbo=o("BertweetTokenizer"),Qbo=o(" (BERTweet model)"),Wbo=l(),hs=a("li"),Dge=a("strong"),Ubo=o("big_bird"),Hbo=o(" \u2014 "),Fj=a("a"),Jbo=o("BigBirdTokenizer"),Ybo=o(" or "),Tj=a("a"),Zbo=o("BigBirdTokenizerFast"),Kbo=o(" (BigBird model)"),e2o=l(),us=a("li"),Gge=a("strong"),o2o=o("bigbird_pegasus"),r2o=o(" \u2014 "),Mj=a("a"),t2o=o("PegasusTokenizer"),a2o=o(" or "),Ej=a("a"),n2o=o("PegasusTokenizerFast"),s2o=o(" (BigBird-Pegasus model)"),l2o=l(),ps=a("li"),Oge=a("strong"),i2o=o("blenderbot"),d2o=o(" \u2014 "),Cj=a("a"),c2o=o("BlenderbotTokenizer"),m2o=o(" or "),wj=a("a"),f2o=o("BlenderbotTokenizerFast"),g2o=o(" (Blenderbot model)"),h2o=l(),bu=a("li"),Vge=a("strong"),u2o=o("blenderbot-small"),p2o=o(" \u2014 "),Aj=a("a"),_2o=o("BlenderbotSmallTokenizer"),b2o=o(" (BlenderbotSmall model)"),v2o=l(),vu=a("li"),Xge=a("strong"),F2o=o("bloom"),T2o=o(" \u2014 "),Lj=a("a"),M2o=o("BloomTokenizerFast"),E2o=o(" (BLOOM model)"),C2o=l(),Fu=a("li"),zge=a("strong"),w2o=o("byt5"),A2o=o(" \u2014 "),yj=a("a"),L2o=o("ByT5Tokenizer"),y2o=o(" (ByT5 model)"),x2o=l(),_s=a("li"),Qge=a("strong"),$2o=o("camembert"),k2o=o(" \u2014 "),xj=a("a"),S2o=o("CamembertTokenizer"),R2o=o(" or "),$j=a("a"),P2o=o("CamembertTokenizerFast"),B2o=o(" (CamemBERT model)"),I2o=l(),Tu=a("li"),Wge=a("strong"),N2o=o("canine"),q2o=o(" \u2014 "),kj=a("a"),j2o=o("CanineTokenizer"),D2o=o(" (CANINE model)"),G2o=l(),bs=a("li"),Uge=a("strong"),O2o=o("clip"),V2o=o(" \u2014 "),Sj=a("a"),X2o=o("CLIPTokenizer"),z2o=o(" or "),Rj=a("a"),Q2o=o("CLIPTokenizerFast"),W2o=o(" (CLIP model)"),U2o=l(),vs=a("li"),Hge=a("strong"),H2o=o("codegen"),J2o=o(" \u2014 "),Pj=a("a"),Y2o=o("CodeGenTokenizer"),Z2o=o(" or "),Bj=a("a"),K2o=o("CodeGenTokenizerFast"),evo=o(" (CodeGen model)"),ovo=l(),Fs=a("li"),Jge=a("strong"),rvo=o("convbert"),tvo=o(" \u2014 "),Ij=a("a"),avo=o("ConvBertTokenizer"),nvo=o(" or "),Nj=a("a"),svo=o("ConvBertTokenizerFast"),lvo=o(" (ConvBERT model)"),ivo=l(),Ts=a("li"),Yge=a("strong"),dvo=o("cpm"),cvo=o(" \u2014 "),qj=a("a"),mvo=o("CpmTokenizer"),fvo=o(" or "),jj=a("a"),gvo=o("CpmTokenizerFast"),hvo=o(" (CPM model)"),uvo=l(),Mu=a("li"),Zge=a("strong"),pvo=o("ctrl"),_vo=o(" \u2014 "),Dj=a("a"),bvo=o("CTRLTokenizer"),vvo=o(" (CTRL model)"),Fvo=l(),Ms=a("li"),Kge=a("strong"),Tvo=o("data2vec-text"),Mvo=o(" \u2014 "),Gj=a("a"),Evo=o("RobertaTokenizer"),Cvo=o(" or "),Oj=a("a"),wvo=o("RobertaTokenizerFast"),Avo=o(" (Data2VecText model)"),Lvo=l(),Es=a("li"),ehe=a("strong"),yvo=o("deberta"),xvo=o(" \u2014 "),Vj=a("a"),$vo=o("DebertaTokenizer"),kvo=o(" or "),Xj=a("a"),Svo=o("DebertaTokenizerFast"),Rvo=o(" (DeBERTa model)"),Pvo=l(),Cs=a("li"),ohe=a("strong"),Bvo=o("deberta-v2"),Ivo=o(" \u2014 "),zj=a("a"),Nvo=o("DebertaV2Tokenizer"),qvo=o(" or "),Qj=a("a"),jvo=o("DebertaV2TokenizerFast"),Dvo=o(" (DeBERTa-v2 model)"),Gvo=l(),ws=a("li"),rhe=a("strong"),Ovo=o("distilbert"),Vvo=o(" \u2014 "),Wj=a("a"),Xvo=o("DistilBertTokenizer"),zvo=o(" or "),Uj=a("a"),Qvo=o("DistilBertTokenizerFast"),Wvo=o(" (DistilBERT model)"),Uvo=l(),As=a("li"),the=a("strong"),Hvo=o("dpr"),Jvo=o(" \u2014 "),Hj=a("a"),Yvo=o("DPRQuestionEncoderTokenizer"),Zvo=o(" or "),Jj=a("a"),Kvo=o("DPRQuestionEncoderTokenizerFast"),eFo=o(" (DPR model)"),oFo=l(),Ls=a("li"),ahe=a("strong"),rFo=o("electra"),tFo=o(" \u2014 "),Yj=a("a"),aFo=o("ElectraTokenizer"),nFo=o(" or "),Zj=a("a"),sFo=o("ElectraTokenizerFast"),lFo=o(" (ELECTRA model)"),iFo=l(),ys=a("li"),nhe=a("strong"),dFo=o("ernie"),cFo=o(" \u2014 "),Kj=a("a"),mFo=o("BertTokenizer"),fFo=o(" or "),eD=a("a"),gFo=o("BertTokenizerFast"),hFo=o(" (ERNIE model)"),uFo=l(),Eu=a("li"),she=a("strong"),pFo=o("flaubert"),_Fo=o(" \u2014 "),oD=a("a"),bFo=o("FlaubertTokenizer"),vFo=o(" (FlauBERT model)"),FFo=l(),xs=a("li"),lhe=a("strong"),TFo=o("fnet"),MFo=o(" \u2014 "),rD=a("a"),EFo=o("FNetTokenizer"),CFo=o(" or "),tD=a("a"),wFo=o("FNetTokenizerFast"),AFo=o(" (FNet model)"),LFo=l(),Cu=a("li"),ihe=a("strong"),yFo=o("fsmt"),xFo=o(" \u2014 "),aD=a("a"),$Fo=o("FSMTTokenizer"),kFo=o(" (FairSeq Machine-Translation model)"),SFo=l(),$s=a("li"),dhe=a("strong"),RFo=o("funnel"),PFo=o(" \u2014 "),nD=a("a"),BFo=o("FunnelTokenizer"),IFo=o(" or "),sD=a("a"),NFo=o("FunnelTokenizerFast"),qFo=o(" (Funnel Transformer model)"),jFo=l(),ks=a("li"),che=a("strong"),DFo=o("gpt2"),GFo=o(" \u2014 "),lD=a("a"),OFo=o("GPT2Tokenizer"),VFo=o(" or "),iD=a("a"),XFo=o("GPT2TokenizerFast"),zFo=o(" (OpenAI GPT-2 model)"),QFo=l(),Ss=a("li"),mhe=a("strong"),WFo=o("gpt_neo"),UFo=o(" \u2014 "),dD=a("a"),HFo=o("GPT2Tokenizer"),JFo=o(" or "),cD=a("a"),YFo=o("GPT2TokenizerFast"),ZFo=o(" (GPT Neo model)"),KFo=l(),wu=a("li"),fhe=a("strong"),eTo=o("gpt_neox"),oTo=o(" \u2014 "),mD=a("a"),rTo=o("GPTNeoXTokenizerFast"),tTo=o(" (GPT NeoX model)"),aTo=l(),Au=a("li"),ghe=a("strong"),nTo=o("gpt_neox_japanese"),sTo=o(" \u2014 "),fD=a("a"),lTo=o("GPTNeoXJapaneseTokenizer"),iTo=o(" (GPT NeoX Japanese model)"),dTo=l(),Rs=a("li"),hhe=a("strong"),cTo=o("gptj"),mTo=o(" \u2014 "),gD=a("a"),fTo=o("GPT2Tokenizer"),gTo=o(" or "),hD=a("a"),hTo=o("GPT2TokenizerFast"),uTo=o(" (GPT-J model)"),pTo=l(),Ps=a("li"),uhe=a("strong"),_To=o("groupvit"),bTo=o(" \u2014 "),uD=a("a"),vTo=o("CLIPTokenizer"),FTo=o(" or "),pD=a("a"),TTo=o("CLIPTokenizerFast"),MTo=o(" (GroupViT model)"),ETo=l(),Bs=a("li"),phe=a("strong"),CTo=o("herbert"),wTo=o(" \u2014 "),_D=a("a"),ATo=o("HerbertTokenizer"),LTo=o(" or "),bD=a("a"),yTo=o("HerbertTokenizerFast"),xTo=o(" (HerBERT model)"),$To=l(),Lu=a("li"),_he=a("strong"),kTo=o("hubert"),STo=o(" \u2014 "),vD=a("a"),RTo=o("Wav2Vec2CTCTokenizer"),PTo=o(" (Hubert model)"),BTo=l(),Is=a("li"),bhe=a("strong"),ITo=o("ibert"),NTo=o(" \u2014 "),FD=a("a"),qTo=o("RobertaTokenizer"),jTo=o(" or "),TD=a("a"),DTo=o("RobertaTokenizerFast"),GTo=o(" (I-BERT model)"),OTo=l(),Ns=a("li"),vhe=a("strong"),VTo=o("layoutlm"),XTo=o(" \u2014 "),MD=a("a"),zTo=o("LayoutLMTokenizer"),QTo=o(" or "),ED=a("a"),WTo=o("LayoutLMTokenizerFast"),UTo=o(" (LayoutLM model)"),HTo=l(),qs=a("li"),Fhe=a("strong"),JTo=o("layoutlmv2"),YTo=o(" \u2014 "),CD=a("a"),ZTo=o("LayoutLMv2Tokenizer"),KTo=o(" or "),wD=a("a"),eMo=o("LayoutLMv2TokenizerFast"),oMo=o(" (LayoutLMv2 model)"),rMo=l(),js=a("li"),The=a("strong"),tMo=o("layoutlmv3"),aMo=o(" \u2014 "),AD=a("a"),nMo=o("LayoutLMv3Tokenizer"),sMo=o(" or "),LD=a("a"),lMo=o("LayoutLMv3TokenizerFast"),iMo=o(" (LayoutLMv3 model)"),dMo=l(),Ds=a("li"),Mhe=a("strong"),cMo=o("layoutxlm"),mMo=o(" \u2014 "),yD=a("a"),fMo=o("LayoutXLMTokenizer"),gMo=o(" or "),xD=a("a"),hMo=o("LayoutXLMTokenizerFast"),uMo=o(" (LayoutXLM model)"),pMo=l(),Gs=a("li"),Ehe=a("strong"),_Mo=o("led"),bMo=o(" \u2014 "),$D=a("a"),vMo=o("LEDTokenizer"),FMo=o(" or "),kD=a("a"),TMo=o("LEDTokenizerFast"),MMo=o(" (LED model)"),EMo=l(),Os=a("li"),Che=a("strong"),CMo=o("longformer"),wMo=o(" \u2014 "),SD=a("a"),AMo=o("LongformerTokenizer"),LMo=o(" or "),RD=a("a"),yMo=o("LongformerTokenizerFast"),xMo=o(" (Longformer model)"),$Mo=l(),Vs=a("li"),whe=a("strong"),kMo=o("longt5"),SMo=o(" \u2014 "),PD=a("a"),RMo=o("T5Tokenizer"),PMo=o(" or "),BD=a("a"),BMo=o("T5TokenizerFast"),IMo=o(" (LongT5 model)"),NMo=l(),yu=a("li"),Ahe=a("strong"),qMo=o("luke"),jMo=o(" \u2014 "),ID=a("a"),DMo=o("LukeTokenizer"),GMo=o(" (LUKE model)"),OMo=l(),Xs=a("li"),Lhe=a("strong"),VMo=o("lxmert"),XMo=o(" \u2014 "),ND=a("a"),zMo=o("LxmertTokenizer"),QMo=o(" or "),qD=a("a"),WMo=o("LxmertTokenizerFast"),UMo=o(" (LXMERT model)"),HMo=l(),xu=a("li"),yhe=a("strong"),JMo=o("m2m_100"),YMo=o(" \u2014 "),jD=a("a"),ZMo=o("M2M100Tokenizer"),KMo=o(" (M2M100 model)"),eEo=l(),$u=a("li"),xhe=a("strong"),oEo=o("marian"),rEo=o(" \u2014 "),DD=a("a"),tEo=o("MarianTokenizer"),aEo=o(" (Marian model)"),nEo=l(),zs=a("li"),$he=a("strong"),sEo=o("mbart"),lEo=o(" \u2014 "),GD=a("a"),iEo=o("MBartTokenizer"),dEo=o(" or "),OD=a("a"),cEo=o("MBartTokenizerFast"),mEo=o(" (mBART model)"),fEo=l(),Qs=a("li"),khe=a("strong"),gEo=o("mbart50"),hEo=o(" \u2014 "),VD=a("a"),uEo=o("MBart50Tokenizer"),pEo=o(" or "),XD=a("a"),_Eo=o("MBart50TokenizerFast"),bEo=o(" (mBART-50 model)"),vEo=l(),Ws=a("li"),She=a("strong"),FEo=o("megatron-bert"),TEo=o(" \u2014 "),zD=a("a"),MEo=o("BertTokenizer"),EEo=o(" or "),QD=a("a"),CEo=o("BertTokenizerFast"),wEo=o(" (Megatron-BERT model)"),AEo=l(),ku=a("li"),Rhe=a("strong"),LEo=o("mluke"),yEo=o(" \u2014 "),WD=a("a"),xEo=o("MLukeTokenizer"),$Eo=o(" (mLUKE model)"),kEo=l(),Us=a("li"),Phe=a("strong"),SEo=o("mobilebert"),REo=o(" \u2014 "),UD=a("a"),PEo=o("MobileBertTokenizer"),BEo=o(" or "),HD=a("a"),IEo=o("MobileBertTokenizerFast"),NEo=o(" (MobileBERT model)"),qEo=l(),Hs=a("li"),Bhe=a("strong"),jEo=o("mpnet"),DEo=o(" \u2014 "),JD=a("a"),GEo=o("MPNetTokenizer"),OEo=o(" or "),YD=a("a"),VEo=o("MPNetTokenizerFast"),XEo=o(" (MPNet model)"),zEo=l(),Js=a("li"),Ihe=a("strong"),QEo=o("mt5"),WEo=o(" \u2014 "),ZD=a("a"),UEo=o("MT5Tokenizer"),HEo=o(" or "),KD=a("a"),JEo=o("MT5TokenizerFast"),YEo=o(" (MT5 model)"),ZEo=l(),Ys=a("li"),Nhe=a("strong"),KEo=o("mvp"),e4o=o(" \u2014 "),eG=a("a"),o4o=o("MvpTokenizer"),r4o=o(" or "),oG=a("a"),t4o=o("MvpTokenizerFast"),a4o=o(" (MVP model)"),n4o=l(),Zs=a("li"),qhe=a("strong"),s4o=o("nezha"),l4o=o(" \u2014 "),rG=a("a"),i4o=o("BertTokenizer"),d4o=o(" or "),tG=a("a"),c4o=o("BertTokenizerFast"),m4o=o(" (Nezha model)"),f4o=l(),Ks=a("li"),jhe=a("strong"),g4o=o("nllb"),h4o=o(" \u2014 "),aG=a("a"),u4o=o("NllbTokenizer"),p4o=o(" or "),nG=a("a"),_4o=o("NllbTokenizerFast"),b4o=o(" (NLLB model)"),v4o=l(),el=a("li"),Dhe=a("strong"),F4o=o("nystromformer"),T4o=o(" \u2014 "),sG=a("a"),M4o=o("AlbertTokenizer"),E4o=o(" or "),lG=a("a"),C4o=o("AlbertTokenizerFast"),w4o=o(" (Nystr\xF6mformer model)"),A4o=l(),ol=a("li"),Ghe=a("strong"),L4o=o("openai-gpt"),y4o=o(" \u2014 "),iG=a("a"),x4o=o("OpenAIGPTTokenizer"),$4o=o(" or "),dG=a("a"),k4o=o("OpenAIGPTTokenizerFast"),S4o=o(" (OpenAI GPT model)"),R4o=l(),Su=a("li"),Ohe=a("strong"),P4o=o("opt"),B4o=o(" \u2014 "),cG=a("a"),I4o=o("GPT2Tokenizer"),N4o=o(" (OPT model)"),q4o=l(),rl=a("li"),Vhe=a("strong"),j4o=o("owlvit"),D4o=o(" \u2014 "),mG=a("a"),G4o=o("CLIPTokenizer"),O4o=o(" or "),fG=a("a"),V4o=o("CLIPTokenizerFast"),X4o=o(" (OWL-ViT model)"),z4o=l(),tl=a("li"),Xhe=a("strong"),Q4o=o("pegasus"),W4o=o(" \u2014 "),gG=a("a"),U4o=o("PegasusTokenizer"),H4o=o(" or "),hG=a("a"),J4o=o("PegasusTokenizerFast"),Y4o=o(" (Pegasus model)"),Z4o=l(),Ru=a("li"),zhe=a("strong"),K4o=o("perceiver"),eCo=o(" \u2014 "),uG=a("a"),oCo=o("PerceiverTokenizer"),rCo=o(" (Perceiver model)"),tCo=l(),Pu=a("li"),Qhe=a("strong"),aCo=o("phobert"),nCo=o(" \u2014 "),pG=a("a"),sCo=o("PhobertTokenizer"),lCo=o(" (PhoBERT model)"),iCo=l(),Bu=a("li"),Whe=a("strong"),dCo=o("plbart"),cCo=o(" \u2014 "),_G=a("a"),mCo=o("PLBartTokenizer"),fCo=o(" (PLBart model)"),gCo=l(),Iu=a("li"),Uhe=a("strong"),hCo=o("prophetnet"),uCo=o(" \u2014 "),bG=a("a"),pCo=o("ProphetNetTokenizer"),_Co=o(" (ProphetNet model)"),bCo=l(),al=a("li"),Hhe=a("strong"),vCo=o("qdqbert"),FCo=o(" \u2014 "),vG=a("a"),TCo=o("BertTokenizer"),MCo=o(" or "),FG=a("a"),ECo=o("BertTokenizerFast"),CCo=o(" (QDQBert model)"),wCo=l(),Nu=a("li"),Jhe=a("strong"),ACo=o("rag"),LCo=o(" \u2014 "),TG=a("a"),yCo=o("RagTokenizer"),xCo=o(" (RAG model)"),$Co=l(),nl=a("li"),Yhe=a("strong"),kCo=o("realm"),SCo=o(" \u2014 "),MG=a("a"),RCo=o("RealmTokenizer"),PCo=o(" or "),EG=a("a"),BCo=o("RealmTokenizerFast"),ICo=o(" (REALM model)"),NCo=l(),sl=a("li"),Zhe=a("strong"),qCo=o("reformer"),jCo=o(" \u2014 "),CG=a("a"),DCo=o("ReformerTokenizer"),GCo=o(" or "),wG=a("a"),OCo=o("ReformerTokenizerFast"),VCo=o(" (Reformer model)"),XCo=l(),ll=a("li"),Khe=a("strong"),zCo=o("rembert"),QCo=o(" \u2014 "),AG=a("a"),WCo=o("RemBertTokenizer"),UCo=o(" or "),LG=a("a"),HCo=o("RemBertTokenizerFast"),JCo=o(" (RemBERT model)"),YCo=l(),il=a("li"),eue=a("strong"),ZCo=o("retribert"),KCo=o(" \u2014 "),yG=a("a"),e3o=o("RetriBertTokenizer"),o3o=o(" or "),xG=a("a"),r3o=o("RetriBertTokenizerFast"),t3o=o(" (RetriBERT model)"),a3o=l(),dl=a("li"),oue=a("strong"),n3o=o("roberta"),s3o=o(" \u2014 "),$G=a("a"),l3o=o("RobertaTokenizer"),i3o=o(" or "),kG=a("a"),d3o=o("RobertaTokenizerFast"),c3o=o(" (RoBERTa model)"),m3o=l(),cl=a("li"),rue=a("strong"),f3o=o("roformer"),g3o=o(" \u2014 "),SG=a("a"),h3o=o("RoFormerTokenizer"),u3o=o(" or "),RG=a("a"),p3o=o("RoFormerTokenizerFast"),_3o=o(" (RoFormer model)"),b3o=l(),qu=a("li"),tue=a("strong"),v3o=o("speech_to_text"),F3o=o(" \u2014 "),PG=a("a"),T3o=o("Speech2TextTokenizer"),M3o=o(" (Speech2Text model)"),E3o=l(),ju=a("li"),aue=a("strong"),C3o=o("speech_to_text_2"),w3o=o(" \u2014 "),BG=a("a"),A3o=o("Speech2Text2Tokenizer"),L3o=o(" (Speech2Text2 model)"),y3o=l(),ml=a("li"),nue=a("strong"),x3o=o("splinter"),$3o=o(" \u2014 "),IG=a("a"),k3o=o("SplinterTokenizer"),S3o=o(" or "),NG=a("a"),R3o=o("SplinterTokenizerFast"),P3o=o(" (Splinter model)"),B3o=l(),fl=a("li"),sue=a("strong"),I3o=o("squeezebert"),N3o=o(" \u2014 "),qG=a("a"),q3o=o("SqueezeBertTokenizer"),j3o=o(" or "),jG=a("a"),D3o=o("SqueezeBertTokenizerFast"),G3o=o(" (SqueezeBERT model)"),O3o=l(),gl=a("li"),lue=a("strong"),V3o=o("t5"),X3o=o(" \u2014 "),DG=a("a"),z3o=o("T5Tokenizer"),Q3o=o(" or "),GG=a("a"),W3o=o("T5TokenizerFast"),U3o=o(" (T5 model)"),H3o=l(),Du=a("li"),iue=a("strong"),J3o=o("tapas"),Y3o=o(" \u2014 "),OG=a("a"),Z3o=o("TapasTokenizer"),K3o=o(" (TAPAS model)"),e5o=l(),Gu=a("li"),due=a("strong"),o5o=o("tapex"),r5o=o(" \u2014 "),VG=a("a"),t5o=o("TapexTokenizer"),a5o=o(" (TAPEX model)"),n5o=l(),Ou=a("li"),cue=a("strong"),s5o=o("transfo-xl"),l5o=o(" \u2014 "),XG=a("a"),i5o=o("TransfoXLTokenizer"),d5o=o(" (Transformer-XL model)"),c5o=l(),hl=a("li"),mue=a("strong"),m5o=o("vilt"),f5o=o(" \u2014 "),zG=a("a"),g5o=o("BertTokenizer"),h5o=o(" or "),QG=a("a"),u5o=o("BertTokenizerFast"),p5o=o(" (ViLT model)"),_5o=l(),ul=a("li"),fue=a("strong"),b5o=o("visual_bert"),v5o=o(" \u2014 "),WG=a("a"),F5o=o("BertTokenizer"),T5o=o(" or "),UG=a("a"),M5o=o("BertTokenizerFast"),E5o=o(" (VisualBERT model)"),C5o=l(),Vu=a("li"),gue=a("strong"),w5o=o("wav2vec2"),A5o=o(" \u2014 "),HG=a("a"),L5o=o("Wav2Vec2CTCTokenizer"),y5o=o(" (Wav2Vec2 model)"),x5o=l(),Xu=a("li"),hue=a("strong"),$5o=o("wav2vec2-conformer"),k5o=o(" \u2014 "),JG=a("a"),S5o=o("Wav2Vec2CTCTokenizer"),R5o=o(" (Wav2Vec2-Conformer model)"),P5o=l(),zu=a("li"),uue=a("strong"),B5o=o("wav2vec2_phoneme"),I5o=o(" \u2014 "),YG=a("a"),N5o=o("Wav2Vec2PhonemeCTCTokenizer"),q5o=o(" (Wav2Vec2Phoneme model)"),j5o=l(),Qu=a("li"),pue=a("strong"),D5o=o("whisper"),G5o=o(" \u2014 "),ZG=a("a"),O5o=o("WhisperTokenizer"),V5o=o(" (Whisper model)"),X5o=l(),pl=a("li"),_ue=a("strong"),z5o=o("xclip"),Q5o=o(" \u2014 "),KG=a("a"),W5o=o("CLIPTokenizer"),U5o=o(" or "),eO=a("a"),H5o=o("CLIPTokenizerFast"),J5o=o(" (X-CLIP model)"),Y5o=l(),_l=a("li"),bue=a("strong"),Z5o=o("xglm"),K5o=o(" \u2014 "),oO=a("a"),e0o=o("XGLMTokenizer"),o0o=o(" or "),rO=a("a"),r0o=o("XGLMTokenizerFast"),t0o=o(" (XGLM model)"),a0o=l(),Wu=a("li"),vue=a("strong"),n0o=o("xlm"),s0o=o(" \u2014 "),tO=a("a"),l0o=o("XLMTokenizer"),i0o=o(" (XLM model)"),d0o=l(),Uu=a("li"),Fue=a("strong"),c0o=o("xlm-prophetnet"),m0o=o(" \u2014 "),aO=a("a"),f0o=o("XLMProphetNetTokenizer"),g0o=o(" (XLM-ProphetNet model)"),h0o=l(),bl=a("li"),Tue=a("strong"),u0o=o("xlm-roberta"),p0o=o(" \u2014 "),nO=a("a"),_0o=o("XLMRobertaTokenizer"),b0o=o(" or "),sO=a("a"),v0o=o("XLMRobertaTokenizerFast"),F0o=o(" (XLM-RoBERTa model)"),T0o=l(),vl=a("li"),Mue=a("strong"),M0o=o("xlm-roberta-xl"),E0o=o(" \u2014 "),lO=a("a"),C0o=o("XLMRobertaTokenizer"),w0o=o(" or "),iO=a("a"),A0o=o("XLMRobertaTokenizerFast"),L0o=o(" (XLM-RoBERTa-XL model)"),y0o=l(),Fl=a("li"),Eue=a("strong"),x0o=o("xlnet"),$0o=o(" \u2014 "),dO=a("a"),k0o=o("XLNetTokenizer"),S0o=o(" or "),cO=a("a"),R0o=o("XLNetTokenizerFast"),P0o=o(" (XLNet model)"),B0o=l(),Tl=a("li"),Cue=a("strong"),I0o=o("yoso"),N0o=o(" \u2014 "),mO=a("a"),q0o=o("AlbertTokenizer"),j0o=o(" or "),fO=a("a"),D0o=o("AlbertTokenizerFast"),G0o=o(" (YOSO model)"),O0o=l(),F(Hu.$$.fragment),V0o=l(),Ju=a("div"),F(qx.$$.fragment),X0o=l(),wue=a("p"),z0o=o("Register a new tokenizer in this mapping."),goo=l(),Fd=a("h2"),Yu=a("a"),Aue=a("span"),F(jx.$$.fragment),Q0o=l(),Lue=a("span"),W0o=o("AutoFeatureExtractor"),hoo=l(),Ro=a("div"),F(Dx.$$.fragment),U0o=l(),Gx=a("p"),H0o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gO=a("a"),J0o=o("AutoFeatureExtractor.from_pretrained()"),Y0o=o(" class method."),Z0o=l(),Ox=a("p"),K0o=o("This class cannot be instantiated directly using "),yue=a("code"),ewo=o("__init__()"),owo=o(" (throws an error)."),rwo=l(),Ye=a("div"),F(Vx.$$.fragment),two=l(),xue=a("p"),awo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),nwo=l(),Ka=a("p"),swo=o("The feature extractor class to instantiate is selected based on the "),$ue=a("code"),lwo=o("model_type"),iwo=o(` property of the config object
(either passed as an argument or loaded from `),kue=a("code"),dwo=o("pretrained_model_name_or_path"),cwo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sue=a("code"),mwo=o("pretrained_model_name_or_path"),fwo=o(":"),gwo=l(),z=a("ul"),Zu=a("li"),Rue=a("strong"),hwo=o("beit"),uwo=o(" \u2014 "),hO=a("a"),pwo=o("BeitFeatureExtractor"),_wo=o(" (BEiT model)"),bwo=l(),Ku=a("li"),Pue=a("strong"),vwo=o("clip"),Fwo=o(" \u2014 "),uO=a("a"),Two=o("CLIPFeatureExtractor"),Mwo=o(" (CLIP model)"),Ewo=l(),ep=a("li"),Bue=a("strong"),Cwo=o("conditional_detr"),wwo=o(" \u2014 "),pO=a("a"),Awo=o("ConditionalDetrFeatureExtractor"),Lwo=o(" (Conditional DETR model)"),ywo=l(),op=a("li"),Iue=a("strong"),xwo=o("convnext"),$wo=o(" \u2014 "),_O=a("a"),kwo=o("ConvNextFeatureExtractor"),Swo=o(" (ConvNeXT model)"),Rwo=l(),rp=a("li"),Nue=a("strong"),Pwo=o("cvt"),Bwo=o(" \u2014 "),bO=a("a"),Iwo=o("ConvNextFeatureExtractor"),Nwo=o(" (CvT model)"),qwo=l(),tp=a("li"),que=a("strong"),jwo=o("data2vec-audio"),Dwo=o(" \u2014 "),vO=a("a"),Gwo=o("Wav2Vec2FeatureExtractor"),Owo=o(" (Data2VecAudio model)"),Vwo=l(),ap=a("li"),jue=a("strong"),Xwo=o("data2vec-vision"),zwo=o(" \u2014 "),FO=a("a"),Qwo=o("BeitFeatureExtractor"),Wwo=o(" (Data2VecVision model)"),Uwo=l(),np=a("li"),Due=a("strong"),Hwo=o("deformable_detr"),Jwo=o(" \u2014 "),TO=a("a"),Ywo=o("DeformableDetrFeatureExtractor"),Zwo=o(" (Deformable DETR model)"),Kwo=l(),sp=a("li"),Gue=a("strong"),eAo=o("deit"),oAo=o(" \u2014 "),MO=a("a"),rAo=o("DeiTFeatureExtractor"),tAo=o(" (DeiT model)"),aAo=l(),lp=a("li"),Oue=a("strong"),nAo=o("detr"),sAo=o(" \u2014 "),EO=a("a"),lAo=o("DetrFeatureExtractor"),iAo=o(" (DETR model)"),dAo=l(),ip=a("li"),Vue=a("strong"),cAo=o("donut"),mAo=o(" \u2014 "),CO=a("a"),fAo=o("DonutFeatureExtractor"),gAo=o(" (Donut model)"),hAo=l(),dp=a("li"),Xue=a("strong"),uAo=o("dpt"),pAo=o(" \u2014 "),wO=a("a"),_Ao=o("DPTFeatureExtractor"),bAo=o(" (DPT model)"),vAo=l(),cp=a("li"),zue=a("strong"),FAo=o("flava"),TAo=o(" \u2014 "),AO=a("a"),MAo=o("FlavaFeatureExtractor"),EAo=o(" (FLAVA model)"),CAo=l(),mp=a("li"),Que=a("strong"),wAo=o("glpn"),AAo=o(" \u2014 "),LO=a("a"),LAo=o("GLPNFeatureExtractor"),yAo=o(" (GLPN model)"),xAo=l(),fp=a("li"),Wue=a("strong"),$Ao=o("groupvit"),kAo=o(" \u2014 "),yO=a("a"),SAo=o("CLIPFeatureExtractor"),RAo=o(" (GroupViT model)"),PAo=l(),gp=a("li"),Uue=a("strong"),BAo=o("hubert"),IAo=o(" \u2014 "),xO=a("a"),NAo=o("Wav2Vec2FeatureExtractor"),qAo=o(" (Hubert model)"),jAo=l(),hp=a("li"),Hue=a("strong"),DAo=o("imagegpt"),GAo=o(" \u2014 "),$O=a("a"),OAo=o("ImageGPTFeatureExtractor"),VAo=o(" (ImageGPT model)"),XAo=l(),up=a("li"),Jue=a("strong"),zAo=o("layoutlmv2"),QAo=o(" \u2014 "),kO=a("a"),WAo=o("LayoutLMv2FeatureExtractor"),UAo=o(" (LayoutLMv2 model)"),HAo=l(),pp=a("li"),Yue=a("strong"),JAo=o("layoutlmv3"),YAo=o(" \u2014 "),SO=a("a"),ZAo=o("LayoutLMv3FeatureExtractor"),KAo=o(" (LayoutLMv3 model)"),e6o=l(),_p=a("li"),Zue=a("strong"),o6o=o("levit"),r6o=o(" \u2014 "),RO=a("a"),t6o=o("LevitFeatureExtractor"),a6o=o(" (LeViT model)"),n6o=l(),bp=a("li"),Kue=a("strong"),s6o=o("maskformer"),l6o=o(" \u2014 "),PO=a("a"),i6o=o("MaskFormerFeatureExtractor"),d6o=o(" (MaskFormer model)"),c6o=l(),vp=a("li"),epe=a("strong"),m6o=o("mctct"),f6o=o(" \u2014 "),BO=a("a"),g6o=o("MCTCTFeatureExtractor"),h6o=o(" (M-CTC-T model)"),u6o=l(),Fp=a("li"),ope=a("strong"),p6o=o("mobilevit"),_6o=o(" \u2014 "),IO=a("a"),b6o=o("MobileViTFeatureExtractor"),v6o=o(" (MobileViT model)"),F6o=l(),Tp=a("li"),rpe=a("strong"),T6o=o("owlvit"),M6o=o(" \u2014 "),NO=a("a"),E6o=o("OwlViTFeatureExtractor"),C6o=o(" (OWL-ViT model)"),w6o=l(),Mp=a("li"),tpe=a("strong"),A6o=o("perceiver"),L6o=o(" \u2014 "),qO=a("a"),y6o=o("PerceiverFeatureExtractor"),x6o=o(" (Perceiver model)"),$6o=l(),Ep=a("li"),ape=a("strong"),k6o=o("poolformer"),S6o=o(" \u2014 "),jO=a("a"),R6o=o("PoolFormerFeatureExtractor"),P6o=o(" (PoolFormer model)"),B6o=l(),Cp=a("li"),npe=a("strong"),I6o=o("regnet"),N6o=o(" \u2014 "),DO=a("a"),q6o=o("ConvNextFeatureExtractor"),j6o=o(" (RegNet model)"),D6o=l(),wp=a("li"),spe=a("strong"),G6o=o("resnet"),O6o=o(" \u2014 "),GO=a("a"),V6o=o("ConvNextFeatureExtractor"),X6o=o(" (ResNet model)"),z6o=l(),Ap=a("li"),lpe=a("strong"),Q6o=o("segformer"),W6o=o(" \u2014 "),OO=a("a"),U6o=o("SegformerFeatureExtractor"),H6o=o(" (SegFormer model)"),J6o=l(),Lp=a("li"),ipe=a("strong"),Y6o=o("speech_to_text"),Z6o=o(" \u2014 "),VO=a("a"),K6o=o("Speech2TextFeatureExtractor"),e7o=o(" (Speech2Text model)"),o7o=l(),yp=a("li"),dpe=a("strong"),r7o=o("swin"),t7o=o(" \u2014 "),XO=a("a"),a7o=o("ViTFeatureExtractor"),n7o=o(" (Swin Transformer model)"),s7o=l(),xp=a("li"),cpe=a("strong"),l7o=o("swinv2"),i7o=o(" \u2014 "),zO=a("a"),d7o=o("ViTFeatureExtractor"),c7o=o(" (Swin Transformer V2 model)"),m7o=l(),$p=a("li"),mpe=a("strong"),f7o=o("van"),g7o=o(" \u2014 "),QO=a("a"),h7o=o("ConvNextFeatureExtractor"),u7o=o(" (VAN model)"),p7o=l(),kp=a("li"),fpe=a("strong"),_7o=o("videomae"),b7o=o(" \u2014 "),WO=a("a"),v7o=o("VideoMAEFeatureExtractor"),F7o=o(" (VideoMAE model)"),T7o=l(),Sp=a("li"),gpe=a("strong"),M7o=o("vilt"),E7o=o(" \u2014 "),UO=a("a"),C7o=o("ViltFeatureExtractor"),w7o=o(" (ViLT model)"),A7o=l(),Rp=a("li"),hpe=a("strong"),L7o=o("vit"),y7o=o(" \u2014 "),HO=a("a"),x7o=o("ViTFeatureExtractor"),$7o=o(" (ViT model)"),k7o=l(),Pp=a("li"),upe=a("strong"),S7o=o("vit_mae"),R7o=o(" \u2014 "),JO=a("a"),P7o=o("ViTFeatureExtractor"),B7o=o(" (ViTMAE model)"),I7o=l(),Bp=a("li"),ppe=a("strong"),N7o=o("vit_msn"),q7o=o(" \u2014 "),YO=a("a"),j7o=o("ViTFeatureExtractor"),D7o=o(" (ViTMSN model)"),G7o=l(),Ip=a("li"),_pe=a("strong"),O7o=o("wav2vec2"),V7o=o(" \u2014 "),ZO=a("a"),X7o=o("Wav2Vec2FeatureExtractor"),z7o=o(" (Wav2Vec2 model)"),Q7o=l(),Np=a("li"),bpe=a("strong"),W7o=o("wav2vec2-conformer"),U7o=o(" \u2014 "),KO=a("a"),H7o=o("Wav2Vec2FeatureExtractor"),J7o=o(" (Wav2Vec2-Conformer model)"),Y7o=l(),qp=a("li"),vpe=a("strong"),Z7o=o("whisper"),K7o=o(" \u2014 "),eV=a("a"),eLo=o("WhisperFeatureExtractor"),oLo=o(" (Whisper model)"),rLo=l(),jp=a("li"),Fpe=a("strong"),tLo=o("xclip"),aLo=o(" \u2014 "),oV=a("a"),nLo=o("CLIPFeatureExtractor"),sLo=o(" (X-CLIP model)"),lLo=l(),Dp=a("li"),Tpe=a("strong"),iLo=o("yolos"),dLo=o(" \u2014 "),rV=a("a"),cLo=o("YolosFeatureExtractor"),mLo=o(" (YOLOS model)"),fLo=l(),F(Gp.$$.fragment),gLo=l(),F(Op.$$.fragment),hLo=l(),Vp=a("div"),F(Xx.$$.fragment),uLo=l(),Mpe=a("p"),pLo=o("Register a new feature extractor for this class."),uoo=l(),Td=a("h2"),Xp=a("a"),Epe=a("span"),F(zx.$$.fragment),_Lo=l(),Cpe=a("span"),bLo=o("AutoProcessor"),poo=l(),Po=a("div"),F(Qx.$$.fragment),vLo=l(),Wx=a("p"),FLo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tV=a("a"),TLo=o("AutoProcessor.from_pretrained()"),MLo=o(" class method."),ELo=l(),Ux=a("p"),CLo=o("This class cannot be instantiated directly using "),wpe=a("code"),wLo=o("__init__()"),ALo=o(" (throws an error)."),LLo=l(),Ze=a("div"),F(Hx.$$.fragment),yLo=l(),Ape=a("p"),xLo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$Lo=l(),Md=a("p"),kLo=o("The processor class to instantiate is selected based on the "),Lpe=a("code"),SLo=o("model_type"),RLo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),PLo=o("pretrained_model_name_or_path"),BLo=o(" if possible):"),ILo=l(),se=a("ul"),zp=a("li"),xpe=a("strong"),NLo=o("clip"),qLo=o(" \u2014 "),aV=a("a"),jLo=o("CLIPProcessor"),DLo=o(" (CLIP model)"),GLo=l(),Qp=a("li"),$pe=a("strong"),OLo=o("donut"),VLo=o(" \u2014 "),nV=a("a"),XLo=o("DonutProcessor"),zLo=o(" (Donut model)"),QLo=l(),Wp=a("li"),kpe=a("strong"),WLo=o("flava"),ULo=o(" \u2014 "),sV=a("a"),HLo=o("FlavaProcessor"),JLo=o(" (FLAVA model)"),YLo=l(),Up=a("li"),Spe=a("strong"),ZLo=o("groupvit"),KLo=o(" \u2014 "),lV=a("a"),eyo=o("CLIPProcessor"),oyo=o(" (GroupViT model)"),ryo=l(),Hp=a("li"),Rpe=a("strong"),tyo=o("layoutlmv2"),ayo=o(" \u2014 "),iV=a("a"),nyo=o("LayoutLMv2Processor"),syo=o(" (LayoutLMv2 model)"),lyo=l(),Jp=a("li"),Ppe=a("strong"),iyo=o("layoutlmv3"),dyo=o(" \u2014 "),dV=a("a"),cyo=o("LayoutLMv3Processor"),myo=o(" (LayoutLMv3 model)"),fyo=l(),Yp=a("li"),Bpe=a("strong"),gyo=o("layoutxlm"),hyo=o(" \u2014 "),cV=a("a"),uyo=o("LayoutXLMProcessor"),pyo=o(" (LayoutXLM model)"),_yo=l(),Zp=a("li"),Ipe=a("strong"),byo=o("markuplm"),vyo=o(" \u2014 "),mV=a("a"),Fyo=o("MarkupLMProcessor"),Tyo=o(" (MarkupLM model)"),Myo=l(),Kp=a("li"),Npe=a("strong"),Eyo=o("owlvit"),Cyo=o(" \u2014 "),fV=a("a"),wyo=o("OwlViTProcessor"),Ayo=o(" (OWL-ViT model)"),Lyo=l(),e_=a("li"),qpe=a("strong"),yyo=o("sew"),xyo=o(" \u2014 "),gV=a("a"),$yo=o("Wav2Vec2Processor"),kyo=o(" (SEW model)"),Syo=l(),o_=a("li"),jpe=a("strong"),Ryo=o("sew-d"),Pyo=o(" \u2014 "),hV=a("a"),Byo=o("Wav2Vec2Processor"),Iyo=o(" (SEW-D model)"),Nyo=l(),r_=a("li"),Dpe=a("strong"),qyo=o("speech_to_text"),jyo=o(" \u2014 "),uV=a("a"),Dyo=o("Speech2TextProcessor"),Gyo=o(" (Speech2Text model)"),Oyo=l(),t_=a("li"),Gpe=a("strong"),Vyo=o("speech_to_text_2"),Xyo=o(" \u2014 "),pV=a("a"),zyo=o("Speech2Text2Processor"),Qyo=o(" (Speech2Text2 model)"),Wyo=l(),a_=a("li"),Ope=a("strong"),Uyo=o("trocr"),Hyo=o(" \u2014 "),_V=a("a"),Jyo=o("TrOCRProcessor"),Yyo=o(" (TrOCR model)"),Zyo=l(),n_=a("li"),Vpe=a("strong"),Kyo=o("unispeech"),e8o=o(" \u2014 "),bV=a("a"),o8o=o("Wav2Vec2Processor"),r8o=o(" (UniSpeech model)"),t8o=l(),s_=a("li"),Xpe=a("strong"),a8o=o("unispeech-sat"),n8o=o(" \u2014 "),vV=a("a"),s8o=o("Wav2Vec2Processor"),l8o=o(" (UniSpeechSat model)"),i8o=l(),l_=a("li"),zpe=a("strong"),d8o=o("vilt"),c8o=o(" \u2014 "),FV=a("a"),m8o=o("ViltProcessor"),f8o=o(" (ViLT model)"),g8o=l(),i_=a("li"),Qpe=a("strong"),h8o=o("vision-text-dual-encoder"),u8o=o(" \u2014 "),TV=a("a"),p8o=o("VisionTextDualEncoderProcessor"),_8o=o(" (VisionTextDualEncoder model)"),b8o=l(),d_=a("li"),Wpe=a("strong"),v8o=o("wav2vec2"),F8o=o(" \u2014 "),MV=a("a"),T8o=o("Wav2Vec2Processor"),M8o=o(" (Wav2Vec2 model)"),E8o=l(),c_=a("li"),Upe=a("strong"),C8o=o("wav2vec2-conformer"),w8o=o(" \u2014 "),EV=a("a"),A8o=o("Wav2Vec2Processor"),L8o=o(" (Wav2Vec2-Conformer model)"),y8o=l(),m_=a("li"),Hpe=a("strong"),x8o=o("wavlm"),$8o=o(" \u2014 "),CV=a("a"),k8o=o("Wav2Vec2Processor"),S8o=o(" (WavLM model)"),R8o=l(),f_=a("li"),Jpe=a("strong"),P8o=o("whisper"),B8o=o(" \u2014 "),wV=a("a"),I8o=o("WhisperProcessor"),N8o=o(" (Whisper model)"),q8o=l(),g_=a("li"),Ype=a("strong"),j8o=o("xclip"),D8o=o(" \u2014 "),AV=a("a"),G8o=o("CLIPProcessor"),O8o=o(" (X-CLIP model)"),V8o=l(),F(h_.$$.fragment),X8o=l(),F(u_.$$.fragment),z8o=l(),p_=a("div"),F(Jx.$$.fragment),Q8o=l(),Zpe=a("p"),W8o=o("Register a new processor for this class."),_oo=l(),Ed=a("h2"),__=a("a"),Kpe=a("span"),F(Yx.$$.fragment),U8o=l(),e_e=a("span"),H8o=o("AutoModel"),boo=l(),Bo=a("div"),F(Zx.$$.fragment),J8o=l(),Cd=a("p"),Y8o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LV=a("a"),Z8o=o("from_pretrained()"),K8o=o(" class method or the "),yV=a("a"),e9o=o("from_config()"),o9o=o(` class
method.`),r9o=l(),Kx=a("p"),t9o=o("This class cannot be instantiated directly using "),o_e=a("code"),a9o=o("__init__()"),n9o=o(" (throws an error)."),s9o=l(),vt=a("div"),F(e$.$$.fragment),l9o=l(),r_e=a("p"),i9o=o("Instantiates one of the base model classes of the library from a configuration."),d9o=l(),wd=a("p"),c9o=o(`Note:
Loading a model from its configuration file does `),t_e=a("strong"),m9o=o("not"),f9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),g9o=o("from_pretrained()"),h9o=o(" to load the model weights."),u9o=l(),F(b_.$$.fragment),p9o=l(),Ke=a("div"),F(o$.$$.fragment),_9o=l(),a_e=a("p"),b9o=o("Instantiate one of the base model classes of the library from a pretrained model."),v9o=l(),en=a("p"),F9o=o("The model class to instantiate is selected based on the "),n_e=a("code"),T9o=o("model_type"),M9o=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),E9o=o("pretrained_model_name_or_path"),C9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),w9o=o("pretrained_model_name_or_path"),A9o=o(":"),L9o=l(),y=a("ul"),v_=a("li"),i_e=a("strong"),y9o=o("albert"),x9o=o(" \u2014 "),$V=a("a"),$9o=o("AlbertModel"),k9o=o(" (ALBERT model)"),S9o=l(),F_=a("li"),d_e=a("strong"),R9o=o("bart"),P9o=o(" \u2014 "),kV=a("a"),B9o=o("BartModel"),I9o=o(" (BART model)"),N9o=l(),T_=a("li"),c_e=a("strong"),q9o=o("beit"),j9o=o(" \u2014 "),SV=a("a"),D9o=o("BeitModel"),G9o=o(" (BEiT model)"),O9o=l(),M_=a("li"),m_e=a("strong"),V9o=o("bert"),X9o=o(" \u2014 "),RV=a("a"),z9o=o("BertModel"),Q9o=o(" (BERT model)"),W9o=l(),E_=a("li"),f_e=a("strong"),U9o=o("bert-generation"),H9o=o(" \u2014 "),PV=a("a"),J9o=o("BertGenerationEncoder"),Y9o=o(" (Bert Generation model)"),Z9o=l(),C_=a("li"),g_e=a("strong"),K9o=o("big_bird"),exo=o(" \u2014 "),BV=a("a"),oxo=o("BigBirdModel"),rxo=o(" (BigBird model)"),txo=l(),w_=a("li"),h_e=a("strong"),axo=o("bigbird_pegasus"),nxo=o(" \u2014 "),IV=a("a"),sxo=o("BigBirdPegasusModel"),lxo=o(" (BigBird-Pegasus model)"),ixo=l(),A_=a("li"),u_e=a("strong"),dxo=o("blenderbot"),cxo=o(" \u2014 "),NV=a("a"),mxo=o("BlenderbotModel"),fxo=o(" (Blenderbot model)"),gxo=l(),L_=a("li"),p_e=a("strong"),hxo=o("blenderbot-small"),uxo=o(" \u2014 "),qV=a("a"),pxo=o("BlenderbotSmallModel"),_xo=o(" (BlenderbotSmall model)"),bxo=l(),y_=a("li"),__e=a("strong"),vxo=o("bloom"),Fxo=o(" \u2014 "),jV=a("a"),Txo=o("BloomModel"),Mxo=o(" (BLOOM model)"),Exo=l(),x_=a("li"),b_e=a("strong"),Cxo=o("camembert"),wxo=o(" \u2014 "),DV=a("a"),Axo=o("CamembertModel"),Lxo=o(" (CamemBERT model)"),yxo=l(),$_=a("li"),v_e=a("strong"),xxo=o("canine"),$xo=o(" \u2014 "),GV=a("a"),kxo=o("CanineModel"),Sxo=o(" (CANINE model)"),Rxo=l(),k_=a("li"),F_e=a("strong"),Pxo=o("clip"),Bxo=o(" \u2014 "),OV=a("a"),Ixo=o("CLIPModel"),Nxo=o(" (CLIP model)"),qxo=l(),S_=a("li"),T_e=a("strong"),jxo=o("codegen"),Dxo=o(" \u2014 "),VV=a("a"),Gxo=o("CodeGenModel"),Oxo=o(" (CodeGen model)"),Vxo=l(),R_=a("li"),M_e=a("strong"),Xxo=o("conditional_detr"),zxo=o(" \u2014 "),XV=a("a"),Qxo=o("ConditionalDetrModel"),Wxo=o(" (Conditional DETR model)"),Uxo=l(),P_=a("li"),E_e=a("strong"),Hxo=o("convbert"),Jxo=o(" \u2014 "),zV=a("a"),Yxo=o("ConvBertModel"),Zxo=o(" (ConvBERT model)"),Kxo=l(),B_=a("li"),C_e=a("strong"),e$o=o("convnext"),o$o=o(" \u2014 "),QV=a("a"),r$o=o("ConvNextModel"),t$o=o(" (ConvNeXT model)"),a$o=l(),I_=a("li"),w_e=a("strong"),n$o=o("ctrl"),s$o=o(" \u2014 "),WV=a("a"),l$o=o("CTRLModel"),i$o=o(" (CTRL model)"),d$o=l(),N_=a("li"),A_e=a("strong"),c$o=o("cvt"),m$o=o(" \u2014 "),UV=a("a"),f$o=o("CvtModel"),g$o=o(" (CvT model)"),h$o=l(),q_=a("li"),L_e=a("strong"),u$o=o("data2vec-audio"),p$o=o(" \u2014 "),HV=a("a"),_$o=o("Data2VecAudioModel"),b$o=o(" (Data2VecAudio model)"),v$o=l(),j_=a("li"),y_e=a("strong"),F$o=o("data2vec-text"),T$o=o(" \u2014 "),JV=a("a"),M$o=o("Data2VecTextModel"),E$o=o(" (Data2VecText model)"),C$o=l(),D_=a("li"),x_e=a("strong"),w$o=o("data2vec-vision"),A$o=o(" \u2014 "),YV=a("a"),L$o=o("Data2VecVisionModel"),y$o=o(" (Data2VecVision model)"),x$o=l(),G_=a("li"),$_e=a("strong"),$$o=o("deberta"),k$o=o(" \u2014 "),ZV=a("a"),S$o=o("DebertaModel"),R$o=o(" (DeBERTa model)"),P$o=l(),O_=a("li"),k_e=a("strong"),B$o=o("deberta-v2"),I$o=o(" \u2014 "),KV=a("a"),N$o=o("DebertaV2Model"),q$o=o(" (DeBERTa-v2 model)"),j$o=l(),V_=a("li"),S_e=a("strong"),D$o=o("decision_transformer"),G$o=o(" \u2014 "),eX=a("a"),O$o=o("DecisionTransformerModel"),V$o=o(" (Decision Transformer model)"),X$o=l(),X_=a("li"),R_e=a("strong"),z$o=o("deformable_detr"),Q$o=o(" \u2014 "),oX=a("a"),W$o=o("DeformableDetrModel"),U$o=o(" (Deformable DETR model)"),H$o=l(),z_=a("li"),P_e=a("strong"),J$o=o("deit"),Y$o=o(" \u2014 "),rX=a("a"),Z$o=o("DeiTModel"),K$o=o(" (DeiT model)"),eko=l(),Q_=a("li"),B_e=a("strong"),oko=o("detr"),rko=o(" \u2014 "),tX=a("a"),tko=o("DetrModel"),ako=o(" (DETR model)"),nko=l(),W_=a("li"),I_e=a("strong"),sko=o("distilbert"),lko=o(" \u2014 "),aX=a("a"),iko=o("DistilBertModel"),dko=o(" (DistilBERT model)"),cko=l(),U_=a("li"),N_e=a("strong"),mko=o("donut-swin"),fko=o(" \u2014 "),nX=a("a"),gko=o("DonutSwinModel"),hko=o(" (DonutSwin model)"),uko=l(),H_=a("li"),q_e=a("strong"),pko=o("dpr"),_ko=o(" \u2014 "),sX=a("a"),bko=o("DPRQuestionEncoder"),vko=o(" (DPR model)"),Fko=l(),J_=a("li"),j_e=a("strong"),Tko=o("dpt"),Mko=o(" \u2014 "),lX=a("a"),Eko=o("DPTModel"),Cko=o(" (DPT model)"),wko=l(),Y_=a("li"),D_e=a("strong"),Ako=o("electra"),Lko=o(" \u2014 "),iX=a("a"),yko=o("ElectraModel"),xko=o(" (ELECTRA model)"),$ko=l(),Z_=a("li"),G_e=a("strong"),kko=o("ernie"),Sko=o(" \u2014 "),dX=a("a"),Rko=o("ErnieModel"),Pko=o(" (ERNIE model)"),Bko=l(),K_=a("li"),O_e=a("strong"),Iko=o("esm"),Nko=o(" \u2014 "),cX=a("a"),qko=o("EsmModel"),jko=o(" (ESM model)"),Dko=l(),e1=a("li"),V_e=a("strong"),Gko=o("flaubert"),Oko=o(" \u2014 "),mX=a("a"),Vko=o("FlaubertModel"),Xko=o(" (FlauBERT model)"),zko=l(),o1=a("li"),X_e=a("strong"),Qko=o("flava"),Wko=o(" \u2014 "),fX=a("a"),Uko=o("FlavaModel"),Hko=o(" (FLAVA model)"),Jko=l(),r1=a("li"),z_e=a("strong"),Yko=o("fnet"),Zko=o(" \u2014 "),gX=a("a"),Kko=o("FNetModel"),eSo=o(" (FNet model)"),oSo=l(),t1=a("li"),Q_e=a("strong"),rSo=o("fsmt"),tSo=o(" \u2014 "),hX=a("a"),aSo=o("FSMTModel"),nSo=o(" (FairSeq Machine-Translation model)"),sSo=l(),Ml=a("li"),W_e=a("strong"),lSo=o("funnel"),iSo=o(" \u2014 "),uX=a("a"),dSo=o("FunnelModel"),cSo=o(" or "),pX=a("a"),mSo=o("FunnelBaseModel"),fSo=o(" (Funnel Transformer model)"),gSo=l(),a1=a("li"),U_e=a("strong"),hSo=o("glpn"),uSo=o(" \u2014 "),_X=a("a"),pSo=o("GLPNModel"),_So=o(" (GLPN model)"),bSo=l(),n1=a("li"),H_e=a("strong"),vSo=o("gpt2"),FSo=o(" \u2014 "),bX=a("a"),TSo=o("GPT2Model"),MSo=o(" (OpenAI GPT-2 model)"),ESo=l(),s1=a("li"),J_e=a("strong"),CSo=o("gpt_neo"),wSo=o(" \u2014 "),vX=a("a"),ASo=o("GPTNeoModel"),LSo=o(" (GPT Neo model)"),ySo=l(),l1=a("li"),Y_e=a("strong"),xSo=o("gpt_neox"),$So=o(" \u2014 "),FX=a("a"),kSo=o("GPTNeoXModel"),SSo=o(" (GPT NeoX model)"),RSo=l(),i1=a("li"),Z_e=a("strong"),PSo=o("gpt_neox_japanese"),BSo=o(" \u2014 "),TX=a("a"),ISo=o("GPTNeoXJapaneseModel"),NSo=o(" (GPT NeoX Japanese model)"),qSo=l(),d1=a("li"),K_e=a("strong"),jSo=o("gptj"),DSo=o(" \u2014 "),MX=a("a"),GSo=o("GPTJModel"),OSo=o(" (GPT-J model)"),VSo=l(),c1=a("li"),e1e=a("strong"),XSo=o("groupvit"),zSo=o(" \u2014 "),EX=a("a"),QSo=o("GroupViTModel"),WSo=o(" (GroupViT model)"),USo=l(),m1=a("li"),o1e=a("strong"),HSo=o("hubert"),JSo=o(" \u2014 "),CX=a("a"),YSo=o("HubertModel"),ZSo=o(" (Hubert model)"),KSo=l(),f1=a("li"),r1e=a("strong"),eRo=o("ibert"),oRo=o(" \u2014 "),wX=a("a"),rRo=o("IBertModel"),tRo=o(" (I-BERT model)"),aRo=l(),g1=a("li"),t1e=a("strong"),nRo=o("imagegpt"),sRo=o(" \u2014 "),AX=a("a"),lRo=o("ImageGPTModel"),iRo=o(" (ImageGPT model)"),dRo=l(),h1=a("li"),a1e=a("strong"),cRo=o("layoutlm"),mRo=o(" \u2014 "),LX=a("a"),fRo=o("LayoutLMModel"),gRo=o(" (LayoutLM model)"),hRo=l(),u1=a("li"),n1e=a("strong"),uRo=o("layoutlmv2"),pRo=o(" \u2014 "),yX=a("a"),_Ro=o("LayoutLMv2Model"),bRo=o(" (LayoutLMv2 model)"),vRo=l(),p1=a("li"),s1e=a("strong"),FRo=o("layoutlmv3"),TRo=o(" \u2014 "),xX=a("a"),MRo=o("LayoutLMv3Model"),ERo=o(" (LayoutLMv3 model)"),CRo=l(),_1=a("li"),l1e=a("strong"),wRo=o("led"),ARo=o(" \u2014 "),$X=a("a"),LRo=o("LEDModel"),yRo=o(" (LED model)"),xRo=l(),b1=a("li"),i1e=a("strong"),$Ro=o("levit"),kRo=o(" \u2014 "),kX=a("a"),SRo=o("LevitModel"),RRo=o(" (LeViT model)"),PRo=l(),v1=a("li"),d1e=a("strong"),BRo=o("longformer"),IRo=o(" \u2014 "),SX=a("a"),NRo=o("LongformerModel"),qRo=o(" (Longformer model)"),jRo=l(),F1=a("li"),c1e=a("strong"),DRo=o("longt5"),GRo=o(" \u2014 "),RX=a("a"),ORo=o("LongT5Model"),VRo=o(" (LongT5 model)"),XRo=l(),T1=a("li"),m1e=a("strong"),zRo=o("luke"),QRo=o(" \u2014 "),PX=a("a"),WRo=o("LukeModel"),URo=o(" (LUKE model)"),HRo=l(),M1=a("li"),f1e=a("strong"),JRo=o("lxmert"),YRo=o(" \u2014 "),BX=a("a"),ZRo=o("LxmertModel"),KRo=o(" (LXMERT model)"),ePo=l(),E1=a("li"),g1e=a("strong"),oPo=o("m2m_100"),rPo=o(" \u2014 "),IX=a("a"),tPo=o("M2M100Model"),aPo=o(" (M2M100 model)"),nPo=l(),C1=a("li"),h1e=a("strong"),sPo=o("marian"),lPo=o(" \u2014 "),NX=a("a"),iPo=o("MarianModel"),dPo=o(" (Marian model)"),cPo=l(),w1=a("li"),u1e=a("strong"),mPo=o("markuplm"),fPo=o(" \u2014 "),qX=a("a"),gPo=o("MarkupLMModel"),hPo=o(" (MarkupLM model)"),uPo=l(),A1=a("li"),p1e=a("strong"),pPo=o("maskformer"),_Po=o(" \u2014 "),jX=a("a"),bPo=o("MaskFormerModel"),vPo=o(" (MaskFormer model)"),FPo=l(),L1=a("li"),_1e=a("strong"),TPo=o("mbart"),MPo=o(" \u2014 "),DX=a("a"),EPo=o("MBartModel"),CPo=o(" (mBART model)"),wPo=l(),y1=a("li"),b1e=a("strong"),APo=o("mctct"),LPo=o(" \u2014 "),GX=a("a"),yPo=o("MCTCTModel"),xPo=o(" (M-CTC-T model)"),$Po=l(),x1=a("li"),v1e=a("strong"),kPo=o("megatron-bert"),SPo=o(" \u2014 "),OX=a("a"),RPo=o("MegatronBertModel"),PPo=o(" (Megatron-BERT model)"),BPo=l(),$1=a("li"),F1e=a("strong"),IPo=o("mobilebert"),NPo=o(" \u2014 "),VX=a("a"),qPo=o("MobileBertModel"),jPo=o(" (MobileBERT model)"),DPo=l(),k1=a("li"),T1e=a("strong"),GPo=o("mobilevit"),OPo=o(" \u2014 "),XX=a("a"),VPo=o("MobileViTModel"),XPo=o(" (MobileViT model)"),zPo=l(),S1=a("li"),M1e=a("strong"),QPo=o("mpnet"),WPo=o(" \u2014 "),zX=a("a"),UPo=o("MPNetModel"),HPo=o(" (MPNet model)"),JPo=l(),R1=a("li"),E1e=a("strong"),YPo=o("mt5"),ZPo=o(" \u2014 "),QX=a("a"),KPo=o("MT5Model"),eBo=o(" (MT5 model)"),oBo=l(),P1=a("li"),C1e=a("strong"),rBo=o("mvp"),tBo=o(" \u2014 "),WX=a("a"),aBo=o("MvpModel"),nBo=o(" (MVP model)"),sBo=l(),B1=a("li"),w1e=a("strong"),lBo=o("nezha"),iBo=o(" \u2014 "),UX=a("a"),dBo=o("NezhaModel"),cBo=o(" (Nezha model)"),mBo=l(),I1=a("li"),A1e=a("strong"),fBo=o("nllb"),gBo=o(" \u2014 "),HX=a("a"),hBo=o("M2M100Model"),uBo=o(" (NLLB model)"),pBo=l(),N1=a("li"),L1e=a("strong"),_Bo=o("nystromformer"),bBo=o(" \u2014 "),JX=a("a"),vBo=o("NystromformerModel"),FBo=o(" (Nystr\xF6mformer model)"),TBo=l(),q1=a("li"),y1e=a("strong"),MBo=o("openai-gpt"),EBo=o(" \u2014 "),YX=a("a"),CBo=o("OpenAIGPTModel"),wBo=o(" (OpenAI GPT model)"),ABo=l(),j1=a("li"),x1e=a("strong"),LBo=o("opt"),yBo=o(" \u2014 "),ZX=a("a"),xBo=o("OPTModel"),$Bo=o(" (OPT model)"),kBo=l(),D1=a("li"),$1e=a("strong"),SBo=o("owlvit"),RBo=o(" \u2014 "),KX=a("a"),PBo=o("OwlViTModel"),BBo=o(" (OWL-ViT model)"),IBo=l(),G1=a("li"),k1e=a("strong"),NBo=o("pegasus"),qBo=o(" \u2014 "),ez=a("a"),jBo=o("PegasusModel"),DBo=o(" (Pegasus model)"),GBo=l(),O1=a("li"),S1e=a("strong"),OBo=o("pegasus_x"),VBo=o(" \u2014 "),oz=a("a"),XBo=o("PegasusXModel"),zBo=o(" (PEGASUS-X model)"),QBo=l(),V1=a("li"),R1e=a("strong"),WBo=o("perceiver"),UBo=o(" \u2014 "),rz=a("a"),HBo=o("PerceiverModel"),JBo=o(" (Perceiver model)"),YBo=l(),X1=a("li"),P1e=a("strong"),ZBo=o("plbart"),KBo=o(" \u2014 "),tz=a("a"),eIo=o("PLBartModel"),oIo=o(" (PLBart model)"),rIo=l(),z1=a("li"),B1e=a("strong"),tIo=o("poolformer"),aIo=o(" \u2014 "),az=a("a"),nIo=o("PoolFormerModel"),sIo=o(" (PoolFormer model)"),lIo=l(),Q1=a("li"),I1e=a("strong"),iIo=o("prophetnet"),dIo=o(" \u2014 "),nz=a("a"),cIo=o("ProphetNetModel"),mIo=o(" (ProphetNet model)"),fIo=l(),W1=a("li"),N1e=a("strong"),gIo=o("qdqbert"),hIo=o(" \u2014 "),sz=a("a"),uIo=o("QDQBertModel"),pIo=o(" (QDQBert model)"),_Io=l(),U1=a("li"),q1e=a("strong"),bIo=o("reformer"),vIo=o(" \u2014 "),lz=a("a"),FIo=o("ReformerModel"),TIo=o(" (Reformer model)"),MIo=l(),H1=a("li"),j1e=a("strong"),EIo=o("regnet"),CIo=o(" \u2014 "),iz=a("a"),wIo=o("RegNetModel"),AIo=o(" (RegNet model)"),LIo=l(),J1=a("li"),D1e=a("strong"),yIo=o("rembert"),xIo=o(" \u2014 "),dz=a("a"),$Io=o("RemBertModel"),kIo=o(" (RemBERT model)"),SIo=l(),Y1=a("li"),G1e=a("strong"),RIo=o("resnet"),PIo=o(" \u2014 "),cz=a("a"),BIo=o("ResNetModel"),IIo=o(" (ResNet model)"),NIo=l(),Z1=a("li"),O1e=a("strong"),qIo=o("retribert"),jIo=o(" \u2014 "),mz=a("a"),DIo=o("RetriBertModel"),GIo=o(" (RetriBERT model)"),OIo=l(),K1=a("li"),V1e=a("strong"),VIo=o("roberta"),XIo=o(" \u2014 "),fz=a("a"),zIo=o("RobertaModel"),QIo=o(" (RoBERTa model)"),WIo=l(),eb=a("li"),X1e=a("strong"),UIo=o("roformer"),HIo=o(" \u2014 "),gz=a("a"),JIo=o("RoFormerModel"),YIo=o(" (RoFormer model)"),ZIo=l(),ob=a("li"),z1e=a("strong"),KIo=o("segformer"),eNo=o(" \u2014 "),hz=a("a"),oNo=o("SegformerModel"),rNo=o(" (SegFormer model)"),tNo=l(),rb=a("li"),Q1e=a("strong"),aNo=o("sew"),nNo=o(" \u2014 "),uz=a("a"),sNo=o("SEWModel"),lNo=o(" (SEW model)"),iNo=l(),tb=a("li"),W1e=a("strong"),dNo=o("sew-d"),cNo=o(" \u2014 "),pz=a("a"),mNo=o("SEWDModel"),fNo=o(" (SEW-D model)"),gNo=l(),ab=a("li"),U1e=a("strong"),hNo=o("speech_to_text"),uNo=o(" \u2014 "),_z=a("a"),pNo=o("Speech2TextModel"),_No=o(" (Speech2Text model)"),bNo=l(),nb=a("li"),H1e=a("strong"),vNo=o("splinter"),FNo=o(" \u2014 "),bz=a("a"),TNo=o("SplinterModel"),MNo=o(" (Splinter model)"),ENo=l(),sb=a("li"),J1e=a("strong"),CNo=o("squeezebert"),wNo=o(" \u2014 "),vz=a("a"),ANo=o("SqueezeBertModel"),LNo=o(" (SqueezeBERT model)"),yNo=l(),lb=a("li"),Y1e=a("strong"),xNo=o("swin"),$No=o(" \u2014 "),Fz=a("a"),kNo=o("SwinModel"),SNo=o(" (Swin Transformer model)"),RNo=l(),ib=a("li"),Z1e=a("strong"),PNo=o("swinv2"),BNo=o(" \u2014 "),Tz=a("a"),INo=o("Swinv2Model"),NNo=o(" (Swin Transformer V2 model)"),qNo=l(),db=a("li"),K1e=a("strong"),jNo=o("t5"),DNo=o(" \u2014 "),Mz=a("a"),GNo=o("T5Model"),ONo=o(" (T5 model)"),VNo=l(),cb=a("li"),ebe=a("strong"),XNo=o("tapas"),zNo=o(" \u2014 "),Ez=a("a"),QNo=o("TapasModel"),WNo=o(" (TAPAS model)"),UNo=l(),mb=a("li"),obe=a("strong"),HNo=o("time_series_transformer"),JNo=o(" \u2014 "),Cz=a("a"),YNo=o("TimeSeriesTransformerModel"),ZNo=o(" (Time Series Transformer model)"),KNo=l(),fb=a("li"),rbe=a("strong"),eqo=o("trajectory_transformer"),oqo=o(" \u2014 "),wz=a("a"),rqo=o("TrajectoryTransformerModel"),tqo=o(" (Trajectory Transformer model)"),aqo=l(),gb=a("li"),tbe=a("strong"),nqo=o("transfo-xl"),sqo=o(" \u2014 "),Az=a("a"),lqo=o("TransfoXLModel"),iqo=o(" (Transformer-XL model)"),dqo=l(),hb=a("li"),abe=a("strong"),cqo=o("unispeech"),mqo=o(" \u2014 "),Lz=a("a"),fqo=o("UniSpeechModel"),gqo=o(" (UniSpeech model)"),hqo=l(),ub=a("li"),nbe=a("strong"),uqo=o("unispeech-sat"),pqo=o(" \u2014 "),yz=a("a"),_qo=o("UniSpeechSatModel"),bqo=o(" (UniSpeechSat model)"),vqo=l(),pb=a("li"),sbe=a("strong"),Fqo=o("van"),Tqo=o(" \u2014 "),xz=a("a"),Mqo=o("VanModel"),Eqo=o(" (VAN model)"),Cqo=l(),_b=a("li"),lbe=a("strong"),wqo=o("videomae"),Aqo=o(" \u2014 "),$z=a("a"),Lqo=o("VideoMAEModel"),yqo=o(" (VideoMAE model)"),xqo=l(),bb=a("li"),ibe=a("strong"),$qo=o("vilt"),kqo=o(" \u2014 "),kz=a("a"),Sqo=o("ViltModel"),Rqo=o(" (ViLT model)"),Pqo=l(),vb=a("li"),dbe=a("strong"),Bqo=o("vision-text-dual-encoder"),Iqo=o(" \u2014 "),Sz=a("a"),Nqo=o("VisionTextDualEncoderModel"),qqo=o(" (VisionTextDualEncoder model)"),jqo=l(),Fb=a("li"),cbe=a("strong"),Dqo=o("visual_bert"),Gqo=o(" \u2014 "),Rz=a("a"),Oqo=o("VisualBertModel"),Vqo=o(" (VisualBERT model)"),Xqo=l(),Tb=a("li"),mbe=a("strong"),zqo=o("vit"),Qqo=o(" \u2014 "),Pz=a("a"),Wqo=o("ViTModel"),Uqo=o(" (ViT model)"),Hqo=l(),Mb=a("li"),fbe=a("strong"),Jqo=o("vit_mae"),Yqo=o(" \u2014 "),Bz=a("a"),Zqo=o("ViTMAEModel"),Kqo=o(" (ViTMAE model)"),ejo=l(),Eb=a("li"),gbe=a("strong"),ojo=o("vit_msn"),rjo=o(" \u2014 "),Iz=a("a"),tjo=o("ViTMSNModel"),ajo=o(" (ViTMSN model)"),njo=l(),Cb=a("li"),hbe=a("strong"),sjo=o("wav2vec2"),ljo=o(" \u2014 "),Nz=a("a"),ijo=o("Wav2Vec2Model"),djo=o(" (Wav2Vec2 model)"),cjo=l(),wb=a("li"),ube=a("strong"),mjo=o("wav2vec2-conformer"),fjo=o(" \u2014 "),qz=a("a"),gjo=o("Wav2Vec2ConformerModel"),hjo=o(" (Wav2Vec2-Conformer model)"),ujo=l(),Ab=a("li"),pbe=a("strong"),pjo=o("wavlm"),_jo=o(" \u2014 "),jz=a("a"),bjo=o("WavLMModel"),vjo=o(" (WavLM model)"),Fjo=l(),Lb=a("li"),_be=a("strong"),Tjo=o("whisper"),Mjo=o(" \u2014 "),Dz=a("a"),Ejo=o("WhisperModel"),Cjo=o(" (Whisper model)"),wjo=l(),yb=a("li"),bbe=a("strong"),Ajo=o("xclip"),Ljo=o(" \u2014 "),Gz=a("a"),yjo=o("XCLIPModel"),xjo=o(" (X-CLIP model)"),$jo=l(),xb=a("li"),vbe=a("strong"),kjo=o("xglm"),Sjo=o(" \u2014 "),Oz=a("a"),Rjo=o("XGLMModel"),Pjo=o(" (XGLM model)"),Bjo=l(),$b=a("li"),Fbe=a("strong"),Ijo=o("xlm"),Njo=o(" \u2014 "),Vz=a("a"),qjo=o("XLMModel"),jjo=o(" (XLM model)"),Djo=l(),kb=a("li"),Tbe=a("strong"),Gjo=o("xlm-prophetnet"),Ojo=o(" \u2014 "),Xz=a("a"),Vjo=o("XLMProphetNetModel"),Xjo=o(" (XLM-ProphetNet model)"),zjo=l(),Sb=a("li"),Mbe=a("strong"),Qjo=o("xlm-roberta"),Wjo=o(" \u2014 "),zz=a("a"),Ujo=o("XLMRobertaModel"),Hjo=o(" (XLM-RoBERTa model)"),Jjo=l(),Rb=a("li"),Ebe=a("strong"),Yjo=o("xlm-roberta-xl"),Zjo=o(" \u2014 "),Qz=a("a"),Kjo=o("XLMRobertaXLModel"),eDo=o(" (XLM-RoBERTa-XL model)"),oDo=l(),Pb=a("li"),Cbe=a("strong"),rDo=o("xlnet"),tDo=o(" \u2014 "),Wz=a("a"),aDo=o("XLNetModel"),nDo=o(" (XLNet model)"),sDo=l(),Bb=a("li"),wbe=a("strong"),lDo=o("yolos"),iDo=o(" \u2014 "),Uz=a("a"),dDo=o("YolosModel"),cDo=o(" (YOLOS model)"),mDo=l(),Ib=a("li"),Abe=a("strong"),fDo=o("yoso"),gDo=o(" \u2014 "),Hz=a("a"),hDo=o("YosoModel"),uDo=o(" (YOSO model)"),pDo=l(),Nb=a("p"),_Do=o("The model is set in evaluation mode by default using "),Lbe=a("code"),bDo=o("model.eval()"),vDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),FDo=o("model.train()"),TDo=l(),F(qb.$$.fragment),voo=l(),Ad=a("h2"),jb=a("a"),xbe=a("span"),F(r$.$$.fragment),MDo=l(),$be=a("span"),EDo=o("AutoModelForPreTraining"),Foo=l(),Io=a("div"),F(t$.$$.fragment),CDo=l(),Ld=a("p"),wDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jz=a("a"),ADo=o("from_pretrained()"),LDo=o(" class method or the "),Yz=a("a"),yDo=o("from_config()"),xDo=o(` class
method.`),$Do=l(),a$=a("p"),kDo=o("This class cannot be instantiated directly using "),kbe=a("code"),SDo=o("__init__()"),RDo=o(" (throws an error)."),PDo=l(),Ft=a("div"),F(n$.$$.fragment),BDo=l(),Sbe=a("p"),IDo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NDo=l(),yd=a("p"),qDo=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),jDo=o("not"),DDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),GDo=o("from_pretrained()"),ODo=o(" to load the model weights."),VDo=l(),F(Db.$$.fragment),XDo=l(),eo=a("div"),F(s$.$$.fragment),zDo=l(),Pbe=a("p"),QDo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WDo=l(),on=a("p"),UDo=o("The model class to instantiate is selected based on the "),Bbe=a("code"),HDo=o("model_type"),JDo=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),YDo=o("pretrained_model_name_or_path"),ZDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),KDo=o("pretrained_model_name_or_path"),eGo=o(":"),oGo=l(),G=a("ul"),Gb=a("li"),qbe=a("strong"),rGo=o("albert"),tGo=o(" \u2014 "),Kz=a("a"),aGo=o("AlbertForPreTraining"),nGo=o(" (ALBERT model)"),sGo=l(),Ob=a("li"),jbe=a("strong"),lGo=o("bart"),iGo=o(" \u2014 "),eQ=a("a"),dGo=o("BartForConditionalGeneration"),cGo=o(" (BART model)"),mGo=l(),Vb=a("li"),Dbe=a("strong"),fGo=o("bert"),gGo=o(" \u2014 "),oQ=a("a"),hGo=o("BertForPreTraining"),uGo=o(" (BERT model)"),pGo=l(),Xb=a("li"),Gbe=a("strong"),_Go=o("big_bird"),bGo=o(" \u2014 "),rQ=a("a"),vGo=o("BigBirdForPreTraining"),FGo=o(" (BigBird model)"),TGo=l(),zb=a("li"),Obe=a("strong"),MGo=o("bloom"),EGo=o(" \u2014 "),tQ=a("a"),CGo=o("BloomForCausalLM"),wGo=o(" (BLOOM model)"),AGo=l(),Qb=a("li"),Vbe=a("strong"),LGo=o("camembert"),yGo=o(" \u2014 "),aQ=a("a"),xGo=o("CamembertForMaskedLM"),$Go=o(" (CamemBERT model)"),kGo=l(),Wb=a("li"),Xbe=a("strong"),SGo=o("ctrl"),RGo=o(" \u2014 "),nQ=a("a"),PGo=o("CTRLLMHeadModel"),BGo=o(" (CTRL model)"),IGo=l(),Ub=a("li"),zbe=a("strong"),NGo=o("data2vec-text"),qGo=o(" \u2014 "),sQ=a("a"),jGo=o("Data2VecTextForMaskedLM"),DGo=o(" (Data2VecText model)"),GGo=l(),Hb=a("li"),Qbe=a("strong"),OGo=o("deberta"),VGo=o(" \u2014 "),lQ=a("a"),XGo=o("DebertaForMaskedLM"),zGo=o(" (DeBERTa model)"),QGo=l(),Jb=a("li"),Wbe=a("strong"),WGo=o("deberta-v2"),UGo=o(" \u2014 "),iQ=a("a"),HGo=o("DebertaV2ForMaskedLM"),JGo=o(" (DeBERTa-v2 model)"),YGo=l(),Yb=a("li"),Ube=a("strong"),ZGo=o("distilbert"),KGo=o(" \u2014 "),dQ=a("a"),eOo=o("DistilBertForMaskedLM"),oOo=o(" (DistilBERT model)"),rOo=l(),Zb=a("li"),Hbe=a("strong"),tOo=o("electra"),aOo=o(" \u2014 "),cQ=a("a"),nOo=o("ElectraForPreTraining"),sOo=o(" (ELECTRA model)"),lOo=l(),Kb=a("li"),Jbe=a("strong"),iOo=o("ernie"),dOo=o(" \u2014 "),mQ=a("a"),cOo=o("ErnieForPreTraining"),mOo=o(" (ERNIE model)"),fOo=l(),e2=a("li"),Ybe=a("strong"),gOo=o("flaubert"),hOo=o(" \u2014 "),fQ=a("a"),uOo=o("FlaubertWithLMHeadModel"),pOo=o(" (FlauBERT model)"),_Oo=l(),o2=a("li"),Zbe=a("strong"),bOo=o("flava"),vOo=o(" \u2014 "),gQ=a("a"),FOo=o("FlavaForPreTraining"),TOo=o(" (FLAVA model)"),MOo=l(),r2=a("li"),Kbe=a("strong"),EOo=o("fnet"),COo=o(" \u2014 "),hQ=a("a"),wOo=o("FNetForPreTraining"),AOo=o(" (FNet model)"),LOo=l(),t2=a("li"),e2e=a("strong"),yOo=o("fsmt"),xOo=o(" \u2014 "),uQ=a("a"),$Oo=o("FSMTForConditionalGeneration"),kOo=o(" (FairSeq Machine-Translation model)"),SOo=l(),a2=a("li"),o2e=a("strong"),ROo=o("funnel"),POo=o(" \u2014 "),pQ=a("a"),BOo=o("FunnelForPreTraining"),IOo=o(" (Funnel Transformer model)"),NOo=l(),n2=a("li"),r2e=a("strong"),qOo=o("gpt2"),jOo=o(" \u2014 "),_Q=a("a"),DOo=o("GPT2LMHeadModel"),GOo=o(" (OpenAI GPT-2 model)"),OOo=l(),s2=a("li"),t2e=a("strong"),VOo=o("ibert"),XOo=o(" \u2014 "),bQ=a("a"),zOo=o("IBertForMaskedLM"),QOo=o(" (I-BERT model)"),WOo=l(),l2=a("li"),a2e=a("strong"),UOo=o("layoutlm"),HOo=o(" \u2014 "),vQ=a("a"),JOo=o("LayoutLMForMaskedLM"),YOo=o(" (LayoutLM model)"),ZOo=l(),i2=a("li"),n2e=a("strong"),KOo=o("longformer"),eVo=o(" \u2014 "),FQ=a("a"),oVo=o("LongformerForMaskedLM"),rVo=o(" (Longformer model)"),tVo=l(),d2=a("li"),s2e=a("strong"),aVo=o("luke"),nVo=o(" \u2014 "),TQ=a("a"),sVo=o("LukeForMaskedLM"),lVo=o(" (LUKE model)"),iVo=l(),c2=a("li"),l2e=a("strong"),dVo=o("lxmert"),cVo=o(" \u2014 "),MQ=a("a"),mVo=o("LxmertForPreTraining"),fVo=o(" (LXMERT model)"),gVo=l(),m2=a("li"),i2e=a("strong"),hVo=o("megatron-bert"),uVo=o(" \u2014 "),EQ=a("a"),pVo=o("MegatronBertForPreTraining"),_Vo=o(" (Megatron-BERT model)"),bVo=l(),f2=a("li"),d2e=a("strong"),vVo=o("mobilebert"),FVo=o(" \u2014 "),CQ=a("a"),TVo=o("MobileBertForPreTraining"),MVo=o(" (MobileBERT model)"),EVo=l(),g2=a("li"),c2e=a("strong"),CVo=o("mpnet"),wVo=o(" \u2014 "),wQ=a("a"),AVo=o("MPNetForMaskedLM"),LVo=o(" (MPNet model)"),yVo=l(),h2=a("li"),m2e=a("strong"),xVo=o("mvp"),$Vo=o(" \u2014 "),AQ=a("a"),kVo=o("MvpForConditionalGeneration"),SVo=o(" (MVP model)"),RVo=l(),u2=a("li"),f2e=a("strong"),PVo=o("nezha"),BVo=o(" \u2014 "),LQ=a("a"),IVo=o("NezhaForPreTraining"),NVo=o(" (Nezha model)"),qVo=l(),p2=a("li"),g2e=a("strong"),jVo=o("openai-gpt"),DVo=o(" \u2014 "),yQ=a("a"),GVo=o("OpenAIGPTLMHeadModel"),OVo=o(" (OpenAI GPT model)"),VVo=l(),_2=a("li"),h2e=a("strong"),XVo=o("retribert"),zVo=o(" \u2014 "),xQ=a("a"),QVo=o("RetriBertModel"),WVo=o(" (RetriBERT model)"),UVo=l(),b2=a("li"),u2e=a("strong"),HVo=o("roberta"),JVo=o(" \u2014 "),$Q=a("a"),YVo=o("RobertaForMaskedLM"),ZVo=o(" (RoBERTa model)"),KVo=l(),v2=a("li"),p2e=a("strong"),eXo=o("splinter"),oXo=o(" \u2014 "),kQ=a("a"),rXo=o("SplinterForPreTraining"),tXo=o(" (Splinter model)"),aXo=l(),F2=a("li"),_2e=a("strong"),nXo=o("squeezebert"),sXo=o(" \u2014 "),SQ=a("a"),lXo=o("SqueezeBertForMaskedLM"),iXo=o(" (SqueezeBERT model)"),dXo=l(),T2=a("li"),b2e=a("strong"),cXo=o("t5"),mXo=o(" \u2014 "),RQ=a("a"),fXo=o("T5ForConditionalGeneration"),gXo=o(" (T5 model)"),hXo=l(),M2=a("li"),v2e=a("strong"),uXo=o("tapas"),pXo=o(" \u2014 "),PQ=a("a"),_Xo=o("TapasForMaskedLM"),bXo=o(" (TAPAS model)"),vXo=l(),E2=a("li"),F2e=a("strong"),FXo=o("transfo-xl"),TXo=o(" \u2014 "),BQ=a("a"),MXo=o("TransfoXLLMHeadModel"),EXo=o(" (Transformer-XL model)"),CXo=l(),C2=a("li"),T2e=a("strong"),wXo=o("unispeech"),AXo=o(" \u2014 "),IQ=a("a"),LXo=o("UniSpeechForPreTraining"),yXo=o(" (UniSpeech model)"),xXo=l(),w2=a("li"),M2e=a("strong"),$Xo=o("unispeech-sat"),kXo=o(" \u2014 "),NQ=a("a"),SXo=o("UniSpeechSatForPreTraining"),RXo=o(" (UniSpeechSat model)"),PXo=l(),A2=a("li"),E2e=a("strong"),BXo=o("videomae"),IXo=o(" \u2014 "),qQ=a("a"),NXo=o("VideoMAEForPreTraining"),qXo=o(" (VideoMAE model)"),jXo=l(),L2=a("li"),C2e=a("strong"),DXo=o("visual_bert"),GXo=o(" \u2014 "),jQ=a("a"),OXo=o("VisualBertForPreTraining"),VXo=o(" (VisualBERT model)"),XXo=l(),y2=a("li"),w2e=a("strong"),zXo=o("vit_mae"),QXo=o(" \u2014 "),DQ=a("a"),WXo=o("ViTMAEForPreTraining"),UXo=o(" (ViTMAE model)"),HXo=l(),x2=a("li"),A2e=a("strong"),JXo=o("wav2vec2"),YXo=o(" \u2014 "),GQ=a("a"),ZXo=o("Wav2Vec2ForPreTraining"),KXo=o(" (Wav2Vec2 model)"),ezo=l(),$2=a("li"),L2e=a("strong"),ozo=o("wav2vec2-conformer"),rzo=o(" \u2014 "),OQ=a("a"),tzo=o("Wav2Vec2ConformerForPreTraining"),azo=o(" (Wav2Vec2-Conformer model)"),nzo=l(),k2=a("li"),y2e=a("strong"),szo=o("xlm"),lzo=o(" \u2014 "),VQ=a("a"),izo=o("XLMWithLMHeadModel"),dzo=o(" (XLM model)"),czo=l(),S2=a("li"),x2e=a("strong"),mzo=o("xlm-roberta"),fzo=o(" \u2014 "),XQ=a("a"),gzo=o("XLMRobertaForMaskedLM"),hzo=o(" (XLM-RoBERTa model)"),uzo=l(),R2=a("li"),$2e=a("strong"),pzo=o("xlm-roberta-xl"),_zo=o(" \u2014 "),zQ=a("a"),bzo=o("XLMRobertaXLForMaskedLM"),vzo=o(" (XLM-RoBERTa-XL model)"),Fzo=l(),P2=a("li"),k2e=a("strong"),Tzo=o("xlnet"),Mzo=o(" \u2014 "),QQ=a("a"),Ezo=o("XLNetLMHeadModel"),Czo=o(" (XLNet model)"),wzo=l(),B2=a("p"),Azo=o("The model is set in evaluation mode by default using "),S2e=a("code"),Lzo=o("model.eval()"),yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=a("code"),xzo=o("model.train()"),$zo=l(),F(I2.$$.fragment),Too=l(),xd=a("h2"),N2=a("a"),P2e=a("span"),F(l$.$$.fragment),kzo=l(),B2e=a("span"),Szo=o("AutoModelForCausalLM"),Moo=l(),No=a("div"),F(i$.$$.fragment),Rzo=l(),$d=a("p"),Pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WQ=a("a"),Bzo=o("from_pretrained()"),Izo=o(" class method or the "),UQ=a("a"),Nzo=o("from_config()"),qzo=o(` class
method.`),jzo=l(),d$=a("p"),Dzo=o("This class cannot be instantiated directly using "),I2e=a("code"),Gzo=o("__init__()"),Ozo=o(" (throws an error)."),Vzo=l(),Tt=a("div"),F(c$.$$.fragment),Xzo=l(),N2e=a("p"),zzo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qzo=l(),kd=a("p"),Wzo=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),Uzo=o("not"),Hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" to load the model weights."),Zzo=l(),F(q2.$$.fragment),Kzo=l(),oo=a("div"),F(m$.$$.fragment),eQo=l(),j2e=a("p"),oQo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rQo=l(),rn=a("p"),tQo=o("The model class to instantiate is selected based on the "),D2e=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),Q=a("ul"),j2=a("li"),V2e=a("strong"),mQo=o("bart"),fQo=o(" \u2014 "),JQ=a("a"),gQo=o("BartForCausalLM"),hQo=o(" (BART model)"),uQo=l(),D2=a("li"),X2e=a("strong"),pQo=o("bert"),_Qo=o(" \u2014 "),YQ=a("a"),bQo=o("BertLMHeadModel"),vQo=o(" (BERT model)"),FQo=l(),G2=a("li"),z2e=a("strong"),TQo=o("bert-generation"),MQo=o(" \u2014 "),ZQ=a("a"),EQo=o("BertGenerationDecoder"),CQo=o(" (Bert Generation model)"),wQo=l(),O2=a("li"),Q2e=a("strong"),AQo=o("big_bird"),LQo=o(" \u2014 "),KQ=a("a"),yQo=o("BigBirdForCausalLM"),xQo=o(" (BigBird model)"),$Qo=l(),V2=a("li"),W2e=a("strong"),kQo=o("bigbird_pegasus"),SQo=o(" \u2014 "),eW=a("a"),RQo=o("BigBirdPegasusForCausalLM"),PQo=o(" (BigBird-Pegasus model)"),BQo=l(),X2=a("li"),U2e=a("strong"),IQo=o("blenderbot"),NQo=o(" \u2014 "),oW=a("a"),qQo=o("BlenderbotForCausalLM"),jQo=o(" (Blenderbot model)"),DQo=l(),z2=a("li"),H2e=a("strong"),GQo=o("blenderbot-small"),OQo=o(" \u2014 "),rW=a("a"),VQo=o("BlenderbotSmallForCausalLM"),XQo=o(" (BlenderbotSmall model)"),zQo=l(),Q2=a("li"),J2e=a("strong"),QQo=o("bloom"),WQo=o(" \u2014 "),tW=a("a"),UQo=o("BloomForCausalLM"),HQo=o(" (BLOOM model)"),JQo=l(),W2=a("li"),Y2e=a("strong"),YQo=o("camembert"),ZQo=o(" \u2014 "),aW=a("a"),KQo=o("CamembertForCausalLM"),eWo=o(" (CamemBERT model)"),oWo=l(),U2=a("li"),Z2e=a("strong"),rWo=o("codegen"),tWo=o(" \u2014 "),nW=a("a"),aWo=o("CodeGenForCausalLM"),nWo=o(" (CodeGen model)"),sWo=l(),H2=a("li"),K2e=a("strong"),lWo=o("ctrl"),iWo=o(" \u2014 "),sW=a("a"),dWo=o("CTRLLMHeadModel"),cWo=o(" (CTRL model)"),mWo=l(),J2=a("li"),eve=a("strong"),fWo=o("data2vec-text"),gWo=o(" \u2014 "),lW=a("a"),hWo=o("Data2VecTextForCausalLM"),uWo=o(" (Data2VecText model)"),pWo=l(),Y2=a("li"),ove=a("strong"),_Wo=o("electra"),bWo=o(" \u2014 "),iW=a("a"),vWo=o("ElectraForCausalLM"),FWo=o(" (ELECTRA model)"),TWo=l(),Z2=a("li"),rve=a("strong"),MWo=o("ernie"),EWo=o(" \u2014 "),dW=a("a"),CWo=o("ErnieForCausalLM"),wWo=o(" (ERNIE model)"),AWo=l(),K2=a("li"),tve=a("strong"),LWo=o("gpt2"),yWo=o(" \u2014 "),cW=a("a"),xWo=o("GPT2LMHeadModel"),$Wo=o(" (OpenAI GPT-2 model)"),kWo=l(),ev=a("li"),ave=a("strong"),SWo=o("gpt_neo"),RWo=o(" \u2014 "),mW=a("a"),PWo=o("GPTNeoForCausalLM"),BWo=o(" (GPT Neo model)"),IWo=l(),ov=a("li"),nve=a("strong"),NWo=o("gpt_neox"),qWo=o(" \u2014 "),fW=a("a"),jWo=o("GPTNeoXForCausalLM"),DWo=o(" (GPT NeoX model)"),GWo=l(),rv=a("li"),sve=a("strong"),OWo=o("gpt_neox_japanese"),VWo=o(" \u2014 "),gW=a("a"),XWo=o("GPTNeoXJapaneseForCausalLM"),zWo=o(" (GPT NeoX Japanese model)"),QWo=l(),tv=a("li"),lve=a("strong"),WWo=o("gptj"),UWo=o(" \u2014 "),hW=a("a"),HWo=o("GPTJForCausalLM"),JWo=o(" (GPT-J model)"),YWo=l(),av=a("li"),ive=a("strong"),ZWo=o("marian"),KWo=o(" \u2014 "),uW=a("a"),eUo=o("MarianForCausalLM"),oUo=o(" (Marian model)"),rUo=l(),nv=a("li"),dve=a("strong"),tUo=o("mbart"),aUo=o(" \u2014 "),pW=a("a"),nUo=o("MBartForCausalLM"),sUo=o(" (mBART model)"),lUo=l(),sv=a("li"),cve=a("strong"),iUo=o("megatron-bert"),dUo=o(" \u2014 "),_W=a("a"),cUo=o("MegatronBertForCausalLM"),mUo=o(" (Megatron-BERT model)"),fUo=l(),lv=a("li"),mve=a("strong"),gUo=o("mvp"),hUo=o(" \u2014 "),bW=a("a"),uUo=o("MvpForCausalLM"),pUo=o(" (MVP model)"),_Uo=l(),iv=a("li"),fve=a("strong"),bUo=o("openai-gpt"),vUo=o(" \u2014 "),vW=a("a"),FUo=o("OpenAIGPTLMHeadModel"),TUo=o(" (OpenAI GPT model)"),MUo=l(),dv=a("li"),gve=a("strong"),EUo=o("opt"),CUo=o(" \u2014 "),FW=a("a"),wUo=o("OPTForCausalLM"),AUo=o(" (OPT model)"),LUo=l(),cv=a("li"),hve=a("strong"),yUo=o("pegasus"),xUo=o(" \u2014 "),TW=a("a"),$Uo=o("PegasusForCausalLM"),kUo=o(" (Pegasus model)"),SUo=l(),mv=a("li"),uve=a("strong"),RUo=o("plbart"),PUo=o(" \u2014 "),MW=a("a"),BUo=o("PLBartForCausalLM"),IUo=o(" (PLBart model)"),NUo=l(),fv=a("li"),pve=a("strong"),qUo=o("prophetnet"),jUo=o(" \u2014 "),EW=a("a"),DUo=o("ProphetNetForCausalLM"),GUo=o(" (ProphetNet model)"),OUo=l(),gv=a("li"),_ve=a("strong"),VUo=o("qdqbert"),XUo=o(" \u2014 "),CW=a("a"),zUo=o("QDQBertLMHeadModel"),QUo=o(" (QDQBert model)"),WUo=l(),hv=a("li"),bve=a("strong"),UUo=o("reformer"),HUo=o(" \u2014 "),wW=a("a"),JUo=o("ReformerModelWithLMHead"),YUo=o(" (Reformer model)"),ZUo=l(),uv=a("li"),vve=a("strong"),KUo=o("rembert"),eHo=o(" \u2014 "),AW=a("a"),oHo=o("RemBertForCausalLM"),rHo=o(" (RemBERT model)"),tHo=l(),pv=a("li"),Fve=a("strong"),aHo=o("roberta"),nHo=o(" \u2014 "),LW=a("a"),sHo=o("RobertaForCausalLM"),lHo=o(" (RoBERTa model)"),iHo=l(),_v=a("li"),Tve=a("strong"),dHo=o("roformer"),cHo=o(" \u2014 "),yW=a("a"),mHo=o("RoFormerForCausalLM"),fHo=o(" (RoFormer model)"),gHo=l(),bv=a("li"),Mve=a("strong"),hHo=o("speech_to_text_2"),uHo=o(" \u2014 "),xW=a("a"),pHo=o("Speech2Text2ForCausalLM"),_Ho=o(" (Speech2Text2 model)"),bHo=l(),vv=a("li"),Eve=a("strong"),vHo=o("transfo-xl"),FHo=o(" \u2014 "),$W=a("a"),THo=o("TransfoXLLMHeadModel"),MHo=o(" (Transformer-XL model)"),EHo=l(),Fv=a("li"),Cve=a("strong"),CHo=o("trocr"),wHo=o(" \u2014 "),kW=a("a"),AHo=o("TrOCRForCausalLM"),LHo=o(" (TrOCR model)"),yHo=l(),Tv=a("li"),wve=a("strong"),xHo=o("xglm"),$Ho=o(" \u2014 "),SW=a("a"),kHo=o("XGLMForCausalLM"),SHo=o(" (XGLM model)"),RHo=l(),Mv=a("li"),Ave=a("strong"),PHo=o("xlm"),BHo=o(" \u2014 "),RW=a("a"),IHo=o("XLMWithLMHeadModel"),NHo=o(" (XLM model)"),qHo=l(),Ev=a("li"),Lve=a("strong"),jHo=o("xlm-prophetnet"),DHo=o(" \u2014 "),PW=a("a"),GHo=o("XLMProphetNetForCausalLM"),OHo=o(" (XLM-ProphetNet model)"),VHo=l(),Cv=a("li"),yve=a("strong"),XHo=o("xlm-roberta"),zHo=o(" \u2014 "),BW=a("a"),QHo=o("XLMRobertaForCausalLM"),WHo=o(" (XLM-RoBERTa model)"),UHo=l(),wv=a("li"),xve=a("strong"),HHo=o("xlm-roberta-xl"),JHo=o(" \u2014 "),IW=a("a"),YHo=o("XLMRobertaXLForCausalLM"),ZHo=o(" (XLM-RoBERTa-XL model)"),KHo=l(),Av=a("li"),$ve=a("strong"),eJo=o("xlnet"),oJo=o(" \u2014 "),NW=a("a"),rJo=o("XLNetLMHeadModel"),tJo=o(" (XLNet model)"),aJo=l(),Lv=a("p"),nJo=o("The model is set in evaluation mode by default using "),kve=a("code"),sJo=o("model.eval()"),lJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=a("code"),iJo=o("model.train()"),dJo=l(),F(yv.$$.fragment),Eoo=l(),Sd=a("h2"),xv=a("a"),Rve=a("span"),F(f$.$$.fragment),cJo=l(),Pve=a("span"),mJo=o("AutoModelForMaskedLM"),Coo=l(),qo=a("div"),F(g$.$$.fragment),fJo=l(),Rd=a("p"),gJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qW=a("a"),hJo=o("from_pretrained()"),uJo=o(" class method or the "),jW=a("a"),pJo=o("from_config()"),_Jo=o(` class
method.`),bJo=l(),h$=a("p"),vJo=o("This class cannot be instantiated directly using "),Bve=a("code"),FJo=o("__init__()"),TJo=o(" (throws an error)."),MJo=l(),Mt=a("div"),F(u$.$$.fragment),EJo=l(),Ive=a("p"),CJo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wJo=l(),Pd=a("p"),AJo=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),LJo=o("not"),yJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),xJo=o("from_pretrained()"),$Jo=o(" to load the model weights."),kJo=l(),F($v.$$.fragment),SJo=l(),ro=a("div"),F(p$.$$.fragment),RJo=l(),qve=a("p"),PJo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BJo=l(),tn=a("p"),IJo=o("The model class to instantiate is selected based on the "),jve=a("code"),NJo=o("model_type"),qJo=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),GJo=o("pretrained_model_name_or_path"),OJo=o(":"),VJo=l(),J=a("ul"),kv=a("li"),Ove=a("strong"),XJo=o("albert"),zJo=o(" \u2014 "),GW=a("a"),QJo=o("AlbertForMaskedLM"),WJo=o(" (ALBERT model)"),UJo=l(),Sv=a("li"),Vve=a("strong"),HJo=o("bart"),JJo=o(" \u2014 "),OW=a("a"),YJo=o("BartForConditionalGeneration"),ZJo=o(" (BART model)"),KJo=l(),Rv=a("li"),Xve=a("strong"),eYo=o("bert"),oYo=o(" \u2014 "),VW=a("a"),rYo=o("BertForMaskedLM"),tYo=o(" (BERT model)"),aYo=l(),Pv=a("li"),zve=a("strong"),nYo=o("big_bird"),sYo=o(" \u2014 "),XW=a("a"),lYo=o("BigBirdForMaskedLM"),iYo=o(" (BigBird model)"),dYo=l(),Bv=a("li"),Qve=a("strong"),cYo=o("camembert"),mYo=o(" \u2014 "),zW=a("a"),fYo=o("CamembertForMaskedLM"),gYo=o(" (CamemBERT model)"),hYo=l(),Iv=a("li"),Wve=a("strong"),uYo=o("convbert"),pYo=o(" \u2014 "),QW=a("a"),_Yo=o("ConvBertForMaskedLM"),bYo=o(" (ConvBERT model)"),vYo=l(),Nv=a("li"),Uve=a("strong"),FYo=o("data2vec-text"),TYo=o(" \u2014 "),WW=a("a"),MYo=o("Data2VecTextForMaskedLM"),EYo=o(" (Data2VecText model)"),CYo=l(),qv=a("li"),Hve=a("strong"),wYo=o("deberta"),AYo=o(" \u2014 "),UW=a("a"),LYo=o("DebertaForMaskedLM"),yYo=o(" (DeBERTa model)"),xYo=l(),jv=a("li"),Jve=a("strong"),$Yo=o("deberta-v2"),kYo=o(" \u2014 "),HW=a("a"),SYo=o("DebertaV2ForMaskedLM"),RYo=o(" (DeBERTa-v2 model)"),PYo=l(),Dv=a("li"),Yve=a("strong"),BYo=o("distilbert"),IYo=o(" \u2014 "),JW=a("a"),NYo=o("DistilBertForMaskedLM"),qYo=o(" (DistilBERT model)"),jYo=l(),Gv=a("li"),Zve=a("strong"),DYo=o("electra"),GYo=o(" \u2014 "),YW=a("a"),OYo=o("ElectraForMaskedLM"),VYo=o(" (ELECTRA model)"),XYo=l(),Ov=a("li"),Kve=a("strong"),zYo=o("ernie"),QYo=o(" \u2014 "),ZW=a("a"),WYo=o("ErnieForMaskedLM"),UYo=o(" (ERNIE model)"),HYo=l(),Vv=a("li"),eFe=a("strong"),JYo=o("flaubert"),YYo=o(" \u2014 "),KW=a("a"),ZYo=o("FlaubertWithLMHeadModel"),KYo=o(" (FlauBERT model)"),eZo=l(),Xv=a("li"),oFe=a("strong"),oZo=o("fnet"),rZo=o(" \u2014 "),eU=a("a"),tZo=o("FNetForMaskedLM"),aZo=o(" (FNet model)"),nZo=l(),zv=a("li"),rFe=a("strong"),sZo=o("funnel"),lZo=o(" \u2014 "),oU=a("a"),iZo=o("FunnelForMaskedLM"),dZo=o(" (Funnel Transformer model)"),cZo=l(),Qv=a("li"),tFe=a("strong"),mZo=o("ibert"),fZo=o(" \u2014 "),rU=a("a"),gZo=o("IBertForMaskedLM"),hZo=o(" (I-BERT model)"),uZo=l(),Wv=a("li"),aFe=a("strong"),pZo=o("layoutlm"),_Zo=o(" \u2014 "),tU=a("a"),bZo=o("LayoutLMForMaskedLM"),vZo=o(" (LayoutLM model)"),FZo=l(),Uv=a("li"),nFe=a("strong"),TZo=o("longformer"),MZo=o(" \u2014 "),aU=a("a"),EZo=o("LongformerForMaskedLM"),CZo=o(" (Longformer model)"),wZo=l(),Hv=a("li"),sFe=a("strong"),AZo=o("luke"),LZo=o(" \u2014 "),nU=a("a"),yZo=o("LukeForMaskedLM"),xZo=o(" (LUKE model)"),$Zo=l(),Jv=a("li"),lFe=a("strong"),kZo=o("mbart"),SZo=o(" \u2014 "),sU=a("a"),RZo=o("MBartForConditionalGeneration"),PZo=o(" (mBART model)"),BZo=l(),Yv=a("li"),iFe=a("strong"),IZo=o("megatron-bert"),NZo=o(" \u2014 "),lU=a("a"),qZo=o("MegatronBertForMaskedLM"),jZo=o(" (Megatron-BERT model)"),DZo=l(),Zv=a("li"),dFe=a("strong"),GZo=o("mobilebert"),OZo=o(" \u2014 "),iU=a("a"),VZo=o("MobileBertForMaskedLM"),XZo=o(" (MobileBERT model)"),zZo=l(),Kv=a("li"),cFe=a("strong"),QZo=o("mpnet"),WZo=o(" \u2014 "),dU=a("a"),UZo=o("MPNetForMaskedLM"),HZo=o(" (MPNet model)"),JZo=l(),eF=a("li"),mFe=a("strong"),YZo=o("mvp"),ZZo=o(" \u2014 "),cU=a("a"),KZo=o("MvpForConditionalGeneration"),eKo=o(" (MVP model)"),oKo=l(),oF=a("li"),fFe=a("strong"),rKo=o("nezha"),tKo=o(" \u2014 "),mU=a("a"),aKo=o("NezhaForMaskedLM"),nKo=o(" (Nezha model)"),sKo=l(),rF=a("li"),gFe=a("strong"),lKo=o("nystromformer"),iKo=o(" \u2014 "),fU=a("a"),dKo=o("NystromformerForMaskedLM"),cKo=o(" (Nystr\xF6mformer model)"),mKo=l(),tF=a("li"),hFe=a("strong"),fKo=o("perceiver"),gKo=o(" \u2014 "),gU=a("a"),hKo=o("PerceiverForMaskedLM"),uKo=o(" (Perceiver model)"),pKo=l(),aF=a("li"),uFe=a("strong"),_Ko=o("qdqbert"),bKo=o(" \u2014 "),hU=a("a"),vKo=o("QDQBertForMaskedLM"),FKo=o(" (QDQBert model)"),TKo=l(),nF=a("li"),pFe=a("strong"),MKo=o("reformer"),EKo=o(" \u2014 "),uU=a("a"),CKo=o("ReformerForMaskedLM"),wKo=o(" (Reformer model)"),AKo=l(),sF=a("li"),_Fe=a("strong"),LKo=o("rembert"),yKo=o(" \u2014 "),pU=a("a"),xKo=o("RemBertForMaskedLM"),$Ko=o(" (RemBERT model)"),kKo=l(),lF=a("li"),bFe=a("strong"),SKo=o("roberta"),RKo=o(" \u2014 "),_U=a("a"),PKo=o("RobertaForMaskedLM"),BKo=o(" (RoBERTa model)"),IKo=l(),iF=a("li"),vFe=a("strong"),NKo=o("roformer"),qKo=o(" \u2014 "),bU=a("a"),jKo=o("RoFormerForMaskedLM"),DKo=o(" (RoFormer model)"),GKo=l(),dF=a("li"),FFe=a("strong"),OKo=o("squeezebert"),VKo=o(" \u2014 "),vU=a("a"),XKo=o("SqueezeBertForMaskedLM"),zKo=o(" (SqueezeBERT model)"),QKo=l(),cF=a("li"),TFe=a("strong"),WKo=o("tapas"),UKo=o(" \u2014 "),FU=a("a"),HKo=o("TapasForMaskedLM"),JKo=o(" (TAPAS model)"),YKo=l(),mF=a("li"),MFe=a("strong"),ZKo=o("wav2vec2"),KKo=o(" \u2014 "),EFe=a("code"),eer=o("Wav2Vec2ForMaskedLM"),oer=o(" (Wav2Vec2 model)"),rer=l(),fF=a("li"),CFe=a("strong"),ter=o("xlm"),aer=o(" \u2014 "),TU=a("a"),ner=o("XLMWithLMHeadModel"),ser=o(" (XLM model)"),ler=l(),gF=a("li"),wFe=a("strong"),ier=o("xlm-roberta"),der=o(" \u2014 "),MU=a("a"),cer=o("XLMRobertaForMaskedLM"),mer=o(" (XLM-RoBERTa model)"),fer=l(),hF=a("li"),AFe=a("strong"),ger=o("xlm-roberta-xl"),her=o(" \u2014 "),EU=a("a"),uer=o("XLMRobertaXLForMaskedLM"),per=o(" (XLM-RoBERTa-XL model)"),_er=l(),uF=a("li"),LFe=a("strong"),ber=o("yoso"),ver=o(" \u2014 "),CU=a("a"),Fer=o("YosoForMaskedLM"),Ter=o(" (YOSO model)"),Mer=l(),pF=a("p"),Eer=o("The model is set in evaluation mode by default using "),yFe=a("code"),Cer=o("model.eval()"),wer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=a("code"),Aer=o("model.train()"),Ler=l(),F(_F.$$.fragment),woo=l(),Bd=a("h2"),bF=a("a"),$Fe=a("span"),F(_$.$$.fragment),yer=l(),kFe=a("span"),xer=o("AutoModelForSeq2SeqLM"),Aoo=l(),jo=a("div"),F(b$.$$.fragment),$er=l(),Id=a("p"),ker=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wU=a("a"),Ser=o("from_pretrained()"),Rer=o(" class method or the "),AU=a("a"),Per=o("from_config()"),Ber=o(` class
method.`),Ier=l(),v$=a("p"),Ner=o("This class cannot be instantiated directly using "),SFe=a("code"),qer=o("__init__()"),jer=o(" (throws an error)."),Der=l(),Et=a("div"),F(F$.$$.fragment),Ger=l(),RFe=a("p"),Oer=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ver=l(),Nd=a("p"),Xer=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),zer=o("not"),Qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),Wer=o("from_pretrained()"),Uer=o(" to load the model weights."),Her=l(),F(vF.$$.fragment),Jer=l(),to=a("div"),F(T$.$$.fragment),Yer=l(),BFe=a("p"),Zer=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ker=l(),an=a("p"),eor=o("The model class to instantiate is selected based on the "),IFe=a("code"),oor=o("model_type"),ror=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),tor=o("pretrained_model_name_or_path"),aor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),nor=o("pretrained_model_name_or_path"),sor=o(":"),lor=l(),fe=a("ul"),FF=a("li"),jFe=a("strong"),ior=o("bart"),dor=o(" \u2014 "),yU=a("a"),cor=o("BartForConditionalGeneration"),mor=o(" (BART model)"),gor=l(),TF=a("li"),DFe=a("strong"),hor=o("bigbird_pegasus"),uor=o(" \u2014 "),xU=a("a"),por=o("BigBirdPegasusForConditionalGeneration"),_or=o(" (BigBird-Pegasus model)"),bor=l(),MF=a("li"),GFe=a("strong"),vor=o("blenderbot"),For=o(" \u2014 "),$U=a("a"),Tor=o("BlenderbotForConditionalGeneration"),Mor=o(" (Blenderbot model)"),Eor=l(),EF=a("li"),OFe=a("strong"),Cor=o("blenderbot-small"),wor=o(" \u2014 "),kU=a("a"),Aor=o("BlenderbotSmallForConditionalGeneration"),Lor=o(" (BlenderbotSmall model)"),yor=l(),CF=a("li"),VFe=a("strong"),xor=o("encoder-decoder"),$or=o(" \u2014 "),SU=a("a"),kor=o("EncoderDecoderModel"),Sor=o(" (Encoder decoder model)"),Ror=l(),wF=a("li"),XFe=a("strong"),Por=o("fsmt"),Bor=o(" \u2014 "),RU=a("a"),Ior=o("FSMTForConditionalGeneration"),Nor=o(" (FairSeq Machine-Translation model)"),qor=l(),AF=a("li"),zFe=a("strong"),jor=o("led"),Dor=o(" \u2014 "),PU=a("a"),Gor=o("LEDForConditionalGeneration"),Oor=o(" (LED model)"),Vor=l(),LF=a("li"),QFe=a("strong"),Xor=o("longt5"),zor=o(" \u2014 "),BU=a("a"),Qor=o("LongT5ForConditionalGeneration"),Wor=o(" (LongT5 model)"),Uor=l(),yF=a("li"),WFe=a("strong"),Hor=o("m2m_100"),Jor=o(" \u2014 "),IU=a("a"),Yor=o("M2M100ForConditionalGeneration"),Zor=o(" (M2M100 model)"),Kor=l(),xF=a("li"),UFe=a("strong"),err=o("marian"),orr=o(" \u2014 "),NU=a("a"),rrr=o("MarianMTModel"),trr=o(" (Marian model)"),arr=l(),$F=a("li"),HFe=a("strong"),nrr=o("mbart"),srr=o(" \u2014 "),qU=a("a"),lrr=o("MBartForConditionalGeneration"),irr=o(" (mBART model)"),drr=l(),kF=a("li"),JFe=a("strong"),crr=o("mt5"),mrr=o(" \u2014 "),jU=a("a"),frr=o("MT5ForConditionalGeneration"),grr=o(" (MT5 model)"),hrr=l(),SF=a("li"),YFe=a("strong"),urr=o("mvp"),prr=o(" \u2014 "),DU=a("a"),_rr=o("MvpForConditionalGeneration"),brr=o(" (MVP model)"),vrr=l(),RF=a("li"),ZFe=a("strong"),Frr=o("nllb"),Trr=o(" \u2014 "),GU=a("a"),Mrr=o("M2M100ForConditionalGeneration"),Err=o(" (NLLB model)"),Crr=l(),PF=a("li"),KFe=a("strong"),wrr=o("pegasus"),Arr=o(" \u2014 "),OU=a("a"),Lrr=o("PegasusForConditionalGeneration"),yrr=o(" (Pegasus model)"),xrr=l(),BF=a("li"),eTe=a("strong"),$rr=o("pegasus_x"),krr=o(" \u2014 "),VU=a("a"),Srr=o("PegasusXForConditionalGeneration"),Rrr=o(" (PEGASUS-X model)"),Prr=l(),IF=a("li"),oTe=a("strong"),Brr=o("plbart"),Irr=o(" \u2014 "),XU=a("a"),Nrr=o("PLBartForConditionalGeneration"),qrr=o(" (PLBart model)"),jrr=l(),NF=a("li"),rTe=a("strong"),Drr=o("prophetnet"),Grr=o(" \u2014 "),zU=a("a"),Orr=o("ProphetNetForConditionalGeneration"),Vrr=o(" (ProphetNet model)"),Xrr=l(),qF=a("li"),tTe=a("strong"),zrr=o("t5"),Qrr=o(" \u2014 "),QU=a("a"),Wrr=o("T5ForConditionalGeneration"),Urr=o(" (T5 model)"),Hrr=l(),jF=a("li"),aTe=a("strong"),Jrr=o("xlm-prophetnet"),Yrr=o(" \u2014 "),WU=a("a"),Zrr=o("XLMProphetNetForConditionalGeneration"),Krr=o(" (XLM-ProphetNet model)"),etr=l(),DF=a("p"),otr=o("The model is set in evaluation mode by default using "),nTe=a("code"),rtr=o("model.eval()"),ttr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=a("code"),atr=o("model.train()"),ntr=l(),F(GF.$$.fragment),Loo=l(),qd=a("h2"),OF=a("a"),lTe=a("span"),F(M$.$$.fragment),str=l(),iTe=a("span"),ltr=o("AutoModelForSequenceClassification"),yoo=l(),Do=a("div"),F(E$.$$.fragment),itr=l(),jd=a("p"),dtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=a("a"),ctr=o("from_pretrained()"),mtr=o(" class method or the "),HU=a("a"),ftr=o("from_config()"),gtr=o(` class
method.`),htr=l(),C$=a("p"),utr=o("This class cannot be instantiated directly using "),dTe=a("code"),ptr=o("__init__()"),_tr=o(" (throws an error)."),btr=l(),Ct=a("div"),F(w$.$$.fragment),vtr=l(),cTe=a("p"),Ftr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ttr=l(),Dd=a("p"),Mtr=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),Etr=o("not"),Ctr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=a("a"),wtr=o("from_pretrained()"),Atr=o(" to load the model weights."),Ltr=l(),F(VF.$$.fragment),ytr=l(),ao=a("div"),F(A$.$$.fragment),xtr=l(),fTe=a("p"),$tr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ktr=l(),nn=a("p"),Str=o("The model class to instantiate is selected based on the "),gTe=a("code"),Rtr=o("model_type"),Ptr=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),Btr=o("pretrained_model_name_or_path"),Itr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),Ntr=o("pretrained_model_name_or_path"),qtr=o(":"),jtr=l(),N=a("ul"),XF=a("li"),pTe=a("strong"),Dtr=o("albert"),Gtr=o(" \u2014 "),YU=a("a"),Otr=o("AlbertForSequenceClassification"),Vtr=o(" (ALBERT model)"),Xtr=l(),zF=a("li"),_Te=a("strong"),ztr=o("bart"),Qtr=o(" \u2014 "),ZU=a("a"),Wtr=o("BartForSequenceClassification"),Utr=o(" (BART model)"),Htr=l(),QF=a("li"),bTe=a("strong"),Jtr=o("bert"),Ytr=o(" \u2014 "),KU=a("a"),Ztr=o("BertForSequenceClassification"),Ktr=o(" (BERT model)"),ear=l(),WF=a("li"),vTe=a("strong"),oar=o("big_bird"),rar=o(" \u2014 "),eH=a("a"),tar=o("BigBirdForSequenceClassification"),aar=o(" (BigBird model)"),nar=l(),UF=a("li"),FTe=a("strong"),sar=o("bigbird_pegasus"),lar=o(" \u2014 "),oH=a("a"),iar=o("BigBirdPegasusForSequenceClassification"),dar=o(" (BigBird-Pegasus model)"),car=l(),HF=a("li"),TTe=a("strong"),mar=o("bloom"),far=o(" \u2014 "),rH=a("a"),gar=o("BloomForSequenceClassification"),har=o(" (BLOOM model)"),uar=l(),JF=a("li"),MTe=a("strong"),par=o("camembert"),_ar=o(" \u2014 "),tH=a("a"),bar=o("CamembertForSequenceClassification"),Far=o(" (CamemBERT model)"),Tar=l(),YF=a("li"),ETe=a("strong"),Mar=o("canine"),Ear=o(" \u2014 "),aH=a("a"),Car=o("CanineForSequenceClassification"),war=o(" (CANINE model)"),Aar=l(),ZF=a("li"),CTe=a("strong"),Lar=o("convbert"),yar=o(" \u2014 "),nH=a("a"),xar=o("ConvBertForSequenceClassification"),$ar=o(" (ConvBERT model)"),kar=l(),KF=a("li"),wTe=a("strong"),Sar=o("ctrl"),Rar=o(" \u2014 "),sH=a("a"),Par=o("CTRLForSequenceClassification"),Bar=o(" (CTRL model)"),Iar=l(),eT=a("li"),ATe=a("strong"),Nar=o("data2vec-text"),qar=o(" \u2014 "),lH=a("a"),jar=o("Data2VecTextForSequenceClassification"),Dar=o(" (Data2VecText model)"),Gar=l(),oT=a("li"),LTe=a("strong"),Oar=o("deberta"),Var=o(" \u2014 "),iH=a("a"),Xar=o("DebertaForSequenceClassification"),zar=o(" (DeBERTa model)"),Qar=l(),rT=a("li"),yTe=a("strong"),War=o("deberta-v2"),Uar=o(" \u2014 "),dH=a("a"),Har=o("DebertaV2ForSequenceClassification"),Jar=o(" (DeBERTa-v2 model)"),Yar=l(),tT=a("li"),xTe=a("strong"),Zar=o("distilbert"),Kar=o(" \u2014 "),cH=a("a"),enr=o("DistilBertForSequenceClassification"),onr=o(" (DistilBERT model)"),rnr=l(),aT=a("li"),$Te=a("strong"),tnr=o("electra"),anr=o(" \u2014 "),mH=a("a"),nnr=o("ElectraForSequenceClassification"),snr=o(" (ELECTRA model)"),lnr=l(),nT=a("li"),kTe=a("strong"),inr=o("ernie"),dnr=o(" \u2014 "),fH=a("a"),cnr=o("ErnieForSequenceClassification"),mnr=o(" (ERNIE model)"),fnr=l(),sT=a("li"),STe=a("strong"),gnr=o("esm"),hnr=o(" \u2014 "),gH=a("a"),unr=o("EsmForSequenceClassification"),pnr=o(" (ESM model)"),_nr=l(),lT=a("li"),RTe=a("strong"),bnr=o("flaubert"),vnr=o(" \u2014 "),hH=a("a"),Fnr=o("FlaubertForSequenceClassification"),Tnr=o(" (FlauBERT model)"),Mnr=l(),iT=a("li"),PTe=a("strong"),Enr=o("fnet"),Cnr=o(" \u2014 "),uH=a("a"),wnr=o("FNetForSequenceClassification"),Anr=o(" (FNet model)"),Lnr=l(),dT=a("li"),BTe=a("strong"),ynr=o("funnel"),xnr=o(" \u2014 "),pH=a("a"),$nr=o("FunnelForSequenceClassification"),knr=o(" (Funnel Transformer model)"),Snr=l(),cT=a("li"),ITe=a("strong"),Rnr=o("gpt2"),Pnr=o(" \u2014 "),_H=a("a"),Bnr=o("GPT2ForSequenceClassification"),Inr=o(" (OpenAI GPT-2 model)"),Nnr=l(),mT=a("li"),NTe=a("strong"),qnr=o("gpt_neo"),jnr=o(" \u2014 "),bH=a("a"),Dnr=o("GPTNeoForSequenceClassification"),Gnr=o(" (GPT Neo model)"),Onr=l(),fT=a("li"),qTe=a("strong"),Vnr=o("gptj"),Xnr=o(" \u2014 "),vH=a("a"),znr=o("GPTJForSequenceClassification"),Qnr=o(" (GPT-J model)"),Wnr=l(),gT=a("li"),jTe=a("strong"),Unr=o("ibert"),Hnr=o(" \u2014 "),FH=a("a"),Jnr=o("IBertForSequenceClassification"),Ynr=o(" (I-BERT model)"),Znr=l(),hT=a("li"),DTe=a("strong"),Knr=o("layoutlm"),esr=o(" \u2014 "),TH=a("a"),osr=o("LayoutLMForSequenceClassification"),rsr=o(" (LayoutLM model)"),tsr=l(),uT=a("li"),GTe=a("strong"),asr=o("layoutlmv2"),nsr=o(" \u2014 "),MH=a("a"),ssr=o("LayoutLMv2ForSequenceClassification"),lsr=o(" (LayoutLMv2 model)"),isr=l(),pT=a("li"),OTe=a("strong"),dsr=o("layoutlmv3"),csr=o(" \u2014 "),EH=a("a"),msr=o("LayoutLMv3ForSequenceClassification"),fsr=o(" (LayoutLMv3 model)"),gsr=l(),_T=a("li"),VTe=a("strong"),hsr=o("led"),usr=o(" \u2014 "),CH=a("a"),psr=o("LEDForSequenceClassification"),_sr=o(" (LED model)"),bsr=l(),bT=a("li"),XTe=a("strong"),vsr=o("longformer"),Fsr=o(" \u2014 "),wH=a("a"),Tsr=o("LongformerForSequenceClassification"),Msr=o(" (Longformer model)"),Esr=l(),vT=a("li"),zTe=a("strong"),Csr=o("luke"),wsr=o(" \u2014 "),AH=a("a"),Asr=o("LukeForSequenceClassification"),Lsr=o(" (LUKE model)"),ysr=l(),FT=a("li"),QTe=a("strong"),xsr=o("markuplm"),$sr=o(" \u2014 "),LH=a("a"),ksr=o("MarkupLMForSequenceClassification"),Ssr=o(" (MarkupLM model)"),Rsr=l(),TT=a("li"),WTe=a("strong"),Psr=o("mbart"),Bsr=o(" \u2014 "),yH=a("a"),Isr=o("MBartForSequenceClassification"),Nsr=o(" (mBART model)"),qsr=l(),MT=a("li"),UTe=a("strong"),jsr=o("megatron-bert"),Dsr=o(" \u2014 "),xH=a("a"),Gsr=o("MegatronBertForSequenceClassification"),Osr=o(" (Megatron-BERT model)"),Vsr=l(),ET=a("li"),HTe=a("strong"),Xsr=o("mobilebert"),zsr=o(" \u2014 "),$H=a("a"),Qsr=o("MobileBertForSequenceClassification"),Wsr=o(" (MobileBERT model)"),Usr=l(),CT=a("li"),JTe=a("strong"),Hsr=o("mpnet"),Jsr=o(" \u2014 "),kH=a("a"),Ysr=o("MPNetForSequenceClassification"),Zsr=o(" (MPNet model)"),Ksr=l(),wT=a("li"),YTe=a("strong"),elr=o("mvp"),olr=o(" \u2014 "),SH=a("a"),rlr=o("MvpForSequenceClassification"),tlr=o(" (MVP model)"),alr=l(),AT=a("li"),ZTe=a("strong"),nlr=o("nezha"),slr=o(" \u2014 "),RH=a("a"),llr=o("NezhaForSequenceClassification"),ilr=o(" (Nezha model)"),dlr=l(),LT=a("li"),KTe=a("strong"),clr=o("nystromformer"),mlr=o(" \u2014 "),PH=a("a"),flr=o("NystromformerForSequenceClassification"),glr=o(" (Nystr\xF6mformer model)"),hlr=l(),yT=a("li"),eMe=a("strong"),ulr=o("openai-gpt"),plr=o(" \u2014 "),BH=a("a"),_lr=o("OpenAIGPTForSequenceClassification"),blr=o(" (OpenAI GPT model)"),vlr=l(),xT=a("li"),oMe=a("strong"),Flr=o("opt"),Tlr=o(" \u2014 "),IH=a("a"),Mlr=o("OPTForSequenceClassification"),Elr=o(" (OPT model)"),Clr=l(),$T=a("li"),rMe=a("strong"),wlr=o("perceiver"),Alr=o(" \u2014 "),NH=a("a"),Llr=o("PerceiverForSequenceClassification"),ylr=o(" (Perceiver model)"),xlr=l(),kT=a("li"),tMe=a("strong"),$lr=o("plbart"),klr=o(" \u2014 "),qH=a("a"),Slr=o("PLBartForSequenceClassification"),Rlr=o(" (PLBart model)"),Plr=l(),ST=a("li"),aMe=a("strong"),Blr=o("qdqbert"),Ilr=o(" \u2014 "),jH=a("a"),Nlr=o("QDQBertForSequenceClassification"),qlr=o(" (QDQBert model)"),jlr=l(),RT=a("li"),nMe=a("strong"),Dlr=o("reformer"),Glr=o(" \u2014 "),DH=a("a"),Olr=o("ReformerForSequenceClassification"),Vlr=o(" (Reformer model)"),Xlr=l(),PT=a("li"),sMe=a("strong"),zlr=o("rembert"),Qlr=o(" \u2014 "),GH=a("a"),Wlr=o("RemBertForSequenceClassification"),Ulr=o(" (RemBERT model)"),Hlr=l(),BT=a("li"),lMe=a("strong"),Jlr=o("roberta"),Ylr=o(" \u2014 "),OH=a("a"),Zlr=o("RobertaForSequenceClassification"),Klr=o(" (RoBERTa model)"),eir=l(),IT=a("li"),iMe=a("strong"),oir=o("roformer"),rir=o(" \u2014 "),VH=a("a"),tir=o("RoFormerForSequenceClassification"),air=o(" (RoFormer model)"),nir=l(),NT=a("li"),dMe=a("strong"),sir=o("squeezebert"),lir=o(" \u2014 "),XH=a("a"),iir=o("SqueezeBertForSequenceClassification"),dir=o(" (SqueezeBERT model)"),cir=l(),qT=a("li"),cMe=a("strong"),mir=o("tapas"),fir=o(" \u2014 "),zH=a("a"),gir=o("TapasForSequenceClassification"),hir=o(" (TAPAS model)"),uir=l(),jT=a("li"),mMe=a("strong"),pir=o("transfo-xl"),_ir=o(" \u2014 "),QH=a("a"),bir=o("TransfoXLForSequenceClassification"),vir=o(" (Transformer-XL model)"),Fir=l(),DT=a("li"),fMe=a("strong"),Tir=o("xlm"),Mir=o(" \u2014 "),WH=a("a"),Eir=o("XLMForSequenceClassification"),Cir=o(" (XLM model)"),wir=l(),GT=a("li"),gMe=a("strong"),Air=o("xlm-roberta"),Lir=o(" \u2014 "),UH=a("a"),yir=o("XLMRobertaForSequenceClassification"),xir=o(" (XLM-RoBERTa model)"),$ir=l(),OT=a("li"),hMe=a("strong"),kir=o("xlm-roberta-xl"),Sir=o(" \u2014 "),HH=a("a"),Rir=o("XLMRobertaXLForSequenceClassification"),Pir=o(" (XLM-RoBERTa-XL model)"),Bir=l(),VT=a("li"),uMe=a("strong"),Iir=o("xlnet"),Nir=o(" \u2014 "),JH=a("a"),qir=o("XLNetForSequenceClassification"),jir=o(" (XLNet model)"),Dir=l(),XT=a("li"),pMe=a("strong"),Gir=o("yoso"),Oir=o(" \u2014 "),YH=a("a"),Vir=o("YosoForSequenceClassification"),Xir=o(" (YOSO model)"),zir=l(),zT=a("p"),Qir=o("The model is set in evaluation mode by default using "),_Me=a("code"),Wir=o("model.eval()"),Uir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bMe=a("code"),Hir=o("model.train()"),Jir=l(),F(QT.$$.fragment),xoo=l(),Gd=a("h2"),WT=a("a"),vMe=a("span"),F(L$.$$.fragment),Yir=l(),FMe=a("span"),Zir=o("AutoModelForMultipleChoice"),$oo=l(),Go=a("div"),F(y$.$$.fragment),Kir=l(),Od=a("p"),edr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=a("a"),odr=o("from_pretrained()"),rdr=o(" class method or the "),KH=a("a"),tdr=o("from_config()"),adr=o(` class
method.`),ndr=l(),x$=a("p"),sdr=o("This class cannot be instantiated directly using "),TMe=a("code"),ldr=o("__init__()"),idr=o(" (throws an error)."),ddr=l(),wt=a("div"),F($$.$$.fragment),cdr=l(),MMe=a("p"),mdr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fdr=l(),Vd=a("p"),gdr=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),hdr=o("not"),udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),pdr=o("from_pretrained()"),_dr=o(" to load the model weights."),bdr=l(),F(UT.$$.fragment),vdr=l(),no=a("div"),F(k$.$$.fragment),Fdr=l(),CMe=a("p"),Tdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mdr=l(),sn=a("p"),Edr=o("The model class to instantiate is selected based on the "),wMe=a("code"),Cdr=o("model_type"),wdr=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),Adr=o("pretrained_model_name_or_path"),Ldr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),ydr=o("pretrained_model_name_or_path"),xdr=o(":"),$dr=l(),K=a("ul"),HT=a("li"),yMe=a("strong"),kdr=o("albert"),Sdr=o(" \u2014 "),oJ=a("a"),Rdr=o("AlbertForMultipleChoice"),Pdr=o(" (ALBERT model)"),Bdr=l(),JT=a("li"),xMe=a("strong"),Idr=o("bert"),Ndr=o(" \u2014 "),rJ=a("a"),qdr=o("BertForMultipleChoice"),jdr=o(" (BERT model)"),Ddr=l(),YT=a("li"),$Me=a("strong"),Gdr=o("big_bird"),Odr=o(" \u2014 "),tJ=a("a"),Vdr=o("BigBirdForMultipleChoice"),Xdr=o(" (BigBird model)"),zdr=l(),ZT=a("li"),kMe=a("strong"),Qdr=o("camembert"),Wdr=o(" \u2014 "),aJ=a("a"),Udr=o("CamembertForMultipleChoice"),Hdr=o(" (CamemBERT model)"),Jdr=l(),KT=a("li"),SMe=a("strong"),Ydr=o("canine"),Zdr=o(" \u2014 "),nJ=a("a"),Kdr=o("CanineForMultipleChoice"),ecr=o(" (CANINE model)"),ocr=l(),eM=a("li"),RMe=a("strong"),rcr=o("convbert"),tcr=o(" \u2014 "),sJ=a("a"),acr=o("ConvBertForMultipleChoice"),ncr=o(" (ConvBERT model)"),scr=l(),oM=a("li"),PMe=a("strong"),lcr=o("data2vec-text"),icr=o(" \u2014 "),lJ=a("a"),dcr=o("Data2VecTextForMultipleChoice"),ccr=o(" (Data2VecText model)"),mcr=l(),rM=a("li"),BMe=a("strong"),fcr=o("deberta-v2"),gcr=o(" \u2014 "),iJ=a("a"),hcr=o("DebertaV2ForMultipleChoice"),ucr=o(" (DeBERTa-v2 model)"),pcr=l(),tM=a("li"),IMe=a("strong"),_cr=o("distilbert"),bcr=o(" \u2014 "),dJ=a("a"),vcr=o("DistilBertForMultipleChoice"),Fcr=o(" (DistilBERT model)"),Tcr=l(),aM=a("li"),NMe=a("strong"),Mcr=o("electra"),Ecr=o(" \u2014 "),cJ=a("a"),Ccr=o("ElectraForMultipleChoice"),wcr=o(" (ELECTRA model)"),Acr=l(),nM=a("li"),qMe=a("strong"),Lcr=o("ernie"),ycr=o(" \u2014 "),mJ=a("a"),xcr=o("ErnieForMultipleChoice"),$cr=o(" (ERNIE model)"),kcr=l(),sM=a("li"),jMe=a("strong"),Scr=o("flaubert"),Rcr=o(" \u2014 "),fJ=a("a"),Pcr=o("FlaubertForMultipleChoice"),Bcr=o(" (FlauBERT model)"),Icr=l(),lM=a("li"),DMe=a("strong"),Ncr=o("fnet"),qcr=o(" \u2014 "),gJ=a("a"),jcr=o("FNetForMultipleChoice"),Dcr=o(" (FNet model)"),Gcr=l(),iM=a("li"),GMe=a("strong"),Ocr=o("funnel"),Vcr=o(" \u2014 "),hJ=a("a"),Xcr=o("FunnelForMultipleChoice"),zcr=o(" (Funnel Transformer model)"),Qcr=l(),dM=a("li"),OMe=a("strong"),Wcr=o("ibert"),Ucr=o(" \u2014 "),uJ=a("a"),Hcr=o("IBertForMultipleChoice"),Jcr=o(" (I-BERT model)"),Ycr=l(),cM=a("li"),VMe=a("strong"),Zcr=o("longformer"),Kcr=o(" \u2014 "),pJ=a("a"),emr=o("LongformerForMultipleChoice"),omr=o(" (Longformer model)"),rmr=l(),mM=a("li"),XMe=a("strong"),tmr=o("luke"),amr=o(" \u2014 "),_J=a("a"),nmr=o("LukeForMultipleChoice"),smr=o(" (LUKE model)"),lmr=l(),fM=a("li"),zMe=a("strong"),imr=o("megatron-bert"),dmr=o(" \u2014 "),bJ=a("a"),cmr=o("MegatronBertForMultipleChoice"),mmr=o(" (Megatron-BERT model)"),fmr=l(),gM=a("li"),QMe=a("strong"),gmr=o("mobilebert"),hmr=o(" \u2014 "),vJ=a("a"),umr=o("MobileBertForMultipleChoice"),pmr=o(" (MobileBERT model)"),_mr=l(),hM=a("li"),WMe=a("strong"),bmr=o("mpnet"),vmr=o(" \u2014 "),FJ=a("a"),Fmr=o("MPNetForMultipleChoice"),Tmr=o(" (MPNet model)"),Mmr=l(),uM=a("li"),UMe=a("strong"),Emr=o("nezha"),Cmr=o(" \u2014 "),TJ=a("a"),wmr=o("NezhaForMultipleChoice"),Amr=o(" (Nezha model)"),Lmr=l(),pM=a("li"),HMe=a("strong"),ymr=o("nystromformer"),xmr=o(" \u2014 "),MJ=a("a"),$mr=o("NystromformerForMultipleChoice"),kmr=o(" (Nystr\xF6mformer model)"),Smr=l(),_M=a("li"),JMe=a("strong"),Rmr=o("qdqbert"),Pmr=o(" \u2014 "),EJ=a("a"),Bmr=o("QDQBertForMultipleChoice"),Imr=o(" (QDQBert model)"),Nmr=l(),bM=a("li"),YMe=a("strong"),qmr=o("rembert"),jmr=o(" \u2014 "),CJ=a("a"),Dmr=o("RemBertForMultipleChoice"),Gmr=o(" (RemBERT model)"),Omr=l(),vM=a("li"),ZMe=a("strong"),Vmr=o("roberta"),Xmr=o(" \u2014 "),wJ=a("a"),zmr=o("RobertaForMultipleChoice"),Qmr=o(" (RoBERTa model)"),Wmr=l(),FM=a("li"),KMe=a("strong"),Umr=o("roformer"),Hmr=o(" \u2014 "),AJ=a("a"),Jmr=o("RoFormerForMultipleChoice"),Ymr=o(" (RoFormer model)"),Zmr=l(),TM=a("li"),eEe=a("strong"),Kmr=o("squeezebert"),efr=o(" \u2014 "),LJ=a("a"),ofr=o("SqueezeBertForMultipleChoice"),rfr=o(" (SqueezeBERT model)"),tfr=l(),MM=a("li"),oEe=a("strong"),afr=o("xlm"),nfr=o(" \u2014 "),yJ=a("a"),sfr=o("XLMForMultipleChoice"),lfr=o(" (XLM model)"),ifr=l(),EM=a("li"),rEe=a("strong"),dfr=o("xlm-roberta"),cfr=o(" \u2014 "),xJ=a("a"),mfr=o("XLMRobertaForMultipleChoice"),ffr=o(" (XLM-RoBERTa model)"),gfr=l(),CM=a("li"),tEe=a("strong"),hfr=o("xlm-roberta-xl"),ufr=o(" \u2014 "),$J=a("a"),pfr=o("XLMRobertaXLForMultipleChoice"),_fr=o(" (XLM-RoBERTa-XL model)"),bfr=l(),wM=a("li"),aEe=a("strong"),vfr=o("xlnet"),Ffr=o(" \u2014 "),kJ=a("a"),Tfr=o("XLNetForMultipleChoice"),Mfr=o(" (XLNet model)"),Efr=l(),AM=a("li"),nEe=a("strong"),Cfr=o("yoso"),wfr=o(" \u2014 "),SJ=a("a"),Afr=o("YosoForMultipleChoice"),Lfr=o(" (YOSO model)"),yfr=l(),LM=a("p"),xfr=o("The model is set in evaluation mode by default using "),sEe=a("code"),$fr=o("model.eval()"),kfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lEe=a("code"),Sfr=o("model.train()"),Rfr=l(),F(yM.$$.fragment),koo=l(),Xd=a("h2"),xM=a("a"),iEe=a("span"),F(S$.$$.fragment),Pfr=l(),dEe=a("span"),Bfr=o("AutoModelForNextSentencePrediction"),Soo=l(),Oo=a("div"),F(R$.$$.fragment),Ifr=l(),zd=a("p"),Nfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RJ=a("a"),qfr=o("from_pretrained()"),jfr=o(" class method or the "),PJ=a("a"),Dfr=o("from_config()"),Gfr=o(` class
method.`),Ofr=l(),P$=a("p"),Vfr=o("This class cannot be instantiated directly using "),cEe=a("code"),Xfr=o("__init__()"),zfr=o(" (throws an error)."),Qfr=l(),At=a("div"),F(B$.$$.fragment),Wfr=l(),mEe=a("p"),Ufr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hfr=l(),Qd=a("p"),Jfr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),Yfr=o("not"),Zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),Kfr=o("from_pretrained()"),egr=o(" to load the model weights."),ogr=l(),F($M.$$.fragment),rgr=l(),so=a("div"),F(I$.$$.fragment),tgr=l(),gEe=a("p"),agr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ngr=l(),ln=a("p"),sgr=o("The model class to instantiate is selected based on the "),hEe=a("code"),lgr=o("model_type"),igr=o(` property of the config object (either
passed as an argument or loaded from `),uEe=a("code"),dgr=o("pretrained_model_name_or_path"),cgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),mgr=o("pretrained_model_name_or_path"),fgr=o(":"),ggr=l(),Ue=a("ul"),kM=a("li"),_Ee=a("strong"),hgr=o("bert"),ugr=o(" \u2014 "),IJ=a("a"),pgr=o("BertForNextSentencePrediction"),_gr=o(" (BERT model)"),bgr=l(),SM=a("li"),bEe=a("strong"),vgr=o("ernie"),Fgr=o(" \u2014 "),NJ=a("a"),Tgr=o("ErnieForNextSentencePrediction"),Mgr=o(" (ERNIE model)"),Egr=l(),RM=a("li"),vEe=a("strong"),Cgr=o("fnet"),wgr=o(" \u2014 "),qJ=a("a"),Agr=o("FNetForNextSentencePrediction"),Lgr=o(" (FNet model)"),ygr=l(),PM=a("li"),FEe=a("strong"),xgr=o("megatron-bert"),$gr=o(" \u2014 "),jJ=a("a"),kgr=o("MegatronBertForNextSentencePrediction"),Sgr=o(" (Megatron-BERT model)"),Rgr=l(),BM=a("li"),TEe=a("strong"),Pgr=o("mobilebert"),Bgr=o(" \u2014 "),DJ=a("a"),Igr=o("MobileBertForNextSentencePrediction"),Ngr=o(" (MobileBERT model)"),qgr=l(),IM=a("li"),MEe=a("strong"),jgr=o("nezha"),Dgr=o(" \u2014 "),GJ=a("a"),Ggr=o("NezhaForNextSentencePrediction"),Ogr=o(" (Nezha model)"),Vgr=l(),NM=a("li"),EEe=a("strong"),Xgr=o("qdqbert"),zgr=o(" \u2014 "),OJ=a("a"),Qgr=o("QDQBertForNextSentencePrediction"),Wgr=o(" (QDQBert model)"),Ugr=l(),qM=a("p"),Hgr=o("The model is set in evaluation mode by default using "),CEe=a("code"),Jgr=o("model.eval()"),Ygr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wEe=a("code"),Zgr=o("model.train()"),Kgr=l(),F(jM.$$.fragment),Roo=l(),Wd=a("h2"),DM=a("a"),AEe=a("span"),F(N$.$$.fragment),ehr=l(),LEe=a("span"),ohr=o("AutoModelForTokenClassification"),Poo=l(),Vo=a("div"),F(q$.$$.fragment),rhr=l(),Ud=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VJ=a("a"),ahr=o("from_pretrained()"),nhr=o(" class method or the "),XJ=a("a"),shr=o("from_config()"),lhr=o(` class
method.`),ihr=l(),j$=a("p"),dhr=o("This class cannot be instantiated directly using "),yEe=a("code"),chr=o("__init__()"),mhr=o(" (throws an error)."),fhr=l(),Lt=a("div"),F(D$.$$.fragment),ghr=l(),xEe=a("p"),hhr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uhr=l(),Hd=a("p"),phr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),_hr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),vhr=o("from_pretrained()"),Fhr=o(" to load the model weights."),Thr=l(),F(GM.$$.fragment),Mhr=l(),lo=a("div"),F(G$.$$.fragment),Ehr=l(),kEe=a("p"),Chr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),whr=l(),dn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),SEe=a("code"),Lhr=o("model_type"),yhr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),xhr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(":"),Rhr=l(),H=a("ul"),OM=a("li"),BEe=a("strong"),Phr=o("albert"),Bhr=o(" \u2014 "),QJ=a("a"),Ihr=o("AlbertForTokenClassification"),Nhr=o(" (ALBERT model)"),qhr=l(),VM=a("li"),IEe=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),WJ=a("a"),Ghr=o("BertForTokenClassification"),Ohr=o(" (BERT model)"),Vhr=l(),XM=a("li"),NEe=a("strong"),Xhr=o("big_bird"),zhr=o(" \u2014 "),UJ=a("a"),Qhr=o("BigBirdForTokenClassification"),Whr=o(" (BigBird model)"),Uhr=l(),zM=a("li"),qEe=a("strong"),Hhr=o("bloom"),Jhr=o(" \u2014 "),HJ=a("a"),Yhr=o("BloomForTokenClassification"),Zhr=o(" (BLOOM model)"),Khr=l(),QM=a("li"),jEe=a("strong"),eur=o("camembert"),our=o(" \u2014 "),JJ=a("a"),rur=o("CamembertForTokenClassification"),tur=o(" (CamemBERT model)"),aur=l(),WM=a("li"),DEe=a("strong"),nur=o("canine"),sur=o(" \u2014 "),YJ=a("a"),lur=o("CanineForTokenClassification"),iur=o(" (CANINE model)"),dur=l(),UM=a("li"),GEe=a("strong"),cur=o("convbert"),mur=o(" \u2014 "),ZJ=a("a"),fur=o("ConvBertForTokenClassification"),gur=o(" (ConvBERT model)"),hur=l(),HM=a("li"),OEe=a("strong"),uur=o("data2vec-text"),pur=o(" \u2014 "),KJ=a("a"),_ur=o("Data2VecTextForTokenClassification"),bur=o(" (Data2VecText model)"),vur=l(),JM=a("li"),VEe=a("strong"),Fur=o("deberta"),Tur=o(" \u2014 "),eY=a("a"),Mur=o("DebertaForTokenClassification"),Eur=o(" (DeBERTa model)"),Cur=l(),YM=a("li"),XEe=a("strong"),wur=o("deberta-v2"),Aur=o(" \u2014 "),oY=a("a"),Lur=o("DebertaV2ForTokenClassification"),yur=o(" (DeBERTa-v2 model)"),xur=l(),ZM=a("li"),zEe=a("strong"),$ur=o("distilbert"),kur=o(" \u2014 "),rY=a("a"),Sur=o("DistilBertForTokenClassification"),Rur=o(" (DistilBERT model)"),Pur=l(),KM=a("li"),QEe=a("strong"),Bur=o("electra"),Iur=o(" \u2014 "),tY=a("a"),Nur=o("ElectraForTokenClassification"),qur=o(" (ELECTRA model)"),jur=l(),eE=a("li"),WEe=a("strong"),Dur=o("ernie"),Gur=o(" \u2014 "),aY=a("a"),Our=o("ErnieForTokenClassification"),Vur=o(" (ERNIE model)"),Xur=l(),oE=a("li"),UEe=a("strong"),zur=o("esm"),Qur=o(" \u2014 "),nY=a("a"),Wur=o("EsmForTokenClassification"),Uur=o(" (ESM model)"),Hur=l(),rE=a("li"),HEe=a("strong"),Jur=o("flaubert"),Yur=o(" \u2014 "),sY=a("a"),Zur=o("FlaubertForTokenClassification"),Kur=o(" (FlauBERT model)"),epr=l(),tE=a("li"),JEe=a("strong"),opr=o("fnet"),rpr=o(" \u2014 "),lY=a("a"),tpr=o("FNetForTokenClassification"),apr=o(" (FNet model)"),npr=l(),aE=a("li"),YEe=a("strong"),spr=o("funnel"),lpr=o(" \u2014 "),iY=a("a"),ipr=o("FunnelForTokenClassification"),dpr=o(" (Funnel Transformer model)"),cpr=l(),nE=a("li"),ZEe=a("strong"),mpr=o("gpt2"),fpr=o(" \u2014 "),dY=a("a"),gpr=o("GPT2ForTokenClassification"),hpr=o(" (OpenAI GPT-2 model)"),upr=l(),sE=a("li"),KEe=a("strong"),ppr=o("ibert"),_pr=o(" \u2014 "),cY=a("a"),bpr=o("IBertForTokenClassification"),vpr=o(" (I-BERT model)"),Fpr=l(),lE=a("li"),e4e=a("strong"),Tpr=o("layoutlm"),Mpr=o(" \u2014 "),mY=a("a"),Epr=o("LayoutLMForTokenClassification"),Cpr=o(" (LayoutLM model)"),wpr=l(),iE=a("li"),o4e=a("strong"),Apr=o("layoutlmv2"),Lpr=o(" \u2014 "),fY=a("a"),ypr=o("LayoutLMv2ForTokenClassification"),xpr=o(" (LayoutLMv2 model)"),$pr=l(),dE=a("li"),r4e=a("strong"),kpr=o("layoutlmv3"),Spr=o(" \u2014 "),gY=a("a"),Rpr=o("LayoutLMv3ForTokenClassification"),Ppr=o(" (LayoutLMv3 model)"),Bpr=l(),cE=a("li"),t4e=a("strong"),Ipr=o("longformer"),Npr=o(" \u2014 "),hY=a("a"),qpr=o("LongformerForTokenClassification"),jpr=o(" (Longformer model)"),Dpr=l(),mE=a("li"),a4e=a("strong"),Gpr=o("luke"),Opr=o(" \u2014 "),uY=a("a"),Vpr=o("LukeForTokenClassification"),Xpr=o(" (LUKE model)"),zpr=l(),fE=a("li"),n4e=a("strong"),Qpr=o("markuplm"),Wpr=o(" \u2014 "),pY=a("a"),Upr=o("MarkupLMForTokenClassification"),Hpr=o(" (MarkupLM model)"),Jpr=l(),gE=a("li"),s4e=a("strong"),Ypr=o("megatron-bert"),Zpr=o(" \u2014 "),_Y=a("a"),Kpr=o("MegatronBertForTokenClassification"),e_r=o(" (Megatron-BERT model)"),o_r=l(),hE=a("li"),l4e=a("strong"),r_r=o("mobilebert"),t_r=o(" \u2014 "),bY=a("a"),a_r=o("MobileBertForTokenClassification"),n_r=o(" (MobileBERT model)"),s_r=l(),uE=a("li"),i4e=a("strong"),l_r=o("mpnet"),i_r=o(" \u2014 "),vY=a("a"),d_r=o("MPNetForTokenClassification"),c_r=o(" (MPNet model)"),m_r=l(),pE=a("li"),d4e=a("strong"),f_r=o("nezha"),g_r=o(" \u2014 "),FY=a("a"),h_r=o("NezhaForTokenClassification"),u_r=o(" (Nezha model)"),p_r=l(),_E=a("li"),c4e=a("strong"),__r=o("nystromformer"),b_r=o(" \u2014 "),TY=a("a"),v_r=o("NystromformerForTokenClassification"),F_r=o(" (Nystr\xF6mformer model)"),T_r=l(),bE=a("li"),m4e=a("strong"),M_r=o("qdqbert"),E_r=o(" \u2014 "),MY=a("a"),C_r=o("QDQBertForTokenClassification"),w_r=o(" (QDQBert model)"),A_r=l(),vE=a("li"),f4e=a("strong"),L_r=o("rembert"),y_r=o(" \u2014 "),EY=a("a"),x_r=o("RemBertForTokenClassification"),$_r=o(" (RemBERT model)"),k_r=l(),FE=a("li"),g4e=a("strong"),S_r=o("roberta"),R_r=o(" \u2014 "),CY=a("a"),P_r=o("RobertaForTokenClassification"),B_r=o(" (RoBERTa model)"),I_r=l(),TE=a("li"),h4e=a("strong"),N_r=o("roformer"),q_r=o(" \u2014 "),wY=a("a"),j_r=o("RoFormerForTokenClassification"),D_r=o(" (RoFormer model)"),G_r=l(),ME=a("li"),u4e=a("strong"),O_r=o("squeezebert"),V_r=o(" \u2014 "),AY=a("a"),X_r=o("SqueezeBertForTokenClassification"),z_r=o(" (SqueezeBERT model)"),Q_r=l(),EE=a("li"),p4e=a("strong"),W_r=o("xlm"),U_r=o(" \u2014 "),LY=a("a"),H_r=o("XLMForTokenClassification"),J_r=o(" (XLM model)"),Y_r=l(),CE=a("li"),_4e=a("strong"),Z_r=o("xlm-roberta"),K_r=o(" \u2014 "),yY=a("a"),e1r=o("XLMRobertaForTokenClassification"),o1r=o(" (XLM-RoBERTa model)"),r1r=l(),wE=a("li"),b4e=a("strong"),t1r=o("xlm-roberta-xl"),a1r=o(" \u2014 "),xY=a("a"),n1r=o("XLMRobertaXLForTokenClassification"),s1r=o(" (XLM-RoBERTa-XL model)"),l1r=l(),AE=a("li"),v4e=a("strong"),i1r=o("xlnet"),d1r=o(" \u2014 "),$Y=a("a"),c1r=o("XLNetForTokenClassification"),m1r=o(" (XLNet model)"),f1r=l(),LE=a("li"),F4e=a("strong"),g1r=o("yoso"),h1r=o(" \u2014 "),kY=a("a"),u1r=o("YosoForTokenClassification"),p1r=o(" (YOSO model)"),_1r=l(),yE=a("p"),b1r=o("The model is set in evaluation mode by default using "),T4e=a("code"),v1r=o("model.eval()"),F1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=a("code"),T1r=o("model.train()"),M1r=l(),F(xE.$$.fragment),Boo=l(),Jd=a("h2"),$E=a("a"),E4e=a("span"),F(O$.$$.fragment),E1r=l(),C4e=a("span"),C1r=o("AutoModelForQuestionAnswering"),Ioo=l(),Xo=a("div"),F(V$.$$.fragment),w1r=l(),Yd=a("p"),A1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=a("a"),L1r=o("from_pretrained()"),y1r=o(" class method or the "),RY=a("a"),x1r=o("from_config()"),$1r=o(` class
method.`),k1r=l(),X$=a("p"),S1r=o("This class cannot be instantiated directly using "),w4e=a("code"),R1r=o("__init__()"),P1r=o(" (throws an error)."),B1r=l(),yt=a("div"),F(z$.$$.fragment),I1r=l(),A4e=a("p"),N1r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q1r=l(),Zd=a("p"),j1r=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),D1r=o("not"),G1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),O1r=o("from_pretrained()"),V1r=o(" to load the model weights."),X1r=l(),F(kE.$$.fragment),z1r=l(),io=a("div"),F(Q$.$$.fragment),Q1r=l(),y4e=a("p"),W1r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U1r=l(),cn=a("p"),H1r=o("The model class to instantiate is selected based on the "),x4e=a("code"),J1r=o("model_type"),Y1r=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),Z1r=o("pretrained_model_name_or_path"),K1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),ebr=o("pretrained_model_name_or_path"),obr=o(":"),rbr=l(),V=a("ul"),SE=a("li"),S4e=a("strong"),tbr=o("albert"),abr=o(" \u2014 "),BY=a("a"),nbr=o("AlbertForQuestionAnswering"),sbr=o(" (ALBERT model)"),lbr=l(),RE=a("li"),R4e=a("strong"),ibr=o("bart"),dbr=o(" \u2014 "),IY=a("a"),cbr=o("BartForQuestionAnswering"),mbr=o(" (BART model)"),fbr=l(),PE=a("li"),P4e=a("strong"),gbr=o("bert"),hbr=o(" \u2014 "),NY=a("a"),ubr=o("BertForQuestionAnswering"),pbr=o(" (BERT model)"),_br=l(),BE=a("li"),B4e=a("strong"),bbr=o("big_bird"),vbr=o(" \u2014 "),qY=a("a"),Fbr=o("BigBirdForQuestionAnswering"),Tbr=o(" (BigBird model)"),Mbr=l(),IE=a("li"),I4e=a("strong"),Ebr=o("bigbird_pegasus"),Cbr=o(" \u2014 "),jY=a("a"),wbr=o("BigBirdPegasusForQuestionAnswering"),Abr=o(" (BigBird-Pegasus model)"),Lbr=l(),NE=a("li"),N4e=a("strong"),ybr=o("bloom"),xbr=o(" \u2014 "),DY=a("a"),$br=o("BloomForQuestionAnswering"),kbr=o(" (BLOOM model)"),Sbr=l(),qE=a("li"),q4e=a("strong"),Rbr=o("camembert"),Pbr=o(" \u2014 "),GY=a("a"),Bbr=o("CamembertForQuestionAnswering"),Ibr=o(" (CamemBERT model)"),Nbr=l(),jE=a("li"),j4e=a("strong"),qbr=o("canine"),jbr=o(" \u2014 "),OY=a("a"),Dbr=o("CanineForQuestionAnswering"),Gbr=o(" (CANINE model)"),Obr=l(),DE=a("li"),D4e=a("strong"),Vbr=o("convbert"),Xbr=o(" \u2014 "),VY=a("a"),zbr=o("ConvBertForQuestionAnswering"),Qbr=o(" (ConvBERT model)"),Wbr=l(),GE=a("li"),G4e=a("strong"),Ubr=o("data2vec-text"),Hbr=o(" \u2014 "),XY=a("a"),Jbr=o("Data2VecTextForQuestionAnswering"),Ybr=o(" (Data2VecText model)"),Zbr=l(),OE=a("li"),O4e=a("strong"),Kbr=o("deberta"),e2r=o(" \u2014 "),zY=a("a"),o2r=o("DebertaForQuestionAnswering"),r2r=o(" (DeBERTa model)"),t2r=l(),VE=a("li"),V4e=a("strong"),a2r=o("deberta-v2"),n2r=o(" \u2014 "),QY=a("a"),s2r=o("DebertaV2ForQuestionAnswering"),l2r=o(" (DeBERTa-v2 model)"),i2r=l(),XE=a("li"),X4e=a("strong"),d2r=o("distilbert"),c2r=o(" \u2014 "),WY=a("a"),m2r=o("DistilBertForQuestionAnswering"),f2r=o(" (DistilBERT model)"),g2r=l(),zE=a("li"),z4e=a("strong"),h2r=o("electra"),u2r=o(" \u2014 "),UY=a("a"),p2r=o("ElectraForQuestionAnswering"),_2r=o(" (ELECTRA model)"),b2r=l(),QE=a("li"),Q4e=a("strong"),v2r=o("ernie"),F2r=o(" \u2014 "),HY=a("a"),T2r=o("ErnieForQuestionAnswering"),M2r=o(" (ERNIE model)"),E2r=l(),WE=a("li"),W4e=a("strong"),C2r=o("flaubert"),w2r=o(" \u2014 "),JY=a("a"),A2r=o("FlaubertForQuestionAnsweringSimple"),L2r=o(" (FlauBERT model)"),y2r=l(),UE=a("li"),U4e=a("strong"),x2r=o("fnet"),$2r=o(" \u2014 "),YY=a("a"),k2r=o("FNetForQuestionAnswering"),S2r=o(" (FNet model)"),R2r=l(),HE=a("li"),H4e=a("strong"),P2r=o("funnel"),B2r=o(" \u2014 "),ZY=a("a"),I2r=o("FunnelForQuestionAnswering"),N2r=o(" (Funnel Transformer model)"),q2r=l(),JE=a("li"),J4e=a("strong"),j2r=o("gptj"),D2r=o(" \u2014 "),KY=a("a"),G2r=o("GPTJForQuestionAnswering"),O2r=o(" (GPT-J model)"),V2r=l(),YE=a("li"),Y4e=a("strong"),X2r=o("ibert"),z2r=o(" \u2014 "),eZ=a("a"),Q2r=o("IBertForQuestionAnswering"),W2r=o(" (I-BERT model)"),U2r=l(),ZE=a("li"),Z4e=a("strong"),H2r=o("layoutlmv2"),J2r=o(" \u2014 "),oZ=a("a"),Y2r=o("LayoutLMv2ForQuestionAnswering"),Z2r=o(" (LayoutLMv2 model)"),K2r=l(),KE=a("li"),K4e=a("strong"),evr=o("layoutlmv3"),ovr=o(" \u2014 "),rZ=a("a"),rvr=o("LayoutLMv3ForQuestionAnswering"),tvr=o(" (LayoutLMv3 model)"),avr=l(),e4=a("li"),eCe=a("strong"),nvr=o("led"),svr=o(" \u2014 "),tZ=a("a"),lvr=o("LEDForQuestionAnswering"),ivr=o(" (LED model)"),dvr=l(),o4=a("li"),oCe=a("strong"),cvr=o("longformer"),mvr=o(" \u2014 "),aZ=a("a"),fvr=o("LongformerForQuestionAnswering"),gvr=o(" (Longformer model)"),hvr=l(),r4=a("li"),rCe=a("strong"),uvr=o("luke"),pvr=o(" \u2014 "),nZ=a("a"),_vr=o("LukeForQuestionAnswering"),bvr=o(" (LUKE model)"),vvr=l(),t4=a("li"),tCe=a("strong"),Fvr=o("lxmert"),Tvr=o(" \u2014 "),sZ=a("a"),Mvr=o("LxmertForQuestionAnswering"),Evr=o(" (LXMERT model)"),Cvr=l(),a4=a("li"),aCe=a("strong"),wvr=o("markuplm"),Avr=o(" \u2014 "),lZ=a("a"),Lvr=o("MarkupLMForQuestionAnswering"),yvr=o(" (MarkupLM model)"),xvr=l(),n4=a("li"),nCe=a("strong"),$vr=o("mbart"),kvr=o(" \u2014 "),iZ=a("a"),Svr=o("MBartForQuestionAnswering"),Rvr=o(" (mBART model)"),Pvr=l(),s4=a("li"),sCe=a("strong"),Bvr=o("megatron-bert"),Ivr=o(" \u2014 "),dZ=a("a"),Nvr=o("MegatronBertForQuestionAnswering"),qvr=o(" (Megatron-BERT model)"),jvr=l(),l4=a("li"),lCe=a("strong"),Dvr=o("mobilebert"),Gvr=o(" \u2014 "),cZ=a("a"),Ovr=o("MobileBertForQuestionAnswering"),Vvr=o(" (MobileBERT model)"),Xvr=l(),i4=a("li"),iCe=a("strong"),zvr=o("mpnet"),Qvr=o(" \u2014 "),mZ=a("a"),Wvr=o("MPNetForQuestionAnswering"),Uvr=o(" (MPNet model)"),Hvr=l(),d4=a("li"),dCe=a("strong"),Jvr=o("mvp"),Yvr=o(" \u2014 "),fZ=a("a"),Zvr=o("MvpForQuestionAnswering"),Kvr=o(" (MVP model)"),eFr=l(),c4=a("li"),cCe=a("strong"),oFr=o("nezha"),rFr=o(" \u2014 "),gZ=a("a"),tFr=o("NezhaForQuestionAnswering"),aFr=o(" (Nezha model)"),nFr=l(),m4=a("li"),mCe=a("strong"),sFr=o("nystromformer"),lFr=o(" \u2014 "),hZ=a("a"),iFr=o("NystromformerForQuestionAnswering"),dFr=o(" (Nystr\xF6mformer model)"),cFr=l(),f4=a("li"),fCe=a("strong"),mFr=o("qdqbert"),fFr=o(" \u2014 "),uZ=a("a"),gFr=o("QDQBertForQuestionAnswering"),hFr=o(" (QDQBert model)"),uFr=l(),g4=a("li"),gCe=a("strong"),pFr=o("reformer"),_Fr=o(" \u2014 "),pZ=a("a"),bFr=o("ReformerForQuestionAnswering"),vFr=o(" (Reformer model)"),FFr=l(),h4=a("li"),hCe=a("strong"),TFr=o("rembert"),MFr=o(" \u2014 "),_Z=a("a"),EFr=o("RemBertForQuestionAnswering"),CFr=o(" (RemBERT model)"),wFr=l(),u4=a("li"),uCe=a("strong"),AFr=o("roberta"),LFr=o(" \u2014 "),bZ=a("a"),yFr=o("RobertaForQuestionAnswering"),xFr=o(" (RoBERTa model)"),$Fr=l(),p4=a("li"),pCe=a("strong"),kFr=o("roformer"),SFr=o(" \u2014 "),vZ=a("a"),RFr=o("RoFormerForQuestionAnswering"),PFr=o(" (RoFormer model)"),BFr=l(),_4=a("li"),_Ce=a("strong"),IFr=o("splinter"),NFr=o(" \u2014 "),FZ=a("a"),qFr=o("SplinterForQuestionAnswering"),jFr=o(" (Splinter model)"),DFr=l(),b4=a("li"),bCe=a("strong"),GFr=o("squeezebert"),OFr=o(" \u2014 "),TZ=a("a"),VFr=o("SqueezeBertForQuestionAnswering"),XFr=o(" (SqueezeBERT model)"),zFr=l(),v4=a("li"),vCe=a("strong"),QFr=o("xlm"),WFr=o(" \u2014 "),MZ=a("a"),UFr=o("XLMForQuestionAnsweringSimple"),HFr=o(" (XLM model)"),JFr=l(),F4=a("li"),FCe=a("strong"),YFr=o("xlm-roberta"),ZFr=o(" \u2014 "),EZ=a("a"),KFr=o("XLMRobertaForQuestionAnswering"),eTr=o(" (XLM-RoBERTa model)"),oTr=l(),T4=a("li"),TCe=a("strong"),rTr=o("xlm-roberta-xl"),tTr=o(" \u2014 "),CZ=a("a"),aTr=o("XLMRobertaXLForQuestionAnswering"),nTr=o(" (XLM-RoBERTa-XL model)"),sTr=l(),M4=a("li"),MCe=a("strong"),lTr=o("xlnet"),iTr=o(" \u2014 "),wZ=a("a"),dTr=o("XLNetForQuestionAnsweringSimple"),cTr=o(" (XLNet model)"),mTr=l(),E4=a("li"),ECe=a("strong"),fTr=o("yoso"),gTr=o(" \u2014 "),AZ=a("a"),hTr=o("YosoForQuestionAnswering"),uTr=o(" (YOSO model)"),pTr=l(),C4=a("p"),_Tr=o("The model is set in evaluation mode by default using "),CCe=a("code"),bTr=o("model.eval()"),vTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wCe=a("code"),FTr=o("model.train()"),TTr=l(),F(w4.$$.fragment),Noo=l(),Kd=a("h2"),A4=a("a"),ACe=a("span"),F(W$.$$.fragment),MTr=l(),LCe=a("span"),ETr=o("AutoModelForTableQuestionAnswering"),qoo=l(),zo=a("div"),F(U$.$$.fragment),CTr=l(),ec=a("p"),wTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LZ=a("a"),ATr=o("from_pretrained()"),LTr=o(" class method or the "),yZ=a("a"),yTr=o("from_config()"),xTr=o(` class
method.`),$Tr=l(),H$=a("p"),kTr=o("This class cannot be instantiated directly using "),yCe=a("code"),STr=o("__init__()"),RTr=o(" (throws an error)."),PTr=l(),xt=a("div"),F(J$.$$.fragment),BTr=l(),xCe=a("p"),ITr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NTr=l(),oc=a("p"),qTr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),jTr=o("not"),DTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),GTr=o("from_pretrained()"),OTr=o(" to load the model weights."),VTr=l(),F(L4.$$.fragment),XTr=l(),co=a("div"),F(Y$.$$.fragment),zTr=l(),kCe=a("p"),QTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WTr=l(),mn=a("p"),UTr=o("The model class to instantiate is selected based on the "),SCe=a("code"),HTr=o("model_type"),JTr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),YTr=o("pretrained_model_name_or_path"),ZTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),KTr=o("pretrained_model_name_or_path"),eMr=o(":"),oMr=l(),BCe=a("ul"),y4=a("li"),ICe=a("strong"),rMr=o("tapas"),tMr=o(" \u2014 "),$Z=a("a"),aMr=o("TapasForQuestionAnswering"),nMr=o(" (TAPAS model)"),sMr=l(),x4=a("p"),lMr=o("The model is set in evaluation mode by default using "),NCe=a("code"),iMr=o("model.eval()"),dMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qCe=a("code"),cMr=o("model.train()"),mMr=l(),F($4.$$.fragment),joo=l(),rc=a("h2"),k4=a("a"),jCe=a("span"),F(Z$.$$.fragment),fMr=l(),DCe=a("span"),gMr=o("AutoModelForDocumentQuestionAnswering"),Doo=l(),Qo=a("div"),F(K$.$$.fragment),hMr=l(),tc=a("p"),uMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),kZ=a("a"),pMr=o("from_pretrained()"),_Mr=o(" class method or the "),SZ=a("a"),bMr=o("from_config()"),vMr=o(` class
method.`),FMr=l(),ek=a("p"),TMr=o("This class cannot be instantiated directly using "),GCe=a("code"),MMr=o("__init__()"),EMr=o(" (throws an error)."),CMr=l(),$t=a("div"),F(ok.$$.fragment),wMr=l(),OCe=a("p"),AMr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),LMr=l(),ac=a("p"),yMr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),xMr=o("not"),$Mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("a"),kMr=o("from_pretrained()"),SMr=o(" to load the model weights."),RMr=l(),F(S4.$$.fragment),PMr=l(),mo=a("div"),F(rk.$$.fragment),BMr=l(),XCe=a("p"),IMr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),NMr=l(),fn=a("p"),qMr=o("The model class to instantiate is selected based on the "),zCe=a("code"),jMr=o("model_type"),DMr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),GMr=o("pretrained_model_name_or_path"),OMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),VMr=o("pretrained_model_name_or_path"),XMr=o(":"),zMr=l(),nc=a("ul"),R4=a("li"),UCe=a("strong"),QMr=o("layoutlm"),WMr=o(" \u2014 "),PZ=a("a"),UMr=o("LayoutLMForQuestionAnswering"),HMr=o(" (LayoutLM model)"),JMr=l(),P4=a("li"),HCe=a("strong"),YMr=o("layoutlmv2"),ZMr=o(" \u2014 "),BZ=a("a"),KMr=o("LayoutLMv2ForQuestionAnswering"),eEr=o(" (LayoutLMv2 model)"),oEr=l(),B4=a("li"),JCe=a("strong"),rEr=o("layoutlmv3"),tEr=o(" \u2014 "),IZ=a("a"),aEr=o("LayoutLMv3ForQuestionAnswering"),nEr=o(" (LayoutLMv3 model)"),sEr=l(),I4=a("p"),lEr=o("The model is set in evaluation mode by default using "),YCe=a("code"),iEr=o("model.eval()"),dEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZCe=a("code"),cEr=o("model.train()"),mEr=l(),F(N4.$$.fragment),Goo=l(),sc=a("h2"),q4=a("a"),KCe=a("span"),F(tk.$$.fragment),fEr=l(),e3e=a("span"),gEr=o("AutoModelForImageClassification"),Ooo=l(),Wo=a("div"),F(ak.$$.fragment),hEr=l(),lc=a("p"),uEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NZ=a("a"),pEr=o("from_pretrained()"),_Er=o(" class method or the "),qZ=a("a"),bEr=o("from_config()"),vEr=o(` class
method.`),FEr=l(),nk=a("p"),TEr=o("This class cannot be instantiated directly using "),o3e=a("code"),MEr=o("__init__()"),EEr=o(" (throws an error)."),CEr=l(),kt=a("div"),F(sk.$$.fragment),wEr=l(),r3e=a("p"),AEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LEr=l(),ic=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),xEr=o("not"),$Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),kEr=o("from_pretrained()"),SEr=o(" to load the model weights."),REr=l(),F(j4.$$.fragment),PEr=l(),fo=a("div"),F(lk.$$.fragment),BEr=l(),a3e=a("p"),IEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NEr=l(),gn=a("p"),qEr=o("The model class to instantiate is selected based on the "),n3e=a("code"),jEr=o("model_type"),DEr=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),GEr=o("pretrained_model_name_or_path"),OEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),VEr=o("pretrained_model_name_or_path"),XEr=o(":"),zEr=l(),be=a("ul"),D4=a("li"),i3e=a("strong"),QEr=o("beit"),WEr=o(" \u2014 "),DZ=a("a"),UEr=o("BeitForImageClassification"),HEr=o(" (BEiT model)"),JEr=l(),G4=a("li"),d3e=a("strong"),YEr=o("convnext"),ZEr=o(" \u2014 "),GZ=a("a"),KEr=o("ConvNextForImageClassification"),e4r=o(" (ConvNeXT model)"),o4r=l(),O4=a("li"),c3e=a("strong"),r4r=o("cvt"),t4r=o(" \u2014 "),OZ=a("a"),a4r=o("CvtForImageClassification"),n4r=o(" (CvT model)"),s4r=l(),V4=a("li"),m3e=a("strong"),l4r=o("data2vec-vision"),i4r=o(" \u2014 "),VZ=a("a"),d4r=o("Data2VecVisionForImageClassification"),c4r=o(" (Data2VecVision model)"),m4r=l(),El=a("li"),f3e=a("strong"),f4r=o("deit"),g4r=o(" \u2014 "),XZ=a("a"),h4r=o("DeiTForImageClassification"),u4r=o(" or "),zZ=a("a"),p4r=o("DeiTForImageClassificationWithTeacher"),_4r=o(" (DeiT model)"),b4r=l(),X4=a("li"),g3e=a("strong"),v4r=o("imagegpt"),F4r=o(" \u2014 "),QZ=a("a"),T4r=o("ImageGPTForImageClassification"),M4r=o(" (ImageGPT model)"),E4r=l(),Cl=a("li"),h3e=a("strong"),C4r=o("levit"),w4r=o(" \u2014 "),WZ=a("a"),A4r=o("LevitForImageClassification"),L4r=o(" or "),UZ=a("a"),y4r=o("LevitForImageClassificationWithTeacher"),x4r=o(" (LeViT model)"),$4r=l(),z4=a("li"),u3e=a("strong"),k4r=o("mobilevit"),S4r=o(" \u2014 "),HZ=a("a"),R4r=o("MobileViTForImageClassification"),P4r=o(" (MobileViT model)"),B4r=l(),St=a("li"),p3e=a("strong"),I4r=o("perceiver"),N4r=o(" \u2014 "),JZ=a("a"),q4r=o("PerceiverForImageClassificationLearned"),j4r=o(" or "),YZ=a("a"),D4r=o("PerceiverForImageClassificationFourier"),G4r=o(" or "),ZZ=a("a"),O4r=o("PerceiverForImageClassificationConvProcessing"),V4r=o(" (Perceiver model)"),X4r=l(),Q4=a("li"),_3e=a("strong"),z4r=o("poolformer"),Q4r=o(" \u2014 "),KZ=a("a"),W4r=o("PoolFormerForImageClassification"),U4r=o(" (PoolFormer model)"),H4r=l(),W4=a("li"),b3e=a("strong"),J4r=o("regnet"),Y4r=o(" \u2014 "),eK=a("a"),Z4r=o("RegNetForImageClassification"),K4r=o(" (RegNet model)"),eCr=l(),U4=a("li"),v3e=a("strong"),oCr=o("resnet"),rCr=o(" \u2014 "),oK=a("a"),tCr=o("ResNetForImageClassification"),aCr=o(" (ResNet model)"),nCr=l(),H4=a("li"),F3e=a("strong"),sCr=o("segformer"),lCr=o(" \u2014 "),rK=a("a"),iCr=o("SegformerForImageClassification"),dCr=o(" (SegFormer model)"),cCr=l(),J4=a("li"),T3e=a("strong"),mCr=o("swin"),fCr=o(" \u2014 "),tK=a("a"),gCr=o("SwinForImageClassification"),hCr=o(" (Swin Transformer model)"),uCr=l(),Y4=a("li"),M3e=a("strong"),pCr=o("swinv2"),_Cr=o(" \u2014 "),aK=a("a"),bCr=o("Swinv2ForImageClassification"),vCr=o(" (Swin Transformer V2 model)"),FCr=l(),Z4=a("li"),E3e=a("strong"),TCr=o("van"),MCr=o(" \u2014 "),nK=a("a"),ECr=o("VanForImageClassification"),CCr=o(" (VAN model)"),wCr=l(),K4=a("li"),C3e=a("strong"),ACr=o("vit"),LCr=o(" \u2014 "),sK=a("a"),yCr=o("ViTForImageClassification"),xCr=o(" (ViT model)"),$Cr=l(),eC=a("li"),w3e=a("strong"),kCr=o("vit_msn"),SCr=o(" \u2014 "),lK=a("a"),RCr=o("ViTMSNForImageClassification"),PCr=o(" (ViTMSN model)"),BCr=l(),oC=a("p"),ICr=o("The model is set in evaluation mode by default using "),A3e=a("code"),NCr=o("model.eval()"),qCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L3e=a("code"),jCr=o("model.train()"),DCr=l(),F(rC.$$.fragment),Voo=l(),dc=a("h2"),tC=a("a"),y3e=a("span"),F(ik.$$.fragment),GCr=l(),x3e=a("span"),OCr=o("AutoModelForVideoClassification"),Xoo=l(),Uo=a("div"),F(dk.$$.fragment),VCr=l(),cc=a("p"),XCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),iK=a("a"),zCr=o("from_pretrained()"),QCr=o(" class method or the "),dK=a("a"),WCr=o("from_config()"),UCr=o(` class
method.`),HCr=l(),ck=a("p"),JCr=o("This class cannot be instantiated directly using "),$3e=a("code"),YCr=o("__init__()"),ZCr=o(" (throws an error)."),KCr=l(),Rt=a("div"),F(mk.$$.fragment),e3r=l(),k3e=a("p"),o3r=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),r3r=l(),mc=a("p"),t3r=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),a3r=o("not"),n3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),s3r=o("from_pretrained()"),l3r=o(" to load the model weights."),i3r=l(),F(aC.$$.fragment),d3r=l(),go=a("div"),F(fk.$$.fragment),c3r=l(),R3e=a("p"),m3r=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),f3r=l(),hn=a("p"),g3r=o("The model class to instantiate is selected based on the "),P3e=a("code"),h3r=o("model_type"),u3r=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=a("code"),b3r=o("pretrained_model_name_or_path"),v3r=o(":"),F3r=l(),N3e=a("ul"),nC=a("li"),q3e=a("strong"),T3r=o("videomae"),M3r=o(" \u2014 "),mK=a("a"),E3r=o("VideoMAEForVideoClassification"),C3r=o(" (VideoMAE model)"),w3r=l(),sC=a("p"),A3r=o("The model is set in evaluation mode by default using "),j3e=a("code"),L3r=o("model.eval()"),y3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D3e=a("code"),x3r=o("model.train()"),$3r=l(),F(lC.$$.fragment),zoo=l(),fc=a("h2"),iC=a("a"),G3e=a("span"),F(gk.$$.fragment),k3r=l(),O3e=a("span"),S3r=o("AutoModelForVision2Seq"),Qoo=l(),Ho=a("div"),F(hk.$$.fragment),R3r=l(),gc=a("p"),P3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fK=a("a"),B3r=o("from_pretrained()"),I3r=o(" class method or the "),gK=a("a"),N3r=o("from_config()"),q3r=o(` class
method.`),j3r=l(),uk=a("p"),D3r=o("This class cannot be instantiated directly using "),V3e=a("code"),G3r=o("__init__()"),O3r=o(" (throws an error)."),V3r=l(),Pt=a("div"),F(pk.$$.fragment),X3r=l(),X3e=a("p"),z3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q3r=l(),hc=a("p"),W3r=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),U3r=o("not"),H3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),J3r=o("from_pretrained()"),Y3r=o(" to load the model weights."),Z3r=l(),F(dC.$$.fragment),K3r=l(),ho=a("div"),F(_k.$$.fragment),e5r=l(),Q3e=a("p"),o5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r5r=l(),un=a("p"),t5r=o("The model class to instantiate is selected based on the "),W3e=a("code"),a5r=o("model_type"),n5r=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),s5r=o("pretrained_model_name_or_path"),l5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),i5r=o("pretrained_model_name_or_path"),d5r=o(":"),c5r=l(),J3e=a("ul"),cC=a("li"),Y3e=a("strong"),m5r=o("vision-encoder-decoder"),f5r=o(" \u2014 "),uK=a("a"),g5r=o("VisionEncoderDecoderModel"),h5r=o(" (Vision Encoder decoder model)"),u5r=l(),mC=a("p"),p5r=o("The model is set in evaluation mode by default using "),Z3e=a("code"),_5r=o("model.eval()"),b5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K3e=a("code"),v5r=o("model.train()"),F5r=l(),F(fC.$$.fragment),Woo=l(),uc=a("h2"),gC=a("a"),e5e=a("span"),F(bk.$$.fragment),T5r=l(),o5e=a("span"),M5r=o("AutoModelForVisualQuestionAnswering"),Uoo=l(),Jo=a("div"),F(vk.$$.fragment),E5r=l(),pc=a("p"),C5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),pK=a("a"),w5r=o("from_pretrained()"),A5r=o(" class method or the "),_K=a("a"),L5r=o("from_config()"),y5r=o(` class
method.`),x5r=l(),Fk=a("p"),$5r=o("This class cannot be instantiated directly using "),r5e=a("code"),k5r=o("__init__()"),S5r=o(" (throws an error)."),R5r=l(),Bt=a("div"),F(Tk.$$.fragment),P5r=l(),t5e=a("p"),B5r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),I5r=l(),_c=a("p"),N5r=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),q5r=o("not"),j5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),D5r=o("from_pretrained()"),G5r=o(" to load the model weights."),O5r=l(),F(hC.$$.fragment),V5r=l(),uo=a("div"),F(Mk.$$.fragment),X5r=l(),n5e=a("p"),z5r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Q5r=l(),pn=a("p"),W5r=o("The model class to instantiate is selected based on the "),s5e=a("code"),U5r=o("model_type"),H5r=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),Z5r=o("pretrained_model_name_or_path"),K5r=o(":"),e0r=l(),d5e=a("ul"),uC=a("li"),c5e=a("strong"),o0r=o("vilt"),r0r=o(" \u2014 "),vK=a("a"),t0r=o("ViltForQuestionAnswering"),a0r=o(" (ViLT model)"),n0r=l(),pC=a("p"),s0r=o("The model is set in evaluation mode by default using "),m5e=a("code"),l0r=o("model.eval()"),i0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f5e=a("code"),d0r=o("model.train()"),c0r=l(),F(_C.$$.fragment),Hoo=l(),bc=a("h2"),bC=a("a"),g5e=a("span"),F(Ek.$$.fragment),m0r=l(),h5e=a("span"),f0r=o("AutoModelForAudioClassification"),Joo=l(),Yo=a("div"),F(Ck.$$.fragment),g0r=l(),vc=a("p"),h0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FK=a("a"),u0r=o("from_pretrained()"),p0r=o(" class method or the "),TK=a("a"),_0r=o("from_config()"),b0r=o(` class
method.`),v0r=l(),wk=a("p"),F0r=o("This class cannot be instantiated directly using "),u5e=a("code"),T0r=o("__init__()"),M0r=o(" (throws an error)."),E0r=l(),It=a("div"),F(Ak.$$.fragment),C0r=l(),p5e=a("p"),w0r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),A0r=l(),Fc=a("p"),L0r=o(`Note:
Loading a model from its configuration file does `),_5e=a("strong"),y0r=o("not"),x0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),$0r=o("from_pretrained()"),k0r=o(" to load the model weights."),S0r=l(),F(vC.$$.fragment),R0r=l(),po=a("div"),F(Lk.$$.fragment),P0r=l(),b5e=a("p"),B0r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),I0r=l(),_n=a("p"),N0r=o("The model class to instantiate is selected based on the "),v5e=a("code"),q0r=o("model_type"),j0r=o(` property of the config object (either
passed as an argument or loaded from `),F5e=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=a("code"),O0r=o("pretrained_model_name_or_path"),V0r=o(":"),X0r=l(),Pe=a("ul"),FC=a("li"),M5e=a("strong"),z0r=o("data2vec-audio"),Q0r=o(" \u2014 "),EK=a("a"),W0r=o("Data2VecAudioForSequenceClassification"),U0r=o(" (Data2VecAudio model)"),H0r=l(),TC=a("li"),E5e=a("strong"),J0r=o("hubert"),Y0r=o(" \u2014 "),CK=a("a"),Z0r=o("HubertForSequenceClassification"),K0r=o(" (Hubert model)"),ewr=l(),MC=a("li"),C5e=a("strong"),owr=o("sew"),rwr=o(" \u2014 "),wK=a("a"),twr=o("SEWForSequenceClassification"),awr=o(" (SEW model)"),nwr=l(),EC=a("li"),w5e=a("strong"),swr=o("sew-d"),lwr=o(" \u2014 "),AK=a("a"),iwr=o("SEWDForSequenceClassification"),dwr=o(" (SEW-D model)"),cwr=l(),CC=a("li"),A5e=a("strong"),mwr=o("unispeech"),fwr=o(" \u2014 "),LK=a("a"),gwr=o("UniSpeechForSequenceClassification"),hwr=o(" (UniSpeech model)"),uwr=l(),wC=a("li"),L5e=a("strong"),pwr=o("unispeech-sat"),_wr=o(" \u2014 "),yK=a("a"),bwr=o("UniSpeechSatForSequenceClassification"),vwr=o(" (UniSpeechSat model)"),Fwr=l(),AC=a("li"),y5e=a("strong"),Twr=o("wav2vec2"),Mwr=o(" \u2014 "),xK=a("a"),Ewr=o("Wav2Vec2ForSequenceClassification"),Cwr=o(" (Wav2Vec2 model)"),wwr=l(),LC=a("li"),x5e=a("strong"),Awr=o("wav2vec2-conformer"),Lwr=o(" \u2014 "),$K=a("a"),ywr=o("Wav2Vec2ConformerForSequenceClassification"),xwr=o(" (Wav2Vec2-Conformer model)"),$wr=l(),yC=a("li"),$5e=a("strong"),kwr=o("wavlm"),Swr=o(" \u2014 "),kK=a("a"),Rwr=o("WavLMForSequenceClassification"),Pwr=o(" (WavLM model)"),Bwr=l(),xC=a("p"),Iwr=o("The model is set in evaluation mode by default using "),k5e=a("code"),Nwr=o("model.eval()"),qwr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S5e=a("code"),jwr=o("model.train()"),Dwr=l(),F($C.$$.fragment),Yoo=l(),Tc=a("h2"),kC=a("a"),R5e=a("span"),F(yk.$$.fragment),Gwr=l(),P5e=a("span"),Owr=o("AutoModelForAudioFrameClassification"),Zoo=l(),Zo=a("div"),F(xk.$$.fragment),Vwr=l(),Mc=a("p"),Xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SK=a("a"),zwr=o("from_pretrained()"),Qwr=o(" class method or the "),RK=a("a"),Wwr=o("from_config()"),Uwr=o(` class
method.`),Hwr=l(),$k=a("p"),Jwr=o("This class cannot be instantiated directly using "),B5e=a("code"),Ywr=o("__init__()"),Zwr=o(" (throws an error)."),Kwr=l(),Nt=a("div"),F(kk.$$.fragment),eAr=l(),I5e=a("p"),oAr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),rAr=l(),Ec=a("p"),tAr=o(`Note:
Loading a model from its configuration file does `),N5e=a("strong"),aAr=o("not"),nAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),sAr=o("from_pretrained()"),lAr=o(" to load the model weights."),iAr=l(),F(SC.$$.fragment),dAr=l(),_o=a("div"),F(Sk.$$.fragment),cAr=l(),q5e=a("p"),mAr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),fAr=l(),bn=a("p"),gAr=o("The model class to instantiate is selected based on the "),j5e=a("code"),hAr=o("model_type"),uAr=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),pAr=o("pretrained_model_name_or_path"),_Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(":"),FAr=l(),gt=a("ul"),RC=a("li"),O5e=a("strong"),TAr=o("data2vec-audio"),MAr=o(" \u2014 "),BK=a("a"),EAr=o("Data2VecAudioForAudioFrameClassification"),CAr=o(" (Data2VecAudio model)"),wAr=l(),PC=a("li"),V5e=a("strong"),AAr=o("unispeech-sat"),LAr=o(" \u2014 "),IK=a("a"),yAr=o("UniSpeechSatForAudioFrameClassification"),xAr=o(" (UniSpeechSat model)"),$Ar=l(),BC=a("li"),X5e=a("strong"),kAr=o("wav2vec2"),SAr=o(" \u2014 "),NK=a("a"),RAr=o("Wav2Vec2ForAudioFrameClassification"),PAr=o(" (Wav2Vec2 model)"),BAr=l(),IC=a("li"),z5e=a("strong"),IAr=o("wav2vec2-conformer"),NAr=o(" \u2014 "),qK=a("a"),qAr=o("Wav2Vec2ConformerForAudioFrameClassification"),jAr=o(" (Wav2Vec2-Conformer model)"),DAr=l(),NC=a("li"),Q5e=a("strong"),GAr=o("wavlm"),OAr=o(" \u2014 "),jK=a("a"),VAr=o("WavLMForAudioFrameClassification"),XAr=o(" (WavLM model)"),zAr=l(),qC=a("p"),QAr=o("The model is set in evaluation mode by default using "),W5e=a("code"),WAr=o("model.eval()"),UAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U5e=a("code"),HAr=o("model.train()"),JAr=l(),F(jC.$$.fragment),Koo=l(),Cc=a("h2"),DC=a("a"),H5e=a("span"),F(Rk.$$.fragment),YAr=l(),J5e=a("span"),ZAr=o("AutoModelForCTC"),ero=l(),Ko=a("div"),F(Pk.$$.fragment),KAr=l(),wc=a("p"),e6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DK=a("a"),o6r=o("from_pretrained()"),r6r=o(" class method or the "),GK=a("a"),t6r=o("from_config()"),a6r=o(` class
method.`),n6r=l(),Bk=a("p"),s6r=o("This class cannot be instantiated directly using "),Y5e=a("code"),l6r=o("__init__()"),i6r=o(" (throws an error)."),d6r=l(),qt=a("div"),F(Ik.$$.fragment),c6r=l(),Z5e=a("p"),m6r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),f6r=l(),Ac=a("p"),g6r=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),h6r=o("not"),u6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),p6r=o("from_pretrained()"),_6r=o(" to load the model weights."),b6r=l(),F(GC.$$.fragment),v6r=l(),bo=a("div"),F(Nk.$$.fragment),F6r=l(),e0e=a("p"),T6r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),M6r=l(),vn=a("p"),E6r=o("The model class to instantiate is selected based on the "),o0e=a("code"),C6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),A6r=o("pretrained_model_name_or_path"),L6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),y6r=o("pretrained_model_name_or_path"),x6r=o(":"),$6r=l(),Le=a("ul"),OC=a("li"),a0e=a("strong"),k6r=o("data2vec-audio"),S6r=o(" \u2014 "),VK=a("a"),R6r=o("Data2VecAudioForCTC"),P6r=o(" (Data2VecAudio model)"),B6r=l(),VC=a("li"),n0e=a("strong"),I6r=o("hubert"),N6r=o(" \u2014 "),XK=a("a"),q6r=o("HubertForCTC"),j6r=o(" (Hubert model)"),D6r=l(),XC=a("li"),s0e=a("strong"),G6r=o("mctct"),O6r=o(" \u2014 "),zK=a("a"),V6r=o("MCTCTForCTC"),X6r=o(" (M-CTC-T model)"),z6r=l(),zC=a("li"),l0e=a("strong"),Q6r=o("sew"),W6r=o(" \u2014 "),QK=a("a"),U6r=o("SEWForCTC"),H6r=o(" (SEW model)"),J6r=l(),QC=a("li"),i0e=a("strong"),Y6r=o("sew-d"),Z6r=o(" \u2014 "),WK=a("a"),K6r=o("SEWDForCTC"),e7r=o(" (SEW-D model)"),o7r=l(),WC=a("li"),d0e=a("strong"),r7r=o("unispeech"),t7r=o(" \u2014 "),UK=a("a"),a7r=o("UniSpeechForCTC"),n7r=o(" (UniSpeech model)"),s7r=l(),UC=a("li"),c0e=a("strong"),l7r=o("unispeech-sat"),i7r=o(" \u2014 "),HK=a("a"),d7r=o("UniSpeechSatForCTC"),c7r=o(" (UniSpeechSat model)"),m7r=l(),HC=a("li"),m0e=a("strong"),f7r=o("wav2vec2"),g7r=o(" \u2014 "),JK=a("a"),h7r=o("Wav2Vec2ForCTC"),u7r=o(" (Wav2Vec2 model)"),p7r=l(),JC=a("li"),f0e=a("strong"),_7r=o("wav2vec2-conformer"),b7r=o(" \u2014 "),YK=a("a"),v7r=o("Wav2Vec2ConformerForCTC"),F7r=o(" (Wav2Vec2-Conformer model)"),T7r=l(),YC=a("li"),g0e=a("strong"),M7r=o("wavlm"),E7r=o(" \u2014 "),ZK=a("a"),C7r=o("WavLMForCTC"),w7r=o(" (WavLM model)"),A7r=l(),ZC=a("p"),L7r=o("The model is set in evaluation mode by default using "),h0e=a("code"),y7r=o("model.eval()"),x7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u0e=a("code"),$7r=o("model.train()"),k7r=l(),F(KC.$$.fragment),oro=l(),Lc=a("h2"),e3=a("a"),p0e=a("span"),F(qk.$$.fragment),S7r=l(),_0e=a("span"),R7r=o("AutoModelForSpeechSeq2Seq"),rro=l(),er=a("div"),F(jk.$$.fragment),P7r=l(),yc=a("p"),B7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KK=a("a"),I7r=o("from_pretrained()"),N7r=o(" class method or the "),eee=a("a"),q7r=o("from_config()"),j7r=o(` class
method.`),D7r=l(),Dk=a("p"),G7r=o("This class cannot be instantiated directly using "),b0e=a("code"),O7r=o("__init__()"),V7r=o(" (throws an error)."),X7r=l(),jt=a("div"),F(Gk.$$.fragment),z7r=l(),v0e=a("p"),Q7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),W7r=l(),xc=a("p"),U7r=o(`Note:
Loading a model from its configuration file does `),F0e=a("strong"),H7r=o("not"),J7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),Y7r=o("from_pretrained()"),Z7r=o(" to load the model weights."),K7r=l(),F(o3.$$.fragment),eLr=l(),vo=a("div"),F(Ok.$$.fragment),oLr=l(),T0e=a("p"),rLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tLr=l(),Fn=a("p"),aLr=o("The model class to instantiate is selected based on the "),M0e=a("code"),nLr=o("model_type"),sLr=o(` property of the config object (either
passed as an argument or loaded from `),E0e=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(":"),mLr=l(),$c=a("ul"),r3=a("li"),w0e=a("strong"),fLr=o("speech-encoder-decoder"),gLr=o(" \u2014 "),ree=a("a"),hLr=o("SpeechEncoderDecoderModel"),uLr=o(" (Speech Encoder decoder model)"),pLr=l(),t3=a("li"),A0e=a("strong"),_Lr=o("speech_to_text"),bLr=o(" \u2014 "),tee=a("a"),vLr=o("Speech2TextForConditionalGeneration"),FLr=o(" (Speech2Text model)"),TLr=l(),a3=a("li"),L0e=a("strong"),MLr=o("whisper"),ELr=o(" \u2014 "),aee=a("a"),CLr=o("WhisperForConditionalGeneration"),wLr=o(" (Whisper model)"),ALr=l(),n3=a("p"),LLr=o("The model is set in evaluation mode by default using "),y0e=a("code"),yLr=o("model.eval()"),xLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=a("code"),$Lr=o("model.train()"),kLr=l(),F(s3.$$.fragment),tro=l(),kc=a("h2"),l3=a("a"),$0e=a("span"),F(Vk.$$.fragment),SLr=l(),k0e=a("span"),RLr=o("AutoModelForAudioXVector"),aro=l(),or=a("div"),F(Xk.$$.fragment),PLr=l(),Sc=a("p"),BLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nee=a("a"),ILr=o("from_pretrained()"),NLr=o(" class method or the "),see=a("a"),qLr=o("from_config()"),jLr=o(` class
method.`),DLr=l(),zk=a("p"),GLr=o("This class cannot be instantiated directly using "),S0e=a("code"),OLr=o("__init__()"),VLr=o(" (throws an error)."),XLr=l(),Dt=a("div"),F(Qk.$$.fragment),zLr=l(),R0e=a("p"),QLr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),WLr=l(),Rc=a("p"),ULr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),HLr=o("not"),JLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=a("a"),YLr=o("from_pretrained()"),ZLr=o(" to load the model weights."),KLr=l(),F(i3.$$.fragment),eyr=l(),Fo=a("div"),F(Wk.$$.fragment),oyr=l(),B0e=a("p"),ryr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tyr=l(),Tn=a("p"),ayr=o("The model class to instantiate is selected based on the "),I0e=a("code"),nyr=o("model_type"),syr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),lyr=o("pretrained_model_name_or_path"),iyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),dyr=o("pretrained_model_name_or_path"),cyr=o(":"),myr=l(),ht=a("ul"),d3=a("li"),j0e=a("strong"),fyr=o("data2vec-audio"),gyr=o(" \u2014 "),iee=a("a"),hyr=o("Data2VecAudioForXVector"),uyr=o(" (Data2VecAudio model)"),pyr=l(),c3=a("li"),D0e=a("strong"),_yr=o("unispeech-sat"),byr=o(" \u2014 "),dee=a("a"),vyr=o("UniSpeechSatForXVector"),Fyr=o(" (UniSpeechSat model)"),Tyr=l(),m3=a("li"),G0e=a("strong"),Myr=o("wav2vec2"),Eyr=o(" \u2014 "),cee=a("a"),Cyr=o("Wav2Vec2ForXVector"),wyr=o(" (Wav2Vec2 model)"),Ayr=l(),f3=a("li"),O0e=a("strong"),Lyr=o("wav2vec2-conformer"),yyr=o(" \u2014 "),mee=a("a"),xyr=o("Wav2Vec2ConformerForXVector"),$yr=o(" (Wav2Vec2-Conformer model)"),kyr=l(),g3=a("li"),V0e=a("strong"),Syr=o("wavlm"),Ryr=o(" \u2014 "),fee=a("a"),Pyr=o("WavLMForXVector"),Byr=o(" (WavLM model)"),Iyr=l(),h3=a("p"),Nyr=o("The model is set in evaluation mode by default using "),X0e=a("code"),qyr=o("model.eval()"),jyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z0e=a("code"),Dyr=o("model.train()"),Gyr=l(),F(u3.$$.fragment),nro=l(),Pc=a("h2"),p3=a("a"),Q0e=a("span"),F(Uk.$$.fragment),Oyr=l(),W0e=a("span"),Vyr=o("AutoModelForMaskedImageModeling"),sro=l(),rr=a("div"),F(Hk.$$.fragment),Xyr=l(),Bc=a("p"),zyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gee=a("a"),Qyr=o("from_pretrained()"),Wyr=o(" class method or the "),hee=a("a"),Uyr=o("from_config()"),Hyr=o(` class
method.`),Jyr=l(),Jk=a("p"),Yyr=o("This class cannot be instantiated directly using "),U0e=a("code"),Zyr=o("__init__()"),Kyr=o(" (throws an error)."),e8r=l(),Gt=a("div"),F(Yk.$$.fragment),o8r=l(),H0e=a("p"),r8r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),t8r=l(),Ic=a("p"),a8r=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),n8r=o("not"),s8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),l8r=o("from_pretrained()"),i8r=o(" to load the model weights."),d8r=l(),F(_3.$$.fragment),c8r=l(),To=a("div"),F(Zk.$$.fragment),m8r=l(),Y0e=a("p"),f8r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),g8r=l(),Mn=a("p"),h8r=o("The model class to instantiate is selected based on the "),Z0e=a("code"),u8r=o("model_type"),p8r=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),_8r=o("pretrained_model_name_or_path"),b8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(":"),T8r=l(),En=a("ul"),b3=a("li"),owe=a("strong"),M8r=o("deit"),E8r=o(" \u2014 "),pee=a("a"),C8r=o("DeiTForMaskedImageModeling"),w8r=o(" (DeiT model)"),A8r=l(),v3=a("li"),rwe=a("strong"),L8r=o("swin"),y8r=o(" \u2014 "),_ee=a("a"),x8r=o("SwinForMaskedImageModeling"),$8r=o(" (Swin Transformer model)"),k8r=l(),F3=a("li"),twe=a("strong"),S8r=o("swinv2"),R8r=o(" \u2014 "),bee=a("a"),P8r=o("Swinv2ForMaskedImageModeling"),B8r=o(" (Swin Transformer V2 model)"),I8r=l(),T3=a("li"),awe=a("strong"),N8r=o("vit"),q8r=o(" \u2014 "),vee=a("a"),j8r=o("ViTForMaskedImageModeling"),D8r=o(" (ViT model)"),G8r=l(),M3=a("p"),O8r=o("The model is set in evaluation mode by default using "),nwe=a("code"),V8r=o("model.eval()"),X8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),swe=a("code"),z8r=o("model.train()"),Q8r=l(),F(E3.$$.fragment),lro=l(),Nc=a("h2"),C3=a("a"),lwe=a("span"),F(Kk.$$.fragment),W8r=l(),iwe=a("span"),U8r=o("AutoModelForObjectDetection"),iro=l(),tr=a("div"),F(eS.$$.fragment),H8r=l(),qc=a("p"),J8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Fee=a("a"),Y8r=o("from_pretrained()"),Z8r=o(" class method or the "),Tee=a("a"),K8r=o("from_config()"),e9r=o(` class
method.`),o9r=l(),oS=a("p"),r9r=o("This class cannot be instantiated directly using "),dwe=a("code"),t9r=o("__init__()"),a9r=o(" (throws an error)."),n9r=l(),Ot=a("div"),F(rS.$$.fragment),s9r=l(),cwe=a("p"),l9r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),i9r=l(),jc=a("p"),d9r=o(`Note:
Loading a model from its configuration file does `),mwe=a("strong"),c9r=o("not"),m9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),f9r=o("from_pretrained()"),g9r=o(" to load the model weights."),h9r=l(),F(w3.$$.fragment),u9r=l(),Mo=a("div"),F(tS.$$.fragment),p9r=l(),fwe=a("p"),_9r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),b9r=l(),Cn=a("p"),v9r=o("The model class to instantiate is selected based on the "),gwe=a("code"),F9r=o("model_type"),T9r=o(` property of the config object (either
passed as an argument or loaded from `),hwe=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uwe=a("code"),C9r=o("pretrained_model_name_or_path"),w9r=o(":"),A9r=l(),wn=a("ul"),A3=a("li"),pwe=a("strong"),L9r=o("conditional_detr"),y9r=o(" \u2014 "),Eee=a("a"),x9r=o("ConditionalDetrForObjectDetection"),$9r=o(" (Conditional DETR model)"),k9r=l(),L3=a("li"),_we=a("strong"),S9r=o("deformable_detr"),R9r=o(" \u2014 "),Cee=a("a"),P9r=o("DeformableDetrForObjectDetection"),B9r=o(" (Deformable DETR model)"),I9r=l(),y3=a("li"),bwe=a("strong"),N9r=o("detr"),q9r=o(" \u2014 "),wee=a("a"),j9r=o("DetrForObjectDetection"),D9r=o(" (DETR model)"),G9r=l(),x3=a("li"),vwe=a("strong"),O9r=o("yolos"),V9r=o(" \u2014 "),Aee=a("a"),X9r=o("YolosForObjectDetection"),z9r=o(" (YOLOS model)"),Q9r=l(),$3=a("p"),W9r=o("The model is set in evaluation mode by default using "),Fwe=a("code"),U9r=o("model.eval()"),H9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Twe=a("code"),J9r=o("model.train()"),Y9r=l(),F(k3.$$.fragment),dro=l(),Dc=a("h2"),S3=a("a"),Mwe=a("span"),F(aS.$$.fragment),Z9r=l(),Ewe=a("span"),K9r=o("AutoModelForImageSegmentation"),cro=l(),ar=a("div"),F(nS.$$.fragment),exr=l(),Gc=a("p"),oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Lee=a("a"),rxr=o("from_pretrained()"),txr=o(" class method or the "),yee=a("a"),axr=o("from_config()"),nxr=o(` class
method.`),sxr=l(),sS=a("p"),lxr=o("This class cannot be instantiated directly using "),Cwe=a("code"),ixr=o("__init__()"),dxr=o(" (throws an error)."),cxr=l(),Vt=a("div"),F(lS.$$.fragment),mxr=l(),wwe=a("p"),fxr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gxr=l(),Oc=a("p"),hxr=o(`Note:
Loading a model from its configuration file does `),Awe=a("strong"),uxr=o("not"),pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("a"),_xr=o("from_pretrained()"),bxr=o(" to load the model weights."),vxr=l(),F(R3.$$.fragment),Fxr=l(),Eo=a("div"),F(iS.$$.fragment),Txr=l(),Lwe=a("p"),Mxr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Exr=l(),An=a("p"),Cxr=o("The model class to instantiate is selected based on the "),ywe=a("code"),wxr=o("model_type"),Axr=o(` property of the config object (either
passed as an argument or loaded from `),xwe=a("code"),Lxr=o("pretrained_model_name_or_path"),yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=a("code"),xxr=o("pretrained_model_name_or_path"),$xr=o(":"),kxr=l(),kwe=a("ul"),P3=a("li"),Swe=a("strong"),Sxr=o("detr"),Rxr=o(" \u2014 "),$ee=a("a"),Pxr=o("DetrForSegmentation"),Bxr=o(" (DETR model)"),Ixr=l(),B3=a("p"),Nxr=o("The model is set in evaluation mode by default using "),Rwe=a("code"),qxr=o("model.eval()"),jxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pwe=a("code"),Dxr=o("model.train()"),Gxr=l(),F(I3.$$.fragment),mro=l(),Vc=a("h2"),N3=a("a"),Bwe=a("span"),F(dS.$$.fragment),Oxr=l(),Iwe=a("span"),Vxr=o("AutoModelForSemanticSegmentation"),fro=l(),nr=a("div"),F(cS.$$.fragment),Xxr=l(),Xc=a("p"),zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kee=a("a"),Qxr=o("from_pretrained()"),Wxr=o(" class method or the "),See=a("a"),Uxr=o("from_config()"),Hxr=o(` class
method.`),Jxr=l(),mS=a("p"),Yxr=o("This class cannot be instantiated directly using "),Nwe=a("code"),Zxr=o("__init__()"),Kxr=o(" (throws an error)."),e$r=l(),Xt=a("div"),F(fS.$$.fragment),o$r=l(),qwe=a("p"),r$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),t$r=l(),zc=a("p"),a$r=o(`Note:
Loading a model from its configuration file does `),jwe=a("strong"),n$r=o("not"),s$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("a"),l$r=o("from_pretrained()"),i$r=o(" to load the model weights."),d$r=l(),F(q3.$$.fragment),c$r=l(),Co=a("div"),F(gS.$$.fragment),m$r=l(),Dwe=a("p"),f$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),g$r=l(),Ln=a("p"),h$r=o("The model class to instantiate is selected based on the "),Gwe=a("code"),u$r=o("model_type"),p$r=o(` property of the config object (either
passed as an argument or loaded from `),Owe=a("code"),_$r=o("pretrained_model_name_or_path"),b$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vwe=a("code"),v$r=o("pretrained_model_name_or_path"),F$r=o(":"),T$r=l(),ut=a("ul"),j3=a("li"),Xwe=a("strong"),M$r=o("beit"),E$r=o(" \u2014 "),Pee=a("a"),C$r=o("BeitForSemanticSegmentation"),w$r=o(" (BEiT model)"),A$r=l(),D3=a("li"),zwe=a("strong"),L$r=o("data2vec-vision"),y$r=o(" \u2014 "),Bee=a("a"),x$r=o("Data2VecVisionForSemanticSegmentation"),$$r=o(" (Data2VecVision model)"),k$r=l(),G3=a("li"),Qwe=a("strong"),S$r=o("dpt"),R$r=o(" \u2014 "),Iee=a("a"),P$r=o("DPTForSemanticSegmentation"),B$r=o(" (DPT model)"),I$r=l(),O3=a("li"),Wwe=a("strong"),N$r=o("mobilevit"),q$r=o(" \u2014 "),Nee=a("a"),j$r=o("MobileViTForSemanticSegmentation"),D$r=o(" (MobileViT model)"),G$r=l(),V3=a("li"),Uwe=a("strong"),O$r=o("segformer"),V$r=o(" \u2014 "),qee=a("a"),X$r=o("SegformerForSemanticSegmentation"),z$r=o(" (SegFormer model)"),Q$r=l(),X3=a("p"),W$r=o("The model is set in evaluation mode by default using "),Hwe=a("code"),U$r=o("model.eval()"),H$r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jwe=a("code"),J$r=o("model.train()"),Y$r=l(),F(z3.$$.fragment),gro=l(),Qc=a("h2"),Q3=a("a"),Ywe=a("span"),F(hS.$$.fragment),Z$r=l(),Zwe=a("span"),K$r=o("AutoModelForInstanceSegmentation"),hro=l(),sr=a("div"),F(uS.$$.fragment),ekr=l(),Wc=a("p"),okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jee=a("a"),rkr=o("from_pretrained()"),tkr=o(" class method or the "),Dee=a("a"),akr=o("from_config()"),nkr=o(` class
method.`),skr=l(),pS=a("p"),lkr=o("This class cannot be instantiated directly using "),Kwe=a("code"),ikr=o("__init__()"),dkr=o(" (throws an error)."),ckr=l(),zt=a("div"),F(_S.$$.fragment),mkr=l(),eAe=a("p"),fkr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gkr=l(),Uc=a("p"),hkr=o(`Note:
Loading a model from its configuration file does `),oAe=a("strong"),ukr=o("not"),pkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=a("a"),_kr=o("from_pretrained()"),bkr=o(" to load the model weights."),vkr=l(),F(W3.$$.fragment),Fkr=l(),wo=a("div"),F(bS.$$.fragment),Tkr=l(),rAe=a("p"),Mkr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ekr=l(),yn=a("p"),Ckr=o("The model class to instantiate is selected based on the "),tAe=a("code"),wkr=o("model_type"),Akr=o(` property of the config object (either
passed as an argument or loaded from `),aAe=a("code"),Lkr=o("pretrained_model_name_or_path"),ykr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=a("code"),xkr=o("pretrained_model_name_or_path"),$kr=o(":"),kkr=l(),sAe=a("ul"),U3=a("li"),lAe=a("strong"),Skr=o("maskformer"),Rkr=o(" \u2014 "),Oee=a("a"),Pkr=o("MaskFormerForInstanceSegmentation"),Bkr=o(" (MaskFormer model)"),Ikr=l(),H3=a("p"),Nkr=o("The model is set in evaluation mode by default using "),iAe=a("code"),qkr=o("model.eval()"),jkr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dAe=a("code"),Dkr=o("model.train()"),Gkr=l(),F(J3.$$.fragment),uro=l(),Hc=a("h2"),Y3=a("a"),cAe=a("span"),F(vS.$$.fragment),Okr=l(),mAe=a("span"),Vkr=o("AutoModelForZeroShotObjectDetection"),pro=l(),lr=a("div"),F(FS.$$.fragment),Xkr=l(),Jc=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Vee=a("a"),Qkr=o("from_pretrained()"),Wkr=o(" class method or the "),Xee=a("a"),Ukr=o("from_config()"),Hkr=o(` class
method.`),Jkr=l(),TS=a("p"),Ykr=o("This class cannot be instantiated directly using "),fAe=a("code"),Zkr=o("__init__()"),Kkr=o(" (throws an error)."),eSr=l(),Qt=a("div"),F(MS.$$.fragment),oSr=l(),gAe=a("p"),rSr=o("Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),tSr=l(),Yc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),hAe=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F(Z3.$$.fragment),cSr=l(),Ao=a("div"),F(ES.$$.fragment),mSr=l(),uAe=a("p"),fSr=o("Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),gSr=l(),xn=a("p"),hSr=o("The model class to instantiate is selected based on the "),pAe=a("code"),uSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),_Ae=a("code"),_Sr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),vAe=a("ul"),K3=a("li"),FAe=a("strong"),MSr=o("owlvit"),ESr=o(" \u2014 "),Qee=a("a"),CSr=o("OwlViTForObjectDetection"),wSr=o(" (OWL-ViT model)"),ASr=l(),e5=a("p"),LSr=o("The model is set in evaluation mode by default using "),TAe=a("code"),ySr=o("model.eval()"),xSr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MAe=a("code"),$Sr=o("model.train()"),kSr=l(),F(o5.$$.fragment),_ro=l(),Zc=a("h2"),r5=a("a"),EAe=a("span"),F(CS.$$.fragment),SSr=l(),CAe=a("span"),RSr=o("TFAutoModel"),bro=l(),ir=a("div"),F(wS.$$.fragment),PSr=l(),Kc=a("p"),BSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wee=a("a"),ISr=o("from_pretrained()"),NSr=o(" class method or the "),Uee=a("a"),qSr=o("from_config()"),jSr=o(` class
method.`),DSr=l(),AS=a("p"),GSr=o("This class cannot be instantiated directly using "),wAe=a("code"),OSr=o("__init__()"),VSr=o(" (throws an error)."),XSr=l(),Wt=a("div"),F(LS.$$.fragment),zSr=l(),AAe=a("p"),QSr=o("Instantiates one of the base model classes of the library from a configuration."),WSr=l(),em=a("p"),USr=o(`Note:
Loading a model from its configuration file does `),LAe=a("strong"),HSr=o("not"),JSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),YSr=o("from_pretrained()"),ZSr=o(" to load the model weights."),KSr=l(),F(t5.$$.fragment),eRr=l(),qr=a("div"),F(yS.$$.fragment),oRr=l(),yAe=a("p"),rRr=o("Instantiate one of the base model classes of the library from a pretrained model."),tRr=l(),$n=a("p"),aRr=o("The model class to instantiate is selected based on the "),xAe=a("code"),nRr=o("model_type"),sRr=o(` property of the config object (either
passed as an argument or loaded from `),$Ae=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kAe=a("code"),dRr=o("pretrained_model_name_or_path"),cRr=o(":"),mRr=l(),q=a("ul"),a5=a("li"),SAe=a("strong"),fRr=o("albert"),gRr=o(" \u2014 "),Jee=a("a"),hRr=o("TFAlbertModel"),uRr=o(" (ALBERT model)"),pRr=l(),n5=a("li"),RAe=a("strong"),_Rr=o("bart"),bRr=o(" \u2014 "),Yee=a("a"),vRr=o("TFBartModel"),FRr=o(" (BART model)"),TRr=l(),s5=a("li"),PAe=a("strong"),MRr=o("bert"),ERr=o(" \u2014 "),Zee=a("a"),CRr=o("TFBertModel"),wRr=o(" (BERT model)"),ARr=l(),l5=a("li"),BAe=a("strong"),LRr=o("blenderbot"),yRr=o(" \u2014 "),Kee=a("a"),xRr=o("TFBlenderbotModel"),$Rr=o(" (Blenderbot model)"),kRr=l(),i5=a("li"),IAe=a("strong"),SRr=o("blenderbot-small"),RRr=o(" \u2014 "),eoe=a("a"),PRr=o("TFBlenderbotSmallModel"),BRr=o(" (BlenderbotSmall model)"),IRr=l(),d5=a("li"),NAe=a("strong"),NRr=o("camembert"),qRr=o(" \u2014 "),ooe=a("a"),jRr=o("TFCamembertModel"),DRr=o(" (CamemBERT model)"),GRr=l(),c5=a("li"),qAe=a("strong"),ORr=o("clip"),VRr=o(" \u2014 "),roe=a("a"),XRr=o("TFCLIPModel"),zRr=o(" (CLIP model)"),QRr=l(),m5=a("li"),jAe=a("strong"),WRr=o("convbert"),URr=o(" \u2014 "),toe=a("a"),HRr=o("TFConvBertModel"),JRr=o(" (ConvBERT model)"),YRr=l(),f5=a("li"),DAe=a("strong"),ZRr=o("convnext"),KRr=o(" \u2014 "),aoe=a("a"),ePr=o("TFConvNextModel"),oPr=o(" (ConvNeXT model)"),rPr=l(),g5=a("li"),GAe=a("strong"),tPr=o("ctrl"),aPr=o(" \u2014 "),noe=a("a"),nPr=o("TFCTRLModel"),sPr=o(" (CTRL model)"),lPr=l(),h5=a("li"),OAe=a("strong"),iPr=o("data2vec-vision"),dPr=o(" \u2014 "),soe=a("a"),cPr=o("TFData2VecVisionModel"),mPr=o(" (Data2VecVision model)"),fPr=l(),u5=a("li"),VAe=a("strong"),gPr=o("deberta"),hPr=o(" \u2014 "),loe=a("a"),uPr=o("TFDebertaModel"),pPr=o(" (DeBERTa model)"),_Pr=l(),p5=a("li"),XAe=a("strong"),bPr=o("deberta-v2"),vPr=o(" \u2014 "),ioe=a("a"),FPr=o("TFDebertaV2Model"),TPr=o(" (DeBERTa-v2 model)"),MPr=l(),_5=a("li"),zAe=a("strong"),EPr=o("deit"),CPr=o(" \u2014 "),doe=a("a"),wPr=o("TFDeiTModel"),APr=o(" (DeiT model)"),LPr=l(),b5=a("li"),QAe=a("strong"),yPr=o("distilbert"),xPr=o(" \u2014 "),coe=a("a"),$Pr=o("TFDistilBertModel"),kPr=o(" (DistilBERT model)"),SPr=l(),v5=a("li"),WAe=a("strong"),RPr=o("dpr"),PPr=o(" \u2014 "),moe=a("a"),BPr=o("TFDPRQuestionEncoder"),IPr=o(" (DPR model)"),NPr=l(),F5=a("li"),UAe=a("strong"),qPr=o("electra"),jPr=o(" \u2014 "),foe=a("a"),DPr=o("TFElectraModel"),GPr=o(" (ELECTRA model)"),OPr=l(),T5=a("li"),HAe=a("strong"),VPr=o("flaubert"),XPr=o(" \u2014 "),goe=a("a"),zPr=o("TFFlaubertModel"),QPr=o(" (FlauBERT model)"),WPr=l(),wl=a("li"),JAe=a("strong"),UPr=o("funnel"),HPr=o(" \u2014 "),hoe=a("a"),JPr=o("TFFunnelModel"),YPr=o(" or "),uoe=a("a"),ZPr=o("TFFunnelBaseModel"),KPr=o(" (Funnel Transformer model)"),eBr=l(),M5=a("li"),YAe=a("strong"),oBr=o("gpt2"),rBr=o(" \u2014 "),poe=a("a"),tBr=o("TFGPT2Model"),aBr=o(" (OpenAI GPT-2 model)"),nBr=l(),E5=a("li"),ZAe=a("strong"),sBr=o("gptj"),lBr=o(" \u2014 "),_oe=a("a"),iBr=o("TFGPTJModel"),dBr=o(" (GPT-J model)"),cBr=l(),C5=a("li"),KAe=a("strong"),mBr=o("groupvit"),fBr=o(" \u2014 "),boe=a("a"),gBr=o("TFGroupViTModel"),hBr=o(" (GroupViT model)"),uBr=l(),w5=a("li"),e6e=a("strong"),pBr=o("hubert"),_Br=o(" \u2014 "),voe=a("a"),bBr=o("TFHubertModel"),vBr=o(" (Hubert model)"),FBr=l(),A5=a("li"),o6e=a("strong"),TBr=o("layoutlm"),MBr=o(" \u2014 "),Foe=a("a"),EBr=o("TFLayoutLMModel"),CBr=o(" (LayoutLM model)"),wBr=l(),L5=a("li"),r6e=a("strong"),ABr=o("layoutlmv3"),LBr=o(" \u2014 "),Toe=a("a"),yBr=o("TFLayoutLMv3Model"),xBr=o(" (LayoutLMv3 model)"),$Br=l(),y5=a("li"),t6e=a("strong"),kBr=o("led"),SBr=o(" \u2014 "),Moe=a("a"),RBr=o("TFLEDModel"),PBr=o(" (LED model)"),BBr=l(),x5=a("li"),a6e=a("strong"),IBr=o("longformer"),NBr=o(" \u2014 "),Eoe=a("a"),qBr=o("TFLongformerModel"),jBr=o(" (Longformer model)"),DBr=l(),$5=a("li"),n6e=a("strong"),GBr=o("lxmert"),OBr=o(" \u2014 "),Coe=a("a"),VBr=o("TFLxmertModel"),XBr=o(" (LXMERT model)"),zBr=l(),k5=a("li"),s6e=a("strong"),QBr=o("marian"),WBr=o(" \u2014 "),woe=a("a"),UBr=o("TFMarianModel"),HBr=o(" (Marian model)"),JBr=l(),S5=a("li"),l6e=a("strong"),YBr=o("mbart"),ZBr=o(" \u2014 "),Aoe=a("a"),KBr=o("TFMBartModel"),eIr=o(" (mBART model)"),oIr=l(),R5=a("li"),i6e=a("strong"),rIr=o("mobilebert"),tIr=o(" \u2014 "),Loe=a("a"),aIr=o("TFMobileBertModel"),nIr=o(" (MobileBERT model)"),sIr=l(),P5=a("li"),d6e=a("strong"),lIr=o("mobilevit"),iIr=o(" \u2014 "),yoe=a("a"),dIr=o("TFMobileViTModel"),cIr=o(" (MobileViT model)"),mIr=l(),B5=a("li"),c6e=a("strong"),fIr=o("mpnet"),gIr=o(" \u2014 "),xoe=a("a"),hIr=o("TFMPNetModel"),uIr=o(" (MPNet model)"),pIr=l(),I5=a("li"),m6e=a("strong"),_Ir=o("mt5"),bIr=o(" \u2014 "),$oe=a("a"),vIr=o("TFMT5Model"),FIr=o(" (MT5 model)"),TIr=l(),N5=a("li"),f6e=a("strong"),MIr=o("openai-gpt"),EIr=o(" \u2014 "),koe=a("a"),CIr=o("TFOpenAIGPTModel"),wIr=o(" (OpenAI GPT model)"),AIr=l(),q5=a("li"),g6e=a("strong"),LIr=o("opt"),yIr=o(" \u2014 "),Soe=a("a"),xIr=o("TFOPTModel"),$Ir=o(" (OPT model)"),kIr=l(),j5=a("li"),h6e=a("strong"),SIr=o("pegasus"),RIr=o(" \u2014 "),Roe=a("a"),PIr=o("TFPegasusModel"),BIr=o(" (Pegasus model)"),IIr=l(),D5=a("li"),u6e=a("strong"),NIr=o("regnet"),qIr=o(" \u2014 "),Poe=a("a"),jIr=o("TFRegNetModel"),DIr=o(" (RegNet model)"),GIr=l(),G5=a("li"),p6e=a("strong"),OIr=o("rembert"),VIr=o(" \u2014 "),Boe=a("a"),XIr=o("TFRemBertModel"),zIr=o(" (RemBERT model)"),QIr=l(),O5=a("li"),_6e=a("strong"),WIr=o("resnet"),UIr=o(" \u2014 "),Ioe=a("a"),HIr=o("TFResNetModel"),JIr=o(" (ResNet model)"),YIr=l(),V5=a("li"),b6e=a("strong"),ZIr=o("roberta"),KIr=o(" \u2014 "),Noe=a("a"),eNr=o("TFRobertaModel"),oNr=o(" (RoBERTa model)"),rNr=l(),X5=a("li"),v6e=a("strong"),tNr=o("roformer"),aNr=o(" \u2014 "),qoe=a("a"),nNr=o("TFRoFormerModel"),sNr=o(" (RoFormer model)"),lNr=l(),z5=a("li"),F6e=a("strong"),iNr=o("segformer"),dNr=o(" \u2014 "),joe=a("a"),cNr=o("TFSegformerModel"),mNr=o(" (SegFormer model)"),fNr=l(),Q5=a("li"),T6e=a("strong"),gNr=o("speech_to_text"),hNr=o(" \u2014 "),Doe=a("a"),uNr=o("TFSpeech2TextModel"),pNr=o(" (Speech2Text model)"),_Nr=l(),W5=a("li"),M6e=a("strong"),bNr=o("swin"),vNr=o(" \u2014 "),Goe=a("a"),FNr=o("TFSwinModel"),TNr=o(" (Swin Transformer model)"),MNr=l(),U5=a("li"),E6e=a("strong"),ENr=o("t5"),CNr=o(" \u2014 "),Ooe=a("a"),wNr=o("TFT5Model"),ANr=o(" (T5 model)"),LNr=l(),H5=a("li"),C6e=a("strong"),yNr=o("tapas"),xNr=o(" \u2014 "),Voe=a("a"),$Nr=o("TFTapasModel"),kNr=o(" (TAPAS model)"),SNr=l(),J5=a("li"),w6e=a("strong"),RNr=o("transfo-xl"),PNr=o(" \u2014 "),Xoe=a("a"),BNr=o("TFTransfoXLModel"),INr=o(" (Transformer-XL model)"),NNr=l(),Y5=a("li"),A6e=a("strong"),qNr=o("vit"),jNr=o(" \u2014 "),zoe=a("a"),DNr=o("TFViTModel"),GNr=o(" (ViT model)"),ONr=l(),Z5=a("li"),L6e=a("strong"),VNr=o("vit_mae"),XNr=o(" \u2014 "),Qoe=a("a"),zNr=o("TFViTMAEModel"),QNr=o(" (ViTMAE model)"),WNr=l(),K5=a("li"),y6e=a("strong"),UNr=o("wav2vec2"),HNr=o(" \u2014 "),Woe=a("a"),JNr=o("TFWav2Vec2Model"),YNr=o(" (Wav2Vec2 model)"),ZNr=l(),e0=a("li"),x6e=a("strong"),KNr=o("xglm"),eqr=o(" \u2014 "),Uoe=a("a"),oqr=o("TFXGLMModel"),rqr=o(" (XGLM model)"),tqr=l(),o0=a("li"),$6e=a("strong"),aqr=o("xlm"),nqr=o(" \u2014 "),Hoe=a("a"),sqr=o("TFXLMModel"),lqr=o(" (XLM model)"),iqr=l(),r0=a("li"),k6e=a("strong"),dqr=o("xlm-roberta"),cqr=o(" \u2014 "),Joe=a("a"),mqr=o("TFXLMRobertaModel"),fqr=o(" (XLM-RoBERTa model)"),gqr=l(),t0=a("li"),S6e=a("strong"),hqr=o("xlnet"),uqr=o(" \u2014 "),Yoe=a("a"),pqr=o("TFXLNetModel"),_qr=o(" (XLNet model)"),bqr=l(),F(a0.$$.fragment),vro=l(),om=a("h2"),n0=a("a"),R6e=a("span"),F(xS.$$.fragment),vqr=l(),P6e=a("span"),Fqr=o("TFAutoModelForPreTraining"),Fro=l(),dr=a("div"),F($S.$$.fragment),Tqr=l(),rm=a("p"),Mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zoe=a("a"),Eqr=o("from_pretrained()"),Cqr=o(" class method or the "),Koe=a("a"),wqr=o("from_config()"),Aqr=o(` class
method.`),Lqr=l(),kS=a("p"),yqr=o("This class cannot be instantiated directly using "),B6e=a("code"),xqr=o("__init__()"),$qr=o(" (throws an error)."),kqr=l(),Ut=a("div"),F(SS.$$.fragment),Sqr=l(),I6e=a("p"),Rqr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pqr=l(),tm=a("p"),Bqr=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),Iqr=o("not"),Nqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ere=a("a"),qqr=o("from_pretrained()"),jqr=o(" to load the model weights."),Dqr=l(),F(s0.$$.fragment),Gqr=l(),jr=a("div"),F(RS.$$.fragment),Oqr=l(),q6e=a("p"),Vqr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xqr=l(),kn=a("p"),zqr=o("The model class to instantiate is selected based on the "),j6e=a("code"),Qqr=o("model_type"),Wqr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),Uqr=o("pretrained_model_name_or_path"),Hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),Jqr=o("pretrained_model_name_or_path"),Yqr=o(":"),Zqr=l(),le=a("ul"),l0=a("li"),O6e=a("strong"),Kqr=o("albert"),ejr=o(" \u2014 "),ore=a("a"),ojr=o("TFAlbertForPreTraining"),rjr=o(" (ALBERT model)"),tjr=l(),i0=a("li"),V6e=a("strong"),ajr=o("bart"),njr=o(" \u2014 "),rre=a("a"),sjr=o("TFBartForConditionalGeneration"),ljr=o(" (BART model)"),ijr=l(),d0=a("li"),X6e=a("strong"),djr=o("bert"),cjr=o(" \u2014 "),tre=a("a"),mjr=o("TFBertForPreTraining"),fjr=o(" (BERT model)"),gjr=l(),c0=a("li"),z6e=a("strong"),hjr=o("camembert"),ujr=o(" \u2014 "),are=a("a"),pjr=o("TFCamembertForMaskedLM"),_jr=o(" (CamemBERT model)"),bjr=l(),m0=a("li"),Q6e=a("strong"),vjr=o("ctrl"),Fjr=o(" \u2014 "),nre=a("a"),Tjr=o("TFCTRLLMHeadModel"),Mjr=o(" (CTRL model)"),Ejr=l(),f0=a("li"),W6e=a("strong"),Cjr=o("distilbert"),wjr=o(" \u2014 "),sre=a("a"),Ajr=o("TFDistilBertForMaskedLM"),Ljr=o(" (DistilBERT model)"),yjr=l(),g0=a("li"),U6e=a("strong"),xjr=o("electra"),$jr=o(" \u2014 "),lre=a("a"),kjr=o("TFElectraForPreTraining"),Sjr=o(" (ELECTRA model)"),Rjr=l(),h0=a("li"),H6e=a("strong"),Pjr=o("flaubert"),Bjr=o(" \u2014 "),ire=a("a"),Ijr=o("TFFlaubertWithLMHeadModel"),Njr=o(" (FlauBERT model)"),qjr=l(),u0=a("li"),J6e=a("strong"),jjr=o("funnel"),Djr=o(" \u2014 "),dre=a("a"),Gjr=o("TFFunnelForPreTraining"),Ojr=o(" (Funnel Transformer model)"),Vjr=l(),p0=a("li"),Y6e=a("strong"),Xjr=o("gpt2"),zjr=o(" \u2014 "),cre=a("a"),Qjr=o("TFGPT2LMHeadModel"),Wjr=o(" (OpenAI GPT-2 model)"),Ujr=l(),_0=a("li"),Z6e=a("strong"),Hjr=o("layoutlm"),Jjr=o(" \u2014 "),mre=a("a"),Yjr=o("TFLayoutLMForMaskedLM"),Zjr=o(" (LayoutLM model)"),Kjr=l(),b0=a("li"),K6e=a("strong"),eDr=o("lxmert"),oDr=o(" \u2014 "),fre=a("a"),rDr=o("TFLxmertForPreTraining"),tDr=o(" (LXMERT model)"),aDr=l(),v0=a("li"),e7e=a("strong"),nDr=o("mobilebert"),sDr=o(" \u2014 "),gre=a("a"),lDr=o("TFMobileBertForPreTraining"),iDr=o(" (MobileBERT model)"),dDr=l(),F0=a("li"),o7e=a("strong"),cDr=o("mpnet"),mDr=o(" \u2014 "),hre=a("a"),fDr=o("TFMPNetForMaskedLM"),gDr=o(" (MPNet model)"),hDr=l(),T0=a("li"),r7e=a("strong"),uDr=o("openai-gpt"),pDr=o(" \u2014 "),ure=a("a"),_Dr=o("TFOpenAIGPTLMHeadModel"),bDr=o(" (OpenAI GPT model)"),vDr=l(),M0=a("li"),t7e=a("strong"),FDr=o("roberta"),TDr=o(" \u2014 "),pre=a("a"),MDr=o("TFRobertaForMaskedLM"),EDr=o(" (RoBERTa model)"),CDr=l(),E0=a("li"),a7e=a("strong"),wDr=o("t5"),ADr=o(" \u2014 "),_re=a("a"),LDr=o("TFT5ForConditionalGeneration"),yDr=o(" (T5 model)"),xDr=l(),C0=a("li"),n7e=a("strong"),$Dr=o("tapas"),kDr=o(" \u2014 "),bre=a("a"),SDr=o("TFTapasForMaskedLM"),RDr=o(" (TAPAS model)"),PDr=l(),w0=a("li"),s7e=a("strong"),BDr=o("transfo-xl"),IDr=o(" \u2014 "),vre=a("a"),NDr=o("TFTransfoXLLMHeadModel"),qDr=o(" (Transformer-XL model)"),jDr=l(),A0=a("li"),l7e=a("strong"),DDr=o("vit_mae"),GDr=o(" \u2014 "),Fre=a("a"),ODr=o("TFViTMAEForPreTraining"),VDr=o(" (ViTMAE model)"),XDr=l(),L0=a("li"),i7e=a("strong"),zDr=o("xlm"),QDr=o(" \u2014 "),Tre=a("a"),WDr=o("TFXLMWithLMHeadModel"),UDr=o(" (XLM model)"),HDr=l(),y0=a("li"),d7e=a("strong"),JDr=o("xlm-roberta"),YDr=o(" \u2014 "),Mre=a("a"),ZDr=o("TFXLMRobertaForMaskedLM"),KDr=o(" (XLM-RoBERTa model)"),eGr=l(),x0=a("li"),c7e=a("strong"),oGr=o("xlnet"),rGr=o(" \u2014 "),Ere=a("a"),tGr=o("TFXLNetLMHeadModel"),aGr=o(" (XLNet model)"),nGr=l(),F($0.$$.fragment),Tro=l(),am=a("h2"),k0=a("a"),m7e=a("span"),F(PS.$$.fragment),sGr=l(),f7e=a("span"),lGr=o("TFAutoModelForCausalLM"),Mro=l(),cr=a("div"),F(BS.$$.fragment),iGr=l(),nm=a("p"),dGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cre=a("a"),cGr=o("from_pretrained()"),mGr=o(" class method or the "),wre=a("a"),fGr=o("from_config()"),gGr=o(` class
method.`),hGr=l(),IS=a("p"),uGr=o("This class cannot be instantiated directly using "),g7e=a("code"),pGr=o("__init__()"),_Gr=o(" (throws an error)."),bGr=l(),Ht=a("div"),F(NS.$$.fragment),vGr=l(),h7e=a("p"),FGr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TGr=l(),sm=a("p"),MGr=o(`Note:
Loading a model from its configuration file does `),u7e=a("strong"),EGr=o("not"),CGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),wGr=o("from_pretrained()"),AGr=o(" to load the model weights."),LGr=l(),F(S0.$$.fragment),yGr=l(),Dr=a("div"),F(qS.$$.fragment),xGr=l(),p7e=a("p"),$Gr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kGr=l(),Sn=a("p"),SGr=o("The model class to instantiate is selected based on the "),_7e=a("code"),RGr=o("model_type"),PGr=o(` property of the config object (either
passed as an argument or loaded from `),b7e=a("code"),BGr=o("pretrained_model_name_or_path"),IGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=a("code"),NGr=o("pretrained_model_name_or_path"),qGr=o(":"),jGr=l(),Me=a("ul"),R0=a("li"),F7e=a("strong"),DGr=o("bert"),GGr=o(" \u2014 "),Lre=a("a"),OGr=o("TFBertLMHeadModel"),VGr=o(" (BERT model)"),XGr=l(),P0=a("li"),T7e=a("strong"),zGr=o("camembert"),QGr=o(" \u2014 "),yre=a("a"),WGr=o("TFCamembertForCausalLM"),UGr=o(" (CamemBERT model)"),HGr=l(),B0=a("li"),M7e=a("strong"),JGr=o("ctrl"),YGr=o(" \u2014 "),xre=a("a"),ZGr=o("TFCTRLLMHeadModel"),KGr=o(" (CTRL model)"),eOr=l(),I0=a("li"),E7e=a("strong"),oOr=o("gpt2"),rOr=o(" \u2014 "),$re=a("a"),tOr=o("TFGPT2LMHeadModel"),aOr=o(" (OpenAI GPT-2 model)"),nOr=l(),N0=a("li"),C7e=a("strong"),sOr=o("gptj"),lOr=o(" \u2014 "),kre=a("a"),iOr=o("TFGPTJForCausalLM"),dOr=o(" (GPT-J model)"),cOr=l(),q0=a("li"),w7e=a("strong"),mOr=o("openai-gpt"),fOr=o(" \u2014 "),Sre=a("a"),gOr=o("TFOpenAIGPTLMHeadModel"),hOr=o(" (OpenAI GPT model)"),uOr=l(),j0=a("li"),A7e=a("strong"),pOr=o("opt"),_Or=o(" \u2014 "),Rre=a("a"),bOr=o("TFOPTForCausalLM"),vOr=o(" (OPT model)"),FOr=l(),D0=a("li"),L7e=a("strong"),TOr=o("rembert"),MOr=o(" \u2014 "),Pre=a("a"),EOr=o("TFRemBertForCausalLM"),COr=o(" (RemBERT model)"),wOr=l(),G0=a("li"),y7e=a("strong"),AOr=o("roberta"),LOr=o(" \u2014 "),Bre=a("a"),yOr=o("TFRobertaForCausalLM"),xOr=o(" (RoBERTa model)"),$Or=l(),O0=a("li"),x7e=a("strong"),kOr=o("roformer"),SOr=o(" \u2014 "),Ire=a("a"),ROr=o("TFRoFormerForCausalLM"),POr=o(" (RoFormer model)"),BOr=l(),V0=a("li"),$7e=a("strong"),IOr=o("transfo-xl"),NOr=o(" \u2014 "),Nre=a("a"),qOr=o("TFTransfoXLLMHeadModel"),jOr=o(" (Transformer-XL model)"),DOr=l(),X0=a("li"),k7e=a("strong"),GOr=o("xglm"),OOr=o(" \u2014 "),qre=a("a"),VOr=o("TFXGLMForCausalLM"),XOr=o(" (XGLM model)"),zOr=l(),z0=a("li"),S7e=a("strong"),QOr=o("xlm"),WOr=o(" \u2014 "),jre=a("a"),UOr=o("TFXLMWithLMHeadModel"),HOr=o(" (XLM model)"),JOr=l(),Q0=a("li"),R7e=a("strong"),YOr=o("xlnet"),ZOr=o(" \u2014 "),Dre=a("a"),KOr=o("TFXLNetLMHeadModel"),eVr=o(" (XLNet model)"),oVr=l(),F(W0.$$.fragment),Ero=l(),lm=a("h2"),U0=a("a"),P7e=a("span"),F(jS.$$.fragment),rVr=l(),B7e=a("span"),tVr=o("TFAutoModelForImageClassification"),Cro=l(),mr=a("div"),F(DS.$$.fragment),aVr=l(),im=a("p"),nVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gre=a("a"),sVr=o("from_pretrained()"),lVr=o(" class method or the "),Ore=a("a"),iVr=o("from_config()"),dVr=o(` class
method.`),cVr=l(),GS=a("p"),mVr=o("This class cannot be instantiated directly using "),I7e=a("code"),fVr=o("__init__()"),gVr=o(" (throws an error)."),hVr=l(),Jt=a("div"),F(OS.$$.fragment),uVr=l(),N7e=a("p"),pVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Vr=l(),dm=a("p"),bVr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),vVr=o("not"),FVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=a("a"),TVr=o("from_pretrained()"),MVr=o(" to load the model weights."),EVr=l(),F(H0.$$.fragment),CVr=l(),Gr=a("div"),F(VS.$$.fragment),wVr=l(),j7e=a("p"),AVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LVr=l(),Rn=a("p"),yVr=o("The model class to instantiate is selected based on the "),D7e=a("code"),xVr=o("model_type"),$Vr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),kVr=o("pretrained_model_name_or_path"),SVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(":"),BVr=l(),Be=a("ul"),J0=a("li"),V7e=a("strong"),IVr=o("convnext"),NVr=o(" \u2014 "),Xre=a("a"),qVr=o("TFConvNextForImageClassification"),jVr=o(" (ConvNeXT model)"),DVr=l(),Y0=a("li"),X7e=a("strong"),GVr=o("data2vec-vision"),OVr=o(" \u2014 "),zre=a("a"),VVr=o("TFData2VecVisionForImageClassification"),XVr=o(" (Data2VecVision model)"),zVr=l(),Al=a("li"),z7e=a("strong"),QVr=o("deit"),WVr=o(" \u2014 "),Qre=a("a"),UVr=o("TFDeiTForImageClassification"),HVr=o(" or "),Wre=a("a"),JVr=o("TFDeiTForImageClassificationWithTeacher"),YVr=o(" (DeiT model)"),ZVr=l(),Z0=a("li"),Q7e=a("strong"),KVr=o("mobilevit"),eXr=o(" \u2014 "),Ure=a("a"),oXr=o("TFMobileViTForImageClassification"),rXr=o(" (MobileViT model)"),tXr=l(),K0=a("li"),W7e=a("strong"),aXr=o("regnet"),nXr=o(" \u2014 "),Hre=a("a"),sXr=o("TFRegNetForImageClassification"),lXr=o(" (RegNet model)"),iXr=l(),ew=a("li"),U7e=a("strong"),dXr=o("resnet"),cXr=o(" \u2014 "),Jre=a("a"),mXr=o("TFResNetForImageClassification"),fXr=o(" (ResNet model)"),gXr=l(),ow=a("li"),H7e=a("strong"),hXr=o("segformer"),uXr=o(" \u2014 "),Yre=a("a"),pXr=o("TFSegformerForImageClassification"),_Xr=o(" (SegFormer model)"),bXr=l(),rw=a("li"),J7e=a("strong"),vXr=o("swin"),FXr=o(" \u2014 "),Zre=a("a"),TXr=o("TFSwinForImageClassification"),MXr=o(" (Swin Transformer model)"),EXr=l(),tw=a("li"),Y7e=a("strong"),CXr=o("vit"),wXr=o(" \u2014 "),Kre=a("a"),AXr=o("TFViTForImageClassification"),LXr=o(" (ViT model)"),yXr=l(),F(aw.$$.fragment),wro=l(),cm=a("h2"),nw=a("a"),Z7e=a("span"),F(XS.$$.fragment),xXr=l(),K7e=a("span"),$Xr=o("TFAutoModelForSemanticSegmentation"),Aro=l(),fr=a("div"),F(zS.$$.fragment),kXr=l(),mm=a("p"),SXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ete=a("a"),RXr=o("from_pretrained()"),PXr=o(" class method or the "),ote=a("a"),BXr=o("from_config()"),IXr=o(` class
method.`),NXr=l(),QS=a("p"),qXr=o("This class cannot be instantiated directly using "),eLe=a("code"),jXr=o("__init__()"),DXr=o(" (throws an error)."),GXr=l(),Yt=a("div"),F(WS.$$.fragment),OXr=l(),oLe=a("p"),VXr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),XXr=l(),fm=a("p"),zXr=o(`Note:
Loading a model from its configuration file does `),rLe=a("strong"),QXr=o("not"),WXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=a("a"),UXr=o("from_pretrained()"),HXr=o(" to load the model weights."),JXr=l(),F(sw.$$.fragment),YXr=l(),Or=a("div"),F(US.$$.fragment),ZXr=l(),tLe=a("p"),KXr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ezr=l(),Pn=a("p"),ozr=o("The model class to instantiate is selected based on the "),aLe=a("code"),rzr=o("model_type"),tzr=o(` property of the config object (either
passed as an argument or loaded from `),nLe=a("code"),azr=o("pretrained_model_name_or_path"),nzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sLe=a("code"),szr=o("pretrained_model_name_or_path"),lzr=o(":"),izr=l(),gm=a("ul"),lw=a("li"),lLe=a("strong"),dzr=o("data2vec-vision"),czr=o(" \u2014 "),tte=a("a"),mzr=o("TFData2VecVisionForSemanticSegmentation"),fzr=o(" (Data2VecVision model)"),gzr=l(),iw=a("li"),iLe=a("strong"),hzr=o("mobilevit"),uzr=o(" \u2014 "),ate=a("a"),pzr=o("TFMobileViTForSemanticSegmentation"),_zr=o(" (MobileViT model)"),bzr=l(),dw=a("li"),dLe=a("strong"),vzr=o("segformer"),Fzr=o(" \u2014 "),nte=a("a"),Tzr=o("TFSegformerForSemanticSegmentation"),Mzr=o(" (SegFormer model)"),Ezr=l(),F(cw.$$.fragment),Lro=l(),hm=a("h2"),mw=a("a"),cLe=a("span"),F(HS.$$.fragment),Czr=l(),mLe=a("span"),wzr=o("TFAutoModelForMaskedLM"),yro=l(),gr=a("div"),F(JS.$$.fragment),Azr=l(),um=a("p"),Lzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ste=a("a"),yzr=o("from_pretrained()"),xzr=o(" class method or the "),lte=a("a"),$zr=o("from_config()"),kzr=o(` class
method.`),Szr=l(),YS=a("p"),Rzr=o("This class cannot be instantiated directly using "),fLe=a("code"),Pzr=o("__init__()"),Bzr=o(" (throws an error)."),Izr=l(),Zt=a("div"),F(ZS.$$.fragment),Nzr=l(),gLe=a("p"),qzr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jzr=l(),pm=a("p"),Dzr=o(`Note:
Loading a model from its configuration file does `),hLe=a("strong"),Gzr=o("not"),Ozr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),Vzr=o("from_pretrained()"),Xzr=o(" to load the model weights."),zzr=l(),F(fw.$$.fragment),Qzr=l(),Vr=a("div"),F(KS.$$.fragment),Wzr=l(),uLe=a("p"),Uzr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hzr=l(),Bn=a("p"),Jzr=o("The model class to instantiate is selected based on the "),pLe=a("code"),Yzr=o("model_type"),Zzr=o(` property of the config object (either
passed as an argument or loaded from `),_Le=a("code"),Kzr=o("pretrained_model_name_or_path"),eQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bLe=a("code"),oQr=o("pretrained_model_name_or_path"),rQr=o(":"),tQr=l(),ge=a("ul"),gw=a("li"),vLe=a("strong"),aQr=o("albert"),nQr=o(" \u2014 "),dte=a("a"),sQr=o("TFAlbertForMaskedLM"),lQr=o(" (ALBERT model)"),iQr=l(),hw=a("li"),FLe=a("strong"),dQr=o("bert"),cQr=o(" \u2014 "),cte=a("a"),mQr=o("TFBertForMaskedLM"),fQr=o(" (BERT model)"),gQr=l(),uw=a("li"),TLe=a("strong"),hQr=o("camembert"),uQr=o(" \u2014 "),mte=a("a"),pQr=o("TFCamembertForMaskedLM"),_Qr=o(" (CamemBERT model)"),bQr=l(),pw=a("li"),MLe=a("strong"),vQr=o("convbert"),FQr=o(" \u2014 "),fte=a("a"),TQr=o("TFConvBertForMaskedLM"),MQr=o(" (ConvBERT model)"),EQr=l(),_w=a("li"),ELe=a("strong"),CQr=o("deberta"),wQr=o(" \u2014 "),gte=a("a"),AQr=o("TFDebertaForMaskedLM"),LQr=o(" (DeBERTa model)"),yQr=l(),bw=a("li"),CLe=a("strong"),xQr=o("deberta-v2"),$Qr=o(" \u2014 "),hte=a("a"),kQr=o("TFDebertaV2ForMaskedLM"),SQr=o(" (DeBERTa-v2 model)"),RQr=l(),vw=a("li"),wLe=a("strong"),PQr=o("distilbert"),BQr=o(" \u2014 "),ute=a("a"),IQr=o("TFDistilBertForMaskedLM"),NQr=o(" (DistilBERT model)"),qQr=l(),Fw=a("li"),ALe=a("strong"),jQr=o("electra"),DQr=o(" \u2014 "),pte=a("a"),GQr=o("TFElectraForMaskedLM"),OQr=o(" (ELECTRA model)"),VQr=l(),Tw=a("li"),LLe=a("strong"),XQr=o("flaubert"),zQr=o(" \u2014 "),_te=a("a"),QQr=o("TFFlaubertWithLMHeadModel"),WQr=o(" (FlauBERT model)"),UQr=l(),Mw=a("li"),yLe=a("strong"),HQr=o("funnel"),JQr=o(" \u2014 "),bte=a("a"),YQr=o("TFFunnelForMaskedLM"),ZQr=o(" (Funnel Transformer model)"),KQr=l(),Ew=a("li"),xLe=a("strong"),eWr=o("layoutlm"),oWr=o(" \u2014 "),vte=a("a"),rWr=o("TFLayoutLMForMaskedLM"),tWr=o(" (LayoutLM model)"),aWr=l(),Cw=a("li"),$Le=a("strong"),nWr=o("longformer"),sWr=o(" \u2014 "),Fte=a("a"),lWr=o("TFLongformerForMaskedLM"),iWr=o(" (Longformer model)"),dWr=l(),ww=a("li"),kLe=a("strong"),cWr=o("mobilebert"),mWr=o(" \u2014 "),Tte=a("a"),fWr=o("TFMobileBertForMaskedLM"),gWr=o(" (MobileBERT model)"),hWr=l(),Aw=a("li"),SLe=a("strong"),uWr=o("mpnet"),pWr=o(" \u2014 "),Mte=a("a"),_Wr=o("TFMPNetForMaskedLM"),bWr=o(" (MPNet model)"),vWr=l(),Lw=a("li"),RLe=a("strong"),FWr=o("rembert"),TWr=o(" \u2014 "),Ete=a("a"),MWr=o("TFRemBertForMaskedLM"),EWr=o(" (RemBERT model)"),CWr=l(),yw=a("li"),PLe=a("strong"),wWr=o("roberta"),AWr=o(" \u2014 "),Cte=a("a"),LWr=o("TFRobertaForMaskedLM"),yWr=o(" (RoBERTa model)"),xWr=l(),xw=a("li"),BLe=a("strong"),$Wr=o("roformer"),kWr=o(" \u2014 "),wte=a("a"),SWr=o("TFRoFormerForMaskedLM"),RWr=o(" (RoFormer model)"),PWr=l(),$w=a("li"),ILe=a("strong"),BWr=o("tapas"),IWr=o(" \u2014 "),Ate=a("a"),NWr=o("TFTapasForMaskedLM"),qWr=o(" (TAPAS model)"),jWr=l(),kw=a("li"),NLe=a("strong"),DWr=o("xlm"),GWr=o(" \u2014 "),Lte=a("a"),OWr=o("TFXLMWithLMHeadModel"),VWr=o(" (XLM model)"),XWr=l(),Sw=a("li"),qLe=a("strong"),zWr=o("xlm-roberta"),QWr=o(" \u2014 "),yte=a("a"),WWr=o("TFXLMRobertaForMaskedLM"),UWr=o(" (XLM-RoBERTa model)"),HWr=l(),F(Rw.$$.fragment),xro=l(),_m=a("h2"),Pw=a("a"),jLe=a("span"),F(eR.$$.fragment),JWr=l(),DLe=a("span"),YWr=o("TFAutoModelForSeq2SeqLM"),$ro=l(),hr=a("div"),F(oR.$$.fragment),ZWr=l(),bm=a("p"),KWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xte=a("a"),eUr=o("from_pretrained()"),oUr=o(" class method or the "),$te=a("a"),rUr=o("from_config()"),tUr=o(` class
method.`),aUr=l(),rR=a("p"),nUr=o("This class cannot be instantiated directly using "),GLe=a("code"),sUr=o("__init__()"),lUr=o(" (throws an error)."),iUr=l(),Kt=a("div"),F(tR.$$.fragment),dUr=l(),OLe=a("p"),cUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mUr=l(),vm=a("p"),fUr=o(`Note:
Loading a model from its configuration file does `),VLe=a("strong"),gUr=o("not"),hUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kte=a("a"),uUr=o("from_pretrained()"),pUr=o(" to load the model weights."),_Ur=l(),F(Bw.$$.fragment),bUr=l(),Xr=a("div"),F(aR.$$.fragment),vUr=l(),XLe=a("p"),FUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TUr=l(),In=a("p"),MUr=o("The model class to instantiate is selected based on the "),zLe=a("code"),EUr=o("model_type"),CUr=o(` property of the config object (either
passed as an argument or loaded from `),QLe=a("code"),wUr=o("pretrained_model_name_or_path"),AUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WLe=a("code"),LUr=o("pretrained_model_name_or_path"),yUr=o(":"),xUr=l(),ye=a("ul"),Iw=a("li"),ULe=a("strong"),$Ur=o("bart"),kUr=o(" \u2014 "),Ste=a("a"),SUr=o("TFBartForConditionalGeneration"),RUr=o(" (BART model)"),PUr=l(),Nw=a("li"),HLe=a("strong"),BUr=o("blenderbot"),IUr=o(" \u2014 "),Rte=a("a"),NUr=o("TFBlenderbotForConditionalGeneration"),qUr=o(" (Blenderbot model)"),jUr=l(),qw=a("li"),JLe=a("strong"),DUr=o("blenderbot-small"),GUr=o(" \u2014 "),Pte=a("a"),OUr=o("TFBlenderbotSmallForConditionalGeneration"),VUr=o(" (BlenderbotSmall model)"),XUr=l(),jw=a("li"),YLe=a("strong"),zUr=o("encoder-decoder"),QUr=o(" \u2014 "),Bte=a("a"),WUr=o("TFEncoderDecoderModel"),UUr=o(" (Encoder decoder model)"),HUr=l(),Dw=a("li"),ZLe=a("strong"),JUr=o("led"),YUr=o(" \u2014 "),Ite=a("a"),ZUr=o("TFLEDForConditionalGeneration"),KUr=o(" (LED model)"),eHr=l(),Gw=a("li"),KLe=a("strong"),oHr=o("marian"),rHr=o(" \u2014 "),Nte=a("a"),tHr=o("TFMarianMTModel"),aHr=o(" (Marian model)"),nHr=l(),Ow=a("li"),eye=a("strong"),sHr=o("mbart"),lHr=o(" \u2014 "),qte=a("a"),iHr=o("TFMBartForConditionalGeneration"),dHr=o(" (mBART model)"),cHr=l(),Vw=a("li"),oye=a("strong"),mHr=o("mt5"),fHr=o(" \u2014 "),jte=a("a"),gHr=o("TFMT5ForConditionalGeneration"),hHr=o(" (MT5 model)"),uHr=l(),Xw=a("li"),rye=a("strong"),pHr=o("pegasus"),_Hr=o(" \u2014 "),Dte=a("a"),bHr=o("TFPegasusForConditionalGeneration"),vHr=o(" (Pegasus model)"),FHr=l(),zw=a("li"),tye=a("strong"),THr=o("t5"),MHr=o(" \u2014 "),Gte=a("a"),EHr=o("TFT5ForConditionalGeneration"),CHr=o(" (T5 model)"),wHr=l(),F(Qw.$$.fragment),kro=l(),Fm=a("h2"),Ww=a("a"),aye=a("span"),F(nR.$$.fragment),AHr=l(),nye=a("span"),LHr=o("TFAutoModelForSequenceClassification"),Sro=l(),ur=a("div"),F(sR.$$.fragment),yHr=l(),Tm=a("p"),xHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ote=a("a"),$Hr=o("from_pretrained()"),kHr=o(" class method or the "),Vte=a("a"),SHr=o("from_config()"),RHr=o(` class
method.`),PHr=l(),lR=a("p"),BHr=o("This class cannot be instantiated directly using "),sye=a("code"),IHr=o("__init__()"),NHr=o(" (throws an error)."),qHr=l(),ea=a("div"),F(iR.$$.fragment),jHr=l(),lye=a("p"),DHr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GHr=l(),Mm=a("p"),OHr=o(`Note:
Loading a model from its configuration file does `),iye=a("strong"),VHr=o("not"),XHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xte=a("a"),zHr=o("from_pretrained()"),QHr=o(" to load the model weights."),WHr=l(),F(Uw.$$.fragment),UHr=l(),zr=a("div"),F(dR.$$.fragment),HHr=l(),dye=a("p"),JHr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YHr=l(),Nn=a("p"),ZHr=o("The model class to instantiate is selected based on the "),cye=a("code"),KHr=o("model_type"),eJr=o(` property of the config object (either
passed as an argument or loaded from `),mye=a("code"),oJr=o("pretrained_model_name_or_path"),rJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fye=a("code"),tJr=o("pretrained_model_name_or_path"),aJr=o(":"),nJr=l(),re=a("ul"),Hw=a("li"),gye=a("strong"),sJr=o("albert"),lJr=o(" \u2014 "),zte=a("a"),iJr=o("TFAlbertForSequenceClassification"),dJr=o(" (ALBERT model)"),cJr=l(),Jw=a("li"),hye=a("strong"),mJr=o("bert"),fJr=o(" \u2014 "),Qte=a("a"),gJr=o("TFBertForSequenceClassification"),hJr=o(" (BERT model)"),uJr=l(),Yw=a("li"),uye=a("strong"),pJr=o("camembert"),_Jr=o(" \u2014 "),Wte=a("a"),bJr=o("TFCamembertForSequenceClassification"),vJr=o(" (CamemBERT model)"),FJr=l(),Zw=a("li"),pye=a("strong"),TJr=o("convbert"),MJr=o(" \u2014 "),Ute=a("a"),EJr=o("TFConvBertForSequenceClassification"),CJr=o(" (ConvBERT model)"),wJr=l(),Kw=a("li"),_ye=a("strong"),AJr=o("ctrl"),LJr=o(" \u2014 "),Hte=a("a"),yJr=o("TFCTRLForSequenceClassification"),xJr=o(" (CTRL model)"),$Jr=l(),eA=a("li"),bye=a("strong"),kJr=o("deberta"),SJr=o(" \u2014 "),Jte=a("a"),RJr=o("TFDebertaForSequenceClassification"),PJr=o(" (DeBERTa model)"),BJr=l(),oA=a("li"),vye=a("strong"),IJr=o("deberta-v2"),NJr=o(" \u2014 "),Yte=a("a"),qJr=o("TFDebertaV2ForSequenceClassification"),jJr=o(" (DeBERTa-v2 model)"),DJr=l(),rA=a("li"),Fye=a("strong"),GJr=o("distilbert"),OJr=o(" \u2014 "),Zte=a("a"),VJr=o("TFDistilBertForSequenceClassification"),XJr=o(" (DistilBERT model)"),zJr=l(),tA=a("li"),Tye=a("strong"),QJr=o("electra"),WJr=o(" \u2014 "),Kte=a("a"),UJr=o("TFElectraForSequenceClassification"),HJr=o(" (ELECTRA model)"),JJr=l(),aA=a("li"),Mye=a("strong"),YJr=o("flaubert"),ZJr=o(" \u2014 "),eae=a("a"),KJr=o("TFFlaubertForSequenceClassification"),eYr=o(" (FlauBERT model)"),oYr=l(),nA=a("li"),Eye=a("strong"),rYr=o("funnel"),tYr=o(" \u2014 "),oae=a("a"),aYr=o("TFFunnelForSequenceClassification"),nYr=o(" (Funnel Transformer model)"),sYr=l(),sA=a("li"),Cye=a("strong"),lYr=o("gpt2"),iYr=o(" \u2014 "),rae=a("a"),dYr=o("TFGPT2ForSequenceClassification"),cYr=o(" (OpenAI GPT-2 model)"),mYr=l(),lA=a("li"),wye=a("strong"),fYr=o("gptj"),gYr=o(" \u2014 "),tae=a("a"),hYr=o("TFGPTJForSequenceClassification"),uYr=o(" (GPT-J model)"),pYr=l(),iA=a("li"),Aye=a("strong"),_Yr=o("layoutlm"),bYr=o(" \u2014 "),aae=a("a"),vYr=o("TFLayoutLMForSequenceClassification"),FYr=o(" (LayoutLM model)"),TYr=l(),dA=a("li"),Lye=a("strong"),MYr=o("layoutlmv3"),EYr=o(" \u2014 "),nae=a("a"),CYr=o("TFLayoutLMv3ForSequenceClassification"),wYr=o(" (LayoutLMv3 model)"),AYr=l(),cA=a("li"),yye=a("strong"),LYr=o("longformer"),yYr=o(" \u2014 "),sae=a("a"),xYr=o("TFLongformerForSequenceClassification"),$Yr=o(" (Longformer model)"),kYr=l(),mA=a("li"),xye=a("strong"),SYr=o("mobilebert"),RYr=o(" \u2014 "),lae=a("a"),PYr=o("TFMobileBertForSequenceClassification"),BYr=o(" (MobileBERT model)"),IYr=l(),fA=a("li"),$ye=a("strong"),NYr=o("mpnet"),qYr=o(" \u2014 "),iae=a("a"),jYr=o("TFMPNetForSequenceClassification"),DYr=o(" (MPNet model)"),GYr=l(),gA=a("li"),kye=a("strong"),OYr=o("openai-gpt"),VYr=o(" \u2014 "),dae=a("a"),XYr=o("TFOpenAIGPTForSequenceClassification"),zYr=o(" (OpenAI GPT model)"),QYr=l(),hA=a("li"),Sye=a("strong"),WYr=o("rembert"),UYr=o(" \u2014 "),cae=a("a"),HYr=o("TFRemBertForSequenceClassification"),JYr=o(" (RemBERT model)"),YYr=l(),uA=a("li"),Rye=a("strong"),ZYr=o("roberta"),KYr=o(" \u2014 "),mae=a("a"),eZr=o("TFRobertaForSequenceClassification"),oZr=o(" (RoBERTa model)"),rZr=l(),pA=a("li"),Pye=a("strong"),tZr=o("roformer"),aZr=o(" \u2014 "),fae=a("a"),nZr=o("TFRoFormerForSequenceClassification"),sZr=o(" (RoFormer model)"),lZr=l(),_A=a("li"),Bye=a("strong"),iZr=o("tapas"),dZr=o(" \u2014 "),gae=a("a"),cZr=o("TFTapasForSequenceClassification"),mZr=o(" (TAPAS model)"),fZr=l(),bA=a("li"),Iye=a("strong"),gZr=o("transfo-xl"),hZr=o(" \u2014 "),hae=a("a"),uZr=o("TFTransfoXLForSequenceClassification"),pZr=o(" (Transformer-XL model)"),_Zr=l(),vA=a("li"),Nye=a("strong"),bZr=o("xlm"),vZr=o(" \u2014 "),uae=a("a"),FZr=o("TFXLMForSequenceClassification"),TZr=o(" (XLM model)"),MZr=l(),FA=a("li"),qye=a("strong"),EZr=o("xlm-roberta"),CZr=o(" \u2014 "),pae=a("a"),wZr=o("TFXLMRobertaForSequenceClassification"),AZr=o(" (XLM-RoBERTa model)"),LZr=l(),TA=a("li"),jye=a("strong"),yZr=o("xlnet"),xZr=o(" \u2014 "),_ae=a("a"),$Zr=o("TFXLNetForSequenceClassification"),kZr=o(" (XLNet model)"),SZr=l(),F(MA.$$.fragment),Rro=l(),Em=a("h2"),EA=a("a"),Dye=a("span"),F(cR.$$.fragment),RZr=l(),Gye=a("span"),PZr=o("TFAutoModelForMultipleChoice"),Pro=l(),pr=a("div"),F(mR.$$.fragment),BZr=l(),Cm=a("p"),IZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bae=a("a"),NZr=o("from_pretrained()"),qZr=o(" class method or the "),vae=a("a"),jZr=o("from_config()"),DZr=o(` class
method.`),GZr=l(),fR=a("p"),OZr=o("This class cannot be instantiated directly using "),Oye=a("code"),VZr=o("__init__()"),XZr=o(" (throws an error)."),zZr=l(),oa=a("div"),F(gR.$$.fragment),QZr=l(),Vye=a("p"),WZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UZr=l(),wm=a("p"),HZr=o(`Note:
Loading a model from its configuration file does `),Xye=a("strong"),JZr=o("not"),YZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=a("a"),ZZr=o("from_pretrained()"),KZr=o(" to load the model weights."),eKr=l(),F(CA.$$.fragment),oKr=l(),Qr=a("div"),F(hR.$$.fragment),rKr=l(),zye=a("p"),tKr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aKr=l(),qn=a("p"),nKr=o("The model class to instantiate is selected based on the "),Qye=a("code"),sKr=o("model_type"),lKr=o(` property of the config object (either
passed as an argument or loaded from `),Wye=a("code"),iKr=o("pretrained_model_name_or_path"),dKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uye=a("code"),cKr=o("pretrained_model_name_or_path"),mKr=o(":"),fKr=l(),ve=a("ul"),wA=a("li"),Hye=a("strong"),gKr=o("albert"),hKr=o(" \u2014 "),Tae=a("a"),uKr=o("TFAlbertForMultipleChoice"),pKr=o(" (ALBERT model)"),_Kr=l(),AA=a("li"),Jye=a("strong"),bKr=o("bert"),vKr=o(" \u2014 "),Mae=a("a"),FKr=o("TFBertForMultipleChoice"),TKr=o(" (BERT model)"),MKr=l(),LA=a("li"),Yye=a("strong"),EKr=o("camembert"),CKr=o(" \u2014 "),Eae=a("a"),wKr=o("TFCamembertForMultipleChoice"),AKr=o(" (CamemBERT model)"),LKr=l(),yA=a("li"),Zye=a("strong"),yKr=o("convbert"),xKr=o(" \u2014 "),Cae=a("a"),$Kr=o("TFConvBertForMultipleChoice"),kKr=o(" (ConvBERT model)"),SKr=l(),xA=a("li"),Kye=a("strong"),RKr=o("distilbert"),PKr=o(" \u2014 "),wae=a("a"),BKr=o("TFDistilBertForMultipleChoice"),IKr=o(" (DistilBERT model)"),NKr=l(),$A=a("li"),e8e=a("strong"),qKr=o("electra"),jKr=o(" \u2014 "),Aae=a("a"),DKr=o("TFElectraForMultipleChoice"),GKr=o(" (ELECTRA model)"),OKr=l(),kA=a("li"),o8e=a("strong"),VKr=o("flaubert"),XKr=o(" \u2014 "),Lae=a("a"),zKr=o("TFFlaubertForMultipleChoice"),QKr=o(" (FlauBERT model)"),WKr=l(),SA=a("li"),r8e=a("strong"),UKr=o("funnel"),HKr=o(" \u2014 "),yae=a("a"),JKr=o("TFFunnelForMultipleChoice"),YKr=o(" (Funnel Transformer model)"),ZKr=l(),RA=a("li"),t8e=a("strong"),KKr=o("longformer"),eet=o(" \u2014 "),xae=a("a"),oet=o("TFLongformerForMultipleChoice"),ret=o(" (Longformer model)"),tet=l(),PA=a("li"),a8e=a("strong"),aet=o("mobilebert"),net=o(" \u2014 "),$ae=a("a"),set=o("TFMobileBertForMultipleChoice"),iet=o(" (MobileBERT model)"),det=l(),BA=a("li"),n8e=a("strong"),cet=o("mpnet"),met=o(" \u2014 "),kae=a("a"),fet=o("TFMPNetForMultipleChoice"),get=o(" (MPNet model)"),het=l(),IA=a("li"),s8e=a("strong"),uet=o("rembert"),pet=o(" \u2014 "),Sae=a("a"),_et=o("TFRemBertForMultipleChoice"),bet=o(" (RemBERT model)"),vet=l(),NA=a("li"),l8e=a("strong"),Fet=o("roberta"),Tet=o(" \u2014 "),Rae=a("a"),Met=o("TFRobertaForMultipleChoice"),Eet=o(" (RoBERTa model)"),Cet=l(),qA=a("li"),i8e=a("strong"),wet=o("roformer"),Aet=o(" \u2014 "),Pae=a("a"),Let=o("TFRoFormerForMultipleChoice"),yet=o(" (RoFormer model)"),xet=l(),jA=a("li"),d8e=a("strong"),$et=o("xlm"),ket=o(" \u2014 "),Bae=a("a"),Set=o("TFXLMForMultipleChoice"),Ret=o(" (XLM model)"),Pet=l(),DA=a("li"),c8e=a("strong"),Bet=o("xlm-roberta"),Iet=o(" \u2014 "),Iae=a("a"),Net=o("TFXLMRobertaForMultipleChoice"),qet=o(" (XLM-RoBERTa model)"),jet=l(),GA=a("li"),m8e=a("strong"),Det=o("xlnet"),Get=o(" \u2014 "),Nae=a("a"),Oet=o("TFXLNetForMultipleChoice"),Vet=o(" (XLNet model)"),Xet=l(),F(OA.$$.fragment),Bro=l(),Am=a("h2"),VA=a("a"),f8e=a("span"),F(uR.$$.fragment),zet=l(),g8e=a("span"),Qet=o("TFAutoModelForNextSentencePrediction"),Iro=l(),_r=a("div"),F(pR.$$.fragment),Wet=l(),Lm=a("p"),Uet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qae=a("a"),Het=o("from_pretrained()"),Jet=o(" class method or the "),jae=a("a"),Yet=o("from_config()"),Zet=o(` class
method.`),Ket=l(),_R=a("p"),eot=o("This class cannot be instantiated directly using "),h8e=a("code"),oot=o("__init__()"),rot=o(" (throws an error)."),tot=l(),ra=a("div"),F(bR.$$.fragment),aot=l(),u8e=a("p"),not=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sot=l(),ym=a("p"),lot=o(`Note:
Loading a model from its configuration file does `),p8e=a("strong"),iot=o("not"),dot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dae=a("a"),cot=o("from_pretrained()"),mot=o(" to load the model weights."),fot=l(),F(XA.$$.fragment),got=l(),Wr=a("div"),F(vR.$$.fragment),hot=l(),_8e=a("p"),uot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pot=l(),jn=a("p"),_ot=o("The model class to instantiate is selected based on the "),b8e=a("code"),bot=o("model_type"),vot=o(` property of the config object (either
passed as an argument or loaded from `),v8e=a("code"),Fot=o("pretrained_model_name_or_path"),Tot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F8e=a("code"),Mot=o("pretrained_model_name_or_path"),Eot=o(":"),Cot=l(),FR=a("ul"),zA=a("li"),T8e=a("strong"),wot=o("bert"),Aot=o(" \u2014 "),Gae=a("a"),Lot=o("TFBertForNextSentencePrediction"),yot=o(" (BERT model)"),xot=l(),QA=a("li"),M8e=a("strong"),$ot=o("mobilebert"),kot=o(" \u2014 "),Oae=a("a"),Sot=o("TFMobileBertForNextSentencePrediction"),Rot=o(" (MobileBERT model)"),Pot=l(),F(WA.$$.fragment),Nro=l(),xm=a("h2"),UA=a("a"),E8e=a("span"),F(TR.$$.fragment),Bot=l(),C8e=a("span"),Iot=o("TFAutoModelForTableQuestionAnswering"),qro=l(),br=a("div"),F(MR.$$.fragment),Not=l(),$m=a("p"),qot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vae=a("a"),jot=o("from_pretrained()"),Dot=o(" class method or the "),Xae=a("a"),Got=o("from_config()"),Oot=o(` class
method.`),Vot=l(),ER=a("p"),Xot=o("This class cannot be instantiated directly using "),w8e=a("code"),zot=o("__init__()"),Qot=o(" (throws an error)."),Wot=l(),ta=a("div"),F(CR.$$.fragment),Uot=l(),A8e=a("p"),Hot=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jot=l(),km=a("p"),Yot=o(`Note:
Loading a model from its configuration file does `),L8e=a("strong"),Zot=o("not"),Kot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=a("a"),ert=o("from_pretrained()"),ort=o(" to load the model weights."),rrt=l(),F(HA.$$.fragment),trt=l(),Ur=a("div"),F(wR.$$.fragment),art=l(),y8e=a("p"),nrt=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),srt=l(),Dn=a("p"),lrt=o("The model class to instantiate is selected based on the "),x8e=a("code"),irt=o("model_type"),drt=o(` property of the config object (either
passed as an argument or loaded from `),$8e=a("code"),crt=o("pretrained_model_name_or_path"),mrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k8e=a("code"),frt=o("pretrained_model_name_or_path"),grt=o(":"),hrt=l(),S8e=a("ul"),JA=a("li"),R8e=a("strong"),urt=o("tapas"),prt=o(" \u2014 "),Qae=a("a"),_rt=o("TFTapasForQuestionAnswering"),brt=o(" (TAPAS model)"),vrt=l(),F(YA.$$.fragment),jro=l(),Sm=a("h2"),ZA=a("a"),P8e=a("span"),F(AR.$$.fragment),Frt=l(),B8e=a("span"),Trt=o("TFAutoModelForDocumentQuestionAnswering"),Dro=l(),vr=a("div"),F(LR.$$.fragment),Mrt=l(),Rm=a("p"),Ert=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Wae=a("a"),Crt=o("from_pretrained()"),wrt=o(" class method or the "),Uae=a("a"),Art=o("from_config()"),Lrt=o(` class
method.`),yrt=l(),yR=a("p"),xrt=o("This class cannot be instantiated directly using "),I8e=a("code"),$rt=o("__init__()"),krt=o(" (throws an error)."),Srt=l(),aa=a("div"),F(xR.$$.fragment),Rrt=l(),N8e=a("p"),Prt=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Brt=l(),Pm=a("p"),Irt=o(`Note:
Loading a model from its configuration file does `),q8e=a("strong"),Nrt=o("not"),qrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hae=a("a"),jrt=o("from_pretrained()"),Drt=o(" to load the model weights."),Grt=l(),F(KA.$$.fragment),Ort=l(),Hr=a("div"),F($R.$$.fragment),Vrt=l(),j8e=a("p"),Xrt=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),zrt=l(),Gn=a("p"),Qrt=o("The model class to instantiate is selected based on the "),D8e=a("code"),Wrt=o("model_type"),Urt=o(` property of the config object (either
passed as an argument or loaded from `),G8e=a("code"),Hrt=o("pretrained_model_name_or_path"),Jrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=a("code"),Yrt=o("pretrained_model_name_or_path"),Zrt=o(":"),Krt=l(),V8e=a("ul"),e6=a("li"),X8e=a("strong"),ett=o("layoutlm"),ott=o(" \u2014 "),Jae=a("a"),rtt=o("TFLayoutLMForQuestionAnswering"),ttt=o(" (LayoutLM model)"),att=l(),F(o6.$$.fragment),Gro=l(),Bm=a("h2"),r6=a("a"),z8e=a("span"),F(kR.$$.fragment),ntt=l(),Q8e=a("span"),stt=o("TFAutoModelForTokenClassification"),Oro=l(),Fr=a("div"),F(SR.$$.fragment),ltt=l(),Im=a("p"),itt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yae=a("a"),dtt=o("from_pretrained()"),ctt=o(" class method or the "),Zae=a("a"),mtt=o("from_config()"),ftt=o(` class
method.`),gtt=l(),RR=a("p"),htt=o("This class cannot be instantiated directly using "),W8e=a("code"),utt=o("__init__()"),ptt=o(" (throws an error)."),_tt=l(),na=a("div"),F(PR.$$.fragment),btt=l(),U8e=a("p"),vtt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ftt=l(),Nm=a("p"),Ttt=o(`Note:
Loading a model from its configuration file does `),H8e=a("strong"),Mtt=o("not"),Ett=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=a("a"),Ctt=o("from_pretrained()"),wtt=o(" to load the model weights."),Att=l(),F(t6.$$.fragment),Ltt=l(),Jr=a("div"),F(BR.$$.fragment),ytt=l(),J8e=a("p"),xtt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$tt=l(),On=a("p"),ktt=o("The model class to instantiate is selected based on the "),Y8e=a("code"),Stt=o("model_type"),Rtt=o(` property of the config object (either
passed as an argument or loaded from `),Z8e=a("code"),Ptt=o("pretrained_model_name_or_path"),Btt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=a("code"),Itt=o("pretrained_model_name_or_path"),Ntt=o(":"),qtt=l(),ce=a("ul"),a6=a("li"),e9e=a("strong"),jtt=o("albert"),Dtt=o(" \u2014 "),ene=a("a"),Gtt=o("TFAlbertForTokenClassification"),Ott=o(" (ALBERT model)"),Vtt=l(),n6=a("li"),o9e=a("strong"),Xtt=o("bert"),ztt=o(" \u2014 "),one=a("a"),Qtt=o("TFBertForTokenClassification"),Wtt=o(" (BERT model)"),Utt=l(),s6=a("li"),r9e=a("strong"),Htt=o("camembert"),Jtt=o(" \u2014 "),rne=a("a"),Ytt=o("TFCamembertForTokenClassification"),Ztt=o(" (CamemBERT model)"),Ktt=l(),l6=a("li"),t9e=a("strong"),eat=o("convbert"),oat=o(" \u2014 "),tne=a("a"),rat=o("TFConvBertForTokenClassification"),tat=o(" (ConvBERT model)"),aat=l(),i6=a("li"),a9e=a("strong"),nat=o("deberta"),sat=o(" \u2014 "),ane=a("a"),lat=o("TFDebertaForTokenClassification"),iat=o(" (DeBERTa model)"),dat=l(),d6=a("li"),n9e=a("strong"),cat=o("deberta-v2"),mat=o(" \u2014 "),nne=a("a"),fat=o("TFDebertaV2ForTokenClassification"),gat=o(" (DeBERTa-v2 model)"),hat=l(),c6=a("li"),s9e=a("strong"),uat=o("distilbert"),pat=o(" \u2014 "),sne=a("a"),_at=o("TFDistilBertForTokenClassification"),bat=o(" (DistilBERT model)"),vat=l(),m6=a("li"),l9e=a("strong"),Fat=o("electra"),Tat=o(" \u2014 "),lne=a("a"),Mat=o("TFElectraForTokenClassification"),Eat=o(" (ELECTRA model)"),Cat=l(),f6=a("li"),i9e=a("strong"),wat=o("flaubert"),Aat=o(" \u2014 "),ine=a("a"),Lat=o("TFFlaubertForTokenClassification"),yat=o(" (FlauBERT model)"),xat=l(),g6=a("li"),d9e=a("strong"),$at=o("funnel"),kat=o(" \u2014 "),dne=a("a"),Sat=o("TFFunnelForTokenClassification"),Rat=o(" (Funnel Transformer model)"),Pat=l(),h6=a("li"),c9e=a("strong"),Bat=o("layoutlm"),Iat=o(" \u2014 "),cne=a("a"),Nat=o("TFLayoutLMForTokenClassification"),qat=o(" (LayoutLM model)"),jat=l(),u6=a("li"),m9e=a("strong"),Dat=o("layoutlmv3"),Gat=o(" \u2014 "),mne=a("a"),Oat=o("TFLayoutLMv3ForTokenClassification"),Vat=o(" (LayoutLMv3 model)"),Xat=l(),p6=a("li"),f9e=a("strong"),zat=o("longformer"),Qat=o(" \u2014 "),fne=a("a"),Wat=o("TFLongformerForTokenClassification"),Uat=o(" (Longformer model)"),Hat=l(),_6=a("li"),g9e=a("strong"),Jat=o("mobilebert"),Yat=o(" \u2014 "),gne=a("a"),Zat=o("TFMobileBertForTokenClassification"),Kat=o(" (MobileBERT model)"),ent=l(),b6=a("li"),h9e=a("strong"),ont=o("mpnet"),rnt=o(" \u2014 "),hne=a("a"),tnt=o("TFMPNetForTokenClassification"),ant=o(" (MPNet model)"),nnt=l(),v6=a("li"),u9e=a("strong"),snt=o("rembert"),lnt=o(" \u2014 "),une=a("a"),int=o("TFRemBertForTokenClassification"),dnt=o(" (RemBERT model)"),cnt=l(),F6=a("li"),p9e=a("strong"),mnt=o("roberta"),fnt=o(" \u2014 "),pne=a("a"),gnt=o("TFRobertaForTokenClassification"),hnt=o(" (RoBERTa model)"),unt=l(),T6=a("li"),_9e=a("strong"),pnt=o("roformer"),_nt=o(" \u2014 "),_ne=a("a"),bnt=o("TFRoFormerForTokenClassification"),vnt=o(" (RoFormer model)"),Fnt=l(),M6=a("li"),b9e=a("strong"),Tnt=o("xlm"),Mnt=o(" \u2014 "),bne=a("a"),Ent=o("TFXLMForTokenClassification"),Cnt=o(" (XLM model)"),wnt=l(),E6=a("li"),v9e=a("strong"),Ant=o("xlm-roberta"),Lnt=o(" \u2014 "),vne=a("a"),ynt=o("TFXLMRobertaForTokenClassification"),xnt=o(" (XLM-RoBERTa model)"),$nt=l(),C6=a("li"),F9e=a("strong"),knt=o("xlnet"),Snt=o(" \u2014 "),Fne=a("a"),Rnt=o("TFXLNetForTokenClassification"),Pnt=o(" (XLNet model)"),Bnt=l(),F(w6.$$.fragment),Vro=l(),qm=a("h2"),A6=a("a"),T9e=a("span"),F(IR.$$.fragment),Int=l(),M9e=a("span"),Nnt=o("TFAutoModelForQuestionAnswering"),Xro=l(),Tr=a("div"),F(NR.$$.fragment),qnt=l(),jm=a("p"),jnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tne=a("a"),Dnt=o("from_pretrained()"),Gnt=o(" class method or the "),Mne=a("a"),Ont=o("from_config()"),Vnt=o(` class
method.`),Xnt=l(),qR=a("p"),znt=o("This class cannot be instantiated directly using "),E9e=a("code"),Qnt=o("__init__()"),Wnt=o(" (throws an error)."),Unt=l(),sa=a("div"),F(jR.$$.fragment),Hnt=l(),C9e=a("p"),Jnt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ynt=l(),Dm=a("p"),Znt=o(`Note:
Loading a model from its configuration file does `),w9e=a("strong"),Knt=o("not"),est=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=a("a"),ost=o("from_pretrained()"),rst=o(" to load the model weights."),tst=l(),F(L6.$$.fragment),ast=l(),Yr=a("div"),F(DR.$$.fragment),nst=l(),A9e=a("p"),sst=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lst=l(),Vn=a("p"),ist=o("The model class to instantiate is selected based on the "),L9e=a("code"),dst=o("model_type"),cst=o(` property of the config object (either
passed as an argument or loaded from `),y9e=a("code"),mst=o("pretrained_model_name_or_path"),fst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x9e=a("code"),gst=o("pretrained_model_name_or_path"),hst=o(":"),ust=l(),me=a("ul"),y6=a("li"),$9e=a("strong"),pst=o("albert"),_st=o(" \u2014 "),Cne=a("a"),bst=o("TFAlbertForQuestionAnswering"),vst=o(" (ALBERT model)"),Fst=l(),x6=a("li"),k9e=a("strong"),Tst=o("bert"),Mst=o(" \u2014 "),wne=a("a"),Est=o("TFBertForQuestionAnswering"),Cst=o(" (BERT model)"),wst=l(),$6=a("li"),S9e=a("strong"),Ast=o("camembert"),Lst=o(" \u2014 "),Ane=a("a"),yst=o("TFCamembertForQuestionAnswering"),xst=o(" (CamemBERT model)"),$st=l(),k6=a("li"),R9e=a("strong"),kst=o("convbert"),Sst=o(" \u2014 "),Lne=a("a"),Rst=o("TFConvBertForQuestionAnswering"),Pst=o(" (ConvBERT model)"),Bst=l(),S6=a("li"),P9e=a("strong"),Ist=o("deberta"),Nst=o(" \u2014 "),yne=a("a"),qst=o("TFDebertaForQuestionAnswering"),jst=o(" (DeBERTa model)"),Dst=l(),R6=a("li"),B9e=a("strong"),Gst=o("deberta-v2"),Ost=o(" \u2014 "),xne=a("a"),Vst=o("TFDebertaV2ForQuestionAnswering"),Xst=o(" (DeBERTa-v2 model)"),zst=l(),P6=a("li"),I9e=a("strong"),Qst=o("distilbert"),Wst=o(" \u2014 "),$ne=a("a"),Ust=o("TFDistilBertForQuestionAnswering"),Hst=o(" (DistilBERT model)"),Jst=l(),B6=a("li"),N9e=a("strong"),Yst=o("electra"),Zst=o(" \u2014 "),kne=a("a"),Kst=o("TFElectraForQuestionAnswering"),elt=o(" (ELECTRA model)"),olt=l(),I6=a("li"),q9e=a("strong"),rlt=o("flaubert"),tlt=o(" \u2014 "),Sne=a("a"),alt=o("TFFlaubertForQuestionAnsweringSimple"),nlt=o(" (FlauBERT model)"),slt=l(),N6=a("li"),j9e=a("strong"),llt=o("funnel"),ilt=o(" \u2014 "),Rne=a("a"),dlt=o("TFFunnelForQuestionAnswering"),clt=o(" (Funnel Transformer model)"),mlt=l(),q6=a("li"),D9e=a("strong"),flt=o("gptj"),glt=o(" \u2014 "),Pne=a("a"),hlt=o("TFGPTJForQuestionAnswering"),ult=o(" (GPT-J model)"),plt=l(),j6=a("li"),G9e=a("strong"),_lt=o("layoutlmv3"),blt=o(" \u2014 "),Bne=a("a"),vlt=o("TFLayoutLMv3ForQuestionAnswering"),Flt=o(" (LayoutLMv3 model)"),Tlt=l(),D6=a("li"),O9e=a("strong"),Mlt=o("longformer"),Elt=o(" \u2014 "),Ine=a("a"),Clt=o("TFLongformerForQuestionAnswering"),wlt=o(" (Longformer model)"),Alt=l(),G6=a("li"),V9e=a("strong"),Llt=o("mobilebert"),ylt=o(" \u2014 "),Nne=a("a"),xlt=o("TFMobileBertForQuestionAnswering"),$lt=o(" (MobileBERT model)"),klt=l(),O6=a("li"),X9e=a("strong"),Slt=o("mpnet"),Rlt=o(" \u2014 "),qne=a("a"),Plt=o("TFMPNetForQuestionAnswering"),Blt=o(" (MPNet model)"),Ilt=l(),V6=a("li"),z9e=a("strong"),Nlt=o("rembert"),qlt=o(" \u2014 "),jne=a("a"),jlt=o("TFRemBertForQuestionAnswering"),Dlt=o(" (RemBERT model)"),Glt=l(),X6=a("li"),Q9e=a("strong"),Olt=o("roberta"),Vlt=o(" \u2014 "),Dne=a("a"),Xlt=o("TFRobertaForQuestionAnswering"),zlt=o(" (RoBERTa model)"),Qlt=l(),z6=a("li"),W9e=a("strong"),Wlt=o("roformer"),Ult=o(" \u2014 "),Gne=a("a"),Hlt=o("TFRoFormerForQuestionAnswering"),Jlt=o(" (RoFormer model)"),Ylt=l(),Q6=a("li"),U9e=a("strong"),Zlt=o("xlm"),Klt=o(" \u2014 "),One=a("a"),eit=o("TFXLMForQuestionAnsweringSimple"),oit=o(" (XLM model)"),rit=l(),W6=a("li"),H9e=a("strong"),tit=o("xlm-roberta"),ait=o(" \u2014 "),Vne=a("a"),nit=o("TFXLMRobertaForQuestionAnswering"),sit=o(" (XLM-RoBERTa model)"),lit=l(),U6=a("li"),J9e=a("strong"),iit=o("xlnet"),dit=o(" \u2014 "),Xne=a("a"),cit=o("TFXLNetForQuestionAnsweringSimple"),mit=o(" (XLNet model)"),fit=l(),F(H6.$$.fragment),zro=l(),Gm=a("h2"),J6=a("a"),Y9e=a("span"),F(GR.$$.fragment),git=l(),Z9e=a("span"),hit=o("TFAutoModelForVision2Seq"),Qro=l(),Mr=a("div"),F(OR.$$.fragment),uit=l(),Om=a("p"),pit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zne=a("a"),_it=o("from_pretrained()"),bit=o(" class method or the "),Qne=a("a"),vit=o("from_config()"),Fit=o(` class
method.`),Tit=l(),VR=a("p"),Mit=o("This class cannot be instantiated directly using "),K9e=a("code"),Eit=o("__init__()"),Cit=o(" (throws an error)."),wit=l(),la=a("div"),F(XR.$$.fragment),Ait=l(),exe=a("p"),Lit=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yit=l(),Vm=a("p"),xit=o(`Note:
Loading a model from its configuration file does `),oxe=a("strong"),$it=o("not"),kit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=a("a"),Sit=o("from_pretrained()"),Rit=o(" to load the model weights."),Pit=l(),F(Y6.$$.fragment),Bit=l(),Zr=a("div"),F(zR.$$.fragment),Iit=l(),rxe=a("p"),Nit=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qit=l(),Xn=a("p"),jit=o("The model class to instantiate is selected based on the "),txe=a("code"),Dit=o("model_type"),Git=o(` property of the config object (either
passed as an argument or loaded from `),axe=a("code"),Oit=o("pretrained_model_name_or_path"),Vit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nxe=a("code"),Xit=o("pretrained_model_name_or_path"),zit=o(":"),Qit=l(),sxe=a("ul"),Z6=a("li"),lxe=a("strong"),Wit=o("vision-encoder-decoder"),Uit=o(" \u2014 "),Une=a("a"),Hit=o("TFVisionEncoderDecoderModel"),Jit=o(" (Vision Encoder decoder model)"),Yit=l(),F(K6.$$.fragment),Wro=l(),Xm=a("h2"),e7=a("a"),ixe=a("span"),F(QR.$$.fragment),Zit=l(),dxe=a("span"),Kit=o("TFAutoModelForSpeechSeq2Seq"),Uro=l(),Er=a("div"),F(WR.$$.fragment),edt=l(),zm=a("p"),odt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hne=a("a"),rdt=o("from_pretrained()"),tdt=o(" class method or the "),Jne=a("a"),adt=o("from_config()"),ndt=o(` class
method.`),sdt=l(),UR=a("p"),ldt=o("This class cannot be instantiated directly using "),cxe=a("code"),idt=o("__init__()"),ddt=o(" (throws an error)."),cdt=l(),ia=a("div"),F(HR.$$.fragment),mdt=l(),mxe=a("p"),fdt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),gdt=l(),Qm=a("p"),hdt=o(`Note:
Loading a model from its configuration file does `),fxe=a("strong"),udt=o("not"),pdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=a("a"),_dt=o("from_pretrained()"),bdt=o(" to load the model weights."),vdt=l(),F(o7.$$.fragment),Fdt=l(),Kr=a("div"),F(JR.$$.fragment),Tdt=l(),gxe=a("p"),Mdt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Edt=l(),zn=a("p"),Cdt=o("The model class to instantiate is selected based on the "),hxe=a("code"),wdt=o("model_type"),Adt=o(` property of the config object (either
passed as an argument or loaded from `),uxe=a("code"),Ldt=o("pretrained_model_name_or_path"),ydt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pxe=a("code"),xdt=o("pretrained_model_name_or_path"),$dt=o(":"),kdt=l(),_xe=a("ul"),r7=a("li"),bxe=a("strong"),Sdt=o("speech_to_text"),Rdt=o(" \u2014 "),Zne=a("a"),Pdt=o("TFSpeech2TextForConditionalGeneration"),Bdt=o(" (Speech2Text model)"),Idt=l(),F(t7.$$.fragment),Hro=l(),Wm=a("h2"),a7=a("a"),vxe=a("span"),F(YR.$$.fragment),Ndt=l(),Fxe=a("span"),qdt=o("FlaxAutoModel"),Jro=l(),Cr=a("div"),F(ZR.$$.fragment),jdt=l(),Um=a("p"),Ddt=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kne=a("a"),Gdt=o("from_pretrained()"),Odt=o(" class method or the "),ese=a("a"),Vdt=o("from_config()"),Xdt=o(` class
method.`),zdt=l(),KR=a("p"),Qdt=o("This class cannot be instantiated directly using "),Txe=a("code"),Wdt=o("__init__()"),Udt=o(" (throws an error)."),Hdt=l(),da=a("div"),F(eP.$$.fragment),Jdt=l(),Mxe=a("p"),Ydt=o("Instantiates one of the base model classes of the library from a configuration."),Zdt=l(),Hm=a("p"),Kdt=o(`Note:
Loading a model from its configuration file does `),Exe=a("strong"),ect=o("not"),oct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ose=a("a"),rct=o("from_pretrained()"),tct=o(" to load the model weights."),act=l(),F(n7.$$.fragment),nct=l(),et=a("div"),F(oP.$$.fragment),sct=l(),Cxe=a("p"),lct=o("Instantiate one of the base model classes of the library from a pretrained model."),ict=l(),Qn=a("p"),dct=o("The model class to instantiate is selected based on the "),wxe=a("code"),cct=o("model_type"),mct=o(` property of the config object (either
passed as an argument or loaded from `),Axe=a("code"),fct=o("pretrained_model_name_or_path"),gct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lxe=a("code"),hct=o("pretrained_model_name_or_path"),uct=o(":"),pct=l(),te=a("ul"),s7=a("li"),yxe=a("strong"),_ct=o("albert"),bct=o(" \u2014 "),rse=a("a"),vct=o("FlaxAlbertModel"),Fct=o(" (ALBERT model)"),Tct=l(),l7=a("li"),xxe=a("strong"),Mct=o("bart"),Ect=o(" \u2014 "),tse=a("a"),Cct=o("FlaxBartModel"),wct=o(" (BART model)"),Act=l(),i7=a("li"),$xe=a("strong"),Lct=o("beit"),yct=o(" \u2014 "),ase=a("a"),xct=o("FlaxBeitModel"),$ct=o(" (BEiT model)"),kct=l(),d7=a("li"),kxe=a("strong"),Sct=o("bert"),Rct=o(" \u2014 "),nse=a("a"),Pct=o("FlaxBertModel"),Bct=o(" (BERT model)"),Ict=l(),c7=a("li"),Sxe=a("strong"),Nct=o("big_bird"),qct=o(" \u2014 "),sse=a("a"),jct=o("FlaxBigBirdModel"),Dct=o(" (BigBird model)"),Gct=l(),m7=a("li"),Rxe=a("strong"),Oct=o("blenderbot"),Vct=o(" \u2014 "),lse=a("a"),Xct=o("FlaxBlenderbotModel"),zct=o(" (Blenderbot model)"),Qct=l(),f7=a("li"),Pxe=a("strong"),Wct=o("blenderbot-small"),Uct=o(" \u2014 "),ise=a("a"),Hct=o("FlaxBlenderbotSmallModel"),Jct=o(" (BlenderbotSmall model)"),Yct=l(),g7=a("li"),Bxe=a("strong"),Zct=o("clip"),Kct=o(" \u2014 "),dse=a("a"),emt=o("FlaxCLIPModel"),omt=o(" (CLIP model)"),rmt=l(),h7=a("li"),Ixe=a("strong"),tmt=o("distilbert"),amt=o(" \u2014 "),cse=a("a"),nmt=o("FlaxDistilBertModel"),smt=o(" (DistilBERT model)"),lmt=l(),u7=a("li"),Nxe=a("strong"),imt=o("electra"),dmt=o(" \u2014 "),mse=a("a"),cmt=o("FlaxElectraModel"),mmt=o(" (ELECTRA model)"),fmt=l(),p7=a("li"),qxe=a("strong"),gmt=o("gpt2"),hmt=o(" \u2014 "),fse=a("a"),umt=o("FlaxGPT2Model"),pmt=o(" (OpenAI GPT-2 model)"),_mt=l(),_7=a("li"),jxe=a("strong"),bmt=o("gpt_neo"),vmt=o(" \u2014 "),gse=a("a"),Fmt=o("FlaxGPTNeoModel"),Tmt=o(" (GPT Neo model)"),Mmt=l(),b7=a("li"),Dxe=a("strong"),Emt=o("gptj"),Cmt=o(" \u2014 "),hse=a("a"),wmt=o("FlaxGPTJModel"),Amt=o(" (GPT-J model)"),Lmt=l(),v7=a("li"),Gxe=a("strong"),ymt=o("longt5"),xmt=o(" \u2014 "),use=a("a"),$mt=o("FlaxLongT5Model"),kmt=o(" (LongT5 model)"),Smt=l(),F7=a("li"),Oxe=a("strong"),Rmt=o("marian"),Pmt=o(" \u2014 "),pse=a("a"),Bmt=o("FlaxMarianModel"),Imt=o(" (Marian model)"),Nmt=l(),T7=a("li"),Vxe=a("strong"),qmt=o("mbart"),jmt=o(" \u2014 "),_se=a("a"),Dmt=o("FlaxMBartModel"),Gmt=o(" (mBART model)"),Omt=l(),M7=a("li"),Xxe=a("strong"),Vmt=o("mt5"),Xmt=o(" \u2014 "),bse=a("a"),zmt=o("FlaxMT5Model"),Qmt=o(" (MT5 model)"),Wmt=l(),E7=a("li"),zxe=a("strong"),Umt=o("opt"),Hmt=o(" \u2014 "),vse=a("a"),Jmt=o("FlaxOPTModel"),Ymt=o(" (OPT model)"),Zmt=l(),C7=a("li"),Qxe=a("strong"),Kmt=o("pegasus"),eft=o(" \u2014 "),Fse=a("a"),oft=o("FlaxPegasusModel"),rft=o(" (Pegasus model)"),tft=l(),w7=a("li"),Wxe=a("strong"),aft=o("roberta"),nft=o(" \u2014 "),Tse=a("a"),sft=o("FlaxRobertaModel"),lft=o(" (RoBERTa model)"),ift=l(),A7=a("li"),Uxe=a("strong"),dft=o("roformer"),cft=o(" \u2014 "),Mse=a("a"),mft=o("FlaxRoFormerModel"),fft=o(" (RoFormer model)"),gft=l(),L7=a("li"),Hxe=a("strong"),hft=o("t5"),uft=o(" \u2014 "),Ese=a("a"),pft=o("FlaxT5Model"),_ft=o(" (T5 model)"),bft=l(),y7=a("li"),Jxe=a("strong"),vft=o("vision-text-dual-encoder"),Fft=o(" \u2014 "),Cse=a("a"),Tft=o("FlaxVisionTextDualEncoderModel"),Mft=o(" (VisionTextDualEncoder model)"),Eft=l(),x7=a("li"),Yxe=a("strong"),Cft=o("vit"),wft=o(" \u2014 "),wse=a("a"),Aft=o("FlaxViTModel"),Lft=o(" (ViT model)"),yft=l(),$7=a("li"),Zxe=a("strong"),xft=o("wav2vec2"),$ft=o(" \u2014 "),Ase=a("a"),kft=o("FlaxWav2Vec2Model"),Sft=o(" (Wav2Vec2 model)"),Rft=l(),k7=a("li"),Kxe=a("strong"),Pft=o("xglm"),Bft=o(" \u2014 "),Lse=a("a"),Ift=o("FlaxXGLMModel"),Nft=o(" (XGLM model)"),qft=l(),S7=a("li"),e$e=a("strong"),jft=o("xlm-roberta"),Dft=o(" \u2014 "),yse=a("a"),Gft=o("FlaxXLMRobertaModel"),Oft=o(" (XLM-RoBERTa model)"),Vft=l(),F(R7.$$.fragment),Yro=l(),Jm=a("h2"),P7=a("a"),o$e=a("span"),F(rP.$$.fragment),Xft=l(),r$e=a("span"),zft=o("FlaxAutoModelForCausalLM"),Zro=l(),wr=a("div"),F(tP.$$.fragment),Qft=l(),Ym=a("p"),Wft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xse=a("a"),Uft=o("from_pretrained()"),Hft=o(" class method or the "),$se=a("a"),Jft=o("from_config()"),Yft=o(` class
method.`),Zft=l(),aP=a("p"),Kft=o("This class cannot be instantiated directly using "),t$e=a("code"),egt=o("__init__()"),ogt=o(" (throws an error)."),rgt=l(),ca=a("div"),F(nP.$$.fragment),tgt=l(),a$e=a("p"),agt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ngt=l(),Zm=a("p"),sgt=o(`Note:
Loading a model from its configuration file does `),n$e=a("strong"),lgt=o("not"),igt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kse=a("a"),dgt=o("from_pretrained()"),cgt=o(" to load the model weights."),mgt=l(),F(B7.$$.fragment),fgt=l(),ot=a("div"),F(sP.$$.fragment),ggt=l(),s$e=a("p"),hgt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ugt=l(),Wn=a("p"),pgt=o("The model class to instantiate is selected based on the "),l$e=a("code"),_gt=o("model_type"),bgt=o(` property of the config object (either
passed as an argument or loaded from `),i$e=a("code"),vgt=o("pretrained_model_name_or_path"),Fgt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d$e=a("code"),Tgt=o("pretrained_model_name_or_path"),Mgt=o(":"),Egt=l(),xe=a("ul"),I7=a("li"),c$e=a("strong"),Cgt=o("bart"),wgt=o(" \u2014 "),Sse=a("a"),Agt=o("FlaxBartForCausalLM"),Lgt=o(" (BART model)"),ygt=l(),N7=a("li"),m$e=a("strong"),xgt=o("bert"),$gt=o(" \u2014 "),Rse=a("a"),kgt=o("FlaxBertForCausalLM"),Sgt=o(" (BERT model)"),Rgt=l(),q7=a("li"),f$e=a("strong"),Pgt=o("big_bird"),Bgt=o(" \u2014 "),Pse=a("a"),Igt=o("FlaxBigBirdForCausalLM"),Ngt=o(" (BigBird model)"),qgt=l(),j7=a("li"),g$e=a("strong"),jgt=o("electra"),Dgt=o(" \u2014 "),Bse=a("a"),Ggt=o("FlaxElectraForCausalLM"),Ogt=o(" (ELECTRA model)"),Vgt=l(),D7=a("li"),h$e=a("strong"),Xgt=o("gpt2"),zgt=o(" \u2014 "),Ise=a("a"),Qgt=o("FlaxGPT2LMHeadModel"),Wgt=o(" (OpenAI GPT-2 model)"),Ugt=l(),G7=a("li"),u$e=a("strong"),Hgt=o("gpt_neo"),Jgt=o(" \u2014 "),Nse=a("a"),Ygt=o("FlaxGPTNeoForCausalLM"),Zgt=o(" (GPT Neo model)"),Kgt=l(),O7=a("li"),p$e=a("strong"),eht=o("gptj"),oht=o(" \u2014 "),qse=a("a"),rht=o("FlaxGPTJForCausalLM"),tht=o(" (GPT-J model)"),aht=l(),V7=a("li"),_$e=a("strong"),nht=o("opt"),sht=o(" \u2014 "),jse=a("a"),lht=o("FlaxOPTForCausalLM"),iht=o(" (OPT model)"),dht=l(),X7=a("li"),b$e=a("strong"),cht=o("roberta"),mht=o(" \u2014 "),Dse=a("a"),fht=o("FlaxRobertaForCausalLM"),ght=o(" (RoBERTa model)"),hht=l(),z7=a("li"),v$e=a("strong"),uht=o("xglm"),pht=o(" \u2014 "),Gse=a("a"),_ht=o("FlaxXGLMForCausalLM"),bht=o(" (XGLM model)"),vht=l(),F(Q7.$$.fragment),Kro=l(),Km=a("h2"),W7=a("a"),F$e=a("span"),F(lP.$$.fragment),Fht=l(),T$e=a("span"),Tht=o("FlaxAutoModelForPreTraining"),eto=l(),Ar=a("div"),F(iP.$$.fragment),Mht=l(),ef=a("p"),Eht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ose=a("a"),Cht=o("from_pretrained()"),wht=o(" class method or the "),Vse=a("a"),Aht=o("from_config()"),Lht=o(` class
method.`),yht=l(),dP=a("p"),xht=o("This class cannot be instantiated directly using "),M$e=a("code"),$ht=o("__init__()"),kht=o(" (throws an error)."),Sht=l(),ma=a("div"),F(cP.$$.fragment),Rht=l(),E$e=a("p"),Pht=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Bht=l(),of=a("p"),Iht=o(`Note:
Loading a model from its configuration file does `),C$e=a("strong"),Nht=o("not"),qht=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xse=a("a"),jht=o("from_pretrained()"),Dht=o(" to load the model weights."),Ght=l(),F(U7.$$.fragment),Oht=l(),rt=a("div"),F(mP.$$.fragment),Vht=l(),w$e=a("p"),Xht=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zht=l(),Un=a("p"),Qht=o("The model class to instantiate is selected based on the "),A$e=a("code"),Wht=o("model_type"),Uht=o(` property of the config object (either
passed as an argument or loaded from `),L$e=a("code"),Hht=o("pretrained_model_name_or_path"),Jht=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y$e=a("code"),Yht=o("pretrained_model_name_or_path"),Zht=o(":"),Kht=l(),Ee=a("ul"),H7=a("li"),x$e=a("strong"),eut=o("albert"),out=o(" \u2014 "),zse=a("a"),rut=o("FlaxAlbertForPreTraining"),tut=o(" (ALBERT model)"),aut=l(),J7=a("li"),$$e=a("strong"),nut=o("bart"),sut=o(" \u2014 "),Qse=a("a"),lut=o("FlaxBartForConditionalGeneration"),iut=o(" (BART model)"),dut=l(),Y7=a("li"),k$e=a("strong"),cut=o("bert"),mut=o(" \u2014 "),Wse=a("a"),fut=o("FlaxBertForPreTraining"),gut=o(" (BERT model)"),hut=l(),Z7=a("li"),S$e=a("strong"),uut=o("big_bird"),put=o(" \u2014 "),Use=a("a"),_ut=o("FlaxBigBirdForPreTraining"),but=o(" (BigBird model)"),vut=l(),K7=a("li"),R$e=a("strong"),Fut=o("electra"),Tut=o(" \u2014 "),Hse=a("a"),Mut=o("FlaxElectraForPreTraining"),Eut=o(" (ELECTRA model)"),Cut=l(),eL=a("li"),P$e=a("strong"),wut=o("longt5"),Aut=o(" \u2014 "),Jse=a("a"),Lut=o("FlaxLongT5ForConditionalGeneration"),yut=o(" (LongT5 model)"),xut=l(),oL=a("li"),B$e=a("strong"),$ut=o("mbart"),kut=o(" \u2014 "),Yse=a("a"),Sut=o("FlaxMBartForConditionalGeneration"),Rut=o(" (mBART model)"),Put=l(),rL=a("li"),I$e=a("strong"),But=o("mt5"),Iut=o(" \u2014 "),Zse=a("a"),Nut=o("FlaxMT5ForConditionalGeneration"),qut=o(" (MT5 model)"),jut=l(),tL=a("li"),N$e=a("strong"),Dut=o("roberta"),Gut=o(" \u2014 "),Kse=a("a"),Out=o("FlaxRobertaForMaskedLM"),Vut=o(" (RoBERTa model)"),Xut=l(),aL=a("li"),q$e=a("strong"),zut=o("roformer"),Qut=o(" \u2014 "),ele=a("a"),Wut=o("FlaxRoFormerForMaskedLM"),Uut=o(" (RoFormer model)"),Hut=l(),nL=a("li"),j$e=a("strong"),Jut=o("t5"),Yut=o(" \u2014 "),ole=a("a"),Zut=o("FlaxT5ForConditionalGeneration"),Kut=o(" (T5 model)"),ept=l(),sL=a("li"),D$e=a("strong"),opt=o("wav2vec2"),rpt=o(" \u2014 "),rle=a("a"),tpt=o("FlaxWav2Vec2ForPreTraining"),apt=o(" (Wav2Vec2 model)"),npt=l(),lL=a("li"),G$e=a("strong"),spt=o("xlm-roberta"),lpt=o(" \u2014 "),tle=a("a"),ipt=o("FlaxXLMRobertaForMaskedLM"),dpt=o(" (XLM-RoBERTa model)"),cpt=l(),F(iL.$$.fragment),oto=l(),rf=a("h2"),dL=a("a"),O$e=a("span"),F(fP.$$.fragment),mpt=l(),V$e=a("span"),fpt=o("FlaxAutoModelForMaskedLM"),rto=l(),Lr=a("div"),F(gP.$$.fragment),gpt=l(),tf=a("p"),hpt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ale=a("a"),upt=o("from_pretrained()"),ppt=o(" class method or the "),nle=a("a"),_pt=o("from_config()"),bpt=o(` class
method.`),vpt=l(),hP=a("p"),Fpt=o("This class cannot be instantiated directly using "),X$e=a("code"),Tpt=o("__init__()"),Mpt=o(" (throws an error)."),Ept=l(),fa=a("div"),F(uP.$$.fragment),Cpt=l(),z$e=a("p"),wpt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Apt=l(),af=a("p"),Lpt=o(`Note:
Loading a model from its configuration file does `),Q$e=a("strong"),ypt=o("not"),xpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sle=a("a"),$pt=o("from_pretrained()"),kpt=o(" to load the model weights."),Spt=l(),F(cL.$$.fragment),Rpt=l(),tt=a("div"),F(pP.$$.fragment),Ppt=l(),W$e=a("p"),Bpt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ipt=l(),Hn=a("p"),Npt=o("The model class to instantiate is selected based on the "),U$e=a("code"),qpt=o("model_type"),jpt=o(` property of the config object (either
passed as an argument or loaded from `),H$e=a("code"),Dpt=o("pretrained_model_name_or_path"),Gpt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J$e=a("code"),Opt=o("pretrained_model_name_or_path"),Vpt=o(":"),Xpt=l(),$e=a("ul"),mL=a("li"),Y$e=a("strong"),zpt=o("albert"),Qpt=o(" \u2014 "),lle=a("a"),Wpt=o("FlaxAlbertForMaskedLM"),Upt=o(" (ALBERT model)"),Hpt=l(),fL=a("li"),Z$e=a("strong"),Jpt=o("bart"),Ypt=o(" \u2014 "),ile=a("a"),Zpt=o("FlaxBartForConditionalGeneration"),Kpt=o(" (BART model)"),e_t=l(),gL=a("li"),K$e=a("strong"),o_t=o("bert"),r_t=o(" \u2014 "),dle=a("a"),t_t=o("FlaxBertForMaskedLM"),a_t=o(" (BERT model)"),n_t=l(),hL=a("li"),eke=a("strong"),s_t=o("big_bird"),l_t=o(" \u2014 "),cle=a("a"),i_t=o("FlaxBigBirdForMaskedLM"),d_t=o(" (BigBird model)"),c_t=l(),uL=a("li"),oke=a("strong"),m_t=o("distilbert"),f_t=o(" \u2014 "),mle=a("a"),g_t=o("FlaxDistilBertForMaskedLM"),h_t=o(" (DistilBERT model)"),u_t=l(),pL=a("li"),rke=a("strong"),p_t=o("electra"),__t=o(" \u2014 "),fle=a("a"),b_t=o("FlaxElectraForMaskedLM"),v_t=o(" (ELECTRA model)"),F_t=l(),_L=a("li"),tke=a("strong"),T_t=o("mbart"),M_t=o(" \u2014 "),gle=a("a"),E_t=o("FlaxMBartForConditionalGeneration"),C_t=o(" (mBART model)"),w_t=l(),bL=a("li"),ake=a("strong"),A_t=o("roberta"),L_t=o(" \u2014 "),hle=a("a"),y_t=o("FlaxRobertaForMaskedLM"),x_t=o(" (RoBERTa model)"),$_t=l(),vL=a("li"),nke=a("strong"),k_t=o("roformer"),S_t=o(" \u2014 "),ule=a("a"),R_t=o("FlaxRoFormerForMaskedLM"),P_t=o(" (RoFormer model)"),B_t=l(),FL=a("li"),ske=a("strong"),I_t=o("xlm-roberta"),N_t=o(" \u2014 "),ple=a("a"),q_t=o("FlaxXLMRobertaForMaskedLM"),j_t=o(" (XLM-RoBERTa model)"),D_t=l(),F(TL.$$.fragment),tto=l(),nf=a("h2"),ML=a("a"),lke=a("span"),F(_P.$$.fragment),G_t=l(),ike=a("span"),O_t=o("FlaxAutoModelForSeq2SeqLM"),ato=l(),yr=a("div"),F(bP.$$.fragment),V_t=l(),sf=a("p"),X_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_le=a("a"),z_t=o("from_pretrained()"),Q_t=o(" class method or the "),ble=a("a"),W_t=o("from_config()"),U_t=o(` class
method.`),H_t=l(),vP=a("p"),J_t=o("This class cannot be instantiated directly using "),dke=a("code"),Y_t=o("__init__()"),Z_t=o(" (throws an error)."),K_t=l(),ga=a("div"),F(FP.$$.fragment),e1t=l(),cke=a("p"),o1t=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r1t=l(),lf=a("p"),t1t=o(`Note:
Loading a model from its configuration file does `),mke=a("strong"),a1t=o("not"),n1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vle=a("a"),s1t=o("from_pretrained()"),l1t=o(" to load the model weights."),i1t=l(),F(EL.$$.fragment),d1t=l(),at=a("div"),F(TP.$$.fragment),c1t=l(),fke=a("p"),m1t=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f1t=l(),Jn=a("p"),g1t=o("The model class to instantiate is selected based on the "),gke=a("code"),h1t=o("model_type"),u1t=o(` property of the config object (either
passed as an argument or loaded from `),hke=a("code"),p1t=o("pretrained_model_name_or_path"),_1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uke=a("code"),b1t=o("pretrained_model_name_or_path"),v1t=o(":"),F1t=l(),ke=a("ul"),CL=a("li"),pke=a("strong"),T1t=o("bart"),M1t=o(" \u2014 "),Fle=a("a"),E1t=o("FlaxBartForConditionalGeneration"),C1t=o(" (BART model)"),w1t=l(),wL=a("li"),_ke=a("strong"),A1t=o("blenderbot"),L1t=o(" \u2014 "),Tle=a("a"),y1t=o("FlaxBlenderbotForConditionalGeneration"),x1t=o(" (Blenderbot model)"),$1t=l(),AL=a("li"),bke=a("strong"),k1t=o("blenderbot-small"),S1t=o(" \u2014 "),Mle=a("a"),R1t=o("FlaxBlenderbotSmallForConditionalGeneration"),P1t=o(" (BlenderbotSmall model)"),B1t=l(),LL=a("li"),vke=a("strong"),I1t=o("encoder-decoder"),N1t=o(" \u2014 "),Ele=a("a"),q1t=o("FlaxEncoderDecoderModel"),j1t=o(" (Encoder decoder model)"),D1t=l(),yL=a("li"),Fke=a("strong"),G1t=o("longt5"),O1t=o(" \u2014 "),Cle=a("a"),V1t=o("FlaxLongT5ForConditionalGeneration"),X1t=o(" (LongT5 model)"),z1t=l(),xL=a("li"),Tke=a("strong"),Q1t=o("marian"),W1t=o(" \u2014 "),wle=a("a"),U1t=o("FlaxMarianMTModel"),H1t=o(" (Marian model)"),J1t=l(),$L=a("li"),Mke=a("strong"),Y1t=o("mbart"),Z1t=o(" \u2014 "),Ale=a("a"),K1t=o("FlaxMBartForConditionalGeneration"),ebt=o(" (mBART model)"),obt=l(),kL=a("li"),Eke=a("strong"),rbt=o("mt5"),tbt=o(" \u2014 "),Lle=a("a"),abt=o("FlaxMT5ForConditionalGeneration"),nbt=o(" (MT5 model)"),sbt=l(),SL=a("li"),Cke=a("strong"),lbt=o("pegasus"),ibt=o(" \u2014 "),yle=a("a"),dbt=o("FlaxPegasusForConditionalGeneration"),cbt=o(" (Pegasus model)"),mbt=l(),RL=a("li"),wke=a("strong"),fbt=o("t5"),gbt=o(" \u2014 "),xle=a("a"),hbt=o("FlaxT5ForConditionalGeneration"),ubt=o(" (T5 model)"),pbt=l(),F(PL.$$.fragment),nto=l(),df=a("h2"),BL=a("a"),Ake=a("span"),F(MP.$$.fragment),_bt=l(),Lke=a("span"),bbt=o("FlaxAutoModelForSequenceClassification"),sto=l(),xr=a("div"),F(EP.$$.fragment),vbt=l(),cf=a("p"),Fbt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$le=a("a"),Tbt=o("from_pretrained()"),Mbt=o(" class method or the "),kle=a("a"),Ebt=o("from_config()"),Cbt=o(` class
method.`),wbt=l(),CP=a("p"),Abt=o("This class cannot be instantiated directly using "),yke=a("code"),Lbt=o("__init__()"),ybt=o(" (throws an error)."),xbt=l(),ha=a("div"),F(wP.$$.fragment),$bt=l(),xke=a("p"),kbt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sbt=l(),mf=a("p"),Rbt=o(`Note:
Loading a model from its configuration file does `),$ke=a("strong"),Pbt=o("not"),Bbt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=a("a"),Ibt=o("from_pretrained()"),Nbt=o(" to load the model weights."),qbt=l(),F(IL.$$.fragment),jbt=l(),nt=a("div"),F(AP.$$.fragment),Dbt=l(),kke=a("p"),Gbt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Obt=l(),Yn=a("p"),Vbt=o("The model class to instantiate is selected based on the "),Ske=a("code"),Xbt=o("model_type"),zbt=o(` property of the config object (either
passed as an argument or loaded from `),Rke=a("code"),Qbt=o("pretrained_model_name_or_path"),Wbt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pke=a("code"),Ubt=o("pretrained_model_name_or_path"),Hbt=o(":"),Jbt=l(),Se=a("ul"),NL=a("li"),Bke=a("strong"),Ybt=o("albert"),Zbt=o(" \u2014 "),Rle=a("a"),Kbt=o("FlaxAlbertForSequenceClassification"),e2t=o(" (ALBERT model)"),o2t=l(),qL=a("li"),Ike=a("strong"),r2t=o("bart"),t2t=o(" \u2014 "),Ple=a("a"),a2t=o("FlaxBartForSequenceClassification"),n2t=o(" (BART model)"),s2t=l(),jL=a("li"),Nke=a("strong"),l2t=o("bert"),i2t=o(" \u2014 "),Ble=a("a"),d2t=o("FlaxBertForSequenceClassification"),c2t=o(" (BERT model)"),m2t=l(),DL=a("li"),qke=a("strong"),f2t=o("big_bird"),g2t=o(" \u2014 "),Ile=a("a"),h2t=o("FlaxBigBirdForSequenceClassification"),u2t=o(" (BigBird model)"),p2t=l(),GL=a("li"),jke=a("strong"),_2t=o("distilbert"),b2t=o(" \u2014 "),Nle=a("a"),v2t=o("FlaxDistilBertForSequenceClassification"),F2t=o(" (DistilBERT model)"),T2t=l(),OL=a("li"),Dke=a("strong"),M2t=o("electra"),E2t=o(" \u2014 "),qle=a("a"),C2t=o("FlaxElectraForSequenceClassification"),w2t=o(" (ELECTRA model)"),A2t=l(),VL=a("li"),Gke=a("strong"),L2t=o("mbart"),y2t=o(" \u2014 "),jle=a("a"),x2t=o("FlaxMBartForSequenceClassification"),$2t=o(" (mBART model)"),k2t=l(),XL=a("li"),Oke=a("strong"),S2t=o("roberta"),R2t=o(" \u2014 "),Dle=a("a"),P2t=o("FlaxRobertaForSequenceClassification"),B2t=o(" (RoBERTa model)"),I2t=l(),zL=a("li"),Vke=a("strong"),N2t=o("roformer"),q2t=o(" \u2014 "),Gle=a("a"),j2t=o("FlaxRoFormerForSequenceClassification"),D2t=o(" (RoFormer model)"),G2t=l(),QL=a("li"),Xke=a("strong"),O2t=o("xlm-roberta"),V2t=o(" \u2014 "),Ole=a("a"),X2t=o("FlaxXLMRobertaForSequenceClassification"),z2t=o(" (XLM-RoBERTa model)"),Q2t=l(),F(WL.$$.fragment),lto=l(),ff=a("h2"),UL=a("a"),zke=a("span"),F(LP.$$.fragment),W2t=l(),Qke=a("span"),U2t=o("FlaxAutoModelForQuestionAnswering"),ito=l(),$r=a("div"),F(yP.$$.fragment),H2t=l(),gf=a("p"),J2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vle=a("a"),Y2t=o("from_pretrained()"),Z2t=o(" class method or the "),Xle=a("a"),K2t=o("from_config()"),evt=o(` class
method.`),ovt=l(),xP=a("p"),rvt=o("This class cannot be instantiated directly using "),Wke=a("code"),tvt=o("__init__()"),avt=o(" (throws an error)."),nvt=l(),ua=a("div"),F($P.$$.fragment),svt=l(),Uke=a("p"),lvt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ivt=l(),hf=a("p"),dvt=o(`Note:
Loading a model from its configuration file does `),Hke=a("strong"),cvt=o("not"),mvt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zle=a("a"),fvt=o("from_pretrained()"),gvt=o(" to load the model weights."),hvt=l(),F(HL.$$.fragment),uvt=l(),st=a("div"),F(kP.$$.fragment),pvt=l(),Jke=a("p"),_vt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bvt=l(),Zn=a("p"),vvt=o("The model class to instantiate is selected based on the "),Yke=a("code"),Fvt=o("model_type"),Tvt=o(` property of the config object (either
passed as an argument or loaded from `),Zke=a("code"),Mvt=o("pretrained_model_name_or_path"),Evt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kke=a("code"),Cvt=o("pretrained_model_name_or_path"),wvt=o(":"),Avt=l(),Re=a("ul"),JL=a("li"),eSe=a("strong"),Lvt=o("albert"),yvt=o(" \u2014 "),Qle=a("a"),xvt=o("FlaxAlbertForQuestionAnswering"),$vt=o(" (ALBERT model)"),kvt=l(),YL=a("li"),oSe=a("strong"),Svt=o("bart"),Rvt=o(" \u2014 "),Wle=a("a"),Pvt=o("FlaxBartForQuestionAnswering"),Bvt=o(" (BART model)"),Ivt=l(),ZL=a("li"),rSe=a("strong"),Nvt=o("bert"),qvt=o(" \u2014 "),Ule=a("a"),jvt=o("FlaxBertForQuestionAnswering"),Dvt=o(" (BERT model)"),Gvt=l(),KL=a("li"),tSe=a("strong"),Ovt=o("big_bird"),Vvt=o(" \u2014 "),Hle=a("a"),Xvt=o("FlaxBigBirdForQuestionAnswering"),zvt=o(" (BigBird model)"),Qvt=l(),ey=a("li"),aSe=a("strong"),Wvt=o("distilbert"),Uvt=o(" \u2014 "),Jle=a("a"),Hvt=o("FlaxDistilBertForQuestionAnswering"),Jvt=o(" (DistilBERT model)"),Yvt=l(),oy=a("li"),nSe=a("strong"),Zvt=o("electra"),Kvt=o(" \u2014 "),Yle=a("a"),eFt=o("FlaxElectraForQuestionAnswering"),oFt=o(" (ELECTRA model)"),rFt=l(),ry=a("li"),sSe=a("strong"),tFt=o("mbart"),aFt=o(" \u2014 "),Zle=a("a"),nFt=o("FlaxMBartForQuestionAnswering"),sFt=o(" (mBART model)"),lFt=l(),ty=a("li"),lSe=a("strong"),iFt=o("roberta"),dFt=o(" \u2014 "),Kle=a("a"),cFt=o("FlaxRobertaForQuestionAnswering"),mFt=o(" (RoBERTa model)"),fFt=l(),ay=a("li"),iSe=a("strong"),gFt=o("roformer"),hFt=o(" \u2014 "),eie=a("a"),uFt=o("FlaxRoFormerForQuestionAnswering"),pFt=o(" (RoFormer model)"),_Ft=l(),ny=a("li"),dSe=a("strong"),bFt=o("xlm-roberta"),vFt=o(" \u2014 "),oie=a("a"),FFt=o("FlaxXLMRobertaForQuestionAnswering"),TFt=o(" (XLM-RoBERTa model)"),MFt=l(),F(sy.$$.fragment),dto=l(),uf=a("h2"),ly=a("a"),cSe=a("span"),F(SP.$$.fragment),EFt=l(),mSe=a("span"),CFt=o("FlaxAutoModelForTokenClassification"),cto=l(),kr=a("div"),F(RP.$$.fragment),wFt=l(),pf=a("p"),AFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rie=a("a"),LFt=o("from_pretrained()"),yFt=o(" class method or the "),tie=a("a"),xFt=o("from_config()"),$Ft=o(` class
method.`),kFt=l(),PP=a("p"),SFt=o("This class cannot be instantiated directly using "),fSe=a("code"),RFt=o("__init__()"),PFt=o(" (throws an error)."),BFt=l(),pa=a("div"),F(BP.$$.fragment),IFt=l(),gSe=a("p"),NFt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qFt=l(),_f=a("p"),jFt=o(`Note:
Loading a model from its configuration file does `),hSe=a("strong"),DFt=o("not"),GFt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aie=a("a"),OFt=o("from_pretrained()"),VFt=o(" to load the model weights."),XFt=l(),F(iy.$$.fragment),zFt=l(),lt=a("div"),F(IP.$$.fragment),QFt=l(),uSe=a("p"),WFt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),UFt=l(),Kn=a("p"),HFt=o("The model class to instantiate is selected based on the "),pSe=a("code"),JFt=o("model_type"),YFt=o(` property of the config object (either
passed as an argument or loaded from `),_Se=a("code"),ZFt=o("pretrained_model_name_or_path"),KFt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bSe=a("code"),eTt=o("pretrained_model_name_or_path"),oTt=o(":"),rTt=l(),Xe=a("ul"),dy=a("li"),vSe=a("strong"),tTt=o("albert"),aTt=o(" \u2014 "),nie=a("a"),nTt=o("FlaxAlbertForTokenClassification"),sTt=o(" (ALBERT model)"),lTt=l(),cy=a("li"),FSe=a("strong"),iTt=o("bert"),dTt=o(" \u2014 "),sie=a("a"),cTt=o("FlaxBertForTokenClassification"),mTt=o(" (BERT model)"),fTt=l(),my=a("li"),TSe=a("strong"),gTt=o("big_bird"),hTt=o(" \u2014 "),lie=a("a"),uTt=o("FlaxBigBirdForTokenClassification"),pTt=o(" (BigBird model)"),_Tt=l(),fy=a("li"),MSe=a("strong"),bTt=o("distilbert"),vTt=o(" \u2014 "),iie=a("a"),FTt=o("FlaxDistilBertForTokenClassification"),TTt=o(" (DistilBERT model)"),MTt=l(),gy=a("li"),ESe=a("strong"),ETt=o("electra"),CTt=o(" \u2014 "),die=a("a"),wTt=o("FlaxElectraForTokenClassification"),ATt=o(" (ELECTRA model)"),LTt=l(),hy=a("li"),CSe=a("strong"),yTt=o("roberta"),xTt=o(" \u2014 "),cie=a("a"),$Tt=o("FlaxRobertaForTokenClassification"),kTt=o(" (RoBERTa model)"),STt=l(),uy=a("li"),wSe=a("strong"),RTt=o("roformer"),PTt=o(" \u2014 "),mie=a("a"),BTt=o("FlaxRoFormerForTokenClassification"),ITt=o(" (RoFormer model)"),NTt=l(),py=a("li"),ASe=a("strong"),qTt=o("xlm-roberta"),jTt=o(" \u2014 "),fie=a("a"),DTt=o("FlaxXLMRobertaForTokenClassification"),GTt=o(" (XLM-RoBERTa model)"),OTt=l(),F(_y.$$.fragment),mto=l(),bf=a("h2"),by=a("a"),LSe=a("span"),F(NP.$$.fragment),VTt=l(),ySe=a("span"),XTt=o("FlaxAutoModelForMultipleChoice"),fto=l(),Sr=a("div"),F(qP.$$.fragment),zTt=l(),vf=a("p"),QTt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gie=a("a"),WTt=o("from_pretrained()"),UTt=o(" class method or the "),hie=a("a"),HTt=o("from_config()"),JTt=o(` class
method.`),YTt=l(),jP=a("p"),ZTt=o("This class cannot be instantiated directly using "),xSe=a("code"),KTt=o("__init__()"),eMt=o(" (throws an error)."),oMt=l(),_a=a("div"),F(DP.$$.fragment),rMt=l(),$Se=a("p"),tMt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aMt=l(),Ff=a("p"),nMt=o(`Note:
Loading a model from its configuration file does `),kSe=a("strong"),sMt=o("not"),lMt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=a("a"),iMt=o("from_pretrained()"),dMt=o(" to load the model weights."),cMt=l(),F(vy.$$.fragment),mMt=l(),it=a("div"),F(GP.$$.fragment),fMt=l(),SSe=a("p"),gMt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hMt=l(),es=a("p"),uMt=o("The model class to instantiate is selected based on the "),RSe=a("code"),pMt=o("model_type"),_Mt=o(` property of the config object (either
passed as an argument or loaded from `),PSe=a("code"),bMt=o("pretrained_model_name_or_path"),vMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BSe=a("code"),FMt=o("pretrained_model_name_or_path"),TMt=o(":"),MMt=l(),ze=a("ul"),Fy=a("li"),ISe=a("strong"),EMt=o("albert"),CMt=o(" \u2014 "),pie=a("a"),wMt=o("FlaxAlbertForMultipleChoice"),AMt=o(" (ALBERT model)"),LMt=l(),Ty=a("li"),NSe=a("strong"),yMt=o("bert"),xMt=o(" \u2014 "),_ie=a("a"),$Mt=o("FlaxBertForMultipleChoice"),kMt=o(" (BERT model)"),SMt=l(),My=a("li"),qSe=a("strong"),RMt=o("big_bird"),PMt=o(" \u2014 "),bie=a("a"),BMt=o("FlaxBigBirdForMultipleChoice"),IMt=o(" (BigBird model)"),NMt=l(),Ey=a("li"),jSe=a("strong"),qMt=o("distilbert"),jMt=o(" \u2014 "),vie=a("a"),DMt=o("FlaxDistilBertForMultipleChoice"),GMt=o(" (DistilBERT model)"),OMt=l(),Cy=a("li"),DSe=a("strong"),VMt=o("electra"),XMt=o(" \u2014 "),Fie=a("a"),zMt=o("FlaxElectraForMultipleChoice"),QMt=o(" (ELECTRA model)"),WMt=l(),wy=a("li"),GSe=a("strong"),UMt=o("roberta"),HMt=o(" \u2014 "),Tie=a("a"),JMt=o("FlaxRobertaForMultipleChoice"),YMt=o(" (RoBERTa model)"),ZMt=l(),Ay=a("li"),OSe=a("strong"),KMt=o("roformer"),eEt=o(" \u2014 "),Mie=a("a"),oEt=o("FlaxRoFormerForMultipleChoice"),rEt=o(" (RoFormer model)"),tEt=l(),Ly=a("li"),VSe=a("strong"),aEt=o("xlm-roberta"),nEt=o(" \u2014 "),Eie=a("a"),sEt=o("FlaxXLMRobertaForMultipleChoice"),lEt=o(" (XLM-RoBERTa model)"),iEt=l(),F(yy.$$.fragment),gto=l(),Tf=a("h2"),xy=a("a"),XSe=a("span"),F(OP.$$.fragment),dEt=l(),zSe=a("span"),cEt=o("FlaxAutoModelForNextSentencePrediction"),hto=l(),Rr=a("div"),F(VP.$$.fragment),mEt=l(),Mf=a("p"),fEt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cie=a("a"),gEt=o("from_pretrained()"),hEt=o(" class method or the "),wie=a("a"),uEt=o("from_config()"),pEt=o(` class
method.`),_Et=l(),XP=a("p"),bEt=o("This class cannot be instantiated directly using "),QSe=a("code"),vEt=o("__init__()"),FEt=o(" (throws an error)."),TEt=l(),ba=a("div"),F(zP.$$.fragment),MEt=l(),WSe=a("p"),EEt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CEt=l(),Ef=a("p"),wEt=o(`Note:
Loading a model from its configuration file does `),USe=a("strong"),AEt=o("not"),LEt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=a("a"),yEt=o("from_pretrained()"),xEt=o(" to load the model weights."),$Et=l(),F($y.$$.fragment),kEt=l(),dt=a("div"),F(QP.$$.fragment),SEt=l(),HSe=a("p"),REt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PEt=l(),os=a("p"),BEt=o("The model class to instantiate is selected based on the "),JSe=a("code"),IEt=o("model_type"),NEt=o(` property of the config object (either
passed as an argument or loaded from `),YSe=a("code"),qEt=o("pretrained_model_name_or_path"),jEt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZSe=a("code"),DEt=o("pretrained_model_name_or_path"),GEt=o(":"),OEt=l(),KSe=a("ul"),ky=a("li"),eRe=a("strong"),VEt=o("bert"),XEt=o(" \u2014 "),Lie=a("a"),zEt=o("FlaxBertForNextSentencePrediction"),QEt=o(" (BERT model)"),WEt=l(),F(Sy.$$.fragment),uto=l(),Cf=a("h2"),Ry=a("a"),oRe=a("span"),F(WP.$$.fragment),UEt=l(),rRe=a("span"),HEt=o("FlaxAutoModelForImageClassification"),pto=l(),Pr=a("div"),F(UP.$$.fragment),JEt=l(),wf=a("p"),YEt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yie=a("a"),ZEt=o("from_pretrained()"),KEt=o(" class method or the "),xie=a("a"),e4t=o("from_config()"),o4t=o(` class
method.`),r4t=l(),HP=a("p"),t4t=o("This class cannot be instantiated directly using "),tRe=a("code"),a4t=o("__init__()"),n4t=o(" (throws an error)."),s4t=l(),va=a("div"),F(JP.$$.fragment),l4t=l(),aRe=a("p"),i4t=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d4t=l(),Af=a("p"),c4t=o(`Note:
Loading a model from its configuration file does `),nRe=a("strong"),m4t=o("not"),f4t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=a("a"),g4t=o("from_pretrained()"),h4t=o(" to load the model weights."),u4t=l(),F(Py.$$.fragment),p4t=l(),ct=a("div"),F(YP.$$.fragment),_4t=l(),sRe=a("p"),b4t=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),v4t=l(),rs=a("p"),F4t=o("The model class to instantiate is selected based on the "),lRe=a("code"),T4t=o("model_type"),M4t=o(` property of the config object (either
passed as an argument or loaded from `),iRe=a("code"),E4t=o("pretrained_model_name_or_path"),C4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dRe=a("code"),w4t=o("pretrained_model_name_or_path"),A4t=o(":"),L4t=l(),ZP=a("ul"),By=a("li"),cRe=a("strong"),y4t=o("beit"),x4t=o(" \u2014 "),kie=a("a"),$4t=o("FlaxBeitForImageClassification"),k4t=o(" (BEiT model)"),S4t=l(),Iy=a("li"),mRe=a("strong"),R4t=o("vit"),P4t=o(" \u2014 "),Sie=a("a"),B4t=o("FlaxViTForImageClassification"),I4t=o(" (ViT model)"),N4t=l(),F(Ny.$$.fragment),_to=l(),Lf=a("h2"),qy=a("a"),fRe=a("span"),F(KP.$$.fragment),q4t=l(),gRe=a("span"),j4t=o("FlaxAutoModelForVision2Seq"),bto=l(),Br=a("div"),F(eB.$$.fragment),D4t=l(),yf=a("p"),G4t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Rie=a("a"),O4t=o("from_pretrained()"),V4t=o(" class method or the "),Pie=a("a"),X4t=o("from_config()"),z4t=o(` class
method.`),Q4t=l(),oB=a("p"),W4t=o("This class cannot be instantiated directly using "),hRe=a("code"),U4t=o("__init__()"),H4t=o(" (throws an error)."),J4t=l(),Fa=a("div"),F(rB.$$.fragment),Y4t=l(),uRe=a("p"),Z4t=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K4t=l(),xf=a("p"),eCt=o(`Note:
Loading a model from its configuration file does `),pRe=a("strong"),oCt=o("not"),rCt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=a("a"),tCt=o("from_pretrained()"),aCt=o(" to load the model weights."),nCt=l(),F(jy.$$.fragment),sCt=l(),mt=a("div"),F(tB.$$.fragment),lCt=l(),_Re=a("p"),iCt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dCt=l(),ts=a("p"),cCt=o("The model class to instantiate is selected based on the "),bRe=a("code"),mCt=o("model_type"),fCt=o(` property of the config object (either
passed as an argument or loaded from `),vRe=a("code"),gCt=o("pretrained_model_name_or_path"),hCt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FRe=a("code"),uCt=o("pretrained_model_name_or_path"),pCt=o(":"),_Ct=l(),TRe=a("ul"),Dy=a("li"),MRe=a("strong"),bCt=o("vision-encoder-decoder"),vCt=o(" \u2014 "),Iie=a("a"),FCt=o("FlaxVisionEncoderDecoderModel"),TCt=o(" (Vision Encoder decoder model)"),MCt=l(),F(Gy.$$.fragment),this.h()},l(m){const _=tFa('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var aB=s(u);f=n(aB,"A",{id:!0,class:!0,href:!0});var ERe=s(f);p=n(ERe,"SPAN",{});var CRe=s(p);T(d.$$.fragment,CRe),CRe.forEach(t),ERe.forEach(t),h=i(aB),xo=n(aB,"SPAN",{});var wRe=s(xo);dd=r(wRe,"Auto Classes"),wRe.forEach(t),aB.forEach(t),Rf=i(m),bt=n(m,"P",{});var nB=s(bt);cd=r(nB,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),md=n(nB,"CODE",{});var ARe=s(md);Tx=r(ARe,"from_pretrained()"),ARe.forEach(t),Pf=r(nB,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),nB.forEach(t),Ve=i(m),He=n(m,"P",{});var as=s(He);fd=r(as,"Instantiating one of "),ns=n(as,"A",{href:!0});var LRe=s(ns);Mx=r(LRe,"AutoConfig"),LRe.forEach(t),ss=r(as,", "),ls=n(as,"A",{href:!0});var yRe=s(ls);Ex=r(yRe,"AutoModel"),yRe.forEach(t),gd=r(as,`, and
`),is=n(as,"A",{href:!0});var xRe=s(is);Cx=r(xRe,"AutoTokenizer"),xRe.forEach(t),hd=r(as," will directly create a class of the relevant architecture. For instance"),as.forEach(t),Bf=i(m),T(Ja.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var sB=s(Ae);xI=r(sB,"will create a model that is an instance of "),ud=n(sB,"A",{href:!0});var $Re=s(ud);$I=r($Re,"BertModel"),$Re.forEach(t),kI=r(sB,"."),sB.forEach(t),$o=i(m),Ya=n(m,"P",{});var lB=s(Ya);SI=r(lB,"There is one class of "),If=n(lB,"CODE",{});var kRe=s(If);RI=r(kRe,"AutoModel"),kRe.forEach(t),Nno=r(lB," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lB.forEach(t),aoo=i(m),pd=n(m,"H2",{class:!0});var iB=s(pd);Nf=n(iB,"A",{id:!0,class:!0,href:!0});var SRe=s(Nf);Vce=n(SRe,"SPAN",{});var RRe=s(Vce);T(wx.$$.fragment,RRe),RRe.forEach(t),SRe.forEach(t),qno=i(iB),Xce=n(iB,"SPAN",{});var PRe=s(Xce);jno=r(PRe,"Extending the Auto Classes"),PRe.forEach(t),iB.forEach(t),noo=i(m),ds=n(m,"P",{});var $f=s(ds);Dno=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zce=n($f,"CODE",{});var BRe=s(zce);Gno=r(BRe,"NewModel"),BRe.forEach(t),Ono=r($f,", make sure you have a "),Qce=n($f,"CODE",{});var IRe=s(Qce);Vno=r(IRe,"NewModelConfig"),IRe.forEach(t),Xno=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),soo=i(m),T(Ax.$$.fragment,m),loo=i(m),PI=n(m,"P",{});var NRe=s(PI);zno=r(NRe,"You will then be able to use the auto classes like you would usually do!"),NRe.forEach(t),ioo=i(m),T(qf.$$.fragment,m),doo=i(m),_d=n(m,"H2",{class:!0});var dB=s(_d);jf=n(dB,"A",{id:!0,class:!0,href:!0});var qRe=s(jf);Wce=n(qRe,"SPAN",{});var jRe=s(Wce);T(Lx.$$.fragment,jRe),jRe.forEach(t),qRe.forEach(t),Qno=i(dB),Uce=n(dB,"SPAN",{});var DRe=s(Uce);Wno=r(DRe,"AutoConfig"),DRe.forEach(t),dB.forEach(t),coo=i(m),ko=n(m,"DIV",{class:!0});var pt=s(ko);T(yx.$$.fragment,pt),Uno=i(pt),xx=n(pt,"P",{});var cB=s(xx);Hno=r(cB,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),BI=n(cB,"A",{href:!0});var GRe=s(BI);Jno=r(GRe,"from_pretrained()"),GRe.forEach(t),Yno=r(cB," class method."),cB.forEach(t),Zno=i(pt),$x=n(pt,"P",{});var mB=s($x);Kno=r(mB,"This class cannot be instantiated directly using "),Hce=n(mB,"CODE",{});var ORe=s(Hce);eso=r(ORe,"__init__()"),ORe.forEach(t),oso=r(mB," (throws an error)."),mB.forEach(t),rso=i(pt),Ir=n(pt,"DIV",{class:!0});var _t=s(Ir);T(kx.$$.fragment,_t),tso=i(_t),Jce=n(_t,"P",{});var VRe=s(Jce);aso=r(VRe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),VRe.forEach(t),nso=i(_t),bd=n(_t,"P",{});var kf=s(bd);sso=r(kf,"The configuration class to instantiate is selected based on the "),Yce=n(kf,"CODE",{});var XRe=s(Yce);lso=r(XRe,"model_type"),XRe.forEach(t),iso=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zce=n(kf,"CODE",{});var zRe=s(Zce);dso=r(zRe,"pretrained_model_name_or_path"),zRe.forEach(t),cso=r(kf,":"),kf.forEach(t),mso=i(_t),A=n(_t,"UL",{});var L=s(A);Df=n(L,"LI",{});var Oy=s(Df);Kce=n(Oy,"STRONG",{});var QRe=s(Kce);fso=r(QRe,"albert"),QRe.forEach(t),gso=r(Oy," \u2014 "),II=n(Oy,"A",{href:!0});var WRe=s(II);hso=r(WRe,"AlbertConfig"),WRe.forEach(t),uso=r(Oy," (ALBERT model)"),Oy.forEach(t),pso=i(L),Gf=n(L,"LI",{});var Vy=s(Gf);eme=n(Vy,"STRONG",{});var URe=s(eme);_so=r(URe,"bart"),URe.forEach(t),bso=r(Vy," \u2014 "),NI=n(Vy,"A",{href:!0});var HRe=s(NI);vso=r(HRe,"BartConfig"),HRe.forEach(t),Fso=r(Vy," (BART model)"),Vy.forEach(t),Tso=i(L),Of=n(L,"LI",{});var Xy=s(Of);ome=n(Xy,"STRONG",{});var JRe=s(ome);Mso=r(JRe,"beit"),JRe.forEach(t),Eso=r(Xy," \u2014 "),qI=n(Xy,"A",{href:!0});var YRe=s(qI);Cso=r(YRe,"BeitConfig"),YRe.forEach(t),wso=r(Xy," (BEiT model)"),Xy.forEach(t),Aso=i(L),Vf=n(L,"LI",{});var zy=s(Vf);rme=n(zy,"STRONG",{});var ZRe=s(rme);Lso=r(ZRe,"bert"),ZRe.forEach(t),yso=r(zy," \u2014 "),jI=n(zy,"A",{href:!0});var KRe=s(jI);xso=r(KRe,"BertConfig"),KRe.forEach(t),$so=r(zy," (BERT model)"),zy.forEach(t),kso=i(L),Xf=n(L,"LI",{});var Qy=s(Xf);tme=n(Qy,"STRONG",{});var ePe=s(tme);Sso=r(ePe,"bert-generation"),ePe.forEach(t),Rso=r(Qy," \u2014 "),DI=n(Qy,"A",{href:!0});var oPe=s(DI);Pso=r(oPe,"BertGenerationConfig"),oPe.forEach(t),Bso=r(Qy," (Bert Generation model)"),Qy.forEach(t),Iso=i(L),zf=n(L,"LI",{});var Wy=s(zf);ame=n(Wy,"STRONG",{});var rPe=s(ame);Nso=r(rPe,"big_bird"),rPe.forEach(t),qso=r(Wy," \u2014 "),GI=n(Wy,"A",{href:!0});var tPe=s(GI);jso=r(tPe,"BigBirdConfig"),tPe.forEach(t),Dso=r(Wy," (BigBird model)"),Wy.forEach(t),Gso=i(L),Qf=n(L,"LI",{});var Uy=s(Qf);nme=n(Uy,"STRONG",{});var aPe=s(nme);Oso=r(aPe,"bigbird_pegasus"),aPe.forEach(t),Vso=r(Uy," \u2014 "),OI=n(Uy,"A",{href:!0});var nPe=s(OI);Xso=r(nPe,"BigBirdPegasusConfig"),nPe.forEach(t),zso=r(Uy," (BigBird-Pegasus model)"),Uy.forEach(t),Qso=i(L),Wf=n(L,"LI",{});var Hy=s(Wf);sme=n(Hy,"STRONG",{});var sPe=s(sme);Wso=r(sPe,"blenderbot"),sPe.forEach(t),Uso=r(Hy," \u2014 "),VI=n(Hy,"A",{href:!0});var lPe=s(VI);Hso=r(lPe,"BlenderbotConfig"),lPe.forEach(t),Jso=r(Hy," (Blenderbot model)"),Hy.forEach(t),Yso=i(L),Uf=n(L,"LI",{});var Jy=s(Uf);lme=n(Jy,"STRONG",{});var iPe=s(lme);Zso=r(iPe,"blenderbot-small"),iPe.forEach(t),Kso=r(Jy," \u2014 "),XI=n(Jy,"A",{href:!0});var dPe=s(XI);elo=r(dPe,"BlenderbotSmallConfig"),dPe.forEach(t),olo=r(Jy," (BlenderbotSmall model)"),Jy.forEach(t),rlo=i(L),Hf=n(L,"LI",{});var Yy=s(Hf);ime=n(Yy,"STRONG",{});var cPe=s(ime);tlo=r(cPe,"bloom"),cPe.forEach(t),alo=r(Yy," \u2014 "),zI=n(Yy,"A",{href:!0});var mPe=s(zI);nlo=r(mPe,"BloomConfig"),mPe.forEach(t),slo=r(Yy," (BLOOM model)"),Yy.forEach(t),llo=i(L),Jf=n(L,"LI",{});var Zy=s(Jf);dme=n(Zy,"STRONG",{});var fPe=s(dme);ilo=r(fPe,"camembert"),fPe.forEach(t),dlo=r(Zy," \u2014 "),QI=n(Zy,"A",{href:!0});var gPe=s(QI);clo=r(gPe,"CamembertConfig"),gPe.forEach(t),mlo=r(Zy," (CamemBERT model)"),Zy.forEach(t),flo=i(L),Yf=n(L,"LI",{});var Ky=s(Yf);cme=n(Ky,"STRONG",{});var hPe=s(cme);glo=r(hPe,"canine"),hPe.forEach(t),hlo=r(Ky," \u2014 "),WI=n(Ky,"A",{href:!0});var uPe=s(WI);ulo=r(uPe,"CanineConfig"),uPe.forEach(t),plo=r(Ky," (CANINE model)"),Ky.forEach(t),_lo=i(L),Zf=n(L,"LI",{});var e8=s(Zf);mme=n(e8,"STRONG",{});var pPe=s(mme);blo=r(pPe,"clip"),pPe.forEach(t),vlo=r(e8," \u2014 "),UI=n(e8,"A",{href:!0});var _Pe=s(UI);Flo=r(_Pe,"CLIPConfig"),_Pe.forEach(t),Tlo=r(e8," (CLIP model)"),e8.forEach(t),Mlo=i(L),Kf=n(L,"LI",{});var o8=s(Kf);fme=n(o8,"STRONG",{});var bPe=s(fme);Elo=r(bPe,"codegen"),bPe.forEach(t),Clo=r(o8," \u2014 "),HI=n(o8,"A",{href:!0});var vPe=s(HI);wlo=r(vPe,"CodeGenConfig"),vPe.forEach(t),Alo=r(o8," (CodeGen model)"),o8.forEach(t),Llo=i(L),eg=n(L,"LI",{});var r8=s(eg);gme=n(r8,"STRONG",{});var FPe=s(gme);ylo=r(FPe,"conditional_detr"),FPe.forEach(t),xlo=r(r8," \u2014 "),JI=n(r8,"A",{href:!0});var TPe=s(JI);$lo=r(TPe,"ConditionalDetrConfig"),TPe.forEach(t),klo=r(r8," (Conditional DETR model)"),r8.forEach(t),Slo=i(L),og=n(L,"LI",{});var t8=s(og);hme=n(t8,"STRONG",{});var MPe=s(hme);Rlo=r(MPe,"convbert"),MPe.forEach(t),Plo=r(t8," \u2014 "),YI=n(t8,"A",{href:!0});var EPe=s(YI);Blo=r(EPe,"ConvBertConfig"),EPe.forEach(t),Ilo=r(t8," (ConvBERT model)"),t8.forEach(t),Nlo=i(L),rg=n(L,"LI",{});var a8=s(rg);ume=n(a8,"STRONG",{});var CPe=s(ume);qlo=r(CPe,"convnext"),CPe.forEach(t),jlo=r(a8," \u2014 "),ZI=n(a8,"A",{href:!0});var wPe=s(ZI);Dlo=r(wPe,"ConvNextConfig"),wPe.forEach(t),Glo=r(a8," (ConvNeXT model)"),a8.forEach(t),Olo=i(L),tg=n(L,"LI",{});var n8=s(tg);pme=n(n8,"STRONG",{});var APe=s(pme);Vlo=r(APe,"ctrl"),APe.forEach(t),Xlo=r(n8," \u2014 "),KI=n(n8,"A",{href:!0});var LPe=s(KI);zlo=r(LPe,"CTRLConfig"),LPe.forEach(t),Qlo=r(n8," (CTRL model)"),n8.forEach(t),Wlo=i(L),ag=n(L,"LI",{});var s8=s(ag);_me=n(s8,"STRONG",{});var yPe=s(_me);Ulo=r(yPe,"cvt"),yPe.forEach(t),Hlo=r(s8," \u2014 "),eN=n(s8,"A",{href:!0});var xPe=s(eN);Jlo=r(xPe,"CvtConfig"),xPe.forEach(t),Ylo=r(s8," (CvT model)"),s8.forEach(t),Zlo=i(L),ng=n(L,"LI",{});var l8=s(ng);bme=n(l8,"STRONG",{});var $Pe=s(bme);Klo=r($Pe,"data2vec-audio"),$Pe.forEach(t),eio=r(l8," \u2014 "),oN=n(l8,"A",{href:!0});var kPe=s(oN);oio=r(kPe,"Data2VecAudioConfig"),kPe.forEach(t),rio=r(l8," (Data2VecAudio model)"),l8.forEach(t),tio=i(L),sg=n(L,"LI",{});var i8=s(sg);vme=n(i8,"STRONG",{});var SPe=s(vme);aio=r(SPe,"data2vec-text"),SPe.forEach(t),nio=r(i8," \u2014 "),rN=n(i8,"A",{href:!0});var RPe=s(rN);sio=r(RPe,"Data2VecTextConfig"),RPe.forEach(t),lio=r(i8," (Data2VecText model)"),i8.forEach(t),iio=i(L),lg=n(L,"LI",{});var d8=s(lg);Fme=n(d8,"STRONG",{});var PPe=s(Fme);dio=r(PPe,"data2vec-vision"),PPe.forEach(t),cio=r(d8," \u2014 "),tN=n(d8,"A",{href:!0});var BPe=s(tN);mio=r(BPe,"Data2VecVisionConfig"),BPe.forEach(t),fio=r(d8," (Data2VecVision model)"),d8.forEach(t),gio=i(L),ig=n(L,"LI",{});var c8=s(ig);Tme=n(c8,"STRONG",{});var IPe=s(Tme);hio=r(IPe,"deberta"),IPe.forEach(t),uio=r(c8," \u2014 "),aN=n(c8,"A",{href:!0});var NPe=s(aN);pio=r(NPe,"DebertaConfig"),NPe.forEach(t),_io=r(c8," (DeBERTa model)"),c8.forEach(t),bio=i(L),dg=n(L,"LI",{});var m8=s(dg);Mme=n(m8,"STRONG",{});var qPe=s(Mme);vio=r(qPe,"deberta-v2"),qPe.forEach(t),Fio=r(m8," \u2014 "),nN=n(m8,"A",{href:!0});var jPe=s(nN);Tio=r(jPe,"DebertaV2Config"),jPe.forEach(t),Mio=r(m8," (DeBERTa-v2 model)"),m8.forEach(t),Eio=i(L),cg=n(L,"LI",{});var f8=s(cg);Eme=n(f8,"STRONG",{});var DPe=s(Eme);Cio=r(DPe,"decision_transformer"),DPe.forEach(t),wio=r(f8," \u2014 "),sN=n(f8,"A",{href:!0});var GPe=s(sN);Aio=r(GPe,"DecisionTransformerConfig"),GPe.forEach(t),Lio=r(f8," (Decision Transformer model)"),f8.forEach(t),yio=i(L),mg=n(L,"LI",{});var g8=s(mg);Cme=n(g8,"STRONG",{});var OPe=s(Cme);xio=r(OPe,"deformable_detr"),OPe.forEach(t),$io=r(g8," \u2014 "),lN=n(g8,"A",{href:!0});var VPe=s(lN);kio=r(VPe,"DeformableDetrConfig"),VPe.forEach(t),Sio=r(g8," (Deformable DETR model)"),g8.forEach(t),Rio=i(L),fg=n(L,"LI",{});var h8=s(fg);wme=n(h8,"STRONG",{});var XPe=s(wme);Pio=r(XPe,"deit"),XPe.forEach(t),Bio=r(h8," \u2014 "),iN=n(h8,"A",{href:!0});var CCt=s(iN);Iio=r(CCt,"DeiTConfig"),CCt.forEach(t),Nio=r(h8," (DeiT model)"),h8.forEach(t),qio=i(L),gg=n(L,"LI",{});var zPe=s(gg);Ame=n(zPe,"STRONG",{});var wCt=s(Ame);jio=r(wCt,"detr"),wCt.forEach(t),Dio=r(zPe," \u2014 "),dN=n(zPe,"A",{href:!0});var ACt=s(dN);Gio=r(ACt,"DetrConfig"),ACt.forEach(t),Oio=r(zPe," (DETR model)"),zPe.forEach(t),Vio=i(L),hg=n(L,"LI",{});var QPe=s(hg);Lme=n(QPe,"STRONG",{});var LCt=s(Lme);Xio=r(LCt,"distilbert"),LCt.forEach(t),zio=r(QPe," \u2014 "),cN=n(QPe,"A",{href:!0});var yCt=s(cN);Qio=r(yCt,"DistilBertConfig"),yCt.forEach(t),Wio=r(QPe," (DistilBERT model)"),QPe.forEach(t),Uio=i(L),ug=n(L,"LI",{});var WPe=s(ug);yme=n(WPe,"STRONG",{});var xCt=s(yme);Hio=r(xCt,"donut-swin"),xCt.forEach(t),Jio=r(WPe," \u2014 "),mN=n(WPe,"A",{href:!0});var $Ct=s(mN);Yio=r($Ct,"DonutSwinConfig"),$Ct.forEach(t),Zio=r(WPe," (DonutSwin model)"),WPe.forEach(t),Kio=i(L),pg=n(L,"LI",{});var UPe=s(pg);xme=n(UPe,"STRONG",{});var kCt=s(xme);edo=r(kCt,"dpr"),kCt.forEach(t),odo=r(UPe," \u2014 "),fN=n(UPe,"A",{href:!0});var SCt=s(fN);rdo=r(SCt,"DPRConfig"),SCt.forEach(t),tdo=r(UPe," (DPR model)"),UPe.forEach(t),ado=i(L),_g=n(L,"LI",{});var HPe=s(_g);$me=n(HPe,"STRONG",{});var RCt=s($me);ndo=r(RCt,"dpt"),RCt.forEach(t),sdo=r(HPe," \u2014 "),gN=n(HPe,"A",{href:!0});var PCt=s(gN);ldo=r(PCt,"DPTConfig"),PCt.forEach(t),ido=r(HPe," (DPT model)"),HPe.forEach(t),ddo=i(L),bg=n(L,"LI",{});var JPe=s(bg);kme=n(JPe,"STRONG",{});var BCt=s(kme);cdo=r(BCt,"electra"),BCt.forEach(t),mdo=r(JPe," \u2014 "),hN=n(JPe,"A",{href:!0});var ICt=s(hN);fdo=r(ICt,"ElectraConfig"),ICt.forEach(t),gdo=r(JPe," (ELECTRA model)"),JPe.forEach(t),hdo=i(L),vg=n(L,"LI",{});var YPe=s(vg);Sme=n(YPe,"STRONG",{});var NCt=s(Sme);udo=r(NCt,"encoder-decoder"),NCt.forEach(t),pdo=r(YPe," \u2014 "),uN=n(YPe,"A",{href:!0});var qCt=s(uN);_do=r(qCt,"EncoderDecoderConfig"),qCt.forEach(t),bdo=r(YPe," (Encoder decoder model)"),YPe.forEach(t),vdo=i(L),Fg=n(L,"LI",{});var ZPe=s(Fg);Rme=n(ZPe,"STRONG",{});var jCt=s(Rme);Fdo=r(jCt,"ernie"),jCt.forEach(t),Tdo=r(ZPe," \u2014 "),pN=n(ZPe,"A",{href:!0});var DCt=s(pN);Mdo=r(DCt,"ErnieConfig"),DCt.forEach(t),Edo=r(ZPe," (ERNIE model)"),ZPe.forEach(t),Cdo=i(L),Tg=n(L,"LI",{});var KPe=s(Tg);Pme=n(KPe,"STRONG",{});var GCt=s(Pme);wdo=r(GCt,"esm"),GCt.forEach(t),Ado=r(KPe," \u2014 "),_N=n(KPe,"A",{href:!0});var OCt=s(_N);Ldo=r(OCt,"EsmConfig"),OCt.forEach(t),ydo=r(KPe," (ESM model)"),KPe.forEach(t),xdo=i(L),Mg=n(L,"LI",{});var eBe=s(Mg);Bme=n(eBe,"STRONG",{});var VCt=s(Bme);$do=r(VCt,"flaubert"),VCt.forEach(t),kdo=r(eBe," \u2014 "),bN=n(eBe,"A",{href:!0});var XCt=s(bN);Sdo=r(XCt,"FlaubertConfig"),XCt.forEach(t),Rdo=r(eBe," (FlauBERT model)"),eBe.forEach(t),Pdo=i(L),Eg=n(L,"LI",{});var oBe=s(Eg);Ime=n(oBe,"STRONG",{});var zCt=s(Ime);Bdo=r(zCt,"flava"),zCt.forEach(t),Ido=r(oBe," \u2014 "),vN=n(oBe,"A",{href:!0});var QCt=s(vN);Ndo=r(QCt,"FlavaConfig"),QCt.forEach(t),qdo=r(oBe," (FLAVA model)"),oBe.forEach(t),jdo=i(L),Cg=n(L,"LI",{});var rBe=s(Cg);Nme=n(rBe,"STRONG",{});var WCt=s(Nme);Ddo=r(WCt,"fnet"),WCt.forEach(t),Gdo=r(rBe," \u2014 "),FN=n(rBe,"A",{href:!0});var UCt=s(FN);Odo=r(UCt,"FNetConfig"),UCt.forEach(t),Vdo=r(rBe," (FNet model)"),rBe.forEach(t),Xdo=i(L),wg=n(L,"LI",{});var tBe=s(wg);qme=n(tBe,"STRONG",{});var HCt=s(qme);zdo=r(HCt,"fsmt"),HCt.forEach(t),Qdo=r(tBe," \u2014 "),TN=n(tBe,"A",{href:!0});var JCt=s(TN);Wdo=r(JCt,"FSMTConfig"),JCt.forEach(t),Udo=r(tBe," (FairSeq Machine-Translation model)"),tBe.forEach(t),Hdo=i(L),Ag=n(L,"LI",{});var aBe=s(Ag);jme=n(aBe,"STRONG",{});var YCt=s(jme);Jdo=r(YCt,"funnel"),YCt.forEach(t),Ydo=r(aBe," \u2014 "),MN=n(aBe,"A",{href:!0});var ZCt=s(MN);Zdo=r(ZCt,"FunnelConfig"),ZCt.forEach(t),Kdo=r(aBe," (Funnel Transformer model)"),aBe.forEach(t),eco=i(L),Lg=n(L,"LI",{});var nBe=s(Lg);Dme=n(nBe,"STRONG",{});var KCt=s(Dme);oco=r(KCt,"glpn"),KCt.forEach(t),rco=r(nBe," \u2014 "),EN=n(nBe,"A",{href:!0});var e3t=s(EN);tco=r(e3t,"GLPNConfig"),e3t.forEach(t),aco=r(nBe," (GLPN model)"),nBe.forEach(t),nco=i(L),yg=n(L,"LI",{});var sBe=s(yg);Gme=n(sBe,"STRONG",{});var o3t=s(Gme);sco=r(o3t,"gpt2"),o3t.forEach(t),lco=r(sBe," \u2014 "),CN=n(sBe,"A",{href:!0});var r3t=s(CN);ico=r(r3t,"GPT2Config"),r3t.forEach(t),dco=r(sBe," (OpenAI GPT-2 model)"),sBe.forEach(t),cco=i(L),xg=n(L,"LI",{});var lBe=s(xg);Ome=n(lBe,"STRONG",{});var t3t=s(Ome);mco=r(t3t,"gpt_neo"),t3t.forEach(t),fco=r(lBe," \u2014 "),wN=n(lBe,"A",{href:!0});var a3t=s(wN);gco=r(a3t,"GPTNeoConfig"),a3t.forEach(t),hco=r(lBe," (GPT Neo model)"),lBe.forEach(t),uco=i(L),$g=n(L,"LI",{});var iBe=s($g);Vme=n(iBe,"STRONG",{});var n3t=s(Vme);pco=r(n3t,"gpt_neox"),n3t.forEach(t),_co=r(iBe," \u2014 "),AN=n(iBe,"A",{href:!0});var s3t=s(AN);bco=r(s3t,"GPTNeoXConfig"),s3t.forEach(t),vco=r(iBe," (GPT NeoX model)"),iBe.forEach(t),Fco=i(L),kg=n(L,"LI",{});var dBe=s(kg);Xme=n(dBe,"STRONG",{});var l3t=s(Xme);Tco=r(l3t,"gpt_neox_japanese"),l3t.forEach(t),Mco=r(dBe," \u2014 "),LN=n(dBe,"A",{href:!0});var i3t=s(LN);Eco=r(i3t,"GPTNeoXJapaneseConfig"),i3t.forEach(t),Cco=r(dBe," (GPT NeoX Japanese model)"),dBe.forEach(t),wco=i(L),Sg=n(L,"LI",{});var cBe=s(Sg);zme=n(cBe,"STRONG",{});var d3t=s(zme);Aco=r(d3t,"gptj"),d3t.forEach(t),Lco=r(cBe," \u2014 "),yN=n(cBe,"A",{href:!0});var c3t=s(yN);yco=r(c3t,"GPTJConfig"),c3t.forEach(t),xco=r(cBe," (GPT-J model)"),cBe.forEach(t),$co=i(L),Rg=n(L,"LI",{});var mBe=s(Rg);Qme=n(mBe,"STRONG",{});var m3t=s(Qme);kco=r(m3t,"groupvit"),m3t.forEach(t),Sco=r(mBe," \u2014 "),xN=n(mBe,"A",{href:!0});var f3t=s(xN);Rco=r(f3t,"GroupViTConfig"),f3t.forEach(t),Pco=r(mBe," (GroupViT model)"),mBe.forEach(t),Bco=i(L),Pg=n(L,"LI",{});var fBe=s(Pg);Wme=n(fBe,"STRONG",{});var g3t=s(Wme);Ico=r(g3t,"hubert"),g3t.forEach(t),Nco=r(fBe," \u2014 "),$N=n(fBe,"A",{href:!0});var h3t=s($N);qco=r(h3t,"HubertConfig"),h3t.forEach(t),jco=r(fBe," (Hubert model)"),fBe.forEach(t),Dco=i(L),Bg=n(L,"LI",{});var gBe=s(Bg);Ume=n(gBe,"STRONG",{});var u3t=s(Ume);Gco=r(u3t,"ibert"),u3t.forEach(t),Oco=r(gBe," \u2014 "),kN=n(gBe,"A",{href:!0});var p3t=s(kN);Vco=r(p3t,"IBertConfig"),p3t.forEach(t),Xco=r(gBe," (I-BERT model)"),gBe.forEach(t),zco=i(L),Ig=n(L,"LI",{});var hBe=s(Ig);Hme=n(hBe,"STRONG",{});var _3t=s(Hme);Qco=r(_3t,"imagegpt"),_3t.forEach(t),Wco=r(hBe," \u2014 "),SN=n(hBe,"A",{href:!0});var b3t=s(SN);Uco=r(b3t,"ImageGPTConfig"),b3t.forEach(t),Hco=r(hBe," (ImageGPT model)"),hBe.forEach(t),Jco=i(L),Ng=n(L,"LI",{});var uBe=s(Ng);Jme=n(uBe,"STRONG",{});var v3t=s(Jme);Yco=r(v3t,"layoutlm"),v3t.forEach(t),Zco=r(uBe," \u2014 "),RN=n(uBe,"A",{href:!0});var F3t=s(RN);Kco=r(F3t,"LayoutLMConfig"),F3t.forEach(t),emo=r(uBe," (LayoutLM model)"),uBe.forEach(t),omo=i(L),qg=n(L,"LI",{});var pBe=s(qg);Yme=n(pBe,"STRONG",{});var T3t=s(Yme);rmo=r(T3t,"layoutlmv2"),T3t.forEach(t),tmo=r(pBe," \u2014 "),PN=n(pBe,"A",{href:!0});var M3t=s(PN);amo=r(M3t,"LayoutLMv2Config"),M3t.forEach(t),nmo=r(pBe," (LayoutLMv2 model)"),pBe.forEach(t),smo=i(L),jg=n(L,"LI",{});var _Be=s(jg);Zme=n(_Be,"STRONG",{});var E3t=s(Zme);lmo=r(E3t,"layoutlmv3"),E3t.forEach(t),imo=r(_Be," \u2014 "),BN=n(_Be,"A",{href:!0});var C3t=s(BN);dmo=r(C3t,"LayoutLMv3Config"),C3t.forEach(t),cmo=r(_Be," (LayoutLMv3 model)"),_Be.forEach(t),mmo=i(L),Dg=n(L,"LI",{});var bBe=s(Dg);Kme=n(bBe,"STRONG",{});var w3t=s(Kme);fmo=r(w3t,"led"),w3t.forEach(t),gmo=r(bBe," \u2014 "),IN=n(bBe,"A",{href:!0});var A3t=s(IN);hmo=r(A3t,"LEDConfig"),A3t.forEach(t),umo=r(bBe," (LED model)"),bBe.forEach(t),pmo=i(L),Gg=n(L,"LI",{});var vBe=s(Gg);efe=n(vBe,"STRONG",{});var L3t=s(efe);_mo=r(L3t,"levit"),L3t.forEach(t),bmo=r(vBe," \u2014 "),NN=n(vBe,"A",{href:!0});var y3t=s(NN);vmo=r(y3t,"LevitConfig"),y3t.forEach(t),Fmo=r(vBe," (LeViT model)"),vBe.forEach(t),Tmo=i(L),Og=n(L,"LI",{});var FBe=s(Og);ofe=n(FBe,"STRONG",{});var x3t=s(ofe);Mmo=r(x3t,"longformer"),x3t.forEach(t),Emo=r(FBe," \u2014 "),qN=n(FBe,"A",{href:!0});var $3t=s(qN);Cmo=r($3t,"LongformerConfig"),$3t.forEach(t),wmo=r(FBe," (Longformer model)"),FBe.forEach(t),Amo=i(L),Vg=n(L,"LI",{});var TBe=s(Vg);rfe=n(TBe,"STRONG",{});var k3t=s(rfe);Lmo=r(k3t,"longt5"),k3t.forEach(t),ymo=r(TBe," \u2014 "),jN=n(TBe,"A",{href:!0});var S3t=s(jN);xmo=r(S3t,"LongT5Config"),S3t.forEach(t),$mo=r(TBe," (LongT5 model)"),TBe.forEach(t),kmo=i(L),Xg=n(L,"LI",{});var MBe=s(Xg);tfe=n(MBe,"STRONG",{});var R3t=s(tfe);Smo=r(R3t,"luke"),R3t.forEach(t),Rmo=r(MBe," \u2014 "),DN=n(MBe,"A",{href:!0});var P3t=s(DN);Pmo=r(P3t,"LukeConfig"),P3t.forEach(t),Bmo=r(MBe," (LUKE model)"),MBe.forEach(t),Imo=i(L),zg=n(L,"LI",{});var EBe=s(zg);afe=n(EBe,"STRONG",{});var B3t=s(afe);Nmo=r(B3t,"lxmert"),B3t.forEach(t),qmo=r(EBe," \u2014 "),GN=n(EBe,"A",{href:!0});var I3t=s(GN);jmo=r(I3t,"LxmertConfig"),I3t.forEach(t),Dmo=r(EBe," (LXMERT model)"),EBe.forEach(t),Gmo=i(L),Qg=n(L,"LI",{});var CBe=s(Qg);nfe=n(CBe,"STRONG",{});var N3t=s(nfe);Omo=r(N3t,"m2m_100"),N3t.forEach(t),Vmo=r(CBe," \u2014 "),ON=n(CBe,"A",{href:!0});var q3t=s(ON);Xmo=r(q3t,"M2M100Config"),q3t.forEach(t),zmo=r(CBe," (M2M100 model)"),CBe.forEach(t),Qmo=i(L),Wg=n(L,"LI",{});var wBe=s(Wg);sfe=n(wBe,"STRONG",{});var j3t=s(sfe);Wmo=r(j3t,"marian"),j3t.forEach(t),Umo=r(wBe," \u2014 "),VN=n(wBe,"A",{href:!0});var D3t=s(VN);Hmo=r(D3t,"MarianConfig"),D3t.forEach(t),Jmo=r(wBe," (Marian model)"),wBe.forEach(t),Ymo=i(L),Ug=n(L,"LI",{});var ABe=s(Ug);lfe=n(ABe,"STRONG",{});var G3t=s(lfe);Zmo=r(G3t,"markuplm"),G3t.forEach(t),Kmo=r(ABe," \u2014 "),XN=n(ABe,"A",{href:!0});var O3t=s(XN);efo=r(O3t,"MarkupLMConfig"),O3t.forEach(t),ofo=r(ABe," (MarkupLM model)"),ABe.forEach(t),rfo=i(L),Hg=n(L,"LI",{});var LBe=s(Hg);ife=n(LBe,"STRONG",{});var V3t=s(ife);tfo=r(V3t,"maskformer"),V3t.forEach(t),afo=r(LBe," \u2014 "),zN=n(LBe,"A",{href:!0});var X3t=s(zN);nfo=r(X3t,"MaskFormerConfig"),X3t.forEach(t),sfo=r(LBe," (MaskFormer model)"),LBe.forEach(t),lfo=i(L),Jg=n(L,"LI",{});var yBe=s(Jg);dfe=n(yBe,"STRONG",{});var z3t=s(dfe);ifo=r(z3t,"mbart"),z3t.forEach(t),dfo=r(yBe," \u2014 "),QN=n(yBe,"A",{href:!0});var Q3t=s(QN);cfo=r(Q3t,"MBartConfig"),Q3t.forEach(t),mfo=r(yBe," (mBART model)"),yBe.forEach(t),ffo=i(L),Yg=n(L,"LI",{});var xBe=s(Yg);cfe=n(xBe,"STRONG",{});var W3t=s(cfe);gfo=r(W3t,"mctct"),W3t.forEach(t),hfo=r(xBe," \u2014 "),WN=n(xBe,"A",{href:!0});var U3t=s(WN);ufo=r(U3t,"MCTCTConfig"),U3t.forEach(t),pfo=r(xBe," (M-CTC-T model)"),xBe.forEach(t),_fo=i(L),Zg=n(L,"LI",{});var $Be=s(Zg);mfe=n($Be,"STRONG",{});var H3t=s(mfe);bfo=r(H3t,"megatron-bert"),H3t.forEach(t),vfo=r($Be," \u2014 "),UN=n($Be,"A",{href:!0});var J3t=s(UN);Ffo=r(J3t,"MegatronBertConfig"),J3t.forEach(t),Tfo=r($Be," (Megatron-BERT model)"),$Be.forEach(t),Mfo=i(L),Kg=n(L,"LI",{});var kBe=s(Kg);ffe=n(kBe,"STRONG",{});var Y3t=s(ffe);Efo=r(Y3t,"mobilebert"),Y3t.forEach(t),Cfo=r(kBe," \u2014 "),HN=n(kBe,"A",{href:!0});var Z3t=s(HN);wfo=r(Z3t,"MobileBertConfig"),Z3t.forEach(t),Afo=r(kBe," (MobileBERT model)"),kBe.forEach(t),Lfo=i(L),eh=n(L,"LI",{});var SBe=s(eh);gfe=n(SBe,"STRONG",{});var K3t=s(gfe);yfo=r(K3t,"mobilevit"),K3t.forEach(t),xfo=r(SBe," \u2014 "),JN=n(SBe,"A",{href:!0});var e5t=s(JN);$fo=r(e5t,"MobileViTConfig"),e5t.forEach(t),kfo=r(SBe," (MobileViT model)"),SBe.forEach(t),Sfo=i(L),oh=n(L,"LI",{});var RBe=s(oh);hfe=n(RBe,"STRONG",{});var o5t=s(hfe);Rfo=r(o5t,"mpnet"),o5t.forEach(t),Pfo=r(RBe," \u2014 "),YN=n(RBe,"A",{href:!0});var r5t=s(YN);Bfo=r(r5t,"MPNetConfig"),r5t.forEach(t),Ifo=r(RBe," (MPNet model)"),RBe.forEach(t),Nfo=i(L),rh=n(L,"LI",{});var PBe=s(rh);ufe=n(PBe,"STRONG",{});var t5t=s(ufe);qfo=r(t5t,"mt5"),t5t.forEach(t),jfo=r(PBe," \u2014 "),ZN=n(PBe,"A",{href:!0});var a5t=s(ZN);Dfo=r(a5t,"MT5Config"),a5t.forEach(t),Gfo=r(PBe," (MT5 model)"),PBe.forEach(t),Ofo=i(L),th=n(L,"LI",{});var BBe=s(th);pfe=n(BBe,"STRONG",{});var n5t=s(pfe);Vfo=r(n5t,"mvp"),n5t.forEach(t),Xfo=r(BBe," \u2014 "),KN=n(BBe,"A",{href:!0});var s5t=s(KN);zfo=r(s5t,"MvpConfig"),s5t.forEach(t),Qfo=r(BBe," (MVP model)"),BBe.forEach(t),Wfo=i(L),ah=n(L,"LI",{});var IBe=s(ah);_fe=n(IBe,"STRONG",{});var l5t=s(_fe);Ufo=r(l5t,"nezha"),l5t.forEach(t),Hfo=r(IBe," \u2014 "),eq=n(IBe,"A",{href:!0});var i5t=s(eq);Jfo=r(i5t,"NezhaConfig"),i5t.forEach(t),Yfo=r(IBe," (Nezha model)"),IBe.forEach(t),Zfo=i(L),nh=n(L,"LI",{});var NBe=s(nh);bfe=n(NBe,"STRONG",{});var d5t=s(bfe);Kfo=r(d5t,"nystromformer"),d5t.forEach(t),ego=r(NBe," \u2014 "),oq=n(NBe,"A",{href:!0});var c5t=s(oq);ogo=r(c5t,"NystromformerConfig"),c5t.forEach(t),rgo=r(NBe," (Nystr\xF6mformer model)"),NBe.forEach(t),tgo=i(L),sh=n(L,"LI",{});var qBe=s(sh);vfe=n(qBe,"STRONG",{});var m5t=s(vfe);ago=r(m5t,"openai-gpt"),m5t.forEach(t),ngo=r(qBe," \u2014 "),rq=n(qBe,"A",{href:!0});var f5t=s(rq);sgo=r(f5t,"OpenAIGPTConfig"),f5t.forEach(t),lgo=r(qBe," (OpenAI GPT model)"),qBe.forEach(t),igo=i(L),lh=n(L,"LI",{});var jBe=s(lh);Ffe=n(jBe,"STRONG",{});var g5t=s(Ffe);dgo=r(g5t,"opt"),g5t.forEach(t),cgo=r(jBe," \u2014 "),tq=n(jBe,"A",{href:!0});var h5t=s(tq);mgo=r(h5t,"OPTConfig"),h5t.forEach(t),fgo=r(jBe," (OPT model)"),jBe.forEach(t),ggo=i(L),ih=n(L,"LI",{});var DBe=s(ih);Tfe=n(DBe,"STRONG",{});var u5t=s(Tfe);hgo=r(u5t,"owlvit"),u5t.forEach(t),ugo=r(DBe," \u2014 "),aq=n(DBe,"A",{href:!0});var p5t=s(aq);pgo=r(p5t,"OwlViTConfig"),p5t.forEach(t),_go=r(DBe," (OWL-ViT model)"),DBe.forEach(t),bgo=i(L),dh=n(L,"LI",{});var GBe=s(dh);Mfe=n(GBe,"STRONG",{});var _5t=s(Mfe);vgo=r(_5t,"pegasus"),_5t.forEach(t),Fgo=r(GBe," \u2014 "),nq=n(GBe,"A",{href:!0});var b5t=s(nq);Tgo=r(b5t,"PegasusConfig"),b5t.forEach(t),Mgo=r(GBe," (Pegasus model)"),GBe.forEach(t),Ego=i(L),ch=n(L,"LI",{});var OBe=s(ch);Efe=n(OBe,"STRONG",{});var v5t=s(Efe);Cgo=r(v5t,"pegasus_x"),v5t.forEach(t),wgo=r(OBe," \u2014 "),sq=n(OBe,"A",{href:!0});var F5t=s(sq);Ago=r(F5t,"PegasusXConfig"),F5t.forEach(t),Lgo=r(OBe," (PEGASUS-X model)"),OBe.forEach(t),ygo=i(L),mh=n(L,"LI",{});var VBe=s(mh);Cfe=n(VBe,"STRONG",{});var T5t=s(Cfe);xgo=r(T5t,"perceiver"),T5t.forEach(t),$go=r(VBe," \u2014 "),lq=n(VBe,"A",{href:!0});var M5t=s(lq);kgo=r(M5t,"PerceiverConfig"),M5t.forEach(t),Sgo=r(VBe," (Perceiver model)"),VBe.forEach(t),Rgo=i(L),fh=n(L,"LI",{});var XBe=s(fh);wfe=n(XBe,"STRONG",{});var E5t=s(wfe);Pgo=r(E5t,"plbart"),E5t.forEach(t),Bgo=r(XBe," \u2014 "),iq=n(XBe,"A",{href:!0});var C5t=s(iq);Igo=r(C5t,"PLBartConfig"),C5t.forEach(t),Ngo=r(XBe," (PLBart model)"),XBe.forEach(t),qgo=i(L),gh=n(L,"LI",{});var zBe=s(gh);Afe=n(zBe,"STRONG",{});var w5t=s(Afe);jgo=r(w5t,"poolformer"),w5t.forEach(t),Dgo=r(zBe," \u2014 "),dq=n(zBe,"A",{href:!0});var A5t=s(dq);Ggo=r(A5t,"PoolFormerConfig"),A5t.forEach(t),Ogo=r(zBe," (PoolFormer model)"),zBe.forEach(t),Vgo=i(L),hh=n(L,"LI",{});var QBe=s(hh);Lfe=n(QBe,"STRONG",{});var L5t=s(Lfe);Xgo=r(L5t,"prophetnet"),L5t.forEach(t),zgo=r(QBe," \u2014 "),cq=n(QBe,"A",{href:!0});var y5t=s(cq);Qgo=r(y5t,"ProphetNetConfig"),y5t.forEach(t),Wgo=r(QBe," (ProphetNet model)"),QBe.forEach(t),Ugo=i(L),uh=n(L,"LI",{});var WBe=s(uh);yfe=n(WBe,"STRONG",{});var x5t=s(yfe);Hgo=r(x5t,"qdqbert"),x5t.forEach(t),Jgo=r(WBe," \u2014 "),mq=n(WBe,"A",{href:!0});var $5t=s(mq);Ygo=r($5t,"QDQBertConfig"),$5t.forEach(t),Zgo=r(WBe," (QDQBert model)"),WBe.forEach(t),Kgo=i(L),ph=n(L,"LI",{});var UBe=s(ph);xfe=n(UBe,"STRONG",{});var k5t=s(xfe);eho=r(k5t,"rag"),k5t.forEach(t),oho=r(UBe," \u2014 "),fq=n(UBe,"A",{href:!0});var S5t=s(fq);rho=r(S5t,"RagConfig"),S5t.forEach(t),tho=r(UBe," (RAG model)"),UBe.forEach(t),aho=i(L),_h=n(L,"LI",{});var HBe=s(_h);$fe=n(HBe,"STRONG",{});var R5t=s($fe);nho=r(R5t,"realm"),R5t.forEach(t),sho=r(HBe," \u2014 "),gq=n(HBe,"A",{href:!0});var P5t=s(gq);lho=r(P5t,"RealmConfig"),P5t.forEach(t),iho=r(HBe," (REALM model)"),HBe.forEach(t),dho=i(L),bh=n(L,"LI",{});var JBe=s(bh);kfe=n(JBe,"STRONG",{});var B5t=s(kfe);cho=r(B5t,"reformer"),B5t.forEach(t),mho=r(JBe," \u2014 "),hq=n(JBe,"A",{href:!0});var I5t=s(hq);fho=r(I5t,"ReformerConfig"),I5t.forEach(t),gho=r(JBe," (Reformer model)"),JBe.forEach(t),hho=i(L),vh=n(L,"LI",{});var YBe=s(vh);Sfe=n(YBe,"STRONG",{});var N5t=s(Sfe);uho=r(N5t,"regnet"),N5t.forEach(t),pho=r(YBe," \u2014 "),uq=n(YBe,"A",{href:!0});var q5t=s(uq);_ho=r(q5t,"RegNetConfig"),q5t.forEach(t),bho=r(YBe," (RegNet model)"),YBe.forEach(t),vho=i(L),Fh=n(L,"LI",{});var ZBe=s(Fh);Rfe=n(ZBe,"STRONG",{});var j5t=s(Rfe);Fho=r(j5t,"rembert"),j5t.forEach(t),Tho=r(ZBe," \u2014 "),pq=n(ZBe,"A",{href:!0});var D5t=s(pq);Mho=r(D5t,"RemBertConfig"),D5t.forEach(t),Eho=r(ZBe," (RemBERT model)"),ZBe.forEach(t),Cho=i(L),Th=n(L,"LI",{});var KBe=s(Th);Pfe=n(KBe,"STRONG",{});var G5t=s(Pfe);who=r(G5t,"resnet"),G5t.forEach(t),Aho=r(KBe," \u2014 "),_q=n(KBe,"A",{href:!0});var O5t=s(_q);Lho=r(O5t,"ResNetConfig"),O5t.forEach(t),yho=r(KBe," (ResNet model)"),KBe.forEach(t),xho=i(L),Mh=n(L,"LI",{});var eIe=s(Mh);Bfe=n(eIe,"STRONG",{});var V5t=s(Bfe);$ho=r(V5t,"retribert"),V5t.forEach(t),kho=r(eIe," \u2014 "),bq=n(eIe,"A",{href:!0});var X5t=s(bq);Sho=r(X5t,"RetriBertConfig"),X5t.forEach(t),Rho=r(eIe," (RetriBERT model)"),eIe.forEach(t),Pho=i(L),Eh=n(L,"LI",{});var oIe=s(Eh);Ife=n(oIe,"STRONG",{});var z5t=s(Ife);Bho=r(z5t,"roberta"),z5t.forEach(t),Iho=r(oIe," \u2014 "),vq=n(oIe,"A",{href:!0});var Q5t=s(vq);Nho=r(Q5t,"RobertaConfig"),Q5t.forEach(t),qho=r(oIe," (RoBERTa model)"),oIe.forEach(t),jho=i(L),Ch=n(L,"LI",{});var rIe=s(Ch);Nfe=n(rIe,"STRONG",{});var W5t=s(Nfe);Dho=r(W5t,"roformer"),W5t.forEach(t),Gho=r(rIe," \u2014 "),Fq=n(rIe,"A",{href:!0});var U5t=s(Fq);Oho=r(U5t,"RoFormerConfig"),U5t.forEach(t),Vho=r(rIe," (RoFormer model)"),rIe.forEach(t),Xho=i(L),wh=n(L,"LI",{});var tIe=s(wh);qfe=n(tIe,"STRONG",{});var H5t=s(qfe);zho=r(H5t,"segformer"),H5t.forEach(t),Qho=r(tIe," \u2014 "),Tq=n(tIe,"A",{href:!0});var J5t=s(Tq);Who=r(J5t,"SegformerConfig"),J5t.forEach(t),Uho=r(tIe," (SegFormer model)"),tIe.forEach(t),Hho=i(L),Ah=n(L,"LI",{});var aIe=s(Ah);jfe=n(aIe,"STRONG",{});var Y5t=s(jfe);Jho=r(Y5t,"sew"),Y5t.forEach(t),Yho=r(aIe," \u2014 "),Mq=n(aIe,"A",{href:!0});var Z5t=s(Mq);Zho=r(Z5t,"SEWConfig"),Z5t.forEach(t),Kho=r(aIe," (SEW model)"),aIe.forEach(t),euo=i(L),Lh=n(L,"LI",{});var nIe=s(Lh);Dfe=n(nIe,"STRONG",{});var K5t=s(Dfe);ouo=r(K5t,"sew-d"),K5t.forEach(t),ruo=r(nIe," \u2014 "),Eq=n(nIe,"A",{href:!0});var e0t=s(Eq);tuo=r(e0t,"SEWDConfig"),e0t.forEach(t),auo=r(nIe," (SEW-D model)"),nIe.forEach(t),nuo=i(L),yh=n(L,"LI",{});var sIe=s(yh);Gfe=n(sIe,"STRONG",{});var o0t=s(Gfe);suo=r(o0t,"speech-encoder-decoder"),o0t.forEach(t),luo=r(sIe," \u2014 "),Cq=n(sIe,"A",{href:!0});var r0t=s(Cq);iuo=r(r0t,"SpeechEncoderDecoderConfig"),r0t.forEach(t),duo=r(sIe," (Speech Encoder decoder model)"),sIe.forEach(t),cuo=i(L),xh=n(L,"LI",{});var lIe=s(xh);Ofe=n(lIe,"STRONG",{});var t0t=s(Ofe);muo=r(t0t,"speech_to_text"),t0t.forEach(t),fuo=r(lIe," \u2014 "),wq=n(lIe,"A",{href:!0});var a0t=s(wq);guo=r(a0t,"Speech2TextConfig"),a0t.forEach(t),huo=r(lIe," (Speech2Text model)"),lIe.forEach(t),uuo=i(L),$h=n(L,"LI",{});var iIe=s($h);Vfe=n(iIe,"STRONG",{});var n0t=s(Vfe);puo=r(n0t,"speech_to_text_2"),n0t.forEach(t),_uo=r(iIe," \u2014 "),Aq=n(iIe,"A",{href:!0});var s0t=s(Aq);buo=r(s0t,"Speech2Text2Config"),s0t.forEach(t),vuo=r(iIe," (Speech2Text2 model)"),iIe.forEach(t),Fuo=i(L),kh=n(L,"LI",{});var dIe=s(kh);Xfe=n(dIe,"STRONG",{});var l0t=s(Xfe);Tuo=r(l0t,"splinter"),l0t.forEach(t),Muo=r(dIe," \u2014 "),Lq=n(dIe,"A",{href:!0});var i0t=s(Lq);Euo=r(i0t,"SplinterConfig"),i0t.forEach(t),Cuo=r(dIe," (Splinter model)"),dIe.forEach(t),wuo=i(L),Sh=n(L,"LI",{});var cIe=s(Sh);zfe=n(cIe,"STRONG",{});var d0t=s(zfe);Auo=r(d0t,"squeezebert"),d0t.forEach(t),Luo=r(cIe," \u2014 "),yq=n(cIe,"A",{href:!0});var c0t=s(yq);yuo=r(c0t,"SqueezeBertConfig"),c0t.forEach(t),xuo=r(cIe," (SqueezeBERT model)"),cIe.forEach(t),$uo=i(L),Rh=n(L,"LI",{});var mIe=s(Rh);Qfe=n(mIe,"STRONG",{});var m0t=s(Qfe);kuo=r(m0t,"swin"),m0t.forEach(t),Suo=r(mIe," \u2014 "),xq=n(mIe,"A",{href:!0});var f0t=s(xq);Ruo=r(f0t,"SwinConfig"),f0t.forEach(t),Puo=r(mIe," (Swin Transformer model)"),mIe.forEach(t),Buo=i(L),Ph=n(L,"LI",{});var fIe=s(Ph);Wfe=n(fIe,"STRONG",{});var g0t=s(Wfe);Iuo=r(g0t,"swinv2"),g0t.forEach(t),Nuo=r(fIe," \u2014 "),$q=n(fIe,"A",{href:!0});var h0t=s($q);quo=r(h0t,"Swinv2Config"),h0t.forEach(t),juo=r(fIe," (Swin Transformer V2 model)"),fIe.forEach(t),Duo=i(L),Bh=n(L,"LI",{});var gIe=s(Bh);Ufe=n(gIe,"STRONG",{});var u0t=s(Ufe);Guo=r(u0t,"t5"),u0t.forEach(t),Ouo=r(gIe," \u2014 "),kq=n(gIe,"A",{href:!0});var p0t=s(kq);Vuo=r(p0t,"T5Config"),p0t.forEach(t),Xuo=r(gIe," (T5 model)"),gIe.forEach(t),zuo=i(L),Ih=n(L,"LI",{});var hIe=s(Ih);Hfe=n(hIe,"STRONG",{});var _0t=s(Hfe);Quo=r(_0t,"tapas"),_0t.forEach(t),Wuo=r(hIe," \u2014 "),Sq=n(hIe,"A",{href:!0});var b0t=s(Sq);Uuo=r(b0t,"TapasConfig"),b0t.forEach(t),Huo=r(hIe," (TAPAS model)"),hIe.forEach(t),Juo=i(L),Nh=n(L,"LI",{});var uIe=s(Nh);Jfe=n(uIe,"STRONG",{});var v0t=s(Jfe);Yuo=r(v0t,"time_series_transformer"),v0t.forEach(t),Zuo=r(uIe," \u2014 "),Rq=n(uIe,"A",{href:!0});var F0t=s(Rq);Kuo=r(F0t,"TimeSeriesTransformerConfig"),F0t.forEach(t),epo=r(uIe," (Time Series Transformer model)"),uIe.forEach(t),opo=i(L),qh=n(L,"LI",{});var pIe=s(qh);Yfe=n(pIe,"STRONG",{});var T0t=s(Yfe);rpo=r(T0t,"trajectory_transformer"),T0t.forEach(t),tpo=r(pIe," \u2014 "),Pq=n(pIe,"A",{href:!0});var M0t=s(Pq);apo=r(M0t,"TrajectoryTransformerConfig"),M0t.forEach(t),npo=r(pIe," (Trajectory Transformer model)"),pIe.forEach(t),spo=i(L),jh=n(L,"LI",{});var _Ie=s(jh);Zfe=n(_Ie,"STRONG",{});var E0t=s(Zfe);lpo=r(E0t,"transfo-xl"),E0t.forEach(t),ipo=r(_Ie," \u2014 "),Bq=n(_Ie,"A",{href:!0});var C0t=s(Bq);dpo=r(C0t,"TransfoXLConfig"),C0t.forEach(t),cpo=r(_Ie," (Transformer-XL model)"),_Ie.forEach(t),mpo=i(L),Dh=n(L,"LI",{});var bIe=s(Dh);Kfe=n(bIe,"STRONG",{});var w0t=s(Kfe);fpo=r(w0t,"trocr"),w0t.forEach(t),gpo=r(bIe," \u2014 "),Iq=n(bIe,"A",{href:!0});var A0t=s(Iq);hpo=r(A0t,"TrOCRConfig"),A0t.forEach(t),upo=r(bIe," (TrOCR model)"),bIe.forEach(t),ppo=i(L),Gh=n(L,"LI",{});var vIe=s(Gh);ege=n(vIe,"STRONG",{});var L0t=s(ege);_po=r(L0t,"unispeech"),L0t.forEach(t),bpo=r(vIe," \u2014 "),Nq=n(vIe,"A",{href:!0});var y0t=s(Nq);vpo=r(y0t,"UniSpeechConfig"),y0t.forEach(t),Fpo=r(vIe," (UniSpeech model)"),vIe.forEach(t),Tpo=i(L),Oh=n(L,"LI",{});var FIe=s(Oh);oge=n(FIe,"STRONG",{});var x0t=s(oge);Mpo=r(x0t,"unispeech-sat"),x0t.forEach(t),Epo=r(FIe," \u2014 "),qq=n(FIe,"A",{href:!0});var $0t=s(qq);Cpo=r($0t,"UniSpeechSatConfig"),$0t.forEach(t),wpo=r(FIe," (UniSpeechSat model)"),FIe.forEach(t),Apo=i(L),Vh=n(L,"LI",{});var TIe=s(Vh);rge=n(TIe,"STRONG",{});var k0t=s(rge);Lpo=r(k0t,"van"),k0t.forEach(t),ypo=r(TIe," \u2014 "),jq=n(TIe,"A",{href:!0});var S0t=s(jq);xpo=r(S0t,"VanConfig"),S0t.forEach(t),$po=r(TIe," (VAN model)"),TIe.forEach(t),kpo=i(L),Xh=n(L,"LI",{});var MIe=s(Xh);tge=n(MIe,"STRONG",{});var R0t=s(tge);Spo=r(R0t,"videomae"),R0t.forEach(t),Rpo=r(MIe," \u2014 "),Dq=n(MIe,"A",{href:!0});var P0t=s(Dq);Ppo=r(P0t,"VideoMAEConfig"),P0t.forEach(t),Bpo=r(MIe," (VideoMAE model)"),MIe.forEach(t),Ipo=i(L),zh=n(L,"LI",{});var EIe=s(zh);age=n(EIe,"STRONG",{});var B0t=s(age);Npo=r(B0t,"vilt"),B0t.forEach(t),qpo=r(EIe," \u2014 "),Gq=n(EIe,"A",{href:!0});var I0t=s(Gq);jpo=r(I0t,"ViltConfig"),I0t.forEach(t),Dpo=r(EIe," (ViLT model)"),EIe.forEach(t),Gpo=i(L),Qh=n(L,"LI",{});var CIe=s(Qh);nge=n(CIe,"STRONG",{});var N0t=s(nge);Opo=r(N0t,"vision-encoder-decoder"),N0t.forEach(t),Vpo=r(CIe," \u2014 "),Oq=n(CIe,"A",{href:!0});var q0t=s(Oq);Xpo=r(q0t,"VisionEncoderDecoderConfig"),q0t.forEach(t),zpo=r(CIe," (Vision Encoder decoder model)"),CIe.forEach(t),Qpo=i(L),Wh=n(L,"LI",{});var wIe=s(Wh);sge=n(wIe,"STRONG",{});var j0t=s(sge);Wpo=r(j0t,"vision-text-dual-encoder"),j0t.forEach(t),Upo=r(wIe," \u2014 "),Vq=n(wIe,"A",{href:!0});var D0t=s(Vq);Hpo=r(D0t,"VisionTextDualEncoderConfig"),D0t.forEach(t),Jpo=r(wIe," (VisionTextDualEncoder model)"),wIe.forEach(t),Ypo=i(L),Uh=n(L,"LI",{});var AIe=s(Uh);lge=n(AIe,"STRONG",{});var G0t=s(lge);Zpo=r(G0t,"visual_bert"),G0t.forEach(t),Kpo=r(AIe," \u2014 "),Xq=n(AIe,"A",{href:!0});var O0t=s(Xq);e_o=r(O0t,"VisualBertConfig"),O0t.forEach(t),o_o=r(AIe," (VisualBERT model)"),AIe.forEach(t),r_o=i(L),Hh=n(L,"LI",{});var LIe=s(Hh);ige=n(LIe,"STRONG",{});var V0t=s(ige);t_o=r(V0t,"vit"),V0t.forEach(t),a_o=r(LIe," \u2014 "),zq=n(LIe,"A",{href:!0});var X0t=s(zq);n_o=r(X0t,"ViTConfig"),X0t.forEach(t),s_o=r(LIe," (ViT model)"),LIe.forEach(t),l_o=i(L),Jh=n(L,"LI",{});var yIe=s(Jh);dge=n(yIe,"STRONG",{});var z0t=s(dge);i_o=r(z0t,"vit_mae"),z0t.forEach(t),d_o=r(yIe," \u2014 "),Qq=n(yIe,"A",{href:!0});var Q0t=s(Qq);c_o=r(Q0t,"ViTMAEConfig"),Q0t.forEach(t),m_o=r(yIe," (ViTMAE model)"),yIe.forEach(t),f_o=i(L),Yh=n(L,"LI",{});var xIe=s(Yh);cge=n(xIe,"STRONG",{});var W0t=s(cge);g_o=r(W0t,"vit_msn"),W0t.forEach(t),h_o=r(xIe," \u2014 "),Wq=n(xIe,"A",{href:!0});var U0t=s(Wq);u_o=r(U0t,"ViTMSNConfig"),U0t.forEach(t),p_o=r(xIe," (ViTMSN model)"),xIe.forEach(t),__o=i(L),Zh=n(L,"LI",{});var $Ie=s(Zh);mge=n($Ie,"STRONG",{});var H0t=s(mge);b_o=r(H0t,"wav2vec2"),H0t.forEach(t),v_o=r($Ie," \u2014 "),Uq=n($Ie,"A",{href:!0});var J0t=s(Uq);F_o=r(J0t,"Wav2Vec2Config"),J0t.forEach(t),T_o=r($Ie," (Wav2Vec2 model)"),$Ie.forEach(t),M_o=i(L),Kh=n(L,"LI",{});var kIe=s(Kh);fge=n(kIe,"STRONG",{});var Y0t=s(fge);E_o=r(Y0t,"wav2vec2-conformer"),Y0t.forEach(t),C_o=r(kIe," \u2014 "),Hq=n(kIe,"A",{href:!0});var Z0t=s(Hq);w_o=r(Z0t,"Wav2Vec2ConformerConfig"),Z0t.forEach(t),A_o=r(kIe," (Wav2Vec2-Conformer model)"),kIe.forEach(t),L_o=i(L),eu=n(L,"LI",{});var SIe=s(eu);gge=n(SIe,"STRONG",{});var K0t=s(gge);y_o=r(K0t,"wavlm"),K0t.forEach(t),x_o=r(SIe," \u2014 "),Jq=n(SIe,"A",{href:!0});var ewt=s(Jq);$_o=r(ewt,"WavLMConfig"),ewt.forEach(t),k_o=r(SIe," (WavLM model)"),SIe.forEach(t),S_o=i(L),ou=n(L,"LI",{});var RIe=s(ou);hge=n(RIe,"STRONG",{});var owt=s(hge);R_o=r(owt,"whisper"),owt.forEach(t),P_o=r(RIe," \u2014 "),Yq=n(RIe,"A",{href:!0});var rwt=s(Yq);B_o=r(rwt,"WhisperConfig"),rwt.forEach(t),I_o=r(RIe," (Whisper model)"),RIe.forEach(t),N_o=i(L),ru=n(L,"LI",{});var PIe=s(ru);uge=n(PIe,"STRONG",{});var twt=s(uge);q_o=r(twt,"xclip"),twt.forEach(t),j_o=r(PIe," \u2014 "),Zq=n(PIe,"A",{href:!0});var awt=s(Zq);D_o=r(awt,"XCLIPConfig"),awt.forEach(t),G_o=r(PIe," (X-CLIP model)"),PIe.forEach(t),O_o=i(L),tu=n(L,"LI",{});var BIe=s(tu);pge=n(BIe,"STRONG",{});var nwt=s(pge);V_o=r(nwt,"xglm"),nwt.forEach(t),X_o=r(BIe," \u2014 "),Kq=n(BIe,"A",{href:!0});var swt=s(Kq);z_o=r(swt,"XGLMConfig"),swt.forEach(t),Q_o=r(BIe," (XGLM model)"),BIe.forEach(t),W_o=i(L),au=n(L,"LI",{});var IIe=s(au);_ge=n(IIe,"STRONG",{});var lwt=s(_ge);U_o=r(lwt,"xlm"),lwt.forEach(t),H_o=r(IIe," \u2014 "),ej=n(IIe,"A",{href:!0});var iwt=s(ej);J_o=r(iwt,"XLMConfig"),iwt.forEach(t),Y_o=r(IIe," (XLM model)"),IIe.forEach(t),Z_o=i(L),nu=n(L,"LI",{});var NIe=s(nu);bge=n(NIe,"STRONG",{});var dwt=s(bge);K_o=r(dwt,"xlm-prophetnet"),dwt.forEach(t),e1o=r(NIe," \u2014 "),oj=n(NIe,"A",{href:!0});var cwt=s(oj);o1o=r(cwt,"XLMProphetNetConfig"),cwt.forEach(t),r1o=r(NIe," (XLM-ProphetNet model)"),NIe.forEach(t),t1o=i(L),su=n(L,"LI",{});var qIe=s(su);vge=n(qIe,"STRONG",{});var mwt=s(vge);a1o=r(mwt,"xlm-roberta"),mwt.forEach(t),n1o=r(qIe," \u2014 "),rj=n(qIe,"A",{href:!0});var fwt=s(rj);s1o=r(fwt,"XLMRobertaConfig"),fwt.forEach(t),l1o=r(qIe," (XLM-RoBERTa model)"),qIe.forEach(t),i1o=i(L),lu=n(L,"LI",{});var jIe=s(lu);Fge=n(jIe,"STRONG",{});var gwt=s(Fge);d1o=r(gwt,"xlm-roberta-xl"),gwt.forEach(t),c1o=r(jIe," \u2014 "),tj=n(jIe,"A",{href:!0});var hwt=s(tj);m1o=r(hwt,"XLMRobertaXLConfig"),hwt.forEach(t),f1o=r(jIe," (XLM-RoBERTa-XL model)"),jIe.forEach(t),g1o=i(L),iu=n(L,"LI",{});var DIe=s(iu);Tge=n(DIe,"STRONG",{});var uwt=s(Tge);h1o=r(uwt,"xlnet"),uwt.forEach(t),u1o=r(DIe," \u2014 "),aj=n(DIe,"A",{href:!0});var pwt=s(aj);p1o=r(pwt,"XLNetConfig"),pwt.forEach(t),_1o=r(DIe," (XLNet model)"),DIe.forEach(t),b1o=i(L),du=n(L,"LI",{});var GIe=s(du);Mge=n(GIe,"STRONG",{});var _wt=s(Mge);v1o=r(_wt,"yolos"),_wt.forEach(t),F1o=r(GIe," \u2014 "),nj=n(GIe,"A",{href:!0});var bwt=s(nj);T1o=r(bwt,"YolosConfig"),bwt.forEach(t),M1o=r(GIe," (YOLOS model)"),GIe.forEach(t),E1o=i(L),cu=n(L,"LI",{});var OIe=s(cu);Ege=n(OIe,"STRONG",{});var vwt=s(Ege);C1o=r(vwt,"yoso"),vwt.forEach(t),w1o=r(OIe," \u2014 "),sj=n(OIe,"A",{href:!0});var Fwt=s(sj);A1o=r(Fwt,"YosoConfig"),Fwt.forEach(t),L1o=r(OIe," (YOSO model)"),OIe.forEach(t),L.forEach(t),y1o=i(_t),T(mu.$$.fragment,_t),_t.forEach(t),x1o=i(pt),fu=n(pt,"DIV",{class:!0});var Fto=s(fu);T(Sx.$$.fragment,Fto),$1o=i(Fto),Cge=n(Fto,"P",{});var Twt=s(Cge);k1o=r(Twt,"Register a new configuration for this class."),Twt.forEach(t),Fto.forEach(t),pt.forEach(t),moo=i(m),vd=n(m,"H2",{class:!0});var Tto=s(vd);gu=n(Tto,"A",{id:!0,class:!0,href:!0});var Mwt=s(gu);wge=n(Mwt,"SPAN",{});var Ewt=s(wge);T(Rx.$$.fragment,Ewt),Ewt.forEach(t),Mwt.forEach(t),S1o=i(Tto),Age=n(Tto,"SPAN",{});var Cwt=s(Age);R1o=r(Cwt,"AutoTokenizer"),Cwt.forEach(t),Tto.forEach(t),foo=i(m),So=n(m,"DIV",{class:!0});var Ll=s(So);T(Px.$$.fragment,Ll),P1o=i(Ll),Bx=n(Ll,"P",{});var Mto=s(Bx);B1o=r(Mto,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lj=n(Mto,"A",{href:!0});var wwt=s(lj);I1o=r(wwt,"AutoTokenizer.from_pretrained()"),wwt.forEach(t),N1o=r(Mto," class method."),Mto.forEach(t),q1o=i(Ll),Ix=n(Ll,"P",{});var Eto=s(Ix);j1o=r(Eto,"This class cannot be instantiated directly using "),Lge=n(Eto,"CODE",{});var Awt=s(Lge);D1o=r(Awt,"__init__()"),Awt.forEach(t),G1o=r(Eto," (throws an error)."),Eto.forEach(t),O1o=i(Ll),Nr=n(Ll,"DIV",{class:!0});var yl=s(Nr);T(Nx.$$.fragment,yl),V1o=i(yl),yge=n(yl,"P",{});var Lwt=s(yge);X1o=r(Lwt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Lwt.forEach(t),z1o=i(yl),Za=n(yl,"P",{});var u8=s(Za);Q1o=r(u8,"The tokenizer class to instantiate is selected based on the "),xge=n(u8,"CODE",{});var ywt=s(xge);W1o=r(ywt,"model_type"),ywt.forEach(t),U1o=r(u8,` property of the config object (either
passed as an argument or loaded from `),$ge=n(u8,"CODE",{});var xwt=s($ge);H1o=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),J1o=r(u8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(u8,"CODE",{});var $wt=s(kge);Y1o=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),Z1o=r(u8,":"),u8.forEach(t),K1o=i(yl),k=n(yl,"UL",{});var S=s(k);cs=n(S,"LI",{});var fB=s(cs);Sge=n(fB,"STRONG",{});var kwt=s(Sge);ebo=r(kwt,"albert"),kwt.forEach(t),obo=r(fB," \u2014 "),ij=n(fB,"A",{href:!0});var Swt=s(ij);rbo=r(Swt,"AlbertTokenizer"),Swt.forEach(t),tbo=r(fB," or "),dj=n(fB,"A",{href:!0});var Rwt=s(dj);abo=r(Rwt,"AlbertTokenizerFast"),Rwt.forEach(t),nbo=r(fB," (ALBERT model)"),fB.forEach(t),sbo=i(S),ms=n(S,"LI",{});var gB=s(ms);Rge=n(gB,"STRONG",{});var Pwt=s(Rge);lbo=r(Pwt,"bart"),Pwt.forEach(t),ibo=r(gB," \u2014 "),cj=n(gB,"A",{href:!0});var Bwt=s(cj);dbo=r(Bwt,"BartTokenizer"),Bwt.forEach(t),cbo=r(gB," or "),mj=n(gB,"A",{href:!0});var Iwt=s(mj);mbo=r(Iwt,"BartTokenizerFast"),Iwt.forEach(t),fbo=r(gB," (BART model)"),gB.forEach(t),gbo=i(S),fs=n(S,"LI",{});var hB=s(fs);Pge=n(hB,"STRONG",{});var Nwt=s(Pge);hbo=r(Nwt,"barthez"),Nwt.forEach(t),ubo=r(hB," \u2014 "),fj=n(hB,"A",{href:!0});var qwt=s(fj);pbo=r(qwt,"BarthezTokenizer"),qwt.forEach(t),_bo=r(hB," or "),gj=n(hB,"A",{href:!0});var jwt=s(gj);bbo=r(jwt,"BarthezTokenizerFast"),jwt.forEach(t),vbo=r(hB," (BARThez model)"),hB.forEach(t),Fbo=i(S),hu=n(S,"LI",{});var VIe=s(hu);Bge=n(VIe,"STRONG",{});var Dwt=s(Bge);Tbo=r(Dwt,"bartpho"),Dwt.forEach(t),Mbo=r(VIe," \u2014 "),hj=n(VIe,"A",{href:!0});var Gwt=s(hj);Ebo=r(Gwt,"BartphoTokenizer"),Gwt.forEach(t),Cbo=r(VIe," (BARTpho model)"),VIe.forEach(t),wbo=i(S),gs=n(S,"LI",{});var uB=s(gs);Ige=n(uB,"STRONG",{});var Owt=s(Ige);Abo=r(Owt,"bert"),Owt.forEach(t),Lbo=r(uB," \u2014 "),uj=n(uB,"A",{href:!0});var Vwt=s(uj);ybo=r(Vwt,"BertTokenizer"),Vwt.forEach(t),xbo=r(uB," or "),pj=n(uB,"A",{href:!0});var Xwt=s(pj);$bo=r(Xwt,"BertTokenizerFast"),Xwt.forEach(t),kbo=r(uB," (BERT model)"),uB.forEach(t),Sbo=i(S),uu=n(S,"LI",{});var XIe=s(uu);Nge=n(XIe,"STRONG",{});var zwt=s(Nge);Rbo=r(zwt,"bert-generation"),zwt.forEach(t),Pbo=r(XIe," \u2014 "),_j=n(XIe,"A",{href:!0});var Qwt=s(_j);Bbo=r(Qwt,"BertGenerationTokenizer"),Qwt.forEach(t),Ibo=r(XIe," (Bert Generation model)"),XIe.forEach(t),Nbo=i(S),pu=n(S,"LI",{});var zIe=s(pu);qge=n(zIe,"STRONG",{});var Wwt=s(qge);qbo=r(Wwt,"bert-japanese"),Wwt.forEach(t),jbo=r(zIe," \u2014 "),bj=n(zIe,"A",{href:!0});var Uwt=s(bj);Dbo=r(Uwt,"BertJapaneseTokenizer"),Uwt.forEach(t),Gbo=r(zIe," (BertJapanese model)"),zIe.forEach(t),Obo=i(S),_u=n(S,"LI",{});var QIe=s(_u);jge=n(QIe,"STRONG",{});var Hwt=s(jge);Vbo=r(Hwt,"bertweet"),Hwt.forEach(t),Xbo=r(QIe," \u2014 "),vj=n(QIe,"A",{href:!0});var Jwt=s(vj);zbo=r(Jwt,"BertweetTokenizer"),Jwt.forEach(t),Qbo=r(QIe," (BERTweet model)"),QIe.forEach(t),Wbo=i(S),hs=n(S,"LI",{});var pB=s(hs);Dge=n(pB,"STRONG",{});var Ywt=s(Dge);Ubo=r(Ywt,"big_bird"),Ywt.forEach(t),Hbo=r(pB," \u2014 "),Fj=n(pB,"A",{href:!0});var Zwt=s(Fj);Jbo=r(Zwt,"BigBirdTokenizer"),Zwt.forEach(t),Ybo=r(pB," or "),Tj=n(pB,"A",{href:!0});var Kwt=s(Tj);Zbo=r(Kwt,"BigBirdTokenizerFast"),Kwt.forEach(t),Kbo=r(pB," (BigBird model)"),pB.forEach(t),e2o=i(S),us=n(S,"LI",{});var _B=s(us);Gge=n(_B,"STRONG",{});var eAt=s(Gge);o2o=r(eAt,"bigbird_pegasus"),eAt.forEach(t),r2o=r(_B," \u2014 "),Mj=n(_B,"A",{href:!0});var oAt=s(Mj);t2o=r(oAt,"PegasusTokenizer"),oAt.forEach(t),a2o=r(_B," or "),Ej=n(_B,"A",{href:!0});var rAt=s(Ej);n2o=r(rAt,"PegasusTokenizerFast"),rAt.forEach(t),s2o=r(_B," (BigBird-Pegasus model)"),_B.forEach(t),l2o=i(S),ps=n(S,"LI",{});var bB=s(ps);Oge=n(bB,"STRONG",{});var tAt=s(Oge);i2o=r(tAt,"blenderbot"),tAt.forEach(t),d2o=r(bB," \u2014 "),Cj=n(bB,"A",{href:!0});var aAt=s(Cj);c2o=r(aAt,"BlenderbotTokenizer"),aAt.forEach(t),m2o=r(bB," or "),wj=n(bB,"A",{href:!0});var nAt=s(wj);f2o=r(nAt,"BlenderbotTokenizerFast"),nAt.forEach(t),g2o=r(bB," (Blenderbot model)"),bB.forEach(t),h2o=i(S),bu=n(S,"LI",{});var WIe=s(bu);Vge=n(WIe,"STRONG",{});var sAt=s(Vge);u2o=r(sAt,"blenderbot-small"),sAt.forEach(t),p2o=r(WIe," \u2014 "),Aj=n(WIe,"A",{href:!0});var lAt=s(Aj);_2o=r(lAt,"BlenderbotSmallTokenizer"),lAt.forEach(t),b2o=r(WIe," (BlenderbotSmall model)"),WIe.forEach(t),v2o=i(S),vu=n(S,"LI",{});var UIe=s(vu);Xge=n(UIe,"STRONG",{});var iAt=s(Xge);F2o=r(iAt,"bloom"),iAt.forEach(t),T2o=r(UIe," \u2014 "),Lj=n(UIe,"A",{href:!0});var dAt=s(Lj);M2o=r(dAt,"BloomTokenizerFast"),dAt.forEach(t),E2o=r(UIe," (BLOOM model)"),UIe.forEach(t),C2o=i(S),Fu=n(S,"LI",{});var HIe=s(Fu);zge=n(HIe,"STRONG",{});var cAt=s(zge);w2o=r(cAt,"byt5"),cAt.forEach(t),A2o=r(HIe," \u2014 "),yj=n(HIe,"A",{href:!0});var mAt=s(yj);L2o=r(mAt,"ByT5Tokenizer"),mAt.forEach(t),y2o=r(HIe," (ByT5 model)"),HIe.forEach(t),x2o=i(S),_s=n(S,"LI",{});var vB=s(_s);Qge=n(vB,"STRONG",{});var fAt=s(Qge);$2o=r(fAt,"camembert"),fAt.forEach(t),k2o=r(vB," \u2014 "),xj=n(vB,"A",{href:!0});var gAt=s(xj);S2o=r(gAt,"CamembertTokenizer"),gAt.forEach(t),R2o=r(vB," or "),$j=n(vB,"A",{href:!0});var hAt=s($j);P2o=r(hAt,"CamembertTokenizerFast"),hAt.forEach(t),B2o=r(vB," (CamemBERT model)"),vB.forEach(t),I2o=i(S),Tu=n(S,"LI",{});var JIe=s(Tu);Wge=n(JIe,"STRONG",{});var uAt=s(Wge);N2o=r(uAt,"canine"),uAt.forEach(t),q2o=r(JIe," \u2014 "),kj=n(JIe,"A",{href:!0});var pAt=s(kj);j2o=r(pAt,"CanineTokenizer"),pAt.forEach(t),D2o=r(JIe," (CANINE model)"),JIe.forEach(t),G2o=i(S),bs=n(S,"LI",{});var FB=s(bs);Uge=n(FB,"STRONG",{});var _At=s(Uge);O2o=r(_At,"clip"),_At.forEach(t),V2o=r(FB," \u2014 "),Sj=n(FB,"A",{href:!0});var bAt=s(Sj);X2o=r(bAt,"CLIPTokenizer"),bAt.forEach(t),z2o=r(FB," or "),Rj=n(FB,"A",{href:!0});var vAt=s(Rj);Q2o=r(vAt,"CLIPTokenizerFast"),vAt.forEach(t),W2o=r(FB," (CLIP model)"),FB.forEach(t),U2o=i(S),vs=n(S,"LI",{});var TB=s(vs);Hge=n(TB,"STRONG",{});var FAt=s(Hge);H2o=r(FAt,"codegen"),FAt.forEach(t),J2o=r(TB," \u2014 "),Pj=n(TB,"A",{href:!0});var TAt=s(Pj);Y2o=r(TAt,"CodeGenTokenizer"),TAt.forEach(t),Z2o=r(TB," or "),Bj=n(TB,"A",{href:!0});var MAt=s(Bj);K2o=r(MAt,"CodeGenTokenizerFast"),MAt.forEach(t),evo=r(TB," (CodeGen model)"),TB.forEach(t),ovo=i(S),Fs=n(S,"LI",{});var MB=s(Fs);Jge=n(MB,"STRONG",{});var EAt=s(Jge);rvo=r(EAt,"convbert"),EAt.forEach(t),tvo=r(MB," \u2014 "),Ij=n(MB,"A",{href:!0});var CAt=s(Ij);avo=r(CAt,"ConvBertTokenizer"),CAt.forEach(t),nvo=r(MB," or "),Nj=n(MB,"A",{href:!0});var wAt=s(Nj);svo=r(wAt,"ConvBertTokenizerFast"),wAt.forEach(t),lvo=r(MB," (ConvBERT model)"),MB.forEach(t),ivo=i(S),Ts=n(S,"LI",{});var EB=s(Ts);Yge=n(EB,"STRONG",{});var AAt=s(Yge);dvo=r(AAt,"cpm"),AAt.forEach(t),cvo=r(EB," \u2014 "),qj=n(EB,"A",{href:!0});var LAt=s(qj);mvo=r(LAt,"CpmTokenizer"),LAt.forEach(t),fvo=r(EB," or "),jj=n(EB,"A",{href:!0});var yAt=s(jj);gvo=r(yAt,"CpmTokenizerFast"),yAt.forEach(t),hvo=r(EB," (CPM model)"),EB.forEach(t),uvo=i(S),Mu=n(S,"LI",{});var YIe=s(Mu);Zge=n(YIe,"STRONG",{});var xAt=s(Zge);pvo=r(xAt,"ctrl"),xAt.forEach(t),_vo=r(YIe," \u2014 "),Dj=n(YIe,"A",{href:!0});var $At=s(Dj);bvo=r($At,"CTRLTokenizer"),$At.forEach(t),vvo=r(YIe," (CTRL model)"),YIe.forEach(t),Fvo=i(S),Ms=n(S,"LI",{});var CB=s(Ms);Kge=n(CB,"STRONG",{});var kAt=s(Kge);Tvo=r(kAt,"data2vec-text"),kAt.forEach(t),Mvo=r(CB," \u2014 "),Gj=n(CB,"A",{href:!0});var SAt=s(Gj);Evo=r(SAt,"RobertaTokenizer"),SAt.forEach(t),Cvo=r(CB," or "),Oj=n(CB,"A",{href:!0});var RAt=s(Oj);wvo=r(RAt,"RobertaTokenizerFast"),RAt.forEach(t),Avo=r(CB," (Data2VecText model)"),CB.forEach(t),Lvo=i(S),Es=n(S,"LI",{});var wB=s(Es);ehe=n(wB,"STRONG",{});var PAt=s(ehe);yvo=r(PAt,"deberta"),PAt.forEach(t),xvo=r(wB," \u2014 "),Vj=n(wB,"A",{href:!0});var BAt=s(Vj);$vo=r(BAt,"DebertaTokenizer"),BAt.forEach(t),kvo=r(wB," or "),Xj=n(wB,"A",{href:!0});var IAt=s(Xj);Svo=r(IAt,"DebertaTokenizerFast"),IAt.forEach(t),Rvo=r(wB," (DeBERTa model)"),wB.forEach(t),Pvo=i(S),Cs=n(S,"LI",{});var AB=s(Cs);ohe=n(AB,"STRONG",{});var NAt=s(ohe);Bvo=r(NAt,"deberta-v2"),NAt.forEach(t),Ivo=r(AB," \u2014 "),zj=n(AB,"A",{href:!0});var qAt=s(zj);Nvo=r(qAt,"DebertaV2Tokenizer"),qAt.forEach(t),qvo=r(AB," or "),Qj=n(AB,"A",{href:!0});var jAt=s(Qj);jvo=r(jAt,"DebertaV2TokenizerFast"),jAt.forEach(t),Dvo=r(AB," (DeBERTa-v2 model)"),AB.forEach(t),Gvo=i(S),ws=n(S,"LI",{});var LB=s(ws);rhe=n(LB,"STRONG",{});var DAt=s(rhe);Ovo=r(DAt,"distilbert"),DAt.forEach(t),Vvo=r(LB," \u2014 "),Wj=n(LB,"A",{href:!0});var GAt=s(Wj);Xvo=r(GAt,"DistilBertTokenizer"),GAt.forEach(t),zvo=r(LB," or "),Uj=n(LB,"A",{href:!0});var OAt=s(Uj);Qvo=r(OAt,"DistilBertTokenizerFast"),OAt.forEach(t),Wvo=r(LB," (DistilBERT model)"),LB.forEach(t),Uvo=i(S),As=n(S,"LI",{});var yB=s(As);the=n(yB,"STRONG",{});var VAt=s(the);Hvo=r(VAt,"dpr"),VAt.forEach(t),Jvo=r(yB," \u2014 "),Hj=n(yB,"A",{href:!0});var XAt=s(Hj);Yvo=r(XAt,"DPRQuestionEncoderTokenizer"),XAt.forEach(t),Zvo=r(yB," or "),Jj=n(yB,"A",{href:!0});var zAt=s(Jj);Kvo=r(zAt,"DPRQuestionEncoderTokenizerFast"),zAt.forEach(t),eFo=r(yB," (DPR model)"),yB.forEach(t),oFo=i(S),Ls=n(S,"LI",{});var xB=s(Ls);ahe=n(xB,"STRONG",{});var QAt=s(ahe);rFo=r(QAt,"electra"),QAt.forEach(t),tFo=r(xB," \u2014 "),Yj=n(xB,"A",{href:!0});var WAt=s(Yj);aFo=r(WAt,"ElectraTokenizer"),WAt.forEach(t),nFo=r(xB," or "),Zj=n(xB,"A",{href:!0});var UAt=s(Zj);sFo=r(UAt,"ElectraTokenizerFast"),UAt.forEach(t),lFo=r(xB," (ELECTRA model)"),xB.forEach(t),iFo=i(S),ys=n(S,"LI",{});var $B=s(ys);nhe=n($B,"STRONG",{});var HAt=s(nhe);dFo=r(HAt,"ernie"),HAt.forEach(t),cFo=r($B," \u2014 "),Kj=n($B,"A",{href:!0});var JAt=s(Kj);mFo=r(JAt,"BertTokenizer"),JAt.forEach(t),fFo=r($B," or "),eD=n($B,"A",{href:!0});var YAt=s(eD);gFo=r(YAt,"BertTokenizerFast"),YAt.forEach(t),hFo=r($B," (ERNIE model)"),$B.forEach(t),uFo=i(S),Eu=n(S,"LI",{});var ZIe=s(Eu);she=n(ZIe,"STRONG",{});var ZAt=s(she);pFo=r(ZAt,"flaubert"),ZAt.forEach(t),_Fo=r(ZIe," \u2014 "),oD=n(ZIe,"A",{href:!0});var KAt=s(oD);bFo=r(KAt,"FlaubertTokenizer"),KAt.forEach(t),vFo=r(ZIe," (FlauBERT model)"),ZIe.forEach(t),FFo=i(S),xs=n(S,"LI",{});var kB=s(xs);lhe=n(kB,"STRONG",{});var e6t=s(lhe);TFo=r(e6t,"fnet"),e6t.forEach(t),MFo=r(kB," \u2014 "),rD=n(kB,"A",{href:!0});var o6t=s(rD);EFo=r(o6t,"FNetTokenizer"),o6t.forEach(t),CFo=r(kB," or "),tD=n(kB,"A",{href:!0});var r6t=s(tD);wFo=r(r6t,"FNetTokenizerFast"),r6t.forEach(t),AFo=r(kB," (FNet model)"),kB.forEach(t),LFo=i(S),Cu=n(S,"LI",{});var KIe=s(Cu);ihe=n(KIe,"STRONG",{});var t6t=s(ihe);yFo=r(t6t,"fsmt"),t6t.forEach(t),xFo=r(KIe," \u2014 "),aD=n(KIe,"A",{href:!0});var a6t=s(aD);$Fo=r(a6t,"FSMTTokenizer"),a6t.forEach(t),kFo=r(KIe," (FairSeq Machine-Translation model)"),KIe.forEach(t),SFo=i(S),$s=n(S,"LI",{});var SB=s($s);dhe=n(SB,"STRONG",{});var n6t=s(dhe);RFo=r(n6t,"funnel"),n6t.forEach(t),PFo=r(SB," \u2014 "),nD=n(SB,"A",{href:!0});var s6t=s(nD);BFo=r(s6t,"FunnelTokenizer"),s6t.forEach(t),IFo=r(SB," or "),sD=n(SB,"A",{href:!0});var l6t=s(sD);NFo=r(l6t,"FunnelTokenizerFast"),l6t.forEach(t),qFo=r(SB," (Funnel Transformer model)"),SB.forEach(t),jFo=i(S),ks=n(S,"LI",{});var RB=s(ks);che=n(RB,"STRONG",{});var i6t=s(che);DFo=r(i6t,"gpt2"),i6t.forEach(t),GFo=r(RB," \u2014 "),lD=n(RB,"A",{href:!0});var d6t=s(lD);OFo=r(d6t,"GPT2Tokenizer"),d6t.forEach(t),VFo=r(RB," or "),iD=n(RB,"A",{href:!0});var c6t=s(iD);XFo=r(c6t,"GPT2TokenizerFast"),c6t.forEach(t),zFo=r(RB," (OpenAI GPT-2 model)"),RB.forEach(t),QFo=i(S),Ss=n(S,"LI",{});var PB=s(Ss);mhe=n(PB,"STRONG",{});var m6t=s(mhe);WFo=r(m6t,"gpt_neo"),m6t.forEach(t),UFo=r(PB," \u2014 "),dD=n(PB,"A",{href:!0});var f6t=s(dD);HFo=r(f6t,"GPT2Tokenizer"),f6t.forEach(t),JFo=r(PB," or "),cD=n(PB,"A",{href:!0});var g6t=s(cD);YFo=r(g6t,"GPT2TokenizerFast"),g6t.forEach(t),ZFo=r(PB," (GPT Neo model)"),PB.forEach(t),KFo=i(S),wu=n(S,"LI",{});var eNe=s(wu);fhe=n(eNe,"STRONG",{});var h6t=s(fhe);eTo=r(h6t,"gpt_neox"),h6t.forEach(t),oTo=r(eNe," \u2014 "),mD=n(eNe,"A",{href:!0});var u6t=s(mD);rTo=r(u6t,"GPTNeoXTokenizerFast"),u6t.forEach(t),tTo=r(eNe," (GPT NeoX model)"),eNe.forEach(t),aTo=i(S),Au=n(S,"LI",{});var oNe=s(Au);ghe=n(oNe,"STRONG",{});var p6t=s(ghe);nTo=r(p6t,"gpt_neox_japanese"),p6t.forEach(t),sTo=r(oNe," \u2014 "),fD=n(oNe,"A",{href:!0});var _6t=s(fD);lTo=r(_6t,"GPTNeoXJapaneseTokenizer"),_6t.forEach(t),iTo=r(oNe," (GPT NeoX Japanese model)"),oNe.forEach(t),dTo=i(S),Rs=n(S,"LI",{});var BB=s(Rs);hhe=n(BB,"STRONG",{});var b6t=s(hhe);cTo=r(b6t,"gptj"),b6t.forEach(t),mTo=r(BB," \u2014 "),gD=n(BB,"A",{href:!0});var v6t=s(gD);fTo=r(v6t,"GPT2Tokenizer"),v6t.forEach(t),gTo=r(BB," or "),hD=n(BB,"A",{href:!0});var F6t=s(hD);hTo=r(F6t,"GPT2TokenizerFast"),F6t.forEach(t),uTo=r(BB," (GPT-J model)"),BB.forEach(t),pTo=i(S),Ps=n(S,"LI",{});var IB=s(Ps);uhe=n(IB,"STRONG",{});var T6t=s(uhe);_To=r(T6t,"groupvit"),T6t.forEach(t),bTo=r(IB," \u2014 "),uD=n(IB,"A",{href:!0});var M6t=s(uD);vTo=r(M6t,"CLIPTokenizer"),M6t.forEach(t),FTo=r(IB," or "),pD=n(IB,"A",{href:!0});var E6t=s(pD);TTo=r(E6t,"CLIPTokenizerFast"),E6t.forEach(t),MTo=r(IB," (GroupViT model)"),IB.forEach(t),ETo=i(S),Bs=n(S,"LI",{});var NB=s(Bs);phe=n(NB,"STRONG",{});var C6t=s(phe);CTo=r(C6t,"herbert"),C6t.forEach(t),wTo=r(NB," \u2014 "),_D=n(NB,"A",{href:!0});var w6t=s(_D);ATo=r(w6t,"HerbertTokenizer"),w6t.forEach(t),LTo=r(NB," or "),bD=n(NB,"A",{href:!0});var A6t=s(bD);yTo=r(A6t,"HerbertTokenizerFast"),A6t.forEach(t),xTo=r(NB," (HerBERT model)"),NB.forEach(t),$To=i(S),Lu=n(S,"LI",{});var rNe=s(Lu);_he=n(rNe,"STRONG",{});var L6t=s(_he);kTo=r(L6t,"hubert"),L6t.forEach(t),STo=r(rNe," \u2014 "),vD=n(rNe,"A",{href:!0});var y6t=s(vD);RTo=r(y6t,"Wav2Vec2CTCTokenizer"),y6t.forEach(t),PTo=r(rNe," (Hubert model)"),rNe.forEach(t),BTo=i(S),Is=n(S,"LI",{});var qB=s(Is);bhe=n(qB,"STRONG",{});var x6t=s(bhe);ITo=r(x6t,"ibert"),x6t.forEach(t),NTo=r(qB," \u2014 "),FD=n(qB,"A",{href:!0});var $6t=s(FD);qTo=r($6t,"RobertaTokenizer"),$6t.forEach(t),jTo=r(qB," or "),TD=n(qB,"A",{href:!0});var k6t=s(TD);DTo=r(k6t,"RobertaTokenizerFast"),k6t.forEach(t),GTo=r(qB," (I-BERT model)"),qB.forEach(t),OTo=i(S),Ns=n(S,"LI",{});var jB=s(Ns);vhe=n(jB,"STRONG",{});var S6t=s(vhe);VTo=r(S6t,"layoutlm"),S6t.forEach(t),XTo=r(jB," \u2014 "),MD=n(jB,"A",{href:!0});var R6t=s(MD);zTo=r(R6t,"LayoutLMTokenizer"),R6t.forEach(t),QTo=r(jB," or "),ED=n(jB,"A",{href:!0});var P6t=s(ED);WTo=r(P6t,"LayoutLMTokenizerFast"),P6t.forEach(t),UTo=r(jB," (LayoutLM model)"),jB.forEach(t),HTo=i(S),qs=n(S,"LI",{});var DB=s(qs);Fhe=n(DB,"STRONG",{});var B6t=s(Fhe);JTo=r(B6t,"layoutlmv2"),B6t.forEach(t),YTo=r(DB," \u2014 "),CD=n(DB,"A",{href:!0});var I6t=s(CD);ZTo=r(I6t,"LayoutLMv2Tokenizer"),I6t.forEach(t),KTo=r(DB," or "),wD=n(DB,"A",{href:!0});var N6t=s(wD);eMo=r(N6t,"LayoutLMv2TokenizerFast"),N6t.forEach(t),oMo=r(DB," (LayoutLMv2 model)"),DB.forEach(t),rMo=i(S),js=n(S,"LI",{});var GB=s(js);The=n(GB,"STRONG",{});var q6t=s(The);tMo=r(q6t,"layoutlmv3"),q6t.forEach(t),aMo=r(GB," \u2014 "),AD=n(GB,"A",{href:!0});var j6t=s(AD);nMo=r(j6t,"LayoutLMv3Tokenizer"),j6t.forEach(t),sMo=r(GB," or "),LD=n(GB,"A",{href:!0});var D6t=s(LD);lMo=r(D6t,"LayoutLMv3TokenizerFast"),D6t.forEach(t),iMo=r(GB," (LayoutLMv3 model)"),GB.forEach(t),dMo=i(S),Ds=n(S,"LI",{});var OB=s(Ds);Mhe=n(OB,"STRONG",{});var G6t=s(Mhe);cMo=r(G6t,"layoutxlm"),G6t.forEach(t),mMo=r(OB," \u2014 "),yD=n(OB,"A",{href:!0});var O6t=s(yD);fMo=r(O6t,"LayoutXLMTokenizer"),O6t.forEach(t),gMo=r(OB," or "),xD=n(OB,"A",{href:!0});var V6t=s(xD);hMo=r(V6t,"LayoutXLMTokenizerFast"),V6t.forEach(t),uMo=r(OB," (LayoutXLM model)"),OB.forEach(t),pMo=i(S),Gs=n(S,"LI",{});var VB=s(Gs);Ehe=n(VB,"STRONG",{});var X6t=s(Ehe);_Mo=r(X6t,"led"),X6t.forEach(t),bMo=r(VB," \u2014 "),$D=n(VB,"A",{href:!0});var z6t=s($D);vMo=r(z6t,"LEDTokenizer"),z6t.forEach(t),FMo=r(VB," or "),kD=n(VB,"A",{href:!0});var Q6t=s(kD);TMo=r(Q6t,"LEDTokenizerFast"),Q6t.forEach(t),MMo=r(VB," (LED model)"),VB.forEach(t),EMo=i(S),Os=n(S,"LI",{});var XB=s(Os);Che=n(XB,"STRONG",{});var W6t=s(Che);CMo=r(W6t,"longformer"),W6t.forEach(t),wMo=r(XB," \u2014 "),SD=n(XB,"A",{href:!0});var U6t=s(SD);AMo=r(U6t,"LongformerTokenizer"),U6t.forEach(t),LMo=r(XB," or "),RD=n(XB,"A",{href:!0});var H6t=s(RD);yMo=r(H6t,"LongformerTokenizerFast"),H6t.forEach(t),xMo=r(XB," (Longformer model)"),XB.forEach(t),$Mo=i(S),Vs=n(S,"LI",{});var zB=s(Vs);whe=n(zB,"STRONG",{});var J6t=s(whe);kMo=r(J6t,"longt5"),J6t.forEach(t),SMo=r(zB," \u2014 "),PD=n(zB,"A",{href:!0});var Y6t=s(PD);RMo=r(Y6t,"T5Tokenizer"),Y6t.forEach(t),PMo=r(zB," or "),BD=n(zB,"A",{href:!0});var Z6t=s(BD);BMo=r(Z6t,"T5TokenizerFast"),Z6t.forEach(t),IMo=r(zB," (LongT5 model)"),zB.forEach(t),NMo=i(S),yu=n(S,"LI",{});var tNe=s(yu);Ahe=n(tNe,"STRONG",{});var K6t=s(Ahe);qMo=r(K6t,"luke"),K6t.forEach(t),jMo=r(tNe," \u2014 "),ID=n(tNe,"A",{href:!0});var e7t=s(ID);DMo=r(e7t,"LukeTokenizer"),e7t.forEach(t),GMo=r(tNe," (LUKE model)"),tNe.forEach(t),OMo=i(S),Xs=n(S,"LI",{});var QB=s(Xs);Lhe=n(QB,"STRONG",{});var o7t=s(Lhe);VMo=r(o7t,"lxmert"),o7t.forEach(t),XMo=r(QB," \u2014 "),ND=n(QB,"A",{href:!0});var r7t=s(ND);zMo=r(r7t,"LxmertTokenizer"),r7t.forEach(t),QMo=r(QB," or "),qD=n(QB,"A",{href:!0});var t7t=s(qD);WMo=r(t7t,"LxmertTokenizerFast"),t7t.forEach(t),UMo=r(QB," (LXMERT model)"),QB.forEach(t),HMo=i(S),xu=n(S,"LI",{});var aNe=s(xu);yhe=n(aNe,"STRONG",{});var a7t=s(yhe);JMo=r(a7t,"m2m_100"),a7t.forEach(t),YMo=r(aNe," \u2014 "),jD=n(aNe,"A",{href:!0});var n7t=s(jD);ZMo=r(n7t,"M2M100Tokenizer"),n7t.forEach(t),KMo=r(aNe," (M2M100 model)"),aNe.forEach(t),eEo=i(S),$u=n(S,"LI",{});var nNe=s($u);xhe=n(nNe,"STRONG",{});var s7t=s(xhe);oEo=r(s7t,"marian"),s7t.forEach(t),rEo=r(nNe," \u2014 "),DD=n(nNe,"A",{href:!0});var l7t=s(DD);tEo=r(l7t,"MarianTokenizer"),l7t.forEach(t),aEo=r(nNe," (Marian model)"),nNe.forEach(t),nEo=i(S),zs=n(S,"LI",{});var WB=s(zs);$he=n(WB,"STRONG",{});var i7t=s($he);sEo=r(i7t,"mbart"),i7t.forEach(t),lEo=r(WB," \u2014 "),GD=n(WB,"A",{href:!0});var d7t=s(GD);iEo=r(d7t,"MBartTokenizer"),d7t.forEach(t),dEo=r(WB," or "),OD=n(WB,"A",{href:!0});var c7t=s(OD);cEo=r(c7t,"MBartTokenizerFast"),c7t.forEach(t),mEo=r(WB," (mBART model)"),WB.forEach(t),fEo=i(S),Qs=n(S,"LI",{});var UB=s(Qs);khe=n(UB,"STRONG",{});var m7t=s(khe);gEo=r(m7t,"mbart50"),m7t.forEach(t),hEo=r(UB," \u2014 "),VD=n(UB,"A",{href:!0});var f7t=s(VD);uEo=r(f7t,"MBart50Tokenizer"),f7t.forEach(t),pEo=r(UB," or "),XD=n(UB,"A",{href:!0});var g7t=s(XD);_Eo=r(g7t,"MBart50TokenizerFast"),g7t.forEach(t),bEo=r(UB," (mBART-50 model)"),UB.forEach(t),vEo=i(S),Ws=n(S,"LI",{});var HB=s(Ws);She=n(HB,"STRONG",{});var h7t=s(She);FEo=r(h7t,"megatron-bert"),h7t.forEach(t),TEo=r(HB," \u2014 "),zD=n(HB,"A",{href:!0});var u7t=s(zD);MEo=r(u7t,"BertTokenizer"),u7t.forEach(t),EEo=r(HB," or "),QD=n(HB,"A",{href:!0});var p7t=s(QD);CEo=r(p7t,"BertTokenizerFast"),p7t.forEach(t),wEo=r(HB," (Megatron-BERT model)"),HB.forEach(t),AEo=i(S),ku=n(S,"LI",{});var sNe=s(ku);Rhe=n(sNe,"STRONG",{});var _7t=s(Rhe);LEo=r(_7t,"mluke"),_7t.forEach(t),yEo=r(sNe," \u2014 "),WD=n(sNe,"A",{href:!0});var b7t=s(WD);xEo=r(b7t,"MLukeTokenizer"),b7t.forEach(t),$Eo=r(sNe," (mLUKE model)"),sNe.forEach(t),kEo=i(S),Us=n(S,"LI",{});var JB=s(Us);Phe=n(JB,"STRONG",{});var v7t=s(Phe);SEo=r(v7t,"mobilebert"),v7t.forEach(t),REo=r(JB," \u2014 "),UD=n(JB,"A",{href:!0});var F7t=s(UD);PEo=r(F7t,"MobileBertTokenizer"),F7t.forEach(t),BEo=r(JB," or "),HD=n(JB,"A",{href:!0});var T7t=s(HD);IEo=r(T7t,"MobileBertTokenizerFast"),T7t.forEach(t),NEo=r(JB," (MobileBERT model)"),JB.forEach(t),qEo=i(S),Hs=n(S,"LI",{});var YB=s(Hs);Bhe=n(YB,"STRONG",{});var M7t=s(Bhe);jEo=r(M7t,"mpnet"),M7t.forEach(t),DEo=r(YB," \u2014 "),JD=n(YB,"A",{href:!0});var E7t=s(JD);GEo=r(E7t,"MPNetTokenizer"),E7t.forEach(t),OEo=r(YB," or "),YD=n(YB,"A",{href:!0});var C7t=s(YD);VEo=r(C7t,"MPNetTokenizerFast"),C7t.forEach(t),XEo=r(YB," (MPNet model)"),YB.forEach(t),zEo=i(S),Js=n(S,"LI",{});var ZB=s(Js);Ihe=n(ZB,"STRONG",{});var w7t=s(Ihe);QEo=r(w7t,"mt5"),w7t.forEach(t),WEo=r(ZB," \u2014 "),ZD=n(ZB,"A",{href:!0});var A7t=s(ZD);UEo=r(A7t,"MT5Tokenizer"),A7t.forEach(t),HEo=r(ZB," or "),KD=n(ZB,"A",{href:!0});var L7t=s(KD);JEo=r(L7t,"MT5TokenizerFast"),L7t.forEach(t),YEo=r(ZB," (MT5 model)"),ZB.forEach(t),ZEo=i(S),Ys=n(S,"LI",{});var KB=s(Ys);Nhe=n(KB,"STRONG",{});var y7t=s(Nhe);KEo=r(y7t,"mvp"),y7t.forEach(t),e4o=r(KB," \u2014 "),eG=n(KB,"A",{href:!0});var x7t=s(eG);o4o=r(x7t,"MvpTokenizer"),x7t.forEach(t),r4o=r(KB," or "),oG=n(KB,"A",{href:!0});var $7t=s(oG);t4o=r($7t,"MvpTokenizerFast"),$7t.forEach(t),a4o=r(KB," (MVP model)"),KB.forEach(t),n4o=i(S),Zs=n(S,"LI",{});var eI=s(Zs);qhe=n(eI,"STRONG",{});var k7t=s(qhe);s4o=r(k7t,"nezha"),k7t.forEach(t),l4o=r(eI," \u2014 "),rG=n(eI,"A",{href:!0});var S7t=s(rG);i4o=r(S7t,"BertTokenizer"),S7t.forEach(t),d4o=r(eI," or "),tG=n(eI,"A",{href:!0});var R7t=s(tG);c4o=r(R7t,"BertTokenizerFast"),R7t.forEach(t),m4o=r(eI," (Nezha model)"),eI.forEach(t),f4o=i(S),Ks=n(S,"LI",{});var oI=s(Ks);jhe=n(oI,"STRONG",{});var P7t=s(jhe);g4o=r(P7t,"nllb"),P7t.forEach(t),h4o=r(oI," \u2014 "),aG=n(oI,"A",{href:!0});var B7t=s(aG);u4o=r(B7t,"NllbTokenizer"),B7t.forEach(t),p4o=r(oI," or "),nG=n(oI,"A",{href:!0});var I7t=s(nG);_4o=r(I7t,"NllbTokenizerFast"),I7t.forEach(t),b4o=r(oI," (NLLB model)"),oI.forEach(t),v4o=i(S),el=n(S,"LI",{});var rI=s(el);Dhe=n(rI,"STRONG",{});var N7t=s(Dhe);F4o=r(N7t,"nystromformer"),N7t.forEach(t),T4o=r(rI," \u2014 "),sG=n(rI,"A",{href:!0});var q7t=s(sG);M4o=r(q7t,"AlbertTokenizer"),q7t.forEach(t),E4o=r(rI," or "),lG=n(rI,"A",{href:!0});var j7t=s(lG);C4o=r(j7t,"AlbertTokenizerFast"),j7t.forEach(t),w4o=r(rI," (Nystr\xF6mformer model)"),rI.forEach(t),A4o=i(S),ol=n(S,"LI",{});var tI=s(ol);Ghe=n(tI,"STRONG",{});var D7t=s(Ghe);L4o=r(D7t,"openai-gpt"),D7t.forEach(t),y4o=r(tI," \u2014 "),iG=n(tI,"A",{href:!0});var G7t=s(iG);x4o=r(G7t,"OpenAIGPTTokenizer"),G7t.forEach(t),$4o=r(tI," or "),dG=n(tI,"A",{href:!0});var O7t=s(dG);k4o=r(O7t,"OpenAIGPTTokenizerFast"),O7t.forEach(t),S4o=r(tI," (OpenAI GPT model)"),tI.forEach(t),R4o=i(S),Su=n(S,"LI",{});var lNe=s(Su);Ohe=n(lNe,"STRONG",{});var V7t=s(Ohe);P4o=r(V7t,"opt"),V7t.forEach(t),B4o=r(lNe," \u2014 "),cG=n(lNe,"A",{href:!0});var X7t=s(cG);I4o=r(X7t,"GPT2Tokenizer"),X7t.forEach(t),N4o=r(lNe," (OPT model)"),lNe.forEach(t),q4o=i(S),rl=n(S,"LI",{});var aI=s(rl);Vhe=n(aI,"STRONG",{});var z7t=s(Vhe);j4o=r(z7t,"owlvit"),z7t.forEach(t),D4o=r(aI," \u2014 "),mG=n(aI,"A",{href:!0});var Q7t=s(mG);G4o=r(Q7t,"CLIPTokenizer"),Q7t.forEach(t),O4o=r(aI," or "),fG=n(aI,"A",{href:!0});var W7t=s(fG);V4o=r(W7t,"CLIPTokenizerFast"),W7t.forEach(t),X4o=r(aI," (OWL-ViT model)"),aI.forEach(t),z4o=i(S),tl=n(S,"LI",{});var nI=s(tl);Xhe=n(nI,"STRONG",{});var U7t=s(Xhe);Q4o=r(U7t,"pegasus"),U7t.forEach(t),W4o=r(nI," \u2014 "),gG=n(nI,"A",{href:!0});var H7t=s(gG);U4o=r(H7t,"PegasusTokenizer"),H7t.forEach(t),H4o=r(nI," or "),hG=n(nI,"A",{href:!0});var J7t=s(hG);J4o=r(J7t,"PegasusTokenizerFast"),J7t.forEach(t),Y4o=r(nI," (Pegasus model)"),nI.forEach(t),Z4o=i(S),Ru=n(S,"LI",{});var iNe=s(Ru);zhe=n(iNe,"STRONG",{});var Y7t=s(zhe);K4o=r(Y7t,"perceiver"),Y7t.forEach(t),eCo=r(iNe," \u2014 "),uG=n(iNe,"A",{href:!0});var Z7t=s(uG);oCo=r(Z7t,"PerceiverTokenizer"),Z7t.forEach(t),rCo=r(iNe," (Perceiver model)"),iNe.forEach(t),tCo=i(S),Pu=n(S,"LI",{});var dNe=s(Pu);Qhe=n(dNe,"STRONG",{});var K7t=s(Qhe);aCo=r(K7t,"phobert"),K7t.forEach(t),nCo=r(dNe," \u2014 "),pG=n(dNe,"A",{href:!0});var eLt=s(pG);sCo=r(eLt,"PhobertTokenizer"),eLt.forEach(t),lCo=r(dNe," (PhoBERT model)"),dNe.forEach(t),iCo=i(S),Bu=n(S,"LI",{});var cNe=s(Bu);Whe=n(cNe,"STRONG",{});var oLt=s(Whe);dCo=r(oLt,"plbart"),oLt.forEach(t),cCo=r(cNe," \u2014 "),_G=n(cNe,"A",{href:!0});var rLt=s(_G);mCo=r(rLt,"PLBartTokenizer"),rLt.forEach(t),fCo=r(cNe," (PLBart model)"),cNe.forEach(t),gCo=i(S),Iu=n(S,"LI",{});var mNe=s(Iu);Uhe=n(mNe,"STRONG",{});var tLt=s(Uhe);hCo=r(tLt,"prophetnet"),tLt.forEach(t),uCo=r(mNe," \u2014 "),bG=n(mNe,"A",{href:!0});var aLt=s(bG);pCo=r(aLt,"ProphetNetTokenizer"),aLt.forEach(t),_Co=r(mNe," (ProphetNet model)"),mNe.forEach(t),bCo=i(S),al=n(S,"LI",{});var sI=s(al);Hhe=n(sI,"STRONG",{});var nLt=s(Hhe);vCo=r(nLt,"qdqbert"),nLt.forEach(t),FCo=r(sI," \u2014 "),vG=n(sI,"A",{href:!0});var sLt=s(vG);TCo=r(sLt,"BertTokenizer"),sLt.forEach(t),MCo=r(sI," or "),FG=n(sI,"A",{href:!0});var lLt=s(FG);ECo=r(lLt,"BertTokenizerFast"),lLt.forEach(t),CCo=r(sI," (QDQBert model)"),sI.forEach(t),wCo=i(S),Nu=n(S,"LI",{});var fNe=s(Nu);Jhe=n(fNe,"STRONG",{});var iLt=s(Jhe);ACo=r(iLt,"rag"),iLt.forEach(t),LCo=r(fNe," \u2014 "),TG=n(fNe,"A",{href:!0});var dLt=s(TG);yCo=r(dLt,"RagTokenizer"),dLt.forEach(t),xCo=r(fNe," (RAG model)"),fNe.forEach(t),$Co=i(S),nl=n(S,"LI",{});var lI=s(nl);Yhe=n(lI,"STRONG",{});var cLt=s(Yhe);kCo=r(cLt,"realm"),cLt.forEach(t),SCo=r(lI," \u2014 "),MG=n(lI,"A",{href:!0});var mLt=s(MG);RCo=r(mLt,"RealmTokenizer"),mLt.forEach(t),PCo=r(lI," or "),EG=n(lI,"A",{href:!0});var fLt=s(EG);BCo=r(fLt,"RealmTokenizerFast"),fLt.forEach(t),ICo=r(lI," (REALM model)"),lI.forEach(t),NCo=i(S),sl=n(S,"LI",{});var iI=s(sl);Zhe=n(iI,"STRONG",{});var gLt=s(Zhe);qCo=r(gLt,"reformer"),gLt.forEach(t),jCo=r(iI," \u2014 "),CG=n(iI,"A",{href:!0});var hLt=s(CG);DCo=r(hLt,"ReformerTokenizer"),hLt.forEach(t),GCo=r(iI," or "),wG=n(iI,"A",{href:!0});var uLt=s(wG);OCo=r(uLt,"ReformerTokenizerFast"),uLt.forEach(t),VCo=r(iI," (Reformer model)"),iI.forEach(t),XCo=i(S),ll=n(S,"LI",{});var dI=s(ll);Khe=n(dI,"STRONG",{});var pLt=s(Khe);zCo=r(pLt,"rembert"),pLt.forEach(t),QCo=r(dI," \u2014 "),AG=n(dI,"A",{href:!0});var _Lt=s(AG);WCo=r(_Lt,"RemBertTokenizer"),_Lt.forEach(t),UCo=r(dI," or "),LG=n(dI,"A",{href:!0});var bLt=s(LG);HCo=r(bLt,"RemBertTokenizerFast"),bLt.forEach(t),JCo=r(dI," (RemBERT model)"),dI.forEach(t),YCo=i(S),il=n(S,"LI",{});var cI=s(il);eue=n(cI,"STRONG",{});var vLt=s(eue);ZCo=r(vLt,"retribert"),vLt.forEach(t),KCo=r(cI," \u2014 "),yG=n(cI,"A",{href:!0});var FLt=s(yG);e3o=r(FLt,"RetriBertTokenizer"),FLt.forEach(t),o3o=r(cI," or "),xG=n(cI,"A",{href:!0});var TLt=s(xG);r3o=r(TLt,"RetriBertTokenizerFast"),TLt.forEach(t),t3o=r(cI," (RetriBERT model)"),cI.forEach(t),a3o=i(S),dl=n(S,"LI",{});var mI=s(dl);oue=n(mI,"STRONG",{});var MLt=s(oue);n3o=r(MLt,"roberta"),MLt.forEach(t),s3o=r(mI," \u2014 "),$G=n(mI,"A",{href:!0});var ELt=s($G);l3o=r(ELt,"RobertaTokenizer"),ELt.forEach(t),i3o=r(mI," or "),kG=n(mI,"A",{href:!0});var CLt=s(kG);d3o=r(CLt,"RobertaTokenizerFast"),CLt.forEach(t),c3o=r(mI," (RoBERTa model)"),mI.forEach(t),m3o=i(S),cl=n(S,"LI",{});var fI=s(cl);rue=n(fI,"STRONG",{});var wLt=s(rue);f3o=r(wLt,"roformer"),wLt.forEach(t),g3o=r(fI," \u2014 "),SG=n(fI,"A",{href:!0});var ALt=s(SG);h3o=r(ALt,"RoFormerTokenizer"),ALt.forEach(t),u3o=r(fI," or "),RG=n(fI,"A",{href:!0});var LLt=s(RG);p3o=r(LLt,"RoFormerTokenizerFast"),LLt.forEach(t),_3o=r(fI," (RoFormer model)"),fI.forEach(t),b3o=i(S),qu=n(S,"LI",{});var gNe=s(qu);tue=n(gNe,"STRONG",{});var yLt=s(tue);v3o=r(yLt,"speech_to_text"),yLt.forEach(t),F3o=r(gNe," \u2014 "),PG=n(gNe,"A",{href:!0});var xLt=s(PG);T3o=r(xLt,"Speech2TextTokenizer"),xLt.forEach(t),M3o=r(gNe," (Speech2Text model)"),gNe.forEach(t),E3o=i(S),ju=n(S,"LI",{});var hNe=s(ju);aue=n(hNe,"STRONG",{});var $Lt=s(aue);C3o=r($Lt,"speech_to_text_2"),$Lt.forEach(t),w3o=r(hNe," \u2014 "),BG=n(hNe,"A",{href:!0});var kLt=s(BG);A3o=r(kLt,"Speech2Text2Tokenizer"),kLt.forEach(t),L3o=r(hNe," (Speech2Text2 model)"),hNe.forEach(t),y3o=i(S),ml=n(S,"LI",{});var gI=s(ml);nue=n(gI,"STRONG",{});var SLt=s(nue);x3o=r(SLt,"splinter"),SLt.forEach(t),$3o=r(gI," \u2014 "),IG=n(gI,"A",{href:!0});var RLt=s(IG);k3o=r(RLt,"SplinterTokenizer"),RLt.forEach(t),S3o=r(gI," or "),NG=n(gI,"A",{href:!0});var PLt=s(NG);R3o=r(PLt,"SplinterTokenizerFast"),PLt.forEach(t),P3o=r(gI," (Splinter model)"),gI.forEach(t),B3o=i(S),fl=n(S,"LI",{});var hI=s(fl);sue=n(hI,"STRONG",{});var BLt=s(sue);I3o=r(BLt,"squeezebert"),BLt.forEach(t),N3o=r(hI," \u2014 "),qG=n(hI,"A",{href:!0});var ILt=s(qG);q3o=r(ILt,"SqueezeBertTokenizer"),ILt.forEach(t),j3o=r(hI," or "),jG=n(hI,"A",{href:!0});var NLt=s(jG);D3o=r(NLt,"SqueezeBertTokenizerFast"),NLt.forEach(t),G3o=r(hI," (SqueezeBERT model)"),hI.forEach(t),O3o=i(S),gl=n(S,"LI",{});var uI=s(gl);lue=n(uI,"STRONG",{});var qLt=s(lue);V3o=r(qLt,"t5"),qLt.forEach(t),X3o=r(uI," \u2014 "),DG=n(uI,"A",{href:!0});var jLt=s(DG);z3o=r(jLt,"T5Tokenizer"),jLt.forEach(t),Q3o=r(uI," or "),GG=n(uI,"A",{href:!0});var DLt=s(GG);W3o=r(DLt,"T5TokenizerFast"),DLt.forEach(t),U3o=r(uI," (T5 model)"),uI.forEach(t),H3o=i(S),Du=n(S,"LI",{});var uNe=s(Du);iue=n(uNe,"STRONG",{});var GLt=s(iue);J3o=r(GLt,"tapas"),GLt.forEach(t),Y3o=r(uNe," \u2014 "),OG=n(uNe,"A",{href:!0});var OLt=s(OG);Z3o=r(OLt,"TapasTokenizer"),OLt.forEach(t),K3o=r(uNe," (TAPAS model)"),uNe.forEach(t),e5o=i(S),Gu=n(S,"LI",{});var pNe=s(Gu);due=n(pNe,"STRONG",{});var VLt=s(due);o5o=r(VLt,"tapex"),VLt.forEach(t),r5o=r(pNe," \u2014 "),VG=n(pNe,"A",{href:!0});var XLt=s(VG);t5o=r(XLt,"TapexTokenizer"),XLt.forEach(t),a5o=r(pNe," (TAPEX model)"),pNe.forEach(t),n5o=i(S),Ou=n(S,"LI",{});var _Ne=s(Ou);cue=n(_Ne,"STRONG",{});var zLt=s(cue);s5o=r(zLt,"transfo-xl"),zLt.forEach(t),l5o=r(_Ne," \u2014 "),XG=n(_Ne,"A",{href:!0});var QLt=s(XG);i5o=r(QLt,"TransfoXLTokenizer"),QLt.forEach(t),d5o=r(_Ne," (Transformer-XL model)"),_Ne.forEach(t),c5o=i(S),hl=n(S,"LI",{});var pI=s(hl);mue=n(pI,"STRONG",{});var WLt=s(mue);m5o=r(WLt,"vilt"),WLt.forEach(t),f5o=r(pI," \u2014 "),zG=n(pI,"A",{href:!0});var ULt=s(zG);g5o=r(ULt,"BertTokenizer"),ULt.forEach(t),h5o=r(pI," or "),QG=n(pI,"A",{href:!0});var HLt=s(QG);u5o=r(HLt,"BertTokenizerFast"),HLt.forEach(t),p5o=r(pI," (ViLT model)"),pI.forEach(t),_5o=i(S),ul=n(S,"LI",{});var _I=s(ul);fue=n(_I,"STRONG",{});var JLt=s(fue);b5o=r(JLt,"visual_bert"),JLt.forEach(t),v5o=r(_I," \u2014 "),WG=n(_I,"A",{href:!0});var YLt=s(WG);F5o=r(YLt,"BertTokenizer"),YLt.forEach(t),T5o=r(_I," or "),UG=n(_I,"A",{href:!0});var ZLt=s(UG);M5o=r(ZLt,"BertTokenizerFast"),ZLt.forEach(t),E5o=r(_I," (VisualBERT model)"),_I.forEach(t),C5o=i(S),Vu=n(S,"LI",{});var bNe=s(Vu);gue=n(bNe,"STRONG",{});var KLt=s(gue);w5o=r(KLt,"wav2vec2"),KLt.forEach(t),A5o=r(bNe," \u2014 "),HG=n(bNe,"A",{href:!0});var eyt=s(HG);L5o=r(eyt,"Wav2Vec2CTCTokenizer"),eyt.forEach(t),y5o=r(bNe," (Wav2Vec2 model)"),bNe.forEach(t),x5o=i(S),Xu=n(S,"LI",{});var vNe=s(Xu);hue=n(vNe,"STRONG",{});var oyt=s(hue);$5o=r(oyt,"wav2vec2-conformer"),oyt.forEach(t),k5o=r(vNe," \u2014 "),JG=n(vNe,"A",{href:!0});var ryt=s(JG);S5o=r(ryt,"Wav2Vec2CTCTokenizer"),ryt.forEach(t),R5o=r(vNe," (Wav2Vec2-Conformer model)"),vNe.forEach(t),P5o=i(S),zu=n(S,"LI",{});var FNe=s(zu);uue=n(FNe,"STRONG",{});var tyt=s(uue);B5o=r(tyt,"wav2vec2_phoneme"),tyt.forEach(t),I5o=r(FNe," \u2014 "),YG=n(FNe,"A",{href:!0});var ayt=s(YG);N5o=r(ayt,"Wav2Vec2PhonemeCTCTokenizer"),ayt.forEach(t),q5o=r(FNe," (Wav2Vec2Phoneme model)"),FNe.forEach(t),j5o=i(S),Qu=n(S,"LI",{});var TNe=s(Qu);pue=n(TNe,"STRONG",{});var nyt=s(pue);D5o=r(nyt,"whisper"),nyt.forEach(t),G5o=r(TNe," \u2014 "),ZG=n(TNe,"A",{href:!0});var syt=s(ZG);O5o=r(syt,"WhisperTokenizer"),syt.forEach(t),V5o=r(TNe," (Whisper model)"),TNe.forEach(t),X5o=i(S),pl=n(S,"LI",{});var bI=s(pl);_ue=n(bI,"STRONG",{});var lyt=s(_ue);z5o=r(lyt,"xclip"),lyt.forEach(t),Q5o=r(bI," \u2014 "),KG=n(bI,"A",{href:!0});var iyt=s(KG);W5o=r(iyt,"CLIPTokenizer"),iyt.forEach(t),U5o=r(bI," or "),eO=n(bI,"A",{href:!0});var dyt=s(eO);H5o=r(dyt,"CLIPTokenizerFast"),dyt.forEach(t),J5o=r(bI," (X-CLIP model)"),bI.forEach(t),Y5o=i(S),_l=n(S,"LI",{});var vI=s(_l);bue=n(vI,"STRONG",{});var cyt=s(bue);Z5o=r(cyt,"xglm"),cyt.forEach(t),K5o=r(vI," \u2014 "),oO=n(vI,"A",{href:!0});var myt=s(oO);e0o=r(myt,"XGLMTokenizer"),myt.forEach(t),o0o=r(vI," or "),rO=n(vI,"A",{href:!0});var fyt=s(rO);r0o=r(fyt,"XGLMTokenizerFast"),fyt.forEach(t),t0o=r(vI," (XGLM model)"),vI.forEach(t),a0o=i(S),Wu=n(S,"LI",{});var MNe=s(Wu);vue=n(MNe,"STRONG",{});var gyt=s(vue);n0o=r(gyt,"xlm"),gyt.forEach(t),s0o=r(MNe," \u2014 "),tO=n(MNe,"A",{href:!0});var hyt=s(tO);l0o=r(hyt,"XLMTokenizer"),hyt.forEach(t),i0o=r(MNe," (XLM model)"),MNe.forEach(t),d0o=i(S),Uu=n(S,"LI",{});var ENe=s(Uu);Fue=n(ENe,"STRONG",{});var uyt=s(Fue);c0o=r(uyt,"xlm-prophetnet"),uyt.forEach(t),m0o=r(ENe," \u2014 "),aO=n(ENe,"A",{href:!0});var pyt=s(aO);f0o=r(pyt,"XLMProphetNetTokenizer"),pyt.forEach(t),g0o=r(ENe," (XLM-ProphetNet model)"),ENe.forEach(t),h0o=i(S),bl=n(S,"LI",{});var FI=s(bl);Tue=n(FI,"STRONG",{});var _yt=s(Tue);u0o=r(_yt,"xlm-roberta"),_yt.forEach(t),p0o=r(FI," \u2014 "),nO=n(FI,"A",{href:!0});var byt=s(nO);_0o=r(byt,"XLMRobertaTokenizer"),byt.forEach(t),b0o=r(FI," or "),sO=n(FI,"A",{href:!0});var vyt=s(sO);v0o=r(vyt,"XLMRobertaTokenizerFast"),vyt.forEach(t),F0o=r(FI," (XLM-RoBERTa model)"),FI.forEach(t),T0o=i(S),vl=n(S,"LI",{});var TI=s(vl);Mue=n(TI,"STRONG",{});var Fyt=s(Mue);M0o=r(Fyt,"xlm-roberta-xl"),Fyt.forEach(t),E0o=r(TI," \u2014 "),lO=n(TI,"A",{href:!0});var Tyt=s(lO);C0o=r(Tyt,"XLMRobertaTokenizer"),Tyt.forEach(t),w0o=r(TI," or "),iO=n(TI,"A",{href:!0});var Myt=s(iO);A0o=r(Myt,"XLMRobertaTokenizerFast"),Myt.forEach(t),L0o=r(TI," (XLM-RoBERTa-XL model)"),TI.forEach(t),y0o=i(S),Fl=n(S,"LI",{});var MI=s(Fl);Eue=n(MI,"STRONG",{});var Eyt=s(Eue);x0o=r(Eyt,"xlnet"),Eyt.forEach(t),$0o=r(MI," \u2014 "),dO=n(MI,"A",{href:!0});var Cyt=s(dO);k0o=r(Cyt,"XLNetTokenizer"),Cyt.forEach(t),S0o=r(MI," or "),cO=n(MI,"A",{href:!0});var wyt=s(cO);R0o=r(wyt,"XLNetTokenizerFast"),wyt.forEach(t),P0o=r(MI," (XLNet model)"),MI.forEach(t),B0o=i(S),Tl=n(S,"LI",{});var EI=s(Tl);Cue=n(EI,"STRONG",{});var Ayt=s(Cue);I0o=r(Ayt,"yoso"),Ayt.forEach(t),N0o=r(EI," \u2014 "),mO=n(EI,"A",{href:!0});var Lyt=s(mO);q0o=r(Lyt,"AlbertTokenizer"),Lyt.forEach(t),j0o=r(EI," or "),fO=n(EI,"A",{href:!0});var yyt=s(fO);D0o=r(yyt,"AlbertTokenizerFast"),yyt.forEach(t),G0o=r(EI," (YOSO model)"),EI.forEach(t),S.forEach(t),O0o=i(yl),T(Hu.$$.fragment,yl),yl.forEach(t),V0o=i(Ll),Ju=n(Ll,"DIV",{class:!0});var Cto=s(Ju);T(qx.$$.fragment,Cto),X0o=i(Cto),wue=n(Cto,"P",{});var xyt=s(wue);z0o=r(xyt,"Register a new tokenizer in this mapping."),xyt.forEach(t),Cto.forEach(t),Ll.forEach(t),goo=i(m),Fd=n(m,"H2",{class:!0});var wto=s(Fd);Yu=n(wto,"A",{id:!0,class:!0,href:!0});var $yt=s(Yu);Aue=n($yt,"SPAN",{});var kyt=s(Aue);T(jx.$$.fragment,kyt),kyt.forEach(t),$yt.forEach(t),Q0o=i(wto),Lue=n(wto,"SPAN",{});var Syt=s(Lue);W0o=r(Syt,"AutoFeatureExtractor"),Syt.forEach(t),wto.forEach(t),hoo=i(m),Ro=n(m,"DIV",{class:!0});var xl=s(Ro);T(Dx.$$.fragment,xl),U0o=i(xl),Gx=n(xl,"P",{});var Ato=s(Gx);H0o=r(Ato,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gO=n(Ato,"A",{href:!0});var Ryt=s(gO);J0o=r(Ryt,"AutoFeatureExtractor.from_pretrained()"),Ryt.forEach(t),Y0o=r(Ato," class method."),Ato.forEach(t),Z0o=i(xl),Ox=n(xl,"P",{});var Lto=s(Ox);K0o=r(Lto,"This class cannot be instantiated directly using "),yue=n(Lto,"CODE",{});var Pyt=s(yue);ewo=r(Pyt,"__init__()"),Pyt.forEach(t),owo=r(Lto," (throws an error)."),Lto.forEach(t),rwo=i(xl),Ye=n(xl,"DIV",{class:!0});var Ta=s(Ye);T(Vx.$$.fragment,Ta),two=i(Ta),xue=n(Ta,"P",{});var Byt=s(xue);awo=r(Byt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Byt.forEach(t),nwo=i(Ta),Ka=n(Ta,"P",{});var p8=s(Ka);swo=r(p8,"The feature extractor class to instantiate is selected based on the "),$ue=n(p8,"CODE",{});var Iyt=s($ue);lwo=r(Iyt,"model_type"),Iyt.forEach(t),iwo=r(p8,` property of the config object
(either passed as an argument or loaded from `),kue=n(p8,"CODE",{});var Nyt=s(kue);dwo=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),cwo=r(p8,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sue=n(p8,"CODE",{});var qyt=s(Sue);mwo=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),fwo=r(p8,":"),p8.forEach(t),gwo=i(Ta),z=n(Ta,"UL",{});var W=s(z);Zu=n(W,"LI",{});var CNe=s(Zu);Rue=n(CNe,"STRONG",{});var jyt=s(Rue);hwo=r(jyt,"beit"),jyt.forEach(t),uwo=r(CNe," \u2014 "),hO=n(CNe,"A",{href:!0});var Dyt=s(hO);pwo=r(Dyt,"BeitFeatureExtractor"),Dyt.forEach(t),_wo=r(CNe," (BEiT model)"),CNe.forEach(t),bwo=i(W),Ku=n(W,"LI",{});var wNe=s(Ku);Pue=n(wNe,"STRONG",{});var Gyt=s(Pue);vwo=r(Gyt,"clip"),Gyt.forEach(t),Fwo=r(wNe," \u2014 "),uO=n(wNe,"A",{href:!0});var Oyt=s(uO);Two=r(Oyt,"CLIPFeatureExtractor"),Oyt.forEach(t),Mwo=r(wNe," (CLIP model)"),wNe.forEach(t),Ewo=i(W),ep=n(W,"LI",{});var ANe=s(ep);Bue=n(ANe,"STRONG",{});var Vyt=s(Bue);Cwo=r(Vyt,"conditional_detr"),Vyt.forEach(t),wwo=r(ANe," \u2014 "),pO=n(ANe,"A",{href:!0});var Xyt=s(pO);Awo=r(Xyt,"ConditionalDetrFeatureExtractor"),Xyt.forEach(t),Lwo=r(ANe," (Conditional DETR model)"),ANe.forEach(t),ywo=i(W),op=n(W,"LI",{});var LNe=s(op);Iue=n(LNe,"STRONG",{});var zyt=s(Iue);xwo=r(zyt,"convnext"),zyt.forEach(t),$wo=r(LNe," \u2014 "),_O=n(LNe,"A",{href:!0});var Qyt=s(_O);kwo=r(Qyt,"ConvNextFeatureExtractor"),Qyt.forEach(t),Swo=r(LNe," (ConvNeXT model)"),LNe.forEach(t),Rwo=i(W),rp=n(W,"LI",{});var yNe=s(rp);Nue=n(yNe,"STRONG",{});var Wyt=s(Nue);Pwo=r(Wyt,"cvt"),Wyt.forEach(t),Bwo=r(yNe," \u2014 "),bO=n(yNe,"A",{href:!0});var Uyt=s(bO);Iwo=r(Uyt,"ConvNextFeatureExtractor"),Uyt.forEach(t),Nwo=r(yNe," (CvT model)"),yNe.forEach(t),qwo=i(W),tp=n(W,"LI",{});var xNe=s(tp);que=n(xNe,"STRONG",{});var Hyt=s(que);jwo=r(Hyt,"data2vec-audio"),Hyt.forEach(t),Dwo=r(xNe," \u2014 "),vO=n(xNe,"A",{href:!0});var Jyt=s(vO);Gwo=r(Jyt,"Wav2Vec2FeatureExtractor"),Jyt.forEach(t),Owo=r(xNe," (Data2VecAudio model)"),xNe.forEach(t),Vwo=i(W),ap=n(W,"LI",{});var $Ne=s(ap);jue=n($Ne,"STRONG",{});var Yyt=s(jue);Xwo=r(Yyt,"data2vec-vision"),Yyt.forEach(t),zwo=r($Ne," \u2014 "),FO=n($Ne,"A",{href:!0});var Zyt=s(FO);Qwo=r(Zyt,"BeitFeatureExtractor"),Zyt.forEach(t),Wwo=r($Ne," (Data2VecVision model)"),$Ne.forEach(t),Uwo=i(W),np=n(W,"LI",{});var kNe=s(np);Due=n(kNe,"STRONG",{});var Kyt=s(Due);Hwo=r(Kyt,"deformable_detr"),Kyt.forEach(t),Jwo=r(kNe," \u2014 "),TO=n(kNe,"A",{href:!0});var e8t=s(TO);Ywo=r(e8t,"DeformableDetrFeatureExtractor"),e8t.forEach(t),Zwo=r(kNe," (Deformable DETR model)"),kNe.forEach(t),Kwo=i(W),sp=n(W,"LI",{});var SNe=s(sp);Gue=n(SNe,"STRONG",{});var o8t=s(Gue);eAo=r(o8t,"deit"),o8t.forEach(t),oAo=r(SNe," \u2014 "),MO=n(SNe,"A",{href:!0});var r8t=s(MO);rAo=r(r8t,"DeiTFeatureExtractor"),r8t.forEach(t),tAo=r(SNe," (DeiT model)"),SNe.forEach(t),aAo=i(W),lp=n(W,"LI",{});var RNe=s(lp);Oue=n(RNe,"STRONG",{});var t8t=s(Oue);nAo=r(t8t,"detr"),t8t.forEach(t),sAo=r(RNe," \u2014 "),EO=n(RNe,"A",{href:!0});var a8t=s(EO);lAo=r(a8t,"DetrFeatureExtractor"),a8t.forEach(t),iAo=r(RNe," (DETR model)"),RNe.forEach(t),dAo=i(W),ip=n(W,"LI",{});var PNe=s(ip);Vue=n(PNe,"STRONG",{});var n8t=s(Vue);cAo=r(n8t,"donut"),n8t.forEach(t),mAo=r(PNe," \u2014 "),CO=n(PNe,"A",{href:!0});var s8t=s(CO);fAo=r(s8t,"DonutFeatureExtractor"),s8t.forEach(t),gAo=r(PNe," (Donut model)"),PNe.forEach(t),hAo=i(W),dp=n(W,"LI",{});var BNe=s(dp);Xue=n(BNe,"STRONG",{});var l8t=s(Xue);uAo=r(l8t,"dpt"),l8t.forEach(t),pAo=r(BNe," \u2014 "),wO=n(BNe,"A",{href:!0});var i8t=s(wO);_Ao=r(i8t,"DPTFeatureExtractor"),i8t.forEach(t),bAo=r(BNe," (DPT model)"),BNe.forEach(t),vAo=i(W),cp=n(W,"LI",{});var INe=s(cp);zue=n(INe,"STRONG",{});var d8t=s(zue);FAo=r(d8t,"flava"),d8t.forEach(t),TAo=r(INe," \u2014 "),AO=n(INe,"A",{href:!0});var c8t=s(AO);MAo=r(c8t,"FlavaFeatureExtractor"),c8t.forEach(t),EAo=r(INe," (FLAVA model)"),INe.forEach(t),CAo=i(W),mp=n(W,"LI",{});var NNe=s(mp);Que=n(NNe,"STRONG",{});var m8t=s(Que);wAo=r(m8t,"glpn"),m8t.forEach(t),AAo=r(NNe," \u2014 "),LO=n(NNe,"A",{href:!0});var f8t=s(LO);LAo=r(f8t,"GLPNFeatureExtractor"),f8t.forEach(t),yAo=r(NNe," (GLPN model)"),NNe.forEach(t),xAo=i(W),fp=n(W,"LI",{});var qNe=s(fp);Wue=n(qNe,"STRONG",{});var g8t=s(Wue);$Ao=r(g8t,"groupvit"),g8t.forEach(t),kAo=r(qNe," \u2014 "),yO=n(qNe,"A",{href:!0});var h8t=s(yO);SAo=r(h8t,"CLIPFeatureExtractor"),h8t.forEach(t),RAo=r(qNe," (GroupViT model)"),qNe.forEach(t),PAo=i(W),gp=n(W,"LI",{});var jNe=s(gp);Uue=n(jNe,"STRONG",{});var u8t=s(Uue);BAo=r(u8t,"hubert"),u8t.forEach(t),IAo=r(jNe," \u2014 "),xO=n(jNe,"A",{href:!0});var p8t=s(xO);NAo=r(p8t,"Wav2Vec2FeatureExtractor"),p8t.forEach(t),qAo=r(jNe," (Hubert model)"),jNe.forEach(t),jAo=i(W),hp=n(W,"LI",{});var DNe=s(hp);Hue=n(DNe,"STRONG",{});var _8t=s(Hue);DAo=r(_8t,"imagegpt"),_8t.forEach(t),GAo=r(DNe," \u2014 "),$O=n(DNe,"A",{href:!0});var b8t=s($O);OAo=r(b8t,"ImageGPTFeatureExtractor"),b8t.forEach(t),VAo=r(DNe," (ImageGPT model)"),DNe.forEach(t),XAo=i(W),up=n(W,"LI",{});var GNe=s(up);Jue=n(GNe,"STRONG",{});var v8t=s(Jue);zAo=r(v8t,"layoutlmv2"),v8t.forEach(t),QAo=r(GNe," \u2014 "),kO=n(GNe,"A",{href:!0});var F8t=s(kO);WAo=r(F8t,"LayoutLMv2FeatureExtractor"),F8t.forEach(t),UAo=r(GNe," (LayoutLMv2 model)"),GNe.forEach(t),HAo=i(W),pp=n(W,"LI",{});var ONe=s(pp);Yue=n(ONe,"STRONG",{});var T8t=s(Yue);JAo=r(T8t,"layoutlmv3"),T8t.forEach(t),YAo=r(ONe," \u2014 "),SO=n(ONe,"A",{href:!0});var M8t=s(SO);ZAo=r(M8t,"LayoutLMv3FeatureExtractor"),M8t.forEach(t),KAo=r(ONe," (LayoutLMv3 model)"),ONe.forEach(t),e6o=i(W),_p=n(W,"LI",{});var VNe=s(_p);Zue=n(VNe,"STRONG",{});var E8t=s(Zue);o6o=r(E8t,"levit"),E8t.forEach(t),r6o=r(VNe," \u2014 "),RO=n(VNe,"A",{href:!0});var C8t=s(RO);t6o=r(C8t,"LevitFeatureExtractor"),C8t.forEach(t),a6o=r(VNe," (LeViT model)"),VNe.forEach(t),n6o=i(W),bp=n(W,"LI",{});var XNe=s(bp);Kue=n(XNe,"STRONG",{});var w8t=s(Kue);s6o=r(w8t,"maskformer"),w8t.forEach(t),l6o=r(XNe," \u2014 "),PO=n(XNe,"A",{href:!0});var A8t=s(PO);i6o=r(A8t,"MaskFormerFeatureExtractor"),A8t.forEach(t),d6o=r(XNe," (MaskFormer model)"),XNe.forEach(t),c6o=i(W),vp=n(W,"LI",{});var zNe=s(vp);epe=n(zNe,"STRONG",{});var L8t=s(epe);m6o=r(L8t,"mctct"),L8t.forEach(t),f6o=r(zNe," \u2014 "),BO=n(zNe,"A",{href:!0});var y8t=s(BO);g6o=r(y8t,"MCTCTFeatureExtractor"),y8t.forEach(t),h6o=r(zNe," (M-CTC-T model)"),zNe.forEach(t),u6o=i(W),Fp=n(W,"LI",{});var QNe=s(Fp);ope=n(QNe,"STRONG",{});var x8t=s(ope);p6o=r(x8t,"mobilevit"),x8t.forEach(t),_6o=r(QNe," \u2014 "),IO=n(QNe,"A",{href:!0});var $8t=s(IO);b6o=r($8t,"MobileViTFeatureExtractor"),$8t.forEach(t),v6o=r(QNe," (MobileViT model)"),QNe.forEach(t),F6o=i(W),Tp=n(W,"LI",{});var WNe=s(Tp);rpe=n(WNe,"STRONG",{});var k8t=s(rpe);T6o=r(k8t,"owlvit"),k8t.forEach(t),M6o=r(WNe," \u2014 "),NO=n(WNe,"A",{href:!0});var S8t=s(NO);E6o=r(S8t,"OwlViTFeatureExtractor"),S8t.forEach(t),C6o=r(WNe," (OWL-ViT model)"),WNe.forEach(t),w6o=i(W),Mp=n(W,"LI",{});var UNe=s(Mp);tpe=n(UNe,"STRONG",{});var R8t=s(tpe);A6o=r(R8t,"perceiver"),R8t.forEach(t),L6o=r(UNe," \u2014 "),qO=n(UNe,"A",{href:!0});var P8t=s(qO);y6o=r(P8t,"PerceiverFeatureExtractor"),P8t.forEach(t),x6o=r(UNe," (Perceiver model)"),UNe.forEach(t),$6o=i(W),Ep=n(W,"LI",{});var HNe=s(Ep);ape=n(HNe,"STRONG",{});var B8t=s(ape);k6o=r(B8t,"poolformer"),B8t.forEach(t),S6o=r(HNe," \u2014 "),jO=n(HNe,"A",{href:!0});var I8t=s(jO);R6o=r(I8t,"PoolFormerFeatureExtractor"),I8t.forEach(t),P6o=r(HNe," (PoolFormer model)"),HNe.forEach(t),B6o=i(W),Cp=n(W,"LI",{});var JNe=s(Cp);npe=n(JNe,"STRONG",{});var N8t=s(npe);I6o=r(N8t,"regnet"),N8t.forEach(t),N6o=r(JNe," \u2014 "),DO=n(JNe,"A",{href:!0});var q8t=s(DO);q6o=r(q8t,"ConvNextFeatureExtractor"),q8t.forEach(t),j6o=r(JNe," (RegNet model)"),JNe.forEach(t),D6o=i(W),wp=n(W,"LI",{});var YNe=s(wp);spe=n(YNe,"STRONG",{});var j8t=s(spe);G6o=r(j8t,"resnet"),j8t.forEach(t),O6o=r(YNe," \u2014 "),GO=n(YNe,"A",{href:!0});var D8t=s(GO);V6o=r(D8t,"ConvNextFeatureExtractor"),D8t.forEach(t),X6o=r(YNe," (ResNet model)"),YNe.forEach(t),z6o=i(W),Ap=n(W,"LI",{});var ZNe=s(Ap);lpe=n(ZNe,"STRONG",{});var G8t=s(lpe);Q6o=r(G8t,"segformer"),G8t.forEach(t),W6o=r(ZNe," \u2014 "),OO=n(ZNe,"A",{href:!0});var O8t=s(OO);U6o=r(O8t,"SegformerFeatureExtractor"),O8t.forEach(t),H6o=r(ZNe," (SegFormer model)"),ZNe.forEach(t),J6o=i(W),Lp=n(W,"LI",{});var KNe=s(Lp);ipe=n(KNe,"STRONG",{});var V8t=s(ipe);Y6o=r(V8t,"speech_to_text"),V8t.forEach(t),Z6o=r(KNe," \u2014 "),VO=n(KNe,"A",{href:!0});var X8t=s(VO);K6o=r(X8t,"Speech2TextFeatureExtractor"),X8t.forEach(t),e7o=r(KNe," (Speech2Text model)"),KNe.forEach(t),o7o=i(W),yp=n(W,"LI",{});var eqe=s(yp);dpe=n(eqe,"STRONG",{});var z8t=s(dpe);r7o=r(z8t,"swin"),z8t.forEach(t),t7o=r(eqe," \u2014 "),XO=n(eqe,"A",{href:!0});var Q8t=s(XO);a7o=r(Q8t,"ViTFeatureExtractor"),Q8t.forEach(t),n7o=r(eqe," (Swin Transformer model)"),eqe.forEach(t),s7o=i(W),xp=n(W,"LI",{});var oqe=s(xp);cpe=n(oqe,"STRONG",{});var W8t=s(cpe);l7o=r(W8t,"swinv2"),W8t.forEach(t),i7o=r(oqe," \u2014 "),zO=n(oqe,"A",{href:!0});var U8t=s(zO);d7o=r(U8t,"ViTFeatureExtractor"),U8t.forEach(t),c7o=r(oqe," (Swin Transformer V2 model)"),oqe.forEach(t),m7o=i(W),$p=n(W,"LI",{});var rqe=s($p);mpe=n(rqe,"STRONG",{});var H8t=s(mpe);f7o=r(H8t,"van"),H8t.forEach(t),g7o=r(rqe," \u2014 "),QO=n(rqe,"A",{href:!0});var J8t=s(QO);h7o=r(J8t,"ConvNextFeatureExtractor"),J8t.forEach(t),u7o=r(rqe," (VAN model)"),rqe.forEach(t),p7o=i(W),kp=n(W,"LI",{});var tqe=s(kp);fpe=n(tqe,"STRONG",{});var Y8t=s(fpe);_7o=r(Y8t,"videomae"),Y8t.forEach(t),b7o=r(tqe," \u2014 "),WO=n(tqe,"A",{href:!0});var Z8t=s(WO);v7o=r(Z8t,"VideoMAEFeatureExtractor"),Z8t.forEach(t),F7o=r(tqe," (VideoMAE model)"),tqe.forEach(t),T7o=i(W),Sp=n(W,"LI",{});var aqe=s(Sp);gpe=n(aqe,"STRONG",{});var K8t=s(gpe);M7o=r(K8t,"vilt"),K8t.forEach(t),E7o=r(aqe," \u2014 "),UO=n(aqe,"A",{href:!0});var e9t=s(UO);C7o=r(e9t,"ViltFeatureExtractor"),e9t.forEach(t),w7o=r(aqe," (ViLT model)"),aqe.forEach(t),A7o=i(W),Rp=n(W,"LI",{});var nqe=s(Rp);hpe=n(nqe,"STRONG",{});var o9t=s(hpe);L7o=r(o9t,"vit"),o9t.forEach(t),y7o=r(nqe," \u2014 "),HO=n(nqe,"A",{href:!0});var r9t=s(HO);x7o=r(r9t,"ViTFeatureExtractor"),r9t.forEach(t),$7o=r(nqe," (ViT model)"),nqe.forEach(t),k7o=i(W),Pp=n(W,"LI",{});var sqe=s(Pp);upe=n(sqe,"STRONG",{});var t9t=s(upe);S7o=r(t9t,"vit_mae"),t9t.forEach(t),R7o=r(sqe," \u2014 "),JO=n(sqe,"A",{href:!0});var a9t=s(JO);P7o=r(a9t,"ViTFeatureExtractor"),a9t.forEach(t),B7o=r(sqe," (ViTMAE model)"),sqe.forEach(t),I7o=i(W),Bp=n(W,"LI",{});var lqe=s(Bp);ppe=n(lqe,"STRONG",{});var n9t=s(ppe);N7o=r(n9t,"vit_msn"),n9t.forEach(t),q7o=r(lqe," \u2014 "),YO=n(lqe,"A",{href:!0});var s9t=s(YO);j7o=r(s9t,"ViTFeatureExtractor"),s9t.forEach(t),D7o=r(lqe," (ViTMSN model)"),lqe.forEach(t),G7o=i(W),Ip=n(W,"LI",{});var iqe=s(Ip);_pe=n(iqe,"STRONG",{});var l9t=s(_pe);O7o=r(l9t,"wav2vec2"),l9t.forEach(t),V7o=r(iqe," \u2014 "),ZO=n(iqe,"A",{href:!0});var i9t=s(ZO);X7o=r(i9t,"Wav2Vec2FeatureExtractor"),i9t.forEach(t),z7o=r(iqe," (Wav2Vec2 model)"),iqe.forEach(t),Q7o=i(W),Np=n(W,"LI",{});var dqe=s(Np);bpe=n(dqe,"STRONG",{});var d9t=s(bpe);W7o=r(d9t,"wav2vec2-conformer"),d9t.forEach(t),U7o=r(dqe," \u2014 "),KO=n(dqe,"A",{href:!0});var c9t=s(KO);H7o=r(c9t,"Wav2Vec2FeatureExtractor"),c9t.forEach(t),J7o=r(dqe," (Wav2Vec2-Conformer model)"),dqe.forEach(t),Y7o=i(W),qp=n(W,"LI",{});var cqe=s(qp);vpe=n(cqe,"STRONG",{});var m9t=s(vpe);Z7o=r(m9t,"whisper"),m9t.forEach(t),K7o=r(cqe," \u2014 "),eV=n(cqe,"A",{href:!0});var f9t=s(eV);eLo=r(f9t,"WhisperFeatureExtractor"),f9t.forEach(t),oLo=r(cqe," (Whisper model)"),cqe.forEach(t),rLo=i(W),jp=n(W,"LI",{});var mqe=s(jp);Fpe=n(mqe,"STRONG",{});var g9t=s(Fpe);tLo=r(g9t,"xclip"),g9t.forEach(t),aLo=r(mqe," \u2014 "),oV=n(mqe,"A",{href:!0});var h9t=s(oV);nLo=r(h9t,"CLIPFeatureExtractor"),h9t.forEach(t),sLo=r(mqe," (X-CLIP model)"),mqe.forEach(t),lLo=i(W),Dp=n(W,"LI",{});var fqe=s(Dp);Tpe=n(fqe,"STRONG",{});var u9t=s(Tpe);iLo=r(u9t,"yolos"),u9t.forEach(t),dLo=r(fqe," \u2014 "),rV=n(fqe,"A",{href:!0});var p9t=s(rV);cLo=r(p9t,"YolosFeatureExtractor"),p9t.forEach(t),mLo=r(fqe," (YOLOS model)"),fqe.forEach(t),W.forEach(t),fLo=i(Ta),T(Gp.$$.fragment,Ta),gLo=i(Ta),T(Op.$$.fragment,Ta),Ta.forEach(t),hLo=i(xl),Vp=n(xl,"DIV",{class:!0});var yto=s(Vp);T(Xx.$$.fragment,yto),uLo=i(yto),Mpe=n(yto,"P",{});var _9t=s(Mpe);pLo=r(_9t,"Register a new feature extractor for this class."),_9t.forEach(t),yto.forEach(t),xl.forEach(t),uoo=i(m),Td=n(m,"H2",{class:!0});var xto=s(Td);Xp=n(xto,"A",{id:!0,class:!0,href:!0});var b9t=s(Xp);Epe=n(b9t,"SPAN",{});var v9t=s(Epe);T(zx.$$.fragment,v9t),v9t.forEach(t),b9t.forEach(t),_Lo=i(xto),Cpe=n(xto,"SPAN",{});var F9t=s(Cpe);bLo=r(F9t,"AutoProcessor"),F9t.forEach(t),xto.forEach(t),poo=i(m),Po=n(m,"DIV",{class:!0});var $l=s(Po);T(Qx.$$.fragment,$l),vLo=i($l),Wx=n($l,"P",{});var $to=s(Wx);FLo=r($to,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tV=n($to,"A",{href:!0});var T9t=s(tV);TLo=r(T9t,"AutoProcessor.from_pretrained()"),T9t.forEach(t),MLo=r($to," class method."),$to.forEach(t),ELo=i($l),Ux=n($l,"P",{});var kto=s(Ux);CLo=r(kto,"This class cannot be instantiated directly using "),wpe=n(kto,"CODE",{});var M9t=s(wpe);wLo=r(M9t,"__init__()"),M9t.forEach(t),ALo=r(kto," (throws an error)."),kto.forEach(t),LLo=i($l),Ze=n($l,"DIV",{class:!0});var Ma=s(Ze);T(Hx.$$.fragment,Ma),yLo=i(Ma),Ape=n(Ma,"P",{});var E9t=s(Ape);xLo=r(E9t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),E9t.forEach(t),$Lo=i(Ma),Md=n(Ma,"P",{});var Nie=s(Md);kLo=r(Nie,"The processor class to instantiate is selected based on the "),Lpe=n(Nie,"CODE",{});var C9t=s(Lpe);SLo=r(C9t,"model_type"),C9t.forEach(t),RLo=r(Nie,` property of the config object (either
passed as an argument or loaded from `),ype=n(Nie,"CODE",{});var w9t=s(ype);PLo=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),BLo=r(Nie," if possible):"),Nie.forEach(t),ILo=i(Ma),se=n(Ma,"UL",{});var ie=s(se);zp=n(ie,"LI",{});var gqe=s(zp);xpe=n(gqe,"STRONG",{});var A9t=s(xpe);NLo=r(A9t,"clip"),A9t.forEach(t),qLo=r(gqe," \u2014 "),aV=n(gqe,"A",{href:!0});var L9t=s(aV);jLo=r(L9t,"CLIPProcessor"),L9t.forEach(t),DLo=r(gqe," (CLIP model)"),gqe.forEach(t),GLo=i(ie),Qp=n(ie,"LI",{});var hqe=s(Qp);$pe=n(hqe,"STRONG",{});var y9t=s($pe);OLo=r(y9t,"donut"),y9t.forEach(t),VLo=r(hqe," \u2014 "),nV=n(hqe,"A",{href:!0});var x9t=s(nV);XLo=r(x9t,"DonutProcessor"),x9t.forEach(t),zLo=r(hqe," (Donut model)"),hqe.forEach(t),QLo=i(ie),Wp=n(ie,"LI",{});var uqe=s(Wp);kpe=n(uqe,"STRONG",{});var $9t=s(kpe);WLo=r($9t,"flava"),$9t.forEach(t),ULo=r(uqe," \u2014 "),sV=n(uqe,"A",{href:!0});var k9t=s(sV);HLo=r(k9t,"FlavaProcessor"),k9t.forEach(t),JLo=r(uqe," (FLAVA model)"),uqe.forEach(t),YLo=i(ie),Up=n(ie,"LI",{});var pqe=s(Up);Spe=n(pqe,"STRONG",{});var S9t=s(Spe);ZLo=r(S9t,"groupvit"),S9t.forEach(t),KLo=r(pqe," \u2014 "),lV=n(pqe,"A",{href:!0});var R9t=s(lV);eyo=r(R9t,"CLIPProcessor"),R9t.forEach(t),oyo=r(pqe," (GroupViT model)"),pqe.forEach(t),ryo=i(ie),Hp=n(ie,"LI",{});var _qe=s(Hp);Rpe=n(_qe,"STRONG",{});var P9t=s(Rpe);tyo=r(P9t,"layoutlmv2"),P9t.forEach(t),ayo=r(_qe," \u2014 "),iV=n(_qe,"A",{href:!0});var B9t=s(iV);nyo=r(B9t,"LayoutLMv2Processor"),B9t.forEach(t),syo=r(_qe," (LayoutLMv2 model)"),_qe.forEach(t),lyo=i(ie),Jp=n(ie,"LI",{});var bqe=s(Jp);Ppe=n(bqe,"STRONG",{});var I9t=s(Ppe);iyo=r(I9t,"layoutlmv3"),I9t.forEach(t),dyo=r(bqe," \u2014 "),dV=n(bqe,"A",{href:!0});var N9t=s(dV);cyo=r(N9t,"LayoutLMv3Processor"),N9t.forEach(t),myo=r(bqe," (LayoutLMv3 model)"),bqe.forEach(t),fyo=i(ie),Yp=n(ie,"LI",{});var vqe=s(Yp);Bpe=n(vqe,"STRONG",{});var q9t=s(Bpe);gyo=r(q9t,"layoutxlm"),q9t.forEach(t),hyo=r(vqe," \u2014 "),cV=n(vqe,"A",{href:!0});var j9t=s(cV);uyo=r(j9t,"LayoutXLMProcessor"),j9t.forEach(t),pyo=r(vqe," (LayoutXLM model)"),vqe.forEach(t),_yo=i(ie),Zp=n(ie,"LI",{});var Fqe=s(Zp);Ipe=n(Fqe,"STRONG",{});var D9t=s(Ipe);byo=r(D9t,"markuplm"),D9t.forEach(t),vyo=r(Fqe," \u2014 "),mV=n(Fqe,"A",{href:!0});var G9t=s(mV);Fyo=r(G9t,"MarkupLMProcessor"),G9t.forEach(t),Tyo=r(Fqe," (MarkupLM model)"),Fqe.forEach(t),Myo=i(ie),Kp=n(ie,"LI",{});var Tqe=s(Kp);Npe=n(Tqe,"STRONG",{});var O9t=s(Npe);Eyo=r(O9t,"owlvit"),O9t.forEach(t),Cyo=r(Tqe," \u2014 "),fV=n(Tqe,"A",{href:!0});var V9t=s(fV);wyo=r(V9t,"OwlViTProcessor"),V9t.forEach(t),Ayo=r(Tqe," (OWL-ViT model)"),Tqe.forEach(t),Lyo=i(ie),e_=n(ie,"LI",{});var Mqe=s(e_);qpe=n(Mqe,"STRONG",{});var X9t=s(qpe);yyo=r(X9t,"sew"),X9t.forEach(t),xyo=r(Mqe," \u2014 "),gV=n(Mqe,"A",{href:!0});var z9t=s(gV);$yo=r(z9t,"Wav2Vec2Processor"),z9t.forEach(t),kyo=r(Mqe," (SEW model)"),Mqe.forEach(t),Syo=i(ie),o_=n(ie,"LI",{});var Eqe=s(o_);jpe=n(Eqe,"STRONG",{});var Q9t=s(jpe);Ryo=r(Q9t,"sew-d"),Q9t.forEach(t),Pyo=r(Eqe," \u2014 "),hV=n(Eqe,"A",{href:!0});var W9t=s(hV);Byo=r(W9t,"Wav2Vec2Processor"),W9t.forEach(t),Iyo=r(Eqe," (SEW-D model)"),Eqe.forEach(t),Nyo=i(ie),r_=n(ie,"LI",{});var Cqe=s(r_);Dpe=n(Cqe,"STRONG",{});var U9t=s(Dpe);qyo=r(U9t,"speech_to_text"),U9t.forEach(t),jyo=r(Cqe," \u2014 "),uV=n(Cqe,"A",{href:!0});var H9t=s(uV);Dyo=r(H9t,"Speech2TextProcessor"),H9t.forEach(t),Gyo=r(Cqe," (Speech2Text model)"),Cqe.forEach(t),Oyo=i(ie),t_=n(ie,"LI",{});var wqe=s(t_);Gpe=n(wqe,"STRONG",{});var J9t=s(Gpe);Vyo=r(J9t,"speech_to_text_2"),J9t.forEach(t),Xyo=r(wqe," \u2014 "),pV=n(wqe,"A",{href:!0});var Y9t=s(pV);zyo=r(Y9t,"Speech2Text2Processor"),Y9t.forEach(t),Qyo=r(wqe," (Speech2Text2 model)"),wqe.forEach(t),Wyo=i(ie),a_=n(ie,"LI",{});var Aqe=s(a_);Ope=n(Aqe,"STRONG",{});var Z9t=s(Ope);Uyo=r(Z9t,"trocr"),Z9t.forEach(t),Hyo=r(Aqe," \u2014 "),_V=n(Aqe,"A",{href:!0});var K9t=s(_V);Jyo=r(K9t,"TrOCRProcessor"),K9t.forEach(t),Yyo=r(Aqe," (TrOCR model)"),Aqe.forEach(t),Zyo=i(ie),n_=n(ie,"LI",{});var Lqe=s(n_);Vpe=n(Lqe,"STRONG",{});var ext=s(Vpe);Kyo=r(ext,"unispeech"),ext.forEach(t),e8o=r(Lqe," \u2014 "),bV=n(Lqe,"A",{href:!0});var oxt=s(bV);o8o=r(oxt,"Wav2Vec2Processor"),oxt.forEach(t),r8o=r(Lqe," (UniSpeech model)"),Lqe.forEach(t),t8o=i(ie),s_=n(ie,"LI",{});var yqe=s(s_);Xpe=n(yqe,"STRONG",{});var rxt=s(Xpe);a8o=r(rxt,"unispeech-sat"),rxt.forEach(t),n8o=r(yqe," \u2014 "),vV=n(yqe,"A",{href:!0});var txt=s(vV);s8o=r(txt,"Wav2Vec2Processor"),txt.forEach(t),l8o=r(yqe," (UniSpeechSat model)"),yqe.forEach(t),i8o=i(ie),l_=n(ie,"LI",{});var xqe=s(l_);zpe=n(xqe,"STRONG",{});var axt=s(zpe);d8o=r(axt,"vilt"),axt.forEach(t),c8o=r(xqe," \u2014 "),FV=n(xqe,"A",{href:!0});var nxt=s(FV);m8o=r(nxt,"ViltProcessor"),nxt.forEach(t),f8o=r(xqe," (ViLT model)"),xqe.forEach(t),g8o=i(ie),i_=n(ie,"LI",{});var $qe=s(i_);Qpe=n($qe,"STRONG",{});var sxt=s(Qpe);h8o=r(sxt,"vision-text-dual-encoder"),sxt.forEach(t),u8o=r($qe," \u2014 "),TV=n($qe,"A",{href:!0});var lxt=s(TV);p8o=r(lxt,"VisionTextDualEncoderProcessor"),lxt.forEach(t),_8o=r($qe," (VisionTextDualEncoder model)"),$qe.forEach(t),b8o=i(ie),d_=n(ie,"LI",{});var kqe=s(d_);Wpe=n(kqe,"STRONG",{});var ixt=s(Wpe);v8o=r(ixt,"wav2vec2"),ixt.forEach(t),F8o=r(kqe," \u2014 "),MV=n(kqe,"A",{href:!0});var dxt=s(MV);T8o=r(dxt,"Wav2Vec2Processor"),dxt.forEach(t),M8o=r(kqe," (Wav2Vec2 model)"),kqe.forEach(t),E8o=i(ie),c_=n(ie,"LI",{});var Sqe=s(c_);Upe=n(Sqe,"STRONG",{});var cxt=s(Upe);C8o=r(cxt,"wav2vec2-conformer"),cxt.forEach(t),w8o=r(Sqe," \u2014 "),EV=n(Sqe,"A",{href:!0});var mxt=s(EV);A8o=r(mxt,"Wav2Vec2Processor"),mxt.forEach(t),L8o=r(Sqe," (Wav2Vec2-Conformer model)"),Sqe.forEach(t),y8o=i(ie),m_=n(ie,"LI",{});var Rqe=s(m_);Hpe=n(Rqe,"STRONG",{});var fxt=s(Hpe);x8o=r(fxt,"wavlm"),fxt.forEach(t),$8o=r(Rqe," \u2014 "),CV=n(Rqe,"A",{href:!0});var gxt=s(CV);k8o=r(gxt,"Wav2Vec2Processor"),gxt.forEach(t),S8o=r(Rqe," (WavLM model)"),Rqe.forEach(t),R8o=i(ie),f_=n(ie,"LI",{});var Pqe=s(f_);Jpe=n(Pqe,"STRONG",{});var hxt=s(Jpe);P8o=r(hxt,"whisper"),hxt.forEach(t),B8o=r(Pqe," \u2014 "),wV=n(Pqe,"A",{href:!0});var uxt=s(wV);I8o=r(uxt,"WhisperProcessor"),uxt.forEach(t),N8o=r(Pqe," (Whisper model)"),Pqe.forEach(t),q8o=i(ie),g_=n(ie,"LI",{});var Bqe=s(g_);Ype=n(Bqe,"STRONG",{});var pxt=s(Ype);j8o=r(pxt,"xclip"),pxt.forEach(t),D8o=r(Bqe," \u2014 "),AV=n(Bqe,"A",{href:!0});var _xt=s(AV);G8o=r(_xt,"CLIPProcessor"),_xt.forEach(t),O8o=r(Bqe," (X-CLIP model)"),Bqe.forEach(t),ie.forEach(t),V8o=i(Ma),T(h_.$$.fragment,Ma),X8o=i(Ma),T(u_.$$.fragment,Ma),Ma.forEach(t),z8o=i($l),p_=n($l,"DIV",{class:!0});var Sto=s(p_);T(Jx.$$.fragment,Sto),Q8o=i(Sto),Zpe=n(Sto,"P",{});var bxt=s(Zpe);W8o=r(bxt,"Register a new processor for this class."),bxt.forEach(t),Sto.forEach(t),$l.forEach(t),_oo=i(m),Ed=n(m,"H2",{class:!0});var Rto=s(Ed);__=n(Rto,"A",{id:!0,class:!0,href:!0});var vxt=s(__);Kpe=n(vxt,"SPAN",{});var Fxt=s(Kpe);T(Yx.$$.fragment,Fxt),Fxt.forEach(t),vxt.forEach(t),U8o=i(Rto),e_e=n(Rto,"SPAN",{});var Txt=s(e_e);H8o=r(Txt,"AutoModel"),Txt.forEach(t),Rto.forEach(t),boo=i(m),Bo=n(m,"DIV",{class:!0});var kl=s(Bo);T(Zx.$$.fragment,kl),J8o=i(kl),Cd=n(kl,"P",{});var qie=s(Cd);Y8o=r(qie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LV=n(qie,"A",{href:!0});var Mxt=s(LV);Z8o=r(Mxt,"from_pretrained()"),Mxt.forEach(t),K8o=r(qie," class method or the "),yV=n(qie,"A",{href:!0});var Ext=s(yV);e9o=r(Ext,"from_config()"),Ext.forEach(t),o9o=r(qie,` class
method.`),qie.forEach(t),r9o=i(kl),Kx=n(kl,"P",{});var Pto=s(Kx);t9o=r(Pto,"This class cannot be instantiated directly using "),o_e=n(Pto,"CODE",{});var Cxt=s(o_e);a9o=r(Cxt,"__init__()"),Cxt.forEach(t),n9o=r(Pto," (throws an error)."),Pto.forEach(t),s9o=i(kl),vt=n(kl,"DIV",{class:!0});var _8=s(vt);T(e$.$$.fragment,_8),l9o=i(_8),r_e=n(_8,"P",{});var wxt=s(r_e);i9o=r(wxt,"Instantiates one of the base model classes of the library from a configuration."),wxt.forEach(t),d9o=i(_8),wd=n(_8,"P",{});var jie=s(wd);c9o=r(jie,`Note:
Loading a model from its configuration file does `),t_e=n(jie,"STRONG",{});var Axt=s(t_e);m9o=r(Axt,"not"),Axt.forEach(t),f9o=r(jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(jie,"A",{href:!0});var Lxt=s(xV);g9o=r(Lxt,"from_pretrained()"),Lxt.forEach(t),h9o=r(jie," to load the model weights."),jie.forEach(t),u9o=i(_8),T(b_.$$.fragment,_8),_8.forEach(t),p9o=i(kl),Ke=n(kl,"DIV",{class:!0});var Ea=s(Ke);T(o$.$$.fragment,Ea),_9o=i(Ea),a_e=n(Ea,"P",{});var yxt=s(a_e);b9o=r(yxt,"Instantiate one of the base model classes of the library from a pretrained model."),yxt.forEach(t),v9o=i(Ea),en=n(Ea,"P",{});var b8=s(en);F9o=r(b8,"The model class to instantiate is selected based on the "),n_e=n(b8,"CODE",{});var xxt=s(n_e);T9o=r(xxt,"model_type"),xxt.forEach(t),M9o=r(b8,` property of the config object (either
passed as an argument or loaded from `),s_e=n(b8,"CODE",{});var $xt=s(s_e);E9o=r($xt,"pretrained_model_name_or_path"),$xt.forEach(t),C9o=r(b8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(b8,"CODE",{});var kxt=s(l_e);w9o=r(kxt,"pretrained_model_name_or_path"),kxt.forEach(t),A9o=r(b8,":"),b8.forEach(t),L9o=i(Ea),y=n(Ea,"UL",{});var x=s(y);v_=n(x,"LI",{});var Iqe=s(v_);i_e=n(Iqe,"STRONG",{});var Sxt=s(i_e);y9o=r(Sxt,"albert"),Sxt.forEach(t),x9o=r(Iqe," \u2014 "),$V=n(Iqe,"A",{href:!0});var Rxt=s($V);$9o=r(Rxt,"AlbertModel"),Rxt.forEach(t),k9o=r(Iqe," (ALBERT model)"),Iqe.forEach(t),S9o=i(x),F_=n(x,"LI",{});var Nqe=s(F_);d_e=n(Nqe,"STRONG",{});var Pxt=s(d_e);R9o=r(Pxt,"bart"),Pxt.forEach(t),P9o=r(Nqe," \u2014 "),kV=n(Nqe,"A",{href:!0});var Bxt=s(kV);B9o=r(Bxt,"BartModel"),Bxt.forEach(t),I9o=r(Nqe," (BART model)"),Nqe.forEach(t),N9o=i(x),T_=n(x,"LI",{});var qqe=s(T_);c_e=n(qqe,"STRONG",{});var Ixt=s(c_e);q9o=r(Ixt,"beit"),Ixt.forEach(t),j9o=r(qqe," \u2014 "),SV=n(qqe,"A",{href:!0});var Nxt=s(SV);D9o=r(Nxt,"BeitModel"),Nxt.forEach(t),G9o=r(qqe," (BEiT model)"),qqe.forEach(t),O9o=i(x),M_=n(x,"LI",{});var jqe=s(M_);m_e=n(jqe,"STRONG",{});var qxt=s(m_e);V9o=r(qxt,"bert"),qxt.forEach(t),X9o=r(jqe," \u2014 "),RV=n(jqe,"A",{href:!0});var jxt=s(RV);z9o=r(jxt,"BertModel"),jxt.forEach(t),Q9o=r(jqe," (BERT model)"),jqe.forEach(t),W9o=i(x),E_=n(x,"LI",{});var Dqe=s(E_);f_e=n(Dqe,"STRONG",{});var Dxt=s(f_e);U9o=r(Dxt,"bert-generation"),Dxt.forEach(t),H9o=r(Dqe," \u2014 "),PV=n(Dqe,"A",{href:!0});var Gxt=s(PV);J9o=r(Gxt,"BertGenerationEncoder"),Gxt.forEach(t),Y9o=r(Dqe," (Bert Generation model)"),Dqe.forEach(t),Z9o=i(x),C_=n(x,"LI",{});var Gqe=s(C_);g_e=n(Gqe,"STRONG",{});var Oxt=s(g_e);K9o=r(Oxt,"big_bird"),Oxt.forEach(t),exo=r(Gqe," \u2014 "),BV=n(Gqe,"A",{href:!0});var Vxt=s(BV);oxo=r(Vxt,"BigBirdModel"),Vxt.forEach(t),rxo=r(Gqe," (BigBird model)"),Gqe.forEach(t),txo=i(x),w_=n(x,"LI",{});var Oqe=s(w_);h_e=n(Oqe,"STRONG",{});var Xxt=s(h_e);axo=r(Xxt,"bigbird_pegasus"),Xxt.forEach(t),nxo=r(Oqe," \u2014 "),IV=n(Oqe,"A",{href:!0});var zxt=s(IV);sxo=r(zxt,"BigBirdPegasusModel"),zxt.forEach(t),lxo=r(Oqe," (BigBird-Pegasus model)"),Oqe.forEach(t),ixo=i(x),A_=n(x,"LI",{});var Vqe=s(A_);u_e=n(Vqe,"STRONG",{});var Qxt=s(u_e);dxo=r(Qxt,"blenderbot"),Qxt.forEach(t),cxo=r(Vqe," \u2014 "),NV=n(Vqe,"A",{href:!0});var Wxt=s(NV);mxo=r(Wxt,"BlenderbotModel"),Wxt.forEach(t),fxo=r(Vqe," (Blenderbot model)"),Vqe.forEach(t),gxo=i(x),L_=n(x,"LI",{});var Xqe=s(L_);p_e=n(Xqe,"STRONG",{});var Uxt=s(p_e);hxo=r(Uxt,"blenderbot-small"),Uxt.forEach(t),uxo=r(Xqe," \u2014 "),qV=n(Xqe,"A",{href:!0});var Hxt=s(qV);pxo=r(Hxt,"BlenderbotSmallModel"),Hxt.forEach(t),_xo=r(Xqe," (BlenderbotSmall model)"),Xqe.forEach(t),bxo=i(x),y_=n(x,"LI",{});var zqe=s(y_);__e=n(zqe,"STRONG",{});var Jxt=s(__e);vxo=r(Jxt,"bloom"),Jxt.forEach(t),Fxo=r(zqe," \u2014 "),jV=n(zqe,"A",{href:!0});var Yxt=s(jV);Txo=r(Yxt,"BloomModel"),Yxt.forEach(t),Mxo=r(zqe," (BLOOM model)"),zqe.forEach(t),Exo=i(x),x_=n(x,"LI",{});var Qqe=s(x_);b_e=n(Qqe,"STRONG",{});var Zxt=s(b_e);Cxo=r(Zxt,"camembert"),Zxt.forEach(t),wxo=r(Qqe," \u2014 "),DV=n(Qqe,"A",{href:!0});var Kxt=s(DV);Axo=r(Kxt,"CamembertModel"),Kxt.forEach(t),Lxo=r(Qqe," (CamemBERT model)"),Qqe.forEach(t),yxo=i(x),$_=n(x,"LI",{});var Wqe=s($_);v_e=n(Wqe,"STRONG",{});var e$t=s(v_e);xxo=r(e$t,"canine"),e$t.forEach(t),$xo=r(Wqe," \u2014 "),GV=n(Wqe,"A",{href:!0});var o$t=s(GV);kxo=r(o$t,"CanineModel"),o$t.forEach(t),Sxo=r(Wqe," (CANINE model)"),Wqe.forEach(t),Rxo=i(x),k_=n(x,"LI",{});var Uqe=s(k_);F_e=n(Uqe,"STRONG",{});var r$t=s(F_e);Pxo=r(r$t,"clip"),r$t.forEach(t),Bxo=r(Uqe," \u2014 "),OV=n(Uqe,"A",{href:!0});var t$t=s(OV);Ixo=r(t$t,"CLIPModel"),t$t.forEach(t),Nxo=r(Uqe," (CLIP model)"),Uqe.forEach(t),qxo=i(x),S_=n(x,"LI",{});var Hqe=s(S_);T_e=n(Hqe,"STRONG",{});var a$t=s(T_e);jxo=r(a$t,"codegen"),a$t.forEach(t),Dxo=r(Hqe," \u2014 "),VV=n(Hqe,"A",{href:!0});var n$t=s(VV);Gxo=r(n$t,"CodeGenModel"),n$t.forEach(t),Oxo=r(Hqe," (CodeGen model)"),Hqe.forEach(t),Vxo=i(x),R_=n(x,"LI",{});var Jqe=s(R_);M_e=n(Jqe,"STRONG",{});var s$t=s(M_e);Xxo=r(s$t,"conditional_detr"),s$t.forEach(t),zxo=r(Jqe," \u2014 "),XV=n(Jqe,"A",{href:!0});var l$t=s(XV);Qxo=r(l$t,"ConditionalDetrModel"),l$t.forEach(t),Wxo=r(Jqe," (Conditional DETR model)"),Jqe.forEach(t),Uxo=i(x),P_=n(x,"LI",{});var Yqe=s(P_);E_e=n(Yqe,"STRONG",{});var i$t=s(E_e);Hxo=r(i$t,"convbert"),i$t.forEach(t),Jxo=r(Yqe," \u2014 "),zV=n(Yqe,"A",{href:!0});var d$t=s(zV);Yxo=r(d$t,"ConvBertModel"),d$t.forEach(t),Zxo=r(Yqe," (ConvBERT model)"),Yqe.forEach(t),Kxo=i(x),B_=n(x,"LI",{});var Zqe=s(B_);C_e=n(Zqe,"STRONG",{});var c$t=s(C_e);e$o=r(c$t,"convnext"),c$t.forEach(t),o$o=r(Zqe," \u2014 "),QV=n(Zqe,"A",{href:!0});var m$t=s(QV);r$o=r(m$t,"ConvNextModel"),m$t.forEach(t),t$o=r(Zqe," (ConvNeXT model)"),Zqe.forEach(t),a$o=i(x),I_=n(x,"LI",{});var Kqe=s(I_);w_e=n(Kqe,"STRONG",{});var f$t=s(w_e);n$o=r(f$t,"ctrl"),f$t.forEach(t),s$o=r(Kqe," \u2014 "),WV=n(Kqe,"A",{href:!0});var g$t=s(WV);l$o=r(g$t,"CTRLModel"),g$t.forEach(t),i$o=r(Kqe," (CTRL model)"),Kqe.forEach(t),d$o=i(x),N_=n(x,"LI",{});var eje=s(N_);A_e=n(eje,"STRONG",{});var h$t=s(A_e);c$o=r(h$t,"cvt"),h$t.forEach(t),m$o=r(eje," \u2014 "),UV=n(eje,"A",{href:!0});var u$t=s(UV);f$o=r(u$t,"CvtModel"),u$t.forEach(t),g$o=r(eje," (CvT model)"),eje.forEach(t),h$o=i(x),q_=n(x,"LI",{});var oje=s(q_);L_e=n(oje,"STRONG",{});var p$t=s(L_e);u$o=r(p$t,"data2vec-audio"),p$t.forEach(t),p$o=r(oje," \u2014 "),HV=n(oje,"A",{href:!0});var _$t=s(HV);_$o=r(_$t,"Data2VecAudioModel"),_$t.forEach(t),b$o=r(oje," (Data2VecAudio model)"),oje.forEach(t),v$o=i(x),j_=n(x,"LI",{});var rje=s(j_);y_e=n(rje,"STRONG",{});var b$t=s(y_e);F$o=r(b$t,"data2vec-text"),b$t.forEach(t),T$o=r(rje," \u2014 "),JV=n(rje,"A",{href:!0});var v$t=s(JV);M$o=r(v$t,"Data2VecTextModel"),v$t.forEach(t),E$o=r(rje," (Data2VecText model)"),rje.forEach(t),C$o=i(x),D_=n(x,"LI",{});var tje=s(D_);x_e=n(tje,"STRONG",{});var F$t=s(x_e);w$o=r(F$t,"data2vec-vision"),F$t.forEach(t),A$o=r(tje," \u2014 "),YV=n(tje,"A",{href:!0});var T$t=s(YV);L$o=r(T$t,"Data2VecVisionModel"),T$t.forEach(t),y$o=r(tje," (Data2VecVision model)"),tje.forEach(t),x$o=i(x),G_=n(x,"LI",{});var aje=s(G_);$_e=n(aje,"STRONG",{});var M$t=s($_e);$$o=r(M$t,"deberta"),M$t.forEach(t),k$o=r(aje," \u2014 "),ZV=n(aje,"A",{href:!0});var E$t=s(ZV);S$o=r(E$t,"DebertaModel"),E$t.forEach(t),R$o=r(aje," (DeBERTa model)"),aje.forEach(t),P$o=i(x),O_=n(x,"LI",{});var nje=s(O_);k_e=n(nje,"STRONG",{});var C$t=s(k_e);B$o=r(C$t,"deberta-v2"),C$t.forEach(t),I$o=r(nje," \u2014 "),KV=n(nje,"A",{href:!0});var w$t=s(KV);N$o=r(w$t,"DebertaV2Model"),w$t.forEach(t),q$o=r(nje," (DeBERTa-v2 model)"),nje.forEach(t),j$o=i(x),V_=n(x,"LI",{});var sje=s(V_);S_e=n(sje,"STRONG",{});var A$t=s(S_e);D$o=r(A$t,"decision_transformer"),A$t.forEach(t),G$o=r(sje," \u2014 "),eX=n(sje,"A",{href:!0});var L$t=s(eX);O$o=r(L$t,"DecisionTransformerModel"),L$t.forEach(t),V$o=r(sje," (Decision Transformer model)"),sje.forEach(t),X$o=i(x),X_=n(x,"LI",{});var lje=s(X_);R_e=n(lje,"STRONG",{});var y$t=s(R_e);z$o=r(y$t,"deformable_detr"),y$t.forEach(t),Q$o=r(lje," \u2014 "),oX=n(lje,"A",{href:!0});var x$t=s(oX);W$o=r(x$t,"DeformableDetrModel"),x$t.forEach(t),U$o=r(lje," (Deformable DETR model)"),lje.forEach(t),H$o=i(x),z_=n(x,"LI",{});var ije=s(z_);P_e=n(ije,"STRONG",{});var $$t=s(P_e);J$o=r($$t,"deit"),$$t.forEach(t),Y$o=r(ije," \u2014 "),rX=n(ije,"A",{href:!0});var k$t=s(rX);Z$o=r(k$t,"DeiTModel"),k$t.forEach(t),K$o=r(ije," (DeiT model)"),ije.forEach(t),eko=i(x),Q_=n(x,"LI",{});var dje=s(Q_);B_e=n(dje,"STRONG",{});var S$t=s(B_e);oko=r(S$t,"detr"),S$t.forEach(t),rko=r(dje," \u2014 "),tX=n(dje,"A",{href:!0});var R$t=s(tX);tko=r(R$t,"DetrModel"),R$t.forEach(t),ako=r(dje," (DETR model)"),dje.forEach(t),nko=i(x),W_=n(x,"LI",{});var cje=s(W_);I_e=n(cje,"STRONG",{});var P$t=s(I_e);sko=r(P$t,"distilbert"),P$t.forEach(t),lko=r(cje," \u2014 "),aX=n(cje,"A",{href:!0});var B$t=s(aX);iko=r(B$t,"DistilBertModel"),B$t.forEach(t),dko=r(cje," (DistilBERT model)"),cje.forEach(t),cko=i(x),U_=n(x,"LI",{});var mje=s(U_);N_e=n(mje,"STRONG",{});var I$t=s(N_e);mko=r(I$t,"donut-swin"),I$t.forEach(t),fko=r(mje," \u2014 "),nX=n(mje,"A",{href:!0});var N$t=s(nX);gko=r(N$t,"DonutSwinModel"),N$t.forEach(t),hko=r(mje," (DonutSwin model)"),mje.forEach(t),uko=i(x),H_=n(x,"LI",{});var fje=s(H_);q_e=n(fje,"STRONG",{});var q$t=s(q_e);pko=r(q$t,"dpr"),q$t.forEach(t),_ko=r(fje," \u2014 "),sX=n(fje,"A",{href:!0});var j$t=s(sX);bko=r(j$t,"DPRQuestionEncoder"),j$t.forEach(t),vko=r(fje," (DPR model)"),fje.forEach(t),Fko=i(x),J_=n(x,"LI",{});var gje=s(J_);j_e=n(gje,"STRONG",{});var D$t=s(j_e);Tko=r(D$t,"dpt"),D$t.forEach(t),Mko=r(gje," \u2014 "),lX=n(gje,"A",{href:!0});var G$t=s(lX);Eko=r(G$t,"DPTModel"),G$t.forEach(t),Cko=r(gje," (DPT model)"),gje.forEach(t),wko=i(x),Y_=n(x,"LI",{});var hje=s(Y_);D_e=n(hje,"STRONG",{});var O$t=s(D_e);Ako=r(O$t,"electra"),O$t.forEach(t),Lko=r(hje," \u2014 "),iX=n(hje,"A",{href:!0});var V$t=s(iX);yko=r(V$t,"ElectraModel"),V$t.forEach(t),xko=r(hje," (ELECTRA model)"),hje.forEach(t),$ko=i(x),Z_=n(x,"LI",{});var uje=s(Z_);G_e=n(uje,"STRONG",{});var X$t=s(G_e);kko=r(X$t,"ernie"),X$t.forEach(t),Sko=r(uje," \u2014 "),dX=n(uje,"A",{href:!0});var z$t=s(dX);Rko=r(z$t,"ErnieModel"),z$t.forEach(t),Pko=r(uje," (ERNIE model)"),uje.forEach(t),Bko=i(x),K_=n(x,"LI",{});var pje=s(K_);O_e=n(pje,"STRONG",{});var Q$t=s(O_e);Iko=r(Q$t,"esm"),Q$t.forEach(t),Nko=r(pje," \u2014 "),cX=n(pje,"A",{href:!0});var W$t=s(cX);qko=r(W$t,"EsmModel"),W$t.forEach(t),jko=r(pje," (ESM model)"),pje.forEach(t),Dko=i(x),e1=n(x,"LI",{});var _je=s(e1);V_e=n(_je,"STRONG",{});var U$t=s(V_e);Gko=r(U$t,"flaubert"),U$t.forEach(t),Oko=r(_je," \u2014 "),mX=n(_je,"A",{href:!0});var H$t=s(mX);Vko=r(H$t,"FlaubertModel"),H$t.forEach(t),Xko=r(_je," (FlauBERT model)"),_je.forEach(t),zko=i(x),o1=n(x,"LI",{});var bje=s(o1);X_e=n(bje,"STRONG",{});var J$t=s(X_e);Qko=r(J$t,"flava"),J$t.forEach(t),Wko=r(bje," \u2014 "),fX=n(bje,"A",{href:!0});var Y$t=s(fX);Uko=r(Y$t,"FlavaModel"),Y$t.forEach(t),Hko=r(bje," (FLAVA model)"),bje.forEach(t),Jko=i(x),r1=n(x,"LI",{});var vje=s(r1);z_e=n(vje,"STRONG",{});var Z$t=s(z_e);Yko=r(Z$t,"fnet"),Z$t.forEach(t),Zko=r(vje," \u2014 "),gX=n(vje,"A",{href:!0});var K$t=s(gX);Kko=r(K$t,"FNetModel"),K$t.forEach(t),eSo=r(vje," (FNet model)"),vje.forEach(t),oSo=i(x),t1=n(x,"LI",{});var Fje=s(t1);Q_e=n(Fje,"STRONG",{});var ekt=s(Q_e);rSo=r(ekt,"fsmt"),ekt.forEach(t),tSo=r(Fje," \u2014 "),hX=n(Fje,"A",{href:!0});var okt=s(hX);aSo=r(okt,"FSMTModel"),okt.forEach(t),nSo=r(Fje," (FairSeq Machine-Translation model)"),Fje.forEach(t),sSo=i(x),Ml=n(x,"LI",{});var CI=s(Ml);W_e=n(CI,"STRONG",{});var rkt=s(W_e);lSo=r(rkt,"funnel"),rkt.forEach(t),iSo=r(CI," \u2014 "),uX=n(CI,"A",{href:!0});var tkt=s(uX);dSo=r(tkt,"FunnelModel"),tkt.forEach(t),cSo=r(CI," or "),pX=n(CI,"A",{href:!0});var akt=s(pX);mSo=r(akt,"FunnelBaseModel"),akt.forEach(t),fSo=r(CI," (Funnel Transformer model)"),CI.forEach(t),gSo=i(x),a1=n(x,"LI",{});var Tje=s(a1);U_e=n(Tje,"STRONG",{});var nkt=s(U_e);hSo=r(nkt,"glpn"),nkt.forEach(t),uSo=r(Tje," \u2014 "),_X=n(Tje,"A",{href:!0});var skt=s(_X);pSo=r(skt,"GLPNModel"),skt.forEach(t),_So=r(Tje," (GLPN model)"),Tje.forEach(t),bSo=i(x),n1=n(x,"LI",{});var Mje=s(n1);H_e=n(Mje,"STRONG",{});var lkt=s(H_e);vSo=r(lkt,"gpt2"),lkt.forEach(t),FSo=r(Mje," \u2014 "),bX=n(Mje,"A",{href:!0});var ikt=s(bX);TSo=r(ikt,"GPT2Model"),ikt.forEach(t),MSo=r(Mje," (OpenAI GPT-2 model)"),Mje.forEach(t),ESo=i(x),s1=n(x,"LI",{});var Eje=s(s1);J_e=n(Eje,"STRONG",{});var dkt=s(J_e);CSo=r(dkt,"gpt_neo"),dkt.forEach(t),wSo=r(Eje," \u2014 "),vX=n(Eje,"A",{href:!0});var ckt=s(vX);ASo=r(ckt,"GPTNeoModel"),ckt.forEach(t),LSo=r(Eje," (GPT Neo model)"),Eje.forEach(t),ySo=i(x),l1=n(x,"LI",{});var Cje=s(l1);Y_e=n(Cje,"STRONG",{});var mkt=s(Y_e);xSo=r(mkt,"gpt_neox"),mkt.forEach(t),$So=r(Cje," \u2014 "),FX=n(Cje,"A",{href:!0});var fkt=s(FX);kSo=r(fkt,"GPTNeoXModel"),fkt.forEach(t),SSo=r(Cje," (GPT NeoX model)"),Cje.forEach(t),RSo=i(x),i1=n(x,"LI",{});var wje=s(i1);Z_e=n(wje,"STRONG",{});var gkt=s(Z_e);PSo=r(gkt,"gpt_neox_japanese"),gkt.forEach(t),BSo=r(wje," \u2014 "),TX=n(wje,"A",{href:!0});var hkt=s(TX);ISo=r(hkt,"GPTNeoXJapaneseModel"),hkt.forEach(t),NSo=r(wje," (GPT NeoX Japanese model)"),wje.forEach(t),qSo=i(x),d1=n(x,"LI",{});var Aje=s(d1);K_e=n(Aje,"STRONG",{});var ukt=s(K_e);jSo=r(ukt,"gptj"),ukt.forEach(t),DSo=r(Aje," \u2014 "),MX=n(Aje,"A",{href:!0});var pkt=s(MX);GSo=r(pkt,"GPTJModel"),pkt.forEach(t),OSo=r(Aje," (GPT-J model)"),Aje.forEach(t),VSo=i(x),c1=n(x,"LI",{});var Lje=s(c1);e1e=n(Lje,"STRONG",{});var _kt=s(e1e);XSo=r(_kt,"groupvit"),_kt.forEach(t),zSo=r(Lje," \u2014 "),EX=n(Lje,"A",{href:!0});var bkt=s(EX);QSo=r(bkt,"GroupViTModel"),bkt.forEach(t),WSo=r(Lje," (GroupViT model)"),Lje.forEach(t),USo=i(x),m1=n(x,"LI",{});var yje=s(m1);o1e=n(yje,"STRONG",{});var vkt=s(o1e);HSo=r(vkt,"hubert"),vkt.forEach(t),JSo=r(yje," \u2014 "),CX=n(yje,"A",{href:!0});var Fkt=s(CX);YSo=r(Fkt,"HubertModel"),Fkt.forEach(t),ZSo=r(yje," (Hubert model)"),yje.forEach(t),KSo=i(x),f1=n(x,"LI",{});var xje=s(f1);r1e=n(xje,"STRONG",{});var Tkt=s(r1e);eRo=r(Tkt,"ibert"),Tkt.forEach(t),oRo=r(xje," \u2014 "),wX=n(xje,"A",{href:!0});var Mkt=s(wX);rRo=r(Mkt,"IBertModel"),Mkt.forEach(t),tRo=r(xje," (I-BERT model)"),xje.forEach(t),aRo=i(x),g1=n(x,"LI",{});var $je=s(g1);t1e=n($je,"STRONG",{});var Ekt=s(t1e);nRo=r(Ekt,"imagegpt"),Ekt.forEach(t),sRo=r($je," \u2014 "),AX=n($je,"A",{href:!0});var Ckt=s(AX);lRo=r(Ckt,"ImageGPTModel"),Ckt.forEach(t),iRo=r($je," (ImageGPT model)"),$je.forEach(t),dRo=i(x),h1=n(x,"LI",{});var kje=s(h1);a1e=n(kje,"STRONG",{});var wkt=s(a1e);cRo=r(wkt,"layoutlm"),wkt.forEach(t),mRo=r(kje," \u2014 "),LX=n(kje,"A",{href:!0});var Akt=s(LX);fRo=r(Akt,"LayoutLMModel"),Akt.forEach(t),gRo=r(kje," (LayoutLM model)"),kje.forEach(t),hRo=i(x),u1=n(x,"LI",{});var Sje=s(u1);n1e=n(Sje,"STRONG",{});var Lkt=s(n1e);uRo=r(Lkt,"layoutlmv2"),Lkt.forEach(t),pRo=r(Sje," \u2014 "),yX=n(Sje,"A",{href:!0});var ykt=s(yX);_Ro=r(ykt,"LayoutLMv2Model"),ykt.forEach(t),bRo=r(Sje," (LayoutLMv2 model)"),Sje.forEach(t),vRo=i(x),p1=n(x,"LI",{});var Rje=s(p1);s1e=n(Rje,"STRONG",{});var xkt=s(s1e);FRo=r(xkt,"layoutlmv3"),xkt.forEach(t),TRo=r(Rje," \u2014 "),xX=n(Rje,"A",{href:!0});var $kt=s(xX);MRo=r($kt,"LayoutLMv3Model"),$kt.forEach(t),ERo=r(Rje," (LayoutLMv3 model)"),Rje.forEach(t),CRo=i(x),_1=n(x,"LI",{});var Pje=s(_1);l1e=n(Pje,"STRONG",{});var kkt=s(l1e);wRo=r(kkt,"led"),kkt.forEach(t),ARo=r(Pje," \u2014 "),$X=n(Pje,"A",{href:!0});var Skt=s($X);LRo=r(Skt,"LEDModel"),Skt.forEach(t),yRo=r(Pje," (LED model)"),Pje.forEach(t),xRo=i(x),b1=n(x,"LI",{});var Bje=s(b1);i1e=n(Bje,"STRONG",{});var Rkt=s(i1e);$Ro=r(Rkt,"levit"),Rkt.forEach(t),kRo=r(Bje," \u2014 "),kX=n(Bje,"A",{href:!0});var Pkt=s(kX);SRo=r(Pkt,"LevitModel"),Pkt.forEach(t),RRo=r(Bje," (LeViT model)"),Bje.forEach(t),PRo=i(x),v1=n(x,"LI",{});var Ije=s(v1);d1e=n(Ije,"STRONG",{});var Bkt=s(d1e);BRo=r(Bkt,"longformer"),Bkt.forEach(t),IRo=r(Ije," \u2014 "),SX=n(Ije,"A",{href:!0});var Ikt=s(SX);NRo=r(Ikt,"LongformerModel"),Ikt.forEach(t),qRo=r(Ije," (Longformer model)"),Ije.forEach(t),jRo=i(x),F1=n(x,"LI",{});var Nje=s(F1);c1e=n(Nje,"STRONG",{});var Nkt=s(c1e);DRo=r(Nkt,"longt5"),Nkt.forEach(t),GRo=r(Nje," \u2014 "),RX=n(Nje,"A",{href:!0});var qkt=s(RX);ORo=r(qkt,"LongT5Model"),qkt.forEach(t),VRo=r(Nje," (LongT5 model)"),Nje.forEach(t),XRo=i(x),T1=n(x,"LI",{});var qje=s(T1);m1e=n(qje,"STRONG",{});var jkt=s(m1e);zRo=r(jkt,"luke"),jkt.forEach(t),QRo=r(qje," \u2014 "),PX=n(qje,"A",{href:!0});var Dkt=s(PX);WRo=r(Dkt,"LukeModel"),Dkt.forEach(t),URo=r(qje," (LUKE model)"),qje.forEach(t),HRo=i(x),M1=n(x,"LI",{});var jje=s(M1);f1e=n(jje,"STRONG",{});var Gkt=s(f1e);JRo=r(Gkt,"lxmert"),Gkt.forEach(t),YRo=r(jje," \u2014 "),BX=n(jje,"A",{href:!0});var Okt=s(BX);ZRo=r(Okt,"LxmertModel"),Okt.forEach(t),KRo=r(jje," (LXMERT model)"),jje.forEach(t),ePo=i(x),E1=n(x,"LI",{});var Dje=s(E1);g1e=n(Dje,"STRONG",{});var Vkt=s(g1e);oPo=r(Vkt,"m2m_100"),Vkt.forEach(t),rPo=r(Dje," \u2014 "),IX=n(Dje,"A",{href:!0});var Xkt=s(IX);tPo=r(Xkt,"M2M100Model"),Xkt.forEach(t),aPo=r(Dje," (M2M100 model)"),Dje.forEach(t),nPo=i(x),C1=n(x,"LI",{});var Gje=s(C1);h1e=n(Gje,"STRONG",{});var zkt=s(h1e);sPo=r(zkt,"marian"),zkt.forEach(t),lPo=r(Gje," \u2014 "),NX=n(Gje,"A",{href:!0});var Qkt=s(NX);iPo=r(Qkt,"MarianModel"),Qkt.forEach(t),dPo=r(Gje," (Marian model)"),Gje.forEach(t),cPo=i(x),w1=n(x,"LI",{});var Oje=s(w1);u1e=n(Oje,"STRONG",{});var Wkt=s(u1e);mPo=r(Wkt,"markuplm"),Wkt.forEach(t),fPo=r(Oje," \u2014 "),qX=n(Oje,"A",{href:!0});var Ukt=s(qX);gPo=r(Ukt,"MarkupLMModel"),Ukt.forEach(t),hPo=r(Oje," (MarkupLM model)"),Oje.forEach(t),uPo=i(x),A1=n(x,"LI",{});var Vje=s(A1);p1e=n(Vje,"STRONG",{});var Hkt=s(p1e);pPo=r(Hkt,"maskformer"),Hkt.forEach(t),_Po=r(Vje," \u2014 "),jX=n(Vje,"A",{href:!0});var Jkt=s(jX);bPo=r(Jkt,"MaskFormerModel"),Jkt.forEach(t),vPo=r(Vje," (MaskFormer model)"),Vje.forEach(t),FPo=i(x),L1=n(x,"LI",{});var Xje=s(L1);_1e=n(Xje,"STRONG",{});var Ykt=s(_1e);TPo=r(Ykt,"mbart"),Ykt.forEach(t),MPo=r(Xje," \u2014 "),DX=n(Xje,"A",{href:!0});var Zkt=s(DX);EPo=r(Zkt,"MBartModel"),Zkt.forEach(t),CPo=r(Xje," (mBART model)"),Xje.forEach(t),wPo=i(x),y1=n(x,"LI",{});var zje=s(y1);b1e=n(zje,"STRONG",{});var Kkt=s(b1e);APo=r(Kkt,"mctct"),Kkt.forEach(t),LPo=r(zje," \u2014 "),GX=n(zje,"A",{href:!0});var eSt=s(GX);yPo=r(eSt,"MCTCTModel"),eSt.forEach(t),xPo=r(zje," (M-CTC-T model)"),zje.forEach(t),$Po=i(x),x1=n(x,"LI",{});var Qje=s(x1);v1e=n(Qje,"STRONG",{});var oSt=s(v1e);kPo=r(oSt,"megatron-bert"),oSt.forEach(t),SPo=r(Qje," \u2014 "),OX=n(Qje,"A",{href:!0});var rSt=s(OX);RPo=r(rSt,"MegatronBertModel"),rSt.forEach(t),PPo=r(Qje," (Megatron-BERT model)"),Qje.forEach(t),BPo=i(x),$1=n(x,"LI",{});var Wje=s($1);F1e=n(Wje,"STRONG",{});var tSt=s(F1e);IPo=r(tSt,"mobilebert"),tSt.forEach(t),NPo=r(Wje," \u2014 "),VX=n(Wje,"A",{href:!0});var aSt=s(VX);qPo=r(aSt,"MobileBertModel"),aSt.forEach(t),jPo=r(Wje," (MobileBERT model)"),Wje.forEach(t),DPo=i(x),k1=n(x,"LI",{});var Uje=s(k1);T1e=n(Uje,"STRONG",{});var nSt=s(T1e);GPo=r(nSt,"mobilevit"),nSt.forEach(t),OPo=r(Uje," \u2014 "),XX=n(Uje,"A",{href:!0});var sSt=s(XX);VPo=r(sSt,"MobileViTModel"),sSt.forEach(t),XPo=r(Uje," (MobileViT model)"),Uje.forEach(t),zPo=i(x),S1=n(x,"LI",{});var Hje=s(S1);M1e=n(Hje,"STRONG",{});var lSt=s(M1e);QPo=r(lSt,"mpnet"),lSt.forEach(t),WPo=r(Hje," \u2014 "),zX=n(Hje,"A",{href:!0});var iSt=s(zX);UPo=r(iSt,"MPNetModel"),iSt.forEach(t),HPo=r(Hje," (MPNet model)"),Hje.forEach(t),JPo=i(x),R1=n(x,"LI",{});var Jje=s(R1);E1e=n(Jje,"STRONG",{});var dSt=s(E1e);YPo=r(dSt,"mt5"),dSt.forEach(t),ZPo=r(Jje," \u2014 "),QX=n(Jje,"A",{href:!0});var cSt=s(QX);KPo=r(cSt,"MT5Model"),cSt.forEach(t),eBo=r(Jje," (MT5 model)"),Jje.forEach(t),oBo=i(x),P1=n(x,"LI",{});var Yje=s(P1);C1e=n(Yje,"STRONG",{});var mSt=s(C1e);rBo=r(mSt,"mvp"),mSt.forEach(t),tBo=r(Yje," \u2014 "),WX=n(Yje,"A",{href:!0});var fSt=s(WX);aBo=r(fSt,"MvpModel"),fSt.forEach(t),nBo=r(Yje," (MVP model)"),Yje.forEach(t),sBo=i(x),B1=n(x,"LI",{});var Zje=s(B1);w1e=n(Zje,"STRONG",{});var gSt=s(w1e);lBo=r(gSt,"nezha"),gSt.forEach(t),iBo=r(Zje," \u2014 "),UX=n(Zje,"A",{href:!0});var hSt=s(UX);dBo=r(hSt,"NezhaModel"),hSt.forEach(t),cBo=r(Zje," (Nezha model)"),Zje.forEach(t),mBo=i(x),I1=n(x,"LI",{});var Kje=s(I1);A1e=n(Kje,"STRONG",{});var uSt=s(A1e);fBo=r(uSt,"nllb"),uSt.forEach(t),gBo=r(Kje," \u2014 "),HX=n(Kje,"A",{href:!0});var pSt=s(HX);hBo=r(pSt,"M2M100Model"),pSt.forEach(t),uBo=r(Kje," (NLLB model)"),Kje.forEach(t),pBo=i(x),N1=n(x,"LI",{});var eDe=s(N1);L1e=n(eDe,"STRONG",{});var _St=s(L1e);_Bo=r(_St,"nystromformer"),_St.forEach(t),bBo=r(eDe," \u2014 "),JX=n(eDe,"A",{href:!0});var bSt=s(JX);vBo=r(bSt,"NystromformerModel"),bSt.forEach(t),FBo=r(eDe," (Nystr\xF6mformer model)"),eDe.forEach(t),TBo=i(x),q1=n(x,"LI",{});var oDe=s(q1);y1e=n(oDe,"STRONG",{});var vSt=s(y1e);MBo=r(vSt,"openai-gpt"),vSt.forEach(t),EBo=r(oDe," \u2014 "),YX=n(oDe,"A",{href:!0});var FSt=s(YX);CBo=r(FSt,"OpenAIGPTModel"),FSt.forEach(t),wBo=r(oDe," (OpenAI GPT model)"),oDe.forEach(t),ABo=i(x),j1=n(x,"LI",{});var rDe=s(j1);x1e=n(rDe,"STRONG",{});var TSt=s(x1e);LBo=r(TSt,"opt"),TSt.forEach(t),yBo=r(rDe," \u2014 "),ZX=n(rDe,"A",{href:!0});var MSt=s(ZX);xBo=r(MSt,"OPTModel"),MSt.forEach(t),$Bo=r(rDe," (OPT model)"),rDe.forEach(t),kBo=i(x),D1=n(x,"LI",{});var tDe=s(D1);$1e=n(tDe,"STRONG",{});var ESt=s($1e);SBo=r(ESt,"owlvit"),ESt.forEach(t),RBo=r(tDe," \u2014 "),KX=n(tDe,"A",{href:!0});var CSt=s(KX);PBo=r(CSt,"OwlViTModel"),CSt.forEach(t),BBo=r(tDe," (OWL-ViT model)"),tDe.forEach(t),IBo=i(x),G1=n(x,"LI",{});var aDe=s(G1);k1e=n(aDe,"STRONG",{});var wSt=s(k1e);NBo=r(wSt,"pegasus"),wSt.forEach(t),qBo=r(aDe," \u2014 "),ez=n(aDe,"A",{href:!0});var ASt=s(ez);jBo=r(ASt,"PegasusModel"),ASt.forEach(t),DBo=r(aDe," (Pegasus model)"),aDe.forEach(t),GBo=i(x),O1=n(x,"LI",{});var nDe=s(O1);S1e=n(nDe,"STRONG",{});var LSt=s(S1e);OBo=r(LSt,"pegasus_x"),LSt.forEach(t),VBo=r(nDe," \u2014 "),oz=n(nDe,"A",{href:!0});var ySt=s(oz);XBo=r(ySt,"PegasusXModel"),ySt.forEach(t),zBo=r(nDe," (PEGASUS-X model)"),nDe.forEach(t),QBo=i(x),V1=n(x,"LI",{});var sDe=s(V1);R1e=n(sDe,"STRONG",{});var xSt=s(R1e);WBo=r(xSt,"perceiver"),xSt.forEach(t),UBo=r(sDe," \u2014 "),rz=n(sDe,"A",{href:!0});var $St=s(rz);HBo=r($St,"PerceiverModel"),$St.forEach(t),JBo=r(sDe," (Perceiver model)"),sDe.forEach(t),YBo=i(x),X1=n(x,"LI",{});var lDe=s(X1);P1e=n(lDe,"STRONG",{});var kSt=s(P1e);ZBo=r(kSt,"plbart"),kSt.forEach(t),KBo=r(lDe," \u2014 "),tz=n(lDe,"A",{href:!0});var SSt=s(tz);eIo=r(SSt,"PLBartModel"),SSt.forEach(t),oIo=r(lDe," (PLBart model)"),lDe.forEach(t),rIo=i(x),z1=n(x,"LI",{});var iDe=s(z1);B1e=n(iDe,"STRONG",{});var RSt=s(B1e);tIo=r(RSt,"poolformer"),RSt.forEach(t),aIo=r(iDe," \u2014 "),az=n(iDe,"A",{href:!0});var PSt=s(az);nIo=r(PSt,"PoolFormerModel"),PSt.forEach(t),sIo=r(iDe," (PoolFormer model)"),iDe.forEach(t),lIo=i(x),Q1=n(x,"LI",{});var dDe=s(Q1);I1e=n(dDe,"STRONG",{});var BSt=s(I1e);iIo=r(BSt,"prophetnet"),BSt.forEach(t),dIo=r(dDe," \u2014 "),nz=n(dDe,"A",{href:!0});var ISt=s(nz);cIo=r(ISt,"ProphetNetModel"),ISt.forEach(t),mIo=r(dDe," (ProphetNet model)"),dDe.forEach(t),fIo=i(x),W1=n(x,"LI",{});var cDe=s(W1);N1e=n(cDe,"STRONG",{});var NSt=s(N1e);gIo=r(NSt,"qdqbert"),NSt.forEach(t),hIo=r(cDe," \u2014 "),sz=n(cDe,"A",{href:!0});var qSt=s(sz);uIo=r(qSt,"QDQBertModel"),qSt.forEach(t),pIo=r(cDe," (QDQBert model)"),cDe.forEach(t),_Io=i(x),U1=n(x,"LI",{});var mDe=s(U1);q1e=n(mDe,"STRONG",{});var jSt=s(q1e);bIo=r(jSt,"reformer"),jSt.forEach(t),vIo=r(mDe," \u2014 "),lz=n(mDe,"A",{href:!0});var DSt=s(lz);FIo=r(DSt,"ReformerModel"),DSt.forEach(t),TIo=r(mDe," (Reformer model)"),mDe.forEach(t),MIo=i(x),H1=n(x,"LI",{});var fDe=s(H1);j1e=n(fDe,"STRONG",{});var GSt=s(j1e);EIo=r(GSt,"regnet"),GSt.forEach(t),CIo=r(fDe," \u2014 "),iz=n(fDe,"A",{href:!0});var OSt=s(iz);wIo=r(OSt,"RegNetModel"),OSt.forEach(t),AIo=r(fDe," (RegNet model)"),fDe.forEach(t),LIo=i(x),J1=n(x,"LI",{});var gDe=s(J1);D1e=n(gDe,"STRONG",{});var VSt=s(D1e);yIo=r(VSt,"rembert"),VSt.forEach(t),xIo=r(gDe," \u2014 "),dz=n(gDe,"A",{href:!0});var XSt=s(dz);$Io=r(XSt,"RemBertModel"),XSt.forEach(t),kIo=r(gDe," (RemBERT model)"),gDe.forEach(t),SIo=i(x),Y1=n(x,"LI",{});var hDe=s(Y1);G1e=n(hDe,"STRONG",{});var zSt=s(G1e);RIo=r(zSt,"resnet"),zSt.forEach(t),PIo=r(hDe," \u2014 "),cz=n(hDe,"A",{href:!0});var QSt=s(cz);BIo=r(QSt,"ResNetModel"),QSt.forEach(t),IIo=r(hDe," (ResNet model)"),hDe.forEach(t),NIo=i(x),Z1=n(x,"LI",{});var uDe=s(Z1);O1e=n(uDe,"STRONG",{});var WSt=s(O1e);qIo=r(WSt,"retribert"),WSt.forEach(t),jIo=r(uDe," \u2014 "),mz=n(uDe,"A",{href:!0});var USt=s(mz);DIo=r(USt,"RetriBertModel"),USt.forEach(t),GIo=r(uDe," (RetriBERT model)"),uDe.forEach(t),OIo=i(x),K1=n(x,"LI",{});var pDe=s(K1);V1e=n(pDe,"STRONG",{});var HSt=s(V1e);VIo=r(HSt,"roberta"),HSt.forEach(t),XIo=r(pDe," \u2014 "),fz=n(pDe,"A",{href:!0});var JSt=s(fz);zIo=r(JSt,"RobertaModel"),JSt.forEach(t),QIo=r(pDe," (RoBERTa model)"),pDe.forEach(t),WIo=i(x),eb=n(x,"LI",{});var _De=s(eb);X1e=n(_De,"STRONG",{});var YSt=s(X1e);UIo=r(YSt,"roformer"),YSt.forEach(t),HIo=r(_De," \u2014 "),gz=n(_De,"A",{href:!0});var ZSt=s(gz);JIo=r(ZSt,"RoFormerModel"),ZSt.forEach(t),YIo=r(_De," (RoFormer model)"),_De.forEach(t),ZIo=i(x),ob=n(x,"LI",{});var bDe=s(ob);z1e=n(bDe,"STRONG",{});var KSt=s(z1e);KIo=r(KSt,"segformer"),KSt.forEach(t),eNo=r(bDe," \u2014 "),hz=n(bDe,"A",{href:!0});var eRt=s(hz);oNo=r(eRt,"SegformerModel"),eRt.forEach(t),rNo=r(bDe," (SegFormer model)"),bDe.forEach(t),tNo=i(x),rb=n(x,"LI",{});var vDe=s(rb);Q1e=n(vDe,"STRONG",{});var oRt=s(Q1e);aNo=r(oRt,"sew"),oRt.forEach(t),nNo=r(vDe," \u2014 "),uz=n(vDe,"A",{href:!0});var rRt=s(uz);sNo=r(rRt,"SEWModel"),rRt.forEach(t),lNo=r(vDe," (SEW model)"),vDe.forEach(t),iNo=i(x),tb=n(x,"LI",{});var FDe=s(tb);W1e=n(FDe,"STRONG",{});var tRt=s(W1e);dNo=r(tRt,"sew-d"),tRt.forEach(t),cNo=r(FDe," \u2014 "),pz=n(FDe,"A",{href:!0});var aRt=s(pz);mNo=r(aRt,"SEWDModel"),aRt.forEach(t),fNo=r(FDe," (SEW-D model)"),FDe.forEach(t),gNo=i(x),ab=n(x,"LI",{});var TDe=s(ab);U1e=n(TDe,"STRONG",{});var nRt=s(U1e);hNo=r(nRt,"speech_to_text"),nRt.forEach(t),uNo=r(TDe," \u2014 "),_z=n(TDe,"A",{href:!0});var sRt=s(_z);pNo=r(sRt,"Speech2TextModel"),sRt.forEach(t),_No=r(TDe," (Speech2Text model)"),TDe.forEach(t),bNo=i(x),nb=n(x,"LI",{});var MDe=s(nb);H1e=n(MDe,"STRONG",{});var lRt=s(H1e);vNo=r(lRt,"splinter"),lRt.forEach(t),FNo=r(MDe," \u2014 "),bz=n(MDe,"A",{href:!0});var iRt=s(bz);TNo=r(iRt,"SplinterModel"),iRt.forEach(t),MNo=r(MDe," (Splinter model)"),MDe.forEach(t),ENo=i(x),sb=n(x,"LI",{});var EDe=s(sb);J1e=n(EDe,"STRONG",{});var dRt=s(J1e);CNo=r(dRt,"squeezebert"),dRt.forEach(t),wNo=r(EDe," \u2014 "),vz=n(EDe,"A",{href:!0});var cRt=s(vz);ANo=r(cRt,"SqueezeBertModel"),cRt.forEach(t),LNo=r(EDe," (SqueezeBERT model)"),EDe.forEach(t),yNo=i(x),lb=n(x,"LI",{});var CDe=s(lb);Y1e=n(CDe,"STRONG",{});var mRt=s(Y1e);xNo=r(mRt,"swin"),mRt.forEach(t),$No=r(CDe," \u2014 "),Fz=n(CDe,"A",{href:!0});var fRt=s(Fz);kNo=r(fRt,"SwinModel"),fRt.forEach(t),SNo=r(CDe," (Swin Transformer model)"),CDe.forEach(t),RNo=i(x),ib=n(x,"LI",{});var wDe=s(ib);Z1e=n(wDe,"STRONG",{});var gRt=s(Z1e);PNo=r(gRt,"swinv2"),gRt.forEach(t),BNo=r(wDe," \u2014 "),Tz=n(wDe,"A",{href:!0});var hRt=s(Tz);INo=r(hRt,"Swinv2Model"),hRt.forEach(t),NNo=r(wDe," (Swin Transformer V2 model)"),wDe.forEach(t),qNo=i(x),db=n(x,"LI",{});var ADe=s(db);K1e=n(ADe,"STRONG",{});var uRt=s(K1e);jNo=r(uRt,"t5"),uRt.forEach(t),DNo=r(ADe," \u2014 "),Mz=n(ADe,"A",{href:!0});var pRt=s(Mz);GNo=r(pRt,"T5Model"),pRt.forEach(t),ONo=r(ADe," (T5 model)"),ADe.forEach(t),VNo=i(x),cb=n(x,"LI",{});var LDe=s(cb);ebe=n(LDe,"STRONG",{});var _Rt=s(ebe);XNo=r(_Rt,"tapas"),_Rt.forEach(t),zNo=r(LDe," \u2014 "),Ez=n(LDe,"A",{href:!0});var bRt=s(Ez);QNo=r(bRt,"TapasModel"),bRt.forEach(t),WNo=r(LDe," (TAPAS model)"),LDe.forEach(t),UNo=i(x),mb=n(x,"LI",{});var yDe=s(mb);obe=n(yDe,"STRONG",{});var vRt=s(obe);HNo=r(vRt,"time_series_transformer"),vRt.forEach(t),JNo=r(yDe," \u2014 "),Cz=n(yDe,"A",{href:!0});var FRt=s(Cz);YNo=r(FRt,"TimeSeriesTransformerModel"),FRt.forEach(t),ZNo=r(yDe," (Time Series Transformer model)"),yDe.forEach(t),KNo=i(x),fb=n(x,"LI",{});var xDe=s(fb);rbe=n(xDe,"STRONG",{});var TRt=s(rbe);eqo=r(TRt,"trajectory_transformer"),TRt.forEach(t),oqo=r(xDe," \u2014 "),wz=n(xDe,"A",{href:!0});var MRt=s(wz);rqo=r(MRt,"TrajectoryTransformerModel"),MRt.forEach(t),tqo=r(xDe," (Trajectory Transformer model)"),xDe.forEach(t),aqo=i(x),gb=n(x,"LI",{});var $De=s(gb);tbe=n($De,"STRONG",{});var ERt=s(tbe);nqo=r(ERt,"transfo-xl"),ERt.forEach(t),sqo=r($De," \u2014 "),Az=n($De,"A",{href:!0});var CRt=s(Az);lqo=r(CRt,"TransfoXLModel"),CRt.forEach(t),iqo=r($De," (Transformer-XL model)"),$De.forEach(t),dqo=i(x),hb=n(x,"LI",{});var kDe=s(hb);abe=n(kDe,"STRONG",{});var wRt=s(abe);cqo=r(wRt,"unispeech"),wRt.forEach(t),mqo=r(kDe," \u2014 "),Lz=n(kDe,"A",{href:!0});var ARt=s(Lz);fqo=r(ARt,"UniSpeechModel"),ARt.forEach(t),gqo=r(kDe," (UniSpeech model)"),kDe.forEach(t),hqo=i(x),ub=n(x,"LI",{});var SDe=s(ub);nbe=n(SDe,"STRONG",{});var LRt=s(nbe);uqo=r(LRt,"unispeech-sat"),LRt.forEach(t),pqo=r(SDe," \u2014 "),yz=n(SDe,"A",{href:!0});var yRt=s(yz);_qo=r(yRt,"UniSpeechSatModel"),yRt.forEach(t),bqo=r(SDe," (UniSpeechSat model)"),SDe.forEach(t),vqo=i(x),pb=n(x,"LI",{});var RDe=s(pb);sbe=n(RDe,"STRONG",{});var xRt=s(sbe);Fqo=r(xRt,"van"),xRt.forEach(t),Tqo=r(RDe," \u2014 "),xz=n(RDe,"A",{href:!0});var $Rt=s(xz);Mqo=r($Rt,"VanModel"),$Rt.forEach(t),Eqo=r(RDe," (VAN model)"),RDe.forEach(t),Cqo=i(x),_b=n(x,"LI",{});var PDe=s(_b);lbe=n(PDe,"STRONG",{});var kRt=s(lbe);wqo=r(kRt,"videomae"),kRt.forEach(t),Aqo=r(PDe," \u2014 "),$z=n(PDe,"A",{href:!0});var SRt=s($z);Lqo=r(SRt,"VideoMAEModel"),SRt.forEach(t),yqo=r(PDe," (VideoMAE model)"),PDe.forEach(t),xqo=i(x),bb=n(x,"LI",{});var BDe=s(bb);ibe=n(BDe,"STRONG",{});var RRt=s(ibe);$qo=r(RRt,"vilt"),RRt.forEach(t),kqo=r(BDe," \u2014 "),kz=n(BDe,"A",{href:!0});var PRt=s(kz);Sqo=r(PRt,"ViltModel"),PRt.forEach(t),Rqo=r(BDe," (ViLT model)"),BDe.forEach(t),Pqo=i(x),vb=n(x,"LI",{});var IDe=s(vb);dbe=n(IDe,"STRONG",{});var BRt=s(dbe);Bqo=r(BRt,"vision-text-dual-encoder"),BRt.forEach(t),Iqo=r(IDe," \u2014 "),Sz=n(IDe,"A",{href:!0});var IRt=s(Sz);Nqo=r(IRt,"VisionTextDualEncoderModel"),IRt.forEach(t),qqo=r(IDe," (VisionTextDualEncoder model)"),IDe.forEach(t),jqo=i(x),Fb=n(x,"LI",{});var NDe=s(Fb);cbe=n(NDe,"STRONG",{});var NRt=s(cbe);Dqo=r(NRt,"visual_bert"),NRt.forEach(t),Gqo=r(NDe," \u2014 "),Rz=n(NDe,"A",{href:!0});var qRt=s(Rz);Oqo=r(qRt,"VisualBertModel"),qRt.forEach(t),Vqo=r(NDe," (VisualBERT model)"),NDe.forEach(t),Xqo=i(x),Tb=n(x,"LI",{});var qDe=s(Tb);mbe=n(qDe,"STRONG",{});var jRt=s(mbe);zqo=r(jRt,"vit"),jRt.forEach(t),Qqo=r(qDe," \u2014 "),Pz=n(qDe,"A",{href:!0});var DRt=s(Pz);Wqo=r(DRt,"ViTModel"),DRt.forEach(t),Uqo=r(qDe," (ViT model)"),qDe.forEach(t),Hqo=i(x),Mb=n(x,"LI",{});var jDe=s(Mb);fbe=n(jDe,"STRONG",{});var GRt=s(fbe);Jqo=r(GRt,"vit_mae"),GRt.forEach(t),Yqo=r(jDe," \u2014 "),Bz=n(jDe,"A",{href:!0});var ORt=s(Bz);Zqo=r(ORt,"ViTMAEModel"),ORt.forEach(t),Kqo=r(jDe," (ViTMAE model)"),jDe.forEach(t),ejo=i(x),Eb=n(x,"LI",{});var DDe=s(Eb);gbe=n(DDe,"STRONG",{});var VRt=s(gbe);ojo=r(VRt,"vit_msn"),VRt.forEach(t),rjo=r(DDe," \u2014 "),Iz=n(DDe,"A",{href:!0});var XRt=s(Iz);tjo=r(XRt,"ViTMSNModel"),XRt.forEach(t),ajo=r(DDe," (ViTMSN model)"),DDe.forEach(t),njo=i(x),Cb=n(x,"LI",{});var GDe=s(Cb);hbe=n(GDe,"STRONG",{});var zRt=s(hbe);sjo=r(zRt,"wav2vec2"),zRt.forEach(t),ljo=r(GDe," \u2014 "),Nz=n(GDe,"A",{href:!0});var QRt=s(Nz);ijo=r(QRt,"Wav2Vec2Model"),QRt.forEach(t),djo=r(GDe," (Wav2Vec2 model)"),GDe.forEach(t),cjo=i(x),wb=n(x,"LI",{});var ODe=s(wb);ube=n(ODe,"STRONG",{});var WRt=s(ube);mjo=r(WRt,"wav2vec2-conformer"),WRt.forEach(t),fjo=r(ODe," \u2014 "),qz=n(ODe,"A",{href:!0});var URt=s(qz);gjo=r(URt,"Wav2Vec2ConformerModel"),URt.forEach(t),hjo=r(ODe," (Wav2Vec2-Conformer model)"),ODe.forEach(t),ujo=i(x),Ab=n(x,"LI",{});var VDe=s(Ab);pbe=n(VDe,"STRONG",{});var HRt=s(pbe);pjo=r(HRt,"wavlm"),HRt.forEach(t),_jo=r(VDe," \u2014 "),jz=n(VDe,"A",{href:!0});var JRt=s(jz);bjo=r(JRt,"WavLMModel"),JRt.forEach(t),vjo=r(VDe," (WavLM model)"),VDe.forEach(t),Fjo=i(x),Lb=n(x,"LI",{});var XDe=s(Lb);_be=n(XDe,"STRONG",{});var YRt=s(_be);Tjo=r(YRt,"whisper"),YRt.forEach(t),Mjo=r(XDe," \u2014 "),Dz=n(XDe,"A",{href:!0});var ZRt=s(Dz);Ejo=r(ZRt,"WhisperModel"),ZRt.forEach(t),Cjo=r(XDe," (Whisper model)"),XDe.forEach(t),wjo=i(x),yb=n(x,"LI",{});var zDe=s(yb);bbe=n(zDe,"STRONG",{});var KRt=s(bbe);Ajo=r(KRt,"xclip"),KRt.forEach(t),Ljo=r(zDe," \u2014 "),Gz=n(zDe,"A",{href:!0});var ePt=s(Gz);yjo=r(ePt,"XCLIPModel"),ePt.forEach(t),xjo=r(zDe," (X-CLIP model)"),zDe.forEach(t),$jo=i(x),xb=n(x,"LI",{});var QDe=s(xb);vbe=n(QDe,"STRONG",{});var oPt=s(vbe);kjo=r(oPt,"xglm"),oPt.forEach(t),Sjo=r(QDe," \u2014 "),Oz=n(QDe,"A",{href:!0});var rPt=s(Oz);Rjo=r(rPt,"XGLMModel"),rPt.forEach(t),Pjo=r(QDe," (XGLM model)"),QDe.forEach(t),Bjo=i(x),$b=n(x,"LI",{});var WDe=s($b);Fbe=n(WDe,"STRONG",{});var tPt=s(Fbe);Ijo=r(tPt,"xlm"),tPt.forEach(t),Njo=r(WDe," \u2014 "),Vz=n(WDe,"A",{href:!0});var aPt=s(Vz);qjo=r(aPt,"XLMModel"),aPt.forEach(t),jjo=r(WDe," (XLM model)"),WDe.forEach(t),Djo=i(x),kb=n(x,"LI",{});var UDe=s(kb);Tbe=n(UDe,"STRONG",{});var nPt=s(Tbe);Gjo=r(nPt,"xlm-prophetnet"),nPt.forEach(t),Ojo=r(UDe," \u2014 "),Xz=n(UDe,"A",{href:!0});var sPt=s(Xz);Vjo=r(sPt,"XLMProphetNetModel"),sPt.forEach(t),Xjo=r(UDe," (XLM-ProphetNet model)"),UDe.forEach(t),zjo=i(x),Sb=n(x,"LI",{});var HDe=s(Sb);Mbe=n(HDe,"STRONG",{});var lPt=s(Mbe);Qjo=r(lPt,"xlm-roberta"),lPt.forEach(t),Wjo=r(HDe," \u2014 "),zz=n(HDe,"A",{href:!0});var iPt=s(zz);Ujo=r(iPt,"XLMRobertaModel"),iPt.forEach(t),Hjo=r(HDe," (XLM-RoBERTa model)"),HDe.forEach(t),Jjo=i(x),Rb=n(x,"LI",{});var JDe=s(Rb);Ebe=n(JDe,"STRONG",{});var dPt=s(Ebe);Yjo=r(dPt,"xlm-roberta-xl"),dPt.forEach(t),Zjo=r(JDe," \u2014 "),Qz=n(JDe,"A",{href:!0});var cPt=s(Qz);Kjo=r(cPt,"XLMRobertaXLModel"),cPt.forEach(t),eDo=r(JDe," (XLM-RoBERTa-XL model)"),JDe.forEach(t),oDo=i(x),Pb=n(x,"LI",{});var YDe=s(Pb);Cbe=n(YDe,"STRONG",{});var mPt=s(Cbe);rDo=r(mPt,"xlnet"),mPt.forEach(t),tDo=r(YDe," \u2014 "),Wz=n(YDe,"A",{href:!0});var fPt=s(Wz);aDo=r(fPt,"XLNetModel"),fPt.forEach(t),nDo=r(YDe," (XLNet model)"),YDe.forEach(t),sDo=i(x),Bb=n(x,"LI",{});var ZDe=s(Bb);wbe=n(ZDe,"STRONG",{});var gPt=s(wbe);lDo=r(gPt,"yolos"),gPt.forEach(t),iDo=r(ZDe," \u2014 "),Uz=n(ZDe,"A",{href:!0});var hPt=s(Uz);dDo=r(hPt,"YolosModel"),hPt.forEach(t),cDo=r(ZDe," (YOLOS model)"),ZDe.forEach(t),mDo=i(x),Ib=n(x,"LI",{});var KDe=s(Ib);Abe=n(KDe,"STRONG",{});var uPt=s(Abe);fDo=r(uPt,"yoso"),uPt.forEach(t),gDo=r(KDe," \u2014 "),Hz=n(KDe,"A",{href:!0});var pPt=s(Hz);hDo=r(pPt,"YosoModel"),pPt.forEach(t),uDo=r(KDe," (YOSO model)"),KDe.forEach(t),x.forEach(t),pDo=i(Ea),Nb=n(Ea,"P",{});var eGe=s(Nb);_Do=r(eGe,"The model is set in evaluation mode by default using "),Lbe=n(eGe,"CODE",{});var _Pt=s(Lbe);bDo=r(_Pt,"model.eval()"),_Pt.forEach(t),vDo=r(eGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(eGe,"CODE",{});var bPt=s(ybe);FDo=r(bPt,"model.train()"),bPt.forEach(t),eGe.forEach(t),TDo=i(Ea),T(qb.$$.fragment,Ea),Ea.forEach(t),kl.forEach(t),voo=i(m),Ad=n(m,"H2",{class:!0});var Bto=s(Ad);jb=n(Bto,"A",{id:!0,class:!0,href:!0});var vPt=s(jb);xbe=n(vPt,"SPAN",{});var FPt=s(xbe);T(r$.$$.fragment,FPt),FPt.forEach(t),vPt.forEach(t),MDo=i(Bto),$be=n(Bto,"SPAN",{});var TPt=s($be);EDo=r(TPt,"AutoModelForPreTraining"),TPt.forEach(t),Bto.forEach(t),Foo=i(m),Io=n(m,"DIV",{class:!0});var Sl=s(Io);T(t$.$$.fragment,Sl),CDo=i(Sl),Ld=n(Sl,"P",{});var Die=s(Ld);wDo=r(Die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jz=n(Die,"A",{href:!0});var MPt=s(Jz);ADo=r(MPt,"from_pretrained()"),MPt.forEach(t),LDo=r(Die," class method or the "),Yz=n(Die,"A",{href:!0});var EPt=s(Yz);yDo=r(EPt,"from_config()"),EPt.forEach(t),xDo=r(Die,` class
method.`),Die.forEach(t),$Do=i(Sl),a$=n(Sl,"P",{});var Ito=s(a$);kDo=r(Ito,"This class cannot be instantiated directly using "),kbe=n(Ito,"CODE",{});var CPt=s(kbe);SDo=r(CPt,"__init__()"),CPt.forEach(t),RDo=r(Ito," (throws an error)."),Ito.forEach(t),PDo=i(Sl),Ft=n(Sl,"DIV",{class:!0});var v8=s(Ft);T(n$.$$.fragment,v8),BDo=i(v8),Sbe=n(v8,"P",{});var wPt=s(Sbe);IDo=r(wPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wPt.forEach(t),NDo=i(v8),yd=n(v8,"P",{});var Gie=s(yd);qDo=r(Gie,`Note:
Loading a model from its configuration file does `),Rbe=n(Gie,"STRONG",{});var APt=s(Rbe);jDo=r(APt,"not"),APt.forEach(t),DDo=r(Gie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(Gie,"A",{href:!0});var LPt=s(Zz);GDo=r(LPt,"from_pretrained()"),LPt.forEach(t),ODo=r(Gie," to load the model weights."),Gie.forEach(t),VDo=i(v8),T(Db.$$.fragment,v8),v8.forEach(t),XDo=i(Sl),eo=n(Sl,"DIV",{class:!0});var Ca=s(eo);T(s$.$$.fragment,Ca),zDo=i(Ca),Pbe=n(Ca,"P",{});var yPt=s(Pbe);QDo=r(yPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yPt.forEach(t),WDo=i(Ca),on=n(Ca,"P",{});var F8=s(on);UDo=r(F8,"The model class to instantiate is selected based on the "),Bbe=n(F8,"CODE",{});var xPt=s(Bbe);HDo=r(xPt,"model_type"),xPt.forEach(t),JDo=r(F8,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(F8,"CODE",{});var $Pt=s(Ibe);YDo=r($Pt,"pretrained_model_name_or_path"),$Pt.forEach(t),ZDo=r(F8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(F8,"CODE",{});var kPt=s(Nbe);KDo=r(kPt,"pretrained_model_name_or_path"),kPt.forEach(t),eGo=r(F8,":"),F8.forEach(t),oGo=i(Ca),G=n(Ca,"UL",{});var O=s(G);Gb=n(O,"LI",{});var oGe=s(Gb);qbe=n(oGe,"STRONG",{});var SPt=s(qbe);rGo=r(SPt,"albert"),SPt.forEach(t),tGo=r(oGe," \u2014 "),Kz=n(oGe,"A",{href:!0});var RPt=s(Kz);aGo=r(RPt,"AlbertForPreTraining"),RPt.forEach(t),nGo=r(oGe," (ALBERT model)"),oGe.forEach(t),sGo=i(O),Ob=n(O,"LI",{});var rGe=s(Ob);jbe=n(rGe,"STRONG",{});var PPt=s(jbe);lGo=r(PPt,"bart"),PPt.forEach(t),iGo=r(rGe," \u2014 "),eQ=n(rGe,"A",{href:!0});var BPt=s(eQ);dGo=r(BPt,"BartForConditionalGeneration"),BPt.forEach(t),cGo=r(rGe," (BART model)"),rGe.forEach(t),mGo=i(O),Vb=n(O,"LI",{});var tGe=s(Vb);Dbe=n(tGe,"STRONG",{});var IPt=s(Dbe);fGo=r(IPt,"bert"),IPt.forEach(t),gGo=r(tGe," \u2014 "),oQ=n(tGe,"A",{href:!0});var NPt=s(oQ);hGo=r(NPt,"BertForPreTraining"),NPt.forEach(t),uGo=r(tGe," (BERT model)"),tGe.forEach(t),pGo=i(O),Xb=n(O,"LI",{});var aGe=s(Xb);Gbe=n(aGe,"STRONG",{});var qPt=s(Gbe);_Go=r(qPt,"big_bird"),qPt.forEach(t),bGo=r(aGe," \u2014 "),rQ=n(aGe,"A",{href:!0});var jPt=s(rQ);vGo=r(jPt,"BigBirdForPreTraining"),jPt.forEach(t),FGo=r(aGe," (BigBird model)"),aGe.forEach(t),TGo=i(O),zb=n(O,"LI",{});var nGe=s(zb);Obe=n(nGe,"STRONG",{});var DPt=s(Obe);MGo=r(DPt,"bloom"),DPt.forEach(t),EGo=r(nGe," \u2014 "),tQ=n(nGe,"A",{href:!0});var GPt=s(tQ);CGo=r(GPt,"BloomForCausalLM"),GPt.forEach(t),wGo=r(nGe," (BLOOM model)"),nGe.forEach(t),AGo=i(O),Qb=n(O,"LI",{});var sGe=s(Qb);Vbe=n(sGe,"STRONG",{});var OPt=s(Vbe);LGo=r(OPt,"camembert"),OPt.forEach(t),yGo=r(sGe," \u2014 "),aQ=n(sGe,"A",{href:!0});var VPt=s(aQ);xGo=r(VPt,"CamembertForMaskedLM"),VPt.forEach(t),$Go=r(sGe," (CamemBERT model)"),sGe.forEach(t),kGo=i(O),Wb=n(O,"LI",{});var lGe=s(Wb);Xbe=n(lGe,"STRONG",{});var XPt=s(Xbe);SGo=r(XPt,"ctrl"),XPt.forEach(t),RGo=r(lGe," \u2014 "),nQ=n(lGe,"A",{href:!0});var zPt=s(nQ);PGo=r(zPt,"CTRLLMHeadModel"),zPt.forEach(t),BGo=r(lGe," (CTRL model)"),lGe.forEach(t),IGo=i(O),Ub=n(O,"LI",{});var iGe=s(Ub);zbe=n(iGe,"STRONG",{});var QPt=s(zbe);NGo=r(QPt,"data2vec-text"),QPt.forEach(t),qGo=r(iGe," \u2014 "),sQ=n(iGe,"A",{href:!0});var WPt=s(sQ);jGo=r(WPt,"Data2VecTextForMaskedLM"),WPt.forEach(t),DGo=r(iGe," (Data2VecText model)"),iGe.forEach(t),GGo=i(O),Hb=n(O,"LI",{});var dGe=s(Hb);Qbe=n(dGe,"STRONG",{});var UPt=s(Qbe);OGo=r(UPt,"deberta"),UPt.forEach(t),VGo=r(dGe," \u2014 "),lQ=n(dGe,"A",{href:!0});var HPt=s(lQ);XGo=r(HPt,"DebertaForMaskedLM"),HPt.forEach(t),zGo=r(dGe," (DeBERTa model)"),dGe.forEach(t),QGo=i(O),Jb=n(O,"LI",{});var cGe=s(Jb);Wbe=n(cGe,"STRONG",{});var JPt=s(Wbe);WGo=r(JPt,"deberta-v2"),JPt.forEach(t),UGo=r(cGe," \u2014 "),iQ=n(cGe,"A",{href:!0});var YPt=s(iQ);HGo=r(YPt,"DebertaV2ForMaskedLM"),YPt.forEach(t),JGo=r(cGe," (DeBERTa-v2 model)"),cGe.forEach(t),YGo=i(O),Yb=n(O,"LI",{});var mGe=s(Yb);Ube=n(mGe,"STRONG",{});var ZPt=s(Ube);ZGo=r(ZPt,"distilbert"),ZPt.forEach(t),KGo=r(mGe," \u2014 "),dQ=n(mGe,"A",{href:!0});var KPt=s(dQ);eOo=r(KPt,"DistilBertForMaskedLM"),KPt.forEach(t),oOo=r(mGe," (DistilBERT model)"),mGe.forEach(t),rOo=i(O),Zb=n(O,"LI",{});var fGe=s(Zb);Hbe=n(fGe,"STRONG",{});var eBt=s(Hbe);tOo=r(eBt,"electra"),eBt.forEach(t),aOo=r(fGe," \u2014 "),cQ=n(fGe,"A",{href:!0});var oBt=s(cQ);nOo=r(oBt,"ElectraForPreTraining"),oBt.forEach(t),sOo=r(fGe," (ELECTRA model)"),fGe.forEach(t),lOo=i(O),Kb=n(O,"LI",{});var gGe=s(Kb);Jbe=n(gGe,"STRONG",{});var rBt=s(Jbe);iOo=r(rBt,"ernie"),rBt.forEach(t),dOo=r(gGe," \u2014 "),mQ=n(gGe,"A",{href:!0});var tBt=s(mQ);cOo=r(tBt,"ErnieForPreTraining"),tBt.forEach(t),mOo=r(gGe," (ERNIE model)"),gGe.forEach(t),fOo=i(O),e2=n(O,"LI",{});var hGe=s(e2);Ybe=n(hGe,"STRONG",{});var aBt=s(Ybe);gOo=r(aBt,"flaubert"),aBt.forEach(t),hOo=r(hGe," \u2014 "),fQ=n(hGe,"A",{href:!0});var nBt=s(fQ);uOo=r(nBt,"FlaubertWithLMHeadModel"),nBt.forEach(t),pOo=r(hGe," (FlauBERT model)"),hGe.forEach(t),_Oo=i(O),o2=n(O,"LI",{});var uGe=s(o2);Zbe=n(uGe,"STRONG",{});var sBt=s(Zbe);bOo=r(sBt,"flava"),sBt.forEach(t),vOo=r(uGe," \u2014 "),gQ=n(uGe,"A",{href:!0});var lBt=s(gQ);FOo=r(lBt,"FlavaForPreTraining"),lBt.forEach(t),TOo=r(uGe," (FLAVA model)"),uGe.forEach(t),MOo=i(O),r2=n(O,"LI",{});var pGe=s(r2);Kbe=n(pGe,"STRONG",{});var iBt=s(Kbe);EOo=r(iBt,"fnet"),iBt.forEach(t),COo=r(pGe," \u2014 "),hQ=n(pGe,"A",{href:!0});var dBt=s(hQ);wOo=r(dBt,"FNetForPreTraining"),dBt.forEach(t),AOo=r(pGe," (FNet model)"),pGe.forEach(t),LOo=i(O),t2=n(O,"LI",{});var _Ge=s(t2);e2e=n(_Ge,"STRONG",{});var cBt=s(e2e);yOo=r(cBt,"fsmt"),cBt.forEach(t),xOo=r(_Ge," \u2014 "),uQ=n(_Ge,"A",{href:!0});var mBt=s(uQ);$Oo=r(mBt,"FSMTForConditionalGeneration"),mBt.forEach(t),kOo=r(_Ge," (FairSeq Machine-Translation model)"),_Ge.forEach(t),SOo=i(O),a2=n(O,"LI",{});var bGe=s(a2);o2e=n(bGe,"STRONG",{});var fBt=s(o2e);ROo=r(fBt,"funnel"),fBt.forEach(t),POo=r(bGe," \u2014 "),pQ=n(bGe,"A",{href:!0});var gBt=s(pQ);BOo=r(gBt,"FunnelForPreTraining"),gBt.forEach(t),IOo=r(bGe," (Funnel Transformer model)"),bGe.forEach(t),NOo=i(O),n2=n(O,"LI",{});var vGe=s(n2);r2e=n(vGe,"STRONG",{});var hBt=s(r2e);qOo=r(hBt,"gpt2"),hBt.forEach(t),jOo=r(vGe," \u2014 "),_Q=n(vGe,"A",{href:!0});var uBt=s(_Q);DOo=r(uBt,"GPT2LMHeadModel"),uBt.forEach(t),GOo=r(vGe," (OpenAI GPT-2 model)"),vGe.forEach(t),OOo=i(O),s2=n(O,"LI",{});var FGe=s(s2);t2e=n(FGe,"STRONG",{});var pBt=s(t2e);VOo=r(pBt,"ibert"),pBt.forEach(t),XOo=r(FGe," \u2014 "),bQ=n(FGe,"A",{href:!0});var _Bt=s(bQ);zOo=r(_Bt,"IBertForMaskedLM"),_Bt.forEach(t),QOo=r(FGe," (I-BERT model)"),FGe.forEach(t),WOo=i(O),l2=n(O,"LI",{});var TGe=s(l2);a2e=n(TGe,"STRONG",{});var bBt=s(a2e);UOo=r(bBt,"layoutlm"),bBt.forEach(t),HOo=r(TGe," \u2014 "),vQ=n(TGe,"A",{href:!0});var vBt=s(vQ);JOo=r(vBt,"LayoutLMForMaskedLM"),vBt.forEach(t),YOo=r(TGe," (LayoutLM model)"),TGe.forEach(t),ZOo=i(O),i2=n(O,"LI",{});var MGe=s(i2);n2e=n(MGe,"STRONG",{});var FBt=s(n2e);KOo=r(FBt,"longformer"),FBt.forEach(t),eVo=r(MGe," \u2014 "),FQ=n(MGe,"A",{href:!0});var TBt=s(FQ);oVo=r(TBt,"LongformerForMaskedLM"),TBt.forEach(t),rVo=r(MGe," (Longformer model)"),MGe.forEach(t),tVo=i(O),d2=n(O,"LI",{});var EGe=s(d2);s2e=n(EGe,"STRONG",{});var MBt=s(s2e);aVo=r(MBt,"luke"),MBt.forEach(t),nVo=r(EGe," \u2014 "),TQ=n(EGe,"A",{href:!0});var EBt=s(TQ);sVo=r(EBt,"LukeForMaskedLM"),EBt.forEach(t),lVo=r(EGe," (LUKE model)"),EGe.forEach(t),iVo=i(O),c2=n(O,"LI",{});var CGe=s(c2);l2e=n(CGe,"STRONG",{});var CBt=s(l2e);dVo=r(CBt,"lxmert"),CBt.forEach(t),cVo=r(CGe," \u2014 "),MQ=n(CGe,"A",{href:!0});var wBt=s(MQ);mVo=r(wBt,"LxmertForPreTraining"),wBt.forEach(t),fVo=r(CGe," (LXMERT model)"),CGe.forEach(t),gVo=i(O),m2=n(O,"LI",{});var wGe=s(m2);i2e=n(wGe,"STRONG",{});var ABt=s(i2e);hVo=r(ABt,"megatron-bert"),ABt.forEach(t),uVo=r(wGe," \u2014 "),EQ=n(wGe,"A",{href:!0});var LBt=s(EQ);pVo=r(LBt,"MegatronBertForPreTraining"),LBt.forEach(t),_Vo=r(wGe," (Megatron-BERT model)"),wGe.forEach(t),bVo=i(O),f2=n(O,"LI",{});var AGe=s(f2);d2e=n(AGe,"STRONG",{});var yBt=s(d2e);vVo=r(yBt,"mobilebert"),yBt.forEach(t),FVo=r(AGe," \u2014 "),CQ=n(AGe,"A",{href:!0});var xBt=s(CQ);TVo=r(xBt,"MobileBertForPreTraining"),xBt.forEach(t),MVo=r(AGe," (MobileBERT model)"),AGe.forEach(t),EVo=i(O),g2=n(O,"LI",{});var LGe=s(g2);c2e=n(LGe,"STRONG",{});var $Bt=s(c2e);CVo=r($Bt,"mpnet"),$Bt.forEach(t),wVo=r(LGe," \u2014 "),wQ=n(LGe,"A",{href:!0});var kBt=s(wQ);AVo=r(kBt,"MPNetForMaskedLM"),kBt.forEach(t),LVo=r(LGe," (MPNet model)"),LGe.forEach(t),yVo=i(O),h2=n(O,"LI",{});var yGe=s(h2);m2e=n(yGe,"STRONG",{});var SBt=s(m2e);xVo=r(SBt,"mvp"),SBt.forEach(t),$Vo=r(yGe," \u2014 "),AQ=n(yGe,"A",{href:!0});var RBt=s(AQ);kVo=r(RBt,"MvpForConditionalGeneration"),RBt.forEach(t),SVo=r(yGe," (MVP model)"),yGe.forEach(t),RVo=i(O),u2=n(O,"LI",{});var xGe=s(u2);f2e=n(xGe,"STRONG",{});var PBt=s(f2e);PVo=r(PBt,"nezha"),PBt.forEach(t),BVo=r(xGe," \u2014 "),LQ=n(xGe,"A",{href:!0});var BBt=s(LQ);IVo=r(BBt,"NezhaForPreTraining"),BBt.forEach(t),NVo=r(xGe," (Nezha model)"),xGe.forEach(t),qVo=i(O),p2=n(O,"LI",{});var $Ge=s(p2);g2e=n($Ge,"STRONG",{});var IBt=s(g2e);jVo=r(IBt,"openai-gpt"),IBt.forEach(t),DVo=r($Ge," \u2014 "),yQ=n($Ge,"A",{href:!0});var NBt=s(yQ);GVo=r(NBt,"OpenAIGPTLMHeadModel"),NBt.forEach(t),OVo=r($Ge," (OpenAI GPT model)"),$Ge.forEach(t),VVo=i(O),_2=n(O,"LI",{});var kGe=s(_2);h2e=n(kGe,"STRONG",{});var qBt=s(h2e);XVo=r(qBt,"retribert"),qBt.forEach(t),zVo=r(kGe," \u2014 "),xQ=n(kGe,"A",{href:!0});var jBt=s(xQ);QVo=r(jBt,"RetriBertModel"),jBt.forEach(t),WVo=r(kGe," (RetriBERT model)"),kGe.forEach(t),UVo=i(O),b2=n(O,"LI",{});var SGe=s(b2);u2e=n(SGe,"STRONG",{});var DBt=s(u2e);HVo=r(DBt,"roberta"),DBt.forEach(t),JVo=r(SGe," \u2014 "),$Q=n(SGe,"A",{href:!0});var GBt=s($Q);YVo=r(GBt,"RobertaForMaskedLM"),GBt.forEach(t),ZVo=r(SGe," (RoBERTa model)"),SGe.forEach(t),KVo=i(O),v2=n(O,"LI",{});var RGe=s(v2);p2e=n(RGe,"STRONG",{});var OBt=s(p2e);eXo=r(OBt,"splinter"),OBt.forEach(t),oXo=r(RGe," \u2014 "),kQ=n(RGe,"A",{href:!0});var VBt=s(kQ);rXo=r(VBt,"SplinterForPreTraining"),VBt.forEach(t),tXo=r(RGe," (Splinter model)"),RGe.forEach(t),aXo=i(O),F2=n(O,"LI",{});var PGe=s(F2);_2e=n(PGe,"STRONG",{});var XBt=s(_2e);nXo=r(XBt,"squeezebert"),XBt.forEach(t),sXo=r(PGe," \u2014 "),SQ=n(PGe,"A",{href:!0});var zBt=s(SQ);lXo=r(zBt,"SqueezeBertForMaskedLM"),zBt.forEach(t),iXo=r(PGe," (SqueezeBERT model)"),PGe.forEach(t),dXo=i(O),T2=n(O,"LI",{});var BGe=s(T2);b2e=n(BGe,"STRONG",{});var QBt=s(b2e);cXo=r(QBt,"t5"),QBt.forEach(t),mXo=r(BGe," \u2014 "),RQ=n(BGe,"A",{href:!0});var WBt=s(RQ);fXo=r(WBt,"T5ForConditionalGeneration"),WBt.forEach(t),gXo=r(BGe," (T5 model)"),BGe.forEach(t),hXo=i(O),M2=n(O,"LI",{});var IGe=s(M2);v2e=n(IGe,"STRONG",{});var UBt=s(v2e);uXo=r(UBt,"tapas"),UBt.forEach(t),pXo=r(IGe," \u2014 "),PQ=n(IGe,"A",{href:!0});var HBt=s(PQ);_Xo=r(HBt,"TapasForMaskedLM"),HBt.forEach(t),bXo=r(IGe," (TAPAS model)"),IGe.forEach(t),vXo=i(O),E2=n(O,"LI",{});var NGe=s(E2);F2e=n(NGe,"STRONG",{});var JBt=s(F2e);FXo=r(JBt,"transfo-xl"),JBt.forEach(t),TXo=r(NGe," \u2014 "),BQ=n(NGe,"A",{href:!0});var YBt=s(BQ);MXo=r(YBt,"TransfoXLLMHeadModel"),YBt.forEach(t),EXo=r(NGe," (Transformer-XL model)"),NGe.forEach(t),CXo=i(O),C2=n(O,"LI",{});var qGe=s(C2);T2e=n(qGe,"STRONG",{});var ZBt=s(T2e);wXo=r(ZBt,"unispeech"),ZBt.forEach(t),AXo=r(qGe," \u2014 "),IQ=n(qGe,"A",{href:!0});var KBt=s(IQ);LXo=r(KBt,"UniSpeechForPreTraining"),KBt.forEach(t),yXo=r(qGe," (UniSpeech model)"),qGe.forEach(t),xXo=i(O),w2=n(O,"LI",{});var jGe=s(w2);M2e=n(jGe,"STRONG",{});var eIt=s(M2e);$Xo=r(eIt,"unispeech-sat"),eIt.forEach(t),kXo=r(jGe," \u2014 "),NQ=n(jGe,"A",{href:!0});var oIt=s(NQ);SXo=r(oIt,"UniSpeechSatForPreTraining"),oIt.forEach(t),RXo=r(jGe," (UniSpeechSat model)"),jGe.forEach(t),PXo=i(O),A2=n(O,"LI",{});var DGe=s(A2);E2e=n(DGe,"STRONG",{});var rIt=s(E2e);BXo=r(rIt,"videomae"),rIt.forEach(t),IXo=r(DGe," \u2014 "),qQ=n(DGe,"A",{href:!0});var tIt=s(qQ);NXo=r(tIt,"VideoMAEForPreTraining"),tIt.forEach(t),qXo=r(DGe," (VideoMAE model)"),DGe.forEach(t),jXo=i(O),L2=n(O,"LI",{});var GGe=s(L2);C2e=n(GGe,"STRONG",{});var aIt=s(C2e);DXo=r(aIt,"visual_bert"),aIt.forEach(t),GXo=r(GGe," \u2014 "),jQ=n(GGe,"A",{href:!0});var nIt=s(jQ);OXo=r(nIt,"VisualBertForPreTraining"),nIt.forEach(t),VXo=r(GGe," (VisualBERT model)"),GGe.forEach(t),XXo=i(O),y2=n(O,"LI",{});var OGe=s(y2);w2e=n(OGe,"STRONG",{});var sIt=s(w2e);zXo=r(sIt,"vit_mae"),sIt.forEach(t),QXo=r(OGe," \u2014 "),DQ=n(OGe,"A",{href:!0});var lIt=s(DQ);WXo=r(lIt,"ViTMAEForPreTraining"),lIt.forEach(t),UXo=r(OGe," (ViTMAE model)"),OGe.forEach(t),HXo=i(O),x2=n(O,"LI",{});var VGe=s(x2);A2e=n(VGe,"STRONG",{});var iIt=s(A2e);JXo=r(iIt,"wav2vec2"),iIt.forEach(t),YXo=r(VGe," \u2014 "),GQ=n(VGe,"A",{href:!0});var dIt=s(GQ);ZXo=r(dIt,"Wav2Vec2ForPreTraining"),dIt.forEach(t),KXo=r(VGe," (Wav2Vec2 model)"),VGe.forEach(t),ezo=i(O),$2=n(O,"LI",{});var XGe=s($2);L2e=n(XGe,"STRONG",{});var cIt=s(L2e);ozo=r(cIt,"wav2vec2-conformer"),cIt.forEach(t),rzo=r(XGe," \u2014 "),OQ=n(XGe,"A",{href:!0});var mIt=s(OQ);tzo=r(mIt,"Wav2Vec2ConformerForPreTraining"),mIt.forEach(t),azo=r(XGe," (Wav2Vec2-Conformer model)"),XGe.forEach(t),nzo=i(O),k2=n(O,"LI",{});var zGe=s(k2);y2e=n(zGe,"STRONG",{});var fIt=s(y2e);szo=r(fIt,"xlm"),fIt.forEach(t),lzo=r(zGe," \u2014 "),VQ=n(zGe,"A",{href:!0});var gIt=s(VQ);izo=r(gIt,"XLMWithLMHeadModel"),gIt.forEach(t),dzo=r(zGe," (XLM model)"),zGe.forEach(t),czo=i(O),S2=n(O,"LI",{});var QGe=s(S2);x2e=n(QGe,"STRONG",{});var hIt=s(x2e);mzo=r(hIt,"xlm-roberta"),hIt.forEach(t),fzo=r(QGe," \u2014 "),XQ=n(QGe,"A",{href:!0});var uIt=s(XQ);gzo=r(uIt,"XLMRobertaForMaskedLM"),uIt.forEach(t),hzo=r(QGe," (XLM-RoBERTa model)"),QGe.forEach(t),uzo=i(O),R2=n(O,"LI",{});var WGe=s(R2);$2e=n(WGe,"STRONG",{});var pIt=s($2e);pzo=r(pIt,"xlm-roberta-xl"),pIt.forEach(t),_zo=r(WGe," \u2014 "),zQ=n(WGe,"A",{href:!0});var _It=s(zQ);bzo=r(_It,"XLMRobertaXLForMaskedLM"),_It.forEach(t),vzo=r(WGe," (XLM-RoBERTa-XL model)"),WGe.forEach(t),Fzo=i(O),P2=n(O,"LI",{});var UGe=s(P2);k2e=n(UGe,"STRONG",{});var bIt=s(k2e);Tzo=r(bIt,"xlnet"),bIt.forEach(t),Mzo=r(UGe," \u2014 "),QQ=n(UGe,"A",{href:!0});var vIt=s(QQ);Ezo=r(vIt,"XLNetLMHeadModel"),vIt.forEach(t),Czo=r(UGe," (XLNet model)"),UGe.forEach(t),O.forEach(t),wzo=i(Ca),B2=n(Ca,"P",{});var HGe=s(B2);Azo=r(HGe,"The model is set in evaluation mode by default using "),S2e=n(HGe,"CODE",{});var FIt=s(S2e);Lzo=r(FIt,"model.eval()"),FIt.forEach(t),yzo=r(HGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=n(HGe,"CODE",{});var TIt=s(R2e);xzo=r(TIt,"model.train()"),TIt.forEach(t),HGe.forEach(t),$zo=i(Ca),T(I2.$$.fragment,Ca),Ca.forEach(t),Sl.forEach(t),Too=i(m),xd=n(m,"H2",{class:!0});var Nto=s(xd);N2=n(Nto,"A",{id:!0,class:!0,href:!0});var MIt=s(N2);P2e=n(MIt,"SPAN",{});var EIt=s(P2e);T(l$.$$.fragment,EIt),EIt.forEach(t),MIt.forEach(t),kzo=i(Nto),B2e=n(Nto,"SPAN",{});var CIt=s(B2e);Szo=r(CIt,"AutoModelForCausalLM"),CIt.forEach(t),Nto.forEach(t),Moo=i(m),No=n(m,"DIV",{class:!0});var Rl=s(No);T(i$.$$.fragment,Rl),Rzo=i(Rl),$d=n(Rl,"P",{});var Oie=s($d);Pzo=r(Oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WQ=n(Oie,"A",{href:!0});var wIt=s(WQ);Bzo=r(wIt,"from_pretrained()"),wIt.forEach(t),Izo=r(Oie," class method or the "),UQ=n(Oie,"A",{href:!0});var AIt=s(UQ);Nzo=r(AIt,"from_config()"),AIt.forEach(t),qzo=r(Oie,` class
method.`),Oie.forEach(t),jzo=i(Rl),d$=n(Rl,"P",{});var qto=s(d$);Dzo=r(qto,"This class cannot be instantiated directly using "),I2e=n(qto,"CODE",{});var LIt=s(I2e);Gzo=r(LIt,"__init__()"),LIt.forEach(t),Ozo=r(qto," (throws an error)."),qto.forEach(t),Vzo=i(Rl),Tt=n(Rl,"DIV",{class:!0});var T8=s(Tt);T(c$.$$.fragment,T8),Xzo=i(T8),N2e=n(T8,"P",{});var yIt=s(N2e);zzo=r(yIt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yIt.forEach(t),Qzo=i(T8),kd=n(T8,"P",{});var Vie=s(kd);Wzo=r(Vie,`Note:
Loading a model from its configuration file does `),q2e=n(Vie,"STRONG",{});var xIt=s(q2e);Uzo=r(xIt,"not"),xIt.forEach(t),Hzo=r(Vie,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(Vie,"A",{href:!0});var $It=s(HQ);Jzo=r($It,"from_pretrained()"),$It.forEach(t),Yzo=r(Vie," to load the model weights."),Vie.forEach(t),Zzo=i(T8),T(q2.$$.fragment,T8),T8.forEach(t),Kzo=i(Rl),oo=n(Rl,"DIV",{class:!0});var wa=s(oo);T(m$.$$.fragment,wa),eQo=i(wa),j2e=n(wa,"P",{});var kIt=s(j2e);oQo=r(kIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kIt.forEach(t),rQo=i(wa),rn=n(wa,"P",{});var M8=s(rn);tQo=r(M8,"The model class to instantiate is selected based on the "),D2e=n(M8,"CODE",{});var SIt=s(D2e);aQo=r(SIt,"model_type"),SIt.forEach(t),nQo=r(M8,` property of the config object (either
passed as an argument or loaded from `),G2e=n(M8,"CODE",{});var RIt=s(G2e);sQo=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),lQo=r(M8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(M8,"CODE",{});var PIt=s(O2e);iQo=r(PIt,"pretrained_model_name_or_path"),PIt.forEach(t),dQo=r(M8,":"),M8.forEach(t),cQo=i(wa),Q=n(wa,"UL",{});var U=s(Q);j2=n(U,"LI",{});var JGe=s(j2);V2e=n(JGe,"STRONG",{});var BIt=s(V2e);mQo=r(BIt,"bart"),BIt.forEach(t),fQo=r(JGe," \u2014 "),JQ=n(JGe,"A",{href:!0});var IIt=s(JQ);gQo=r(IIt,"BartForCausalLM"),IIt.forEach(t),hQo=r(JGe," (BART model)"),JGe.forEach(t),uQo=i(U),D2=n(U,"LI",{});var YGe=s(D2);X2e=n(YGe,"STRONG",{});var NIt=s(X2e);pQo=r(NIt,"bert"),NIt.forEach(t),_Qo=r(YGe," \u2014 "),YQ=n(YGe,"A",{href:!0});var qIt=s(YQ);bQo=r(qIt,"BertLMHeadModel"),qIt.forEach(t),vQo=r(YGe," (BERT model)"),YGe.forEach(t),FQo=i(U),G2=n(U,"LI",{});var ZGe=s(G2);z2e=n(ZGe,"STRONG",{});var jIt=s(z2e);TQo=r(jIt,"bert-generation"),jIt.forEach(t),MQo=r(ZGe," \u2014 "),ZQ=n(ZGe,"A",{href:!0});var DIt=s(ZQ);EQo=r(DIt,"BertGenerationDecoder"),DIt.forEach(t),CQo=r(ZGe," (Bert Generation model)"),ZGe.forEach(t),wQo=i(U),O2=n(U,"LI",{});var KGe=s(O2);Q2e=n(KGe,"STRONG",{});var GIt=s(Q2e);AQo=r(GIt,"big_bird"),GIt.forEach(t),LQo=r(KGe," \u2014 "),KQ=n(KGe,"A",{href:!0});var OIt=s(KQ);yQo=r(OIt,"BigBirdForCausalLM"),OIt.forEach(t),xQo=r(KGe," (BigBird model)"),KGe.forEach(t),$Qo=i(U),V2=n(U,"LI",{});var eOe=s(V2);W2e=n(eOe,"STRONG",{});var VIt=s(W2e);kQo=r(VIt,"bigbird_pegasus"),VIt.forEach(t),SQo=r(eOe," \u2014 "),eW=n(eOe,"A",{href:!0});var XIt=s(eW);RQo=r(XIt,"BigBirdPegasusForCausalLM"),XIt.forEach(t),PQo=r(eOe," (BigBird-Pegasus model)"),eOe.forEach(t),BQo=i(U),X2=n(U,"LI",{});var oOe=s(X2);U2e=n(oOe,"STRONG",{});var zIt=s(U2e);IQo=r(zIt,"blenderbot"),zIt.forEach(t),NQo=r(oOe," \u2014 "),oW=n(oOe,"A",{href:!0});var QIt=s(oW);qQo=r(QIt,"BlenderbotForCausalLM"),QIt.forEach(t),jQo=r(oOe," (Blenderbot model)"),oOe.forEach(t),DQo=i(U),z2=n(U,"LI",{});var rOe=s(z2);H2e=n(rOe,"STRONG",{});var WIt=s(H2e);GQo=r(WIt,"blenderbot-small"),WIt.forEach(t),OQo=r(rOe," \u2014 "),rW=n(rOe,"A",{href:!0});var UIt=s(rW);VQo=r(UIt,"BlenderbotSmallForCausalLM"),UIt.forEach(t),XQo=r(rOe," (BlenderbotSmall model)"),rOe.forEach(t),zQo=i(U),Q2=n(U,"LI",{});var tOe=s(Q2);J2e=n(tOe,"STRONG",{});var HIt=s(J2e);QQo=r(HIt,"bloom"),HIt.forEach(t),WQo=r(tOe," \u2014 "),tW=n(tOe,"A",{href:!0});var JIt=s(tW);UQo=r(JIt,"BloomForCausalLM"),JIt.forEach(t),HQo=r(tOe," (BLOOM model)"),tOe.forEach(t),JQo=i(U),W2=n(U,"LI",{});var aOe=s(W2);Y2e=n(aOe,"STRONG",{});var YIt=s(Y2e);YQo=r(YIt,"camembert"),YIt.forEach(t),ZQo=r(aOe," \u2014 "),aW=n(aOe,"A",{href:!0});var ZIt=s(aW);KQo=r(ZIt,"CamembertForCausalLM"),ZIt.forEach(t),eWo=r(aOe," (CamemBERT model)"),aOe.forEach(t),oWo=i(U),U2=n(U,"LI",{});var nOe=s(U2);Z2e=n(nOe,"STRONG",{});var KIt=s(Z2e);rWo=r(KIt,"codegen"),KIt.forEach(t),tWo=r(nOe," \u2014 "),nW=n(nOe,"A",{href:!0});var eNt=s(nW);aWo=r(eNt,"CodeGenForCausalLM"),eNt.forEach(t),nWo=r(nOe," (CodeGen model)"),nOe.forEach(t),sWo=i(U),H2=n(U,"LI",{});var sOe=s(H2);K2e=n(sOe,"STRONG",{});var oNt=s(K2e);lWo=r(oNt,"ctrl"),oNt.forEach(t),iWo=r(sOe," \u2014 "),sW=n(sOe,"A",{href:!0});var rNt=s(sW);dWo=r(rNt,"CTRLLMHeadModel"),rNt.forEach(t),cWo=r(sOe," (CTRL model)"),sOe.forEach(t),mWo=i(U),J2=n(U,"LI",{});var lOe=s(J2);eve=n(lOe,"STRONG",{});var tNt=s(eve);fWo=r(tNt,"data2vec-text"),tNt.forEach(t),gWo=r(lOe," \u2014 "),lW=n(lOe,"A",{href:!0});var aNt=s(lW);hWo=r(aNt,"Data2VecTextForCausalLM"),aNt.forEach(t),uWo=r(lOe," (Data2VecText model)"),lOe.forEach(t),pWo=i(U),Y2=n(U,"LI",{});var iOe=s(Y2);ove=n(iOe,"STRONG",{});var nNt=s(ove);_Wo=r(nNt,"electra"),nNt.forEach(t),bWo=r(iOe," \u2014 "),iW=n(iOe,"A",{href:!0});var sNt=s(iW);vWo=r(sNt,"ElectraForCausalLM"),sNt.forEach(t),FWo=r(iOe," (ELECTRA model)"),iOe.forEach(t),TWo=i(U),Z2=n(U,"LI",{});var dOe=s(Z2);rve=n(dOe,"STRONG",{});var lNt=s(rve);MWo=r(lNt,"ernie"),lNt.forEach(t),EWo=r(dOe," \u2014 "),dW=n(dOe,"A",{href:!0});var iNt=s(dW);CWo=r(iNt,"ErnieForCausalLM"),iNt.forEach(t),wWo=r(dOe," (ERNIE model)"),dOe.forEach(t),AWo=i(U),K2=n(U,"LI",{});var cOe=s(K2);tve=n(cOe,"STRONG",{});var dNt=s(tve);LWo=r(dNt,"gpt2"),dNt.forEach(t),yWo=r(cOe," \u2014 "),cW=n(cOe,"A",{href:!0});var cNt=s(cW);xWo=r(cNt,"GPT2LMHeadModel"),cNt.forEach(t),$Wo=r(cOe," (OpenAI GPT-2 model)"),cOe.forEach(t),kWo=i(U),ev=n(U,"LI",{});var mOe=s(ev);ave=n(mOe,"STRONG",{});var mNt=s(ave);SWo=r(mNt,"gpt_neo"),mNt.forEach(t),RWo=r(mOe," \u2014 "),mW=n(mOe,"A",{href:!0});var fNt=s(mW);PWo=r(fNt,"GPTNeoForCausalLM"),fNt.forEach(t),BWo=r(mOe," (GPT Neo model)"),mOe.forEach(t),IWo=i(U),ov=n(U,"LI",{});var fOe=s(ov);nve=n(fOe,"STRONG",{});var gNt=s(nve);NWo=r(gNt,"gpt_neox"),gNt.forEach(t),qWo=r(fOe," \u2014 "),fW=n(fOe,"A",{href:!0});var hNt=s(fW);jWo=r(hNt,"GPTNeoXForCausalLM"),hNt.forEach(t),DWo=r(fOe," (GPT NeoX model)"),fOe.forEach(t),GWo=i(U),rv=n(U,"LI",{});var gOe=s(rv);sve=n(gOe,"STRONG",{});var uNt=s(sve);OWo=r(uNt,"gpt_neox_japanese"),uNt.forEach(t),VWo=r(gOe," \u2014 "),gW=n(gOe,"A",{href:!0});var pNt=s(gW);XWo=r(pNt,"GPTNeoXJapaneseForCausalLM"),pNt.forEach(t),zWo=r(gOe," (GPT NeoX Japanese model)"),gOe.forEach(t),QWo=i(U),tv=n(U,"LI",{});var hOe=s(tv);lve=n(hOe,"STRONG",{});var _Nt=s(lve);WWo=r(_Nt,"gptj"),_Nt.forEach(t),UWo=r(hOe," \u2014 "),hW=n(hOe,"A",{href:!0});var bNt=s(hW);HWo=r(bNt,"GPTJForCausalLM"),bNt.forEach(t),JWo=r(hOe," (GPT-J model)"),hOe.forEach(t),YWo=i(U),av=n(U,"LI",{});var uOe=s(av);ive=n(uOe,"STRONG",{});var vNt=s(ive);ZWo=r(vNt,"marian"),vNt.forEach(t),KWo=r(uOe," \u2014 "),uW=n(uOe,"A",{href:!0});var FNt=s(uW);eUo=r(FNt,"MarianForCausalLM"),FNt.forEach(t),oUo=r(uOe," (Marian model)"),uOe.forEach(t),rUo=i(U),nv=n(U,"LI",{});var pOe=s(nv);dve=n(pOe,"STRONG",{});var TNt=s(dve);tUo=r(TNt,"mbart"),TNt.forEach(t),aUo=r(pOe," \u2014 "),pW=n(pOe,"A",{href:!0});var MNt=s(pW);nUo=r(MNt,"MBartForCausalLM"),MNt.forEach(t),sUo=r(pOe," (mBART model)"),pOe.forEach(t),lUo=i(U),sv=n(U,"LI",{});var _Oe=s(sv);cve=n(_Oe,"STRONG",{});var ENt=s(cve);iUo=r(ENt,"megatron-bert"),ENt.forEach(t),dUo=r(_Oe," \u2014 "),_W=n(_Oe,"A",{href:!0});var CNt=s(_W);cUo=r(CNt,"MegatronBertForCausalLM"),CNt.forEach(t),mUo=r(_Oe," (Megatron-BERT model)"),_Oe.forEach(t),fUo=i(U),lv=n(U,"LI",{});var bOe=s(lv);mve=n(bOe,"STRONG",{});var wNt=s(mve);gUo=r(wNt,"mvp"),wNt.forEach(t),hUo=r(bOe," \u2014 "),bW=n(bOe,"A",{href:!0});var ANt=s(bW);uUo=r(ANt,"MvpForCausalLM"),ANt.forEach(t),pUo=r(bOe," (MVP model)"),bOe.forEach(t),_Uo=i(U),iv=n(U,"LI",{});var vOe=s(iv);fve=n(vOe,"STRONG",{});var LNt=s(fve);bUo=r(LNt,"openai-gpt"),LNt.forEach(t),vUo=r(vOe," \u2014 "),vW=n(vOe,"A",{href:!0});var yNt=s(vW);FUo=r(yNt,"OpenAIGPTLMHeadModel"),yNt.forEach(t),TUo=r(vOe," (OpenAI GPT model)"),vOe.forEach(t),MUo=i(U),dv=n(U,"LI",{});var FOe=s(dv);gve=n(FOe,"STRONG",{});var xNt=s(gve);EUo=r(xNt,"opt"),xNt.forEach(t),CUo=r(FOe," \u2014 "),FW=n(FOe,"A",{href:!0});var $Nt=s(FW);wUo=r($Nt,"OPTForCausalLM"),$Nt.forEach(t),AUo=r(FOe," (OPT model)"),FOe.forEach(t),LUo=i(U),cv=n(U,"LI",{});var TOe=s(cv);hve=n(TOe,"STRONG",{});var kNt=s(hve);yUo=r(kNt,"pegasus"),kNt.forEach(t),xUo=r(TOe," \u2014 "),TW=n(TOe,"A",{href:!0});var SNt=s(TW);$Uo=r(SNt,"PegasusForCausalLM"),SNt.forEach(t),kUo=r(TOe," (Pegasus model)"),TOe.forEach(t),SUo=i(U),mv=n(U,"LI",{});var MOe=s(mv);uve=n(MOe,"STRONG",{});var RNt=s(uve);RUo=r(RNt,"plbart"),RNt.forEach(t),PUo=r(MOe," \u2014 "),MW=n(MOe,"A",{href:!0});var PNt=s(MW);BUo=r(PNt,"PLBartForCausalLM"),PNt.forEach(t),IUo=r(MOe," (PLBart model)"),MOe.forEach(t),NUo=i(U),fv=n(U,"LI",{});var EOe=s(fv);pve=n(EOe,"STRONG",{});var BNt=s(pve);qUo=r(BNt,"prophetnet"),BNt.forEach(t),jUo=r(EOe," \u2014 "),EW=n(EOe,"A",{href:!0});var INt=s(EW);DUo=r(INt,"ProphetNetForCausalLM"),INt.forEach(t),GUo=r(EOe," (ProphetNet model)"),EOe.forEach(t),OUo=i(U),gv=n(U,"LI",{});var COe=s(gv);_ve=n(COe,"STRONG",{});var NNt=s(_ve);VUo=r(NNt,"qdqbert"),NNt.forEach(t),XUo=r(COe," \u2014 "),CW=n(COe,"A",{href:!0});var qNt=s(CW);zUo=r(qNt,"QDQBertLMHeadModel"),qNt.forEach(t),QUo=r(COe," (QDQBert model)"),COe.forEach(t),WUo=i(U),hv=n(U,"LI",{});var wOe=s(hv);bve=n(wOe,"STRONG",{});var jNt=s(bve);UUo=r(jNt,"reformer"),jNt.forEach(t),HUo=r(wOe," \u2014 "),wW=n(wOe,"A",{href:!0});var DNt=s(wW);JUo=r(DNt,"ReformerModelWithLMHead"),DNt.forEach(t),YUo=r(wOe," (Reformer model)"),wOe.forEach(t),ZUo=i(U),uv=n(U,"LI",{});var AOe=s(uv);vve=n(AOe,"STRONG",{});var GNt=s(vve);KUo=r(GNt,"rembert"),GNt.forEach(t),eHo=r(AOe," \u2014 "),AW=n(AOe,"A",{href:!0});var ONt=s(AW);oHo=r(ONt,"RemBertForCausalLM"),ONt.forEach(t),rHo=r(AOe," (RemBERT model)"),AOe.forEach(t),tHo=i(U),pv=n(U,"LI",{});var LOe=s(pv);Fve=n(LOe,"STRONG",{});var VNt=s(Fve);aHo=r(VNt,"roberta"),VNt.forEach(t),nHo=r(LOe," \u2014 "),LW=n(LOe,"A",{href:!0});var XNt=s(LW);sHo=r(XNt,"RobertaForCausalLM"),XNt.forEach(t),lHo=r(LOe," (RoBERTa model)"),LOe.forEach(t),iHo=i(U),_v=n(U,"LI",{});var yOe=s(_v);Tve=n(yOe,"STRONG",{});var zNt=s(Tve);dHo=r(zNt,"roformer"),zNt.forEach(t),cHo=r(yOe," \u2014 "),yW=n(yOe,"A",{href:!0});var QNt=s(yW);mHo=r(QNt,"RoFormerForCausalLM"),QNt.forEach(t),fHo=r(yOe," (RoFormer model)"),yOe.forEach(t),gHo=i(U),bv=n(U,"LI",{});var xOe=s(bv);Mve=n(xOe,"STRONG",{});var WNt=s(Mve);hHo=r(WNt,"speech_to_text_2"),WNt.forEach(t),uHo=r(xOe," \u2014 "),xW=n(xOe,"A",{href:!0});var UNt=s(xW);pHo=r(UNt,"Speech2Text2ForCausalLM"),UNt.forEach(t),_Ho=r(xOe," (Speech2Text2 model)"),xOe.forEach(t),bHo=i(U),vv=n(U,"LI",{});var $Oe=s(vv);Eve=n($Oe,"STRONG",{});var HNt=s(Eve);vHo=r(HNt,"transfo-xl"),HNt.forEach(t),FHo=r($Oe," \u2014 "),$W=n($Oe,"A",{href:!0});var JNt=s($W);THo=r(JNt,"TransfoXLLMHeadModel"),JNt.forEach(t),MHo=r($Oe," (Transformer-XL model)"),$Oe.forEach(t),EHo=i(U),Fv=n(U,"LI",{});var kOe=s(Fv);Cve=n(kOe,"STRONG",{});var YNt=s(Cve);CHo=r(YNt,"trocr"),YNt.forEach(t),wHo=r(kOe," \u2014 "),kW=n(kOe,"A",{href:!0});var ZNt=s(kW);AHo=r(ZNt,"TrOCRForCausalLM"),ZNt.forEach(t),LHo=r(kOe," (TrOCR model)"),kOe.forEach(t),yHo=i(U),Tv=n(U,"LI",{});var SOe=s(Tv);wve=n(SOe,"STRONG",{});var KNt=s(wve);xHo=r(KNt,"xglm"),KNt.forEach(t),$Ho=r(SOe," \u2014 "),SW=n(SOe,"A",{href:!0});var eqt=s(SW);kHo=r(eqt,"XGLMForCausalLM"),eqt.forEach(t),SHo=r(SOe," (XGLM model)"),SOe.forEach(t),RHo=i(U),Mv=n(U,"LI",{});var ROe=s(Mv);Ave=n(ROe,"STRONG",{});var oqt=s(Ave);PHo=r(oqt,"xlm"),oqt.forEach(t),BHo=r(ROe," \u2014 "),RW=n(ROe,"A",{href:!0});var rqt=s(RW);IHo=r(rqt,"XLMWithLMHeadModel"),rqt.forEach(t),NHo=r(ROe," (XLM model)"),ROe.forEach(t),qHo=i(U),Ev=n(U,"LI",{});var POe=s(Ev);Lve=n(POe,"STRONG",{});var tqt=s(Lve);jHo=r(tqt,"xlm-prophetnet"),tqt.forEach(t),DHo=r(POe," \u2014 "),PW=n(POe,"A",{href:!0});var aqt=s(PW);GHo=r(aqt,"XLMProphetNetForCausalLM"),aqt.forEach(t),OHo=r(POe," (XLM-ProphetNet model)"),POe.forEach(t),VHo=i(U),Cv=n(U,"LI",{});var BOe=s(Cv);yve=n(BOe,"STRONG",{});var nqt=s(yve);XHo=r(nqt,"xlm-roberta"),nqt.forEach(t),zHo=r(BOe," \u2014 "),BW=n(BOe,"A",{href:!0});var sqt=s(BW);QHo=r(sqt,"XLMRobertaForCausalLM"),sqt.forEach(t),WHo=r(BOe," (XLM-RoBERTa model)"),BOe.forEach(t),UHo=i(U),wv=n(U,"LI",{});var IOe=s(wv);xve=n(IOe,"STRONG",{});var lqt=s(xve);HHo=r(lqt,"xlm-roberta-xl"),lqt.forEach(t),JHo=r(IOe," \u2014 "),IW=n(IOe,"A",{href:!0});var iqt=s(IW);YHo=r(iqt,"XLMRobertaXLForCausalLM"),iqt.forEach(t),ZHo=r(IOe," (XLM-RoBERTa-XL model)"),IOe.forEach(t),KHo=i(U),Av=n(U,"LI",{});var NOe=s(Av);$ve=n(NOe,"STRONG",{});var dqt=s($ve);eJo=r(dqt,"xlnet"),dqt.forEach(t),oJo=r(NOe," \u2014 "),NW=n(NOe,"A",{href:!0});var cqt=s(NW);rJo=r(cqt,"XLNetLMHeadModel"),cqt.forEach(t),tJo=r(NOe," (XLNet model)"),NOe.forEach(t),U.forEach(t),aJo=i(wa),Lv=n(wa,"P",{});var qOe=s(Lv);nJo=r(qOe,"The model is set in evaluation mode by default using "),kve=n(qOe,"CODE",{});var mqt=s(kve);sJo=r(mqt,"model.eval()"),mqt.forEach(t),lJo=r(qOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=n(qOe,"CODE",{});var fqt=s(Sve);iJo=r(fqt,"model.train()"),fqt.forEach(t),qOe.forEach(t),dJo=i(wa),T(yv.$$.fragment,wa),wa.forEach(t),Rl.forEach(t),Eoo=i(m),Sd=n(m,"H2",{class:!0});var jto=s(Sd);xv=n(jto,"A",{id:!0,class:!0,href:!0});var gqt=s(xv);Rve=n(gqt,"SPAN",{});var hqt=s(Rve);T(f$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),cJo=i(jto),Pve=n(jto,"SPAN",{});var uqt=s(Pve);mJo=r(uqt,"AutoModelForMaskedLM"),uqt.forEach(t),jto.forEach(t),Coo=i(m),qo=n(m,"DIV",{class:!0});var Pl=s(qo);T(g$.$$.fragment,Pl),fJo=i(Pl),Rd=n(Pl,"P",{});var Xie=s(Rd);gJo=r(Xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qW=n(Xie,"A",{href:!0});var pqt=s(qW);hJo=r(pqt,"from_pretrained()"),pqt.forEach(t),uJo=r(Xie," class method or the "),jW=n(Xie,"A",{href:!0});var _qt=s(jW);pJo=r(_qt,"from_config()"),_qt.forEach(t),_Jo=r(Xie,` class
method.`),Xie.forEach(t),bJo=i(Pl),h$=n(Pl,"P",{});var Dto=s(h$);vJo=r(Dto,"This class cannot be instantiated directly using "),Bve=n(Dto,"CODE",{});var bqt=s(Bve);FJo=r(bqt,"__init__()"),bqt.forEach(t),TJo=r(Dto," (throws an error)."),Dto.forEach(t),MJo=i(Pl),Mt=n(Pl,"DIV",{class:!0});var E8=s(Mt);T(u$.$$.fragment,E8),EJo=i(E8),Ive=n(E8,"P",{});var vqt=s(Ive);CJo=r(vqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vqt.forEach(t),wJo=i(E8),Pd=n(E8,"P",{});var zie=s(Pd);AJo=r(zie,`Note:
Loading a model from its configuration file does `),Nve=n(zie,"STRONG",{});var Fqt=s(Nve);LJo=r(Fqt,"not"),Fqt.forEach(t),yJo=r(zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(zie,"A",{href:!0});var Tqt=s(DW);xJo=r(Tqt,"from_pretrained()"),Tqt.forEach(t),$Jo=r(zie," to load the model weights."),zie.forEach(t),kJo=i(E8),T($v.$$.fragment,E8),E8.forEach(t),SJo=i(Pl),ro=n(Pl,"DIV",{class:!0});var Aa=s(ro);T(p$.$$.fragment,Aa),RJo=i(Aa),qve=n(Aa,"P",{});var Mqt=s(qve);PJo=r(Mqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mqt.forEach(t),BJo=i(Aa),tn=n(Aa,"P",{});var C8=s(tn);IJo=r(C8,"The model class to instantiate is selected based on the "),jve=n(C8,"CODE",{});var Eqt=s(jve);NJo=r(Eqt,"model_type"),Eqt.forEach(t),qJo=r(C8,` property of the config object (either
passed as an argument or loaded from `),Dve=n(C8,"CODE",{});var Cqt=s(Dve);jJo=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),DJo=r(C8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(C8,"CODE",{});var wqt=s(Gve);GJo=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),OJo=r(C8,":"),C8.forEach(t),VJo=i(Aa),J=n(Aa,"UL",{});var Z=s(J);kv=n(Z,"LI",{});var jOe=s(kv);Ove=n(jOe,"STRONG",{});var Aqt=s(Ove);XJo=r(Aqt,"albert"),Aqt.forEach(t),zJo=r(jOe," \u2014 "),GW=n(jOe,"A",{href:!0});var Lqt=s(GW);QJo=r(Lqt,"AlbertForMaskedLM"),Lqt.forEach(t),WJo=r(jOe," (ALBERT model)"),jOe.forEach(t),UJo=i(Z),Sv=n(Z,"LI",{});var DOe=s(Sv);Vve=n(DOe,"STRONG",{});var yqt=s(Vve);HJo=r(yqt,"bart"),yqt.forEach(t),JJo=r(DOe," \u2014 "),OW=n(DOe,"A",{href:!0});var xqt=s(OW);YJo=r(xqt,"BartForConditionalGeneration"),xqt.forEach(t),ZJo=r(DOe," (BART model)"),DOe.forEach(t),KJo=i(Z),Rv=n(Z,"LI",{});var GOe=s(Rv);Xve=n(GOe,"STRONG",{});var $qt=s(Xve);eYo=r($qt,"bert"),$qt.forEach(t),oYo=r(GOe," \u2014 "),VW=n(GOe,"A",{href:!0});var kqt=s(VW);rYo=r(kqt,"BertForMaskedLM"),kqt.forEach(t),tYo=r(GOe," (BERT model)"),GOe.forEach(t),aYo=i(Z),Pv=n(Z,"LI",{});var OOe=s(Pv);zve=n(OOe,"STRONG",{});var Sqt=s(zve);nYo=r(Sqt,"big_bird"),Sqt.forEach(t),sYo=r(OOe," \u2014 "),XW=n(OOe,"A",{href:!0});var Rqt=s(XW);lYo=r(Rqt,"BigBirdForMaskedLM"),Rqt.forEach(t),iYo=r(OOe," (BigBird model)"),OOe.forEach(t),dYo=i(Z),Bv=n(Z,"LI",{});var VOe=s(Bv);Qve=n(VOe,"STRONG",{});var Pqt=s(Qve);cYo=r(Pqt,"camembert"),Pqt.forEach(t),mYo=r(VOe," \u2014 "),zW=n(VOe,"A",{href:!0});var Bqt=s(zW);fYo=r(Bqt,"CamembertForMaskedLM"),Bqt.forEach(t),gYo=r(VOe," (CamemBERT model)"),VOe.forEach(t),hYo=i(Z),Iv=n(Z,"LI",{});var XOe=s(Iv);Wve=n(XOe,"STRONG",{});var Iqt=s(Wve);uYo=r(Iqt,"convbert"),Iqt.forEach(t),pYo=r(XOe," \u2014 "),QW=n(XOe,"A",{href:!0});var Nqt=s(QW);_Yo=r(Nqt,"ConvBertForMaskedLM"),Nqt.forEach(t),bYo=r(XOe," (ConvBERT model)"),XOe.forEach(t),vYo=i(Z),Nv=n(Z,"LI",{});var zOe=s(Nv);Uve=n(zOe,"STRONG",{});var qqt=s(Uve);FYo=r(qqt,"data2vec-text"),qqt.forEach(t),TYo=r(zOe," \u2014 "),WW=n(zOe,"A",{href:!0});var jqt=s(WW);MYo=r(jqt,"Data2VecTextForMaskedLM"),jqt.forEach(t),EYo=r(zOe," (Data2VecText model)"),zOe.forEach(t),CYo=i(Z),qv=n(Z,"LI",{});var QOe=s(qv);Hve=n(QOe,"STRONG",{});var Dqt=s(Hve);wYo=r(Dqt,"deberta"),Dqt.forEach(t),AYo=r(QOe," \u2014 "),UW=n(QOe,"A",{href:!0});var Gqt=s(UW);LYo=r(Gqt,"DebertaForMaskedLM"),Gqt.forEach(t),yYo=r(QOe," (DeBERTa model)"),QOe.forEach(t),xYo=i(Z),jv=n(Z,"LI",{});var WOe=s(jv);Jve=n(WOe,"STRONG",{});var Oqt=s(Jve);$Yo=r(Oqt,"deberta-v2"),Oqt.forEach(t),kYo=r(WOe," \u2014 "),HW=n(WOe,"A",{href:!0});var Vqt=s(HW);SYo=r(Vqt,"DebertaV2ForMaskedLM"),Vqt.forEach(t),RYo=r(WOe," (DeBERTa-v2 model)"),WOe.forEach(t),PYo=i(Z),Dv=n(Z,"LI",{});var UOe=s(Dv);Yve=n(UOe,"STRONG",{});var Xqt=s(Yve);BYo=r(Xqt,"distilbert"),Xqt.forEach(t),IYo=r(UOe," \u2014 "),JW=n(UOe,"A",{href:!0});var zqt=s(JW);NYo=r(zqt,"DistilBertForMaskedLM"),zqt.forEach(t),qYo=r(UOe," (DistilBERT model)"),UOe.forEach(t),jYo=i(Z),Gv=n(Z,"LI",{});var HOe=s(Gv);Zve=n(HOe,"STRONG",{});var Qqt=s(Zve);DYo=r(Qqt,"electra"),Qqt.forEach(t),GYo=r(HOe," \u2014 "),YW=n(HOe,"A",{href:!0});var Wqt=s(YW);OYo=r(Wqt,"ElectraForMaskedLM"),Wqt.forEach(t),VYo=r(HOe," (ELECTRA model)"),HOe.forEach(t),XYo=i(Z),Ov=n(Z,"LI",{});var JOe=s(Ov);Kve=n(JOe,"STRONG",{});var Uqt=s(Kve);zYo=r(Uqt,"ernie"),Uqt.forEach(t),QYo=r(JOe," \u2014 "),ZW=n(JOe,"A",{href:!0});var Hqt=s(ZW);WYo=r(Hqt,"ErnieForMaskedLM"),Hqt.forEach(t),UYo=r(JOe," (ERNIE model)"),JOe.forEach(t),HYo=i(Z),Vv=n(Z,"LI",{});var YOe=s(Vv);eFe=n(YOe,"STRONG",{});var Jqt=s(eFe);JYo=r(Jqt,"flaubert"),Jqt.forEach(t),YYo=r(YOe," \u2014 "),KW=n(YOe,"A",{href:!0});var Yqt=s(KW);ZYo=r(Yqt,"FlaubertWithLMHeadModel"),Yqt.forEach(t),KYo=r(YOe," (FlauBERT model)"),YOe.forEach(t),eZo=i(Z),Xv=n(Z,"LI",{});var ZOe=s(Xv);oFe=n(ZOe,"STRONG",{});var Zqt=s(oFe);oZo=r(Zqt,"fnet"),Zqt.forEach(t),rZo=r(ZOe," \u2014 "),eU=n(ZOe,"A",{href:!0});var Kqt=s(eU);tZo=r(Kqt,"FNetForMaskedLM"),Kqt.forEach(t),aZo=r(ZOe," (FNet model)"),ZOe.forEach(t),nZo=i(Z),zv=n(Z,"LI",{});var KOe=s(zv);rFe=n(KOe,"STRONG",{});var ejt=s(rFe);sZo=r(ejt,"funnel"),ejt.forEach(t),lZo=r(KOe," \u2014 "),oU=n(KOe,"A",{href:!0});var ojt=s(oU);iZo=r(ojt,"FunnelForMaskedLM"),ojt.forEach(t),dZo=r(KOe," (Funnel Transformer model)"),KOe.forEach(t),cZo=i(Z),Qv=n(Z,"LI",{});var eVe=s(Qv);tFe=n(eVe,"STRONG",{});var rjt=s(tFe);mZo=r(rjt,"ibert"),rjt.forEach(t),fZo=r(eVe," \u2014 "),rU=n(eVe,"A",{href:!0});var tjt=s(rU);gZo=r(tjt,"IBertForMaskedLM"),tjt.forEach(t),hZo=r(eVe," (I-BERT model)"),eVe.forEach(t),uZo=i(Z),Wv=n(Z,"LI",{});var oVe=s(Wv);aFe=n(oVe,"STRONG",{});var ajt=s(aFe);pZo=r(ajt,"layoutlm"),ajt.forEach(t),_Zo=r(oVe," \u2014 "),tU=n(oVe,"A",{href:!0});var njt=s(tU);bZo=r(njt,"LayoutLMForMaskedLM"),njt.forEach(t),vZo=r(oVe," (LayoutLM model)"),oVe.forEach(t),FZo=i(Z),Uv=n(Z,"LI",{});var rVe=s(Uv);nFe=n(rVe,"STRONG",{});var sjt=s(nFe);TZo=r(sjt,"longformer"),sjt.forEach(t),MZo=r(rVe," \u2014 "),aU=n(rVe,"A",{href:!0});var ljt=s(aU);EZo=r(ljt,"LongformerForMaskedLM"),ljt.forEach(t),CZo=r(rVe," (Longformer model)"),rVe.forEach(t),wZo=i(Z),Hv=n(Z,"LI",{});var tVe=s(Hv);sFe=n(tVe,"STRONG",{});var ijt=s(sFe);AZo=r(ijt,"luke"),ijt.forEach(t),LZo=r(tVe," \u2014 "),nU=n(tVe,"A",{href:!0});var djt=s(nU);yZo=r(djt,"LukeForMaskedLM"),djt.forEach(t),xZo=r(tVe," (LUKE model)"),tVe.forEach(t),$Zo=i(Z),Jv=n(Z,"LI",{});var aVe=s(Jv);lFe=n(aVe,"STRONG",{});var cjt=s(lFe);kZo=r(cjt,"mbart"),cjt.forEach(t),SZo=r(aVe," \u2014 "),sU=n(aVe,"A",{href:!0});var mjt=s(sU);RZo=r(mjt,"MBartForConditionalGeneration"),mjt.forEach(t),PZo=r(aVe," (mBART model)"),aVe.forEach(t),BZo=i(Z),Yv=n(Z,"LI",{});var nVe=s(Yv);iFe=n(nVe,"STRONG",{});var fjt=s(iFe);IZo=r(fjt,"megatron-bert"),fjt.forEach(t),NZo=r(nVe," \u2014 "),lU=n(nVe,"A",{href:!0});var gjt=s(lU);qZo=r(gjt,"MegatronBertForMaskedLM"),gjt.forEach(t),jZo=r(nVe," (Megatron-BERT model)"),nVe.forEach(t),DZo=i(Z),Zv=n(Z,"LI",{});var sVe=s(Zv);dFe=n(sVe,"STRONG",{});var hjt=s(dFe);GZo=r(hjt,"mobilebert"),hjt.forEach(t),OZo=r(sVe," \u2014 "),iU=n(sVe,"A",{href:!0});var ujt=s(iU);VZo=r(ujt,"MobileBertForMaskedLM"),ujt.forEach(t),XZo=r(sVe," (MobileBERT model)"),sVe.forEach(t),zZo=i(Z),Kv=n(Z,"LI",{});var lVe=s(Kv);cFe=n(lVe,"STRONG",{});var pjt=s(cFe);QZo=r(pjt,"mpnet"),pjt.forEach(t),WZo=r(lVe," \u2014 "),dU=n(lVe,"A",{href:!0});var _jt=s(dU);UZo=r(_jt,"MPNetForMaskedLM"),_jt.forEach(t),HZo=r(lVe," (MPNet model)"),lVe.forEach(t),JZo=i(Z),eF=n(Z,"LI",{});var iVe=s(eF);mFe=n(iVe,"STRONG",{});var bjt=s(mFe);YZo=r(bjt,"mvp"),bjt.forEach(t),ZZo=r(iVe," \u2014 "),cU=n(iVe,"A",{href:!0});var vjt=s(cU);KZo=r(vjt,"MvpForConditionalGeneration"),vjt.forEach(t),eKo=r(iVe," (MVP model)"),iVe.forEach(t),oKo=i(Z),oF=n(Z,"LI",{});var dVe=s(oF);fFe=n(dVe,"STRONG",{});var Fjt=s(fFe);rKo=r(Fjt,"nezha"),Fjt.forEach(t),tKo=r(dVe," \u2014 "),mU=n(dVe,"A",{href:!0});var Tjt=s(mU);aKo=r(Tjt,"NezhaForMaskedLM"),Tjt.forEach(t),nKo=r(dVe," (Nezha model)"),dVe.forEach(t),sKo=i(Z),rF=n(Z,"LI",{});var cVe=s(rF);gFe=n(cVe,"STRONG",{});var Mjt=s(gFe);lKo=r(Mjt,"nystromformer"),Mjt.forEach(t),iKo=r(cVe," \u2014 "),fU=n(cVe,"A",{href:!0});var Ejt=s(fU);dKo=r(Ejt,"NystromformerForMaskedLM"),Ejt.forEach(t),cKo=r(cVe," (Nystr\xF6mformer model)"),cVe.forEach(t),mKo=i(Z),tF=n(Z,"LI",{});var mVe=s(tF);hFe=n(mVe,"STRONG",{});var Cjt=s(hFe);fKo=r(Cjt,"perceiver"),Cjt.forEach(t),gKo=r(mVe," \u2014 "),gU=n(mVe,"A",{href:!0});var wjt=s(gU);hKo=r(wjt,"PerceiverForMaskedLM"),wjt.forEach(t),uKo=r(mVe," (Perceiver model)"),mVe.forEach(t),pKo=i(Z),aF=n(Z,"LI",{});var fVe=s(aF);uFe=n(fVe,"STRONG",{});var Ajt=s(uFe);_Ko=r(Ajt,"qdqbert"),Ajt.forEach(t),bKo=r(fVe," \u2014 "),hU=n(fVe,"A",{href:!0});var Ljt=s(hU);vKo=r(Ljt,"QDQBertForMaskedLM"),Ljt.forEach(t),FKo=r(fVe," (QDQBert model)"),fVe.forEach(t),TKo=i(Z),nF=n(Z,"LI",{});var gVe=s(nF);pFe=n(gVe,"STRONG",{});var yjt=s(pFe);MKo=r(yjt,"reformer"),yjt.forEach(t),EKo=r(gVe," \u2014 "),uU=n(gVe,"A",{href:!0});var xjt=s(uU);CKo=r(xjt,"ReformerForMaskedLM"),xjt.forEach(t),wKo=r(gVe," (Reformer model)"),gVe.forEach(t),AKo=i(Z),sF=n(Z,"LI",{});var hVe=s(sF);_Fe=n(hVe,"STRONG",{});var $jt=s(_Fe);LKo=r($jt,"rembert"),$jt.forEach(t),yKo=r(hVe," \u2014 "),pU=n(hVe,"A",{href:!0});var kjt=s(pU);xKo=r(kjt,"RemBertForMaskedLM"),kjt.forEach(t),$Ko=r(hVe," (RemBERT model)"),hVe.forEach(t),kKo=i(Z),lF=n(Z,"LI",{});var uVe=s(lF);bFe=n(uVe,"STRONG",{});var Sjt=s(bFe);SKo=r(Sjt,"roberta"),Sjt.forEach(t),RKo=r(uVe," \u2014 "),_U=n(uVe,"A",{href:!0});var Rjt=s(_U);PKo=r(Rjt,"RobertaForMaskedLM"),Rjt.forEach(t),BKo=r(uVe," (RoBERTa model)"),uVe.forEach(t),IKo=i(Z),iF=n(Z,"LI",{});var pVe=s(iF);vFe=n(pVe,"STRONG",{});var Pjt=s(vFe);NKo=r(Pjt,"roformer"),Pjt.forEach(t),qKo=r(pVe," \u2014 "),bU=n(pVe,"A",{href:!0});var Bjt=s(bU);jKo=r(Bjt,"RoFormerForMaskedLM"),Bjt.forEach(t),DKo=r(pVe," (RoFormer model)"),pVe.forEach(t),GKo=i(Z),dF=n(Z,"LI",{});var _Ve=s(dF);FFe=n(_Ve,"STRONG",{});var Ijt=s(FFe);OKo=r(Ijt,"squeezebert"),Ijt.forEach(t),VKo=r(_Ve," \u2014 "),vU=n(_Ve,"A",{href:!0});var Njt=s(vU);XKo=r(Njt,"SqueezeBertForMaskedLM"),Njt.forEach(t),zKo=r(_Ve," (SqueezeBERT model)"),_Ve.forEach(t),QKo=i(Z),cF=n(Z,"LI",{});var bVe=s(cF);TFe=n(bVe,"STRONG",{});var qjt=s(TFe);WKo=r(qjt,"tapas"),qjt.forEach(t),UKo=r(bVe," \u2014 "),FU=n(bVe,"A",{href:!0});var jjt=s(FU);HKo=r(jjt,"TapasForMaskedLM"),jjt.forEach(t),JKo=r(bVe," (TAPAS model)"),bVe.forEach(t),YKo=i(Z),mF=n(Z,"LI",{});var vVe=s(mF);MFe=n(vVe,"STRONG",{});var Djt=s(MFe);ZKo=r(Djt,"wav2vec2"),Djt.forEach(t),KKo=r(vVe," \u2014 "),EFe=n(vVe,"CODE",{});var Gjt=s(EFe);eer=r(Gjt,"Wav2Vec2ForMaskedLM"),Gjt.forEach(t),oer=r(vVe," (Wav2Vec2 model)"),vVe.forEach(t),rer=i(Z),fF=n(Z,"LI",{});var FVe=s(fF);CFe=n(FVe,"STRONG",{});var Ojt=s(CFe);ter=r(Ojt,"xlm"),Ojt.forEach(t),aer=r(FVe," \u2014 "),TU=n(FVe,"A",{href:!0});var Vjt=s(TU);ner=r(Vjt,"XLMWithLMHeadModel"),Vjt.forEach(t),ser=r(FVe," (XLM model)"),FVe.forEach(t),ler=i(Z),gF=n(Z,"LI",{});var TVe=s(gF);wFe=n(TVe,"STRONG",{});var Xjt=s(wFe);ier=r(Xjt,"xlm-roberta"),Xjt.forEach(t),der=r(TVe," \u2014 "),MU=n(TVe,"A",{href:!0});var zjt=s(MU);cer=r(zjt,"XLMRobertaForMaskedLM"),zjt.forEach(t),mer=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),fer=i(Z),hF=n(Z,"LI",{});var MVe=s(hF);AFe=n(MVe,"STRONG",{});var Qjt=s(AFe);ger=r(Qjt,"xlm-roberta-xl"),Qjt.forEach(t),her=r(MVe," \u2014 "),EU=n(MVe,"A",{href:!0});var Wjt=s(EU);uer=r(Wjt,"XLMRobertaXLForMaskedLM"),Wjt.forEach(t),per=r(MVe," (XLM-RoBERTa-XL model)"),MVe.forEach(t),_er=i(Z),uF=n(Z,"LI",{});var EVe=s(uF);LFe=n(EVe,"STRONG",{});var Ujt=s(LFe);ber=r(Ujt,"yoso"),Ujt.forEach(t),ver=r(EVe," \u2014 "),CU=n(EVe,"A",{href:!0});var Hjt=s(CU);Fer=r(Hjt,"YosoForMaskedLM"),Hjt.forEach(t),Ter=r(EVe," (YOSO model)"),EVe.forEach(t),Z.forEach(t),Mer=i(Aa),pF=n(Aa,"P",{});var CVe=s(pF);Eer=r(CVe,"The model is set in evaluation mode by default using "),yFe=n(CVe,"CODE",{});var Jjt=s(yFe);Cer=r(Jjt,"model.eval()"),Jjt.forEach(t),wer=r(CVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=n(CVe,"CODE",{});var Yjt=s(xFe);Aer=r(Yjt,"model.train()"),Yjt.forEach(t),CVe.forEach(t),Ler=i(Aa),T(_F.$$.fragment,Aa),Aa.forEach(t),Pl.forEach(t),woo=i(m),Bd=n(m,"H2",{class:!0});var Gto=s(Bd);bF=n(Gto,"A",{id:!0,class:!0,href:!0});var Zjt=s(bF);$Fe=n(Zjt,"SPAN",{});var Kjt=s($Fe);T(_$.$$.fragment,Kjt),Kjt.forEach(t),Zjt.forEach(t),yer=i(Gto),kFe=n(Gto,"SPAN",{});var eDt=s(kFe);xer=r(eDt,"AutoModelForSeq2SeqLM"),eDt.forEach(t),Gto.forEach(t),Aoo=i(m),jo=n(m,"DIV",{class:!0});var Bl=s(jo);T(b$.$$.fragment,Bl),$er=i(Bl),Id=n(Bl,"P",{});var Qie=s(Id);ker=r(Qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wU=n(Qie,"A",{href:!0});var oDt=s(wU);Ser=r(oDt,"from_pretrained()"),oDt.forEach(t),Rer=r(Qie," class method or the "),AU=n(Qie,"A",{href:!0});var rDt=s(AU);Per=r(rDt,"from_config()"),rDt.forEach(t),Ber=r(Qie,` class
method.`),Qie.forEach(t),Ier=i(Bl),v$=n(Bl,"P",{});var Oto=s(v$);Ner=r(Oto,"This class cannot be instantiated directly using "),SFe=n(Oto,"CODE",{});var tDt=s(SFe);qer=r(tDt,"__init__()"),tDt.forEach(t),jer=r(Oto," (throws an error)."),Oto.forEach(t),Der=i(Bl),Et=n(Bl,"DIV",{class:!0});var w8=s(Et);T(F$.$$.fragment,w8),Ger=i(w8),RFe=n(w8,"P",{});var aDt=s(RFe);Oer=r(aDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aDt.forEach(t),Ver=i(w8),Nd=n(w8,"P",{});var Wie=s(Nd);Xer=r(Wie,`Note:
Loading a model from its configuration file does `),PFe=n(Wie,"STRONG",{});var nDt=s(PFe);zer=r(nDt,"not"),nDt.forEach(t),Qer=r(Wie,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(Wie,"A",{href:!0});var sDt=s(LU);Wer=r(sDt,"from_pretrained()"),sDt.forEach(t),Uer=r(Wie," to load the model weights."),Wie.forEach(t),Her=i(w8),T(vF.$$.fragment,w8),w8.forEach(t),Jer=i(Bl),to=n(Bl,"DIV",{class:!0});var La=s(to);T(T$.$$.fragment,La),Yer=i(La),BFe=n(La,"P",{});var lDt=s(BFe);Zer=r(lDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lDt.forEach(t),Ker=i(La),an=n(La,"P",{});var A8=s(an);eor=r(A8,"The model class to instantiate is selected based on the "),IFe=n(A8,"CODE",{});var iDt=s(IFe);oor=r(iDt,"model_type"),iDt.forEach(t),ror=r(A8,` property of the config object (either
passed as an argument or loaded from `),NFe=n(A8,"CODE",{});var dDt=s(NFe);tor=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),aor=r(A8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(A8,"CODE",{});var cDt=s(qFe);nor=r(cDt,"pretrained_model_name_or_path"),cDt.forEach(t),sor=r(A8,":"),A8.forEach(t),lor=i(La),fe=n(La,"UL",{});var pe=s(fe);FF=n(pe,"LI",{});var wVe=s(FF);jFe=n(wVe,"STRONG",{});var mDt=s(jFe);ior=r(mDt,"bart"),mDt.forEach(t),dor=r(wVe," \u2014 "),yU=n(wVe,"A",{href:!0});var fDt=s(yU);cor=r(fDt,"BartForConditionalGeneration"),fDt.forEach(t),mor=r(wVe," (BART model)"),wVe.forEach(t),gor=i(pe),TF=n(pe,"LI",{});var AVe=s(TF);DFe=n(AVe,"STRONG",{});var gDt=s(DFe);hor=r(gDt,"bigbird_pegasus"),gDt.forEach(t),uor=r(AVe," \u2014 "),xU=n(AVe,"A",{href:!0});var hDt=s(xU);por=r(hDt,"BigBirdPegasusForConditionalGeneration"),hDt.forEach(t),_or=r(AVe," (BigBird-Pegasus model)"),AVe.forEach(t),bor=i(pe),MF=n(pe,"LI",{});var LVe=s(MF);GFe=n(LVe,"STRONG",{});var uDt=s(GFe);vor=r(uDt,"blenderbot"),uDt.forEach(t),For=r(LVe," \u2014 "),$U=n(LVe,"A",{href:!0});var pDt=s($U);Tor=r(pDt,"BlenderbotForConditionalGeneration"),pDt.forEach(t),Mor=r(LVe," (Blenderbot model)"),LVe.forEach(t),Eor=i(pe),EF=n(pe,"LI",{});var yVe=s(EF);OFe=n(yVe,"STRONG",{});var _Dt=s(OFe);Cor=r(_Dt,"blenderbot-small"),_Dt.forEach(t),wor=r(yVe," \u2014 "),kU=n(yVe,"A",{href:!0});var bDt=s(kU);Aor=r(bDt,"BlenderbotSmallForConditionalGeneration"),bDt.forEach(t),Lor=r(yVe," (BlenderbotSmall model)"),yVe.forEach(t),yor=i(pe),CF=n(pe,"LI",{});var xVe=s(CF);VFe=n(xVe,"STRONG",{});var vDt=s(VFe);xor=r(vDt,"encoder-decoder"),vDt.forEach(t),$or=r(xVe," \u2014 "),SU=n(xVe,"A",{href:!0});var FDt=s(SU);kor=r(FDt,"EncoderDecoderModel"),FDt.forEach(t),Sor=r(xVe," (Encoder decoder model)"),xVe.forEach(t),Ror=i(pe),wF=n(pe,"LI",{});var $Ve=s(wF);XFe=n($Ve,"STRONG",{});var TDt=s(XFe);Por=r(TDt,"fsmt"),TDt.forEach(t),Bor=r($Ve," \u2014 "),RU=n($Ve,"A",{href:!0});var MDt=s(RU);Ior=r(MDt,"FSMTForConditionalGeneration"),MDt.forEach(t),Nor=r($Ve," (FairSeq Machine-Translation model)"),$Ve.forEach(t),qor=i(pe),AF=n(pe,"LI",{});var kVe=s(AF);zFe=n(kVe,"STRONG",{});var EDt=s(zFe);jor=r(EDt,"led"),EDt.forEach(t),Dor=r(kVe," \u2014 "),PU=n(kVe,"A",{href:!0});var CDt=s(PU);Gor=r(CDt,"LEDForConditionalGeneration"),CDt.forEach(t),Oor=r(kVe," (LED model)"),kVe.forEach(t),Vor=i(pe),LF=n(pe,"LI",{});var SVe=s(LF);QFe=n(SVe,"STRONG",{});var wDt=s(QFe);Xor=r(wDt,"longt5"),wDt.forEach(t),zor=r(SVe," \u2014 "),BU=n(SVe,"A",{href:!0});var ADt=s(BU);Qor=r(ADt,"LongT5ForConditionalGeneration"),ADt.forEach(t),Wor=r(SVe," (LongT5 model)"),SVe.forEach(t),Uor=i(pe),yF=n(pe,"LI",{});var RVe=s(yF);WFe=n(RVe,"STRONG",{});var LDt=s(WFe);Hor=r(LDt,"m2m_100"),LDt.forEach(t),Jor=r(RVe," \u2014 "),IU=n(RVe,"A",{href:!0});var yDt=s(IU);Yor=r(yDt,"M2M100ForConditionalGeneration"),yDt.forEach(t),Zor=r(RVe," (M2M100 model)"),RVe.forEach(t),Kor=i(pe),xF=n(pe,"LI",{});var PVe=s(xF);UFe=n(PVe,"STRONG",{});var xDt=s(UFe);err=r(xDt,"marian"),xDt.forEach(t),orr=r(PVe," \u2014 "),NU=n(PVe,"A",{href:!0});var $Dt=s(NU);rrr=r($Dt,"MarianMTModel"),$Dt.forEach(t),trr=r(PVe," (Marian model)"),PVe.forEach(t),arr=i(pe),$F=n(pe,"LI",{});var BVe=s($F);HFe=n(BVe,"STRONG",{});var kDt=s(HFe);nrr=r(kDt,"mbart"),kDt.forEach(t),srr=r(BVe," \u2014 "),qU=n(BVe,"A",{href:!0});var SDt=s(qU);lrr=r(SDt,"MBartForConditionalGeneration"),SDt.forEach(t),irr=r(BVe," (mBART model)"),BVe.forEach(t),drr=i(pe),kF=n(pe,"LI",{});var IVe=s(kF);JFe=n(IVe,"STRONG",{});var RDt=s(JFe);crr=r(RDt,"mt5"),RDt.forEach(t),mrr=r(IVe," \u2014 "),jU=n(IVe,"A",{href:!0});var PDt=s(jU);frr=r(PDt,"MT5ForConditionalGeneration"),PDt.forEach(t),grr=r(IVe," (MT5 model)"),IVe.forEach(t),hrr=i(pe),SF=n(pe,"LI",{});var NVe=s(SF);YFe=n(NVe,"STRONG",{});var BDt=s(YFe);urr=r(BDt,"mvp"),BDt.forEach(t),prr=r(NVe," \u2014 "),DU=n(NVe,"A",{href:!0});var IDt=s(DU);_rr=r(IDt,"MvpForConditionalGeneration"),IDt.forEach(t),brr=r(NVe," (MVP model)"),NVe.forEach(t),vrr=i(pe),RF=n(pe,"LI",{});var qVe=s(RF);ZFe=n(qVe,"STRONG",{});var NDt=s(ZFe);Frr=r(NDt,"nllb"),NDt.forEach(t),Trr=r(qVe," \u2014 "),GU=n(qVe,"A",{href:!0});var qDt=s(GU);Mrr=r(qDt,"M2M100ForConditionalGeneration"),qDt.forEach(t),Err=r(qVe," (NLLB model)"),qVe.forEach(t),Crr=i(pe),PF=n(pe,"LI",{});var jVe=s(PF);KFe=n(jVe,"STRONG",{});var jDt=s(KFe);wrr=r(jDt,"pegasus"),jDt.forEach(t),Arr=r(jVe," \u2014 "),OU=n(jVe,"A",{href:!0});var DDt=s(OU);Lrr=r(DDt,"PegasusForConditionalGeneration"),DDt.forEach(t),yrr=r(jVe," (Pegasus model)"),jVe.forEach(t),xrr=i(pe),BF=n(pe,"LI",{});var DVe=s(BF);eTe=n(DVe,"STRONG",{});var GDt=s(eTe);$rr=r(GDt,"pegasus_x"),GDt.forEach(t),krr=r(DVe," \u2014 "),VU=n(DVe,"A",{href:!0});var ODt=s(VU);Srr=r(ODt,"PegasusXForConditionalGeneration"),ODt.forEach(t),Rrr=r(DVe," (PEGASUS-X model)"),DVe.forEach(t),Prr=i(pe),IF=n(pe,"LI",{});var GVe=s(IF);oTe=n(GVe,"STRONG",{});var VDt=s(oTe);Brr=r(VDt,"plbart"),VDt.forEach(t),Irr=r(GVe," \u2014 "),XU=n(GVe,"A",{href:!0});var XDt=s(XU);Nrr=r(XDt,"PLBartForConditionalGeneration"),XDt.forEach(t),qrr=r(GVe," (PLBart model)"),GVe.forEach(t),jrr=i(pe),NF=n(pe,"LI",{});var OVe=s(NF);rTe=n(OVe,"STRONG",{});var zDt=s(rTe);Drr=r(zDt,"prophetnet"),zDt.forEach(t),Grr=r(OVe," \u2014 "),zU=n(OVe,"A",{href:!0});var QDt=s(zU);Orr=r(QDt,"ProphetNetForConditionalGeneration"),QDt.forEach(t),Vrr=r(OVe," (ProphetNet model)"),OVe.forEach(t),Xrr=i(pe),qF=n(pe,"LI",{});var VVe=s(qF);tTe=n(VVe,"STRONG",{});var WDt=s(tTe);zrr=r(WDt,"t5"),WDt.forEach(t),Qrr=r(VVe," \u2014 "),QU=n(VVe,"A",{href:!0});var UDt=s(QU);Wrr=r(UDt,"T5ForConditionalGeneration"),UDt.forEach(t),Urr=r(VVe," (T5 model)"),VVe.forEach(t),Hrr=i(pe),jF=n(pe,"LI",{});var XVe=s(jF);aTe=n(XVe,"STRONG",{});var HDt=s(aTe);Jrr=r(HDt,"xlm-prophetnet"),HDt.forEach(t),Yrr=r(XVe," \u2014 "),WU=n(XVe,"A",{href:!0});var JDt=s(WU);Zrr=r(JDt,"XLMProphetNetForConditionalGeneration"),JDt.forEach(t),Krr=r(XVe," (XLM-ProphetNet model)"),XVe.forEach(t),pe.forEach(t),etr=i(La),DF=n(La,"P",{});var zVe=s(DF);otr=r(zVe,"The model is set in evaluation mode by default using "),nTe=n(zVe,"CODE",{});var YDt=s(nTe);rtr=r(YDt,"model.eval()"),YDt.forEach(t),ttr=r(zVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=n(zVe,"CODE",{});var ZDt=s(sTe);atr=r(ZDt,"model.train()"),ZDt.forEach(t),zVe.forEach(t),ntr=i(La),T(GF.$$.fragment,La),La.forEach(t),Bl.forEach(t),Loo=i(m),qd=n(m,"H2",{class:!0});var Vto=s(qd);OF=n(Vto,"A",{id:!0,class:!0,href:!0});var KDt=s(OF);lTe=n(KDt,"SPAN",{});var eGt=s(lTe);T(M$.$$.fragment,eGt),eGt.forEach(t),KDt.forEach(t),str=i(Vto),iTe=n(Vto,"SPAN",{});var oGt=s(iTe);ltr=r(oGt,"AutoModelForSequenceClassification"),oGt.forEach(t),Vto.forEach(t),yoo=i(m),Do=n(m,"DIV",{class:!0});var Il=s(Do);T(E$.$$.fragment,Il),itr=i(Il),jd=n(Il,"P",{});var Uie=s(jd);dtr=r(Uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=n(Uie,"A",{href:!0});var rGt=s(UU);ctr=r(rGt,"from_pretrained()"),rGt.forEach(t),mtr=r(Uie," class method or the "),HU=n(Uie,"A",{href:!0});var tGt=s(HU);ftr=r(tGt,"from_config()"),tGt.forEach(t),gtr=r(Uie,` class
method.`),Uie.forEach(t),htr=i(Il),C$=n(Il,"P",{});var Xto=s(C$);utr=r(Xto,"This class cannot be instantiated directly using "),dTe=n(Xto,"CODE",{});var aGt=s(dTe);ptr=r(aGt,"__init__()"),aGt.forEach(t),_tr=r(Xto," (throws an error)."),Xto.forEach(t),btr=i(Il),Ct=n(Il,"DIV",{class:!0});var L8=s(Ct);T(w$.$$.fragment,L8),vtr=i(L8),cTe=n(L8,"P",{});var nGt=s(cTe);Ftr=r(nGt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nGt.forEach(t),Ttr=i(L8),Dd=n(L8,"P",{});var Hie=s(Dd);Mtr=r(Hie,`Note:
Loading a model from its configuration file does `),mTe=n(Hie,"STRONG",{});var sGt=s(mTe);Etr=r(sGt,"not"),sGt.forEach(t),Ctr=r(Hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=n(Hie,"A",{href:!0});var lGt=s(JU);wtr=r(lGt,"from_pretrained()"),lGt.forEach(t),Atr=r(Hie," to load the model weights."),Hie.forEach(t),Ltr=i(L8),T(VF.$$.fragment,L8),L8.forEach(t),ytr=i(Il),ao=n(Il,"DIV",{class:!0});var ya=s(ao);T(A$.$$.fragment,ya),xtr=i(ya),fTe=n(ya,"P",{});var iGt=s(fTe);$tr=r(iGt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iGt.forEach(t),ktr=i(ya),nn=n(ya,"P",{});var y8=s(nn);Str=r(y8,"The model class to instantiate is selected based on the "),gTe=n(y8,"CODE",{});var dGt=s(gTe);Rtr=r(dGt,"model_type"),dGt.forEach(t),Ptr=r(y8,` property of the config object (either
passed as an argument or loaded from `),hTe=n(y8,"CODE",{});var cGt=s(hTe);Btr=r(cGt,"pretrained_model_name_or_path"),cGt.forEach(t),Itr=r(y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(y8,"CODE",{});var mGt=s(uTe);Ntr=r(mGt,"pretrained_model_name_or_path"),mGt.forEach(t),qtr=r(y8,":"),y8.forEach(t),jtr=i(ya),N=n(ya,"UL",{});var j=s(N);XF=n(j,"LI",{});var QVe=s(XF);pTe=n(QVe,"STRONG",{});var fGt=s(pTe);Dtr=r(fGt,"albert"),fGt.forEach(t),Gtr=r(QVe," \u2014 "),YU=n(QVe,"A",{href:!0});var gGt=s(YU);Otr=r(gGt,"AlbertForSequenceClassification"),gGt.forEach(t),Vtr=r(QVe," (ALBERT model)"),QVe.forEach(t),Xtr=i(j),zF=n(j,"LI",{});var WVe=s(zF);_Te=n(WVe,"STRONG",{});var hGt=s(_Te);ztr=r(hGt,"bart"),hGt.forEach(t),Qtr=r(WVe," \u2014 "),ZU=n(WVe,"A",{href:!0});var uGt=s(ZU);Wtr=r(uGt,"BartForSequenceClassification"),uGt.forEach(t),Utr=r(WVe," (BART model)"),WVe.forEach(t),Htr=i(j),QF=n(j,"LI",{});var UVe=s(QF);bTe=n(UVe,"STRONG",{});var pGt=s(bTe);Jtr=r(pGt,"bert"),pGt.forEach(t),Ytr=r(UVe," \u2014 "),KU=n(UVe,"A",{href:!0});var _Gt=s(KU);Ztr=r(_Gt,"BertForSequenceClassification"),_Gt.forEach(t),Ktr=r(UVe," (BERT model)"),UVe.forEach(t),ear=i(j),WF=n(j,"LI",{});var HVe=s(WF);vTe=n(HVe,"STRONG",{});var bGt=s(vTe);oar=r(bGt,"big_bird"),bGt.forEach(t),rar=r(HVe," \u2014 "),eH=n(HVe,"A",{href:!0});var vGt=s(eH);tar=r(vGt,"BigBirdForSequenceClassification"),vGt.forEach(t),aar=r(HVe," (BigBird model)"),HVe.forEach(t),nar=i(j),UF=n(j,"LI",{});var JVe=s(UF);FTe=n(JVe,"STRONG",{});var FGt=s(FTe);sar=r(FGt,"bigbird_pegasus"),FGt.forEach(t),lar=r(JVe," \u2014 "),oH=n(JVe,"A",{href:!0});var TGt=s(oH);iar=r(TGt,"BigBirdPegasusForSequenceClassification"),TGt.forEach(t),dar=r(JVe," (BigBird-Pegasus model)"),JVe.forEach(t),car=i(j),HF=n(j,"LI",{});var YVe=s(HF);TTe=n(YVe,"STRONG",{});var MGt=s(TTe);mar=r(MGt,"bloom"),MGt.forEach(t),far=r(YVe," \u2014 "),rH=n(YVe,"A",{href:!0});var EGt=s(rH);gar=r(EGt,"BloomForSequenceClassification"),EGt.forEach(t),har=r(YVe," (BLOOM model)"),YVe.forEach(t),uar=i(j),JF=n(j,"LI",{});var ZVe=s(JF);MTe=n(ZVe,"STRONG",{});var CGt=s(MTe);par=r(CGt,"camembert"),CGt.forEach(t),_ar=r(ZVe," \u2014 "),tH=n(ZVe,"A",{href:!0});var wGt=s(tH);bar=r(wGt,"CamembertForSequenceClassification"),wGt.forEach(t),Far=r(ZVe," (CamemBERT model)"),ZVe.forEach(t),Tar=i(j),YF=n(j,"LI",{});var KVe=s(YF);ETe=n(KVe,"STRONG",{});var AGt=s(ETe);Mar=r(AGt,"canine"),AGt.forEach(t),Ear=r(KVe," \u2014 "),aH=n(KVe,"A",{href:!0});var LGt=s(aH);Car=r(LGt,"CanineForSequenceClassification"),LGt.forEach(t),war=r(KVe," (CANINE model)"),KVe.forEach(t),Aar=i(j),ZF=n(j,"LI",{});var eXe=s(ZF);CTe=n(eXe,"STRONG",{});var yGt=s(CTe);Lar=r(yGt,"convbert"),yGt.forEach(t),yar=r(eXe," \u2014 "),nH=n(eXe,"A",{href:!0});var xGt=s(nH);xar=r(xGt,"ConvBertForSequenceClassification"),xGt.forEach(t),$ar=r(eXe," (ConvBERT model)"),eXe.forEach(t),kar=i(j),KF=n(j,"LI",{});var oXe=s(KF);wTe=n(oXe,"STRONG",{});var $Gt=s(wTe);Sar=r($Gt,"ctrl"),$Gt.forEach(t),Rar=r(oXe," \u2014 "),sH=n(oXe,"A",{href:!0});var kGt=s(sH);Par=r(kGt,"CTRLForSequenceClassification"),kGt.forEach(t),Bar=r(oXe," (CTRL model)"),oXe.forEach(t),Iar=i(j),eT=n(j,"LI",{});var rXe=s(eT);ATe=n(rXe,"STRONG",{});var SGt=s(ATe);Nar=r(SGt,"data2vec-text"),SGt.forEach(t),qar=r(rXe," \u2014 "),lH=n(rXe,"A",{href:!0});var RGt=s(lH);jar=r(RGt,"Data2VecTextForSequenceClassification"),RGt.forEach(t),Dar=r(rXe," (Data2VecText model)"),rXe.forEach(t),Gar=i(j),oT=n(j,"LI",{});var tXe=s(oT);LTe=n(tXe,"STRONG",{});var PGt=s(LTe);Oar=r(PGt,"deberta"),PGt.forEach(t),Var=r(tXe," \u2014 "),iH=n(tXe,"A",{href:!0});var BGt=s(iH);Xar=r(BGt,"DebertaForSequenceClassification"),BGt.forEach(t),zar=r(tXe," (DeBERTa model)"),tXe.forEach(t),Qar=i(j),rT=n(j,"LI",{});var aXe=s(rT);yTe=n(aXe,"STRONG",{});var IGt=s(yTe);War=r(IGt,"deberta-v2"),IGt.forEach(t),Uar=r(aXe," \u2014 "),dH=n(aXe,"A",{href:!0});var NGt=s(dH);Har=r(NGt,"DebertaV2ForSequenceClassification"),NGt.forEach(t),Jar=r(aXe," (DeBERTa-v2 model)"),aXe.forEach(t),Yar=i(j),tT=n(j,"LI",{});var nXe=s(tT);xTe=n(nXe,"STRONG",{});var qGt=s(xTe);Zar=r(qGt,"distilbert"),qGt.forEach(t),Kar=r(nXe," \u2014 "),cH=n(nXe,"A",{href:!0});var jGt=s(cH);enr=r(jGt,"DistilBertForSequenceClassification"),jGt.forEach(t),onr=r(nXe," (DistilBERT model)"),nXe.forEach(t),rnr=i(j),aT=n(j,"LI",{});var sXe=s(aT);$Te=n(sXe,"STRONG",{});var DGt=s($Te);tnr=r(DGt,"electra"),DGt.forEach(t),anr=r(sXe," \u2014 "),mH=n(sXe,"A",{href:!0});var GGt=s(mH);nnr=r(GGt,"ElectraForSequenceClassification"),GGt.forEach(t),snr=r(sXe," (ELECTRA model)"),sXe.forEach(t),lnr=i(j),nT=n(j,"LI",{});var lXe=s(nT);kTe=n(lXe,"STRONG",{});var OGt=s(kTe);inr=r(OGt,"ernie"),OGt.forEach(t),dnr=r(lXe," \u2014 "),fH=n(lXe,"A",{href:!0});var VGt=s(fH);cnr=r(VGt,"ErnieForSequenceClassification"),VGt.forEach(t),mnr=r(lXe," (ERNIE model)"),lXe.forEach(t),fnr=i(j),sT=n(j,"LI",{});var iXe=s(sT);STe=n(iXe,"STRONG",{});var XGt=s(STe);gnr=r(XGt,"esm"),XGt.forEach(t),hnr=r(iXe," \u2014 "),gH=n(iXe,"A",{href:!0});var zGt=s(gH);unr=r(zGt,"EsmForSequenceClassification"),zGt.forEach(t),pnr=r(iXe," (ESM model)"),iXe.forEach(t),_nr=i(j),lT=n(j,"LI",{});var dXe=s(lT);RTe=n(dXe,"STRONG",{});var QGt=s(RTe);bnr=r(QGt,"flaubert"),QGt.forEach(t),vnr=r(dXe," \u2014 "),hH=n(dXe,"A",{href:!0});var WGt=s(hH);Fnr=r(WGt,"FlaubertForSequenceClassification"),WGt.forEach(t),Tnr=r(dXe," (FlauBERT model)"),dXe.forEach(t),Mnr=i(j),iT=n(j,"LI",{});var cXe=s(iT);PTe=n(cXe,"STRONG",{});var UGt=s(PTe);Enr=r(UGt,"fnet"),UGt.forEach(t),Cnr=r(cXe," \u2014 "),uH=n(cXe,"A",{href:!0});var HGt=s(uH);wnr=r(HGt,"FNetForSequenceClassification"),HGt.forEach(t),Anr=r(cXe," (FNet model)"),cXe.forEach(t),Lnr=i(j),dT=n(j,"LI",{});var mXe=s(dT);BTe=n(mXe,"STRONG",{});var JGt=s(BTe);ynr=r(JGt,"funnel"),JGt.forEach(t),xnr=r(mXe," \u2014 "),pH=n(mXe,"A",{href:!0});var YGt=s(pH);$nr=r(YGt,"FunnelForSequenceClassification"),YGt.forEach(t),knr=r(mXe," (Funnel Transformer model)"),mXe.forEach(t),Snr=i(j),cT=n(j,"LI",{});var fXe=s(cT);ITe=n(fXe,"STRONG",{});var ZGt=s(ITe);Rnr=r(ZGt,"gpt2"),ZGt.forEach(t),Pnr=r(fXe," \u2014 "),_H=n(fXe,"A",{href:!0});var KGt=s(_H);Bnr=r(KGt,"GPT2ForSequenceClassification"),KGt.forEach(t),Inr=r(fXe," (OpenAI GPT-2 model)"),fXe.forEach(t),Nnr=i(j),mT=n(j,"LI",{});var gXe=s(mT);NTe=n(gXe,"STRONG",{});var eOt=s(NTe);qnr=r(eOt,"gpt_neo"),eOt.forEach(t),jnr=r(gXe," \u2014 "),bH=n(gXe,"A",{href:!0});var oOt=s(bH);Dnr=r(oOt,"GPTNeoForSequenceClassification"),oOt.forEach(t),Gnr=r(gXe," (GPT Neo model)"),gXe.forEach(t),Onr=i(j),fT=n(j,"LI",{});var hXe=s(fT);qTe=n(hXe,"STRONG",{});var rOt=s(qTe);Vnr=r(rOt,"gptj"),rOt.forEach(t),Xnr=r(hXe," \u2014 "),vH=n(hXe,"A",{href:!0});var tOt=s(vH);znr=r(tOt,"GPTJForSequenceClassification"),tOt.forEach(t),Qnr=r(hXe," (GPT-J model)"),hXe.forEach(t),Wnr=i(j),gT=n(j,"LI",{});var uXe=s(gT);jTe=n(uXe,"STRONG",{});var aOt=s(jTe);Unr=r(aOt,"ibert"),aOt.forEach(t),Hnr=r(uXe," \u2014 "),FH=n(uXe,"A",{href:!0});var nOt=s(FH);Jnr=r(nOt,"IBertForSequenceClassification"),nOt.forEach(t),Ynr=r(uXe," (I-BERT model)"),uXe.forEach(t),Znr=i(j),hT=n(j,"LI",{});var pXe=s(hT);DTe=n(pXe,"STRONG",{});var sOt=s(DTe);Knr=r(sOt,"layoutlm"),sOt.forEach(t),esr=r(pXe," \u2014 "),TH=n(pXe,"A",{href:!0});var lOt=s(TH);osr=r(lOt,"LayoutLMForSequenceClassification"),lOt.forEach(t),rsr=r(pXe," (LayoutLM model)"),pXe.forEach(t),tsr=i(j),uT=n(j,"LI",{});var _Xe=s(uT);GTe=n(_Xe,"STRONG",{});var iOt=s(GTe);asr=r(iOt,"layoutlmv2"),iOt.forEach(t),nsr=r(_Xe," \u2014 "),MH=n(_Xe,"A",{href:!0});var dOt=s(MH);ssr=r(dOt,"LayoutLMv2ForSequenceClassification"),dOt.forEach(t),lsr=r(_Xe," (LayoutLMv2 model)"),_Xe.forEach(t),isr=i(j),pT=n(j,"LI",{});var bXe=s(pT);OTe=n(bXe,"STRONG",{});var cOt=s(OTe);dsr=r(cOt,"layoutlmv3"),cOt.forEach(t),csr=r(bXe," \u2014 "),EH=n(bXe,"A",{href:!0});var mOt=s(EH);msr=r(mOt,"LayoutLMv3ForSequenceClassification"),mOt.forEach(t),fsr=r(bXe," (LayoutLMv3 model)"),bXe.forEach(t),gsr=i(j),_T=n(j,"LI",{});var vXe=s(_T);VTe=n(vXe,"STRONG",{});var fOt=s(VTe);hsr=r(fOt,"led"),fOt.forEach(t),usr=r(vXe," \u2014 "),CH=n(vXe,"A",{href:!0});var gOt=s(CH);psr=r(gOt,"LEDForSequenceClassification"),gOt.forEach(t),_sr=r(vXe," (LED model)"),vXe.forEach(t),bsr=i(j),bT=n(j,"LI",{});var FXe=s(bT);XTe=n(FXe,"STRONG",{});var hOt=s(XTe);vsr=r(hOt,"longformer"),hOt.forEach(t),Fsr=r(FXe," \u2014 "),wH=n(FXe,"A",{href:!0});var uOt=s(wH);Tsr=r(uOt,"LongformerForSequenceClassification"),uOt.forEach(t),Msr=r(FXe," (Longformer model)"),FXe.forEach(t),Esr=i(j),vT=n(j,"LI",{});var TXe=s(vT);zTe=n(TXe,"STRONG",{});var pOt=s(zTe);Csr=r(pOt,"luke"),pOt.forEach(t),wsr=r(TXe," \u2014 "),AH=n(TXe,"A",{href:!0});var _Ot=s(AH);Asr=r(_Ot,"LukeForSequenceClassification"),_Ot.forEach(t),Lsr=r(TXe," (LUKE model)"),TXe.forEach(t),ysr=i(j),FT=n(j,"LI",{});var MXe=s(FT);QTe=n(MXe,"STRONG",{});var bOt=s(QTe);xsr=r(bOt,"markuplm"),bOt.forEach(t),$sr=r(MXe," \u2014 "),LH=n(MXe,"A",{href:!0});var vOt=s(LH);ksr=r(vOt,"MarkupLMForSequenceClassification"),vOt.forEach(t),Ssr=r(MXe," (MarkupLM model)"),MXe.forEach(t),Rsr=i(j),TT=n(j,"LI",{});var EXe=s(TT);WTe=n(EXe,"STRONG",{});var FOt=s(WTe);Psr=r(FOt,"mbart"),FOt.forEach(t),Bsr=r(EXe," \u2014 "),yH=n(EXe,"A",{href:!0});var TOt=s(yH);Isr=r(TOt,"MBartForSequenceClassification"),TOt.forEach(t),Nsr=r(EXe," (mBART model)"),EXe.forEach(t),qsr=i(j),MT=n(j,"LI",{});var CXe=s(MT);UTe=n(CXe,"STRONG",{});var MOt=s(UTe);jsr=r(MOt,"megatron-bert"),MOt.forEach(t),Dsr=r(CXe," \u2014 "),xH=n(CXe,"A",{href:!0});var EOt=s(xH);Gsr=r(EOt,"MegatronBertForSequenceClassification"),EOt.forEach(t),Osr=r(CXe," (Megatron-BERT model)"),CXe.forEach(t),Vsr=i(j),ET=n(j,"LI",{});var wXe=s(ET);HTe=n(wXe,"STRONG",{});var COt=s(HTe);Xsr=r(COt,"mobilebert"),COt.forEach(t),zsr=r(wXe," \u2014 "),$H=n(wXe,"A",{href:!0});var wOt=s($H);Qsr=r(wOt,"MobileBertForSequenceClassification"),wOt.forEach(t),Wsr=r(wXe," (MobileBERT model)"),wXe.forEach(t),Usr=i(j),CT=n(j,"LI",{});var AXe=s(CT);JTe=n(AXe,"STRONG",{});var AOt=s(JTe);Hsr=r(AOt,"mpnet"),AOt.forEach(t),Jsr=r(AXe," \u2014 "),kH=n(AXe,"A",{href:!0});var LOt=s(kH);Ysr=r(LOt,"MPNetForSequenceClassification"),LOt.forEach(t),Zsr=r(AXe," (MPNet model)"),AXe.forEach(t),Ksr=i(j),wT=n(j,"LI",{});var LXe=s(wT);YTe=n(LXe,"STRONG",{});var yOt=s(YTe);elr=r(yOt,"mvp"),yOt.forEach(t),olr=r(LXe," \u2014 "),SH=n(LXe,"A",{href:!0});var xOt=s(SH);rlr=r(xOt,"MvpForSequenceClassification"),xOt.forEach(t),tlr=r(LXe," (MVP model)"),LXe.forEach(t),alr=i(j),AT=n(j,"LI",{});var yXe=s(AT);ZTe=n(yXe,"STRONG",{});var $Ot=s(ZTe);nlr=r($Ot,"nezha"),$Ot.forEach(t),slr=r(yXe," \u2014 "),RH=n(yXe,"A",{href:!0});var kOt=s(RH);llr=r(kOt,"NezhaForSequenceClassification"),kOt.forEach(t),ilr=r(yXe," (Nezha model)"),yXe.forEach(t),dlr=i(j),LT=n(j,"LI",{});var xXe=s(LT);KTe=n(xXe,"STRONG",{});var SOt=s(KTe);clr=r(SOt,"nystromformer"),SOt.forEach(t),mlr=r(xXe," \u2014 "),PH=n(xXe,"A",{href:!0});var ROt=s(PH);flr=r(ROt,"NystromformerForSequenceClassification"),ROt.forEach(t),glr=r(xXe," (Nystr\xF6mformer model)"),xXe.forEach(t),hlr=i(j),yT=n(j,"LI",{});var $Xe=s(yT);eMe=n($Xe,"STRONG",{});var POt=s(eMe);ulr=r(POt,"openai-gpt"),POt.forEach(t),plr=r($Xe," \u2014 "),BH=n($Xe,"A",{href:!0});var BOt=s(BH);_lr=r(BOt,"OpenAIGPTForSequenceClassification"),BOt.forEach(t),blr=r($Xe," (OpenAI GPT model)"),$Xe.forEach(t),vlr=i(j),xT=n(j,"LI",{});var kXe=s(xT);oMe=n(kXe,"STRONG",{});var IOt=s(oMe);Flr=r(IOt,"opt"),IOt.forEach(t),Tlr=r(kXe," \u2014 "),IH=n(kXe,"A",{href:!0});var NOt=s(IH);Mlr=r(NOt,"OPTForSequenceClassification"),NOt.forEach(t),Elr=r(kXe," (OPT model)"),kXe.forEach(t),Clr=i(j),$T=n(j,"LI",{});var SXe=s($T);rMe=n(SXe,"STRONG",{});var qOt=s(rMe);wlr=r(qOt,"perceiver"),qOt.forEach(t),Alr=r(SXe," \u2014 "),NH=n(SXe,"A",{href:!0});var jOt=s(NH);Llr=r(jOt,"PerceiverForSequenceClassification"),jOt.forEach(t),ylr=r(SXe," (Perceiver model)"),SXe.forEach(t),xlr=i(j),kT=n(j,"LI",{});var RXe=s(kT);tMe=n(RXe,"STRONG",{});var DOt=s(tMe);$lr=r(DOt,"plbart"),DOt.forEach(t),klr=r(RXe," \u2014 "),qH=n(RXe,"A",{href:!0});var GOt=s(qH);Slr=r(GOt,"PLBartForSequenceClassification"),GOt.forEach(t),Rlr=r(RXe," (PLBart model)"),RXe.forEach(t),Plr=i(j),ST=n(j,"LI",{});var PXe=s(ST);aMe=n(PXe,"STRONG",{});var OOt=s(aMe);Blr=r(OOt,"qdqbert"),OOt.forEach(t),Ilr=r(PXe," \u2014 "),jH=n(PXe,"A",{href:!0});var VOt=s(jH);Nlr=r(VOt,"QDQBertForSequenceClassification"),VOt.forEach(t),qlr=r(PXe," (QDQBert model)"),PXe.forEach(t),jlr=i(j),RT=n(j,"LI",{});var BXe=s(RT);nMe=n(BXe,"STRONG",{});var XOt=s(nMe);Dlr=r(XOt,"reformer"),XOt.forEach(t),Glr=r(BXe," \u2014 "),DH=n(BXe,"A",{href:!0});var zOt=s(DH);Olr=r(zOt,"ReformerForSequenceClassification"),zOt.forEach(t),Vlr=r(BXe," (Reformer model)"),BXe.forEach(t),Xlr=i(j),PT=n(j,"LI",{});var IXe=s(PT);sMe=n(IXe,"STRONG",{});var QOt=s(sMe);zlr=r(QOt,"rembert"),QOt.forEach(t),Qlr=r(IXe," \u2014 "),GH=n(IXe,"A",{href:!0});var WOt=s(GH);Wlr=r(WOt,"RemBertForSequenceClassification"),WOt.forEach(t),Ulr=r(IXe," (RemBERT model)"),IXe.forEach(t),Hlr=i(j),BT=n(j,"LI",{});var NXe=s(BT);lMe=n(NXe,"STRONG",{});var UOt=s(lMe);Jlr=r(UOt,"roberta"),UOt.forEach(t),Ylr=r(NXe," \u2014 "),OH=n(NXe,"A",{href:!0});var HOt=s(OH);Zlr=r(HOt,"RobertaForSequenceClassification"),HOt.forEach(t),Klr=r(NXe," (RoBERTa model)"),NXe.forEach(t),eir=i(j),IT=n(j,"LI",{});var qXe=s(IT);iMe=n(qXe,"STRONG",{});var JOt=s(iMe);oir=r(JOt,"roformer"),JOt.forEach(t),rir=r(qXe," \u2014 "),VH=n(qXe,"A",{href:!0});var YOt=s(VH);tir=r(YOt,"RoFormerForSequenceClassification"),YOt.forEach(t),air=r(qXe," (RoFormer model)"),qXe.forEach(t),nir=i(j),NT=n(j,"LI",{});var jXe=s(NT);dMe=n(jXe,"STRONG",{});var ZOt=s(dMe);sir=r(ZOt,"squeezebert"),ZOt.forEach(t),lir=r(jXe," \u2014 "),XH=n(jXe,"A",{href:!0});var KOt=s(XH);iir=r(KOt,"SqueezeBertForSequenceClassification"),KOt.forEach(t),dir=r(jXe," (SqueezeBERT model)"),jXe.forEach(t),cir=i(j),qT=n(j,"LI",{});var DXe=s(qT);cMe=n(DXe,"STRONG",{});var eVt=s(cMe);mir=r(eVt,"tapas"),eVt.forEach(t),fir=r(DXe," \u2014 "),zH=n(DXe,"A",{href:!0});var oVt=s(zH);gir=r(oVt,"TapasForSequenceClassification"),oVt.forEach(t),hir=r(DXe," (TAPAS model)"),DXe.forEach(t),uir=i(j),jT=n(j,"LI",{});var GXe=s(jT);mMe=n(GXe,"STRONG",{});var rVt=s(mMe);pir=r(rVt,"transfo-xl"),rVt.forEach(t),_ir=r(GXe," \u2014 "),QH=n(GXe,"A",{href:!0});var tVt=s(QH);bir=r(tVt,"TransfoXLForSequenceClassification"),tVt.forEach(t),vir=r(GXe," (Transformer-XL model)"),GXe.forEach(t),Fir=i(j),DT=n(j,"LI",{});var OXe=s(DT);fMe=n(OXe,"STRONG",{});var aVt=s(fMe);Tir=r(aVt,"xlm"),aVt.forEach(t),Mir=r(OXe," \u2014 "),WH=n(OXe,"A",{href:!0});var nVt=s(WH);Eir=r(nVt,"XLMForSequenceClassification"),nVt.forEach(t),Cir=r(OXe," (XLM model)"),OXe.forEach(t),wir=i(j),GT=n(j,"LI",{});var VXe=s(GT);gMe=n(VXe,"STRONG",{});var sVt=s(gMe);Air=r(sVt,"xlm-roberta"),sVt.forEach(t),Lir=r(VXe," \u2014 "),UH=n(VXe,"A",{href:!0});var lVt=s(UH);yir=r(lVt,"XLMRobertaForSequenceClassification"),lVt.forEach(t),xir=r(VXe," (XLM-RoBERTa model)"),VXe.forEach(t),$ir=i(j),OT=n(j,"LI",{});var XXe=s(OT);hMe=n(XXe,"STRONG",{});var iVt=s(hMe);kir=r(iVt,"xlm-roberta-xl"),iVt.forEach(t),Sir=r(XXe," \u2014 "),HH=n(XXe,"A",{href:!0});var dVt=s(HH);Rir=r(dVt,"XLMRobertaXLForSequenceClassification"),dVt.forEach(t),Pir=r(XXe," (XLM-RoBERTa-XL model)"),XXe.forEach(t),Bir=i(j),VT=n(j,"LI",{});var zXe=s(VT);uMe=n(zXe,"STRONG",{});var cVt=s(uMe);Iir=r(cVt,"xlnet"),cVt.forEach(t),Nir=r(zXe," \u2014 "),JH=n(zXe,"A",{href:!0});var mVt=s(JH);qir=r(mVt,"XLNetForSequenceClassification"),mVt.forEach(t),jir=r(zXe," (XLNet model)"),zXe.forEach(t),Dir=i(j),XT=n(j,"LI",{});var QXe=s(XT);pMe=n(QXe,"STRONG",{});var fVt=s(pMe);Gir=r(fVt,"yoso"),fVt.forEach(t),Oir=r(QXe," \u2014 "),YH=n(QXe,"A",{href:!0});var gVt=s(YH);Vir=r(gVt,"YosoForSequenceClassification"),gVt.forEach(t),Xir=r(QXe," (YOSO model)"),QXe.forEach(t),j.forEach(t),zir=i(ya),zT=n(ya,"P",{});var WXe=s(zT);Qir=r(WXe,"The model is set in evaluation mode by default using "),_Me=n(WXe,"CODE",{});var hVt=s(_Me);Wir=r(hVt,"model.eval()"),hVt.forEach(t),Uir=r(WXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bMe=n(WXe,"CODE",{});var uVt=s(bMe);Hir=r(uVt,"model.train()"),uVt.forEach(t),WXe.forEach(t),Jir=i(ya),T(QT.$$.fragment,ya),ya.forEach(t),Il.forEach(t),xoo=i(m),Gd=n(m,"H2",{class:!0});var zto=s(Gd);WT=n(zto,"A",{id:!0,class:!0,href:!0});var pVt=s(WT);vMe=n(pVt,"SPAN",{});var _Vt=s(vMe);T(L$.$$.fragment,_Vt),_Vt.forEach(t),pVt.forEach(t),Yir=i(zto),FMe=n(zto,"SPAN",{});var bVt=s(FMe);Zir=r(bVt,"AutoModelForMultipleChoice"),bVt.forEach(t),zto.forEach(t),$oo=i(m),Go=n(m,"DIV",{class:!0});var Nl=s(Go);T(y$.$$.fragment,Nl),Kir=i(Nl),Od=n(Nl,"P",{});var Jie=s(Od);edr=r(Jie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=n(Jie,"A",{href:!0});var vVt=s(ZH);odr=r(vVt,"from_pretrained()"),vVt.forEach(t),rdr=r(Jie," class method or the "),KH=n(Jie,"A",{href:!0});var FVt=s(KH);tdr=r(FVt,"from_config()"),FVt.forEach(t),adr=r(Jie,` class
method.`),Jie.forEach(t),ndr=i(Nl),x$=n(Nl,"P",{});var Qto=s(x$);sdr=r(Qto,"This class cannot be instantiated directly using "),TMe=n(Qto,"CODE",{});var TVt=s(TMe);ldr=r(TVt,"__init__()"),TVt.forEach(t),idr=r(Qto," (throws an error)."),Qto.forEach(t),ddr=i(Nl),wt=n(Nl,"DIV",{class:!0});var x8=s(wt);T($$.$$.fragment,x8),cdr=i(x8),MMe=n(x8,"P",{});var MVt=s(MMe);mdr=r(MVt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MVt.forEach(t),fdr=i(x8),Vd=n(x8,"P",{});var Yie=s(Vd);gdr=r(Yie,`Note:
Loading a model from its configuration file does `),EMe=n(Yie,"STRONG",{});var EVt=s(EMe);hdr=r(EVt,"not"),EVt.forEach(t),udr=r(Yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(Yie,"A",{href:!0});var CVt=s(eJ);pdr=r(CVt,"from_pretrained()"),CVt.forEach(t),_dr=r(Yie," to load the model weights."),Yie.forEach(t),bdr=i(x8),T(UT.$$.fragment,x8),x8.forEach(t),vdr=i(Nl),no=n(Nl,"DIV",{class:!0});var xa=s(no);T(k$.$$.fragment,xa),Fdr=i(xa),CMe=n(xa,"P",{});var wVt=s(CMe);Tdr=r(wVt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wVt.forEach(t),Mdr=i(xa),sn=n(xa,"P",{});var $8=s(sn);Edr=r($8,"The model class to instantiate is selected based on the "),wMe=n($8,"CODE",{});var AVt=s(wMe);Cdr=r(AVt,"model_type"),AVt.forEach(t),wdr=r($8,` property of the config object (either
passed as an argument or loaded from `),AMe=n($8,"CODE",{});var LVt=s(AMe);Adr=r(LVt,"pretrained_model_name_or_path"),LVt.forEach(t),Ldr=r($8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n($8,"CODE",{});var yVt=s(LMe);ydr=r(yVt,"pretrained_model_name_or_path"),yVt.forEach(t),xdr=r($8,":"),$8.forEach(t),$dr=i(xa),K=n(xa,"UL",{});var ee=s(K);HT=n(ee,"LI",{});var UXe=s(HT);yMe=n(UXe,"STRONG",{});var xVt=s(yMe);kdr=r(xVt,"albert"),xVt.forEach(t),Sdr=r(UXe," \u2014 "),oJ=n(UXe,"A",{href:!0});var $Vt=s(oJ);Rdr=r($Vt,"AlbertForMultipleChoice"),$Vt.forEach(t),Pdr=r(UXe," (ALBERT model)"),UXe.forEach(t),Bdr=i(ee),JT=n(ee,"LI",{});var HXe=s(JT);xMe=n(HXe,"STRONG",{});var kVt=s(xMe);Idr=r(kVt,"bert"),kVt.forEach(t),Ndr=r(HXe," \u2014 "),rJ=n(HXe,"A",{href:!0});var SVt=s(rJ);qdr=r(SVt,"BertForMultipleChoice"),SVt.forEach(t),jdr=r(HXe," (BERT model)"),HXe.forEach(t),Ddr=i(ee),YT=n(ee,"LI",{});var JXe=s(YT);$Me=n(JXe,"STRONG",{});var RVt=s($Me);Gdr=r(RVt,"big_bird"),RVt.forEach(t),Odr=r(JXe," \u2014 "),tJ=n(JXe,"A",{href:!0});var PVt=s(tJ);Vdr=r(PVt,"BigBirdForMultipleChoice"),PVt.forEach(t),Xdr=r(JXe," (BigBird model)"),JXe.forEach(t),zdr=i(ee),ZT=n(ee,"LI",{});var YXe=s(ZT);kMe=n(YXe,"STRONG",{});var BVt=s(kMe);Qdr=r(BVt,"camembert"),BVt.forEach(t),Wdr=r(YXe," \u2014 "),aJ=n(YXe,"A",{href:!0});var IVt=s(aJ);Udr=r(IVt,"CamembertForMultipleChoice"),IVt.forEach(t),Hdr=r(YXe," (CamemBERT model)"),YXe.forEach(t),Jdr=i(ee),KT=n(ee,"LI",{});var ZXe=s(KT);SMe=n(ZXe,"STRONG",{});var NVt=s(SMe);Ydr=r(NVt,"canine"),NVt.forEach(t),Zdr=r(ZXe," \u2014 "),nJ=n(ZXe,"A",{href:!0});var qVt=s(nJ);Kdr=r(qVt,"CanineForMultipleChoice"),qVt.forEach(t),ecr=r(ZXe," (CANINE model)"),ZXe.forEach(t),ocr=i(ee),eM=n(ee,"LI",{});var KXe=s(eM);RMe=n(KXe,"STRONG",{});var jVt=s(RMe);rcr=r(jVt,"convbert"),jVt.forEach(t),tcr=r(KXe," \u2014 "),sJ=n(KXe,"A",{href:!0});var DVt=s(sJ);acr=r(DVt,"ConvBertForMultipleChoice"),DVt.forEach(t),ncr=r(KXe," (ConvBERT model)"),KXe.forEach(t),scr=i(ee),oM=n(ee,"LI",{});var eze=s(oM);PMe=n(eze,"STRONG",{});var GVt=s(PMe);lcr=r(GVt,"data2vec-text"),GVt.forEach(t),icr=r(eze," \u2014 "),lJ=n(eze,"A",{href:!0});var OVt=s(lJ);dcr=r(OVt,"Data2VecTextForMultipleChoice"),OVt.forEach(t),ccr=r(eze," (Data2VecText model)"),eze.forEach(t),mcr=i(ee),rM=n(ee,"LI",{});var oze=s(rM);BMe=n(oze,"STRONG",{});var VVt=s(BMe);fcr=r(VVt,"deberta-v2"),VVt.forEach(t),gcr=r(oze," \u2014 "),iJ=n(oze,"A",{href:!0});var XVt=s(iJ);hcr=r(XVt,"DebertaV2ForMultipleChoice"),XVt.forEach(t),ucr=r(oze," (DeBERTa-v2 model)"),oze.forEach(t),pcr=i(ee),tM=n(ee,"LI",{});var rze=s(tM);IMe=n(rze,"STRONG",{});var zVt=s(IMe);_cr=r(zVt,"distilbert"),zVt.forEach(t),bcr=r(rze," \u2014 "),dJ=n(rze,"A",{href:!0});var QVt=s(dJ);vcr=r(QVt,"DistilBertForMultipleChoice"),QVt.forEach(t),Fcr=r(rze," (DistilBERT model)"),rze.forEach(t),Tcr=i(ee),aM=n(ee,"LI",{});var tze=s(aM);NMe=n(tze,"STRONG",{});var WVt=s(NMe);Mcr=r(WVt,"electra"),WVt.forEach(t),Ecr=r(tze," \u2014 "),cJ=n(tze,"A",{href:!0});var UVt=s(cJ);Ccr=r(UVt,"ElectraForMultipleChoice"),UVt.forEach(t),wcr=r(tze," (ELECTRA model)"),tze.forEach(t),Acr=i(ee),nM=n(ee,"LI",{});var aze=s(nM);qMe=n(aze,"STRONG",{});var HVt=s(qMe);Lcr=r(HVt,"ernie"),HVt.forEach(t),ycr=r(aze," \u2014 "),mJ=n(aze,"A",{href:!0});var JVt=s(mJ);xcr=r(JVt,"ErnieForMultipleChoice"),JVt.forEach(t),$cr=r(aze," (ERNIE model)"),aze.forEach(t),kcr=i(ee),sM=n(ee,"LI",{});var nze=s(sM);jMe=n(nze,"STRONG",{});var YVt=s(jMe);Scr=r(YVt,"flaubert"),YVt.forEach(t),Rcr=r(nze," \u2014 "),fJ=n(nze,"A",{href:!0});var ZVt=s(fJ);Pcr=r(ZVt,"FlaubertForMultipleChoice"),ZVt.forEach(t),Bcr=r(nze," (FlauBERT model)"),nze.forEach(t),Icr=i(ee),lM=n(ee,"LI",{});var sze=s(lM);DMe=n(sze,"STRONG",{});var KVt=s(DMe);Ncr=r(KVt,"fnet"),KVt.forEach(t),qcr=r(sze," \u2014 "),gJ=n(sze,"A",{href:!0});var eXt=s(gJ);jcr=r(eXt,"FNetForMultipleChoice"),eXt.forEach(t),Dcr=r(sze," (FNet model)"),sze.forEach(t),Gcr=i(ee),iM=n(ee,"LI",{});var lze=s(iM);GMe=n(lze,"STRONG",{});var oXt=s(GMe);Ocr=r(oXt,"funnel"),oXt.forEach(t),Vcr=r(lze," \u2014 "),hJ=n(lze,"A",{href:!0});var rXt=s(hJ);Xcr=r(rXt,"FunnelForMultipleChoice"),rXt.forEach(t),zcr=r(lze," (Funnel Transformer model)"),lze.forEach(t),Qcr=i(ee),dM=n(ee,"LI",{});var ize=s(dM);OMe=n(ize,"STRONG",{});var tXt=s(OMe);Wcr=r(tXt,"ibert"),tXt.forEach(t),Ucr=r(ize," \u2014 "),uJ=n(ize,"A",{href:!0});var aXt=s(uJ);Hcr=r(aXt,"IBertForMultipleChoice"),aXt.forEach(t),Jcr=r(ize," (I-BERT model)"),ize.forEach(t),Ycr=i(ee),cM=n(ee,"LI",{});var dze=s(cM);VMe=n(dze,"STRONG",{});var nXt=s(VMe);Zcr=r(nXt,"longformer"),nXt.forEach(t),Kcr=r(dze," \u2014 "),pJ=n(dze,"A",{href:!0});var sXt=s(pJ);emr=r(sXt,"LongformerForMultipleChoice"),sXt.forEach(t),omr=r(dze," (Longformer model)"),dze.forEach(t),rmr=i(ee),mM=n(ee,"LI",{});var cze=s(mM);XMe=n(cze,"STRONG",{});var lXt=s(XMe);tmr=r(lXt,"luke"),lXt.forEach(t),amr=r(cze," \u2014 "),_J=n(cze,"A",{href:!0});var iXt=s(_J);nmr=r(iXt,"LukeForMultipleChoice"),iXt.forEach(t),smr=r(cze," (LUKE model)"),cze.forEach(t),lmr=i(ee),fM=n(ee,"LI",{});var mze=s(fM);zMe=n(mze,"STRONG",{});var dXt=s(zMe);imr=r(dXt,"megatron-bert"),dXt.forEach(t),dmr=r(mze," \u2014 "),bJ=n(mze,"A",{href:!0});var cXt=s(bJ);cmr=r(cXt,"MegatronBertForMultipleChoice"),cXt.forEach(t),mmr=r(mze," (Megatron-BERT model)"),mze.forEach(t),fmr=i(ee),gM=n(ee,"LI",{});var fze=s(gM);QMe=n(fze,"STRONG",{});var mXt=s(QMe);gmr=r(mXt,"mobilebert"),mXt.forEach(t),hmr=r(fze," \u2014 "),vJ=n(fze,"A",{href:!0});var fXt=s(vJ);umr=r(fXt,"MobileBertForMultipleChoice"),fXt.forEach(t),pmr=r(fze," (MobileBERT model)"),fze.forEach(t),_mr=i(ee),hM=n(ee,"LI",{});var gze=s(hM);WMe=n(gze,"STRONG",{});var gXt=s(WMe);bmr=r(gXt,"mpnet"),gXt.forEach(t),vmr=r(gze," \u2014 "),FJ=n(gze,"A",{href:!0});var hXt=s(FJ);Fmr=r(hXt,"MPNetForMultipleChoice"),hXt.forEach(t),Tmr=r(gze," (MPNet model)"),gze.forEach(t),Mmr=i(ee),uM=n(ee,"LI",{});var hze=s(uM);UMe=n(hze,"STRONG",{});var uXt=s(UMe);Emr=r(uXt,"nezha"),uXt.forEach(t),Cmr=r(hze," \u2014 "),TJ=n(hze,"A",{href:!0});var pXt=s(TJ);wmr=r(pXt,"NezhaForMultipleChoice"),pXt.forEach(t),Amr=r(hze," (Nezha model)"),hze.forEach(t),Lmr=i(ee),pM=n(ee,"LI",{});var uze=s(pM);HMe=n(uze,"STRONG",{});var _Xt=s(HMe);ymr=r(_Xt,"nystromformer"),_Xt.forEach(t),xmr=r(uze," \u2014 "),MJ=n(uze,"A",{href:!0});var bXt=s(MJ);$mr=r(bXt,"NystromformerForMultipleChoice"),bXt.forEach(t),kmr=r(uze," (Nystr\xF6mformer model)"),uze.forEach(t),Smr=i(ee),_M=n(ee,"LI",{});var pze=s(_M);JMe=n(pze,"STRONG",{});var vXt=s(JMe);Rmr=r(vXt,"qdqbert"),vXt.forEach(t),Pmr=r(pze," \u2014 "),EJ=n(pze,"A",{href:!0});var FXt=s(EJ);Bmr=r(FXt,"QDQBertForMultipleChoice"),FXt.forEach(t),Imr=r(pze," (QDQBert model)"),pze.forEach(t),Nmr=i(ee),bM=n(ee,"LI",{});var _ze=s(bM);YMe=n(_ze,"STRONG",{});var TXt=s(YMe);qmr=r(TXt,"rembert"),TXt.forEach(t),jmr=r(_ze," \u2014 "),CJ=n(_ze,"A",{href:!0});var MXt=s(CJ);Dmr=r(MXt,"RemBertForMultipleChoice"),MXt.forEach(t),Gmr=r(_ze," (RemBERT model)"),_ze.forEach(t),Omr=i(ee),vM=n(ee,"LI",{});var bze=s(vM);ZMe=n(bze,"STRONG",{});var EXt=s(ZMe);Vmr=r(EXt,"roberta"),EXt.forEach(t),Xmr=r(bze," \u2014 "),wJ=n(bze,"A",{href:!0});var CXt=s(wJ);zmr=r(CXt,"RobertaForMultipleChoice"),CXt.forEach(t),Qmr=r(bze," (RoBERTa model)"),bze.forEach(t),Wmr=i(ee),FM=n(ee,"LI",{});var vze=s(FM);KMe=n(vze,"STRONG",{});var wXt=s(KMe);Umr=r(wXt,"roformer"),wXt.forEach(t),Hmr=r(vze," \u2014 "),AJ=n(vze,"A",{href:!0});var AXt=s(AJ);Jmr=r(AXt,"RoFormerForMultipleChoice"),AXt.forEach(t),Ymr=r(vze," (RoFormer model)"),vze.forEach(t),Zmr=i(ee),TM=n(ee,"LI",{});var Fze=s(TM);eEe=n(Fze,"STRONG",{});var LXt=s(eEe);Kmr=r(LXt,"squeezebert"),LXt.forEach(t),efr=r(Fze," \u2014 "),LJ=n(Fze,"A",{href:!0});var yXt=s(LJ);ofr=r(yXt,"SqueezeBertForMultipleChoice"),yXt.forEach(t),rfr=r(Fze," (SqueezeBERT model)"),Fze.forEach(t),tfr=i(ee),MM=n(ee,"LI",{});var Tze=s(MM);oEe=n(Tze,"STRONG",{});var xXt=s(oEe);afr=r(xXt,"xlm"),xXt.forEach(t),nfr=r(Tze," \u2014 "),yJ=n(Tze,"A",{href:!0});var $Xt=s(yJ);sfr=r($Xt,"XLMForMultipleChoice"),$Xt.forEach(t),lfr=r(Tze," (XLM model)"),Tze.forEach(t),ifr=i(ee),EM=n(ee,"LI",{});var Mze=s(EM);rEe=n(Mze,"STRONG",{});var kXt=s(rEe);dfr=r(kXt,"xlm-roberta"),kXt.forEach(t),cfr=r(Mze," \u2014 "),xJ=n(Mze,"A",{href:!0});var SXt=s(xJ);mfr=r(SXt,"XLMRobertaForMultipleChoice"),SXt.forEach(t),ffr=r(Mze," (XLM-RoBERTa model)"),Mze.forEach(t),gfr=i(ee),CM=n(ee,"LI",{});var Eze=s(CM);tEe=n(Eze,"STRONG",{});var RXt=s(tEe);hfr=r(RXt,"xlm-roberta-xl"),RXt.forEach(t),ufr=r(Eze," \u2014 "),$J=n(Eze,"A",{href:!0});var PXt=s($J);pfr=r(PXt,"XLMRobertaXLForMultipleChoice"),PXt.forEach(t),_fr=r(Eze," (XLM-RoBERTa-XL model)"),Eze.forEach(t),bfr=i(ee),wM=n(ee,"LI",{});var Cze=s(wM);aEe=n(Cze,"STRONG",{});var BXt=s(aEe);vfr=r(BXt,"xlnet"),BXt.forEach(t),Ffr=r(Cze," \u2014 "),kJ=n(Cze,"A",{href:!0});var IXt=s(kJ);Tfr=r(IXt,"XLNetForMultipleChoice"),IXt.forEach(t),Mfr=r(Cze," (XLNet model)"),Cze.forEach(t),Efr=i(ee),AM=n(ee,"LI",{});var wze=s(AM);nEe=n(wze,"STRONG",{});var NXt=s(nEe);Cfr=r(NXt,"yoso"),NXt.forEach(t),wfr=r(wze," \u2014 "),SJ=n(wze,"A",{href:!0});var qXt=s(SJ);Afr=r(qXt,"YosoForMultipleChoice"),qXt.forEach(t),Lfr=r(wze," (YOSO model)"),wze.forEach(t),ee.forEach(t),yfr=i(xa),LM=n(xa,"P",{});var Aze=s(LM);xfr=r(Aze,"The model is set in evaluation mode by default using "),sEe=n(Aze,"CODE",{});var jXt=s(sEe);$fr=r(jXt,"model.eval()"),jXt.forEach(t),kfr=r(Aze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lEe=n(Aze,"CODE",{});var DXt=s(lEe);Sfr=r(DXt,"model.train()"),DXt.forEach(t),Aze.forEach(t),Rfr=i(xa),T(yM.$$.fragment,xa),xa.forEach(t),Nl.forEach(t),koo=i(m),Xd=n(m,"H2",{class:!0});var Wto=s(Xd);xM=n(Wto,"A",{id:!0,class:!0,href:!0});var GXt=s(xM);iEe=n(GXt,"SPAN",{});var OXt=s(iEe);T(S$.$$.fragment,OXt),OXt.forEach(t),GXt.forEach(t),Pfr=i(Wto),dEe=n(Wto,"SPAN",{});var VXt=s(dEe);Bfr=r(VXt,"AutoModelForNextSentencePrediction"),VXt.forEach(t),Wto.forEach(t),Soo=i(m),Oo=n(m,"DIV",{class:!0});var ql=s(Oo);T(R$.$$.fragment,ql),Ifr=i(ql),zd=n(ql,"P",{});var Zie=s(zd);Nfr=r(Zie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RJ=n(Zie,"A",{href:!0});var XXt=s(RJ);qfr=r(XXt,"from_pretrained()"),XXt.forEach(t),jfr=r(Zie," class method or the "),PJ=n(Zie,"A",{href:!0});var zXt=s(PJ);Dfr=r(zXt,"from_config()"),zXt.forEach(t),Gfr=r(Zie,` class
method.`),Zie.forEach(t),Ofr=i(ql),P$=n(ql,"P",{});var Uto=s(P$);Vfr=r(Uto,"This class cannot be instantiated directly using "),cEe=n(Uto,"CODE",{});var QXt=s(cEe);Xfr=r(QXt,"__init__()"),QXt.forEach(t),zfr=r(Uto," (throws an error)."),Uto.forEach(t),Qfr=i(ql),At=n(ql,"DIV",{class:!0});var k8=s(At);T(B$.$$.fragment,k8),Wfr=i(k8),mEe=n(k8,"P",{});var WXt=s(mEe);Ufr=r(WXt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WXt.forEach(t),Hfr=i(k8),Qd=n(k8,"P",{});var Kie=s(Qd);Jfr=r(Kie,`Note:
Loading a model from its configuration file does `),fEe=n(Kie,"STRONG",{});var UXt=s(fEe);Yfr=r(UXt,"not"),UXt.forEach(t),Zfr=r(Kie,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(Kie,"A",{href:!0});var HXt=s(BJ);Kfr=r(HXt,"from_pretrained()"),HXt.forEach(t),egr=r(Kie," to load the model weights."),Kie.forEach(t),ogr=i(k8),T($M.$$.fragment,k8),k8.forEach(t),rgr=i(ql),so=n(ql,"DIV",{class:!0});var $a=s(so);T(I$.$$.fragment,$a),tgr=i($a),gEe=n($a,"P",{});var JXt=s(gEe);agr=r(JXt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JXt.forEach(t),ngr=i($a),ln=n($a,"P",{});var S8=s(ln);sgr=r(S8,"The model class to instantiate is selected based on the "),hEe=n(S8,"CODE",{});var YXt=s(hEe);lgr=r(YXt,"model_type"),YXt.forEach(t),igr=r(S8,` property of the config object (either
passed as an argument or loaded from `),uEe=n(S8,"CODE",{});var ZXt=s(uEe);dgr=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),cgr=r(S8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(S8,"CODE",{});var KXt=s(pEe);mgr=r(KXt,"pretrained_model_name_or_path"),KXt.forEach(t),fgr=r(S8,":"),S8.forEach(t),ggr=i($a),Ue=n($a,"UL",{});var ft=s(Ue);kM=n(ft,"LI",{});var Lze=s(kM);_Ee=n(Lze,"STRONG",{});var ezt=s(_Ee);hgr=r(ezt,"bert"),ezt.forEach(t),ugr=r(Lze," \u2014 "),IJ=n(Lze,"A",{href:!0});var ozt=s(IJ);pgr=r(ozt,"BertForNextSentencePrediction"),ozt.forEach(t),_gr=r(Lze," (BERT model)"),Lze.forEach(t),bgr=i(ft),SM=n(ft,"LI",{});var yze=s(SM);bEe=n(yze,"STRONG",{});var rzt=s(bEe);vgr=r(rzt,"ernie"),rzt.forEach(t),Fgr=r(yze," \u2014 "),NJ=n(yze,"A",{href:!0});var tzt=s(NJ);Tgr=r(tzt,"ErnieForNextSentencePrediction"),tzt.forEach(t),Mgr=r(yze," (ERNIE model)"),yze.forEach(t),Egr=i(ft),RM=n(ft,"LI",{});var xze=s(RM);vEe=n(xze,"STRONG",{});var azt=s(vEe);Cgr=r(azt,"fnet"),azt.forEach(t),wgr=r(xze," \u2014 "),qJ=n(xze,"A",{href:!0});var nzt=s(qJ);Agr=r(nzt,"FNetForNextSentencePrediction"),nzt.forEach(t),Lgr=r(xze," (FNet model)"),xze.forEach(t),ygr=i(ft),PM=n(ft,"LI",{});var $ze=s(PM);FEe=n($ze,"STRONG",{});var szt=s(FEe);xgr=r(szt,"megatron-bert"),szt.forEach(t),$gr=r($ze," \u2014 "),jJ=n($ze,"A",{href:!0});var lzt=s(jJ);kgr=r(lzt,"MegatronBertForNextSentencePrediction"),lzt.forEach(t),Sgr=r($ze," (Megatron-BERT model)"),$ze.forEach(t),Rgr=i(ft),BM=n(ft,"LI",{});var kze=s(BM);TEe=n(kze,"STRONG",{});var izt=s(TEe);Pgr=r(izt,"mobilebert"),izt.forEach(t),Bgr=r(kze," \u2014 "),DJ=n(kze,"A",{href:!0});var dzt=s(DJ);Igr=r(dzt,"MobileBertForNextSentencePrediction"),dzt.forEach(t),Ngr=r(kze," (MobileBERT model)"),kze.forEach(t),qgr=i(ft),IM=n(ft,"LI",{});var Sze=s(IM);MEe=n(Sze,"STRONG",{});var czt=s(MEe);jgr=r(czt,"nezha"),czt.forEach(t),Dgr=r(Sze," \u2014 "),GJ=n(Sze,"A",{href:!0});var mzt=s(GJ);Ggr=r(mzt,"NezhaForNextSentencePrediction"),mzt.forEach(t),Ogr=r(Sze," (Nezha model)"),Sze.forEach(t),Vgr=i(ft),NM=n(ft,"LI",{});var Rze=s(NM);EEe=n(Rze,"STRONG",{});var fzt=s(EEe);Xgr=r(fzt,"qdqbert"),fzt.forEach(t),zgr=r(Rze," \u2014 "),OJ=n(Rze,"A",{href:!0});var gzt=s(OJ);Qgr=r(gzt,"QDQBertForNextSentencePrediction"),gzt.forEach(t),Wgr=r(Rze," (QDQBert model)"),Rze.forEach(t),ft.forEach(t),Ugr=i($a),qM=n($a,"P",{});var Pze=s(qM);Hgr=r(Pze,"The model is set in evaluation mode by default using "),CEe=n(Pze,"CODE",{});var hzt=s(CEe);Jgr=r(hzt,"model.eval()"),hzt.forEach(t),Ygr=r(Pze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wEe=n(Pze,"CODE",{});var uzt=s(wEe);Zgr=r(uzt,"model.train()"),uzt.forEach(t),Pze.forEach(t),Kgr=i($a),T(jM.$$.fragment,$a),$a.forEach(t),ql.forEach(t),Roo=i(m),Wd=n(m,"H2",{class:!0});var Hto=s(Wd);DM=n(Hto,"A",{id:!0,class:!0,href:!0});var pzt=s(DM);AEe=n(pzt,"SPAN",{});var _zt=s(AEe);T(N$.$$.fragment,_zt),_zt.forEach(t),pzt.forEach(t),ehr=i(Hto),LEe=n(Hto,"SPAN",{});var bzt=s(LEe);ohr=r(bzt,"AutoModelForTokenClassification"),bzt.forEach(t),Hto.forEach(t),Poo=i(m),Vo=n(m,"DIV",{class:!0});var jl=s(Vo);T(q$.$$.fragment,jl),rhr=i(jl),Ud=n(jl,"P",{});var ede=s(Ud);thr=r(ede,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VJ=n(ede,"A",{href:!0});var vzt=s(VJ);ahr=r(vzt,"from_pretrained()"),vzt.forEach(t),nhr=r(ede," class method or the "),XJ=n(ede,"A",{href:!0});var Fzt=s(XJ);shr=r(Fzt,"from_config()"),Fzt.forEach(t),lhr=r(ede,` class
method.`),ede.forEach(t),ihr=i(jl),j$=n(jl,"P",{});var Jto=s(j$);dhr=r(Jto,"This class cannot be instantiated directly using "),yEe=n(Jto,"CODE",{});var Tzt=s(yEe);chr=r(Tzt,"__init__()"),Tzt.forEach(t),mhr=r(Jto," (throws an error)."),Jto.forEach(t),fhr=i(jl),Lt=n(jl,"DIV",{class:!0});var R8=s(Lt);T(D$.$$.fragment,R8),ghr=i(R8),xEe=n(R8,"P",{});var Mzt=s(xEe);hhr=r(Mzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mzt.forEach(t),uhr=i(R8),Hd=n(R8,"P",{});var ode=s(Hd);phr=r(ode,`Note:
Loading a model from its configuration file does `),$Ee=n(ode,"STRONG",{});var Ezt=s($Ee);_hr=r(Ezt,"not"),Ezt.forEach(t),bhr=r(ode,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(ode,"A",{href:!0});var Czt=s(zJ);vhr=r(Czt,"from_pretrained()"),Czt.forEach(t),Fhr=r(ode," to load the model weights."),ode.forEach(t),Thr=i(R8),T(GM.$$.fragment,R8),R8.forEach(t),Mhr=i(jl),lo=n(jl,"DIV",{class:!0});var ka=s(lo);T(G$.$$.fragment,ka),Ehr=i(ka),kEe=n(ka,"P",{});var wzt=s(kEe);Chr=r(wzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wzt.forEach(t),whr=i(ka),dn=n(ka,"P",{});var P8=s(dn);Ahr=r(P8,"The model class to instantiate is selected based on the "),SEe=n(P8,"CODE",{});var Azt=s(SEe);Lhr=r(Azt,"model_type"),Azt.forEach(t),yhr=r(P8,` property of the config object (either
passed as an argument or loaded from `),REe=n(P8,"CODE",{});var Lzt=s(REe);xhr=r(Lzt,"pretrained_model_name_or_path"),Lzt.forEach(t),$hr=r(P8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(P8,"CODE",{});var yzt=s(PEe);khr=r(yzt,"pretrained_model_name_or_path"),yzt.forEach(t),Shr=r(P8,":"),P8.forEach(t),Rhr=i(ka),H=n(ka,"UL",{});var Y=s(H);OM=n(Y,"LI",{});var Bze=s(OM);BEe=n(Bze,"STRONG",{});var xzt=s(BEe);Phr=r(xzt,"albert"),xzt.forEach(t),Bhr=r(Bze," \u2014 "),QJ=n(Bze,"A",{href:!0});var $zt=s(QJ);Ihr=r($zt,"AlbertForTokenClassification"),$zt.forEach(t),Nhr=r(Bze," (ALBERT model)"),Bze.forEach(t),qhr=i(Y),VM=n(Y,"LI",{});var Ize=s(VM);IEe=n(Ize,"STRONG",{});var kzt=s(IEe);jhr=r(kzt,"bert"),kzt.forEach(t),Dhr=r(Ize," \u2014 "),WJ=n(Ize,"A",{href:!0});var Szt=s(WJ);Ghr=r(Szt,"BertForTokenClassification"),Szt.forEach(t),Ohr=r(Ize," (BERT model)"),Ize.forEach(t),Vhr=i(Y),XM=n(Y,"LI",{});var Nze=s(XM);NEe=n(Nze,"STRONG",{});var Rzt=s(NEe);Xhr=r(Rzt,"big_bird"),Rzt.forEach(t),zhr=r(Nze," \u2014 "),UJ=n(Nze,"A",{href:!0});var Pzt=s(UJ);Qhr=r(Pzt,"BigBirdForTokenClassification"),Pzt.forEach(t),Whr=r(Nze," (BigBird model)"),Nze.forEach(t),Uhr=i(Y),zM=n(Y,"LI",{});var qze=s(zM);qEe=n(qze,"STRONG",{});var Bzt=s(qEe);Hhr=r(Bzt,"bloom"),Bzt.forEach(t),Jhr=r(qze," \u2014 "),HJ=n(qze,"A",{href:!0});var Izt=s(HJ);Yhr=r(Izt,"BloomForTokenClassification"),Izt.forEach(t),Zhr=r(qze," (BLOOM model)"),qze.forEach(t),Khr=i(Y),QM=n(Y,"LI",{});var jze=s(QM);jEe=n(jze,"STRONG",{});var Nzt=s(jEe);eur=r(Nzt,"camembert"),Nzt.forEach(t),our=r(jze," \u2014 "),JJ=n(jze,"A",{href:!0});var qzt=s(JJ);rur=r(qzt,"CamembertForTokenClassification"),qzt.forEach(t),tur=r(jze," (CamemBERT model)"),jze.forEach(t),aur=i(Y),WM=n(Y,"LI",{});var Dze=s(WM);DEe=n(Dze,"STRONG",{});var jzt=s(DEe);nur=r(jzt,"canine"),jzt.forEach(t),sur=r(Dze," \u2014 "),YJ=n(Dze,"A",{href:!0});var Dzt=s(YJ);lur=r(Dzt,"CanineForTokenClassification"),Dzt.forEach(t),iur=r(Dze," (CANINE model)"),Dze.forEach(t),dur=i(Y),UM=n(Y,"LI",{});var Gze=s(UM);GEe=n(Gze,"STRONG",{});var Gzt=s(GEe);cur=r(Gzt,"convbert"),Gzt.forEach(t),mur=r(Gze," \u2014 "),ZJ=n(Gze,"A",{href:!0});var Ozt=s(ZJ);fur=r(Ozt,"ConvBertForTokenClassification"),Ozt.forEach(t),gur=r(Gze," (ConvBERT model)"),Gze.forEach(t),hur=i(Y),HM=n(Y,"LI",{});var Oze=s(HM);OEe=n(Oze,"STRONG",{});var Vzt=s(OEe);uur=r(Vzt,"data2vec-text"),Vzt.forEach(t),pur=r(Oze," \u2014 "),KJ=n(Oze,"A",{href:!0});var Xzt=s(KJ);_ur=r(Xzt,"Data2VecTextForTokenClassification"),Xzt.forEach(t),bur=r(Oze," (Data2VecText model)"),Oze.forEach(t),vur=i(Y),JM=n(Y,"LI",{});var Vze=s(JM);VEe=n(Vze,"STRONG",{});var zzt=s(VEe);Fur=r(zzt,"deberta"),zzt.forEach(t),Tur=r(Vze," \u2014 "),eY=n(Vze,"A",{href:!0});var Qzt=s(eY);Mur=r(Qzt,"DebertaForTokenClassification"),Qzt.forEach(t),Eur=r(Vze," (DeBERTa model)"),Vze.forEach(t),Cur=i(Y),YM=n(Y,"LI",{});var Xze=s(YM);XEe=n(Xze,"STRONG",{});var Wzt=s(XEe);wur=r(Wzt,"deberta-v2"),Wzt.forEach(t),Aur=r(Xze," \u2014 "),oY=n(Xze,"A",{href:!0});var Uzt=s(oY);Lur=r(Uzt,"DebertaV2ForTokenClassification"),Uzt.forEach(t),yur=r(Xze," (DeBERTa-v2 model)"),Xze.forEach(t),xur=i(Y),ZM=n(Y,"LI",{});var zze=s(ZM);zEe=n(zze,"STRONG",{});var Hzt=s(zEe);$ur=r(Hzt,"distilbert"),Hzt.forEach(t),kur=r(zze," \u2014 "),rY=n(zze,"A",{href:!0});var Jzt=s(rY);Sur=r(Jzt,"DistilBertForTokenClassification"),Jzt.forEach(t),Rur=r(zze," (DistilBERT model)"),zze.forEach(t),Pur=i(Y),KM=n(Y,"LI",{});var Qze=s(KM);QEe=n(Qze,"STRONG",{});var Yzt=s(QEe);Bur=r(Yzt,"electra"),Yzt.forEach(t),Iur=r(Qze," \u2014 "),tY=n(Qze,"A",{href:!0});var Zzt=s(tY);Nur=r(Zzt,"ElectraForTokenClassification"),Zzt.forEach(t),qur=r(Qze," (ELECTRA model)"),Qze.forEach(t),jur=i(Y),eE=n(Y,"LI",{});var Wze=s(eE);WEe=n(Wze,"STRONG",{});var Kzt=s(WEe);Dur=r(Kzt,"ernie"),Kzt.forEach(t),Gur=r(Wze," \u2014 "),aY=n(Wze,"A",{href:!0});var eQt=s(aY);Our=r(eQt,"ErnieForTokenClassification"),eQt.forEach(t),Vur=r(Wze," (ERNIE model)"),Wze.forEach(t),Xur=i(Y),oE=n(Y,"LI",{});var Uze=s(oE);UEe=n(Uze,"STRONG",{});var oQt=s(UEe);zur=r(oQt,"esm"),oQt.forEach(t),Qur=r(Uze," \u2014 "),nY=n(Uze,"A",{href:!0});var rQt=s(nY);Wur=r(rQt,"EsmForTokenClassification"),rQt.forEach(t),Uur=r(Uze," (ESM model)"),Uze.forEach(t),Hur=i(Y),rE=n(Y,"LI",{});var Hze=s(rE);HEe=n(Hze,"STRONG",{});var tQt=s(HEe);Jur=r(tQt,"flaubert"),tQt.forEach(t),Yur=r(Hze," \u2014 "),sY=n(Hze,"A",{href:!0});var aQt=s(sY);Zur=r(aQt,"FlaubertForTokenClassification"),aQt.forEach(t),Kur=r(Hze," (FlauBERT model)"),Hze.forEach(t),epr=i(Y),tE=n(Y,"LI",{});var Jze=s(tE);JEe=n(Jze,"STRONG",{});var nQt=s(JEe);opr=r(nQt,"fnet"),nQt.forEach(t),rpr=r(Jze," \u2014 "),lY=n(Jze,"A",{href:!0});var sQt=s(lY);tpr=r(sQt,"FNetForTokenClassification"),sQt.forEach(t),apr=r(Jze," (FNet model)"),Jze.forEach(t),npr=i(Y),aE=n(Y,"LI",{});var Yze=s(aE);YEe=n(Yze,"STRONG",{});var lQt=s(YEe);spr=r(lQt,"funnel"),lQt.forEach(t),lpr=r(Yze," \u2014 "),iY=n(Yze,"A",{href:!0});var iQt=s(iY);ipr=r(iQt,"FunnelForTokenClassification"),iQt.forEach(t),dpr=r(Yze," (Funnel Transformer model)"),Yze.forEach(t),cpr=i(Y),nE=n(Y,"LI",{});var Zze=s(nE);ZEe=n(Zze,"STRONG",{});var dQt=s(ZEe);mpr=r(dQt,"gpt2"),dQt.forEach(t),fpr=r(Zze," \u2014 "),dY=n(Zze,"A",{href:!0});var cQt=s(dY);gpr=r(cQt,"GPT2ForTokenClassification"),cQt.forEach(t),hpr=r(Zze," (OpenAI GPT-2 model)"),Zze.forEach(t),upr=i(Y),sE=n(Y,"LI",{});var Kze=s(sE);KEe=n(Kze,"STRONG",{});var mQt=s(KEe);ppr=r(mQt,"ibert"),mQt.forEach(t),_pr=r(Kze," \u2014 "),cY=n(Kze,"A",{href:!0});var fQt=s(cY);bpr=r(fQt,"IBertForTokenClassification"),fQt.forEach(t),vpr=r(Kze," (I-BERT model)"),Kze.forEach(t),Fpr=i(Y),lE=n(Y,"LI",{});var eQe=s(lE);e4e=n(eQe,"STRONG",{});var gQt=s(e4e);Tpr=r(gQt,"layoutlm"),gQt.forEach(t),Mpr=r(eQe," \u2014 "),mY=n(eQe,"A",{href:!0});var hQt=s(mY);Epr=r(hQt,"LayoutLMForTokenClassification"),hQt.forEach(t),Cpr=r(eQe," (LayoutLM model)"),eQe.forEach(t),wpr=i(Y),iE=n(Y,"LI",{});var oQe=s(iE);o4e=n(oQe,"STRONG",{});var uQt=s(o4e);Apr=r(uQt,"layoutlmv2"),uQt.forEach(t),Lpr=r(oQe," \u2014 "),fY=n(oQe,"A",{href:!0});var pQt=s(fY);ypr=r(pQt,"LayoutLMv2ForTokenClassification"),pQt.forEach(t),xpr=r(oQe," (LayoutLMv2 model)"),oQe.forEach(t),$pr=i(Y),dE=n(Y,"LI",{});var rQe=s(dE);r4e=n(rQe,"STRONG",{});var _Qt=s(r4e);kpr=r(_Qt,"layoutlmv3"),_Qt.forEach(t),Spr=r(rQe," \u2014 "),gY=n(rQe,"A",{href:!0});var bQt=s(gY);Rpr=r(bQt,"LayoutLMv3ForTokenClassification"),bQt.forEach(t),Ppr=r(rQe," (LayoutLMv3 model)"),rQe.forEach(t),Bpr=i(Y),cE=n(Y,"LI",{});var tQe=s(cE);t4e=n(tQe,"STRONG",{});var vQt=s(t4e);Ipr=r(vQt,"longformer"),vQt.forEach(t),Npr=r(tQe," \u2014 "),hY=n(tQe,"A",{href:!0});var FQt=s(hY);qpr=r(FQt,"LongformerForTokenClassification"),FQt.forEach(t),jpr=r(tQe," (Longformer model)"),tQe.forEach(t),Dpr=i(Y),mE=n(Y,"LI",{});var aQe=s(mE);a4e=n(aQe,"STRONG",{});var TQt=s(a4e);Gpr=r(TQt,"luke"),TQt.forEach(t),Opr=r(aQe," \u2014 "),uY=n(aQe,"A",{href:!0});var MQt=s(uY);Vpr=r(MQt,"LukeForTokenClassification"),MQt.forEach(t),Xpr=r(aQe," (LUKE model)"),aQe.forEach(t),zpr=i(Y),fE=n(Y,"LI",{});var nQe=s(fE);n4e=n(nQe,"STRONG",{});var EQt=s(n4e);Qpr=r(EQt,"markuplm"),EQt.forEach(t),Wpr=r(nQe," \u2014 "),pY=n(nQe,"A",{href:!0});var CQt=s(pY);Upr=r(CQt,"MarkupLMForTokenClassification"),CQt.forEach(t),Hpr=r(nQe," (MarkupLM model)"),nQe.forEach(t),Jpr=i(Y),gE=n(Y,"LI",{});var sQe=s(gE);s4e=n(sQe,"STRONG",{});var wQt=s(s4e);Ypr=r(wQt,"megatron-bert"),wQt.forEach(t),Zpr=r(sQe," \u2014 "),_Y=n(sQe,"A",{href:!0});var AQt=s(_Y);Kpr=r(AQt,"MegatronBertForTokenClassification"),AQt.forEach(t),e_r=r(sQe," (Megatron-BERT model)"),sQe.forEach(t),o_r=i(Y),hE=n(Y,"LI",{});var lQe=s(hE);l4e=n(lQe,"STRONG",{});var LQt=s(l4e);r_r=r(LQt,"mobilebert"),LQt.forEach(t),t_r=r(lQe," \u2014 "),bY=n(lQe,"A",{href:!0});var yQt=s(bY);a_r=r(yQt,"MobileBertForTokenClassification"),yQt.forEach(t),n_r=r(lQe," (MobileBERT model)"),lQe.forEach(t),s_r=i(Y),uE=n(Y,"LI",{});var iQe=s(uE);i4e=n(iQe,"STRONG",{});var xQt=s(i4e);l_r=r(xQt,"mpnet"),xQt.forEach(t),i_r=r(iQe," \u2014 "),vY=n(iQe,"A",{href:!0});var $Qt=s(vY);d_r=r($Qt,"MPNetForTokenClassification"),$Qt.forEach(t),c_r=r(iQe," (MPNet model)"),iQe.forEach(t),m_r=i(Y),pE=n(Y,"LI",{});var dQe=s(pE);d4e=n(dQe,"STRONG",{});var kQt=s(d4e);f_r=r(kQt,"nezha"),kQt.forEach(t),g_r=r(dQe," \u2014 "),FY=n(dQe,"A",{href:!0});var SQt=s(FY);h_r=r(SQt,"NezhaForTokenClassification"),SQt.forEach(t),u_r=r(dQe," (Nezha model)"),dQe.forEach(t),p_r=i(Y),_E=n(Y,"LI",{});var cQe=s(_E);c4e=n(cQe,"STRONG",{});var RQt=s(c4e);__r=r(RQt,"nystromformer"),RQt.forEach(t),b_r=r(cQe," \u2014 "),TY=n(cQe,"A",{href:!0});var PQt=s(TY);v_r=r(PQt,"NystromformerForTokenClassification"),PQt.forEach(t),F_r=r(cQe," (Nystr\xF6mformer model)"),cQe.forEach(t),T_r=i(Y),bE=n(Y,"LI",{});var mQe=s(bE);m4e=n(mQe,"STRONG",{});var BQt=s(m4e);M_r=r(BQt,"qdqbert"),BQt.forEach(t),E_r=r(mQe," \u2014 "),MY=n(mQe,"A",{href:!0});var IQt=s(MY);C_r=r(IQt,"QDQBertForTokenClassification"),IQt.forEach(t),w_r=r(mQe," (QDQBert model)"),mQe.forEach(t),A_r=i(Y),vE=n(Y,"LI",{});var fQe=s(vE);f4e=n(fQe,"STRONG",{});var NQt=s(f4e);L_r=r(NQt,"rembert"),NQt.forEach(t),y_r=r(fQe," \u2014 "),EY=n(fQe,"A",{href:!0});var qQt=s(EY);x_r=r(qQt,"RemBertForTokenClassification"),qQt.forEach(t),$_r=r(fQe," (RemBERT model)"),fQe.forEach(t),k_r=i(Y),FE=n(Y,"LI",{});var gQe=s(FE);g4e=n(gQe,"STRONG",{});var jQt=s(g4e);S_r=r(jQt,"roberta"),jQt.forEach(t),R_r=r(gQe," \u2014 "),CY=n(gQe,"A",{href:!0});var DQt=s(CY);P_r=r(DQt,"RobertaForTokenClassification"),DQt.forEach(t),B_r=r(gQe," (RoBERTa model)"),gQe.forEach(t),I_r=i(Y),TE=n(Y,"LI",{});var hQe=s(TE);h4e=n(hQe,"STRONG",{});var GQt=s(h4e);N_r=r(GQt,"roformer"),GQt.forEach(t),q_r=r(hQe," \u2014 "),wY=n(hQe,"A",{href:!0});var OQt=s(wY);j_r=r(OQt,"RoFormerForTokenClassification"),OQt.forEach(t),D_r=r(hQe," (RoFormer model)"),hQe.forEach(t),G_r=i(Y),ME=n(Y,"LI",{});var uQe=s(ME);u4e=n(uQe,"STRONG",{});var VQt=s(u4e);O_r=r(VQt,"squeezebert"),VQt.forEach(t),V_r=r(uQe," \u2014 "),AY=n(uQe,"A",{href:!0});var XQt=s(AY);X_r=r(XQt,"SqueezeBertForTokenClassification"),XQt.forEach(t),z_r=r(uQe," (SqueezeBERT model)"),uQe.forEach(t),Q_r=i(Y),EE=n(Y,"LI",{});var pQe=s(EE);p4e=n(pQe,"STRONG",{});var zQt=s(p4e);W_r=r(zQt,"xlm"),zQt.forEach(t),U_r=r(pQe," \u2014 "),LY=n(pQe,"A",{href:!0});var QQt=s(LY);H_r=r(QQt,"XLMForTokenClassification"),QQt.forEach(t),J_r=r(pQe," (XLM model)"),pQe.forEach(t),Y_r=i(Y),CE=n(Y,"LI",{});var _Qe=s(CE);_4e=n(_Qe,"STRONG",{});var WQt=s(_4e);Z_r=r(WQt,"xlm-roberta"),WQt.forEach(t),K_r=r(_Qe," \u2014 "),yY=n(_Qe,"A",{href:!0});var UQt=s(yY);e1r=r(UQt,"XLMRobertaForTokenClassification"),UQt.forEach(t),o1r=r(_Qe," (XLM-RoBERTa model)"),_Qe.forEach(t),r1r=i(Y),wE=n(Y,"LI",{});var bQe=s(wE);b4e=n(bQe,"STRONG",{});var HQt=s(b4e);t1r=r(HQt,"xlm-roberta-xl"),HQt.forEach(t),a1r=r(bQe," \u2014 "),xY=n(bQe,"A",{href:!0});var JQt=s(xY);n1r=r(JQt,"XLMRobertaXLForTokenClassification"),JQt.forEach(t),s1r=r(bQe," (XLM-RoBERTa-XL model)"),bQe.forEach(t),l1r=i(Y),AE=n(Y,"LI",{});var vQe=s(AE);v4e=n(vQe,"STRONG",{});var YQt=s(v4e);i1r=r(YQt,"xlnet"),YQt.forEach(t),d1r=r(vQe," \u2014 "),$Y=n(vQe,"A",{href:!0});var ZQt=s($Y);c1r=r(ZQt,"XLNetForTokenClassification"),ZQt.forEach(t),m1r=r(vQe," (XLNet model)"),vQe.forEach(t),f1r=i(Y),LE=n(Y,"LI",{});var FQe=s(LE);F4e=n(FQe,"STRONG",{});var KQt=s(F4e);g1r=r(KQt,"yoso"),KQt.forEach(t),h1r=r(FQe," \u2014 "),kY=n(FQe,"A",{href:!0});var eWt=s(kY);u1r=r(eWt,"YosoForTokenClassification"),eWt.forEach(t),p1r=r(FQe," (YOSO model)"),FQe.forEach(t),Y.forEach(t),_1r=i(ka),yE=n(ka,"P",{});var TQe=s(yE);b1r=r(TQe,"The model is set in evaluation mode by default using "),T4e=n(TQe,"CODE",{});var oWt=s(T4e);v1r=r(oWt,"model.eval()"),oWt.forEach(t),F1r=r(TQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M4e=n(TQe,"CODE",{});var rWt=s(M4e);T1r=r(rWt,"model.train()"),rWt.forEach(t),TQe.forEach(t),M1r=i(ka),T(xE.$$.fragment,ka),ka.forEach(t),jl.forEach(t),Boo=i(m),Jd=n(m,"H2",{class:!0});var Yto=s(Jd);$E=n(Yto,"A",{id:!0,class:!0,href:!0});var tWt=s($E);E4e=n(tWt,"SPAN",{});var aWt=s(E4e);T(O$.$$.fragment,aWt),aWt.forEach(t),tWt.forEach(t),E1r=i(Yto),C4e=n(Yto,"SPAN",{});var nWt=s(C4e);C1r=r(nWt,"AutoModelForQuestionAnswering"),nWt.forEach(t),Yto.forEach(t),Ioo=i(m),Xo=n(m,"DIV",{class:!0});var Dl=s(Xo);T(V$.$$.fragment,Dl),w1r=i(Dl),Yd=n(Dl,"P",{});var rde=s(Yd);A1r=r(rde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SY=n(rde,"A",{href:!0});var sWt=s(SY);L1r=r(sWt,"from_pretrained()"),sWt.forEach(t),y1r=r(rde," class method or the "),RY=n(rde,"A",{href:!0});var lWt=s(RY);x1r=r(lWt,"from_config()"),lWt.forEach(t),$1r=r(rde,` class
method.`),rde.forEach(t),k1r=i(Dl),X$=n(Dl,"P",{});var Zto=s(X$);S1r=r(Zto,"This class cannot be instantiated directly using "),w4e=n(Zto,"CODE",{});var iWt=s(w4e);R1r=r(iWt,"__init__()"),iWt.forEach(t),P1r=r(Zto," (throws an error)."),Zto.forEach(t),B1r=i(Dl),yt=n(Dl,"DIV",{class:!0});var B8=s(yt);T(z$.$$.fragment,B8),I1r=i(B8),A4e=n(B8,"P",{});var dWt=s(A4e);N1r=r(dWt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dWt.forEach(t),q1r=i(B8),Zd=n(B8,"P",{});var tde=s(Zd);j1r=r(tde,`Note:
Loading a model from its configuration file does `),L4e=n(tde,"STRONG",{});var cWt=s(L4e);D1r=r(cWt,"not"),cWt.forEach(t),G1r=r(tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(tde,"A",{href:!0});var mWt=s(PY);O1r=r(mWt,"from_pretrained()"),mWt.forEach(t),V1r=r(tde," to load the model weights."),tde.forEach(t),X1r=i(B8),T(kE.$$.fragment,B8),B8.forEach(t),z1r=i(Dl),io=n(Dl,"DIV",{class:!0});var Sa=s(io);T(Q$.$$.fragment,Sa),Q1r=i(Sa),y4e=n(Sa,"P",{});var fWt=s(y4e);W1r=r(fWt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fWt.forEach(t),U1r=i(Sa),cn=n(Sa,"P",{});var I8=s(cn);H1r=r(I8,"The model class to instantiate is selected based on the "),x4e=n(I8,"CODE",{});var gWt=s(x4e);J1r=r(gWt,"model_type"),gWt.forEach(t),Y1r=r(I8,` property of the config object (either
passed as an argument or loaded from `),$4e=n(I8,"CODE",{});var hWt=s($4e);Z1r=r(hWt,"pretrained_model_name_or_path"),hWt.forEach(t),K1r=r(I8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(I8,"CODE",{});var uWt=s(k4e);ebr=r(uWt,"pretrained_model_name_or_path"),uWt.forEach(t),obr=r(I8,":"),I8.forEach(t),rbr=i(Sa),V=n(Sa,"UL",{});var X=s(V);SE=n(X,"LI",{});var MQe=s(SE);S4e=n(MQe,"STRONG",{});var pWt=s(S4e);tbr=r(pWt,"albert"),pWt.forEach(t),abr=r(MQe," \u2014 "),BY=n(MQe,"A",{href:!0});var _Wt=s(BY);nbr=r(_Wt,"AlbertForQuestionAnswering"),_Wt.forEach(t),sbr=r(MQe," (ALBERT model)"),MQe.forEach(t),lbr=i(X),RE=n(X,"LI",{});var EQe=s(RE);R4e=n(EQe,"STRONG",{});var bWt=s(R4e);ibr=r(bWt,"bart"),bWt.forEach(t),dbr=r(EQe," \u2014 "),IY=n(EQe,"A",{href:!0});var vWt=s(IY);cbr=r(vWt,"BartForQuestionAnswering"),vWt.forEach(t),mbr=r(EQe," (BART model)"),EQe.forEach(t),fbr=i(X),PE=n(X,"LI",{});var CQe=s(PE);P4e=n(CQe,"STRONG",{});var FWt=s(P4e);gbr=r(FWt,"bert"),FWt.forEach(t),hbr=r(CQe," \u2014 "),NY=n(CQe,"A",{href:!0});var TWt=s(NY);ubr=r(TWt,"BertForQuestionAnswering"),TWt.forEach(t),pbr=r(CQe," (BERT model)"),CQe.forEach(t),_br=i(X),BE=n(X,"LI",{});var wQe=s(BE);B4e=n(wQe,"STRONG",{});var MWt=s(B4e);bbr=r(MWt,"big_bird"),MWt.forEach(t),vbr=r(wQe," \u2014 "),qY=n(wQe,"A",{href:!0});var EWt=s(qY);Fbr=r(EWt,"BigBirdForQuestionAnswering"),EWt.forEach(t),Tbr=r(wQe," (BigBird model)"),wQe.forEach(t),Mbr=i(X),IE=n(X,"LI",{});var AQe=s(IE);I4e=n(AQe,"STRONG",{});var CWt=s(I4e);Ebr=r(CWt,"bigbird_pegasus"),CWt.forEach(t),Cbr=r(AQe," \u2014 "),jY=n(AQe,"A",{href:!0});var wWt=s(jY);wbr=r(wWt,"BigBirdPegasusForQuestionAnswering"),wWt.forEach(t),Abr=r(AQe," (BigBird-Pegasus model)"),AQe.forEach(t),Lbr=i(X),NE=n(X,"LI",{});var LQe=s(NE);N4e=n(LQe,"STRONG",{});var AWt=s(N4e);ybr=r(AWt,"bloom"),AWt.forEach(t),xbr=r(LQe," \u2014 "),DY=n(LQe,"A",{href:!0});var LWt=s(DY);$br=r(LWt,"BloomForQuestionAnswering"),LWt.forEach(t),kbr=r(LQe," (BLOOM model)"),LQe.forEach(t),Sbr=i(X),qE=n(X,"LI",{});var yQe=s(qE);q4e=n(yQe,"STRONG",{});var yWt=s(q4e);Rbr=r(yWt,"camembert"),yWt.forEach(t),Pbr=r(yQe," \u2014 "),GY=n(yQe,"A",{href:!0});var xWt=s(GY);Bbr=r(xWt,"CamembertForQuestionAnswering"),xWt.forEach(t),Ibr=r(yQe," (CamemBERT model)"),yQe.forEach(t),Nbr=i(X),jE=n(X,"LI",{});var xQe=s(jE);j4e=n(xQe,"STRONG",{});var $Wt=s(j4e);qbr=r($Wt,"canine"),$Wt.forEach(t),jbr=r(xQe," \u2014 "),OY=n(xQe,"A",{href:!0});var kWt=s(OY);Dbr=r(kWt,"CanineForQuestionAnswering"),kWt.forEach(t),Gbr=r(xQe," (CANINE model)"),xQe.forEach(t),Obr=i(X),DE=n(X,"LI",{});var $Qe=s(DE);D4e=n($Qe,"STRONG",{});var SWt=s(D4e);Vbr=r(SWt,"convbert"),SWt.forEach(t),Xbr=r($Qe," \u2014 "),VY=n($Qe,"A",{href:!0});var RWt=s(VY);zbr=r(RWt,"ConvBertForQuestionAnswering"),RWt.forEach(t),Qbr=r($Qe," (ConvBERT model)"),$Qe.forEach(t),Wbr=i(X),GE=n(X,"LI",{});var kQe=s(GE);G4e=n(kQe,"STRONG",{});var PWt=s(G4e);Ubr=r(PWt,"data2vec-text"),PWt.forEach(t),Hbr=r(kQe," \u2014 "),XY=n(kQe,"A",{href:!0});var BWt=s(XY);Jbr=r(BWt,"Data2VecTextForQuestionAnswering"),BWt.forEach(t),Ybr=r(kQe," (Data2VecText model)"),kQe.forEach(t),Zbr=i(X),OE=n(X,"LI",{});var SQe=s(OE);O4e=n(SQe,"STRONG",{});var IWt=s(O4e);Kbr=r(IWt,"deberta"),IWt.forEach(t),e2r=r(SQe," \u2014 "),zY=n(SQe,"A",{href:!0});var NWt=s(zY);o2r=r(NWt,"DebertaForQuestionAnswering"),NWt.forEach(t),r2r=r(SQe," (DeBERTa model)"),SQe.forEach(t),t2r=i(X),VE=n(X,"LI",{});var RQe=s(VE);V4e=n(RQe,"STRONG",{});var qWt=s(V4e);a2r=r(qWt,"deberta-v2"),qWt.forEach(t),n2r=r(RQe," \u2014 "),QY=n(RQe,"A",{href:!0});var jWt=s(QY);s2r=r(jWt,"DebertaV2ForQuestionAnswering"),jWt.forEach(t),l2r=r(RQe," (DeBERTa-v2 model)"),RQe.forEach(t),i2r=i(X),XE=n(X,"LI",{});var PQe=s(XE);X4e=n(PQe,"STRONG",{});var DWt=s(X4e);d2r=r(DWt,"distilbert"),DWt.forEach(t),c2r=r(PQe," \u2014 "),WY=n(PQe,"A",{href:!0});var GWt=s(WY);m2r=r(GWt,"DistilBertForQuestionAnswering"),GWt.forEach(t),f2r=r(PQe," (DistilBERT model)"),PQe.forEach(t),g2r=i(X),zE=n(X,"LI",{});var BQe=s(zE);z4e=n(BQe,"STRONG",{});var OWt=s(z4e);h2r=r(OWt,"electra"),OWt.forEach(t),u2r=r(BQe," \u2014 "),UY=n(BQe,"A",{href:!0});var VWt=s(UY);p2r=r(VWt,"ElectraForQuestionAnswering"),VWt.forEach(t),_2r=r(BQe," (ELECTRA model)"),BQe.forEach(t),b2r=i(X),QE=n(X,"LI",{});var IQe=s(QE);Q4e=n(IQe,"STRONG",{});var XWt=s(Q4e);v2r=r(XWt,"ernie"),XWt.forEach(t),F2r=r(IQe," \u2014 "),HY=n(IQe,"A",{href:!0});var zWt=s(HY);T2r=r(zWt,"ErnieForQuestionAnswering"),zWt.forEach(t),M2r=r(IQe," (ERNIE model)"),IQe.forEach(t),E2r=i(X),WE=n(X,"LI",{});var NQe=s(WE);W4e=n(NQe,"STRONG",{});var QWt=s(W4e);C2r=r(QWt,"flaubert"),QWt.forEach(t),w2r=r(NQe," \u2014 "),JY=n(NQe,"A",{href:!0});var WWt=s(JY);A2r=r(WWt,"FlaubertForQuestionAnsweringSimple"),WWt.forEach(t),L2r=r(NQe," (FlauBERT model)"),NQe.forEach(t),y2r=i(X),UE=n(X,"LI",{});var qQe=s(UE);U4e=n(qQe,"STRONG",{});var UWt=s(U4e);x2r=r(UWt,"fnet"),UWt.forEach(t),$2r=r(qQe," \u2014 "),YY=n(qQe,"A",{href:!0});var HWt=s(YY);k2r=r(HWt,"FNetForQuestionAnswering"),HWt.forEach(t),S2r=r(qQe," (FNet model)"),qQe.forEach(t),R2r=i(X),HE=n(X,"LI",{});var jQe=s(HE);H4e=n(jQe,"STRONG",{});var JWt=s(H4e);P2r=r(JWt,"funnel"),JWt.forEach(t),B2r=r(jQe," \u2014 "),ZY=n(jQe,"A",{href:!0});var YWt=s(ZY);I2r=r(YWt,"FunnelForQuestionAnswering"),YWt.forEach(t),N2r=r(jQe," (Funnel Transformer model)"),jQe.forEach(t),q2r=i(X),JE=n(X,"LI",{});var DQe=s(JE);J4e=n(DQe,"STRONG",{});var ZWt=s(J4e);j2r=r(ZWt,"gptj"),ZWt.forEach(t),D2r=r(DQe," \u2014 "),KY=n(DQe,"A",{href:!0});var KWt=s(KY);G2r=r(KWt,"GPTJForQuestionAnswering"),KWt.forEach(t),O2r=r(DQe," (GPT-J model)"),DQe.forEach(t),V2r=i(X),YE=n(X,"LI",{});var GQe=s(YE);Y4e=n(GQe,"STRONG",{});var eUt=s(Y4e);X2r=r(eUt,"ibert"),eUt.forEach(t),z2r=r(GQe," \u2014 "),eZ=n(GQe,"A",{href:!0});var oUt=s(eZ);Q2r=r(oUt,"IBertForQuestionAnswering"),oUt.forEach(t),W2r=r(GQe," (I-BERT model)"),GQe.forEach(t),U2r=i(X),ZE=n(X,"LI",{});var OQe=s(ZE);Z4e=n(OQe,"STRONG",{});var rUt=s(Z4e);H2r=r(rUt,"layoutlmv2"),rUt.forEach(t),J2r=r(OQe," \u2014 "),oZ=n(OQe,"A",{href:!0});var tUt=s(oZ);Y2r=r(tUt,"LayoutLMv2ForQuestionAnswering"),tUt.forEach(t),Z2r=r(OQe," (LayoutLMv2 model)"),OQe.forEach(t),K2r=i(X),KE=n(X,"LI",{});var VQe=s(KE);K4e=n(VQe,"STRONG",{});var aUt=s(K4e);evr=r(aUt,"layoutlmv3"),aUt.forEach(t),ovr=r(VQe," \u2014 "),rZ=n(VQe,"A",{href:!0});var nUt=s(rZ);rvr=r(nUt,"LayoutLMv3ForQuestionAnswering"),nUt.forEach(t),tvr=r(VQe," (LayoutLMv3 model)"),VQe.forEach(t),avr=i(X),e4=n(X,"LI",{});var XQe=s(e4);eCe=n(XQe,"STRONG",{});var sUt=s(eCe);nvr=r(sUt,"led"),sUt.forEach(t),svr=r(XQe," \u2014 "),tZ=n(XQe,"A",{href:!0});var lUt=s(tZ);lvr=r(lUt,"LEDForQuestionAnswering"),lUt.forEach(t),ivr=r(XQe," (LED model)"),XQe.forEach(t),dvr=i(X),o4=n(X,"LI",{});var zQe=s(o4);oCe=n(zQe,"STRONG",{});var iUt=s(oCe);cvr=r(iUt,"longformer"),iUt.forEach(t),mvr=r(zQe," \u2014 "),aZ=n(zQe,"A",{href:!0});var dUt=s(aZ);fvr=r(dUt,"LongformerForQuestionAnswering"),dUt.forEach(t),gvr=r(zQe," (Longformer model)"),zQe.forEach(t),hvr=i(X),r4=n(X,"LI",{});var QQe=s(r4);rCe=n(QQe,"STRONG",{});var cUt=s(rCe);uvr=r(cUt,"luke"),cUt.forEach(t),pvr=r(QQe," \u2014 "),nZ=n(QQe,"A",{href:!0});var mUt=s(nZ);_vr=r(mUt,"LukeForQuestionAnswering"),mUt.forEach(t),bvr=r(QQe," (LUKE model)"),QQe.forEach(t),vvr=i(X),t4=n(X,"LI",{});var WQe=s(t4);tCe=n(WQe,"STRONG",{});var fUt=s(tCe);Fvr=r(fUt,"lxmert"),fUt.forEach(t),Tvr=r(WQe," \u2014 "),sZ=n(WQe,"A",{href:!0});var gUt=s(sZ);Mvr=r(gUt,"LxmertForQuestionAnswering"),gUt.forEach(t),Evr=r(WQe," (LXMERT model)"),WQe.forEach(t),Cvr=i(X),a4=n(X,"LI",{});var UQe=s(a4);aCe=n(UQe,"STRONG",{});var hUt=s(aCe);wvr=r(hUt,"markuplm"),hUt.forEach(t),Avr=r(UQe," \u2014 "),lZ=n(UQe,"A",{href:!0});var uUt=s(lZ);Lvr=r(uUt,"MarkupLMForQuestionAnswering"),uUt.forEach(t),yvr=r(UQe," (MarkupLM model)"),UQe.forEach(t),xvr=i(X),n4=n(X,"LI",{});var HQe=s(n4);nCe=n(HQe,"STRONG",{});var pUt=s(nCe);$vr=r(pUt,"mbart"),pUt.forEach(t),kvr=r(HQe," \u2014 "),iZ=n(HQe,"A",{href:!0});var _Ut=s(iZ);Svr=r(_Ut,"MBartForQuestionAnswering"),_Ut.forEach(t),Rvr=r(HQe," (mBART model)"),HQe.forEach(t),Pvr=i(X),s4=n(X,"LI",{});var JQe=s(s4);sCe=n(JQe,"STRONG",{});var bUt=s(sCe);Bvr=r(bUt,"megatron-bert"),bUt.forEach(t),Ivr=r(JQe," \u2014 "),dZ=n(JQe,"A",{href:!0});var vUt=s(dZ);Nvr=r(vUt,"MegatronBertForQuestionAnswering"),vUt.forEach(t),qvr=r(JQe," (Megatron-BERT model)"),JQe.forEach(t),jvr=i(X),l4=n(X,"LI",{});var YQe=s(l4);lCe=n(YQe,"STRONG",{});var FUt=s(lCe);Dvr=r(FUt,"mobilebert"),FUt.forEach(t),Gvr=r(YQe," \u2014 "),cZ=n(YQe,"A",{href:!0});var TUt=s(cZ);Ovr=r(TUt,"MobileBertForQuestionAnswering"),TUt.forEach(t),Vvr=r(YQe," (MobileBERT model)"),YQe.forEach(t),Xvr=i(X),i4=n(X,"LI",{});var ZQe=s(i4);iCe=n(ZQe,"STRONG",{});var MUt=s(iCe);zvr=r(MUt,"mpnet"),MUt.forEach(t),Qvr=r(ZQe," \u2014 "),mZ=n(ZQe,"A",{href:!0});var EUt=s(mZ);Wvr=r(EUt,"MPNetForQuestionAnswering"),EUt.forEach(t),Uvr=r(ZQe," (MPNet model)"),ZQe.forEach(t),Hvr=i(X),d4=n(X,"LI",{});var KQe=s(d4);dCe=n(KQe,"STRONG",{});var CUt=s(dCe);Jvr=r(CUt,"mvp"),CUt.forEach(t),Yvr=r(KQe," \u2014 "),fZ=n(KQe,"A",{href:!0});var wUt=s(fZ);Zvr=r(wUt,"MvpForQuestionAnswering"),wUt.forEach(t),Kvr=r(KQe," (MVP model)"),KQe.forEach(t),eFr=i(X),c4=n(X,"LI",{});var eWe=s(c4);cCe=n(eWe,"STRONG",{});var AUt=s(cCe);oFr=r(AUt,"nezha"),AUt.forEach(t),rFr=r(eWe," \u2014 "),gZ=n(eWe,"A",{href:!0});var LUt=s(gZ);tFr=r(LUt,"NezhaForQuestionAnswering"),LUt.forEach(t),aFr=r(eWe," (Nezha model)"),eWe.forEach(t),nFr=i(X),m4=n(X,"LI",{});var oWe=s(m4);mCe=n(oWe,"STRONG",{});var yUt=s(mCe);sFr=r(yUt,"nystromformer"),yUt.forEach(t),lFr=r(oWe," \u2014 "),hZ=n(oWe,"A",{href:!0});var xUt=s(hZ);iFr=r(xUt,"NystromformerForQuestionAnswering"),xUt.forEach(t),dFr=r(oWe," (Nystr\xF6mformer model)"),oWe.forEach(t),cFr=i(X),f4=n(X,"LI",{});var rWe=s(f4);fCe=n(rWe,"STRONG",{});var $Ut=s(fCe);mFr=r($Ut,"qdqbert"),$Ut.forEach(t),fFr=r(rWe," \u2014 "),uZ=n(rWe,"A",{href:!0});var kUt=s(uZ);gFr=r(kUt,"QDQBertForQuestionAnswering"),kUt.forEach(t),hFr=r(rWe," (QDQBert model)"),rWe.forEach(t),uFr=i(X),g4=n(X,"LI",{});var tWe=s(g4);gCe=n(tWe,"STRONG",{});var SUt=s(gCe);pFr=r(SUt,"reformer"),SUt.forEach(t),_Fr=r(tWe," \u2014 "),pZ=n(tWe,"A",{href:!0});var RUt=s(pZ);bFr=r(RUt,"ReformerForQuestionAnswering"),RUt.forEach(t),vFr=r(tWe," (Reformer model)"),tWe.forEach(t),FFr=i(X),h4=n(X,"LI",{});var aWe=s(h4);hCe=n(aWe,"STRONG",{});var PUt=s(hCe);TFr=r(PUt,"rembert"),PUt.forEach(t),MFr=r(aWe," \u2014 "),_Z=n(aWe,"A",{href:!0});var BUt=s(_Z);EFr=r(BUt,"RemBertForQuestionAnswering"),BUt.forEach(t),CFr=r(aWe," (RemBERT model)"),aWe.forEach(t),wFr=i(X),u4=n(X,"LI",{});var nWe=s(u4);uCe=n(nWe,"STRONG",{});var IUt=s(uCe);AFr=r(IUt,"roberta"),IUt.forEach(t),LFr=r(nWe," \u2014 "),bZ=n(nWe,"A",{href:!0});var NUt=s(bZ);yFr=r(NUt,"RobertaForQuestionAnswering"),NUt.forEach(t),xFr=r(nWe," (RoBERTa model)"),nWe.forEach(t),$Fr=i(X),p4=n(X,"LI",{});var sWe=s(p4);pCe=n(sWe,"STRONG",{});var qUt=s(pCe);kFr=r(qUt,"roformer"),qUt.forEach(t),SFr=r(sWe," \u2014 "),vZ=n(sWe,"A",{href:!0});var jUt=s(vZ);RFr=r(jUt,"RoFormerForQuestionAnswering"),jUt.forEach(t),PFr=r(sWe," (RoFormer model)"),sWe.forEach(t),BFr=i(X),_4=n(X,"LI",{});var lWe=s(_4);_Ce=n(lWe,"STRONG",{});var DUt=s(_Ce);IFr=r(DUt,"splinter"),DUt.forEach(t),NFr=r(lWe," \u2014 "),FZ=n(lWe,"A",{href:!0});var GUt=s(FZ);qFr=r(GUt,"SplinterForQuestionAnswering"),GUt.forEach(t),jFr=r(lWe," (Splinter model)"),lWe.forEach(t),DFr=i(X),b4=n(X,"LI",{});var iWe=s(b4);bCe=n(iWe,"STRONG",{});var OUt=s(bCe);GFr=r(OUt,"squeezebert"),OUt.forEach(t),OFr=r(iWe," \u2014 "),TZ=n(iWe,"A",{href:!0});var VUt=s(TZ);VFr=r(VUt,"SqueezeBertForQuestionAnswering"),VUt.forEach(t),XFr=r(iWe," (SqueezeBERT model)"),iWe.forEach(t),zFr=i(X),v4=n(X,"LI",{});var dWe=s(v4);vCe=n(dWe,"STRONG",{});var XUt=s(vCe);QFr=r(XUt,"xlm"),XUt.forEach(t),WFr=r(dWe," \u2014 "),MZ=n(dWe,"A",{href:!0});var zUt=s(MZ);UFr=r(zUt,"XLMForQuestionAnsweringSimple"),zUt.forEach(t),HFr=r(dWe," (XLM model)"),dWe.forEach(t),JFr=i(X),F4=n(X,"LI",{});var cWe=s(F4);FCe=n(cWe,"STRONG",{});var QUt=s(FCe);YFr=r(QUt,"xlm-roberta"),QUt.forEach(t),ZFr=r(cWe," \u2014 "),EZ=n(cWe,"A",{href:!0});var WUt=s(EZ);KFr=r(WUt,"XLMRobertaForQuestionAnswering"),WUt.forEach(t),eTr=r(cWe," (XLM-RoBERTa model)"),cWe.forEach(t),oTr=i(X),T4=n(X,"LI",{});var mWe=s(T4);TCe=n(mWe,"STRONG",{});var UUt=s(TCe);rTr=r(UUt,"xlm-roberta-xl"),UUt.forEach(t),tTr=r(mWe," \u2014 "),CZ=n(mWe,"A",{href:!0});var HUt=s(CZ);aTr=r(HUt,"XLMRobertaXLForQuestionAnswering"),HUt.forEach(t),nTr=r(mWe," (XLM-RoBERTa-XL model)"),mWe.forEach(t),sTr=i(X),M4=n(X,"LI",{});var fWe=s(M4);MCe=n(fWe,"STRONG",{});var JUt=s(MCe);lTr=r(JUt,"xlnet"),JUt.forEach(t),iTr=r(fWe," \u2014 "),wZ=n(fWe,"A",{href:!0});var YUt=s(wZ);dTr=r(YUt,"XLNetForQuestionAnsweringSimple"),YUt.forEach(t),cTr=r(fWe," (XLNet model)"),fWe.forEach(t),mTr=i(X),E4=n(X,"LI",{});var gWe=s(E4);ECe=n(gWe,"STRONG",{});var ZUt=s(ECe);fTr=r(ZUt,"yoso"),ZUt.forEach(t),gTr=r(gWe," \u2014 "),AZ=n(gWe,"A",{href:!0});var KUt=s(AZ);hTr=r(KUt,"YosoForQuestionAnswering"),KUt.forEach(t),uTr=r(gWe," (YOSO model)"),gWe.forEach(t),X.forEach(t),pTr=i(Sa),C4=n(Sa,"P",{});var hWe=s(C4);_Tr=r(hWe,"The model is set in evaluation mode by default using "),CCe=n(hWe,"CODE",{});var eHt=s(CCe);bTr=r(eHt,"model.eval()"),eHt.forEach(t),vTr=r(hWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wCe=n(hWe,"CODE",{});var oHt=s(wCe);FTr=r(oHt,"model.train()"),oHt.forEach(t),hWe.forEach(t),TTr=i(Sa),T(w4.$$.fragment,Sa),Sa.forEach(t),Dl.forEach(t),Noo=i(m),Kd=n(m,"H2",{class:!0});var Kto=s(Kd);A4=n(Kto,"A",{id:!0,class:!0,href:!0});var rHt=s(A4);ACe=n(rHt,"SPAN",{});var tHt=s(ACe);T(W$.$$.fragment,tHt),tHt.forEach(t),rHt.forEach(t),MTr=i(Kto),LCe=n(Kto,"SPAN",{});var aHt=s(LCe);ETr=r(aHt,"AutoModelForTableQuestionAnswering"),aHt.forEach(t),Kto.forEach(t),qoo=i(m),zo=n(m,"DIV",{class:!0});var Gl=s(zo);T(U$.$$.fragment,Gl),CTr=i(Gl),ec=n(Gl,"P",{});var ade=s(ec);wTr=r(ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LZ=n(ade,"A",{href:!0});var nHt=s(LZ);ATr=r(nHt,"from_pretrained()"),nHt.forEach(t),LTr=r(ade," class method or the "),yZ=n(ade,"A",{href:!0});var sHt=s(yZ);yTr=r(sHt,"from_config()"),sHt.forEach(t),xTr=r(ade,` class
method.`),ade.forEach(t),$Tr=i(Gl),H$=n(Gl,"P",{});var eao=s(H$);kTr=r(eao,"This class cannot be instantiated directly using "),yCe=n(eao,"CODE",{});var lHt=s(yCe);STr=r(lHt,"__init__()"),lHt.forEach(t),RTr=r(eao," (throws an error)."),eao.forEach(t),PTr=i(Gl),xt=n(Gl,"DIV",{class:!0});var N8=s(xt);T(J$.$$.fragment,N8),BTr=i(N8),xCe=n(N8,"P",{});var iHt=s(xCe);ITr=r(iHt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iHt.forEach(t),NTr=i(N8),oc=n(N8,"P",{});var nde=s(oc);qTr=r(nde,`Note:
Loading a model from its configuration file does `),$Ce=n(nde,"STRONG",{});var dHt=s($Ce);jTr=r(dHt,"not"),dHt.forEach(t),DTr=r(nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(nde,"A",{href:!0});var cHt=s(xZ);GTr=r(cHt,"from_pretrained()"),cHt.forEach(t),OTr=r(nde," to load the model weights."),nde.forEach(t),VTr=i(N8),T(L4.$$.fragment,N8),N8.forEach(t),XTr=i(Gl),co=n(Gl,"DIV",{class:!0});var Ra=s(co);T(Y$.$$.fragment,Ra),zTr=i(Ra),kCe=n(Ra,"P",{});var mHt=s(kCe);QTr=r(mHt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mHt.forEach(t),WTr=i(Ra),mn=n(Ra,"P",{});var q8=s(mn);UTr=r(q8,"The model class to instantiate is selected based on the "),SCe=n(q8,"CODE",{});var fHt=s(SCe);HTr=r(fHt,"model_type"),fHt.forEach(t),JTr=r(q8,` property of the config object (either
passed as an argument or loaded from `),RCe=n(q8,"CODE",{});var gHt=s(RCe);YTr=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),ZTr=r(q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(q8,"CODE",{});var hHt=s(PCe);KTr=r(hHt,"pretrained_model_name_or_path"),hHt.forEach(t),eMr=r(q8,":"),q8.forEach(t),oMr=i(Ra),BCe=n(Ra,"UL",{});var uHt=s(BCe);y4=n(uHt,"LI",{});var uWe=s(y4);ICe=n(uWe,"STRONG",{});var pHt=s(ICe);rMr=r(pHt,"tapas"),pHt.forEach(t),tMr=r(uWe," \u2014 "),$Z=n(uWe,"A",{href:!0});var _Ht=s($Z);aMr=r(_Ht,"TapasForQuestionAnswering"),_Ht.forEach(t),nMr=r(uWe," (TAPAS model)"),uWe.forEach(t),uHt.forEach(t),sMr=i(Ra),x4=n(Ra,"P",{});var pWe=s(x4);lMr=r(pWe,"The model is set in evaluation mode by default using "),NCe=n(pWe,"CODE",{});var bHt=s(NCe);iMr=r(bHt,"model.eval()"),bHt.forEach(t),dMr=r(pWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qCe=n(pWe,"CODE",{});var vHt=s(qCe);cMr=r(vHt,"model.train()"),vHt.forEach(t),pWe.forEach(t),mMr=i(Ra),T($4.$$.fragment,Ra),Ra.forEach(t),Gl.forEach(t),joo=i(m),rc=n(m,"H2",{class:!0});var oao=s(rc);k4=n(oao,"A",{id:!0,class:!0,href:!0});var FHt=s(k4);jCe=n(FHt,"SPAN",{});var THt=s(jCe);T(Z$.$$.fragment,THt),THt.forEach(t),FHt.forEach(t),fMr=i(oao),DCe=n(oao,"SPAN",{});var MHt=s(DCe);gMr=r(MHt,"AutoModelForDocumentQuestionAnswering"),MHt.forEach(t),oao.forEach(t),Doo=i(m),Qo=n(m,"DIV",{class:!0});var Ol=s(Qo);T(K$.$$.fragment,Ol),hMr=i(Ol),tc=n(Ol,"P",{});var sde=s(tc);uMr=r(sde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),kZ=n(sde,"A",{href:!0});var EHt=s(kZ);pMr=r(EHt,"from_pretrained()"),EHt.forEach(t),_Mr=r(sde," class method or the "),SZ=n(sde,"A",{href:!0});var CHt=s(SZ);bMr=r(CHt,"from_config()"),CHt.forEach(t),vMr=r(sde,` class
method.`),sde.forEach(t),FMr=i(Ol),ek=n(Ol,"P",{});var rao=s(ek);TMr=r(rao,"This class cannot be instantiated directly using "),GCe=n(rao,"CODE",{});var wHt=s(GCe);MMr=r(wHt,"__init__()"),wHt.forEach(t),EMr=r(rao," (throws an error)."),rao.forEach(t),CMr=i(Ol),$t=n(Ol,"DIV",{class:!0});var j8=s($t);T(ok.$$.fragment,j8),wMr=i(j8),OCe=n(j8,"P",{});var AHt=s(OCe);AMr=r(AHt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),AHt.forEach(t),LMr=i(j8),ac=n(j8,"P",{});var lde=s(ac);yMr=r(lde,`Note:
Loading a model from its configuration file does `),VCe=n(lde,"STRONG",{});var LHt=s(VCe);xMr=r(LHt,"not"),LHt.forEach(t),$Mr=r(lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(lde,"A",{href:!0});var yHt=s(RZ);kMr=r(yHt,"from_pretrained()"),yHt.forEach(t),SMr=r(lde," to load the model weights."),lde.forEach(t),RMr=i(j8),T(S4.$$.fragment,j8),j8.forEach(t),PMr=i(Ol),mo=n(Ol,"DIV",{class:!0});var Pa=s(mo);T(rk.$$.fragment,Pa),BMr=i(Pa),XCe=n(Pa,"P",{});var xHt=s(XCe);IMr=r(xHt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),xHt.forEach(t),NMr=i(Pa),fn=n(Pa,"P",{});var D8=s(fn);qMr=r(D8,"The model class to instantiate is selected based on the "),zCe=n(D8,"CODE",{});var $Ht=s(zCe);jMr=r($Ht,"model_type"),$Ht.forEach(t),DMr=r(D8,` property of the config object (either
passed as an argument or loaded from `),QCe=n(D8,"CODE",{});var kHt=s(QCe);GMr=r(kHt,"pretrained_model_name_or_path"),kHt.forEach(t),OMr=r(D8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(D8,"CODE",{});var SHt=s(WCe);VMr=r(SHt,"pretrained_model_name_or_path"),SHt.forEach(t),XMr=r(D8,":"),D8.forEach(t),zMr=i(Pa),nc=n(Pa,"UL",{});var ide=s(nc);R4=n(ide,"LI",{});var _We=s(R4);UCe=n(_We,"STRONG",{});var RHt=s(UCe);QMr=r(RHt,"layoutlm"),RHt.forEach(t),WMr=r(_We," \u2014 "),PZ=n(_We,"A",{href:!0});var PHt=s(PZ);UMr=r(PHt,"LayoutLMForQuestionAnswering"),PHt.forEach(t),HMr=r(_We," (LayoutLM model)"),_We.forEach(t),JMr=i(ide),P4=n(ide,"LI",{});var bWe=s(P4);HCe=n(bWe,"STRONG",{});var BHt=s(HCe);YMr=r(BHt,"layoutlmv2"),BHt.forEach(t),ZMr=r(bWe," \u2014 "),BZ=n(bWe,"A",{href:!0});var IHt=s(BZ);KMr=r(IHt,"LayoutLMv2ForQuestionAnswering"),IHt.forEach(t),eEr=r(bWe," (LayoutLMv2 model)"),bWe.forEach(t),oEr=i(ide),B4=n(ide,"LI",{});var vWe=s(B4);JCe=n(vWe,"STRONG",{});var NHt=s(JCe);rEr=r(NHt,"layoutlmv3"),NHt.forEach(t),tEr=r(vWe," \u2014 "),IZ=n(vWe,"A",{href:!0});var qHt=s(IZ);aEr=r(qHt,"LayoutLMv3ForQuestionAnswering"),qHt.forEach(t),nEr=r(vWe," (LayoutLMv3 model)"),vWe.forEach(t),ide.forEach(t),sEr=i(Pa),I4=n(Pa,"P",{});var FWe=s(I4);lEr=r(FWe,"The model is set in evaluation mode by default using "),YCe=n(FWe,"CODE",{});var jHt=s(YCe);iEr=r(jHt,"model.eval()"),jHt.forEach(t),dEr=r(FWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZCe=n(FWe,"CODE",{});var DHt=s(ZCe);cEr=r(DHt,"model.train()"),DHt.forEach(t),FWe.forEach(t),mEr=i(Pa),T(N4.$$.fragment,Pa),Pa.forEach(t),Ol.forEach(t),Goo=i(m),sc=n(m,"H2",{class:!0});var tao=s(sc);q4=n(tao,"A",{id:!0,class:!0,href:!0});var GHt=s(q4);KCe=n(GHt,"SPAN",{});var OHt=s(KCe);T(tk.$$.fragment,OHt),OHt.forEach(t),GHt.forEach(t),fEr=i(tao),e3e=n(tao,"SPAN",{});var VHt=s(e3e);gEr=r(VHt,"AutoModelForImageClassification"),VHt.forEach(t),tao.forEach(t),Ooo=i(m),Wo=n(m,"DIV",{class:!0});var Vl=s(Wo);T(ak.$$.fragment,Vl),hEr=i(Vl),lc=n(Vl,"P",{});var dde=s(lc);uEr=r(dde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NZ=n(dde,"A",{href:!0});var XHt=s(NZ);pEr=r(XHt,"from_pretrained()"),XHt.forEach(t),_Er=r(dde," class method or the "),qZ=n(dde,"A",{href:!0});var zHt=s(qZ);bEr=r(zHt,"from_config()"),zHt.forEach(t),vEr=r(dde,` class
method.`),dde.forEach(t),FEr=i(Vl),nk=n(Vl,"P",{});var aao=s(nk);TEr=r(aao,"This class cannot be instantiated directly using "),o3e=n(aao,"CODE",{});var QHt=s(o3e);MEr=r(QHt,"__init__()"),QHt.forEach(t),EEr=r(aao," (throws an error)."),aao.forEach(t),CEr=i(Vl),kt=n(Vl,"DIV",{class:!0});var G8=s(kt);T(sk.$$.fragment,G8),wEr=i(G8),r3e=n(G8,"P",{});var WHt=s(r3e);AEr=r(WHt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WHt.forEach(t),LEr=i(G8),ic=n(G8,"P",{});var cde=s(ic);yEr=r(cde,`Note:
Loading a model from its configuration file does `),t3e=n(cde,"STRONG",{});var UHt=s(t3e);xEr=r(UHt,"not"),UHt.forEach(t),$Er=r(cde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(cde,"A",{href:!0});var HHt=s(jZ);kEr=r(HHt,"from_pretrained()"),HHt.forEach(t),SEr=r(cde," to load the model weights."),cde.forEach(t),REr=i(G8),T(j4.$$.fragment,G8),G8.forEach(t),PEr=i(Vl),fo=n(Vl,"DIV",{class:!0});var Ba=s(fo);T(lk.$$.fragment,Ba),BEr=i(Ba),a3e=n(Ba,"P",{});var JHt=s(a3e);IEr=r(JHt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JHt.forEach(t),NEr=i(Ba),gn=n(Ba,"P",{});var O8=s(gn);qEr=r(O8,"The model class to instantiate is selected based on the "),n3e=n(O8,"CODE",{});var YHt=s(n3e);jEr=r(YHt,"model_type"),YHt.forEach(t),DEr=r(O8,` property of the config object (either
passed as an argument or loaded from `),s3e=n(O8,"CODE",{});var ZHt=s(s3e);GEr=r(ZHt,"pretrained_model_name_or_path"),ZHt.forEach(t),OEr=r(O8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(O8,"CODE",{});var KHt=s(l3e);VEr=r(KHt,"pretrained_model_name_or_path"),KHt.forEach(t),XEr=r(O8,":"),O8.forEach(t),zEr=i(Ba),be=n(Ba,"UL",{});var Fe=s(be);D4=n(Fe,"LI",{});var TWe=s(D4);i3e=n(TWe,"STRONG",{});var eJt=s(i3e);QEr=r(eJt,"beit"),eJt.forEach(t),WEr=r(TWe," \u2014 "),DZ=n(TWe,"A",{href:!0});var oJt=s(DZ);UEr=r(oJt,"BeitForImageClassification"),oJt.forEach(t),HEr=r(TWe," (BEiT model)"),TWe.forEach(t),JEr=i(Fe),G4=n(Fe,"LI",{});var MWe=s(G4);d3e=n(MWe,"STRONG",{});var rJt=s(d3e);YEr=r(rJt,"convnext"),rJt.forEach(t),ZEr=r(MWe," \u2014 "),GZ=n(MWe,"A",{href:!0});var tJt=s(GZ);KEr=r(tJt,"ConvNextForImageClassification"),tJt.forEach(t),e4r=r(MWe," (ConvNeXT model)"),MWe.forEach(t),o4r=i(Fe),O4=n(Fe,"LI",{});var EWe=s(O4);c3e=n(EWe,"STRONG",{});var aJt=s(c3e);r4r=r(aJt,"cvt"),aJt.forEach(t),t4r=r(EWe," \u2014 "),OZ=n(EWe,"A",{href:!0});var nJt=s(OZ);a4r=r(nJt,"CvtForImageClassification"),nJt.forEach(t),n4r=r(EWe," (CvT model)"),EWe.forEach(t),s4r=i(Fe),V4=n(Fe,"LI",{});var CWe=s(V4);m3e=n(CWe,"STRONG",{});var sJt=s(m3e);l4r=r(sJt,"data2vec-vision"),sJt.forEach(t),i4r=r(CWe," \u2014 "),VZ=n(CWe,"A",{href:!0});var lJt=s(VZ);d4r=r(lJt,"Data2VecVisionForImageClassification"),lJt.forEach(t),c4r=r(CWe," (Data2VecVision model)"),CWe.forEach(t),m4r=i(Fe),El=n(Fe,"LI",{});var wI=s(El);f3e=n(wI,"STRONG",{});var iJt=s(f3e);f4r=r(iJt,"deit"),iJt.forEach(t),g4r=r(wI," \u2014 "),XZ=n(wI,"A",{href:!0});var dJt=s(XZ);h4r=r(dJt,"DeiTForImageClassification"),dJt.forEach(t),u4r=r(wI," or "),zZ=n(wI,"A",{href:!0});var cJt=s(zZ);p4r=r(cJt,"DeiTForImageClassificationWithTeacher"),cJt.forEach(t),_4r=r(wI," (DeiT model)"),wI.forEach(t),b4r=i(Fe),X4=n(Fe,"LI",{});var wWe=s(X4);g3e=n(wWe,"STRONG",{});var mJt=s(g3e);v4r=r(mJt,"imagegpt"),mJt.forEach(t),F4r=r(wWe," \u2014 "),QZ=n(wWe,"A",{href:!0});var fJt=s(QZ);T4r=r(fJt,"ImageGPTForImageClassification"),fJt.forEach(t),M4r=r(wWe," (ImageGPT model)"),wWe.forEach(t),E4r=i(Fe),Cl=n(Fe,"LI",{});var AI=s(Cl);h3e=n(AI,"STRONG",{});var gJt=s(h3e);C4r=r(gJt,"levit"),gJt.forEach(t),w4r=r(AI," \u2014 "),WZ=n(AI,"A",{href:!0});var hJt=s(WZ);A4r=r(hJt,"LevitForImageClassification"),hJt.forEach(t),L4r=r(AI," or "),UZ=n(AI,"A",{href:!0});var uJt=s(UZ);y4r=r(uJt,"LevitForImageClassificationWithTeacher"),uJt.forEach(t),x4r=r(AI," (LeViT model)"),AI.forEach(t),$4r=i(Fe),z4=n(Fe,"LI",{});var AWe=s(z4);u3e=n(AWe,"STRONG",{});var pJt=s(u3e);k4r=r(pJt,"mobilevit"),pJt.forEach(t),S4r=r(AWe," \u2014 "),HZ=n(AWe,"A",{href:!0});var _Jt=s(HZ);R4r=r(_Jt,"MobileViTForImageClassification"),_Jt.forEach(t),P4r=r(AWe," (MobileViT model)"),AWe.forEach(t),B4r=i(Fe),St=n(Fe,"LI",{});var Sf=s(St);p3e=n(Sf,"STRONG",{});var bJt=s(p3e);I4r=r(bJt,"perceiver"),bJt.forEach(t),N4r=r(Sf," \u2014 "),JZ=n(Sf,"A",{href:!0});var vJt=s(JZ);q4r=r(vJt,"PerceiverForImageClassificationLearned"),vJt.forEach(t),j4r=r(Sf," or "),YZ=n(Sf,"A",{href:!0});var FJt=s(YZ);D4r=r(FJt,"PerceiverForImageClassificationFourier"),FJt.forEach(t),G4r=r(Sf," or "),ZZ=n(Sf,"A",{href:!0});var TJt=s(ZZ);O4r=r(TJt,"PerceiverForImageClassificationConvProcessing"),TJt.forEach(t),V4r=r(Sf," (Perceiver model)"),Sf.forEach(t),X4r=i(Fe),Q4=n(Fe,"LI",{});var LWe=s(Q4);_3e=n(LWe,"STRONG",{});var MJt=s(_3e);z4r=r(MJt,"poolformer"),MJt.forEach(t),Q4r=r(LWe," \u2014 "),KZ=n(LWe,"A",{href:!0});var EJt=s(KZ);W4r=r(EJt,"PoolFormerForImageClassification"),EJt.forEach(t),U4r=r(LWe," (PoolFormer model)"),LWe.forEach(t),H4r=i(Fe),W4=n(Fe,"LI",{});var yWe=s(W4);b3e=n(yWe,"STRONG",{});var CJt=s(b3e);J4r=r(CJt,"regnet"),CJt.forEach(t),Y4r=r(yWe," \u2014 "),eK=n(yWe,"A",{href:!0});var wJt=s(eK);Z4r=r(wJt,"RegNetForImageClassification"),wJt.forEach(t),K4r=r(yWe," (RegNet model)"),yWe.forEach(t),eCr=i(Fe),U4=n(Fe,"LI",{});var xWe=s(U4);v3e=n(xWe,"STRONG",{});var AJt=s(v3e);oCr=r(AJt,"resnet"),AJt.forEach(t),rCr=r(xWe," \u2014 "),oK=n(xWe,"A",{href:!0});var LJt=s(oK);tCr=r(LJt,"ResNetForImageClassification"),LJt.forEach(t),aCr=r(xWe," (ResNet model)"),xWe.forEach(t),nCr=i(Fe),H4=n(Fe,"LI",{});var $We=s(H4);F3e=n($We,"STRONG",{});var yJt=s(F3e);sCr=r(yJt,"segformer"),yJt.forEach(t),lCr=r($We," \u2014 "),rK=n($We,"A",{href:!0});var xJt=s(rK);iCr=r(xJt,"SegformerForImageClassification"),xJt.forEach(t),dCr=r($We," (SegFormer model)"),$We.forEach(t),cCr=i(Fe),J4=n(Fe,"LI",{});var kWe=s(J4);T3e=n(kWe,"STRONG",{});var $Jt=s(T3e);mCr=r($Jt,"swin"),$Jt.forEach(t),fCr=r(kWe," \u2014 "),tK=n(kWe,"A",{href:!0});var kJt=s(tK);gCr=r(kJt,"SwinForImageClassification"),kJt.forEach(t),hCr=r(kWe," (Swin Transformer model)"),kWe.forEach(t),uCr=i(Fe),Y4=n(Fe,"LI",{});var SWe=s(Y4);M3e=n(SWe,"STRONG",{});var SJt=s(M3e);pCr=r(SJt,"swinv2"),SJt.forEach(t),_Cr=r(SWe," \u2014 "),aK=n(SWe,"A",{href:!0});var RJt=s(aK);bCr=r(RJt,"Swinv2ForImageClassification"),RJt.forEach(t),vCr=r(SWe," (Swin Transformer V2 model)"),SWe.forEach(t),FCr=i(Fe),Z4=n(Fe,"LI",{});var RWe=s(Z4);E3e=n(RWe,"STRONG",{});var PJt=s(E3e);TCr=r(PJt,"van"),PJt.forEach(t),MCr=r(RWe," \u2014 "),nK=n(RWe,"A",{href:!0});var BJt=s(nK);ECr=r(BJt,"VanForImageClassification"),BJt.forEach(t),CCr=r(RWe," (VAN model)"),RWe.forEach(t),wCr=i(Fe),K4=n(Fe,"LI",{});var PWe=s(K4);C3e=n(PWe,"STRONG",{});var IJt=s(C3e);ACr=r(IJt,"vit"),IJt.forEach(t),LCr=r(PWe," \u2014 "),sK=n(PWe,"A",{href:!0});var NJt=s(sK);yCr=r(NJt,"ViTForImageClassification"),NJt.forEach(t),xCr=r(PWe," (ViT model)"),PWe.forEach(t),$Cr=i(Fe),eC=n(Fe,"LI",{});var BWe=s(eC);w3e=n(BWe,"STRONG",{});var qJt=s(w3e);kCr=r(qJt,"vit_msn"),qJt.forEach(t),SCr=r(BWe," \u2014 "),lK=n(BWe,"A",{href:!0});var jJt=s(lK);RCr=r(jJt,"ViTMSNForImageClassification"),jJt.forEach(t),PCr=r(BWe," (ViTMSN model)"),BWe.forEach(t),Fe.forEach(t),BCr=i(Ba),oC=n(Ba,"P",{});var IWe=s(oC);ICr=r(IWe,"The model is set in evaluation mode by default using "),A3e=n(IWe,"CODE",{});var DJt=s(A3e);NCr=r(DJt,"model.eval()"),DJt.forEach(t),qCr=r(IWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L3e=n(IWe,"CODE",{});var GJt=s(L3e);jCr=r(GJt,"model.train()"),GJt.forEach(t),IWe.forEach(t),DCr=i(Ba),T(rC.$$.fragment,Ba),Ba.forEach(t),Vl.forEach(t),Voo=i(m),dc=n(m,"H2",{class:!0});var nao=s(dc);tC=n(nao,"A",{id:!0,class:!0,href:!0});var OJt=s(tC);y3e=n(OJt,"SPAN",{});var VJt=s(y3e);T(ik.$$.fragment,VJt),VJt.forEach(t),OJt.forEach(t),GCr=i(nao),x3e=n(nao,"SPAN",{});var XJt=s(x3e);OCr=r(XJt,"AutoModelForVideoClassification"),XJt.forEach(t),nao.forEach(t),Xoo=i(m),Uo=n(m,"DIV",{class:!0});var Xl=s(Uo);T(dk.$$.fragment,Xl),VCr=i(Xl),cc=n(Xl,"P",{});var mde=s(cc);XCr=r(mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),iK=n(mde,"A",{href:!0});var zJt=s(iK);zCr=r(zJt,"from_pretrained()"),zJt.forEach(t),QCr=r(mde," class method or the "),dK=n(mde,"A",{href:!0});var QJt=s(dK);WCr=r(QJt,"from_config()"),QJt.forEach(t),UCr=r(mde,` class
method.`),mde.forEach(t),HCr=i(Xl),ck=n(Xl,"P",{});var sao=s(ck);JCr=r(sao,"This class cannot be instantiated directly using "),$3e=n(sao,"CODE",{});var WJt=s($3e);YCr=r(WJt,"__init__()"),WJt.forEach(t),ZCr=r(sao," (throws an error)."),sao.forEach(t),KCr=i(Xl),Rt=n(Xl,"DIV",{class:!0});var V8=s(Rt);T(mk.$$.fragment,V8),e3r=i(V8),k3e=n(V8,"P",{});var UJt=s(k3e);o3r=r(UJt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),UJt.forEach(t),r3r=i(V8),mc=n(V8,"P",{});var fde=s(mc);t3r=r(fde,`Note:
Loading a model from its configuration file does `),S3e=n(fde,"STRONG",{});var HJt=s(S3e);a3r=r(HJt,"not"),HJt.forEach(t),n3r=r(fde,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(fde,"A",{href:!0});var JJt=s(cK);s3r=r(JJt,"from_pretrained()"),JJt.forEach(t),l3r=r(fde," to load the model weights."),fde.forEach(t),i3r=i(V8),T(aC.$$.fragment,V8),V8.forEach(t),d3r=i(Xl),go=n(Xl,"DIV",{class:!0});var Ia=s(go);T(fk.$$.fragment,Ia),c3r=i(Ia),R3e=n(Ia,"P",{});var YJt=s(R3e);m3r=r(YJt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),YJt.forEach(t),f3r=i(Ia),hn=n(Ia,"P",{});var X8=s(hn);g3r=r(X8,"The model class to instantiate is selected based on the "),P3e=n(X8,"CODE",{});var ZJt=s(P3e);h3r=r(ZJt,"model_type"),ZJt.forEach(t),u3r=r(X8,` property of the config object (either
passed as an argument or loaded from `),B3e=n(X8,"CODE",{});var KJt=s(B3e);p3r=r(KJt,"pretrained_model_name_or_path"),KJt.forEach(t),_3r=r(X8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=n(X8,"CODE",{});var eYt=s(I3e);b3r=r(eYt,"pretrained_model_name_or_path"),eYt.forEach(t),v3r=r(X8,":"),X8.forEach(t),F3r=i(Ia),N3e=n(Ia,"UL",{});var oYt=s(N3e);nC=n(oYt,"LI",{});var NWe=s(nC);q3e=n(NWe,"STRONG",{});var rYt=s(q3e);T3r=r(rYt,"videomae"),rYt.forEach(t),M3r=r(NWe," \u2014 "),mK=n(NWe,"A",{href:!0});var tYt=s(mK);E3r=r(tYt,"VideoMAEForVideoClassification"),tYt.forEach(t),C3r=r(NWe," (VideoMAE model)"),NWe.forEach(t),oYt.forEach(t),w3r=i(Ia),sC=n(Ia,"P",{});var qWe=s(sC);A3r=r(qWe,"The model is set in evaluation mode by default using "),j3e=n(qWe,"CODE",{});var aYt=s(j3e);L3r=r(aYt,"model.eval()"),aYt.forEach(t),y3r=r(qWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D3e=n(qWe,"CODE",{});var nYt=s(D3e);x3r=r(nYt,"model.train()"),nYt.forEach(t),qWe.forEach(t),$3r=i(Ia),T(lC.$$.fragment,Ia),Ia.forEach(t),Xl.forEach(t),zoo=i(m),fc=n(m,"H2",{class:!0});var lao=s(fc);iC=n(lao,"A",{id:!0,class:!0,href:!0});var sYt=s(iC);G3e=n(sYt,"SPAN",{});var lYt=s(G3e);T(gk.$$.fragment,lYt),lYt.forEach(t),sYt.forEach(t),k3r=i(lao),O3e=n(lao,"SPAN",{});var iYt=s(O3e);S3r=r(iYt,"AutoModelForVision2Seq"),iYt.forEach(t),lao.forEach(t),Qoo=i(m),Ho=n(m,"DIV",{class:!0});var zl=s(Ho);T(hk.$$.fragment,zl),R3r=i(zl),gc=n(zl,"P",{});var gde=s(gc);P3r=r(gde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fK=n(gde,"A",{href:!0});var dYt=s(fK);B3r=r(dYt,"from_pretrained()"),dYt.forEach(t),I3r=r(gde," class method or the "),gK=n(gde,"A",{href:!0});var cYt=s(gK);N3r=r(cYt,"from_config()"),cYt.forEach(t),q3r=r(gde,` class
method.`),gde.forEach(t),j3r=i(zl),uk=n(zl,"P",{});var iao=s(uk);D3r=r(iao,"This class cannot be instantiated directly using "),V3e=n(iao,"CODE",{});var mYt=s(V3e);G3r=r(mYt,"__init__()"),mYt.forEach(t),O3r=r(iao," (throws an error)."),iao.forEach(t),V3r=i(zl),Pt=n(zl,"DIV",{class:!0});var z8=s(Pt);T(pk.$$.fragment,z8),X3r=i(z8),X3e=n(z8,"P",{});var fYt=s(X3e);z3r=r(fYt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fYt.forEach(t),Q3r=i(z8),hc=n(z8,"P",{});var hde=s(hc);W3r=r(hde,`Note:
Loading a model from its configuration file does `),z3e=n(hde,"STRONG",{});var gYt=s(z3e);U3r=r(gYt,"not"),gYt.forEach(t),H3r=r(hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(hde,"A",{href:!0});var hYt=s(hK);J3r=r(hYt,"from_pretrained()"),hYt.forEach(t),Y3r=r(hde," to load the model weights."),hde.forEach(t),Z3r=i(z8),T(dC.$$.fragment,z8),z8.forEach(t),K3r=i(zl),ho=n(zl,"DIV",{class:!0});var Na=s(ho);T(_k.$$.fragment,Na),e5r=i(Na),Q3e=n(Na,"P",{});var uYt=s(Q3e);o5r=r(uYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uYt.forEach(t),r5r=i(Na),un=n(Na,"P",{});var Q8=s(un);t5r=r(Q8,"The model class to instantiate is selected based on the "),W3e=n(Q8,"CODE",{});var pYt=s(W3e);a5r=r(pYt,"model_type"),pYt.forEach(t),n5r=r(Q8,` property of the config object (either
passed as an argument or loaded from `),U3e=n(Q8,"CODE",{});var _Yt=s(U3e);s5r=r(_Yt,"pretrained_model_name_or_path"),_Yt.forEach(t),l5r=r(Q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n(Q8,"CODE",{});var bYt=s(H3e);i5r=r(bYt,"pretrained_model_name_or_path"),bYt.forEach(t),d5r=r(Q8,":"),Q8.forEach(t),c5r=i(Na),J3e=n(Na,"UL",{});var vYt=s(J3e);cC=n(vYt,"LI",{});var jWe=s(cC);Y3e=n(jWe,"STRONG",{});var FYt=s(Y3e);m5r=r(FYt,"vision-encoder-decoder"),FYt.forEach(t),f5r=r(jWe," \u2014 "),uK=n(jWe,"A",{href:!0});var TYt=s(uK);g5r=r(TYt,"VisionEncoderDecoderModel"),TYt.forEach(t),h5r=r(jWe," (Vision Encoder decoder model)"),jWe.forEach(t),vYt.forEach(t),u5r=i(Na),mC=n(Na,"P",{});var DWe=s(mC);p5r=r(DWe,"The model is set in evaluation mode by default using "),Z3e=n(DWe,"CODE",{});var MYt=s(Z3e);_5r=r(MYt,"model.eval()"),MYt.forEach(t),b5r=r(DWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K3e=n(DWe,"CODE",{});var EYt=s(K3e);v5r=r(EYt,"model.train()"),EYt.forEach(t),DWe.forEach(t),F5r=i(Na),T(fC.$$.fragment,Na),Na.forEach(t),zl.forEach(t),Woo=i(m),uc=n(m,"H2",{class:!0});var dao=s(uc);gC=n(dao,"A",{id:!0,class:!0,href:!0});var CYt=s(gC);e5e=n(CYt,"SPAN",{});var wYt=s(e5e);T(bk.$$.fragment,wYt),wYt.forEach(t),CYt.forEach(t),T5r=i(dao),o5e=n(dao,"SPAN",{});var AYt=s(o5e);M5r=r(AYt,"AutoModelForVisualQuestionAnswering"),AYt.forEach(t),dao.forEach(t),Uoo=i(m),Jo=n(m,"DIV",{class:!0});var Ql=s(Jo);T(vk.$$.fragment,Ql),E5r=i(Ql),pc=n(Ql,"P",{});var ude=s(pc);C5r=r(ude,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),pK=n(ude,"A",{href:!0});var LYt=s(pK);w5r=r(LYt,"from_pretrained()"),LYt.forEach(t),A5r=r(ude," class method or the "),_K=n(ude,"A",{href:!0});var yYt=s(_K);L5r=r(yYt,"from_config()"),yYt.forEach(t),y5r=r(ude,` class
method.`),ude.forEach(t),x5r=i(Ql),Fk=n(Ql,"P",{});var cao=s(Fk);$5r=r(cao,"This class cannot be instantiated directly using "),r5e=n(cao,"CODE",{});var xYt=s(r5e);k5r=r(xYt,"__init__()"),xYt.forEach(t),S5r=r(cao," (throws an error)."),cao.forEach(t),R5r=i(Ql),Bt=n(Ql,"DIV",{class:!0});var W8=s(Bt);T(Tk.$$.fragment,W8),P5r=i(W8),t5e=n(W8,"P",{});var $Yt=s(t5e);B5r=r($Yt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),$Yt.forEach(t),I5r=i(W8),_c=n(W8,"P",{});var pde=s(_c);N5r=r(pde,`Note:
Loading a model from its configuration file does `),a5e=n(pde,"STRONG",{});var kYt=s(a5e);q5r=r(kYt,"not"),kYt.forEach(t),j5r=r(pde,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(pde,"A",{href:!0});var SYt=s(bK);D5r=r(SYt,"from_pretrained()"),SYt.forEach(t),G5r=r(pde," to load the model weights."),pde.forEach(t),O5r=i(W8),T(hC.$$.fragment,W8),W8.forEach(t),V5r=i(Ql),uo=n(Ql,"DIV",{class:!0});var qa=s(uo);T(Mk.$$.fragment,qa),X5r=i(qa),n5e=n(qa,"P",{});var RYt=s(n5e);z5r=r(RYt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),RYt.forEach(t),Q5r=i(qa),pn=n(qa,"P",{});var U8=s(pn);W5r=r(U8,"The model class to instantiate is selected based on the "),s5e=n(U8,"CODE",{});var PYt=s(s5e);U5r=r(PYt,"model_type"),PYt.forEach(t),H5r=r(U8,` property of the config object (either
passed as an argument or loaded from `),l5e=n(U8,"CODE",{});var BYt=s(l5e);J5r=r(BYt,"pretrained_model_name_or_path"),BYt.forEach(t),Y5r=r(U8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(U8,"CODE",{});var IYt=s(i5e);Z5r=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),K5r=r(U8,":"),U8.forEach(t),e0r=i(qa),d5e=n(qa,"UL",{});var NYt=s(d5e);uC=n(NYt,"LI",{});var GWe=s(uC);c5e=n(GWe,"STRONG",{});var qYt=s(c5e);o0r=r(qYt,"vilt"),qYt.forEach(t),r0r=r(GWe," \u2014 "),vK=n(GWe,"A",{href:!0});var jYt=s(vK);t0r=r(jYt,"ViltForQuestionAnswering"),jYt.forEach(t),a0r=r(GWe," (ViLT model)"),GWe.forEach(t),NYt.forEach(t),n0r=i(qa),pC=n(qa,"P",{});var OWe=s(pC);s0r=r(OWe,"The model is set in evaluation mode by default using "),m5e=n(OWe,"CODE",{});var DYt=s(m5e);l0r=r(DYt,"model.eval()"),DYt.forEach(t),i0r=r(OWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f5e=n(OWe,"CODE",{});var GYt=s(f5e);d0r=r(GYt,"model.train()"),GYt.forEach(t),OWe.forEach(t),c0r=i(qa),T(_C.$$.fragment,qa),qa.forEach(t),Ql.forEach(t),Hoo=i(m),bc=n(m,"H2",{class:!0});var mao=s(bc);bC=n(mao,"A",{id:!0,class:!0,href:!0});var OYt=s(bC);g5e=n(OYt,"SPAN",{});var VYt=s(g5e);T(Ek.$$.fragment,VYt),VYt.forEach(t),OYt.forEach(t),m0r=i(mao),h5e=n(mao,"SPAN",{});var XYt=s(h5e);f0r=r(XYt,"AutoModelForAudioClassification"),XYt.forEach(t),mao.forEach(t),Joo=i(m),Yo=n(m,"DIV",{class:!0});var Wl=s(Yo);T(Ck.$$.fragment,Wl),g0r=i(Wl),vc=n(Wl,"P",{});var _de=s(vc);h0r=r(_de,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FK=n(_de,"A",{href:!0});var zYt=s(FK);u0r=r(zYt,"from_pretrained()"),zYt.forEach(t),p0r=r(_de," class method or the "),TK=n(_de,"A",{href:!0});var QYt=s(TK);_0r=r(QYt,"from_config()"),QYt.forEach(t),b0r=r(_de,` class
method.`),_de.forEach(t),v0r=i(Wl),wk=n(Wl,"P",{});var fao=s(wk);F0r=r(fao,"This class cannot be instantiated directly using "),u5e=n(fao,"CODE",{});var WYt=s(u5e);T0r=r(WYt,"__init__()"),WYt.forEach(t),M0r=r(fao," (throws an error)."),fao.forEach(t),E0r=i(Wl),It=n(Wl,"DIV",{class:!0});var H8=s(It);T(Ak.$$.fragment,H8),C0r=i(H8),p5e=n(H8,"P",{});var UYt=s(p5e);w0r=r(UYt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),UYt.forEach(t),A0r=i(H8),Fc=n(H8,"P",{});var bde=s(Fc);L0r=r(bde,`Note:
Loading a model from its configuration file does `),_5e=n(bde,"STRONG",{});var HYt=s(_5e);y0r=r(HYt,"not"),HYt.forEach(t),x0r=r(bde,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(bde,"A",{href:!0});var JYt=s(MK);$0r=r(JYt,"from_pretrained()"),JYt.forEach(t),k0r=r(bde," to load the model weights."),bde.forEach(t),S0r=i(H8),T(vC.$$.fragment,H8),H8.forEach(t),R0r=i(Wl),po=n(Wl,"DIV",{class:!0});var ja=s(po);T(Lk.$$.fragment,ja),P0r=i(ja),b5e=n(ja,"P",{});var YYt=s(b5e);B0r=r(YYt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),YYt.forEach(t),I0r=i(ja),_n=n(ja,"P",{});var J8=s(_n);N0r=r(J8,"The model class to instantiate is selected based on the "),v5e=n(J8,"CODE",{});var ZYt=s(v5e);q0r=r(ZYt,"model_type"),ZYt.forEach(t),j0r=r(J8,` property of the config object (either
passed as an argument or loaded from `),F5e=n(J8,"CODE",{});var KYt=s(F5e);D0r=r(KYt,"pretrained_model_name_or_path"),KYt.forEach(t),G0r=r(J8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T5e=n(J8,"CODE",{});var eZt=s(T5e);O0r=r(eZt,"pretrained_model_name_or_path"),eZt.forEach(t),V0r=r(J8,":"),J8.forEach(t),X0r=i(ja),Pe=n(ja,"UL",{});var Qe=s(Pe);FC=n(Qe,"LI",{});var VWe=s(FC);M5e=n(VWe,"STRONG",{});var oZt=s(M5e);z0r=r(oZt,"data2vec-audio"),oZt.forEach(t),Q0r=r(VWe," \u2014 "),EK=n(VWe,"A",{href:!0});var rZt=s(EK);W0r=r(rZt,"Data2VecAudioForSequenceClassification"),rZt.forEach(t),U0r=r(VWe," (Data2VecAudio model)"),VWe.forEach(t),H0r=i(Qe),TC=n(Qe,"LI",{});var XWe=s(TC);E5e=n(XWe,"STRONG",{});var tZt=s(E5e);J0r=r(tZt,"hubert"),tZt.forEach(t),Y0r=r(XWe," \u2014 "),CK=n(XWe,"A",{href:!0});var aZt=s(CK);Z0r=r(aZt,"HubertForSequenceClassification"),aZt.forEach(t),K0r=r(XWe," (Hubert model)"),XWe.forEach(t),ewr=i(Qe),MC=n(Qe,"LI",{});var zWe=s(MC);C5e=n(zWe,"STRONG",{});var nZt=s(C5e);owr=r(nZt,"sew"),nZt.forEach(t),rwr=r(zWe," \u2014 "),wK=n(zWe,"A",{href:!0});var sZt=s(wK);twr=r(sZt,"SEWForSequenceClassification"),sZt.forEach(t),awr=r(zWe," (SEW model)"),zWe.forEach(t),nwr=i(Qe),EC=n(Qe,"LI",{});var QWe=s(EC);w5e=n(QWe,"STRONG",{});var lZt=s(w5e);swr=r(lZt,"sew-d"),lZt.forEach(t),lwr=r(QWe," \u2014 "),AK=n(QWe,"A",{href:!0});var iZt=s(AK);iwr=r(iZt,"SEWDForSequenceClassification"),iZt.forEach(t),dwr=r(QWe," (SEW-D model)"),QWe.forEach(t),cwr=i(Qe),CC=n(Qe,"LI",{});var WWe=s(CC);A5e=n(WWe,"STRONG",{});var dZt=s(A5e);mwr=r(dZt,"unispeech"),dZt.forEach(t),fwr=r(WWe," \u2014 "),LK=n(WWe,"A",{href:!0});var cZt=s(LK);gwr=r(cZt,"UniSpeechForSequenceClassification"),cZt.forEach(t),hwr=r(WWe," (UniSpeech model)"),WWe.forEach(t),uwr=i(Qe),wC=n(Qe,"LI",{});var UWe=s(wC);L5e=n(UWe,"STRONG",{});var mZt=s(L5e);pwr=r(mZt,"unispeech-sat"),mZt.forEach(t),_wr=r(UWe," \u2014 "),yK=n(UWe,"A",{href:!0});var fZt=s(yK);bwr=r(fZt,"UniSpeechSatForSequenceClassification"),fZt.forEach(t),vwr=r(UWe," (UniSpeechSat model)"),UWe.forEach(t),Fwr=i(Qe),AC=n(Qe,"LI",{});var HWe=s(AC);y5e=n(HWe,"STRONG",{});var gZt=s(y5e);Twr=r(gZt,"wav2vec2"),gZt.forEach(t),Mwr=r(HWe," \u2014 "),xK=n(HWe,"A",{href:!0});var hZt=s(xK);Ewr=r(hZt,"Wav2Vec2ForSequenceClassification"),hZt.forEach(t),Cwr=r(HWe," (Wav2Vec2 model)"),HWe.forEach(t),wwr=i(Qe),LC=n(Qe,"LI",{});var JWe=s(LC);x5e=n(JWe,"STRONG",{});var uZt=s(x5e);Awr=r(uZt,"wav2vec2-conformer"),uZt.forEach(t),Lwr=r(JWe," \u2014 "),$K=n(JWe,"A",{href:!0});var pZt=s($K);ywr=r(pZt,"Wav2Vec2ConformerForSequenceClassification"),pZt.forEach(t),xwr=r(JWe," (Wav2Vec2-Conformer model)"),JWe.forEach(t),$wr=i(Qe),yC=n(Qe,"LI",{});var YWe=s(yC);$5e=n(YWe,"STRONG",{});var _Zt=s($5e);kwr=r(_Zt,"wavlm"),_Zt.forEach(t),Swr=r(YWe," \u2014 "),kK=n(YWe,"A",{href:!0});var bZt=s(kK);Rwr=r(bZt,"WavLMForSequenceClassification"),bZt.forEach(t),Pwr=r(YWe," (WavLM model)"),YWe.forEach(t),Qe.forEach(t),Bwr=i(ja),xC=n(ja,"P",{});var ZWe=s(xC);Iwr=r(ZWe,"The model is set in evaluation mode by default using "),k5e=n(ZWe,"CODE",{});var vZt=s(k5e);Nwr=r(vZt,"model.eval()"),vZt.forEach(t),qwr=r(ZWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S5e=n(ZWe,"CODE",{});var FZt=s(S5e);jwr=r(FZt,"model.train()"),FZt.forEach(t),ZWe.forEach(t),Dwr=i(ja),T($C.$$.fragment,ja),ja.forEach(t),Wl.forEach(t),Yoo=i(m),Tc=n(m,"H2",{class:!0});var gao=s(Tc);kC=n(gao,"A",{id:!0,class:!0,href:!0});var TZt=s(kC);R5e=n(TZt,"SPAN",{});var MZt=s(R5e);T(yk.$$.fragment,MZt),MZt.forEach(t),TZt.forEach(t),Gwr=i(gao),P5e=n(gao,"SPAN",{});var EZt=s(P5e);Owr=r(EZt,"AutoModelForAudioFrameClassification"),EZt.forEach(t),gao.forEach(t),Zoo=i(m),Zo=n(m,"DIV",{class:!0});var Ul=s(Zo);T(xk.$$.fragment,Ul),Vwr=i(Ul),Mc=n(Ul,"P",{});var vde=s(Mc);Xwr=r(vde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SK=n(vde,"A",{href:!0});var CZt=s(SK);zwr=r(CZt,"from_pretrained()"),CZt.forEach(t),Qwr=r(vde," class method or the "),RK=n(vde,"A",{href:!0});var wZt=s(RK);Wwr=r(wZt,"from_config()"),wZt.forEach(t),Uwr=r(vde,` class
method.`),vde.forEach(t),Hwr=i(Ul),$k=n(Ul,"P",{});var hao=s($k);Jwr=r(hao,"This class cannot be instantiated directly using "),B5e=n(hao,"CODE",{});var AZt=s(B5e);Ywr=r(AZt,"__init__()"),AZt.forEach(t),Zwr=r(hao," (throws an error)."),hao.forEach(t),Kwr=i(Ul),Nt=n(Ul,"DIV",{class:!0});var Y8=s(Nt);T(kk.$$.fragment,Y8),eAr=i(Y8),I5e=n(Y8,"P",{});var LZt=s(I5e);oAr=r(LZt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),LZt.forEach(t),rAr=i(Y8),Ec=n(Y8,"P",{});var Fde=s(Ec);tAr=r(Fde,`Note:
Loading a model from its configuration file does `),N5e=n(Fde,"STRONG",{});var yZt=s(N5e);aAr=r(yZt,"not"),yZt.forEach(t),nAr=r(Fde,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(Fde,"A",{href:!0});var xZt=s(PK);sAr=r(xZt,"from_pretrained()"),xZt.forEach(t),lAr=r(Fde," to load the model weights."),Fde.forEach(t),iAr=i(Y8),T(SC.$$.fragment,Y8),Y8.forEach(t),dAr=i(Ul),_o=n(Ul,"DIV",{class:!0});var Da=s(_o);T(Sk.$$.fragment,Da),cAr=i(Da),q5e=n(Da,"P",{});var $Zt=s(q5e);mAr=r($Zt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$Zt.forEach(t),fAr=i(Da),bn=n(Da,"P",{});var Z8=s(bn);gAr=r(Z8,"The model class to instantiate is selected based on the "),j5e=n(Z8,"CODE",{});var kZt=s(j5e);hAr=r(kZt,"model_type"),kZt.forEach(t),uAr=r(Z8,` property of the config object (either
passed as an argument or loaded from `),D5e=n(Z8,"CODE",{});var SZt=s(D5e);pAr=r(SZt,"pretrained_model_name_or_path"),SZt.forEach(t),_Ar=r(Z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=n(Z8,"CODE",{});var RZt=s(G5e);bAr=r(RZt,"pretrained_model_name_or_path"),RZt.forEach(t),vAr=r(Z8,":"),Z8.forEach(t),FAr=i(Da),gt=n(Da,"UL",{});var Hl=s(gt);RC=n(Hl,"LI",{});var KWe=s(RC);O5e=n(KWe,"STRONG",{});var PZt=s(O5e);TAr=r(PZt,"data2vec-audio"),PZt.forEach(t),MAr=r(KWe," \u2014 "),BK=n(KWe,"A",{href:!0});var BZt=s(BK);EAr=r(BZt,"Data2VecAudioForAudioFrameClassification"),BZt.forEach(t),CAr=r(KWe," (Data2VecAudio model)"),KWe.forEach(t),wAr=i(Hl),PC=n(Hl,"LI",{});var eUe=s(PC);V5e=n(eUe,"STRONG",{});var IZt=s(V5e);AAr=r(IZt,"unispeech-sat"),IZt.forEach(t),LAr=r(eUe," \u2014 "),IK=n(eUe,"A",{href:!0});var NZt=s(IK);yAr=r(NZt,"UniSpeechSatForAudioFrameClassification"),NZt.forEach(t),xAr=r(eUe," (UniSpeechSat model)"),eUe.forEach(t),$Ar=i(Hl),BC=n(Hl,"LI",{});var oUe=s(BC);X5e=n(oUe,"STRONG",{});var qZt=s(X5e);kAr=r(qZt,"wav2vec2"),qZt.forEach(t),SAr=r(oUe," \u2014 "),NK=n(oUe,"A",{href:!0});var jZt=s(NK);RAr=r(jZt,"Wav2Vec2ForAudioFrameClassification"),jZt.forEach(t),PAr=r(oUe," (Wav2Vec2 model)"),oUe.forEach(t),BAr=i(Hl),IC=n(Hl,"LI",{});var rUe=s(IC);z5e=n(rUe,"STRONG",{});var DZt=s(z5e);IAr=r(DZt,"wav2vec2-conformer"),DZt.forEach(t),NAr=r(rUe," \u2014 "),qK=n(rUe,"A",{href:!0});var GZt=s(qK);qAr=r(GZt,"Wav2Vec2ConformerForAudioFrameClassification"),GZt.forEach(t),jAr=r(rUe," (Wav2Vec2-Conformer model)"),rUe.forEach(t),DAr=i(Hl),NC=n(Hl,"LI",{});var tUe=s(NC);Q5e=n(tUe,"STRONG",{});var OZt=s(Q5e);GAr=r(OZt,"wavlm"),OZt.forEach(t),OAr=r(tUe," \u2014 "),jK=n(tUe,"A",{href:!0});var VZt=s(jK);VAr=r(VZt,"WavLMForAudioFrameClassification"),VZt.forEach(t),XAr=r(tUe," (WavLM model)"),tUe.forEach(t),Hl.forEach(t),zAr=i(Da),qC=n(Da,"P",{});var aUe=s(qC);QAr=r(aUe,"The model is set in evaluation mode by default using "),W5e=n(aUe,"CODE",{});var XZt=s(W5e);WAr=r(XZt,"model.eval()"),XZt.forEach(t),UAr=r(aUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U5e=n(aUe,"CODE",{});var zZt=s(U5e);HAr=r(zZt,"model.train()"),zZt.forEach(t),aUe.forEach(t),JAr=i(Da),T(jC.$$.fragment,Da),Da.forEach(t),Ul.forEach(t),Koo=i(m),Cc=n(m,"H2",{class:!0});var uao=s(Cc);DC=n(uao,"A",{id:!0,class:!0,href:!0});var QZt=s(DC);H5e=n(QZt,"SPAN",{});var WZt=s(H5e);T(Rk.$$.fragment,WZt),WZt.forEach(t),QZt.forEach(t),YAr=i(uao),J5e=n(uao,"SPAN",{});var UZt=s(J5e);ZAr=r(UZt,"AutoModelForCTC"),UZt.forEach(t),uao.forEach(t),ero=i(m),Ko=n(m,"DIV",{class:!0});var Jl=s(Ko);T(Pk.$$.fragment,Jl),KAr=i(Jl),wc=n(Jl,"P",{});var Tde=s(wc);e6r=r(Tde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DK=n(Tde,"A",{href:!0});var HZt=s(DK);o6r=r(HZt,"from_pretrained()"),HZt.forEach(t),r6r=r(Tde," class method or the "),GK=n(Tde,"A",{href:!0});var JZt=s(GK);t6r=r(JZt,"from_config()"),JZt.forEach(t),a6r=r(Tde,` class
method.`),Tde.forEach(t),n6r=i(Jl),Bk=n(Jl,"P",{});var pao=s(Bk);s6r=r(pao,"This class cannot be instantiated directly using "),Y5e=n(pao,"CODE",{});var YZt=s(Y5e);l6r=r(YZt,"__init__()"),YZt.forEach(t),i6r=r(pao," (throws an error)."),pao.forEach(t),d6r=i(Jl),qt=n(Jl,"DIV",{class:!0});var K8=s(qt);T(Ik.$$.fragment,K8),c6r=i(K8),Z5e=n(K8,"P",{});var ZZt=s(Z5e);m6r=r(ZZt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZZt.forEach(t),f6r=i(K8),Ac=n(K8,"P",{});var Mde=s(Ac);g6r=r(Mde,`Note:
Loading a model from its configuration file does `),K5e=n(Mde,"STRONG",{});var KZt=s(K5e);h6r=r(KZt,"not"),KZt.forEach(t),u6r=r(Mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Mde,"A",{href:!0});var eKt=s(OK);p6r=r(eKt,"from_pretrained()"),eKt.forEach(t),_6r=r(Mde," to load the model weights."),Mde.forEach(t),b6r=i(K8),T(GC.$$.fragment,K8),K8.forEach(t),v6r=i(Jl),bo=n(Jl,"DIV",{class:!0});var Ga=s(bo);T(Nk.$$.fragment,Ga),F6r=i(Ga),e0e=n(Ga,"P",{});var oKt=s(e0e);T6r=r(oKt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),oKt.forEach(t),M6r=i(Ga),vn=n(Ga,"P",{});var e9=s(vn);E6r=r(e9,"The model class to instantiate is selected based on the "),o0e=n(e9,"CODE",{});var rKt=s(o0e);C6r=r(rKt,"model_type"),rKt.forEach(t),w6r=r(e9,` property of the config object (either
passed as an argument or loaded from `),r0e=n(e9,"CODE",{});var tKt=s(r0e);A6r=r(tKt,"pretrained_model_name_or_path"),tKt.forEach(t),L6r=r(e9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(e9,"CODE",{});var aKt=s(t0e);y6r=r(aKt,"pretrained_model_name_or_path"),aKt.forEach(t),x6r=r(e9,":"),e9.forEach(t),$6r=i(Ga),Le=n(Ga,"UL",{});var Ie=s(Le);OC=n(Ie,"LI",{});var nUe=s(OC);a0e=n(nUe,"STRONG",{});var nKt=s(a0e);k6r=r(nKt,"data2vec-audio"),nKt.forEach(t),S6r=r(nUe," \u2014 "),VK=n(nUe,"A",{href:!0});var sKt=s(VK);R6r=r(sKt,"Data2VecAudioForCTC"),sKt.forEach(t),P6r=r(nUe," (Data2VecAudio model)"),nUe.forEach(t),B6r=i(Ie),VC=n(Ie,"LI",{});var sUe=s(VC);n0e=n(sUe,"STRONG",{});var lKt=s(n0e);I6r=r(lKt,"hubert"),lKt.forEach(t),N6r=r(sUe," \u2014 "),XK=n(sUe,"A",{href:!0});var iKt=s(XK);q6r=r(iKt,"HubertForCTC"),iKt.forEach(t),j6r=r(sUe," (Hubert model)"),sUe.forEach(t),D6r=i(Ie),XC=n(Ie,"LI",{});var lUe=s(XC);s0e=n(lUe,"STRONG",{});var dKt=s(s0e);G6r=r(dKt,"mctct"),dKt.forEach(t),O6r=r(lUe," \u2014 "),zK=n(lUe,"A",{href:!0});var cKt=s(zK);V6r=r(cKt,"MCTCTForCTC"),cKt.forEach(t),X6r=r(lUe," (M-CTC-T model)"),lUe.forEach(t),z6r=i(Ie),zC=n(Ie,"LI",{});var iUe=s(zC);l0e=n(iUe,"STRONG",{});var mKt=s(l0e);Q6r=r(mKt,"sew"),mKt.forEach(t),W6r=r(iUe," \u2014 "),QK=n(iUe,"A",{href:!0});var fKt=s(QK);U6r=r(fKt,"SEWForCTC"),fKt.forEach(t),H6r=r(iUe," (SEW model)"),iUe.forEach(t),J6r=i(Ie),QC=n(Ie,"LI",{});var dUe=s(QC);i0e=n(dUe,"STRONG",{});var gKt=s(i0e);Y6r=r(gKt,"sew-d"),gKt.forEach(t),Z6r=r(dUe," \u2014 "),WK=n(dUe,"A",{href:!0});var hKt=s(WK);K6r=r(hKt,"SEWDForCTC"),hKt.forEach(t),e7r=r(dUe," (SEW-D model)"),dUe.forEach(t),o7r=i(Ie),WC=n(Ie,"LI",{});var cUe=s(WC);d0e=n(cUe,"STRONG",{});var uKt=s(d0e);r7r=r(uKt,"unispeech"),uKt.forEach(t),t7r=r(cUe," \u2014 "),UK=n(cUe,"A",{href:!0});var pKt=s(UK);a7r=r(pKt,"UniSpeechForCTC"),pKt.forEach(t),n7r=r(cUe," (UniSpeech model)"),cUe.forEach(t),s7r=i(Ie),UC=n(Ie,"LI",{});var mUe=s(UC);c0e=n(mUe,"STRONG",{});var _Kt=s(c0e);l7r=r(_Kt,"unispeech-sat"),_Kt.forEach(t),i7r=r(mUe," \u2014 "),HK=n(mUe,"A",{href:!0});var bKt=s(HK);d7r=r(bKt,"UniSpeechSatForCTC"),bKt.forEach(t),c7r=r(mUe," (UniSpeechSat model)"),mUe.forEach(t),m7r=i(Ie),HC=n(Ie,"LI",{});var fUe=s(HC);m0e=n(fUe,"STRONG",{});var vKt=s(m0e);f7r=r(vKt,"wav2vec2"),vKt.forEach(t),g7r=r(fUe," \u2014 "),JK=n(fUe,"A",{href:!0});var FKt=s(JK);h7r=r(FKt,"Wav2Vec2ForCTC"),FKt.forEach(t),u7r=r(fUe," (Wav2Vec2 model)"),fUe.forEach(t),p7r=i(Ie),JC=n(Ie,"LI",{});var gUe=s(JC);f0e=n(gUe,"STRONG",{});var TKt=s(f0e);_7r=r(TKt,"wav2vec2-conformer"),TKt.forEach(t),b7r=r(gUe," \u2014 "),YK=n(gUe,"A",{href:!0});var MKt=s(YK);v7r=r(MKt,"Wav2Vec2ConformerForCTC"),MKt.forEach(t),F7r=r(gUe," (Wav2Vec2-Conformer model)"),gUe.forEach(t),T7r=i(Ie),YC=n(Ie,"LI",{});var hUe=s(YC);g0e=n(hUe,"STRONG",{});var EKt=s(g0e);M7r=r(EKt,"wavlm"),EKt.forEach(t),E7r=r(hUe," \u2014 "),ZK=n(hUe,"A",{href:!0});var CKt=s(ZK);C7r=r(CKt,"WavLMForCTC"),CKt.forEach(t),w7r=r(hUe," (WavLM model)"),hUe.forEach(t),Ie.forEach(t),A7r=i(Ga),ZC=n(Ga,"P",{});var uUe=s(ZC);L7r=r(uUe,"The model is set in evaluation mode by default using "),h0e=n(uUe,"CODE",{});var wKt=s(h0e);y7r=r(wKt,"model.eval()"),wKt.forEach(t),x7r=r(uUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u0e=n(uUe,"CODE",{});var AKt=s(u0e);$7r=r(AKt,"model.train()"),AKt.forEach(t),uUe.forEach(t),k7r=i(Ga),T(KC.$$.fragment,Ga),Ga.forEach(t),Jl.forEach(t),oro=i(m),Lc=n(m,"H2",{class:!0});var _ao=s(Lc);e3=n(_ao,"A",{id:!0,class:!0,href:!0});var LKt=s(e3);p0e=n(LKt,"SPAN",{});var yKt=s(p0e);T(qk.$$.fragment,yKt),yKt.forEach(t),LKt.forEach(t),S7r=i(_ao),_0e=n(_ao,"SPAN",{});var xKt=s(_0e);R7r=r(xKt,"AutoModelForSpeechSeq2Seq"),xKt.forEach(t),_ao.forEach(t),rro=i(m),er=n(m,"DIV",{class:!0});var Yl=s(er);T(jk.$$.fragment,Yl),P7r=i(Yl),yc=n(Yl,"P",{});var Ede=s(yc);B7r=r(Ede,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KK=n(Ede,"A",{href:!0});var $Kt=s(KK);I7r=r($Kt,"from_pretrained()"),$Kt.forEach(t),N7r=r(Ede," class method or the "),eee=n(Ede,"A",{href:!0});var kKt=s(eee);q7r=r(kKt,"from_config()"),kKt.forEach(t),j7r=r(Ede,` class
method.`),Ede.forEach(t),D7r=i(Yl),Dk=n(Yl,"P",{});var bao=s(Dk);G7r=r(bao,"This class cannot be instantiated directly using "),b0e=n(bao,"CODE",{});var SKt=s(b0e);O7r=r(SKt,"__init__()"),SKt.forEach(t),V7r=r(bao," (throws an error)."),bao.forEach(t),X7r=i(Yl),jt=n(Yl,"DIV",{class:!0});var o9=s(jt);T(Gk.$$.fragment,o9),z7r=i(o9),v0e=n(o9,"P",{});var RKt=s(v0e);Q7r=r(RKt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RKt.forEach(t),W7r=i(o9),xc=n(o9,"P",{});var Cde=s(xc);U7r=r(Cde,`Note:
Loading a model from its configuration file does `),F0e=n(Cde,"STRONG",{});var PKt=s(F0e);H7r=r(PKt,"not"),PKt.forEach(t),J7r=r(Cde,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Cde,"A",{href:!0});var BKt=s(oee);Y7r=r(BKt,"from_pretrained()"),BKt.forEach(t),Z7r=r(Cde," to load the model weights."),Cde.forEach(t),K7r=i(o9),T(o3.$$.fragment,o9),o9.forEach(t),eLr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Oa=s(vo);T(Ok.$$.fragment,Oa),oLr=i(Oa),T0e=n(Oa,"P",{});var IKt=s(T0e);rLr=r(IKt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IKt.forEach(t),tLr=i(Oa),Fn=n(Oa,"P",{});var r9=s(Fn);aLr=r(r9,"The model class to instantiate is selected based on the "),M0e=n(r9,"CODE",{});var NKt=s(M0e);nLr=r(NKt,"model_type"),NKt.forEach(t),sLr=r(r9,` property of the config object (either
passed as an argument or loaded from `),E0e=n(r9,"CODE",{});var qKt=s(E0e);lLr=r(qKt,"pretrained_model_name_or_path"),qKt.forEach(t),iLr=r(r9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=n(r9,"CODE",{});var jKt=s(C0e);dLr=r(jKt,"pretrained_model_name_or_path"),jKt.forEach(t),cLr=r(r9,":"),r9.forEach(t),mLr=i(Oa),$c=n(Oa,"UL",{});var wde=s($c);r3=n(wde,"LI",{});var pUe=s(r3);w0e=n(pUe,"STRONG",{});var DKt=s(w0e);fLr=r(DKt,"speech-encoder-decoder"),DKt.forEach(t),gLr=r(pUe," \u2014 "),ree=n(pUe,"A",{href:!0});var GKt=s(ree);hLr=r(GKt,"SpeechEncoderDecoderModel"),GKt.forEach(t),uLr=r(pUe," (Speech Encoder decoder model)"),pUe.forEach(t),pLr=i(wde),t3=n(wde,"LI",{});var _Ue=s(t3);A0e=n(_Ue,"STRONG",{});var OKt=s(A0e);_Lr=r(OKt,"speech_to_text"),OKt.forEach(t),bLr=r(_Ue," \u2014 "),tee=n(_Ue,"A",{href:!0});var VKt=s(tee);vLr=r(VKt,"Speech2TextForConditionalGeneration"),VKt.forEach(t),FLr=r(_Ue," (Speech2Text model)"),_Ue.forEach(t),TLr=i(wde),a3=n(wde,"LI",{});var bUe=s(a3);L0e=n(bUe,"STRONG",{});var XKt=s(L0e);MLr=r(XKt,"whisper"),XKt.forEach(t),ELr=r(bUe," \u2014 "),aee=n(bUe,"A",{href:!0});var zKt=s(aee);CLr=r(zKt,"WhisperForConditionalGeneration"),zKt.forEach(t),wLr=r(bUe," (Whisper model)"),bUe.forEach(t),wde.forEach(t),ALr=i(Oa),n3=n(Oa,"P",{});var vUe=s(n3);LLr=r(vUe,"The model is set in evaluation mode by default using "),y0e=n(vUe,"CODE",{});var QKt=s(y0e);yLr=r(QKt,"model.eval()"),QKt.forEach(t),xLr=r(vUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=n(vUe,"CODE",{});var WKt=s(x0e);$Lr=r(WKt,"model.train()"),WKt.forEach(t),vUe.forEach(t),kLr=i(Oa),T(s3.$$.fragment,Oa),Oa.forEach(t),Yl.forEach(t),tro=i(m),kc=n(m,"H2",{class:!0});var vao=s(kc);l3=n(vao,"A",{id:!0,class:!0,href:!0});var UKt=s(l3);$0e=n(UKt,"SPAN",{});var HKt=s($0e);T(Vk.$$.fragment,HKt),HKt.forEach(t),UKt.forEach(t),SLr=i(vao),k0e=n(vao,"SPAN",{});var JKt=s(k0e);RLr=r(JKt,"AutoModelForAudioXVector"),JKt.forEach(t),vao.forEach(t),aro=i(m),or=n(m,"DIV",{class:!0});var Zl=s(or);T(Xk.$$.fragment,Zl),PLr=i(Zl),Sc=n(Zl,"P",{});var Ade=s(Sc);BLr=r(Ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nee=n(Ade,"A",{href:!0});var YKt=s(nee);ILr=r(YKt,"from_pretrained()"),YKt.forEach(t),NLr=r(Ade," class method or the "),see=n(Ade,"A",{href:!0});var ZKt=s(see);qLr=r(ZKt,"from_config()"),ZKt.forEach(t),jLr=r(Ade,` class
method.`),Ade.forEach(t),DLr=i(Zl),zk=n(Zl,"P",{});var Fao=s(zk);GLr=r(Fao,"This class cannot be instantiated directly using "),S0e=n(Fao,"CODE",{});var KKt=s(S0e);OLr=r(KKt,"__init__()"),KKt.forEach(t),VLr=r(Fao," (throws an error)."),Fao.forEach(t),XLr=i(Zl),Dt=n(Zl,"DIV",{class:!0});var t9=s(Dt);T(Qk.$$.fragment,t9),zLr=i(t9),R0e=n(t9,"P",{});var eea=s(R0e);QLr=r(eea,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eea.forEach(t),WLr=i(t9),Rc=n(t9,"P",{});var Lde=s(Rc);ULr=r(Lde,`Note:
Loading a model from its configuration file does `),P0e=n(Lde,"STRONG",{});var oea=s(P0e);HLr=r(oea,"not"),oea.forEach(t),JLr=r(Lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=n(Lde,"A",{href:!0});var rea=s(lee);YLr=r(rea,"from_pretrained()"),rea.forEach(t),ZLr=r(Lde," to load the model weights."),Lde.forEach(t),KLr=i(t9),T(i3.$$.fragment,t9),t9.forEach(t),eyr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Va=s(Fo);T(Wk.$$.fragment,Va),oyr=i(Va),B0e=n(Va,"P",{});var tea=s(B0e);ryr=r(tea,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tea.forEach(t),tyr=i(Va),Tn=n(Va,"P",{});var a9=s(Tn);ayr=r(a9,"The model class to instantiate is selected based on the "),I0e=n(a9,"CODE",{});var aea=s(I0e);nyr=r(aea,"model_type"),aea.forEach(t),syr=r(a9,` property of the config object (either
passed as an argument or loaded from `),N0e=n(a9,"CODE",{});var nea=s(N0e);lyr=r(nea,"pretrained_model_name_or_path"),nea.forEach(t),iyr=r(a9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(a9,"CODE",{});var sea=s(q0e);dyr=r(sea,"pretrained_model_name_or_path"),sea.forEach(t),cyr=r(a9,":"),a9.forEach(t),myr=i(Va),ht=n(Va,"UL",{});var Kl=s(ht);d3=n(Kl,"LI",{});var FUe=s(d3);j0e=n(FUe,"STRONG",{});var lea=s(j0e);fyr=r(lea,"data2vec-audio"),lea.forEach(t),gyr=r(FUe," \u2014 "),iee=n(FUe,"A",{href:!0});var iea=s(iee);hyr=r(iea,"Data2VecAudioForXVector"),iea.forEach(t),uyr=r(FUe," (Data2VecAudio model)"),FUe.forEach(t),pyr=i(Kl),c3=n(Kl,"LI",{});var TUe=s(c3);D0e=n(TUe,"STRONG",{});var dea=s(D0e);_yr=r(dea,"unispeech-sat"),dea.forEach(t),byr=r(TUe," \u2014 "),dee=n(TUe,"A",{href:!0});var cea=s(dee);vyr=r(cea,"UniSpeechSatForXVector"),cea.forEach(t),Fyr=r(TUe," (UniSpeechSat model)"),TUe.forEach(t),Tyr=i(Kl),m3=n(Kl,"LI",{});var MUe=s(m3);G0e=n(MUe,"STRONG",{});var mea=s(G0e);Myr=r(mea,"wav2vec2"),mea.forEach(t),Eyr=r(MUe," \u2014 "),cee=n(MUe,"A",{href:!0});var fea=s(cee);Cyr=r(fea,"Wav2Vec2ForXVector"),fea.forEach(t),wyr=r(MUe," (Wav2Vec2 model)"),MUe.forEach(t),Ayr=i(Kl),f3=n(Kl,"LI",{});var EUe=s(f3);O0e=n(EUe,"STRONG",{});var gea=s(O0e);Lyr=r(gea,"wav2vec2-conformer"),gea.forEach(t),yyr=r(EUe," \u2014 "),mee=n(EUe,"A",{href:!0});var hea=s(mee);xyr=r(hea,"Wav2Vec2ConformerForXVector"),hea.forEach(t),$yr=r(EUe," (Wav2Vec2-Conformer model)"),EUe.forEach(t),kyr=i(Kl),g3=n(Kl,"LI",{});var CUe=s(g3);V0e=n(CUe,"STRONG",{});var uea=s(V0e);Syr=r(uea,"wavlm"),uea.forEach(t),Ryr=r(CUe," \u2014 "),fee=n(CUe,"A",{href:!0});var pea=s(fee);Pyr=r(pea,"WavLMForXVector"),pea.forEach(t),Byr=r(CUe," (WavLM model)"),CUe.forEach(t),Kl.forEach(t),Iyr=i(Va),h3=n(Va,"P",{});var wUe=s(h3);Nyr=r(wUe,"The model is set in evaluation mode by default using "),X0e=n(wUe,"CODE",{});var _ea=s(X0e);qyr=r(_ea,"model.eval()"),_ea.forEach(t),jyr=r(wUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z0e=n(wUe,"CODE",{});var bea=s(z0e);Dyr=r(bea,"model.train()"),bea.forEach(t),wUe.forEach(t),Gyr=i(Va),T(u3.$$.fragment,Va),Va.forEach(t),Zl.forEach(t),nro=i(m),Pc=n(m,"H2",{class:!0});var Tao=s(Pc);p3=n(Tao,"A",{id:!0,class:!0,href:!0});var vea=s(p3);Q0e=n(vea,"SPAN",{});var Fea=s(Q0e);T(Uk.$$.fragment,Fea),Fea.forEach(t),vea.forEach(t),Oyr=i(Tao),W0e=n(Tao,"SPAN",{});var Tea=s(W0e);Vyr=r(Tea,"AutoModelForMaskedImageModeling"),Tea.forEach(t),Tao.forEach(t),sro=i(m),rr=n(m,"DIV",{class:!0});var ei=s(rr);T(Hk.$$.fragment,ei),Xyr=i(ei),Bc=n(ei,"P",{});var yde=s(Bc);zyr=r(yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gee=n(yde,"A",{href:!0});var Mea=s(gee);Qyr=r(Mea,"from_pretrained()"),Mea.forEach(t),Wyr=r(yde," class method or the "),hee=n(yde,"A",{href:!0});var Eea=s(hee);Uyr=r(Eea,"from_config()"),Eea.forEach(t),Hyr=r(yde,` class
method.`),yde.forEach(t),Jyr=i(ei),Jk=n(ei,"P",{});var Mao=s(Jk);Yyr=r(Mao,"This class cannot be instantiated directly using "),U0e=n(Mao,"CODE",{});var Cea=s(U0e);Zyr=r(Cea,"__init__()"),Cea.forEach(t),Kyr=r(Mao," (throws an error)."),Mao.forEach(t),e8r=i(ei),Gt=n(ei,"DIV",{class:!0});var n9=s(Gt);T(Yk.$$.fragment,n9),o8r=i(n9),H0e=n(n9,"P",{});var wea=s(H0e);r8r=r(wea,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wea.forEach(t),t8r=i(n9),Ic=n(n9,"P",{});var xde=s(Ic);a8r=r(xde,`Note:
Loading a model from its configuration file does `),J0e=n(xde,"STRONG",{});var Aea=s(J0e);n8r=r(Aea,"not"),Aea.forEach(t),s8r=r(xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(xde,"A",{href:!0});var Lea=s(uee);l8r=r(Lea,"from_pretrained()"),Lea.forEach(t),i8r=r(xde," to load the model weights."),xde.forEach(t),d8r=i(n9),T(_3.$$.fragment,n9),n9.forEach(t),c8r=i(ei),To=n(ei,"DIV",{class:!0});var Xa=s(To);T(Zk.$$.fragment,Xa),m8r=i(Xa),Y0e=n(Xa,"P",{});var yea=s(Y0e);f8r=r(yea,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),yea.forEach(t),g8r=i(Xa),Mn=n(Xa,"P",{});var s9=s(Mn);h8r=r(s9,"The model class to instantiate is selected based on the "),Z0e=n(s9,"CODE",{});var xea=s(Z0e);u8r=r(xea,"model_type"),xea.forEach(t),p8r=r(s9,` property of the config object (either
passed as an argument or loaded from `),K0e=n(s9,"CODE",{});var $ea=s(K0e);_8r=r($ea,"pretrained_model_name_or_path"),$ea.forEach(t),b8r=r(s9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=n(s9,"CODE",{});var kea=s(ewe);v8r=r(kea,"pretrained_model_name_or_path"),kea.forEach(t),F8r=r(s9,":"),s9.forEach(t),T8r=i(Xa),En=n(Xa,"UL",{});var l9=s(En);b3=n(l9,"LI",{});var AUe=s(b3);owe=n(AUe,"STRONG",{});var Sea=s(owe);M8r=r(Sea,"deit"),Sea.forEach(t),E8r=r(AUe," \u2014 "),pee=n(AUe,"A",{href:!0});var Rea=s(pee);C8r=r(Rea,"DeiTForMaskedImageModeling"),Rea.forEach(t),w8r=r(AUe," (DeiT model)"),AUe.forEach(t),A8r=i(l9),v3=n(l9,"LI",{});var LUe=s(v3);rwe=n(LUe,"STRONG",{});var Pea=s(rwe);L8r=r(Pea,"swin"),Pea.forEach(t),y8r=r(LUe," \u2014 "),_ee=n(LUe,"A",{href:!0});var Bea=s(_ee);x8r=r(Bea,"SwinForMaskedImageModeling"),Bea.forEach(t),$8r=r(LUe," (Swin Transformer model)"),LUe.forEach(t),k8r=i(l9),F3=n(l9,"LI",{});var yUe=s(F3);twe=n(yUe,"STRONG",{});var Iea=s(twe);S8r=r(Iea,"swinv2"),Iea.forEach(t),R8r=r(yUe," \u2014 "),bee=n(yUe,"A",{href:!0});var Nea=s(bee);P8r=r(Nea,"Swinv2ForMaskedImageModeling"),Nea.forEach(t),B8r=r(yUe," (Swin Transformer V2 model)"),yUe.forEach(t),I8r=i(l9),T3=n(l9,"LI",{});var xUe=s(T3);awe=n(xUe,"STRONG",{});var qea=s(awe);N8r=r(qea,"vit"),qea.forEach(t),q8r=r(xUe," \u2014 "),vee=n(xUe,"A",{href:!0});var jea=s(vee);j8r=r(jea,"ViTForMaskedImageModeling"),jea.forEach(t),D8r=r(xUe," (ViT model)"),xUe.forEach(t),l9.forEach(t),G8r=i(Xa),M3=n(Xa,"P",{});var $Ue=s(M3);O8r=r($Ue,"The model is set in evaluation mode by default using "),nwe=n($Ue,"CODE",{});var Dea=s(nwe);V8r=r(Dea,"model.eval()"),Dea.forEach(t),X8r=r($Ue,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),swe=n($Ue,"CODE",{});var Gea=s(swe);z8r=r(Gea,"model.train()"),Gea.forEach(t),$Ue.forEach(t),Q8r=i(Xa),T(E3.$$.fragment,Xa),Xa.forEach(t),ei.forEach(t),lro=i(m),Nc=n(m,"H2",{class:!0});var Eao=s(Nc);C3=n(Eao,"A",{id:!0,class:!0,href:!0});var Oea=s(C3);lwe=n(Oea,"SPAN",{});var Vea=s(lwe);T(Kk.$$.fragment,Vea),Vea.forEach(t),Oea.forEach(t),W8r=i(Eao),iwe=n(Eao,"SPAN",{});var Xea=s(iwe);U8r=r(Xea,"AutoModelForObjectDetection"),Xea.forEach(t),Eao.forEach(t),iro=i(m),tr=n(m,"DIV",{class:!0});var oi=s(tr);T(eS.$$.fragment,oi),H8r=i(oi),qc=n(oi,"P",{});var $de=s(qc);J8r=r($de,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Fee=n($de,"A",{href:!0});var zea=s(Fee);Y8r=r(zea,"from_pretrained()"),zea.forEach(t),Z8r=r($de," class method or the "),Tee=n($de,"A",{href:!0});var Qea=s(Tee);K8r=r(Qea,"from_config()"),Qea.forEach(t),e9r=r($de,` class
method.`),$de.forEach(t),o9r=i(oi),oS=n(oi,"P",{});var Cao=s(oS);r9r=r(Cao,"This class cannot be instantiated directly using "),dwe=n(Cao,"CODE",{});var Wea=s(dwe);t9r=r(Wea,"__init__()"),Wea.forEach(t),a9r=r(Cao," (throws an error)."),Cao.forEach(t),n9r=i(oi),Ot=n(oi,"DIV",{class:!0});var i9=s(Ot);T(rS.$$.fragment,i9),s9r=i(i9),cwe=n(i9,"P",{});var Uea=s(cwe);l9r=r(Uea,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Uea.forEach(t),i9r=i(i9),jc=n(i9,"P",{});var kde=s(jc);d9r=r(kde,`Note:
Loading a model from its configuration file does `),mwe=n(kde,"STRONG",{});var Hea=s(mwe);c9r=r(Hea,"not"),Hea.forEach(t),m9r=r(kde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(kde,"A",{href:!0});var Jea=s(Mee);f9r=r(Jea,"from_pretrained()"),Jea.forEach(t),g9r=r(kde," to load the model weights."),kde.forEach(t),h9r=i(i9),T(w3.$$.fragment,i9),i9.forEach(t),u9r=i(oi),Mo=n(oi,"DIV",{class:!0});var za=s(Mo);T(tS.$$.fragment,za),p9r=i(za),fwe=n(za,"P",{});var Yea=s(fwe);_9r=r(Yea,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Yea.forEach(t),b9r=i(za),Cn=n(za,"P",{});var d9=s(Cn);v9r=r(d9,"The model class to instantiate is selected based on the "),gwe=n(d9,"CODE",{});var Zea=s(gwe);F9r=r(Zea,"model_type"),Zea.forEach(t),T9r=r(d9,` property of the config object (either
passed as an argument or loaded from `),hwe=n(d9,"CODE",{});var Kea=s(hwe);M9r=r(Kea,"pretrained_model_name_or_path"),Kea.forEach(t),E9r=r(d9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uwe=n(d9,"CODE",{});var eoa=s(uwe);C9r=r(eoa,"pretrained_model_name_or_path"),eoa.forEach(t),w9r=r(d9,":"),d9.forEach(t),A9r=i(za),wn=n(za,"UL",{});var c9=s(wn);A3=n(c9,"LI",{});var kUe=s(A3);pwe=n(kUe,"STRONG",{});var ooa=s(pwe);L9r=r(ooa,"conditional_detr"),ooa.forEach(t),y9r=r(kUe," \u2014 "),Eee=n(kUe,"A",{href:!0});var roa=s(Eee);x9r=r(roa,"ConditionalDetrForObjectDetection"),roa.forEach(t),$9r=r(kUe," (Conditional DETR model)"),kUe.forEach(t),k9r=i(c9),L3=n(c9,"LI",{});var SUe=s(L3);_we=n(SUe,"STRONG",{});var toa=s(_we);S9r=r(toa,"deformable_detr"),toa.forEach(t),R9r=r(SUe," \u2014 "),Cee=n(SUe,"A",{href:!0});var aoa=s(Cee);P9r=r(aoa,"DeformableDetrForObjectDetection"),aoa.forEach(t),B9r=r(SUe," (Deformable DETR model)"),SUe.forEach(t),I9r=i(c9),y3=n(c9,"LI",{});var RUe=s(y3);bwe=n(RUe,"STRONG",{});var noa=s(bwe);N9r=r(noa,"detr"),noa.forEach(t),q9r=r(RUe," \u2014 "),wee=n(RUe,"A",{href:!0});var soa=s(wee);j9r=r(soa,"DetrForObjectDetection"),soa.forEach(t),D9r=r(RUe," (DETR model)"),RUe.forEach(t),G9r=i(c9),x3=n(c9,"LI",{});var PUe=s(x3);vwe=n(PUe,"STRONG",{});var loa=s(vwe);O9r=r(loa,"yolos"),loa.forEach(t),V9r=r(PUe," \u2014 "),Aee=n(PUe,"A",{href:!0});var ioa=s(Aee);X9r=r(ioa,"YolosForObjectDetection"),ioa.forEach(t),z9r=r(PUe," (YOLOS model)"),PUe.forEach(t),c9.forEach(t),Q9r=i(za),$3=n(za,"P",{});var BUe=s($3);W9r=r(BUe,"The model is set in evaluation mode by default using "),Fwe=n(BUe,"CODE",{});var doa=s(Fwe);U9r=r(doa,"model.eval()"),doa.forEach(t),H9r=r(BUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Twe=n(BUe,"CODE",{});var coa=s(Twe);J9r=r(coa,"model.train()"),coa.forEach(t),BUe.forEach(t),Y9r=i(za),T(k3.$$.fragment,za),za.forEach(t),oi.forEach(t),dro=i(m),Dc=n(m,"H2",{class:!0});var wao=s(Dc);S3=n(wao,"A",{id:!0,class:!0,href:!0});var moa=s(S3);Mwe=n(moa,"SPAN",{});var foa=s(Mwe);T(aS.$$.fragment,foa),foa.forEach(t),moa.forEach(t),Z9r=i(wao),Ewe=n(wao,"SPAN",{});var goa=s(Ewe);K9r=r(goa,"AutoModelForImageSegmentation"),goa.forEach(t),wao.forEach(t),cro=i(m),ar=n(m,"DIV",{class:!0});var ri=s(ar);T(nS.$$.fragment,ri),exr=i(ri),Gc=n(ri,"P",{});var Sde=s(Gc);oxr=r(Sde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Lee=n(Sde,"A",{href:!0});var hoa=s(Lee);rxr=r(hoa,"from_pretrained()"),hoa.forEach(t),txr=r(Sde," class method or the "),yee=n(Sde,"A",{href:!0});var uoa=s(yee);axr=r(uoa,"from_config()"),uoa.forEach(t),nxr=r(Sde,` class
method.`),Sde.forEach(t),sxr=i(ri),sS=n(ri,"P",{});var Aao=s(sS);lxr=r(Aao,"This class cannot be instantiated directly using "),Cwe=n(Aao,"CODE",{});var poa=s(Cwe);ixr=r(poa,"__init__()"),poa.forEach(t),dxr=r(Aao," (throws an error)."),Aao.forEach(t),cxr=i(ri),Vt=n(ri,"DIV",{class:!0});var m9=s(Vt);T(lS.$$.fragment,m9),mxr=i(m9),wwe=n(m9,"P",{});var _oa=s(wwe);fxr=r(_oa,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_oa.forEach(t),gxr=i(m9),Oc=n(m9,"P",{});var Rde=s(Oc);hxr=r(Rde,`Note:
Loading a model from its configuration file does `),Awe=n(Rde,"STRONG",{});var boa=s(Awe);uxr=r(boa,"not"),boa.forEach(t),pxr=r(Rde,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(Rde,"A",{href:!0});var voa=s(xee);_xr=r(voa,"from_pretrained()"),voa.forEach(t),bxr=r(Rde," to load the model weights."),Rde.forEach(t),vxr=i(m9),T(R3.$$.fragment,m9),m9.forEach(t),Fxr=i(ri),Eo=n(ri,"DIV",{class:!0});var Qa=s(Eo);T(iS.$$.fragment,Qa),Txr=i(Qa),Lwe=n(Qa,"P",{});var Foa=s(Lwe);Mxr=r(Foa,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Foa.forEach(t),Exr=i(Qa),An=n(Qa,"P",{});var f9=s(An);Cxr=r(f9,"The model class to instantiate is selected based on the "),ywe=n(f9,"CODE",{});var Toa=s(ywe);wxr=r(Toa,"model_type"),Toa.forEach(t),Axr=r(f9,` property of the config object (either
passed as an argument or loaded from `),xwe=n(f9,"CODE",{});var Moa=s(xwe);Lxr=r(Moa,"pretrained_model_name_or_path"),Moa.forEach(t),yxr=r(f9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=n(f9,"CODE",{});var Eoa=s($we);xxr=r(Eoa,"pretrained_model_name_or_path"),Eoa.forEach(t),$xr=r(f9,":"),f9.forEach(t),kxr=i(Qa),kwe=n(Qa,"UL",{});var Coa=s(kwe);P3=n(Coa,"LI",{});var IUe=s(P3);Swe=n(IUe,"STRONG",{});var woa=s(Swe);Sxr=r(woa,"detr"),woa.forEach(t),Rxr=r(IUe," \u2014 "),$ee=n(IUe,"A",{href:!0});var Aoa=s($ee);Pxr=r(Aoa,"DetrForSegmentation"),Aoa.forEach(t),Bxr=r(IUe," (DETR model)"),IUe.forEach(t),Coa.forEach(t),Ixr=i(Qa),B3=n(Qa,"P",{});var NUe=s(B3);Nxr=r(NUe,"The model is set in evaluation mode by default using "),Rwe=n(NUe,"CODE",{});var Loa=s(Rwe);qxr=r(Loa,"model.eval()"),Loa.forEach(t),jxr=r(NUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pwe=n(NUe,"CODE",{});var yoa=s(Pwe);Dxr=r(yoa,"model.train()"),yoa.forEach(t),NUe.forEach(t),Gxr=i(Qa),T(I3.$$.fragment,Qa),Qa.forEach(t),ri.forEach(t),mro=i(m),Vc=n(m,"H2",{class:!0});var Lao=s(Vc);N3=n(Lao,"A",{id:!0,class:!0,href:!0});var xoa=s(N3);Bwe=n(xoa,"SPAN",{});var $oa=s(Bwe);T(dS.$$.fragment,$oa),$oa.forEach(t),xoa.forEach(t),Oxr=i(Lao),Iwe=n(Lao,"SPAN",{});var koa=s(Iwe);Vxr=r(koa,"AutoModelForSemanticSegmentation"),koa.forEach(t),Lao.forEach(t),fro=i(m),nr=n(m,"DIV",{class:!0});var ti=s(nr);T(cS.$$.fragment,ti),Xxr=i(ti),Xc=n(ti,"P",{});var Pde=s(Xc);zxr=r(Pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kee=n(Pde,"A",{href:!0});var Soa=s(kee);Qxr=r(Soa,"from_pretrained()"),Soa.forEach(t),Wxr=r(Pde," class method or the "),See=n(Pde,"A",{href:!0});var Roa=s(See);Uxr=r(Roa,"from_config()"),Roa.forEach(t),Hxr=r(Pde,` class
method.`),Pde.forEach(t),Jxr=i(ti),mS=n(ti,"P",{});var yao=s(mS);Yxr=r(yao,"This class cannot be instantiated directly using "),Nwe=n(yao,"CODE",{});var Poa=s(Nwe);Zxr=r(Poa,"__init__()"),Poa.forEach(t),Kxr=r(yao," (throws an error)."),yao.forEach(t),e$r=i(ti),Xt=n(ti,"DIV",{class:!0});var g9=s(Xt);T(fS.$$.fragment,g9),o$r=i(g9),qwe=n(g9,"P",{});var Boa=s(qwe);r$r=r(Boa,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Boa.forEach(t),t$r=i(g9),zc=n(g9,"P",{});var Bde=s(zc);a$r=r(Bde,`Note:
Loading a model from its configuration file does `),jwe=n(Bde,"STRONG",{});var Ioa=s(jwe);n$r=r(Ioa,"not"),Ioa.forEach(t),s$r=r(Bde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(Bde,"A",{href:!0});var Noa=s(Ree);l$r=r(Noa,"from_pretrained()"),Noa.forEach(t),i$r=r(Bde," to load the model weights."),Bde.forEach(t),d$r=i(g9),T(q3.$$.fragment,g9),g9.forEach(t),c$r=i(ti),Co=n(ti,"DIV",{class:!0});var Wa=s(Co);T(gS.$$.fragment,Wa),m$r=i(Wa),Dwe=n(Wa,"P",{});var qoa=s(Dwe);f$r=r(qoa,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qoa.forEach(t),g$r=i(Wa),Ln=n(Wa,"P",{});var h9=s(Ln);h$r=r(h9,"The model class to instantiate is selected based on the "),Gwe=n(h9,"CODE",{});var joa=s(Gwe);u$r=r(joa,"model_type"),joa.forEach(t),p$r=r(h9,` property of the config object (either
passed as an argument or loaded from `),Owe=n(h9,"CODE",{});var Doa=s(Owe);_$r=r(Doa,"pretrained_model_name_or_path"),Doa.forEach(t),b$r=r(h9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vwe=n(h9,"CODE",{});var Goa=s(Vwe);v$r=r(Goa,"pretrained_model_name_or_path"),Goa.forEach(t),F$r=r(h9,":"),h9.forEach(t),T$r=i(Wa),ut=n(Wa,"UL",{});var ai=s(ut);j3=n(ai,"LI",{});var qUe=s(j3);Xwe=n(qUe,"STRONG",{});var Ooa=s(Xwe);M$r=r(Ooa,"beit"),Ooa.forEach(t),E$r=r(qUe," \u2014 "),Pee=n(qUe,"A",{href:!0});var Voa=s(Pee);C$r=r(Voa,"BeitForSemanticSegmentation"),Voa.forEach(t),w$r=r(qUe," (BEiT model)"),qUe.forEach(t),A$r=i(ai),D3=n(ai,"LI",{});var jUe=s(D3);zwe=n(jUe,"STRONG",{});var Xoa=s(zwe);L$r=r(Xoa,"data2vec-vision"),Xoa.forEach(t),y$r=r(jUe," \u2014 "),Bee=n(jUe,"A",{href:!0});var zoa=s(Bee);x$r=r(zoa,"Data2VecVisionForSemanticSegmentation"),zoa.forEach(t),$$r=r(jUe," (Data2VecVision model)"),jUe.forEach(t),k$r=i(ai),G3=n(ai,"LI",{});var DUe=s(G3);Qwe=n(DUe,"STRONG",{});var Qoa=s(Qwe);S$r=r(Qoa,"dpt"),Qoa.forEach(t),R$r=r(DUe," \u2014 "),Iee=n(DUe,"A",{href:!0});var Woa=s(Iee);P$r=r(Woa,"DPTForSemanticSegmentation"),Woa.forEach(t),B$r=r(DUe," (DPT model)"),DUe.forEach(t),I$r=i(ai),O3=n(ai,"LI",{});var GUe=s(O3);Wwe=n(GUe,"STRONG",{});var Uoa=s(Wwe);N$r=r(Uoa,"mobilevit"),Uoa.forEach(t),q$r=r(GUe," \u2014 "),Nee=n(GUe,"A",{href:!0});var Hoa=s(Nee);j$r=r(Hoa,"MobileViTForSemanticSegmentation"),Hoa.forEach(t),D$r=r(GUe," (MobileViT model)"),GUe.forEach(t),G$r=i(ai),V3=n(ai,"LI",{});var OUe=s(V3);Uwe=n(OUe,"STRONG",{});var Joa=s(Uwe);O$r=r(Joa,"segformer"),Joa.forEach(t),V$r=r(OUe," \u2014 "),qee=n(OUe,"A",{href:!0});var Yoa=s(qee);X$r=r(Yoa,"SegformerForSemanticSegmentation"),Yoa.forEach(t),z$r=r(OUe," (SegFormer model)"),OUe.forEach(t),ai.forEach(t),Q$r=i(Wa),X3=n(Wa,"P",{});var VUe=s(X3);W$r=r(VUe,"The model is set in evaluation mode by default using "),Hwe=n(VUe,"CODE",{});var Zoa=s(Hwe);U$r=r(Zoa,"model.eval()"),Zoa.forEach(t),H$r=r(VUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jwe=n(VUe,"CODE",{});var Koa=s(Jwe);J$r=r(Koa,"model.train()"),Koa.forEach(t),VUe.forEach(t),Y$r=i(Wa),T(z3.$$.fragment,Wa),Wa.forEach(t),ti.forEach(t),gro=i(m),Qc=n(m,"H2",{class:!0});var xao=s(Qc);Q3=n(xao,"A",{id:!0,class:!0,href:!0});var era=s(Q3);Ywe=n(era,"SPAN",{});var ora=s(Ywe);T(hS.$$.fragment,ora),ora.forEach(t),era.forEach(t),Z$r=i(xao),Zwe=n(xao,"SPAN",{});var rra=s(Zwe);K$r=r(rra,"AutoModelForInstanceSegmentation"),rra.forEach(t),xao.forEach(t),hro=i(m),sr=n(m,"DIV",{class:!0});var ni=s(sr);T(uS.$$.fragment,ni),ekr=i(ni),Wc=n(ni,"P",{});var Ide=s(Wc);okr=r(Ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jee=n(Ide,"A",{href:!0});var tra=s(jee);rkr=r(tra,"from_pretrained()"),tra.forEach(t),tkr=r(Ide," class method or the "),Dee=n(Ide,"A",{href:!0});var ara=s(Dee);akr=r(ara,"from_config()"),ara.forEach(t),nkr=r(Ide,` class
method.`),Ide.forEach(t),skr=i(ni),pS=n(ni,"P",{});var $ao=s(pS);lkr=r($ao,"This class cannot be instantiated directly using "),Kwe=n($ao,"CODE",{});var nra=s(Kwe);ikr=r(nra,"__init__()"),nra.forEach(t),dkr=r($ao," (throws an error)."),$ao.forEach(t),ckr=i(ni),zt=n(ni,"DIV",{class:!0});var u9=s(zt);T(_S.$$.fragment,u9),mkr=i(u9),eAe=n(u9,"P",{});var sra=s(eAe);fkr=r(sra,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),sra.forEach(t),gkr=i(u9),Uc=n(u9,"P",{});var Nde=s(Uc);hkr=r(Nde,`Note:
Loading a model from its configuration file does `),oAe=n(Nde,"STRONG",{});var lra=s(oAe);ukr=r(lra,"not"),lra.forEach(t),pkr=r(Nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=n(Nde,"A",{href:!0});var ira=s(Gee);_kr=r(ira,"from_pretrained()"),ira.forEach(t),bkr=r(Nde," to load the model weights."),Nde.forEach(t),vkr=i(u9),T(W3.$$.fragment,u9),u9.forEach(t),Fkr=i(ni),wo=n(ni,"DIV",{class:!0});var Ua=s(wo);T(bS.$$.fragment,Ua),Tkr=i(Ua),rAe=n(Ua,"P",{});var dra=s(rAe);Mkr=r(dra,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),dra.forEach(t),Ekr=i(Ua),yn=n(Ua,"P",{});var p9=s(yn);Ckr=r(p9,"The model class to instantiate is selected based on the "),tAe=n(p9,"CODE",{});var cra=s(tAe);wkr=r(cra,"model_type"),cra.forEach(t),Akr=r(p9,` property of the config object (either
passed as an argument or loaded from `),aAe=n(p9,"CODE",{});var mra=s(aAe);Lkr=r(mra,"pretrained_model_name_or_path"),mra.forEach(t),ykr=r(p9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=n(p9,"CODE",{});var fra=s(nAe);xkr=r(fra,"pretrained_model_name_or_path"),fra.forEach(t),$kr=r(p9,":"),p9.forEach(t),kkr=i(Ua),sAe=n(Ua,"UL",{});var gra=s(sAe);U3=n(gra,"LI",{});var XUe=s(U3);lAe=n(XUe,"STRONG",{});var hra=s(lAe);Skr=r(hra,"maskformer"),hra.forEach(t),Rkr=r(XUe," \u2014 "),Oee=n(XUe,"A",{href:!0});var ura=s(Oee);Pkr=r(ura,"MaskFormerForInstanceSegmentation"),ura.forEach(t),Bkr=r(XUe," (MaskFormer model)"),XUe.forEach(t),gra.forEach(t),Ikr=i(Ua),H3=n(Ua,"P",{});var zUe=s(H3);Nkr=r(zUe,"The model is set in evaluation mode by default using "),iAe=n(zUe,"CODE",{});var pra=s(iAe);qkr=r(pra,"model.eval()"),pra.forEach(t),jkr=r(zUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dAe=n(zUe,"CODE",{});var _ra=s(dAe);Dkr=r(_ra,"model.train()"),_ra.forEach(t),zUe.forEach(t),Gkr=i(Ua),T(J3.$$.fragment,Ua),Ua.forEach(t),ni.forEach(t),uro=i(m),Hc=n(m,"H2",{class:!0});var kao=s(Hc);Y3=n(kao,"A",{id:!0,class:!0,href:!0});var bra=s(Y3);cAe=n(bra,"SPAN",{});var vra=s(cAe);T(vS.$$.fragment,vra),vra.forEach(t),bra.forEach(t),Okr=i(kao),mAe=n(kao,"SPAN",{});var Fra=s(mAe);Vkr=r(Fra,"AutoModelForZeroShotObjectDetection"),Fra.forEach(t),kao.forEach(t),pro=i(m),lr=n(m,"DIV",{class:!0});var si=s(lr);T(FS.$$.fragment,si),Xkr=i(si),Jc=n(si,"P",{});var qde=s(Jc);zkr=r(qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Vee=n(qde,"A",{href:!0});var Tra=s(Vee);Qkr=r(Tra,"from_pretrained()"),Tra.forEach(t),Wkr=r(qde," class method or the "),Xee=n(qde,"A",{href:!0});var Mra=s(Xee);Ukr=r(Mra,"from_config()"),Mra.forEach(t),Hkr=r(qde,` class
method.`),qde.forEach(t),Jkr=i(si),TS=n(si,"P",{});var Sao=s(TS);Ykr=r(Sao,"This class cannot be instantiated directly using "),fAe=n(Sao,"CODE",{});var Era=s(fAe);Zkr=r(Era,"__init__()"),Era.forEach(t),Kkr=r(Sao," (throws an error)."),Sao.forEach(t),eSr=i(si),Qt=n(si,"DIV",{class:!0});var _9=s(Qt);T(MS.$$.fragment,_9),oSr=i(_9),gAe=n(_9,"P",{});var Cra=s(gAe);rSr=r(Cra,"Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),Cra.forEach(t),tSr=i(_9),Yc=n(_9,"P",{});var jde=s(Yc);aSr=r(jde,`Note:
Loading a model from its configuration file does `),hAe=n(jde,"STRONG",{});var wra=s(hAe);nSr=r(wra,"not"),wra.forEach(t),sSr=r(jde,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(jde,"A",{href:!0});var Ara=s(zee);lSr=r(Ara,"from_pretrained()"),Ara.forEach(t),iSr=r(jde," to load the model weights."),jde.forEach(t),dSr=i(_9),T(Z3.$$.fragment,_9),_9.forEach(t),cSr=i(si),Ao=n(si,"DIV",{class:!0});var Ha=s(Ao);T(ES.$$.fragment,Ha),mSr=i(Ha),uAe=n(Ha,"P",{});var Lra=s(uAe);fSr=r(Lra,"Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),Lra.forEach(t),gSr=i(Ha),xn=n(Ha,"P",{});var b9=s(xn);hSr=r(b9,"The model class to instantiate is selected based on the "),pAe=n(b9,"CODE",{});var yra=s(pAe);uSr=r(yra,"model_type"),yra.forEach(t),pSr=r(b9,` property of the config object (either
passed as an argument or loaded from `),_Ae=n(b9,"CODE",{});var xra=s(_Ae);_Sr=r(xra,"pretrained_model_name_or_path"),xra.forEach(t),bSr=r(b9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=n(b9,"CODE",{});var $ra=s(bAe);vSr=r($ra,"pretrained_model_name_or_path"),$ra.forEach(t),FSr=r(b9,":"),b9.forEach(t),TSr=i(Ha),vAe=n(Ha,"UL",{});var kra=s(vAe);K3=n(kra,"LI",{});var QUe=s(K3);FAe=n(QUe,"STRONG",{});var Sra=s(FAe);MSr=r(Sra,"owlvit"),Sra.forEach(t),ESr=r(QUe," \u2014 "),Qee=n(QUe,"A",{href:!0});var Rra=s(Qee);CSr=r(Rra,"OwlViTForObjectDetection"),Rra.forEach(t),wSr=r(QUe," (OWL-ViT model)"),QUe.forEach(t),kra.forEach(t),ASr=i(Ha),e5=n(Ha,"P",{});var WUe=s(e5);LSr=r(WUe,"The model is set in evaluation mode by default using "),TAe=n(WUe,"CODE",{});var Pra=s(TAe);ySr=r(Pra,"model.eval()"),Pra.forEach(t),xSr=r(WUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MAe=n(WUe,"CODE",{});var Bra=s(MAe);$Sr=r(Bra,"model.train()"),Bra.forEach(t),WUe.forEach(t),kSr=i(Ha),T(o5.$$.fragment,Ha),Ha.forEach(t),si.forEach(t),_ro=i(m),Zc=n(m,"H2",{class:!0});var Rao=s(Zc);r5=n(Rao,"A",{id:!0,class:!0,href:!0});var Ira=s(r5);EAe=n(Ira,"SPAN",{});var Nra=s(EAe);T(CS.$$.fragment,Nra),Nra.forEach(t),Ira.forEach(t),SSr=i(Rao),CAe=n(Rao,"SPAN",{});var qra=s(CAe);RSr=r(qra,"TFAutoModel"),qra.forEach(t),Rao.forEach(t),bro=i(m),ir=n(m,"DIV",{class:!0});var li=s(ir);T(wS.$$.fragment,li),PSr=i(li),Kc=n(li,"P",{});var Dde=s(Kc);BSr=r(Dde,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Wee=n(Dde,"A",{href:!0});var jra=s(Wee);ISr=r(jra,"from_pretrained()"),jra.forEach(t),NSr=r(Dde," class method or the "),Uee=n(Dde,"A",{href:!0});var Dra=s(Uee);qSr=r(Dra,"from_config()"),Dra.forEach(t),jSr=r(Dde,` class
method.`),Dde.forEach(t),DSr=i(li),AS=n(li,"P",{});var Pao=s(AS);GSr=r(Pao,"This class cannot be instantiated directly using "),wAe=n(Pao,"CODE",{});var Gra=s(wAe);OSr=r(Gra,"__init__()"),Gra.forEach(t),VSr=r(Pao," (throws an error)."),Pao.forEach(t),XSr=i(li),Wt=n(li,"DIV",{class:!0});var v9=s(Wt);T(LS.$$.fragment,v9),zSr=i(v9),AAe=n(v9,"P",{});var Ora=s(AAe);QSr=r(Ora,"Instantiates one of the base model classes of the library from a configuration."),Ora.forEach(t),WSr=i(v9),em=n(v9,"P",{});var Gde=s(em);USr=r(Gde,`Note:
Loading a model from its configuration file does `),LAe=n(Gde,"STRONG",{});var Vra=s(LAe);HSr=r(Vra,"not"),Vra.forEach(t),JSr=r(Gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Gde,"A",{href:!0});var Xra=s(Hee);YSr=r(Xra,"from_pretrained()"),Xra.forEach(t),ZSr=r(Gde," to load the model weights."),Gde.forEach(t),KSr=i(v9),T(t5.$$.fragment,v9),v9.forEach(t),eRr=i(li),qr=n(li,"DIV",{class:!0});var ii=s(qr);T(yS.$$.fragment,ii),oRr=i(ii),yAe=n(ii,"P",{});var zra=s(yAe);rRr=r(zra,"Instantiate one of the base model classes of the library from a pretrained model."),zra.forEach(t),tRr=i(ii),$n=n(ii,"P",{});var F9=s($n);aRr=r(F9,"The model class to instantiate is selected based on the "),xAe=n(F9,"CODE",{});var Qra=s(xAe);nRr=r(Qra,"model_type"),Qra.forEach(t),sRr=r(F9,` property of the config object (either
passed as an argument or loaded from `),$Ae=n(F9,"CODE",{});var Wra=s($Ae);lRr=r(Wra,"pretrained_model_name_or_path"),Wra.forEach(t),iRr=r(F9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kAe=n(F9,"CODE",{});var Ura=s(kAe);dRr=r(Ura,"pretrained_model_name_or_path"),Ura.forEach(t),cRr=r(F9,":"),F9.forEach(t),mRr=i(ii),q=n(ii,"UL",{});var D=s(q);a5=n(D,"LI",{});var UUe=s(a5);SAe=n(UUe,"STRONG",{});var Hra=s(SAe);fRr=r(Hra,"albert"),Hra.forEach(t),gRr=r(UUe," \u2014 "),Jee=n(UUe,"A",{href:!0});var Jra=s(Jee);hRr=r(Jra,"TFAlbertModel"),Jra.forEach(t),uRr=r(UUe," (ALBERT model)"),UUe.forEach(t),pRr=i(D),n5=n(D,"LI",{});var HUe=s(n5);RAe=n(HUe,"STRONG",{});var Yra=s(RAe);_Rr=r(Yra,"bart"),Yra.forEach(t),bRr=r(HUe," \u2014 "),Yee=n(HUe,"A",{href:!0});var Zra=s(Yee);vRr=r(Zra,"TFBartModel"),Zra.forEach(t),FRr=r(HUe," (BART model)"),HUe.forEach(t),TRr=i(D),s5=n(D,"LI",{});var JUe=s(s5);PAe=n(JUe,"STRONG",{});var Kra=s(PAe);MRr=r(Kra,"bert"),Kra.forEach(t),ERr=r(JUe," \u2014 "),Zee=n(JUe,"A",{href:!0});var eta=s(Zee);CRr=r(eta,"TFBertModel"),eta.forEach(t),wRr=r(JUe," (BERT model)"),JUe.forEach(t),ARr=i(D),l5=n(D,"LI",{});var YUe=s(l5);BAe=n(YUe,"STRONG",{});var ota=s(BAe);LRr=r(ota,"blenderbot"),ota.forEach(t),yRr=r(YUe," \u2014 "),Kee=n(YUe,"A",{href:!0});var rta=s(Kee);xRr=r(rta,"TFBlenderbotModel"),rta.forEach(t),$Rr=r(YUe," (Blenderbot model)"),YUe.forEach(t),kRr=i(D),i5=n(D,"LI",{});var ZUe=s(i5);IAe=n(ZUe,"STRONG",{});var tta=s(IAe);SRr=r(tta,"blenderbot-small"),tta.forEach(t),RRr=r(ZUe," \u2014 "),eoe=n(ZUe,"A",{href:!0});var ata=s(eoe);PRr=r(ata,"TFBlenderbotSmallModel"),ata.forEach(t),BRr=r(ZUe," (BlenderbotSmall model)"),ZUe.forEach(t),IRr=i(D),d5=n(D,"LI",{});var KUe=s(d5);NAe=n(KUe,"STRONG",{});var nta=s(NAe);NRr=r(nta,"camembert"),nta.forEach(t),qRr=r(KUe," \u2014 "),ooe=n(KUe,"A",{href:!0});var sta=s(ooe);jRr=r(sta,"TFCamembertModel"),sta.forEach(t),DRr=r(KUe," (CamemBERT model)"),KUe.forEach(t),GRr=i(D),c5=n(D,"LI",{});var eHe=s(c5);qAe=n(eHe,"STRONG",{});var lta=s(qAe);ORr=r(lta,"clip"),lta.forEach(t),VRr=r(eHe," \u2014 "),roe=n(eHe,"A",{href:!0});var ita=s(roe);XRr=r(ita,"TFCLIPModel"),ita.forEach(t),zRr=r(eHe," (CLIP model)"),eHe.forEach(t),QRr=i(D),m5=n(D,"LI",{});var oHe=s(m5);jAe=n(oHe,"STRONG",{});var dta=s(jAe);WRr=r(dta,"convbert"),dta.forEach(t),URr=r(oHe," \u2014 "),toe=n(oHe,"A",{href:!0});var cta=s(toe);HRr=r(cta,"TFConvBertModel"),cta.forEach(t),JRr=r(oHe," (ConvBERT model)"),oHe.forEach(t),YRr=i(D),f5=n(D,"LI",{});var rHe=s(f5);DAe=n(rHe,"STRONG",{});var mta=s(DAe);ZRr=r(mta,"convnext"),mta.forEach(t),KRr=r(rHe," \u2014 "),aoe=n(rHe,"A",{href:!0});var fta=s(aoe);ePr=r(fta,"TFConvNextModel"),fta.forEach(t),oPr=r(rHe," (ConvNeXT model)"),rHe.forEach(t),rPr=i(D),g5=n(D,"LI",{});var tHe=s(g5);GAe=n(tHe,"STRONG",{});var gta=s(GAe);tPr=r(gta,"ctrl"),gta.forEach(t),aPr=r(tHe," \u2014 "),noe=n(tHe,"A",{href:!0});var hta=s(noe);nPr=r(hta,"TFCTRLModel"),hta.forEach(t),sPr=r(tHe," (CTRL model)"),tHe.forEach(t),lPr=i(D),h5=n(D,"LI",{});var aHe=s(h5);OAe=n(aHe,"STRONG",{});var uta=s(OAe);iPr=r(uta,"data2vec-vision"),uta.forEach(t),dPr=r(aHe," \u2014 "),soe=n(aHe,"A",{href:!0});var pta=s(soe);cPr=r(pta,"TFData2VecVisionModel"),pta.forEach(t),mPr=r(aHe," (Data2VecVision model)"),aHe.forEach(t),fPr=i(D),u5=n(D,"LI",{});var nHe=s(u5);VAe=n(nHe,"STRONG",{});var _ta=s(VAe);gPr=r(_ta,"deberta"),_ta.forEach(t),hPr=r(nHe," \u2014 "),loe=n(nHe,"A",{href:!0});var bta=s(loe);uPr=r(bta,"TFDebertaModel"),bta.forEach(t),pPr=r(nHe," (DeBERTa model)"),nHe.forEach(t),_Pr=i(D),p5=n(D,"LI",{});var sHe=s(p5);XAe=n(sHe,"STRONG",{});var vta=s(XAe);bPr=r(vta,"deberta-v2"),vta.forEach(t),vPr=r(sHe," \u2014 "),ioe=n(sHe,"A",{href:!0});var Fta=s(ioe);FPr=r(Fta,"TFDebertaV2Model"),Fta.forEach(t),TPr=r(sHe," (DeBERTa-v2 model)"),sHe.forEach(t),MPr=i(D),_5=n(D,"LI",{});var lHe=s(_5);zAe=n(lHe,"STRONG",{});var Tta=s(zAe);EPr=r(Tta,"deit"),Tta.forEach(t),CPr=r(lHe," \u2014 "),doe=n(lHe,"A",{href:!0});var Mta=s(doe);wPr=r(Mta,"TFDeiTModel"),Mta.forEach(t),APr=r(lHe," (DeiT model)"),lHe.forEach(t),LPr=i(D),b5=n(D,"LI",{});var iHe=s(b5);QAe=n(iHe,"STRONG",{});var Eta=s(QAe);yPr=r(Eta,"distilbert"),Eta.forEach(t),xPr=r(iHe," \u2014 "),coe=n(iHe,"A",{href:!0});var Cta=s(coe);$Pr=r(Cta,"TFDistilBertModel"),Cta.forEach(t),kPr=r(iHe," (DistilBERT model)"),iHe.forEach(t),SPr=i(D),v5=n(D,"LI",{});var dHe=s(v5);WAe=n(dHe,"STRONG",{});var wta=s(WAe);RPr=r(wta,"dpr"),wta.forEach(t),PPr=r(dHe," \u2014 "),moe=n(dHe,"A",{href:!0});var Ata=s(moe);BPr=r(Ata,"TFDPRQuestionEncoder"),Ata.forEach(t),IPr=r(dHe," (DPR model)"),dHe.forEach(t),NPr=i(D),F5=n(D,"LI",{});var cHe=s(F5);UAe=n(cHe,"STRONG",{});var Lta=s(UAe);qPr=r(Lta,"electra"),Lta.forEach(t),jPr=r(cHe," \u2014 "),foe=n(cHe,"A",{href:!0});var yta=s(foe);DPr=r(yta,"TFElectraModel"),yta.forEach(t),GPr=r(cHe," (ELECTRA model)"),cHe.forEach(t),OPr=i(D),T5=n(D,"LI",{});var mHe=s(T5);HAe=n(mHe,"STRONG",{});var xta=s(HAe);VPr=r(xta,"flaubert"),xta.forEach(t),XPr=r(mHe," \u2014 "),goe=n(mHe,"A",{href:!0});var $ta=s(goe);zPr=r($ta,"TFFlaubertModel"),$ta.forEach(t),QPr=r(mHe," (FlauBERT model)"),mHe.forEach(t),WPr=i(D),wl=n(D,"LI",{});var LI=s(wl);JAe=n(LI,"STRONG",{});var kta=s(JAe);UPr=r(kta,"funnel"),kta.forEach(t),HPr=r(LI," \u2014 "),hoe=n(LI,"A",{href:!0});var Sta=s(hoe);JPr=r(Sta,"TFFunnelModel"),Sta.forEach(t),YPr=r(LI," or "),uoe=n(LI,"A",{href:!0});var Rta=s(uoe);ZPr=r(Rta,"TFFunnelBaseModel"),Rta.forEach(t),KPr=r(LI," (Funnel Transformer model)"),LI.forEach(t),eBr=i(D),M5=n(D,"LI",{});var fHe=s(M5);YAe=n(fHe,"STRONG",{});var Pta=s(YAe);oBr=r(Pta,"gpt2"),Pta.forEach(t),rBr=r(fHe," \u2014 "),poe=n(fHe,"A",{href:!0});var Bta=s(poe);tBr=r(Bta,"TFGPT2Model"),Bta.forEach(t),aBr=r(fHe," (OpenAI GPT-2 model)"),fHe.forEach(t),nBr=i(D),E5=n(D,"LI",{});var gHe=s(E5);ZAe=n(gHe,"STRONG",{});var Ita=s(ZAe);sBr=r(Ita,"gptj"),Ita.forEach(t),lBr=r(gHe," \u2014 "),_oe=n(gHe,"A",{href:!0});var Nta=s(_oe);iBr=r(Nta,"TFGPTJModel"),Nta.forEach(t),dBr=r(gHe," (GPT-J model)"),gHe.forEach(t),cBr=i(D),C5=n(D,"LI",{});var hHe=s(C5);KAe=n(hHe,"STRONG",{});var qta=s(KAe);mBr=r(qta,"groupvit"),qta.forEach(t),fBr=r(hHe," \u2014 "),boe=n(hHe,"A",{href:!0});var jta=s(boe);gBr=r(jta,"TFGroupViTModel"),jta.forEach(t),hBr=r(hHe," (GroupViT model)"),hHe.forEach(t),uBr=i(D),w5=n(D,"LI",{});var uHe=s(w5);e6e=n(uHe,"STRONG",{});var Dta=s(e6e);pBr=r(Dta,"hubert"),Dta.forEach(t),_Br=r(uHe," \u2014 "),voe=n(uHe,"A",{href:!0});var Gta=s(voe);bBr=r(Gta,"TFHubertModel"),Gta.forEach(t),vBr=r(uHe," (Hubert model)"),uHe.forEach(t),FBr=i(D),A5=n(D,"LI",{});var pHe=s(A5);o6e=n(pHe,"STRONG",{});var Ota=s(o6e);TBr=r(Ota,"layoutlm"),Ota.forEach(t),MBr=r(pHe," \u2014 "),Foe=n(pHe,"A",{href:!0});var Vta=s(Foe);EBr=r(Vta,"TFLayoutLMModel"),Vta.forEach(t),CBr=r(pHe," (LayoutLM model)"),pHe.forEach(t),wBr=i(D),L5=n(D,"LI",{});var _He=s(L5);r6e=n(_He,"STRONG",{});var Xta=s(r6e);ABr=r(Xta,"layoutlmv3"),Xta.forEach(t),LBr=r(_He," \u2014 "),Toe=n(_He,"A",{href:!0});var zta=s(Toe);yBr=r(zta,"TFLayoutLMv3Model"),zta.forEach(t),xBr=r(_He," (LayoutLMv3 model)"),_He.forEach(t),$Br=i(D),y5=n(D,"LI",{});var bHe=s(y5);t6e=n(bHe,"STRONG",{});var Qta=s(t6e);kBr=r(Qta,"led"),Qta.forEach(t),SBr=r(bHe," \u2014 "),Moe=n(bHe,"A",{href:!0});var Wta=s(Moe);RBr=r(Wta,"TFLEDModel"),Wta.forEach(t),PBr=r(bHe," (LED model)"),bHe.forEach(t),BBr=i(D),x5=n(D,"LI",{});var vHe=s(x5);a6e=n(vHe,"STRONG",{});var Uta=s(a6e);IBr=r(Uta,"longformer"),Uta.forEach(t),NBr=r(vHe," \u2014 "),Eoe=n(vHe,"A",{href:!0});var Hta=s(Eoe);qBr=r(Hta,"TFLongformerModel"),Hta.forEach(t),jBr=r(vHe," (Longformer model)"),vHe.forEach(t),DBr=i(D),$5=n(D,"LI",{});var FHe=s($5);n6e=n(FHe,"STRONG",{});var Jta=s(n6e);GBr=r(Jta,"lxmert"),Jta.forEach(t),OBr=r(FHe," \u2014 "),Coe=n(FHe,"A",{href:!0});var Yta=s(Coe);VBr=r(Yta,"TFLxmertModel"),Yta.forEach(t),XBr=r(FHe," (LXMERT model)"),FHe.forEach(t),zBr=i(D),k5=n(D,"LI",{});var THe=s(k5);s6e=n(THe,"STRONG",{});var Zta=s(s6e);QBr=r(Zta,"marian"),Zta.forEach(t),WBr=r(THe," \u2014 "),woe=n(THe,"A",{href:!0});var Kta=s(woe);UBr=r(Kta,"TFMarianModel"),Kta.forEach(t),HBr=r(THe," (Marian model)"),THe.forEach(t),JBr=i(D),S5=n(D,"LI",{});var MHe=s(S5);l6e=n(MHe,"STRONG",{});var eaa=s(l6e);YBr=r(eaa,"mbart"),eaa.forEach(t),ZBr=r(MHe," \u2014 "),Aoe=n(MHe,"A",{href:!0});var oaa=s(Aoe);KBr=r(oaa,"TFMBartModel"),oaa.forEach(t),eIr=r(MHe," (mBART model)"),MHe.forEach(t),oIr=i(D),R5=n(D,"LI",{});var EHe=s(R5);i6e=n(EHe,"STRONG",{});var raa=s(i6e);rIr=r(raa,"mobilebert"),raa.forEach(t),tIr=r(EHe," \u2014 "),Loe=n(EHe,"A",{href:!0});var taa=s(Loe);aIr=r(taa,"TFMobileBertModel"),taa.forEach(t),nIr=r(EHe," (MobileBERT model)"),EHe.forEach(t),sIr=i(D),P5=n(D,"LI",{});var CHe=s(P5);d6e=n(CHe,"STRONG",{});var aaa=s(d6e);lIr=r(aaa,"mobilevit"),aaa.forEach(t),iIr=r(CHe," \u2014 "),yoe=n(CHe,"A",{href:!0});var naa=s(yoe);dIr=r(naa,"TFMobileViTModel"),naa.forEach(t),cIr=r(CHe," (MobileViT model)"),CHe.forEach(t),mIr=i(D),B5=n(D,"LI",{});var wHe=s(B5);c6e=n(wHe,"STRONG",{});var saa=s(c6e);fIr=r(saa,"mpnet"),saa.forEach(t),gIr=r(wHe," \u2014 "),xoe=n(wHe,"A",{href:!0});var laa=s(xoe);hIr=r(laa,"TFMPNetModel"),laa.forEach(t),uIr=r(wHe," (MPNet model)"),wHe.forEach(t),pIr=i(D),I5=n(D,"LI",{});var AHe=s(I5);m6e=n(AHe,"STRONG",{});var iaa=s(m6e);_Ir=r(iaa,"mt5"),iaa.forEach(t),bIr=r(AHe," \u2014 "),$oe=n(AHe,"A",{href:!0});var daa=s($oe);vIr=r(daa,"TFMT5Model"),daa.forEach(t),FIr=r(AHe," (MT5 model)"),AHe.forEach(t),TIr=i(D),N5=n(D,"LI",{});var LHe=s(N5);f6e=n(LHe,"STRONG",{});var caa=s(f6e);MIr=r(caa,"openai-gpt"),caa.forEach(t),EIr=r(LHe," \u2014 "),koe=n(LHe,"A",{href:!0});var maa=s(koe);CIr=r(maa,"TFOpenAIGPTModel"),maa.forEach(t),wIr=r(LHe," (OpenAI GPT model)"),LHe.forEach(t),AIr=i(D),q5=n(D,"LI",{});var yHe=s(q5);g6e=n(yHe,"STRONG",{});var faa=s(g6e);LIr=r(faa,"opt"),faa.forEach(t),yIr=r(yHe," \u2014 "),Soe=n(yHe,"A",{href:!0});var gaa=s(Soe);xIr=r(gaa,"TFOPTModel"),gaa.forEach(t),$Ir=r(yHe," (OPT model)"),yHe.forEach(t),kIr=i(D),j5=n(D,"LI",{});var xHe=s(j5);h6e=n(xHe,"STRONG",{});var haa=s(h6e);SIr=r(haa,"pegasus"),haa.forEach(t),RIr=r(xHe," \u2014 "),Roe=n(xHe,"A",{href:!0});var uaa=s(Roe);PIr=r(uaa,"TFPegasusModel"),uaa.forEach(t),BIr=r(xHe," (Pegasus model)"),xHe.forEach(t),IIr=i(D),D5=n(D,"LI",{});var $He=s(D5);u6e=n($He,"STRONG",{});var paa=s(u6e);NIr=r(paa,"regnet"),paa.forEach(t),qIr=r($He," \u2014 "),Poe=n($He,"A",{href:!0});var _aa=s(Poe);jIr=r(_aa,"TFRegNetModel"),_aa.forEach(t),DIr=r($He," (RegNet model)"),$He.forEach(t),GIr=i(D),G5=n(D,"LI",{});var kHe=s(G5);p6e=n(kHe,"STRONG",{});var baa=s(p6e);OIr=r(baa,"rembert"),baa.forEach(t),VIr=r(kHe," \u2014 "),Boe=n(kHe,"A",{href:!0});var vaa=s(Boe);XIr=r(vaa,"TFRemBertModel"),vaa.forEach(t),zIr=r(kHe," (RemBERT model)"),kHe.forEach(t),QIr=i(D),O5=n(D,"LI",{});var SHe=s(O5);_6e=n(SHe,"STRONG",{});var Faa=s(_6e);WIr=r(Faa,"resnet"),Faa.forEach(t),UIr=r(SHe," \u2014 "),Ioe=n(SHe,"A",{href:!0});var Taa=s(Ioe);HIr=r(Taa,"TFResNetModel"),Taa.forEach(t),JIr=r(SHe," (ResNet model)"),SHe.forEach(t),YIr=i(D),V5=n(D,"LI",{});var RHe=s(V5);b6e=n(RHe,"STRONG",{});var Maa=s(b6e);ZIr=r(Maa,"roberta"),Maa.forEach(t),KIr=r(RHe," \u2014 "),Noe=n(RHe,"A",{href:!0});var Eaa=s(Noe);eNr=r(Eaa,"TFRobertaModel"),Eaa.forEach(t),oNr=r(RHe," (RoBERTa model)"),RHe.forEach(t),rNr=i(D),X5=n(D,"LI",{});var PHe=s(X5);v6e=n(PHe,"STRONG",{});var Caa=s(v6e);tNr=r(Caa,"roformer"),Caa.forEach(t),aNr=r(PHe," \u2014 "),qoe=n(PHe,"A",{href:!0});var waa=s(qoe);nNr=r(waa,"TFRoFormerModel"),waa.forEach(t),sNr=r(PHe," (RoFormer model)"),PHe.forEach(t),lNr=i(D),z5=n(D,"LI",{});var BHe=s(z5);F6e=n(BHe,"STRONG",{});var Aaa=s(F6e);iNr=r(Aaa,"segformer"),Aaa.forEach(t),dNr=r(BHe," \u2014 "),joe=n(BHe,"A",{href:!0});var Laa=s(joe);cNr=r(Laa,"TFSegformerModel"),Laa.forEach(t),mNr=r(BHe," (SegFormer model)"),BHe.forEach(t),fNr=i(D),Q5=n(D,"LI",{});var IHe=s(Q5);T6e=n(IHe,"STRONG",{});var yaa=s(T6e);gNr=r(yaa,"speech_to_text"),yaa.forEach(t),hNr=r(IHe," \u2014 "),Doe=n(IHe,"A",{href:!0});var xaa=s(Doe);uNr=r(xaa,"TFSpeech2TextModel"),xaa.forEach(t),pNr=r(IHe," (Speech2Text model)"),IHe.forEach(t),_Nr=i(D),W5=n(D,"LI",{});var NHe=s(W5);M6e=n(NHe,"STRONG",{});var $aa=s(M6e);bNr=r($aa,"swin"),$aa.forEach(t),vNr=r(NHe," \u2014 "),Goe=n(NHe,"A",{href:!0});var kaa=s(Goe);FNr=r(kaa,"TFSwinModel"),kaa.forEach(t),TNr=r(NHe," (Swin Transformer model)"),NHe.forEach(t),MNr=i(D),U5=n(D,"LI",{});var qHe=s(U5);E6e=n(qHe,"STRONG",{});var Saa=s(E6e);ENr=r(Saa,"t5"),Saa.forEach(t),CNr=r(qHe," \u2014 "),Ooe=n(qHe,"A",{href:!0});var Raa=s(Ooe);wNr=r(Raa,"TFT5Model"),Raa.forEach(t),ANr=r(qHe," (T5 model)"),qHe.forEach(t),LNr=i(D),H5=n(D,"LI",{});var jHe=s(H5);C6e=n(jHe,"STRONG",{});var Paa=s(C6e);yNr=r(Paa,"tapas"),Paa.forEach(t),xNr=r(jHe," \u2014 "),Voe=n(jHe,"A",{href:!0});var Baa=s(Voe);$Nr=r(Baa,"TFTapasModel"),Baa.forEach(t),kNr=r(jHe," (TAPAS model)"),jHe.forEach(t),SNr=i(D),J5=n(D,"LI",{});var DHe=s(J5);w6e=n(DHe,"STRONG",{});var Iaa=s(w6e);RNr=r(Iaa,"transfo-xl"),Iaa.forEach(t),PNr=r(DHe," \u2014 "),Xoe=n(DHe,"A",{href:!0});var Naa=s(Xoe);BNr=r(Naa,"TFTransfoXLModel"),Naa.forEach(t),INr=r(DHe," (Transformer-XL model)"),DHe.forEach(t),NNr=i(D),Y5=n(D,"LI",{});var GHe=s(Y5);A6e=n(GHe,"STRONG",{});var qaa=s(A6e);qNr=r(qaa,"vit"),qaa.forEach(t),jNr=r(GHe," \u2014 "),zoe=n(GHe,"A",{href:!0});var jaa=s(zoe);DNr=r(jaa,"TFViTModel"),jaa.forEach(t),GNr=r(GHe," (ViT model)"),GHe.forEach(t),ONr=i(D),Z5=n(D,"LI",{});var OHe=s(Z5);L6e=n(OHe,"STRONG",{});var Daa=s(L6e);VNr=r(Daa,"vit_mae"),Daa.forEach(t),XNr=r(OHe," \u2014 "),Qoe=n(OHe,"A",{href:!0});var Gaa=s(Qoe);zNr=r(Gaa,"TFViTMAEModel"),Gaa.forEach(t),QNr=r(OHe," (ViTMAE model)"),OHe.forEach(t),WNr=i(D),K5=n(D,"LI",{});var VHe=s(K5);y6e=n(VHe,"STRONG",{});var Oaa=s(y6e);UNr=r(Oaa,"wav2vec2"),Oaa.forEach(t),HNr=r(VHe," \u2014 "),Woe=n(VHe,"A",{href:!0});var Vaa=s(Woe);JNr=r(Vaa,"TFWav2Vec2Model"),Vaa.forEach(t),YNr=r(VHe," (Wav2Vec2 model)"),VHe.forEach(t),ZNr=i(D),e0=n(D,"LI",{});var XHe=s(e0);x6e=n(XHe,"STRONG",{});var Xaa=s(x6e);KNr=r(Xaa,"xglm"),Xaa.forEach(t),eqr=r(XHe," \u2014 "),Uoe=n(XHe,"A",{href:!0});var zaa=s(Uoe);oqr=r(zaa,"TFXGLMModel"),zaa.forEach(t),rqr=r(XHe," (XGLM model)"),XHe.forEach(t),tqr=i(D),o0=n(D,"LI",{});var zHe=s(o0);$6e=n(zHe,"STRONG",{});var Qaa=s($6e);aqr=r(Qaa,"xlm"),Qaa.forEach(t),nqr=r(zHe," \u2014 "),Hoe=n(zHe,"A",{href:!0});var Waa=s(Hoe);sqr=r(Waa,"TFXLMModel"),Waa.forEach(t),lqr=r(zHe," (XLM model)"),zHe.forEach(t),iqr=i(D),r0=n(D,"LI",{});var QHe=s(r0);k6e=n(QHe,"STRONG",{});var Uaa=s(k6e);dqr=r(Uaa,"xlm-roberta"),Uaa.forEach(t),cqr=r(QHe," \u2014 "),Joe=n(QHe,"A",{href:!0});var Haa=s(Joe);mqr=r(Haa,"TFXLMRobertaModel"),Haa.forEach(t),fqr=r(QHe," (XLM-RoBERTa model)"),QHe.forEach(t),gqr=i(D),t0=n(D,"LI",{});var WHe=s(t0);S6e=n(WHe,"STRONG",{});var Jaa=s(S6e);hqr=r(Jaa,"xlnet"),Jaa.forEach(t),uqr=r(WHe," \u2014 "),Yoe=n(WHe,"A",{href:!0});var Yaa=s(Yoe);pqr=r(Yaa,"TFXLNetModel"),Yaa.forEach(t),_qr=r(WHe," (XLNet model)"),WHe.forEach(t),D.forEach(t),bqr=i(ii),T(a0.$$.fragment,ii),ii.forEach(t),li.forEach(t),vro=i(m),om=n(m,"H2",{class:!0});var Bao=s(om);n0=n(Bao,"A",{id:!0,class:!0,href:!0});var Zaa=s(n0);R6e=n(Zaa,"SPAN",{});var Kaa=s(R6e);T(xS.$$.fragment,Kaa),Kaa.forEach(t),Zaa.forEach(t),vqr=i(Bao),P6e=n(Bao,"SPAN",{});var ena=s(P6e);Fqr=r(ena,"TFAutoModelForPreTraining"),ena.forEach(t),Bao.forEach(t),Fro=i(m),dr=n(m,"DIV",{class:!0});var di=s(dr);T($S.$$.fragment,di),Tqr=i(di),rm=n(di,"P",{});var Ode=s(rm);Mqr=r(Ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zoe=n(Ode,"A",{href:!0});var ona=s(Zoe);Eqr=r(ona,"from_pretrained()"),ona.forEach(t),Cqr=r(Ode," class method or the "),Koe=n(Ode,"A",{href:!0});var rna=s(Koe);wqr=r(rna,"from_config()"),rna.forEach(t),Aqr=r(Ode,` class
method.`),Ode.forEach(t),Lqr=i(di),kS=n(di,"P",{});var Iao=s(kS);yqr=r(Iao,"This class cannot be instantiated directly using "),B6e=n(Iao,"CODE",{});var tna=s(B6e);xqr=r(tna,"__init__()"),tna.forEach(t),$qr=r(Iao," (throws an error)."),Iao.forEach(t),kqr=i(di),Ut=n(di,"DIV",{class:!0});var T9=s(Ut);T(SS.$$.fragment,T9),Sqr=i(T9),I6e=n(T9,"P",{});var ana=s(I6e);Rqr=r(ana,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ana.forEach(t),Pqr=i(T9),tm=n(T9,"P",{});var Vde=s(tm);Bqr=r(Vde,`Note:
Loading a model from its configuration file does `),N6e=n(Vde,"STRONG",{});var nna=s(N6e);Iqr=r(nna,"not"),nna.forEach(t),Nqr=r(Vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ere=n(Vde,"A",{href:!0});var sna=s(ere);qqr=r(sna,"from_pretrained()"),sna.forEach(t),jqr=r(Vde," to load the model weights."),Vde.forEach(t),Dqr=i(T9),T(s0.$$.fragment,T9),T9.forEach(t),Gqr=i(di),jr=n(di,"DIV",{class:!0});var ci=s(jr);T(RS.$$.fragment,ci),Oqr=i(ci),q6e=n(ci,"P",{});var lna=s(q6e);Vqr=r(lna,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lna.forEach(t),Xqr=i(ci),kn=n(ci,"P",{});var M9=s(kn);zqr=r(M9,"The model class to instantiate is selected based on the "),j6e=n(M9,"CODE",{});var ina=s(j6e);Qqr=r(ina,"model_type"),ina.forEach(t),Wqr=r(M9,` property of the config object (either
passed as an argument or loaded from `),D6e=n(M9,"CODE",{});var dna=s(D6e);Uqr=r(dna,"pretrained_model_name_or_path"),dna.forEach(t),Hqr=r(M9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(M9,"CODE",{});var cna=s(G6e);Jqr=r(cna,"pretrained_model_name_or_path"),cna.forEach(t),Yqr=r(M9,":"),M9.forEach(t),Zqr=i(ci),le=n(ci,"UL",{});var de=s(le);l0=n(de,"LI",{});var UHe=s(l0);O6e=n(UHe,"STRONG",{});var mna=s(O6e);Kqr=r(mna,"albert"),mna.forEach(t),ejr=r(UHe," \u2014 "),ore=n(UHe,"A",{href:!0});var fna=s(ore);ojr=r(fna,"TFAlbertForPreTraining"),fna.forEach(t),rjr=r(UHe," (ALBERT model)"),UHe.forEach(t),tjr=i(de),i0=n(de,"LI",{});var HHe=s(i0);V6e=n(HHe,"STRONG",{});var gna=s(V6e);ajr=r(gna,"bart"),gna.forEach(t),njr=r(HHe," \u2014 "),rre=n(HHe,"A",{href:!0});var hna=s(rre);sjr=r(hna,"TFBartForConditionalGeneration"),hna.forEach(t),ljr=r(HHe," (BART model)"),HHe.forEach(t),ijr=i(de),d0=n(de,"LI",{});var JHe=s(d0);X6e=n(JHe,"STRONG",{});var una=s(X6e);djr=r(una,"bert"),una.forEach(t),cjr=r(JHe," \u2014 "),tre=n(JHe,"A",{href:!0});var pna=s(tre);mjr=r(pna,"TFBertForPreTraining"),pna.forEach(t),fjr=r(JHe," (BERT model)"),JHe.forEach(t),gjr=i(de),c0=n(de,"LI",{});var YHe=s(c0);z6e=n(YHe,"STRONG",{});var _na=s(z6e);hjr=r(_na,"camembert"),_na.forEach(t),ujr=r(YHe," \u2014 "),are=n(YHe,"A",{href:!0});var bna=s(are);pjr=r(bna,"TFCamembertForMaskedLM"),bna.forEach(t),_jr=r(YHe," (CamemBERT model)"),YHe.forEach(t),bjr=i(de),m0=n(de,"LI",{});var ZHe=s(m0);Q6e=n(ZHe,"STRONG",{});var vna=s(Q6e);vjr=r(vna,"ctrl"),vna.forEach(t),Fjr=r(ZHe," \u2014 "),nre=n(ZHe,"A",{href:!0});var Fna=s(nre);Tjr=r(Fna,"TFCTRLLMHeadModel"),Fna.forEach(t),Mjr=r(ZHe," (CTRL model)"),ZHe.forEach(t),Ejr=i(de),f0=n(de,"LI",{});var KHe=s(f0);W6e=n(KHe,"STRONG",{});var Tna=s(W6e);Cjr=r(Tna,"distilbert"),Tna.forEach(t),wjr=r(KHe," \u2014 "),sre=n(KHe,"A",{href:!0});var Mna=s(sre);Ajr=r(Mna,"TFDistilBertForMaskedLM"),Mna.forEach(t),Ljr=r(KHe," (DistilBERT model)"),KHe.forEach(t),yjr=i(de),g0=n(de,"LI",{});var eJe=s(g0);U6e=n(eJe,"STRONG",{});var Ena=s(U6e);xjr=r(Ena,"electra"),Ena.forEach(t),$jr=r(eJe," \u2014 "),lre=n(eJe,"A",{href:!0});var Cna=s(lre);kjr=r(Cna,"TFElectraForPreTraining"),Cna.forEach(t),Sjr=r(eJe," (ELECTRA model)"),eJe.forEach(t),Rjr=i(de),h0=n(de,"LI",{});var oJe=s(h0);H6e=n(oJe,"STRONG",{});var wna=s(H6e);Pjr=r(wna,"flaubert"),wna.forEach(t),Bjr=r(oJe," \u2014 "),ire=n(oJe,"A",{href:!0});var Ana=s(ire);Ijr=r(Ana,"TFFlaubertWithLMHeadModel"),Ana.forEach(t),Njr=r(oJe," (FlauBERT model)"),oJe.forEach(t),qjr=i(de),u0=n(de,"LI",{});var rJe=s(u0);J6e=n(rJe,"STRONG",{});var Lna=s(J6e);jjr=r(Lna,"funnel"),Lna.forEach(t),Djr=r(rJe," \u2014 "),dre=n(rJe,"A",{href:!0});var yna=s(dre);Gjr=r(yna,"TFFunnelForPreTraining"),yna.forEach(t),Ojr=r(rJe," (Funnel Transformer model)"),rJe.forEach(t),Vjr=i(de),p0=n(de,"LI",{});var tJe=s(p0);Y6e=n(tJe,"STRONG",{});var xna=s(Y6e);Xjr=r(xna,"gpt2"),xna.forEach(t),zjr=r(tJe," \u2014 "),cre=n(tJe,"A",{href:!0});var $na=s(cre);Qjr=r($na,"TFGPT2LMHeadModel"),$na.forEach(t),Wjr=r(tJe," (OpenAI GPT-2 model)"),tJe.forEach(t),Ujr=i(de),_0=n(de,"LI",{});var aJe=s(_0);Z6e=n(aJe,"STRONG",{});var kna=s(Z6e);Hjr=r(kna,"layoutlm"),kna.forEach(t),Jjr=r(aJe," \u2014 "),mre=n(aJe,"A",{href:!0});var Sna=s(mre);Yjr=r(Sna,"TFLayoutLMForMaskedLM"),Sna.forEach(t),Zjr=r(aJe," (LayoutLM model)"),aJe.forEach(t),Kjr=i(de),b0=n(de,"LI",{});var nJe=s(b0);K6e=n(nJe,"STRONG",{});var Rna=s(K6e);eDr=r(Rna,"lxmert"),Rna.forEach(t),oDr=r(nJe," \u2014 "),fre=n(nJe,"A",{href:!0});var Pna=s(fre);rDr=r(Pna,"TFLxmertForPreTraining"),Pna.forEach(t),tDr=r(nJe," (LXMERT model)"),nJe.forEach(t),aDr=i(de),v0=n(de,"LI",{});var sJe=s(v0);e7e=n(sJe,"STRONG",{});var Bna=s(e7e);nDr=r(Bna,"mobilebert"),Bna.forEach(t),sDr=r(sJe," \u2014 "),gre=n(sJe,"A",{href:!0});var Ina=s(gre);lDr=r(Ina,"TFMobileBertForPreTraining"),Ina.forEach(t),iDr=r(sJe," (MobileBERT model)"),sJe.forEach(t),dDr=i(de),F0=n(de,"LI",{});var lJe=s(F0);o7e=n(lJe,"STRONG",{});var Nna=s(o7e);cDr=r(Nna,"mpnet"),Nna.forEach(t),mDr=r(lJe," \u2014 "),hre=n(lJe,"A",{href:!0});var qna=s(hre);fDr=r(qna,"TFMPNetForMaskedLM"),qna.forEach(t),gDr=r(lJe," (MPNet model)"),lJe.forEach(t),hDr=i(de),T0=n(de,"LI",{});var iJe=s(T0);r7e=n(iJe,"STRONG",{});var jna=s(r7e);uDr=r(jna,"openai-gpt"),jna.forEach(t),pDr=r(iJe," \u2014 "),ure=n(iJe,"A",{href:!0});var Dna=s(ure);_Dr=r(Dna,"TFOpenAIGPTLMHeadModel"),Dna.forEach(t),bDr=r(iJe," (OpenAI GPT model)"),iJe.forEach(t),vDr=i(de),M0=n(de,"LI",{});var dJe=s(M0);t7e=n(dJe,"STRONG",{});var Gna=s(t7e);FDr=r(Gna,"roberta"),Gna.forEach(t),TDr=r(dJe," \u2014 "),pre=n(dJe,"A",{href:!0});var Ona=s(pre);MDr=r(Ona,"TFRobertaForMaskedLM"),Ona.forEach(t),EDr=r(dJe," (RoBERTa model)"),dJe.forEach(t),CDr=i(de),E0=n(de,"LI",{});var cJe=s(E0);a7e=n(cJe,"STRONG",{});var Vna=s(a7e);wDr=r(Vna,"t5"),Vna.forEach(t),ADr=r(cJe," \u2014 "),_re=n(cJe,"A",{href:!0});var Xna=s(_re);LDr=r(Xna,"TFT5ForConditionalGeneration"),Xna.forEach(t),yDr=r(cJe," (T5 model)"),cJe.forEach(t),xDr=i(de),C0=n(de,"LI",{});var mJe=s(C0);n7e=n(mJe,"STRONG",{});var zna=s(n7e);$Dr=r(zna,"tapas"),zna.forEach(t),kDr=r(mJe," \u2014 "),bre=n(mJe,"A",{href:!0});var Qna=s(bre);SDr=r(Qna,"TFTapasForMaskedLM"),Qna.forEach(t),RDr=r(mJe," (TAPAS model)"),mJe.forEach(t),PDr=i(de),w0=n(de,"LI",{});var fJe=s(w0);s7e=n(fJe,"STRONG",{});var Wna=s(s7e);BDr=r(Wna,"transfo-xl"),Wna.forEach(t),IDr=r(fJe," \u2014 "),vre=n(fJe,"A",{href:!0});var Una=s(vre);NDr=r(Una,"TFTransfoXLLMHeadModel"),Una.forEach(t),qDr=r(fJe," (Transformer-XL model)"),fJe.forEach(t),jDr=i(de),A0=n(de,"LI",{});var gJe=s(A0);l7e=n(gJe,"STRONG",{});var Hna=s(l7e);DDr=r(Hna,"vit_mae"),Hna.forEach(t),GDr=r(gJe," \u2014 "),Fre=n(gJe,"A",{href:!0});var Jna=s(Fre);ODr=r(Jna,"TFViTMAEForPreTraining"),Jna.forEach(t),VDr=r(gJe," (ViTMAE model)"),gJe.forEach(t),XDr=i(de),L0=n(de,"LI",{});var hJe=s(L0);i7e=n(hJe,"STRONG",{});var Yna=s(i7e);zDr=r(Yna,"xlm"),Yna.forEach(t),QDr=r(hJe," \u2014 "),Tre=n(hJe,"A",{href:!0});var Zna=s(Tre);WDr=r(Zna,"TFXLMWithLMHeadModel"),Zna.forEach(t),UDr=r(hJe," (XLM model)"),hJe.forEach(t),HDr=i(de),y0=n(de,"LI",{});var uJe=s(y0);d7e=n(uJe,"STRONG",{});var Kna=s(d7e);JDr=r(Kna,"xlm-roberta"),Kna.forEach(t),YDr=r(uJe," \u2014 "),Mre=n(uJe,"A",{href:!0});var esa=s(Mre);ZDr=r(esa,"TFXLMRobertaForMaskedLM"),esa.forEach(t),KDr=r(uJe," (XLM-RoBERTa model)"),uJe.forEach(t),eGr=i(de),x0=n(de,"LI",{});var pJe=s(x0);c7e=n(pJe,"STRONG",{});var osa=s(c7e);oGr=r(osa,"xlnet"),osa.forEach(t),rGr=r(pJe," \u2014 "),Ere=n(pJe,"A",{href:!0});var rsa=s(Ere);tGr=r(rsa,"TFXLNetLMHeadModel"),rsa.forEach(t),aGr=r(pJe," (XLNet model)"),pJe.forEach(t),de.forEach(t),nGr=i(ci),T($0.$$.fragment,ci),ci.forEach(t),di.forEach(t),Tro=i(m),am=n(m,"H2",{class:!0});var Nao=s(am);k0=n(Nao,"A",{id:!0,class:!0,href:!0});var tsa=s(k0);m7e=n(tsa,"SPAN",{});var asa=s(m7e);T(PS.$$.fragment,asa),asa.forEach(t),tsa.forEach(t),sGr=i(Nao),f7e=n(Nao,"SPAN",{});var nsa=s(f7e);lGr=r(nsa,"TFAutoModelForCausalLM"),nsa.forEach(t),Nao.forEach(t),Mro=i(m),cr=n(m,"DIV",{class:!0});var mi=s(cr);T(BS.$$.fragment,mi),iGr=i(mi),nm=n(mi,"P",{});var Xde=s(nm);dGr=r(Xde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cre=n(Xde,"A",{href:!0});var ssa=s(Cre);cGr=r(ssa,"from_pretrained()"),ssa.forEach(t),mGr=r(Xde," class method or the "),wre=n(Xde,"A",{href:!0});var lsa=s(wre);fGr=r(lsa,"from_config()"),lsa.forEach(t),gGr=r(Xde,` class
method.`),Xde.forEach(t),hGr=i(mi),IS=n(mi,"P",{});var qao=s(IS);uGr=r(qao,"This class cannot be instantiated directly using "),g7e=n(qao,"CODE",{});var isa=s(g7e);pGr=r(isa,"__init__()"),isa.forEach(t),_Gr=r(qao," (throws an error)."),qao.forEach(t),bGr=i(mi),Ht=n(mi,"DIV",{class:!0});var E9=s(Ht);T(NS.$$.fragment,E9),vGr=i(E9),h7e=n(E9,"P",{});var dsa=s(h7e);FGr=r(dsa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dsa.forEach(t),TGr=i(E9),sm=n(E9,"P",{});var zde=s(sm);MGr=r(zde,`Note:
Loading a model from its configuration file does `),u7e=n(zde,"STRONG",{});var csa=s(u7e);EGr=r(csa,"not"),csa.forEach(t),CGr=r(zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(zde,"A",{href:!0});var msa=s(Are);wGr=r(msa,"from_pretrained()"),msa.forEach(t),AGr=r(zde," to load the model weights."),zde.forEach(t),LGr=i(E9),T(S0.$$.fragment,E9),E9.forEach(t),yGr=i(mi),Dr=n(mi,"DIV",{class:!0});var fi=s(Dr);T(qS.$$.fragment,fi),xGr=i(fi),p7e=n(fi,"P",{});var fsa=s(p7e);$Gr=r(fsa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fsa.forEach(t),kGr=i(fi),Sn=n(fi,"P",{});var C9=s(Sn);SGr=r(C9,"The model class to instantiate is selected based on the "),_7e=n(C9,"CODE",{});var gsa=s(_7e);RGr=r(gsa,"model_type"),gsa.forEach(t),PGr=r(C9,` property of the config object (either
passed as an argument or loaded from `),b7e=n(C9,"CODE",{});var hsa=s(b7e);BGr=r(hsa,"pretrained_model_name_or_path"),hsa.forEach(t),IGr=r(C9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=n(C9,"CODE",{});var usa=s(v7e);NGr=r(usa,"pretrained_model_name_or_path"),usa.forEach(t),qGr=r(C9,":"),C9.forEach(t),jGr=i(fi),Me=n(fi,"UL",{});var Ce=s(Me);R0=n(Ce,"LI",{});var _Je=s(R0);F7e=n(_Je,"STRONG",{});var psa=s(F7e);DGr=r(psa,"bert"),psa.forEach(t),GGr=r(_Je," \u2014 "),Lre=n(_Je,"A",{href:!0});var _sa=s(Lre);OGr=r(_sa,"TFBertLMHeadModel"),_sa.forEach(t),VGr=r(_Je," (BERT model)"),_Je.forEach(t),XGr=i(Ce),P0=n(Ce,"LI",{});var bJe=s(P0);T7e=n(bJe,"STRONG",{});var bsa=s(T7e);zGr=r(bsa,"camembert"),bsa.forEach(t),QGr=r(bJe," \u2014 "),yre=n(bJe,"A",{href:!0});var vsa=s(yre);WGr=r(vsa,"TFCamembertForCausalLM"),vsa.forEach(t),UGr=r(bJe," (CamemBERT model)"),bJe.forEach(t),HGr=i(Ce),B0=n(Ce,"LI",{});var vJe=s(B0);M7e=n(vJe,"STRONG",{});var Fsa=s(M7e);JGr=r(Fsa,"ctrl"),Fsa.forEach(t),YGr=r(vJe," \u2014 "),xre=n(vJe,"A",{href:!0});var Tsa=s(xre);ZGr=r(Tsa,"TFCTRLLMHeadModel"),Tsa.forEach(t),KGr=r(vJe," (CTRL model)"),vJe.forEach(t),eOr=i(Ce),I0=n(Ce,"LI",{});var FJe=s(I0);E7e=n(FJe,"STRONG",{});var Msa=s(E7e);oOr=r(Msa,"gpt2"),Msa.forEach(t),rOr=r(FJe," \u2014 "),$re=n(FJe,"A",{href:!0});var Esa=s($re);tOr=r(Esa,"TFGPT2LMHeadModel"),Esa.forEach(t),aOr=r(FJe," (OpenAI GPT-2 model)"),FJe.forEach(t),nOr=i(Ce),N0=n(Ce,"LI",{});var TJe=s(N0);C7e=n(TJe,"STRONG",{});var Csa=s(C7e);sOr=r(Csa,"gptj"),Csa.forEach(t),lOr=r(TJe," \u2014 "),kre=n(TJe,"A",{href:!0});var wsa=s(kre);iOr=r(wsa,"TFGPTJForCausalLM"),wsa.forEach(t),dOr=r(TJe," (GPT-J model)"),TJe.forEach(t),cOr=i(Ce),q0=n(Ce,"LI",{});var MJe=s(q0);w7e=n(MJe,"STRONG",{});var Asa=s(w7e);mOr=r(Asa,"openai-gpt"),Asa.forEach(t),fOr=r(MJe," \u2014 "),Sre=n(MJe,"A",{href:!0});var Lsa=s(Sre);gOr=r(Lsa,"TFOpenAIGPTLMHeadModel"),Lsa.forEach(t),hOr=r(MJe," (OpenAI GPT model)"),MJe.forEach(t),uOr=i(Ce),j0=n(Ce,"LI",{});var EJe=s(j0);A7e=n(EJe,"STRONG",{});var ysa=s(A7e);pOr=r(ysa,"opt"),ysa.forEach(t),_Or=r(EJe," \u2014 "),Rre=n(EJe,"A",{href:!0});var xsa=s(Rre);bOr=r(xsa,"TFOPTForCausalLM"),xsa.forEach(t),vOr=r(EJe," (OPT model)"),EJe.forEach(t),FOr=i(Ce),D0=n(Ce,"LI",{});var CJe=s(D0);L7e=n(CJe,"STRONG",{});var $sa=s(L7e);TOr=r($sa,"rembert"),$sa.forEach(t),MOr=r(CJe," \u2014 "),Pre=n(CJe,"A",{href:!0});var ksa=s(Pre);EOr=r(ksa,"TFRemBertForCausalLM"),ksa.forEach(t),COr=r(CJe," (RemBERT model)"),CJe.forEach(t),wOr=i(Ce),G0=n(Ce,"LI",{});var wJe=s(G0);y7e=n(wJe,"STRONG",{});var Ssa=s(y7e);AOr=r(Ssa,"roberta"),Ssa.forEach(t),LOr=r(wJe," \u2014 "),Bre=n(wJe,"A",{href:!0});var Rsa=s(Bre);yOr=r(Rsa,"TFRobertaForCausalLM"),Rsa.forEach(t),xOr=r(wJe," (RoBERTa model)"),wJe.forEach(t),$Or=i(Ce),O0=n(Ce,"LI",{});var AJe=s(O0);x7e=n(AJe,"STRONG",{});var Psa=s(x7e);kOr=r(Psa,"roformer"),Psa.forEach(t),SOr=r(AJe," \u2014 "),Ire=n(AJe,"A",{href:!0});var Bsa=s(Ire);ROr=r(Bsa,"TFRoFormerForCausalLM"),Bsa.forEach(t),POr=r(AJe," (RoFormer model)"),AJe.forEach(t),BOr=i(Ce),V0=n(Ce,"LI",{});var LJe=s(V0);$7e=n(LJe,"STRONG",{});var Isa=s($7e);IOr=r(Isa,"transfo-xl"),Isa.forEach(t),NOr=r(LJe," \u2014 "),Nre=n(LJe,"A",{href:!0});var Nsa=s(Nre);qOr=r(Nsa,"TFTransfoXLLMHeadModel"),Nsa.forEach(t),jOr=r(LJe," (Transformer-XL model)"),LJe.forEach(t),DOr=i(Ce),X0=n(Ce,"LI",{});var yJe=s(X0);k7e=n(yJe,"STRONG",{});var qsa=s(k7e);GOr=r(qsa,"xglm"),qsa.forEach(t),OOr=r(yJe," \u2014 "),qre=n(yJe,"A",{href:!0});var jsa=s(qre);VOr=r(jsa,"TFXGLMForCausalLM"),jsa.forEach(t),XOr=r(yJe," (XGLM model)"),yJe.forEach(t),zOr=i(Ce),z0=n(Ce,"LI",{});var xJe=s(z0);S7e=n(xJe,"STRONG",{});var Dsa=s(S7e);QOr=r(Dsa,"xlm"),Dsa.forEach(t),WOr=r(xJe," \u2014 "),jre=n(xJe,"A",{href:!0});var Gsa=s(jre);UOr=r(Gsa,"TFXLMWithLMHeadModel"),Gsa.forEach(t),HOr=r(xJe," (XLM model)"),xJe.forEach(t),JOr=i(Ce),Q0=n(Ce,"LI",{});var $Je=s(Q0);R7e=n($Je,"STRONG",{});var Osa=s(R7e);YOr=r(Osa,"xlnet"),Osa.forEach(t),ZOr=r($Je," \u2014 "),Dre=n($Je,"A",{href:!0});var Vsa=s(Dre);KOr=r(Vsa,"TFXLNetLMHeadModel"),Vsa.forEach(t),eVr=r($Je," (XLNet model)"),$Je.forEach(t),Ce.forEach(t),oVr=i(fi),T(W0.$$.fragment,fi),fi.forEach(t),mi.forEach(t),Ero=i(m),lm=n(m,"H2",{class:!0});var jao=s(lm);U0=n(jao,"A",{id:!0,class:!0,href:!0});var Xsa=s(U0);P7e=n(Xsa,"SPAN",{});var zsa=s(P7e);T(jS.$$.fragment,zsa),zsa.forEach(t),Xsa.forEach(t),rVr=i(jao),B7e=n(jao,"SPAN",{});var Qsa=s(B7e);tVr=r(Qsa,"TFAutoModelForImageClassification"),Qsa.forEach(t),jao.forEach(t),Cro=i(m),mr=n(m,"DIV",{class:!0});var gi=s(mr);T(DS.$$.fragment,gi),aVr=i(gi),im=n(gi,"P",{});var Qde=s(im);nVr=r(Qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gre=n(Qde,"A",{href:!0});var Wsa=s(Gre);sVr=r(Wsa,"from_pretrained()"),Wsa.forEach(t),lVr=r(Qde," class method or the "),Ore=n(Qde,"A",{href:!0});var Usa=s(Ore);iVr=r(Usa,"from_config()"),Usa.forEach(t),dVr=r(Qde,` class
method.`),Qde.forEach(t),cVr=i(gi),GS=n(gi,"P",{});var Dao=s(GS);mVr=r(Dao,"This class cannot be instantiated directly using "),I7e=n(Dao,"CODE",{});var Hsa=s(I7e);fVr=r(Hsa,"__init__()"),Hsa.forEach(t),gVr=r(Dao," (throws an error)."),Dao.forEach(t),hVr=i(gi),Jt=n(gi,"DIV",{class:!0});var w9=s(Jt);T(OS.$$.fragment,w9),uVr=i(w9),N7e=n(w9,"P",{});var Jsa=s(N7e);pVr=r(Jsa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jsa.forEach(t),_Vr=i(w9),dm=n(w9,"P",{});var Wde=s(dm);bVr=r(Wde,`Note:
Loading a model from its configuration file does `),q7e=n(Wde,"STRONG",{});var Ysa=s(q7e);vVr=r(Ysa,"not"),Ysa.forEach(t),FVr=r(Wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vre=n(Wde,"A",{href:!0});var Zsa=s(Vre);TVr=r(Zsa,"from_pretrained()"),Zsa.forEach(t),MVr=r(Wde," to load the model weights."),Wde.forEach(t),EVr=i(w9),T(H0.$$.fragment,w9),w9.forEach(t),CVr=i(gi),Gr=n(gi,"DIV",{class:!0});var hi=s(Gr);T(VS.$$.fragment,hi),wVr=i(hi),j7e=n(hi,"P",{});var Ksa=s(j7e);AVr=r(Ksa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ksa.forEach(t),LVr=i(hi),Rn=n(hi,"P",{});var A9=s(Rn);yVr=r(A9,"The model class to instantiate is selected based on the "),D7e=n(A9,"CODE",{});var ela=s(D7e);xVr=r(ela,"model_type"),ela.forEach(t),$Vr=r(A9,` property of the config object (either
passed as an argument or loaded from `),G7e=n(A9,"CODE",{});var ola=s(G7e);kVr=r(ola,"pretrained_model_name_or_path"),ola.forEach(t),SVr=r(A9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(A9,"CODE",{});var rla=s(O7e);RVr=r(rla,"pretrained_model_name_or_path"),rla.forEach(t),PVr=r(A9,":"),A9.forEach(t),BVr=i(hi),Be=n(hi,"UL",{});var We=s(Be);J0=n(We,"LI",{});var kJe=s(J0);V7e=n(kJe,"STRONG",{});var tla=s(V7e);IVr=r(tla,"convnext"),tla.forEach(t),NVr=r(kJe," \u2014 "),Xre=n(kJe,"A",{href:!0});var ala=s(Xre);qVr=r(ala,"TFConvNextForImageClassification"),ala.forEach(t),jVr=r(kJe," (ConvNeXT model)"),kJe.forEach(t),DVr=i(We),Y0=n(We,"LI",{});var SJe=s(Y0);X7e=n(SJe,"STRONG",{});var nla=s(X7e);GVr=r(nla,"data2vec-vision"),nla.forEach(t),OVr=r(SJe," \u2014 "),zre=n(SJe,"A",{href:!0});var sla=s(zre);VVr=r(sla,"TFData2VecVisionForImageClassification"),sla.forEach(t),XVr=r(SJe," (Data2VecVision model)"),SJe.forEach(t),zVr=i(We),Al=n(We,"LI",{});var yI=s(Al);z7e=n(yI,"STRONG",{});var lla=s(z7e);QVr=r(lla,"deit"),lla.forEach(t),WVr=r(yI," \u2014 "),Qre=n(yI,"A",{href:!0});var ila=s(Qre);UVr=r(ila,"TFDeiTForImageClassification"),ila.forEach(t),HVr=r(yI," or "),Wre=n(yI,"A",{href:!0});var dla=s(Wre);JVr=r(dla,"TFDeiTForImageClassificationWithTeacher"),dla.forEach(t),YVr=r(yI," (DeiT model)"),yI.forEach(t),ZVr=i(We),Z0=n(We,"LI",{});var RJe=s(Z0);Q7e=n(RJe,"STRONG",{});var cla=s(Q7e);KVr=r(cla,"mobilevit"),cla.forEach(t),eXr=r(RJe," \u2014 "),Ure=n(RJe,"A",{href:!0});var mla=s(Ure);oXr=r(mla,"TFMobileViTForImageClassification"),mla.forEach(t),rXr=r(RJe," (MobileViT model)"),RJe.forEach(t),tXr=i(We),K0=n(We,"LI",{});var PJe=s(K0);W7e=n(PJe,"STRONG",{});var fla=s(W7e);aXr=r(fla,"regnet"),fla.forEach(t),nXr=r(PJe," \u2014 "),Hre=n(PJe,"A",{href:!0});var gla=s(Hre);sXr=r(gla,"TFRegNetForImageClassification"),gla.forEach(t),lXr=r(PJe," (RegNet model)"),PJe.forEach(t),iXr=i(We),ew=n(We,"LI",{});var BJe=s(ew);U7e=n(BJe,"STRONG",{});var hla=s(U7e);dXr=r(hla,"resnet"),hla.forEach(t),cXr=r(BJe," \u2014 "),Jre=n(BJe,"A",{href:!0});var ula=s(Jre);mXr=r(ula,"TFResNetForImageClassification"),ula.forEach(t),fXr=r(BJe," (ResNet model)"),BJe.forEach(t),gXr=i(We),ow=n(We,"LI",{});var IJe=s(ow);H7e=n(IJe,"STRONG",{});var pla=s(H7e);hXr=r(pla,"segformer"),pla.forEach(t),uXr=r(IJe," \u2014 "),Yre=n(IJe,"A",{href:!0});var _la=s(Yre);pXr=r(_la,"TFSegformerForImageClassification"),_la.forEach(t),_Xr=r(IJe," (SegFormer model)"),IJe.forEach(t),bXr=i(We),rw=n(We,"LI",{});var NJe=s(rw);J7e=n(NJe,"STRONG",{});var bla=s(J7e);vXr=r(bla,"swin"),bla.forEach(t),FXr=r(NJe," \u2014 "),Zre=n(NJe,"A",{href:!0});var vla=s(Zre);TXr=r(vla,"TFSwinForImageClassification"),vla.forEach(t),MXr=r(NJe," (Swin Transformer model)"),NJe.forEach(t),EXr=i(We),tw=n(We,"LI",{});var qJe=s(tw);Y7e=n(qJe,"STRONG",{});var Fla=s(Y7e);CXr=r(Fla,"vit"),Fla.forEach(t),wXr=r(qJe," \u2014 "),Kre=n(qJe,"A",{href:!0});var Tla=s(Kre);AXr=r(Tla,"TFViTForImageClassification"),Tla.forEach(t),LXr=r(qJe," (ViT model)"),qJe.forEach(t),We.forEach(t),yXr=i(hi),T(aw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),wro=i(m),cm=n(m,"H2",{class:!0});var Gao=s(cm);nw=n(Gao,"A",{id:!0,class:!0,href:!0});var Mla=s(nw);Z7e=n(Mla,"SPAN",{});var Ela=s(Z7e);T(XS.$$.fragment,Ela),Ela.forEach(t),Mla.forEach(t),xXr=i(Gao),K7e=n(Gao,"SPAN",{});var Cla=s(K7e);$Xr=r(Cla,"TFAutoModelForSemanticSegmentation"),Cla.forEach(t),Gao.forEach(t),Aro=i(m),fr=n(m,"DIV",{class:!0});var ui=s(fr);T(zS.$$.fragment,ui),kXr=i(ui),mm=n(ui,"P",{});var Ude=s(mm);SXr=r(Ude,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ete=n(Ude,"A",{href:!0});var wla=s(ete);RXr=r(wla,"from_pretrained()"),wla.forEach(t),PXr=r(Ude," class method or the "),ote=n(Ude,"A",{href:!0});var Ala=s(ote);BXr=r(Ala,"from_config()"),Ala.forEach(t),IXr=r(Ude,` class
method.`),Ude.forEach(t),NXr=i(ui),QS=n(ui,"P",{});var Oao=s(QS);qXr=r(Oao,"This class cannot be instantiated directly using "),eLe=n(Oao,"CODE",{});var Lla=s(eLe);jXr=r(Lla,"__init__()"),Lla.forEach(t),DXr=r(Oao," (throws an error)."),Oao.forEach(t),GXr=i(ui),Yt=n(ui,"DIV",{class:!0});var L9=s(Yt);T(WS.$$.fragment,L9),OXr=i(L9),oLe=n(L9,"P",{});var yla=s(oLe);VXr=r(yla,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),yla.forEach(t),XXr=i(L9),fm=n(L9,"P",{});var Hde=s(fm);zXr=r(Hde,`Note:
Loading a model from its configuration file does `),rLe=n(Hde,"STRONG",{});var xla=s(rLe);QXr=r(xla,"not"),xla.forEach(t),WXr=r(Hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=n(Hde,"A",{href:!0});var $la=s(rte);UXr=r($la,"from_pretrained()"),$la.forEach(t),HXr=r(Hde," to load the model weights."),Hde.forEach(t),JXr=i(L9),T(sw.$$.fragment,L9),L9.forEach(t),YXr=i(ui),Or=n(ui,"DIV",{class:!0});var pi=s(Or);T(US.$$.fragment,pi),ZXr=i(pi),tLe=n(pi,"P",{});var kla=s(tLe);KXr=r(kla,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),kla.forEach(t),ezr=i(pi),Pn=n(pi,"P",{});var y9=s(Pn);ozr=r(y9,"The model class to instantiate is selected based on the "),aLe=n(y9,"CODE",{});var Sla=s(aLe);rzr=r(Sla,"model_type"),Sla.forEach(t),tzr=r(y9,` property of the config object (either
passed as an argument or loaded from `),nLe=n(y9,"CODE",{});var Rla=s(nLe);azr=r(Rla,"pretrained_model_name_or_path"),Rla.forEach(t),nzr=r(y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sLe=n(y9,"CODE",{});var Pla=s(sLe);szr=r(Pla,"pretrained_model_name_or_path"),Pla.forEach(t),lzr=r(y9,":"),y9.forEach(t),izr=i(pi),gm=n(pi,"UL",{});var Jde=s(gm);lw=n(Jde,"LI",{});var jJe=s(lw);lLe=n(jJe,"STRONG",{});var Bla=s(lLe);dzr=r(Bla,"data2vec-vision"),Bla.forEach(t),czr=r(jJe," \u2014 "),tte=n(jJe,"A",{href:!0});var Ila=s(tte);mzr=r(Ila,"TFData2VecVisionForSemanticSegmentation"),Ila.forEach(t),fzr=r(jJe," (Data2VecVision model)"),jJe.forEach(t),gzr=i(Jde),iw=n(Jde,"LI",{});var DJe=s(iw);iLe=n(DJe,"STRONG",{});var Nla=s(iLe);hzr=r(Nla,"mobilevit"),Nla.forEach(t),uzr=r(DJe," \u2014 "),ate=n(DJe,"A",{href:!0});var qla=s(ate);pzr=r(qla,"TFMobileViTForSemanticSegmentation"),qla.forEach(t),_zr=r(DJe," (MobileViT model)"),DJe.forEach(t),bzr=i(Jde),dw=n(Jde,"LI",{});var GJe=s(dw);dLe=n(GJe,"STRONG",{});var jla=s(dLe);vzr=r(jla,"segformer"),jla.forEach(t),Fzr=r(GJe," \u2014 "),nte=n(GJe,"A",{href:!0});var Dla=s(nte);Tzr=r(Dla,"TFSegformerForSemanticSegmentation"),Dla.forEach(t),Mzr=r(GJe," (SegFormer model)"),GJe.forEach(t),Jde.forEach(t),Ezr=i(pi),T(cw.$$.fragment,pi),pi.forEach(t),ui.forEach(t),Lro=i(m),hm=n(m,"H2",{class:!0});var Vao=s(hm);mw=n(Vao,"A",{id:!0,class:!0,href:!0});var Gla=s(mw);cLe=n(Gla,"SPAN",{});var Ola=s(cLe);T(HS.$$.fragment,Ola),Ola.forEach(t),Gla.forEach(t),Czr=i(Vao),mLe=n(Vao,"SPAN",{});var Vla=s(mLe);wzr=r(Vla,"TFAutoModelForMaskedLM"),Vla.forEach(t),Vao.forEach(t),yro=i(m),gr=n(m,"DIV",{class:!0});var _i=s(gr);T(JS.$$.fragment,_i),Azr=i(_i),um=n(_i,"P",{});var Yde=s(um);Lzr=r(Yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ste=n(Yde,"A",{href:!0});var Xla=s(ste);yzr=r(Xla,"from_pretrained()"),Xla.forEach(t),xzr=r(Yde," class method or the "),lte=n(Yde,"A",{href:!0});var zla=s(lte);$zr=r(zla,"from_config()"),zla.forEach(t),kzr=r(Yde,` class
method.`),Yde.forEach(t),Szr=i(_i),YS=n(_i,"P",{});var Xao=s(YS);Rzr=r(Xao,"This class cannot be instantiated directly using "),fLe=n(Xao,"CODE",{});var Qla=s(fLe);Pzr=r(Qla,"__init__()"),Qla.forEach(t),Bzr=r(Xao," (throws an error)."),Xao.forEach(t),Izr=i(_i),Zt=n(_i,"DIV",{class:!0});var x9=s(Zt);T(ZS.$$.fragment,x9),Nzr=i(x9),gLe=n(x9,"P",{});var Wla=s(gLe);qzr=r(Wla,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wla.forEach(t),jzr=i(x9),pm=n(x9,"P",{});var Zde=s(pm);Dzr=r(Zde,`Note:
Loading a model from its configuration file does `),hLe=n(Zde,"STRONG",{});var Ula=s(hLe);Gzr=r(Ula,"not"),Ula.forEach(t),Ozr=r(Zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(Zde,"A",{href:!0});var Hla=s(ite);Vzr=r(Hla,"from_pretrained()"),Hla.forEach(t),Xzr=r(Zde," to load the model weights."),Zde.forEach(t),zzr=i(x9),T(fw.$$.fragment,x9),x9.forEach(t),Qzr=i(_i),Vr=n(_i,"DIV",{class:!0});var bi=s(Vr);T(KS.$$.fragment,bi),Wzr=i(bi),uLe=n(bi,"P",{});var Jla=s(uLe);Uzr=r(Jla,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jla.forEach(t),Hzr=i(bi),Bn=n(bi,"P",{});var $9=s(Bn);Jzr=r($9,"The model class to instantiate is selected based on the "),pLe=n($9,"CODE",{});var Yla=s(pLe);Yzr=r(Yla,"model_type"),Yla.forEach(t),Zzr=r($9,` property of the config object (either
passed as an argument or loaded from `),_Le=n($9,"CODE",{});var Zla=s(_Le);Kzr=r(Zla,"pretrained_model_name_or_path"),Zla.forEach(t),eQr=r($9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bLe=n($9,"CODE",{});var Kla=s(bLe);oQr=r(Kla,"pretrained_model_name_or_path"),Kla.forEach(t),rQr=r($9,":"),$9.forEach(t),tQr=i(bi),ge=n(bi,"UL",{});var _e=s(ge);gw=n(_e,"LI",{});var OJe=s(gw);vLe=n(OJe,"STRONG",{});var eia=s(vLe);aQr=r(eia,"albert"),eia.forEach(t),nQr=r(OJe," \u2014 "),dte=n(OJe,"A",{href:!0});var oia=s(dte);sQr=r(oia,"TFAlbertForMaskedLM"),oia.forEach(t),lQr=r(OJe," (ALBERT model)"),OJe.forEach(t),iQr=i(_e),hw=n(_e,"LI",{});var VJe=s(hw);FLe=n(VJe,"STRONG",{});var ria=s(FLe);dQr=r(ria,"bert"),ria.forEach(t),cQr=r(VJe," \u2014 "),cte=n(VJe,"A",{href:!0});var tia=s(cte);mQr=r(tia,"TFBertForMaskedLM"),tia.forEach(t),fQr=r(VJe," (BERT model)"),VJe.forEach(t),gQr=i(_e),uw=n(_e,"LI",{});var XJe=s(uw);TLe=n(XJe,"STRONG",{});var aia=s(TLe);hQr=r(aia,"camembert"),aia.forEach(t),uQr=r(XJe," \u2014 "),mte=n(XJe,"A",{href:!0});var nia=s(mte);pQr=r(nia,"TFCamembertForMaskedLM"),nia.forEach(t),_Qr=r(XJe," (CamemBERT model)"),XJe.forEach(t),bQr=i(_e),pw=n(_e,"LI",{});var zJe=s(pw);MLe=n(zJe,"STRONG",{});var sia=s(MLe);vQr=r(sia,"convbert"),sia.forEach(t),FQr=r(zJe," \u2014 "),fte=n(zJe,"A",{href:!0});var lia=s(fte);TQr=r(lia,"TFConvBertForMaskedLM"),lia.forEach(t),MQr=r(zJe," (ConvBERT model)"),zJe.forEach(t),EQr=i(_e),_w=n(_e,"LI",{});var QJe=s(_w);ELe=n(QJe,"STRONG",{});var iia=s(ELe);CQr=r(iia,"deberta"),iia.forEach(t),wQr=r(QJe," \u2014 "),gte=n(QJe,"A",{href:!0});var dia=s(gte);AQr=r(dia,"TFDebertaForMaskedLM"),dia.forEach(t),LQr=r(QJe," (DeBERTa model)"),QJe.forEach(t),yQr=i(_e),bw=n(_e,"LI",{});var WJe=s(bw);CLe=n(WJe,"STRONG",{});var cia=s(CLe);xQr=r(cia,"deberta-v2"),cia.forEach(t),$Qr=r(WJe," \u2014 "),hte=n(WJe,"A",{href:!0});var mia=s(hte);kQr=r(mia,"TFDebertaV2ForMaskedLM"),mia.forEach(t),SQr=r(WJe," (DeBERTa-v2 model)"),WJe.forEach(t),RQr=i(_e),vw=n(_e,"LI",{});var UJe=s(vw);wLe=n(UJe,"STRONG",{});var fia=s(wLe);PQr=r(fia,"distilbert"),fia.forEach(t),BQr=r(UJe," \u2014 "),ute=n(UJe,"A",{href:!0});var gia=s(ute);IQr=r(gia,"TFDistilBertForMaskedLM"),gia.forEach(t),NQr=r(UJe," (DistilBERT model)"),UJe.forEach(t),qQr=i(_e),Fw=n(_e,"LI",{});var HJe=s(Fw);ALe=n(HJe,"STRONG",{});var hia=s(ALe);jQr=r(hia,"electra"),hia.forEach(t),DQr=r(HJe," \u2014 "),pte=n(HJe,"A",{href:!0});var uia=s(pte);GQr=r(uia,"TFElectraForMaskedLM"),uia.forEach(t),OQr=r(HJe," (ELECTRA model)"),HJe.forEach(t),VQr=i(_e),Tw=n(_e,"LI",{});var JJe=s(Tw);LLe=n(JJe,"STRONG",{});var pia=s(LLe);XQr=r(pia,"flaubert"),pia.forEach(t),zQr=r(JJe," \u2014 "),_te=n(JJe,"A",{href:!0});var _ia=s(_te);QQr=r(_ia,"TFFlaubertWithLMHeadModel"),_ia.forEach(t),WQr=r(JJe," (FlauBERT model)"),JJe.forEach(t),UQr=i(_e),Mw=n(_e,"LI",{});var YJe=s(Mw);yLe=n(YJe,"STRONG",{});var bia=s(yLe);HQr=r(bia,"funnel"),bia.forEach(t),JQr=r(YJe," \u2014 "),bte=n(YJe,"A",{href:!0});var via=s(bte);YQr=r(via,"TFFunnelForMaskedLM"),via.forEach(t),ZQr=r(YJe," (Funnel Transformer model)"),YJe.forEach(t),KQr=i(_e),Ew=n(_e,"LI",{});var ZJe=s(Ew);xLe=n(ZJe,"STRONG",{});var Fia=s(xLe);eWr=r(Fia,"layoutlm"),Fia.forEach(t),oWr=r(ZJe," \u2014 "),vte=n(ZJe,"A",{href:!0});var Tia=s(vte);rWr=r(Tia,"TFLayoutLMForMaskedLM"),Tia.forEach(t),tWr=r(ZJe," (LayoutLM model)"),ZJe.forEach(t),aWr=i(_e),Cw=n(_e,"LI",{});var KJe=s(Cw);$Le=n(KJe,"STRONG",{});var Mia=s($Le);nWr=r(Mia,"longformer"),Mia.forEach(t),sWr=r(KJe," \u2014 "),Fte=n(KJe,"A",{href:!0});var Eia=s(Fte);lWr=r(Eia,"TFLongformerForMaskedLM"),Eia.forEach(t),iWr=r(KJe," (Longformer model)"),KJe.forEach(t),dWr=i(_e),ww=n(_e,"LI",{});var eYe=s(ww);kLe=n(eYe,"STRONG",{});var Cia=s(kLe);cWr=r(Cia,"mobilebert"),Cia.forEach(t),mWr=r(eYe," \u2014 "),Tte=n(eYe,"A",{href:!0});var wia=s(Tte);fWr=r(wia,"TFMobileBertForMaskedLM"),wia.forEach(t),gWr=r(eYe," (MobileBERT model)"),eYe.forEach(t),hWr=i(_e),Aw=n(_e,"LI",{});var oYe=s(Aw);SLe=n(oYe,"STRONG",{});var Aia=s(SLe);uWr=r(Aia,"mpnet"),Aia.forEach(t),pWr=r(oYe," \u2014 "),Mte=n(oYe,"A",{href:!0});var Lia=s(Mte);_Wr=r(Lia,"TFMPNetForMaskedLM"),Lia.forEach(t),bWr=r(oYe," (MPNet model)"),oYe.forEach(t),vWr=i(_e),Lw=n(_e,"LI",{});var rYe=s(Lw);RLe=n(rYe,"STRONG",{});var yia=s(RLe);FWr=r(yia,"rembert"),yia.forEach(t),TWr=r(rYe," \u2014 "),Ete=n(rYe,"A",{href:!0});var xia=s(Ete);MWr=r(xia,"TFRemBertForMaskedLM"),xia.forEach(t),EWr=r(rYe," (RemBERT model)"),rYe.forEach(t),CWr=i(_e),yw=n(_e,"LI",{});var tYe=s(yw);PLe=n(tYe,"STRONG",{});var $ia=s(PLe);wWr=r($ia,"roberta"),$ia.forEach(t),AWr=r(tYe," \u2014 "),Cte=n(tYe,"A",{href:!0});var kia=s(Cte);LWr=r(kia,"TFRobertaForMaskedLM"),kia.forEach(t),yWr=r(tYe," (RoBERTa model)"),tYe.forEach(t),xWr=i(_e),xw=n(_e,"LI",{});var aYe=s(xw);BLe=n(aYe,"STRONG",{});var Sia=s(BLe);$Wr=r(Sia,"roformer"),Sia.forEach(t),kWr=r(aYe," \u2014 "),wte=n(aYe,"A",{href:!0});var Ria=s(wte);SWr=r(Ria,"TFRoFormerForMaskedLM"),Ria.forEach(t),RWr=r(aYe," (RoFormer model)"),aYe.forEach(t),PWr=i(_e),$w=n(_e,"LI",{});var nYe=s($w);ILe=n(nYe,"STRONG",{});var Pia=s(ILe);BWr=r(Pia,"tapas"),Pia.forEach(t),IWr=r(nYe," \u2014 "),Ate=n(nYe,"A",{href:!0});var Bia=s(Ate);NWr=r(Bia,"TFTapasForMaskedLM"),Bia.forEach(t),qWr=r(nYe," (TAPAS model)"),nYe.forEach(t),jWr=i(_e),kw=n(_e,"LI",{});var sYe=s(kw);NLe=n(sYe,"STRONG",{});var Iia=s(NLe);DWr=r(Iia,"xlm"),Iia.forEach(t),GWr=r(sYe," \u2014 "),Lte=n(sYe,"A",{href:!0});var Nia=s(Lte);OWr=r(Nia,"TFXLMWithLMHeadModel"),Nia.forEach(t),VWr=r(sYe," (XLM model)"),sYe.forEach(t),XWr=i(_e),Sw=n(_e,"LI",{});var lYe=s(Sw);qLe=n(lYe,"STRONG",{});var qia=s(qLe);zWr=r(qia,"xlm-roberta"),qia.forEach(t),QWr=r(lYe," \u2014 "),yte=n(lYe,"A",{href:!0});var jia=s(yte);WWr=r(jia,"TFXLMRobertaForMaskedLM"),jia.forEach(t),UWr=r(lYe," (XLM-RoBERTa model)"),lYe.forEach(t),_e.forEach(t),HWr=i(bi),T(Rw.$$.fragment,bi),bi.forEach(t),_i.forEach(t),xro=i(m),_m=n(m,"H2",{class:!0});var zao=s(_m);Pw=n(zao,"A",{id:!0,class:!0,href:!0});var Dia=s(Pw);jLe=n(Dia,"SPAN",{});var Gia=s(jLe);T(eR.$$.fragment,Gia),Gia.forEach(t),Dia.forEach(t),JWr=i(zao),DLe=n(zao,"SPAN",{});var Oia=s(DLe);YWr=r(Oia,"TFAutoModelForSeq2SeqLM"),Oia.forEach(t),zao.forEach(t),$ro=i(m),hr=n(m,"DIV",{class:!0});var vi=s(hr);T(oR.$$.fragment,vi),ZWr=i(vi),bm=n(vi,"P",{});var Kde=s(bm);KWr=r(Kde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xte=n(Kde,"A",{href:!0});var Via=s(xte);eUr=r(Via,"from_pretrained()"),Via.forEach(t),oUr=r(Kde," class method or the "),$te=n(Kde,"A",{href:!0});var Xia=s($te);rUr=r(Xia,"from_config()"),Xia.forEach(t),tUr=r(Kde,` class
method.`),Kde.forEach(t),aUr=i(vi),rR=n(vi,"P",{});var Qao=s(rR);nUr=r(Qao,"This class cannot be instantiated directly using "),GLe=n(Qao,"CODE",{});var zia=s(GLe);sUr=r(zia,"__init__()"),zia.forEach(t),lUr=r(Qao," (throws an error)."),Qao.forEach(t),iUr=i(vi),Kt=n(vi,"DIV",{class:!0});var k9=s(Kt);T(tR.$$.fragment,k9),dUr=i(k9),OLe=n(k9,"P",{});var Qia=s(OLe);cUr=r(Qia,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Qia.forEach(t),mUr=i(k9),vm=n(k9,"P",{});var ece=s(vm);fUr=r(ece,`Note:
Loading a model from its configuration file does `),VLe=n(ece,"STRONG",{});var Wia=s(VLe);gUr=r(Wia,"not"),Wia.forEach(t),hUr=r(ece,` load the model weights. It only affects the
model\u2019s configuration. Use `),kte=n(ece,"A",{href:!0});var Uia=s(kte);uUr=r(Uia,"from_pretrained()"),Uia.forEach(t),pUr=r(ece," to load the model weights."),ece.forEach(t),_Ur=i(k9),T(Bw.$$.fragment,k9),k9.forEach(t),bUr=i(vi),Xr=n(vi,"DIV",{class:!0});var Fi=s(Xr);T(aR.$$.fragment,Fi),vUr=i(Fi),XLe=n(Fi,"P",{});var Hia=s(XLe);FUr=r(Hia,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hia.forEach(t),TUr=i(Fi),In=n(Fi,"P",{});var S9=s(In);MUr=r(S9,"The model class to instantiate is selected based on the "),zLe=n(S9,"CODE",{});var Jia=s(zLe);EUr=r(Jia,"model_type"),Jia.forEach(t),CUr=r(S9,` property of the config object (either
passed as an argument or loaded from `),QLe=n(S9,"CODE",{});var Yia=s(QLe);wUr=r(Yia,"pretrained_model_name_or_path"),Yia.forEach(t),AUr=r(S9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WLe=n(S9,"CODE",{});var Zia=s(WLe);LUr=r(Zia,"pretrained_model_name_or_path"),Zia.forEach(t),yUr=r(S9,":"),S9.forEach(t),xUr=i(Fi),ye=n(Fi,"UL",{});var Ne=s(ye);Iw=n(Ne,"LI",{});var iYe=s(Iw);ULe=n(iYe,"STRONG",{});var Kia=s(ULe);$Ur=r(Kia,"bart"),Kia.forEach(t),kUr=r(iYe," \u2014 "),Ste=n(iYe,"A",{href:!0});var eda=s(Ste);SUr=r(eda,"TFBartForConditionalGeneration"),eda.forEach(t),RUr=r(iYe," (BART model)"),iYe.forEach(t),PUr=i(Ne),Nw=n(Ne,"LI",{});var dYe=s(Nw);HLe=n(dYe,"STRONG",{});var oda=s(HLe);BUr=r(oda,"blenderbot"),oda.forEach(t),IUr=r(dYe," \u2014 "),Rte=n(dYe,"A",{href:!0});var rda=s(Rte);NUr=r(rda,"TFBlenderbotForConditionalGeneration"),rda.forEach(t),qUr=r(dYe," (Blenderbot model)"),dYe.forEach(t),jUr=i(Ne),qw=n(Ne,"LI",{});var cYe=s(qw);JLe=n(cYe,"STRONG",{});var tda=s(JLe);DUr=r(tda,"blenderbot-small"),tda.forEach(t),GUr=r(cYe," \u2014 "),Pte=n(cYe,"A",{href:!0});var ada=s(Pte);OUr=r(ada,"TFBlenderbotSmallForConditionalGeneration"),ada.forEach(t),VUr=r(cYe," (BlenderbotSmall model)"),cYe.forEach(t),XUr=i(Ne),jw=n(Ne,"LI",{});var mYe=s(jw);YLe=n(mYe,"STRONG",{});var nda=s(YLe);zUr=r(nda,"encoder-decoder"),nda.forEach(t),QUr=r(mYe," \u2014 "),Bte=n(mYe,"A",{href:!0});var sda=s(Bte);WUr=r(sda,"TFEncoderDecoderModel"),sda.forEach(t),UUr=r(mYe," (Encoder decoder model)"),mYe.forEach(t),HUr=i(Ne),Dw=n(Ne,"LI",{});var fYe=s(Dw);ZLe=n(fYe,"STRONG",{});var lda=s(ZLe);JUr=r(lda,"led"),lda.forEach(t),YUr=r(fYe," \u2014 "),Ite=n(fYe,"A",{href:!0});var ida=s(Ite);ZUr=r(ida,"TFLEDForConditionalGeneration"),ida.forEach(t),KUr=r(fYe," (LED model)"),fYe.forEach(t),eHr=i(Ne),Gw=n(Ne,"LI",{});var gYe=s(Gw);KLe=n(gYe,"STRONG",{});var dda=s(KLe);oHr=r(dda,"marian"),dda.forEach(t),rHr=r(gYe," \u2014 "),Nte=n(gYe,"A",{href:!0});var cda=s(Nte);tHr=r(cda,"TFMarianMTModel"),cda.forEach(t),aHr=r(gYe," (Marian model)"),gYe.forEach(t),nHr=i(Ne),Ow=n(Ne,"LI",{});var hYe=s(Ow);eye=n(hYe,"STRONG",{});var mda=s(eye);sHr=r(mda,"mbart"),mda.forEach(t),lHr=r(hYe," \u2014 "),qte=n(hYe,"A",{href:!0});var fda=s(qte);iHr=r(fda,"TFMBartForConditionalGeneration"),fda.forEach(t),dHr=r(hYe," (mBART model)"),hYe.forEach(t),cHr=i(Ne),Vw=n(Ne,"LI",{});var uYe=s(Vw);oye=n(uYe,"STRONG",{});var gda=s(oye);mHr=r(gda,"mt5"),gda.forEach(t),fHr=r(uYe," \u2014 "),jte=n(uYe,"A",{href:!0});var hda=s(jte);gHr=r(hda,"TFMT5ForConditionalGeneration"),hda.forEach(t),hHr=r(uYe," (MT5 model)"),uYe.forEach(t),uHr=i(Ne),Xw=n(Ne,"LI",{});var pYe=s(Xw);rye=n(pYe,"STRONG",{});var uda=s(rye);pHr=r(uda,"pegasus"),uda.forEach(t),_Hr=r(pYe," \u2014 "),Dte=n(pYe,"A",{href:!0});var pda=s(Dte);bHr=r(pda,"TFPegasusForConditionalGeneration"),pda.forEach(t),vHr=r(pYe," (Pegasus model)"),pYe.forEach(t),FHr=i(Ne),zw=n(Ne,"LI",{});var _Ye=s(zw);tye=n(_Ye,"STRONG",{});var _da=s(tye);THr=r(_da,"t5"),_da.forEach(t),MHr=r(_Ye," \u2014 "),Gte=n(_Ye,"A",{href:!0});var bda=s(Gte);EHr=r(bda,"TFT5ForConditionalGeneration"),bda.forEach(t),CHr=r(_Ye," (T5 model)"),_Ye.forEach(t),Ne.forEach(t),wHr=i(Fi),T(Qw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),kro=i(m),Fm=n(m,"H2",{class:!0});var Wao=s(Fm);Ww=n(Wao,"A",{id:!0,class:!0,href:!0});var vda=s(Ww);aye=n(vda,"SPAN",{});var Fda=s(aye);T(nR.$$.fragment,Fda),Fda.forEach(t),vda.forEach(t),AHr=i(Wao),nye=n(Wao,"SPAN",{});var Tda=s(nye);LHr=r(Tda,"TFAutoModelForSequenceClassification"),Tda.forEach(t),Wao.forEach(t),Sro=i(m),ur=n(m,"DIV",{class:!0});var Ti=s(ur);T(sR.$$.fragment,Ti),yHr=i(Ti),Tm=n(Ti,"P",{});var oce=s(Tm);xHr=r(oce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ote=n(oce,"A",{href:!0});var Mda=s(Ote);$Hr=r(Mda,"from_pretrained()"),Mda.forEach(t),kHr=r(oce," class method or the "),Vte=n(oce,"A",{href:!0});var Eda=s(Vte);SHr=r(Eda,"from_config()"),Eda.forEach(t),RHr=r(oce,` class
method.`),oce.forEach(t),PHr=i(Ti),lR=n(Ti,"P",{});var Uao=s(lR);BHr=r(Uao,"This class cannot be instantiated directly using "),sye=n(Uao,"CODE",{});var Cda=s(sye);IHr=r(Cda,"__init__()"),Cda.forEach(t),NHr=r(Uao," (throws an error)."),Uao.forEach(t),qHr=i(Ti),ea=n(Ti,"DIV",{class:!0});var R9=s(ea);T(iR.$$.fragment,R9),jHr=i(R9),lye=n(R9,"P",{});var wda=s(lye);DHr=r(wda,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wda.forEach(t),GHr=i(R9),Mm=n(R9,"P",{});var rce=s(Mm);OHr=r(rce,`Note:
Loading a model from its configuration file does `),iye=n(rce,"STRONG",{});var Ada=s(iye);VHr=r(Ada,"not"),Ada.forEach(t),XHr=r(rce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xte=n(rce,"A",{href:!0});var Lda=s(Xte);zHr=r(Lda,"from_pretrained()"),Lda.forEach(t),QHr=r(rce," to load the model weights."),rce.forEach(t),WHr=i(R9),T(Uw.$$.fragment,R9),R9.forEach(t),UHr=i(Ti),zr=n(Ti,"DIV",{class:!0});var Mi=s(zr);T(dR.$$.fragment,Mi),HHr=i(Mi),dye=n(Mi,"P",{});var yda=s(dye);JHr=r(yda,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yda.forEach(t),YHr=i(Mi),Nn=n(Mi,"P",{});var P9=s(Nn);ZHr=r(P9,"The model class to instantiate is selected based on the "),cye=n(P9,"CODE",{});var xda=s(cye);KHr=r(xda,"model_type"),xda.forEach(t),eJr=r(P9,` property of the config object (either
passed as an argument or loaded from `),mye=n(P9,"CODE",{});var $da=s(mye);oJr=r($da,"pretrained_model_name_or_path"),$da.forEach(t),rJr=r(P9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fye=n(P9,"CODE",{});var kda=s(fye);tJr=r(kda,"pretrained_model_name_or_path"),kda.forEach(t),aJr=r(P9,":"),P9.forEach(t),nJr=i(Mi),re=n(Mi,"UL",{});var ae=s(re);Hw=n(ae,"LI",{});var bYe=s(Hw);gye=n(bYe,"STRONG",{});var Sda=s(gye);sJr=r(Sda,"albert"),Sda.forEach(t),lJr=r(bYe," \u2014 "),zte=n(bYe,"A",{href:!0});var Rda=s(zte);iJr=r(Rda,"TFAlbertForSequenceClassification"),Rda.forEach(t),dJr=r(bYe," (ALBERT model)"),bYe.forEach(t),cJr=i(ae),Jw=n(ae,"LI",{});var vYe=s(Jw);hye=n(vYe,"STRONG",{});var Pda=s(hye);mJr=r(Pda,"bert"),Pda.forEach(t),fJr=r(vYe," \u2014 "),Qte=n(vYe,"A",{href:!0});var Bda=s(Qte);gJr=r(Bda,"TFBertForSequenceClassification"),Bda.forEach(t),hJr=r(vYe," (BERT model)"),vYe.forEach(t),uJr=i(ae),Yw=n(ae,"LI",{});var FYe=s(Yw);uye=n(FYe,"STRONG",{});var Ida=s(uye);pJr=r(Ida,"camembert"),Ida.forEach(t),_Jr=r(FYe," \u2014 "),Wte=n(FYe,"A",{href:!0});var Nda=s(Wte);bJr=r(Nda,"TFCamembertForSequenceClassification"),Nda.forEach(t),vJr=r(FYe," (CamemBERT model)"),FYe.forEach(t),FJr=i(ae),Zw=n(ae,"LI",{});var TYe=s(Zw);pye=n(TYe,"STRONG",{});var qda=s(pye);TJr=r(qda,"convbert"),qda.forEach(t),MJr=r(TYe," \u2014 "),Ute=n(TYe,"A",{href:!0});var jda=s(Ute);EJr=r(jda,"TFConvBertForSequenceClassification"),jda.forEach(t),CJr=r(TYe," (ConvBERT model)"),TYe.forEach(t),wJr=i(ae),Kw=n(ae,"LI",{});var MYe=s(Kw);_ye=n(MYe,"STRONG",{});var Dda=s(_ye);AJr=r(Dda,"ctrl"),Dda.forEach(t),LJr=r(MYe," \u2014 "),Hte=n(MYe,"A",{href:!0});var Gda=s(Hte);yJr=r(Gda,"TFCTRLForSequenceClassification"),Gda.forEach(t),xJr=r(MYe," (CTRL model)"),MYe.forEach(t),$Jr=i(ae),eA=n(ae,"LI",{});var EYe=s(eA);bye=n(EYe,"STRONG",{});var Oda=s(bye);kJr=r(Oda,"deberta"),Oda.forEach(t),SJr=r(EYe," \u2014 "),Jte=n(EYe,"A",{href:!0});var Vda=s(Jte);RJr=r(Vda,"TFDebertaForSequenceClassification"),Vda.forEach(t),PJr=r(EYe," (DeBERTa model)"),EYe.forEach(t),BJr=i(ae),oA=n(ae,"LI",{});var CYe=s(oA);vye=n(CYe,"STRONG",{});var Xda=s(vye);IJr=r(Xda,"deberta-v2"),Xda.forEach(t),NJr=r(CYe," \u2014 "),Yte=n(CYe,"A",{href:!0});var zda=s(Yte);qJr=r(zda,"TFDebertaV2ForSequenceClassification"),zda.forEach(t),jJr=r(CYe," (DeBERTa-v2 model)"),CYe.forEach(t),DJr=i(ae),rA=n(ae,"LI",{});var wYe=s(rA);Fye=n(wYe,"STRONG",{});var Qda=s(Fye);GJr=r(Qda,"distilbert"),Qda.forEach(t),OJr=r(wYe," \u2014 "),Zte=n(wYe,"A",{href:!0});var Wda=s(Zte);VJr=r(Wda,"TFDistilBertForSequenceClassification"),Wda.forEach(t),XJr=r(wYe," (DistilBERT model)"),wYe.forEach(t),zJr=i(ae),tA=n(ae,"LI",{});var AYe=s(tA);Tye=n(AYe,"STRONG",{});var Uda=s(Tye);QJr=r(Uda,"electra"),Uda.forEach(t),WJr=r(AYe," \u2014 "),Kte=n(AYe,"A",{href:!0});var Hda=s(Kte);UJr=r(Hda,"TFElectraForSequenceClassification"),Hda.forEach(t),HJr=r(AYe," (ELECTRA model)"),AYe.forEach(t),JJr=i(ae),aA=n(ae,"LI",{});var LYe=s(aA);Mye=n(LYe,"STRONG",{});var Jda=s(Mye);YJr=r(Jda,"flaubert"),Jda.forEach(t),ZJr=r(LYe," \u2014 "),eae=n(LYe,"A",{href:!0});var Yda=s(eae);KJr=r(Yda,"TFFlaubertForSequenceClassification"),Yda.forEach(t),eYr=r(LYe," (FlauBERT model)"),LYe.forEach(t),oYr=i(ae),nA=n(ae,"LI",{});var yYe=s(nA);Eye=n(yYe,"STRONG",{});var Zda=s(Eye);rYr=r(Zda,"funnel"),Zda.forEach(t),tYr=r(yYe," \u2014 "),oae=n(yYe,"A",{href:!0});var Kda=s(oae);aYr=r(Kda,"TFFunnelForSequenceClassification"),Kda.forEach(t),nYr=r(yYe," (Funnel Transformer model)"),yYe.forEach(t),sYr=i(ae),sA=n(ae,"LI",{});var xYe=s(sA);Cye=n(xYe,"STRONG",{});var eca=s(Cye);lYr=r(eca,"gpt2"),eca.forEach(t),iYr=r(xYe," \u2014 "),rae=n(xYe,"A",{href:!0});var oca=s(rae);dYr=r(oca,"TFGPT2ForSequenceClassification"),oca.forEach(t),cYr=r(xYe," (OpenAI GPT-2 model)"),xYe.forEach(t),mYr=i(ae),lA=n(ae,"LI",{});var $Ye=s(lA);wye=n($Ye,"STRONG",{});var rca=s(wye);fYr=r(rca,"gptj"),rca.forEach(t),gYr=r($Ye," \u2014 "),tae=n($Ye,"A",{href:!0});var tca=s(tae);hYr=r(tca,"TFGPTJForSequenceClassification"),tca.forEach(t),uYr=r($Ye," (GPT-J model)"),$Ye.forEach(t),pYr=i(ae),iA=n(ae,"LI",{});var kYe=s(iA);Aye=n(kYe,"STRONG",{});var aca=s(Aye);_Yr=r(aca,"layoutlm"),aca.forEach(t),bYr=r(kYe," \u2014 "),aae=n(kYe,"A",{href:!0});var nca=s(aae);vYr=r(nca,"TFLayoutLMForSequenceClassification"),nca.forEach(t),FYr=r(kYe," (LayoutLM model)"),kYe.forEach(t),TYr=i(ae),dA=n(ae,"LI",{});var SYe=s(dA);Lye=n(SYe,"STRONG",{});var sca=s(Lye);MYr=r(sca,"layoutlmv3"),sca.forEach(t),EYr=r(SYe," \u2014 "),nae=n(SYe,"A",{href:!0});var lca=s(nae);CYr=r(lca,"TFLayoutLMv3ForSequenceClassification"),lca.forEach(t),wYr=r(SYe," (LayoutLMv3 model)"),SYe.forEach(t),AYr=i(ae),cA=n(ae,"LI",{});var RYe=s(cA);yye=n(RYe,"STRONG",{});var ica=s(yye);LYr=r(ica,"longformer"),ica.forEach(t),yYr=r(RYe," \u2014 "),sae=n(RYe,"A",{href:!0});var dca=s(sae);xYr=r(dca,"TFLongformerForSequenceClassification"),dca.forEach(t),$Yr=r(RYe," (Longformer model)"),RYe.forEach(t),kYr=i(ae),mA=n(ae,"LI",{});var PYe=s(mA);xye=n(PYe,"STRONG",{});var cca=s(xye);SYr=r(cca,"mobilebert"),cca.forEach(t),RYr=r(PYe," \u2014 "),lae=n(PYe,"A",{href:!0});var mca=s(lae);PYr=r(mca,"TFMobileBertForSequenceClassification"),mca.forEach(t),BYr=r(PYe," (MobileBERT model)"),PYe.forEach(t),IYr=i(ae),fA=n(ae,"LI",{});var BYe=s(fA);$ye=n(BYe,"STRONG",{});var fca=s($ye);NYr=r(fca,"mpnet"),fca.forEach(t),qYr=r(BYe," \u2014 "),iae=n(BYe,"A",{href:!0});var gca=s(iae);jYr=r(gca,"TFMPNetForSequenceClassification"),gca.forEach(t),DYr=r(BYe," (MPNet model)"),BYe.forEach(t),GYr=i(ae),gA=n(ae,"LI",{});var IYe=s(gA);kye=n(IYe,"STRONG",{});var hca=s(kye);OYr=r(hca,"openai-gpt"),hca.forEach(t),VYr=r(IYe," \u2014 "),dae=n(IYe,"A",{href:!0});var uca=s(dae);XYr=r(uca,"TFOpenAIGPTForSequenceClassification"),uca.forEach(t),zYr=r(IYe," (OpenAI GPT model)"),IYe.forEach(t),QYr=i(ae),hA=n(ae,"LI",{});var NYe=s(hA);Sye=n(NYe,"STRONG",{});var pca=s(Sye);WYr=r(pca,"rembert"),pca.forEach(t),UYr=r(NYe," \u2014 "),cae=n(NYe,"A",{href:!0});var _ca=s(cae);HYr=r(_ca,"TFRemBertForSequenceClassification"),_ca.forEach(t),JYr=r(NYe," (RemBERT model)"),NYe.forEach(t),YYr=i(ae),uA=n(ae,"LI",{});var qYe=s(uA);Rye=n(qYe,"STRONG",{});var bca=s(Rye);ZYr=r(bca,"roberta"),bca.forEach(t),KYr=r(qYe," \u2014 "),mae=n(qYe,"A",{href:!0});var vca=s(mae);eZr=r(vca,"TFRobertaForSequenceClassification"),vca.forEach(t),oZr=r(qYe," (RoBERTa model)"),qYe.forEach(t),rZr=i(ae),pA=n(ae,"LI",{});var jYe=s(pA);Pye=n(jYe,"STRONG",{});var Fca=s(Pye);tZr=r(Fca,"roformer"),Fca.forEach(t),aZr=r(jYe," \u2014 "),fae=n(jYe,"A",{href:!0});var Tca=s(fae);nZr=r(Tca,"TFRoFormerForSequenceClassification"),Tca.forEach(t),sZr=r(jYe," (RoFormer model)"),jYe.forEach(t),lZr=i(ae),_A=n(ae,"LI",{});var DYe=s(_A);Bye=n(DYe,"STRONG",{});var Mca=s(Bye);iZr=r(Mca,"tapas"),Mca.forEach(t),dZr=r(DYe," \u2014 "),gae=n(DYe,"A",{href:!0});var Eca=s(gae);cZr=r(Eca,"TFTapasForSequenceClassification"),Eca.forEach(t),mZr=r(DYe," (TAPAS model)"),DYe.forEach(t),fZr=i(ae),bA=n(ae,"LI",{});var GYe=s(bA);Iye=n(GYe,"STRONG",{});var Cca=s(Iye);gZr=r(Cca,"transfo-xl"),Cca.forEach(t),hZr=r(GYe," \u2014 "),hae=n(GYe,"A",{href:!0});var wca=s(hae);uZr=r(wca,"TFTransfoXLForSequenceClassification"),wca.forEach(t),pZr=r(GYe," (Transformer-XL model)"),GYe.forEach(t),_Zr=i(ae),vA=n(ae,"LI",{});var OYe=s(vA);Nye=n(OYe,"STRONG",{});var Aca=s(Nye);bZr=r(Aca,"xlm"),Aca.forEach(t),vZr=r(OYe," \u2014 "),uae=n(OYe,"A",{href:!0});var Lca=s(uae);FZr=r(Lca,"TFXLMForSequenceClassification"),Lca.forEach(t),TZr=r(OYe," (XLM model)"),OYe.forEach(t),MZr=i(ae),FA=n(ae,"LI",{});var VYe=s(FA);qye=n(VYe,"STRONG",{});var yca=s(qye);EZr=r(yca,"xlm-roberta"),yca.forEach(t),CZr=r(VYe," \u2014 "),pae=n(VYe,"A",{href:!0});var xca=s(pae);wZr=r(xca,"TFXLMRobertaForSequenceClassification"),xca.forEach(t),AZr=r(VYe," (XLM-RoBERTa model)"),VYe.forEach(t),LZr=i(ae),TA=n(ae,"LI",{});var XYe=s(TA);jye=n(XYe,"STRONG",{});var $ca=s(jye);yZr=r($ca,"xlnet"),$ca.forEach(t),xZr=r(XYe," \u2014 "),_ae=n(XYe,"A",{href:!0});var kca=s(_ae);$Zr=r(kca,"TFXLNetForSequenceClassification"),kca.forEach(t),kZr=r(XYe," (XLNet model)"),XYe.forEach(t),ae.forEach(t),SZr=i(Mi),T(MA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),Rro=i(m),Em=n(m,"H2",{class:!0});var Hao=s(Em);EA=n(Hao,"A",{id:!0,class:!0,href:!0});var Sca=s(EA);Dye=n(Sca,"SPAN",{});var Rca=s(Dye);T(cR.$$.fragment,Rca),Rca.forEach(t),Sca.forEach(t),RZr=i(Hao),Gye=n(Hao,"SPAN",{});var Pca=s(Gye);PZr=r(Pca,"TFAutoModelForMultipleChoice"),Pca.forEach(t),Hao.forEach(t),Pro=i(m),pr=n(m,"DIV",{class:!0});var Ei=s(pr);T(mR.$$.fragment,Ei),BZr=i(Ei),Cm=n(Ei,"P",{});var tce=s(Cm);IZr=r(tce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bae=n(tce,"A",{href:!0});var Bca=s(bae);NZr=r(Bca,"from_pretrained()"),Bca.forEach(t),qZr=r(tce," class method or the "),vae=n(tce,"A",{href:!0});var Ica=s(vae);jZr=r(Ica,"from_config()"),Ica.forEach(t),DZr=r(tce,` class
method.`),tce.forEach(t),GZr=i(Ei),fR=n(Ei,"P",{});var Jao=s(fR);OZr=r(Jao,"This class cannot be instantiated directly using "),Oye=n(Jao,"CODE",{});var Nca=s(Oye);VZr=r(Nca,"__init__()"),Nca.forEach(t),XZr=r(Jao," (throws an error)."),Jao.forEach(t),zZr=i(Ei),oa=n(Ei,"DIV",{class:!0});var B9=s(oa);T(gR.$$.fragment,B9),QZr=i(B9),Vye=n(B9,"P",{});var qca=s(Vye);WZr=r(qca,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qca.forEach(t),UZr=i(B9),wm=n(B9,"P",{});var ace=s(wm);HZr=r(ace,`Note:
Loading a model from its configuration file does `),Xye=n(ace,"STRONG",{});var jca=s(Xye);JZr=r(jca,"not"),jca.forEach(t),YZr=r(ace,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=n(ace,"A",{href:!0});var Dca=s(Fae);ZZr=r(Dca,"from_pretrained()"),Dca.forEach(t),KZr=r(ace," to load the model weights."),ace.forEach(t),eKr=i(B9),T(CA.$$.fragment,B9),B9.forEach(t),oKr=i(Ei),Qr=n(Ei,"DIV",{class:!0});var Ci=s(Qr);T(hR.$$.fragment,Ci),rKr=i(Ci),zye=n(Ci,"P",{});var Gca=s(zye);tKr=r(Gca,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Gca.forEach(t),aKr=i(Ci),qn=n(Ci,"P",{});var I9=s(qn);nKr=r(I9,"The model class to instantiate is selected based on the "),Qye=n(I9,"CODE",{});var Oca=s(Qye);sKr=r(Oca,"model_type"),Oca.forEach(t),lKr=r(I9,` property of the config object (either
passed as an argument or loaded from `),Wye=n(I9,"CODE",{});var Vca=s(Wye);iKr=r(Vca,"pretrained_model_name_or_path"),Vca.forEach(t),dKr=r(I9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uye=n(I9,"CODE",{});var Xca=s(Uye);cKr=r(Xca,"pretrained_model_name_or_path"),Xca.forEach(t),mKr=r(I9,":"),I9.forEach(t),fKr=i(Ci),ve=n(Ci,"UL",{});var Te=s(ve);wA=n(Te,"LI",{});var zYe=s(wA);Hye=n(zYe,"STRONG",{});var zca=s(Hye);gKr=r(zca,"albert"),zca.forEach(t),hKr=r(zYe," \u2014 "),Tae=n(zYe,"A",{href:!0});var Qca=s(Tae);uKr=r(Qca,"TFAlbertForMultipleChoice"),Qca.forEach(t),pKr=r(zYe," (ALBERT model)"),zYe.forEach(t),_Kr=i(Te),AA=n(Te,"LI",{});var QYe=s(AA);Jye=n(QYe,"STRONG",{});var Wca=s(Jye);bKr=r(Wca,"bert"),Wca.forEach(t),vKr=r(QYe," \u2014 "),Mae=n(QYe,"A",{href:!0});var Uca=s(Mae);FKr=r(Uca,"TFBertForMultipleChoice"),Uca.forEach(t),TKr=r(QYe," (BERT model)"),QYe.forEach(t),MKr=i(Te),LA=n(Te,"LI",{});var WYe=s(LA);Yye=n(WYe,"STRONG",{});var Hca=s(Yye);EKr=r(Hca,"camembert"),Hca.forEach(t),CKr=r(WYe," \u2014 "),Eae=n(WYe,"A",{href:!0});var Jca=s(Eae);wKr=r(Jca,"TFCamembertForMultipleChoice"),Jca.forEach(t),AKr=r(WYe," (CamemBERT model)"),WYe.forEach(t),LKr=i(Te),yA=n(Te,"LI",{});var UYe=s(yA);Zye=n(UYe,"STRONG",{});var Yca=s(Zye);yKr=r(Yca,"convbert"),Yca.forEach(t),xKr=r(UYe," \u2014 "),Cae=n(UYe,"A",{href:!0});var Zca=s(Cae);$Kr=r(Zca,"TFConvBertForMultipleChoice"),Zca.forEach(t),kKr=r(UYe," (ConvBERT model)"),UYe.forEach(t),SKr=i(Te),xA=n(Te,"LI",{});var HYe=s(xA);Kye=n(HYe,"STRONG",{});var Kca=s(Kye);RKr=r(Kca,"distilbert"),Kca.forEach(t),PKr=r(HYe," \u2014 "),wae=n(HYe,"A",{href:!0});var ema=s(wae);BKr=r(ema,"TFDistilBertForMultipleChoice"),ema.forEach(t),IKr=r(HYe," (DistilBERT model)"),HYe.forEach(t),NKr=i(Te),$A=n(Te,"LI",{});var JYe=s($A);e8e=n(JYe,"STRONG",{});var oma=s(e8e);qKr=r(oma,"electra"),oma.forEach(t),jKr=r(JYe," \u2014 "),Aae=n(JYe,"A",{href:!0});var rma=s(Aae);DKr=r(rma,"TFElectraForMultipleChoice"),rma.forEach(t),GKr=r(JYe," (ELECTRA model)"),JYe.forEach(t),OKr=i(Te),kA=n(Te,"LI",{});var YYe=s(kA);o8e=n(YYe,"STRONG",{});var tma=s(o8e);VKr=r(tma,"flaubert"),tma.forEach(t),XKr=r(YYe," \u2014 "),Lae=n(YYe,"A",{href:!0});var ama=s(Lae);zKr=r(ama,"TFFlaubertForMultipleChoice"),ama.forEach(t),QKr=r(YYe," (FlauBERT model)"),YYe.forEach(t),WKr=i(Te),SA=n(Te,"LI",{});var ZYe=s(SA);r8e=n(ZYe,"STRONG",{});var nma=s(r8e);UKr=r(nma,"funnel"),nma.forEach(t),HKr=r(ZYe," \u2014 "),yae=n(ZYe,"A",{href:!0});var sma=s(yae);JKr=r(sma,"TFFunnelForMultipleChoice"),sma.forEach(t),YKr=r(ZYe," (Funnel Transformer model)"),ZYe.forEach(t),ZKr=i(Te),RA=n(Te,"LI",{});var KYe=s(RA);t8e=n(KYe,"STRONG",{});var lma=s(t8e);KKr=r(lma,"longformer"),lma.forEach(t),eet=r(KYe," \u2014 "),xae=n(KYe,"A",{href:!0});var ima=s(xae);oet=r(ima,"TFLongformerForMultipleChoice"),ima.forEach(t),ret=r(KYe," (Longformer model)"),KYe.forEach(t),tet=i(Te),PA=n(Te,"LI",{});var eZe=s(PA);a8e=n(eZe,"STRONG",{});var dma=s(a8e);aet=r(dma,"mobilebert"),dma.forEach(t),net=r(eZe," \u2014 "),$ae=n(eZe,"A",{href:!0});var cma=s($ae);set=r(cma,"TFMobileBertForMultipleChoice"),cma.forEach(t),iet=r(eZe," (MobileBERT model)"),eZe.forEach(t),det=i(Te),BA=n(Te,"LI",{});var oZe=s(BA);n8e=n(oZe,"STRONG",{});var mma=s(n8e);cet=r(mma,"mpnet"),mma.forEach(t),met=r(oZe," \u2014 "),kae=n(oZe,"A",{href:!0});var fma=s(kae);fet=r(fma,"TFMPNetForMultipleChoice"),fma.forEach(t),get=r(oZe," (MPNet model)"),oZe.forEach(t),het=i(Te),IA=n(Te,"LI",{});var rZe=s(IA);s8e=n(rZe,"STRONG",{});var gma=s(s8e);uet=r(gma,"rembert"),gma.forEach(t),pet=r(rZe," \u2014 "),Sae=n(rZe,"A",{href:!0});var hma=s(Sae);_et=r(hma,"TFRemBertForMultipleChoice"),hma.forEach(t),bet=r(rZe," (RemBERT model)"),rZe.forEach(t),vet=i(Te),NA=n(Te,"LI",{});var tZe=s(NA);l8e=n(tZe,"STRONG",{});var uma=s(l8e);Fet=r(uma,"roberta"),uma.forEach(t),Tet=r(tZe," \u2014 "),Rae=n(tZe,"A",{href:!0});var pma=s(Rae);Met=r(pma,"TFRobertaForMultipleChoice"),pma.forEach(t),Eet=r(tZe," (RoBERTa model)"),tZe.forEach(t),Cet=i(Te),qA=n(Te,"LI",{});var aZe=s(qA);i8e=n(aZe,"STRONG",{});var _ma=s(i8e);wet=r(_ma,"roformer"),_ma.forEach(t),Aet=r(aZe," \u2014 "),Pae=n(aZe,"A",{href:!0});var bma=s(Pae);Let=r(bma,"TFRoFormerForMultipleChoice"),bma.forEach(t),yet=r(aZe," (RoFormer model)"),aZe.forEach(t),xet=i(Te),jA=n(Te,"LI",{});var nZe=s(jA);d8e=n(nZe,"STRONG",{});var vma=s(d8e);$et=r(vma,"xlm"),vma.forEach(t),ket=r(nZe," \u2014 "),Bae=n(nZe,"A",{href:!0});var Fma=s(Bae);Set=r(Fma,"TFXLMForMultipleChoice"),Fma.forEach(t),Ret=r(nZe," (XLM model)"),nZe.forEach(t),Pet=i(Te),DA=n(Te,"LI",{});var sZe=s(DA);c8e=n(sZe,"STRONG",{});var Tma=s(c8e);Bet=r(Tma,"xlm-roberta"),Tma.forEach(t),Iet=r(sZe," \u2014 "),Iae=n(sZe,"A",{href:!0});var Mma=s(Iae);Net=r(Mma,"TFXLMRobertaForMultipleChoice"),Mma.forEach(t),qet=r(sZe," (XLM-RoBERTa model)"),sZe.forEach(t),jet=i(Te),GA=n(Te,"LI",{});var lZe=s(GA);m8e=n(lZe,"STRONG",{});var Ema=s(m8e);Det=r(Ema,"xlnet"),Ema.forEach(t),Get=r(lZe," \u2014 "),Nae=n(lZe,"A",{href:!0});var Cma=s(Nae);Oet=r(Cma,"TFXLNetForMultipleChoice"),Cma.forEach(t),Vet=r(lZe," (XLNet model)"),lZe.forEach(t),Te.forEach(t),Xet=i(Ci),T(OA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),Bro=i(m),Am=n(m,"H2",{class:!0});var Yao=s(Am);VA=n(Yao,"A",{id:!0,class:!0,href:!0});var wma=s(VA);f8e=n(wma,"SPAN",{});var Ama=s(f8e);T(uR.$$.fragment,Ama),Ama.forEach(t),wma.forEach(t),zet=i(Yao),g8e=n(Yao,"SPAN",{});var Lma=s(g8e);Qet=r(Lma,"TFAutoModelForNextSentencePrediction"),Lma.forEach(t),Yao.forEach(t),Iro=i(m),_r=n(m,"DIV",{class:!0});var wi=s(_r);T(pR.$$.fragment,wi),Wet=i(wi),Lm=n(wi,"P",{});var nce=s(Lm);Uet=r(nce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qae=n(nce,"A",{href:!0});var yma=s(qae);Het=r(yma,"from_pretrained()"),yma.forEach(t),Jet=r(nce," class method or the "),jae=n(nce,"A",{href:!0});var xma=s(jae);Yet=r(xma,"from_config()"),xma.forEach(t),Zet=r(nce,` class
method.`),nce.forEach(t),Ket=i(wi),_R=n(wi,"P",{});var Zao=s(_R);eot=r(Zao,"This class cannot be instantiated directly using "),h8e=n(Zao,"CODE",{});var $ma=s(h8e);oot=r($ma,"__init__()"),$ma.forEach(t),rot=r(Zao," (throws an error)."),Zao.forEach(t),tot=i(wi),ra=n(wi,"DIV",{class:!0});var N9=s(ra);T(bR.$$.fragment,N9),aot=i(N9),u8e=n(N9,"P",{});var kma=s(u8e);not=r(kma,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kma.forEach(t),sot=i(N9),ym=n(N9,"P",{});var sce=s(ym);lot=r(sce,`Note:
Loading a model from its configuration file does `),p8e=n(sce,"STRONG",{});var Sma=s(p8e);iot=r(Sma,"not"),Sma.forEach(t),dot=r(sce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dae=n(sce,"A",{href:!0});var Rma=s(Dae);cot=r(Rma,"from_pretrained()"),Rma.forEach(t),mot=r(sce," to load the model weights."),sce.forEach(t),fot=i(N9),T(XA.$$.fragment,N9),N9.forEach(t),got=i(wi),Wr=n(wi,"DIV",{class:!0});var Ai=s(Wr);T(vR.$$.fragment,Ai),hot=i(Ai),_8e=n(Ai,"P",{});var Pma=s(_8e);uot=r(Pma,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pma.forEach(t),pot=i(Ai),jn=n(Ai,"P",{});var q9=s(jn);_ot=r(q9,"The model class to instantiate is selected based on the "),b8e=n(q9,"CODE",{});var Bma=s(b8e);bot=r(Bma,"model_type"),Bma.forEach(t),vot=r(q9,` property of the config object (either
passed as an argument or loaded from `),v8e=n(q9,"CODE",{});var Ima=s(v8e);Fot=r(Ima,"pretrained_model_name_or_path"),Ima.forEach(t),Tot=r(q9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F8e=n(q9,"CODE",{});var Nma=s(F8e);Mot=r(Nma,"pretrained_model_name_or_path"),Nma.forEach(t),Eot=r(q9,":"),q9.forEach(t),Cot=i(Ai),FR=n(Ai,"UL",{});var Kao=s(FR);zA=n(Kao,"LI",{});var iZe=s(zA);T8e=n(iZe,"STRONG",{});var qma=s(T8e);wot=r(qma,"bert"),qma.forEach(t),Aot=r(iZe," \u2014 "),Gae=n(iZe,"A",{href:!0});var jma=s(Gae);Lot=r(jma,"TFBertForNextSentencePrediction"),jma.forEach(t),yot=r(iZe," (BERT model)"),iZe.forEach(t),xot=i(Kao),QA=n(Kao,"LI",{});var dZe=s(QA);M8e=n(dZe,"STRONG",{});var Dma=s(M8e);$ot=r(Dma,"mobilebert"),Dma.forEach(t),kot=r(dZe," \u2014 "),Oae=n(dZe,"A",{href:!0});var Gma=s(Oae);Sot=r(Gma,"TFMobileBertForNextSentencePrediction"),Gma.forEach(t),Rot=r(dZe," (MobileBERT model)"),dZe.forEach(t),Kao.forEach(t),Pot=i(Ai),T(WA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),Nro=i(m),xm=n(m,"H2",{class:!0});var eno=s(xm);UA=n(eno,"A",{id:!0,class:!0,href:!0});var Oma=s(UA);E8e=n(Oma,"SPAN",{});var Vma=s(E8e);T(TR.$$.fragment,Vma),Vma.forEach(t),Oma.forEach(t),Bot=i(eno),C8e=n(eno,"SPAN",{});var Xma=s(C8e);Iot=r(Xma,"TFAutoModelForTableQuestionAnswering"),Xma.forEach(t),eno.forEach(t),qro=i(m),br=n(m,"DIV",{class:!0});var Li=s(br);T(MR.$$.fragment,Li),Not=i(Li),$m=n(Li,"P",{});var lce=s($m);qot=r(lce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vae=n(lce,"A",{href:!0});var zma=s(Vae);jot=r(zma,"from_pretrained()"),zma.forEach(t),Dot=r(lce," class method or the "),Xae=n(lce,"A",{href:!0});var Qma=s(Xae);Got=r(Qma,"from_config()"),Qma.forEach(t),Oot=r(lce,` class
method.`),lce.forEach(t),Vot=i(Li),ER=n(Li,"P",{});var ono=s(ER);Xot=r(ono,"This class cannot be instantiated directly using "),w8e=n(ono,"CODE",{});var Wma=s(w8e);zot=r(Wma,"__init__()"),Wma.forEach(t),Qot=r(ono," (throws an error)."),ono.forEach(t),Wot=i(Li),ta=n(Li,"DIV",{class:!0});var j9=s(ta);T(CR.$$.fragment,j9),Uot=i(j9),A8e=n(j9,"P",{});var Uma=s(A8e);Hot=r(Uma,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Uma.forEach(t),Jot=i(j9),km=n(j9,"P",{});var ice=s(km);Yot=r(ice,`Note:
Loading a model from its configuration file does `),L8e=n(ice,"STRONG",{});var Hma=s(L8e);Zot=r(Hma,"not"),Hma.forEach(t),Kot=r(ice,` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=n(ice,"A",{href:!0});var Jma=s(zae);ert=r(Jma,"from_pretrained()"),Jma.forEach(t),ort=r(ice," to load the model weights."),ice.forEach(t),rrt=i(j9),T(HA.$$.fragment,j9),j9.forEach(t),trt=i(Li),Ur=n(Li,"DIV",{class:!0});var yi=s(Ur);T(wR.$$.fragment,yi),art=i(yi),y8e=n(yi,"P",{});var Yma=s(y8e);nrt=r(Yma,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yma.forEach(t),srt=i(yi),Dn=n(yi,"P",{});var D9=s(Dn);lrt=r(D9,"The model class to instantiate is selected based on the "),x8e=n(D9,"CODE",{});var Zma=s(x8e);irt=r(Zma,"model_type"),Zma.forEach(t),drt=r(D9,` property of the config object (either
passed as an argument or loaded from `),$8e=n(D9,"CODE",{});var Kma=s($8e);crt=r(Kma,"pretrained_model_name_or_path"),Kma.forEach(t),mrt=r(D9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k8e=n(D9,"CODE",{});var efa=s(k8e);frt=r(efa,"pretrained_model_name_or_path"),efa.forEach(t),grt=r(D9,":"),D9.forEach(t),hrt=i(yi),S8e=n(yi,"UL",{});var ofa=s(S8e);JA=n(ofa,"LI",{});var cZe=s(JA);R8e=n(cZe,"STRONG",{});var rfa=s(R8e);urt=r(rfa,"tapas"),rfa.forEach(t),prt=r(cZe," \u2014 "),Qae=n(cZe,"A",{href:!0});var tfa=s(Qae);_rt=r(tfa,"TFTapasForQuestionAnswering"),tfa.forEach(t),brt=r(cZe," (TAPAS model)"),cZe.forEach(t),ofa.forEach(t),vrt=i(yi),T(YA.$$.fragment,yi),yi.forEach(t),Li.forEach(t),jro=i(m),Sm=n(m,"H2",{class:!0});var rno=s(Sm);ZA=n(rno,"A",{id:!0,class:!0,href:!0});var afa=s(ZA);P8e=n(afa,"SPAN",{});var nfa=s(P8e);T(AR.$$.fragment,nfa),nfa.forEach(t),afa.forEach(t),Frt=i(rno),B8e=n(rno,"SPAN",{});var sfa=s(B8e);Trt=r(sfa,"TFAutoModelForDocumentQuestionAnswering"),sfa.forEach(t),rno.forEach(t),Dro=i(m),vr=n(m,"DIV",{class:!0});var xi=s(vr);T(LR.$$.fragment,xi),Mrt=i(xi),Rm=n(xi,"P",{});var dce=s(Rm);Ert=r(dce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Wae=n(dce,"A",{href:!0});var lfa=s(Wae);Crt=r(lfa,"from_pretrained()"),lfa.forEach(t),wrt=r(dce," class method or the "),Uae=n(dce,"A",{href:!0});var ifa=s(Uae);Art=r(ifa,"from_config()"),ifa.forEach(t),Lrt=r(dce,` class
method.`),dce.forEach(t),yrt=i(xi),yR=n(xi,"P",{});var tno=s(yR);xrt=r(tno,"This class cannot be instantiated directly using "),I8e=n(tno,"CODE",{});var dfa=s(I8e);$rt=r(dfa,"__init__()"),dfa.forEach(t),krt=r(tno," (throws an error)."),tno.forEach(t),Srt=i(xi),aa=n(xi,"DIV",{class:!0});var G9=s(aa);T(xR.$$.fragment,G9),Rrt=i(G9),N8e=n(G9,"P",{});var cfa=s(N8e);Prt=r(cfa,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),cfa.forEach(t),Brt=i(G9),Pm=n(G9,"P",{});var cce=s(Pm);Irt=r(cce,`Note:
Loading a model from its configuration file does `),q8e=n(cce,"STRONG",{});var mfa=s(q8e);Nrt=r(mfa,"not"),mfa.forEach(t),qrt=r(cce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hae=n(cce,"A",{href:!0});var ffa=s(Hae);jrt=r(ffa,"from_pretrained()"),ffa.forEach(t),Drt=r(cce," to load the model weights."),cce.forEach(t),Grt=i(G9),T(KA.$$.fragment,G9),G9.forEach(t),Ort=i(xi),Hr=n(xi,"DIV",{class:!0});var $i=s(Hr);T($R.$$.fragment,$i),Vrt=i($i),j8e=n($i,"P",{});var gfa=s(j8e);Xrt=r(gfa,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),gfa.forEach(t),zrt=i($i),Gn=n($i,"P",{});var O9=s(Gn);Qrt=r(O9,"The model class to instantiate is selected based on the "),D8e=n(O9,"CODE",{});var hfa=s(D8e);Wrt=r(hfa,"model_type"),hfa.forEach(t),Urt=r(O9,` property of the config object (either
passed as an argument or loaded from `),G8e=n(O9,"CODE",{});var ufa=s(G8e);Hrt=r(ufa,"pretrained_model_name_or_path"),ufa.forEach(t),Jrt=r(O9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=n(O9,"CODE",{});var pfa=s(O8e);Yrt=r(pfa,"pretrained_model_name_or_path"),pfa.forEach(t),Zrt=r(O9,":"),O9.forEach(t),Krt=i($i),V8e=n($i,"UL",{});var _fa=s(V8e);e6=n(_fa,"LI",{});var mZe=s(e6);X8e=n(mZe,"STRONG",{});var bfa=s(X8e);ett=r(bfa,"layoutlm"),bfa.forEach(t),ott=r(mZe," \u2014 "),Jae=n(mZe,"A",{href:!0});var vfa=s(Jae);rtt=r(vfa,"TFLayoutLMForQuestionAnswering"),vfa.forEach(t),ttt=r(mZe," (LayoutLM model)"),mZe.forEach(t),_fa.forEach(t),att=i($i),T(o6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),Gro=i(m),Bm=n(m,"H2",{class:!0});var ano=s(Bm);r6=n(ano,"A",{id:!0,class:!0,href:!0});var Ffa=s(r6);z8e=n(Ffa,"SPAN",{});var Tfa=s(z8e);T(kR.$$.fragment,Tfa),Tfa.forEach(t),Ffa.forEach(t),ntt=i(ano),Q8e=n(ano,"SPAN",{});var Mfa=s(Q8e);stt=r(Mfa,"TFAutoModelForTokenClassification"),Mfa.forEach(t),ano.forEach(t),Oro=i(m),Fr=n(m,"DIV",{class:!0});var ki=s(Fr);T(SR.$$.fragment,ki),ltt=i(ki),Im=n(ki,"P",{});var mce=s(Im);itt=r(mce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yae=n(mce,"A",{href:!0});var Efa=s(Yae);dtt=r(Efa,"from_pretrained()"),Efa.forEach(t),ctt=r(mce," class method or the "),Zae=n(mce,"A",{href:!0});var Cfa=s(Zae);mtt=r(Cfa,"from_config()"),Cfa.forEach(t),ftt=r(mce,` class
method.`),mce.forEach(t),gtt=i(ki),RR=n(ki,"P",{});var nno=s(RR);htt=r(nno,"This class cannot be instantiated directly using "),W8e=n(nno,"CODE",{});var wfa=s(W8e);utt=r(wfa,"__init__()"),wfa.forEach(t),ptt=r(nno," (throws an error)."),nno.forEach(t),_tt=i(ki),na=n(ki,"DIV",{class:!0});var V9=s(na);T(PR.$$.fragment,V9),btt=i(V9),U8e=n(V9,"P",{});var Afa=s(U8e);vtt=r(Afa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Afa.forEach(t),Ftt=i(V9),Nm=n(V9,"P",{});var fce=s(Nm);Ttt=r(fce,`Note:
Loading a model from its configuration file does `),H8e=n(fce,"STRONG",{});var Lfa=s(H8e);Mtt=r(Lfa,"not"),Lfa.forEach(t),Ett=r(fce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=n(fce,"A",{href:!0});var yfa=s(Kae);Ctt=r(yfa,"from_pretrained()"),yfa.forEach(t),wtt=r(fce," to load the model weights."),fce.forEach(t),Att=i(V9),T(t6.$$.fragment,V9),V9.forEach(t),Ltt=i(ki),Jr=n(ki,"DIV",{class:!0});var Si=s(Jr);T(BR.$$.fragment,Si),ytt=i(Si),J8e=n(Si,"P",{});var xfa=s(J8e);xtt=r(xfa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xfa.forEach(t),$tt=i(Si),On=n(Si,"P",{});var X9=s(On);ktt=r(X9,"The model class to instantiate is selected based on the "),Y8e=n(X9,"CODE",{});var $fa=s(Y8e);Stt=r($fa,"model_type"),$fa.forEach(t),Rtt=r(X9,` property of the config object (either
passed as an argument or loaded from `),Z8e=n(X9,"CODE",{});var kfa=s(Z8e);Ptt=r(kfa,"pretrained_model_name_or_path"),kfa.forEach(t),Btt=r(X9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K8e=n(X9,"CODE",{});var Sfa=s(K8e);Itt=r(Sfa,"pretrained_model_name_or_path"),Sfa.forEach(t),Ntt=r(X9,":"),X9.forEach(t),qtt=i(Si),ce=n(Si,"UL",{});var he=s(ce);a6=n(he,"LI",{});var fZe=s(a6);e9e=n(fZe,"STRONG",{});var Rfa=s(e9e);jtt=r(Rfa,"albert"),Rfa.forEach(t),Dtt=r(fZe," \u2014 "),ene=n(fZe,"A",{href:!0});var Pfa=s(ene);Gtt=r(Pfa,"TFAlbertForTokenClassification"),Pfa.forEach(t),Ott=r(fZe," (ALBERT model)"),fZe.forEach(t),Vtt=i(he),n6=n(he,"LI",{});var gZe=s(n6);o9e=n(gZe,"STRONG",{});var Bfa=s(o9e);Xtt=r(Bfa,"bert"),Bfa.forEach(t),ztt=r(gZe," \u2014 "),one=n(gZe,"A",{href:!0});var Ifa=s(one);Qtt=r(Ifa,"TFBertForTokenClassification"),Ifa.forEach(t),Wtt=r(gZe," (BERT model)"),gZe.forEach(t),Utt=i(he),s6=n(he,"LI",{});var hZe=s(s6);r9e=n(hZe,"STRONG",{});var Nfa=s(r9e);Htt=r(Nfa,"camembert"),Nfa.forEach(t),Jtt=r(hZe," \u2014 "),rne=n(hZe,"A",{href:!0});var qfa=s(rne);Ytt=r(qfa,"TFCamembertForTokenClassification"),qfa.forEach(t),Ztt=r(hZe," (CamemBERT model)"),hZe.forEach(t),Ktt=i(he),l6=n(he,"LI",{});var uZe=s(l6);t9e=n(uZe,"STRONG",{});var jfa=s(t9e);eat=r(jfa,"convbert"),jfa.forEach(t),oat=r(uZe," \u2014 "),tne=n(uZe,"A",{href:!0});var Dfa=s(tne);rat=r(Dfa,"TFConvBertForTokenClassification"),Dfa.forEach(t),tat=r(uZe," (ConvBERT model)"),uZe.forEach(t),aat=i(he),i6=n(he,"LI",{});var pZe=s(i6);a9e=n(pZe,"STRONG",{});var Gfa=s(a9e);nat=r(Gfa,"deberta"),Gfa.forEach(t),sat=r(pZe," \u2014 "),ane=n(pZe,"A",{href:!0});var Ofa=s(ane);lat=r(Ofa,"TFDebertaForTokenClassification"),Ofa.forEach(t),iat=r(pZe," (DeBERTa model)"),pZe.forEach(t),dat=i(he),d6=n(he,"LI",{});var _Ze=s(d6);n9e=n(_Ze,"STRONG",{});var Vfa=s(n9e);cat=r(Vfa,"deberta-v2"),Vfa.forEach(t),mat=r(_Ze," \u2014 "),nne=n(_Ze,"A",{href:!0});var Xfa=s(nne);fat=r(Xfa,"TFDebertaV2ForTokenClassification"),Xfa.forEach(t),gat=r(_Ze," (DeBERTa-v2 model)"),_Ze.forEach(t),hat=i(he),c6=n(he,"LI",{});var bZe=s(c6);s9e=n(bZe,"STRONG",{});var zfa=s(s9e);uat=r(zfa,"distilbert"),zfa.forEach(t),pat=r(bZe," \u2014 "),sne=n(bZe,"A",{href:!0});var Qfa=s(sne);_at=r(Qfa,"TFDistilBertForTokenClassification"),Qfa.forEach(t),bat=r(bZe," (DistilBERT model)"),bZe.forEach(t),vat=i(he),m6=n(he,"LI",{});var vZe=s(m6);l9e=n(vZe,"STRONG",{});var Wfa=s(l9e);Fat=r(Wfa,"electra"),Wfa.forEach(t),Tat=r(vZe," \u2014 "),lne=n(vZe,"A",{href:!0});var Ufa=s(lne);Mat=r(Ufa,"TFElectraForTokenClassification"),Ufa.forEach(t),Eat=r(vZe," (ELECTRA model)"),vZe.forEach(t),Cat=i(he),f6=n(he,"LI",{});var FZe=s(f6);i9e=n(FZe,"STRONG",{});var Hfa=s(i9e);wat=r(Hfa,"flaubert"),Hfa.forEach(t),Aat=r(FZe," \u2014 "),ine=n(FZe,"A",{href:!0});var Jfa=s(ine);Lat=r(Jfa,"TFFlaubertForTokenClassification"),Jfa.forEach(t),yat=r(FZe," (FlauBERT model)"),FZe.forEach(t),xat=i(he),g6=n(he,"LI",{});var TZe=s(g6);d9e=n(TZe,"STRONG",{});var Yfa=s(d9e);$at=r(Yfa,"funnel"),Yfa.forEach(t),kat=r(TZe," \u2014 "),dne=n(TZe,"A",{href:!0});var Zfa=s(dne);Sat=r(Zfa,"TFFunnelForTokenClassification"),Zfa.forEach(t),Rat=r(TZe," (Funnel Transformer model)"),TZe.forEach(t),Pat=i(he),h6=n(he,"LI",{});var MZe=s(h6);c9e=n(MZe,"STRONG",{});var Kfa=s(c9e);Bat=r(Kfa,"layoutlm"),Kfa.forEach(t),Iat=r(MZe," \u2014 "),cne=n(MZe,"A",{href:!0});var ega=s(cne);Nat=r(ega,"TFLayoutLMForTokenClassification"),ega.forEach(t),qat=r(MZe," (LayoutLM model)"),MZe.forEach(t),jat=i(he),u6=n(he,"LI",{});var EZe=s(u6);m9e=n(EZe,"STRONG",{});var oga=s(m9e);Dat=r(oga,"layoutlmv3"),oga.forEach(t),Gat=r(EZe," \u2014 "),mne=n(EZe,"A",{href:!0});var rga=s(mne);Oat=r(rga,"TFLayoutLMv3ForTokenClassification"),rga.forEach(t),Vat=r(EZe," (LayoutLMv3 model)"),EZe.forEach(t),Xat=i(he),p6=n(he,"LI",{});var CZe=s(p6);f9e=n(CZe,"STRONG",{});var tga=s(f9e);zat=r(tga,"longformer"),tga.forEach(t),Qat=r(CZe," \u2014 "),fne=n(CZe,"A",{href:!0});var aga=s(fne);Wat=r(aga,"TFLongformerForTokenClassification"),aga.forEach(t),Uat=r(CZe," (Longformer model)"),CZe.forEach(t),Hat=i(he),_6=n(he,"LI",{});var wZe=s(_6);g9e=n(wZe,"STRONG",{});var nga=s(g9e);Jat=r(nga,"mobilebert"),nga.forEach(t),Yat=r(wZe," \u2014 "),gne=n(wZe,"A",{href:!0});var sga=s(gne);Zat=r(sga,"TFMobileBertForTokenClassification"),sga.forEach(t),Kat=r(wZe," (MobileBERT model)"),wZe.forEach(t),ent=i(he),b6=n(he,"LI",{});var AZe=s(b6);h9e=n(AZe,"STRONG",{});var lga=s(h9e);ont=r(lga,"mpnet"),lga.forEach(t),rnt=r(AZe," \u2014 "),hne=n(AZe,"A",{href:!0});var iga=s(hne);tnt=r(iga,"TFMPNetForTokenClassification"),iga.forEach(t),ant=r(AZe," (MPNet model)"),AZe.forEach(t),nnt=i(he),v6=n(he,"LI",{});var LZe=s(v6);u9e=n(LZe,"STRONG",{});var dga=s(u9e);snt=r(dga,"rembert"),dga.forEach(t),lnt=r(LZe," \u2014 "),une=n(LZe,"A",{href:!0});var cga=s(une);int=r(cga,"TFRemBertForTokenClassification"),cga.forEach(t),dnt=r(LZe," (RemBERT model)"),LZe.forEach(t),cnt=i(he),F6=n(he,"LI",{});var yZe=s(F6);p9e=n(yZe,"STRONG",{});var mga=s(p9e);mnt=r(mga,"roberta"),mga.forEach(t),fnt=r(yZe," \u2014 "),pne=n(yZe,"A",{href:!0});var fga=s(pne);gnt=r(fga,"TFRobertaForTokenClassification"),fga.forEach(t),hnt=r(yZe," (RoBERTa model)"),yZe.forEach(t),unt=i(he),T6=n(he,"LI",{});var xZe=s(T6);_9e=n(xZe,"STRONG",{});var gga=s(_9e);pnt=r(gga,"roformer"),gga.forEach(t),_nt=r(xZe," \u2014 "),_ne=n(xZe,"A",{href:!0});var hga=s(_ne);bnt=r(hga,"TFRoFormerForTokenClassification"),hga.forEach(t),vnt=r(xZe," (RoFormer model)"),xZe.forEach(t),Fnt=i(he),M6=n(he,"LI",{});var $Ze=s(M6);b9e=n($Ze,"STRONG",{});var uga=s(b9e);Tnt=r(uga,"xlm"),uga.forEach(t),Mnt=r($Ze," \u2014 "),bne=n($Ze,"A",{href:!0});var pga=s(bne);Ent=r(pga,"TFXLMForTokenClassification"),pga.forEach(t),Cnt=r($Ze," (XLM model)"),$Ze.forEach(t),wnt=i(he),E6=n(he,"LI",{});var kZe=s(E6);v9e=n(kZe,"STRONG",{});var _ga=s(v9e);Ant=r(_ga,"xlm-roberta"),_ga.forEach(t),Lnt=r(kZe," \u2014 "),vne=n(kZe,"A",{href:!0});var bga=s(vne);ynt=r(bga,"TFXLMRobertaForTokenClassification"),bga.forEach(t),xnt=r(kZe," (XLM-RoBERTa model)"),kZe.forEach(t),$nt=i(he),C6=n(he,"LI",{});var SZe=s(C6);F9e=n(SZe,"STRONG",{});var vga=s(F9e);knt=r(vga,"xlnet"),vga.forEach(t),Snt=r(SZe," \u2014 "),Fne=n(SZe,"A",{href:!0});var Fga=s(Fne);Rnt=r(Fga,"TFXLNetForTokenClassification"),Fga.forEach(t),Pnt=r(SZe," (XLNet model)"),SZe.forEach(t),he.forEach(t),Bnt=i(Si),T(w6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),Vro=i(m),qm=n(m,"H2",{class:!0});var sno=s(qm);A6=n(sno,"A",{id:!0,class:!0,href:!0});var Tga=s(A6);T9e=n(Tga,"SPAN",{});var Mga=s(T9e);T(IR.$$.fragment,Mga),Mga.forEach(t),Tga.forEach(t),Int=i(sno),M9e=n(sno,"SPAN",{});var Ega=s(M9e);Nnt=r(Ega,"TFAutoModelForQuestionAnswering"),Ega.forEach(t),sno.forEach(t),Xro=i(m),Tr=n(m,"DIV",{class:!0});var Ri=s(Tr);T(NR.$$.fragment,Ri),qnt=i(Ri),jm=n(Ri,"P",{});var gce=s(jm);jnt=r(gce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tne=n(gce,"A",{href:!0});var Cga=s(Tne);Dnt=r(Cga,"from_pretrained()"),Cga.forEach(t),Gnt=r(gce," class method or the "),Mne=n(gce,"A",{href:!0});var wga=s(Mne);Ont=r(wga,"from_config()"),wga.forEach(t),Vnt=r(gce,` class
method.`),gce.forEach(t),Xnt=i(Ri),qR=n(Ri,"P",{});var lno=s(qR);znt=r(lno,"This class cannot be instantiated directly using "),E9e=n(lno,"CODE",{});var Aga=s(E9e);Qnt=r(Aga,"__init__()"),Aga.forEach(t),Wnt=r(lno," (throws an error)."),lno.forEach(t),Unt=i(Ri),sa=n(Ri,"DIV",{class:!0});var z9=s(sa);T(jR.$$.fragment,z9),Hnt=i(z9),C9e=n(z9,"P",{});var Lga=s(C9e);Jnt=r(Lga,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lga.forEach(t),Ynt=i(z9),Dm=n(z9,"P",{});var hce=s(Dm);Znt=r(hce,`Note:
Loading a model from its configuration file does `),w9e=n(hce,"STRONG",{});var yga=s(w9e);Knt=r(yga,"not"),yga.forEach(t),est=r(hce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=n(hce,"A",{href:!0});var xga=s(Ene);ost=r(xga,"from_pretrained()"),xga.forEach(t),rst=r(hce," to load the model weights."),hce.forEach(t),tst=i(z9),T(L6.$$.fragment,z9),z9.forEach(t),ast=i(Ri),Yr=n(Ri,"DIV",{class:!0});var Pi=s(Yr);T(DR.$$.fragment,Pi),nst=i(Pi),A9e=n(Pi,"P",{});var $ga=s(A9e);sst=r($ga,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$ga.forEach(t),lst=i(Pi),Vn=n(Pi,"P",{});var Q9=s(Vn);ist=r(Q9,"The model class to instantiate is selected based on the "),L9e=n(Q9,"CODE",{});var kga=s(L9e);dst=r(kga,"model_type"),kga.forEach(t),cst=r(Q9,` property of the config object (either
passed as an argument or loaded from `),y9e=n(Q9,"CODE",{});var Sga=s(y9e);mst=r(Sga,"pretrained_model_name_or_path"),Sga.forEach(t),fst=r(Q9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x9e=n(Q9,"CODE",{});var Rga=s(x9e);gst=r(Rga,"pretrained_model_name_or_path"),Rga.forEach(t),hst=r(Q9,":"),Q9.forEach(t),ust=i(Pi),me=n(Pi,"UL",{});var ue=s(me);y6=n(ue,"LI",{});var RZe=s(y6);$9e=n(RZe,"STRONG",{});var Pga=s($9e);pst=r(Pga,"albert"),Pga.forEach(t),_st=r(RZe," \u2014 "),Cne=n(RZe,"A",{href:!0});var Bga=s(Cne);bst=r(Bga,"TFAlbertForQuestionAnswering"),Bga.forEach(t),vst=r(RZe," (ALBERT model)"),RZe.forEach(t),Fst=i(ue),x6=n(ue,"LI",{});var PZe=s(x6);k9e=n(PZe,"STRONG",{});var Iga=s(k9e);Tst=r(Iga,"bert"),Iga.forEach(t),Mst=r(PZe," \u2014 "),wne=n(PZe,"A",{href:!0});var Nga=s(wne);Est=r(Nga,"TFBertForQuestionAnswering"),Nga.forEach(t),Cst=r(PZe," (BERT model)"),PZe.forEach(t),wst=i(ue),$6=n(ue,"LI",{});var BZe=s($6);S9e=n(BZe,"STRONG",{});var qga=s(S9e);Ast=r(qga,"camembert"),qga.forEach(t),Lst=r(BZe," \u2014 "),Ane=n(BZe,"A",{href:!0});var jga=s(Ane);yst=r(jga,"TFCamembertForQuestionAnswering"),jga.forEach(t),xst=r(BZe," (CamemBERT model)"),BZe.forEach(t),$st=i(ue),k6=n(ue,"LI",{});var IZe=s(k6);R9e=n(IZe,"STRONG",{});var Dga=s(R9e);kst=r(Dga,"convbert"),Dga.forEach(t),Sst=r(IZe," \u2014 "),Lne=n(IZe,"A",{href:!0});var Gga=s(Lne);Rst=r(Gga,"TFConvBertForQuestionAnswering"),Gga.forEach(t),Pst=r(IZe," (ConvBERT model)"),IZe.forEach(t),Bst=i(ue),S6=n(ue,"LI",{});var NZe=s(S6);P9e=n(NZe,"STRONG",{});var Oga=s(P9e);Ist=r(Oga,"deberta"),Oga.forEach(t),Nst=r(NZe," \u2014 "),yne=n(NZe,"A",{href:!0});var Vga=s(yne);qst=r(Vga,"TFDebertaForQuestionAnswering"),Vga.forEach(t),jst=r(NZe," (DeBERTa model)"),NZe.forEach(t),Dst=i(ue),R6=n(ue,"LI",{});var qZe=s(R6);B9e=n(qZe,"STRONG",{});var Xga=s(B9e);Gst=r(Xga,"deberta-v2"),Xga.forEach(t),Ost=r(qZe," \u2014 "),xne=n(qZe,"A",{href:!0});var zga=s(xne);Vst=r(zga,"TFDebertaV2ForQuestionAnswering"),zga.forEach(t),Xst=r(qZe," (DeBERTa-v2 model)"),qZe.forEach(t),zst=i(ue),P6=n(ue,"LI",{});var jZe=s(P6);I9e=n(jZe,"STRONG",{});var Qga=s(I9e);Qst=r(Qga,"distilbert"),Qga.forEach(t),Wst=r(jZe," \u2014 "),$ne=n(jZe,"A",{href:!0});var Wga=s($ne);Ust=r(Wga,"TFDistilBertForQuestionAnswering"),Wga.forEach(t),Hst=r(jZe," (DistilBERT model)"),jZe.forEach(t),Jst=i(ue),B6=n(ue,"LI",{});var DZe=s(B6);N9e=n(DZe,"STRONG",{});var Uga=s(N9e);Yst=r(Uga,"electra"),Uga.forEach(t),Zst=r(DZe," \u2014 "),kne=n(DZe,"A",{href:!0});var Hga=s(kne);Kst=r(Hga,"TFElectraForQuestionAnswering"),Hga.forEach(t),elt=r(DZe," (ELECTRA model)"),DZe.forEach(t),olt=i(ue),I6=n(ue,"LI",{});var GZe=s(I6);q9e=n(GZe,"STRONG",{});var Jga=s(q9e);rlt=r(Jga,"flaubert"),Jga.forEach(t),tlt=r(GZe," \u2014 "),Sne=n(GZe,"A",{href:!0});var Yga=s(Sne);alt=r(Yga,"TFFlaubertForQuestionAnsweringSimple"),Yga.forEach(t),nlt=r(GZe," (FlauBERT model)"),GZe.forEach(t),slt=i(ue),N6=n(ue,"LI",{});var OZe=s(N6);j9e=n(OZe,"STRONG",{});var Zga=s(j9e);llt=r(Zga,"funnel"),Zga.forEach(t),ilt=r(OZe," \u2014 "),Rne=n(OZe,"A",{href:!0});var Kga=s(Rne);dlt=r(Kga,"TFFunnelForQuestionAnswering"),Kga.forEach(t),clt=r(OZe," (Funnel Transformer model)"),OZe.forEach(t),mlt=i(ue),q6=n(ue,"LI",{});var VZe=s(q6);D9e=n(VZe,"STRONG",{});var eha=s(D9e);flt=r(eha,"gptj"),eha.forEach(t),glt=r(VZe," \u2014 "),Pne=n(VZe,"A",{href:!0});var oha=s(Pne);hlt=r(oha,"TFGPTJForQuestionAnswering"),oha.forEach(t),ult=r(VZe," (GPT-J model)"),VZe.forEach(t),plt=i(ue),j6=n(ue,"LI",{});var XZe=s(j6);G9e=n(XZe,"STRONG",{});var rha=s(G9e);_lt=r(rha,"layoutlmv3"),rha.forEach(t),blt=r(XZe," \u2014 "),Bne=n(XZe,"A",{href:!0});var tha=s(Bne);vlt=r(tha,"TFLayoutLMv3ForQuestionAnswering"),tha.forEach(t),Flt=r(XZe," (LayoutLMv3 model)"),XZe.forEach(t),Tlt=i(ue),D6=n(ue,"LI",{});var zZe=s(D6);O9e=n(zZe,"STRONG",{});var aha=s(O9e);Mlt=r(aha,"longformer"),aha.forEach(t),Elt=r(zZe," \u2014 "),Ine=n(zZe,"A",{href:!0});var nha=s(Ine);Clt=r(nha,"TFLongformerForQuestionAnswering"),nha.forEach(t),wlt=r(zZe," (Longformer model)"),zZe.forEach(t),Alt=i(ue),G6=n(ue,"LI",{});var QZe=s(G6);V9e=n(QZe,"STRONG",{});var sha=s(V9e);Llt=r(sha,"mobilebert"),sha.forEach(t),ylt=r(QZe," \u2014 "),Nne=n(QZe,"A",{href:!0});var lha=s(Nne);xlt=r(lha,"TFMobileBertForQuestionAnswering"),lha.forEach(t),$lt=r(QZe," (MobileBERT model)"),QZe.forEach(t),klt=i(ue),O6=n(ue,"LI",{});var WZe=s(O6);X9e=n(WZe,"STRONG",{});var iha=s(X9e);Slt=r(iha,"mpnet"),iha.forEach(t),Rlt=r(WZe," \u2014 "),qne=n(WZe,"A",{href:!0});var dha=s(qne);Plt=r(dha,"TFMPNetForQuestionAnswering"),dha.forEach(t),Blt=r(WZe," (MPNet model)"),WZe.forEach(t),Ilt=i(ue),V6=n(ue,"LI",{});var UZe=s(V6);z9e=n(UZe,"STRONG",{});var cha=s(z9e);Nlt=r(cha,"rembert"),cha.forEach(t),qlt=r(UZe," \u2014 "),jne=n(UZe,"A",{href:!0});var mha=s(jne);jlt=r(mha,"TFRemBertForQuestionAnswering"),mha.forEach(t),Dlt=r(UZe," (RemBERT model)"),UZe.forEach(t),Glt=i(ue),X6=n(ue,"LI",{});var HZe=s(X6);Q9e=n(HZe,"STRONG",{});var fha=s(Q9e);Olt=r(fha,"roberta"),fha.forEach(t),Vlt=r(HZe," \u2014 "),Dne=n(HZe,"A",{href:!0});var gha=s(Dne);Xlt=r(gha,"TFRobertaForQuestionAnswering"),gha.forEach(t),zlt=r(HZe," (RoBERTa model)"),HZe.forEach(t),Qlt=i(ue),z6=n(ue,"LI",{});var JZe=s(z6);W9e=n(JZe,"STRONG",{});var hha=s(W9e);Wlt=r(hha,"roformer"),hha.forEach(t),Ult=r(JZe," \u2014 "),Gne=n(JZe,"A",{href:!0});var uha=s(Gne);Hlt=r(uha,"TFRoFormerForQuestionAnswering"),uha.forEach(t),Jlt=r(JZe," (RoFormer model)"),JZe.forEach(t),Ylt=i(ue),Q6=n(ue,"LI",{});var YZe=s(Q6);U9e=n(YZe,"STRONG",{});var pha=s(U9e);Zlt=r(pha,"xlm"),pha.forEach(t),Klt=r(YZe," \u2014 "),One=n(YZe,"A",{href:!0});var _ha=s(One);eit=r(_ha,"TFXLMForQuestionAnsweringSimple"),_ha.forEach(t),oit=r(YZe," (XLM model)"),YZe.forEach(t),rit=i(ue),W6=n(ue,"LI",{});var ZZe=s(W6);H9e=n(ZZe,"STRONG",{});var bha=s(H9e);tit=r(bha,"xlm-roberta"),bha.forEach(t),ait=r(ZZe," \u2014 "),Vne=n(ZZe,"A",{href:!0});var vha=s(Vne);nit=r(vha,"TFXLMRobertaForQuestionAnswering"),vha.forEach(t),sit=r(ZZe," (XLM-RoBERTa model)"),ZZe.forEach(t),lit=i(ue),U6=n(ue,"LI",{});var KZe=s(U6);J9e=n(KZe,"STRONG",{});var Fha=s(J9e);iit=r(Fha,"xlnet"),Fha.forEach(t),dit=r(KZe," \u2014 "),Xne=n(KZe,"A",{href:!0});var Tha=s(Xne);cit=r(Tha,"TFXLNetForQuestionAnsweringSimple"),Tha.forEach(t),mit=r(KZe," (XLNet model)"),KZe.forEach(t),ue.forEach(t),fit=i(Pi),T(H6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),zro=i(m),Gm=n(m,"H2",{class:!0});var ino=s(Gm);J6=n(ino,"A",{id:!0,class:!0,href:!0});var Mha=s(J6);Y9e=n(Mha,"SPAN",{});var Eha=s(Y9e);T(GR.$$.fragment,Eha),Eha.forEach(t),Mha.forEach(t),git=i(ino),Z9e=n(ino,"SPAN",{});var Cha=s(Z9e);hit=r(Cha,"TFAutoModelForVision2Seq"),Cha.forEach(t),ino.forEach(t),Qro=i(m),Mr=n(m,"DIV",{class:!0});var Bi=s(Mr);T(OR.$$.fragment,Bi),uit=i(Bi),Om=n(Bi,"P",{});var uce=s(Om);pit=r(uce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zne=n(uce,"A",{href:!0});var wha=s(zne);_it=r(wha,"from_pretrained()"),wha.forEach(t),bit=r(uce," class method or the "),Qne=n(uce,"A",{href:!0});var Aha=s(Qne);vit=r(Aha,"from_config()"),Aha.forEach(t),Fit=r(uce,` class
method.`),uce.forEach(t),Tit=i(Bi),VR=n(Bi,"P",{});var dno=s(VR);Mit=r(dno,"This class cannot be instantiated directly using "),K9e=n(dno,"CODE",{});var Lha=s(K9e);Eit=r(Lha,"__init__()"),Lha.forEach(t),Cit=r(dno," (throws an error)."),dno.forEach(t),wit=i(Bi),la=n(Bi,"DIV",{class:!0});var W9=s(la);T(XR.$$.fragment,W9),Ait=i(W9),exe=n(W9,"P",{});var yha=s(exe);Lit=r(yha,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yha.forEach(t),yit=i(W9),Vm=n(W9,"P",{});var pce=s(Vm);xit=r(pce,`Note:
Loading a model from its configuration file does `),oxe=n(pce,"STRONG",{});var xha=s(oxe);$it=r(xha,"not"),xha.forEach(t),kit=r(pce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=n(pce,"A",{href:!0});var $ha=s(Wne);Sit=r($ha,"from_pretrained()"),$ha.forEach(t),Rit=r(pce," to load the model weights."),pce.forEach(t),Pit=i(W9),T(Y6.$$.fragment,W9),W9.forEach(t),Bit=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(zR.$$.fragment,Ii),Iit=i(Ii),rxe=n(Ii,"P",{});var kha=s(rxe);Nit=r(kha,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kha.forEach(t),qit=i(Ii),Xn=n(Ii,"P",{});var U9=s(Xn);jit=r(U9,"The model class to instantiate is selected based on the "),txe=n(U9,"CODE",{});var Sha=s(txe);Dit=r(Sha,"model_type"),Sha.forEach(t),Git=r(U9,` property of the config object (either
passed as an argument or loaded from `),axe=n(U9,"CODE",{});var Rha=s(axe);Oit=r(Rha,"pretrained_model_name_or_path"),Rha.forEach(t),Vit=r(U9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nxe=n(U9,"CODE",{});var Pha=s(nxe);Xit=r(Pha,"pretrained_model_name_or_path"),Pha.forEach(t),zit=r(U9,":"),U9.forEach(t),Qit=i(Ii),sxe=n(Ii,"UL",{});var Bha=s(sxe);Z6=n(Bha,"LI",{});var eKe=s(Z6);lxe=n(eKe,"STRONG",{});var Iha=s(lxe);Wit=r(Iha,"vision-encoder-decoder"),Iha.forEach(t),Uit=r(eKe," \u2014 "),Une=n(eKe,"A",{href:!0});var Nha=s(Une);Hit=r(Nha,"TFVisionEncoderDecoderModel"),Nha.forEach(t),Jit=r(eKe," (Vision Encoder decoder model)"),eKe.forEach(t),Bha.forEach(t),Yit=i(Ii),T(K6.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),Wro=i(m),Xm=n(m,"H2",{class:!0});var cno=s(Xm);e7=n(cno,"A",{id:!0,class:!0,href:!0});var qha=s(e7);ixe=n(qha,"SPAN",{});var jha=s(ixe);T(QR.$$.fragment,jha),jha.forEach(t),qha.forEach(t),Zit=i(cno),dxe=n(cno,"SPAN",{});var Dha=s(dxe);Kit=r(Dha,"TFAutoModelForSpeechSeq2Seq"),Dha.forEach(t),cno.forEach(t),Uro=i(m),Er=n(m,"DIV",{class:!0});var Ni=s(Er);T(WR.$$.fragment,Ni),edt=i(Ni),zm=n(Ni,"P",{});var _ce=s(zm);odt=r(_ce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hne=n(_ce,"A",{href:!0});var Gha=s(Hne);rdt=r(Gha,"from_pretrained()"),Gha.forEach(t),tdt=r(_ce," class method or the "),Jne=n(_ce,"A",{href:!0});var Oha=s(Jne);adt=r(Oha,"from_config()"),Oha.forEach(t),ndt=r(_ce,` class
method.`),_ce.forEach(t),sdt=i(Ni),UR=n(Ni,"P",{});var mno=s(UR);ldt=r(mno,"This class cannot be instantiated directly using "),cxe=n(mno,"CODE",{});var Vha=s(cxe);idt=r(Vha,"__init__()"),Vha.forEach(t),ddt=r(mno," (throws an error)."),mno.forEach(t),cdt=i(Ni),ia=n(Ni,"DIV",{class:!0});var H9=s(ia);T(HR.$$.fragment,H9),mdt=i(H9),mxe=n(H9,"P",{});var Xha=s(mxe);fdt=r(Xha,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xha.forEach(t),gdt=i(H9),Qm=n(H9,"P",{});var bce=s(Qm);hdt=r(bce,`Note:
Loading a model from its configuration file does `),fxe=n(bce,"STRONG",{});var zha=s(fxe);udt=r(zha,"not"),zha.forEach(t),pdt=r(bce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=n(bce,"A",{href:!0});var Qha=s(Yne);_dt=r(Qha,"from_pretrained()"),Qha.forEach(t),bdt=r(bce," to load the model weights."),bce.forEach(t),vdt=i(H9),T(o7.$$.fragment,H9),H9.forEach(t),Fdt=i(Ni),Kr=n(Ni,"DIV",{class:!0});var qi=s(Kr);T(JR.$$.fragment,qi),Tdt=i(qi),gxe=n(qi,"P",{});var Wha=s(gxe);Mdt=r(Wha,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wha.forEach(t),Edt=i(qi),zn=n(qi,"P",{});var J9=s(zn);Cdt=r(J9,"The model class to instantiate is selected based on the "),hxe=n(J9,"CODE",{});var Uha=s(hxe);wdt=r(Uha,"model_type"),Uha.forEach(t),Adt=r(J9,` property of the config object (either
passed as an argument or loaded from `),uxe=n(J9,"CODE",{});var Hha=s(uxe);Ldt=r(Hha,"pretrained_model_name_or_path"),Hha.forEach(t),ydt=r(J9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pxe=n(J9,"CODE",{});var Jha=s(pxe);xdt=r(Jha,"pretrained_model_name_or_path"),Jha.forEach(t),$dt=r(J9,":"),J9.forEach(t),kdt=i(qi),_xe=n(qi,"UL",{});var Yha=s(_xe);r7=n(Yha,"LI",{});var oKe=s(r7);bxe=n(oKe,"STRONG",{});var Zha=s(bxe);Sdt=r(Zha,"speech_to_text"),Zha.forEach(t),Rdt=r(oKe," \u2014 "),Zne=n(oKe,"A",{href:!0});var Kha=s(Zne);Pdt=r(Kha,"TFSpeech2TextForConditionalGeneration"),Kha.forEach(t),Bdt=r(oKe," (Speech2Text model)"),oKe.forEach(t),Yha.forEach(t),Idt=i(qi),T(t7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),Hro=i(m),Wm=n(m,"H2",{class:!0});var fno=s(Wm);a7=n(fno,"A",{id:!0,class:!0,href:!0});var eua=s(a7);vxe=n(eua,"SPAN",{});var oua=s(vxe);T(YR.$$.fragment,oua),oua.forEach(t),eua.forEach(t),Ndt=i(fno),Fxe=n(fno,"SPAN",{});var rua=s(Fxe);qdt=r(rua,"FlaxAutoModel"),rua.forEach(t),fno.forEach(t),Jro=i(m),Cr=n(m,"DIV",{class:!0});var ji=s(Cr);T(ZR.$$.fragment,ji),jdt=i(ji),Um=n(ji,"P",{});var vce=s(Um);Ddt=r(vce,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kne=n(vce,"A",{href:!0});var tua=s(Kne);Gdt=r(tua,"from_pretrained()"),tua.forEach(t),Odt=r(vce," class method or the "),ese=n(vce,"A",{href:!0});var aua=s(ese);Vdt=r(aua,"from_config()"),aua.forEach(t),Xdt=r(vce,` class
method.`),vce.forEach(t),zdt=i(ji),KR=n(ji,"P",{});var gno=s(KR);Qdt=r(gno,"This class cannot be instantiated directly using "),Txe=n(gno,"CODE",{});var nua=s(Txe);Wdt=r(nua,"__init__()"),nua.forEach(t),Udt=r(gno," (throws an error)."),gno.forEach(t),Hdt=i(ji),da=n(ji,"DIV",{class:!0});var Y9=s(da);T(eP.$$.fragment,Y9),Jdt=i(Y9),Mxe=n(Y9,"P",{});var sua=s(Mxe);Ydt=r(sua,"Instantiates one of the base model classes of the library from a configuration."),sua.forEach(t),Zdt=i(Y9),Hm=n(Y9,"P",{});var Fce=s(Hm);Kdt=r(Fce,`Note:
Loading a model from its configuration file does `),Exe=n(Fce,"STRONG",{});var lua=s(Exe);ect=r(lua,"not"),lua.forEach(t),oct=r(Fce,` load the model weights. It only affects the
model\u2019s configuration. Use `),ose=n(Fce,"A",{href:!0});var iua=s(ose);rct=r(iua,"from_pretrained()"),iua.forEach(t),tct=r(Fce," to load the model weights."),Fce.forEach(t),act=i(Y9),T(n7.$$.fragment,Y9),Y9.forEach(t),nct=i(ji),et=n(ji,"DIV",{class:!0});var Di=s(et);T(oP.$$.fragment,Di),sct=i(Di),Cxe=n(Di,"P",{});var dua=s(Cxe);lct=r(dua,"Instantiate one of the base model classes of the library from a pretrained model."),dua.forEach(t),ict=i(Di),Qn=n(Di,"P",{});var Z9=s(Qn);dct=r(Z9,"The model class to instantiate is selected based on the "),wxe=n(Z9,"CODE",{});var cua=s(wxe);cct=r(cua,"model_type"),cua.forEach(t),mct=r(Z9,` property of the config object (either
passed as an argument or loaded from `),Axe=n(Z9,"CODE",{});var mua=s(Axe);fct=r(mua,"pretrained_model_name_or_path"),mua.forEach(t),gct=r(Z9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lxe=n(Z9,"CODE",{});var fua=s(Lxe);hct=r(fua,"pretrained_model_name_or_path"),fua.forEach(t),uct=r(Z9,":"),Z9.forEach(t),pct=i(Di),te=n(Di,"UL",{});var ne=s(te);s7=n(ne,"LI",{});var rKe=s(s7);yxe=n(rKe,"STRONG",{});var gua=s(yxe);_ct=r(gua,"albert"),gua.forEach(t),bct=r(rKe," \u2014 "),rse=n(rKe,"A",{href:!0});var hua=s(rse);vct=r(hua,"FlaxAlbertModel"),hua.forEach(t),Fct=r(rKe," (ALBERT model)"),rKe.forEach(t),Tct=i(ne),l7=n(ne,"LI",{});var tKe=s(l7);xxe=n(tKe,"STRONG",{});var uua=s(xxe);Mct=r(uua,"bart"),uua.forEach(t),Ect=r(tKe," \u2014 "),tse=n(tKe,"A",{href:!0});var pua=s(tse);Cct=r(pua,"FlaxBartModel"),pua.forEach(t),wct=r(tKe," (BART model)"),tKe.forEach(t),Act=i(ne),i7=n(ne,"LI",{});var aKe=s(i7);$xe=n(aKe,"STRONG",{});var _ua=s($xe);Lct=r(_ua,"beit"),_ua.forEach(t),yct=r(aKe," \u2014 "),ase=n(aKe,"A",{href:!0});var bua=s(ase);xct=r(bua,"FlaxBeitModel"),bua.forEach(t),$ct=r(aKe," (BEiT model)"),aKe.forEach(t),kct=i(ne),d7=n(ne,"LI",{});var nKe=s(d7);kxe=n(nKe,"STRONG",{});var vua=s(kxe);Sct=r(vua,"bert"),vua.forEach(t),Rct=r(nKe," \u2014 "),nse=n(nKe,"A",{href:!0});var Fua=s(nse);Pct=r(Fua,"FlaxBertModel"),Fua.forEach(t),Bct=r(nKe," (BERT model)"),nKe.forEach(t),Ict=i(ne),c7=n(ne,"LI",{});var sKe=s(c7);Sxe=n(sKe,"STRONG",{});var Tua=s(Sxe);Nct=r(Tua,"big_bird"),Tua.forEach(t),qct=r(sKe," \u2014 "),sse=n(sKe,"A",{href:!0});var Mua=s(sse);jct=r(Mua,"FlaxBigBirdModel"),Mua.forEach(t),Dct=r(sKe," (BigBird model)"),sKe.forEach(t),Gct=i(ne),m7=n(ne,"LI",{});var lKe=s(m7);Rxe=n(lKe,"STRONG",{});var Eua=s(Rxe);Oct=r(Eua,"blenderbot"),Eua.forEach(t),Vct=r(lKe," \u2014 "),lse=n(lKe,"A",{href:!0});var Cua=s(lse);Xct=r(Cua,"FlaxBlenderbotModel"),Cua.forEach(t),zct=r(lKe," (Blenderbot model)"),lKe.forEach(t),Qct=i(ne),f7=n(ne,"LI",{});var iKe=s(f7);Pxe=n(iKe,"STRONG",{});var wua=s(Pxe);Wct=r(wua,"blenderbot-small"),wua.forEach(t),Uct=r(iKe," \u2014 "),ise=n(iKe,"A",{href:!0});var Aua=s(ise);Hct=r(Aua,"FlaxBlenderbotSmallModel"),Aua.forEach(t),Jct=r(iKe," (BlenderbotSmall model)"),iKe.forEach(t),Yct=i(ne),g7=n(ne,"LI",{});var dKe=s(g7);Bxe=n(dKe,"STRONG",{});var Lua=s(Bxe);Zct=r(Lua,"clip"),Lua.forEach(t),Kct=r(dKe," \u2014 "),dse=n(dKe,"A",{href:!0});var yua=s(dse);emt=r(yua,"FlaxCLIPModel"),yua.forEach(t),omt=r(dKe," (CLIP model)"),dKe.forEach(t),rmt=i(ne),h7=n(ne,"LI",{});var cKe=s(h7);Ixe=n(cKe,"STRONG",{});var xua=s(Ixe);tmt=r(xua,"distilbert"),xua.forEach(t),amt=r(cKe," \u2014 "),cse=n(cKe,"A",{href:!0});var $ua=s(cse);nmt=r($ua,"FlaxDistilBertModel"),$ua.forEach(t),smt=r(cKe," (DistilBERT model)"),cKe.forEach(t),lmt=i(ne),u7=n(ne,"LI",{});var mKe=s(u7);Nxe=n(mKe,"STRONG",{});var kua=s(Nxe);imt=r(kua,"electra"),kua.forEach(t),dmt=r(mKe," \u2014 "),mse=n(mKe,"A",{href:!0});var Sua=s(mse);cmt=r(Sua,"FlaxElectraModel"),Sua.forEach(t),mmt=r(mKe," (ELECTRA model)"),mKe.forEach(t),fmt=i(ne),p7=n(ne,"LI",{});var fKe=s(p7);qxe=n(fKe,"STRONG",{});var Rua=s(qxe);gmt=r(Rua,"gpt2"),Rua.forEach(t),hmt=r(fKe," \u2014 "),fse=n(fKe,"A",{href:!0});var Pua=s(fse);umt=r(Pua,"FlaxGPT2Model"),Pua.forEach(t),pmt=r(fKe," (OpenAI GPT-2 model)"),fKe.forEach(t),_mt=i(ne),_7=n(ne,"LI",{});var gKe=s(_7);jxe=n(gKe,"STRONG",{});var Bua=s(jxe);bmt=r(Bua,"gpt_neo"),Bua.forEach(t),vmt=r(gKe," \u2014 "),gse=n(gKe,"A",{href:!0});var Iua=s(gse);Fmt=r(Iua,"FlaxGPTNeoModel"),Iua.forEach(t),Tmt=r(gKe," (GPT Neo model)"),gKe.forEach(t),Mmt=i(ne),b7=n(ne,"LI",{});var hKe=s(b7);Dxe=n(hKe,"STRONG",{});var Nua=s(Dxe);Emt=r(Nua,"gptj"),Nua.forEach(t),Cmt=r(hKe," \u2014 "),hse=n(hKe,"A",{href:!0});var qua=s(hse);wmt=r(qua,"FlaxGPTJModel"),qua.forEach(t),Amt=r(hKe," (GPT-J model)"),hKe.forEach(t),Lmt=i(ne),v7=n(ne,"LI",{});var uKe=s(v7);Gxe=n(uKe,"STRONG",{});var jua=s(Gxe);ymt=r(jua,"longt5"),jua.forEach(t),xmt=r(uKe," \u2014 "),use=n(uKe,"A",{href:!0});var Dua=s(use);$mt=r(Dua,"FlaxLongT5Model"),Dua.forEach(t),kmt=r(uKe," (LongT5 model)"),uKe.forEach(t),Smt=i(ne),F7=n(ne,"LI",{});var pKe=s(F7);Oxe=n(pKe,"STRONG",{});var Gua=s(Oxe);Rmt=r(Gua,"marian"),Gua.forEach(t),Pmt=r(pKe," \u2014 "),pse=n(pKe,"A",{href:!0});var Oua=s(pse);Bmt=r(Oua,"FlaxMarianModel"),Oua.forEach(t),Imt=r(pKe," (Marian model)"),pKe.forEach(t),Nmt=i(ne),T7=n(ne,"LI",{});var _Ke=s(T7);Vxe=n(_Ke,"STRONG",{});var Vua=s(Vxe);qmt=r(Vua,"mbart"),Vua.forEach(t),jmt=r(_Ke," \u2014 "),_se=n(_Ke,"A",{href:!0});var Xua=s(_se);Dmt=r(Xua,"FlaxMBartModel"),Xua.forEach(t),Gmt=r(_Ke," (mBART model)"),_Ke.forEach(t),Omt=i(ne),M7=n(ne,"LI",{});var bKe=s(M7);Xxe=n(bKe,"STRONG",{});var zua=s(Xxe);Vmt=r(zua,"mt5"),zua.forEach(t),Xmt=r(bKe," \u2014 "),bse=n(bKe,"A",{href:!0});var Qua=s(bse);zmt=r(Qua,"FlaxMT5Model"),Qua.forEach(t),Qmt=r(bKe," (MT5 model)"),bKe.forEach(t),Wmt=i(ne),E7=n(ne,"LI",{});var vKe=s(E7);zxe=n(vKe,"STRONG",{});var Wua=s(zxe);Umt=r(Wua,"opt"),Wua.forEach(t),Hmt=r(vKe," \u2014 "),vse=n(vKe,"A",{href:!0});var Uua=s(vse);Jmt=r(Uua,"FlaxOPTModel"),Uua.forEach(t),Ymt=r(vKe," (OPT model)"),vKe.forEach(t),Zmt=i(ne),C7=n(ne,"LI",{});var FKe=s(C7);Qxe=n(FKe,"STRONG",{});var Hua=s(Qxe);Kmt=r(Hua,"pegasus"),Hua.forEach(t),eft=r(FKe," \u2014 "),Fse=n(FKe,"A",{href:!0});var Jua=s(Fse);oft=r(Jua,"FlaxPegasusModel"),Jua.forEach(t),rft=r(FKe," (Pegasus model)"),FKe.forEach(t),tft=i(ne),w7=n(ne,"LI",{});var TKe=s(w7);Wxe=n(TKe,"STRONG",{});var Yua=s(Wxe);aft=r(Yua,"roberta"),Yua.forEach(t),nft=r(TKe," \u2014 "),Tse=n(TKe,"A",{href:!0});var Zua=s(Tse);sft=r(Zua,"FlaxRobertaModel"),Zua.forEach(t),lft=r(TKe," (RoBERTa model)"),TKe.forEach(t),ift=i(ne),A7=n(ne,"LI",{});var MKe=s(A7);Uxe=n(MKe,"STRONG",{});var Kua=s(Uxe);dft=r(Kua,"roformer"),Kua.forEach(t),cft=r(MKe," \u2014 "),Mse=n(MKe,"A",{href:!0});var epa=s(Mse);mft=r(epa,"FlaxRoFormerModel"),epa.forEach(t),fft=r(MKe," (RoFormer model)"),MKe.forEach(t),gft=i(ne),L7=n(ne,"LI",{});var EKe=s(L7);Hxe=n(EKe,"STRONG",{});var opa=s(Hxe);hft=r(opa,"t5"),opa.forEach(t),uft=r(EKe," \u2014 "),Ese=n(EKe,"A",{href:!0});var rpa=s(Ese);pft=r(rpa,"FlaxT5Model"),rpa.forEach(t),_ft=r(EKe," (T5 model)"),EKe.forEach(t),bft=i(ne),y7=n(ne,"LI",{});var CKe=s(y7);Jxe=n(CKe,"STRONG",{});var tpa=s(Jxe);vft=r(tpa,"vision-text-dual-encoder"),tpa.forEach(t),Fft=r(CKe," \u2014 "),Cse=n(CKe,"A",{href:!0});var apa=s(Cse);Tft=r(apa,"FlaxVisionTextDualEncoderModel"),apa.forEach(t),Mft=r(CKe," (VisionTextDualEncoder model)"),CKe.forEach(t),Eft=i(ne),x7=n(ne,"LI",{});var wKe=s(x7);Yxe=n(wKe,"STRONG",{});var npa=s(Yxe);Cft=r(npa,"vit"),npa.forEach(t),wft=r(wKe," \u2014 "),wse=n(wKe,"A",{href:!0});var spa=s(wse);Aft=r(spa,"FlaxViTModel"),spa.forEach(t),Lft=r(wKe," (ViT model)"),wKe.forEach(t),yft=i(ne),$7=n(ne,"LI",{});var AKe=s($7);Zxe=n(AKe,"STRONG",{});var lpa=s(Zxe);xft=r(lpa,"wav2vec2"),lpa.forEach(t),$ft=r(AKe," \u2014 "),Ase=n(AKe,"A",{href:!0});var ipa=s(Ase);kft=r(ipa,"FlaxWav2Vec2Model"),ipa.forEach(t),Sft=r(AKe," (Wav2Vec2 model)"),AKe.forEach(t),Rft=i(ne),k7=n(ne,"LI",{});var LKe=s(k7);Kxe=n(LKe,"STRONG",{});var dpa=s(Kxe);Pft=r(dpa,"xglm"),dpa.forEach(t),Bft=r(LKe," \u2014 "),Lse=n(LKe,"A",{href:!0});var cpa=s(Lse);Ift=r(cpa,"FlaxXGLMModel"),cpa.forEach(t),Nft=r(LKe," (XGLM model)"),LKe.forEach(t),qft=i(ne),S7=n(ne,"LI",{});var yKe=s(S7);e$e=n(yKe,"STRONG",{});var mpa=s(e$e);jft=r(mpa,"xlm-roberta"),mpa.forEach(t),Dft=r(yKe," \u2014 "),yse=n(yKe,"A",{href:!0});var fpa=s(yse);Gft=r(fpa,"FlaxXLMRobertaModel"),fpa.forEach(t),Oft=r(yKe," (XLM-RoBERTa model)"),yKe.forEach(t),ne.forEach(t),Vft=i(Di),T(R7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),Yro=i(m),Jm=n(m,"H2",{class:!0});var hno=s(Jm);P7=n(hno,"A",{id:!0,class:!0,href:!0});var gpa=s(P7);o$e=n(gpa,"SPAN",{});var hpa=s(o$e);T(rP.$$.fragment,hpa),hpa.forEach(t),gpa.forEach(t),Xft=i(hno),r$e=n(hno,"SPAN",{});var upa=s(r$e);zft=r(upa,"FlaxAutoModelForCausalLM"),upa.forEach(t),hno.forEach(t),Zro=i(m),wr=n(m,"DIV",{class:!0});var Gi=s(wr);T(tP.$$.fragment,Gi),Qft=i(Gi),Ym=n(Gi,"P",{});var Tce=s(Ym);Wft=r(Tce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xse=n(Tce,"A",{href:!0});var ppa=s(xse);Uft=r(ppa,"from_pretrained()"),ppa.forEach(t),Hft=r(Tce," class method or the "),$se=n(Tce,"A",{href:!0});var _pa=s($se);Jft=r(_pa,"from_config()"),_pa.forEach(t),Yft=r(Tce,` class
method.`),Tce.forEach(t),Zft=i(Gi),aP=n(Gi,"P",{});var uno=s(aP);Kft=r(uno,"This class cannot be instantiated directly using "),t$e=n(uno,"CODE",{});var bpa=s(t$e);egt=r(bpa,"__init__()"),bpa.forEach(t),ogt=r(uno," (throws an error)."),uno.forEach(t),rgt=i(Gi),ca=n(Gi,"DIV",{class:!0});var K9=s(ca);T(nP.$$.fragment,K9),tgt=i(K9),a$e=n(K9,"P",{});var vpa=s(a$e);agt=r(vpa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vpa.forEach(t),ngt=i(K9),Zm=n(K9,"P",{});var Mce=s(Zm);sgt=r(Mce,`Note:
Loading a model from its configuration file does `),n$e=n(Mce,"STRONG",{});var Fpa=s(n$e);lgt=r(Fpa,"not"),Fpa.forEach(t),igt=r(Mce,` load the model weights. It only affects the
model\u2019s configuration. Use `),kse=n(Mce,"A",{href:!0});var Tpa=s(kse);dgt=r(Tpa,"from_pretrained()"),Tpa.forEach(t),cgt=r(Mce," to load the model weights."),Mce.forEach(t),mgt=i(K9),T(B7.$$.fragment,K9),K9.forEach(t),fgt=i(Gi),ot=n(Gi,"DIV",{class:!0});var Oi=s(ot);T(sP.$$.fragment,Oi),ggt=i(Oi),s$e=n(Oi,"P",{});var Mpa=s(s$e);hgt=r(Mpa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mpa.forEach(t),ugt=i(Oi),Wn=n(Oi,"P",{});var ex=s(Wn);pgt=r(ex,"The model class to instantiate is selected based on the "),l$e=n(ex,"CODE",{});var Epa=s(l$e);_gt=r(Epa,"model_type"),Epa.forEach(t),bgt=r(ex,` property of the config object (either
passed as an argument or loaded from `),i$e=n(ex,"CODE",{});var Cpa=s(i$e);vgt=r(Cpa,"pretrained_model_name_or_path"),Cpa.forEach(t),Fgt=r(ex,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d$e=n(ex,"CODE",{});var wpa=s(d$e);Tgt=r(wpa,"pretrained_model_name_or_path"),wpa.forEach(t),Mgt=r(ex,":"),ex.forEach(t),Egt=i(Oi),xe=n(Oi,"UL",{});var qe=s(xe);I7=n(qe,"LI",{});var xKe=s(I7);c$e=n(xKe,"STRONG",{});var Apa=s(c$e);Cgt=r(Apa,"bart"),Apa.forEach(t),wgt=r(xKe," \u2014 "),Sse=n(xKe,"A",{href:!0});var Lpa=s(Sse);Agt=r(Lpa,"FlaxBartForCausalLM"),Lpa.forEach(t),Lgt=r(xKe," (BART model)"),xKe.forEach(t),ygt=i(qe),N7=n(qe,"LI",{});var $Ke=s(N7);m$e=n($Ke,"STRONG",{});var ypa=s(m$e);xgt=r(ypa,"bert"),ypa.forEach(t),$gt=r($Ke," \u2014 "),Rse=n($Ke,"A",{href:!0});var xpa=s(Rse);kgt=r(xpa,"FlaxBertForCausalLM"),xpa.forEach(t),Sgt=r($Ke," (BERT model)"),$Ke.forEach(t),Rgt=i(qe),q7=n(qe,"LI",{});var kKe=s(q7);f$e=n(kKe,"STRONG",{});var $pa=s(f$e);Pgt=r($pa,"big_bird"),$pa.forEach(t),Bgt=r(kKe," \u2014 "),Pse=n(kKe,"A",{href:!0});var kpa=s(Pse);Igt=r(kpa,"FlaxBigBirdForCausalLM"),kpa.forEach(t),Ngt=r(kKe," (BigBird model)"),kKe.forEach(t),qgt=i(qe),j7=n(qe,"LI",{});var SKe=s(j7);g$e=n(SKe,"STRONG",{});var Spa=s(g$e);jgt=r(Spa,"electra"),Spa.forEach(t),Dgt=r(SKe," \u2014 "),Bse=n(SKe,"A",{href:!0});var Rpa=s(Bse);Ggt=r(Rpa,"FlaxElectraForCausalLM"),Rpa.forEach(t),Ogt=r(SKe," (ELECTRA model)"),SKe.forEach(t),Vgt=i(qe),D7=n(qe,"LI",{});var RKe=s(D7);h$e=n(RKe,"STRONG",{});var Ppa=s(h$e);Xgt=r(Ppa,"gpt2"),Ppa.forEach(t),zgt=r(RKe," \u2014 "),Ise=n(RKe,"A",{href:!0});var Bpa=s(Ise);Qgt=r(Bpa,"FlaxGPT2LMHeadModel"),Bpa.forEach(t),Wgt=r(RKe," (OpenAI GPT-2 model)"),RKe.forEach(t),Ugt=i(qe),G7=n(qe,"LI",{});var PKe=s(G7);u$e=n(PKe,"STRONG",{});var Ipa=s(u$e);Hgt=r(Ipa,"gpt_neo"),Ipa.forEach(t),Jgt=r(PKe," \u2014 "),Nse=n(PKe,"A",{href:!0});var Npa=s(Nse);Ygt=r(Npa,"FlaxGPTNeoForCausalLM"),Npa.forEach(t),Zgt=r(PKe," (GPT Neo model)"),PKe.forEach(t),Kgt=i(qe),O7=n(qe,"LI",{});var BKe=s(O7);p$e=n(BKe,"STRONG",{});var qpa=s(p$e);eht=r(qpa,"gptj"),qpa.forEach(t),oht=r(BKe," \u2014 "),qse=n(BKe,"A",{href:!0});var jpa=s(qse);rht=r(jpa,"FlaxGPTJForCausalLM"),jpa.forEach(t),tht=r(BKe," (GPT-J model)"),BKe.forEach(t),aht=i(qe),V7=n(qe,"LI",{});var IKe=s(V7);_$e=n(IKe,"STRONG",{});var Dpa=s(_$e);nht=r(Dpa,"opt"),Dpa.forEach(t),sht=r(IKe," \u2014 "),jse=n(IKe,"A",{href:!0});var Gpa=s(jse);lht=r(Gpa,"FlaxOPTForCausalLM"),Gpa.forEach(t),iht=r(IKe," (OPT model)"),IKe.forEach(t),dht=i(qe),X7=n(qe,"LI",{});var NKe=s(X7);b$e=n(NKe,"STRONG",{});var Opa=s(b$e);cht=r(Opa,"roberta"),Opa.forEach(t),mht=r(NKe," \u2014 "),Dse=n(NKe,"A",{href:!0});var Vpa=s(Dse);fht=r(Vpa,"FlaxRobertaForCausalLM"),Vpa.forEach(t),ght=r(NKe," (RoBERTa model)"),NKe.forEach(t),hht=i(qe),z7=n(qe,"LI",{});var qKe=s(z7);v$e=n(qKe,"STRONG",{});var Xpa=s(v$e);uht=r(Xpa,"xglm"),Xpa.forEach(t),pht=r(qKe," \u2014 "),Gse=n(qKe,"A",{href:!0});var zpa=s(Gse);_ht=r(zpa,"FlaxXGLMForCausalLM"),zpa.forEach(t),bht=r(qKe," (XGLM model)"),qKe.forEach(t),qe.forEach(t),vht=i(Oi),T(Q7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),Kro=i(m),Km=n(m,"H2",{class:!0});var pno=s(Km);W7=n(pno,"A",{id:!0,class:!0,href:!0});var Qpa=s(W7);F$e=n(Qpa,"SPAN",{});var Wpa=s(F$e);T(lP.$$.fragment,Wpa),Wpa.forEach(t),Qpa.forEach(t),Fht=i(pno),T$e=n(pno,"SPAN",{});var Upa=s(T$e);Tht=r(Upa,"FlaxAutoModelForPreTraining"),Upa.forEach(t),pno.forEach(t),eto=i(m),Ar=n(m,"DIV",{class:!0});var Vi=s(Ar);T(iP.$$.fragment,Vi),Mht=i(Vi),ef=n(Vi,"P",{});var Ece=s(ef);Eht=r(Ece,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ose=n(Ece,"A",{href:!0});var Hpa=s(Ose);Cht=r(Hpa,"from_pretrained()"),Hpa.forEach(t),wht=r(Ece," class method or the "),Vse=n(Ece,"A",{href:!0});var Jpa=s(Vse);Aht=r(Jpa,"from_config()"),Jpa.forEach(t),Lht=r(Ece,` class
method.`),Ece.forEach(t),yht=i(Vi),dP=n(Vi,"P",{});var _no=s(dP);xht=r(_no,"This class cannot be instantiated directly using "),M$e=n(_no,"CODE",{});var Ypa=s(M$e);$ht=r(Ypa,"__init__()"),Ypa.forEach(t),kht=r(_no," (throws an error)."),_no.forEach(t),Sht=i(Vi),ma=n(Vi,"DIV",{class:!0});var ox=s(ma);T(cP.$$.fragment,ox),Rht=i(ox),E$e=n(ox,"P",{});var Zpa=s(E$e);Pht=r(Zpa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Zpa.forEach(t),Bht=i(ox),of=n(ox,"P",{});var Cce=s(of);Iht=r(Cce,`Note:
Loading a model from its configuration file does `),C$e=n(Cce,"STRONG",{});var Kpa=s(C$e);Nht=r(Kpa,"not"),Kpa.forEach(t),qht=r(Cce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xse=n(Cce,"A",{href:!0});var e_a=s(Xse);jht=r(e_a,"from_pretrained()"),e_a.forEach(t),Dht=r(Cce," to load the model weights."),Cce.forEach(t),Ght=i(ox),T(U7.$$.fragment,ox),ox.forEach(t),Oht=i(Vi),rt=n(Vi,"DIV",{class:!0});var Xi=s(rt);T(mP.$$.fragment,Xi),Vht=i(Xi),w$e=n(Xi,"P",{});var o_a=s(w$e);Xht=r(o_a,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o_a.forEach(t),zht=i(Xi),Un=n(Xi,"P",{});var rx=s(Un);Qht=r(rx,"The model class to instantiate is selected based on the "),A$e=n(rx,"CODE",{});var r_a=s(A$e);Wht=r(r_a,"model_type"),r_a.forEach(t),Uht=r(rx,` property of the config object (either
passed as an argument or loaded from `),L$e=n(rx,"CODE",{});var t_a=s(L$e);Hht=r(t_a,"pretrained_model_name_or_path"),t_a.forEach(t),Jht=r(rx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y$e=n(rx,"CODE",{});var a_a=s(y$e);Yht=r(a_a,"pretrained_model_name_or_path"),a_a.forEach(t),Zht=r(rx,":"),rx.forEach(t),Kht=i(Xi),Ee=n(Xi,"UL",{});var we=s(Ee);H7=n(we,"LI",{});var jKe=s(H7);x$e=n(jKe,"STRONG",{});var n_a=s(x$e);eut=r(n_a,"albert"),n_a.forEach(t),out=r(jKe," \u2014 "),zse=n(jKe,"A",{href:!0});var s_a=s(zse);rut=r(s_a,"FlaxAlbertForPreTraining"),s_a.forEach(t),tut=r(jKe," (ALBERT model)"),jKe.forEach(t),aut=i(we),J7=n(we,"LI",{});var DKe=s(J7);$$e=n(DKe,"STRONG",{});var l_a=s($$e);nut=r(l_a,"bart"),l_a.forEach(t),sut=r(DKe," \u2014 "),Qse=n(DKe,"A",{href:!0});var i_a=s(Qse);lut=r(i_a,"FlaxBartForConditionalGeneration"),i_a.forEach(t),iut=r(DKe," (BART model)"),DKe.forEach(t),dut=i(we),Y7=n(we,"LI",{});var GKe=s(Y7);k$e=n(GKe,"STRONG",{});var d_a=s(k$e);cut=r(d_a,"bert"),d_a.forEach(t),mut=r(GKe," \u2014 "),Wse=n(GKe,"A",{href:!0});var c_a=s(Wse);fut=r(c_a,"FlaxBertForPreTraining"),c_a.forEach(t),gut=r(GKe," (BERT model)"),GKe.forEach(t),hut=i(we),Z7=n(we,"LI",{});var OKe=s(Z7);S$e=n(OKe,"STRONG",{});var m_a=s(S$e);uut=r(m_a,"big_bird"),m_a.forEach(t),put=r(OKe," \u2014 "),Use=n(OKe,"A",{href:!0});var f_a=s(Use);_ut=r(f_a,"FlaxBigBirdForPreTraining"),f_a.forEach(t),but=r(OKe," (BigBird model)"),OKe.forEach(t),vut=i(we),K7=n(we,"LI",{});var VKe=s(K7);R$e=n(VKe,"STRONG",{});var g_a=s(R$e);Fut=r(g_a,"electra"),g_a.forEach(t),Tut=r(VKe," \u2014 "),Hse=n(VKe,"A",{href:!0});var h_a=s(Hse);Mut=r(h_a,"FlaxElectraForPreTraining"),h_a.forEach(t),Eut=r(VKe," (ELECTRA model)"),VKe.forEach(t),Cut=i(we),eL=n(we,"LI",{});var XKe=s(eL);P$e=n(XKe,"STRONG",{});var u_a=s(P$e);wut=r(u_a,"longt5"),u_a.forEach(t),Aut=r(XKe," \u2014 "),Jse=n(XKe,"A",{href:!0});var p_a=s(Jse);Lut=r(p_a,"FlaxLongT5ForConditionalGeneration"),p_a.forEach(t),yut=r(XKe," (LongT5 model)"),XKe.forEach(t),xut=i(we),oL=n(we,"LI",{});var zKe=s(oL);B$e=n(zKe,"STRONG",{});var __a=s(B$e);$ut=r(__a,"mbart"),__a.forEach(t),kut=r(zKe," \u2014 "),Yse=n(zKe,"A",{href:!0});var b_a=s(Yse);Sut=r(b_a,"FlaxMBartForConditionalGeneration"),b_a.forEach(t),Rut=r(zKe," (mBART model)"),zKe.forEach(t),Put=i(we),rL=n(we,"LI",{});var QKe=s(rL);I$e=n(QKe,"STRONG",{});var v_a=s(I$e);But=r(v_a,"mt5"),v_a.forEach(t),Iut=r(QKe," \u2014 "),Zse=n(QKe,"A",{href:!0});var F_a=s(Zse);Nut=r(F_a,"FlaxMT5ForConditionalGeneration"),F_a.forEach(t),qut=r(QKe," (MT5 model)"),QKe.forEach(t),jut=i(we),tL=n(we,"LI",{});var WKe=s(tL);N$e=n(WKe,"STRONG",{});var T_a=s(N$e);Dut=r(T_a,"roberta"),T_a.forEach(t),Gut=r(WKe," \u2014 "),Kse=n(WKe,"A",{href:!0});var M_a=s(Kse);Out=r(M_a,"FlaxRobertaForMaskedLM"),M_a.forEach(t),Vut=r(WKe," (RoBERTa model)"),WKe.forEach(t),Xut=i(we),aL=n(we,"LI",{});var UKe=s(aL);q$e=n(UKe,"STRONG",{});var E_a=s(q$e);zut=r(E_a,"roformer"),E_a.forEach(t),Qut=r(UKe," \u2014 "),ele=n(UKe,"A",{href:!0});var C_a=s(ele);Wut=r(C_a,"FlaxRoFormerForMaskedLM"),C_a.forEach(t),Uut=r(UKe," (RoFormer model)"),UKe.forEach(t),Hut=i(we),nL=n(we,"LI",{});var HKe=s(nL);j$e=n(HKe,"STRONG",{});var w_a=s(j$e);Jut=r(w_a,"t5"),w_a.forEach(t),Yut=r(HKe," \u2014 "),ole=n(HKe,"A",{href:!0});var A_a=s(ole);Zut=r(A_a,"FlaxT5ForConditionalGeneration"),A_a.forEach(t),Kut=r(HKe," (T5 model)"),HKe.forEach(t),ept=i(we),sL=n(we,"LI",{});var JKe=s(sL);D$e=n(JKe,"STRONG",{});var L_a=s(D$e);opt=r(L_a,"wav2vec2"),L_a.forEach(t),rpt=r(JKe," \u2014 "),rle=n(JKe,"A",{href:!0});var y_a=s(rle);tpt=r(y_a,"FlaxWav2Vec2ForPreTraining"),y_a.forEach(t),apt=r(JKe," (Wav2Vec2 model)"),JKe.forEach(t),npt=i(we),lL=n(we,"LI",{});var YKe=s(lL);G$e=n(YKe,"STRONG",{});var x_a=s(G$e);spt=r(x_a,"xlm-roberta"),x_a.forEach(t),lpt=r(YKe," \u2014 "),tle=n(YKe,"A",{href:!0});var $_a=s(tle);ipt=r($_a,"FlaxXLMRobertaForMaskedLM"),$_a.forEach(t),dpt=r(YKe," (XLM-RoBERTa model)"),YKe.forEach(t),we.forEach(t),cpt=i(Xi),T(iL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),oto=i(m),rf=n(m,"H2",{class:!0});var bno=s(rf);dL=n(bno,"A",{id:!0,class:!0,href:!0});var k_a=s(dL);O$e=n(k_a,"SPAN",{});var S_a=s(O$e);T(fP.$$.fragment,S_a),S_a.forEach(t),k_a.forEach(t),mpt=i(bno),V$e=n(bno,"SPAN",{});var R_a=s(V$e);fpt=r(R_a,"FlaxAutoModelForMaskedLM"),R_a.forEach(t),bno.forEach(t),rto=i(m),Lr=n(m,"DIV",{class:!0});var zi=s(Lr);T(gP.$$.fragment,zi),gpt=i(zi),tf=n(zi,"P",{});var wce=s(tf);hpt=r(wce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ale=n(wce,"A",{href:!0});var P_a=s(ale);upt=r(P_a,"from_pretrained()"),P_a.forEach(t),ppt=r(wce," class method or the "),nle=n(wce,"A",{href:!0});var B_a=s(nle);_pt=r(B_a,"from_config()"),B_a.forEach(t),bpt=r(wce,` class
method.`),wce.forEach(t),vpt=i(zi),hP=n(zi,"P",{});var vno=s(hP);Fpt=r(vno,"This class cannot be instantiated directly using "),X$e=n(vno,"CODE",{});var I_a=s(X$e);Tpt=r(I_a,"__init__()"),I_a.forEach(t),Mpt=r(vno," (throws an error)."),vno.forEach(t),Ept=i(zi),fa=n(zi,"DIV",{class:!0});var tx=s(fa);T(uP.$$.fragment,tx),Cpt=i(tx),z$e=n(tx,"P",{});var N_a=s(z$e);wpt=r(N_a,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N_a.forEach(t),Apt=i(tx),af=n(tx,"P",{});var Ace=s(af);Lpt=r(Ace,`Note:
Loading a model from its configuration file does `),Q$e=n(Ace,"STRONG",{});var q_a=s(Q$e);ypt=r(q_a,"not"),q_a.forEach(t),xpt=r(Ace,` load the model weights. It only affects the
model\u2019s configuration. Use `),sle=n(Ace,"A",{href:!0});var j_a=s(sle);$pt=r(j_a,"from_pretrained()"),j_a.forEach(t),kpt=r(Ace," to load the model weights."),Ace.forEach(t),Spt=i(tx),T(cL.$$.fragment,tx),tx.forEach(t),Rpt=i(zi),tt=n(zi,"DIV",{class:!0});var Qi=s(tt);T(pP.$$.fragment,Qi),Ppt=i(Qi),W$e=n(Qi,"P",{});var D_a=s(W$e);Bpt=r(D_a,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D_a.forEach(t),Ipt=i(Qi),Hn=n(Qi,"P",{});var ax=s(Hn);Npt=r(ax,"The model class to instantiate is selected based on the "),U$e=n(ax,"CODE",{});var G_a=s(U$e);qpt=r(G_a,"model_type"),G_a.forEach(t),jpt=r(ax,` property of the config object (either
passed as an argument or loaded from `),H$e=n(ax,"CODE",{});var O_a=s(H$e);Dpt=r(O_a,"pretrained_model_name_or_path"),O_a.forEach(t),Gpt=r(ax,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J$e=n(ax,"CODE",{});var V_a=s(J$e);Opt=r(V_a,"pretrained_model_name_or_path"),V_a.forEach(t),Vpt=r(ax,":"),ax.forEach(t),Xpt=i(Qi),$e=n(Qi,"UL",{});var je=s($e);mL=n(je,"LI",{});var ZKe=s(mL);Y$e=n(ZKe,"STRONG",{});var X_a=s(Y$e);zpt=r(X_a,"albert"),X_a.forEach(t),Qpt=r(ZKe," \u2014 "),lle=n(ZKe,"A",{href:!0});var z_a=s(lle);Wpt=r(z_a,"FlaxAlbertForMaskedLM"),z_a.forEach(t),Upt=r(ZKe," (ALBERT model)"),ZKe.forEach(t),Hpt=i(je),fL=n(je,"LI",{});var KKe=s(fL);Z$e=n(KKe,"STRONG",{});var Q_a=s(Z$e);Jpt=r(Q_a,"bart"),Q_a.forEach(t),Ypt=r(KKe," \u2014 "),ile=n(KKe,"A",{href:!0});var W_a=s(ile);Zpt=r(W_a,"FlaxBartForConditionalGeneration"),W_a.forEach(t),Kpt=r(KKe," (BART model)"),KKe.forEach(t),e_t=i(je),gL=n(je,"LI",{});var eeo=s(gL);K$e=n(eeo,"STRONG",{});var U_a=s(K$e);o_t=r(U_a,"bert"),U_a.forEach(t),r_t=r(eeo," \u2014 "),dle=n(eeo,"A",{href:!0});var H_a=s(dle);t_t=r(H_a,"FlaxBertForMaskedLM"),H_a.forEach(t),a_t=r(eeo," (BERT model)"),eeo.forEach(t),n_t=i(je),hL=n(je,"LI",{});var oeo=s(hL);eke=n(oeo,"STRONG",{});var J_a=s(eke);s_t=r(J_a,"big_bird"),J_a.forEach(t),l_t=r(oeo," \u2014 "),cle=n(oeo,"A",{href:!0});var Y_a=s(cle);i_t=r(Y_a,"FlaxBigBirdForMaskedLM"),Y_a.forEach(t),d_t=r(oeo," (BigBird model)"),oeo.forEach(t),c_t=i(je),uL=n(je,"LI",{});var reo=s(uL);oke=n(reo,"STRONG",{});var Z_a=s(oke);m_t=r(Z_a,"distilbert"),Z_a.forEach(t),f_t=r(reo," \u2014 "),mle=n(reo,"A",{href:!0});var K_a=s(mle);g_t=r(K_a,"FlaxDistilBertForMaskedLM"),K_a.forEach(t),h_t=r(reo," (DistilBERT model)"),reo.forEach(t),u_t=i(je),pL=n(je,"LI",{});var teo=s(pL);rke=n(teo,"STRONG",{});var e1a=s(rke);p_t=r(e1a,"electra"),e1a.forEach(t),__t=r(teo," \u2014 "),fle=n(teo,"A",{href:!0});var o1a=s(fle);b_t=r(o1a,"FlaxElectraForMaskedLM"),o1a.forEach(t),v_t=r(teo," (ELECTRA model)"),teo.forEach(t),F_t=i(je),_L=n(je,"LI",{});var aeo=s(_L);tke=n(aeo,"STRONG",{});var r1a=s(tke);T_t=r(r1a,"mbart"),r1a.forEach(t),M_t=r(aeo," \u2014 "),gle=n(aeo,"A",{href:!0});var t1a=s(gle);E_t=r(t1a,"FlaxMBartForConditionalGeneration"),t1a.forEach(t),C_t=r(aeo," (mBART model)"),aeo.forEach(t),w_t=i(je),bL=n(je,"LI",{});var neo=s(bL);ake=n(neo,"STRONG",{});var a1a=s(ake);A_t=r(a1a,"roberta"),a1a.forEach(t),L_t=r(neo," \u2014 "),hle=n(neo,"A",{href:!0});var n1a=s(hle);y_t=r(n1a,"FlaxRobertaForMaskedLM"),n1a.forEach(t),x_t=r(neo," (RoBERTa model)"),neo.forEach(t),$_t=i(je),vL=n(je,"LI",{});var seo=s(vL);nke=n(seo,"STRONG",{});var s1a=s(nke);k_t=r(s1a,"roformer"),s1a.forEach(t),S_t=r(seo," \u2014 "),ule=n(seo,"A",{href:!0});var l1a=s(ule);R_t=r(l1a,"FlaxRoFormerForMaskedLM"),l1a.forEach(t),P_t=r(seo," (RoFormer model)"),seo.forEach(t),B_t=i(je),FL=n(je,"LI",{});var leo=s(FL);ske=n(leo,"STRONG",{});var i1a=s(ske);I_t=r(i1a,"xlm-roberta"),i1a.forEach(t),N_t=r(leo," \u2014 "),ple=n(leo,"A",{href:!0});var d1a=s(ple);q_t=r(d1a,"FlaxXLMRobertaForMaskedLM"),d1a.forEach(t),j_t=r(leo," (XLM-RoBERTa model)"),leo.forEach(t),je.forEach(t),D_t=i(Qi),T(TL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),tto=i(m),nf=n(m,"H2",{class:!0});var Fno=s(nf);ML=n(Fno,"A",{id:!0,class:!0,href:!0});var c1a=s(ML);lke=n(c1a,"SPAN",{});var m1a=s(lke);T(_P.$$.fragment,m1a),m1a.forEach(t),c1a.forEach(t),G_t=i(Fno),ike=n(Fno,"SPAN",{});var f1a=s(ike);O_t=r(f1a,"FlaxAutoModelForSeq2SeqLM"),f1a.forEach(t),Fno.forEach(t),ato=i(m),yr=n(m,"DIV",{class:!0});var Wi=s(yr);T(bP.$$.fragment,Wi),V_t=i(Wi),sf=n(Wi,"P",{});var Lce=s(sf);X_t=r(Lce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_le=n(Lce,"A",{href:!0});var g1a=s(_le);z_t=r(g1a,"from_pretrained()"),g1a.forEach(t),Q_t=r(Lce," class method or the "),ble=n(Lce,"A",{href:!0});var h1a=s(ble);W_t=r(h1a,"from_config()"),h1a.forEach(t),U_t=r(Lce,` class
method.`),Lce.forEach(t),H_t=i(Wi),vP=n(Wi,"P",{});var Tno=s(vP);J_t=r(Tno,"This class cannot be instantiated directly using "),dke=n(Tno,"CODE",{});var u1a=s(dke);Y_t=r(u1a,"__init__()"),u1a.forEach(t),Z_t=r(Tno," (throws an error)."),Tno.forEach(t),K_t=i(Wi),ga=n(Wi,"DIV",{class:!0});var nx=s(ga);T(FP.$$.fragment,nx),e1t=i(nx),cke=n(nx,"P",{});var p1a=s(cke);o1t=r(p1a,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p1a.forEach(t),r1t=i(nx),lf=n(nx,"P",{});var yce=s(lf);t1t=r(yce,`Note:
Loading a model from its configuration file does `),mke=n(yce,"STRONG",{});var _1a=s(mke);a1t=r(_1a,"not"),_1a.forEach(t),n1t=r(yce,` load the model weights. It only affects the
model\u2019s configuration. Use `),vle=n(yce,"A",{href:!0});var b1a=s(vle);s1t=r(b1a,"from_pretrained()"),b1a.forEach(t),l1t=r(yce," to load the model weights."),yce.forEach(t),i1t=i(nx),T(EL.$$.fragment,nx),nx.forEach(t),d1t=i(Wi),at=n(Wi,"DIV",{class:!0});var Ui=s(at);T(TP.$$.fragment,Ui),c1t=i(Ui),fke=n(Ui,"P",{});var v1a=s(fke);m1t=r(v1a,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v1a.forEach(t),f1t=i(Ui),Jn=n(Ui,"P",{});var sx=s(Jn);g1t=r(sx,"The model class to instantiate is selected based on the "),gke=n(sx,"CODE",{});var F1a=s(gke);h1t=r(F1a,"model_type"),F1a.forEach(t),u1t=r(sx,` property of the config object (either
passed as an argument or loaded from `),hke=n(sx,"CODE",{});var T1a=s(hke);p1t=r(T1a,"pretrained_model_name_or_path"),T1a.forEach(t),_1t=r(sx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uke=n(sx,"CODE",{});var M1a=s(uke);b1t=r(M1a,"pretrained_model_name_or_path"),M1a.forEach(t),v1t=r(sx,":"),sx.forEach(t),F1t=i(Ui),ke=n(Ui,"UL",{});var De=s(ke);CL=n(De,"LI",{});var ieo=s(CL);pke=n(ieo,"STRONG",{});var E1a=s(pke);T1t=r(E1a,"bart"),E1a.forEach(t),M1t=r(ieo," \u2014 "),Fle=n(ieo,"A",{href:!0});var C1a=s(Fle);E1t=r(C1a,"FlaxBartForConditionalGeneration"),C1a.forEach(t),C1t=r(ieo," (BART model)"),ieo.forEach(t),w1t=i(De),wL=n(De,"LI",{});var deo=s(wL);_ke=n(deo,"STRONG",{});var w1a=s(_ke);A1t=r(w1a,"blenderbot"),w1a.forEach(t),L1t=r(deo," \u2014 "),Tle=n(deo,"A",{href:!0});var A1a=s(Tle);y1t=r(A1a,"FlaxBlenderbotForConditionalGeneration"),A1a.forEach(t),x1t=r(deo," (Blenderbot model)"),deo.forEach(t),$1t=i(De),AL=n(De,"LI",{});var ceo=s(AL);bke=n(ceo,"STRONG",{});var L1a=s(bke);k1t=r(L1a,"blenderbot-small"),L1a.forEach(t),S1t=r(ceo," \u2014 "),Mle=n(ceo,"A",{href:!0});var y1a=s(Mle);R1t=r(y1a,"FlaxBlenderbotSmallForConditionalGeneration"),y1a.forEach(t),P1t=r(ceo," (BlenderbotSmall model)"),ceo.forEach(t),B1t=i(De),LL=n(De,"LI",{});var meo=s(LL);vke=n(meo,"STRONG",{});var x1a=s(vke);I1t=r(x1a,"encoder-decoder"),x1a.forEach(t),N1t=r(meo," \u2014 "),Ele=n(meo,"A",{href:!0});var $1a=s(Ele);q1t=r($1a,"FlaxEncoderDecoderModel"),$1a.forEach(t),j1t=r(meo," (Encoder decoder model)"),meo.forEach(t),D1t=i(De),yL=n(De,"LI",{});var feo=s(yL);Fke=n(feo,"STRONG",{});var k1a=s(Fke);G1t=r(k1a,"longt5"),k1a.forEach(t),O1t=r(feo," \u2014 "),Cle=n(feo,"A",{href:!0});var S1a=s(Cle);V1t=r(S1a,"FlaxLongT5ForConditionalGeneration"),S1a.forEach(t),X1t=r(feo," (LongT5 model)"),feo.forEach(t),z1t=i(De),xL=n(De,"LI",{});var geo=s(xL);Tke=n(geo,"STRONG",{});var R1a=s(Tke);Q1t=r(R1a,"marian"),R1a.forEach(t),W1t=r(geo," \u2014 "),wle=n(geo,"A",{href:!0});var P1a=s(wle);U1t=r(P1a,"FlaxMarianMTModel"),P1a.forEach(t),H1t=r(geo," (Marian model)"),geo.forEach(t),J1t=i(De),$L=n(De,"LI",{});var heo=s($L);Mke=n(heo,"STRONG",{});var B1a=s(Mke);Y1t=r(B1a,"mbart"),B1a.forEach(t),Z1t=r(heo," \u2014 "),Ale=n(heo,"A",{href:!0});var I1a=s(Ale);K1t=r(I1a,"FlaxMBartForConditionalGeneration"),I1a.forEach(t),ebt=r(heo," (mBART model)"),heo.forEach(t),obt=i(De),kL=n(De,"LI",{});var ueo=s(kL);Eke=n(ueo,"STRONG",{});var N1a=s(Eke);rbt=r(N1a,"mt5"),N1a.forEach(t),tbt=r(ueo," \u2014 "),Lle=n(ueo,"A",{href:!0});var q1a=s(Lle);abt=r(q1a,"FlaxMT5ForConditionalGeneration"),q1a.forEach(t),nbt=r(ueo," (MT5 model)"),ueo.forEach(t),sbt=i(De),SL=n(De,"LI",{});var peo=s(SL);Cke=n(peo,"STRONG",{});var j1a=s(Cke);lbt=r(j1a,"pegasus"),j1a.forEach(t),ibt=r(peo," \u2014 "),yle=n(peo,"A",{href:!0});var D1a=s(yle);dbt=r(D1a,"FlaxPegasusForConditionalGeneration"),D1a.forEach(t),cbt=r(peo," (Pegasus model)"),peo.forEach(t),mbt=i(De),RL=n(De,"LI",{});var _eo=s(RL);wke=n(_eo,"STRONG",{});var G1a=s(wke);fbt=r(G1a,"t5"),G1a.forEach(t),gbt=r(_eo," \u2014 "),xle=n(_eo,"A",{href:!0});var O1a=s(xle);hbt=r(O1a,"FlaxT5ForConditionalGeneration"),O1a.forEach(t),ubt=r(_eo," (T5 model)"),_eo.forEach(t),De.forEach(t),pbt=i(Ui),T(PL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),nto=i(m),df=n(m,"H2",{class:!0});var Mno=s(df);BL=n(Mno,"A",{id:!0,class:!0,href:!0});var V1a=s(BL);Ake=n(V1a,"SPAN",{});var X1a=s(Ake);T(MP.$$.fragment,X1a),X1a.forEach(t),V1a.forEach(t),_bt=i(Mno),Lke=n(Mno,"SPAN",{});var z1a=s(Lke);bbt=r(z1a,"FlaxAutoModelForSequenceClassification"),z1a.forEach(t),Mno.forEach(t),sto=i(m),xr=n(m,"DIV",{class:!0});var Hi=s(xr);T(EP.$$.fragment,Hi),vbt=i(Hi),cf=n(Hi,"P",{});var xce=s(cf);Fbt=r(xce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$le=n(xce,"A",{href:!0});var Q1a=s($le);Tbt=r(Q1a,"from_pretrained()"),Q1a.forEach(t),Mbt=r(xce," class method or the "),kle=n(xce,"A",{href:!0});var W1a=s(kle);Ebt=r(W1a,"from_config()"),W1a.forEach(t),Cbt=r(xce,` class
method.`),xce.forEach(t),wbt=i(Hi),CP=n(Hi,"P",{});var Eno=s(CP);Abt=r(Eno,"This class cannot be instantiated directly using "),yke=n(Eno,"CODE",{});var U1a=s(yke);Lbt=r(U1a,"__init__()"),U1a.forEach(t),ybt=r(Eno," (throws an error)."),Eno.forEach(t),xbt=i(Hi),ha=n(Hi,"DIV",{class:!0});var lx=s(ha);T(wP.$$.fragment,lx),$bt=i(lx),xke=n(lx,"P",{});var H1a=s(xke);kbt=r(H1a,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),H1a.forEach(t),Sbt=i(lx),mf=n(lx,"P",{});var $ce=s(mf);Rbt=r($ce,`Note:
Loading a model from its configuration file does `),$ke=n($ce,"STRONG",{});var J1a=s($ke);Pbt=r(J1a,"not"),J1a.forEach(t),Bbt=r($ce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=n($ce,"A",{href:!0});var Y1a=s(Sle);Ibt=r(Y1a,"from_pretrained()"),Y1a.forEach(t),Nbt=r($ce," to load the model weights."),$ce.forEach(t),qbt=i(lx),T(IL.$$.fragment,lx),lx.forEach(t),jbt=i(Hi),nt=n(Hi,"DIV",{class:!0});var Ji=s(nt);T(AP.$$.fragment,Ji),Dbt=i(Ji),kke=n(Ji,"P",{});var Z1a=s(kke);Gbt=r(Z1a,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Z1a.forEach(t),Obt=i(Ji),Yn=n(Ji,"P",{});var ix=s(Yn);Vbt=r(ix,"The model class to instantiate is selected based on the "),Ske=n(ix,"CODE",{});var K1a=s(Ske);Xbt=r(K1a,"model_type"),K1a.forEach(t),zbt=r(ix,` property of the config object (either
passed as an argument or loaded from `),Rke=n(ix,"CODE",{});var eba=s(Rke);Qbt=r(eba,"pretrained_model_name_or_path"),eba.forEach(t),Wbt=r(ix,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pke=n(ix,"CODE",{});var oba=s(Pke);Ubt=r(oba,"pretrained_model_name_or_path"),oba.forEach(t),Hbt=r(ix,":"),ix.forEach(t),Jbt=i(Ji),Se=n(Ji,"UL",{});var Ge=s(Se);NL=n(Ge,"LI",{});var beo=s(NL);Bke=n(beo,"STRONG",{});var rba=s(Bke);Ybt=r(rba,"albert"),rba.forEach(t),Zbt=r(beo," \u2014 "),Rle=n(beo,"A",{href:!0});var tba=s(Rle);Kbt=r(tba,"FlaxAlbertForSequenceClassification"),tba.forEach(t),e2t=r(beo," (ALBERT model)"),beo.forEach(t),o2t=i(Ge),qL=n(Ge,"LI",{});var veo=s(qL);Ike=n(veo,"STRONG",{});var aba=s(Ike);r2t=r(aba,"bart"),aba.forEach(t),t2t=r(veo," \u2014 "),Ple=n(veo,"A",{href:!0});var nba=s(Ple);a2t=r(nba,"FlaxBartForSequenceClassification"),nba.forEach(t),n2t=r(veo," (BART model)"),veo.forEach(t),s2t=i(Ge),jL=n(Ge,"LI",{});var Feo=s(jL);Nke=n(Feo,"STRONG",{});var sba=s(Nke);l2t=r(sba,"bert"),sba.forEach(t),i2t=r(Feo," \u2014 "),Ble=n(Feo,"A",{href:!0});var lba=s(Ble);d2t=r(lba,"FlaxBertForSequenceClassification"),lba.forEach(t),c2t=r(Feo," (BERT model)"),Feo.forEach(t),m2t=i(Ge),DL=n(Ge,"LI",{});var Teo=s(DL);qke=n(Teo,"STRONG",{});var iba=s(qke);f2t=r(iba,"big_bird"),iba.forEach(t),g2t=r(Teo," \u2014 "),Ile=n(Teo,"A",{href:!0});var dba=s(Ile);h2t=r(dba,"FlaxBigBirdForSequenceClassification"),dba.forEach(t),u2t=r(Teo," (BigBird model)"),Teo.forEach(t),p2t=i(Ge),GL=n(Ge,"LI",{});var Meo=s(GL);jke=n(Meo,"STRONG",{});var cba=s(jke);_2t=r(cba,"distilbert"),cba.forEach(t),b2t=r(Meo," \u2014 "),Nle=n(Meo,"A",{href:!0});var mba=s(Nle);v2t=r(mba,"FlaxDistilBertForSequenceClassification"),mba.forEach(t),F2t=r(Meo," (DistilBERT model)"),Meo.forEach(t),T2t=i(Ge),OL=n(Ge,"LI",{});var Eeo=s(OL);Dke=n(Eeo,"STRONG",{});var fba=s(Dke);M2t=r(fba,"electra"),fba.forEach(t),E2t=r(Eeo," \u2014 "),qle=n(Eeo,"A",{href:!0});var gba=s(qle);C2t=r(gba,"FlaxElectraForSequenceClassification"),gba.forEach(t),w2t=r(Eeo," (ELECTRA model)"),Eeo.forEach(t),A2t=i(Ge),VL=n(Ge,"LI",{});var Ceo=s(VL);Gke=n(Ceo,"STRONG",{});var hba=s(Gke);L2t=r(hba,"mbart"),hba.forEach(t),y2t=r(Ceo," \u2014 "),jle=n(Ceo,"A",{href:!0});var uba=s(jle);x2t=r(uba,"FlaxMBartForSequenceClassification"),uba.forEach(t),$2t=r(Ceo," (mBART model)"),Ceo.forEach(t),k2t=i(Ge),XL=n(Ge,"LI",{});var weo=s(XL);Oke=n(weo,"STRONG",{});var pba=s(Oke);S2t=r(pba,"roberta"),pba.forEach(t),R2t=r(weo," \u2014 "),Dle=n(weo,"A",{href:!0});var _ba=s(Dle);P2t=r(_ba,"FlaxRobertaForSequenceClassification"),_ba.forEach(t),B2t=r(weo," (RoBERTa model)"),weo.forEach(t),I2t=i(Ge),zL=n(Ge,"LI",{});var Aeo=s(zL);Vke=n(Aeo,"STRONG",{});var bba=s(Vke);N2t=r(bba,"roformer"),bba.forEach(t),q2t=r(Aeo," \u2014 "),Gle=n(Aeo,"A",{href:!0});var vba=s(Gle);j2t=r(vba,"FlaxRoFormerForSequenceClassification"),vba.forEach(t),D2t=r(Aeo," (RoFormer model)"),Aeo.forEach(t),G2t=i(Ge),QL=n(Ge,"LI",{});var Leo=s(QL);Xke=n(Leo,"STRONG",{});var Fba=s(Xke);O2t=r(Fba,"xlm-roberta"),Fba.forEach(t),V2t=r(Leo," \u2014 "),Ole=n(Leo,"A",{href:!0});var Tba=s(Ole);X2t=r(Tba,"FlaxXLMRobertaForSequenceClassification"),Tba.forEach(t),z2t=r(Leo," (XLM-RoBERTa model)"),Leo.forEach(t),Ge.forEach(t),Q2t=i(Ji),T(WL.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),lto=i(m),ff=n(m,"H2",{class:!0});var Cno=s(ff);UL=n(Cno,"A",{id:!0,class:!0,href:!0});var Mba=s(UL);zke=n(Mba,"SPAN",{});var Eba=s(zke);T(LP.$$.fragment,Eba),Eba.forEach(t),Mba.forEach(t),W2t=i(Cno),Qke=n(Cno,"SPAN",{});var Cba=s(Qke);U2t=r(Cba,"FlaxAutoModelForQuestionAnswering"),Cba.forEach(t),Cno.forEach(t),ito=i(m),$r=n(m,"DIV",{class:!0});var Yi=s($r);T(yP.$$.fragment,Yi),H2t=i(Yi),gf=n(Yi,"P",{});var kce=s(gf);J2t=r(kce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vle=n(kce,"A",{href:!0});var wba=s(Vle);Y2t=r(wba,"from_pretrained()"),wba.forEach(t),Z2t=r(kce," class method or the "),Xle=n(kce,"A",{href:!0});var Aba=s(Xle);K2t=r(Aba,"from_config()"),Aba.forEach(t),evt=r(kce,` class
method.`),kce.forEach(t),ovt=i(Yi),xP=n(Yi,"P",{});var wno=s(xP);rvt=r(wno,"This class cannot be instantiated directly using "),Wke=n(wno,"CODE",{});var Lba=s(Wke);tvt=r(Lba,"__init__()"),Lba.forEach(t),avt=r(wno," (throws an error)."),wno.forEach(t),nvt=i(Yi),ua=n(Yi,"DIV",{class:!0});var dx=s(ua);T($P.$$.fragment,dx),svt=i(dx),Uke=n(dx,"P",{});var yba=s(Uke);lvt=r(yba,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yba.forEach(t),ivt=i(dx),hf=n(dx,"P",{});var Sce=s(hf);dvt=r(Sce,`Note:
Loading a model from its configuration file does `),Hke=n(Sce,"STRONG",{});var xba=s(Hke);cvt=r(xba,"not"),xba.forEach(t),mvt=r(Sce,` load the model weights. It only affects the
model\u2019s configuration. Use `),zle=n(Sce,"A",{href:!0});var $ba=s(zle);fvt=r($ba,"from_pretrained()"),$ba.forEach(t),gvt=r(Sce," to load the model weights."),Sce.forEach(t),hvt=i(dx),T(HL.$$.fragment,dx),dx.forEach(t),uvt=i(Yi),st=n(Yi,"DIV",{class:!0});var Zi=s(st);T(kP.$$.fragment,Zi),pvt=i(Zi),Jke=n(Zi,"P",{});var kba=s(Jke);_vt=r(kba,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kba.forEach(t),bvt=i(Zi),Zn=n(Zi,"P",{});var cx=s(Zn);vvt=r(cx,"The model class to instantiate is selected based on the "),Yke=n(cx,"CODE",{});var Sba=s(Yke);Fvt=r(Sba,"model_type"),Sba.forEach(t),Tvt=r(cx,` property of the config object (either
passed as an argument or loaded from `),Zke=n(cx,"CODE",{});var Rba=s(Zke);Mvt=r(Rba,"pretrained_model_name_or_path"),Rba.forEach(t),Evt=r(cx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kke=n(cx,"CODE",{});var Pba=s(Kke);Cvt=r(Pba,"pretrained_model_name_or_path"),Pba.forEach(t),wvt=r(cx,":"),cx.forEach(t),Avt=i(Zi),Re=n(Zi,"UL",{});var Oe=s(Re);JL=n(Oe,"LI",{});var yeo=s(JL);eSe=n(yeo,"STRONG",{});var Bba=s(eSe);Lvt=r(Bba,"albert"),Bba.forEach(t),yvt=r(yeo," \u2014 "),Qle=n(yeo,"A",{href:!0});var Iba=s(Qle);xvt=r(Iba,"FlaxAlbertForQuestionAnswering"),Iba.forEach(t),$vt=r(yeo," (ALBERT model)"),yeo.forEach(t),kvt=i(Oe),YL=n(Oe,"LI",{});var xeo=s(YL);oSe=n(xeo,"STRONG",{});var Nba=s(oSe);Svt=r(Nba,"bart"),Nba.forEach(t),Rvt=r(xeo," \u2014 "),Wle=n(xeo,"A",{href:!0});var qba=s(Wle);Pvt=r(qba,"FlaxBartForQuestionAnswering"),qba.forEach(t),Bvt=r(xeo," (BART model)"),xeo.forEach(t),Ivt=i(Oe),ZL=n(Oe,"LI",{});var $eo=s(ZL);rSe=n($eo,"STRONG",{});var jba=s(rSe);Nvt=r(jba,"bert"),jba.forEach(t),qvt=r($eo," \u2014 "),Ule=n($eo,"A",{href:!0});var Dba=s(Ule);jvt=r(Dba,"FlaxBertForQuestionAnswering"),Dba.forEach(t),Dvt=r($eo," (BERT model)"),$eo.forEach(t),Gvt=i(Oe),KL=n(Oe,"LI",{});var keo=s(KL);tSe=n(keo,"STRONG",{});var Gba=s(tSe);Ovt=r(Gba,"big_bird"),Gba.forEach(t),Vvt=r(keo," \u2014 "),Hle=n(keo,"A",{href:!0});var Oba=s(Hle);Xvt=r(Oba,"FlaxBigBirdForQuestionAnswering"),Oba.forEach(t),zvt=r(keo," (BigBird model)"),keo.forEach(t),Qvt=i(Oe),ey=n(Oe,"LI",{});var Seo=s(ey);aSe=n(Seo,"STRONG",{});var Vba=s(aSe);Wvt=r(Vba,"distilbert"),Vba.forEach(t),Uvt=r(Seo," \u2014 "),Jle=n(Seo,"A",{href:!0});var Xba=s(Jle);Hvt=r(Xba,"FlaxDistilBertForQuestionAnswering"),Xba.forEach(t),Jvt=r(Seo," (DistilBERT model)"),Seo.forEach(t),Yvt=i(Oe),oy=n(Oe,"LI",{});var Reo=s(oy);nSe=n(Reo,"STRONG",{});var zba=s(nSe);Zvt=r(zba,"electra"),zba.forEach(t),Kvt=r(Reo," \u2014 "),Yle=n(Reo,"A",{href:!0});var Qba=s(Yle);eFt=r(Qba,"FlaxElectraForQuestionAnswering"),Qba.forEach(t),oFt=r(Reo," (ELECTRA model)"),Reo.forEach(t),rFt=i(Oe),ry=n(Oe,"LI",{});var Peo=s(ry);sSe=n(Peo,"STRONG",{});var Wba=s(sSe);tFt=r(Wba,"mbart"),Wba.forEach(t),aFt=r(Peo," \u2014 "),Zle=n(Peo,"A",{href:!0});var Uba=s(Zle);nFt=r(Uba,"FlaxMBartForQuestionAnswering"),Uba.forEach(t),sFt=r(Peo," (mBART model)"),Peo.forEach(t),lFt=i(Oe),ty=n(Oe,"LI",{});var Beo=s(ty);lSe=n(Beo,"STRONG",{});var Hba=s(lSe);iFt=r(Hba,"roberta"),Hba.forEach(t),dFt=r(Beo," \u2014 "),Kle=n(Beo,"A",{href:!0});var Jba=s(Kle);cFt=r(Jba,"FlaxRobertaForQuestionAnswering"),Jba.forEach(t),mFt=r(Beo," (RoBERTa model)"),Beo.forEach(t),fFt=i(Oe),ay=n(Oe,"LI",{});var Ieo=s(ay);iSe=n(Ieo,"STRONG",{});var Yba=s(iSe);gFt=r(Yba,"roformer"),Yba.forEach(t),hFt=r(Ieo," \u2014 "),eie=n(Ieo,"A",{href:!0});var Zba=s(eie);uFt=r(Zba,"FlaxRoFormerForQuestionAnswering"),Zba.forEach(t),pFt=r(Ieo," (RoFormer model)"),Ieo.forEach(t),_Ft=i(Oe),ny=n(Oe,"LI",{});var Neo=s(ny);dSe=n(Neo,"STRONG",{});var Kba=s(dSe);bFt=r(Kba,"xlm-roberta"),Kba.forEach(t),vFt=r(Neo," \u2014 "),oie=n(Neo,"A",{href:!0});var e2a=s(oie);FFt=r(e2a,"FlaxXLMRobertaForQuestionAnswering"),e2a.forEach(t),TFt=r(Neo," (XLM-RoBERTa model)"),Neo.forEach(t),Oe.forEach(t),MFt=i(Zi),T(sy.$$.fragment,Zi),Zi.forEach(t),Yi.forEach(t),dto=i(m),uf=n(m,"H2",{class:!0});var Ano=s(uf);ly=n(Ano,"A",{id:!0,class:!0,href:!0});var o2a=s(ly);cSe=n(o2a,"SPAN",{});var r2a=s(cSe);T(SP.$$.fragment,r2a),r2a.forEach(t),o2a.forEach(t),EFt=i(Ano),mSe=n(Ano,"SPAN",{});var t2a=s(mSe);CFt=r(t2a,"FlaxAutoModelForTokenClassification"),t2a.forEach(t),Ano.forEach(t),cto=i(m),kr=n(m,"DIV",{class:!0});var Ki=s(kr);T(RP.$$.fragment,Ki),wFt=i(Ki),pf=n(Ki,"P",{});var Rce=s(pf);AFt=r(Rce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rie=n(Rce,"A",{href:!0});var a2a=s(rie);LFt=r(a2a,"from_pretrained()"),a2a.forEach(t),yFt=r(Rce," class method or the "),tie=n(Rce,"A",{href:!0});var n2a=s(tie);xFt=r(n2a,"from_config()"),n2a.forEach(t),$Ft=r(Rce,` class
method.`),Rce.forEach(t),kFt=i(Ki),PP=n(Ki,"P",{});var Lno=s(PP);SFt=r(Lno,"This class cannot be instantiated directly using "),fSe=n(Lno,"CODE",{});var s2a=s(fSe);RFt=r(s2a,"__init__()"),s2a.forEach(t),PFt=r(Lno," (throws an error)."),Lno.forEach(t),BFt=i(Ki),pa=n(Ki,"DIV",{class:!0});var mx=s(pa);T(BP.$$.fragment,mx),IFt=i(mx),gSe=n(mx,"P",{});var l2a=s(gSe);NFt=r(l2a,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),l2a.forEach(t),qFt=i(mx),_f=n(mx,"P",{});var Pce=s(_f);jFt=r(Pce,`Note:
Loading a model from its configuration file does `),hSe=n(Pce,"STRONG",{});var i2a=s(hSe);DFt=r(i2a,"not"),i2a.forEach(t),GFt=r(Pce,` load the model weights. It only affects the
model\u2019s configuration. Use `),aie=n(Pce,"A",{href:!0});var d2a=s(aie);OFt=r(d2a,"from_pretrained()"),d2a.forEach(t),VFt=r(Pce," to load the model weights."),Pce.forEach(t),XFt=i(mx),T(iy.$$.fragment,mx),mx.forEach(t),zFt=i(Ki),lt=n(Ki,"DIV",{class:!0});var ed=s(lt);T(IP.$$.fragment,ed),QFt=i(ed),uSe=n(ed,"P",{});var c2a=s(uSe);WFt=r(c2a,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),c2a.forEach(t),UFt=i(ed),Kn=n(ed,"P",{});var fx=s(Kn);HFt=r(fx,"The model class to instantiate is selected based on the "),pSe=n(fx,"CODE",{});var m2a=s(pSe);JFt=r(m2a,"model_type"),m2a.forEach(t),YFt=r(fx,` property of the config object (either
passed as an argument or loaded from `),_Se=n(fx,"CODE",{});var f2a=s(_Se);ZFt=r(f2a,"pretrained_model_name_or_path"),f2a.forEach(t),KFt=r(fx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bSe=n(fx,"CODE",{});var g2a=s(bSe);eTt=r(g2a,"pretrained_model_name_or_path"),g2a.forEach(t),oTt=r(fx,":"),fx.forEach(t),rTt=i(ed),Xe=n(ed,"UL",{});var Lo=s(Xe);dy=n(Lo,"LI",{});var qeo=s(dy);vSe=n(qeo,"STRONG",{});var h2a=s(vSe);tTt=r(h2a,"albert"),h2a.forEach(t),aTt=r(qeo," \u2014 "),nie=n(qeo,"A",{href:!0});var u2a=s(nie);nTt=r(u2a,"FlaxAlbertForTokenClassification"),u2a.forEach(t),sTt=r(qeo," (ALBERT model)"),qeo.forEach(t),lTt=i(Lo),cy=n(Lo,"LI",{});var jeo=s(cy);FSe=n(jeo,"STRONG",{});var p2a=s(FSe);iTt=r(p2a,"bert"),p2a.forEach(t),dTt=r(jeo," \u2014 "),sie=n(jeo,"A",{href:!0});var _2a=s(sie);cTt=r(_2a,"FlaxBertForTokenClassification"),_2a.forEach(t),mTt=r(jeo," (BERT model)"),jeo.forEach(t),fTt=i(Lo),my=n(Lo,"LI",{});var Deo=s(my);TSe=n(Deo,"STRONG",{});var b2a=s(TSe);gTt=r(b2a,"big_bird"),b2a.forEach(t),hTt=r(Deo," \u2014 "),lie=n(Deo,"A",{href:!0});var v2a=s(lie);uTt=r(v2a,"FlaxBigBirdForTokenClassification"),v2a.forEach(t),pTt=r(Deo," (BigBird model)"),Deo.forEach(t),_Tt=i(Lo),fy=n(Lo,"LI",{});var Geo=s(fy);MSe=n(Geo,"STRONG",{});var F2a=s(MSe);bTt=r(F2a,"distilbert"),F2a.forEach(t),vTt=r(Geo," \u2014 "),iie=n(Geo,"A",{href:!0});var T2a=s(iie);FTt=r(T2a,"FlaxDistilBertForTokenClassification"),T2a.forEach(t),TTt=r(Geo," (DistilBERT model)"),Geo.forEach(t),MTt=i(Lo),gy=n(Lo,"LI",{});var Oeo=s(gy);ESe=n(Oeo,"STRONG",{});var M2a=s(ESe);ETt=r(M2a,"electra"),M2a.forEach(t),CTt=r(Oeo," \u2014 "),die=n(Oeo,"A",{href:!0});var E2a=s(die);wTt=r(E2a,"FlaxElectraForTokenClassification"),E2a.forEach(t),ATt=r(Oeo," (ELECTRA model)"),Oeo.forEach(t),LTt=i(Lo),hy=n(Lo,"LI",{});var Veo=s(hy);CSe=n(Veo,"STRONG",{});var C2a=s(CSe);yTt=r(C2a,"roberta"),C2a.forEach(t),xTt=r(Veo," \u2014 "),cie=n(Veo,"A",{href:!0});var w2a=s(cie);$Tt=r(w2a,"FlaxRobertaForTokenClassification"),w2a.forEach(t),kTt=r(Veo," (RoBERTa model)"),Veo.forEach(t),STt=i(Lo),uy=n(Lo,"LI",{});var Xeo=s(uy);wSe=n(Xeo,"STRONG",{});var A2a=s(wSe);RTt=r(A2a,"roformer"),A2a.forEach(t),PTt=r(Xeo," \u2014 "),mie=n(Xeo,"A",{href:!0});var L2a=s(mie);BTt=r(L2a,"FlaxRoFormerForTokenClassification"),L2a.forEach(t),ITt=r(Xeo," (RoFormer model)"),Xeo.forEach(t),NTt=i(Lo),py=n(Lo,"LI",{});var zeo=s(py);ASe=n(zeo,"STRONG",{});var y2a=s(ASe);qTt=r(y2a,"xlm-roberta"),y2a.forEach(t),jTt=r(zeo," \u2014 "),fie=n(zeo,"A",{href:!0});var x2a=s(fie);DTt=r(x2a,"FlaxXLMRobertaForTokenClassification"),x2a.forEach(t),GTt=r(zeo," (XLM-RoBERTa model)"),zeo.forEach(t),Lo.forEach(t),OTt=i(ed),T(_y.$$.fragment,ed),ed.forEach(t),Ki.forEach(t),mto=i(m),bf=n(m,"H2",{class:!0});var yno=s(bf);by=n(yno,"A",{id:!0,class:!0,href:!0});var $2a=s(by);LSe=n($2a,"SPAN",{});var k2a=s(LSe);T(NP.$$.fragment,k2a),k2a.forEach(t),$2a.forEach(t),VTt=i(yno),ySe=n(yno,"SPAN",{});var S2a=s(ySe);XTt=r(S2a,"FlaxAutoModelForMultipleChoice"),S2a.forEach(t),yno.forEach(t),fto=i(m),Sr=n(m,"DIV",{class:!0});var od=s(Sr);T(qP.$$.fragment,od),zTt=i(od),vf=n(od,"P",{});var Bce=s(vf);QTt=r(Bce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gie=n(Bce,"A",{href:!0});var R2a=s(gie);WTt=r(R2a,"from_pretrained()"),R2a.forEach(t),UTt=r(Bce," class method or the "),hie=n(Bce,"A",{href:!0});var P2a=s(hie);HTt=r(P2a,"from_config()"),P2a.forEach(t),JTt=r(Bce,` class
method.`),Bce.forEach(t),YTt=i(od),jP=n(od,"P",{});var xno=s(jP);ZTt=r(xno,"This class cannot be instantiated directly using "),xSe=n(xno,"CODE",{});var B2a=s(xSe);KTt=r(B2a,"__init__()"),B2a.forEach(t),eMt=r(xno," (throws an error)."),xno.forEach(t),oMt=i(od),_a=n(od,"DIV",{class:!0});var gx=s(_a);T(DP.$$.fragment,gx),rMt=i(gx),$Se=n(gx,"P",{});var I2a=s($Se);tMt=r(I2a,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I2a.forEach(t),aMt=i(gx),Ff=n(gx,"P",{});var Ice=s(Ff);nMt=r(Ice,`Note:
Loading a model from its configuration file does `),kSe=n(Ice,"STRONG",{});var N2a=s(kSe);sMt=r(N2a,"not"),N2a.forEach(t),lMt=r(Ice,` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=n(Ice,"A",{href:!0});var q2a=s(uie);iMt=r(q2a,"from_pretrained()"),q2a.forEach(t),dMt=r(Ice," to load the model weights."),Ice.forEach(t),cMt=i(gx),T(vy.$$.fragment,gx),gx.forEach(t),mMt=i(od),it=n(od,"DIV",{class:!0});var rd=s(it);T(GP.$$.fragment,rd),fMt=i(rd),SSe=n(rd,"P",{});var j2a=s(SSe);gMt=r(j2a,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j2a.forEach(t),hMt=i(rd),es=n(rd,"P",{});var hx=s(es);uMt=r(hx,"The model class to instantiate is selected based on the "),RSe=n(hx,"CODE",{});var D2a=s(RSe);pMt=r(D2a,"model_type"),D2a.forEach(t),_Mt=r(hx,` property of the config object (either
passed as an argument or loaded from `),PSe=n(hx,"CODE",{});var G2a=s(PSe);bMt=r(G2a,"pretrained_model_name_or_path"),G2a.forEach(t),vMt=r(hx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BSe=n(hx,"CODE",{});var O2a=s(BSe);FMt=r(O2a,"pretrained_model_name_or_path"),O2a.forEach(t),TMt=r(hx,":"),hx.forEach(t),MMt=i(rd),ze=n(rd,"UL",{});var yo=s(ze);Fy=n(yo,"LI",{});var Qeo=s(Fy);ISe=n(Qeo,"STRONG",{});var V2a=s(ISe);EMt=r(V2a,"albert"),V2a.forEach(t),CMt=r(Qeo," \u2014 "),pie=n(Qeo,"A",{href:!0});var X2a=s(pie);wMt=r(X2a,"FlaxAlbertForMultipleChoice"),X2a.forEach(t),AMt=r(Qeo," (ALBERT model)"),Qeo.forEach(t),LMt=i(yo),Ty=n(yo,"LI",{});var Weo=s(Ty);NSe=n(Weo,"STRONG",{});var z2a=s(NSe);yMt=r(z2a,"bert"),z2a.forEach(t),xMt=r(Weo," \u2014 "),_ie=n(Weo,"A",{href:!0});var Q2a=s(_ie);$Mt=r(Q2a,"FlaxBertForMultipleChoice"),Q2a.forEach(t),kMt=r(Weo," (BERT model)"),Weo.forEach(t),SMt=i(yo),My=n(yo,"LI",{});var Ueo=s(My);qSe=n(Ueo,"STRONG",{});var W2a=s(qSe);RMt=r(W2a,"big_bird"),W2a.forEach(t),PMt=r(Ueo," \u2014 "),bie=n(Ueo,"A",{href:!0});var U2a=s(bie);BMt=r(U2a,"FlaxBigBirdForMultipleChoice"),U2a.forEach(t),IMt=r(Ueo," (BigBird model)"),Ueo.forEach(t),NMt=i(yo),Ey=n(yo,"LI",{});var Heo=s(Ey);jSe=n(Heo,"STRONG",{});var H2a=s(jSe);qMt=r(H2a,"distilbert"),H2a.forEach(t),jMt=r(Heo," \u2014 "),vie=n(Heo,"A",{href:!0});var J2a=s(vie);DMt=r(J2a,"FlaxDistilBertForMultipleChoice"),J2a.forEach(t),GMt=r(Heo," (DistilBERT model)"),Heo.forEach(t),OMt=i(yo),Cy=n(yo,"LI",{});var Jeo=s(Cy);DSe=n(Jeo,"STRONG",{});var Y2a=s(DSe);VMt=r(Y2a,"electra"),Y2a.forEach(t),XMt=r(Jeo," \u2014 "),Fie=n(Jeo,"A",{href:!0});var Z2a=s(Fie);zMt=r(Z2a,"FlaxElectraForMultipleChoice"),Z2a.forEach(t),QMt=r(Jeo," (ELECTRA model)"),Jeo.forEach(t),WMt=i(yo),wy=n(yo,"LI",{});var Yeo=s(wy);GSe=n(Yeo,"STRONG",{});var K2a=s(GSe);UMt=r(K2a,"roberta"),K2a.forEach(t),HMt=r(Yeo," \u2014 "),Tie=n(Yeo,"A",{href:!0});var eva=s(Tie);JMt=r(eva,"FlaxRobertaForMultipleChoice"),eva.forEach(t),YMt=r(Yeo," (RoBERTa model)"),Yeo.forEach(t),ZMt=i(yo),Ay=n(yo,"LI",{});var Zeo=s(Ay);OSe=n(Zeo,"STRONG",{});var ova=s(OSe);KMt=r(ova,"roformer"),ova.forEach(t),eEt=r(Zeo," \u2014 "),Mie=n(Zeo,"A",{href:!0});var rva=s(Mie);oEt=r(rva,"FlaxRoFormerForMultipleChoice"),rva.forEach(t),rEt=r(Zeo," (RoFormer model)"),Zeo.forEach(t),tEt=i(yo),Ly=n(yo,"LI",{});var Keo=s(Ly);VSe=n(Keo,"STRONG",{});var tva=s(VSe);aEt=r(tva,"xlm-roberta"),tva.forEach(t),nEt=r(Keo," \u2014 "),Eie=n(Keo,"A",{href:!0});var ava=s(Eie);sEt=r(ava,"FlaxXLMRobertaForMultipleChoice"),ava.forEach(t),lEt=r(Keo," (XLM-RoBERTa model)"),Keo.forEach(t),yo.forEach(t),iEt=i(rd),T(yy.$$.fragment,rd),rd.forEach(t),od.forEach(t),gto=i(m),Tf=n(m,"H2",{class:!0});var $no=s(Tf);xy=n($no,"A",{id:!0,class:!0,href:!0});var nva=s(xy);XSe=n(nva,"SPAN",{});var sva=s(XSe);T(OP.$$.fragment,sva),sva.forEach(t),nva.forEach(t),dEt=i($no),zSe=n($no,"SPAN",{});var lva=s(zSe);cEt=r(lva,"FlaxAutoModelForNextSentencePrediction"),lva.forEach(t),$no.forEach(t),hto=i(m),Rr=n(m,"DIV",{class:!0});var td=s(Rr);T(VP.$$.fragment,td),mEt=i(td),Mf=n(td,"P",{});var Nce=s(Mf);fEt=r(Nce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cie=n(Nce,"A",{href:!0});var iva=s(Cie);gEt=r(iva,"from_pretrained()"),iva.forEach(t),hEt=r(Nce," class method or the "),wie=n(Nce,"A",{href:!0});var dva=s(wie);uEt=r(dva,"from_config()"),dva.forEach(t),pEt=r(Nce,` class
method.`),Nce.forEach(t),_Et=i(td),XP=n(td,"P",{});var kno=s(XP);bEt=r(kno,"This class cannot be instantiated directly using "),QSe=n(kno,"CODE",{});var cva=s(QSe);vEt=r(cva,"__init__()"),cva.forEach(t),FEt=r(kno," (throws an error)."),kno.forEach(t),TEt=i(td),ba=n(td,"DIV",{class:!0});var ux=s(ba);T(zP.$$.fragment,ux),MEt=i(ux),WSe=n(ux,"P",{});var mva=s(WSe);EEt=r(mva,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mva.forEach(t),CEt=i(ux),Ef=n(ux,"P",{});var qce=s(Ef);wEt=r(qce,`Note:
Loading a model from its configuration file does `),USe=n(qce,"STRONG",{});var fva=s(USe);AEt=r(fva,"not"),fva.forEach(t),LEt=r(qce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=n(qce,"A",{href:!0});var gva=s(Aie);yEt=r(gva,"from_pretrained()"),gva.forEach(t),xEt=r(qce," to load the model weights."),qce.forEach(t),$Et=i(ux),T($y.$$.fragment,ux),ux.forEach(t),kEt=i(td),dt=n(td,"DIV",{class:!0});var ad=s(dt);T(QP.$$.fragment,ad),SEt=i(ad),HSe=n(ad,"P",{});var hva=s(HSe);REt=r(hva,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hva.forEach(t),PEt=i(ad),os=n(ad,"P",{});var px=s(os);BEt=r(px,"The model class to instantiate is selected based on the "),JSe=n(px,"CODE",{});var uva=s(JSe);IEt=r(uva,"model_type"),uva.forEach(t),NEt=r(px,` property of the config object (either
passed as an argument or loaded from `),YSe=n(px,"CODE",{});var pva=s(YSe);qEt=r(pva,"pretrained_model_name_or_path"),pva.forEach(t),jEt=r(px,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZSe=n(px,"CODE",{});var _va=s(ZSe);DEt=r(_va,"pretrained_model_name_or_path"),_va.forEach(t),GEt=r(px,":"),px.forEach(t),OEt=i(ad),KSe=n(ad,"UL",{});var bva=s(KSe);ky=n(bva,"LI",{});var eoo=s(ky);eRe=n(eoo,"STRONG",{});var vva=s(eRe);VEt=r(vva,"bert"),vva.forEach(t),XEt=r(eoo," \u2014 "),Lie=n(eoo,"A",{href:!0});var Fva=s(Lie);zEt=r(Fva,"FlaxBertForNextSentencePrediction"),Fva.forEach(t),QEt=r(eoo," (BERT model)"),eoo.forEach(t),bva.forEach(t),WEt=i(ad),T(Sy.$$.fragment,ad),ad.forEach(t),td.forEach(t),uto=i(m),Cf=n(m,"H2",{class:!0});var Sno=s(Cf);Ry=n(Sno,"A",{id:!0,class:!0,href:!0});var Tva=s(Ry);oRe=n(Tva,"SPAN",{});var Mva=s(oRe);T(WP.$$.fragment,Mva),Mva.forEach(t),Tva.forEach(t),UEt=i(Sno),rRe=n(Sno,"SPAN",{});var Eva=s(rRe);HEt=r(Eva,"FlaxAutoModelForImageClassification"),Eva.forEach(t),Sno.forEach(t),pto=i(m),Pr=n(m,"DIV",{class:!0});var nd=s(Pr);T(UP.$$.fragment,nd),JEt=i(nd),wf=n(nd,"P",{});var jce=s(wf);YEt=r(jce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yie=n(jce,"A",{href:!0});var Cva=s(yie);ZEt=r(Cva,"from_pretrained()"),Cva.forEach(t),KEt=r(jce," class method or the "),xie=n(jce,"A",{href:!0});var wva=s(xie);e4t=r(wva,"from_config()"),wva.forEach(t),o4t=r(jce,` class
method.`),jce.forEach(t),r4t=i(nd),HP=n(nd,"P",{});var Rno=s(HP);t4t=r(Rno,"This class cannot be instantiated directly using "),tRe=n(Rno,"CODE",{});var Ava=s(tRe);a4t=r(Ava,"__init__()"),Ava.forEach(t),n4t=r(Rno," (throws an error)."),Rno.forEach(t),s4t=i(nd),va=n(nd,"DIV",{class:!0});var _x=s(va);T(JP.$$.fragment,_x),l4t=i(_x),aRe=n(_x,"P",{});var Lva=s(aRe);i4t=r(Lva,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lva.forEach(t),d4t=i(_x),Af=n(_x,"P",{});var Dce=s(Af);c4t=r(Dce,`Note:
Loading a model from its configuration file does `),nRe=n(Dce,"STRONG",{});var yva=s(nRe);m4t=r(yva,"not"),yva.forEach(t),f4t=r(Dce,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=n(Dce,"A",{href:!0});var xva=s($ie);g4t=r(xva,"from_pretrained()"),xva.forEach(t),h4t=r(Dce," to load the model weights."),Dce.forEach(t),u4t=i(_x),T(Py.$$.fragment,_x),_x.forEach(t),p4t=i(nd),ct=n(nd,"DIV",{class:!0});var sd=s(ct);T(YP.$$.fragment,sd),_4t=i(sd),sRe=n(sd,"P",{});var $va=s(sRe);b4t=r($va,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$va.forEach(t),v4t=i(sd),rs=n(sd,"P",{});var bx=s(rs);F4t=r(bx,"The model class to instantiate is selected based on the "),lRe=n(bx,"CODE",{});var kva=s(lRe);T4t=r(kva,"model_type"),kva.forEach(t),M4t=r(bx,` property of the config object (either
passed as an argument or loaded from `),iRe=n(bx,"CODE",{});var Sva=s(iRe);E4t=r(Sva,"pretrained_model_name_or_path"),Sva.forEach(t),C4t=r(bx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dRe=n(bx,"CODE",{});var Rva=s(dRe);w4t=r(Rva,"pretrained_model_name_or_path"),Rva.forEach(t),A4t=r(bx,":"),bx.forEach(t),L4t=i(sd),ZP=n(sd,"UL",{});var Pno=s(ZP);By=n(Pno,"LI",{});var ooo=s(By);cRe=n(ooo,"STRONG",{});var Pva=s(cRe);y4t=r(Pva,"beit"),Pva.forEach(t),x4t=r(ooo," \u2014 "),kie=n(ooo,"A",{href:!0});var Bva=s(kie);$4t=r(Bva,"FlaxBeitForImageClassification"),Bva.forEach(t),k4t=r(ooo," (BEiT model)"),ooo.forEach(t),S4t=i(Pno),Iy=n(Pno,"LI",{});var roo=s(Iy);mRe=n(roo,"STRONG",{});var Iva=s(mRe);R4t=r(Iva,"vit"),Iva.forEach(t),P4t=r(roo," \u2014 "),Sie=n(roo,"A",{href:!0});var Nva=s(Sie);B4t=r(Nva,"FlaxViTForImageClassification"),Nva.forEach(t),I4t=r(roo," (ViT model)"),roo.forEach(t),Pno.forEach(t),N4t=i(sd),T(Ny.$$.fragment,sd),sd.forEach(t),nd.forEach(t),_to=i(m),Lf=n(m,"H2",{class:!0});var Bno=s(Lf);qy=n(Bno,"A",{id:!0,class:!0,href:!0});var qva=s(qy);fRe=n(qva,"SPAN",{});var jva=s(fRe);T(KP.$$.fragment,jva),jva.forEach(t),qva.forEach(t),q4t=i(Bno),gRe=n(Bno,"SPAN",{});var Dva=s(gRe);j4t=r(Dva,"FlaxAutoModelForVision2Seq"),Dva.forEach(t),Bno.forEach(t),bto=i(m),Br=n(m,"DIV",{class:!0});var ld=s(Br);T(eB.$$.fragment,ld),D4t=i(ld),yf=n(ld,"P",{});var Gce=s(yf);G4t=r(Gce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Rie=n(Gce,"A",{href:!0});var Gva=s(Rie);O4t=r(Gva,"from_pretrained()"),Gva.forEach(t),V4t=r(Gce," class method or the "),Pie=n(Gce,"A",{href:!0});var Ova=s(Pie);X4t=r(Ova,"from_config()"),Ova.forEach(t),z4t=r(Gce,` class
method.`),Gce.forEach(t),Q4t=i(ld),oB=n(ld,"P",{});var Ino=s(oB);W4t=r(Ino,"This class cannot be instantiated directly using "),hRe=n(Ino,"CODE",{});var Vva=s(hRe);U4t=r(Vva,"__init__()"),Vva.forEach(t),H4t=r(Ino," (throws an error)."),Ino.forEach(t),J4t=i(ld),Fa=n(ld,"DIV",{class:!0});var vx=s(Fa);T(rB.$$.fragment,vx),Y4t=i(vx),uRe=n(vx,"P",{});var Xva=s(uRe);Z4t=r(Xva,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xva.forEach(t),K4t=i(vx),xf=n(vx,"P",{});var Oce=s(xf);eCt=r(Oce,`Note:
Loading a model from its configuration file does `),pRe=n(Oce,"STRONG",{});var zva=s(pRe);oCt=r(zva,"not"),zva.forEach(t),rCt=r(Oce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=n(Oce,"A",{href:!0});var Qva=s(Bie);tCt=r(Qva,"from_pretrained()"),Qva.forEach(t),aCt=r(Oce," to load the model weights."),Oce.forEach(t),nCt=i(vx),T(jy.$$.fragment,vx),vx.forEach(t),sCt=i(ld),mt=n(ld,"DIV",{class:!0});var id=s(mt);T(tB.$$.fragment,id),lCt=i(id),_Re=n(id,"P",{});var Wva=s(_Re);iCt=r(Wva,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wva.forEach(t),dCt=i(id),ts=n(id,"P",{});var Fx=s(ts);cCt=r(Fx,"The model class to instantiate is selected based on the "),bRe=n(Fx,"CODE",{});var Uva=s(bRe);mCt=r(Uva,"model_type"),Uva.forEach(t),fCt=r(Fx,` property of the config object (either
passed as an argument or loaded from `),vRe=n(Fx,"CODE",{});var Hva=s(vRe);gCt=r(Hva,"pretrained_model_name_or_path"),Hva.forEach(t),hCt=r(Fx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FRe=n(Fx,"CODE",{});var Jva=s(FRe);uCt=r(Jva,"pretrained_model_name_or_path"),Jva.forEach(t),pCt=r(Fx,":"),Fx.forEach(t),_Ct=i(id),TRe=n(id,"UL",{});var Yva=s(TRe);Dy=n(Yva,"LI",{});var too=s(Dy);MRe=n(too,"STRONG",{});var Zva=s(MRe);bCt=r(Zva,"vision-encoder-decoder"),Zva.forEach(t),vCt=r(too," \u2014 "),Iie=n(too,"A",{href:!0});var Kva=s(Iie);FCt=r(Kva,"FlaxVisionEncoderDecoderModel"),Kva.forEach(t),TCt=r(too," (Vision Encoder decoder model)"),too.forEach(t),Yva.forEach(t),MCt=i(id),T(Gy.$$.fragment,id),id.forEach(t),ld.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(uMa)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(ns,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(ls,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(is,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(ud,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(pd,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(_d,"class","relative group"),c(BI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(II,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(NI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(WI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(UI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sN,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(dN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(wN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c($N,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(BN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(IN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(NN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(qN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(jN,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(DN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(GN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(ON,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(VN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(XN,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(WN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(UN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(HN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(JN,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(ZN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(KN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(eq,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(oq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(aq,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(nq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(sq,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(lq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(iq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(dq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(cq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(mq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fq,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(gq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(hq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(uq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(pq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(_q,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(bq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(vq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Fq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(Tq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Mq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Eq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(Cq,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Aq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Lq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(yq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c($q,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(kq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(Sq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(Rq,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig"),c(Pq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(Bq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Iq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Nq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(Dq,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(Gq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(Oq,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Vq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Xq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(zq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(Qq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Wq,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),c(Uq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Hq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(Jq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(Yq,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig"),c(Zq,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(Kq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(ej,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(oj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(rj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(tj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(aj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(nj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(sj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gu,"id","transformers.AutoTokenizer"),c(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gu,"href","#transformers.AutoTokenizer"),c(vd,"class","relative group"),c(lj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(ij,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(dj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(fj,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(hj,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(pj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(_j,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(bj,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Fj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Mj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Cj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Aj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Lj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(yj,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Rj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Pj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(Bj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(Ij,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(jj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(Dj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Oj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Vj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Xj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(zj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Qj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(Wj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Uj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Hj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Jj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(Yj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(Zj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Kj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(oD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(tD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(aD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(nD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(sD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(lD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(fD,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(gD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(pD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_D,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(bD,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(vD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(ED,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(CD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(wD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(AD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(LD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(yD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(xD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c($D,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(kD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(SD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(RD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(PD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(BD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ID,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(ND,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(qD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(jD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(DD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(GD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(OD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(VD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(XD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(zD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(QD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(WD,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(UD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(HD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(JD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(YD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ZD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(KD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(eG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(oG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(rG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(tG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(aG,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(nG,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(sG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(lG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(dG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(cG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(fG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(gG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pG,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_G,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(bG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(vG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(FG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(TG,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(MG,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(EG,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(CG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(wG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(AG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(LG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(yG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(xG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c($G,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(RG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(PG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(BG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(IG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(NG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(qG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(jG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(DG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(GG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(OG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(VG,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(XG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(zG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(QG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(WG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(UG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(HG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YG,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(ZG,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperTokenizer"),c(KG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(eO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(rO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(nO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(sO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(lO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(iO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(dO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(cO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(fO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ju,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yu,"id","transformers.AutoFeatureExtractor"),c(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yu,"href","#transformers.AutoFeatureExtractor"),c(Fd,"class","relative group"),c(gO,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(pO,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(_O,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TO,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c(MO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(EO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(CO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(wO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(AO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(LO,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(yO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(xO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($O,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(kO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(SO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(RO,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(PO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(BO,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(IO,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(NO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(qO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(jO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(DO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(VO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(XO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(UO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(HO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(JO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ZO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eV,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperFeatureExtractor"),c(oV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(rV,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoProcessor"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoProcessor"),c(Td,"class","relative group"),c(tV,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(aV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(nV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(sV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(lV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(iV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(dV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(cV,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(mV,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMProcessor"),c(fV,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(gV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(pV,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(_V,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FV,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(TV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(MV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wV,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperProcessor"),c(AV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"id","transformers.AutoModel"),c(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(__,"href","#transformers.AutoModel"),c(Ed,"class","relative group"),c(LV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(kV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(SV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(RV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(PV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(BV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(IV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(NV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(qV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(jV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(DV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(GV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(OV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(VV,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(XV,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(zV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(QV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(WV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(UV,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(HV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(JV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(YV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(KV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(eX,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(oX,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(rX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(tX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(aX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(nX,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(sX,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(lX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(iX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(dX,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(cX,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmModel"),c(mX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(fX,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(gX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(hX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(uX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(pX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_X,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(bX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(vX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(FX,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(TX,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(MX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(EX,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(CX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(wX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(AX,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(LX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(xX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c($X,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(kX,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(SX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(RX,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(PX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(BX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(IX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(NX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(qX,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel"),c(jX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(DX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(GX,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(OX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(VX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(XX,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(zX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(QX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(WX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(UX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(HX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(JX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(YX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(KX,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(ez,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(oz,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(rz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(tz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(az,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(nz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(sz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(lz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(iz,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(dz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(cz,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(mz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(fz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(gz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(hz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(uz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(pz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(_z,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(bz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(vz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(Mz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Ez,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel"),c(wz,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Az,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(yz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(xz,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c($z,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(kz,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(jz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(Oz,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(zz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(Uz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForPreTraining"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForPreTraining"),c(Ad,"class","relative group"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(eQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(rQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(tQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(fQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uQ,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_Q,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(EQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(CQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(wQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(LQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(yQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xQ,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c($Q,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(SQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(PQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(IQ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(NQ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(qQ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(jQ,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(DQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(GQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(OQ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(VQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N2,"id","transformers.AutoModelForCausalLM"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForCausalLM"),c(xd,"class","relative group"),c(WQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(ZQ,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(KQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nW,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(sW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(iW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(dW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(cW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(fW,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(gW,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(hW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(uW,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(pW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(_W,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(bW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(vW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(TW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(MW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(EW,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(CW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(wW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(AW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(LW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(yW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(xW,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c($W,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kW,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(SW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(RW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(BW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(IW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(NW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForMaskedLM"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForMaskedLM"),c(Sd,"class","relative group"),c(qW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(OW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(XW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(zW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(WW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(UW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(HW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(JW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(YW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ZW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(KW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(eU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(oU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(rU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(sU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(iU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(dU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(mU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(fU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(uU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_U,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(EU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(CU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForSeq2SeqLM"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bd,"class","relative group"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($U,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(SU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(RU,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(BU,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(IU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(NU,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(qU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(DU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(VU,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(XU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(zU,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(QU,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WU,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForSequenceClassification"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForSequenceClassification"),c(qd,"class","relative group"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c($H,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForMultipleChoice"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForMultipleChoice"),c(Gd,"class","relative group"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(rJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(tJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(aJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(nJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(sJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(lJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(iJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(dJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(cJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(mJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(fJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(gJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(hJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(uJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(pJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(_J,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(bJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(vJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(FJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(TJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(MJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(EJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(CJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(AJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(yJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c($J,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(kJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(SJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.AutoModelForNextSentencePrediction"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.AutoModelForNextSentencePrediction"),c(Xd,"class","relative group"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(NJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(qJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(OJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForTokenClassification"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForTokenClassification"),c(Wd,"class","relative group"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(UJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HJ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(JJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(KJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.AutoModelForQuestionAnswering"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.AutoModelForQuestionAnswering"),c(Jd,"class","relative group"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(IY,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(NY,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(qY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(jY,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(DY,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering"),c(GY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(OY,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(VY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(XY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(zY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(QY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(WY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(UY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(HY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(JY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(YY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(ZY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(KY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(eZ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(oZ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(rZ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(tZ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(aZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(nZ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(sZ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lZ,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),c(iZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(dZ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(cZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fZ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(gZ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(hZ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(uZ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pZ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_Z,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FZ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TZ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AZ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForTableQuestionAnswering"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Kd,"class","relative group"),c(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(rc,"class","relative group"),c(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(BZ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(IZ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.AutoModelForImageClassification"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.AutoModelForImageClassification"),c(sc,"class","relative group"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(GZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(OZ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(VZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(XZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(zZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(QZ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(WZ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(UZ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(HZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(JZ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(YZ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(ZZ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(KZ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.AutoModelForVideoClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.AutoModelForVideoClassification"),c(dc,"class","relative group"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.AutoModelForVision2Seq"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.AutoModelForVision2Seq"),c(fc,"class","relative group"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.AutoModelForVisualQuestionAnswering"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(uc,"class","relative group"),c(pK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.AutoModelForAudioClassification"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.AutoModelForAudioClassification"),c(bc,"class","relative group"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(LK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(xK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c($K,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.AutoModelForAudioFrameClassification"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.AutoModelForAudioFrameClassification"),c(Tc,"class","relative group"),c(SK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(IK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(NK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(qK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(jK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.AutoModelForCTC"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.AutoModelForCTC"),c(Cc,"class","relative group"),c(DK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(XK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(zK,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(QK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(WK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(UK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(HK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(JK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(YK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(ZK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(aee,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.AutoModelForAudioXVector"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.AutoModelForAudioXVector"),c(kc,"class","relative group"),c(nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(see,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(dee,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(cee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(mee,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(fee,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.AutoModelForMaskedImageModeling"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Pc,"class","relative group"),c(gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pee,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(_ee,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(bee,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(vee,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.AutoModelForObjectDetection"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.AutoModelForObjectDetection"),c(Nc,"class","relative group"),c(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(Cee,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(wee,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Aee,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForImageSegmentation"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForImageSegmentation"),c(Dc,"class","relative group"),c(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ee,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.AutoModelForSemanticSegmentation"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Vc,"class","relative group"),c(kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(See,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pee,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Bee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Iee,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Nee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(qee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.AutoModelForInstanceSegmentation"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.AutoModelForInstanceSegmentation"),c(Qc,"class","relative group"),c(jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oee,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.AutoModelForZeroShotObjectDetection"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.AutoModelForZeroShotObjectDetection"),c(Hc,"class","relative group"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qee,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.TFAutoModel"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.TFAutoModel"),c(Zc,"class","relative group"),c(Wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(Yee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(Zee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(Kee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(eoe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(ooe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(roe,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(toe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(aoe,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(noe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(soe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(loe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(ioe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(doe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(coe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(moe,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(foe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(goe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(hoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(uoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(poe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(_oe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(boe,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),c(voe,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(Foe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Toe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(Moe,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(Eoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(Coe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(woe,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(Aoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(Loe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(yoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(xoe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c($oe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(koe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Soe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(Roe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Poe,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(Boe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(Ioe,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(Noe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(qoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(joe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(Doe,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Goe,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(Ooe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Voe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Xoe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(zoe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Qoe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Woe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Uoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(Hoe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(Joe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Yoe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.TFAutoModelForPreTraining"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.TFAutoModelForPreTraining"),c(om,"class","relative group"),c(Zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ore,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(rre,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(are,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(lre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(ire,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(dre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(cre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(fre,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(gre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(hre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ure,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(pre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(_re,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(vre,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Fre,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Tre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Mre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ere,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.TFAutoModelForCausalLM"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.TFAutoModelForCausalLM"),c(am,"class","relative group"),c(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(yre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(xre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c($re,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(kre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Sre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Rre,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(Pre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Bre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Ire,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Nre,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(jre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Dre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.TFAutoModelForImageClassification"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.TFAutoModelForImageClassification"),c(lm,"class","relative group"),c(Gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ore,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xre,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(zre,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(Qre,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(Wre,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(Ure,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(Hre,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(Jre,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(Yre,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(Zre,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(Kre,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.TFAutoModelForSemanticSegmentation"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(cm,"class","relative group"),c(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(ate,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(nte,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.TFAutoModelForMaskedLM"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.TFAutoModelForMaskedLM"),c(hm,"class","relative group"),c(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(cte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(mte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(gte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(hte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(ute,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(_te,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(vte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Fte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Tte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Mte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Ete,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(Cte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Ate,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Lte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_m,"class","relative group"),c(xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ste,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Rte,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Pte,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Bte,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Ite,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Nte,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(qte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(jte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Dte,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Gte,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.TFAutoModelForSequenceClassification"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fm,"class","relative group"),c(Ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Qte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Wte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Ute,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Hte,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Jte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Yte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Zte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Kte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(oae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(rae,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(tae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(aae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(nae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(sae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(lae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(iae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(dae,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(cae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(fae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(gae,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(hae,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(uae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(pae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_ae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EA,"id","transformers.TFAutoModelForMultipleChoice"),c(EA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EA,"href","#transformers.TFAutoModelForMultipleChoice"),c(Em,"class","relative group"),c(bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Mae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Eae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Cae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Aae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Lae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(yae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c($ae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(kae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Sae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Rae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Pae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Bae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Iae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Nae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(VA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Am,"class","relative group"),c(qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Oae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xm,"class","relative group"),c(Vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qae,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZA,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(ZA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZA,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Sm,"class","relative group"),c(Wae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.TFAutoModelForTokenClassification"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.TFAutoModelForTokenClassification"),c(Bm,"class","relative group"),c(Yae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ene,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(one,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(rne,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(tne,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ane,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(nne,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(sne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(lne,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(ine,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(dne,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(cne,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(mne,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(fne,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(gne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(hne,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(une,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(pne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(_ne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(bne,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(vne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Fne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A6,"id","transformers.TFAutoModelForQuestionAnswering"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qm,"class","relative group"),c(Tne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ene,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cne,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(wne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Ane,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Lne,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(yne,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(xne,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c($ne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(kne,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Sne,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Rne,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Pne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Bne,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(Ine,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Nne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(qne,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jne,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Dne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Gne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(One,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Vne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Xne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.TFAutoModelForVision2Seq"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.TFAutoModelForVision2Seq"),c(Gm,"class","relative group"),c(zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Une,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xm,"class","relative group"),c(Hne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zne,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.FlaxAutoModel"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.FlaxAutoModel"),c(Wm,"class","relative group"),c(Kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ese,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ose,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(ase,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(nse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(sse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lse,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(ise,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dse,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(mse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(fse,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gse,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hse,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(use,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(pse,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(_se,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(bse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(vse,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Fse,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Tse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Mse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Ese,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Cse,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(wse,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Ase,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Lse,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(yse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.FlaxAutoModelForCausalLM"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jm,"class","relative group"),c(xse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($se,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Rse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Pse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Bse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Ise,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Nse,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(qse,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(jse,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Dse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Gse,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W7,"id","transformers.FlaxAutoModelForPreTraining"),c(W7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W7,"href","#transformers.FlaxAutoModelForPreTraining"),c(Km,"class","relative group"),c(Ose,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Qse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Wse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Use,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Hse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Jse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Yse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Zse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Kse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ele,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ole,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rle,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(tle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dL,"id","transformers.FlaxAutoModelForMaskedLM"),c(dL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dL,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ile,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(cle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(mle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(fle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(gle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ule,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ple,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ML,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(ML,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ML,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(_le,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ble,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Tle,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Mle,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Ele,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Cle,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(wle,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ale,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Lle,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yle,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(xle,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BL,"id","transformers.FlaxAutoModelForSequenceClassification"),c(BL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BL,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c($le,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ple,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Ble,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Ile,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Nle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(qle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(jle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Dle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Gle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ole,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(UL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(ff,"class","relative group"),c(Vle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Wle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Ule,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Hle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Jle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Yle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Zle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Kle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(eie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(oie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ly,"id","transformers.FlaxAutoModelForTokenClassification"),c(ly,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ly,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(rie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(sie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(lie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(iie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(die,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(cie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(mie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(fie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(by,"id","transformers.FlaxAutoModelForMultipleChoice"),c(by,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(by,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(gie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(_ie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(bie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(vie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Fie,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Tie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Mie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Eie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xy,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(xy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xy,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(Cie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ry,"id","transformers.FlaxAutoModelForImageClassification"),c(Ry,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ry,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(yie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kie,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Sie,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qy,"id","transformers.FlaxAutoModelForVision2Seq"),c(qy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qy,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Rie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iie,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,xo),e(xo,dd),b(m,Rf,_),b(m,bt,_),e(bt,cd),e(bt,md),e(md,Tx),e(bt,Pf),b(m,Ve,_),b(m,He,_),e(He,fd),e(He,ns),e(ns,Mx),e(He,ss),e(He,ls),e(ls,Ex),e(He,gd),e(He,is),e(is,Cx),e(He,hd),b(m,Bf,_),M(Ja,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,xI),e(Ae,ud),e(ud,$I),e(Ae,kI),b(m,$o,_),b(m,Ya,_),e(Ya,SI),e(Ya,If),e(If,RI),e(Ya,Nno),b(m,aoo,_),b(m,pd,_),e(pd,Nf),e(Nf,Vce),M(wx,Vce,null),e(pd,qno),e(pd,Xce),e(Xce,jno),b(m,noo,_),b(m,ds,_),e(ds,Dno),e(ds,zce),e(zce,Gno),e(ds,Ono),e(ds,Qce),e(Qce,Vno),e(ds,Xno),b(m,soo,_),M(Ax,m,_),b(m,loo,_),b(m,PI,_),e(PI,zno),b(m,ioo,_),M(qf,m,_),b(m,doo,_),b(m,_d,_),e(_d,jf),e(jf,Wce),M(Lx,Wce,null),e(_d,Qno),e(_d,Uce),e(Uce,Wno),b(m,coo,_),b(m,ko,_),M(yx,ko,null),e(ko,Uno),e(ko,xx),e(xx,Hno),e(xx,BI),e(BI,Jno),e(xx,Yno),e(ko,Zno),e(ko,$x),e($x,Kno),e($x,Hce),e(Hce,eso),e($x,oso),e(ko,rso),e(ko,Ir),M(kx,Ir,null),e(Ir,tso),e(Ir,Jce),e(Jce,aso),e(Ir,nso),e(Ir,bd),e(bd,sso),e(bd,Yce),e(Yce,lso),e(bd,iso),e(bd,Zce),e(Zce,dso),e(bd,cso),e(Ir,mso),e(Ir,A),e(A,Df),e(Df,Kce),e(Kce,fso),e(Df,gso),e(Df,II),e(II,hso),e(Df,uso),e(A,pso),e(A,Gf),e(Gf,eme),e(eme,_so),e(Gf,bso),e(Gf,NI),e(NI,vso),e(Gf,Fso),e(A,Tso),e(A,Of),e(Of,ome),e(ome,Mso),e(Of,Eso),e(Of,qI),e(qI,Cso),e(Of,wso),e(A,Aso),e(A,Vf),e(Vf,rme),e(rme,Lso),e(Vf,yso),e(Vf,jI),e(jI,xso),e(Vf,$so),e(A,kso),e(A,Xf),e(Xf,tme),e(tme,Sso),e(Xf,Rso),e(Xf,DI),e(DI,Pso),e(Xf,Bso),e(A,Iso),e(A,zf),e(zf,ame),e(ame,Nso),e(zf,qso),e(zf,GI),e(GI,jso),e(zf,Dso),e(A,Gso),e(A,Qf),e(Qf,nme),e(nme,Oso),e(Qf,Vso),e(Qf,OI),e(OI,Xso),e(Qf,zso),e(A,Qso),e(A,Wf),e(Wf,sme),e(sme,Wso),e(Wf,Uso),e(Wf,VI),e(VI,Hso),e(Wf,Jso),e(A,Yso),e(A,Uf),e(Uf,lme),e(lme,Zso),e(Uf,Kso),e(Uf,XI),e(XI,elo),e(Uf,olo),e(A,rlo),e(A,Hf),e(Hf,ime),e(ime,tlo),e(Hf,alo),e(Hf,zI),e(zI,nlo),e(Hf,slo),e(A,llo),e(A,Jf),e(Jf,dme),e(dme,ilo),e(Jf,dlo),e(Jf,QI),e(QI,clo),e(Jf,mlo),e(A,flo),e(A,Yf),e(Yf,cme),e(cme,glo),e(Yf,hlo),e(Yf,WI),e(WI,ulo),e(Yf,plo),e(A,_lo),e(A,Zf),e(Zf,mme),e(mme,blo),e(Zf,vlo),e(Zf,UI),e(UI,Flo),e(Zf,Tlo),e(A,Mlo),e(A,Kf),e(Kf,fme),e(fme,Elo),e(Kf,Clo),e(Kf,HI),e(HI,wlo),e(Kf,Alo),e(A,Llo),e(A,eg),e(eg,gme),e(gme,ylo),e(eg,xlo),e(eg,JI),e(JI,$lo),e(eg,klo),e(A,Slo),e(A,og),e(og,hme),e(hme,Rlo),e(og,Plo),e(og,YI),e(YI,Blo),e(og,Ilo),e(A,Nlo),e(A,rg),e(rg,ume),e(ume,qlo),e(rg,jlo),e(rg,ZI),e(ZI,Dlo),e(rg,Glo),e(A,Olo),e(A,tg),e(tg,pme),e(pme,Vlo),e(tg,Xlo),e(tg,KI),e(KI,zlo),e(tg,Qlo),e(A,Wlo),e(A,ag),e(ag,_me),e(_me,Ulo),e(ag,Hlo),e(ag,eN),e(eN,Jlo),e(ag,Ylo),e(A,Zlo),e(A,ng),e(ng,bme),e(bme,Klo),e(ng,eio),e(ng,oN),e(oN,oio),e(ng,rio),e(A,tio),e(A,sg),e(sg,vme),e(vme,aio),e(sg,nio),e(sg,rN),e(rN,sio),e(sg,lio),e(A,iio),e(A,lg),e(lg,Fme),e(Fme,dio),e(lg,cio),e(lg,tN),e(tN,mio),e(lg,fio),e(A,gio),e(A,ig),e(ig,Tme),e(Tme,hio),e(ig,uio),e(ig,aN),e(aN,pio),e(ig,_io),e(A,bio),e(A,dg),e(dg,Mme),e(Mme,vio),e(dg,Fio),e(dg,nN),e(nN,Tio),e(dg,Mio),e(A,Eio),e(A,cg),e(cg,Eme),e(Eme,Cio),e(cg,wio),e(cg,sN),e(sN,Aio),e(cg,Lio),e(A,yio),e(A,mg),e(mg,Cme),e(Cme,xio),e(mg,$io),e(mg,lN),e(lN,kio),e(mg,Sio),e(A,Rio),e(A,fg),e(fg,wme),e(wme,Pio),e(fg,Bio),e(fg,iN),e(iN,Iio),e(fg,Nio),e(A,qio),e(A,gg),e(gg,Ame),e(Ame,jio),e(gg,Dio),e(gg,dN),e(dN,Gio),e(gg,Oio),e(A,Vio),e(A,hg),e(hg,Lme),e(Lme,Xio),e(hg,zio),e(hg,cN),e(cN,Qio),e(hg,Wio),e(A,Uio),e(A,ug),e(ug,yme),e(yme,Hio),e(ug,Jio),e(ug,mN),e(mN,Yio),e(ug,Zio),e(A,Kio),e(A,pg),e(pg,xme),e(xme,edo),e(pg,odo),e(pg,fN),e(fN,rdo),e(pg,tdo),e(A,ado),e(A,_g),e(_g,$me),e($me,ndo),e(_g,sdo),e(_g,gN),e(gN,ldo),e(_g,ido),e(A,ddo),e(A,bg),e(bg,kme),e(kme,cdo),e(bg,mdo),e(bg,hN),e(hN,fdo),e(bg,gdo),e(A,hdo),e(A,vg),e(vg,Sme),e(Sme,udo),e(vg,pdo),e(vg,uN),e(uN,_do),e(vg,bdo),e(A,vdo),e(A,Fg),e(Fg,Rme),e(Rme,Fdo),e(Fg,Tdo),e(Fg,pN),e(pN,Mdo),e(Fg,Edo),e(A,Cdo),e(A,Tg),e(Tg,Pme),e(Pme,wdo),e(Tg,Ado),e(Tg,_N),e(_N,Ldo),e(Tg,ydo),e(A,xdo),e(A,Mg),e(Mg,Bme),e(Bme,$do),e(Mg,kdo),e(Mg,bN),e(bN,Sdo),e(Mg,Rdo),e(A,Pdo),e(A,Eg),e(Eg,Ime),e(Ime,Bdo),e(Eg,Ido),e(Eg,vN),e(vN,Ndo),e(Eg,qdo),e(A,jdo),e(A,Cg),e(Cg,Nme),e(Nme,Ddo),e(Cg,Gdo),e(Cg,FN),e(FN,Odo),e(Cg,Vdo),e(A,Xdo),e(A,wg),e(wg,qme),e(qme,zdo),e(wg,Qdo),e(wg,TN),e(TN,Wdo),e(wg,Udo),e(A,Hdo),e(A,Ag),e(Ag,jme),e(jme,Jdo),e(Ag,Ydo),e(Ag,MN),e(MN,Zdo),e(Ag,Kdo),e(A,eco),e(A,Lg),e(Lg,Dme),e(Dme,oco),e(Lg,rco),e(Lg,EN),e(EN,tco),e(Lg,aco),e(A,nco),e(A,yg),e(yg,Gme),e(Gme,sco),e(yg,lco),e(yg,CN),e(CN,ico),e(yg,dco),e(A,cco),e(A,xg),e(xg,Ome),e(Ome,mco),e(xg,fco),e(xg,wN),e(wN,gco),e(xg,hco),e(A,uco),e(A,$g),e($g,Vme),e(Vme,pco),e($g,_co),e($g,AN),e(AN,bco),e($g,vco),e(A,Fco),e(A,kg),e(kg,Xme),e(Xme,Tco),e(kg,Mco),e(kg,LN),e(LN,Eco),e(kg,Cco),e(A,wco),e(A,Sg),e(Sg,zme),e(zme,Aco),e(Sg,Lco),e(Sg,yN),e(yN,yco),e(Sg,xco),e(A,$co),e(A,Rg),e(Rg,Qme),e(Qme,kco),e(Rg,Sco),e(Rg,xN),e(xN,Rco),e(Rg,Pco),e(A,Bco),e(A,Pg),e(Pg,Wme),e(Wme,Ico),e(Pg,Nco),e(Pg,$N),e($N,qco),e(Pg,jco),e(A,Dco),e(A,Bg),e(Bg,Ume),e(Ume,Gco),e(Bg,Oco),e(Bg,kN),e(kN,Vco),e(Bg,Xco),e(A,zco),e(A,Ig),e(Ig,Hme),e(Hme,Qco),e(Ig,Wco),e(Ig,SN),e(SN,Uco),e(Ig,Hco),e(A,Jco),e(A,Ng),e(Ng,Jme),e(Jme,Yco),e(Ng,Zco),e(Ng,RN),e(RN,Kco),e(Ng,emo),e(A,omo),e(A,qg),e(qg,Yme),e(Yme,rmo),e(qg,tmo),e(qg,PN),e(PN,amo),e(qg,nmo),e(A,smo),e(A,jg),e(jg,Zme),e(Zme,lmo),e(jg,imo),e(jg,BN),e(BN,dmo),e(jg,cmo),e(A,mmo),e(A,Dg),e(Dg,Kme),e(Kme,fmo),e(Dg,gmo),e(Dg,IN),e(IN,hmo),e(Dg,umo),e(A,pmo),e(A,Gg),e(Gg,efe),e(efe,_mo),e(Gg,bmo),e(Gg,NN),e(NN,vmo),e(Gg,Fmo),e(A,Tmo),e(A,Og),e(Og,ofe),e(ofe,Mmo),e(Og,Emo),e(Og,qN),e(qN,Cmo),e(Og,wmo),e(A,Amo),e(A,Vg),e(Vg,rfe),e(rfe,Lmo),e(Vg,ymo),e(Vg,jN),e(jN,xmo),e(Vg,$mo),e(A,kmo),e(A,Xg),e(Xg,tfe),e(tfe,Smo),e(Xg,Rmo),e(Xg,DN),e(DN,Pmo),e(Xg,Bmo),e(A,Imo),e(A,zg),e(zg,afe),e(afe,Nmo),e(zg,qmo),e(zg,GN),e(GN,jmo),e(zg,Dmo),e(A,Gmo),e(A,Qg),e(Qg,nfe),e(nfe,Omo),e(Qg,Vmo),e(Qg,ON),e(ON,Xmo),e(Qg,zmo),e(A,Qmo),e(A,Wg),e(Wg,sfe),e(sfe,Wmo),e(Wg,Umo),e(Wg,VN),e(VN,Hmo),e(Wg,Jmo),e(A,Ymo),e(A,Ug),e(Ug,lfe),e(lfe,Zmo),e(Ug,Kmo),e(Ug,XN),e(XN,efo),e(Ug,ofo),e(A,rfo),e(A,Hg),e(Hg,ife),e(ife,tfo),e(Hg,afo),e(Hg,zN),e(zN,nfo),e(Hg,sfo),e(A,lfo),e(A,Jg),e(Jg,dfe),e(dfe,ifo),e(Jg,dfo),e(Jg,QN),e(QN,cfo),e(Jg,mfo),e(A,ffo),e(A,Yg),e(Yg,cfe),e(cfe,gfo),e(Yg,hfo),e(Yg,WN),e(WN,ufo),e(Yg,pfo),e(A,_fo),e(A,Zg),e(Zg,mfe),e(mfe,bfo),e(Zg,vfo),e(Zg,UN),e(UN,Ffo),e(Zg,Tfo),e(A,Mfo),e(A,Kg),e(Kg,ffe),e(ffe,Efo),e(Kg,Cfo),e(Kg,HN),e(HN,wfo),e(Kg,Afo),e(A,Lfo),e(A,eh),e(eh,gfe),e(gfe,yfo),e(eh,xfo),e(eh,JN),e(JN,$fo),e(eh,kfo),e(A,Sfo),e(A,oh),e(oh,hfe),e(hfe,Rfo),e(oh,Pfo),e(oh,YN),e(YN,Bfo),e(oh,Ifo),e(A,Nfo),e(A,rh),e(rh,ufe),e(ufe,qfo),e(rh,jfo),e(rh,ZN),e(ZN,Dfo),e(rh,Gfo),e(A,Ofo),e(A,th),e(th,pfe),e(pfe,Vfo),e(th,Xfo),e(th,KN),e(KN,zfo),e(th,Qfo),e(A,Wfo),e(A,ah),e(ah,_fe),e(_fe,Ufo),e(ah,Hfo),e(ah,eq),e(eq,Jfo),e(ah,Yfo),e(A,Zfo),e(A,nh),e(nh,bfe),e(bfe,Kfo),e(nh,ego),e(nh,oq),e(oq,ogo),e(nh,rgo),e(A,tgo),e(A,sh),e(sh,vfe),e(vfe,ago),e(sh,ngo),e(sh,rq),e(rq,sgo),e(sh,lgo),e(A,igo),e(A,lh),e(lh,Ffe),e(Ffe,dgo),e(lh,cgo),e(lh,tq),e(tq,mgo),e(lh,fgo),e(A,ggo),e(A,ih),e(ih,Tfe),e(Tfe,hgo),e(ih,ugo),e(ih,aq),e(aq,pgo),e(ih,_go),e(A,bgo),e(A,dh),e(dh,Mfe),e(Mfe,vgo),e(dh,Fgo),e(dh,nq),e(nq,Tgo),e(dh,Mgo),e(A,Ego),e(A,ch),e(ch,Efe),e(Efe,Cgo),e(ch,wgo),e(ch,sq),e(sq,Ago),e(ch,Lgo),e(A,ygo),e(A,mh),e(mh,Cfe),e(Cfe,xgo),e(mh,$go),e(mh,lq),e(lq,kgo),e(mh,Sgo),e(A,Rgo),e(A,fh),e(fh,wfe),e(wfe,Pgo),e(fh,Bgo),e(fh,iq),e(iq,Igo),e(fh,Ngo),e(A,qgo),e(A,gh),e(gh,Afe),e(Afe,jgo),e(gh,Dgo),e(gh,dq),e(dq,Ggo),e(gh,Ogo),e(A,Vgo),e(A,hh),e(hh,Lfe),e(Lfe,Xgo),e(hh,zgo),e(hh,cq),e(cq,Qgo),e(hh,Wgo),e(A,Ugo),e(A,uh),e(uh,yfe),e(yfe,Hgo),e(uh,Jgo),e(uh,mq),e(mq,Ygo),e(uh,Zgo),e(A,Kgo),e(A,ph),e(ph,xfe),e(xfe,eho),e(ph,oho),e(ph,fq),e(fq,rho),e(ph,tho),e(A,aho),e(A,_h),e(_h,$fe),e($fe,nho),e(_h,sho),e(_h,gq),e(gq,lho),e(_h,iho),e(A,dho),e(A,bh),e(bh,kfe),e(kfe,cho),e(bh,mho),e(bh,hq),e(hq,fho),e(bh,gho),e(A,hho),e(A,vh),e(vh,Sfe),e(Sfe,uho),e(vh,pho),e(vh,uq),e(uq,_ho),e(vh,bho),e(A,vho),e(A,Fh),e(Fh,Rfe),e(Rfe,Fho),e(Fh,Tho),e(Fh,pq),e(pq,Mho),e(Fh,Eho),e(A,Cho),e(A,Th),e(Th,Pfe),e(Pfe,who),e(Th,Aho),e(Th,_q),e(_q,Lho),e(Th,yho),e(A,xho),e(A,Mh),e(Mh,Bfe),e(Bfe,$ho),e(Mh,kho),e(Mh,bq),e(bq,Sho),e(Mh,Rho),e(A,Pho),e(A,Eh),e(Eh,Ife),e(Ife,Bho),e(Eh,Iho),e(Eh,vq),e(vq,Nho),e(Eh,qho),e(A,jho),e(A,Ch),e(Ch,Nfe),e(Nfe,Dho),e(Ch,Gho),e(Ch,Fq),e(Fq,Oho),e(Ch,Vho),e(A,Xho),e(A,wh),e(wh,qfe),e(qfe,zho),e(wh,Qho),e(wh,Tq),e(Tq,Who),e(wh,Uho),e(A,Hho),e(A,Ah),e(Ah,jfe),e(jfe,Jho),e(Ah,Yho),e(Ah,Mq),e(Mq,Zho),e(Ah,Kho),e(A,euo),e(A,Lh),e(Lh,Dfe),e(Dfe,ouo),e(Lh,ruo),e(Lh,Eq),e(Eq,tuo),e(Lh,auo),e(A,nuo),e(A,yh),e(yh,Gfe),e(Gfe,suo),e(yh,luo),e(yh,Cq),e(Cq,iuo),e(yh,duo),e(A,cuo),e(A,xh),e(xh,Ofe),e(Ofe,muo),e(xh,fuo),e(xh,wq),e(wq,guo),e(xh,huo),e(A,uuo),e(A,$h),e($h,Vfe),e(Vfe,puo),e($h,_uo),e($h,Aq),e(Aq,buo),e($h,vuo),e(A,Fuo),e(A,kh),e(kh,Xfe),e(Xfe,Tuo),e(kh,Muo),e(kh,Lq),e(Lq,Euo),e(kh,Cuo),e(A,wuo),e(A,Sh),e(Sh,zfe),e(zfe,Auo),e(Sh,Luo),e(Sh,yq),e(yq,yuo),e(Sh,xuo),e(A,$uo),e(A,Rh),e(Rh,Qfe),e(Qfe,kuo),e(Rh,Suo),e(Rh,xq),e(xq,Ruo),e(Rh,Puo),e(A,Buo),e(A,Ph),e(Ph,Wfe),e(Wfe,Iuo),e(Ph,Nuo),e(Ph,$q),e($q,quo),e(Ph,juo),e(A,Duo),e(A,Bh),e(Bh,Ufe),e(Ufe,Guo),e(Bh,Ouo),e(Bh,kq),e(kq,Vuo),e(Bh,Xuo),e(A,zuo),e(A,Ih),e(Ih,Hfe),e(Hfe,Quo),e(Ih,Wuo),e(Ih,Sq),e(Sq,Uuo),e(Ih,Huo),e(A,Juo),e(A,Nh),e(Nh,Jfe),e(Jfe,Yuo),e(Nh,Zuo),e(Nh,Rq),e(Rq,Kuo),e(Nh,epo),e(A,opo),e(A,qh),e(qh,Yfe),e(Yfe,rpo),e(qh,tpo),e(qh,Pq),e(Pq,apo),e(qh,npo),e(A,spo),e(A,jh),e(jh,Zfe),e(Zfe,lpo),e(jh,ipo),e(jh,Bq),e(Bq,dpo),e(jh,cpo),e(A,mpo),e(A,Dh),e(Dh,Kfe),e(Kfe,fpo),e(Dh,gpo),e(Dh,Iq),e(Iq,hpo),e(Dh,upo),e(A,ppo),e(A,Gh),e(Gh,ege),e(ege,_po),e(Gh,bpo),e(Gh,Nq),e(Nq,vpo),e(Gh,Fpo),e(A,Tpo),e(A,Oh),e(Oh,oge),e(oge,Mpo),e(Oh,Epo),e(Oh,qq),e(qq,Cpo),e(Oh,wpo),e(A,Apo),e(A,Vh),e(Vh,rge),e(rge,Lpo),e(Vh,ypo),e(Vh,jq),e(jq,xpo),e(Vh,$po),e(A,kpo),e(A,Xh),e(Xh,tge),e(tge,Spo),e(Xh,Rpo),e(Xh,Dq),e(Dq,Ppo),e(Xh,Bpo),e(A,Ipo),e(A,zh),e(zh,age),e(age,Npo),e(zh,qpo),e(zh,Gq),e(Gq,jpo),e(zh,Dpo),e(A,Gpo),e(A,Qh),e(Qh,nge),e(nge,Opo),e(Qh,Vpo),e(Qh,Oq),e(Oq,Xpo),e(Qh,zpo),e(A,Qpo),e(A,Wh),e(Wh,sge),e(sge,Wpo),e(Wh,Upo),e(Wh,Vq),e(Vq,Hpo),e(Wh,Jpo),e(A,Ypo),e(A,Uh),e(Uh,lge),e(lge,Zpo),e(Uh,Kpo),e(Uh,Xq),e(Xq,e_o),e(Uh,o_o),e(A,r_o),e(A,Hh),e(Hh,ige),e(ige,t_o),e(Hh,a_o),e(Hh,zq),e(zq,n_o),e(Hh,s_o),e(A,l_o),e(A,Jh),e(Jh,dge),e(dge,i_o),e(Jh,d_o),e(Jh,Qq),e(Qq,c_o),e(Jh,m_o),e(A,f_o),e(A,Yh),e(Yh,cge),e(cge,g_o),e(Yh,h_o),e(Yh,Wq),e(Wq,u_o),e(Yh,p_o),e(A,__o),e(A,Zh),e(Zh,mge),e(mge,b_o),e(Zh,v_o),e(Zh,Uq),e(Uq,F_o),e(Zh,T_o),e(A,M_o),e(A,Kh),e(Kh,fge),e(fge,E_o),e(Kh,C_o),e(Kh,Hq),e(Hq,w_o),e(Kh,A_o),e(A,L_o),e(A,eu),e(eu,gge),e(gge,y_o),e(eu,x_o),e(eu,Jq),e(Jq,$_o),e(eu,k_o),e(A,S_o),e(A,ou),e(ou,hge),e(hge,R_o),e(ou,P_o),e(ou,Yq),e(Yq,B_o),e(ou,I_o),e(A,N_o),e(A,ru),e(ru,uge),e(uge,q_o),e(ru,j_o),e(ru,Zq),e(Zq,D_o),e(ru,G_o),e(A,O_o),e(A,tu),e(tu,pge),e(pge,V_o),e(tu,X_o),e(tu,Kq),e(Kq,z_o),e(tu,Q_o),e(A,W_o),e(A,au),e(au,_ge),e(_ge,U_o),e(au,H_o),e(au,ej),e(ej,J_o),e(au,Y_o),e(A,Z_o),e(A,nu),e(nu,bge),e(bge,K_o),e(nu,e1o),e(nu,oj),e(oj,o1o),e(nu,r1o),e(A,t1o),e(A,su),e(su,vge),e(vge,a1o),e(su,n1o),e(su,rj),e(rj,s1o),e(su,l1o),e(A,i1o),e(A,lu),e(lu,Fge),e(Fge,d1o),e(lu,c1o),e(lu,tj),e(tj,m1o),e(lu,f1o),e(A,g1o),e(A,iu),e(iu,Tge),e(Tge,h1o),e(iu,u1o),e(iu,aj),e(aj,p1o),e(iu,_1o),e(A,b1o),e(A,du),e(du,Mge),e(Mge,v1o),e(du,F1o),e(du,nj),e(nj,T1o),e(du,M1o),e(A,E1o),e(A,cu),e(cu,Ege),e(Ege,C1o),e(cu,w1o),e(cu,sj),e(sj,A1o),e(cu,L1o),e(Ir,y1o),M(mu,Ir,null),e(ko,x1o),e(ko,fu),M(Sx,fu,null),e(fu,$1o),e(fu,Cge),e(Cge,k1o),b(m,moo,_),b(m,vd,_),e(vd,gu),e(gu,wge),M(Rx,wge,null),e(vd,S1o),e(vd,Age),e(Age,R1o),b(m,foo,_),b(m,So,_),M(Px,So,null),e(So,P1o),e(So,Bx),e(Bx,B1o),e(Bx,lj),e(lj,I1o),e(Bx,N1o),e(So,q1o),e(So,Ix),e(Ix,j1o),e(Ix,Lge),e(Lge,D1o),e(Ix,G1o),e(So,O1o),e(So,Nr),M(Nx,Nr,null),e(Nr,V1o),e(Nr,yge),e(yge,X1o),e(Nr,z1o),e(Nr,Za),e(Za,Q1o),e(Za,xge),e(xge,W1o),e(Za,U1o),e(Za,$ge),e($ge,H1o),e(Za,J1o),e(Za,kge),e(kge,Y1o),e(Za,Z1o),e(Nr,K1o),e(Nr,k),e(k,cs),e(cs,Sge),e(Sge,ebo),e(cs,obo),e(cs,ij),e(ij,rbo),e(cs,tbo),e(cs,dj),e(dj,abo),e(cs,nbo),e(k,sbo),e(k,ms),e(ms,Rge),e(Rge,lbo),e(ms,ibo),e(ms,cj),e(cj,dbo),e(ms,cbo),e(ms,mj),e(mj,mbo),e(ms,fbo),e(k,gbo),e(k,fs),e(fs,Pge),e(Pge,hbo),e(fs,ubo),e(fs,fj),e(fj,pbo),e(fs,_bo),e(fs,gj),e(gj,bbo),e(fs,vbo),e(k,Fbo),e(k,hu),e(hu,Bge),e(Bge,Tbo),e(hu,Mbo),e(hu,hj),e(hj,Ebo),e(hu,Cbo),e(k,wbo),e(k,gs),e(gs,Ige),e(Ige,Abo),e(gs,Lbo),e(gs,uj),e(uj,ybo),e(gs,xbo),e(gs,pj),e(pj,$bo),e(gs,kbo),e(k,Sbo),e(k,uu),e(uu,Nge),e(Nge,Rbo),e(uu,Pbo),e(uu,_j),e(_j,Bbo),e(uu,Ibo),e(k,Nbo),e(k,pu),e(pu,qge),e(qge,qbo),e(pu,jbo),e(pu,bj),e(bj,Dbo),e(pu,Gbo),e(k,Obo),e(k,_u),e(_u,jge),e(jge,Vbo),e(_u,Xbo),e(_u,vj),e(vj,zbo),e(_u,Qbo),e(k,Wbo),e(k,hs),e(hs,Dge),e(Dge,Ubo),e(hs,Hbo),e(hs,Fj),e(Fj,Jbo),e(hs,Ybo),e(hs,Tj),e(Tj,Zbo),e(hs,Kbo),e(k,e2o),e(k,us),e(us,Gge),e(Gge,o2o),e(us,r2o),e(us,Mj),e(Mj,t2o),e(us,a2o),e(us,Ej),e(Ej,n2o),e(us,s2o),e(k,l2o),e(k,ps),e(ps,Oge),e(Oge,i2o),e(ps,d2o),e(ps,Cj),e(Cj,c2o),e(ps,m2o),e(ps,wj),e(wj,f2o),e(ps,g2o),e(k,h2o),e(k,bu),e(bu,Vge),e(Vge,u2o),e(bu,p2o),e(bu,Aj),e(Aj,_2o),e(bu,b2o),e(k,v2o),e(k,vu),e(vu,Xge),e(Xge,F2o),e(vu,T2o),e(vu,Lj),e(Lj,M2o),e(vu,E2o),e(k,C2o),e(k,Fu),e(Fu,zge),e(zge,w2o),e(Fu,A2o),e(Fu,yj),e(yj,L2o),e(Fu,y2o),e(k,x2o),e(k,_s),e(_s,Qge),e(Qge,$2o),e(_s,k2o),e(_s,xj),e(xj,S2o),e(_s,R2o),e(_s,$j),e($j,P2o),e(_s,B2o),e(k,I2o),e(k,Tu),e(Tu,Wge),e(Wge,N2o),e(Tu,q2o),e(Tu,kj),e(kj,j2o),e(Tu,D2o),e(k,G2o),e(k,bs),e(bs,Uge),e(Uge,O2o),e(bs,V2o),e(bs,Sj),e(Sj,X2o),e(bs,z2o),e(bs,Rj),e(Rj,Q2o),e(bs,W2o),e(k,U2o),e(k,vs),e(vs,Hge),e(Hge,H2o),e(vs,J2o),e(vs,Pj),e(Pj,Y2o),e(vs,Z2o),e(vs,Bj),e(Bj,K2o),e(vs,evo),e(k,ovo),e(k,Fs),e(Fs,Jge),e(Jge,rvo),e(Fs,tvo),e(Fs,Ij),e(Ij,avo),e(Fs,nvo),e(Fs,Nj),e(Nj,svo),e(Fs,lvo),e(k,ivo),e(k,Ts),e(Ts,Yge),e(Yge,dvo),e(Ts,cvo),e(Ts,qj),e(qj,mvo),e(Ts,fvo),e(Ts,jj),e(jj,gvo),e(Ts,hvo),e(k,uvo),e(k,Mu),e(Mu,Zge),e(Zge,pvo),e(Mu,_vo),e(Mu,Dj),e(Dj,bvo),e(Mu,vvo),e(k,Fvo),e(k,Ms),e(Ms,Kge),e(Kge,Tvo),e(Ms,Mvo),e(Ms,Gj),e(Gj,Evo),e(Ms,Cvo),e(Ms,Oj),e(Oj,wvo),e(Ms,Avo),e(k,Lvo),e(k,Es),e(Es,ehe),e(ehe,yvo),e(Es,xvo),e(Es,Vj),e(Vj,$vo),e(Es,kvo),e(Es,Xj),e(Xj,Svo),e(Es,Rvo),e(k,Pvo),e(k,Cs),e(Cs,ohe),e(ohe,Bvo),e(Cs,Ivo),e(Cs,zj),e(zj,Nvo),e(Cs,qvo),e(Cs,Qj),e(Qj,jvo),e(Cs,Dvo),e(k,Gvo),e(k,ws),e(ws,rhe),e(rhe,Ovo),e(ws,Vvo),e(ws,Wj),e(Wj,Xvo),e(ws,zvo),e(ws,Uj),e(Uj,Qvo),e(ws,Wvo),e(k,Uvo),e(k,As),e(As,the),e(the,Hvo),e(As,Jvo),e(As,Hj),e(Hj,Yvo),e(As,Zvo),e(As,Jj),e(Jj,Kvo),e(As,eFo),e(k,oFo),e(k,Ls),e(Ls,ahe),e(ahe,rFo),e(Ls,tFo),e(Ls,Yj),e(Yj,aFo),e(Ls,nFo),e(Ls,Zj),e(Zj,sFo),e(Ls,lFo),e(k,iFo),e(k,ys),e(ys,nhe),e(nhe,dFo),e(ys,cFo),e(ys,Kj),e(Kj,mFo),e(ys,fFo),e(ys,eD),e(eD,gFo),e(ys,hFo),e(k,uFo),e(k,Eu),e(Eu,she),e(she,pFo),e(Eu,_Fo),e(Eu,oD),e(oD,bFo),e(Eu,vFo),e(k,FFo),e(k,xs),e(xs,lhe),e(lhe,TFo),e(xs,MFo),e(xs,rD),e(rD,EFo),e(xs,CFo),e(xs,tD),e(tD,wFo),e(xs,AFo),e(k,LFo),e(k,Cu),e(Cu,ihe),e(ihe,yFo),e(Cu,xFo),e(Cu,aD),e(aD,$Fo),e(Cu,kFo),e(k,SFo),e(k,$s),e($s,dhe),e(dhe,RFo),e($s,PFo),e($s,nD),e(nD,BFo),e($s,IFo),e($s,sD),e(sD,NFo),e($s,qFo),e(k,jFo),e(k,ks),e(ks,che),e(che,DFo),e(ks,GFo),e(ks,lD),e(lD,OFo),e(ks,VFo),e(ks,iD),e(iD,XFo),e(ks,zFo),e(k,QFo),e(k,Ss),e(Ss,mhe),e(mhe,WFo),e(Ss,UFo),e(Ss,dD),e(dD,HFo),e(Ss,JFo),e(Ss,cD),e(cD,YFo),e(Ss,ZFo),e(k,KFo),e(k,wu),e(wu,fhe),e(fhe,eTo),e(wu,oTo),e(wu,mD),e(mD,rTo),e(wu,tTo),e(k,aTo),e(k,Au),e(Au,ghe),e(ghe,nTo),e(Au,sTo),e(Au,fD),e(fD,lTo),e(Au,iTo),e(k,dTo),e(k,Rs),e(Rs,hhe),e(hhe,cTo),e(Rs,mTo),e(Rs,gD),e(gD,fTo),e(Rs,gTo),e(Rs,hD),e(hD,hTo),e(Rs,uTo),e(k,pTo),e(k,Ps),e(Ps,uhe),e(uhe,_To),e(Ps,bTo),e(Ps,uD),e(uD,vTo),e(Ps,FTo),e(Ps,pD),e(pD,TTo),e(Ps,MTo),e(k,ETo),e(k,Bs),e(Bs,phe),e(phe,CTo),e(Bs,wTo),e(Bs,_D),e(_D,ATo),e(Bs,LTo),e(Bs,bD),e(bD,yTo),e(Bs,xTo),e(k,$To),e(k,Lu),e(Lu,_he),e(_he,kTo),e(Lu,STo),e(Lu,vD),e(vD,RTo),e(Lu,PTo),e(k,BTo),e(k,Is),e(Is,bhe),e(bhe,ITo),e(Is,NTo),e(Is,FD),e(FD,qTo),e(Is,jTo),e(Is,TD),e(TD,DTo),e(Is,GTo),e(k,OTo),e(k,Ns),e(Ns,vhe),e(vhe,VTo),e(Ns,XTo),e(Ns,MD),e(MD,zTo),e(Ns,QTo),e(Ns,ED),e(ED,WTo),e(Ns,UTo),e(k,HTo),e(k,qs),e(qs,Fhe),e(Fhe,JTo),e(qs,YTo),e(qs,CD),e(CD,ZTo),e(qs,KTo),e(qs,wD),e(wD,eMo),e(qs,oMo),e(k,rMo),e(k,js),e(js,The),e(The,tMo),e(js,aMo),e(js,AD),e(AD,nMo),e(js,sMo),e(js,LD),e(LD,lMo),e(js,iMo),e(k,dMo),e(k,Ds),e(Ds,Mhe),e(Mhe,cMo),e(Ds,mMo),e(Ds,yD),e(yD,fMo),e(Ds,gMo),e(Ds,xD),e(xD,hMo),e(Ds,uMo),e(k,pMo),e(k,Gs),e(Gs,Ehe),e(Ehe,_Mo),e(Gs,bMo),e(Gs,$D),e($D,vMo),e(Gs,FMo),e(Gs,kD),e(kD,TMo),e(Gs,MMo),e(k,EMo),e(k,Os),e(Os,Che),e(Che,CMo),e(Os,wMo),e(Os,SD),e(SD,AMo),e(Os,LMo),e(Os,RD),e(RD,yMo),e(Os,xMo),e(k,$Mo),e(k,Vs),e(Vs,whe),e(whe,kMo),e(Vs,SMo),e(Vs,PD),e(PD,RMo),e(Vs,PMo),e(Vs,BD),e(BD,BMo),e(Vs,IMo),e(k,NMo),e(k,yu),e(yu,Ahe),e(Ahe,qMo),e(yu,jMo),e(yu,ID),e(ID,DMo),e(yu,GMo),e(k,OMo),e(k,Xs),e(Xs,Lhe),e(Lhe,VMo),e(Xs,XMo),e(Xs,ND),e(ND,zMo),e(Xs,QMo),e(Xs,qD),e(qD,WMo),e(Xs,UMo),e(k,HMo),e(k,xu),e(xu,yhe),e(yhe,JMo),e(xu,YMo),e(xu,jD),e(jD,ZMo),e(xu,KMo),e(k,eEo),e(k,$u),e($u,xhe),e(xhe,oEo),e($u,rEo),e($u,DD),e(DD,tEo),e($u,aEo),e(k,nEo),e(k,zs),e(zs,$he),e($he,sEo),e(zs,lEo),e(zs,GD),e(GD,iEo),e(zs,dEo),e(zs,OD),e(OD,cEo),e(zs,mEo),e(k,fEo),e(k,Qs),e(Qs,khe),e(khe,gEo),e(Qs,hEo),e(Qs,VD),e(VD,uEo),e(Qs,pEo),e(Qs,XD),e(XD,_Eo),e(Qs,bEo),e(k,vEo),e(k,Ws),e(Ws,She),e(She,FEo),e(Ws,TEo),e(Ws,zD),e(zD,MEo),e(Ws,EEo),e(Ws,QD),e(QD,CEo),e(Ws,wEo),e(k,AEo),e(k,ku),e(ku,Rhe),e(Rhe,LEo),e(ku,yEo),e(ku,WD),e(WD,xEo),e(ku,$Eo),e(k,kEo),e(k,Us),e(Us,Phe),e(Phe,SEo),e(Us,REo),e(Us,UD),e(UD,PEo),e(Us,BEo),e(Us,HD),e(HD,IEo),e(Us,NEo),e(k,qEo),e(k,Hs),e(Hs,Bhe),e(Bhe,jEo),e(Hs,DEo),e(Hs,JD),e(JD,GEo),e(Hs,OEo),e(Hs,YD),e(YD,VEo),e(Hs,XEo),e(k,zEo),e(k,Js),e(Js,Ihe),e(Ihe,QEo),e(Js,WEo),e(Js,ZD),e(ZD,UEo),e(Js,HEo),e(Js,KD),e(KD,JEo),e(Js,YEo),e(k,ZEo),e(k,Ys),e(Ys,Nhe),e(Nhe,KEo),e(Ys,e4o),e(Ys,eG),e(eG,o4o),e(Ys,r4o),e(Ys,oG),e(oG,t4o),e(Ys,a4o),e(k,n4o),e(k,Zs),e(Zs,qhe),e(qhe,s4o),e(Zs,l4o),e(Zs,rG),e(rG,i4o),e(Zs,d4o),e(Zs,tG),e(tG,c4o),e(Zs,m4o),e(k,f4o),e(k,Ks),e(Ks,jhe),e(jhe,g4o),e(Ks,h4o),e(Ks,aG),e(aG,u4o),e(Ks,p4o),e(Ks,nG),e(nG,_4o),e(Ks,b4o),e(k,v4o),e(k,el),e(el,Dhe),e(Dhe,F4o),e(el,T4o),e(el,sG),e(sG,M4o),e(el,E4o),e(el,lG),e(lG,C4o),e(el,w4o),e(k,A4o),e(k,ol),e(ol,Ghe),e(Ghe,L4o),e(ol,y4o),e(ol,iG),e(iG,x4o),e(ol,$4o),e(ol,dG),e(dG,k4o),e(ol,S4o),e(k,R4o),e(k,Su),e(Su,Ohe),e(Ohe,P4o),e(Su,B4o),e(Su,cG),e(cG,I4o),e(Su,N4o),e(k,q4o),e(k,rl),e(rl,Vhe),e(Vhe,j4o),e(rl,D4o),e(rl,mG),e(mG,G4o),e(rl,O4o),e(rl,fG),e(fG,V4o),e(rl,X4o),e(k,z4o),e(k,tl),e(tl,Xhe),e(Xhe,Q4o),e(tl,W4o),e(tl,gG),e(gG,U4o),e(tl,H4o),e(tl,hG),e(hG,J4o),e(tl,Y4o),e(k,Z4o),e(k,Ru),e(Ru,zhe),e(zhe,K4o),e(Ru,eCo),e(Ru,uG),e(uG,oCo),e(Ru,rCo),e(k,tCo),e(k,Pu),e(Pu,Qhe),e(Qhe,aCo),e(Pu,nCo),e(Pu,pG),e(pG,sCo),e(Pu,lCo),e(k,iCo),e(k,Bu),e(Bu,Whe),e(Whe,dCo),e(Bu,cCo),e(Bu,_G),e(_G,mCo),e(Bu,fCo),e(k,gCo),e(k,Iu),e(Iu,Uhe),e(Uhe,hCo),e(Iu,uCo),e(Iu,bG),e(bG,pCo),e(Iu,_Co),e(k,bCo),e(k,al),e(al,Hhe),e(Hhe,vCo),e(al,FCo),e(al,vG),e(vG,TCo),e(al,MCo),e(al,FG),e(FG,ECo),e(al,CCo),e(k,wCo),e(k,Nu),e(Nu,Jhe),e(Jhe,ACo),e(Nu,LCo),e(Nu,TG),e(TG,yCo),e(Nu,xCo),e(k,$Co),e(k,nl),e(nl,Yhe),e(Yhe,kCo),e(nl,SCo),e(nl,MG),e(MG,RCo),e(nl,PCo),e(nl,EG),e(EG,BCo),e(nl,ICo),e(k,NCo),e(k,sl),e(sl,Zhe),e(Zhe,qCo),e(sl,jCo),e(sl,CG),e(CG,DCo),e(sl,GCo),e(sl,wG),e(wG,OCo),e(sl,VCo),e(k,XCo),e(k,ll),e(ll,Khe),e(Khe,zCo),e(ll,QCo),e(ll,AG),e(AG,WCo),e(ll,UCo),e(ll,LG),e(LG,HCo),e(ll,JCo),e(k,YCo),e(k,il),e(il,eue),e(eue,ZCo),e(il,KCo),e(il,yG),e(yG,e3o),e(il,o3o),e(il,xG),e(xG,r3o),e(il,t3o),e(k,a3o),e(k,dl),e(dl,oue),e(oue,n3o),e(dl,s3o),e(dl,$G),e($G,l3o),e(dl,i3o),e(dl,kG),e(kG,d3o),e(dl,c3o),e(k,m3o),e(k,cl),e(cl,rue),e(rue,f3o),e(cl,g3o),e(cl,SG),e(SG,h3o),e(cl,u3o),e(cl,RG),e(RG,p3o),e(cl,_3o),e(k,b3o),e(k,qu),e(qu,tue),e(tue,v3o),e(qu,F3o),e(qu,PG),e(PG,T3o),e(qu,M3o),e(k,E3o),e(k,ju),e(ju,aue),e(aue,C3o),e(ju,w3o),e(ju,BG),e(BG,A3o),e(ju,L3o),e(k,y3o),e(k,ml),e(ml,nue),e(nue,x3o),e(ml,$3o),e(ml,IG),e(IG,k3o),e(ml,S3o),e(ml,NG),e(NG,R3o),e(ml,P3o),e(k,B3o),e(k,fl),e(fl,sue),e(sue,I3o),e(fl,N3o),e(fl,qG),e(qG,q3o),e(fl,j3o),e(fl,jG),e(jG,D3o),e(fl,G3o),e(k,O3o),e(k,gl),e(gl,lue),e(lue,V3o),e(gl,X3o),e(gl,DG),e(DG,z3o),e(gl,Q3o),e(gl,GG),e(GG,W3o),e(gl,U3o),e(k,H3o),e(k,Du),e(Du,iue),e(iue,J3o),e(Du,Y3o),e(Du,OG),e(OG,Z3o),e(Du,K3o),e(k,e5o),e(k,Gu),e(Gu,due),e(due,o5o),e(Gu,r5o),e(Gu,VG),e(VG,t5o),e(Gu,a5o),e(k,n5o),e(k,Ou),e(Ou,cue),e(cue,s5o),e(Ou,l5o),e(Ou,XG),e(XG,i5o),e(Ou,d5o),e(k,c5o),e(k,hl),e(hl,mue),e(mue,m5o),e(hl,f5o),e(hl,zG),e(zG,g5o),e(hl,h5o),e(hl,QG),e(QG,u5o),e(hl,p5o),e(k,_5o),e(k,ul),e(ul,fue),e(fue,b5o),e(ul,v5o),e(ul,WG),e(WG,F5o),e(ul,T5o),e(ul,UG),e(UG,M5o),e(ul,E5o),e(k,C5o),e(k,Vu),e(Vu,gue),e(gue,w5o),e(Vu,A5o),e(Vu,HG),e(HG,L5o),e(Vu,y5o),e(k,x5o),e(k,Xu),e(Xu,hue),e(hue,$5o),e(Xu,k5o),e(Xu,JG),e(JG,S5o),e(Xu,R5o),e(k,P5o),e(k,zu),e(zu,uue),e(uue,B5o),e(zu,I5o),e(zu,YG),e(YG,N5o),e(zu,q5o),e(k,j5o),e(k,Qu),e(Qu,pue),e(pue,D5o),e(Qu,G5o),e(Qu,ZG),e(ZG,O5o),e(Qu,V5o),e(k,X5o),e(k,pl),e(pl,_ue),e(_ue,z5o),e(pl,Q5o),e(pl,KG),e(KG,W5o),e(pl,U5o),e(pl,eO),e(eO,H5o),e(pl,J5o),e(k,Y5o),e(k,_l),e(_l,bue),e(bue,Z5o),e(_l,K5o),e(_l,oO),e(oO,e0o),e(_l,o0o),e(_l,rO),e(rO,r0o),e(_l,t0o),e(k,a0o),e(k,Wu),e(Wu,vue),e(vue,n0o),e(Wu,s0o),e(Wu,tO),e(tO,l0o),e(Wu,i0o),e(k,d0o),e(k,Uu),e(Uu,Fue),e(Fue,c0o),e(Uu,m0o),e(Uu,aO),e(aO,f0o),e(Uu,g0o),e(k,h0o),e(k,bl),e(bl,Tue),e(Tue,u0o),e(bl,p0o),e(bl,nO),e(nO,_0o),e(bl,b0o),e(bl,sO),e(sO,v0o),e(bl,F0o),e(k,T0o),e(k,vl),e(vl,Mue),e(Mue,M0o),e(vl,E0o),e(vl,lO),e(lO,C0o),e(vl,w0o),e(vl,iO),e(iO,A0o),e(vl,L0o),e(k,y0o),e(k,Fl),e(Fl,Eue),e(Eue,x0o),e(Fl,$0o),e(Fl,dO),e(dO,k0o),e(Fl,S0o),e(Fl,cO),e(cO,R0o),e(Fl,P0o),e(k,B0o),e(k,Tl),e(Tl,Cue),e(Cue,I0o),e(Tl,N0o),e(Tl,mO),e(mO,q0o),e(Tl,j0o),e(Tl,fO),e(fO,D0o),e(Tl,G0o),e(Nr,O0o),M(Hu,Nr,null),e(So,V0o),e(So,Ju),M(qx,Ju,null),e(Ju,X0o),e(Ju,wue),e(wue,z0o),b(m,goo,_),b(m,Fd,_),e(Fd,Yu),e(Yu,Aue),M(jx,Aue,null),e(Fd,Q0o),e(Fd,Lue),e(Lue,W0o),b(m,hoo,_),b(m,Ro,_),M(Dx,Ro,null),e(Ro,U0o),e(Ro,Gx),e(Gx,H0o),e(Gx,gO),e(gO,J0o),e(Gx,Y0o),e(Ro,Z0o),e(Ro,Ox),e(Ox,K0o),e(Ox,yue),e(yue,ewo),e(Ox,owo),e(Ro,rwo),e(Ro,Ye),M(Vx,Ye,null),e(Ye,two),e(Ye,xue),e(xue,awo),e(Ye,nwo),e(Ye,Ka),e(Ka,swo),e(Ka,$ue),e($ue,lwo),e(Ka,iwo),e(Ka,kue),e(kue,dwo),e(Ka,cwo),e(Ka,Sue),e(Sue,mwo),e(Ka,fwo),e(Ye,gwo),e(Ye,z),e(z,Zu),e(Zu,Rue),e(Rue,hwo),e(Zu,uwo),e(Zu,hO),e(hO,pwo),e(Zu,_wo),e(z,bwo),e(z,Ku),e(Ku,Pue),e(Pue,vwo),e(Ku,Fwo),e(Ku,uO),e(uO,Two),e(Ku,Mwo),e(z,Ewo),e(z,ep),e(ep,Bue),e(Bue,Cwo),e(ep,wwo),e(ep,pO),e(pO,Awo),e(ep,Lwo),e(z,ywo),e(z,op),e(op,Iue),e(Iue,xwo),e(op,$wo),e(op,_O),e(_O,kwo),e(op,Swo),e(z,Rwo),e(z,rp),e(rp,Nue),e(Nue,Pwo),e(rp,Bwo),e(rp,bO),e(bO,Iwo),e(rp,Nwo),e(z,qwo),e(z,tp),e(tp,que),e(que,jwo),e(tp,Dwo),e(tp,vO),e(vO,Gwo),e(tp,Owo),e(z,Vwo),e(z,ap),e(ap,jue),e(jue,Xwo),e(ap,zwo),e(ap,FO),e(FO,Qwo),e(ap,Wwo),e(z,Uwo),e(z,np),e(np,Due),e(Due,Hwo),e(np,Jwo),e(np,TO),e(TO,Ywo),e(np,Zwo),e(z,Kwo),e(z,sp),e(sp,Gue),e(Gue,eAo),e(sp,oAo),e(sp,MO),e(MO,rAo),e(sp,tAo),e(z,aAo),e(z,lp),e(lp,Oue),e(Oue,nAo),e(lp,sAo),e(lp,EO),e(EO,lAo),e(lp,iAo),e(z,dAo),e(z,ip),e(ip,Vue),e(Vue,cAo),e(ip,mAo),e(ip,CO),e(CO,fAo),e(ip,gAo),e(z,hAo),e(z,dp),e(dp,Xue),e(Xue,uAo),e(dp,pAo),e(dp,wO),e(wO,_Ao),e(dp,bAo),e(z,vAo),e(z,cp),e(cp,zue),e(zue,FAo),e(cp,TAo),e(cp,AO),e(AO,MAo),e(cp,EAo),e(z,CAo),e(z,mp),e(mp,Que),e(Que,wAo),e(mp,AAo),e(mp,LO),e(LO,LAo),e(mp,yAo),e(z,xAo),e(z,fp),e(fp,Wue),e(Wue,$Ao),e(fp,kAo),e(fp,yO),e(yO,SAo),e(fp,RAo),e(z,PAo),e(z,gp),e(gp,Uue),e(Uue,BAo),e(gp,IAo),e(gp,xO),e(xO,NAo),e(gp,qAo),e(z,jAo),e(z,hp),e(hp,Hue),e(Hue,DAo),e(hp,GAo),e(hp,$O),e($O,OAo),e(hp,VAo),e(z,XAo),e(z,up),e(up,Jue),e(Jue,zAo),e(up,QAo),e(up,kO),e(kO,WAo),e(up,UAo),e(z,HAo),e(z,pp),e(pp,Yue),e(Yue,JAo),e(pp,YAo),e(pp,SO),e(SO,ZAo),e(pp,KAo),e(z,e6o),e(z,_p),e(_p,Zue),e(Zue,o6o),e(_p,r6o),e(_p,RO),e(RO,t6o),e(_p,a6o),e(z,n6o),e(z,bp),e(bp,Kue),e(Kue,s6o),e(bp,l6o),e(bp,PO),e(PO,i6o),e(bp,d6o),e(z,c6o),e(z,vp),e(vp,epe),e(epe,m6o),e(vp,f6o),e(vp,BO),e(BO,g6o),e(vp,h6o),e(z,u6o),e(z,Fp),e(Fp,ope),e(ope,p6o),e(Fp,_6o),e(Fp,IO),e(IO,b6o),e(Fp,v6o),e(z,F6o),e(z,Tp),e(Tp,rpe),e(rpe,T6o),e(Tp,M6o),e(Tp,NO),e(NO,E6o),e(Tp,C6o),e(z,w6o),e(z,Mp),e(Mp,tpe),e(tpe,A6o),e(Mp,L6o),e(Mp,qO),e(qO,y6o),e(Mp,x6o),e(z,$6o),e(z,Ep),e(Ep,ape),e(ape,k6o),e(Ep,S6o),e(Ep,jO),e(jO,R6o),e(Ep,P6o),e(z,B6o),e(z,Cp),e(Cp,npe),e(npe,I6o),e(Cp,N6o),e(Cp,DO),e(DO,q6o),e(Cp,j6o),e(z,D6o),e(z,wp),e(wp,spe),e(spe,G6o),e(wp,O6o),e(wp,GO),e(GO,V6o),e(wp,X6o),e(z,z6o),e(z,Ap),e(Ap,lpe),e(lpe,Q6o),e(Ap,W6o),e(Ap,OO),e(OO,U6o),e(Ap,H6o),e(z,J6o),e(z,Lp),e(Lp,ipe),e(ipe,Y6o),e(Lp,Z6o),e(Lp,VO),e(VO,K6o),e(Lp,e7o),e(z,o7o),e(z,yp),e(yp,dpe),e(dpe,r7o),e(yp,t7o),e(yp,XO),e(XO,a7o),e(yp,n7o),e(z,s7o),e(z,xp),e(xp,cpe),e(cpe,l7o),e(xp,i7o),e(xp,zO),e(zO,d7o),e(xp,c7o),e(z,m7o),e(z,$p),e($p,mpe),e(mpe,f7o),e($p,g7o),e($p,QO),e(QO,h7o),e($p,u7o),e(z,p7o),e(z,kp),e(kp,fpe),e(fpe,_7o),e(kp,b7o),e(kp,WO),e(WO,v7o),e(kp,F7o),e(z,T7o),e(z,Sp),e(Sp,gpe),e(gpe,M7o),e(Sp,E7o),e(Sp,UO),e(UO,C7o),e(Sp,w7o),e(z,A7o),e(z,Rp),e(Rp,hpe),e(hpe,L7o),e(Rp,y7o),e(Rp,HO),e(HO,x7o),e(Rp,$7o),e(z,k7o),e(z,Pp),e(Pp,upe),e(upe,S7o),e(Pp,R7o),e(Pp,JO),e(JO,P7o),e(Pp,B7o),e(z,I7o),e(z,Bp),e(Bp,ppe),e(ppe,N7o),e(Bp,q7o),e(Bp,YO),e(YO,j7o),e(Bp,D7o),e(z,G7o),e(z,Ip),e(Ip,_pe),e(_pe,O7o),e(Ip,V7o),e(Ip,ZO),e(ZO,X7o),e(Ip,z7o),e(z,Q7o),e(z,Np),e(Np,bpe),e(bpe,W7o),e(Np,U7o),e(Np,KO),e(KO,H7o),e(Np,J7o),e(z,Y7o),e(z,qp),e(qp,vpe),e(vpe,Z7o),e(qp,K7o),e(qp,eV),e(eV,eLo),e(qp,oLo),e(z,rLo),e(z,jp),e(jp,Fpe),e(Fpe,tLo),e(jp,aLo),e(jp,oV),e(oV,nLo),e(jp,sLo),e(z,lLo),e(z,Dp),e(Dp,Tpe),e(Tpe,iLo),e(Dp,dLo),e(Dp,rV),e(rV,cLo),e(Dp,mLo),e(Ye,fLo),M(Gp,Ye,null),e(Ye,gLo),M(Op,Ye,null),e(Ro,hLo),e(Ro,Vp),M(Xx,Vp,null),e(Vp,uLo),e(Vp,Mpe),e(Mpe,pLo),b(m,uoo,_),b(m,Td,_),e(Td,Xp),e(Xp,Epe),M(zx,Epe,null),e(Td,_Lo),e(Td,Cpe),e(Cpe,bLo),b(m,poo,_),b(m,Po,_),M(Qx,Po,null),e(Po,vLo),e(Po,Wx),e(Wx,FLo),e(Wx,tV),e(tV,TLo),e(Wx,MLo),e(Po,ELo),e(Po,Ux),e(Ux,CLo),e(Ux,wpe),e(wpe,wLo),e(Ux,ALo),e(Po,LLo),e(Po,Ze),M(Hx,Ze,null),e(Ze,yLo),e(Ze,Ape),e(Ape,xLo),e(Ze,$Lo),e(Ze,Md),e(Md,kLo),e(Md,Lpe),e(Lpe,SLo),e(Md,RLo),e(Md,ype),e(ype,PLo),e(Md,BLo),e(Ze,ILo),e(Ze,se),e(se,zp),e(zp,xpe),e(xpe,NLo),e(zp,qLo),e(zp,aV),e(aV,jLo),e(zp,DLo),e(se,GLo),e(se,Qp),e(Qp,$pe),e($pe,OLo),e(Qp,VLo),e(Qp,nV),e(nV,XLo),e(Qp,zLo),e(se,QLo),e(se,Wp),e(Wp,kpe),e(kpe,WLo),e(Wp,ULo),e(Wp,sV),e(sV,HLo),e(Wp,JLo),e(se,YLo),e(se,Up),e(Up,Spe),e(Spe,ZLo),e(Up,KLo),e(Up,lV),e(lV,eyo),e(Up,oyo),e(se,ryo),e(se,Hp),e(Hp,Rpe),e(Rpe,tyo),e(Hp,ayo),e(Hp,iV),e(iV,nyo),e(Hp,syo),e(se,lyo),e(se,Jp),e(Jp,Ppe),e(Ppe,iyo),e(Jp,dyo),e(Jp,dV),e(dV,cyo),e(Jp,myo),e(se,fyo),e(se,Yp),e(Yp,Bpe),e(Bpe,gyo),e(Yp,hyo),e(Yp,cV),e(cV,uyo),e(Yp,pyo),e(se,_yo),e(se,Zp),e(Zp,Ipe),e(Ipe,byo),e(Zp,vyo),e(Zp,mV),e(mV,Fyo),e(Zp,Tyo),e(se,Myo),e(se,Kp),e(Kp,Npe),e(Npe,Eyo),e(Kp,Cyo),e(Kp,fV),e(fV,wyo),e(Kp,Ayo),e(se,Lyo),e(se,e_),e(e_,qpe),e(qpe,yyo),e(e_,xyo),e(e_,gV),e(gV,$yo),e(e_,kyo),e(se,Syo),e(se,o_),e(o_,jpe),e(jpe,Ryo),e(o_,Pyo),e(o_,hV),e(hV,Byo),e(o_,Iyo),e(se,Nyo),e(se,r_),e(r_,Dpe),e(Dpe,qyo),e(r_,jyo),e(r_,uV),e(uV,Dyo),e(r_,Gyo),e(se,Oyo),e(se,t_),e(t_,Gpe),e(Gpe,Vyo),e(t_,Xyo),e(t_,pV),e(pV,zyo),e(t_,Qyo),e(se,Wyo),e(se,a_),e(a_,Ope),e(Ope,Uyo),e(a_,Hyo),e(a_,_V),e(_V,Jyo),e(a_,Yyo),e(se,Zyo),e(se,n_),e(n_,Vpe),e(Vpe,Kyo),e(n_,e8o),e(n_,bV),e(bV,o8o),e(n_,r8o),e(se,t8o),e(se,s_),e(s_,Xpe),e(Xpe,a8o),e(s_,n8o),e(s_,vV),e(vV,s8o),e(s_,l8o),e(se,i8o),e(se,l_),e(l_,zpe),e(zpe,d8o),e(l_,c8o),e(l_,FV),e(FV,m8o),e(l_,f8o),e(se,g8o),e(se,i_),e(i_,Qpe),e(Qpe,h8o),e(i_,u8o),e(i_,TV),e(TV,p8o),e(i_,_8o),e(se,b8o),e(se,d_),e(d_,Wpe),e(Wpe,v8o),e(d_,F8o),e(d_,MV),e(MV,T8o),e(d_,M8o),e(se,E8o),e(se,c_),e(c_,Upe),e(Upe,C8o),e(c_,w8o),e(c_,EV),e(EV,A8o),e(c_,L8o),e(se,y8o),e(se,m_),e(m_,Hpe),e(Hpe,x8o),e(m_,$8o),e(m_,CV),e(CV,k8o),e(m_,S8o),e(se,R8o),e(se,f_),e(f_,Jpe),e(Jpe,P8o),e(f_,B8o),e(f_,wV),e(wV,I8o),e(f_,N8o),e(se,q8o),e(se,g_),e(g_,Ype),e(Ype,j8o),e(g_,D8o),e(g_,AV),e(AV,G8o),e(g_,O8o),e(Ze,V8o),M(h_,Ze,null),e(Ze,X8o),M(u_,Ze,null),e(Po,z8o),e(Po,p_),M(Jx,p_,null),e(p_,Q8o),e(p_,Zpe),e(Zpe,W8o),b(m,_oo,_),b(m,Ed,_),e(Ed,__),e(__,Kpe),M(Yx,Kpe,null),e(Ed,U8o),e(Ed,e_e),e(e_e,H8o),b(m,boo,_),b(m,Bo,_),M(Zx,Bo,null),e(Bo,J8o),e(Bo,Cd),e(Cd,Y8o),e(Cd,LV),e(LV,Z8o),e(Cd,K8o),e(Cd,yV),e(yV,e9o),e(Cd,o9o),e(Bo,r9o),e(Bo,Kx),e(Kx,t9o),e(Kx,o_e),e(o_e,a9o),e(Kx,n9o),e(Bo,s9o),e(Bo,vt),M(e$,vt,null),e(vt,l9o),e(vt,r_e),e(r_e,i9o),e(vt,d9o),e(vt,wd),e(wd,c9o),e(wd,t_e),e(t_e,m9o),e(wd,f9o),e(wd,xV),e(xV,g9o),e(wd,h9o),e(vt,u9o),M(b_,vt,null),e(Bo,p9o),e(Bo,Ke),M(o$,Ke,null),e(Ke,_9o),e(Ke,a_e),e(a_e,b9o),e(Ke,v9o),e(Ke,en),e(en,F9o),e(en,n_e),e(n_e,T9o),e(en,M9o),e(en,s_e),e(s_e,E9o),e(en,C9o),e(en,l_e),e(l_e,w9o),e(en,A9o),e(Ke,L9o),e(Ke,y),e(y,v_),e(v_,i_e),e(i_e,y9o),e(v_,x9o),e(v_,$V),e($V,$9o),e(v_,k9o),e(y,S9o),e(y,F_),e(F_,d_e),e(d_e,R9o),e(F_,P9o),e(F_,kV),e(kV,B9o),e(F_,I9o),e(y,N9o),e(y,T_),e(T_,c_e),e(c_e,q9o),e(T_,j9o),e(T_,SV),e(SV,D9o),e(T_,G9o),e(y,O9o),e(y,M_),e(M_,m_e),e(m_e,V9o),e(M_,X9o),e(M_,RV),e(RV,z9o),e(M_,Q9o),e(y,W9o),e(y,E_),e(E_,f_e),e(f_e,U9o),e(E_,H9o),e(E_,PV),e(PV,J9o),e(E_,Y9o),e(y,Z9o),e(y,C_),e(C_,g_e),e(g_e,K9o),e(C_,exo),e(C_,BV),e(BV,oxo),e(C_,rxo),e(y,txo),e(y,w_),e(w_,h_e),e(h_e,axo),e(w_,nxo),e(w_,IV),e(IV,sxo),e(w_,lxo),e(y,ixo),e(y,A_),e(A_,u_e),e(u_e,dxo),e(A_,cxo),e(A_,NV),e(NV,mxo),e(A_,fxo),e(y,gxo),e(y,L_),e(L_,p_e),e(p_e,hxo),e(L_,uxo),e(L_,qV),e(qV,pxo),e(L_,_xo),e(y,bxo),e(y,y_),e(y_,__e),e(__e,vxo),e(y_,Fxo),e(y_,jV),e(jV,Txo),e(y_,Mxo),e(y,Exo),e(y,x_),e(x_,b_e),e(b_e,Cxo),e(x_,wxo),e(x_,DV),e(DV,Axo),e(x_,Lxo),e(y,yxo),e(y,$_),e($_,v_e),e(v_e,xxo),e($_,$xo),e($_,GV),e(GV,kxo),e($_,Sxo),e(y,Rxo),e(y,k_),e(k_,F_e),e(F_e,Pxo),e(k_,Bxo),e(k_,OV),e(OV,Ixo),e(k_,Nxo),e(y,qxo),e(y,S_),e(S_,T_e),e(T_e,jxo),e(S_,Dxo),e(S_,VV),e(VV,Gxo),e(S_,Oxo),e(y,Vxo),e(y,R_),e(R_,M_e),e(M_e,Xxo),e(R_,zxo),e(R_,XV),e(XV,Qxo),e(R_,Wxo),e(y,Uxo),e(y,P_),e(P_,E_e),e(E_e,Hxo),e(P_,Jxo),e(P_,zV),e(zV,Yxo),e(P_,Zxo),e(y,Kxo),e(y,B_),e(B_,C_e),e(C_e,e$o),e(B_,o$o),e(B_,QV),e(QV,r$o),e(B_,t$o),e(y,a$o),e(y,I_),e(I_,w_e),e(w_e,n$o),e(I_,s$o),e(I_,WV),e(WV,l$o),e(I_,i$o),e(y,d$o),e(y,N_),e(N_,A_e),e(A_e,c$o),e(N_,m$o),e(N_,UV),e(UV,f$o),e(N_,g$o),e(y,h$o),e(y,q_),e(q_,L_e),e(L_e,u$o),e(q_,p$o),e(q_,HV),e(HV,_$o),e(q_,b$o),e(y,v$o),e(y,j_),e(j_,y_e),e(y_e,F$o),e(j_,T$o),e(j_,JV),e(JV,M$o),e(j_,E$o),e(y,C$o),e(y,D_),e(D_,x_e),e(x_e,w$o),e(D_,A$o),e(D_,YV),e(YV,L$o),e(D_,y$o),e(y,x$o),e(y,G_),e(G_,$_e),e($_e,$$o),e(G_,k$o),e(G_,ZV),e(ZV,S$o),e(G_,R$o),e(y,P$o),e(y,O_),e(O_,k_e),e(k_e,B$o),e(O_,I$o),e(O_,KV),e(KV,N$o),e(O_,q$o),e(y,j$o),e(y,V_),e(V_,S_e),e(S_e,D$o),e(V_,G$o),e(V_,eX),e(eX,O$o),e(V_,V$o),e(y,X$o),e(y,X_),e(X_,R_e),e(R_e,z$o),e(X_,Q$o),e(X_,oX),e(oX,W$o),e(X_,U$o),e(y,H$o),e(y,z_),e(z_,P_e),e(P_e,J$o),e(z_,Y$o),e(z_,rX),e(rX,Z$o),e(z_,K$o),e(y,eko),e(y,Q_),e(Q_,B_e),e(B_e,oko),e(Q_,rko),e(Q_,tX),e(tX,tko),e(Q_,ako),e(y,nko),e(y,W_),e(W_,I_e),e(I_e,sko),e(W_,lko),e(W_,aX),e(aX,iko),e(W_,dko),e(y,cko),e(y,U_),e(U_,N_e),e(N_e,mko),e(U_,fko),e(U_,nX),e(nX,gko),e(U_,hko),e(y,uko),e(y,H_),e(H_,q_e),e(q_e,pko),e(H_,_ko),e(H_,sX),e(sX,bko),e(H_,vko),e(y,Fko),e(y,J_),e(J_,j_e),e(j_e,Tko),e(J_,Mko),e(J_,lX),e(lX,Eko),e(J_,Cko),e(y,wko),e(y,Y_),e(Y_,D_e),e(D_e,Ako),e(Y_,Lko),e(Y_,iX),e(iX,yko),e(Y_,xko),e(y,$ko),e(y,Z_),e(Z_,G_e),e(G_e,kko),e(Z_,Sko),e(Z_,dX),e(dX,Rko),e(Z_,Pko),e(y,Bko),e(y,K_),e(K_,O_e),e(O_e,Iko),e(K_,Nko),e(K_,cX),e(cX,qko),e(K_,jko),e(y,Dko),e(y,e1),e(e1,V_e),e(V_e,Gko),e(e1,Oko),e(e1,mX),e(mX,Vko),e(e1,Xko),e(y,zko),e(y,o1),e(o1,X_e),e(X_e,Qko),e(o1,Wko),e(o1,fX),e(fX,Uko),e(o1,Hko),e(y,Jko),e(y,r1),e(r1,z_e),e(z_e,Yko),e(r1,Zko),e(r1,gX),e(gX,Kko),e(r1,eSo),e(y,oSo),e(y,t1),e(t1,Q_e),e(Q_e,rSo),e(t1,tSo),e(t1,hX),e(hX,aSo),e(t1,nSo),e(y,sSo),e(y,Ml),e(Ml,W_e),e(W_e,lSo),e(Ml,iSo),e(Ml,uX),e(uX,dSo),e(Ml,cSo),e(Ml,pX),e(pX,mSo),e(Ml,fSo),e(y,gSo),e(y,a1),e(a1,U_e),e(U_e,hSo),e(a1,uSo),e(a1,_X),e(_X,pSo),e(a1,_So),e(y,bSo),e(y,n1),e(n1,H_e),e(H_e,vSo),e(n1,FSo),e(n1,bX),e(bX,TSo),e(n1,MSo),e(y,ESo),e(y,s1),e(s1,J_e),e(J_e,CSo),e(s1,wSo),e(s1,vX),e(vX,ASo),e(s1,LSo),e(y,ySo),e(y,l1),e(l1,Y_e),e(Y_e,xSo),e(l1,$So),e(l1,FX),e(FX,kSo),e(l1,SSo),e(y,RSo),e(y,i1),e(i1,Z_e),e(Z_e,PSo),e(i1,BSo),e(i1,TX),e(TX,ISo),e(i1,NSo),e(y,qSo),e(y,d1),e(d1,K_e),e(K_e,jSo),e(d1,DSo),e(d1,MX),e(MX,GSo),e(d1,OSo),e(y,VSo),e(y,c1),e(c1,e1e),e(e1e,XSo),e(c1,zSo),e(c1,EX),e(EX,QSo),e(c1,WSo),e(y,USo),e(y,m1),e(m1,o1e),e(o1e,HSo),e(m1,JSo),e(m1,CX),e(CX,YSo),e(m1,ZSo),e(y,KSo),e(y,f1),e(f1,r1e),e(r1e,eRo),e(f1,oRo),e(f1,wX),e(wX,rRo),e(f1,tRo),e(y,aRo),e(y,g1),e(g1,t1e),e(t1e,nRo),e(g1,sRo),e(g1,AX),e(AX,lRo),e(g1,iRo),e(y,dRo),e(y,h1),e(h1,a1e),e(a1e,cRo),e(h1,mRo),e(h1,LX),e(LX,fRo),e(h1,gRo),e(y,hRo),e(y,u1),e(u1,n1e),e(n1e,uRo),e(u1,pRo),e(u1,yX),e(yX,_Ro),e(u1,bRo),e(y,vRo),e(y,p1),e(p1,s1e),e(s1e,FRo),e(p1,TRo),e(p1,xX),e(xX,MRo),e(p1,ERo),e(y,CRo),e(y,_1),e(_1,l1e),e(l1e,wRo),e(_1,ARo),e(_1,$X),e($X,LRo),e(_1,yRo),e(y,xRo),e(y,b1),e(b1,i1e),e(i1e,$Ro),e(b1,kRo),e(b1,kX),e(kX,SRo),e(b1,RRo),e(y,PRo),e(y,v1),e(v1,d1e),e(d1e,BRo),e(v1,IRo),e(v1,SX),e(SX,NRo),e(v1,qRo),e(y,jRo),e(y,F1),e(F1,c1e),e(c1e,DRo),e(F1,GRo),e(F1,RX),e(RX,ORo),e(F1,VRo),e(y,XRo),e(y,T1),e(T1,m1e),e(m1e,zRo),e(T1,QRo),e(T1,PX),e(PX,WRo),e(T1,URo),e(y,HRo),e(y,M1),e(M1,f1e),e(f1e,JRo),e(M1,YRo),e(M1,BX),e(BX,ZRo),e(M1,KRo),e(y,ePo),e(y,E1),e(E1,g1e),e(g1e,oPo),e(E1,rPo),e(E1,IX),e(IX,tPo),e(E1,aPo),e(y,nPo),e(y,C1),e(C1,h1e),e(h1e,sPo),e(C1,lPo),e(C1,NX),e(NX,iPo),e(C1,dPo),e(y,cPo),e(y,w1),e(w1,u1e),e(u1e,mPo),e(w1,fPo),e(w1,qX),e(qX,gPo),e(w1,hPo),e(y,uPo),e(y,A1),e(A1,p1e),e(p1e,pPo),e(A1,_Po),e(A1,jX),e(jX,bPo),e(A1,vPo),e(y,FPo),e(y,L1),e(L1,_1e),e(_1e,TPo),e(L1,MPo),e(L1,DX),e(DX,EPo),e(L1,CPo),e(y,wPo),e(y,y1),e(y1,b1e),e(b1e,APo),e(y1,LPo),e(y1,GX),e(GX,yPo),e(y1,xPo),e(y,$Po),e(y,x1),e(x1,v1e),e(v1e,kPo),e(x1,SPo),e(x1,OX),e(OX,RPo),e(x1,PPo),e(y,BPo),e(y,$1),e($1,F1e),e(F1e,IPo),e($1,NPo),e($1,VX),e(VX,qPo),e($1,jPo),e(y,DPo),e(y,k1),e(k1,T1e),e(T1e,GPo),e(k1,OPo),e(k1,XX),e(XX,VPo),e(k1,XPo),e(y,zPo),e(y,S1),e(S1,M1e),e(M1e,QPo),e(S1,WPo),e(S1,zX),e(zX,UPo),e(S1,HPo),e(y,JPo),e(y,R1),e(R1,E1e),e(E1e,YPo),e(R1,ZPo),e(R1,QX),e(QX,KPo),e(R1,eBo),e(y,oBo),e(y,P1),e(P1,C1e),e(C1e,rBo),e(P1,tBo),e(P1,WX),e(WX,aBo),e(P1,nBo),e(y,sBo),e(y,B1),e(B1,w1e),e(w1e,lBo),e(B1,iBo),e(B1,UX),e(UX,dBo),e(B1,cBo),e(y,mBo),e(y,I1),e(I1,A1e),e(A1e,fBo),e(I1,gBo),e(I1,HX),e(HX,hBo),e(I1,uBo),e(y,pBo),e(y,N1),e(N1,L1e),e(L1e,_Bo),e(N1,bBo),e(N1,JX),e(JX,vBo),e(N1,FBo),e(y,TBo),e(y,q1),e(q1,y1e),e(y1e,MBo),e(q1,EBo),e(q1,YX),e(YX,CBo),e(q1,wBo),e(y,ABo),e(y,j1),e(j1,x1e),e(x1e,LBo),e(j1,yBo),e(j1,ZX),e(ZX,xBo),e(j1,$Bo),e(y,kBo),e(y,D1),e(D1,$1e),e($1e,SBo),e(D1,RBo),e(D1,KX),e(KX,PBo),e(D1,BBo),e(y,IBo),e(y,G1),e(G1,k1e),e(k1e,NBo),e(G1,qBo),e(G1,ez),e(ez,jBo),e(G1,DBo),e(y,GBo),e(y,O1),e(O1,S1e),e(S1e,OBo),e(O1,VBo),e(O1,oz),e(oz,XBo),e(O1,zBo),e(y,QBo),e(y,V1),e(V1,R1e),e(R1e,WBo),e(V1,UBo),e(V1,rz),e(rz,HBo),e(V1,JBo),e(y,YBo),e(y,X1),e(X1,P1e),e(P1e,ZBo),e(X1,KBo),e(X1,tz),e(tz,eIo),e(X1,oIo),e(y,rIo),e(y,z1),e(z1,B1e),e(B1e,tIo),e(z1,aIo),e(z1,az),e(az,nIo),e(z1,sIo),e(y,lIo),e(y,Q1),e(Q1,I1e),e(I1e,iIo),e(Q1,dIo),e(Q1,nz),e(nz,cIo),e(Q1,mIo),e(y,fIo),e(y,W1),e(W1,N1e),e(N1e,gIo),e(W1,hIo),e(W1,sz),e(sz,uIo),e(W1,pIo),e(y,_Io),e(y,U1),e(U1,q1e),e(q1e,bIo),e(U1,vIo),e(U1,lz),e(lz,FIo),e(U1,TIo),e(y,MIo),e(y,H1),e(H1,j1e),e(j1e,EIo),e(H1,CIo),e(H1,iz),e(iz,wIo),e(H1,AIo),e(y,LIo),e(y,J1),e(J1,D1e),e(D1e,yIo),e(J1,xIo),e(J1,dz),e(dz,$Io),e(J1,kIo),e(y,SIo),e(y,Y1),e(Y1,G1e),e(G1e,RIo),e(Y1,PIo),e(Y1,cz),e(cz,BIo),e(Y1,IIo),e(y,NIo),e(y,Z1),e(Z1,O1e),e(O1e,qIo),e(Z1,jIo),e(Z1,mz),e(mz,DIo),e(Z1,GIo),e(y,OIo),e(y,K1),e(K1,V1e),e(V1e,VIo),e(K1,XIo),e(K1,fz),e(fz,zIo),e(K1,QIo),e(y,WIo),e(y,eb),e(eb,X1e),e(X1e,UIo),e(eb,HIo),e(eb,gz),e(gz,JIo),e(eb,YIo),e(y,ZIo),e(y,ob),e(ob,z1e),e(z1e,KIo),e(ob,eNo),e(ob,hz),e(hz,oNo),e(ob,rNo),e(y,tNo),e(y,rb),e(rb,Q1e),e(Q1e,aNo),e(rb,nNo),e(rb,uz),e(uz,sNo),e(rb,lNo),e(y,iNo),e(y,tb),e(tb,W1e),e(W1e,dNo),e(tb,cNo),e(tb,pz),e(pz,mNo),e(tb,fNo),e(y,gNo),e(y,ab),e(ab,U1e),e(U1e,hNo),e(ab,uNo),e(ab,_z),e(_z,pNo),e(ab,_No),e(y,bNo),e(y,nb),e(nb,H1e),e(H1e,vNo),e(nb,FNo),e(nb,bz),e(bz,TNo),e(nb,MNo),e(y,ENo),e(y,sb),e(sb,J1e),e(J1e,CNo),e(sb,wNo),e(sb,vz),e(vz,ANo),e(sb,LNo),e(y,yNo),e(y,lb),e(lb,Y1e),e(Y1e,xNo),e(lb,$No),e(lb,Fz),e(Fz,kNo),e(lb,SNo),e(y,RNo),e(y,ib),e(ib,Z1e),e(Z1e,PNo),e(ib,BNo),e(ib,Tz),e(Tz,INo),e(ib,NNo),e(y,qNo),e(y,db),e(db,K1e),e(K1e,jNo),e(db,DNo),e(db,Mz),e(Mz,GNo),e(db,ONo),e(y,VNo),e(y,cb),e(cb,ebe),e(ebe,XNo),e(cb,zNo),e(cb,Ez),e(Ez,QNo),e(cb,WNo),e(y,UNo),e(y,mb),e(mb,obe),e(obe,HNo),e(mb,JNo),e(mb,Cz),e(Cz,YNo),e(mb,ZNo),e(y,KNo),e(y,fb),e(fb,rbe),e(rbe,eqo),e(fb,oqo),e(fb,wz),e(wz,rqo),e(fb,tqo),e(y,aqo),e(y,gb),e(gb,tbe),e(tbe,nqo),e(gb,sqo),e(gb,Az),e(Az,lqo),e(gb,iqo),e(y,dqo),e(y,hb),e(hb,abe),e(abe,cqo),e(hb,mqo),e(hb,Lz),e(Lz,fqo),e(hb,gqo),e(y,hqo),e(y,ub),e(ub,nbe),e(nbe,uqo),e(ub,pqo),e(ub,yz),e(yz,_qo),e(ub,bqo),e(y,vqo),e(y,pb),e(pb,sbe),e(sbe,Fqo),e(pb,Tqo),e(pb,xz),e(xz,Mqo),e(pb,Eqo),e(y,Cqo),e(y,_b),e(_b,lbe),e(lbe,wqo),e(_b,Aqo),e(_b,$z),e($z,Lqo),e(_b,yqo),e(y,xqo),e(y,bb),e(bb,ibe),e(ibe,$qo),e(bb,kqo),e(bb,kz),e(kz,Sqo),e(bb,Rqo),e(y,Pqo),e(y,vb),e(vb,dbe),e(dbe,Bqo),e(vb,Iqo),e(vb,Sz),e(Sz,Nqo),e(vb,qqo),e(y,jqo),e(y,Fb),e(Fb,cbe),e(cbe,Dqo),e(Fb,Gqo),e(Fb,Rz),e(Rz,Oqo),e(Fb,Vqo),e(y,Xqo),e(y,Tb),e(Tb,mbe),e(mbe,zqo),e(Tb,Qqo),e(Tb,Pz),e(Pz,Wqo),e(Tb,Uqo),e(y,Hqo),e(y,Mb),e(Mb,fbe),e(fbe,Jqo),e(Mb,Yqo),e(Mb,Bz),e(Bz,Zqo),e(Mb,Kqo),e(y,ejo),e(y,Eb),e(Eb,gbe),e(gbe,ojo),e(Eb,rjo),e(Eb,Iz),e(Iz,tjo),e(Eb,ajo),e(y,njo),e(y,Cb),e(Cb,hbe),e(hbe,sjo),e(Cb,ljo),e(Cb,Nz),e(Nz,ijo),e(Cb,djo),e(y,cjo),e(y,wb),e(wb,ube),e(ube,mjo),e(wb,fjo),e(wb,qz),e(qz,gjo),e(wb,hjo),e(y,ujo),e(y,Ab),e(Ab,pbe),e(pbe,pjo),e(Ab,_jo),e(Ab,jz),e(jz,bjo),e(Ab,vjo),e(y,Fjo),e(y,Lb),e(Lb,_be),e(_be,Tjo),e(Lb,Mjo),e(Lb,Dz),e(Dz,Ejo),e(Lb,Cjo),e(y,wjo),e(y,yb),e(yb,bbe),e(bbe,Ajo),e(yb,Ljo),e(yb,Gz),e(Gz,yjo),e(yb,xjo),e(y,$jo),e(y,xb),e(xb,vbe),e(vbe,kjo),e(xb,Sjo),e(xb,Oz),e(Oz,Rjo),e(xb,Pjo),e(y,Bjo),e(y,$b),e($b,Fbe),e(Fbe,Ijo),e($b,Njo),e($b,Vz),e(Vz,qjo),e($b,jjo),e(y,Djo),e(y,kb),e(kb,Tbe),e(Tbe,Gjo),e(kb,Ojo),e(kb,Xz),e(Xz,Vjo),e(kb,Xjo),e(y,zjo),e(y,Sb),e(Sb,Mbe),e(Mbe,Qjo),e(Sb,Wjo),e(Sb,zz),e(zz,Ujo),e(Sb,Hjo),e(y,Jjo),e(y,Rb),e(Rb,Ebe),e(Ebe,Yjo),e(Rb,Zjo),e(Rb,Qz),e(Qz,Kjo),e(Rb,eDo),e(y,oDo),e(y,Pb),e(Pb,Cbe),e(Cbe,rDo),e(Pb,tDo),e(Pb,Wz),e(Wz,aDo),e(Pb,nDo),e(y,sDo),e(y,Bb),e(Bb,wbe),e(wbe,lDo),e(Bb,iDo),e(Bb,Uz),e(Uz,dDo),e(Bb,cDo),e(y,mDo),e(y,Ib),e(Ib,Abe),e(Abe,fDo),e(Ib,gDo),e(Ib,Hz),e(Hz,hDo),e(Ib,uDo),e(Ke,pDo),e(Ke,Nb),e(Nb,_Do),e(Nb,Lbe),e(Lbe,bDo),e(Nb,vDo),e(Nb,ybe),e(ybe,FDo),e(Ke,TDo),M(qb,Ke,null),b(m,voo,_),b(m,Ad,_),e(Ad,jb),e(jb,xbe),M(r$,xbe,null),e(Ad,MDo),e(Ad,$be),e($be,EDo),b(m,Foo,_),b(m,Io,_),M(t$,Io,null),e(Io,CDo),e(Io,Ld),e(Ld,wDo),e(Ld,Jz),e(Jz,ADo),e(Ld,LDo),e(Ld,Yz),e(Yz,yDo),e(Ld,xDo),e(Io,$Do),e(Io,a$),e(a$,kDo),e(a$,kbe),e(kbe,SDo),e(a$,RDo),e(Io,PDo),e(Io,Ft),M(n$,Ft,null),e(Ft,BDo),e(Ft,Sbe),e(Sbe,IDo),e(Ft,NDo),e(Ft,yd),e(yd,qDo),e(yd,Rbe),e(Rbe,jDo),e(yd,DDo),e(yd,Zz),e(Zz,GDo),e(yd,ODo),e(Ft,VDo),M(Db,Ft,null),e(Io,XDo),e(Io,eo),M(s$,eo,null),e(eo,zDo),e(eo,Pbe),e(Pbe,QDo),e(eo,WDo),e(eo,on),e(on,UDo),e(on,Bbe),e(Bbe,HDo),e(on,JDo),e(on,Ibe),e(Ibe,YDo),e(on,ZDo),e(on,Nbe),e(Nbe,KDo),e(on,eGo),e(eo,oGo),e(eo,G),e(G,Gb),e(Gb,qbe),e(qbe,rGo),e(Gb,tGo),e(Gb,Kz),e(Kz,aGo),e(Gb,nGo),e(G,sGo),e(G,Ob),e(Ob,jbe),e(jbe,lGo),e(Ob,iGo),e(Ob,eQ),e(eQ,dGo),e(Ob,cGo),e(G,mGo),e(G,Vb),e(Vb,Dbe),e(Dbe,fGo),e(Vb,gGo),e(Vb,oQ),e(oQ,hGo),e(Vb,uGo),e(G,pGo),e(G,Xb),e(Xb,Gbe),e(Gbe,_Go),e(Xb,bGo),e(Xb,rQ),e(rQ,vGo),e(Xb,FGo),e(G,TGo),e(G,zb),e(zb,Obe),e(Obe,MGo),e(zb,EGo),e(zb,tQ),e(tQ,CGo),e(zb,wGo),e(G,AGo),e(G,Qb),e(Qb,Vbe),e(Vbe,LGo),e(Qb,yGo),e(Qb,aQ),e(aQ,xGo),e(Qb,$Go),e(G,kGo),e(G,Wb),e(Wb,Xbe),e(Xbe,SGo),e(Wb,RGo),e(Wb,nQ),e(nQ,PGo),e(Wb,BGo),e(G,IGo),e(G,Ub),e(Ub,zbe),e(zbe,NGo),e(Ub,qGo),e(Ub,sQ),e(sQ,jGo),e(Ub,DGo),e(G,GGo),e(G,Hb),e(Hb,Qbe),e(Qbe,OGo),e(Hb,VGo),e(Hb,lQ),e(lQ,XGo),e(Hb,zGo),e(G,QGo),e(G,Jb),e(Jb,Wbe),e(Wbe,WGo),e(Jb,UGo),e(Jb,iQ),e(iQ,HGo),e(Jb,JGo),e(G,YGo),e(G,Yb),e(Yb,Ube),e(Ube,ZGo),e(Yb,KGo),e(Yb,dQ),e(dQ,eOo),e(Yb,oOo),e(G,rOo),e(G,Zb),e(Zb,Hbe),e(Hbe,tOo),e(Zb,aOo),e(Zb,cQ),e(cQ,nOo),e(Zb,sOo),e(G,lOo),e(G,Kb),e(Kb,Jbe),e(Jbe,iOo),e(Kb,dOo),e(Kb,mQ),e(mQ,cOo),e(Kb,mOo),e(G,fOo),e(G,e2),e(e2,Ybe),e(Ybe,gOo),e(e2,hOo),e(e2,fQ),e(fQ,uOo),e(e2,pOo),e(G,_Oo),e(G,o2),e(o2,Zbe),e(Zbe,bOo),e(o2,vOo),e(o2,gQ),e(gQ,FOo),e(o2,TOo),e(G,MOo),e(G,r2),e(r2,Kbe),e(Kbe,EOo),e(r2,COo),e(r2,hQ),e(hQ,wOo),e(r2,AOo),e(G,LOo),e(G,t2),e(t2,e2e),e(e2e,yOo),e(t2,xOo),e(t2,uQ),e(uQ,$Oo),e(t2,kOo),e(G,SOo),e(G,a2),e(a2,o2e),e(o2e,ROo),e(a2,POo),e(a2,pQ),e(pQ,BOo),e(a2,IOo),e(G,NOo),e(G,n2),e(n2,r2e),e(r2e,qOo),e(n2,jOo),e(n2,_Q),e(_Q,DOo),e(n2,GOo),e(G,OOo),e(G,s2),e(s2,t2e),e(t2e,VOo),e(s2,XOo),e(s2,bQ),e(bQ,zOo),e(s2,QOo),e(G,WOo),e(G,l2),e(l2,a2e),e(a2e,UOo),e(l2,HOo),e(l2,vQ),e(vQ,JOo),e(l2,YOo),e(G,ZOo),e(G,i2),e(i2,n2e),e(n2e,KOo),e(i2,eVo),e(i2,FQ),e(FQ,oVo),e(i2,rVo),e(G,tVo),e(G,d2),e(d2,s2e),e(s2e,aVo),e(d2,nVo),e(d2,TQ),e(TQ,sVo),e(d2,lVo),e(G,iVo),e(G,c2),e(c2,l2e),e(l2e,dVo),e(c2,cVo),e(c2,MQ),e(MQ,mVo),e(c2,fVo),e(G,gVo),e(G,m2),e(m2,i2e),e(i2e,hVo),e(m2,uVo),e(m2,EQ),e(EQ,pVo),e(m2,_Vo),e(G,bVo),e(G,f2),e(f2,d2e),e(d2e,vVo),e(f2,FVo),e(f2,CQ),e(CQ,TVo),e(f2,MVo),e(G,EVo),e(G,g2),e(g2,c2e),e(c2e,CVo),e(g2,wVo),e(g2,wQ),e(wQ,AVo),e(g2,LVo),e(G,yVo),e(G,h2),e(h2,m2e),e(m2e,xVo),e(h2,$Vo),e(h2,AQ),e(AQ,kVo),e(h2,SVo),e(G,RVo),e(G,u2),e(u2,f2e),e(f2e,PVo),e(u2,BVo),e(u2,LQ),e(LQ,IVo),e(u2,NVo),e(G,qVo),e(G,p2),e(p2,g2e),e(g2e,jVo),e(p2,DVo),e(p2,yQ),e(yQ,GVo),e(p2,OVo),e(G,VVo),e(G,_2),e(_2,h2e),e(h2e,XVo),e(_2,zVo),e(_2,xQ),e(xQ,QVo),e(_2,WVo),e(G,UVo),e(G,b2),e(b2,u2e),e(u2e,HVo),e(b2,JVo),e(b2,$Q),e($Q,YVo),e(b2,ZVo),e(G,KVo),e(G,v2),e(v2,p2e),e(p2e,eXo),e(v2,oXo),e(v2,kQ),e(kQ,rXo),e(v2,tXo),e(G,aXo),e(G,F2),e(F2,_2e),e(_2e,nXo),e(F2,sXo),e(F2,SQ),e(SQ,lXo),e(F2,iXo),e(G,dXo),e(G,T2),e(T2,b2e),e(b2e,cXo),e(T2,mXo),e(T2,RQ),e(RQ,fXo),e(T2,gXo),e(G,hXo),e(G,M2),e(M2,v2e),e(v2e,uXo),e(M2,pXo),e(M2,PQ),e(PQ,_Xo),e(M2,bXo),e(G,vXo),e(G,E2),e(E2,F2e),e(F2e,FXo),e(E2,TXo),e(E2,BQ),e(BQ,MXo),e(E2,EXo),e(G,CXo),e(G,C2),e(C2,T2e),e(T2e,wXo),e(C2,AXo),e(C2,IQ),e(IQ,LXo),e(C2,yXo),e(G,xXo),e(G,w2),e(w2,M2e),e(M2e,$Xo),e(w2,kXo),e(w2,NQ),e(NQ,SXo),e(w2,RXo),e(G,PXo),e(G,A2),e(A2,E2e),e(E2e,BXo),e(A2,IXo),e(A2,qQ),e(qQ,NXo),e(A2,qXo),e(G,jXo),e(G,L2),e(L2,C2e),e(C2e,DXo),e(L2,GXo),e(L2,jQ),e(jQ,OXo),e(L2,VXo),e(G,XXo),e(G,y2),e(y2,w2e),e(w2e,zXo),e(y2,QXo),e(y2,DQ),e(DQ,WXo),e(y2,UXo),e(G,HXo),e(G,x2),e(x2,A2e),e(A2e,JXo),e(x2,YXo),e(x2,GQ),e(GQ,ZXo),e(x2,KXo),e(G,ezo),e(G,$2),e($2,L2e),e(L2e,ozo),e($2,rzo),e($2,OQ),e(OQ,tzo),e($2,azo),e(G,nzo),e(G,k2),e(k2,y2e),e(y2e,szo),e(k2,lzo),e(k2,VQ),e(VQ,izo),e(k2,dzo),e(G,czo),e(G,S2),e(S2,x2e),e(x2e,mzo),e(S2,fzo),e(S2,XQ),e(XQ,gzo),e(S2,hzo),e(G,uzo),e(G,R2),e(R2,$2e),e($2e,pzo),e(R2,_zo),e(R2,zQ),e(zQ,bzo),e(R2,vzo),e(G,Fzo),e(G,P2),e(P2,k2e),e(k2e,Tzo),e(P2,Mzo),e(P2,QQ),e(QQ,Ezo),e(P2,Czo),e(eo,wzo),e(eo,B2),e(B2,Azo),e(B2,S2e),e(S2e,Lzo),e(B2,yzo),e(B2,R2e),e(R2e,xzo),e(eo,$zo),M(I2,eo,null),b(m,Too,_),b(m,xd,_),e(xd,N2),e(N2,P2e),M(l$,P2e,null),e(xd,kzo),e(xd,B2e),e(B2e,Szo),b(m,Moo,_),b(m,No,_),M(i$,No,null),e(No,Rzo),e(No,$d),e($d,Pzo),e($d,WQ),e(WQ,Bzo),e($d,Izo),e($d,UQ),e(UQ,Nzo),e($d,qzo),e(No,jzo),e(No,d$),e(d$,Dzo),e(d$,I2e),e(I2e,Gzo),e(d$,Ozo),e(No,Vzo),e(No,Tt),M(c$,Tt,null),e(Tt,Xzo),e(Tt,N2e),e(N2e,zzo),e(Tt,Qzo),e(Tt,kd),e(kd,Wzo),e(kd,q2e),e(q2e,Uzo),e(kd,Hzo),e(kd,HQ),e(HQ,Jzo),e(kd,Yzo),e(Tt,Zzo),M(q2,Tt,null),e(No,Kzo),e(No,oo),M(m$,oo,null),e(oo,eQo),e(oo,j2e),e(j2e,oQo),e(oo,rQo),e(oo,rn),e(rn,tQo),e(rn,D2e),e(D2e,aQo),e(rn,nQo),e(rn,G2e),e(G2e,sQo),e(rn,lQo),e(rn,O2e),e(O2e,iQo),e(rn,dQo),e(oo,cQo),e(oo,Q),e(Q,j2),e(j2,V2e),e(V2e,mQo),e(j2,fQo),e(j2,JQ),e(JQ,gQo),e(j2,hQo),e(Q,uQo),e(Q,D2),e(D2,X2e),e(X2e,pQo),e(D2,_Qo),e(D2,YQ),e(YQ,bQo),e(D2,vQo),e(Q,FQo),e(Q,G2),e(G2,z2e),e(z2e,TQo),e(G2,MQo),e(G2,ZQ),e(ZQ,EQo),e(G2,CQo),e(Q,wQo),e(Q,O2),e(O2,Q2e),e(Q2e,AQo),e(O2,LQo),e(O2,KQ),e(KQ,yQo),e(O2,xQo),e(Q,$Qo),e(Q,V2),e(V2,W2e),e(W2e,kQo),e(V2,SQo),e(V2,eW),e(eW,RQo),e(V2,PQo),e(Q,BQo),e(Q,X2),e(X2,U2e),e(U2e,IQo),e(X2,NQo),e(X2,oW),e(oW,qQo),e(X2,jQo),e(Q,DQo),e(Q,z2),e(z2,H2e),e(H2e,GQo),e(z2,OQo),e(z2,rW),e(rW,VQo),e(z2,XQo),e(Q,zQo),e(Q,Q2),e(Q2,J2e),e(J2e,QQo),e(Q2,WQo),e(Q2,tW),e(tW,UQo),e(Q2,HQo),e(Q,JQo),e(Q,W2),e(W2,Y2e),e(Y2e,YQo),e(W2,ZQo),e(W2,aW),e(aW,KQo),e(W2,eWo),e(Q,oWo),e(Q,U2),e(U2,Z2e),e(Z2e,rWo),e(U2,tWo),e(U2,nW),e(nW,aWo),e(U2,nWo),e(Q,sWo),e(Q,H2),e(H2,K2e),e(K2e,lWo),e(H2,iWo),e(H2,sW),e(sW,dWo),e(H2,cWo),e(Q,mWo),e(Q,J2),e(J2,eve),e(eve,fWo),e(J2,gWo),e(J2,lW),e(lW,hWo),e(J2,uWo),e(Q,pWo),e(Q,Y2),e(Y2,ove),e(ove,_Wo),e(Y2,bWo),e(Y2,iW),e(iW,vWo),e(Y2,FWo),e(Q,TWo),e(Q,Z2),e(Z2,rve),e(rve,MWo),e(Z2,EWo),e(Z2,dW),e(dW,CWo),e(Z2,wWo),e(Q,AWo),e(Q,K2),e(K2,tve),e(tve,LWo),e(K2,yWo),e(K2,cW),e(cW,xWo),e(K2,$Wo),e(Q,kWo),e(Q,ev),e(ev,ave),e(ave,SWo),e(ev,RWo),e(ev,mW),e(mW,PWo),e(ev,BWo),e(Q,IWo),e(Q,ov),e(ov,nve),e(nve,NWo),e(ov,qWo),e(ov,fW),e(fW,jWo),e(ov,DWo),e(Q,GWo),e(Q,rv),e(rv,sve),e(sve,OWo),e(rv,VWo),e(rv,gW),e(gW,XWo),e(rv,zWo),e(Q,QWo),e(Q,tv),e(tv,lve),e(lve,WWo),e(tv,UWo),e(tv,hW),e(hW,HWo),e(tv,JWo),e(Q,YWo),e(Q,av),e(av,ive),e(ive,ZWo),e(av,KWo),e(av,uW),e(uW,eUo),e(av,oUo),e(Q,rUo),e(Q,nv),e(nv,dve),e(dve,tUo),e(nv,aUo),e(nv,pW),e(pW,nUo),e(nv,sUo),e(Q,lUo),e(Q,sv),e(sv,cve),e(cve,iUo),e(sv,dUo),e(sv,_W),e(_W,cUo),e(sv,mUo),e(Q,fUo),e(Q,lv),e(lv,mve),e(mve,gUo),e(lv,hUo),e(lv,bW),e(bW,uUo),e(lv,pUo),e(Q,_Uo),e(Q,iv),e(iv,fve),e(fve,bUo),e(iv,vUo),e(iv,vW),e(vW,FUo),e(iv,TUo),e(Q,MUo),e(Q,dv),e(dv,gve),e(gve,EUo),e(dv,CUo),e(dv,FW),e(FW,wUo),e(dv,AUo),e(Q,LUo),e(Q,cv),e(cv,hve),e(hve,yUo),e(cv,xUo),e(cv,TW),e(TW,$Uo),e(cv,kUo),e(Q,SUo),e(Q,mv),e(mv,uve),e(uve,RUo),e(mv,PUo),e(mv,MW),e(MW,BUo),e(mv,IUo),e(Q,NUo),e(Q,fv),e(fv,pve),e(pve,qUo),e(fv,jUo),e(fv,EW),e(EW,DUo),e(fv,GUo),e(Q,OUo),e(Q,gv),e(gv,_ve),e(_ve,VUo),e(gv,XUo),e(gv,CW),e(CW,zUo),e(gv,QUo),e(Q,WUo),e(Q,hv),e(hv,bve),e(bve,UUo),e(hv,HUo),e(hv,wW),e(wW,JUo),e(hv,YUo),e(Q,ZUo),e(Q,uv),e(uv,vve),e(vve,KUo),e(uv,eHo),e(uv,AW),e(AW,oHo),e(uv,rHo),e(Q,tHo),e(Q,pv),e(pv,Fve),e(Fve,aHo),e(pv,nHo),e(pv,LW),e(LW,sHo),e(pv,lHo),e(Q,iHo),e(Q,_v),e(_v,Tve),e(Tve,dHo),e(_v,cHo),e(_v,yW),e(yW,mHo),e(_v,fHo),e(Q,gHo),e(Q,bv),e(bv,Mve),e(Mve,hHo),e(bv,uHo),e(bv,xW),e(xW,pHo),e(bv,_Ho),e(Q,bHo),e(Q,vv),e(vv,Eve),e(Eve,vHo),e(vv,FHo),e(vv,$W),e($W,THo),e(vv,MHo),e(Q,EHo),e(Q,Fv),e(Fv,Cve),e(Cve,CHo),e(Fv,wHo),e(Fv,kW),e(kW,AHo),e(Fv,LHo),e(Q,yHo),e(Q,Tv),e(Tv,wve),e(wve,xHo),e(Tv,$Ho),e(Tv,SW),e(SW,kHo),e(Tv,SHo),e(Q,RHo),e(Q,Mv),e(Mv,Ave),e(Ave,PHo),e(Mv,BHo),e(Mv,RW),e(RW,IHo),e(Mv,NHo),e(Q,qHo),e(Q,Ev),e(Ev,Lve),e(Lve,jHo),e(Ev,DHo),e(Ev,PW),e(PW,GHo),e(Ev,OHo),e(Q,VHo),e(Q,Cv),e(Cv,yve),e(yve,XHo),e(Cv,zHo),e(Cv,BW),e(BW,QHo),e(Cv,WHo),e(Q,UHo),e(Q,wv),e(wv,xve),e(xve,HHo),e(wv,JHo),e(wv,IW),e(IW,YHo),e(wv,ZHo),e(Q,KHo),e(Q,Av),e(Av,$ve),e($ve,eJo),e(Av,oJo),e(Av,NW),e(NW,rJo),e(Av,tJo),e(oo,aJo),e(oo,Lv),e(Lv,nJo),e(Lv,kve),e(kve,sJo),e(Lv,lJo),e(Lv,Sve),e(Sve,iJo),e(oo,dJo),M(yv,oo,null),b(m,Eoo,_),b(m,Sd,_),e(Sd,xv),e(xv,Rve),M(f$,Rve,null),e(Sd,cJo),e(Sd,Pve),e(Pve,mJo),b(m,Coo,_),b(m,qo,_),M(g$,qo,null),e(qo,fJo),e(qo,Rd),e(Rd,gJo),e(Rd,qW),e(qW,hJo),e(Rd,uJo),e(Rd,jW),e(jW,pJo),e(Rd,_Jo),e(qo,bJo),e(qo,h$),e(h$,vJo),e(h$,Bve),e(Bve,FJo),e(h$,TJo),e(qo,MJo),e(qo,Mt),M(u$,Mt,null),e(Mt,EJo),e(Mt,Ive),e(Ive,CJo),e(Mt,wJo),e(Mt,Pd),e(Pd,AJo),e(Pd,Nve),e(Nve,LJo),e(Pd,yJo),e(Pd,DW),e(DW,xJo),e(Pd,$Jo),e(Mt,kJo),M($v,Mt,null),e(qo,SJo),e(qo,ro),M(p$,ro,null),e(ro,RJo),e(ro,qve),e(qve,PJo),e(ro,BJo),e(ro,tn),e(tn,IJo),e(tn,jve),e(jve,NJo),e(tn,qJo),e(tn,Dve),e(Dve,jJo),e(tn,DJo),e(tn,Gve),e(Gve,GJo),e(tn,OJo),e(ro,VJo),e(ro,J),e(J,kv),e(kv,Ove),e(Ove,XJo),e(kv,zJo),e(kv,GW),e(GW,QJo),e(kv,WJo),e(J,UJo),e(J,Sv),e(Sv,Vve),e(Vve,HJo),e(Sv,JJo),e(Sv,OW),e(OW,YJo),e(Sv,ZJo),e(J,KJo),e(J,Rv),e(Rv,Xve),e(Xve,eYo),e(Rv,oYo),e(Rv,VW),e(VW,rYo),e(Rv,tYo),e(J,aYo),e(J,Pv),e(Pv,zve),e(zve,nYo),e(Pv,sYo),e(Pv,XW),e(XW,lYo),e(Pv,iYo),e(J,dYo),e(J,Bv),e(Bv,Qve),e(Qve,cYo),e(Bv,mYo),e(Bv,zW),e(zW,fYo),e(Bv,gYo),e(J,hYo),e(J,Iv),e(Iv,Wve),e(Wve,uYo),e(Iv,pYo),e(Iv,QW),e(QW,_Yo),e(Iv,bYo),e(J,vYo),e(J,Nv),e(Nv,Uve),e(Uve,FYo),e(Nv,TYo),e(Nv,WW),e(WW,MYo),e(Nv,EYo),e(J,CYo),e(J,qv),e(qv,Hve),e(Hve,wYo),e(qv,AYo),e(qv,UW),e(UW,LYo),e(qv,yYo),e(J,xYo),e(J,jv),e(jv,Jve),e(Jve,$Yo),e(jv,kYo),e(jv,HW),e(HW,SYo),e(jv,RYo),e(J,PYo),e(J,Dv),e(Dv,Yve),e(Yve,BYo),e(Dv,IYo),e(Dv,JW),e(JW,NYo),e(Dv,qYo),e(J,jYo),e(J,Gv),e(Gv,Zve),e(Zve,DYo),e(Gv,GYo),e(Gv,YW),e(YW,OYo),e(Gv,VYo),e(J,XYo),e(J,Ov),e(Ov,Kve),e(Kve,zYo),e(Ov,QYo),e(Ov,ZW),e(ZW,WYo),e(Ov,UYo),e(J,HYo),e(J,Vv),e(Vv,eFe),e(eFe,JYo),e(Vv,YYo),e(Vv,KW),e(KW,ZYo),e(Vv,KYo),e(J,eZo),e(J,Xv),e(Xv,oFe),e(oFe,oZo),e(Xv,rZo),e(Xv,eU),e(eU,tZo),e(Xv,aZo),e(J,nZo),e(J,zv),e(zv,rFe),e(rFe,sZo),e(zv,lZo),e(zv,oU),e(oU,iZo),e(zv,dZo),e(J,cZo),e(J,Qv),e(Qv,tFe),e(tFe,mZo),e(Qv,fZo),e(Qv,rU),e(rU,gZo),e(Qv,hZo),e(J,uZo),e(J,Wv),e(Wv,aFe),e(aFe,pZo),e(Wv,_Zo),e(Wv,tU),e(tU,bZo),e(Wv,vZo),e(J,FZo),e(J,Uv),e(Uv,nFe),e(nFe,TZo),e(Uv,MZo),e(Uv,aU),e(aU,EZo),e(Uv,CZo),e(J,wZo),e(J,Hv),e(Hv,sFe),e(sFe,AZo),e(Hv,LZo),e(Hv,nU),e(nU,yZo),e(Hv,xZo),e(J,$Zo),e(J,Jv),e(Jv,lFe),e(lFe,kZo),e(Jv,SZo),e(Jv,sU),e(sU,RZo),e(Jv,PZo),e(J,BZo),e(J,Yv),e(Yv,iFe),e(iFe,IZo),e(Yv,NZo),e(Yv,lU),e(lU,qZo),e(Yv,jZo),e(J,DZo),e(J,Zv),e(Zv,dFe),e(dFe,GZo),e(Zv,OZo),e(Zv,iU),e(iU,VZo),e(Zv,XZo),e(J,zZo),e(J,Kv),e(Kv,cFe),e(cFe,QZo),e(Kv,WZo),e(Kv,dU),e(dU,UZo),e(Kv,HZo),e(J,JZo),e(J,eF),e(eF,mFe),e(mFe,YZo),e(eF,ZZo),e(eF,cU),e(cU,KZo),e(eF,eKo),e(J,oKo),e(J,oF),e(oF,fFe),e(fFe,rKo),e(oF,tKo),e(oF,mU),e(mU,aKo),e(oF,nKo),e(J,sKo),e(J,rF),e(rF,gFe),e(gFe,lKo),e(rF,iKo),e(rF,fU),e(fU,dKo),e(rF,cKo),e(J,mKo),e(J,tF),e(tF,hFe),e(hFe,fKo),e(tF,gKo),e(tF,gU),e(gU,hKo),e(tF,uKo),e(J,pKo),e(J,aF),e(aF,uFe),e(uFe,_Ko),e(aF,bKo),e(aF,hU),e(hU,vKo),e(aF,FKo),e(J,TKo),e(J,nF),e(nF,pFe),e(pFe,MKo),e(nF,EKo),e(nF,uU),e(uU,CKo),e(nF,wKo),e(J,AKo),e(J,sF),e(sF,_Fe),e(_Fe,LKo),e(sF,yKo),e(sF,pU),e(pU,xKo),e(sF,$Ko),e(J,kKo),e(J,lF),e(lF,bFe),e(bFe,SKo),e(lF,RKo),e(lF,_U),e(_U,PKo),e(lF,BKo),e(J,IKo),e(J,iF),e(iF,vFe),e(vFe,NKo),e(iF,qKo),e(iF,bU),e(bU,jKo),e(iF,DKo),e(J,GKo),e(J,dF),e(dF,FFe),e(FFe,OKo),e(dF,VKo),e(dF,vU),e(vU,XKo),e(dF,zKo),e(J,QKo),e(J,cF),e(cF,TFe),e(TFe,WKo),e(cF,UKo),e(cF,FU),e(FU,HKo),e(cF,JKo),e(J,YKo),e(J,mF),e(mF,MFe),e(MFe,ZKo),e(mF,KKo),e(mF,EFe),e(EFe,eer),e(mF,oer),e(J,rer),e(J,fF),e(fF,CFe),e(CFe,ter),e(fF,aer),e(fF,TU),e(TU,ner),e(fF,ser),e(J,ler),e(J,gF),e(gF,wFe),e(wFe,ier),e(gF,der),e(gF,MU),e(MU,cer),e(gF,mer),e(J,fer),e(J,hF),e(hF,AFe),e(AFe,ger),e(hF,her),e(hF,EU),e(EU,uer),e(hF,per),e(J,_er),e(J,uF),e(uF,LFe),e(LFe,ber),e(uF,ver),e(uF,CU),e(CU,Fer),e(uF,Ter),e(ro,Mer),e(ro,pF),e(pF,Eer),e(pF,yFe),e(yFe,Cer),e(pF,wer),e(pF,xFe),e(xFe,Aer),e(ro,Ler),M(_F,ro,null),b(m,woo,_),b(m,Bd,_),e(Bd,bF),e(bF,$Fe),M(_$,$Fe,null),e(Bd,yer),e(Bd,kFe),e(kFe,xer),b(m,Aoo,_),b(m,jo,_),M(b$,jo,null),e(jo,$er),e(jo,Id),e(Id,ker),e(Id,wU),e(wU,Ser),e(Id,Rer),e(Id,AU),e(AU,Per),e(Id,Ber),e(jo,Ier),e(jo,v$),e(v$,Ner),e(v$,SFe),e(SFe,qer),e(v$,jer),e(jo,Der),e(jo,Et),M(F$,Et,null),e(Et,Ger),e(Et,RFe),e(RFe,Oer),e(Et,Ver),e(Et,Nd),e(Nd,Xer),e(Nd,PFe),e(PFe,zer),e(Nd,Qer),e(Nd,LU),e(LU,Wer),e(Nd,Uer),e(Et,Her),M(vF,Et,null),e(jo,Jer),e(jo,to),M(T$,to,null),e(to,Yer),e(to,BFe),e(BFe,Zer),e(to,Ker),e(to,an),e(an,eor),e(an,IFe),e(IFe,oor),e(an,ror),e(an,NFe),e(NFe,tor),e(an,aor),e(an,qFe),e(qFe,nor),e(an,sor),e(to,lor),e(to,fe),e(fe,FF),e(FF,jFe),e(jFe,ior),e(FF,dor),e(FF,yU),e(yU,cor),e(FF,mor),e(fe,gor),e(fe,TF),e(TF,DFe),e(DFe,hor),e(TF,uor),e(TF,xU),e(xU,por),e(TF,_or),e(fe,bor),e(fe,MF),e(MF,GFe),e(GFe,vor),e(MF,For),e(MF,$U),e($U,Tor),e(MF,Mor),e(fe,Eor),e(fe,EF),e(EF,OFe),e(OFe,Cor),e(EF,wor),e(EF,kU),e(kU,Aor),e(EF,Lor),e(fe,yor),e(fe,CF),e(CF,VFe),e(VFe,xor),e(CF,$or),e(CF,SU),e(SU,kor),e(CF,Sor),e(fe,Ror),e(fe,wF),e(wF,XFe),e(XFe,Por),e(wF,Bor),e(wF,RU),e(RU,Ior),e(wF,Nor),e(fe,qor),e(fe,AF),e(AF,zFe),e(zFe,jor),e(AF,Dor),e(AF,PU),e(PU,Gor),e(AF,Oor),e(fe,Vor),e(fe,LF),e(LF,QFe),e(QFe,Xor),e(LF,zor),e(LF,BU),e(BU,Qor),e(LF,Wor),e(fe,Uor),e(fe,yF),e(yF,WFe),e(WFe,Hor),e(yF,Jor),e(yF,IU),e(IU,Yor),e(yF,Zor),e(fe,Kor),e(fe,xF),e(xF,UFe),e(UFe,err),e(xF,orr),e(xF,NU),e(NU,rrr),e(xF,trr),e(fe,arr),e(fe,$F),e($F,HFe),e(HFe,nrr),e($F,srr),e($F,qU),e(qU,lrr),e($F,irr),e(fe,drr),e(fe,kF),e(kF,JFe),e(JFe,crr),e(kF,mrr),e(kF,jU),e(jU,frr),e(kF,grr),e(fe,hrr),e(fe,SF),e(SF,YFe),e(YFe,urr),e(SF,prr),e(SF,DU),e(DU,_rr),e(SF,brr),e(fe,vrr),e(fe,RF),e(RF,ZFe),e(ZFe,Frr),e(RF,Trr),e(RF,GU),e(GU,Mrr),e(RF,Err),e(fe,Crr),e(fe,PF),e(PF,KFe),e(KFe,wrr),e(PF,Arr),e(PF,OU),e(OU,Lrr),e(PF,yrr),e(fe,xrr),e(fe,BF),e(BF,eTe),e(eTe,$rr),e(BF,krr),e(BF,VU),e(VU,Srr),e(BF,Rrr),e(fe,Prr),e(fe,IF),e(IF,oTe),e(oTe,Brr),e(IF,Irr),e(IF,XU),e(XU,Nrr),e(IF,qrr),e(fe,jrr),e(fe,NF),e(NF,rTe),e(rTe,Drr),e(NF,Grr),e(NF,zU),e(zU,Orr),e(NF,Vrr),e(fe,Xrr),e(fe,qF),e(qF,tTe),e(tTe,zrr),e(qF,Qrr),e(qF,QU),e(QU,Wrr),e(qF,Urr),e(fe,Hrr),e(fe,jF),e(jF,aTe),e(aTe,Jrr),e(jF,Yrr),e(jF,WU),e(WU,Zrr),e(jF,Krr),e(to,etr),e(to,DF),e(DF,otr),e(DF,nTe),e(nTe,rtr),e(DF,ttr),e(DF,sTe),e(sTe,atr),e(to,ntr),M(GF,to,null),b(m,Loo,_),b(m,qd,_),e(qd,OF),e(OF,lTe),M(M$,lTe,null),e(qd,str),e(qd,iTe),e(iTe,ltr),b(m,yoo,_),b(m,Do,_),M(E$,Do,null),e(Do,itr),e(Do,jd),e(jd,dtr),e(jd,UU),e(UU,ctr),e(jd,mtr),e(jd,HU),e(HU,ftr),e(jd,gtr),e(Do,htr),e(Do,C$),e(C$,utr),e(C$,dTe),e(dTe,ptr),e(C$,_tr),e(Do,btr),e(Do,Ct),M(w$,Ct,null),e(Ct,vtr),e(Ct,cTe),e(cTe,Ftr),e(Ct,Ttr),e(Ct,Dd),e(Dd,Mtr),e(Dd,mTe),e(mTe,Etr),e(Dd,Ctr),e(Dd,JU),e(JU,wtr),e(Dd,Atr),e(Ct,Ltr),M(VF,Ct,null),e(Do,ytr),e(Do,ao),M(A$,ao,null),e(ao,xtr),e(ao,fTe),e(fTe,$tr),e(ao,ktr),e(ao,nn),e(nn,Str),e(nn,gTe),e(gTe,Rtr),e(nn,Ptr),e(nn,hTe),e(hTe,Btr),e(nn,Itr),e(nn,uTe),e(uTe,Ntr),e(nn,qtr),e(ao,jtr),e(ao,N),e(N,XF),e(XF,pTe),e(pTe,Dtr),e(XF,Gtr),e(XF,YU),e(YU,Otr),e(XF,Vtr),e(N,Xtr),e(N,zF),e(zF,_Te),e(_Te,ztr),e(zF,Qtr),e(zF,ZU),e(ZU,Wtr),e(zF,Utr),e(N,Htr),e(N,QF),e(QF,bTe),e(bTe,Jtr),e(QF,Ytr),e(QF,KU),e(KU,Ztr),e(QF,Ktr),e(N,ear),e(N,WF),e(WF,vTe),e(vTe,oar),e(WF,rar),e(WF,eH),e(eH,tar),e(WF,aar),e(N,nar),e(N,UF),e(UF,FTe),e(FTe,sar),e(UF,lar),e(UF,oH),e(oH,iar),e(UF,dar),e(N,car),e(N,HF),e(HF,TTe),e(TTe,mar),e(HF,far),e(HF,rH),e(rH,gar),e(HF,har),e(N,uar),e(N,JF),e(JF,MTe),e(MTe,par),e(JF,_ar),e(JF,tH),e(tH,bar),e(JF,Far),e(N,Tar),e(N,YF),e(YF,ETe),e(ETe,Mar),e(YF,Ear),e(YF,aH),e(aH,Car),e(YF,war),e(N,Aar),e(N,ZF),e(ZF,CTe),e(CTe,Lar),e(ZF,yar),e(ZF,nH),e(nH,xar),e(ZF,$ar),e(N,kar),e(N,KF),e(KF,wTe),e(wTe,Sar),e(KF,Rar),e(KF,sH),e(sH,Par),e(KF,Bar),e(N,Iar),e(N,eT),e(eT,ATe),e(ATe,Nar),e(eT,qar),e(eT,lH),e(lH,jar),e(eT,Dar),e(N,Gar),e(N,oT),e(oT,LTe),e(LTe,Oar),e(oT,Var),e(oT,iH),e(iH,Xar),e(oT,zar),e(N,Qar),e(N,rT),e(rT,yTe),e(yTe,War),e(rT,Uar),e(rT,dH),e(dH,Har),e(rT,Jar),e(N,Yar),e(N,tT),e(tT,xTe),e(xTe,Zar),e(tT,Kar),e(tT,cH),e(cH,enr),e(tT,onr),e(N,rnr),e(N,aT),e(aT,$Te),e($Te,tnr),e(aT,anr),e(aT,mH),e(mH,nnr),e(aT,snr),e(N,lnr),e(N,nT),e(nT,kTe),e(kTe,inr),e(nT,dnr),e(nT,fH),e(fH,cnr),e(nT,mnr),e(N,fnr),e(N,sT),e(sT,STe),e(STe,gnr),e(sT,hnr),e(sT,gH),e(gH,unr),e(sT,pnr),e(N,_nr),e(N,lT),e(lT,RTe),e(RTe,bnr),e(lT,vnr),e(lT,hH),e(hH,Fnr),e(lT,Tnr),e(N,Mnr),e(N,iT),e(iT,PTe),e(PTe,Enr),e(iT,Cnr),e(iT,uH),e(uH,wnr),e(iT,Anr),e(N,Lnr),e(N,dT),e(dT,BTe),e(BTe,ynr),e(dT,xnr),e(dT,pH),e(pH,$nr),e(dT,knr),e(N,Snr),e(N,cT),e(cT,ITe),e(ITe,Rnr),e(cT,Pnr),e(cT,_H),e(_H,Bnr),e(cT,Inr),e(N,Nnr),e(N,mT),e(mT,NTe),e(NTe,qnr),e(mT,jnr),e(mT,bH),e(bH,Dnr),e(mT,Gnr),e(N,Onr),e(N,fT),e(fT,qTe),e(qTe,Vnr),e(fT,Xnr),e(fT,vH),e(vH,znr),e(fT,Qnr),e(N,Wnr),e(N,gT),e(gT,jTe),e(jTe,Unr),e(gT,Hnr),e(gT,FH),e(FH,Jnr),e(gT,Ynr),e(N,Znr),e(N,hT),e(hT,DTe),e(DTe,Knr),e(hT,esr),e(hT,TH),e(TH,osr),e(hT,rsr),e(N,tsr),e(N,uT),e(uT,GTe),e(GTe,asr),e(uT,nsr),e(uT,MH),e(MH,ssr),e(uT,lsr),e(N,isr),e(N,pT),e(pT,OTe),e(OTe,dsr),e(pT,csr),e(pT,EH),e(EH,msr),e(pT,fsr),e(N,gsr),e(N,_T),e(_T,VTe),e(VTe,hsr),e(_T,usr),e(_T,CH),e(CH,psr),e(_T,_sr),e(N,bsr),e(N,bT),e(bT,XTe),e(XTe,vsr),e(bT,Fsr),e(bT,wH),e(wH,Tsr),e(bT,Msr),e(N,Esr),e(N,vT),e(vT,zTe),e(zTe,Csr),e(vT,wsr),e(vT,AH),e(AH,Asr),e(vT,Lsr),e(N,ysr),e(N,FT),e(FT,QTe),e(QTe,xsr),e(FT,$sr),e(FT,LH),e(LH,ksr),e(FT,Ssr),e(N,Rsr),e(N,TT),e(TT,WTe),e(WTe,Psr),e(TT,Bsr),e(TT,yH),e(yH,Isr),e(TT,Nsr),e(N,qsr),e(N,MT),e(MT,UTe),e(UTe,jsr),e(MT,Dsr),e(MT,xH),e(xH,Gsr),e(MT,Osr),e(N,Vsr),e(N,ET),e(ET,HTe),e(HTe,Xsr),e(ET,zsr),e(ET,$H),e($H,Qsr),e(ET,Wsr),e(N,Usr),e(N,CT),e(CT,JTe),e(JTe,Hsr),e(CT,Jsr),e(CT,kH),e(kH,Ysr),e(CT,Zsr),e(N,Ksr),e(N,wT),e(wT,YTe),e(YTe,elr),e(wT,olr),e(wT,SH),e(SH,rlr),e(wT,tlr),e(N,alr),e(N,AT),e(AT,ZTe),e(ZTe,nlr),e(AT,slr),e(AT,RH),e(RH,llr),e(AT,ilr),e(N,dlr),e(N,LT),e(LT,KTe),e(KTe,clr),e(LT,mlr),e(LT,PH),e(PH,flr),e(LT,glr),e(N,hlr),e(N,yT),e(yT,eMe),e(eMe,ulr),e(yT,plr),e(yT,BH),e(BH,_lr),e(yT,blr),e(N,vlr),e(N,xT),e(xT,oMe),e(oMe,Flr),e(xT,Tlr),e(xT,IH),e(IH,Mlr),e(xT,Elr),e(N,Clr),e(N,$T),e($T,rMe),e(rMe,wlr),e($T,Alr),e($T,NH),e(NH,Llr),e($T,ylr),e(N,xlr),e(N,kT),e(kT,tMe),e(tMe,$lr),e(kT,klr),e(kT,qH),e(qH,Slr),e(kT,Rlr),e(N,Plr),e(N,ST),e(ST,aMe),e(aMe,Blr),e(ST,Ilr),e(ST,jH),e(jH,Nlr),e(ST,qlr),e(N,jlr),e(N,RT),e(RT,nMe),e(nMe,Dlr),e(RT,Glr),e(RT,DH),e(DH,Olr),e(RT,Vlr),e(N,Xlr),e(N,PT),e(PT,sMe),e(sMe,zlr),e(PT,Qlr),e(PT,GH),e(GH,Wlr),e(PT,Ulr),e(N,Hlr),e(N,BT),e(BT,lMe),e(lMe,Jlr),e(BT,Ylr),e(BT,OH),e(OH,Zlr),e(BT,Klr),e(N,eir),e(N,IT),e(IT,iMe),e(iMe,oir),e(IT,rir),e(IT,VH),e(VH,tir),e(IT,air),e(N,nir),e(N,NT),e(NT,dMe),e(dMe,sir),e(NT,lir),e(NT,XH),e(XH,iir),e(NT,dir),e(N,cir),e(N,qT),e(qT,cMe),e(cMe,mir),e(qT,fir),e(qT,zH),e(zH,gir),e(qT,hir),e(N,uir),e(N,jT),e(jT,mMe),e(mMe,pir),e(jT,_ir),e(jT,QH),e(QH,bir),e(jT,vir),e(N,Fir),e(N,DT),e(DT,fMe),e(fMe,Tir),e(DT,Mir),e(DT,WH),e(WH,Eir),e(DT,Cir),e(N,wir),e(N,GT),e(GT,gMe),e(gMe,Air),e(GT,Lir),e(GT,UH),e(UH,yir),e(GT,xir),e(N,$ir),e(N,OT),e(OT,hMe),e(hMe,kir),e(OT,Sir),e(OT,HH),e(HH,Rir),e(OT,Pir),e(N,Bir),e(N,VT),e(VT,uMe),e(uMe,Iir),e(VT,Nir),e(VT,JH),e(JH,qir),e(VT,jir),e(N,Dir),e(N,XT),e(XT,pMe),e(pMe,Gir),e(XT,Oir),e(XT,YH),e(YH,Vir),e(XT,Xir),e(ao,zir),e(ao,zT),e(zT,Qir),e(zT,_Me),e(_Me,Wir),e(zT,Uir),e(zT,bMe),e(bMe,Hir),e(ao,Jir),M(QT,ao,null),b(m,xoo,_),b(m,Gd,_),e(Gd,WT),e(WT,vMe),M(L$,vMe,null),e(Gd,Yir),e(Gd,FMe),e(FMe,Zir),b(m,$oo,_),b(m,Go,_),M(y$,Go,null),e(Go,Kir),e(Go,Od),e(Od,edr),e(Od,ZH),e(ZH,odr),e(Od,rdr),e(Od,KH),e(KH,tdr),e(Od,adr),e(Go,ndr),e(Go,x$),e(x$,sdr),e(x$,TMe),e(TMe,ldr),e(x$,idr),e(Go,ddr),e(Go,wt),M($$,wt,null),e(wt,cdr),e(wt,MMe),e(MMe,mdr),e(wt,fdr),e(wt,Vd),e(Vd,gdr),e(Vd,EMe),e(EMe,hdr),e(Vd,udr),e(Vd,eJ),e(eJ,pdr),e(Vd,_dr),e(wt,bdr),M(UT,wt,null),e(Go,vdr),e(Go,no),M(k$,no,null),e(no,Fdr),e(no,CMe),e(CMe,Tdr),e(no,Mdr),e(no,sn),e(sn,Edr),e(sn,wMe),e(wMe,Cdr),e(sn,wdr),e(sn,AMe),e(AMe,Adr),e(sn,Ldr),e(sn,LMe),e(LMe,ydr),e(sn,xdr),e(no,$dr),e(no,K),e(K,HT),e(HT,yMe),e(yMe,kdr),e(HT,Sdr),e(HT,oJ),e(oJ,Rdr),e(HT,Pdr),e(K,Bdr),e(K,JT),e(JT,xMe),e(xMe,Idr),e(JT,Ndr),e(JT,rJ),e(rJ,qdr),e(JT,jdr),e(K,Ddr),e(K,YT),e(YT,$Me),e($Me,Gdr),e(YT,Odr),e(YT,tJ),e(tJ,Vdr),e(YT,Xdr),e(K,zdr),e(K,ZT),e(ZT,kMe),e(kMe,Qdr),e(ZT,Wdr),e(ZT,aJ),e(aJ,Udr),e(ZT,Hdr),e(K,Jdr),e(K,KT),e(KT,SMe),e(SMe,Ydr),e(KT,Zdr),e(KT,nJ),e(nJ,Kdr),e(KT,ecr),e(K,ocr),e(K,eM),e(eM,RMe),e(RMe,rcr),e(eM,tcr),e(eM,sJ),e(sJ,acr),e(eM,ncr),e(K,scr),e(K,oM),e(oM,PMe),e(PMe,lcr),e(oM,icr),e(oM,lJ),e(lJ,dcr),e(oM,ccr),e(K,mcr),e(K,rM),e(rM,BMe),e(BMe,fcr),e(rM,gcr),e(rM,iJ),e(iJ,hcr),e(rM,ucr),e(K,pcr),e(K,tM),e(tM,IMe),e(IMe,_cr),e(tM,bcr),e(tM,dJ),e(dJ,vcr),e(tM,Fcr),e(K,Tcr),e(K,aM),e(aM,NMe),e(NMe,Mcr),e(aM,Ecr),e(aM,cJ),e(cJ,Ccr),e(aM,wcr),e(K,Acr),e(K,nM),e(nM,qMe),e(qMe,Lcr),e(nM,ycr),e(nM,mJ),e(mJ,xcr),e(nM,$cr),e(K,kcr),e(K,sM),e(sM,jMe),e(jMe,Scr),e(sM,Rcr),e(sM,fJ),e(fJ,Pcr),e(sM,Bcr),e(K,Icr),e(K,lM),e(lM,DMe),e(DMe,Ncr),e(lM,qcr),e(lM,gJ),e(gJ,jcr),e(lM,Dcr),e(K,Gcr),e(K,iM),e(iM,GMe),e(GMe,Ocr),e(iM,Vcr),e(iM,hJ),e(hJ,Xcr),e(iM,zcr),e(K,Qcr),e(K,dM),e(dM,OMe),e(OMe,Wcr),e(dM,Ucr),e(dM,uJ),e(uJ,Hcr),e(dM,Jcr),e(K,Ycr),e(K,cM),e(cM,VMe),e(VMe,Zcr),e(cM,Kcr),e(cM,pJ),e(pJ,emr),e(cM,omr),e(K,rmr),e(K,mM),e(mM,XMe),e(XMe,tmr),e(mM,amr),e(mM,_J),e(_J,nmr),e(mM,smr),e(K,lmr),e(K,fM),e(fM,zMe),e(zMe,imr),e(fM,dmr),e(fM,bJ),e(bJ,cmr),e(fM,mmr),e(K,fmr),e(K,gM),e(gM,QMe),e(QMe,gmr),e(gM,hmr),e(gM,vJ),e(vJ,umr),e(gM,pmr),e(K,_mr),e(K,hM),e(hM,WMe),e(WMe,bmr),e(hM,vmr),e(hM,FJ),e(FJ,Fmr),e(hM,Tmr),e(K,Mmr),e(K,uM),e(uM,UMe),e(UMe,Emr),e(uM,Cmr),e(uM,TJ),e(TJ,wmr),e(uM,Amr),e(K,Lmr),e(K,pM),e(pM,HMe),e(HMe,ymr),e(pM,xmr),e(pM,MJ),e(MJ,$mr),e(pM,kmr),e(K,Smr),e(K,_M),e(_M,JMe),e(JMe,Rmr),e(_M,Pmr),e(_M,EJ),e(EJ,Bmr),e(_M,Imr),e(K,Nmr),e(K,bM),e(bM,YMe),e(YMe,qmr),e(bM,jmr),e(bM,CJ),e(CJ,Dmr),e(bM,Gmr),e(K,Omr),e(K,vM),e(vM,ZMe),e(ZMe,Vmr),e(vM,Xmr),e(vM,wJ),e(wJ,zmr),e(vM,Qmr),e(K,Wmr),e(K,FM),e(FM,KMe),e(KMe,Umr),e(FM,Hmr),e(FM,AJ),e(AJ,Jmr),e(FM,Ymr),e(K,Zmr),e(K,TM),e(TM,eEe),e(eEe,Kmr),e(TM,efr),e(TM,LJ),e(LJ,ofr),e(TM,rfr),e(K,tfr),e(K,MM),e(MM,oEe),e(oEe,afr),e(MM,nfr),e(MM,yJ),e(yJ,sfr),e(MM,lfr),e(K,ifr),e(K,EM),e(EM,rEe),e(rEe,dfr),e(EM,cfr),e(EM,xJ),e(xJ,mfr),e(EM,ffr),e(K,gfr),e(K,CM),e(CM,tEe),e(tEe,hfr),e(CM,ufr),e(CM,$J),e($J,pfr),e(CM,_fr),e(K,bfr),e(K,wM),e(wM,aEe),e(aEe,vfr),e(wM,Ffr),e(wM,kJ),e(kJ,Tfr),e(wM,Mfr),e(K,Efr),e(K,AM),e(AM,nEe),e(nEe,Cfr),e(AM,wfr),e(AM,SJ),e(SJ,Afr),e(AM,Lfr),e(no,yfr),e(no,LM),e(LM,xfr),e(LM,sEe),e(sEe,$fr),e(LM,kfr),e(LM,lEe),e(lEe,Sfr),e(no,Rfr),M(yM,no,null),b(m,koo,_),b(m,Xd,_),e(Xd,xM),e(xM,iEe),M(S$,iEe,null),e(Xd,Pfr),e(Xd,dEe),e(dEe,Bfr),b(m,Soo,_),b(m,Oo,_),M(R$,Oo,null),e(Oo,Ifr),e(Oo,zd),e(zd,Nfr),e(zd,RJ),e(RJ,qfr),e(zd,jfr),e(zd,PJ),e(PJ,Dfr),e(zd,Gfr),e(Oo,Ofr),e(Oo,P$),e(P$,Vfr),e(P$,cEe),e(cEe,Xfr),e(P$,zfr),e(Oo,Qfr),e(Oo,At),M(B$,At,null),e(At,Wfr),e(At,mEe),e(mEe,Ufr),e(At,Hfr),e(At,Qd),e(Qd,Jfr),e(Qd,fEe),e(fEe,Yfr),e(Qd,Zfr),e(Qd,BJ),e(BJ,Kfr),e(Qd,egr),e(At,ogr),M($M,At,null),e(Oo,rgr),e(Oo,so),M(I$,so,null),e(so,tgr),e(so,gEe),e(gEe,agr),e(so,ngr),e(so,ln),e(ln,sgr),e(ln,hEe),e(hEe,lgr),e(ln,igr),e(ln,uEe),e(uEe,dgr),e(ln,cgr),e(ln,pEe),e(pEe,mgr),e(ln,fgr),e(so,ggr),e(so,Ue),e(Ue,kM),e(kM,_Ee),e(_Ee,hgr),e(kM,ugr),e(kM,IJ),e(IJ,pgr),e(kM,_gr),e(Ue,bgr),e(Ue,SM),e(SM,bEe),e(bEe,vgr),e(SM,Fgr),e(SM,NJ),e(NJ,Tgr),e(SM,Mgr),e(Ue,Egr),e(Ue,RM),e(RM,vEe),e(vEe,Cgr),e(RM,wgr),e(RM,qJ),e(qJ,Agr),e(RM,Lgr),e(Ue,ygr),e(Ue,PM),e(PM,FEe),e(FEe,xgr),e(PM,$gr),e(PM,jJ),e(jJ,kgr),e(PM,Sgr),e(Ue,Rgr),e(Ue,BM),e(BM,TEe),e(TEe,Pgr),e(BM,Bgr),e(BM,DJ),e(DJ,Igr),e(BM,Ngr),e(Ue,qgr),e(Ue,IM),e(IM,MEe),e(MEe,jgr),e(IM,Dgr),e(IM,GJ),e(GJ,Ggr),e(IM,Ogr),e(Ue,Vgr),e(Ue,NM),e(NM,EEe),e(EEe,Xgr),e(NM,zgr),e(NM,OJ),e(OJ,Qgr),e(NM,Wgr),e(so,Ugr),e(so,qM),e(qM,Hgr),e(qM,CEe),e(CEe,Jgr),e(qM,Ygr),e(qM,wEe),e(wEe,Zgr),e(so,Kgr),M(jM,so,null),b(m,Roo,_),b(m,Wd,_),e(Wd,DM),e(DM,AEe),M(N$,AEe,null),e(Wd,ehr),e(Wd,LEe),e(LEe,ohr),b(m,Poo,_),b(m,Vo,_),M(q$,Vo,null),e(Vo,rhr),e(Vo,Ud),e(Ud,thr),e(Ud,VJ),e(VJ,ahr),e(Ud,nhr),e(Ud,XJ),e(XJ,shr),e(Ud,lhr),e(Vo,ihr),e(Vo,j$),e(j$,dhr),e(j$,yEe),e(yEe,chr),e(j$,mhr),e(Vo,fhr),e(Vo,Lt),M(D$,Lt,null),e(Lt,ghr),e(Lt,xEe),e(xEe,hhr),e(Lt,uhr),e(Lt,Hd),e(Hd,phr),e(Hd,$Ee),e($Ee,_hr),e(Hd,bhr),e(Hd,zJ),e(zJ,vhr),e(Hd,Fhr),e(Lt,Thr),M(GM,Lt,null),e(Vo,Mhr),e(Vo,lo),M(G$,lo,null),e(lo,Ehr),e(lo,kEe),e(kEe,Chr),e(lo,whr),e(lo,dn),e(dn,Ahr),e(dn,SEe),e(SEe,Lhr),e(dn,yhr),e(dn,REe),e(REe,xhr),e(dn,$hr),e(dn,PEe),e(PEe,khr),e(dn,Shr),e(lo,Rhr),e(lo,H),e(H,OM),e(OM,BEe),e(BEe,Phr),e(OM,Bhr),e(OM,QJ),e(QJ,Ihr),e(OM,Nhr),e(H,qhr),e(H,VM),e(VM,IEe),e(IEe,jhr),e(VM,Dhr),e(VM,WJ),e(WJ,Ghr),e(VM,Ohr),e(H,Vhr),e(H,XM),e(XM,NEe),e(NEe,Xhr),e(XM,zhr),e(XM,UJ),e(UJ,Qhr),e(XM,Whr),e(H,Uhr),e(H,zM),e(zM,qEe),e(qEe,Hhr),e(zM,Jhr),e(zM,HJ),e(HJ,Yhr),e(zM,Zhr),e(H,Khr),e(H,QM),e(QM,jEe),e(jEe,eur),e(QM,our),e(QM,JJ),e(JJ,rur),e(QM,tur),e(H,aur),e(H,WM),e(WM,DEe),e(DEe,nur),e(WM,sur),e(WM,YJ),e(YJ,lur),e(WM,iur),e(H,dur),e(H,UM),e(UM,GEe),e(GEe,cur),e(UM,mur),e(UM,ZJ),e(ZJ,fur),e(UM,gur),e(H,hur),e(H,HM),e(HM,OEe),e(OEe,uur),e(HM,pur),e(HM,KJ),e(KJ,_ur),e(HM,bur),e(H,vur),e(H,JM),e(JM,VEe),e(VEe,Fur),e(JM,Tur),e(JM,eY),e(eY,Mur),e(JM,Eur),e(H,Cur),e(H,YM),e(YM,XEe),e(XEe,wur),e(YM,Aur),e(YM,oY),e(oY,Lur),e(YM,yur),e(H,xur),e(H,ZM),e(ZM,zEe),e(zEe,$ur),e(ZM,kur),e(ZM,rY),e(rY,Sur),e(ZM,Rur),e(H,Pur),e(H,KM),e(KM,QEe),e(QEe,Bur),e(KM,Iur),e(KM,tY),e(tY,Nur),e(KM,qur),e(H,jur),e(H,eE),e(eE,WEe),e(WEe,Dur),e(eE,Gur),e(eE,aY),e(aY,Our),e(eE,Vur),e(H,Xur),e(H,oE),e(oE,UEe),e(UEe,zur),e(oE,Qur),e(oE,nY),e(nY,Wur),e(oE,Uur),e(H,Hur),e(H,rE),e(rE,HEe),e(HEe,Jur),e(rE,Yur),e(rE,sY),e(sY,Zur),e(rE,Kur),e(H,epr),e(H,tE),e(tE,JEe),e(JEe,opr),e(tE,rpr),e(tE,lY),e(lY,tpr),e(tE,apr),e(H,npr),e(H,aE),e(aE,YEe),e(YEe,spr),e(aE,lpr),e(aE,iY),e(iY,ipr),e(aE,dpr),e(H,cpr),e(H,nE),e(nE,ZEe),e(ZEe,mpr),e(nE,fpr),e(nE,dY),e(dY,gpr),e(nE,hpr),e(H,upr),e(H,sE),e(sE,KEe),e(KEe,ppr),e(sE,_pr),e(sE,cY),e(cY,bpr),e(sE,vpr),e(H,Fpr),e(H,lE),e(lE,e4e),e(e4e,Tpr),e(lE,Mpr),e(lE,mY),e(mY,Epr),e(lE,Cpr),e(H,wpr),e(H,iE),e(iE,o4e),e(o4e,Apr),e(iE,Lpr),e(iE,fY),e(fY,ypr),e(iE,xpr),e(H,$pr),e(H,dE),e(dE,r4e),e(r4e,kpr),e(dE,Spr),e(dE,gY),e(gY,Rpr),e(dE,Ppr),e(H,Bpr),e(H,cE),e(cE,t4e),e(t4e,Ipr),e(cE,Npr),e(cE,hY),e(hY,qpr),e(cE,jpr),e(H,Dpr),e(H,mE),e(mE,a4e),e(a4e,Gpr),e(mE,Opr),e(mE,uY),e(uY,Vpr),e(mE,Xpr),e(H,zpr),e(H,fE),e(fE,n4e),e(n4e,Qpr),e(fE,Wpr),e(fE,pY),e(pY,Upr),e(fE,Hpr),e(H,Jpr),e(H,gE),e(gE,s4e),e(s4e,Ypr),e(gE,Zpr),e(gE,_Y),e(_Y,Kpr),e(gE,e_r),e(H,o_r),e(H,hE),e(hE,l4e),e(l4e,r_r),e(hE,t_r),e(hE,bY),e(bY,a_r),e(hE,n_r),e(H,s_r),e(H,uE),e(uE,i4e),e(i4e,l_r),e(uE,i_r),e(uE,vY),e(vY,d_r),e(uE,c_r),e(H,m_r),e(H,pE),e(pE,d4e),e(d4e,f_r),e(pE,g_r),e(pE,FY),e(FY,h_r),e(pE,u_r),e(H,p_r),e(H,_E),e(_E,c4e),e(c4e,__r),e(_E,b_r),e(_E,TY),e(TY,v_r),e(_E,F_r),e(H,T_r),e(H,bE),e(bE,m4e),e(m4e,M_r),e(bE,E_r),e(bE,MY),e(MY,C_r),e(bE,w_r),e(H,A_r),e(H,vE),e(vE,f4e),e(f4e,L_r),e(vE,y_r),e(vE,EY),e(EY,x_r),e(vE,$_r),e(H,k_r),e(H,FE),e(FE,g4e),e(g4e,S_r),e(FE,R_r),e(FE,CY),e(CY,P_r),e(FE,B_r),e(H,I_r),e(H,TE),e(TE,h4e),e(h4e,N_r),e(TE,q_r),e(TE,wY),e(wY,j_r),e(TE,D_r),e(H,G_r),e(H,ME),e(ME,u4e),e(u4e,O_r),e(ME,V_r),e(ME,AY),e(AY,X_r),e(ME,z_r),e(H,Q_r),e(H,EE),e(EE,p4e),e(p4e,W_r),e(EE,U_r),e(EE,LY),e(LY,H_r),e(EE,J_r),e(H,Y_r),e(H,CE),e(CE,_4e),e(_4e,Z_r),e(CE,K_r),e(CE,yY),e(yY,e1r),e(CE,o1r),e(H,r1r),e(H,wE),e(wE,b4e),e(b4e,t1r),e(wE,a1r),e(wE,xY),e(xY,n1r),e(wE,s1r),e(H,l1r),e(H,AE),e(AE,v4e),e(v4e,i1r),e(AE,d1r),e(AE,$Y),e($Y,c1r),e(AE,m1r),e(H,f1r),e(H,LE),e(LE,F4e),e(F4e,g1r),e(LE,h1r),e(LE,kY),e(kY,u1r),e(LE,p1r),e(lo,_1r),e(lo,yE),e(yE,b1r),e(yE,T4e),e(T4e,v1r),e(yE,F1r),e(yE,M4e),e(M4e,T1r),e(lo,M1r),M(xE,lo,null),b(m,Boo,_),b(m,Jd,_),e(Jd,$E),e($E,E4e),M(O$,E4e,null),e(Jd,E1r),e(Jd,C4e),e(C4e,C1r),b(m,Ioo,_),b(m,Xo,_),M(V$,Xo,null),e(Xo,w1r),e(Xo,Yd),e(Yd,A1r),e(Yd,SY),e(SY,L1r),e(Yd,y1r),e(Yd,RY),e(RY,x1r),e(Yd,$1r),e(Xo,k1r),e(Xo,X$),e(X$,S1r),e(X$,w4e),e(w4e,R1r),e(X$,P1r),e(Xo,B1r),e(Xo,yt),M(z$,yt,null),e(yt,I1r),e(yt,A4e),e(A4e,N1r),e(yt,q1r),e(yt,Zd),e(Zd,j1r),e(Zd,L4e),e(L4e,D1r),e(Zd,G1r),e(Zd,PY),e(PY,O1r),e(Zd,V1r),e(yt,X1r),M(kE,yt,null),e(Xo,z1r),e(Xo,io),M(Q$,io,null),e(io,Q1r),e(io,y4e),e(y4e,W1r),e(io,U1r),e(io,cn),e(cn,H1r),e(cn,x4e),e(x4e,J1r),e(cn,Y1r),e(cn,$4e),e($4e,Z1r),e(cn,K1r),e(cn,k4e),e(k4e,ebr),e(cn,obr),e(io,rbr),e(io,V),e(V,SE),e(SE,S4e),e(S4e,tbr),e(SE,abr),e(SE,BY),e(BY,nbr),e(SE,sbr),e(V,lbr),e(V,RE),e(RE,R4e),e(R4e,ibr),e(RE,dbr),e(RE,IY),e(IY,cbr),e(RE,mbr),e(V,fbr),e(V,PE),e(PE,P4e),e(P4e,gbr),e(PE,hbr),e(PE,NY),e(NY,ubr),e(PE,pbr),e(V,_br),e(V,BE),e(BE,B4e),e(B4e,bbr),e(BE,vbr),e(BE,qY),e(qY,Fbr),e(BE,Tbr),e(V,Mbr),e(V,IE),e(IE,I4e),e(I4e,Ebr),e(IE,Cbr),e(IE,jY),e(jY,wbr),e(IE,Abr),e(V,Lbr),e(V,NE),e(NE,N4e),e(N4e,ybr),e(NE,xbr),e(NE,DY),e(DY,$br),e(NE,kbr),e(V,Sbr),e(V,qE),e(qE,q4e),e(q4e,Rbr),e(qE,Pbr),e(qE,GY),e(GY,Bbr),e(qE,Ibr),e(V,Nbr),e(V,jE),e(jE,j4e),e(j4e,qbr),e(jE,jbr),e(jE,OY),e(OY,Dbr),e(jE,Gbr),e(V,Obr),e(V,DE),e(DE,D4e),e(D4e,Vbr),e(DE,Xbr),e(DE,VY),e(VY,zbr),e(DE,Qbr),e(V,Wbr),e(V,GE),e(GE,G4e),e(G4e,Ubr),e(GE,Hbr),e(GE,XY),e(XY,Jbr),e(GE,Ybr),e(V,Zbr),e(V,OE),e(OE,O4e),e(O4e,Kbr),e(OE,e2r),e(OE,zY),e(zY,o2r),e(OE,r2r),e(V,t2r),e(V,VE),e(VE,V4e),e(V4e,a2r),e(VE,n2r),e(VE,QY),e(QY,s2r),e(VE,l2r),e(V,i2r),e(V,XE),e(XE,X4e),e(X4e,d2r),e(XE,c2r),e(XE,WY),e(WY,m2r),e(XE,f2r),e(V,g2r),e(V,zE),e(zE,z4e),e(z4e,h2r),e(zE,u2r),e(zE,UY),e(UY,p2r),e(zE,_2r),e(V,b2r),e(V,QE),e(QE,Q4e),e(Q4e,v2r),e(QE,F2r),e(QE,HY),e(HY,T2r),e(QE,M2r),e(V,E2r),e(V,WE),e(WE,W4e),e(W4e,C2r),e(WE,w2r),e(WE,JY),e(JY,A2r),e(WE,L2r),e(V,y2r),e(V,UE),e(UE,U4e),e(U4e,x2r),e(UE,$2r),e(UE,YY),e(YY,k2r),e(UE,S2r),e(V,R2r),e(V,HE),e(HE,H4e),e(H4e,P2r),e(HE,B2r),e(HE,ZY),e(ZY,I2r),e(HE,N2r),e(V,q2r),e(V,JE),e(JE,J4e),e(J4e,j2r),e(JE,D2r),e(JE,KY),e(KY,G2r),e(JE,O2r),e(V,V2r),e(V,YE),e(YE,Y4e),e(Y4e,X2r),e(YE,z2r),e(YE,eZ),e(eZ,Q2r),e(YE,W2r),e(V,U2r),e(V,ZE),e(ZE,Z4e),e(Z4e,H2r),e(ZE,J2r),e(ZE,oZ),e(oZ,Y2r),e(ZE,Z2r),e(V,K2r),e(V,KE),e(KE,K4e),e(K4e,evr),e(KE,ovr),e(KE,rZ),e(rZ,rvr),e(KE,tvr),e(V,avr),e(V,e4),e(e4,eCe),e(eCe,nvr),e(e4,svr),e(e4,tZ),e(tZ,lvr),e(e4,ivr),e(V,dvr),e(V,o4),e(o4,oCe),e(oCe,cvr),e(o4,mvr),e(o4,aZ),e(aZ,fvr),e(o4,gvr),e(V,hvr),e(V,r4),e(r4,rCe),e(rCe,uvr),e(r4,pvr),e(r4,nZ),e(nZ,_vr),e(r4,bvr),e(V,vvr),e(V,t4),e(t4,tCe),e(tCe,Fvr),e(t4,Tvr),e(t4,sZ),e(sZ,Mvr),e(t4,Evr),e(V,Cvr),e(V,a4),e(a4,aCe),e(aCe,wvr),e(a4,Avr),e(a4,lZ),e(lZ,Lvr),e(a4,yvr),e(V,xvr),e(V,n4),e(n4,nCe),e(nCe,$vr),e(n4,kvr),e(n4,iZ),e(iZ,Svr),e(n4,Rvr),e(V,Pvr),e(V,s4),e(s4,sCe),e(sCe,Bvr),e(s4,Ivr),e(s4,dZ),e(dZ,Nvr),e(s4,qvr),e(V,jvr),e(V,l4),e(l4,lCe),e(lCe,Dvr),e(l4,Gvr),e(l4,cZ),e(cZ,Ovr),e(l4,Vvr),e(V,Xvr),e(V,i4),e(i4,iCe),e(iCe,zvr),e(i4,Qvr),e(i4,mZ),e(mZ,Wvr),e(i4,Uvr),e(V,Hvr),e(V,d4),e(d4,dCe),e(dCe,Jvr),e(d4,Yvr),e(d4,fZ),e(fZ,Zvr),e(d4,Kvr),e(V,eFr),e(V,c4),e(c4,cCe),e(cCe,oFr),e(c4,rFr),e(c4,gZ),e(gZ,tFr),e(c4,aFr),e(V,nFr),e(V,m4),e(m4,mCe),e(mCe,sFr),e(m4,lFr),e(m4,hZ),e(hZ,iFr),e(m4,dFr),e(V,cFr),e(V,f4),e(f4,fCe),e(fCe,mFr),e(f4,fFr),e(f4,uZ),e(uZ,gFr),e(f4,hFr),e(V,uFr),e(V,g4),e(g4,gCe),e(gCe,pFr),e(g4,_Fr),e(g4,pZ),e(pZ,bFr),e(g4,vFr),e(V,FFr),e(V,h4),e(h4,hCe),e(hCe,TFr),e(h4,MFr),e(h4,_Z),e(_Z,EFr),e(h4,CFr),e(V,wFr),e(V,u4),e(u4,uCe),e(uCe,AFr),e(u4,LFr),e(u4,bZ),e(bZ,yFr),e(u4,xFr),e(V,$Fr),e(V,p4),e(p4,pCe),e(pCe,kFr),e(p4,SFr),e(p4,vZ),e(vZ,RFr),e(p4,PFr),e(V,BFr),e(V,_4),e(_4,_Ce),e(_Ce,IFr),e(_4,NFr),e(_4,FZ),e(FZ,qFr),e(_4,jFr),e(V,DFr),e(V,b4),e(b4,bCe),e(bCe,GFr),e(b4,OFr),e(b4,TZ),e(TZ,VFr),e(b4,XFr),e(V,zFr),e(V,v4),e(v4,vCe),e(vCe,QFr),e(v4,WFr),e(v4,MZ),e(MZ,UFr),e(v4,HFr),e(V,JFr),e(V,F4),e(F4,FCe),e(FCe,YFr),e(F4,ZFr),e(F4,EZ),e(EZ,KFr),e(F4,eTr),e(V,oTr),e(V,T4),e(T4,TCe),e(TCe,rTr),e(T4,tTr),e(T4,CZ),e(CZ,aTr),e(T4,nTr),e(V,sTr),e(V,M4),e(M4,MCe),e(MCe,lTr),e(M4,iTr),e(M4,wZ),e(wZ,dTr),e(M4,cTr),e(V,mTr),e(V,E4),e(E4,ECe),e(ECe,fTr),e(E4,gTr),e(E4,AZ),e(AZ,hTr),e(E4,uTr),e(io,pTr),e(io,C4),e(C4,_Tr),e(C4,CCe),e(CCe,bTr),e(C4,vTr),e(C4,wCe),e(wCe,FTr),e(io,TTr),M(w4,io,null),b(m,Noo,_),b(m,Kd,_),e(Kd,A4),e(A4,ACe),M(W$,ACe,null),e(Kd,MTr),e(Kd,LCe),e(LCe,ETr),b(m,qoo,_),b(m,zo,_),M(U$,zo,null),e(zo,CTr),e(zo,ec),e(ec,wTr),e(ec,LZ),e(LZ,ATr),e(ec,LTr),e(ec,yZ),e(yZ,yTr),e(ec,xTr),e(zo,$Tr),e(zo,H$),e(H$,kTr),e(H$,yCe),e(yCe,STr),e(H$,RTr),e(zo,PTr),e(zo,xt),M(J$,xt,null),e(xt,BTr),e(xt,xCe),e(xCe,ITr),e(xt,NTr),e(xt,oc),e(oc,qTr),e(oc,$Ce),e($Ce,jTr),e(oc,DTr),e(oc,xZ),e(xZ,GTr),e(oc,OTr),e(xt,VTr),M(L4,xt,null),e(zo,XTr),e(zo,co),M(Y$,co,null),e(co,zTr),e(co,kCe),e(kCe,QTr),e(co,WTr),e(co,mn),e(mn,UTr),e(mn,SCe),e(SCe,HTr),e(mn,JTr),e(mn,RCe),e(RCe,YTr),e(mn,ZTr),e(mn,PCe),e(PCe,KTr),e(mn,eMr),e(co,oMr),e(co,BCe),e(BCe,y4),e(y4,ICe),e(ICe,rMr),e(y4,tMr),e(y4,$Z),e($Z,aMr),e(y4,nMr),e(co,sMr),e(co,x4),e(x4,lMr),e(x4,NCe),e(NCe,iMr),e(x4,dMr),e(x4,qCe),e(qCe,cMr),e(co,mMr),M($4,co,null),b(m,joo,_),b(m,rc,_),e(rc,k4),e(k4,jCe),M(Z$,jCe,null),e(rc,fMr),e(rc,DCe),e(DCe,gMr),b(m,Doo,_),b(m,Qo,_),M(K$,Qo,null),e(Qo,hMr),e(Qo,tc),e(tc,uMr),e(tc,kZ),e(kZ,pMr),e(tc,_Mr),e(tc,SZ),e(SZ,bMr),e(tc,vMr),e(Qo,FMr),e(Qo,ek),e(ek,TMr),e(ek,GCe),e(GCe,MMr),e(ek,EMr),e(Qo,CMr),e(Qo,$t),M(ok,$t,null),e($t,wMr),e($t,OCe),e(OCe,AMr),e($t,LMr),e($t,ac),e(ac,yMr),e(ac,VCe),e(VCe,xMr),e(ac,$Mr),e(ac,RZ),e(RZ,kMr),e(ac,SMr),e($t,RMr),M(S4,$t,null),e(Qo,PMr),e(Qo,mo),M(rk,mo,null),e(mo,BMr),e(mo,XCe),e(XCe,IMr),e(mo,NMr),e(mo,fn),e(fn,qMr),e(fn,zCe),e(zCe,jMr),e(fn,DMr),e(fn,QCe),e(QCe,GMr),e(fn,OMr),e(fn,WCe),e(WCe,VMr),e(fn,XMr),e(mo,zMr),e(mo,nc),e(nc,R4),e(R4,UCe),e(UCe,QMr),e(R4,WMr),e(R4,PZ),e(PZ,UMr),e(R4,HMr),e(nc,JMr),e(nc,P4),e(P4,HCe),e(HCe,YMr),e(P4,ZMr),e(P4,BZ),e(BZ,KMr),e(P4,eEr),e(nc,oEr),e(nc,B4),e(B4,JCe),e(JCe,rEr),e(B4,tEr),e(B4,IZ),e(IZ,aEr),e(B4,nEr),e(mo,sEr),e(mo,I4),e(I4,lEr),e(I4,YCe),e(YCe,iEr),e(I4,dEr),e(I4,ZCe),e(ZCe,cEr),e(mo,mEr),M(N4,mo,null),b(m,Goo,_),b(m,sc,_),e(sc,q4),e(q4,KCe),M(tk,KCe,null),e(sc,fEr),e(sc,e3e),e(e3e,gEr),b(m,Ooo,_),b(m,Wo,_),M(ak,Wo,null),e(Wo,hEr),e(Wo,lc),e(lc,uEr),e(lc,NZ),e(NZ,pEr),e(lc,_Er),e(lc,qZ),e(qZ,bEr),e(lc,vEr),e(Wo,FEr),e(Wo,nk),e(nk,TEr),e(nk,o3e),e(o3e,MEr),e(nk,EEr),e(Wo,CEr),e(Wo,kt),M(sk,kt,null),e(kt,wEr),e(kt,r3e),e(r3e,AEr),e(kt,LEr),e(kt,ic),e(ic,yEr),e(ic,t3e),e(t3e,xEr),e(ic,$Er),e(ic,jZ),e(jZ,kEr),e(ic,SEr),e(kt,REr),M(j4,kt,null),e(Wo,PEr),e(Wo,fo),M(lk,fo,null),e(fo,BEr),e(fo,a3e),e(a3e,IEr),e(fo,NEr),e(fo,gn),e(gn,qEr),e(gn,n3e),e(n3e,jEr),e(gn,DEr),e(gn,s3e),e(s3e,GEr),e(gn,OEr),e(gn,l3e),e(l3e,VEr),e(gn,XEr),e(fo,zEr),e(fo,be),e(be,D4),e(D4,i3e),e(i3e,QEr),e(D4,WEr),e(D4,DZ),e(DZ,UEr),e(D4,HEr),e(be,JEr),e(be,G4),e(G4,d3e),e(d3e,YEr),e(G4,ZEr),e(G4,GZ),e(GZ,KEr),e(G4,e4r),e(be,o4r),e(be,O4),e(O4,c3e),e(c3e,r4r),e(O4,t4r),e(O4,OZ),e(OZ,a4r),e(O4,n4r),e(be,s4r),e(be,V4),e(V4,m3e),e(m3e,l4r),e(V4,i4r),e(V4,VZ),e(VZ,d4r),e(V4,c4r),e(be,m4r),e(be,El),e(El,f3e),e(f3e,f4r),e(El,g4r),e(El,XZ),e(XZ,h4r),e(El,u4r),e(El,zZ),e(zZ,p4r),e(El,_4r),e(be,b4r),e(be,X4),e(X4,g3e),e(g3e,v4r),e(X4,F4r),e(X4,QZ),e(QZ,T4r),e(X4,M4r),e(be,E4r),e(be,Cl),e(Cl,h3e),e(h3e,C4r),e(Cl,w4r),e(Cl,WZ),e(WZ,A4r),e(Cl,L4r),e(Cl,UZ),e(UZ,y4r),e(Cl,x4r),e(be,$4r),e(be,z4),e(z4,u3e),e(u3e,k4r),e(z4,S4r),e(z4,HZ),e(HZ,R4r),e(z4,P4r),e(be,B4r),e(be,St),e(St,p3e),e(p3e,I4r),e(St,N4r),e(St,JZ),e(JZ,q4r),e(St,j4r),e(St,YZ),e(YZ,D4r),e(St,G4r),e(St,ZZ),e(ZZ,O4r),e(St,V4r),e(be,X4r),e(be,Q4),e(Q4,_3e),e(_3e,z4r),e(Q4,Q4r),e(Q4,KZ),e(KZ,W4r),e(Q4,U4r),e(be,H4r),e(be,W4),e(W4,b3e),e(b3e,J4r),e(W4,Y4r),e(W4,eK),e(eK,Z4r),e(W4,K4r),e(be,eCr),e(be,U4),e(U4,v3e),e(v3e,oCr),e(U4,rCr),e(U4,oK),e(oK,tCr),e(U4,aCr),e(be,nCr),e(be,H4),e(H4,F3e),e(F3e,sCr),e(H4,lCr),e(H4,rK),e(rK,iCr),e(H4,dCr),e(be,cCr),e(be,J4),e(J4,T3e),e(T3e,mCr),e(J4,fCr),e(J4,tK),e(tK,gCr),e(J4,hCr),e(be,uCr),e(be,Y4),e(Y4,M3e),e(M3e,pCr),e(Y4,_Cr),e(Y4,aK),e(aK,bCr),e(Y4,vCr),e(be,FCr),e(be,Z4),e(Z4,E3e),e(E3e,TCr),e(Z4,MCr),e(Z4,nK),e(nK,ECr),e(Z4,CCr),e(be,wCr),e(be,K4),e(K4,C3e),e(C3e,ACr),e(K4,LCr),e(K4,sK),e(sK,yCr),e(K4,xCr),e(be,$Cr),e(be,eC),e(eC,w3e),e(w3e,kCr),e(eC,SCr),e(eC,lK),e(lK,RCr),e(eC,PCr),e(fo,BCr),e(fo,oC),e(oC,ICr),e(oC,A3e),e(A3e,NCr),e(oC,qCr),e(oC,L3e),e(L3e,jCr),e(fo,DCr),M(rC,fo,null),b(m,Voo,_),b(m,dc,_),e(dc,tC),e(tC,y3e),M(ik,y3e,null),e(dc,GCr),e(dc,x3e),e(x3e,OCr),b(m,Xoo,_),b(m,Uo,_),M(dk,Uo,null),e(Uo,VCr),e(Uo,cc),e(cc,XCr),e(cc,iK),e(iK,zCr),e(cc,QCr),e(cc,dK),e(dK,WCr),e(cc,UCr),e(Uo,HCr),e(Uo,ck),e(ck,JCr),e(ck,$3e),e($3e,YCr),e(ck,ZCr),e(Uo,KCr),e(Uo,Rt),M(mk,Rt,null),e(Rt,e3r),e(Rt,k3e),e(k3e,o3r),e(Rt,r3r),e(Rt,mc),e(mc,t3r),e(mc,S3e),e(S3e,a3r),e(mc,n3r),e(mc,cK),e(cK,s3r),e(mc,l3r),e(Rt,i3r),M(aC,Rt,null),e(Uo,d3r),e(Uo,go),M(fk,go,null),e(go,c3r),e(go,R3e),e(R3e,m3r),e(go,f3r),e(go,hn),e(hn,g3r),e(hn,P3e),e(P3e,h3r),e(hn,u3r),e(hn,B3e),e(B3e,p3r),e(hn,_3r),e(hn,I3e),e(I3e,b3r),e(hn,v3r),e(go,F3r),e(go,N3e),e(N3e,nC),e(nC,q3e),e(q3e,T3r),e(nC,M3r),e(nC,mK),e(mK,E3r),e(nC,C3r),e(go,w3r),e(go,sC),e(sC,A3r),e(sC,j3e),e(j3e,L3r),e(sC,y3r),e(sC,D3e),e(D3e,x3r),e(go,$3r),M(lC,go,null),b(m,zoo,_),b(m,fc,_),e(fc,iC),e(iC,G3e),M(gk,G3e,null),e(fc,k3r),e(fc,O3e),e(O3e,S3r),b(m,Qoo,_),b(m,Ho,_),M(hk,Ho,null),e(Ho,R3r),e(Ho,gc),e(gc,P3r),e(gc,fK),e(fK,B3r),e(gc,I3r),e(gc,gK),e(gK,N3r),e(gc,q3r),e(Ho,j3r),e(Ho,uk),e(uk,D3r),e(uk,V3e),e(V3e,G3r),e(uk,O3r),e(Ho,V3r),e(Ho,Pt),M(pk,Pt,null),e(Pt,X3r),e(Pt,X3e),e(X3e,z3r),e(Pt,Q3r),e(Pt,hc),e(hc,W3r),e(hc,z3e),e(z3e,U3r),e(hc,H3r),e(hc,hK),e(hK,J3r),e(hc,Y3r),e(Pt,Z3r),M(dC,Pt,null),e(Ho,K3r),e(Ho,ho),M(_k,ho,null),e(ho,e5r),e(ho,Q3e),e(Q3e,o5r),e(ho,r5r),e(ho,un),e(un,t5r),e(un,W3e),e(W3e,a5r),e(un,n5r),e(un,U3e),e(U3e,s5r),e(un,l5r),e(un,H3e),e(H3e,i5r),e(un,d5r),e(ho,c5r),e(ho,J3e),e(J3e,cC),e(cC,Y3e),e(Y3e,m5r),e(cC,f5r),e(cC,uK),e(uK,g5r),e(cC,h5r),e(ho,u5r),e(ho,mC),e(mC,p5r),e(mC,Z3e),e(Z3e,_5r),e(mC,b5r),e(mC,K3e),e(K3e,v5r),e(ho,F5r),M(fC,ho,null),b(m,Woo,_),b(m,uc,_),e(uc,gC),e(gC,e5e),M(bk,e5e,null),e(uc,T5r),e(uc,o5e),e(o5e,M5r),b(m,Uoo,_),b(m,Jo,_),M(vk,Jo,null),e(Jo,E5r),e(Jo,pc),e(pc,C5r),e(pc,pK),e(pK,w5r),e(pc,A5r),e(pc,_K),e(_K,L5r),e(pc,y5r),e(Jo,x5r),e(Jo,Fk),e(Fk,$5r),e(Fk,r5e),e(r5e,k5r),e(Fk,S5r),e(Jo,R5r),e(Jo,Bt),M(Tk,Bt,null),e(Bt,P5r),e(Bt,t5e),e(t5e,B5r),e(Bt,I5r),e(Bt,_c),e(_c,N5r),e(_c,a5e),e(a5e,q5r),e(_c,j5r),e(_c,bK),e(bK,D5r),e(_c,G5r),e(Bt,O5r),M(hC,Bt,null),e(Jo,V5r),e(Jo,uo),M(Mk,uo,null),e(uo,X5r),e(uo,n5e),e(n5e,z5r),e(uo,Q5r),e(uo,pn),e(pn,W5r),e(pn,s5e),e(s5e,U5r),e(pn,H5r),e(pn,l5e),e(l5e,J5r),e(pn,Y5r),e(pn,i5e),e(i5e,Z5r),e(pn,K5r),e(uo,e0r),e(uo,d5e),e(d5e,uC),e(uC,c5e),e(c5e,o0r),e(uC,r0r),e(uC,vK),e(vK,t0r),e(uC,a0r),e(uo,n0r),e(uo,pC),e(pC,s0r),e(pC,m5e),e(m5e,l0r),e(pC,i0r),e(pC,f5e),e(f5e,d0r),e(uo,c0r),M(_C,uo,null),b(m,Hoo,_),b(m,bc,_),e(bc,bC),e(bC,g5e),M(Ek,g5e,null),e(bc,m0r),e(bc,h5e),e(h5e,f0r),b(m,Joo,_),b(m,Yo,_),M(Ck,Yo,null),e(Yo,g0r),e(Yo,vc),e(vc,h0r),e(vc,FK),e(FK,u0r),e(vc,p0r),e(vc,TK),e(TK,_0r),e(vc,b0r),e(Yo,v0r),e(Yo,wk),e(wk,F0r),e(wk,u5e),e(u5e,T0r),e(wk,M0r),e(Yo,E0r),e(Yo,It),M(Ak,It,null),e(It,C0r),e(It,p5e),e(p5e,w0r),e(It,A0r),e(It,Fc),e(Fc,L0r),e(Fc,_5e),e(_5e,y0r),e(Fc,x0r),e(Fc,MK),e(MK,$0r),e(Fc,k0r),e(It,S0r),M(vC,It,null),e(Yo,R0r),e(Yo,po),M(Lk,po,null),e(po,P0r),e(po,b5e),e(b5e,B0r),e(po,I0r),e(po,_n),e(_n,N0r),e(_n,v5e),e(v5e,q0r),e(_n,j0r),e(_n,F5e),e(F5e,D0r),e(_n,G0r),e(_n,T5e),e(T5e,O0r),e(_n,V0r),e(po,X0r),e(po,Pe),e(Pe,FC),e(FC,M5e),e(M5e,z0r),e(FC,Q0r),e(FC,EK),e(EK,W0r),e(FC,U0r),e(Pe,H0r),e(Pe,TC),e(TC,E5e),e(E5e,J0r),e(TC,Y0r),e(TC,CK),e(CK,Z0r),e(TC,K0r),e(Pe,ewr),e(Pe,MC),e(MC,C5e),e(C5e,owr),e(MC,rwr),e(MC,wK),e(wK,twr),e(MC,awr),e(Pe,nwr),e(Pe,EC),e(EC,w5e),e(w5e,swr),e(EC,lwr),e(EC,AK),e(AK,iwr),e(EC,dwr),e(Pe,cwr),e(Pe,CC),e(CC,A5e),e(A5e,mwr),e(CC,fwr),e(CC,LK),e(LK,gwr),e(CC,hwr),e(Pe,uwr),e(Pe,wC),e(wC,L5e),e(L5e,pwr),e(wC,_wr),e(wC,yK),e(yK,bwr),e(wC,vwr),e(Pe,Fwr),e(Pe,AC),e(AC,y5e),e(y5e,Twr),e(AC,Mwr),e(AC,xK),e(xK,Ewr),e(AC,Cwr),e(Pe,wwr),e(Pe,LC),e(LC,x5e),e(x5e,Awr),e(LC,Lwr),e(LC,$K),e($K,ywr),e(LC,xwr),e(Pe,$wr),e(Pe,yC),e(yC,$5e),e($5e,kwr),e(yC,Swr),e(yC,kK),e(kK,Rwr),e(yC,Pwr),e(po,Bwr),e(po,xC),e(xC,Iwr),e(xC,k5e),e(k5e,Nwr),e(xC,qwr),e(xC,S5e),e(S5e,jwr),e(po,Dwr),M($C,po,null),b(m,Yoo,_),b(m,Tc,_),e(Tc,kC),e(kC,R5e),M(yk,R5e,null),e(Tc,Gwr),e(Tc,P5e),e(P5e,Owr),b(m,Zoo,_),b(m,Zo,_),M(xk,Zo,null),e(Zo,Vwr),e(Zo,Mc),e(Mc,Xwr),e(Mc,SK),e(SK,zwr),e(Mc,Qwr),e(Mc,RK),e(RK,Wwr),e(Mc,Uwr),e(Zo,Hwr),e(Zo,$k),e($k,Jwr),e($k,B5e),e(B5e,Ywr),e($k,Zwr),e(Zo,Kwr),e(Zo,Nt),M(kk,Nt,null),e(Nt,eAr),e(Nt,I5e),e(I5e,oAr),e(Nt,rAr),e(Nt,Ec),e(Ec,tAr),e(Ec,N5e),e(N5e,aAr),e(Ec,nAr),e(Ec,PK),e(PK,sAr),e(Ec,lAr),e(Nt,iAr),M(SC,Nt,null),e(Zo,dAr),e(Zo,_o),M(Sk,_o,null),e(_o,cAr),e(_o,q5e),e(q5e,mAr),e(_o,fAr),e(_o,bn),e(bn,gAr),e(bn,j5e),e(j5e,hAr),e(bn,uAr),e(bn,D5e),e(D5e,pAr),e(bn,_Ar),e(bn,G5e),e(G5e,bAr),e(bn,vAr),e(_o,FAr),e(_o,gt),e(gt,RC),e(RC,O5e),e(O5e,TAr),e(RC,MAr),e(RC,BK),e(BK,EAr),e(RC,CAr),e(gt,wAr),e(gt,PC),e(PC,V5e),e(V5e,AAr),e(PC,LAr),e(PC,IK),e(IK,yAr),e(PC,xAr),e(gt,$Ar),e(gt,BC),e(BC,X5e),e(X5e,kAr),e(BC,SAr),e(BC,NK),e(NK,RAr),e(BC,PAr),e(gt,BAr),e(gt,IC),e(IC,z5e),e(z5e,IAr),e(IC,NAr),e(IC,qK),e(qK,qAr),e(IC,jAr),e(gt,DAr),e(gt,NC),e(NC,Q5e),e(Q5e,GAr),e(NC,OAr),e(NC,jK),e(jK,VAr),e(NC,XAr),e(_o,zAr),e(_o,qC),e(qC,QAr),e(qC,W5e),e(W5e,WAr),e(qC,UAr),e(qC,U5e),e(U5e,HAr),e(_o,JAr),M(jC,_o,null),b(m,Koo,_),b(m,Cc,_),e(Cc,DC),e(DC,H5e),M(Rk,H5e,null),e(Cc,YAr),e(Cc,J5e),e(J5e,ZAr),b(m,ero,_),b(m,Ko,_),M(Pk,Ko,null),e(Ko,KAr),e(Ko,wc),e(wc,e6r),e(wc,DK),e(DK,o6r),e(wc,r6r),e(wc,GK),e(GK,t6r),e(wc,a6r),e(Ko,n6r),e(Ko,Bk),e(Bk,s6r),e(Bk,Y5e),e(Y5e,l6r),e(Bk,i6r),e(Ko,d6r),e(Ko,qt),M(Ik,qt,null),e(qt,c6r),e(qt,Z5e),e(Z5e,m6r),e(qt,f6r),e(qt,Ac),e(Ac,g6r),e(Ac,K5e),e(K5e,h6r),e(Ac,u6r),e(Ac,OK),e(OK,p6r),e(Ac,_6r),e(qt,b6r),M(GC,qt,null),e(Ko,v6r),e(Ko,bo),M(Nk,bo,null),e(bo,F6r),e(bo,e0e),e(e0e,T6r),e(bo,M6r),e(bo,vn),e(vn,E6r),e(vn,o0e),e(o0e,C6r),e(vn,w6r),e(vn,r0e),e(r0e,A6r),e(vn,L6r),e(vn,t0e),e(t0e,y6r),e(vn,x6r),e(bo,$6r),e(bo,Le),e(Le,OC),e(OC,a0e),e(a0e,k6r),e(OC,S6r),e(OC,VK),e(VK,R6r),e(OC,P6r),e(Le,B6r),e(Le,VC),e(VC,n0e),e(n0e,I6r),e(VC,N6r),e(VC,XK),e(XK,q6r),e(VC,j6r),e(Le,D6r),e(Le,XC),e(XC,s0e),e(s0e,G6r),e(XC,O6r),e(XC,zK),e(zK,V6r),e(XC,X6r),e(Le,z6r),e(Le,zC),e(zC,l0e),e(l0e,Q6r),e(zC,W6r),e(zC,QK),e(QK,U6r),e(zC,H6r),e(Le,J6r),e(Le,QC),e(QC,i0e),e(i0e,Y6r),e(QC,Z6r),e(QC,WK),e(WK,K6r),e(QC,e7r),e(Le,o7r),e(Le,WC),e(WC,d0e),e(d0e,r7r),e(WC,t7r),e(WC,UK),e(UK,a7r),e(WC,n7r),e(Le,s7r),e(Le,UC),e(UC,c0e),e(c0e,l7r),e(UC,i7r),e(UC,HK),e(HK,d7r),e(UC,c7r),e(Le,m7r),e(Le,HC),e(HC,m0e),e(m0e,f7r),e(HC,g7r),e(HC,JK),e(JK,h7r),e(HC,u7r),e(Le,p7r),e(Le,JC),e(JC,f0e),e(f0e,_7r),e(JC,b7r),e(JC,YK),e(YK,v7r),e(JC,F7r),e(Le,T7r),e(Le,YC),e(YC,g0e),e(g0e,M7r),e(YC,E7r),e(YC,ZK),e(ZK,C7r),e(YC,w7r),e(bo,A7r),e(bo,ZC),e(ZC,L7r),e(ZC,h0e),e(h0e,y7r),e(ZC,x7r),e(ZC,u0e),e(u0e,$7r),e(bo,k7r),M(KC,bo,null),b(m,oro,_),b(m,Lc,_),e(Lc,e3),e(e3,p0e),M(qk,p0e,null),e(Lc,S7r),e(Lc,_0e),e(_0e,R7r),b(m,rro,_),b(m,er,_),M(jk,er,null),e(er,P7r),e(er,yc),e(yc,B7r),e(yc,KK),e(KK,I7r),e(yc,N7r),e(yc,eee),e(eee,q7r),e(yc,j7r),e(er,D7r),e(er,Dk),e(Dk,G7r),e(Dk,b0e),e(b0e,O7r),e(Dk,V7r),e(er,X7r),e(er,jt),M(Gk,jt,null),e(jt,z7r),e(jt,v0e),e(v0e,Q7r),e(jt,W7r),e(jt,xc),e(xc,U7r),e(xc,F0e),e(F0e,H7r),e(xc,J7r),e(xc,oee),e(oee,Y7r),e(xc,Z7r),e(jt,K7r),M(o3,jt,null),e(er,eLr),e(er,vo),M(Ok,vo,null),e(vo,oLr),e(vo,T0e),e(T0e,rLr),e(vo,tLr),e(vo,Fn),e(Fn,aLr),e(Fn,M0e),e(M0e,nLr),e(Fn,sLr),e(Fn,E0e),e(E0e,lLr),e(Fn,iLr),e(Fn,C0e),e(C0e,dLr),e(Fn,cLr),e(vo,mLr),e(vo,$c),e($c,r3),e(r3,w0e),e(w0e,fLr),e(r3,gLr),e(r3,ree),e(ree,hLr),e(r3,uLr),e($c,pLr),e($c,t3),e(t3,A0e),e(A0e,_Lr),e(t3,bLr),e(t3,tee),e(tee,vLr),e(t3,FLr),e($c,TLr),e($c,a3),e(a3,L0e),e(L0e,MLr),e(a3,ELr),e(a3,aee),e(aee,CLr),e(a3,wLr),e(vo,ALr),e(vo,n3),e(n3,LLr),e(n3,y0e),e(y0e,yLr),e(n3,xLr),e(n3,x0e),e(x0e,$Lr),e(vo,kLr),M(s3,vo,null),b(m,tro,_),b(m,kc,_),e(kc,l3),e(l3,$0e),M(Vk,$0e,null),e(kc,SLr),e(kc,k0e),e(k0e,RLr),b(m,aro,_),b(m,or,_),M(Xk,or,null),e(or,PLr),e(or,Sc),e(Sc,BLr),e(Sc,nee),e(nee,ILr),e(Sc,NLr),e(Sc,see),e(see,qLr),e(Sc,jLr),e(or,DLr),e(or,zk),e(zk,GLr),e(zk,S0e),e(S0e,OLr),e(zk,VLr),e(or,XLr),e(or,Dt),M(Qk,Dt,null),e(Dt,zLr),e(Dt,R0e),e(R0e,QLr),e(Dt,WLr),e(Dt,Rc),e(Rc,ULr),e(Rc,P0e),e(P0e,HLr),e(Rc,JLr),e(Rc,lee),e(lee,YLr),e(Rc,ZLr),e(Dt,KLr),M(i3,Dt,null),e(or,eyr),e(or,Fo),M(Wk,Fo,null),e(Fo,oyr),e(Fo,B0e),e(B0e,ryr),e(Fo,tyr),e(Fo,Tn),e(Tn,ayr),e(Tn,I0e),e(I0e,nyr),e(Tn,syr),e(Tn,N0e),e(N0e,lyr),e(Tn,iyr),e(Tn,q0e),e(q0e,dyr),e(Tn,cyr),e(Fo,myr),e(Fo,ht),e(ht,d3),e(d3,j0e),e(j0e,fyr),e(d3,gyr),e(d3,iee),e(iee,hyr),e(d3,uyr),e(ht,pyr),e(ht,c3),e(c3,D0e),e(D0e,_yr),e(c3,byr),e(c3,dee),e(dee,vyr),e(c3,Fyr),e(ht,Tyr),e(ht,m3),e(m3,G0e),e(G0e,Myr),e(m3,Eyr),e(m3,cee),e(cee,Cyr),e(m3,wyr),e(ht,Ayr),e(ht,f3),e(f3,O0e),e(O0e,Lyr),e(f3,yyr),e(f3,mee),e(mee,xyr),e(f3,$yr),e(ht,kyr),e(ht,g3),e(g3,V0e),e(V0e,Syr),e(g3,Ryr),e(g3,fee),e(fee,Pyr),e(g3,Byr),e(Fo,Iyr),e(Fo,h3),e(h3,Nyr),e(h3,X0e),e(X0e,qyr),e(h3,jyr),e(h3,z0e),e(z0e,Dyr),e(Fo,Gyr),M(u3,Fo,null),b(m,nro,_),b(m,Pc,_),e(Pc,p3),e(p3,Q0e),M(Uk,Q0e,null),e(Pc,Oyr),e(Pc,W0e),e(W0e,Vyr),b(m,sro,_),b(m,rr,_),M(Hk,rr,null),e(rr,Xyr),e(rr,Bc),e(Bc,zyr),e(Bc,gee),e(gee,Qyr),e(Bc,Wyr),e(Bc,hee),e(hee,Uyr),e(Bc,Hyr),e(rr,Jyr),e(rr,Jk),e(Jk,Yyr),e(Jk,U0e),e(U0e,Zyr),e(Jk,Kyr),e(rr,e8r),e(rr,Gt),M(Yk,Gt,null),e(Gt,o8r),e(Gt,H0e),e(H0e,r8r),e(Gt,t8r),e(Gt,Ic),e(Ic,a8r),e(Ic,J0e),e(J0e,n8r),e(Ic,s8r),e(Ic,uee),e(uee,l8r),e(Ic,i8r),e(Gt,d8r),M(_3,Gt,null),e(rr,c8r),e(rr,To),M(Zk,To,null),e(To,m8r),e(To,Y0e),e(Y0e,f8r),e(To,g8r),e(To,Mn),e(Mn,h8r),e(Mn,Z0e),e(Z0e,u8r),e(Mn,p8r),e(Mn,K0e),e(K0e,_8r),e(Mn,b8r),e(Mn,ewe),e(ewe,v8r),e(Mn,F8r),e(To,T8r),e(To,En),e(En,b3),e(b3,owe),e(owe,M8r),e(b3,E8r),e(b3,pee),e(pee,C8r),e(b3,w8r),e(En,A8r),e(En,v3),e(v3,rwe),e(rwe,L8r),e(v3,y8r),e(v3,_ee),e(_ee,x8r),e(v3,$8r),e(En,k8r),e(En,F3),e(F3,twe),e(twe,S8r),e(F3,R8r),e(F3,bee),e(bee,P8r),e(F3,B8r),e(En,I8r),e(En,T3),e(T3,awe),e(awe,N8r),e(T3,q8r),e(T3,vee),e(vee,j8r),e(T3,D8r),e(To,G8r),e(To,M3),e(M3,O8r),e(M3,nwe),e(nwe,V8r),e(M3,X8r),e(M3,swe),e(swe,z8r),e(To,Q8r),M(E3,To,null),b(m,lro,_),b(m,Nc,_),e(Nc,C3),e(C3,lwe),M(Kk,lwe,null),e(Nc,W8r),e(Nc,iwe),e(iwe,U8r),b(m,iro,_),b(m,tr,_),M(eS,tr,null),e(tr,H8r),e(tr,qc),e(qc,J8r),e(qc,Fee),e(Fee,Y8r),e(qc,Z8r),e(qc,Tee),e(Tee,K8r),e(qc,e9r),e(tr,o9r),e(tr,oS),e(oS,r9r),e(oS,dwe),e(dwe,t9r),e(oS,a9r),e(tr,n9r),e(tr,Ot),M(rS,Ot,null),e(Ot,s9r),e(Ot,cwe),e(cwe,l9r),e(Ot,i9r),e(Ot,jc),e(jc,d9r),e(jc,mwe),e(mwe,c9r),e(jc,m9r),e(jc,Mee),e(Mee,f9r),e(jc,g9r),e(Ot,h9r),M(w3,Ot,null),e(tr,u9r),e(tr,Mo),M(tS,Mo,null),e(Mo,p9r),e(Mo,fwe),e(fwe,_9r),e(Mo,b9r),e(Mo,Cn),e(Cn,v9r),e(Cn,gwe),e(gwe,F9r),e(Cn,T9r),e(Cn,hwe),e(hwe,M9r),e(Cn,E9r),e(Cn,uwe),e(uwe,C9r),e(Cn,w9r),e(Mo,A9r),e(Mo,wn),e(wn,A3),e(A3,pwe),e(pwe,L9r),e(A3,y9r),e(A3,Eee),e(Eee,x9r),e(A3,$9r),e(wn,k9r),e(wn,L3),e(L3,_we),e(_we,S9r),e(L3,R9r),e(L3,Cee),e(Cee,P9r),e(L3,B9r),e(wn,I9r),e(wn,y3),e(y3,bwe),e(bwe,N9r),e(y3,q9r),e(y3,wee),e(wee,j9r),e(y3,D9r),e(wn,G9r),e(wn,x3),e(x3,vwe),e(vwe,O9r),e(x3,V9r),e(x3,Aee),e(Aee,X9r),e(x3,z9r),e(Mo,Q9r),e(Mo,$3),e($3,W9r),e($3,Fwe),e(Fwe,U9r),e($3,H9r),e($3,Twe),e(Twe,J9r),e(Mo,Y9r),M(k3,Mo,null),b(m,dro,_),b(m,Dc,_),e(Dc,S3),e(S3,Mwe),M(aS,Mwe,null),e(Dc,Z9r),e(Dc,Ewe),e(Ewe,K9r),b(m,cro,_),b(m,ar,_),M(nS,ar,null),e(ar,exr),e(ar,Gc),e(Gc,oxr),e(Gc,Lee),e(Lee,rxr),e(Gc,txr),e(Gc,yee),e(yee,axr),e(Gc,nxr),e(ar,sxr),e(ar,sS),e(sS,lxr),e(sS,Cwe),e(Cwe,ixr),e(sS,dxr),e(ar,cxr),e(ar,Vt),M(lS,Vt,null),e(Vt,mxr),e(Vt,wwe),e(wwe,fxr),e(Vt,gxr),e(Vt,Oc),e(Oc,hxr),e(Oc,Awe),e(Awe,uxr),e(Oc,pxr),e(Oc,xee),e(xee,_xr),e(Oc,bxr),e(Vt,vxr),M(R3,Vt,null),e(ar,Fxr),e(ar,Eo),M(iS,Eo,null),e(Eo,Txr),e(Eo,Lwe),e(Lwe,Mxr),e(Eo,Exr),e(Eo,An),e(An,Cxr),e(An,ywe),e(ywe,wxr),e(An,Axr),e(An,xwe),e(xwe,Lxr),e(An,yxr),e(An,$we),e($we,xxr),e(An,$xr),e(Eo,kxr),e(Eo,kwe),e(kwe,P3),e(P3,Swe),e(Swe,Sxr),e(P3,Rxr),e(P3,$ee),e($ee,Pxr),e(P3,Bxr),e(Eo,Ixr),e(Eo,B3),e(B3,Nxr),e(B3,Rwe),e(Rwe,qxr),e(B3,jxr),e(B3,Pwe),e(Pwe,Dxr),e(Eo,Gxr),M(I3,Eo,null),b(m,mro,_),b(m,Vc,_),e(Vc,N3),e(N3,Bwe),M(dS,Bwe,null),e(Vc,Oxr),e(Vc,Iwe),e(Iwe,Vxr),b(m,fro,_),b(m,nr,_),M(cS,nr,null),e(nr,Xxr),e(nr,Xc),e(Xc,zxr),e(Xc,kee),e(kee,Qxr),e(Xc,Wxr),e(Xc,See),e(See,Uxr),e(Xc,Hxr),e(nr,Jxr),e(nr,mS),e(mS,Yxr),e(mS,Nwe),e(Nwe,Zxr),e(mS,Kxr),e(nr,e$r),e(nr,Xt),M(fS,Xt,null),e(Xt,o$r),e(Xt,qwe),e(qwe,r$r),e(Xt,t$r),e(Xt,zc),e(zc,a$r),e(zc,jwe),e(jwe,n$r),e(zc,s$r),e(zc,Ree),e(Ree,l$r),e(zc,i$r),e(Xt,d$r),M(q3,Xt,null),e(nr,c$r),e(nr,Co),M(gS,Co,null),e(Co,m$r),e(Co,Dwe),e(Dwe,f$r),e(Co,g$r),e(Co,Ln),e(Ln,h$r),e(Ln,Gwe),e(Gwe,u$r),e(Ln,p$r),e(Ln,Owe),e(Owe,_$r),e(Ln,b$r),e(Ln,Vwe),e(Vwe,v$r),e(Ln,F$r),e(Co,T$r),e(Co,ut),e(ut,j3),e(j3,Xwe),e(Xwe,M$r),e(j3,E$r),e(j3,Pee),e(Pee,C$r),e(j3,w$r),e(ut,A$r),e(ut,D3),e(D3,zwe),e(zwe,L$r),e(D3,y$r),e(D3,Bee),e(Bee,x$r),e(D3,$$r),e(ut,k$r),e(ut,G3),e(G3,Qwe),e(Qwe,S$r),e(G3,R$r),e(G3,Iee),e(Iee,P$r),e(G3,B$r),e(ut,I$r),e(ut,O3),e(O3,Wwe),e(Wwe,N$r),e(O3,q$r),e(O3,Nee),e(Nee,j$r),e(O3,D$r),e(ut,G$r),e(ut,V3),e(V3,Uwe),e(Uwe,O$r),e(V3,V$r),e(V3,qee),e(qee,X$r),e(V3,z$r),e(Co,Q$r),e(Co,X3),e(X3,W$r),e(X3,Hwe),e(Hwe,U$r),e(X3,H$r),e(X3,Jwe),e(Jwe,J$r),e(Co,Y$r),M(z3,Co,null),b(m,gro,_),b(m,Qc,_),e(Qc,Q3),e(Q3,Ywe),M(hS,Ywe,null),e(Qc,Z$r),e(Qc,Zwe),e(Zwe,K$r),b(m,hro,_),b(m,sr,_),M(uS,sr,null),e(sr,ekr),e(sr,Wc),e(Wc,okr),e(Wc,jee),e(jee,rkr),e(Wc,tkr),e(Wc,Dee),e(Dee,akr),e(Wc,nkr),e(sr,skr),e(sr,pS),e(pS,lkr),e(pS,Kwe),e(Kwe,ikr),e(pS,dkr),e(sr,ckr),e(sr,zt),M(_S,zt,null),e(zt,mkr),e(zt,eAe),e(eAe,fkr),e(zt,gkr),e(zt,Uc),e(Uc,hkr),e(Uc,oAe),e(oAe,ukr),e(Uc,pkr),e(Uc,Gee),e(Gee,_kr),e(Uc,bkr),e(zt,vkr),M(W3,zt,null),e(sr,Fkr),e(sr,wo),M(bS,wo,null),e(wo,Tkr),e(wo,rAe),e(rAe,Mkr),e(wo,Ekr),e(wo,yn),e(yn,Ckr),e(yn,tAe),e(tAe,wkr),e(yn,Akr),e(yn,aAe),e(aAe,Lkr),e(yn,ykr),e(yn,nAe),e(nAe,xkr),e(yn,$kr),e(wo,kkr),e(wo,sAe),e(sAe,U3),e(U3,lAe),e(lAe,Skr),e(U3,Rkr),e(U3,Oee),e(Oee,Pkr),e(U3,Bkr),e(wo,Ikr),e(wo,H3),e(H3,Nkr),e(H3,iAe),e(iAe,qkr),e(H3,jkr),e(H3,dAe),e(dAe,Dkr),e(wo,Gkr),M(J3,wo,null),b(m,uro,_),b(m,Hc,_),e(Hc,Y3),e(Y3,cAe),M(vS,cAe,null),e(Hc,Okr),e(Hc,mAe),e(mAe,Vkr),b(m,pro,_),b(m,lr,_),M(FS,lr,null),e(lr,Xkr),e(lr,Jc),e(Jc,zkr),e(Jc,Vee),e(Vee,Qkr),e(Jc,Wkr),e(Jc,Xee),e(Xee,Ukr),e(Jc,Hkr),e(lr,Jkr),e(lr,TS),e(TS,Ykr),e(TS,fAe),e(fAe,Zkr),e(TS,Kkr),e(lr,eSr),e(lr,Qt),M(MS,Qt,null),e(Qt,oSr),e(Qt,gAe),e(gAe,rSr),e(Qt,tSr),e(Qt,Yc),e(Yc,aSr),e(Yc,hAe),e(hAe,nSr),e(Yc,sSr),e(Yc,zee),e(zee,lSr),e(Yc,iSr),e(Qt,dSr),M(Z3,Qt,null),e(lr,cSr),e(lr,Ao),M(ES,Ao,null),e(Ao,mSr),e(Ao,uAe),e(uAe,fSr),e(Ao,gSr),e(Ao,xn),e(xn,hSr),e(xn,pAe),e(pAe,uSr),e(xn,pSr),e(xn,_Ae),e(_Ae,_Sr),e(xn,bSr),e(xn,bAe),e(bAe,vSr),e(xn,FSr),e(Ao,TSr),e(Ao,vAe),e(vAe,K3),e(K3,FAe),e(FAe,MSr),e(K3,ESr),e(K3,Qee),e(Qee,CSr),e(K3,wSr),e(Ao,ASr),e(Ao,e5),e(e5,LSr),e(e5,TAe),e(TAe,ySr),e(e5,xSr),e(e5,MAe),e(MAe,$Sr),e(Ao,kSr),M(o5,Ao,null),b(m,_ro,_),b(m,Zc,_),e(Zc,r5),e(r5,EAe),M(CS,EAe,null),e(Zc,SSr),e(Zc,CAe),e(CAe,RSr),b(m,bro,_),b(m,ir,_),M(wS,ir,null),e(ir,PSr),e(ir,Kc),e(Kc,BSr),e(Kc,Wee),e(Wee,ISr),e(Kc,NSr),e(Kc,Uee),e(Uee,qSr),e(Kc,jSr),e(ir,DSr),e(ir,AS),e(AS,GSr),e(AS,wAe),e(wAe,OSr),e(AS,VSr),e(ir,XSr),e(ir,Wt),M(LS,Wt,null),e(Wt,zSr),e(Wt,AAe),e(AAe,QSr),e(Wt,WSr),e(Wt,em),e(em,USr),e(em,LAe),e(LAe,HSr),e(em,JSr),e(em,Hee),e(Hee,YSr),e(em,ZSr),e(Wt,KSr),M(t5,Wt,null),e(ir,eRr),e(ir,qr),M(yS,qr,null),e(qr,oRr),e(qr,yAe),e(yAe,rRr),e(qr,tRr),e(qr,$n),e($n,aRr),e($n,xAe),e(xAe,nRr),e($n,sRr),e($n,$Ae),e($Ae,lRr),e($n,iRr),e($n,kAe),e(kAe,dRr),e($n,cRr),e(qr,mRr),e(qr,q),e(q,a5),e(a5,SAe),e(SAe,fRr),e(a5,gRr),e(a5,Jee),e(Jee,hRr),e(a5,uRr),e(q,pRr),e(q,n5),e(n5,RAe),e(RAe,_Rr),e(n5,bRr),e(n5,Yee),e(Yee,vRr),e(n5,FRr),e(q,TRr),e(q,s5),e(s5,PAe),e(PAe,MRr),e(s5,ERr),e(s5,Zee),e(Zee,CRr),e(s5,wRr),e(q,ARr),e(q,l5),e(l5,BAe),e(BAe,LRr),e(l5,yRr),e(l5,Kee),e(Kee,xRr),e(l5,$Rr),e(q,kRr),e(q,i5),e(i5,IAe),e(IAe,SRr),e(i5,RRr),e(i5,eoe),e(eoe,PRr),e(i5,BRr),e(q,IRr),e(q,d5),e(d5,NAe),e(NAe,NRr),e(d5,qRr),e(d5,ooe),e(ooe,jRr),e(d5,DRr),e(q,GRr),e(q,c5),e(c5,qAe),e(qAe,ORr),e(c5,VRr),e(c5,roe),e(roe,XRr),e(c5,zRr),e(q,QRr),e(q,m5),e(m5,jAe),e(jAe,WRr),e(m5,URr),e(m5,toe),e(toe,HRr),e(m5,JRr),e(q,YRr),e(q,f5),e(f5,DAe),e(DAe,ZRr),e(f5,KRr),e(f5,aoe),e(aoe,ePr),e(f5,oPr),e(q,rPr),e(q,g5),e(g5,GAe),e(GAe,tPr),e(g5,aPr),e(g5,noe),e(noe,nPr),e(g5,sPr),e(q,lPr),e(q,h5),e(h5,OAe),e(OAe,iPr),e(h5,dPr),e(h5,soe),e(soe,cPr),e(h5,mPr),e(q,fPr),e(q,u5),e(u5,VAe),e(VAe,gPr),e(u5,hPr),e(u5,loe),e(loe,uPr),e(u5,pPr),e(q,_Pr),e(q,p5),e(p5,XAe),e(XAe,bPr),e(p5,vPr),e(p5,ioe),e(ioe,FPr),e(p5,TPr),e(q,MPr),e(q,_5),e(_5,zAe),e(zAe,EPr),e(_5,CPr),e(_5,doe),e(doe,wPr),e(_5,APr),e(q,LPr),e(q,b5),e(b5,QAe),e(QAe,yPr),e(b5,xPr),e(b5,coe),e(coe,$Pr),e(b5,kPr),e(q,SPr),e(q,v5),e(v5,WAe),e(WAe,RPr),e(v5,PPr),e(v5,moe),e(moe,BPr),e(v5,IPr),e(q,NPr),e(q,F5),e(F5,UAe),e(UAe,qPr),e(F5,jPr),e(F5,foe),e(foe,DPr),e(F5,GPr),e(q,OPr),e(q,T5),e(T5,HAe),e(HAe,VPr),e(T5,XPr),e(T5,goe),e(goe,zPr),e(T5,QPr),e(q,WPr),e(q,wl),e(wl,JAe),e(JAe,UPr),e(wl,HPr),e(wl,hoe),e(hoe,JPr),e(wl,YPr),e(wl,uoe),e(uoe,ZPr),e(wl,KPr),e(q,eBr),e(q,M5),e(M5,YAe),e(YAe,oBr),e(M5,rBr),e(M5,poe),e(poe,tBr),e(M5,aBr),e(q,nBr),e(q,E5),e(E5,ZAe),e(ZAe,sBr),e(E5,lBr),e(E5,_oe),e(_oe,iBr),e(E5,dBr),e(q,cBr),e(q,C5),e(C5,KAe),e(KAe,mBr),e(C5,fBr),e(C5,boe),e(boe,gBr),e(C5,hBr),e(q,uBr),e(q,w5),e(w5,e6e),e(e6e,pBr),e(w5,_Br),e(w5,voe),e(voe,bBr),e(w5,vBr),e(q,FBr),e(q,A5),e(A5,o6e),e(o6e,TBr),e(A5,MBr),e(A5,Foe),e(Foe,EBr),e(A5,CBr),e(q,wBr),e(q,L5),e(L5,r6e),e(r6e,ABr),e(L5,LBr),e(L5,Toe),e(Toe,yBr),e(L5,xBr),e(q,$Br),e(q,y5),e(y5,t6e),e(t6e,kBr),e(y5,SBr),e(y5,Moe),e(Moe,RBr),e(y5,PBr),e(q,BBr),e(q,x5),e(x5,a6e),e(a6e,IBr),e(x5,NBr),e(x5,Eoe),e(Eoe,qBr),e(x5,jBr),e(q,DBr),e(q,$5),e($5,n6e),e(n6e,GBr),e($5,OBr),e($5,Coe),e(Coe,VBr),e($5,XBr),e(q,zBr),e(q,k5),e(k5,s6e),e(s6e,QBr),e(k5,WBr),e(k5,woe),e(woe,UBr),e(k5,HBr),e(q,JBr),e(q,S5),e(S5,l6e),e(l6e,YBr),e(S5,ZBr),e(S5,Aoe),e(Aoe,KBr),e(S5,eIr),e(q,oIr),e(q,R5),e(R5,i6e),e(i6e,rIr),e(R5,tIr),e(R5,Loe),e(Loe,aIr),e(R5,nIr),e(q,sIr),e(q,P5),e(P5,d6e),e(d6e,lIr),e(P5,iIr),e(P5,yoe),e(yoe,dIr),e(P5,cIr),e(q,mIr),e(q,B5),e(B5,c6e),e(c6e,fIr),e(B5,gIr),e(B5,xoe),e(xoe,hIr),e(B5,uIr),e(q,pIr),e(q,I5),e(I5,m6e),e(m6e,_Ir),e(I5,bIr),e(I5,$oe),e($oe,vIr),e(I5,FIr),e(q,TIr),e(q,N5),e(N5,f6e),e(f6e,MIr),e(N5,EIr),e(N5,koe),e(koe,CIr),e(N5,wIr),e(q,AIr),e(q,q5),e(q5,g6e),e(g6e,LIr),e(q5,yIr),e(q5,Soe),e(Soe,xIr),e(q5,$Ir),e(q,kIr),e(q,j5),e(j5,h6e),e(h6e,SIr),e(j5,RIr),e(j5,Roe),e(Roe,PIr),e(j5,BIr),e(q,IIr),e(q,D5),e(D5,u6e),e(u6e,NIr),e(D5,qIr),e(D5,Poe),e(Poe,jIr),e(D5,DIr),e(q,GIr),e(q,G5),e(G5,p6e),e(p6e,OIr),e(G5,VIr),e(G5,Boe),e(Boe,XIr),e(G5,zIr),e(q,QIr),e(q,O5),e(O5,_6e),e(_6e,WIr),e(O5,UIr),e(O5,Ioe),e(Ioe,HIr),e(O5,JIr),e(q,YIr),e(q,V5),e(V5,b6e),e(b6e,ZIr),e(V5,KIr),e(V5,Noe),e(Noe,eNr),e(V5,oNr),e(q,rNr),e(q,X5),e(X5,v6e),e(v6e,tNr),e(X5,aNr),e(X5,qoe),e(qoe,nNr),e(X5,sNr),e(q,lNr),e(q,z5),e(z5,F6e),e(F6e,iNr),e(z5,dNr),e(z5,joe),e(joe,cNr),e(z5,mNr),e(q,fNr),e(q,Q5),e(Q5,T6e),e(T6e,gNr),e(Q5,hNr),e(Q5,Doe),e(Doe,uNr),e(Q5,pNr),e(q,_Nr),e(q,W5),e(W5,M6e),e(M6e,bNr),e(W5,vNr),e(W5,Goe),e(Goe,FNr),e(W5,TNr),e(q,MNr),e(q,U5),e(U5,E6e),e(E6e,ENr),e(U5,CNr),e(U5,Ooe),e(Ooe,wNr),e(U5,ANr),e(q,LNr),e(q,H5),e(H5,C6e),e(C6e,yNr),e(H5,xNr),e(H5,Voe),e(Voe,$Nr),e(H5,kNr),e(q,SNr),e(q,J5),e(J5,w6e),e(w6e,RNr),e(J5,PNr),e(J5,Xoe),e(Xoe,BNr),e(J5,INr),e(q,NNr),e(q,Y5),e(Y5,A6e),e(A6e,qNr),e(Y5,jNr),e(Y5,zoe),e(zoe,DNr),e(Y5,GNr),e(q,ONr),e(q,Z5),e(Z5,L6e),e(L6e,VNr),e(Z5,XNr),e(Z5,Qoe),e(Qoe,zNr),e(Z5,QNr),e(q,WNr),e(q,K5),e(K5,y6e),e(y6e,UNr),e(K5,HNr),e(K5,Woe),e(Woe,JNr),e(K5,YNr),e(q,ZNr),e(q,e0),e(e0,x6e),e(x6e,KNr),e(e0,eqr),e(e0,Uoe),e(Uoe,oqr),e(e0,rqr),e(q,tqr),e(q,o0),e(o0,$6e),e($6e,aqr),e(o0,nqr),e(o0,Hoe),e(Hoe,sqr),e(o0,lqr),e(q,iqr),e(q,r0),e(r0,k6e),e(k6e,dqr),e(r0,cqr),e(r0,Joe),e(Joe,mqr),e(r0,fqr),e(q,gqr),e(q,t0),e(t0,S6e),e(S6e,hqr),e(t0,uqr),e(t0,Yoe),e(Yoe,pqr),e(t0,_qr),e(qr,bqr),M(a0,qr,null),b(m,vro,_),b(m,om,_),e(om,n0),e(n0,R6e),M(xS,R6e,null),e(om,vqr),e(om,P6e),e(P6e,Fqr),b(m,Fro,_),b(m,dr,_),M($S,dr,null),e(dr,Tqr),e(dr,rm),e(rm,Mqr),e(rm,Zoe),e(Zoe,Eqr),e(rm,Cqr),e(rm,Koe),e(Koe,wqr),e(rm,Aqr),e(dr,Lqr),e(dr,kS),e(kS,yqr),e(kS,B6e),e(B6e,xqr),e(kS,$qr),e(dr,kqr),e(dr,Ut),M(SS,Ut,null),e(Ut,Sqr),e(Ut,I6e),e(I6e,Rqr),e(Ut,Pqr),e(Ut,tm),e(tm,Bqr),e(tm,N6e),e(N6e,Iqr),e(tm,Nqr),e(tm,ere),e(ere,qqr),e(tm,jqr),e(Ut,Dqr),M(s0,Ut,null),e(dr,Gqr),e(dr,jr),M(RS,jr,null),e(jr,Oqr),e(jr,q6e),e(q6e,Vqr),e(jr,Xqr),e(jr,kn),e(kn,zqr),e(kn,j6e),e(j6e,Qqr),e(kn,Wqr),e(kn,D6e),e(D6e,Uqr),e(kn,Hqr),e(kn,G6e),e(G6e,Jqr),e(kn,Yqr),e(jr,Zqr),e(jr,le),e(le,l0),e(l0,O6e),e(O6e,Kqr),e(l0,ejr),e(l0,ore),e(ore,ojr),e(l0,rjr),e(le,tjr),e(le,i0),e(i0,V6e),e(V6e,ajr),e(i0,njr),e(i0,rre),e(rre,sjr),e(i0,ljr),e(le,ijr),e(le,d0),e(d0,X6e),e(X6e,djr),e(d0,cjr),e(d0,tre),e(tre,mjr),e(d0,fjr),e(le,gjr),e(le,c0),e(c0,z6e),e(z6e,hjr),e(c0,ujr),e(c0,are),e(are,pjr),e(c0,_jr),e(le,bjr),e(le,m0),e(m0,Q6e),e(Q6e,vjr),e(m0,Fjr),e(m0,nre),e(nre,Tjr),e(m0,Mjr),e(le,Ejr),e(le,f0),e(f0,W6e),e(W6e,Cjr),e(f0,wjr),e(f0,sre),e(sre,Ajr),e(f0,Ljr),e(le,yjr),e(le,g0),e(g0,U6e),e(U6e,xjr),e(g0,$jr),e(g0,lre),e(lre,kjr),e(g0,Sjr),e(le,Rjr),e(le,h0),e(h0,H6e),e(H6e,Pjr),e(h0,Bjr),e(h0,ire),e(ire,Ijr),e(h0,Njr),e(le,qjr),e(le,u0),e(u0,J6e),e(J6e,jjr),e(u0,Djr),e(u0,dre),e(dre,Gjr),e(u0,Ojr),e(le,Vjr),e(le,p0),e(p0,Y6e),e(Y6e,Xjr),e(p0,zjr),e(p0,cre),e(cre,Qjr),e(p0,Wjr),e(le,Ujr),e(le,_0),e(_0,Z6e),e(Z6e,Hjr),e(_0,Jjr),e(_0,mre),e(mre,Yjr),e(_0,Zjr),e(le,Kjr),e(le,b0),e(b0,K6e),e(K6e,eDr),e(b0,oDr),e(b0,fre),e(fre,rDr),e(b0,tDr),e(le,aDr),e(le,v0),e(v0,e7e),e(e7e,nDr),e(v0,sDr),e(v0,gre),e(gre,lDr),e(v0,iDr),e(le,dDr),e(le,F0),e(F0,o7e),e(o7e,cDr),e(F0,mDr),e(F0,hre),e(hre,fDr),e(F0,gDr),e(le,hDr),e(le,T0),e(T0,r7e),e(r7e,uDr),e(T0,pDr),e(T0,ure),e(ure,_Dr),e(T0,bDr),e(le,vDr),e(le,M0),e(M0,t7e),e(t7e,FDr),e(M0,TDr),e(M0,pre),e(pre,MDr),e(M0,EDr),e(le,CDr),e(le,E0),e(E0,a7e),e(a7e,wDr),e(E0,ADr),e(E0,_re),e(_re,LDr),e(E0,yDr),e(le,xDr),e(le,C0),e(C0,n7e),e(n7e,$Dr),e(C0,kDr),e(C0,bre),e(bre,SDr),e(C0,RDr),e(le,PDr),e(le,w0),e(w0,s7e),e(s7e,BDr),e(w0,IDr),e(w0,vre),e(vre,NDr),e(w0,qDr),e(le,jDr),e(le,A0),e(A0,l7e),e(l7e,DDr),e(A0,GDr),e(A0,Fre),e(Fre,ODr),e(A0,VDr),e(le,XDr),e(le,L0),e(L0,i7e),e(i7e,zDr),e(L0,QDr),e(L0,Tre),e(Tre,WDr),e(L0,UDr),e(le,HDr),e(le,y0),e(y0,d7e),e(d7e,JDr),e(y0,YDr),e(y0,Mre),e(Mre,ZDr),e(y0,KDr),e(le,eGr),e(le,x0),e(x0,c7e),e(c7e,oGr),e(x0,rGr),e(x0,Ere),e(Ere,tGr),e(x0,aGr),e(jr,nGr),M($0,jr,null),b(m,Tro,_),b(m,am,_),e(am,k0),e(k0,m7e),M(PS,m7e,null),e(am,sGr),e(am,f7e),e(f7e,lGr),b(m,Mro,_),b(m,cr,_),M(BS,cr,null),e(cr,iGr),e(cr,nm),e(nm,dGr),e(nm,Cre),e(Cre,cGr),e(nm,mGr),e(nm,wre),e(wre,fGr),e(nm,gGr),e(cr,hGr),e(cr,IS),e(IS,uGr),e(IS,g7e),e(g7e,pGr),e(IS,_Gr),e(cr,bGr),e(cr,Ht),M(NS,Ht,null),e(Ht,vGr),e(Ht,h7e),e(h7e,FGr),e(Ht,TGr),e(Ht,sm),e(sm,MGr),e(sm,u7e),e(u7e,EGr),e(sm,CGr),e(sm,Are),e(Are,wGr),e(sm,AGr),e(Ht,LGr),M(S0,Ht,null),e(cr,yGr),e(cr,Dr),M(qS,Dr,null),e(Dr,xGr),e(Dr,p7e),e(p7e,$Gr),e(Dr,kGr),e(Dr,Sn),e(Sn,SGr),e(Sn,_7e),e(_7e,RGr),e(Sn,PGr),e(Sn,b7e),e(b7e,BGr),e(Sn,IGr),e(Sn,v7e),e(v7e,NGr),e(Sn,qGr),e(Dr,jGr),e(Dr,Me),e(Me,R0),e(R0,F7e),e(F7e,DGr),e(R0,GGr),e(R0,Lre),e(Lre,OGr),e(R0,VGr),e(Me,XGr),e(Me,P0),e(P0,T7e),e(T7e,zGr),e(P0,QGr),e(P0,yre),e(yre,WGr),e(P0,UGr),e(Me,HGr),e(Me,B0),e(B0,M7e),e(M7e,JGr),e(B0,YGr),e(B0,xre),e(xre,ZGr),e(B0,KGr),e(Me,eOr),e(Me,I0),e(I0,E7e),e(E7e,oOr),e(I0,rOr),e(I0,$re),e($re,tOr),e(I0,aOr),e(Me,nOr),e(Me,N0),e(N0,C7e),e(C7e,sOr),e(N0,lOr),e(N0,kre),e(kre,iOr),e(N0,dOr),e(Me,cOr),e(Me,q0),e(q0,w7e),e(w7e,mOr),e(q0,fOr),e(q0,Sre),e(Sre,gOr),e(q0,hOr),e(Me,uOr),e(Me,j0),e(j0,A7e),e(A7e,pOr),e(j0,_Or),e(j0,Rre),e(Rre,bOr),e(j0,vOr),e(Me,FOr),e(Me,D0),e(D0,L7e),e(L7e,TOr),e(D0,MOr),e(D0,Pre),e(Pre,EOr),e(D0,COr),e(Me,wOr),e(Me,G0),e(G0,y7e),e(y7e,AOr),e(G0,LOr),e(G0,Bre),e(Bre,yOr),e(G0,xOr),e(Me,$Or),e(Me,O0),e(O0,x7e),e(x7e,kOr),e(O0,SOr),e(O0,Ire),e(Ire,ROr),e(O0,POr),e(Me,BOr),e(Me,V0),e(V0,$7e),e($7e,IOr),e(V0,NOr),e(V0,Nre),e(Nre,qOr),e(V0,jOr),e(Me,DOr),e(Me,X0),e(X0,k7e),e(k7e,GOr),e(X0,OOr),e(X0,qre),e(qre,VOr),e(X0,XOr),e(Me,zOr),e(Me,z0),e(z0,S7e),e(S7e,QOr),e(z0,WOr),e(z0,jre),e(jre,UOr),e(z0,HOr),e(Me,JOr),e(Me,Q0),e(Q0,R7e),e(R7e,YOr),e(Q0,ZOr),e(Q0,Dre),e(Dre,KOr),e(Q0,eVr),e(Dr,oVr),M(W0,Dr,null),b(m,Ero,_),b(m,lm,_),e(lm,U0),e(U0,P7e),M(jS,P7e,null),e(lm,rVr),e(lm,B7e),e(B7e,tVr),b(m,Cro,_),b(m,mr,_),M(DS,mr,null),e(mr,aVr),e(mr,im),e(im,nVr),e(im,Gre),e(Gre,sVr),e(im,lVr),e(im,Ore),e(Ore,iVr),e(im,dVr),e(mr,cVr),e(mr,GS),e(GS,mVr),e(GS,I7e),e(I7e,fVr),e(GS,gVr),e(mr,hVr),e(mr,Jt),M(OS,Jt,null),e(Jt,uVr),e(Jt,N7e),e(N7e,pVr),e(Jt,_Vr),e(Jt,dm),e(dm,bVr),e(dm,q7e),e(q7e,vVr),e(dm,FVr),e(dm,Vre),e(Vre,TVr),e(dm,MVr),e(Jt,EVr),M(H0,Jt,null),e(mr,CVr),e(mr,Gr),M(VS,Gr,null),e(Gr,wVr),e(Gr,j7e),e(j7e,AVr),e(Gr,LVr),e(Gr,Rn),e(Rn,yVr),e(Rn,D7e),e(D7e,xVr),e(Rn,$Vr),e(Rn,G7e),e(G7e,kVr),e(Rn,SVr),e(Rn,O7e),e(O7e,RVr),e(Rn,PVr),e(Gr,BVr),e(Gr,Be),e(Be,J0),e(J0,V7e),e(V7e,IVr),e(J0,NVr),e(J0,Xre),e(Xre,qVr),e(J0,jVr),e(Be,DVr),e(Be,Y0),e(Y0,X7e),e(X7e,GVr),e(Y0,OVr),e(Y0,zre),e(zre,VVr),e(Y0,XVr),e(Be,zVr),e(Be,Al),e(Al,z7e),e(z7e,QVr),e(Al,WVr),e(Al,Qre),e(Qre,UVr),e(Al,HVr),e(Al,Wre),e(Wre,JVr),e(Al,YVr),e(Be,ZVr),e(Be,Z0),e(Z0,Q7e),e(Q7e,KVr),e(Z0,eXr),e(Z0,Ure),e(Ure,oXr),e(Z0,rXr),e(Be,tXr),e(Be,K0),e(K0,W7e),e(W7e,aXr),e(K0,nXr),e(K0,Hre),e(Hre,sXr),e(K0,lXr),e(Be,iXr),e(Be,ew),e(ew,U7e),e(U7e,dXr),e(ew,cXr),e(ew,Jre),e(Jre,mXr),e(ew,fXr),e(Be,gXr),e(Be,ow),e(ow,H7e),e(H7e,hXr),e(ow,uXr),e(ow,Yre),e(Yre,pXr),e(ow,_Xr),e(Be,bXr),e(Be,rw),e(rw,J7e),e(J7e,vXr),e(rw,FXr),e(rw,Zre),e(Zre,TXr),e(rw,MXr),e(Be,EXr),e(Be,tw),e(tw,Y7e),e(Y7e,CXr),e(tw,wXr),e(tw,Kre),e(Kre,AXr),e(tw,LXr),e(Gr,yXr),M(aw,Gr,null),b(m,wro,_),b(m,cm,_),e(cm,nw),e(nw,Z7e),M(XS,Z7e,null),e(cm,xXr),e(cm,K7e),e(K7e,$Xr),b(m,Aro,_),b(m,fr,_),M(zS,fr,null),e(fr,kXr),e(fr,mm),e(mm,SXr),e(mm,ete),e(ete,RXr),e(mm,PXr),e(mm,ote),e(ote,BXr),e(mm,IXr),e(fr,NXr),e(fr,QS),e(QS,qXr),e(QS,eLe),e(eLe,jXr),e(QS,DXr),e(fr,GXr),e(fr,Yt),M(WS,Yt,null),e(Yt,OXr),e(Yt,oLe),e(oLe,VXr),e(Yt,XXr),e(Yt,fm),e(fm,zXr),e(fm,rLe),e(rLe,QXr),e(fm,WXr),e(fm,rte),e(rte,UXr),e(fm,HXr),e(Yt,JXr),M(sw,Yt,null),e(fr,YXr),e(fr,Or),M(US,Or,null),e(Or,ZXr),e(Or,tLe),e(tLe,KXr),e(Or,ezr),e(Or,Pn),e(Pn,ozr),e(Pn,aLe),e(aLe,rzr),e(Pn,tzr),e(Pn,nLe),e(nLe,azr),e(Pn,nzr),e(Pn,sLe),e(sLe,szr),e(Pn,lzr),e(Or,izr),e(Or,gm),e(gm,lw),e(lw,lLe),e(lLe,dzr),e(lw,czr),e(lw,tte),e(tte,mzr),e(lw,fzr),e(gm,gzr),e(gm,iw),e(iw,iLe),e(iLe,hzr),e(iw,uzr),e(iw,ate),e(ate,pzr),e(iw,_zr),e(gm,bzr),e(gm,dw),e(dw,dLe),e(dLe,vzr),e(dw,Fzr),e(dw,nte),e(nte,Tzr),e(dw,Mzr),e(Or,Ezr),M(cw,Or,null),b(m,Lro,_),b(m,hm,_),e(hm,mw),e(mw,cLe),M(HS,cLe,null),e(hm,Czr),e(hm,mLe),e(mLe,wzr),b(m,yro,_),b(m,gr,_),M(JS,gr,null),e(gr,Azr),e(gr,um),e(um,Lzr),e(um,ste),e(ste,yzr),e(um,xzr),e(um,lte),e(lte,$zr),e(um,kzr),e(gr,Szr),e(gr,YS),e(YS,Rzr),e(YS,fLe),e(fLe,Pzr),e(YS,Bzr),e(gr,Izr),e(gr,Zt),M(ZS,Zt,null),e(Zt,Nzr),e(Zt,gLe),e(gLe,qzr),e(Zt,jzr),e(Zt,pm),e(pm,Dzr),e(pm,hLe),e(hLe,Gzr),e(pm,Ozr),e(pm,ite),e(ite,Vzr),e(pm,Xzr),e(Zt,zzr),M(fw,Zt,null),e(gr,Qzr),e(gr,Vr),M(KS,Vr,null),e(Vr,Wzr),e(Vr,uLe),e(uLe,Uzr),e(Vr,Hzr),e(Vr,Bn),e(Bn,Jzr),e(Bn,pLe),e(pLe,Yzr),e(Bn,Zzr),e(Bn,_Le),e(_Le,Kzr),e(Bn,eQr),e(Bn,bLe),e(bLe,oQr),e(Bn,rQr),e(Vr,tQr),e(Vr,ge),e(ge,gw),e(gw,vLe),e(vLe,aQr),e(gw,nQr),e(gw,dte),e(dte,sQr),e(gw,lQr),e(ge,iQr),e(ge,hw),e(hw,FLe),e(FLe,dQr),e(hw,cQr),e(hw,cte),e(cte,mQr),e(hw,fQr),e(ge,gQr),e(ge,uw),e(uw,TLe),e(TLe,hQr),e(uw,uQr),e(uw,mte),e(mte,pQr),e(uw,_Qr),e(ge,bQr),e(ge,pw),e(pw,MLe),e(MLe,vQr),e(pw,FQr),e(pw,fte),e(fte,TQr),e(pw,MQr),e(ge,EQr),e(ge,_w),e(_w,ELe),e(ELe,CQr),e(_w,wQr),e(_w,gte),e(gte,AQr),e(_w,LQr),e(ge,yQr),e(ge,bw),e(bw,CLe),e(CLe,xQr),e(bw,$Qr),e(bw,hte),e(hte,kQr),e(bw,SQr),e(ge,RQr),e(ge,vw),e(vw,wLe),e(wLe,PQr),e(vw,BQr),e(vw,ute),e(ute,IQr),e(vw,NQr),e(ge,qQr),e(ge,Fw),e(Fw,ALe),e(ALe,jQr),e(Fw,DQr),e(Fw,pte),e(pte,GQr),e(Fw,OQr),e(ge,VQr),e(ge,Tw),e(Tw,LLe),e(LLe,XQr),e(Tw,zQr),e(Tw,_te),e(_te,QQr),e(Tw,WQr),e(ge,UQr),e(ge,Mw),e(Mw,yLe),e(yLe,HQr),e(Mw,JQr),e(Mw,bte),e(bte,YQr),e(Mw,ZQr),e(ge,KQr),e(ge,Ew),e(Ew,xLe),e(xLe,eWr),e(Ew,oWr),e(Ew,vte),e(vte,rWr),e(Ew,tWr),e(ge,aWr),e(ge,Cw),e(Cw,$Le),e($Le,nWr),e(Cw,sWr),e(Cw,Fte),e(Fte,lWr),e(Cw,iWr),e(ge,dWr),e(ge,ww),e(ww,kLe),e(kLe,cWr),e(ww,mWr),e(ww,Tte),e(Tte,fWr),e(ww,gWr),e(ge,hWr),e(ge,Aw),e(Aw,SLe),e(SLe,uWr),e(Aw,pWr),e(Aw,Mte),e(Mte,_Wr),e(Aw,bWr),e(ge,vWr),e(ge,Lw),e(Lw,RLe),e(RLe,FWr),e(Lw,TWr),e(Lw,Ete),e(Ete,MWr),e(Lw,EWr),e(ge,CWr),e(ge,yw),e(yw,PLe),e(PLe,wWr),e(yw,AWr),e(yw,Cte),e(Cte,LWr),e(yw,yWr),e(ge,xWr),e(ge,xw),e(xw,BLe),e(BLe,$Wr),e(xw,kWr),e(xw,wte),e(wte,SWr),e(xw,RWr),e(ge,PWr),e(ge,$w),e($w,ILe),e(ILe,BWr),e($w,IWr),e($w,Ate),e(Ate,NWr),e($w,qWr),e(ge,jWr),e(ge,kw),e(kw,NLe),e(NLe,DWr),e(kw,GWr),e(kw,Lte),e(Lte,OWr),e(kw,VWr),e(ge,XWr),e(ge,Sw),e(Sw,qLe),e(qLe,zWr),e(Sw,QWr),e(Sw,yte),e(yte,WWr),e(Sw,UWr),e(Vr,HWr),M(Rw,Vr,null),b(m,xro,_),b(m,_m,_),e(_m,Pw),e(Pw,jLe),M(eR,jLe,null),e(_m,JWr),e(_m,DLe),e(DLe,YWr),b(m,$ro,_),b(m,hr,_),M(oR,hr,null),e(hr,ZWr),e(hr,bm),e(bm,KWr),e(bm,xte),e(xte,eUr),e(bm,oUr),e(bm,$te),e($te,rUr),e(bm,tUr),e(hr,aUr),e(hr,rR),e(rR,nUr),e(rR,GLe),e(GLe,sUr),e(rR,lUr),e(hr,iUr),e(hr,Kt),M(tR,Kt,null),e(Kt,dUr),e(Kt,OLe),e(OLe,cUr),e(Kt,mUr),e(Kt,vm),e(vm,fUr),e(vm,VLe),e(VLe,gUr),e(vm,hUr),e(vm,kte),e(kte,uUr),e(vm,pUr),e(Kt,_Ur),M(Bw,Kt,null),e(hr,bUr),e(hr,Xr),M(aR,Xr,null),e(Xr,vUr),e(Xr,XLe),e(XLe,FUr),e(Xr,TUr),e(Xr,In),e(In,MUr),e(In,zLe),e(zLe,EUr),e(In,CUr),e(In,QLe),e(QLe,wUr),e(In,AUr),e(In,WLe),e(WLe,LUr),e(In,yUr),e(Xr,xUr),e(Xr,ye),e(ye,Iw),e(Iw,ULe),e(ULe,$Ur),e(Iw,kUr),e(Iw,Ste),e(Ste,SUr),e(Iw,RUr),e(ye,PUr),e(ye,Nw),e(Nw,HLe),e(HLe,BUr),e(Nw,IUr),e(Nw,Rte),e(Rte,NUr),e(Nw,qUr),e(ye,jUr),e(ye,qw),e(qw,JLe),e(JLe,DUr),e(qw,GUr),e(qw,Pte),e(Pte,OUr),e(qw,VUr),e(ye,XUr),e(ye,jw),e(jw,YLe),e(YLe,zUr),e(jw,QUr),e(jw,Bte),e(Bte,WUr),e(jw,UUr),e(ye,HUr),e(ye,Dw),e(Dw,ZLe),e(ZLe,JUr),e(Dw,YUr),e(Dw,Ite),e(Ite,ZUr),e(Dw,KUr),e(ye,eHr),e(ye,Gw),e(Gw,KLe),e(KLe,oHr),e(Gw,rHr),e(Gw,Nte),e(Nte,tHr),e(Gw,aHr),e(ye,nHr),e(ye,Ow),e(Ow,eye),e(eye,sHr),e(Ow,lHr),e(Ow,qte),e(qte,iHr),e(Ow,dHr),e(ye,cHr),e(ye,Vw),e(Vw,oye),e(oye,mHr),e(Vw,fHr),e(Vw,jte),e(jte,gHr),e(Vw,hHr),e(ye,uHr),e(ye,Xw),e(Xw,rye),e(rye,pHr),e(Xw,_Hr),e(Xw,Dte),e(Dte,bHr),e(Xw,vHr),e(ye,FHr),e(ye,zw),e(zw,tye),e(tye,THr),e(zw,MHr),e(zw,Gte),e(Gte,EHr),e(zw,CHr),e(Xr,wHr),M(Qw,Xr,null),b(m,kro,_),b(m,Fm,_),e(Fm,Ww),e(Ww,aye),M(nR,aye,null),e(Fm,AHr),e(Fm,nye),e(nye,LHr),b(m,Sro,_),b(m,ur,_),M(sR,ur,null),e(ur,yHr),e(ur,Tm),e(Tm,xHr),e(Tm,Ote),e(Ote,$Hr),e(Tm,kHr),e(Tm,Vte),e(Vte,SHr),e(Tm,RHr),e(ur,PHr),e(ur,lR),e(lR,BHr),e(lR,sye),e(sye,IHr),e(lR,NHr),e(ur,qHr),e(ur,ea),M(iR,ea,null),e(ea,jHr),e(ea,lye),e(lye,DHr),e(ea,GHr),e(ea,Mm),e(Mm,OHr),e(Mm,iye),e(iye,VHr),e(Mm,XHr),e(Mm,Xte),e(Xte,zHr),e(Mm,QHr),e(ea,WHr),M(Uw,ea,null),e(ur,UHr),e(ur,zr),M(dR,zr,null),e(zr,HHr),e(zr,dye),e(dye,JHr),e(zr,YHr),e(zr,Nn),e(Nn,ZHr),e(Nn,cye),e(cye,KHr),e(Nn,eJr),e(Nn,mye),e(mye,oJr),e(Nn,rJr),e(Nn,fye),e(fye,tJr),e(Nn,aJr),e(zr,nJr),e(zr,re),e(re,Hw),e(Hw,gye),e(gye,sJr),e(Hw,lJr),e(Hw,zte),e(zte,iJr),e(Hw,dJr),e(re,cJr),e(re,Jw),e(Jw,hye),e(hye,mJr),e(Jw,fJr),e(Jw,Qte),e(Qte,gJr),e(Jw,hJr),e(re,uJr),e(re,Yw),e(Yw,uye),e(uye,pJr),e(Yw,_Jr),e(Yw,Wte),e(Wte,bJr),e(Yw,vJr),e(re,FJr),e(re,Zw),e(Zw,pye),e(pye,TJr),e(Zw,MJr),e(Zw,Ute),e(Ute,EJr),e(Zw,CJr),e(re,wJr),e(re,Kw),e(Kw,_ye),e(_ye,AJr),e(Kw,LJr),e(Kw,Hte),e(Hte,yJr),e(Kw,xJr),e(re,$Jr),e(re,eA),e(eA,bye),e(bye,kJr),e(eA,SJr),e(eA,Jte),e(Jte,RJr),e(eA,PJr),e(re,BJr),e(re,oA),e(oA,vye),e(vye,IJr),e(oA,NJr),e(oA,Yte),e(Yte,qJr),e(oA,jJr),e(re,DJr),e(re,rA),e(rA,Fye),e(Fye,GJr),e(rA,OJr),e(rA,Zte),e(Zte,VJr),e(rA,XJr),e(re,zJr),e(re,tA),e(tA,Tye),e(Tye,QJr),e(tA,WJr),e(tA,Kte),e(Kte,UJr),e(tA,HJr),e(re,JJr),e(re,aA),e(aA,Mye),e(Mye,YJr),e(aA,ZJr),e(aA,eae),e(eae,KJr),e(aA,eYr),e(re,oYr),e(re,nA),e(nA,Eye),e(Eye,rYr),e(nA,tYr),e(nA,oae),e(oae,aYr),e(nA,nYr),e(re,sYr),e(re,sA),e(sA,Cye),e(Cye,lYr),e(sA,iYr),e(sA,rae),e(rae,dYr),e(sA,cYr),e(re,mYr),e(re,lA),e(lA,wye),e(wye,fYr),e(lA,gYr),e(lA,tae),e(tae,hYr),e(lA,uYr),e(re,pYr),e(re,iA),e(iA,Aye),e(Aye,_Yr),e(iA,bYr),e(iA,aae),e(aae,vYr),e(iA,FYr),e(re,TYr),e(re,dA),e(dA,Lye),e(Lye,MYr),e(dA,EYr),e(dA,nae),e(nae,CYr),e(dA,wYr),e(re,AYr),e(re,cA),e(cA,yye),e(yye,LYr),e(cA,yYr),e(cA,sae),e(sae,xYr),e(cA,$Yr),e(re,kYr),e(re,mA),e(mA,xye),e(xye,SYr),e(mA,RYr),e(mA,lae),e(lae,PYr),e(mA,BYr),e(re,IYr),e(re,fA),e(fA,$ye),e($ye,NYr),e(fA,qYr),e(fA,iae),e(iae,jYr),e(fA,DYr),e(re,GYr),e(re,gA),e(gA,kye),e(kye,OYr),e(gA,VYr),e(gA,dae),e(dae,XYr),e(gA,zYr),e(re,QYr),e(re,hA),e(hA,Sye),e(Sye,WYr),e(hA,UYr),e(hA,cae),e(cae,HYr),e(hA,JYr),e(re,YYr),e(re,uA),e(uA,Rye),e(Rye,ZYr),e(uA,KYr),e(uA,mae),e(mae,eZr),e(uA,oZr),e(re,rZr),e(re,pA),e(pA,Pye),e(Pye,tZr),e(pA,aZr),e(pA,fae),e(fae,nZr),e(pA,sZr),e(re,lZr),e(re,_A),e(_A,Bye),e(Bye,iZr),e(_A,dZr),e(_A,gae),e(gae,cZr),e(_A,mZr),e(re,fZr),e(re,bA),e(bA,Iye),e(Iye,gZr),e(bA,hZr),e(bA,hae),e(hae,uZr),e(bA,pZr),e(re,_Zr),e(re,vA),e(vA,Nye),e(Nye,bZr),e(vA,vZr),e(vA,uae),e(uae,FZr),e(vA,TZr),e(re,MZr),e(re,FA),e(FA,qye),e(qye,EZr),e(FA,CZr),e(FA,pae),e(pae,wZr),e(FA,AZr),e(re,LZr),e(re,TA),e(TA,jye),e(jye,yZr),e(TA,xZr),e(TA,_ae),e(_ae,$Zr),e(TA,kZr),e(zr,SZr),M(MA,zr,null),b(m,Rro,_),b(m,Em,_),e(Em,EA),e(EA,Dye),M(cR,Dye,null),e(Em,RZr),e(Em,Gye),e(Gye,PZr),b(m,Pro,_),b(m,pr,_),M(mR,pr,null),e(pr,BZr),e(pr,Cm),e(Cm,IZr),e(Cm,bae),e(bae,NZr),e(Cm,qZr),e(Cm,vae),e(vae,jZr),e(Cm,DZr),e(pr,GZr),e(pr,fR),e(fR,OZr),e(fR,Oye),e(Oye,VZr),e(fR,XZr),e(pr,zZr),e(pr,oa),M(gR,oa,null),e(oa,QZr),e(oa,Vye),e(Vye,WZr),e(oa,UZr),e(oa,wm),e(wm,HZr),e(wm,Xye),e(Xye,JZr),e(wm,YZr),e(wm,Fae),e(Fae,ZZr),e(wm,KZr),e(oa,eKr),M(CA,oa,null),e(pr,oKr),e(pr,Qr),M(hR,Qr,null),e(Qr,rKr),e(Qr,zye),e(zye,tKr),e(Qr,aKr),e(Qr,qn),e(qn,nKr),e(qn,Qye),e(Qye,sKr),e(qn,lKr),e(qn,Wye),e(Wye,iKr),e(qn,dKr),e(qn,Uye),e(Uye,cKr),e(qn,mKr),e(Qr,fKr),e(Qr,ve),e(ve,wA),e(wA,Hye),e(Hye,gKr),e(wA,hKr),e(wA,Tae),e(Tae,uKr),e(wA,pKr),e(ve,_Kr),e(ve,AA),e(AA,Jye),e(Jye,bKr),e(AA,vKr),e(AA,Mae),e(Mae,FKr),e(AA,TKr),e(ve,MKr),e(ve,LA),e(LA,Yye),e(Yye,EKr),e(LA,CKr),e(LA,Eae),e(Eae,wKr),e(LA,AKr),e(ve,LKr),e(ve,yA),e(yA,Zye),e(Zye,yKr),e(yA,xKr),e(yA,Cae),e(Cae,$Kr),e(yA,kKr),e(ve,SKr),e(ve,xA),e(xA,Kye),e(Kye,RKr),e(xA,PKr),e(xA,wae),e(wae,BKr),e(xA,IKr),e(ve,NKr),e(ve,$A),e($A,e8e),e(e8e,qKr),e($A,jKr),e($A,Aae),e(Aae,DKr),e($A,GKr),e(ve,OKr),e(ve,kA),e(kA,o8e),e(o8e,VKr),e(kA,XKr),e(kA,Lae),e(Lae,zKr),e(kA,QKr),e(ve,WKr),e(ve,SA),e(SA,r8e),e(r8e,UKr),e(SA,HKr),e(SA,yae),e(yae,JKr),e(SA,YKr),e(ve,ZKr),e(ve,RA),e(RA,t8e),e(t8e,KKr),e(RA,eet),e(RA,xae),e(xae,oet),e(RA,ret),e(ve,tet),e(ve,PA),e(PA,a8e),e(a8e,aet),e(PA,net),e(PA,$ae),e($ae,set),e(PA,iet),e(ve,det),e(ve,BA),e(BA,n8e),e(n8e,cet),e(BA,met),e(BA,kae),e(kae,fet),e(BA,get),e(ve,het),e(ve,IA),e(IA,s8e),e(s8e,uet),e(IA,pet),e(IA,Sae),e(Sae,_et),e(IA,bet),e(ve,vet),e(ve,NA),e(NA,l8e),e(l8e,Fet),e(NA,Tet),e(NA,Rae),e(Rae,Met),e(NA,Eet),e(ve,Cet),e(ve,qA),e(qA,i8e),e(i8e,wet),e(qA,Aet),e(qA,Pae),e(Pae,Let),e(qA,yet),e(ve,xet),e(ve,jA),e(jA,d8e),e(d8e,$et),e(jA,ket),e(jA,Bae),e(Bae,Set),e(jA,Ret),e(ve,Pet),e(ve,DA),e(DA,c8e),e(c8e,Bet),e(DA,Iet),e(DA,Iae),e(Iae,Net),e(DA,qet),e(ve,jet),e(ve,GA),e(GA,m8e),e(m8e,Det),e(GA,Get),e(GA,Nae),e(Nae,Oet),e(GA,Vet),e(Qr,Xet),M(OA,Qr,null),b(m,Bro,_),b(m,Am,_),e(Am,VA),e(VA,f8e),M(uR,f8e,null),e(Am,zet),e(Am,g8e),e(g8e,Qet),b(m,Iro,_),b(m,_r,_),M(pR,_r,null),e(_r,Wet),e(_r,Lm),e(Lm,Uet),e(Lm,qae),e(qae,Het),e(Lm,Jet),e(Lm,jae),e(jae,Yet),e(Lm,Zet),e(_r,Ket),e(_r,_R),e(_R,eot),e(_R,h8e),e(h8e,oot),e(_R,rot),e(_r,tot),e(_r,ra),M(bR,ra,null),e(ra,aot),e(ra,u8e),e(u8e,not),e(ra,sot),e(ra,ym),e(ym,lot),e(ym,p8e),e(p8e,iot),e(ym,dot),e(ym,Dae),e(Dae,cot),e(ym,mot),e(ra,fot),M(XA,ra,null),e(_r,got),e(_r,Wr),M(vR,Wr,null),e(Wr,hot),e(Wr,_8e),e(_8e,uot),e(Wr,pot),e(Wr,jn),e(jn,_ot),e(jn,b8e),e(b8e,bot),e(jn,vot),e(jn,v8e),e(v8e,Fot),e(jn,Tot),e(jn,F8e),e(F8e,Mot),e(jn,Eot),e(Wr,Cot),e(Wr,FR),e(FR,zA),e(zA,T8e),e(T8e,wot),e(zA,Aot),e(zA,Gae),e(Gae,Lot),e(zA,yot),e(FR,xot),e(FR,QA),e(QA,M8e),e(M8e,$ot),e(QA,kot),e(QA,Oae),e(Oae,Sot),e(QA,Rot),e(Wr,Pot),M(WA,Wr,null),b(m,Nro,_),b(m,xm,_),e(xm,UA),e(UA,E8e),M(TR,E8e,null),e(xm,Bot),e(xm,C8e),e(C8e,Iot),b(m,qro,_),b(m,br,_),M(MR,br,null),e(br,Not),e(br,$m),e($m,qot),e($m,Vae),e(Vae,jot),e($m,Dot),e($m,Xae),e(Xae,Got),e($m,Oot),e(br,Vot),e(br,ER),e(ER,Xot),e(ER,w8e),e(w8e,zot),e(ER,Qot),e(br,Wot),e(br,ta),M(CR,ta,null),e(ta,Uot),e(ta,A8e),e(A8e,Hot),e(ta,Jot),e(ta,km),e(km,Yot),e(km,L8e),e(L8e,Zot),e(km,Kot),e(km,zae),e(zae,ert),e(km,ort),e(ta,rrt),M(HA,ta,null),e(br,trt),e(br,Ur),M(wR,Ur,null),e(Ur,art),e(Ur,y8e),e(y8e,nrt),e(Ur,srt),e(Ur,Dn),e(Dn,lrt),e(Dn,x8e),e(x8e,irt),e(Dn,drt),e(Dn,$8e),e($8e,crt),e(Dn,mrt),e(Dn,k8e),e(k8e,frt),e(Dn,grt),e(Ur,hrt),e(Ur,S8e),e(S8e,JA),e(JA,R8e),e(R8e,urt),e(JA,prt),e(JA,Qae),e(Qae,_rt),e(JA,brt),e(Ur,vrt),M(YA,Ur,null),b(m,jro,_),b(m,Sm,_),e(Sm,ZA),e(ZA,P8e),M(AR,P8e,null),e(Sm,Frt),e(Sm,B8e),e(B8e,Trt),b(m,Dro,_),b(m,vr,_),M(LR,vr,null),e(vr,Mrt),e(vr,Rm),e(Rm,Ert),e(Rm,Wae),e(Wae,Crt),e(Rm,wrt),e(Rm,Uae),e(Uae,Art),e(Rm,Lrt),e(vr,yrt),e(vr,yR),e(yR,xrt),e(yR,I8e),e(I8e,$rt),e(yR,krt),e(vr,Srt),e(vr,aa),M(xR,aa,null),e(aa,Rrt),e(aa,N8e),e(N8e,Prt),e(aa,Brt),e(aa,Pm),e(Pm,Irt),e(Pm,q8e),e(q8e,Nrt),e(Pm,qrt),e(Pm,Hae),e(Hae,jrt),e(Pm,Drt),e(aa,Grt),M(KA,aa,null),e(vr,Ort),e(vr,Hr),M($R,Hr,null),e(Hr,Vrt),e(Hr,j8e),e(j8e,Xrt),e(Hr,zrt),e(Hr,Gn),e(Gn,Qrt),e(Gn,D8e),e(D8e,Wrt),e(Gn,Urt),e(Gn,G8e),e(G8e,Hrt),e(Gn,Jrt),e(Gn,O8e),e(O8e,Yrt),e(Gn,Zrt),e(Hr,Krt),e(Hr,V8e),e(V8e,e6),e(e6,X8e),e(X8e,ett),e(e6,ott),e(e6,Jae),e(Jae,rtt),e(e6,ttt),e(Hr,att),M(o6,Hr,null),b(m,Gro,_),b(m,Bm,_),e(Bm,r6),e(r6,z8e),M(kR,z8e,null),e(Bm,ntt),e(Bm,Q8e),e(Q8e,stt),b(m,Oro,_),b(m,Fr,_),M(SR,Fr,null),e(Fr,ltt),e(Fr,Im),e(Im,itt),e(Im,Yae),e(Yae,dtt),e(Im,ctt),e(Im,Zae),e(Zae,mtt),e(Im,ftt),e(Fr,gtt),e(Fr,RR),e(RR,htt),e(RR,W8e),e(W8e,utt),e(RR,ptt),e(Fr,_tt),e(Fr,na),M(PR,na,null),e(na,btt),e(na,U8e),e(U8e,vtt),e(na,Ftt),e(na,Nm),e(Nm,Ttt),e(Nm,H8e),e(H8e,Mtt),e(Nm,Ett),e(Nm,Kae),e(Kae,Ctt),e(Nm,wtt),e(na,Att),M(t6,na,null),e(Fr,Ltt),e(Fr,Jr),M(BR,Jr,null),e(Jr,ytt),e(Jr,J8e),e(J8e,xtt),e(Jr,$tt),e(Jr,On),e(On,ktt),e(On,Y8e),e(Y8e,Stt),e(On,Rtt),e(On,Z8e),e(Z8e,Ptt),e(On,Btt),e(On,K8e),e(K8e,Itt),e(On,Ntt),e(Jr,qtt),e(Jr,ce),e(ce,a6),e(a6,e9e),e(e9e,jtt),e(a6,Dtt),e(a6,ene),e(ene,Gtt),e(a6,Ott),e(ce,Vtt),e(ce,n6),e(n6,o9e),e(o9e,Xtt),e(n6,ztt),e(n6,one),e(one,Qtt),e(n6,Wtt),e(ce,Utt),e(ce,s6),e(s6,r9e),e(r9e,Htt),e(s6,Jtt),e(s6,rne),e(rne,Ytt),e(s6,Ztt),e(ce,Ktt),e(ce,l6),e(l6,t9e),e(t9e,eat),e(l6,oat),e(l6,tne),e(tne,rat),e(l6,tat),e(ce,aat),e(ce,i6),e(i6,a9e),e(a9e,nat),e(i6,sat),e(i6,ane),e(ane,lat),e(i6,iat),e(ce,dat),e(ce,d6),e(d6,n9e),e(n9e,cat),e(d6,mat),e(d6,nne),e(nne,fat),e(d6,gat),e(ce,hat),e(ce,c6),e(c6,s9e),e(s9e,uat),e(c6,pat),e(c6,sne),e(sne,_at),e(c6,bat),e(ce,vat),e(ce,m6),e(m6,l9e),e(l9e,Fat),e(m6,Tat),e(m6,lne),e(lne,Mat),e(m6,Eat),e(ce,Cat),e(ce,f6),e(f6,i9e),e(i9e,wat),e(f6,Aat),e(f6,ine),e(ine,Lat),e(f6,yat),e(ce,xat),e(ce,g6),e(g6,d9e),e(d9e,$at),e(g6,kat),e(g6,dne),e(dne,Sat),e(g6,Rat),e(ce,Pat),e(ce,h6),e(h6,c9e),e(c9e,Bat),e(h6,Iat),e(h6,cne),e(cne,Nat),e(h6,qat),e(ce,jat),e(ce,u6),e(u6,m9e),e(m9e,Dat),e(u6,Gat),e(u6,mne),e(mne,Oat),e(u6,Vat),e(ce,Xat),e(ce,p6),e(p6,f9e),e(f9e,zat),e(p6,Qat),e(p6,fne),e(fne,Wat),e(p6,Uat),e(ce,Hat),e(ce,_6),e(_6,g9e),e(g9e,Jat),e(_6,Yat),e(_6,gne),e(gne,Zat),e(_6,Kat),e(ce,ent),e(ce,b6),e(b6,h9e),e(h9e,ont),e(b6,rnt),e(b6,hne),e(hne,tnt),e(b6,ant),e(ce,nnt),e(ce,v6),e(v6,u9e),e(u9e,snt),e(v6,lnt),e(v6,une),e(une,int),e(v6,dnt),e(ce,cnt),e(ce,F6),e(F6,p9e),e(p9e,mnt),e(F6,fnt),e(F6,pne),e(pne,gnt),e(F6,hnt),e(ce,unt),e(ce,T6),e(T6,_9e),e(_9e,pnt),e(T6,_nt),e(T6,_ne),e(_ne,bnt),e(T6,vnt),e(ce,Fnt),e(ce,M6),e(M6,b9e),e(b9e,Tnt),e(M6,Mnt),e(M6,bne),e(bne,Ent),e(M6,Cnt),e(ce,wnt),e(ce,E6),e(E6,v9e),e(v9e,Ant),e(E6,Lnt),e(E6,vne),e(vne,ynt),e(E6,xnt),e(ce,$nt),e(ce,C6),e(C6,F9e),e(F9e,knt),e(C6,Snt),e(C6,Fne),e(Fne,Rnt),e(C6,Pnt),e(Jr,Bnt),M(w6,Jr,null),b(m,Vro,_),b(m,qm,_),e(qm,A6),e(A6,T9e),M(IR,T9e,null),e(qm,Int),e(qm,M9e),e(M9e,Nnt),b(m,Xro,_),b(m,Tr,_),M(NR,Tr,null),e(Tr,qnt),e(Tr,jm),e(jm,jnt),e(jm,Tne),e(Tne,Dnt),e(jm,Gnt),e(jm,Mne),e(Mne,Ont),e(jm,Vnt),e(Tr,Xnt),e(Tr,qR),e(qR,znt),e(qR,E9e),e(E9e,Qnt),e(qR,Wnt),e(Tr,Unt),e(Tr,sa),M(jR,sa,null),e(sa,Hnt),e(sa,C9e),e(C9e,Jnt),e(sa,Ynt),e(sa,Dm),e(Dm,Znt),e(Dm,w9e),e(w9e,Knt),e(Dm,est),e(Dm,Ene),e(Ene,ost),e(Dm,rst),e(sa,tst),M(L6,sa,null),e(Tr,ast),e(Tr,Yr),M(DR,Yr,null),e(Yr,nst),e(Yr,A9e),e(A9e,sst),e(Yr,lst),e(Yr,Vn),e(Vn,ist),e(Vn,L9e),e(L9e,dst),e(Vn,cst),e(Vn,y9e),e(y9e,mst),e(Vn,fst),e(Vn,x9e),e(x9e,gst),e(Vn,hst),e(Yr,ust),e(Yr,me),e(me,y6),e(y6,$9e),e($9e,pst),e(y6,_st),e(y6,Cne),e(Cne,bst),e(y6,vst),e(me,Fst),e(me,x6),e(x6,k9e),e(k9e,Tst),e(x6,Mst),e(x6,wne),e(wne,Est),e(x6,Cst),e(me,wst),e(me,$6),e($6,S9e),e(S9e,Ast),e($6,Lst),e($6,Ane),e(Ane,yst),e($6,xst),e(me,$st),e(me,k6),e(k6,R9e),e(R9e,kst),e(k6,Sst),e(k6,Lne),e(Lne,Rst),e(k6,Pst),e(me,Bst),e(me,S6),e(S6,P9e),e(P9e,Ist),e(S6,Nst),e(S6,yne),e(yne,qst),e(S6,jst),e(me,Dst),e(me,R6),e(R6,B9e),e(B9e,Gst),e(R6,Ost),e(R6,xne),e(xne,Vst),e(R6,Xst),e(me,zst),e(me,P6),e(P6,I9e),e(I9e,Qst),e(P6,Wst),e(P6,$ne),e($ne,Ust),e(P6,Hst),e(me,Jst),e(me,B6),e(B6,N9e),e(N9e,Yst),e(B6,Zst),e(B6,kne),e(kne,Kst),e(B6,elt),e(me,olt),e(me,I6),e(I6,q9e),e(q9e,rlt),e(I6,tlt),e(I6,Sne),e(Sne,alt),e(I6,nlt),e(me,slt),e(me,N6),e(N6,j9e),e(j9e,llt),e(N6,ilt),e(N6,Rne),e(Rne,dlt),e(N6,clt),e(me,mlt),e(me,q6),e(q6,D9e),e(D9e,flt),e(q6,glt),e(q6,Pne),e(Pne,hlt),e(q6,ult),e(me,plt),e(me,j6),e(j6,G9e),e(G9e,_lt),e(j6,blt),e(j6,Bne),e(Bne,vlt),e(j6,Flt),e(me,Tlt),e(me,D6),e(D6,O9e),e(O9e,Mlt),e(D6,Elt),e(D6,Ine),e(Ine,Clt),e(D6,wlt),e(me,Alt),e(me,G6),e(G6,V9e),e(V9e,Llt),e(G6,ylt),e(G6,Nne),e(Nne,xlt),e(G6,$lt),e(me,klt),e(me,O6),e(O6,X9e),e(X9e,Slt),e(O6,Rlt),e(O6,qne),e(qne,Plt),e(O6,Blt),e(me,Ilt),e(me,V6),e(V6,z9e),e(z9e,Nlt),e(V6,qlt),e(V6,jne),e(jne,jlt),e(V6,Dlt),e(me,Glt),e(me,X6),e(X6,Q9e),e(Q9e,Olt),e(X6,Vlt),e(X6,Dne),e(Dne,Xlt),e(X6,zlt),e(me,Qlt),e(me,z6),e(z6,W9e),e(W9e,Wlt),e(z6,Ult),e(z6,Gne),e(Gne,Hlt),e(z6,Jlt),e(me,Ylt),e(me,Q6),e(Q6,U9e),e(U9e,Zlt),e(Q6,Klt),e(Q6,One),e(One,eit),e(Q6,oit),e(me,rit),e(me,W6),e(W6,H9e),e(H9e,tit),e(W6,ait),e(W6,Vne),e(Vne,nit),e(W6,sit),e(me,lit),e(me,U6),e(U6,J9e),e(J9e,iit),e(U6,dit),e(U6,Xne),e(Xne,cit),e(U6,mit),e(Yr,fit),M(H6,Yr,null),b(m,zro,_),b(m,Gm,_),e(Gm,J6),e(J6,Y9e),M(GR,Y9e,null),e(Gm,git),e(Gm,Z9e),e(Z9e,hit),b(m,Qro,_),b(m,Mr,_),M(OR,Mr,null),e(Mr,uit),e(Mr,Om),e(Om,pit),e(Om,zne),e(zne,_it),e(Om,bit),e(Om,Qne),e(Qne,vit),e(Om,Fit),e(Mr,Tit),e(Mr,VR),e(VR,Mit),e(VR,K9e),e(K9e,Eit),e(VR,Cit),e(Mr,wit),e(Mr,la),M(XR,la,null),e(la,Ait),e(la,exe),e(exe,Lit),e(la,yit),e(la,Vm),e(Vm,xit),e(Vm,oxe),e(oxe,$it),e(Vm,kit),e(Vm,Wne),e(Wne,Sit),e(Vm,Rit),e(la,Pit),M(Y6,la,null),e(Mr,Bit),e(Mr,Zr),M(zR,Zr,null),e(Zr,Iit),e(Zr,rxe),e(rxe,Nit),e(Zr,qit),e(Zr,Xn),e(Xn,jit),e(Xn,txe),e(txe,Dit),e(Xn,Git),e(Xn,axe),e(axe,Oit),e(Xn,Vit),e(Xn,nxe),e(nxe,Xit),e(Xn,zit),e(Zr,Qit),e(Zr,sxe),e(sxe,Z6),e(Z6,lxe),e(lxe,Wit),e(Z6,Uit),e(Z6,Une),e(Une,Hit),e(Z6,Jit),e(Zr,Yit),M(K6,Zr,null),b(m,Wro,_),b(m,Xm,_),e(Xm,e7),e(e7,ixe),M(QR,ixe,null),e(Xm,Zit),e(Xm,dxe),e(dxe,Kit),b(m,Uro,_),b(m,Er,_),M(WR,Er,null),e(Er,edt),e(Er,zm),e(zm,odt),e(zm,Hne),e(Hne,rdt),e(zm,tdt),e(zm,Jne),e(Jne,adt),e(zm,ndt),e(Er,sdt),e(Er,UR),e(UR,ldt),e(UR,cxe),e(cxe,idt),e(UR,ddt),e(Er,cdt),e(Er,ia),M(HR,ia,null),e(ia,mdt),e(ia,mxe),e(mxe,fdt),e(ia,gdt),e(ia,Qm),e(Qm,hdt),e(Qm,fxe),e(fxe,udt),e(Qm,pdt),e(Qm,Yne),e(Yne,_dt),e(Qm,bdt),e(ia,vdt),M(o7,ia,null),e(Er,Fdt),e(Er,Kr),M(JR,Kr,null),e(Kr,Tdt),e(Kr,gxe),e(gxe,Mdt),e(Kr,Edt),e(Kr,zn),e(zn,Cdt),e(zn,hxe),e(hxe,wdt),e(zn,Adt),e(zn,uxe),e(uxe,Ldt),e(zn,ydt),e(zn,pxe),e(pxe,xdt),e(zn,$dt),e(Kr,kdt),e(Kr,_xe),e(_xe,r7),e(r7,bxe),e(bxe,Sdt),e(r7,Rdt),e(r7,Zne),e(Zne,Pdt),e(r7,Bdt),e(Kr,Idt),M(t7,Kr,null),b(m,Hro,_),b(m,Wm,_),e(Wm,a7),e(a7,vxe),M(YR,vxe,null),e(Wm,Ndt),e(Wm,Fxe),e(Fxe,qdt),b(m,Jro,_),b(m,Cr,_),M(ZR,Cr,null),e(Cr,jdt),e(Cr,Um),e(Um,Ddt),e(Um,Kne),e(Kne,Gdt),e(Um,Odt),e(Um,ese),e(ese,Vdt),e(Um,Xdt),e(Cr,zdt),e(Cr,KR),e(KR,Qdt),e(KR,Txe),e(Txe,Wdt),e(KR,Udt),e(Cr,Hdt),e(Cr,da),M(eP,da,null),e(da,Jdt),e(da,Mxe),e(Mxe,Ydt),e(da,Zdt),e(da,Hm),e(Hm,Kdt),e(Hm,Exe),e(Exe,ect),e(Hm,oct),e(Hm,ose),e(ose,rct),e(Hm,tct),e(da,act),M(n7,da,null),e(Cr,nct),e(Cr,et),M(oP,et,null),e(et,sct),e(et,Cxe),e(Cxe,lct),e(et,ict),e(et,Qn),e(Qn,dct),e(Qn,wxe),e(wxe,cct),e(Qn,mct),e(Qn,Axe),e(Axe,fct),e(Qn,gct),e(Qn,Lxe),e(Lxe,hct),e(Qn,uct),e(et,pct),e(et,te),e(te,s7),e(s7,yxe),e(yxe,_ct),e(s7,bct),e(s7,rse),e(rse,vct),e(s7,Fct),e(te,Tct),e(te,l7),e(l7,xxe),e(xxe,Mct),e(l7,Ect),e(l7,tse),e(tse,Cct),e(l7,wct),e(te,Act),e(te,i7),e(i7,$xe),e($xe,Lct),e(i7,yct),e(i7,ase),e(ase,xct),e(i7,$ct),e(te,kct),e(te,d7),e(d7,kxe),e(kxe,Sct),e(d7,Rct),e(d7,nse),e(nse,Pct),e(d7,Bct),e(te,Ict),e(te,c7),e(c7,Sxe),e(Sxe,Nct),e(c7,qct),e(c7,sse),e(sse,jct),e(c7,Dct),e(te,Gct),e(te,m7),e(m7,Rxe),e(Rxe,Oct),e(m7,Vct),e(m7,lse),e(lse,Xct),e(m7,zct),e(te,Qct),e(te,f7),e(f7,Pxe),e(Pxe,Wct),e(f7,Uct),e(f7,ise),e(ise,Hct),e(f7,Jct),e(te,Yct),e(te,g7),e(g7,Bxe),e(Bxe,Zct),e(g7,Kct),e(g7,dse),e(dse,emt),e(g7,omt),e(te,rmt),e(te,h7),e(h7,Ixe),e(Ixe,tmt),e(h7,amt),e(h7,cse),e(cse,nmt),e(h7,smt),e(te,lmt),e(te,u7),e(u7,Nxe),e(Nxe,imt),e(u7,dmt),e(u7,mse),e(mse,cmt),e(u7,mmt),e(te,fmt),e(te,p7),e(p7,qxe),e(qxe,gmt),e(p7,hmt),e(p7,fse),e(fse,umt),e(p7,pmt),e(te,_mt),e(te,_7),e(_7,jxe),e(jxe,bmt),e(_7,vmt),e(_7,gse),e(gse,Fmt),e(_7,Tmt),e(te,Mmt),e(te,b7),e(b7,Dxe),e(Dxe,Emt),e(b7,Cmt),e(b7,hse),e(hse,wmt),e(b7,Amt),e(te,Lmt),e(te,v7),e(v7,Gxe),e(Gxe,ymt),e(v7,xmt),e(v7,use),e(use,$mt),e(v7,kmt),e(te,Smt),e(te,F7),e(F7,Oxe),e(Oxe,Rmt),e(F7,Pmt),e(F7,pse),e(pse,Bmt),e(F7,Imt),e(te,Nmt),e(te,T7),e(T7,Vxe),e(Vxe,qmt),e(T7,jmt),e(T7,_se),e(_se,Dmt),e(T7,Gmt),e(te,Omt),e(te,M7),e(M7,Xxe),e(Xxe,Vmt),e(M7,Xmt),e(M7,bse),e(bse,zmt),e(M7,Qmt),e(te,Wmt),e(te,E7),e(E7,zxe),e(zxe,Umt),e(E7,Hmt),e(E7,vse),e(vse,Jmt),e(E7,Ymt),e(te,Zmt),e(te,C7),e(C7,Qxe),e(Qxe,Kmt),e(C7,eft),e(C7,Fse),e(Fse,oft),e(C7,rft),e(te,tft),e(te,w7),e(w7,Wxe),e(Wxe,aft),e(w7,nft),e(w7,Tse),e(Tse,sft),e(w7,lft),e(te,ift),e(te,A7),e(A7,Uxe),e(Uxe,dft),e(A7,cft),e(A7,Mse),e(Mse,mft),e(A7,fft),e(te,gft),e(te,L7),e(L7,Hxe),e(Hxe,hft),e(L7,uft),e(L7,Ese),e(Ese,pft),e(L7,_ft),e(te,bft),e(te,y7),e(y7,Jxe),e(Jxe,vft),e(y7,Fft),e(y7,Cse),e(Cse,Tft),e(y7,Mft),e(te,Eft),e(te,x7),e(x7,Yxe),e(Yxe,Cft),e(x7,wft),e(x7,wse),e(wse,Aft),e(x7,Lft),e(te,yft),e(te,$7),e($7,Zxe),e(Zxe,xft),e($7,$ft),e($7,Ase),e(Ase,kft),e($7,Sft),e(te,Rft),e(te,k7),e(k7,Kxe),e(Kxe,Pft),e(k7,Bft),e(k7,Lse),e(Lse,Ift),e(k7,Nft),e(te,qft),e(te,S7),e(S7,e$e),e(e$e,jft),e(S7,Dft),e(S7,yse),e(yse,Gft),e(S7,Oft),e(et,Vft),M(R7,et,null),b(m,Yro,_),b(m,Jm,_),e(Jm,P7),e(P7,o$e),M(rP,o$e,null),e(Jm,Xft),e(Jm,r$e),e(r$e,zft),b(m,Zro,_),b(m,wr,_),M(tP,wr,null),e(wr,Qft),e(wr,Ym),e(Ym,Wft),e(Ym,xse),e(xse,Uft),e(Ym,Hft),e(Ym,$se),e($se,Jft),e(Ym,Yft),e(wr,Zft),e(wr,aP),e(aP,Kft),e(aP,t$e),e(t$e,egt),e(aP,ogt),e(wr,rgt),e(wr,ca),M(nP,ca,null),e(ca,tgt),e(ca,a$e),e(a$e,agt),e(ca,ngt),e(ca,Zm),e(Zm,sgt),e(Zm,n$e),e(n$e,lgt),e(Zm,igt),e(Zm,kse),e(kse,dgt),e(Zm,cgt),e(ca,mgt),M(B7,ca,null),e(wr,fgt),e(wr,ot),M(sP,ot,null),e(ot,ggt),e(ot,s$e),e(s$e,hgt),e(ot,ugt),e(ot,Wn),e(Wn,pgt),e(Wn,l$e),e(l$e,_gt),e(Wn,bgt),e(Wn,i$e),e(i$e,vgt),e(Wn,Fgt),e(Wn,d$e),e(d$e,Tgt),e(Wn,Mgt),e(ot,Egt),e(ot,xe),e(xe,I7),e(I7,c$e),e(c$e,Cgt),e(I7,wgt),e(I7,Sse),e(Sse,Agt),e(I7,Lgt),e(xe,ygt),e(xe,N7),e(N7,m$e),e(m$e,xgt),e(N7,$gt),e(N7,Rse),e(Rse,kgt),e(N7,Sgt),e(xe,Rgt),e(xe,q7),e(q7,f$e),e(f$e,Pgt),e(q7,Bgt),e(q7,Pse),e(Pse,Igt),e(q7,Ngt),e(xe,qgt),e(xe,j7),e(j7,g$e),e(g$e,jgt),e(j7,Dgt),e(j7,Bse),e(Bse,Ggt),e(j7,Ogt),e(xe,Vgt),e(xe,D7),e(D7,h$e),e(h$e,Xgt),e(D7,zgt),e(D7,Ise),e(Ise,Qgt),e(D7,Wgt),e(xe,Ugt),e(xe,G7),e(G7,u$e),e(u$e,Hgt),e(G7,Jgt),e(G7,Nse),e(Nse,Ygt),e(G7,Zgt),e(xe,Kgt),e(xe,O7),e(O7,p$e),e(p$e,eht),e(O7,oht),e(O7,qse),e(qse,rht),e(O7,tht),e(xe,aht),e(xe,V7),e(V7,_$e),e(_$e,nht),e(V7,sht),e(V7,jse),e(jse,lht),e(V7,iht),e(xe,dht),e(xe,X7),e(X7,b$e),e(b$e,cht),e(X7,mht),e(X7,Dse),e(Dse,fht),e(X7,ght),e(xe,hht),e(xe,z7),e(z7,v$e),e(v$e,uht),e(z7,pht),e(z7,Gse),e(Gse,_ht),e(z7,bht),e(ot,vht),M(Q7,ot,null),b(m,Kro,_),b(m,Km,_),e(Km,W7),e(W7,F$e),M(lP,F$e,null),e(Km,Fht),e(Km,T$e),e(T$e,Tht),b(m,eto,_),b(m,Ar,_),M(iP,Ar,null),e(Ar,Mht),e(Ar,ef),e(ef,Eht),e(ef,Ose),e(Ose,Cht),e(ef,wht),e(ef,Vse),e(Vse,Aht),e(ef,Lht),e(Ar,yht),e(Ar,dP),e(dP,xht),e(dP,M$e),e(M$e,$ht),e(dP,kht),e(Ar,Sht),e(Ar,ma),M(cP,ma,null),e(ma,Rht),e(ma,E$e),e(E$e,Pht),e(ma,Bht),e(ma,of),e(of,Iht),e(of,C$e),e(C$e,Nht),e(of,qht),e(of,Xse),e(Xse,jht),e(of,Dht),e(ma,Ght),M(U7,ma,null),e(Ar,Oht),e(Ar,rt),M(mP,rt,null),e(rt,Vht),e(rt,w$e),e(w$e,Xht),e(rt,zht),e(rt,Un),e(Un,Qht),e(Un,A$e),e(A$e,Wht),e(Un,Uht),e(Un,L$e),e(L$e,Hht),e(Un,Jht),e(Un,y$e),e(y$e,Yht),e(Un,Zht),e(rt,Kht),e(rt,Ee),e(Ee,H7),e(H7,x$e),e(x$e,eut),e(H7,out),e(H7,zse),e(zse,rut),e(H7,tut),e(Ee,aut),e(Ee,J7),e(J7,$$e),e($$e,nut),e(J7,sut),e(J7,Qse),e(Qse,lut),e(J7,iut),e(Ee,dut),e(Ee,Y7),e(Y7,k$e),e(k$e,cut),e(Y7,mut),e(Y7,Wse),e(Wse,fut),e(Y7,gut),e(Ee,hut),e(Ee,Z7),e(Z7,S$e),e(S$e,uut),e(Z7,put),e(Z7,Use),e(Use,_ut),e(Z7,but),e(Ee,vut),e(Ee,K7),e(K7,R$e),e(R$e,Fut),e(K7,Tut),e(K7,Hse),e(Hse,Mut),e(K7,Eut),e(Ee,Cut),e(Ee,eL),e(eL,P$e),e(P$e,wut),e(eL,Aut),e(eL,Jse),e(Jse,Lut),e(eL,yut),e(Ee,xut),e(Ee,oL),e(oL,B$e),e(B$e,$ut),e(oL,kut),e(oL,Yse),e(Yse,Sut),e(oL,Rut),e(Ee,Put),e(Ee,rL),e(rL,I$e),e(I$e,But),e(rL,Iut),e(rL,Zse),e(Zse,Nut),e(rL,qut),e(Ee,jut),e(Ee,tL),e(tL,N$e),e(N$e,Dut),e(tL,Gut),e(tL,Kse),e(Kse,Out),e(tL,Vut),e(Ee,Xut),e(Ee,aL),e(aL,q$e),e(q$e,zut),e(aL,Qut),e(aL,ele),e(ele,Wut),e(aL,Uut),e(Ee,Hut),e(Ee,nL),e(nL,j$e),e(j$e,Jut),e(nL,Yut),e(nL,ole),e(ole,Zut),e(nL,Kut),e(Ee,ept),e(Ee,sL),e(sL,D$e),e(D$e,opt),e(sL,rpt),e(sL,rle),e(rle,tpt),e(sL,apt),e(Ee,npt),e(Ee,lL),e(lL,G$e),e(G$e,spt),e(lL,lpt),e(lL,tle),e(tle,ipt),e(lL,dpt),e(rt,cpt),M(iL,rt,null),b(m,oto,_),b(m,rf,_),e(rf,dL),e(dL,O$e),M(fP,O$e,null),e(rf,mpt),e(rf,V$e),e(V$e,fpt),b(m,rto,_),b(m,Lr,_),M(gP,Lr,null),e(Lr,gpt),e(Lr,tf),e(tf,hpt),e(tf,ale),e(ale,upt),e(tf,ppt),e(tf,nle),e(nle,_pt),e(tf,bpt),e(Lr,vpt),e(Lr,hP),e(hP,Fpt),e(hP,X$e),e(X$e,Tpt),e(hP,Mpt),e(Lr,Ept),e(Lr,fa),M(uP,fa,null),e(fa,Cpt),e(fa,z$e),e(z$e,wpt),e(fa,Apt),e(fa,af),e(af,Lpt),e(af,Q$e),e(Q$e,ypt),e(af,xpt),e(af,sle),e(sle,$pt),e(af,kpt),e(fa,Spt),M(cL,fa,null),e(Lr,Rpt),e(Lr,tt),M(pP,tt,null),e(tt,Ppt),e(tt,W$e),e(W$e,Bpt),e(tt,Ipt),e(tt,Hn),e(Hn,Npt),e(Hn,U$e),e(U$e,qpt),e(Hn,jpt),e(Hn,H$e),e(H$e,Dpt),e(Hn,Gpt),e(Hn,J$e),e(J$e,Opt),e(Hn,Vpt),e(tt,Xpt),e(tt,$e),e($e,mL),e(mL,Y$e),e(Y$e,zpt),e(mL,Qpt),e(mL,lle),e(lle,Wpt),e(mL,Upt),e($e,Hpt),e($e,fL),e(fL,Z$e),e(Z$e,Jpt),e(fL,Ypt),e(fL,ile),e(ile,Zpt),e(fL,Kpt),e($e,e_t),e($e,gL),e(gL,K$e),e(K$e,o_t),e(gL,r_t),e(gL,dle),e(dle,t_t),e(gL,a_t),e($e,n_t),e($e,hL),e(hL,eke),e(eke,s_t),e(hL,l_t),e(hL,cle),e(cle,i_t),e(hL,d_t),e($e,c_t),e($e,uL),e(uL,oke),e(oke,m_t),e(uL,f_t),e(uL,mle),e(mle,g_t),e(uL,h_t),e($e,u_t),e($e,pL),e(pL,rke),e(rke,p_t),e(pL,__t),e(pL,fle),e(fle,b_t),e(pL,v_t),e($e,F_t),e($e,_L),e(_L,tke),e(tke,T_t),e(_L,M_t),e(_L,gle),e(gle,E_t),e(_L,C_t),e($e,w_t),e($e,bL),e(bL,ake),e(ake,A_t),e(bL,L_t),e(bL,hle),e(hle,y_t),e(bL,x_t),e($e,$_t),e($e,vL),e(vL,nke),e(nke,k_t),e(vL,S_t),e(vL,ule),e(ule,R_t),e(vL,P_t),e($e,B_t),e($e,FL),e(FL,ske),e(ske,I_t),e(FL,N_t),e(FL,ple),e(ple,q_t),e(FL,j_t),e(tt,D_t),M(TL,tt,null),b(m,tto,_),b(m,nf,_),e(nf,ML),e(ML,lke),M(_P,lke,null),e(nf,G_t),e(nf,ike),e(ike,O_t),b(m,ato,_),b(m,yr,_),M(bP,yr,null),e(yr,V_t),e(yr,sf),e(sf,X_t),e(sf,_le),e(_le,z_t),e(sf,Q_t),e(sf,ble),e(ble,W_t),e(sf,U_t),e(yr,H_t),e(yr,vP),e(vP,J_t),e(vP,dke),e(dke,Y_t),e(vP,Z_t),e(yr,K_t),e(yr,ga),M(FP,ga,null),e(ga,e1t),e(ga,cke),e(cke,o1t),e(ga,r1t),e(ga,lf),e(lf,t1t),e(lf,mke),e(mke,a1t),e(lf,n1t),e(lf,vle),e(vle,s1t),e(lf,l1t),e(ga,i1t),M(EL,ga,null),e(yr,d1t),e(yr,at),M(TP,at,null),e(at,c1t),e(at,fke),e(fke,m1t),e(at,f1t),e(at,Jn),e(Jn,g1t),e(Jn,gke),e(gke,h1t),e(Jn,u1t),e(Jn,hke),e(hke,p1t),e(Jn,_1t),e(Jn,uke),e(uke,b1t),e(Jn,v1t),e(at,F1t),e(at,ke),e(ke,CL),e(CL,pke),e(pke,T1t),e(CL,M1t),e(CL,Fle),e(Fle,E1t),e(CL,C1t),e(ke,w1t),e(ke,wL),e(wL,_ke),e(_ke,A1t),e(wL,L1t),e(wL,Tle),e(Tle,y1t),e(wL,x1t),e(ke,$1t),e(ke,AL),e(AL,bke),e(bke,k1t),e(AL,S1t),e(AL,Mle),e(Mle,R1t),e(AL,P1t),e(ke,B1t),e(ke,LL),e(LL,vke),e(vke,I1t),e(LL,N1t),e(LL,Ele),e(Ele,q1t),e(LL,j1t),e(ke,D1t),e(ke,yL),e(yL,Fke),e(Fke,G1t),e(yL,O1t),e(yL,Cle),e(Cle,V1t),e(yL,X1t),e(ke,z1t),e(ke,xL),e(xL,Tke),e(Tke,Q1t),e(xL,W1t),e(xL,wle),e(wle,U1t),e(xL,H1t),e(ke,J1t),e(ke,$L),e($L,Mke),e(Mke,Y1t),e($L,Z1t),e($L,Ale),e(Ale,K1t),e($L,ebt),e(ke,obt),e(ke,kL),e(kL,Eke),e(Eke,rbt),e(kL,tbt),e(kL,Lle),e(Lle,abt),e(kL,nbt),e(ke,sbt),e(ke,SL),e(SL,Cke),e(Cke,lbt),e(SL,ibt),e(SL,yle),e(yle,dbt),e(SL,cbt),e(ke,mbt),e(ke,RL),e(RL,wke),e(wke,fbt),e(RL,gbt),e(RL,xle),e(xle,hbt),e(RL,ubt),e(at,pbt),M(PL,at,null),b(m,nto,_),b(m,df,_),e(df,BL),e(BL,Ake),M(MP,Ake,null),e(df,_bt),e(df,Lke),e(Lke,bbt),b(m,sto,_),b(m,xr,_),M(EP,xr,null),e(xr,vbt),e(xr,cf),e(cf,Fbt),e(cf,$le),e($le,Tbt),e(cf,Mbt),e(cf,kle),e(kle,Ebt),e(cf,Cbt),e(xr,wbt),e(xr,CP),e(CP,Abt),e(CP,yke),e(yke,Lbt),e(CP,ybt),e(xr,xbt),e(xr,ha),M(wP,ha,null),e(ha,$bt),e(ha,xke),e(xke,kbt),e(ha,Sbt),e(ha,mf),e(mf,Rbt),e(mf,$ke),e($ke,Pbt),e(mf,Bbt),e(mf,Sle),e(Sle,Ibt),e(mf,Nbt),e(ha,qbt),M(IL,ha,null),e(xr,jbt),e(xr,nt),M(AP,nt,null),e(nt,Dbt),e(nt,kke),e(kke,Gbt),e(nt,Obt),e(nt,Yn),e(Yn,Vbt),e(Yn,Ske),e(Ske,Xbt),e(Yn,zbt),e(Yn,Rke),e(Rke,Qbt),e(Yn,Wbt),e(Yn,Pke),e(Pke,Ubt),e(Yn,Hbt),e(nt,Jbt),e(nt,Se),e(Se,NL),e(NL,Bke),e(Bke,Ybt),e(NL,Zbt),e(NL,Rle),e(Rle,Kbt),e(NL,e2t),e(Se,o2t),e(Se,qL),e(qL,Ike),e(Ike,r2t),e(qL,t2t),e(qL,Ple),e(Ple,a2t),e(qL,n2t),e(Se,s2t),e(Se,jL),e(jL,Nke),e(Nke,l2t),e(jL,i2t),e(jL,Ble),e(Ble,d2t),e(jL,c2t),e(Se,m2t),e(Se,DL),e(DL,qke),e(qke,f2t),e(DL,g2t),e(DL,Ile),e(Ile,h2t),e(DL,u2t),e(Se,p2t),e(Se,GL),e(GL,jke),e(jke,_2t),e(GL,b2t),e(GL,Nle),e(Nle,v2t),e(GL,F2t),e(Se,T2t),e(Se,OL),e(OL,Dke),e(Dke,M2t),e(OL,E2t),e(OL,qle),e(qle,C2t),e(OL,w2t),e(Se,A2t),e(Se,VL),e(VL,Gke),e(Gke,L2t),e(VL,y2t),e(VL,jle),e(jle,x2t),e(VL,$2t),e(Se,k2t),e(Se,XL),e(XL,Oke),e(Oke,S2t),e(XL,R2t),e(XL,Dle),e(Dle,P2t),e(XL,B2t),e(Se,I2t),e(Se,zL),e(zL,Vke),e(Vke,N2t),e(zL,q2t),e(zL,Gle),e(Gle,j2t),e(zL,D2t),e(Se,G2t),e(Se,QL),e(QL,Xke),e(Xke,O2t),e(QL,V2t),e(QL,Ole),e(Ole,X2t),e(QL,z2t),e(nt,Q2t),M(WL,nt,null),b(m,lto,_),b(m,ff,_),e(ff,UL),e(UL,zke),M(LP,zke,null),e(ff,W2t),e(ff,Qke),e(Qke,U2t),b(m,ito,_),b(m,$r,_),M(yP,$r,null),e($r,H2t),e($r,gf),e(gf,J2t),e(gf,Vle),e(Vle,Y2t),e(gf,Z2t),e(gf,Xle),e(Xle,K2t),e(gf,evt),e($r,ovt),e($r,xP),e(xP,rvt),e(xP,Wke),e(Wke,tvt),e(xP,avt),e($r,nvt),e($r,ua),M($P,ua,null),e(ua,svt),e(ua,Uke),e(Uke,lvt),e(ua,ivt),e(ua,hf),e(hf,dvt),e(hf,Hke),e(Hke,cvt),e(hf,mvt),e(hf,zle),e(zle,fvt),e(hf,gvt),e(ua,hvt),M(HL,ua,null),e($r,uvt),e($r,st),M(kP,st,null),e(st,pvt),e(st,Jke),e(Jke,_vt),e(st,bvt),e(st,Zn),e(Zn,vvt),e(Zn,Yke),e(Yke,Fvt),e(Zn,Tvt),e(Zn,Zke),e(Zke,Mvt),e(Zn,Evt),e(Zn,Kke),e(Kke,Cvt),e(Zn,wvt),e(st,Avt),e(st,Re),e(Re,JL),e(JL,eSe),e(eSe,Lvt),e(JL,yvt),e(JL,Qle),e(Qle,xvt),e(JL,$vt),e(Re,kvt),e(Re,YL),e(YL,oSe),e(oSe,Svt),e(YL,Rvt),e(YL,Wle),e(Wle,Pvt),e(YL,Bvt),e(Re,Ivt),e(Re,ZL),e(ZL,rSe),e(rSe,Nvt),e(ZL,qvt),e(ZL,Ule),e(Ule,jvt),e(ZL,Dvt),e(Re,Gvt),e(Re,KL),e(KL,tSe),e(tSe,Ovt),e(KL,Vvt),e(KL,Hle),e(Hle,Xvt),e(KL,zvt),e(Re,Qvt),e(Re,ey),e(ey,aSe),e(aSe,Wvt),e(ey,Uvt),e(ey,Jle),e(Jle,Hvt),e(ey,Jvt),e(Re,Yvt),e(Re,oy),e(oy,nSe),e(nSe,Zvt),e(oy,Kvt),e(oy,Yle),e(Yle,eFt),e(oy,oFt),e(Re,rFt),e(Re,ry),e(ry,sSe),e(sSe,tFt),e(ry,aFt),e(ry,Zle),e(Zle,nFt),e(ry,sFt),e(Re,lFt),e(Re,ty),e(ty,lSe),e(lSe,iFt),e(ty,dFt),e(ty,Kle),e(Kle,cFt),e(ty,mFt),e(Re,fFt),e(Re,ay),e(ay,iSe),e(iSe,gFt),e(ay,hFt),e(ay,eie),e(eie,uFt),e(ay,pFt),e(Re,_Ft),e(Re,ny),e(ny,dSe),e(dSe,bFt),e(ny,vFt),e(ny,oie),e(oie,FFt),e(ny,TFt),e(st,MFt),M(sy,st,null),b(m,dto,_),b(m,uf,_),e(uf,ly),e(ly,cSe),M(SP,cSe,null),e(uf,EFt),e(uf,mSe),e(mSe,CFt),b(m,cto,_),b(m,kr,_),M(RP,kr,null),e(kr,wFt),e(kr,pf),e(pf,AFt),e(pf,rie),e(rie,LFt),e(pf,yFt),e(pf,tie),e(tie,xFt),e(pf,$Ft),e(kr,kFt),e(kr,PP),e(PP,SFt),e(PP,fSe),e(fSe,RFt),e(PP,PFt),e(kr,BFt),e(kr,pa),M(BP,pa,null),e(pa,IFt),e(pa,gSe),e(gSe,NFt),e(pa,qFt),e(pa,_f),e(_f,jFt),e(_f,hSe),e(hSe,DFt),e(_f,GFt),e(_f,aie),e(aie,OFt),e(_f,VFt),e(pa,XFt),M(iy,pa,null),e(kr,zFt),e(kr,lt),M(IP,lt,null),e(lt,QFt),e(lt,uSe),e(uSe,WFt),e(lt,UFt),e(lt,Kn),e(Kn,HFt),e(Kn,pSe),e(pSe,JFt),e(Kn,YFt),e(Kn,_Se),e(_Se,ZFt),e(Kn,KFt),e(Kn,bSe),e(bSe,eTt),e(Kn,oTt),e(lt,rTt),e(lt,Xe),e(Xe,dy),e(dy,vSe),e(vSe,tTt),e(dy,aTt),e(dy,nie),e(nie,nTt),e(dy,sTt),e(Xe,lTt),e(Xe,cy),e(cy,FSe),e(FSe,iTt),e(cy,dTt),e(cy,sie),e(sie,cTt),e(cy,mTt),e(Xe,fTt),e(Xe,my),e(my,TSe),e(TSe,gTt),e(my,hTt),e(my,lie),e(lie,uTt),e(my,pTt),e(Xe,_Tt),e(Xe,fy),e(fy,MSe),e(MSe,bTt),e(fy,vTt),e(fy,iie),e(iie,FTt),e(fy,TTt),e(Xe,MTt),e(Xe,gy),e(gy,ESe),e(ESe,ETt),e(gy,CTt),e(gy,die),e(die,wTt),e(gy,ATt),e(Xe,LTt),e(Xe,hy),e(hy,CSe),e(CSe,yTt),e(hy,xTt),e(hy,cie),e(cie,$Tt),e(hy,kTt),e(Xe,STt),e(Xe,uy),e(uy,wSe),e(wSe,RTt),e(uy,PTt),e(uy,mie),e(mie,BTt),e(uy,ITt),e(Xe,NTt),e(Xe,py),e(py,ASe),e(ASe,qTt),e(py,jTt),e(py,fie),e(fie,DTt),e(py,GTt),e(lt,OTt),M(_y,lt,null),b(m,mto,_),b(m,bf,_),e(bf,by),e(by,LSe),M(NP,LSe,null),e(bf,VTt),e(bf,ySe),e(ySe,XTt),b(m,fto,_),b(m,Sr,_),M(qP,Sr,null),e(Sr,zTt),e(Sr,vf),e(vf,QTt),e(vf,gie),e(gie,WTt),e(vf,UTt),e(vf,hie),e(hie,HTt),e(vf,JTt),e(Sr,YTt),e(Sr,jP),e(jP,ZTt),e(jP,xSe),e(xSe,KTt),e(jP,eMt),e(Sr,oMt),e(Sr,_a),M(DP,_a,null),e(_a,rMt),e(_a,$Se),e($Se,tMt),e(_a,aMt),e(_a,Ff),e(Ff,nMt),e(Ff,kSe),e(kSe,sMt),e(Ff,lMt),e(Ff,uie),e(uie,iMt),e(Ff,dMt),e(_a,cMt),M(vy,_a,null),e(Sr,mMt),e(Sr,it),M(GP,it,null),e(it,fMt),e(it,SSe),e(SSe,gMt),e(it,hMt),e(it,es),e(es,uMt),e(es,RSe),e(RSe,pMt),e(es,_Mt),e(es,PSe),e(PSe,bMt),e(es,vMt),e(es,BSe),e(BSe,FMt),e(es,TMt),e(it,MMt),e(it,ze),e(ze,Fy),e(Fy,ISe),e(ISe,EMt),e(Fy,CMt),e(Fy,pie),e(pie,wMt),e(Fy,AMt),e(ze,LMt),e(ze,Ty),e(Ty,NSe),e(NSe,yMt),e(Ty,xMt),e(Ty,_ie),e(_ie,$Mt),e(Ty,kMt),e(ze,SMt),e(ze,My),e(My,qSe),e(qSe,RMt),e(My,PMt),e(My,bie),e(bie,BMt),e(My,IMt),e(ze,NMt),e(ze,Ey),e(Ey,jSe),e(jSe,qMt),e(Ey,jMt),e(Ey,vie),e(vie,DMt),e(Ey,GMt),e(ze,OMt),e(ze,Cy),e(Cy,DSe),e(DSe,VMt),e(Cy,XMt),e(Cy,Fie),e(Fie,zMt),e(Cy,QMt),e(ze,WMt),e(ze,wy),e(wy,GSe),e(GSe,UMt),e(wy,HMt),e(wy,Tie),e(Tie,JMt),e(wy,YMt),e(ze,ZMt),e(ze,Ay),e(Ay,OSe),e(OSe,KMt),e(Ay,eEt),e(Ay,Mie),e(Mie,oEt),e(Ay,rEt),e(ze,tEt),e(ze,Ly),e(Ly,VSe),e(VSe,aEt),e(Ly,nEt),e(Ly,Eie),e(Eie,sEt),e(Ly,lEt),e(it,iEt),M(yy,it,null),b(m,gto,_),b(m,Tf,_),e(Tf,xy),e(xy,XSe),M(OP,XSe,null),e(Tf,dEt),e(Tf,zSe),e(zSe,cEt),b(m,hto,_),b(m,Rr,_),M(VP,Rr,null),e(Rr,mEt),e(Rr,Mf),e(Mf,fEt),e(Mf,Cie),e(Cie,gEt),e(Mf,hEt),e(Mf,wie),e(wie,uEt),e(Mf,pEt),e(Rr,_Et),e(Rr,XP),e(XP,bEt),e(XP,QSe),e(QSe,vEt),e(XP,FEt),e(Rr,TEt),e(Rr,ba),M(zP,ba,null),e(ba,MEt),e(ba,WSe),e(WSe,EEt),e(ba,CEt),e(ba,Ef),e(Ef,wEt),e(Ef,USe),e(USe,AEt),e(Ef,LEt),e(Ef,Aie),e(Aie,yEt),e(Ef,xEt),e(ba,$Et),M($y,ba,null),e(Rr,kEt),e(Rr,dt),M(QP,dt,null),e(dt,SEt),e(dt,HSe),e(HSe,REt),e(dt,PEt),e(dt,os),e(os,BEt),e(os,JSe),e(JSe,IEt),e(os,NEt),e(os,YSe),e(YSe,qEt),e(os,jEt),e(os,ZSe),e(ZSe,DEt),e(os,GEt),e(dt,OEt),e(dt,KSe),e(KSe,ky),e(ky,eRe),e(eRe,VEt),e(ky,XEt),e(ky,Lie),e(Lie,zEt),e(ky,QEt),e(dt,WEt),M(Sy,dt,null),b(m,uto,_),b(m,Cf,_),e(Cf,Ry),e(Ry,oRe),M(WP,oRe,null),e(Cf,UEt),e(Cf,rRe),e(rRe,HEt),b(m,pto,_),b(m,Pr,_),M(UP,Pr,null),e(Pr,JEt),e(Pr,wf),e(wf,YEt),e(wf,yie),e(yie,ZEt),e(wf,KEt),e(wf,xie),e(xie,e4t),e(wf,o4t),e(Pr,r4t),e(Pr,HP),e(HP,t4t),e(HP,tRe),e(tRe,a4t),e(HP,n4t),e(Pr,s4t),e(Pr,va),M(JP,va,null),e(va,l4t),e(va,aRe),e(aRe,i4t),e(va,d4t),e(va,Af),e(Af,c4t),e(Af,nRe),e(nRe,m4t),e(Af,f4t),e(Af,$ie),e($ie,g4t),e(Af,h4t),e(va,u4t),M(Py,va,null),e(Pr,p4t),e(Pr,ct),M(YP,ct,null),e(ct,_4t),e(ct,sRe),e(sRe,b4t),e(ct,v4t),e(ct,rs),e(rs,F4t),e(rs,lRe),e(lRe,T4t),e(rs,M4t),e(rs,iRe),e(iRe,E4t),e(rs,C4t),e(rs,dRe),e(dRe,w4t),e(rs,A4t),e(ct,L4t),e(ct,ZP),e(ZP,By),e(By,cRe),e(cRe,y4t),e(By,x4t),e(By,kie),e(kie,$4t),e(By,k4t),e(ZP,S4t),e(ZP,Iy),e(Iy,mRe),e(mRe,R4t),e(Iy,P4t),e(Iy,Sie),e(Sie,B4t),e(Iy,I4t),e(ct,N4t),M(Ny,ct,null),b(m,_to,_),b(m,Lf,_),e(Lf,qy),e(qy,fRe),M(KP,fRe,null),e(Lf,q4t),e(Lf,gRe),e(gRe,j4t),b(m,bto,_),b(m,Br,_),M(eB,Br,null),e(Br,D4t),e(Br,yf),e(yf,G4t),e(yf,Rie),e(Rie,O4t),e(yf,V4t),e(yf,Pie),e(Pie,X4t),e(yf,z4t),e(Br,Q4t),e(Br,oB),e(oB,W4t),e(oB,hRe),e(hRe,U4t),e(oB,H4t),e(Br,J4t),e(Br,Fa),M(rB,Fa,null),e(Fa,Y4t),e(Fa,uRe),e(uRe,Z4t),e(Fa,K4t),e(Fa,xf),e(xf,eCt),e(xf,pRe),e(pRe,oCt),e(xf,rCt),e(xf,Bie),e(Bie,tCt),e(xf,aCt),e(Fa,nCt),M(jy,Fa,null),e(Br,sCt),e(Br,mt),M(tB,mt,null),e(mt,lCt),e(mt,_Re),e(_Re,iCt),e(mt,dCt),e(mt,ts),e(ts,cCt),e(ts,bRe),e(bRe,mCt),e(ts,fCt),e(ts,vRe),e(vRe,gCt),e(ts,hCt),e(ts,FRe),e(FRe,uCt),e(ts,pCt),e(mt,_Ct),e(mt,TRe),e(TRe,Dy),e(Dy,MRe),e(MRe,bCt),e(Dy,vCt),e(Dy,Iie),e(Iie,FCt),e(Dy,TCt),e(mt,MCt),M(Gy,mt,null),vto=!0},p(m,[_]){const aB={};_&2&&(aB.$$scope={dirty:_,ctx:m}),qf.$set(aB);const ERe={};_&2&&(ERe.$$scope={dirty:_,ctx:m}),mu.$set(ERe);const CRe={};_&2&&(CRe.$$scope={dirty:_,ctx:m}),Hu.$set(CRe);const wRe={};_&2&&(wRe.$$scope={dirty:_,ctx:m}),Gp.$set(wRe);const nB={};_&2&&(nB.$$scope={dirty:_,ctx:m}),Op.$set(nB);const ARe={};_&2&&(ARe.$$scope={dirty:_,ctx:m}),h_.$set(ARe);const as={};_&2&&(as.$$scope={dirty:_,ctx:m}),u_.$set(as);const LRe={};_&2&&(LRe.$$scope={dirty:_,ctx:m}),b_.$set(LRe);const yRe={};_&2&&(yRe.$$scope={dirty:_,ctx:m}),qb.$set(yRe);const xRe={};_&2&&(xRe.$$scope={dirty:_,ctx:m}),Db.$set(xRe);const sB={};_&2&&(sB.$$scope={dirty:_,ctx:m}),I2.$set(sB);const $Re={};_&2&&($Re.$$scope={dirty:_,ctx:m}),q2.$set($Re);const lB={};_&2&&(lB.$$scope={dirty:_,ctx:m}),yv.$set(lB);const kRe={};_&2&&(kRe.$$scope={dirty:_,ctx:m}),$v.$set(kRe);const iB={};_&2&&(iB.$$scope={dirty:_,ctx:m}),_F.$set(iB);const SRe={};_&2&&(SRe.$$scope={dirty:_,ctx:m}),vF.$set(SRe);const RRe={};_&2&&(RRe.$$scope={dirty:_,ctx:m}),GF.$set(RRe);const PRe={};_&2&&(PRe.$$scope={dirty:_,ctx:m}),VF.$set(PRe);const $f={};_&2&&($f.$$scope={dirty:_,ctx:m}),QT.$set($f);const BRe={};_&2&&(BRe.$$scope={dirty:_,ctx:m}),UT.$set(BRe);const IRe={};_&2&&(IRe.$$scope={dirty:_,ctx:m}),yM.$set(IRe);const NRe={};_&2&&(NRe.$$scope={dirty:_,ctx:m}),$M.$set(NRe);const dB={};_&2&&(dB.$$scope={dirty:_,ctx:m}),jM.$set(dB);const qRe={};_&2&&(qRe.$$scope={dirty:_,ctx:m}),GM.$set(qRe);const jRe={};_&2&&(jRe.$$scope={dirty:_,ctx:m}),xE.$set(jRe);const DRe={};_&2&&(DRe.$$scope={dirty:_,ctx:m}),kE.$set(DRe);const pt={};_&2&&(pt.$$scope={dirty:_,ctx:m}),w4.$set(pt);const cB={};_&2&&(cB.$$scope={dirty:_,ctx:m}),L4.$set(cB);const GRe={};_&2&&(GRe.$$scope={dirty:_,ctx:m}),$4.$set(GRe);const mB={};_&2&&(mB.$$scope={dirty:_,ctx:m}),S4.$set(mB);const ORe={};_&2&&(ORe.$$scope={dirty:_,ctx:m}),N4.$set(ORe);const _t={};_&2&&(_t.$$scope={dirty:_,ctx:m}),j4.$set(_t);const VRe={};_&2&&(VRe.$$scope={dirty:_,ctx:m}),rC.$set(VRe);const kf={};_&2&&(kf.$$scope={dirty:_,ctx:m}),aC.$set(kf);const XRe={};_&2&&(XRe.$$scope={dirty:_,ctx:m}),lC.$set(XRe);const zRe={};_&2&&(zRe.$$scope={dirty:_,ctx:m}),dC.$set(zRe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),fC.$set(L);const Oy={};_&2&&(Oy.$$scope={dirty:_,ctx:m}),hC.$set(Oy);const QRe={};_&2&&(QRe.$$scope={dirty:_,ctx:m}),_C.$set(QRe);const WRe={};_&2&&(WRe.$$scope={dirty:_,ctx:m}),vC.$set(WRe);const Vy={};_&2&&(Vy.$$scope={dirty:_,ctx:m}),$C.$set(Vy);const URe={};_&2&&(URe.$$scope={dirty:_,ctx:m}),SC.$set(URe);const HRe={};_&2&&(HRe.$$scope={dirty:_,ctx:m}),jC.$set(HRe);const Xy={};_&2&&(Xy.$$scope={dirty:_,ctx:m}),GC.$set(Xy);const JRe={};_&2&&(JRe.$$scope={dirty:_,ctx:m}),KC.$set(JRe);const YRe={};_&2&&(YRe.$$scope={dirty:_,ctx:m}),o3.$set(YRe);const zy={};_&2&&(zy.$$scope={dirty:_,ctx:m}),s3.$set(zy);const ZRe={};_&2&&(ZRe.$$scope={dirty:_,ctx:m}),i3.$set(ZRe);const KRe={};_&2&&(KRe.$$scope={dirty:_,ctx:m}),u3.$set(KRe);const Qy={};_&2&&(Qy.$$scope={dirty:_,ctx:m}),_3.$set(Qy);const ePe={};_&2&&(ePe.$$scope={dirty:_,ctx:m}),E3.$set(ePe);const oPe={};_&2&&(oPe.$$scope={dirty:_,ctx:m}),w3.$set(oPe);const Wy={};_&2&&(Wy.$$scope={dirty:_,ctx:m}),k3.$set(Wy);const rPe={};_&2&&(rPe.$$scope={dirty:_,ctx:m}),R3.$set(rPe);const tPe={};_&2&&(tPe.$$scope={dirty:_,ctx:m}),I3.$set(tPe);const Uy={};_&2&&(Uy.$$scope={dirty:_,ctx:m}),q3.$set(Uy);const aPe={};_&2&&(aPe.$$scope={dirty:_,ctx:m}),z3.$set(aPe);const nPe={};_&2&&(nPe.$$scope={dirty:_,ctx:m}),W3.$set(nPe);const Hy={};_&2&&(Hy.$$scope={dirty:_,ctx:m}),J3.$set(Hy);const sPe={};_&2&&(sPe.$$scope={dirty:_,ctx:m}),Z3.$set(sPe);const lPe={};_&2&&(lPe.$$scope={dirty:_,ctx:m}),o5.$set(lPe);const Jy={};_&2&&(Jy.$$scope={dirty:_,ctx:m}),t5.$set(Jy);const iPe={};_&2&&(iPe.$$scope={dirty:_,ctx:m}),a0.$set(iPe);const dPe={};_&2&&(dPe.$$scope={dirty:_,ctx:m}),s0.$set(dPe);const Yy={};_&2&&(Yy.$$scope={dirty:_,ctx:m}),$0.$set(Yy);const cPe={};_&2&&(cPe.$$scope={dirty:_,ctx:m}),S0.$set(cPe);const mPe={};_&2&&(mPe.$$scope={dirty:_,ctx:m}),W0.$set(mPe);const Zy={};_&2&&(Zy.$$scope={dirty:_,ctx:m}),H0.$set(Zy);const fPe={};_&2&&(fPe.$$scope={dirty:_,ctx:m}),aw.$set(fPe);const gPe={};_&2&&(gPe.$$scope={dirty:_,ctx:m}),sw.$set(gPe);const Ky={};_&2&&(Ky.$$scope={dirty:_,ctx:m}),cw.$set(Ky);const hPe={};_&2&&(hPe.$$scope={dirty:_,ctx:m}),fw.$set(hPe);const uPe={};_&2&&(uPe.$$scope={dirty:_,ctx:m}),Rw.$set(uPe);const e8={};_&2&&(e8.$$scope={dirty:_,ctx:m}),Bw.$set(e8);const pPe={};_&2&&(pPe.$$scope={dirty:_,ctx:m}),Qw.$set(pPe);const _Pe={};_&2&&(_Pe.$$scope={dirty:_,ctx:m}),Uw.$set(_Pe);const o8={};_&2&&(o8.$$scope={dirty:_,ctx:m}),MA.$set(o8);const bPe={};_&2&&(bPe.$$scope={dirty:_,ctx:m}),CA.$set(bPe);const vPe={};_&2&&(vPe.$$scope={dirty:_,ctx:m}),OA.$set(vPe);const r8={};_&2&&(r8.$$scope={dirty:_,ctx:m}),XA.$set(r8);const FPe={};_&2&&(FPe.$$scope={dirty:_,ctx:m}),WA.$set(FPe);const TPe={};_&2&&(TPe.$$scope={dirty:_,ctx:m}),HA.$set(TPe);const t8={};_&2&&(t8.$$scope={dirty:_,ctx:m}),YA.$set(t8);const MPe={};_&2&&(MPe.$$scope={dirty:_,ctx:m}),KA.$set(MPe);const EPe={};_&2&&(EPe.$$scope={dirty:_,ctx:m}),o6.$set(EPe);const a8={};_&2&&(a8.$$scope={dirty:_,ctx:m}),t6.$set(a8);const CPe={};_&2&&(CPe.$$scope={dirty:_,ctx:m}),w6.$set(CPe);const wPe={};_&2&&(wPe.$$scope={dirty:_,ctx:m}),L6.$set(wPe);const n8={};_&2&&(n8.$$scope={dirty:_,ctx:m}),H6.$set(n8);const APe={};_&2&&(APe.$$scope={dirty:_,ctx:m}),Y6.$set(APe);const LPe={};_&2&&(LPe.$$scope={dirty:_,ctx:m}),K6.$set(LPe);const s8={};_&2&&(s8.$$scope={dirty:_,ctx:m}),o7.$set(s8);const yPe={};_&2&&(yPe.$$scope={dirty:_,ctx:m}),t7.$set(yPe);const xPe={};_&2&&(xPe.$$scope={dirty:_,ctx:m}),n7.$set(xPe);const l8={};_&2&&(l8.$$scope={dirty:_,ctx:m}),R7.$set(l8);const $Pe={};_&2&&($Pe.$$scope={dirty:_,ctx:m}),B7.$set($Pe);const kPe={};_&2&&(kPe.$$scope={dirty:_,ctx:m}),Q7.$set(kPe);const i8={};_&2&&(i8.$$scope={dirty:_,ctx:m}),U7.$set(i8);const SPe={};_&2&&(SPe.$$scope={dirty:_,ctx:m}),iL.$set(SPe);const RPe={};_&2&&(RPe.$$scope={dirty:_,ctx:m}),cL.$set(RPe);const d8={};_&2&&(d8.$$scope={dirty:_,ctx:m}),TL.$set(d8);const PPe={};_&2&&(PPe.$$scope={dirty:_,ctx:m}),EL.$set(PPe);const BPe={};_&2&&(BPe.$$scope={dirty:_,ctx:m}),PL.$set(BPe);const c8={};_&2&&(c8.$$scope={dirty:_,ctx:m}),IL.$set(c8);const IPe={};_&2&&(IPe.$$scope={dirty:_,ctx:m}),WL.$set(IPe);const NPe={};_&2&&(NPe.$$scope={dirty:_,ctx:m}),HL.$set(NPe);const m8={};_&2&&(m8.$$scope={dirty:_,ctx:m}),sy.$set(m8);const qPe={};_&2&&(qPe.$$scope={dirty:_,ctx:m}),iy.$set(qPe);const jPe={};_&2&&(jPe.$$scope={dirty:_,ctx:m}),_y.$set(jPe);const f8={};_&2&&(f8.$$scope={dirty:_,ctx:m}),vy.$set(f8);const DPe={};_&2&&(DPe.$$scope={dirty:_,ctx:m}),yy.$set(DPe);const GPe={};_&2&&(GPe.$$scope={dirty:_,ctx:m}),$y.$set(GPe);const g8={};_&2&&(g8.$$scope={dirty:_,ctx:m}),Sy.$set(g8);const OPe={};_&2&&(OPe.$$scope={dirty:_,ctx:m}),Py.$set(OPe);const VPe={};_&2&&(VPe.$$scope={dirty:_,ctx:m}),Ny.$set(VPe);const h8={};_&2&&(h8.$$scope={dirty:_,ctx:m}),jy.$set(h8);const XPe={};_&2&&(XPe.$$scope={dirty:_,ctx:m}),Gy.$set(XPe)},i(m){vto||(E(d.$$.fragment,m),E(Ja.$$.fragment,m),E(wx.$$.fragment,m),E(Ax.$$.fragment,m),E(qf.$$.fragment,m),E(Lx.$$.fragment,m),E(yx.$$.fragment,m),E(kx.$$.fragment,m),E(mu.$$.fragment,m),E(Sx.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Nx.$$.fragment,m),E(Hu.$$.fragment,m),E(qx.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Vx.$$.fragment,m),E(Gp.$$.fragment,m),E(Op.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Qx.$$.fragment,m),E(Hx.$$.fragment,m),E(h_.$$.fragment,m),E(u_.$$.fragment,m),E(Jx.$$.fragment,m),E(Yx.$$.fragment,m),E(Zx.$$.fragment,m),E(e$.$$.fragment,m),E(b_.$$.fragment,m),E(o$.$$.fragment,m),E(qb.$$.fragment,m),E(r$.$$.fragment,m),E(t$.$$.fragment,m),E(n$.$$.fragment,m),E(Db.$$.fragment,m),E(s$.$$.fragment,m),E(I2.$$.fragment,m),E(l$.$$.fragment,m),E(i$.$$.fragment,m),E(c$.$$.fragment,m),E(q2.$$.fragment,m),E(m$.$$.fragment,m),E(yv.$$.fragment,m),E(f$.$$.fragment,m),E(g$.$$.fragment,m),E(u$.$$.fragment,m),E($v.$$.fragment,m),E(p$.$$.fragment,m),E(_F.$$.fragment,m),E(_$.$$.fragment,m),E(b$.$$.fragment,m),E(F$.$$.fragment,m),E(vF.$$.fragment,m),E(T$.$$.fragment,m),E(GF.$$.fragment,m),E(M$.$$.fragment,m),E(E$.$$.fragment,m),E(w$.$$.fragment,m),E(VF.$$.fragment,m),E(A$.$$.fragment,m),E(QT.$$.fragment,m),E(L$.$$.fragment,m),E(y$.$$.fragment,m),E($$.$$.fragment,m),E(UT.$$.fragment,m),E(k$.$$.fragment,m),E(yM.$$.fragment,m),E(S$.$$.fragment,m),E(R$.$$.fragment,m),E(B$.$$.fragment,m),E($M.$$.fragment,m),E(I$.$$.fragment,m),E(jM.$$.fragment,m),E(N$.$$.fragment,m),E(q$.$$.fragment,m),E(D$.$$.fragment,m),E(GM.$$.fragment,m),E(G$.$$.fragment,m),E(xE.$$.fragment,m),E(O$.$$.fragment,m),E(V$.$$.fragment,m),E(z$.$$.fragment,m),E(kE.$$.fragment,m),E(Q$.$$.fragment,m),E(w4.$$.fragment,m),E(W$.$$.fragment,m),E(U$.$$.fragment,m),E(J$.$$.fragment,m),E(L4.$$.fragment,m),E(Y$.$$.fragment,m),E($4.$$.fragment,m),E(Z$.$$.fragment,m),E(K$.$$.fragment,m),E(ok.$$.fragment,m),E(S4.$$.fragment,m),E(rk.$$.fragment,m),E(N4.$$.fragment,m),E(tk.$$.fragment,m),E(ak.$$.fragment,m),E(sk.$$.fragment,m),E(j4.$$.fragment,m),E(lk.$$.fragment,m),E(rC.$$.fragment,m),E(ik.$$.fragment,m),E(dk.$$.fragment,m),E(mk.$$.fragment,m),E(aC.$$.fragment,m),E(fk.$$.fragment,m),E(lC.$$.fragment,m),E(gk.$$.fragment,m),E(hk.$$.fragment,m),E(pk.$$.fragment,m),E(dC.$$.fragment,m),E(_k.$$.fragment,m),E(fC.$$.fragment,m),E(bk.$$.fragment,m),E(vk.$$.fragment,m),E(Tk.$$.fragment,m),E(hC.$$.fragment,m),E(Mk.$$.fragment,m),E(_C.$$.fragment,m),E(Ek.$$.fragment,m),E(Ck.$$.fragment,m),E(Ak.$$.fragment,m),E(vC.$$.fragment,m),E(Lk.$$.fragment,m),E($C.$$.fragment,m),E(yk.$$.fragment,m),E(xk.$$.fragment,m),E(kk.$$.fragment,m),E(SC.$$.fragment,m),E(Sk.$$.fragment,m),E(jC.$$.fragment,m),E(Rk.$$.fragment,m),E(Pk.$$.fragment,m),E(Ik.$$.fragment,m),E(GC.$$.fragment,m),E(Nk.$$.fragment,m),E(KC.$$.fragment,m),E(qk.$$.fragment,m),E(jk.$$.fragment,m),E(Gk.$$.fragment,m),E(o3.$$.fragment,m),E(Ok.$$.fragment,m),E(s3.$$.fragment,m),E(Vk.$$.fragment,m),E(Xk.$$.fragment,m),E(Qk.$$.fragment,m),E(i3.$$.fragment,m),E(Wk.$$.fragment,m),E(u3.$$.fragment,m),E(Uk.$$.fragment,m),E(Hk.$$.fragment,m),E(Yk.$$.fragment,m),E(_3.$$.fragment,m),E(Zk.$$.fragment,m),E(E3.$$.fragment,m),E(Kk.$$.fragment,m),E(eS.$$.fragment,m),E(rS.$$.fragment,m),E(w3.$$.fragment,m),E(tS.$$.fragment,m),E(k3.$$.fragment,m),E(aS.$$.fragment,m),E(nS.$$.fragment,m),E(lS.$$.fragment,m),E(R3.$$.fragment,m),E(iS.$$.fragment,m),E(I3.$$.fragment,m),E(dS.$$.fragment,m),E(cS.$$.fragment,m),E(fS.$$.fragment,m),E(q3.$$.fragment,m),E(gS.$$.fragment,m),E(z3.$$.fragment,m),E(hS.$$.fragment,m),E(uS.$$.fragment,m),E(_S.$$.fragment,m),E(W3.$$.fragment,m),E(bS.$$.fragment,m),E(J3.$$.fragment,m),E(vS.$$.fragment,m),E(FS.$$.fragment,m),E(MS.$$.fragment,m),E(Z3.$$.fragment,m),E(ES.$$.fragment,m),E(o5.$$.fragment,m),E(CS.$$.fragment,m),E(wS.$$.fragment,m),E(LS.$$.fragment,m),E(t5.$$.fragment,m),E(yS.$$.fragment,m),E(a0.$$.fragment,m),E(xS.$$.fragment,m),E($S.$$.fragment,m),E(SS.$$.fragment,m),E(s0.$$.fragment,m),E(RS.$$.fragment,m),E($0.$$.fragment,m),E(PS.$$.fragment,m),E(BS.$$.fragment,m),E(NS.$$.fragment,m),E(S0.$$.fragment,m),E(qS.$$.fragment,m),E(W0.$$.fragment,m),E(jS.$$.fragment,m),E(DS.$$.fragment,m),E(OS.$$.fragment,m),E(H0.$$.fragment,m),E(VS.$$.fragment,m),E(aw.$$.fragment,m),E(XS.$$.fragment,m),E(zS.$$.fragment,m),E(WS.$$.fragment,m),E(sw.$$.fragment,m),E(US.$$.fragment,m),E(cw.$$.fragment,m),E(HS.$$.fragment,m),E(JS.$$.fragment,m),E(ZS.$$.fragment,m),E(fw.$$.fragment,m),E(KS.$$.fragment,m),E(Rw.$$.fragment,m),E(eR.$$.fragment,m),E(oR.$$.fragment,m),E(tR.$$.fragment,m),E(Bw.$$.fragment,m),E(aR.$$.fragment,m),E(Qw.$$.fragment,m),E(nR.$$.fragment,m),E(sR.$$.fragment,m),E(iR.$$.fragment,m),E(Uw.$$.fragment,m),E(dR.$$.fragment,m),E(MA.$$.fragment,m),E(cR.$$.fragment,m),E(mR.$$.fragment,m),E(gR.$$.fragment,m),E(CA.$$.fragment,m),E(hR.$$.fragment,m),E(OA.$$.fragment,m),E(uR.$$.fragment,m),E(pR.$$.fragment,m),E(bR.$$.fragment,m),E(XA.$$.fragment,m),E(vR.$$.fragment,m),E(WA.$$.fragment,m),E(TR.$$.fragment,m),E(MR.$$.fragment,m),E(CR.$$.fragment,m),E(HA.$$.fragment,m),E(wR.$$.fragment,m),E(YA.$$.fragment,m),E(AR.$$.fragment,m),E(LR.$$.fragment,m),E(xR.$$.fragment,m),E(KA.$$.fragment,m),E($R.$$.fragment,m),E(o6.$$.fragment,m),E(kR.$$.fragment,m),E(SR.$$.fragment,m),E(PR.$$.fragment,m),E(t6.$$.fragment,m),E(BR.$$.fragment,m),E(w6.$$.fragment,m),E(IR.$$.fragment,m),E(NR.$$.fragment,m),E(jR.$$.fragment,m),E(L6.$$.fragment,m),E(DR.$$.fragment,m),E(H6.$$.fragment,m),E(GR.$$.fragment,m),E(OR.$$.fragment,m),E(XR.$$.fragment,m),E(Y6.$$.fragment,m),E(zR.$$.fragment,m),E(K6.$$.fragment,m),E(QR.$$.fragment,m),E(WR.$$.fragment,m),E(HR.$$.fragment,m),E(o7.$$.fragment,m),E(JR.$$.fragment,m),E(t7.$$.fragment,m),E(YR.$$.fragment,m),E(ZR.$$.fragment,m),E(eP.$$.fragment,m),E(n7.$$.fragment,m),E(oP.$$.fragment,m),E(R7.$$.fragment,m),E(rP.$$.fragment,m),E(tP.$$.fragment,m),E(nP.$$.fragment,m),E(B7.$$.fragment,m),E(sP.$$.fragment,m),E(Q7.$$.fragment,m),E(lP.$$.fragment,m),E(iP.$$.fragment,m),E(cP.$$.fragment,m),E(U7.$$.fragment,m),E(mP.$$.fragment,m),E(iL.$$.fragment,m),E(fP.$$.fragment,m),E(gP.$$.fragment,m),E(uP.$$.fragment,m),E(cL.$$.fragment,m),E(pP.$$.fragment,m),E(TL.$$.fragment,m),E(_P.$$.fragment,m),E(bP.$$.fragment,m),E(FP.$$.fragment,m),E(EL.$$.fragment,m),E(TP.$$.fragment,m),E(PL.$$.fragment,m),E(MP.$$.fragment,m),E(EP.$$.fragment,m),E(wP.$$.fragment,m),E(IL.$$.fragment,m),E(AP.$$.fragment,m),E(WL.$$.fragment,m),E(LP.$$.fragment,m),E(yP.$$.fragment,m),E($P.$$.fragment,m),E(HL.$$.fragment,m),E(kP.$$.fragment,m),E(sy.$$.fragment,m),E(SP.$$.fragment,m),E(RP.$$.fragment,m),E(BP.$$.fragment,m),E(iy.$$.fragment,m),E(IP.$$.fragment,m),E(_y.$$.fragment,m),E(NP.$$.fragment,m),E(qP.$$.fragment,m),E(DP.$$.fragment,m),E(vy.$$.fragment,m),E(GP.$$.fragment,m),E(yy.$$.fragment,m),E(OP.$$.fragment,m),E(VP.$$.fragment,m),E(zP.$$.fragment,m),E($y.$$.fragment,m),E(QP.$$.fragment,m),E(Sy.$$.fragment,m),E(WP.$$.fragment,m),E(UP.$$.fragment,m),E(JP.$$.fragment,m),E(Py.$$.fragment,m),E(YP.$$.fragment,m),E(Ny.$$.fragment,m),E(KP.$$.fragment,m),E(eB.$$.fragment,m),E(rB.$$.fragment,m),E(jy.$$.fragment,m),E(tB.$$.fragment,m),E(Gy.$$.fragment,m),vto=!0)},o(m){C(d.$$.fragment,m),C(Ja.$$.fragment,m),C(wx.$$.fragment,m),C(Ax.$$.fragment,m),C(qf.$$.fragment,m),C(Lx.$$.fragment,m),C(yx.$$.fragment,m),C(kx.$$.fragment,m),C(mu.$$.fragment,m),C(Sx.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Nx.$$.fragment,m),C(Hu.$$.fragment,m),C(qx.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Vx.$$.fragment,m),C(Gp.$$.fragment,m),C(Op.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Qx.$$.fragment,m),C(Hx.$$.fragment,m),C(h_.$$.fragment,m),C(u_.$$.fragment,m),C(Jx.$$.fragment,m),C(Yx.$$.fragment,m),C(Zx.$$.fragment,m),C(e$.$$.fragment,m),C(b_.$$.fragment,m),C(o$.$$.fragment,m),C(qb.$$.fragment,m),C(r$.$$.fragment,m),C(t$.$$.fragment,m),C(n$.$$.fragment,m),C(Db.$$.fragment,m),C(s$.$$.fragment,m),C(I2.$$.fragment,m),C(l$.$$.fragment,m),C(i$.$$.fragment,m),C(c$.$$.fragment,m),C(q2.$$.fragment,m),C(m$.$$.fragment,m),C(yv.$$.fragment,m),C(f$.$$.fragment,m),C(g$.$$.fragment,m),C(u$.$$.fragment,m),C($v.$$.fragment,m),C(p$.$$.fragment,m),C(_F.$$.fragment,m),C(_$.$$.fragment,m),C(b$.$$.fragment,m),C(F$.$$.fragment,m),C(vF.$$.fragment,m),C(T$.$$.fragment,m),C(GF.$$.fragment,m),C(M$.$$.fragment,m),C(E$.$$.fragment,m),C(w$.$$.fragment,m),C(VF.$$.fragment,m),C(A$.$$.fragment,m),C(QT.$$.fragment,m),C(L$.$$.fragment,m),C(y$.$$.fragment,m),C($$.$$.fragment,m),C(UT.$$.fragment,m),C(k$.$$.fragment,m),C(yM.$$.fragment,m),C(S$.$$.fragment,m),C(R$.$$.fragment,m),C(B$.$$.fragment,m),C($M.$$.fragment,m),C(I$.$$.fragment,m),C(jM.$$.fragment,m),C(N$.$$.fragment,m),C(q$.$$.fragment,m),C(D$.$$.fragment,m),C(GM.$$.fragment,m),C(G$.$$.fragment,m),C(xE.$$.fragment,m),C(O$.$$.fragment,m),C(V$.$$.fragment,m),C(z$.$$.fragment,m),C(kE.$$.fragment,m),C(Q$.$$.fragment,m),C(w4.$$.fragment,m),C(W$.$$.fragment,m),C(U$.$$.fragment,m),C(J$.$$.fragment,m),C(L4.$$.fragment,m),C(Y$.$$.fragment,m),C($4.$$.fragment,m),C(Z$.$$.fragment,m),C(K$.$$.fragment,m),C(ok.$$.fragment,m),C(S4.$$.fragment,m),C(rk.$$.fragment,m),C(N4.$$.fragment,m),C(tk.$$.fragment,m),C(ak.$$.fragment,m),C(sk.$$.fragment,m),C(j4.$$.fragment,m),C(lk.$$.fragment,m),C(rC.$$.fragment,m),C(ik.$$.fragment,m),C(dk.$$.fragment,m),C(mk.$$.fragment,m),C(aC.$$.fragment,m),C(fk.$$.fragment,m),C(lC.$$.fragment,m),C(gk.$$.fragment,m),C(hk.$$.fragment,m),C(pk.$$.fragment,m),C(dC.$$.fragment,m),C(_k.$$.fragment,m),C(fC.$$.fragment,m),C(bk.$$.fragment,m),C(vk.$$.fragment,m),C(Tk.$$.fragment,m),C(hC.$$.fragment,m),C(Mk.$$.fragment,m),C(_C.$$.fragment,m),C(Ek.$$.fragment,m),C(Ck.$$.fragment,m),C(Ak.$$.fragment,m),C(vC.$$.fragment,m),C(Lk.$$.fragment,m),C($C.$$.fragment,m),C(yk.$$.fragment,m),C(xk.$$.fragment,m),C(kk.$$.fragment,m),C(SC.$$.fragment,m),C(Sk.$$.fragment,m),C(jC.$$.fragment,m),C(Rk.$$.fragment,m),C(Pk.$$.fragment,m),C(Ik.$$.fragment,m),C(GC.$$.fragment,m),C(Nk.$$.fragment,m),C(KC.$$.fragment,m),C(qk.$$.fragment,m),C(jk.$$.fragment,m),C(Gk.$$.fragment,m),C(o3.$$.fragment,m),C(Ok.$$.fragment,m),C(s3.$$.fragment,m),C(Vk.$$.fragment,m),C(Xk.$$.fragment,m),C(Qk.$$.fragment,m),C(i3.$$.fragment,m),C(Wk.$$.fragment,m),C(u3.$$.fragment,m),C(Uk.$$.fragment,m),C(Hk.$$.fragment,m),C(Yk.$$.fragment,m),C(_3.$$.fragment,m),C(Zk.$$.fragment,m),C(E3.$$.fragment,m),C(Kk.$$.fragment,m),C(eS.$$.fragment,m),C(rS.$$.fragment,m),C(w3.$$.fragment,m),C(tS.$$.fragment,m),C(k3.$$.fragment,m),C(aS.$$.fragment,m),C(nS.$$.fragment,m),C(lS.$$.fragment,m),C(R3.$$.fragment,m),C(iS.$$.fragment,m),C(I3.$$.fragment,m),C(dS.$$.fragment,m),C(cS.$$.fragment,m),C(fS.$$.fragment,m),C(q3.$$.fragment,m),C(gS.$$.fragment,m),C(z3.$$.fragment,m),C(hS.$$.fragment,m),C(uS.$$.fragment,m),C(_S.$$.fragment,m),C(W3.$$.fragment,m),C(bS.$$.fragment,m),C(J3.$$.fragment,m),C(vS.$$.fragment,m),C(FS.$$.fragment,m),C(MS.$$.fragment,m),C(Z3.$$.fragment,m),C(ES.$$.fragment,m),C(o5.$$.fragment,m),C(CS.$$.fragment,m),C(wS.$$.fragment,m),C(LS.$$.fragment,m),C(t5.$$.fragment,m),C(yS.$$.fragment,m),C(a0.$$.fragment,m),C(xS.$$.fragment,m),C($S.$$.fragment,m),C(SS.$$.fragment,m),C(s0.$$.fragment,m),C(RS.$$.fragment,m),C($0.$$.fragment,m),C(PS.$$.fragment,m),C(BS.$$.fragment,m),C(NS.$$.fragment,m),C(S0.$$.fragment,m),C(qS.$$.fragment,m),C(W0.$$.fragment,m),C(jS.$$.fragment,m),C(DS.$$.fragment,m),C(OS.$$.fragment,m),C(H0.$$.fragment,m),C(VS.$$.fragment,m),C(aw.$$.fragment,m),C(XS.$$.fragment,m),C(zS.$$.fragment,m),C(WS.$$.fragment,m),C(sw.$$.fragment,m),C(US.$$.fragment,m),C(cw.$$.fragment,m),C(HS.$$.fragment,m),C(JS.$$.fragment,m),C(ZS.$$.fragment,m),C(fw.$$.fragment,m),C(KS.$$.fragment,m),C(Rw.$$.fragment,m),C(eR.$$.fragment,m),C(oR.$$.fragment,m),C(tR.$$.fragment,m),C(Bw.$$.fragment,m),C(aR.$$.fragment,m),C(Qw.$$.fragment,m),C(nR.$$.fragment,m),C(sR.$$.fragment,m),C(iR.$$.fragment,m),C(Uw.$$.fragment,m),C(dR.$$.fragment,m),C(MA.$$.fragment,m),C(cR.$$.fragment,m),C(mR.$$.fragment,m),C(gR.$$.fragment,m),C(CA.$$.fragment,m),C(hR.$$.fragment,m),C(OA.$$.fragment,m),C(uR.$$.fragment,m),C(pR.$$.fragment,m),C(bR.$$.fragment,m),C(XA.$$.fragment,m),C(vR.$$.fragment,m),C(WA.$$.fragment,m),C(TR.$$.fragment,m),C(MR.$$.fragment,m),C(CR.$$.fragment,m),C(HA.$$.fragment,m),C(wR.$$.fragment,m),C(YA.$$.fragment,m),C(AR.$$.fragment,m),C(LR.$$.fragment,m),C(xR.$$.fragment,m),C(KA.$$.fragment,m),C($R.$$.fragment,m),C(o6.$$.fragment,m),C(kR.$$.fragment,m),C(SR.$$.fragment,m),C(PR.$$.fragment,m),C(t6.$$.fragment,m),C(BR.$$.fragment,m),C(w6.$$.fragment,m),C(IR.$$.fragment,m),C(NR.$$.fragment,m),C(jR.$$.fragment,m),C(L6.$$.fragment,m),C(DR.$$.fragment,m),C(H6.$$.fragment,m),C(GR.$$.fragment,m),C(OR.$$.fragment,m),C(XR.$$.fragment,m),C(Y6.$$.fragment,m),C(zR.$$.fragment,m),C(K6.$$.fragment,m),C(QR.$$.fragment,m),C(WR.$$.fragment,m),C(HR.$$.fragment,m),C(o7.$$.fragment,m),C(JR.$$.fragment,m),C(t7.$$.fragment,m),C(YR.$$.fragment,m),C(ZR.$$.fragment,m),C(eP.$$.fragment,m),C(n7.$$.fragment,m),C(oP.$$.fragment,m),C(R7.$$.fragment,m),C(rP.$$.fragment,m),C(tP.$$.fragment,m),C(nP.$$.fragment,m),C(B7.$$.fragment,m),C(sP.$$.fragment,m),C(Q7.$$.fragment,m),C(lP.$$.fragment,m),C(iP.$$.fragment,m),C(cP.$$.fragment,m),C(U7.$$.fragment,m),C(mP.$$.fragment,m),C(iL.$$.fragment,m),C(fP.$$.fragment,m),C(gP.$$.fragment,m),C(uP.$$.fragment,m),C(cL.$$.fragment,m),C(pP.$$.fragment,m),C(TL.$$.fragment,m),C(_P.$$.fragment,m),C(bP.$$.fragment,m),C(FP.$$.fragment,m),C(EL.$$.fragment,m),C(TP.$$.fragment,m),C(PL.$$.fragment,m),C(MP.$$.fragment,m),C(EP.$$.fragment,m),C(wP.$$.fragment,m),C(IL.$$.fragment,m),C(AP.$$.fragment,m),C(WL.$$.fragment,m),C(LP.$$.fragment,m),C(yP.$$.fragment,m),C($P.$$.fragment,m),C(HL.$$.fragment,m),C(kP.$$.fragment,m),C(sy.$$.fragment,m),C(SP.$$.fragment,m),C(RP.$$.fragment,m),C(BP.$$.fragment,m),C(iy.$$.fragment,m),C(IP.$$.fragment,m),C(_y.$$.fragment,m),C(NP.$$.fragment,m),C(qP.$$.fragment,m),C(DP.$$.fragment,m),C(vy.$$.fragment,m),C(GP.$$.fragment,m),C(yy.$$.fragment,m),C(OP.$$.fragment,m),C(VP.$$.fragment,m),C(zP.$$.fragment,m),C($y.$$.fragment,m),C(QP.$$.fragment,m),C(Sy.$$.fragment,m),C(WP.$$.fragment,m),C(UP.$$.fragment,m),C(JP.$$.fragment,m),C(Py.$$.fragment,m),C(YP.$$.fragment,m),C(Ny.$$.fragment,m),C(KP.$$.fragment,m),C(eB.$$.fragment,m),C(rB.$$.fragment,m),C(jy.$$.fragment,m),C(tB.$$.fragment,m),C(Gy.$$.fragment,m),vto=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Rf),m&&t(bt),m&&t(Ve),m&&t(He),m&&t(Bf),w(Ja,m),m&&t(Je),m&&t(Ae),m&&t($o),m&&t(Ya),m&&t(aoo),m&&t(pd),w(wx),m&&t(noo),m&&t(ds),m&&t(soo),w(Ax,m),m&&t(loo),m&&t(PI),m&&t(ioo),w(qf,m),m&&t(doo),m&&t(_d),w(Lx),m&&t(coo),m&&t(ko),w(yx),w(kx),w(mu),w(Sx),m&&t(moo),m&&t(vd),w(Rx),m&&t(foo),m&&t(So),w(Px),w(Nx),w(Hu),w(qx),m&&t(goo),m&&t(Fd),w(jx),m&&t(hoo),m&&t(Ro),w(Dx),w(Vx),w(Gp),w(Op),w(Xx),m&&t(uoo),m&&t(Td),w(zx),m&&t(poo),m&&t(Po),w(Qx),w(Hx),w(h_),w(u_),w(Jx),m&&t(_oo),m&&t(Ed),w(Yx),m&&t(boo),m&&t(Bo),w(Zx),w(e$),w(b_),w(o$),w(qb),m&&t(voo),m&&t(Ad),w(r$),m&&t(Foo),m&&t(Io),w(t$),w(n$),w(Db),w(s$),w(I2),m&&t(Too),m&&t(xd),w(l$),m&&t(Moo),m&&t(No),w(i$),w(c$),w(q2),w(m$),w(yv),m&&t(Eoo),m&&t(Sd),w(f$),m&&t(Coo),m&&t(qo),w(g$),w(u$),w($v),w(p$),w(_F),m&&t(woo),m&&t(Bd),w(_$),m&&t(Aoo),m&&t(jo),w(b$),w(F$),w(vF),w(T$),w(GF),m&&t(Loo),m&&t(qd),w(M$),m&&t(yoo),m&&t(Do),w(E$),w(w$),w(VF),w(A$),w(QT),m&&t(xoo),m&&t(Gd),w(L$),m&&t($oo),m&&t(Go),w(y$),w($$),w(UT),w(k$),w(yM),m&&t(koo),m&&t(Xd),w(S$),m&&t(Soo),m&&t(Oo),w(R$),w(B$),w($M),w(I$),w(jM),m&&t(Roo),m&&t(Wd),w(N$),m&&t(Poo),m&&t(Vo),w(q$),w(D$),w(GM),w(G$),w(xE),m&&t(Boo),m&&t(Jd),w(O$),m&&t(Ioo),m&&t(Xo),w(V$),w(z$),w(kE),w(Q$),w(w4),m&&t(Noo),m&&t(Kd),w(W$),m&&t(qoo),m&&t(zo),w(U$),w(J$),w(L4),w(Y$),w($4),m&&t(joo),m&&t(rc),w(Z$),m&&t(Doo),m&&t(Qo),w(K$),w(ok),w(S4),w(rk),w(N4),m&&t(Goo),m&&t(sc),w(tk),m&&t(Ooo),m&&t(Wo),w(ak),w(sk),w(j4),w(lk),w(rC),m&&t(Voo),m&&t(dc),w(ik),m&&t(Xoo),m&&t(Uo),w(dk),w(mk),w(aC),w(fk),w(lC),m&&t(zoo),m&&t(fc),w(gk),m&&t(Qoo),m&&t(Ho),w(hk),w(pk),w(dC),w(_k),w(fC),m&&t(Woo),m&&t(uc),w(bk),m&&t(Uoo),m&&t(Jo),w(vk),w(Tk),w(hC),w(Mk),w(_C),m&&t(Hoo),m&&t(bc),w(Ek),m&&t(Joo),m&&t(Yo),w(Ck),w(Ak),w(vC),w(Lk),w($C),m&&t(Yoo),m&&t(Tc),w(yk),m&&t(Zoo),m&&t(Zo),w(xk),w(kk),w(SC),w(Sk),w(jC),m&&t(Koo),m&&t(Cc),w(Rk),m&&t(ero),m&&t(Ko),w(Pk),w(Ik),w(GC),w(Nk),w(KC),m&&t(oro),m&&t(Lc),w(qk),m&&t(rro),m&&t(er),w(jk),w(Gk),w(o3),w(Ok),w(s3),m&&t(tro),m&&t(kc),w(Vk),m&&t(aro),m&&t(or),w(Xk),w(Qk),w(i3),w(Wk),w(u3),m&&t(nro),m&&t(Pc),w(Uk),m&&t(sro),m&&t(rr),w(Hk),w(Yk),w(_3),w(Zk),w(E3),m&&t(lro),m&&t(Nc),w(Kk),m&&t(iro),m&&t(tr),w(eS),w(rS),w(w3),w(tS),w(k3),m&&t(dro),m&&t(Dc),w(aS),m&&t(cro),m&&t(ar),w(nS),w(lS),w(R3),w(iS),w(I3),m&&t(mro),m&&t(Vc),w(dS),m&&t(fro),m&&t(nr),w(cS),w(fS),w(q3),w(gS),w(z3),m&&t(gro),m&&t(Qc),w(hS),m&&t(hro),m&&t(sr),w(uS),w(_S),w(W3),w(bS),w(J3),m&&t(uro),m&&t(Hc),w(vS),m&&t(pro),m&&t(lr),w(FS),w(MS),w(Z3),w(ES),w(o5),m&&t(_ro),m&&t(Zc),w(CS),m&&t(bro),m&&t(ir),w(wS),w(LS),w(t5),w(yS),w(a0),m&&t(vro),m&&t(om),w(xS),m&&t(Fro),m&&t(dr),w($S),w(SS),w(s0),w(RS),w($0),m&&t(Tro),m&&t(am),w(PS),m&&t(Mro),m&&t(cr),w(BS),w(NS),w(S0),w(qS),w(W0),m&&t(Ero),m&&t(lm),w(jS),m&&t(Cro),m&&t(mr),w(DS),w(OS),w(H0),w(VS),w(aw),m&&t(wro),m&&t(cm),w(XS),m&&t(Aro),m&&t(fr),w(zS),w(WS),w(sw),w(US),w(cw),m&&t(Lro),m&&t(hm),w(HS),m&&t(yro),m&&t(gr),w(JS),w(ZS),w(fw),w(KS),w(Rw),m&&t(xro),m&&t(_m),w(eR),m&&t($ro),m&&t(hr),w(oR),w(tR),w(Bw),w(aR),w(Qw),m&&t(kro),m&&t(Fm),w(nR),m&&t(Sro),m&&t(ur),w(sR),w(iR),w(Uw),w(dR),w(MA),m&&t(Rro),m&&t(Em),w(cR),m&&t(Pro),m&&t(pr),w(mR),w(gR),w(CA),w(hR),w(OA),m&&t(Bro),m&&t(Am),w(uR),m&&t(Iro),m&&t(_r),w(pR),w(bR),w(XA),w(vR),w(WA),m&&t(Nro),m&&t(xm),w(TR),m&&t(qro),m&&t(br),w(MR),w(CR),w(HA),w(wR),w(YA),m&&t(jro),m&&t(Sm),w(AR),m&&t(Dro),m&&t(vr),w(LR),w(xR),w(KA),w($R),w(o6),m&&t(Gro),m&&t(Bm),w(kR),m&&t(Oro),m&&t(Fr),w(SR),w(PR),w(t6),w(BR),w(w6),m&&t(Vro),m&&t(qm),w(IR),m&&t(Xro),m&&t(Tr),w(NR),w(jR),w(L6),w(DR),w(H6),m&&t(zro),m&&t(Gm),w(GR),m&&t(Qro),m&&t(Mr),w(OR),w(XR),w(Y6),w(zR),w(K6),m&&t(Wro),m&&t(Xm),w(QR),m&&t(Uro),m&&t(Er),w(WR),w(HR),w(o7),w(JR),w(t7),m&&t(Hro),m&&t(Wm),w(YR),m&&t(Jro),m&&t(Cr),w(ZR),w(eP),w(n7),w(oP),w(R7),m&&t(Yro),m&&t(Jm),w(rP),m&&t(Zro),m&&t(wr),w(tP),w(nP),w(B7),w(sP),w(Q7),m&&t(Kro),m&&t(Km),w(lP),m&&t(eto),m&&t(Ar),w(iP),w(cP),w(U7),w(mP),w(iL),m&&t(oto),m&&t(rf),w(fP),m&&t(rto),m&&t(Lr),w(gP),w(uP),w(cL),w(pP),w(TL),m&&t(tto),m&&t(nf),w(_P),m&&t(ato),m&&t(yr),w(bP),w(FP),w(EL),w(TP),w(PL),m&&t(nto),m&&t(df),w(MP),m&&t(sto),m&&t(xr),w(EP),w(wP),w(IL),w(AP),w(WL),m&&t(lto),m&&t(ff),w(LP),m&&t(ito),m&&t($r),w(yP),w($P),w(HL),w(kP),w(sy),m&&t(dto),m&&t(uf),w(SP),m&&t(cto),m&&t(kr),w(RP),w(BP),w(iy),w(IP),w(_y),m&&t(mto),m&&t(bf),w(NP),m&&t(fto),m&&t(Sr),w(qP),w(DP),w(vy),w(GP),w(yy),m&&t(gto),m&&t(Tf),w(OP),m&&t(hto),m&&t(Rr),w(VP),w(zP),w($y),w(QP),w(Sy),m&&t(uto),m&&t(Cf),w(WP),m&&t(pto),m&&t(Pr),w(UP),w(JP),w(Py),w(YP),w(Ny),m&&t(_to),m&&t(Lf),w(KP),m&&t(bto),m&&t(Br),w(eB),w(rB),w(jy),w(tB),w(Gy)}}}const uMa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.AutoModelForZeroShotObjectDetection",title:"AutoModelForZeroShotObjectDetection"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function pMa($){return aFa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class EMa extends eFa{constructor(g){super();oFa(this,g,pMa,hMa,rFa,{})}}export{EMa as default,uMa as metadata};
