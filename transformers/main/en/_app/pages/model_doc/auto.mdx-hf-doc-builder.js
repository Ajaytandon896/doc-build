import{S as ZJt,i as eYt,s as oYt,e as a,k as l,w as F,t as o,M as rYt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as tYt,L as j}from"../../chunks/vendor-hf-doc-builder.js";import{T as Bst}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as q}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function aYt($){let g,v,u,f,p,c,h,wo,$i,Bm,lt,ki,Si,My,Im,Oe,Qe,Ri,Bn,Ey,In,Nn,Cy,Pi,qn,wy,Bi,Nm,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),$i=a("code"),Bm=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),ki=a("code"),Si=o('"new-model"'),My=o(")."),Im=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ri=a("code"),Bn=o("NewModel"),Ey=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),Cy=o(`, make sure its
`),Pi=a("code"),qn=o("config_class"),wy=o(` attribute is set to the same class you use when registering the model (here
`),Bi=a("code"),Nm=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var nR=s(u);f=r(nR,"NewModelConfig"),nR.forEach(t),p=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Ii=s(c);h=r(Ii,"PretrainedConfig"),Ii.forEach(t),wo=r(Ae,`, make sure its
`),$i=n(Ae,"CODE",{});var sR=s($i);Bm=r(sR,"model_type"),sR.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),ki=n(Ae,"CODE",{});var lR=s(ki);Si=r(lR,'"new-model"'),lR.forEach(t),My=r(Ae,")."),Ae.forEach(t),Im=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Ri=n(Ao,"CODE",{});var Ra=s(Ri);Bn=r(Ra,"NewModel"),Ra.forEach(t),Ey=r(Ao," is a subclass of "),In=n(Ao,"A",{href:!0});var iR=s(In);Nn=r(iR,"PreTrainedModel"),iR.forEach(t),Cy=r(Ao,`, make sure its
`),Pi=n(Ao,"CODE",{});var qm=s(Pi);qn=r(qm,"config_class"),qm.forEach(t),wy=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Bi=n(Ao,"CODE",{});var dR=s(Bi);Nm=r(dR,"NewModelConfig"),dR.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(In,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,c),e(c,h),e(g,wo),e(g,$i),e($i,Bm),e(g,lt),e(g,ki),e(ki,Si),e(g,My),b(He,Im,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Ri),e(Ri,Bn),e(Oe,Ey),e(Oe,In),e(In,Nn),e(Oe,Cy),e(Oe,Pi),e(Pi,qn),e(Oe,wy),e(Oe,Bi),e(Bi,Nm),e(Oe,Sa)},d(He){He&&t(g),He&&t(Im),He&&t(Oe)}}}function nYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function sYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function lYt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(c){c&&t(g)}}}function iYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function dYt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(c){c&&t(g)}}}function cYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function mYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function fYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function gYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function hYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function uYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function pYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function _Yt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function bYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function vYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function FYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function TYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function MYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function EYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function CYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function wYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function AYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function LYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function yYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function xYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function $Yt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function kYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function SYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function RYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function PYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function BYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function IYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function NYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function qYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function jYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function DYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function GYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function OYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function VYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function XYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function zYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function WYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function QYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function HYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function UYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function JYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function YYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function KYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function ZYt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function eKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function oKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function rKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function tKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function aKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function nKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function sKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function lKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function iKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function dKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function cKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function mKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function fKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function gKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function hKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function uKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function pKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function _Kt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function bKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function vKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function FKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function TKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function MKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function EKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function CKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function wKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function AKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function LKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function yKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function xKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function $Kt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function kKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function SKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function RKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function PKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function BKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function IKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function NKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function qKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function jKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function DKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function GKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function OKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function VKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function XKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function zKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function WKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function QKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function HKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function UKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function JKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function YKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function KKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function ZKt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function eZt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function oZt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function rZt($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:j,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function tZt($){let g,v,u,f,p,c,h,wo,$i,Bm,lt,ki,Si,My,Im,Oe,Qe,Ri,Bn,Ey,In,Nn,Cy,Pi,qn,wy,Bi,Nm,Sa,He,Ae,nR,Ii,sR,lR,Ao,Ra,iR,qm,dR,XUe,xze,Ni,jm,_ne,Ay,zUe,bne,WUe,$ze,jn,QUe,vne,HUe,UUe,Fne,JUe,YUe,kze,Ly,Sze,cR,KUe,Rze,Dm,Pze,qi,Gm,Tne,yy,ZUe,Mne,eJe,Bze,Lo,xy,oJe,$y,rJe,mR,tJe,aJe,nJe,ky,sJe,Ene,lJe,iJe,dJe,yr,Sy,cJe,Cne,mJe,fJe,ji,gJe,wne,hJe,uJe,Ane,pJe,_Je,bJe,A,Om,Lne,vJe,FJe,fR,TJe,MJe,EJe,Vm,yne,CJe,wJe,gR,AJe,LJe,yJe,Xm,xne,xJe,$Je,hR,kJe,SJe,RJe,zm,$ne,PJe,BJe,uR,IJe,NJe,qJe,Wm,kne,jJe,DJe,pR,GJe,OJe,VJe,Qm,Sne,XJe,zJe,_R,WJe,QJe,HJe,Hm,Rne,UJe,JJe,bR,YJe,KJe,ZJe,Um,Pne,eYe,oYe,vR,rYe,tYe,aYe,Jm,Bne,nYe,sYe,FR,lYe,iYe,dYe,Ym,Ine,cYe,mYe,TR,fYe,gYe,hYe,Km,Nne,uYe,pYe,MR,_Ye,bYe,vYe,Zm,qne,FYe,TYe,ER,MYe,EYe,CYe,ef,jne,wYe,AYe,CR,LYe,yYe,xYe,of,Dne,$Ye,kYe,wR,SYe,RYe,PYe,rf,Gne,BYe,IYe,AR,NYe,qYe,jYe,tf,One,DYe,GYe,LR,OYe,VYe,XYe,af,Vne,zYe,WYe,yR,QYe,HYe,UYe,nf,Xne,JYe,YYe,xR,KYe,ZYe,eKe,sf,zne,oKe,rKe,$R,tKe,aKe,nKe,lf,Wne,sKe,lKe,kR,iKe,dKe,cKe,df,Qne,mKe,fKe,SR,gKe,hKe,uKe,cf,Hne,pKe,_Ke,RR,bKe,vKe,FKe,mf,Une,TKe,MKe,PR,EKe,CKe,wKe,ff,Jne,AKe,LKe,BR,yKe,xKe,$Ke,gf,Yne,kKe,SKe,IR,RKe,PKe,BKe,hf,Kne,IKe,NKe,NR,qKe,jKe,DKe,uf,Zne,GKe,OKe,qR,VKe,XKe,zKe,pf,ese,WKe,QKe,jR,HKe,UKe,JKe,_f,ose,YKe,KKe,DR,ZKe,eZe,oZe,bf,rse,rZe,tZe,GR,aZe,nZe,sZe,vf,tse,lZe,iZe,OR,dZe,cZe,mZe,Ff,ase,fZe,gZe,VR,hZe,uZe,pZe,Tf,nse,_Ze,bZe,XR,vZe,FZe,TZe,Mf,sse,MZe,EZe,zR,CZe,wZe,AZe,Ef,lse,LZe,yZe,WR,xZe,$Ze,kZe,Cf,ise,SZe,RZe,QR,PZe,BZe,IZe,wf,dse,NZe,qZe,HR,jZe,DZe,GZe,Af,cse,OZe,VZe,UR,XZe,zZe,WZe,Lf,mse,QZe,HZe,JR,UZe,JZe,YZe,yf,fse,KZe,ZZe,YR,eeo,oeo,reo,xf,gse,teo,aeo,KR,neo,seo,leo,$f,hse,ieo,deo,ZR,ceo,meo,feo,kf,use,geo,heo,eP,ueo,peo,_eo,Sf,pse,beo,veo,oP,Feo,Teo,Meo,Rf,_se,Eeo,Ceo,rP,weo,Aeo,Leo,Pf,bse,yeo,xeo,tP,$eo,keo,Seo,Bf,vse,Reo,Peo,aP,Beo,Ieo,Neo,If,Fse,qeo,jeo,nP,Deo,Geo,Oeo,Nf,Tse,Veo,Xeo,sP,zeo,Weo,Qeo,qf,Mse,Heo,Ueo,lP,Jeo,Yeo,Keo,jf,Ese,Zeo,eoo,iP,ooo,roo,too,Df,Cse,aoo,noo,dP,soo,loo,ioo,Gf,wse,doo,coo,cP,moo,foo,goo,Of,Ase,hoo,uoo,mP,poo,_oo,boo,Vf,Lse,voo,Foo,fP,Too,Moo,Eoo,Xf,yse,Coo,woo,gP,Aoo,Loo,yoo,zf,xse,xoo,$oo,hP,koo,Soo,Roo,Wf,$se,Poo,Boo,uP,Ioo,Noo,qoo,Qf,kse,joo,Doo,pP,Goo,Ooo,Voo,Hf,Sse,Xoo,zoo,_P,Woo,Qoo,Hoo,Uf,Rse,Uoo,Joo,bP,Yoo,Koo,Zoo,Jf,Pse,ero,oro,vP,rro,tro,aro,Yf,Bse,nro,sro,FP,lro,iro,dro,Kf,Ise,cro,mro,TP,fro,gro,hro,Zf,Nse,uro,pro,MP,_ro,bro,vro,eg,qse,Fro,Tro,EP,Mro,Ero,Cro,og,jse,wro,Aro,CP,Lro,yro,xro,rg,Dse,$ro,kro,wP,Sro,Rro,Pro,tg,Gse,Bro,Iro,AP,Nro,qro,jro,ag,Ose,Dro,Gro,LP,Oro,Vro,Xro,ng,Vse,zro,Wro,yP,Qro,Hro,Uro,sg,Xse,Jro,Yro,xP,Kro,Zro,eto,lg,zse,oto,rto,$P,tto,ato,nto,ig,Wse,sto,lto,kP,ito,dto,cto,dg,Qse,mto,fto,SP,gto,hto,uto,cg,Hse,pto,_to,RP,bto,vto,Fto,mg,Use,Tto,Mto,PP,Eto,Cto,wto,fg,Jse,Ato,Lto,BP,yto,xto,$to,gg,Yse,kto,Sto,IP,Rto,Pto,Bto,hg,Kse,Ito,Nto,NP,qto,jto,Dto,ug,Zse,Gto,Oto,qP,Vto,Xto,zto,pg,ele,Wto,Qto,jP,Hto,Uto,Jto,_g,ole,Yto,Kto,DP,Zto,eao,oao,bg,rle,rao,tao,GP,aao,nao,sao,vg,tle,lao,iao,OP,dao,cao,mao,Fg,ale,fao,gao,VP,hao,uao,pao,Tg,nle,_ao,bao,XP,vao,Fao,Tao,Mg,sle,Mao,Eao,zP,Cao,wao,Aao,Eg,lle,Lao,yao,WP,xao,$ao,kao,Cg,ile,Sao,Rao,QP,Pao,Bao,Iao,wg,dle,Nao,qao,HP,jao,Dao,Gao,Ag,cle,Oao,Vao,UP,Xao,zao,Wao,Lg,mle,Qao,Hao,JP,Uao,Jao,Yao,yg,fle,Kao,Zao,YP,eno,ono,rno,xg,gle,tno,ano,KP,nno,sno,lno,$g,hle,ino,dno,ZP,cno,mno,fno,kg,ule,gno,hno,eB,uno,pno,_no,Sg,ple,bno,vno,oB,Fno,Tno,Mno,Rg,_le,Eno,Cno,rB,wno,Ano,Lno,Pg,ble,yno,xno,tB,$no,kno,Sno,Bg,vle,Rno,Pno,aB,Bno,Ino,Nno,Ig,Fle,qno,jno,nB,Dno,Gno,Ono,Ng,Tle,Vno,Xno,sB,zno,Wno,Qno,qg,Mle,Hno,Uno,lB,Jno,Yno,Kno,jg,Ele,Zno,eso,iB,oso,rso,tso,Dg,Cle,aso,nso,dB,sso,lso,iso,Gg,wle,dso,cso,cB,mso,fso,gso,Og,Ale,hso,uso,mB,pso,_so,bso,Vg,Lle,vso,Fso,fB,Tso,Mso,Eso,Xg,yle,Cso,wso,gB,Aso,Lso,yso,zg,xle,xso,$so,hB,kso,Sso,Rso,Wg,$le,Pso,Bso,uB,Iso,Nso,qso,Qg,kle,jso,Dso,pB,Gso,Oso,Vso,Hg,Sle,Xso,zso,_B,Wso,Qso,Hso,Ug,Rle,Uso,Jso,bB,Yso,Kso,Zso,Jg,Ple,elo,olo,vB,rlo,tlo,alo,Yg,Ble,nlo,slo,FB,llo,ilo,dlo,Kg,Ile,clo,mlo,TB,flo,glo,hlo,Zg,Nle,ulo,plo,MB,_lo,blo,vlo,eh,qle,Flo,Tlo,EB,Mlo,Elo,Clo,oh,wlo,rh,Ry,Alo,jle,Llo,Ize,Di,th,Dle,Py,ylo,Gle,xlo,Nze,yo,By,$lo,Iy,klo,CB,Slo,Rlo,Plo,Ny,Blo,Ole,Ilo,Nlo,qlo,xr,qy,jlo,Vle,Dlo,Glo,Pa,Olo,Xle,Vlo,Xlo,zle,zlo,Wlo,Wle,Qlo,Hlo,Ulo,k,Dn,Qle,Jlo,Ylo,wB,Klo,Zlo,AB,eio,oio,rio,Gn,Hle,tio,aio,LB,nio,sio,yB,lio,iio,dio,On,Ule,cio,mio,xB,fio,gio,$B,hio,uio,pio,ah,Jle,_io,bio,kB,vio,Fio,Tio,Vn,Yle,Mio,Eio,SB,Cio,wio,RB,Aio,Lio,yio,nh,Kle,xio,$io,PB,kio,Sio,Rio,sh,Zle,Pio,Bio,BB,Iio,Nio,qio,lh,eie,jio,Dio,IB,Gio,Oio,Vio,Xn,oie,Xio,zio,NB,Wio,Qio,qB,Hio,Uio,Jio,zn,rie,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,Wn,tie,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,ih,aie,mdo,fdo,VB,gdo,hdo,udo,dh,nie,pdo,_do,XB,bdo,vdo,Fdo,ch,sie,Tdo,Mdo,zB,Edo,Cdo,wdo,Qn,lie,Ado,Ldo,WB,ydo,xdo,QB,$do,kdo,Sdo,mh,iie,Rdo,Pdo,HB,Bdo,Ido,Ndo,Hn,die,qdo,jdo,UB,Ddo,Gdo,JB,Odo,Vdo,Xdo,Un,cie,zdo,Wdo,YB,Qdo,Hdo,KB,Udo,Jdo,Ydo,Jn,mie,Kdo,Zdo,ZB,eco,oco,eI,rco,tco,aco,Yn,fie,nco,sco,oI,lco,ico,rI,dco,cco,mco,fh,gie,fco,gco,tI,hco,uco,pco,Kn,hie,_co,bco,aI,vco,Fco,nI,Tco,Mco,Eco,Zn,uie,Cco,wco,sI,Aco,Lco,lI,yco,xco,$co,es,pie,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,os,_ie,qco,jco,cI,Dco,Gco,mI,Oco,Vco,Xco,rs,bie,zco,Wco,fI,Qco,Hco,gI,Uco,Jco,Yco,ts,vie,Kco,Zco,hI,emo,omo,uI,rmo,tmo,amo,gh,Fie,nmo,smo,pI,lmo,imo,dmo,as,Tie,cmo,mmo,_I,fmo,gmo,bI,hmo,umo,pmo,hh,Mie,_mo,bmo,vI,vmo,Fmo,Tmo,ns,Eie,Mmo,Emo,FI,Cmo,wmo,TI,Amo,Lmo,ymo,ss,Cie,xmo,$mo,MI,kmo,Smo,EI,Rmo,Pmo,Bmo,ls,wie,Imo,Nmo,CI,qmo,jmo,wI,Dmo,Gmo,Omo,uh,Aie,Vmo,Xmo,AI,zmo,Wmo,Qmo,is,Lie,Hmo,Umo,LI,Jmo,Ymo,yI,Kmo,Zmo,efo,ds,yie,ofo,rfo,xI,tfo,afo,$I,nfo,sfo,lfo,cs,xie,ifo,dfo,kI,cfo,mfo,SI,ffo,gfo,hfo,ph,$ie,ufo,pfo,RI,_fo,bfo,vfo,ms,kie,Ffo,Tfo,PI,Mfo,Efo,BI,Cfo,wfo,Afo,fs,Sie,Lfo,yfo,II,xfo,$fo,NI,kfo,Sfo,Rfo,gs,Rie,Pfo,Bfo,qI,Ifo,Nfo,jI,qfo,jfo,Dfo,hs,Pie,Gfo,Ofo,DI,Vfo,Xfo,GI,zfo,Wfo,Qfo,us,Bie,Hfo,Ufo,OI,Jfo,Yfo,VI,Kfo,Zfo,ego,ps,Iie,ogo,rgo,XI,tgo,ago,zI,ngo,sgo,lgo,_s,Nie,igo,dgo,WI,cgo,mgo,QI,fgo,ggo,hgo,bs,qie,ugo,pgo,HI,_go,bgo,UI,vgo,Fgo,Tgo,_h,jie,Mgo,Ego,JI,Cgo,wgo,Ago,vs,Die,Lgo,ygo,YI,xgo,$go,KI,kgo,Sgo,Rgo,bh,Gie,Pgo,Bgo,ZI,Igo,Ngo,qgo,vh,Oie,jgo,Dgo,eN,Ggo,Ogo,Vgo,Fs,Vie,Xgo,zgo,oN,Wgo,Qgo,rN,Hgo,Ugo,Jgo,Ts,Xie,Ygo,Kgo,tN,Zgo,eho,aN,oho,rho,tho,Ms,zie,aho,nho,nN,sho,lho,sN,iho,dho,cho,Fh,Wie,mho,fho,lN,gho,hho,uho,Es,Qie,pho,_ho,iN,bho,vho,dN,Fho,Tho,Mho,Cs,Hie,Eho,Cho,cN,who,Aho,mN,Lho,yho,xho,ws,Uie,$ho,kho,fN,Sho,Rho,gN,Pho,Bho,Iho,As,Jie,Nho,qho,hN,jho,Dho,uN,Gho,Oho,Vho,Ls,Yie,Xho,zho,pN,Who,Qho,_N,Hho,Uho,Jho,ys,Kie,Yho,Kho,bN,Zho,euo,vN,ouo,ruo,tuo,xs,Zie,auo,nuo,FN,suo,luo,TN,iuo,duo,cuo,$s,ede,muo,fuo,MN,guo,huo,EN,uuo,puo,_uo,Th,ode,buo,vuo,CN,Fuo,Tuo,Muo,ks,rde,Euo,Cuo,wN,wuo,Auo,AN,Luo,yuo,xuo,Ss,tde,$uo,kuo,LN,Suo,Ruo,yN,Puo,Buo,Iuo,Mh,ade,Nuo,quo,xN,juo,Duo,Guo,Eh,nde,Ouo,Vuo,$N,Xuo,zuo,Wuo,Ch,sde,Quo,Huo,kN,Uuo,Juo,Yuo,wh,lde,Kuo,Zuo,SN,epo,opo,rpo,Rs,ide,tpo,apo,RN,npo,spo,PN,lpo,ipo,dpo,Ah,dde,cpo,mpo,BN,fpo,gpo,hpo,Ps,cde,upo,ppo,IN,_po,bpo,NN,vpo,Fpo,Tpo,Bs,mde,Mpo,Epo,qN,Cpo,wpo,jN,Apo,Lpo,ypo,Is,fde,xpo,$po,DN,kpo,Spo,GN,Rpo,Ppo,Bpo,Ns,gde,Ipo,Npo,ON,qpo,jpo,VN,Dpo,Gpo,Opo,qs,hde,Vpo,Xpo,XN,zpo,Wpo,zN,Qpo,Hpo,Upo,js,ude,Jpo,Ypo,WN,Kpo,Zpo,QN,e_o,o_o,r_o,Lh,pde,t_o,a_o,HN,n_o,s_o,l_o,yh,_de,i_o,d_o,UN,c_o,m_o,f_o,Ds,bde,g_o,h_o,JN,u_o,p_o,YN,__o,b_o,v_o,Gs,vde,F_o,T_o,KN,M_o,E_o,ZN,C_o,w_o,A_o,Os,Fde,L_o,y_o,eq,x_o,$_o,oq,k_o,S_o,R_o,xh,Tde,P_o,B_o,rq,I_o,N_o,q_o,$h,Mde,j_o,D_o,tq,G_o,O_o,V_o,kh,Ede,X_o,z_o,aq,W_o,Q_o,H_o,Vs,Cde,U_o,J_o,nq,Y_o,K_o,sq,Z_o,e2o,o2o,Xs,wde,r2o,t2o,lq,a2o,n2o,iq,s2o,l2o,i2o,Sh,Ade,d2o,c2o,dq,m2o,f2o,g2o,Rh,Lde,h2o,u2o,cq,p2o,_2o,b2o,Ph,yde,v2o,F2o,mq,T2o,M2o,E2o,zs,xde,C2o,w2o,fq,A2o,L2o,gq,y2o,x2o,$2o,Bh,$de,k2o,S2o,hq,R2o,P2o,B2o,Ih,kde,I2o,N2o,uq,q2o,j2o,D2o,Ws,Sde,G2o,O2o,pq,V2o,X2o,_q,z2o,W2o,Q2o,Qs,Rde,H2o,U2o,bq,J2o,Y2o,vq,K2o,Z2o,ebo,Hs,Pde,obo,rbo,Fq,tbo,abo,Tq,nbo,sbo,lbo,Us,Bde,ibo,dbo,Mq,cbo,mbo,Eq,fbo,gbo,hbo,Nh,ubo,qh,jy,pbo,Ide,_bo,qze,Gi,jh,Nde,Dy,bbo,qde,vbo,jze,xo,Gy,Fbo,Oy,Tbo,Cq,Mbo,Ebo,Cbo,Vy,wbo,jde,Abo,Lbo,ybo,Ue,Xy,xbo,Dde,$bo,kbo,Ba,Sbo,Gde,Rbo,Pbo,Ode,Bbo,Ibo,Vde,Nbo,qbo,jbo,J,Dh,Xde,Dbo,Gbo,wq,Obo,Vbo,Xbo,Gh,zde,zbo,Wbo,Aq,Qbo,Hbo,Ubo,Oh,Wde,Jbo,Ybo,Lq,Kbo,Zbo,evo,Vh,Qde,ovo,rvo,yq,tvo,avo,nvo,Xh,Hde,svo,lvo,xq,ivo,dvo,cvo,zh,Ude,mvo,fvo,$q,gvo,hvo,uvo,Wh,Jde,pvo,_vo,kq,bvo,vvo,Fvo,Qh,Yde,Tvo,Mvo,Sq,Evo,Cvo,wvo,Hh,Kde,Avo,Lvo,Rq,yvo,xvo,$vo,Uh,Zde,kvo,Svo,Pq,Rvo,Pvo,Bvo,Jh,ece,Ivo,Nvo,Bq,qvo,jvo,Dvo,Yh,oce,Gvo,Ovo,Iq,Vvo,Xvo,zvo,Kh,rce,Wvo,Qvo,Nq,Hvo,Uvo,Jvo,Zh,tce,Yvo,Kvo,qq,Zvo,e1o,o1o,eu,ace,r1o,t1o,jq,a1o,n1o,s1o,ou,nce,l1o,i1o,Dq,d1o,c1o,m1o,ru,sce,f1o,g1o,Gq,h1o,u1o,p1o,tu,lce,_1o,b1o,Oq,v1o,F1o,T1o,au,ice,M1o,E1o,Vq,C1o,w1o,A1o,nu,dce,L1o,y1o,Xq,x1o,$1o,k1o,su,cce,S1o,R1o,zq,P1o,B1o,I1o,lu,mce,N1o,q1o,Wq,j1o,D1o,G1o,iu,fce,O1o,V1o,Qq,X1o,z1o,W1o,du,gce,Q1o,H1o,Hq,U1o,J1o,Y1o,cu,hce,K1o,Z1o,Uq,eFo,oFo,rFo,mu,uce,tFo,aFo,Jq,nFo,sFo,lFo,fu,pce,iFo,dFo,Yq,cFo,mFo,fFo,gu,_ce,gFo,hFo,Kq,uFo,pFo,_Fo,hu,bce,bFo,vFo,Zq,FFo,TFo,MFo,uu,vce,EFo,CFo,ej,wFo,AFo,LFo,pu,Fce,yFo,xFo,oj,$Fo,kFo,SFo,_u,Tce,RFo,PFo,rj,BFo,IFo,NFo,bu,Mce,qFo,jFo,tj,DFo,GFo,OFo,vu,Ece,VFo,XFo,aj,zFo,WFo,QFo,Fu,Cce,HFo,UFo,nj,JFo,YFo,KFo,Tu,wce,ZFo,eTo,sj,oTo,rTo,tTo,Mu,aTo,Eu,nTo,Cu,zy,sTo,Ace,lTo,Dze,Oi,wu,Lce,Wy,iTo,yce,dTo,Gze,$o,Qy,cTo,Hy,mTo,lj,fTo,gTo,hTo,Uy,uTo,xce,pTo,_To,bTo,Je,Jy,vTo,$ce,FTo,TTo,Vi,MTo,kce,ETo,CTo,Sce,wTo,ATo,LTo,me,Au,Rce,yTo,xTo,ij,$To,kTo,STo,Lu,Pce,RTo,PTo,dj,BTo,ITo,NTo,yu,Bce,qTo,jTo,cj,DTo,GTo,OTo,xu,Ice,VTo,XTo,mj,zTo,WTo,QTo,$u,Nce,HTo,UTo,fj,JTo,YTo,KTo,ku,qce,ZTo,eMo,gj,oMo,rMo,tMo,Su,jce,aMo,nMo,hj,sMo,lMo,iMo,Ru,Dce,dMo,cMo,uj,mMo,fMo,gMo,Pu,Gce,hMo,uMo,pj,pMo,_Mo,bMo,Bu,Oce,vMo,FMo,_j,TMo,MMo,EMo,Iu,Vce,CMo,wMo,bj,AMo,LMo,yMo,Nu,Xce,xMo,$Mo,vj,kMo,SMo,RMo,qu,zce,PMo,BMo,Fj,IMo,NMo,qMo,ju,Wce,jMo,DMo,Tj,GMo,OMo,VMo,Du,Qce,XMo,zMo,Mj,WMo,QMo,HMo,Gu,Hce,UMo,JMo,Ej,YMo,KMo,ZMo,Ou,Uce,e4o,o4o,Cj,r4o,t4o,a4o,Vu,Jce,n4o,s4o,wj,l4o,i4o,d4o,Xu,Yce,c4o,m4o,Aj,f4o,g4o,h4o,zu,u4o,Wu,p4o,Qu,Yy,_4o,Kce,b4o,Oze,Xi,Hu,Zce,Ky,v4o,eme,F4o,Vze,ko,Zy,T4o,zi,M4o,Lj,E4o,C4o,yj,w4o,A4o,L4o,e8,y4o,ome,x4o,$4o,k4o,it,o8,S4o,rme,R4o,P4o,Wi,B4o,tme,I4o,N4o,xj,q4o,j4o,D4o,Uu,G4o,Ye,r8,O4o,ame,V4o,X4o,Ia,z4o,nme,W4o,Q4o,sme,H4o,U4o,lme,J4o,Y4o,K4o,y,Ju,ime,Z4o,eEo,$j,oEo,rEo,tEo,Yu,dme,aEo,nEo,kj,sEo,lEo,iEo,Ku,cme,dEo,cEo,Sj,mEo,fEo,gEo,Zu,mme,hEo,uEo,Rj,pEo,_Eo,bEo,ep,fme,vEo,FEo,Pj,TEo,MEo,EEo,op,gme,CEo,wEo,Bj,AEo,LEo,yEo,rp,hme,xEo,$Eo,Ij,kEo,SEo,REo,tp,ume,PEo,BEo,Nj,IEo,NEo,qEo,ap,pme,jEo,DEo,qj,GEo,OEo,VEo,np,_me,XEo,zEo,jj,WEo,QEo,HEo,sp,bme,UEo,JEo,Dj,YEo,KEo,ZEo,lp,vme,eCo,oCo,Gj,rCo,tCo,aCo,ip,Fme,nCo,sCo,Oj,lCo,iCo,dCo,dp,Tme,cCo,mCo,Vj,fCo,gCo,hCo,cp,Mme,uCo,pCo,Xj,_Co,bCo,vCo,mp,Eme,FCo,TCo,zj,MCo,ECo,CCo,fp,Cme,wCo,ACo,Wj,LCo,yCo,xCo,gp,wme,$Co,kCo,Qj,SCo,RCo,PCo,hp,Ame,BCo,ICo,Hj,NCo,qCo,jCo,up,Lme,DCo,GCo,Uj,OCo,VCo,XCo,pp,yme,zCo,WCo,Jj,QCo,HCo,UCo,_p,xme,JCo,YCo,Yj,KCo,ZCo,e5o,bp,$me,o5o,r5o,Kj,t5o,a5o,n5o,vp,kme,s5o,l5o,Zj,i5o,d5o,c5o,Fp,Sme,m5o,f5o,eD,g5o,h5o,u5o,Tp,Rme,p5o,_5o,oD,b5o,v5o,F5o,Mp,Pme,T5o,M5o,rD,E5o,C5o,w5o,Ep,Bme,A5o,L5o,tD,y5o,x5o,$5o,Cp,Ime,k5o,S5o,aD,R5o,P5o,B5o,wp,Nme,I5o,N5o,nD,q5o,j5o,D5o,Ap,qme,G5o,O5o,sD,V5o,X5o,z5o,Lp,jme,W5o,Q5o,lD,H5o,U5o,J5o,yp,Dme,Y5o,K5o,iD,Z5o,e3o,o3o,xp,Gme,r3o,t3o,dD,a3o,n3o,s3o,Js,Ome,l3o,i3o,cD,d3o,c3o,mD,m3o,f3o,g3o,$p,Vme,h3o,u3o,fD,p3o,_3o,b3o,kp,Xme,v3o,F3o,gD,T3o,M3o,E3o,Sp,zme,C3o,w3o,hD,A3o,L3o,y3o,Rp,Wme,x3o,$3o,uD,k3o,S3o,R3o,Pp,Qme,P3o,B3o,pD,I3o,N3o,q3o,Bp,Hme,j3o,D3o,_D,G3o,O3o,V3o,Ip,Ume,X3o,z3o,bD,W3o,Q3o,H3o,Np,Jme,U3o,J3o,vD,Y3o,K3o,Z3o,qp,Yme,e0o,o0o,FD,r0o,t0o,a0o,jp,Kme,n0o,s0o,TD,l0o,i0o,d0o,Dp,Zme,c0o,m0o,MD,f0o,g0o,h0o,Gp,efe,u0o,p0o,ED,_0o,b0o,v0o,Op,ofe,F0o,T0o,CD,M0o,E0o,C0o,Vp,rfe,w0o,A0o,wD,L0o,y0o,x0o,Xp,tfe,$0o,k0o,AD,S0o,R0o,P0o,zp,afe,B0o,I0o,LD,N0o,q0o,j0o,Wp,nfe,D0o,G0o,yD,O0o,V0o,X0o,Qp,sfe,z0o,W0o,xD,Q0o,H0o,U0o,Hp,lfe,J0o,Y0o,$D,K0o,Z0o,ewo,Up,ife,owo,rwo,kD,two,awo,nwo,Jp,dfe,swo,lwo,SD,iwo,dwo,cwo,Yp,cfe,mwo,fwo,RD,gwo,hwo,uwo,Kp,mfe,pwo,_wo,PD,bwo,vwo,Fwo,Zp,ffe,Two,Mwo,BD,Ewo,Cwo,wwo,e_,gfe,Awo,Lwo,ID,ywo,xwo,$wo,o_,hfe,kwo,Swo,ND,Rwo,Pwo,Bwo,r_,ufe,Iwo,Nwo,qD,qwo,jwo,Dwo,t_,pfe,Gwo,Owo,jD,Vwo,Xwo,zwo,a_,_fe,Wwo,Qwo,DD,Hwo,Uwo,Jwo,n_,bfe,Ywo,Kwo,GD,Zwo,e6o,o6o,s_,vfe,r6o,t6o,OD,a6o,n6o,s6o,l_,Ffe,l6o,i6o,VD,d6o,c6o,m6o,i_,Tfe,f6o,g6o,XD,h6o,u6o,p6o,d_,Mfe,_6o,b6o,zD,v6o,F6o,T6o,c_,Efe,M6o,E6o,WD,C6o,w6o,A6o,m_,Cfe,L6o,y6o,QD,x6o,$6o,k6o,f_,wfe,S6o,R6o,HD,P6o,B6o,I6o,g_,Afe,N6o,q6o,UD,j6o,D6o,G6o,h_,Lfe,O6o,V6o,JD,X6o,z6o,W6o,u_,yfe,Q6o,H6o,YD,U6o,J6o,Y6o,p_,xfe,K6o,Z6o,KD,eAo,oAo,rAo,__,$fe,tAo,aAo,ZD,nAo,sAo,lAo,b_,kfe,iAo,dAo,eG,cAo,mAo,fAo,v_,Sfe,gAo,hAo,oG,uAo,pAo,_Ao,F_,Rfe,bAo,vAo,rG,FAo,TAo,MAo,T_,Pfe,EAo,CAo,tG,wAo,AAo,LAo,M_,Bfe,yAo,xAo,aG,$Ao,kAo,SAo,E_,Ife,RAo,PAo,nG,BAo,IAo,NAo,C_,Nfe,qAo,jAo,sG,DAo,GAo,OAo,w_,qfe,VAo,XAo,lG,zAo,WAo,QAo,A_,jfe,HAo,UAo,iG,JAo,YAo,KAo,L_,Dfe,ZAo,e7o,dG,o7o,r7o,t7o,y_,Gfe,a7o,n7o,cG,s7o,l7o,i7o,x_,Ofe,d7o,c7o,mG,m7o,f7o,g7o,$_,Vfe,h7o,u7o,fG,p7o,_7o,b7o,k_,Xfe,v7o,F7o,gG,T7o,M7o,E7o,S_,zfe,C7o,w7o,hG,A7o,L7o,y7o,R_,Wfe,x7o,$7o,uG,k7o,S7o,R7o,P_,Qfe,P7o,B7o,pG,I7o,N7o,q7o,B_,Hfe,j7o,D7o,_G,G7o,O7o,V7o,I_,Ufe,X7o,z7o,bG,W7o,Q7o,H7o,N_,Jfe,U7o,J7o,vG,Y7o,K7o,Z7o,q_,Yfe,eLo,oLo,FG,rLo,tLo,aLo,j_,Kfe,nLo,sLo,TG,lLo,iLo,dLo,D_,Zfe,cLo,mLo,MG,fLo,gLo,hLo,G_,ege,uLo,pLo,EG,_Lo,bLo,vLo,O_,oge,FLo,TLo,CG,MLo,ELo,CLo,V_,rge,wLo,ALo,wG,LLo,yLo,xLo,X_,tge,$Lo,kLo,AG,SLo,RLo,PLo,z_,age,BLo,ILo,LG,NLo,qLo,jLo,W_,nge,DLo,GLo,yG,OLo,VLo,XLo,Q_,sge,zLo,WLo,xG,QLo,HLo,ULo,H_,lge,JLo,YLo,$G,KLo,ZLo,eyo,U_,ige,oyo,ryo,kG,tyo,ayo,nyo,J_,dge,syo,lyo,SG,iyo,dyo,cyo,Y_,cge,myo,fyo,RG,gyo,hyo,uyo,K_,mge,pyo,_yo,PG,byo,vyo,Fyo,Z_,fge,Tyo,Myo,BG,Eyo,Cyo,wyo,e2,gge,Ayo,Lyo,IG,yyo,xyo,$yo,o2,kyo,hge,Syo,Ryo,uge,Pyo,Byo,r2,Xze,Qi,t2,pge,t8,Iyo,_ge,Nyo,zze,So,a8,qyo,Hi,jyo,NG,Dyo,Gyo,qG,Oyo,Vyo,Xyo,n8,zyo,bge,Wyo,Qyo,Hyo,dt,s8,Uyo,vge,Jyo,Yyo,Ui,Kyo,Fge,Zyo,e8o,jG,o8o,r8o,t8o,a2,a8o,Ke,l8,n8o,Tge,s8o,l8o,Na,i8o,Mge,d8o,c8o,Ege,m8o,f8o,Cge,g8o,h8o,u8o,G,n2,wge,p8o,_8o,DG,b8o,v8o,F8o,s2,Age,T8o,M8o,GG,E8o,C8o,w8o,l2,Lge,A8o,L8o,OG,y8o,x8o,$8o,i2,yge,k8o,S8o,VG,R8o,P8o,B8o,d2,xge,I8o,N8o,XG,q8o,j8o,D8o,c2,$ge,G8o,O8o,zG,V8o,X8o,z8o,m2,kge,W8o,Q8o,WG,H8o,U8o,J8o,f2,Sge,Y8o,K8o,QG,Z8o,e9o,o9o,g2,Rge,r9o,t9o,HG,a9o,n9o,s9o,h2,Pge,l9o,i9o,UG,d9o,c9o,m9o,u2,Bge,f9o,g9o,JG,h9o,u9o,p9o,p2,Ige,_9o,b9o,YG,v9o,F9o,T9o,_2,Nge,M9o,E9o,KG,C9o,w9o,A9o,b2,qge,L9o,y9o,ZG,x9o,$9o,k9o,v2,jge,S9o,R9o,eO,P9o,B9o,I9o,F2,Dge,N9o,q9o,oO,j9o,D9o,G9o,T2,Gge,O9o,V9o,rO,X9o,z9o,W9o,M2,Oge,Q9o,H9o,tO,U9o,J9o,Y9o,E2,Vge,K9o,Z9o,aO,exo,oxo,rxo,C2,Xge,txo,axo,nO,nxo,sxo,lxo,w2,zge,ixo,dxo,sO,cxo,mxo,fxo,A2,Wge,gxo,hxo,lO,uxo,pxo,_xo,L2,Qge,bxo,vxo,iO,Fxo,Txo,Mxo,y2,Hge,Exo,Cxo,dO,wxo,Axo,Lxo,x2,Uge,yxo,xxo,cO,$xo,kxo,Sxo,$2,Jge,Rxo,Pxo,mO,Bxo,Ixo,Nxo,k2,Yge,qxo,jxo,fO,Dxo,Gxo,Oxo,S2,Kge,Vxo,Xxo,gO,zxo,Wxo,Qxo,R2,Zge,Hxo,Uxo,hO,Jxo,Yxo,Kxo,P2,ehe,Zxo,e$o,uO,o$o,r$o,t$o,B2,ohe,a$o,n$o,pO,s$o,l$o,i$o,I2,rhe,d$o,c$o,_O,m$o,f$o,g$o,N2,the,h$o,u$o,bO,p$o,_$o,b$o,q2,ahe,v$o,F$o,vO,T$o,M$o,E$o,j2,nhe,C$o,w$o,FO,A$o,L$o,y$o,D2,she,x$o,$$o,TO,k$o,S$o,R$o,G2,lhe,P$o,B$o,MO,I$o,N$o,q$o,O2,ihe,j$o,D$o,EO,G$o,O$o,V$o,V2,dhe,X$o,z$o,CO,W$o,Q$o,H$o,X2,che,U$o,J$o,wO,Y$o,K$o,Z$o,z2,mhe,eko,oko,AO,rko,tko,ako,W2,fhe,nko,sko,LO,lko,iko,dko,Q2,ghe,cko,mko,yO,fko,gko,hko,H2,hhe,uko,pko,xO,_ko,bko,vko,U2,uhe,Fko,Tko,$O,Mko,Eko,Cko,J2,phe,wko,Ako,kO,Lko,yko,xko,Y2,$ko,_he,kko,Sko,bhe,Rko,Pko,K2,Wze,Ji,Z2,vhe,i8,Bko,Fhe,Iko,Qze,Ro,d8,Nko,Yi,qko,SO,jko,Dko,RO,Gko,Oko,Vko,c8,Xko,The,zko,Wko,Qko,ct,m8,Hko,Mhe,Uko,Jko,Ki,Yko,Ehe,Kko,Zko,PO,eSo,oSo,rSo,eb,tSo,Ze,f8,aSo,Che,nSo,sSo,qa,lSo,whe,iSo,dSo,Ahe,cSo,mSo,Lhe,fSo,gSo,hSo,z,ob,yhe,uSo,pSo,BO,_So,bSo,vSo,rb,xhe,FSo,TSo,IO,MSo,ESo,CSo,tb,$he,wSo,ASo,NO,LSo,ySo,xSo,ab,khe,$So,kSo,qO,SSo,RSo,PSo,nb,She,BSo,ISo,jO,NSo,qSo,jSo,sb,Rhe,DSo,GSo,DO,OSo,VSo,XSo,lb,Phe,zSo,WSo,GO,QSo,HSo,USo,ib,Bhe,JSo,YSo,OO,KSo,ZSo,eRo,db,Ihe,oRo,rRo,VO,tRo,aRo,nRo,cb,Nhe,sRo,lRo,XO,iRo,dRo,cRo,mb,qhe,mRo,fRo,zO,gRo,hRo,uRo,fb,jhe,pRo,_Ro,WO,bRo,vRo,FRo,gb,Dhe,TRo,MRo,QO,ERo,CRo,wRo,hb,Ghe,ARo,LRo,HO,yRo,xRo,$Ro,ub,Ohe,kRo,SRo,UO,RRo,PRo,BRo,pb,Vhe,IRo,NRo,JO,qRo,jRo,DRo,_b,Xhe,GRo,ORo,YO,VRo,XRo,zRo,bb,zhe,WRo,QRo,KO,HRo,URo,JRo,vb,Whe,YRo,KRo,ZO,ZRo,ePo,oPo,Fb,Qhe,rPo,tPo,eV,aPo,nPo,sPo,Tb,Hhe,lPo,iPo,oV,dPo,cPo,mPo,Mb,Uhe,fPo,gPo,rV,hPo,uPo,pPo,Eb,Jhe,_Po,bPo,tV,vPo,FPo,TPo,Cb,Yhe,MPo,EPo,aV,CPo,wPo,APo,wb,Khe,LPo,yPo,nV,xPo,$Po,kPo,Ab,Zhe,SPo,RPo,sV,PPo,BPo,IPo,Lb,eue,NPo,qPo,lV,jPo,DPo,GPo,yb,oue,OPo,VPo,iV,XPo,zPo,WPo,xb,rue,QPo,HPo,dV,UPo,JPo,YPo,$b,tue,KPo,ZPo,cV,eBo,oBo,rBo,kb,aue,tBo,aBo,mV,nBo,sBo,lBo,Sb,nue,iBo,dBo,fV,cBo,mBo,fBo,Rb,sue,gBo,hBo,gV,uBo,pBo,_Bo,Pb,lue,bBo,vBo,hV,FBo,TBo,MBo,Bb,iue,EBo,CBo,uV,wBo,ABo,LBo,Ib,due,yBo,xBo,pV,$Bo,kBo,SBo,Nb,cue,RBo,PBo,_V,BBo,IBo,NBo,qb,mue,qBo,jBo,bV,DBo,GBo,OBo,jb,fue,VBo,XBo,vV,zBo,WBo,QBo,Db,gue,HBo,UBo,FV,JBo,YBo,KBo,Gb,ZBo,hue,eIo,oIo,uue,rIo,tIo,Ob,Hze,Zi,Vb,pue,g8,aIo,_ue,nIo,Uze,Po,h8,sIo,ed,lIo,TV,iIo,dIo,MV,cIo,mIo,fIo,u8,gIo,bue,hIo,uIo,pIo,mt,p8,_Io,vue,bIo,vIo,od,FIo,Fue,TIo,MIo,EV,EIo,CIo,wIo,Xb,AIo,eo,_8,LIo,Tue,yIo,xIo,ja,$Io,Mue,kIo,SIo,Eue,RIo,PIo,Cue,BIo,IIo,NIo,Q,zb,wue,qIo,jIo,CV,DIo,GIo,OIo,Wb,Aue,VIo,XIo,wV,zIo,WIo,QIo,Qb,Lue,HIo,UIo,AV,JIo,YIo,KIo,Hb,yue,ZIo,eNo,LV,oNo,rNo,tNo,Ub,xue,aNo,nNo,yV,sNo,lNo,iNo,Jb,$ue,dNo,cNo,xV,mNo,fNo,gNo,Yb,kue,hNo,uNo,$V,pNo,_No,bNo,Kb,Sue,vNo,FNo,kV,TNo,MNo,ENo,Zb,Rue,CNo,wNo,SV,ANo,LNo,yNo,ev,Pue,xNo,$No,RV,kNo,SNo,RNo,ov,Bue,PNo,BNo,PV,INo,NNo,qNo,rv,Iue,jNo,DNo,BV,GNo,ONo,VNo,tv,Nue,XNo,zNo,IV,WNo,QNo,HNo,av,que,UNo,JNo,NV,YNo,KNo,ZNo,nv,jue,eqo,oqo,qV,rqo,tqo,aqo,sv,Due,nqo,sqo,jV,lqo,iqo,dqo,lv,Gue,cqo,mqo,DV,fqo,gqo,hqo,iv,Oue,uqo,pqo,GV,_qo,bqo,vqo,dv,Vue,Fqo,Tqo,OV,Mqo,Eqo,Cqo,cv,Xue,wqo,Aqo,VV,Lqo,yqo,xqo,mv,zue,$qo,kqo,XV,Sqo,Rqo,Pqo,fv,Wue,Bqo,Iqo,zV,Nqo,qqo,jqo,gv,Que,Dqo,Gqo,WV,Oqo,Vqo,Xqo,hv,Hue,zqo,Wqo,QV,Qqo,Hqo,Uqo,uv,Uue,Jqo,Yqo,HV,Kqo,Zqo,ejo,pv,Jue,ojo,rjo,UV,tjo,ajo,njo,_v,Yue,sjo,ljo,JV,ijo,djo,cjo,bv,Kue,mjo,fjo,YV,gjo,hjo,ujo,vv,Zue,pjo,_jo,KV,bjo,vjo,Fjo,Fv,epe,Tjo,Mjo,ZV,Ejo,Cjo,wjo,Tv,ope,Ajo,Ljo,eX,yjo,xjo,$jo,Mv,rpe,kjo,Sjo,oX,Rjo,Pjo,Bjo,Ev,tpe,Ijo,Njo,rX,qjo,jjo,Djo,Cv,ape,Gjo,Ojo,npe,Vjo,Xjo,zjo,wv,spe,Wjo,Qjo,tX,Hjo,Ujo,Jjo,Av,lpe,Yjo,Kjo,aX,Zjo,eDo,oDo,Lv,ipe,rDo,tDo,nX,aDo,nDo,sDo,yv,dpe,lDo,iDo,sX,dDo,cDo,mDo,xv,fDo,cpe,gDo,hDo,mpe,uDo,pDo,$v,Jze,rd,kv,fpe,b8,_Do,gpe,bDo,Yze,Bo,v8,vDo,td,FDo,lX,TDo,MDo,iX,EDo,CDo,wDo,F8,ADo,hpe,LDo,yDo,xDo,ft,T8,$Do,upe,kDo,SDo,ad,RDo,ppe,PDo,BDo,dX,IDo,NDo,qDo,Sv,jDo,oo,M8,DDo,_pe,GDo,ODo,Da,VDo,bpe,XDo,zDo,vpe,WDo,QDo,Fpe,HDo,UDo,JDo,fe,Rv,Tpe,YDo,KDo,cX,ZDo,eGo,oGo,Pv,Mpe,rGo,tGo,mX,aGo,nGo,sGo,Bv,Epe,lGo,iGo,fX,dGo,cGo,mGo,Iv,Cpe,fGo,gGo,gX,hGo,uGo,pGo,Nv,wpe,_Go,bGo,hX,vGo,FGo,TGo,qv,Ape,MGo,EGo,uX,CGo,wGo,AGo,jv,Lpe,LGo,yGo,pX,xGo,$Go,kGo,Dv,ype,SGo,RGo,_X,PGo,BGo,IGo,Gv,xpe,NGo,qGo,bX,jGo,DGo,GGo,Ov,$pe,OGo,VGo,vX,XGo,zGo,WGo,Vv,kpe,QGo,HGo,FX,UGo,JGo,YGo,Xv,Spe,KGo,ZGo,TX,eOo,oOo,rOo,zv,Rpe,tOo,aOo,MX,nOo,sOo,lOo,Wv,Ppe,iOo,dOo,EX,cOo,mOo,fOo,Qv,Bpe,gOo,hOo,CX,uOo,pOo,_Oo,Hv,Ipe,bOo,vOo,wX,FOo,TOo,MOo,Uv,Npe,EOo,COo,AX,wOo,AOo,LOo,Jv,qpe,yOo,xOo,LX,$Oo,kOo,SOo,Yv,jpe,ROo,POo,yX,BOo,IOo,NOo,Kv,qOo,Dpe,jOo,DOo,Gpe,GOo,OOo,Zv,Kze,nd,e1,Ope,E8,VOo,Vpe,XOo,Zze,Io,C8,zOo,sd,WOo,xX,QOo,HOo,$X,UOo,JOo,YOo,w8,KOo,Xpe,ZOo,eVo,oVo,gt,A8,rVo,zpe,tVo,aVo,ld,nVo,Wpe,sVo,lVo,kX,iVo,dVo,cVo,o1,mVo,ro,L8,fVo,Qpe,gVo,hVo,Ga,uVo,Hpe,pVo,_Vo,Upe,bVo,vVo,Jpe,FVo,TVo,MVo,P,r1,Ype,EVo,CVo,SX,wVo,AVo,LVo,t1,Kpe,yVo,xVo,RX,$Vo,kVo,SVo,a1,Zpe,RVo,PVo,PX,BVo,IVo,NVo,n1,e_e,qVo,jVo,BX,DVo,GVo,OVo,s1,o_e,VVo,XVo,IX,zVo,WVo,QVo,l1,r_e,HVo,UVo,NX,JVo,YVo,KVo,i1,t_e,ZVo,eXo,qX,oXo,rXo,tXo,d1,a_e,aXo,nXo,jX,sXo,lXo,iXo,c1,n_e,dXo,cXo,DX,mXo,fXo,gXo,m1,s_e,hXo,uXo,GX,pXo,_Xo,bXo,f1,l_e,vXo,FXo,OX,TXo,MXo,EXo,g1,i_e,CXo,wXo,VX,AXo,LXo,yXo,h1,d_e,xXo,$Xo,XX,kXo,SXo,RXo,u1,c_e,PXo,BXo,zX,IXo,NXo,qXo,p1,m_e,jXo,DXo,WX,GXo,OXo,VXo,_1,f_e,XXo,zXo,QX,WXo,QXo,HXo,b1,g_e,UXo,JXo,HX,YXo,KXo,ZXo,v1,h_e,ezo,ozo,UX,rzo,tzo,azo,F1,u_e,nzo,szo,JX,lzo,izo,dzo,T1,p_e,czo,mzo,YX,fzo,gzo,hzo,M1,__e,uzo,pzo,KX,_zo,bzo,vzo,E1,b_e,Fzo,Tzo,ZX,Mzo,Ezo,Czo,C1,v_e,wzo,Azo,ez,Lzo,yzo,xzo,w1,F_e,$zo,kzo,oz,Szo,Rzo,Pzo,A1,T_e,Bzo,Izo,rz,Nzo,qzo,jzo,L1,M_e,Dzo,Gzo,tz,Ozo,Vzo,Xzo,y1,E_e,zzo,Wzo,az,Qzo,Hzo,Uzo,x1,C_e,Jzo,Yzo,nz,Kzo,Zzo,eWo,$1,w_e,oWo,rWo,sz,tWo,aWo,nWo,k1,A_e,sWo,lWo,lz,iWo,dWo,cWo,S1,L_e,mWo,fWo,iz,gWo,hWo,uWo,R1,y_e,pWo,_Wo,dz,bWo,vWo,FWo,P1,x_e,TWo,MWo,cz,EWo,CWo,wWo,B1,$_e,AWo,LWo,mz,yWo,xWo,$Wo,I1,k_e,kWo,SWo,fz,RWo,PWo,BWo,N1,S_e,IWo,NWo,gz,qWo,jWo,DWo,q1,R_e,GWo,OWo,hz,VWo,XWo,zWo,j1,P_e,WWo,QWo,uz,HWo,UWo,JWo,D1,B_e,YWo,KWo,pz,ZWo,eQo,oQo,G1,I_e,rQo,tQo,_z,aQo,nQo,sQo,O1,N_e,lQo,iQo,bz,dQo,cQo,mQo,V1,q_e,fQo,gQo,vz,hQo,uQo,pQo,X1,j_e,_Qo,bQo,Fz,vQo,FQo,TQo,z1,D_e,MQo,EQo,Tz,CQo,wQo,AQo,W1,G_e,LQo,yQo,Mz,xQo,$Qo,kQo,Q1,O_e,SQo,RQo,Ez,PQo,BQo,IQo,H1,V_e,NQo,qQo,Cz,jQo,DQo,GQo,U1,X_e,OQo,VQo,wz,XQo,zQo,WQo,J1,z_e,QQo,HQo,Az,UQo,JQo,YQo,Y1,W_e,KQo,ZQo,Lz,eHo,oHo,rHo,K1,Q_e,tHo,aHo,yz,nHo,sHo,lHo,Z1,H_e,iHo,dHo,xz,cHo,mHo,fHo,eF,gHo,U_e,hHo,uHo,J_e,pHo,_Ho,oF,eWe,id,rF,Y_e,y8,bHo,K_e,vHo,oWe,No,x8,FHo,dd,THo,$z,MHo,EHo,kz,CHo,wHo,AHo,$8,LHo,Z_e,yHo,xHo,$Ho,ht,k8,kHo,e2e,SHo,RHo,cd,PHo,o2e,BHo,IHo,Sz,NHo,qHo,jHo,tF,DHo,to,S8,GHo,r2e,OHo,VHo,Oa,XHo,t2e,zHo,WHo,a2e,QHo,HHo,n2e,UHo,JHo,YHo,Z,aF,s2e,KHo,ZHo,Rz,eUo,oUo,rUo,nF,l2e,tUo,aUo,Pz,nUo,sUo,lUo,sF,i2e,iUo,dUo,Bz,cUo,mUo,fUo,lF,d2e,gUo,hUo,Iz,uUo,pUo,_Uo,iF,c2e,bUo,vUo,Nz,FUo,TUo,MUo,dF,m2e,EUo,CUo,qz,wUo,AUo,LUo,cF,f2e,yUo,xUo,jz,$Uo,kUo,SUo,mF,g2e,RUo,PUo,Dz,BUo,IUo,NUo,fF,h2e,qUo,jUo,Gz,DUo,GUo,OUo,gF,u2e,VUo,XUo,Oz,zUo,WUo,QUo,hF,p2e,HUo,UUo,Vz,JUo,YUo,KUo,uF,_2e,ZUo,eJo,Xz,oJo,rJo,tJo,pF,b2e,aJo,nJo,zz,sJo,lJo,iJo,_F,v2e,dJo,cJo,Wz,mJo,fJo,gJo,bF,F2e,hJo,uJo,Qz,pJo,_Jo,bJo,vF,T2e,vJo,FJo,Hz,TJo,MJo,EJo,FF,M2e,CJo,wJo,Uz,AJo,LJo,yJo,TF,E2e,xJo,$Jo,Jz,kJo,SJo,RJo,MF,C2e,PJo,BJo,Yz,IJo,NJo,qJo,EF,w2e,jJo,DJo,Kz,GJo,OJo,VJo,CF,A2e,XJo,zJo,Zz,WJo,QJo,HJo,wF,L2e,UJo,JJo,eW,YJo,KJo,ZJo,AF,y2e,eYo,oYo,oW,rYo,tYo,aYo,LF,x2e,nYo,sYo,rW,lYo,iYo,dYo,yF,$2e,cYo,mYo,tW,fYo,gYo,hYo,xF,k2e,uYo,pYo,aW,_Yo,bYo,vYo,$F,S2e,FYo,TYo,nW,MYo,EYo,CYo,kF,R2e,wYo,AYo,sW,LYo,yYo,xYo,SF,P2e,$Yo,kYo,lW,SYo,RYo,PYo,RF,B2e,BYo,IYo,iW,NYo,qYo,jYo,PF,I2e,DYo,GYo,dW,OYo,VYo,XYo,BF,zYo,N2e,WYo,QYo,q2e,HYo,UYo,IF,rWe,md,NF,j2e,R8,JYo,D2e,YYo,tWe,qo,P8,KYo,fd,ZYo,cW,eKo,oKo,mW,rKo,tKo,aKo,B8,nKo,G2e,sKo,lKo,iKo,ut,I8,dKo,O2e,cKo,mKo,gd,fKo,V2e,gKo,hKo,fW,uKo,pKo,_Ko,qF,bKo,ao,N8,vKo,X2e,FKo,TKo,Va,MKo,z2e,EKo,CKo,W2e,wKo,AKo,Q2e,LKo,yKo,xKo,jo,jF,H2e,$Ko,kKo,gW,SKo,RKo,PKo,DF,U2e,BKo,IKo,hW,NKo,qKo,jKo,GF,J2e,DKo,GKo,uW,OKo,VKo,XKo,OF,Y2e,zKo,WKo,pW,QKo,HKo,UKo,VF,K2e,JKo,YKo,_W,KKo,ZKo,eZo,XF,Z2e,oZo,rZo,bW,tZo,aZo,nZo,zF,sZo,ebe,lZo,iZo,obe,dZo,cZo,WF,aWe,hd,QF,rbe,q8,mZo,tbe,fZo,nWe,Do,j8,gZo,ud,hZo,vW,uZo,pZo,FW,_Zo,bZo,vZo,D8,FZo,abe,TZo,MZo,EZo,pt,G8,CZo,nbe,wZo,AZo,pd,LZo,sbe,yZo,xZo,TW,$Zo,kZo,SZo,HF,RZo,no,O8,PZo,lbe,BZo,IZo,Xa,NZo,ibe,qZo,jZo,dbe,DZo,GZo,cbe,OZo,VZo,XZo,H,UF,mbe,zZo,WZo,MW,QZo,HZo,UZo,JF,fbe,JZo,YZo,EW,KZo,ZZo,eer,YF,gbe,oer,rer,CW,ter,aer,ner,KF,hbe,ser,ler,wW,ier,der,cer,ZF,ube,mer,fer,AW,ger,her,uer,eT,pbe,per,_er,LW,ber,ver,Fer,oT,_be,Ter,Mer,yW,Eer,Cer,wer,rT,bbe,Aer,Ler,xW,yer,xer,$er,tT,vbe,ker,Ser,$W,Rer,Per,Ber,aT,Fbe,Ier,Ner,kW,qer,jer,Der,nT,Tbe,Ger,Oer,SW,Ver,Xer,zer,sT,Mbe,Wer,Qer,RW,Her,Uer,Jer,lT,Ebe,Yer,Ker,PW,Zer,eor,oor,iT,Cbe,ror,tor,BW,aor,nor,sor,dT,wbe,lor,ior,IW,dor,cor,mor,cT,Abe,gor,hor,NW,uor,por,_or,mT,Lbe,bor,vor,qW,For,Tor,Mor,fT,ybe,Eor,Cor,jW,wor,Aor,Lor,gT,xbe,yor,xor,DW,$or,kor,Sor,hT,$be,Ror,Por,GW,Bor,Ior,Nor,uT,kbe,qor,jor,OW,Dor,Gor,Oor,pT,Sbe,Vor,Xor,VW,zor,Wor,Qor,_T,Rbe,Hor,Uor,XW,Jor,Yor,Kor,bT,Pbe,Zor,err,zW,orr,rrr,trr,vT,Bbe,arr,nrr,WW,srr,lrr,irr,FT,Ibe,drr,crr,QW,mrr,frr,grr,TT,Nbe,hrr,urr,HW,prr,_rr,brr,MT,qbe,vrr,Frr,UW,Trr,Mrr,Err,ET,jbe,Crr,wrr,JW,Arr,Lrr,yrr,CT,Dbe,xrr,$rr,YW,krr,Srr,Rrr,wT,Gbe,Prr,Brr,KW,Irr,Nrr,qrr,AT,Obe,jrr,Drr,ZW,Grr,Orr,Vrr,LT,Vbe,Xrr,zrr,eQ,Wrr,Qrr,Hrr,yT,Xbe,Urr,Jrr,oQ,Yrr,Krr,Zrr,xT,zbe,etr,otr,rQ,rtr,ttr,atr,$T,Wbe,ntr,str,tQ,ltr,itr,dtr,kT,Qbe,ctr,mtr,aQ,ftr,gtr,htr,ST,utr,Hbe,ptr,_tr,Ube,btr,vtr,RT,sWe,_d,PT,Jbe,V8,Ftr,Ybe,Ttr,lWe,Go,X8,Mtr,bd,Etr,nQ,Ctr,wtr,sQ,Atr,Ltr,ytr,z8,xtr,Kbe,$tr,ktr,Str,_t,W8,Rtr,Zbe,Ptr,Btr,vd,Itr,eve,Ntr,qtr,lQ,jtr,Dtr,Gtr,BT,Otr,so,Q8,Vtr,ove,Xtr,ztr,za,Wtr,rve,Qtr,Htr,tve,Utr,Jtr,ave,Ytr,Ktr,Ztr,V,IT,nve,ear,oar,iQ,rar,tar,aar,NT,sve,nar,sar,dQ,lar,iar,dar,qT,lve,car,mar,cQ,far,gar,har,jT,ive,uar,par,mQ,_ar,bar,Far,DT,dve,Tar,Mar,fQ,Ear,Car,war,GT,cve,Aar,Lar,gQ,yar,xar,$ar,OT,mve,kar,Sar,hQ,Rar,Par,Bar,VT,fve,Iar,Nar,uQ,qar,jar,Dar,XT,gve,Gar,Oar,pQ,Var,Xar,zar,zT,hve,War,Qar,_Q,Har,Uar,Jar,WT,uve,Yar,Kar,bQ,Zar,enr,onr,QT,pve,rnr,tnr,vQ,anr,nnr,snr,HT,_ve,lnr,inr,FQ,dnr,cnr,mnr,UT,bve,fnr,gnr,TQ,hnr,unr,pnr,JT,vve,_nr,bnr,MQ,vnr,Fnr,Tnr,YT,Fve,Mnr,Enr,EQ,Cnr,wnr,Anr,KT,Tve,Lnr,ynr,CQ,xnr,$nr,knr,ZT,Mve,Snr,Rnr,wQ,Pnr,Bnr,Inr,eM,Eve,Nnr,qnr,AQ,jnr,Dnr,Gnr,oM,Cve,Onr,Vnr,LQ,Xnr,znr,Wnr,rM,wve,Qnr,Hnr,yQ,Unr,Jnr,Ynr,tM,Ave,Knr,Znr,xQ,esr,osr,rsr,aM,Lve,tsr,asr,$Q,nsr,ssr,lsr,nM,yve,isr,dsr,kQ,csr,msr,fsr,sM,xve,gsr,hsr,SQ,usr,psr,_sr,lM,$ve,bsr,vsr,RQ,Fsr,Tsr,Msr,iM,kve,Esr,Csr,PQ,wsr,Asr,Lsr,dM,Sve,ysr,xsr,BQ,$sr,ksr,Ssr,cM,Rve,Rsr,Psr,IQ,Bsr,Isr,Nsr,mM,Pve,qsr,jsr,NQ,Dsr,Gsr,Osr,fM,Bve,Vsr,Xsr,qQ,zsr,Wsr,Qsr,gM,Ive,Hsr,Usr,jQ,Jsr,Ysr,Ksr,hM,Nve,Zsr,elr,DQ,olr,rlr,tlr,uM,qve,alr,nlr,GQ,slr,llr,ilr,pM,jve,dlr,clr,OQ,mlr,flr,glr,_M,Dve,hlr,ulr,VQ,plr,_lr,blr,bM,Gve,vlr,Flr,XQ,Tlr,Mlr,Elr,vM,Ove,Clr,wlr,zQ,Alr,Llr,ylr,FM,Vve,xlr,$lr,WQ,klr,Slr,Rlr,TM,Xve,Plr,Blr,QQ,Ilr,Nlr,qlr,MM,zve,jlr,Dlr,HQ,Glr,Olr,Vlr,EM,Wve,Xlr,zlr,UQ,Wlr,Qlr,Hlr,CM,Qve,Ulr,Jlr,JQ,Ylr,Klr,Zlr,wM,eir,Hve,oir,rir,Uve,tir,air,AM,iWe,Fd,LM,Jve,H8,nir,Yve,sir,dWe,Oo,U8,lir,Td,iir,YQ,dir,cir,KQ,mir,fir,gir,J8,hir,Kve,uir,pir,_ir,bt,Y8,bir,Zve,vir,Fir,Md,Tir,e1e,Mir,Eir,ZQ,Cir,wir,Air,yM,Lir,lo,K8,yir,o1e,xir,$ir,Wa,kir,r1e,Sir,Rir,t1e,Pir,Bir,a1e,Iir,Nir,qir,n1e,xM,s1e,jir,Dir,eH,Gir,Oir,Vir,$M,Xir,l1e,zir,Wir,i1e,Qir,Hir,kM,cWe,Ed,SM,d1e,Z8,Uir,c1e,Jir,mWe,Vo,e9,Yir,Cd,Kir,oH,Zir,edr,rH,odr,rdr,tdr,o9,adr,m1e,ndr,sdr,ldr,vt,r9,idr,f1e,ddr,cdr,wd,mdr,g1e,fdr,gdr,tH,hdr,udr,pdr,RM,_dr,io,t9,bdr,h1e,vdr,Fdr,Qa,Tdr,u1e,Mdr,Edr,p1e,Cdr,wdr,_1e,Adr,Ldr,ydr,be,PM,b1e,xdr,$dr,aH,kdr,Sdr,Rdr,BM,v1e,Pdr,Bdr,nH,Idr,Ndr,qdr,IM,F1e,jdr,Ddr,sH,Gdr,Odr,Vdr,NM,T1e,Xdr,zdr,lH,Wdr,Qdr,Hdr,Ys,M1e,Udr,Jdr,iH,Ydr,Kdr,dH,Zdr,ecr,ocr,qM,E1e,rcr,tcr,cH,acr,ncr,scr,Ks,C1e,lcr,icr,mH,dcr,ccr,fH,mcr,fcr,gcr,jM,w1e,hcr,ucr,gH,pcr,_cr,bcr,Ft,A1e,vcr,Fcr,hH,Tcr,Mcr,uH,Ecr,Ccr,pH,wcr,Acr,Lcr,DM,L1e,ycr,xcr,_H,$cr,kcr,Scr,GM,y1e,Rcr,Pcr,bH,Bcr,Icr,Ncr,OM,x1e,qcr,jcr,vH,Dcr,Gcr,Ocr,VM,$1e,Vcr,Xcr,FH,zcr,Wcr,Qcr,XM,k1e,Hcr,Ucr,TH,Jcr,Ycr,Kcr,zM,S1e,Zcr,emr,MH,omr,rmr,tmr,WM,R1e,amr,nmr,EH,smr,lmr,imr,QM,P1e,dmr,cmr,CH,mmr,fmr,gmr,HM,hmr,B1e,umr,pmr,I1e,_mr,bmr,UM,fWe,Ad,JM,N1e,a9,vmr,q1e,Fmr,gWe,Xo,n9,Tmr,Ld,Mmr,wH,Emr,Cmr,AH,wmr,Amr,Lmr,s9,ymr,j1e,xmr,$mr,kmr,Tt,l9,Smr,D1e,Rmr,Pmr,yd,Bmr,G1e,Imr,Nmr,LH,qmr,jmr,Dmr,YM,Gmr,co,i9,Omr,O1e,Vmr,Xmr,Ha,zmr,V1e,Wmr,Qmr,X1e,Hmr,Umr,z1e,Jmr,Ymr,Kmr,W1e,KM,Q1e,Zmr,efr,yH,ofr,rfr,tfr,ZM,afr,H1e,nfr,sfr,U1e,lfr,ifr,e4,hWe,xd,o4,J1e,d9,dfr,Y1e,cfr,uWe,zo,c9,mfr,$d,ffr,xH,gfr,hfr,$H,ufr,pfr,_fr,m9,bfr,K1e,vfr,Ffr,Tfr,Mt,f9,Mfr,Z1e,Efr,Cfr,kd,wfr,eFe,Afr,Lfr,kH,yfr,xfr,$fr,r4,kfr,mo,g9,Sfr,oFe,Rfr,Pfr,Ua,Bfr,rFe,Ifr,Nfr,tFe,qfr,jfr,aFe,Dfr,Gfr,Ofr,nFe,t4,sFe,Vfr,Xfr,SH,zfr,Wfr,Qfr,a4,Hfr,lFe,Ufr,Jfr,iFe,Yfr,Kfr,n4,pWe,Sd,s4,dFe,h9,Zfr,cFe,egr,_We,Wo,u9,ogr,Rd,rgr,RH,tgr,agr,PH,ngr,sgr,lgr,p9,igr,mFe,dgr,cgr,mgr,Et,_9,fgr,fFe,ggr,hgr,Pd,ugr,gFe,pgr,_gr,BH,bgr,vgr,Fgr,l4,Tgr,fo,b9,Mgr,hFe,Egr,Cgr,Ja,wgr,uFe,Agr,Lgr,pFe,ygr,xgr,_Fe,$gr,kgr,Sgr,Pe,i4,bFe,Rgr,Pgr,IH,Bgr,Igr,Ngr,d4,vFe,qgr,jgr,NH,Dgr,Ggr,Ogr,c4,FFe,Vgr,Xgr,qH,zgr,Wgr,Qgr,m4,TFe,Hgr,Ugr,jH,Jgr,Ygr,Kgr,f4,MFe,Zgr,ehr,DH,ohr,rhr,thr,g4,EFe,ahr,nhr,GH,shr,lhr,ihr,h4,CFe,dhr,chr,OH,mhr,fhr,ghr,u4,wFe,hhr,uhr,VH,phr,_hr,bhr,p4,AFe,vhr,Fhr,XH,Thr,Mhr,Ehr,_4,Chr,LFe,whr,Ahr,yFe,Lhr,yhr,b4,bWe,Bd,v4,xFe,v9,xhr,$Fe,$hr,vWe,Qo,F9,khr,Id,Shr,zH,Rhr,Phr,WH,Bhr,Ihr,Nhr,T9,qhr,kFe,jhr,Dhr,Ghr,Ct,M9,Ohr,SFe,Vhr,Xhr,Nd,zhr,RFe,Whr,Qhr,QH,Hhr,Uhr,Jhr,F4,Yhr,go,E9,Khr,PFe,Zhr,eur,Ya,our,BFe,rur,tur,IFe,aur,nur,NFe,sur,lur,iur,rt,T4,qFe,dur,cur,HH,mur,fur,gur,M4,jFe,hur,uur,UH,pur,_ur,bur,E4,DFe,vur,Fur,JH,Tur,Mur,Eur,C4,GFe,Cur,wur,YH,Aur,Lur,yur,w4,OFe,xur,$ur,KH,kur,Sur,Rur,A4,Pur,VFe,Bur,Iur,XFe,Nur,qur,L4,FWe,qd,y4,zFe,C9,jur,WFe,Dur,TWe,Ho,w9,Gur,jd,Our,ZH,Vur,Xur,eU,zur,Wur,Qur,A9,Hur,QFe,Uur,Jur,Yur,wt,L9,Kur,HFe,Zur,epr,Dd,opr,UFe,rpr,tpr,oU,apr,npr,spr,x4,lpr,ho,y9,ipr,JFe,dpr,cpr,Ka,mpr,YFe,fpr,gpr,KFe,hpr,upr,ZFe,ppr,_pr,bpr,Le,$4,eTe,vpr,Fpr,rU,Tpr,Mpr,Epr,k4,oTe,Cpr,wpr,tU,Apr,Lpr,ypr,S4,rTe,xpr,$pr,aU,kpr,Spr,Rpr,R4,tTe,Ppr,Bpr,nU,Ipr,Npr,qpr,P4,aTe,jpr,Dpr,sU,Gpr,Opr,Vpr,B4,nTe,Xpr,zpr,lU,Wpr,Qpr,Hpr,I4,sTe,Upr,Jpr,iU,Ypr,Kpr,Zpr,N4,lTe,e_r,o_r,dU,r_r,t_r,a_r,q4,iTe,n_r,s_r,cU,l_r,i_r,d_r,j4,dTe,c_r,m_r,mU,f_r,g_r,h_r,D4,u_r,cTe,p_r,__r,mTe,b_r,v_r,G4,MWe,Gd,O4,fTe,x9,F_r,gTe,T_r,EWe,Uo,$9,M_r,Od,E_r,fU,C_r,w_r,gU,A_r,L_r,y_r,k9,x_r,hTe,$_r,k_r,S_r,At,S9,R_r,uTe,P_r,B_r,Vd,I_r,pTe,N_r,q_r,hU,j_r,D_r,G_r,V4,O_r,uo,R9,V_r,_Te,X_r,z_r,Za,W_r,bTe,Q_r,H_r,vTe,U_r,J_r,FTe,Y_r,K_r,Z_r,P9,X4,TTe,e2r,o2r,uU,r2r,t2r,a2r,z4,MTe,n2r,s2r,pU,l2r,i2r,d2r,W4,c2r,ETe,m2r,f2r,CTe,g2r,h2r,Q4,CWe,Xd,H4,wTe,B9,u2r,ATe,p2r,wWe,Jo,I9,_2r,zd,b2r,_U,v2r,F2r,bU,T2r,M2r,E2r,N9,C2r,LTe,w2r,A2r,L2r,Lt,q9,y2r,yTe,x2r,$2r,Wd,k2r,xTe,S2r,R2r,vU,P2r,B2r,I2r,U4,N2r,po,j9,q2r,$Te,j2r,D2r,en,G2r,kTe,O2r,V2r,STe,X2r,z2r,RTe,W2r,Q2r,H2r,tt,J4,PTe,U2r,J2r,FU,Y2r,K2r,Z2r,Y4,BTe,ebr,obr,TU,rbr,tbr,abr,K4,ITe,nbr,sbr,MU,lbr,ibr,dbr,Z4,NTe,cbr,mbr,EU,fbr,gbr,hbr,eE,qTe,ubr,pbr,CU,_br,bbr,vbr,oE,Fbr,jTe,Tbr,Mbr,DTe,Ebr,Cbr,rE,AWe,Qd,tE,GTe,D9,wbr,OTe,Abr,LWe,Yo,G9,Lbr,Hd,ybr,wU,xbr,$br,AU,kbr,Sbr,Rbr,O9,Pbr,VTe,Bbr,Ibr,Nbr,yt,V9,qbr,XTe,jbr,Dbr,Ud,Gbr,zTe,Obr,Vbr,LU,Xbr,zbr,Wbr,aE,Qbr,_o,X9,Hbr,WTe,Ubr,Jbr,on,Ybr,QTe,Kbr,Zbr,HTe,evr,ovr,UTe,rvr,tvr,avr,rn,nE,JTe,nvr,svr,yU,lvr,ivr,dvr,sE,YTe,cvr,mvr,xU,fvr,gvr,hvr,lE,KTe,uvr,pvr,$U,_vr,bvr,vvr,iE,ZTe,Fvr,Tvr,kU,Mvr,Evr,Cvr,dE,wvr,eMe,Avr,Lvr,oMe,yvr,xvr,cE,yWe,Jd,mE,rMe,z9,$vr,tMe,kvr,xWe,Ko,W9,Svr,Yd,Rvr,SU,Pvr,Bvr,RU,Ivr,Nvr,qvr,Q9,jvr,aMe,Dvr,Gvr,Ovr,xt,H9,Vvr,nMe,Xvr,zvr,Kd,Wvr,sMe,Qvr,Hvr,PU,Uvr,Jvr,Yvr,fE,Kvr,bo,U9,Zvr,lMe,e1r,o1r,tn,r1r,iMe,t1r,a1r,dMe,n1r,s1r,cMe,l1r,i1r,d1r,J9,gE,mMe,c1r,m1r,BU,f1r,g1r,h1r,hE,fMe,u1r,p1r,IU,_1r,b1r,v1r,uE,F1r,gMe,T1r,M1r,hMe,E1r,C1r,pE,$We,Zd,_E,uMe,Y9,w1r,pMe,A1r,kWe,Zo,K9,L1r,ec,y1r,NU,x1r,$1r,qU,k1r,S1r,R1r,Z9,P1r,_Me,B1r,I1r,N1r,$t,ex,q1r,bMe,j1r,D1r,oc,G1r,vMe,O1r,V1r,jU,X1r,z1r,W1r,bE,Q1r,vo,ox,H1r,FMe,U1r,J1r,an,Y1r,TMe,K1r,Z1r,MMe,eFr,oFr,EMe,rFr,tFr,aFr,CMe,vE,wMe,nFr,sFr,DU,lFr,iFr,dFr,FE,cFr,AMe,mFr,fFr,LMe,gFr,hFr,TE,SWe,rc,ME,yMe,rx,uFr,xMe,pFr,RWe,er,tx,_Fr,tc,bFr,GU,vFr,FFr,OU,TFr,MFr,EFr,ax,CFr,$Me,wFr,AFr,LFr,kt,nx,yFr,kMe,xFr,$Fr,ac,kFr,SMe,SFr,RFr,VU,PFr,BFr,IFr,EE,NFr,Fo,sx,qFr,RMe,jFr,DFr,nn,GFr,PMe,OFr,VFr,BMe,XFr,zFr,IMe,WFr,QFr,HFr,at,CE,NMe,UFr,JFr,XU,YFr,KFr,ZFr,wE,qMe,eTr,oTr,zU,rTr,tTr,aTr,AE,jMe,nTr,sTr,WU,lTr,iTr,dTr,LE,DMe,cTr,mTr,QU,fTr,gTr,hTr,yE,GMe,uTr,pTr,HU,_Tr,bTr,vTr,xE,FTr,OMe,TTr,MTr,VMe,ETr,CTr,$E,PWe,nc,kE,XMe,lx,wTr,zMe,ATr,BWe,or,ix,LTr,sc,yTr,UU,xTr,$Tr,JU,kTr,STr,RTr,dx,PTr,WMe,BTr,ITr,NTr,St,cx,qTr,QMe,jTr,DTr,lc,GTr,HMe,OTr,VTr,YU,XTr,zTr,WTr,SE,QTr,To,mx,HTr,UMe,UTr,JTr,sn,YTr,JMe,KTr,ZTr,YMe,eMr,oMr,KMe,rMr,tMr,aMr,ZMe,RE,e4e,nMr,sMr,KU,lMr,iMr,dMr,PE,cMr,o4e,mMr,fMr,r4e,gMr,hMr,BE,IWe,ic,IE,t4e,fx,uMr,a4e,pMr,NWe,rr,gx,_Mr,dc,bMr,ZU,vMr,FMr,eJ,TMr,MMr,EMr,hx,CMr,n4e,wMr,AMr,LMr,Rt,ux,yMr,s4e,xMr,$Mr,cc,kMr,l4e,SMr,RMr,oJ,PMr,BMr,IMr,NE,NMr,$r,px,qMr,i4e,jMr,DMr,ln,GMr,d4e,OMr,VMr,c4e,XMr,zMr,m4e,WMr,QMr,HMr,I,qE,f4e,UMr,JMr,rJ,YMr,KMr,ZMr,jE,g4e,e4r,o4r,tJ,r4r,t4r,a4r,DE,h4e,n4r,s4r,aJ,l4r,i4r,d4r,GE,u4e,c4r,m4r,nJ,f4r,g4r,h4r,OE,p4e,u4r,p4r,sJ,_4r,b4r,v4r,VE,_4e,F4r,T4r,lJ,M4r,E4r,C4r,XE,b4e,w4r,A4r,iJ,L4r,y4r,x4r,zE,v4e,$4r,k4r,dJ,S4r,R4r,P4r,WE,F4e,B4r,I4r,cJ,N4r,q4r,j4r,QE,T4e,D4r,G4r,mJ,O4r,V4r,X4r,HE,M4e,z4r,W4r,fJ,Q4r,H4r,U4r,UE,E4e,J4r,Y4r,gJ,K4r,Z4r,eEr,JE,C4e,oEr,rEr,hJ,tEr,aEr,nEr,YE,w4e,sEr,lEr,uJ,iEr,dEr,cEr,KE,A4e,mEr,fEr,pJ,gEr,hEr,uEr,ZE,L4e,pEr,_Er,_J,bEr,vEr,FEr,eC,y4e,TEr,MEr,bJ,EEr,CEr,wEr,oC,x4e,AEr,LEr,vJ,yEr,xEr,$Er,Zs,$4e,kEr,SEr,FJ,REr,PEr,TJ,BEr,IEr,NEr,rC,k4e,qEr,jEr,MJ,DEr,GEr,OEr,tC,S4e,VEr,XEr,EJ,zEr,WEr,QEr,aC,R4e,HEr,UEr,CJ,JEr,YEr,KEr,nC,P4e,ZEr,eCr,wJ,oCr,rCr,tCr,sC,B4e,aCr,nCr,AJ,sCr,lCr,iCr,lC,I4e,dCr,cCr,LJ,mCr,fCr,gCr,iC,N4e,hCr,uCr,yJ,pCr,_Cr,bCr,dC,q4e,vCr,FCr,xJ,TCr,MCr,ECr,cC,j4e,CCr,wCr,$J,ACr,LCr,yCr,mC,D4e,xCr,$Cr,kJ,kCr,SCr,RCr,fC,G4e,PCr,BCr,SJ,ICr,NCr,qCr,gC,O4e,jCr,DCr,RJ,GCr,OCr,VCr,hC,V4e,XCr,zCr,PJ,WCr,QCr,HCr,uC,X4e,UCr,JCr,BJ,YCr,KCr,ZCr,pC,z4e,e5r,o5r,IJ,r5r,t5r,a5r,_C,W4e,n5r,s5r,NJ,l5r,i5r,d5r,bC,Q4e,c5r,m5r,qJ,f5r,g5r,h5r,vC,H4e,u5r,p5r,jJ,_5r,b5r,v5r,FC,U4e,F5r,T5r,DJ,M5r,E5r,C5r,TC,J4e,w5r,A5r,GJ,L5r,y5r,x5r,MC,Y4e,$5r,k5r,OJ,S5r,R5r,P5r,EC,K4e,B5r,I5r,VJ,N5r,q5r,j5r,CC,Z4e,D5r,G5r,XJ,O5r,V5r,X5r,wC,eEe,z5r,W5r,zJ,Q5r,H5r,U5r,AC,oEe,J5r,Y5r,WJ,K5r,Z5r,e3r,LC,rEe,o3r,r3r,QJ,t3r,a3r,n3r,yC,tEe,s3r,l3r,HJ,i3r,d3r,c3r,xC,aEe,m3r,f3r,UJ,g3r,h3r,u3r,$C,nEe,p3r,_3r,JJ,b3r,v3r,F3r,kC,sEe,T3r,M3r,YJ,E3r,C3r,w3r,SC,lEe,A3r,L3r,KJ,y3r,x3r,$3r,RC,iEe,k3r,S3r,ZJ,R3r,P3r,B3r,PC,qWe,mc,BC,dEe,_x,I3r,cEe,N3r,jWe,tr,bx,q3r,fc,j3r,eY,D3r,G3r,oY,O3r,V3r,X3r,vx,z3r,mEe,W3r,Q3r,H3r,Pt,Fx,U3r,fEe,J3r,Y3r,gc,K3r,gEe,Z3r,e0r,rY,o0r,r0r,t0r,IC,a0r,kr,Tx,n0r,hEe,s0r,l0r,dn,i0r,uEe,d0r,c0r,pEe,m0r,f0r,_Ee,g0r,h0r,u0r,se,NC,bEe,p0r,_0r,tY,b0r,v0r,F0r,qC,vEe,T0r,M0r,aY,E0r,C0r,w0r,jC,FEe,A0r,L0r,nY,y0r,x0r,$0r,DC,TEe,k0r,S0r,sY,R0r,P0r,B0r,GC,MEe,I0r,N0r,lY,q0r,j0r,D0r,OC,EEe,G0r,O0r,iY,V0r,X0r,z0r,VC,CEe,W0r,Q0r,dY,H0r,U0r,J0r,XC,wEe,Y0r,K0r,cY,Z0r,ewr,owr,zC,AEe,rwr,twr,mY,awr,nwr,swr,WC,LEe,lwr,iwr,fY,dwr,cwr,mwr,QC,yEe,fwr,gwr,gY,hwr,uwr,pwr,HC,xEe,_wr,bwr,hY,vwr,Fwr,Twr,UC,$Ee,Mwr,Ewr,uY,Cwr,wwr,Awr,JC,kEe,Lwr,ywr,pY,xwr,$wr,kwr,YC,SEe,Swr,Rwr,_Y,Pwr,Bwr,Iwr,KC,REe,Nwr,qwr,bY,jwr,Dwr,Gwr,ZC,PEe,Owr,Vwr,vY,Xwr,zwr,Wwr,e5,BEe,Qwr,Hwr,FY,Uwr,Jwr,Ywr,o5,IEe,Kwr,Zwr,TY,e6r,o6r,r6r,r5,NEe,t6r,a6r,MY,n6r,s6r,l6r,t5,qEe,i6r,d6r,EY,c6r,m6r,f6r,a5,jEe,g6r,h6r,CY,u6r,p6r,_6r,n5,DEe,b6r,v6r,wY,F6r,T6r,M6r,s5,DWe,hc,l5,GEe,Mx,E6r,OEe,C6r,GWe,ar,Ex,w6r,uc,A6r,AY,L6r,y6r,LY,x6r,$6r,k6r,Cx,S6r,VEe,R6r,P6r,B6r,Bt,wx,I6r,XEe,N6r,q6r,pc,j6r,zEe,D6r,G6r,yY,O6r,V6r,X6r,i5,z6r,Sr,Ax,W6r,WEe,Q6r,H6r,cn,U6r,QEe,J6r,Y6r,HEe,K6r,Z6r,UEe,eAr,oAr,rAr,Me,d5,JEe,tAr,aAr,xY,nAr,sAr,lAr,c5,YEe,iAr,dAr,$Y,cAr,mAr,fAr,m5,KEe,gAr,hAr,kY,uAr,pAr,_Ar,f5,ZEe,bAr,vAr,SY,FAr,TAr,MAr,g5,eCe,EAr,CAr,RY,wAr,AAr,LAr,h5,oCe,yAr,xAr,PY,$Ar,kAr,SAr,u5,rCe,RAr,PAr,BY,BAr,IAr,NAr,p5,tCe,qAr,jAr,IY,DAr,GAr,OAr,_5,aCe,VAr,XAr,NY,zAr,WAr,QAr,b5,nCe,HAr,UAr,qY,JAr,YAr,KAr,v5,sCe,ZAr,e7r,jY,o7r,r7r,t7r,F5,lCe,a7r,n7r,DY,s7r,l7r,i7r,T5,iCe,d7r,c7r,GY,m7r,f7r,g7r,M5,OWe,_c,E5,dCe,Lx,h7r,cCe,u7r,VWe,nr,yx,p7r,bc,_7r,OY,b7r,v7r,VY,F7r,T7r,M7r,xx,E7r,mCe,C7r,w7r,A7r,It,$x,L7r,fCe,y7r,x7r,vc,$7r,gCe,k7r,S7r,XY,R7r,P7r,B7r,C5,I7r,Rr,kx,N7r,hCe,q7r,j7r,mn,D7r,uCe,G7r,O7r,pCe,V7r,X7r,_Ce,z7r,W7r,Q7r,Ve,w5,bCe,H7r,U7r,zY,J7r,Y7r,K7r,A5,vCe,Z7r,eLr,WY,oLr,rLr,tLr,el,FCe,aLr,nLr,QY,sLr,lLr,HY,iLr,dLr,cLr,L5,TCe,mLr,fLr,UY,gLr,hLr,uLr,y5,MCe,pLr,_Lr,JY,bLr,vLr,FLr,x5,ECe,TLr,MLr,YY,ELr,CLr,wLr,$5,CCe,ALr,LLr,KY,yLr,xLr,$Lr,k5,wCe,kLr,SLr,ZY,RLr,PLr,BLr,S5,XWe,Fc,R5,ACe,Sx,ILr,LCe,NLr,zWe,sr,Rx,qLr,Tc,jLr,eK,DLr,GLr,oK,OLr,VLr,XLr,Px,zLr,yCe,WLr,QLr,HLr,Nt,Bx,ULr,xCe,JLr,YLr,Mc,KLr,$Ce,ZLr,eyr,rK,oyr,ryr,tyr,P5,ayr,Pr,Ix,nyr,kCe,syr,lyr,fn,iyr,SCe,dyr,cyr,RCe,myr,fyr,PCe,gyr,hyr,uyr,ie,B5,BCe,pyr,_yr,tK,byr,vyr,Fyr,I5,ICe,Tyr,Myr,aK,Eyr,Cyr,wyr,N5,NCe,Ayr,Lyr,nK,yyr,xyr,$yr,q5,qCe,kyr,Syr,sK,Ryr,Pyr,Byr,j5,jCe,Iyr,Nyr,lK,qyr,jyr,Dyr,D5,DCe,Gyr,Oyr,iK,Vyr,Xyr,zyr,G5,GCe,Wyr,Qyr,dK,Hyr,Uyr,Jyr,O5,OCe,Yyr,Kyr,cK,Zyr,e8r,o8r,V5,VCe,r8r,t8r,mK,a8r,n8r,s8r,X5,XCe,l8r,i8r,fK,d8r,c8r,m8r,z5,zCe,f8r,g8r,gK,h8r,u8r,p8r,W5,WCe,_8r,b8r,hK,v8r,F8r,T8r,Q5,QCe,M8r,E8r,uK,C8r,w8r,A8r,H5,HCe,L8r,y8r,pK,x8r,$8r,k8r,U5,UCe,S8r,R8r,_K,P8r,B8r,I8r,J5,JCe,N8r,q8r,bK,j8r,D8r,G8r,Y5,YCe,O8r,V8r,vK,X8r,z8r,W8r,K5,KCe,Q8r,H8r,FK,U8r,J8r,Y8r,Z5,ZCe,K8r,Z8r,TK,e9r,o9r,r9r,e3,e5e,t9r,a9r,MK,n9r,s9r,l9r,o3,WWe,Ec,r3,o5e,Nx,i9r,r5e,d9r,QWe,lr,qx,c9r,Cc,m9r,EK,f9r,g9r,CK,h9r,u9r,p9r,jx,_9r,t5e,b9r,v9r,F9r,qt,Dx,T9r,a5e,M9r,E9r,wc,C9r,n5e,w9r,A9r,wK,L9r,y9r,x9r,t3,$9r,Br,Gx,k9r,s5e,S9r,R9r,gn,P9r,l5e,B9r,I9r,i5e,N9r,q9r,d5e,j9r,D9r,G9r,ye,a3,c5e,O9r,V9r,AK,X9r,z9r,W9r,n3,m5e,Q9r,H9r,LK,U9r,J9r,Y9r,s3,f5e,K9r,Z9r,yK,exr,oxr,rxr,l3,g5e,txr,axr,xK,nxr,sxr,lxr,i3,h5e,ixr,dxr,$K,cxr,mxr,fxr,d3,u5e,gxr,hxr,kK,uxr,pxr,_xr,c3,p5e,bxr,vxr,SK,Fxr,Txr,Mxr,m3,_5e,Exr,Cxr,RK,wxr,Axr,Lxr,f3,b5e,yxr,xxr,PK,$xr,kxr,Sxr,g3,v5e,Rxr,Pxr,BK,Bxr,Ixr,Nxr,h3,HWe,Ac,u3,F5e,Ox,qxr,T5e,jxr,UWe,ir,Vx,Dxr,Lc,Gxr,IK,Oxr,Vxr,NK,Xxr,zxr,Wxr,Xx,Qxr,M5e,Hxr,Uxr,Jxr,jt,zx,Yxr,E5e,Kxr,Zxr,yc,e$r,C5e,o$r,r$r,qK,t$r,a$r,n$r,p3,s$r,Ir,Wx,l$r,w5e,i$r,d$r,hn,c$r,A5e,m$r,f$r,L5e,g$r,h$r,y5e,u$r,p$r,_$r,te,_3,x5e,b$r,v$r,jK,F$r,T$r,M$r,b3,$5e,E$r,C$r,DK,w$r,A$r,L$r,v3,k5e,y$r,x$r,GK,$$r,k$r,S$r,F3,S5e,R$r,P$r,OK,B$r,I$r,N$r,T3,R5e,q$r,j$r,VK,D$r,G$r,O$r,M3,P5e,V$r,X$r,XK,z$r,W$r,Q$r,E3,B5e,H$r,U$r,zK,J$r,Y$r,K$r,C3,I5e,Z$r,ekr,WK,okr,rkr,tkr,w3,N5e,akr,nkr,QK,skr,lkr,ikr,A3,q5e,dkr,ckr,HK,mkr,fkr,gkr,L3,j5e,hkr,ukr,UK,pkr,_kr,bkr,y3,D5e,vkr,Fkr,JK,Tkr,Mkr,Ekr,x3,G5e,Ckr,wkr,YK,Akr,Lkr,ykr,$3,O5e,xkr,$kr,KK,kkr,Skr,Rkr,k3,V5e,Pkr,Bkr,ZK,Ikr,Nkr,qkr,S3,X5e,jkr,Dkr,eZ,Gkr,Okr,Vkr,R3,z5e,Xkr,zkr,oZ,Wkr,Qkr,Hkr,P3,W5e,Ukr,Jkr,rZ,Ykr,Kkr,Zkr,B3,Q5e,eSr,oSr,tZ,rSr,tSr,aSr,I3,H5e,nSr,sSr,aZ,lSr,iSr,dSr,N3,U5e,cSr,mSr,nZ,fSr,gSr,hSr,q3,J5e,uSr,pSr,sZ,_Sr,bSr,vSr,j3,Y5e,FSr,TSr,lZ,MSr,ESr,CSr,D3,K5e,wSr,ASr,iZ,LSr,ySr,xSr,G3,Z5e,$Sr,kSr,dZ,SSr,RSr,PSr,O3,e3e,BSr,ISr,cZ,NSr,qSr,jSr,V3,JWe,xc,X3,o3e,Qx,DSr,r3e,GSr,YWe,dr,Hx,OSr,$c,VSr,mZ,XSr,zSr,fZ,WSr,QSr,HSr,Ux,USr,t3e,JSr,YSr,KSr,Dt,Jx,ZSr,a3e,eRr,oRr,kc,rRr,n3e,tRr,aRr,gZ,nRr,sRr,lRr,z3,iRr,Nr,Yx,dRr,s3e,cRr,mRr,un,fRr,l3e,gRr,hRr,i3e,uRr,pRr,d3e,_Rr,bRr,vRr,ve,W3,c3e,FRr,TRr,hZ,MRr,ERr,CRr,Q3,m3e,wRr,ARr,uZ,LRr,yRr,xRr,H3,f3e,$Rr,kRr,pZ,SRr,RRr,PRr,U3,g3e,BRr,IRr,_Z,NRr,qRr,jRr,J3,h3e,DRr,GRr,bZ,ORr,VRr,XRr,Y3,u3e,zRr,WRr,vZ,QRr,HRr,URr,K3,p3e,JRr,YRr,FZ,KRr,ZRr,ePr,Z3,_3e,oPr,rPr,TZ,tPr,aPr,nPr,e0,b3e,sPr,lPr,MZ,iPr,dPr,cPr,o0,v3e,mPr,fPr,EZ,gPr,hPr,uPr,r0,F3e,pPr,_Pr,CZ,bPr,vPr,FPr,t0,T3e,TPr,MPr,wZ,EPr,CPr,wPr,a0,M3e,APr,LPr,AZ,yPr,xPr,$Pr,n0,E3e,kPr,SPr,LZ,RPr,PPr,BPr,s0,C3e,IPr,NPr,yZ,qPr,jPr,DPr,l0,w3e,GPr,OPr,xZ,VPr,XPr,zPr,i0,A3e,WPr,QPr,$Z,HPr,UPr,JPr,d0,KWe,Sc,c0,L3e,Kx,YPr,y3e,KPr,ZWe,cr,Zx,ZPr,Rc,eBr,kZ,oBr,rBr,SZ,tBr,aBr,nBr,e$,sBr,x3e,lBr,iBr,dBr,Gt,o$,cBr,$3e,mBr,fBr,Pc,gBr,k3e,hBr,uBr,RZ,pBr,_Br,bBr,m0,vBr,qr,r$,FBr,S3e,TBr,MBr,pn,EBr,R3e,CBr,wBr,P3e,ABr,LBr,B3e,yBr,xBr,$Br,t$,f0,I3e,kBr,SBr,PZ,RBr,PBr,BBr,g0,N3e,IBr,NBr,BZ,qBr,jBr,DBr,h0,eQe,Bc,u0,q3e,a$,GBr,j3e,OBr,oQe,mr,n$,VBr,Ic,XBr,IZ,zBr,WBr,NZ,QBr,HBr,UBr,s$,JBr,D3e,YBr,KBr,ZBr,Ot,l$,eIr,G3e,oIr,rIr,Nc,tIr,O3e,aIr,nIr,qZ,sIr,lIr,iIr,p0,dIr,jr,i$,cIr,V3e,mIr,fIr,_n,gIr,X3e,hIr,uIr,z3e,pIr,_Ir,W3e,bIr,vIr,FIr,Q3e,_0,H3e,TIr,MIr,jZ,EIr,CIr,wIr,b0,rQe,qc,v0,U3e,d$,AIr,J3e,LIr,tQe,fr,c$,yIr,jc,xIr,DZ,$Ir,kIr,GZ,SIr,RIr,PIr,m$,BIr,Y3e,IIr,NIr,qIr,Vt,f$,jIr,K3e,DIr,GIr,Dc,OIr,Z3e,VIr,XIr,OZ,zIr,WIr,QIr,F0,HIr,Dr,g$,UIr,e0e,JIr,YIr,bn,KIr,o0e,ZIr,eNr,r0e,oNr,rNr,t0e,tNr,aNr,nNr,de,T0,a0e,sNr,lNr,VZ,iNr,dNr,cNr,M0,n0e,mNr,fNr,XZ,gNr,hNr,uNr,E0,s0e,pNr,_Nr,zZ,bNr,vNr,FNr,C0,l0e,TNr,MNr,WZ,ENr,CNr,wNr,w0,i0e,ANr,LNr,QZ,yNr,xNr,$Nr,A0,d0e,kNr,SNr,HZ,RNr,PNr,BNr,L0,c0e,INr,NNr,UZ,qNr,jNr,DNr,y0,m0e,GNr,ONr,JZ,VNr,XNr,zNr,x0,f0e,WNr,QNr,YZ,HNr,UNr,JNr,$0,g0e,YNr,KNr,KZ,ZNr,eqr,oqr,k0,h0e,rqr,tqr,ZZ,aqr,nqr,sqr,S0,u0e,lqr,iqr,eee,dqr,cqr,mqr,R0,p0e,fqr,gqr,oee,hqr,uqr,pqr,P0,_0e,_qr,bqr,ree,vqr,Fqr,Tqr,B0,b0e,Mqr,Eqr,tee,Cqr,wqr,Aqr,I0,v0e,Lqr,yqr,aee,xqr,$qr,kqr,N0,F0e,Sqr,Rqr,nee,Pqr,Bqr,Iqr,q0,T0e,Nqr,qqr,see,jqr,Dqr,Gqr,j0,M0e,Oqr,Vqr,lee,Xqr,zqr,Wqr,D0,E0e,Qqr,Hqr,iee,Uqr,Jqr,Yqr,G0,aQe,Gc,O0,C0e,h$,Kqr,w0e,Zqr,nQe,gr,u$,ejr,Oc,ojr,dee,rjr,tjr,cee,ajr,njr,sjr,p$,ljr,A0e,ijr,djr,cjr,Xt,_$,mjr,L0e,fjr,gjr,Vc,hjr,y0e,ujr,pjr,mee,_jr,bjr,vjr,V0,Fjr,Gr,b$,Tjr,x0e,Mjr,Ejr,vn,Cjr,$0e,wjr,Ajr,k0e,Ljr,yjr,S0e,xjr,$jr,kjr,ce,X0,R0e,Sjr,Rjr,fee,Pjr,Bjr,Ijr,z0,P0e,Njr,qjr,gee,jjr,Djr,Gjr,W0,B0e,Ojr,Vjr,hee,Xjr,zjr,Wjr,Q0,I0e,Qjr,Hjr,uee,Ujr,Jjr,Yjr,H0,N0e,Kjr,Zjr,pee,eDr,oDr,rDr,U0,q0e,tDr,aDr,_ee,nDr,sDr,lDr,J0,j0e,iDr,dDr,bee,cDr,mDr,fDr,Y0,D0e,gDr,hDr,vee,uDr,pDr,_Dr,K0,G0e,bDr,vDr,Fee,FDr,TDr,MDr,Z0,O0e,EDr,CDr,Tee,wDr,ADr,LDr,ew,V0e,yDr,xDr,Mee,$Dr,kDr,SDr,ow,X0e,RDr,PDr,Eee,BDr,IDr,NDr,rw,z0e,qDr,jDr,Cee,DDr,GDr,ODr,tw,W0e,VDr,XDr,wee,zDr,WDr,QDr,aw,Q0e,HDr,UDr,Aee,JDr,YDr,KDr,nw,H0e,ZDr,eGr,Lee,oGr,rGr,tGr,sw,U0e,aGr,nGr,yee,sGr,lGr,iGr,lw,J0e,dGr,cGr,xee,mGr,fGr,gGr,iw,Y0e,hGr,uGr,$ee,pGr,_Gr,bGr,dw,K0e,vGr,FGr,kee,TGr,MGr,EGr,cw,sQe,Xc,mw,Z0e,v$,CGr,ewe,wGr,lQe,hr,F$,AGr,zc,LGr,See,yGr,xGr,Ree,$Gr,kGr,SGr,T$,RGr,owe,PGr,BGr,IGr,zt,M$,NGr,rwe,qGr,jGr,Wc,DGr,twe,GGr,OGr,Pee,VGr,XGr,zGr,fw,WGr,Or,E$,QGr,awe,HGr,UGr,Fn,JGr,nwe,YGr,KGr,swe,ZGr,eOr,lwe,oOr,rOr,tOr,iwe,gw,dwe,aOr,nOr,Bee,sOr,lOr,iOr,hw,iQe,Qc,uw,cwe,C$,dOr,mwe,cOr,dQe,ur,w$,mOr,Hc,fOr,Iee,gOr,hOr,Nee,uOr,pOr,_Or,A$,bOr,fwe,vOr,FOr,TOr,Wt,L$,MOr,gwe,EOr,COr,Uc,wOr,hwe,AOr,LOr,qee,yOr,xOr,$Or,pw,kOr,Vr,y$,SOr,uwe,ROr,POr,Tn,BOr,pwe,IOr,NOr,_we,qOr,jOr,bwe,DOr,GOr,OOr,vwe,_w,Fwe,VOr,XOr,jee,zOr,WOr,QOr,bw,cQe,Jc,vw,Twe,x$,HOr,Mwe,UOr,mQe,pr,$$,JOr,Yc,YOr,Dee,KOr,ZOr,Gee,eVr,oVr,rVr,k$,tVr,Ewe,aVr,nVr,sVr,Qt,S$,lVr,Cwe,iVr,dVr,Kc,cVr,wwe,mVr,fVr,Oee,gVr,hVr,uVr,Fw,pVr,Xr,R$,_Vr,Awe,bVr,vVr,Mn,FVr,Lwe,TVr,MVr,ywe,EVr,CVr,xwe,wVr,AVr,LVr,oe,Tw,$we,yVr,xVr,Vee,$Vr,kVr,SVr,Mw,kwe,RVr,PVr,Xee,BVr,IVr,NVr,Ew,Swe,qVr,jVr,zee,DVr,GVr,OVr,Cw,Rwe,VVr,XVr,Wee,zVr,WVr,QVr,ww,Pwe,HVr,UVr,Qee,JVr,YVr,KVr,Aw,Bwe,ZVr,eXr,Hee,oXr,rXr,tXr,Lw,Iwe,aXr,nXr,Uee,sXr,lXr,iXr,yw,Nwe,dXr,cXr,Jee,mXr,fXr,gXr,xw,qwe,hXr,uXr,Yee,pXr,_Xr,bXr,$w,jwe,vXr,FXr,Kee,TXr,MXr,EXr,kw,Dwe,CXr,wXr,Zee,AXr,LXr,yXr,Sw,Gwe,xXr,$Xr,eoe,kXr,SXr,RXr,Rw,Owe,PXr,BXr,ooe,IXr,NXr,qXr,Pw,Vwe,jXr,DXr,roe,GXr,OXr,VXr,Bw,Xwe,XXr,zXr,toe,WXr,QXr,HXr,Iw,zwe,UXr,JXr,aoe,YXr,KXr,ZXr,Nw,Wwe,ezr,ozr,noe,rzr,tzr,azr,qw,Qwe,nzr,szr,soe,lzr,izr,dzr,jw,Hwe,czr,mzr,loe,fzr,gzr,hzr,Dw,Uwe,uzr,pzr,ioe,_zr,bzr,vzr,Gw,Jwe,Fzr,Tzr,doe,Mzr,Ezr,Czr,Ow,Ywe,wzr,Azr,coe,Lzr,yzr,xzr,Vw,Kwe,$zr,kzr,moe,Szr,Rzr,Pzr,Xw,Zwe,Bzr,Izr,foe,Nzr,qzr,jzr,zw,e6e,Dzr,Gzr,goe,Ozr,Vzr,Xzr,Ww,o6e,zzr,Wzr,hoe,Qzr,Hzr,Uzr,Qw,r6e,Jzr,Yzr,uoe,Kzr,Zzr,eWr,Hw,fQe,Zc,Uw,t6e,P$,oWr,a6e,rWr,gQe,_r,B$,tWr,em,aWr,poe,nWr,sWr,_oe,lWr,iWr,dWr,I$,cWr,n6e,mWr,fWr,gWr,Ht,N$,hWr,s6e,uWr,pWr,om,_Wr,l6e,bWr,vWr,boe,FWr,TWr,MWr,Jw,EWr,zr,q$,CWr,i6e,wWr,AWr,En,LWr,d6e,yWr,xWr,c6e,$Wr,kWr,m6e,SWr,RWr,PWr,xe,Yw,f6e,BWr,IWr,voe,NWr,qWr,jWr,Kw,g6e,DWr,GWr,Foe,OWr,VWr,XWr,Zw,h6e,zWr,WWr,Toe,QWr,HWr,UWr,e6,u6e,JWr,YWr,Moe,KWr,ZWr,eQr,o6,p6e,oQr,rQr,Eoe,tQr,aQr,nQr,r6,_6e,sQr,lQr,Coe,iQr,dQr,cQr,t6,b6e,mQr,fQr,woe,gQr,hQr,uQr,a6,v6e,pQr,_Qr,Aoe,bQr,vQr,FQr,n6,F6e,TQr,MQr,Loe,EQr,CQr,wQr,s6,T6e,AQr,LQr,yoe,yQr,xQr,$Qr,l6,hQe,rm,i6,M6e,j$,kQr,E6e,SQr,uQe,br,D$,RQr,tm,PQr,xoe,BQr,IQr,$oe,NQr,qQr,jQr,G$,DQr,C6e,GQr,OQr,VQr,Ut,O$,XQr,w6e,zQr,WQr,am,QQr,A6e,HQr,UQr,koe,JQr,YQr,KQr,d6,ZQr,Wr,V$,eHr,L6e,oHr,rHr,Cn,tHr,y6e,aHr,nHr,x6e,sHr,lHr,$6e,iHr,dHr,cHr,Ee,c6,k6e,mHr,fHr,Soe,gHr,hHr,uHr,m6,S6e,pHr,_Hr,Roe,bHr,vHr,FHr,f6,R6e,THr,MHr,Poe,EHr,CHr,wHr,g6,P6e,AHr,LHr,Boe,yHr,xHr,$Hr,h6,B6e,kHr,SHr,Ioe,RHr,PHr,BHr,u6,I6e,IHr,NHr,Noe,qHr,jHr,DHr,p6,N6e,GHr,OHr,qoe,VHr,XHr,zHr,_6,q6e,WHr,QHr,joe,HHr,UHr,JHr,b6,j6e,YHr,KHr,Doe,ZHr,eUr,oUr,v6,D6e,rUr,tUr,Goe,aUr,nUr,sUr,F6,G6e,lUr,iUr,Ooe,dUr,cUr,mUr,T6,O6e,fUr,gUr,Voe,hUr,uUr,pUr,M6,V6e,_Ur,bUr,Xoe,vUr,FUr,TUr,E6,pQe,nm,C6,X6e,X$,MUr,z6e,EUr,_Qe,vr,z$,CUr,sm,wUr,zoe,AUr,LUr,Woe,yUr,xUr,$Ur,W$,kUr,W6e,SUr,RUr,PUr,Jt,Q$,BUr,Q6e,IUr,NUr,lm,qUr,H6e,jUr,DUr,Qoe,GUr,OUr,VUr,w6,XUr,Qr,H$,zUr,U6e,WUr,QUr,wn,HUr,J6e,UUr,JUr,Y6e,YUr,KUr,K6e,ZUr,eJr,oJr,$e,A6,Z6e,rJr,tJr,Hoe,aJr,nJr,sJr,L6,eAe,lJr,iJr,Uoe,dJr,cJr,mJr,y6,oAe,fJr,gJr,Joe,hJr,uJr,pJr,x6,rAe,_Jr,bJr,Yoe,vJr,FJr,TJr,$6,tAe,MJr,EJr,Koe,CJr,wJr,AJr,k6,aAe,LJr,yJr,Zoe,xJr,$Jr,kJr,S6,nAe,SJr,RJr,ere,PJr,BJr,IJr,R6,sAe,NJr,qJr,ore,jJr,DJr,GJr,P6,lAe,OJr,VJr,rre,XJr,zJr,WJr,B6,iAe,QJr,HJr,tre,UJr,JJr,YJr,I6,bQe,im,N6,dAe,U$,KJr,cAe,ZJr,vQe,Fr,J$,eYr,dm,oYr,are,rYr,tYr,nre,aYr,nYr,sYr,Y$,lYr,mAe,iYr,dYr,cYr,Yt,K$,mYr,fAe,fYr,gYr,cm,hYr,gAe,uYr,pYr,sre,_Yr,bYr,vYr,q6,FYr,Hr,Z$,TYr,hAe,MYr,EYr,An,CYr,uAe,wYr,AYr,pAe,LYr,yYr,_Ae,xYr,$Yr,kYr,ke,j6,bAe,SYr,RYr,lre,PYr,BYr,IYr,D6,vAe,NYr,qYr,ire,jYr,DYr,GYr,G6,FAe,OYr,VYr,dre,XYr,zYr,WYr,O6,TAe,QYr,HYr,cre,UYr,JYr,YYr,V6,MAe,KYr,ZYr,mre,eKr,oKr,rKr,X6,EAe,tKr,aKr,fre,nKr,sKr,lKr,z6,CAe,iKr,dKr,gre,cKr,mKr,fKr,W6,wAe,gKr,hKr,hre,uKr,pKr,_Kr,Q6,AAe,bKr,vKr,ure,FKr,TKr,MKr,H6,LAe,EKr,CKr,pre,wKr,AKr,LKr,U6,FQe,mm,J6,yAe,ek,yKr,xAe,xKr,TQe,Tr,ok,$Kr,fm,kKr,_re,SKr,RKr,bre,PKr,BKr,IKr,rk,NKr,$Ae,qKr,jKr,DKr,Kt,tk,GKr,kAe,OKr,VKr,gm,XKr,SAe,zKr,WKr,vre,QKr,HKr,UKr,Y6,JKr,Ur,ak,YKr,RAe,KKr,ZKr,Ln,eZr,PAe,oZr,rZr,BAe,tZr,aZr,IAe,nZr,sZr,lZr,Se,K6,NAe,iZr,dZr,Fre,cZr,mZr,fZr,Z6,qAe,gZr,hZr,Tre,uZr,pZr,_Zr,eA,jAe,bZr,vZr,Mre,FZr,TZr,MZr,oA,DAe,EZr,CZr,Ere,wZr,AZr,LZr,rA,GAe,yZr,xZr,Cre,$Zr,kZr,SZr,tA,OAe,RZr,PZr,wre,BZr,IZr,NZr,aA,VAe,qZr,jZr,Are,DZr,GZr,OZr,nA,XAe,VZr,XZr,Lre,zZr,WZr,QZr,sA,zAe,HZr,UZr,yre,JZr,YZr,KZr,lA,WAe,ZZr,eet,xre,oet,ret,tet,iA,MQe,hm,dA,QAe,nk,aet,HAe,net,EQe,Mr,sk,set,um,iet,$re,det,cet,kre,met,fet,get,lk,het,UAe,uet,pet,_et,Zt,ik,bet,JAe,vet,Fet,pm,Tet,YAe,Met,Eet,Sre,Cet,wet,Aet,cA,Let,Jr,dk,yet,KAe,xet,$et,yn,ket,ZAe,Set,Ret,e7e,Pet,Bet,o7e,Iet,Net,qet,Re,mA,r7e,jet,Det,Rre,Get,Oet,Vet,fA,t7e,Xet,zet,Pre,Wet,Qet,Het,gA,a7e,Uet,Jet,Bre,Yet,Ket,Zet,hA,n7e,eot,oot,Ire,rot,tot,aot,uA,s7e,not,sot,Nre,lot,iot,dot,pA,l7e,cot,mot,qre,fot,got,hot,_A,i7e,uot,pot,jre,_ot,bot,vot,bA,d7e,Fot,Tot,Dre,Mot,Eot,Cot,vA,c7e,wot,Aot,Gre,Lot,yot,xot,FA,m7e,$ot,kot,Ore,Sot,Rot,Pot,TA,CQe,_m,MA,f7e,ck,Bot,g7e,Iot,wQe,Er,mk,Not,bm,qot,Vre,jot,Dot,Xre,Got,Oot,Vot,fk,Xot,h7e,zot,Wot,Qot,ea,gk,Hot,u7e,Uot,Jot,vm,Yot,p7e,Kot,Zot,zre,ert,ort,rrt,EA,trt,Yr,hk,art,_7e,nrt,srt,xn,lrt,b7e,irt,drt,v7e,crt,mrt,F7e,frt,grt,hrt,Xe,CA,T7e,urt,prt,Wre,_rt,brt,vrt,wA,M7e,Frt,Trt,Qre,Mrt,Ert,Crt,AA,E7e,wrt,Art,Hre,Lrt,yrt,xrt,LA,C7e,$rt,krt,Ure,Srt,Rrt,Prt,yA,w7e,Brt,Irt,Jre,Nrt,qrt,jrt,xA,A7e,Drt,Grt,Yre,Ort,Vrt,Xrt,$A,L7e,zrt,Wrt,Kre,Qrt,Hrt,Urt,kA,y7e,Jrt,Yrt,Zre,Krt,Zrt,ett,SA,AQe,Fm,RA,x7e,uk,ott,$7e,rtt,LQe,Cr,pk,ttt,Tm,att,ete,ntt,stt,ote,ltt,itt,dtt,_k,ctt,k7e,mtt,ftt,gtt,oa,bk,htt,S7e,utt,ptt,Mm,_tt,R7e,btt,vtt,rte,Ftt,Ttt,Mtt,PA,Ett,Kr,vk,Ctt,P7e,wtt,Att,$n,Ltt,B7e,ytt,xtt,I7e,$tt,ktt,N7e,Stt,Rtt,Ptt,ze,BA,q7e,Btt,Itt,tte,Ntt,qtt,jtt,IA,j7e,Dtt,Gtt,ate,Ott,Vtt,Xtt,NA,D7e,ztt,Wtt,nte,Qtt,Htt,Utt,qA,G7e,Jtt,Ytt,ste,Ktt,Ztt,eat,jA,O7e,oat,rat,lte,tat,aat,nat,DA,V7e,sat,lat,ite,iat,dat,cat,GA,X7e,mat,fat,dte,gat,hat,uat,OA,z7e,pat,_at,cte,bat,vat,Fat,VA,yQe,Em,XA,W7e,Fk,Tat,Q7e,Mat,xQe,wr,Tk,Eat,Cm,Cat,mte,wat,Aat,fte,Lat,yat,xat,Mk,$at,H7e,kat,Sat,Rat,ra,Ek,Pat,U7e,Bat,Iat,wm,Nat,J7e,qat,jat,gte,Dat,Gat,Oat,zA,Vat,Zr,Ck,Xat,Y7e,zat,Wat,kn,Qat,K7e,Hat,Uat,Z7e,Jat,Yat,eLe,Kat,Zat,ent,oLe,WA,rLe,ont,rnt,hte,tnt,ant,nnt,QA,$Qe,Am,HA,tLe,wk,snt,aLe,lnt,kQe,Ar,Ak,int,Lm,dnt,ute,cnt,mnt,pte,fnt,gnt,hnt,Lk,unt,nLe,pnt,_nt,bnt,ta,yk,vnt,sLe,Fnt,Tnt,ym,Mnt,lLe,Ent,Cnt,_te,wnt,Ant,Lnt,UA,ynt,et,xk,xnt,iLe,$nt,knt,Sn,Snt,dLe,Rnt,Pnt,cLe,Bnt,Int,mLe,Nnt,qnt,jnt,$k,JA,fLe,Dnt,Gnt,bte,Ont,Vnt,Xnt,YA,gLe,znt,Wnt,vte,Qnt,Hnt,Unt,KA,SQe,xm,ZA,hLe,kk,Jnt,uLe,Ynt,RQe,Lr,Sk,Knt,$m,Znt,Fte,est,ost,Tte,rst,tst,ast,Rk,nst,pLe,sst,lst,ist,aa,Pk,dst,_Le,cst,mst,km,fst,bLe,gst,hst,Mte,ust,pst,_st,e7,bst,ot,Bk,vst,vLe,Fst,Tst,Rn,Mst,FLe,Est,Cst,TLe,wst,Ast,MLe,Lst,yst,xst,ELe,o7,CLe,$st,kst,Ete,Sst,Rst,Pst,r7,PQe;return c=new re({}),Sa=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ay=new re({}),Ly=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Dm=new Bst({props:{warning:!0,$$slots:{default:[aYt]},$$scope:{ctx:$}}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L617"}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L640"}}),oh=new q({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[nYt]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L763"}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L411"}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L425"}}),Nh=new q({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[sYt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L624"}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L197"}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L211"}}),Mu=new Bst({props:{$$slots:{default:[lYt]},$$scope:{ctx:$}}}),Eu=new q({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[iYt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L338"}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L104"}}),zu=new Bst({props:{$$slots:{default:[dYt]},$$scope:{ctx:$}}}),Wu=new q({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[cYt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L257"}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L796"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uu=new q({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[mYt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new q({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[fYt]},$$scope:{ctx:$}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L803"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[gYt]},$$scope:{ctx:$}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K2=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hYt]},$$scope:{ctx:$}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eb=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[uYt]},$$scope:{ctx:$}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pYt]},$$scope:{ctx:$}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[_Yt]},$$scope:{ctx:$}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bYt]},$$scope:{ctx:$}}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vYt]},$$scope:{ctx:$}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[FYt]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L841"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[TYt]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[MYt]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L886"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[EYt]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CYt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L893"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wYt]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[AYt]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L879"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[LYt]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[yYt]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L850"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[xYt]},$$scope:{ctx:$}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$Yt]},$$scope:{ctx:$}}}),H8=new re({}),U8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L857"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[kYt]},$$scope:{ctx:$}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[SYt]},$$scope:{ctx:$}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L902"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[RYt]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[PYt]},$$scope:{ctx:$}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L941"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[BYt]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[IYt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[NYt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[qYt]},$$scope:{ctx:$}}}),h9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L948"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[jYt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[DYt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L971"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[GYt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[OYt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L955"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new q({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[VYt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new q({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[XYt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L962"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zYt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[WYt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L980"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[QYt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[HYt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L987"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[UYt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[JYt]},$$scope:{ctx:$}}}),z9=new re({}),W9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L934"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[YYt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[KYt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L909"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ZYt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[eKt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L916"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[oKt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[rKt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L925"}}),cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[tKt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[aKt]},$$scope:{ctx:$}}}),fx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new q({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[nKt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new q({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[sKt]},$$scope:{ctx:$}}}),_x=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[lKt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iKt]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[dKt]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cKt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[mKt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fKt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[gKt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hKt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[uKt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pKt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Kt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bKt]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[vKt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[FKt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[TKt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[MKt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[EKt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CKt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[wKt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[AKt]},$$scope:{ctx:$}}}),h$=new re({}),u$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),_$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LKt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yKt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[xKt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Kt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),L$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kKt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[SKt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new q({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[RKt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new q({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[PKt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[BKt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IKt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[NKt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qKt]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[jKt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I6=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DKt]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GKt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OKt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VKt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XKt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cA=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zKt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WKt]},$$scope:{ctx:$}}}),ck=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[QKt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HKt]},$$scope:{ctx:$}}}),uk=new re({}),pk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[UKt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VA=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JKt]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zA=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YKt]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KKt]},$$scope:{ctx:$}}}),wk=new re({}),Ak=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ZKt]},$$scope:{ctx:$}}}),xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[eZt]},$$scope:{ctx:$}}}),kk=new re({}),Sk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[oZt]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rZt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),$i=o("Auto Classes"),Bm=l(),lt=a("p"),ki=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=a("code"),My=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ri=o("Instantiating one of "),Bn=a("a"),Ey=o("AutoConfig"),In=o(", "),Nn=a("a"),Cy=o("AutoModel"),Pi=o(`, and
`),qn=a("a"),wy=o("AutoTokenizer"),Bi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),nR=o("will create a model that is an instance of "),Ii=a("a"),sR=o("BertModel"),lR=o("."),Ao=l(),Ra=a("p"),iR=o("There is one class of "),qm=a("code"),dR=o("AutoModel"),XUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xze=l(),Ni=a("h2"),jm=a("a"),_ne=a("span"),F(Ay.$$.fragment),zUe=l(),bne=a("span"),WUe=o("Extending the Auto Classes"),$ze=l(),jn=a("p"),QUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vne=a("code"),HUe=o("NewModel"),UUe=o(", make sure you have a "),Fne=a("code"),JUe=o("NewModelConfig"),YUe=o(` then you can add those to the auto
classes like this:`),kze=l(),F(Ly.$$.fragment),Sze=l(),cR=a("p"),KUe=o("You will then be able to use the auto classes like you would usually do!"),Rze=l(),F(Dm.$$.fragment),Pze=l(),qi=a("h2"),Gm=a("a"),Tne=a("span"),F(yy.$$.fragment),ZUe=l(),Mne=a("span"),eJe=o("AutoConfig"),Bze=l(),Lo=a("div"),F(xy.$$.fragment),oJe=l(),$y=a("p"),rJe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mR=a("a"),tJe=o("from_pretrained()"),aJe=o(" class method."),nJe=l(),ky=a("p"),sJe=o("This class cannot be instantiated directly using "),Ene=a("code"),lJe=o("__init__()"),iJe=o(" (throws an error)."),dJe=l(),yr=a("div"),F(Sy.$$.fragment),cJe=l(),Cne=a("p"),mJe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),fJe=l(),ji=a("p"),gJe=o("The configuration class to instantiate is selected based on the "),wne=a("code"),hJe=o("model_type"),uJe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ane=a("code"),pJe=o("pretrained_model_name_or_path"),_Je=o(":"),bJe=l(),A=a("ul"),Om=a("li"),Lne=a("strong"),vJe=o("albert"),FJe=o(" \u2014 "),fR=a("a"),TJe=o("AlbertConfig"),MJe=o(" (ALBERT model)"),EJe=l(),Vm=a("li"),yne=a("strong"),CJe=o("bart"),wJe=o(" \u2014 "),gR=a("a"),AJe=o("BartConfig"),LJe=o(" (BART model)"),yJe=l(),Xm=a("li"),xne=a("strong"),xJe=o("beit"),$Je=o(" \u2014 "),hR=a("a"),kJe=o("BeitConfig"),SJe=o(" (BEiT model)"),RJe=l(),zm=a("li"),$ne=a("strong"),PJe=o("bert"),BJe=o(" \u2014 "),uR=a("a"),IJe=o("BertConfig"),NJe=o(" (BERT model)"),qJe=l(),Wm=a("li"),kne=a("strong"),jJe=o("bert-generation"),DJe=o(" \u2014 "),pR=a("a"),GJe=o("BertGenerationConfig"),OJe=o(" (Bert Generation model)"),VJe=l(),Qm=a("li"),Sne=a("strong"),XJe=o("big_bird"),zJe=o(" \u2014 "),_R=a("a"),WJe=o("BigBirdConfig"),QJe=o(" (BigBird model)"),HJe=l(),Hm=a("li"),Rne=a("strong"),UJe=o("bigbird_pegasus"),JJe=o(" \u2014 "),bR=a("a"),YJe=o("BigBirdPegasusConfig"),KJe=o(" (BigBird-Pegasus model)"),ZJe=l(),Um=a("li"),Pne=a("strong"),eYe=o("blenderbot"),oYe=o(" \u2014 "),vR=a("a"),rYe=o("BlenderbotConfig"),tYe=o(" (Blenderbot model)"),aYe=l(),Jm=a("li"),Bne=a("strong"),nYe=o("blenderbot-small"),sYe=o(" \u2014 "),FR=a("a"),lYe=o("BlenderbotSmallConfig"),iYe=o(" (BlenderbotSmall model)"),dYe=l(),Ym=a("li"),Ine=a("strong"),cYe=o("bloom"),mYe=o(" \u2014 "),TR=a("a"),fYe=o("BloomConfig"),gYe=o(" (BLOOM model)"),hYe=l(),Km=a("li"),Nne=a("strong"),uYe=o("camembert"),pYe=o(" \u2014 "),MR=a("a"),_Ye=o("CamembertConfig"),bYe=o(" (CamemBERT model)"),vYe=l(),Zm=a("li"),qne=a("strong"),FYe=o("canine"),TYe=o(" \u2014 "),ER=a("a"),MYe=o("CanineConfig"),EYe=o(" (CANINE model)"),CYe=l(),ef=a("li"),jne=a("strong"),wYe=o("clip"),AYe=o(" \u2014 "),CR=a("a"),LYe=o("CLIPConfig"),yYe=o(" (CLIP model)"),xYe=l(),of=a("li"),Dne=a("strong"),$Ye=o("codegen"),kYe=o(" \u2014 "),wR=a("a"),SYe=o("CodeGenConfig"),RYe=o(" (CodeGen model)"),PYe=l(),rf=a("li"),Gne=a("strong"),BYe=o("convbert"),IYe=o(" \u2014 "),AR=a("a"),NYe=o("ConvBertConfig"),qYe=o(" (ConvBERT model)"),jYe=l(),tf=a("li"),One=a("strong"),DYe=o("convnext"),GYe=o(" \u2014 "),LR=a("a"),OYe=o("ConvNextConfig"),VYe=o(" (ConvNeXT model)"),XYe=l(),af=a("li"),Vne=a("strong"),zYe=o("ctrl"),WYe=o(" \u2014 "),yR=a("a"),QYe=o("CTRLConfig"),HYe=o(" (CTRL model)"),UYe=l(),nf=a("li"),Xne=a("strong"),JYe=o("cvt"),YYe=o(" \u2014 "),xR=a("a"),KYe=o("CvtConfig"),ZYe=o(" (CvT model)"),eKe=l(),sf=a("li"),zne=a("strong"),oKe=o("data2vec-audio"),rKe=o(" \u2014 "),$R=a("a"),tKe=o("Data2VecAudioConfig"),aKe=o(" (Data2VecAudio model)"),nKe=l(),lf=a("li"),Wne=a("strong"),sKe=o("data2vec-text"),lKe=o(" \u2014 "),kR=a("a"),iKe=o("Data2VecTextConfig"),dKe=o(" (Data2VecText model)"),cKe=l(),df=a("li"),Qne=a("strong"),mKe=o("data2vec-vision"),fKe=o(" \u2014 "),SR=a("a"),gKe=o("Data2VecVisionConfig"),hKe=o(" (Data2VecVision model)"),uKe=l(),cf=a("li"),Hne=a("strong"),pKe=o("deberta"),_Ke=o(" \u2014 "),RR=a("a"),bKe=o("DebertaConfig"),vKe=o(" (DeBERTa model)"),FKe=l(),mf=a("li"),Une=a("strong"),TKe=o("deberta-v2"),MKe=o(" \u2014 "),PR=a("a"),EKe=o("DebertaV2Config"),CKe=o(" (DeBERTa-v2 model)"),wKe=l(),ff=a("li"),Jne=a("strong"),AKe=o("decision_transformer"),LKe=o(" \u2014 "),BR=a("a"),yKe=o("DecisionTransformerConfig"),xKe=o(" (Decision Transformer model)"),$Ke=l(),gf=a("li"),Yne=a("strong"),kKe=o("deit"),SKe=o(" \u2014 "),IR=a("a"),RKe=o("DeiTConfig"),PKe=o(" (DeiT model)"),BKe=l(),hf=a("li"),Kne=a("strong"),IKe=o("detr"),NKe=o(" \u2014 "),NR=a("a"),qKe=o("DetrConfig"),jKe=o(" (DETR model)"),DKe=l(),uf=a("li"),Zne=a("strong"),GKe=o("distilbert"),OKe=o(" \u2014 "),qR=a("a"),VKe=o("DistilBertConfig"),XKe=o(" (DistilBERT model)"),zKe=l(),pf=a("li"),ese=a("strong"),WKe=o("dpr"),QKe=o(" \u2014 "),jR=a("a"),HKe=o("DPRConfig"),UKe=o(" (DPR model)"),JKe=l(),_f=a("li"),ose=a("strong"),YKe=o("dpt"),KKe=o(" \u2014 "),DR=a("a"),ZKe=o("DPTConfig"),eZe=o(" (DPT model)"),oZe=l(),bf=a("li"),rse=a("strong"),rZe=o("electra"),tZe=o(" \u2014 "),GR=a("a"),aZe=o("ElectraConfig"),nZe=o(" (ELECTRA model)"),sZe=l(),vf=a("li"),tse=a("strong"),lZe=o("encoder-decoder"),iZe=o(" \u2014 "),OR=a("a"),dZe=o("EncoderDecoderConfig"),cZe=o(" (Encoder decoder model)"),mZe=l(),Ff=a("li"),ase=a("strong"),fZe=o("flaubert"),gZe=o(" \u2014 "),VR=a("a"),hZe=o("FlaubertConfig"),uZe=o(" (FlauBERT model)"),pZe=l(),Tf=a("li"),nse=a("strong"),_Ze=o("flava"),bZe=o(" \u2014 "),XR=a("a"),vZe=o("FlavaConfig"),FZe=o(" (FLAVA model)"),TZe=l(),Mf=a("li"),sse=a("strong"),MZe=o("fnet"),EZe=o(" \u2014 "),zR=a("a"),CZe=o("FNetConfig"),wZe=o(" (FNet model)"),AZe=l(),Ef=a("li"),lse=a("strong"),LZe=o("fsmt"),yZe=o(" \u2014 "),WR=a("a"),xZe=o("FSMTConfig"),$Ze=o(" (FairSeq Machine-Translation model)"),kZe=l(),Cf=a("li"),ise=a("strong"),SZe=o("funnel"),RZe=o(" \u2014 "),QR=a("a"),PZe=o("FunnelConfig"),BZe=o(" (Funnel Transformer model)"),IZe=l(),wf=a("li"),dse=a("strong"),NZe=o("glpn"),qZe=o(" \u2014 "),HR=a("a"),jZe=o("GLPNConfig"),DZe=o(" (GLPN model)"),GZe=l(),Af=a("li"),cse=a("strong"),OZe=o("gpt2"),VZe=o(" \u2014 "),UR=a("a"),XZe=o("GPT2Config"),zZe=o(" (OpenAI GPT-2 model)"),WZe=l(),Lf=a("li"),mse=a("strong"),QZe=o("gpt_neo"),HZe=o(" \u2014 "),JR=a("a"),UZe=o("GPTNeoConfig"),JZe=o(" (GPT Neo model)"),YZe=l(),yf=a("li"),fse=a("strong"),KZe=o("gpt_neox"),ZZe=o(" \u2014 "),YR=a("a"),eeo=o("GPTNeoXConfig"),oeo=o(" (GPT NeoX model)"),reo=l(),xf=a("li"),gse=a("strong"),teo=o("gptj"),aeo=o(" \u2014 "),KR=a("a"),neo=o("GPTJConfig"),seo=o(" (GPT-J model)"),leo=l(),$f=a("li"),hse=a("strong"),ieo=o("groupvit"),deo=o(" \u2014 "),ZR=a("a"),ceo=o("GroupViTConfig"),meo=o(" (GroupViT model)"),feo=l(),kf=a("li"),use=a("strong"),geo=o("hubert"),heo=o(" \u2014 "),eP=a("a"),ueo=o("HubertConfig"),peo=o(" (Hubert model)"),_eo=l(),Sf=a("li"),pse=a("strong"),beo=o("ibert"),veo=o(" \u2014 "),oP=a("a"),Feo=o("IBertConfig"),Teo=o(" (I-BERT model)"),Meo=l(),Rf=a("li"),_se=a("strong"),Eeo=o("imagegpt"),Ceo=o(" \u2014 "),rP=a("a"),weo=o("ImageGPTConfig"),Aeo=o(" (ImageGPT model)"),Leo=l(),Pf=a("li"),bse=a("strong"),yeo=o("layoutlm"),xeo=o(" \u2014 "),tP=a("a"),$eo=o("LayoutLMConfig"),keo=o(" (LayoutLM model)"),Seo=l(),Bf=a("li"),vse=a("strong"),Reo=o("layoutlmv2"),Peo=o(" \u2014 "),aP=a("a"),Beo=o("LayoutLMv2Config"),Ieo=o(" (LayoutLMv2 model)"),Neo=l(),If=a("li"),Fse=a("strong"),qeo=o("layoutlmv3"),jeo=o(" \u2014 "),nP=a("a"),Deo=o("LayoutLMv3Config"),Geo=o(" (LayoutLMv3 model)"),Oeo=l(),Nf=a("li"),Tse=a("strong"),Veo=o("led"),Xeo=o(" \u2014 "),sP=a("a"),zeo=o("LEDConfig"),Weo=o(" (LED model)"),Qeo=l(),qf=a("li"),Mse=a("strong"),Heo=o("levit"),Ueo=o(" \u2014 "),lP=a("a"),Jeo=o("LevitConfig"),Yeo=o(" (LeViT model)"),Keo=l(),jf=a("li"),Ese=a("strong"),Zeo=o("longformer"),eoo=o(" \u2014 "),iP=a("a"),ooo=o("LongformerConfig"),roo=o(" (Longformer model)"),too=l(),Df=a("li"),Cse=a("strong"),aoo=o("longt5"),noo=o(" \u2014 "),dP=a("a"),soo=o("LongT5Config"),loo=o(" (LongT5 model)"),ioo=l(),Gf=a("li"),wse=a("strong"),doo=o("luke"),coo=o(" \u2014 "),cP=a("a"),moo=o("LukeConfig"),foo=o(" (LUKE model)"),goo=l(),Of=a("li"),Ase=a("strong"),hoo=o("lxmert"),uoo=o(" \u2014 "),mP=a("a"),poo=o("LxmertConfig"),_oo=o(" (LXMERT model)"),boo=l(),Vf=a("li"),Lse=a("strong"),voo=o("m2m_100"),Foo=o(" \u2014 "),fP=a("a"),Too=o("M2M100Config"),Moo=o(" (M2M100 model)"),Eoo=l(),Xf=a("li"),yse=a("strong"),Coo=o("marian"),woo=o(" \u2014 "),gP=a("a"),Aoo=o("MarianConfig"),Loo=o(" (Marian model)"),yoo=l(),zf=a("li"),xse=a("strong"),xoo=o("maskformer"),$oo=o(" \u2014 "),hP=a("a"),koo=o("MaskFormerConfig"),Soo=o(" (MaskFormer model)"),Roo=l(),Wf=a("li"),$se=a("strong"),Poo=o("mbart"),Boo=o(" \u2014 "),uP=a("a"),Ioo=o("MBartConfig"),Noo=o(" (mBART model)"),qoo=l(),Qf=a("li"),kse=a("strong"),joo=o("mctct"),Doo=o(" \u2014 "),pP=a("a"),Goo=o("MCTCTConfig"),Ooo=o(" (M-CTC-T model)"),Voo=l(),Hf=a("li"),Sse=a("strong"),Xoo=o("megatron-bert"),zoo=o(" \u2014 "),_P=a("a"),Woo=o("MegatronBertConfig"),Qoo=o(" (Megatron-BERT model)"),Hoo=l(),Uf=a("li"),Rse=a("strong"),Uoo=o("mobilebert"),Joo=o(" \u2014 "),bP=a("a"),Yoo=o("MobileBertConfig"),Koo=o(" (MobileBERT model)"),Zoo=l(),Jf=a("li"),Pse=a("strong"),ero=o("mobilevit"),oro=o(" \u2014 "),vP=a("a"),rro=o("MobileViTConfig"),tro=o(" (MobileViT model)"),aro=l(),Yf=a("li"),Bse=a("strong"),nro=o("mpnet"),sro=o(" \u2014 "),FP=a("a"),lro=o("MPNetConfig"),iro=o(" (MPNet model)"),dro=l(),Kf=a("li"),Ise=a("strong"),cro=o("mt5"),mro=o(" \u2014 "),TP=a("a"),fro=o("MT5Config"),gro=o(" (MT5 model)"),hro=l(),Zf=a("li"),Nse=a("strong"),uro=o("mvp"),pro=o(" \u2014 "),MP=a("a"),_ro=o("MvpConfig"),bro=o(" (MVP model)"),vro=l(),eg=a("li"),qse=a("strong"),Fro=o("nezha"),Tro=o(" \u2014 "),EP=a("a"),Mro=o("NezhaConfig"),Ero=o(" (Nezha model)"),Cro=l(),og=a("li"),jse=a("strong"),wro=o("nystromformer"),Aro=o(" \u2014 "),CP=a("a"),Lro=o("NystromformerConfig"),yro=o(" (Nystr\xF6mformer model)"),xro=l(),rg=a("li"),Dse=a("strong"),$ro=o("openai-gpt"),kro=o(" \u2014 "),wP=a("a"),Sro=o("OpenAIGPTConfig"),Rro=o(" (OpenAI GPT model)"),Pro=l(),tg=a("li"),Gse=a("strong"),Bro=o("opt"),Iro=o(" \u2014 "),AP=a("a"),Nro=o("OPTConfig"),qro=o(" (OPT model)"),jro=l(),ag=a("li"),Ose=a("strong"),Dro=o("owlvit"),Gro=o(" \u2014 "),LP=a("a"),Oro=o("OwlViTConfig"),Vro=o(" (OWL-ViT model)"),Xro=l(),ng=a("li"),Vse=a("strong"),zro=o("pegasus"),Wro=o(" \u2014 "),yP=a("a"),Qro=o("PegasusConfig"),Hro=o(" (Pegasus model)"),Uro=l(),sg=a("li"),Xse=a("strong"),Jro=o("perceiver"),Yro=o(" \u2014 "),xP=a("a"),Kro=o("PerceiverConfig"),Zro=o(" (Perceiver model)"),eto=l(),lg=a("li"),zse=a("strong"),oto=o("plbart"),rto=o(" \u2014 "),$P=a("a"),tto=o("PLBartConfig"),ato=o(" (PLBart model)"),nto=l(),ig=a("li"),Wse=a("strong"),sto=o("poolformer"),lto=o(" \u2014 "),kP=a("a"),ito=o("PoolFormerConfig"),dto=o(" (PoolFormer model)"),cto=l(),dg=a("li"),Qse=a("strong"),mto=o("prophetnet"),fto=o(" \u2014 "),SP=a("a"),gto=o("ProphetNetConfig"),hto=o(" (ProphetNet model)"),uto=l(),cg=a("li"),Hse=a("strong"),pto=o("qdqbert"),_to=o(" \u2014 "),RP=a("a"),bto=o("QDQBertConfig"),vto=o(" (QDQBert model)"),Fto=l(),mg=a("li"),Use=a("strong"),Tto=o("rag"),Mto=o(" \u2014 "),PP=a("a"),Eto=o("RagConfig"),Cto=o(" (RAG model)"),wto=l(),fg=a("li"),Jse=a("strong"),Ato=o("realm"),Lto=o(" \u2014 "),BP=a("a"),yto=o("RealmConfig"),xto=o(" (REALM model)"),$to=l(),gg=a("li"),Yse=a("strong"),kto=o("reformer"),Sto=o(" \u2014 "),IP=a("a"),Rto=o("ReformerConfig"),Pto=o(" (Reformer model)"),Bto=l(),hg=a("li"),Kse=a("strong"),Ito=o("regnet"),Nto=o(" \u2014 "),NP=a("a"),qto=o("RegNetConfig"),jto=o(" (RegNet model)"),Dto=l(),ug=a("li"),Zse=a("strong"),Gto=o("rembert"),Oto=o(" \u2014 "),qP=a("a"),Vto=o("RemBertConfig"),Xto=o(" (RemBERT model)"),zto=l(),pg=a("li"),ele=a("strong"),Wto=o("resnet"),Qto=o(" \u2014 "),jP=a("a"),Hto=o("ResNetConfig"),Uto=o(" (ResNet model)"),Jto=l(),_g=a("li"),ole=a("strong"),Yto=o("retribert"),Kto=o(" \u2014 "),DP=a("a"),Zto=o("RetriBertConfig"),eao=o(" (RetriBERT model)"),oao=l(),bg=a("li"),rle=a("strong"),rao=o("roberta"),tao=o(" \u2014 "),GP=a("a"),aao=o("RobertaConfig"),nao=o(" (RoBERTa model)"),sao=l(),vg=a("li"),tle=a("strong"),lao=o("roformer"),iao=o(" \u2014 "),OP=a("a"),dao=o("RoFormerConfig"),cao=o(" (RoFormer model)"),mao=l(),Fg=a("li"),ale=a("strong"),fao=o("segformer"),gao=o(" \u2014 "),VP=a("a"),hao=o("SegformerConfig"),uao=o(" (SegFormer model)"),pao=l(),Tg=a("li"),nle=a("strong"),_ao=o("sew"),bao=o(" \u2014 "),XP=a("a"),vao=o("SEWConfig"),Fao=o(" (SEW model)"),Tao=l(),Mg=a("li"),sle=a("strong"),Mao=o("sew-d"),Eao=o(" \u2014 "),zP=a("a"),Cao=o("SEWDConfig"),wao=o(" (SEW-D model)"),Aao=l(),Eg=a("li"),lle=a("strong"),Lao=o("speech-encoder-decoder"),yao=o(" \u2014 "),WP=a("a"),xao=o("SpeechEncoderDecoderConfig"),$ao=o(" (Speech Encoder decoder model)"),kao=l(),Cg=a("li"),ile=a("strong"),Sao=o("speech_to_text"),Rao=o(" \u2014 "),QP=a("a"),Pao=o("Speech2TextConfig"),Bao=o(" (Speech2Text model)"),Iao=l(),wg=a("li"),dle=a("strong"),Nao=o("speech_to_text_2"),qao=o(" \u2014 "),HP=a("a"),jao=o("Speech2Text2Config"),Dao=o(" (Speech2Text2 model)"),Gao=l(),Ag=a("li"),cle=a("strong"),Oao=o("splinter"),Vao=o(" \u2014 "),UP=a("a"),Xao=o("SplinterConfig"),zao=o(" (Splinter model)"),Wao=l(),Lg=a("li"),mle=a("strong"),Qao=o("squeezebert"),Hao=o(" \u2014 "),JP=a("a"),Uao=o("SqueezeBertConfig"),Jao=o(" (SqueezeBERT model)"),Yao=l(),yg=a("li"),fle=a("strong"),Kao=o("swin"),Zao=o(" \u2014 "),YP=a("a"),eno=o("SwinConfig"),ono=o(" (Swin Transformer model)"),rno=l(),xg=a("li"),gle=a("strong"),tno=o("swinv2"),ano=o(" \u2014 "),KP=a("a"),nno=o("Swinv2Config"),sno=o(" (Swin Transformer V2 model)"),lno=l(),$g=a("li"),hle=a("strong"),ino=o("t5"),dno=o(" \u2014 "),ZP=a("a"),cno=o("T5Config"),mno=o(" (T5 model)"),fno=l(),kg=a("li"),ule=a("strong"),gno=o("tapas"),hno=o(" \u2014 "),eB=a("a"),uno=o("TapasConfig"),pno=o(" (TAPAS model)"),_no=l(),Sg=a("li"),ple=a("strong"),bno=o("trajectory_transformer"),vno=o(" \u2014 "),oB=a("a"),Fno=o("TrajectoryTransformerConfig"),Tno=o(" (Trajectory Transformer model)"),Mno=l(),Rg=a("li"),_le=a("strong"),Eno=o("transfo-xl"),Cno=o(" \u2014 "),rB=a("a"),wno=o("TransfoXLConfig"),Ano=o(" (Transformer-XL model)"),Lno=l(),Pg=a("li"),ble=a("strong"),yno=o("trocr"),xno=o(" \u2014 "),tB=a("a"),$no=o("TrOCRConfig"),kno=o(" (TrOCR model)"),Sno=l(),Bg=a("li"),vle=a("strong"),Rno=o("unispeech"),Pno=o(" \u2014 "),aB=a("a"),Bno=o("UniSpeechConfig"),Ino=o(" (UniSpeech model)"),Nno=l(),Ig=a("li"),Fle=a("strong"),qno=o("unispeech-sat"),jno=o(" \u2014 "),nB=a("a"),Dno=o("UniSpeechSatConfig"),Gno=o(" (UniSpeechSat model)"),Ono=l(),Ng=a("li"),Tle=a("strong"),Vno=o("van"),Xno=o(" \u2014 "),sB=a("a"),zno=o("VanConfig"),Wno=o(" (VAN model)"),Qno=l(),qg=a("li"),Mle=a("strong"),Hno=o("vilt"),Uno=o(" \u2014 "),lB=a("a"),Jno=o("ViltConfig"),Yno=o(" (ViLT model)"),Kno=l(),jg=a("li"),Ele=a("strong"),Zno=o("vision-encoder-decoder"),eso=o(" \u2014 "),iB=a("a"),oso=o("VisionEncoderDecoderConfig"),rso=o(" (Vision Encoder decoder model)"),tso=l(),Dg=a("li"),Cle=a("strong"),aso=o("vision-text-dual-encoder"),nso=o(" \u2014 "),dB=a("a"),sso=o("VisionTextDualEncoderConfig"),lso=o(" (VisionTextDualEncoder model)"),iso=l(),Gg=a("li"),wle=a("strong"),dso=o("visual_bert"),cso=o(" \u2014 "),cB=a("a"),mso=o("VisualBertConfig"),fso=o(" (VisualBERT model)"),gso=l(),Og=a("li"),Ale=a("strong"),hso=o("vit"),uso=o(" \u2014 "),mB=a("a"),pso=o("ViTConfig"),_so=o(" (ViT model)"),bso=l(),Vg=a("li"),Lle=a("strong"),vso=o("vit_mae"),Fso=o(" \u2014 "),fB=a("a"),Tso=o("ViTMAEConfig"),Mso=o(" (ViTMAE model)"),Eso=l(),Xg=a("li"),yle=a("strong"),Cso=o("wav2vec2"),wso=o(" \u2014 "),gB=a("a"),Aso=o("Wav2Vec2Config"),Lso=o(" (Wav2Vec2 model)"),yso=l(),zg=a("li"),xle=a("strong"),xso=o("wav2vec2-conformer"),$so=o(" \u2014 "),hB=a("a"),kso=o("Wav2Vec2ConformerConfig"),Sso=o(" (Wav2Vec2-Conformer model)"),Rso=l(),Wg=a("li"),$le=a("strong"),Pso=o("wavlm"),Bso=o(" \u2014 "),uB=a("a"),Iso=o("WavLMConfig"),Nso=o(" (WavLM model)"),qso=l(),Qg=a("li"),kle=a("strong"),jso=o("xglm"),Dso=o(" \u2014 "),pB=a("a"),Gso=o("XGLMConfig"),Oso=o(" (XGLM model)"),Vso=l(),Hg=a("li"),Sle=a("strong"),Xso=o("xlm"),zso=o(" \u2014 "),_B=a("a"),Wso=o("XLMConfig"),Qso=o(" (XLM model)"),Hso=l(),Ug=a("li"),Rle=a("strong"),Uso=o("xlm-prophetnet"),Jso=o(" \u2014 "),bB=a("a"),Yso=o("XLMProphetNetConfig"),Kso=o(" (XLM-ProphetNet model)"),Zso=l(),Jg=a("li"),Ple=a("strong"),elo=o("xlm-roberta"),olo=o(" \u2014 "),vB=a("a"),rlo=o("XLMRobertaConfig"),tlo=o(" (XLM-RoBERTa model)"),alo=l(),Yg=a("li"),Ble=a("strong"),nlo=o("xlm-roberta-xl"),slo=o(" \u2014 "),FB=a("a"),llo=o("XLMRobertaXLConfig"),ilo=o(" (XLM-RoBERTa-XL model)"),dlo=l(),Kg=a("li"),Ile=a("strong"),clo=o("xlnet"),mlo=o(" \u2014 "),TB=a("a"),flo=o("XLNetConfig"),glo=o(" (XLNet model)"),hlo=l(),Zg=a("li"),Nle=a("strong"),ulo=o("yolos"),plo=o(" \u2014 "),MB=a("a"),_lo=o("YolosConfig"),blo=o(" (YOLOS model)"),vlo=l(),eh=a("li"),qle=a("strong"),Flo=o("yoso"),Tlo=o(" \u2014 "),EB=a("a"),Mlo=o("YosoConfig"),Elo=o(" (YOSO model)"),Clo=l(),F(oh.$$.fragment),wlo=l(),rh=a("div"),F(Ry.$$.fragment),Alo=l(),jle=a("p"),Llo=o("Register a new configuration for this class."),Ize=l(),Di=a("h2"),th=a("a"),Dle=a("span"),F(Py.$$.fragment),ylo=l(),Gle=a("span"),xlo=o("AutoTokenizer"),Nze=l(),yo=a("div"),F(By.$$.fragment),$lo=l(),Iy=a("p"),klo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CB=a("a"),Slo=o("AutoTokenizer.from_pretrained()"),Rlo=o(" class method."),Plo=l(),Ny=a("p"),Blo=o("This class cannot be instantiated directly using "),Ole=a("code"),Ilo=o("__init__()"),Nlo=o(" (throws an error)."),qlo=l(),xr=a("div"),F(qy.$$.fragment),jlo=l(),Vle=a("p"),Dlo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Glo=l(),Pa=a("p"),Olo=o("The tokenizer class to instantiate is selected based on the "),Xle=a("code"),Vlo=o("model_type"),Xlo=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),zlo=o("pretrained_model_name_or_path"),Wlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),Qlo=o("pretrained_model_name_or_path"),Hlo=o(":"),Ulo=l(),k=a("ul"),Dn=a("li"),Qle=a("strong"),Jlo=o("albert"),Ylo=o(" \u2014 "),wB=a("a"),Klo=o("AlbertTokenizer"),Zlo=o(" or "),AB=a("a"),eio=o("AlbertTokenizerFast"),oio=o(" (ALBERT model)"),rio=l(),Gn=a("li"),Hle=a("strong"),tio=o("bart"),aio=o(" \u2014 "),LB=a("a"),nio=o("BartTokenizer"),sio=o(" or "),yB=a("a"),lio=o("BartTokenizerFast"),iio=o(" (BART model)"),dio=l(),On=a("li"),Ule=a("strong"),cio=o("barthez"),mio=o(" \u2014 "),xB=a("a"),fio=o("BarthezTokenizer"),gio=o(" or "),$B=a("a"),hio=o("BarthezTokenizerFast"),uio=o(" (BARThez model)"),pio=l(),ah=a("li"),Jle=a("strong"),_io=o("bartpho"),bio=o(" \u2014 "),kB=a("a"),vio=o("BartphoTokenizer"),Fio=o(" (BARTpho model)"),Tio=l(),Vn=a("li"),Yle=a("strong"),Mio=o("bert"),Eio=o(" \u2014 "),SB=a("a"),Cio=o("BertTokenizer"),wio=o(" or "),RB=a("a"),Aio=o("BertTokenizerFast"),Lio=o(" (BERT model)"),yio=l(),nh=a("li"),Kle=a("strong"),xio=o("bert-generation"),$io=o(" \u2014 "),PB=a("a"),kio=o("BertGenerationTokenizer"),Sio=o(" (Bert Generation model)"),Rio=l(),sh=a("li"),Zle=a("strong"),Pio=o("bert-japanese"),Bio=o(" \u2014 "),BB=a("a"),Iio=o("BertJapaneseTokenizer"),Nio=o(" (BertJapanese model)"),qio=l(),lh=a("li"),eie=a("strong"),jio=o("bertweet"),Dio=o(" \u2014 "),IB=a("a"),Gio=o("BertweetTokenizer"),Oio=o(" (BERTweet model)"),Vio=l(),Xn=a("li"),oie=a("strong"),Xio=o("big_bird"),zio=o(" \u2014 "),NB=a("a"),Wio=o("BigBirdTokenizer"),Qio=o(" or "),qB=a("a"),Hio=o("BigBirdTokenizerFast"),Uio=o(" (BigBird model)"),Jio=l(),zn=a("li"),rie=a("strong"),Yio=o("bigbird_pegasus"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("PegasusTokenizer"),edo=o(" or "),DB=a("a"),odo=o("PegasusTokenizerFast"),rdo=o(" (BigBird-Pegasus model)"),tdo=l(),Wn=a("li"),tie=a("strong"),ado=o("blenderbot"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("BlenderbotTokenizer"),ldo=o(" or "),OB=a("a"),ido=o("BlenderbotTokenizerFast"),ddo=o(" (Blenderbot model)"),cdo=l(),ih=a("li"),aie=a("strong"),mdo=o("blenderbot-small"),fdo=o(" \u2014 "),VB=a("a"),gdo=o("BlenderbotSmallTokenizer"),hdo=o(" (BlenderbotSmall model)"),udo=l(),dh=a("li"),nie=a("strong"),pdo=o("bloom"),_do=o(" \u2014 "),XB=a("a"),bdo=o("BloomTokenizerFast"),vdo=o(" (BLOOM model)"),Fdo=l(),ch=a("li"),sie=a("strong"),Tdo=o("byt5"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("ByT5Tokenizer"),Cdo=o(" (ByT5 model)"),wdo=l(),Qn=a("li"),lie=a("strong"),Ado=o("camembert"),Ldo=o(" \u2014 "),WB=a("a"),ydo=o("CamembertTokenizer"),xdo=o(" or "),QB=a("a"),$do=o("CamembertTokenizerFast"),kdo=o(" (CamemBERT model)"),Sdo=l(),mh=a("li"),iie=a("strong"),Rdo=o("canine"),Pdo=o(" \u2014 "),HB=a("a"),Bdo=o("CanineTokenizer"),Ido=o(" (CANINE model)"),Ndo=l(),Hn=a("li"),die=a("strong"),qdo=o("clip"),jdo=o(" \u2014 "),UB=a("a"),Ddo=o("CLIPTokenizer"),Gdo=o(" or "),JB=a("a"),Odo=o("CLIPTokenizerFast"),Vdo=o(" (CLIP model)"),Xdo=l(),Un=a("li"),cie=a("strong"),zdo=o("codegen"),Wdo=o(" \u2014 "),YB=a("a"),Qdo=o("CodeGenTokenizer"),Hdo=o(" or "),KB=a("a"),Udo=o("CodeGenTokenizerFast"),Jdo=o(" (CodeGen model)"),Ydo=l(),Jn=a("li"),mie=a("strong"),Kdo=o("convbert"),Zdo=o(" \u2014 "),ZB=a("a"),eco=o("ConvBertTokenizer"),oco=o(" or "),eI=a("a"),rco=o("ConvBertTokenizerFast"),tco=o(" (ConvBERT model)"),aco=l(),Yn=a("li"),fie=a("strong"),nco=o("cpm"),sco=o(" \u2014 "),oI=a("a"),lco=o("CpmTokenizer"),ico=o(" or "),rI=a("a"),dco=o("CpmTokenizerFast"),cco=o(" (CPM model)"),mco=l(),fh=a("li"),gie=a("strong"),fco=o("ctrl"),gco=o(" \u2014 "),tI=a("a"),hco=o("CTRLTokenizer"),uco=o(" (CTRL model)"),pco=l(),Kn=a("li"),hie=a("strong"),_co=o("data2vec-text"),bco=o(" \u2014 "),aI=a("a"),vco=o("RobertaTokenizer"),Fco=o(" or "),nI=a("a"),Tco=o("RobertaTokenizerFast"),Mco=o(" (Data2VecText model)"),Eco=l(),Zn=a("li"),uie=a("strong"),Cco=o("deberta"),wco=o(" \u2014 "),sI=a("a"),Aco=o("DebertaTokenizer"),Lco=o(" or "),lI=a("a"),yco=o("DebertaTokenizerFast"),xco=o(" (DeBERTa model)"),$co=l(),es=a("li"),pie=a("strong"),kco=o("deberta-v2"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("DebertaV2Tokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("DebertaV2TokenizerFast"),Ico=o(" (DeBERTa-v2 model)"),Nco=l(),os=a("li"),_ie=a("strong"),qco=o("distilbert"),jco=o(" \u2014 "),cI=a("a"),Dco=o("DistilBertTokenizer"),Gco=o(" or "),mI=a("a"),Oco=o("DistilBertTokenizerFast"),Vco=o(" (DistilBERT model)"),Xco=l(),rs=a("li"),bie=a("strong"),zco=o("dpr"),Wco=o(" \u2014 "),fI=a("a"),Qco=o("DPRQuestionEncoderTokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("DPRQuestionEncoderTokenizerFast"),Jco=o(" (DPR model)"),Yco=l(),ts=a("li"),vie=a("strong"),Kco=o("electra"),Zco=o(" \u2014 "),hI=a("a"),emo=o("ElectraTokenizer"),omo=o(" or "),uI=a("a"),rmo=o("ElectraTokenizerFast"),tmo=o(" (ELECTRA model)"),amo=l(),gh=a("li"),Fie=a("strong"),nmo=o("flaubert"),smo=o(" \u2014 "),pI=a("a"),lmo=o("FlaubertTokenizer"),imo=o(" (FlauBERT model)"),dmo=l(),as=a("li"),Tie=a("strong"),cmo=o("fnet"),mmo=o(" \u2014 "),_I=a("a"),fmo=o("FNetTokenizer"),gmo=o(" or "),bI=a("a"),hmo=o("FNetTokenizerFast"),umo=o(" (FNet model)"),pmo=l(),hh=a("li"),Mie=a("strong"),_mo=o("fsmt"),bmo=o(" \u2014 "),vI=a("a"),vmo=o("FSMTTokenizer"),Fmo=o(" (FairSeq Machine-Translation model)"),Tmo=l(),ns=a("li"),Eie=a("strong"),Mmo=o("funnel"),Emo=o(" \u2014 "),FI=a("a"),Cmo=o("FunnelTokenizer"),wmo=o(" or "),TI=a("a"),Amo=o("FunnelTokenizerFast"),Lmo=o(" (Funnel Transformer model)"),ymo=l(),ss=a("li"),Cie=a("strong"),xmo=o("gpt2"),$mo=o(" \u2014 "),MI=a("a"),kmo=o("GPT2Tokenizer"),Smo=o(" or "),EI=a("a"),Rmo=o("GPT2TokenizerFast"),Pmo=o(" (OpenAI GPT-2 model)"),Bmo=l(),ls=a("li"),wie=a("strong"),Imo=o("gpt_neo"),Nmo=o(" \u2014 "),CI=a("a"),qmo=o("GPT2Tokenizer"),jmo=o(" or "),wI=a("a"),Dmo=o("GPT2TokenizerFast"),Gmo=o(" (GPT Neo model)"),Omo=l(),uh=a("li"),Aie=a("strong"),Vmo=o("gpt_neox"),Xmo=o(" \u2014 "),AI=a("a"),zmo=o("GPTNeoXTokenizerFast"),Wmo=o(" (GPT NeoX model)"),Qmo=l(),is=a("li"),Lie=a("strong"),Hmo=o("gptj"),Umo=o(" \u2014 "),LI=a("a"),Jmo=o("GPT2Tokenizer"),Ymo=o(" or "),yI=a("a"),Kmo=o("GPT2TokenizerFast"),Zmo=o(" (GPT-J model)"),efo=l(),ds=a("li"),yie=a("strong"),ofo=o("groupvit"),rfo=o(" \u2014 "),xI=a("a"),tfo=o("CLIPTokenizer"),afo=o(" or "),$I=a("a"),nfo=o("CLIPTokenizerFast"),sfo=o(" (GroupViT model)"),lfo=l(),cs=a("li"),xie=a("strong"),ifo=o("herbert"),dfo=o(" \u2014 "),kI=a("a"),cfo=o("HerbertTokenizer"),mfo=o(" or "),SI=a("a"),ffo=o("HerbertTokenizerFast"),gfo=o(" (HerBERT model)"),hfo=l(),ph=a("li"),$ie=a("strong"),ufo=o("hubert"),pfo=o(" \u2014 "),RI=a("a"),_fo=o("Wav2Vec2CTCTokenizer"),bfo=o(" (Hubert model)"),vfo=l(),ms=a("li"),kie=a("strong"),Ffo=o("ibert"),Tfo=o(" \u2014 "),PI=a("a"),Mfo=o("RobertaTokenizer"),Efo=o(" or "),BI=a("a"),Cfo=o("RobertaTokenizerFast"),wfo=o(" (I-BERT model)"),Afo=l(),fs=a("li"),Sie=a("strong"),Lfo=o("layoutlm"),yfo=o(" \u2014 "),II=a("a"),xfo=o("LayoutLMTokenizer"),$fo=o(" or "),NI=a("a"),kfo=o("LayoutLMTokenizerFast"),Sfo=o(" (LayoutLM model)"),Rfo=l(),gs=a("li"),Rie=a("strong"),Pfo=o("layoutlmv2"),Bfo=o(" \u2014 "),qI=a("a"),Ifo=o("LayoutLMv2Tokenizer"),Nfo=o(" or "),jI=a("a"),qfo=o("LayoutLMv2TokenizerFast"),jfo=o(" (LayoutLMv2 model)"),Dfo=l(),hs=a("li"),Pie=a("strong"),Gfo=o("layoutlmv3"),Ofo=o(" \u2014 "),DI=a("a"),Vfo=o("LayoutLMv3Tokenizer"),Xfo=o(" or "),GI=a("a"),zfo=o("LayoutLMv3TokenizerFast"),Wfo=o(" (LayoutLMv3 model)"),Qfo=l(),us=a("li"),Bie=a("strong"),Hfo=o("layoutxlm"),Ufo=o(" \u2014 "),OI=a("a"),Jfo=o("LayoutXLMTokenizer"),Yfo=o(" or "),VI=a("a"),Kfo=o("LayoutXLMTokenizerFast"),Zfo=o(" (LayoutXLM model)"),ego=l(),ps=a("li"),Iie=a("strong"),ogo=o("led"),rgo=o(" \u2014 "),XI=a("a"),tgo=o("LEDTokenizer"),ago=o(" or "),zI=a("a"),ngo=o("LEDTokenizerFast"),sgo=o(" (LED model)"),lgo=l(),_s=a("li"),Nie=a("strong"),igo=o("longformer"),dgo=o(" \u2014 "),WI=a("a"),cgo=o("LongformerTokenizer"),mgo=o(" or "),QI=a("a"),fgo=o("LongformerTokenizerFast"),ggo=o(" (Longformer model)"),hgo=l(),bs=a("li"),qie=a("strong"),ugo=o("longt5"),pgo=o(" \u2014 "),HI=a("a"),_go=o("T5Tokenizer"),bgo=o(" or "),UI=a("a"),vgo=o("T5TokenizerFast"),Fgo=o(" (LongT5 model)"),Tgo=l(),_h=a("li"),jie=a("strong"),Mgo=o("luke"),Ego=o(" \u2014 "),JI=a("a"),Cgo=o("LukeTokenizer"),wgo=o(" (LUKE model)"),Ago=l(),vs=a("li"),Die=a("strong"),Lgo=o("lxmert"),ygo=o(" \u2014 "),YI=a("a"),xgo=o("LxmertTokenizer"),$go=o(" or "),KI=a("a"),kgo=o("LxmertTokenizerFast"),Sgo=o(" (LXMERT model)"),Rgo=l(),bh=a("li"),Gie=a("strong"),Pgo=o("m2m_100"),Bgo=o(" \u2014 "),ZI=a("a"),Igo=o("M2M100Tokenizer"),Ngo=o(" (M2M100 model)"),qgo=l(),vh=a("li"),Oie=a("strong"),jgo=o("marian"),Dgo=o(" \u2014 "),eN=a("a"),Ggo=o("MarianTokenizer"),Ogo=o(" (Marian model)"),Vgo=l(),Fs=a("li"),Vie=a("strong"),Xgo=o("mbart"),zgo=o(" \u2014 "),oN=a("a"),Wgo=o("MBartTokenizer"),Qgo=o(" or "),rN=a("a"),Hgo=o("MBartTokenizerFast"),Ugo=o(" (mBART model)"),Jgo=l(),Ts=a("li"),Xie=a("strong"),Ygo=o("mbart50"),Kgo=o(" \u2014 "),tN=a("a"),Zgo=o("MBart50Tokenizer"),eho=o(" or "),aN=a("a"),oho=o("MBart50TokenizerFast"),rho=o(" (mBART-50 model)"),tho=l(),Ms=a("li"),zie=a("strong"),aho=o("megatron-bert"),nho=o(" \u2014 "),nN=a("a"),sho=o("BertTokenizer"),lho=o(" or "),sN=a("a"),iho=o("BertTokenizerFast"),dho=o(" (Megatron-BERT model)"),cho=l(),Fh=a("li"),Wie=a("strong"),mho=o("mluke"),fho=o(" \u2014 "),lN=a("a"),gho=o("MLukeTokenizer"),hho=o(" (mLUKE model)"),uho=l(),Es=a("li"),Qie=a("strong"),pho=o("mobilebert"),_ho=o(" \u2014 "),iN=a("a"),bho=o("MobileBertTokenizer"),vho=o(" or "),dN=a("a"),Fho=o("MobileBertTokenizerFast"),Tho=o(" (MobileBERT model)"),Mho=l(),Cs=a("li"),Hie=a("strong"),Eho=o("mpnet"),Cho=o(" \u2014 "),cN=a("a"),who=o("MPNetTokenizer"),Aho=o(" or "),mN=a("a"),Lho=o("MPNetTokenizerFast"),yho=o(" (MPNet model)"),xho=l(),ws=a("li"),Uie=a("strong"),$ho=o("mt5"),kho=o(" \u2014 "),fN=a("a"),Sho=o("MT5Tokenizer"),Rho=o(" or "),gN=a("a"),Pho=o("MT5TokenizerFast"),Bho=o(" (MT5 model)"),Iho=l(),As=a("li"),Jie=a("strong"),Nho=o("mvp"),qho=o(" \u2014 "),hN=a("a"),jho=o("MvpTokenizer"),Dho=o(" or "),uN=a("a"),Gho=o("MvpTokenizerFast"),Oho=o(" (MVP model)"),Vho=l(),Ls=a("li"),Yie=a("strong"),Xho=o("nezha"),zho=o(" \u2014 "),pN=a("a"),Who=o("BertTokenizer"),Qho=o(" or "),_N=a("a"),Hho=o("BertTokenizerFast"),Uho=o(" (Nezha model)"),Jho=l(),ys=a("li"),Kie=a("strong"),Yho=o("nllb"),Kho=o(" \u2014 "),bN=a("a"),Zho=o("NllbTokenizer"),euo=o(" or "),vN=a("a"),ouo=o("NllbTokenizerFast"),ruo=o(" (NLLB model)"),tuo=l(),xs=a("li"),Zie=a("strong"),auo=o("nystromformer"),nuo=o(" \u2014 "),FN=a("a"),suo=o("AlbertTokenizer"),luo=o(" or "),TN=a("a"),iuo=o("AlbertTokenizerFast"),duo=o(" (Nystr\xF6mformer model)"),cuo=l(),$s=a("li"),ede=a("strong"),muo=o("openai-gpt"),fuo=o(" \u2014 "),MN=a("a"),guo=o("OpenAIGPTTokenizer"),huo=o(" or "),EN=a("a"),uuo=o("OpenAIGPTTokenizerFast"),puo=o(" (OpenAI GPT model)"),_uo=l(),Th=a("li"),ode=a("strong"),buo=o("opt"),vuo=o(" \u2014 "),CN=a("a"),Fuo=o("GPT2Tokenizer"),Tuo=o(" (OPT model)"),Muo=l(),ks=a("li"),rde=a("strong"),Euo=o("owlvit"),Cuo=o(" \u2014 "),wN=a("a"),wuo=o("CLIPTokenizer"),Auo=o(" or "),AN=a("a"),Luo=o("CLIPTokenizerFast"),yuo=o(" (OWL-ViT model)"),xuo=l(),Ss=a("li"),tde=a("strong"),$uo=o("pegasus"),kuo=o(" \u2014 "),LN=a("a"),Suo=o("PegasusTokenizer"),Ruo=o(" or "),yN=a("a"),Puo=o("PegasusTokenizerFast"),Buo=o(" (Pegasus model)"),Iuo=l(),Mh=a("li"),ade=a("strong"),Nuo=o("perceiver"),quo=o(" \u2014 "),xN=a("a"),juo=o("PerceiverTokenizer"),Duo=o(" (Perceiver model)"),Guo=l(),Eh=a("li"),nde=a("strong"),Ouo=o("phobert"),Vuo=o(" \u2014 "),$N=a("a"),Xuo=o("PhobertTokenizer"),zuo=o(" (PhoBERT model)"),Wuo=l(),Ch=a("li"),sde=a("strong"),Quo=o("plbart"),Huo=o(" \u2014 "),kN=a("a"),Uuo=o("PLBartTokenizer"),Juo=o(" (PLBart model)"),Yuo=l(),wh=a("li"),lde=a("strong"),Kuo=o("prophetnet"),Zuo=o(" \u2014 "),SN=a("a"),epo=o("ProphetNetTokenizer"),opo=o(" (ProphetNet model)"),rpo=l(),Rs=a("li"),ide=a("strong"),tpo=o("qdqbert"),apo=o(" \u2014 "),RN=a("a"),npo=o("BertTokenizer"),spo=o(" or "),PN=a("a"),lpo=o("BertTokenizerFast"),ipo=o(" (QDQBert model)"),dpo=l(),Ah=a("li"),dde=a("strong"),cpo=o("rag"),mpo=o(" \u2014 "),BN=a("a"),fpo=o("RagTokenizer"),gpo=o(" (RAG model)"),hpo=l(),Ps=a("li"),cde=a("strong"),upo=o("realm"),ppo=o(" \u2014 "),IN=a("a"),_po=o("RealmTokenizer"),bpo=o(" or "),NN=a("a"),vpo=o("RealmTokenizerFast"),Fpo=o(" (REALM model)"),Tpo=l(),Bs=a("li"),mde=a("strong"),Mpo=o("reformer"),Epo=o(" \u2014 "),qN=a("a"),Cpo=o("ReformerTokenizer"),wpo=o(" or "),jN=a("a"),Apo=o("ReformerTokenizerFast"),Lpo=o(" (Reformer model)"),ypo=l(),Is=a("li"),fde=a("strong"),xpo=o("rembert"),$po=o(" \u2014 "),DN=a("a"),kpo=o("RemBertTokenizer"),Spo=o(" or "),GN=a("a"),Rpo=o("RemBertTokenizerFast"),Ppo=o(" (RemBERT model)"),Bpo=l(),Ns=a("li"),gde=a("strong"),Ipo=o("retribert"),Npo=o(" \u2014 "),ON=a("a"),qpo=o("RetriBertTokenizer"),jpo=o(" or "),VN=a("a"),Dpo=o("RetriBertTokenizerFast"),Gpo=o(" (RetriBERT model)"),Opo=l(),qs=a("li"),hde=a("strong"),Vpo=o("roberta"),Xpo=o(" \u2014 "),XN=a("a"),zpo=o("RobertaTokenizer"),Wpo=o(" or "),zN=a("a"),Qpo=o("RobertaTokenizerFast"),Hpo=o(" (RoBERTa model)"),Upo=l(),js=a("li"),ude=a("strong"),Jpo=o("roformer"),Ypo=o(" \u2014 "),WN=a("a"),Kpo=o("RoFormerTokenizer"),Zpo=o(" or "),QN=a("a"),e_o=o("RoFormerTokenizerFast"),o_o=o(" (RoFormer model)"),r_o=l(),Lh=a("li"),pde=a("strong"),t_o=o("speech_to_text"),a_o=o(" \u2014 "),HN=a("a"),n_o=o("Speech2TextTokenizer"),s_o=o(" (Speech2Text model)"),l_o=l(),yh=a("li"),_de=a("strong"),i_o=o("speech_to_text_2"),d_o=o(" \u2014 "),UN=a("a"),c_o=o("Speech2Text2Tokenizer"),m_o=o(" (Speech2Text2 model)"),f_o=l(),Ds=a("li"),bde=a("strong"),g_o=o("splinter"),h_o=o(" \u2014 "),JN=a("a"),u_o=o("SplinterTokenizer"),p_o=o(" or "),YN=a("a"),__o=o("SplinterTokenizerFast"),b_o=o(" (Splinter model)"),v_o=l(),Gs=a("li"),vde=a("strong"),F_o=o("squeezebert"),T_o=o(" \u2014 "),KN=a("a"),M_o=o("SqueezeBertTokenizer"),E_o=o(" or "),ZN=a("a"),C_o=o("SqueezeBertTokenizerFast"),w_o=o(" (SqueezeBERT model)"),A_o=l(),Os=a("li"),Fde=a("strong"),L_o=o("t5"),y_o=o(" \u2014 "),eq=a("a"),x_o=o("T5Tokenizer"),$_o=o(" or "),oq=a("a"),k_o=o("T5TokenizerFast"),S_o=o(" (T5 model)"),R_o=l(),xh=a("li"),Tde=a("strong"),P_o=o("tapas"),B_o=o(" \u2014 "),rq=a("a"),I_o=o("TapasTokenizer"),N_o=o(" (TAPAS model)"),q_o=l(),$h=a("li"),Mde=a("strong"),j_o=o("tapex"),D_o=o(" \u2014 "),tq=a("a"),G_o=o("TapexTokenizer"),O_o=o(" (TAPEX model)"),V_o=l(),kh=a("li"),Ede=a("strong"),X_o=o("transfo-xl"),z_o=o(" \u2014 "),aq=a("a"),W_o=o("TransfoXLTokenizer"),Q_o=o(" (Transformer-XL model)"),H_o=l(),Vs=a("li"),Cde=a("strong"),U_o=o("vilt"),J_o=o(" \u2014 "),nq=a("a"),Y_o=o("BertTokenizer"),K_o=o(" or "),sq=a("a"),Z_o=o("BertTokenizerFast"),e2o=o(" (ViLT model)"),o2o=l(),Xs=a("li"),wde=a("strong"),r2o=o("visual_bert"),t2o=o(" \u2014 "),lq=a("a"),a2o=o("BertTokenizer"),n2o=o(" or "),iq=a("a"),s2o=o("BertTokenizerFast"),l2o=o(" (VisualBERT model)"),i2o=l(),Sh=a("li"),Ade=a("strong"),d2o=o("wav2vec2"),c2o=o(" \u2014 "),dq=a("a"),m2o=o("Wav2Vec2CTCTokenizer"),f2o=o(" (Wav2Vec2 model)"),g2o=l(),Rh=a("li"),Lde=a("strong"),h2o=o("wav2vec2-conformer"),u2o=o(" \u2014 "),cq=a("a"),p2o=o("Wav2Vec2CTCTokenizer"),_2o=o(" (Wav2Vec2-Conformer model)"),b2o=l(),Ph=a("li"),yde=a("strong"),v2o=o("wav2vec2_phoneme"),F2o=o(" \u2014 "),mq=a("a"),T2o=o("Wav2Vec2PhonemeCTCTokenizer"),M2o=o(" (Wav2Vec2Phoneme model)"),E2o=l(),zs=a("li"),xde=a("strong"),C2o=o("xglm"),w2o=o(" \u2014 "),fq=a("a"),A2o=o("XGLMTokenizer"),L2o=o(" or "),gq=a("a"),y2o=o("XGLMTokenizerFast"),x2o=o(" (XGLM model)"),$2o=l(),Bh=a("li"),$de=a("strong"),k2o=o("xlm"),S2o=o(" \u2014 "),hq=a("a"),R2o=o("XLMTokenizer"),P2o=o(" (XLM model)"),B2o=l(),Ih=a("li"),kde=a("strong"),I2o=o("xlm-prophetnet"),N2o=o(" \u2014 "),uq=a("a"),q2o=o("XLMProphetNetTokenizer"),j2o=o(" (XLM-ProphetNet model)"),D2o=l(),Ws=a("li"),Sde=a("strong"),G2o=o("xlm-roberta"),O2o=o(" \u2014 "),pq=a("a"),V2o=o("XLMRobertaTokenizer"),X2o=o(" or "),_q=a("a"),z2o=o("XLMRobertaTokenizerFast"),W2o=o(" (XLM-RoBERTa model)"),Q2o=l(),Qs=a("li"),Rde=a("strong"),H2o=o("xlm-roberta-xl"),U2o=o(" \u2014 "),bq=a("a"),J2o=o("RobertaTokenizer"),Y2o=o(" or "),vq=a("a"),K2o=o("RobertaTokenizerFast"),Z2o=o(" (XLM-RoBERTa-XL model)"),ebo=l(),Hs=a("li"),Pde=a("strong"),obo=o("xlnet"),rbo=o(" \u2014 "),Fq=a("a"),tbo=o("XLNetTokenizer"),abo=o(" or "),Tq=a("a"),nbo=o("XLNetTokenizerFast"),sbo=o(" (XLNet model)"),lbo=l(),Us=a("li"),Bde=a("strong"),ibo=o("yoso"),dbo=o(" \u2014 "),Mq=a("a"),cbo=o("AlbertTokenizer"),mbo=o(" or "),Eq=a("a"),fbo=o("AlbertTokenizerFast"),gbo=o(" (YOSO model)"),hbo=l(),F(Nh.$$.fragment),ubo=l(),qh=a("div"),F(jy.$$.fragment),pbo=l(),Ide=a("p"),_bo=o("Register a new tokenizer in this mapping."),qze=l(),Gi=a("h2"),jh=a("a"),Nde=a("span"),F(Dy.$$.fragment),bbo=l(),qde=a("span"),vbo=o("AutoFeatureExtractor"),jze=l(),xo=a("div"),F(Gy.$$.fragment),Fbo=l(),Oy=a("p"),Tbo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cq=a("a"),Mbo=o("AutoFeatureExtractor.from_pretrained()"),Ebo=o(" class method."),Cbo=l(),Vy=a("p"),wbo=o("This class cannot be instantiated directly using "),jde=a("code"),Abo=o("__init__()"),Lbo=o(" (throws an error)."),ybo=l(),Ue=a("div"),F(Xy.$$.fragment),xbo=l(),Dde=a("p"),$bo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kbo=l(),Ba=a("p"),Sbo=o("The feature extractor class to instantiate is selected based on the "),Gde=a("code"),Rbo=o("model_type"),Pbo=o(` property of the config object
(either passed as an argument or loaded from `),Ode=a("code"),Bbo=o("pretrained_model_name_or_path"),Ibo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vde=a("code"),Nbo=o("pretrained_model_name_or_path"),qbo=o(":"),jbo=l(),J=a("ul"),Dh=a("li"),Xde=a("strong"),Dbo=o("beit"),Gbo=o(" \u2014 "),wq=a("a"),Obo=o("BeitFeatureExtractor"),Vbo=o(" (BEiT model)"),Xbo=l(),Gh=a("li"),zde=a("strong"),zbo=o("clip"),Wbo=o(" \u2014 "),Aq=a("a"),Qbo=o("CLIPFeatureExtractor"),Hbo=o(" (CLIP model)"),Ubo=l(),Oh=a("li"),Wde=a("strong"),Jbo=o("convnext"),Ybo=o(" \u2014 "),Lq=a("a"),Kbo=o("ConvNextFeatureExtractor"),Zbo=o(" (ConvNeXT model)"),evo=l(),Vh=a("li"),Qde=a("strong"),ovo=o("cvt"),rvo=o(" \u2014 "),yq=a("a"),tvo=o("ConvNextFeatureExtractor"),avo=o(" (CvT model)"),nvo=l(),Xh=a("li"),Hde=a("strong"),svo=o("data2vec-audio"),lvo=o(" \u2014 "),xq=a("a"),ivo=o("Wav2Vec2FeatureExtractor"),dvo=o(" (Data2VecAudio model)"),cvo=l(),zh=a("li"),Ude=a("strong"),mvo=o("data2vec-vision"),fvo=o(" \u2014 "),$q=a("a"),gvo=o("BeitFeatureExtractor"),hvo=o(" (Data2VecVision model)"),uvo=l(),Wh=a("li"),Jde=a("strong"),pvo=o("deit"),_vo=o(" \u2014 "),kq=a("a"),bvo=o("DeiTFeatureExtractor"),vvo=o(" (DeiT model)"),Fvo=l(),Qh=a("li"),Yde=a("strong"),Tvo=o("detr"),Mvo=o(" \u2014 "),Sq=a("a"),Evo=o("DetrFeatureExtractor"),Cvo=o(" (DETR model)"),wvo=l(),Hh=a("li"),Kde=a("strong"),Avo=o("dpt"),Lvo=o(" \u2014 "),Rq=a("a"),yvo=o("DPTFeatureExtractor"),xvo=o(" (DPT model)"),$vo=l(),Uh=a("li"),Zde=a("strong"),kvo=o("flava"),Svo=o(" \u2014 "),Pq=a("a"),Rvo=o("FlavaFeatureExtractor"),Pvo=o(" (FLAVA model)"),Bvo=l(),Jh=a("li"),ece=a("strong"),Ivo=o("glpn"),Nvo=o(" \u2014 "),Bq=a("a"),qvo=o("GLPNFeatureExtractor"),jvo=o(" (GLPN model)"),Dvo=l(),Yh=a("li"),oce=a("strong"),Gvo=o("groupvit"),Ovo=o(" \u2014 "),Iq=a("a"),Vvo=o("CLIPFeatureExtractor"),Xvo=o(" (GroupViT model)"),zvo=l(),Kh=a("li"),rce=a("strong"),Wvo=o("hubert"),Qvo=o(" \u2014 "),Nq=a("a"),Hvo=o("Wav2Vec2FeatureExtractor"),Uvo=o(" (Hubert model)"),Jvo=l(),Zh=a("li"),tce=a("strong"),Yvo=o("imagegpt"),Kvo=o(" \u2014 "),qq=a("a"),Zvo=o("ImageGPTFeatureExtractor"),e1o=o(" (ImageGPT model)"),o1o=l(),eu=a("li"),ace=a("strong"),r1o=o("layoutlmv2"),t1o=o(" \u2014 "),jq=a("a"),a1o=o("LayoutLMv2FeatureExtractor"),n1o=o(" (LayoutLMv2 model)"),s1o=l(),ou=a("li"),nce=a("strong"),l1o=o("layoutlmv3"),i1o=o(" \u2014 "),Dq=a("a"),d1o=o("LayoutLMv3FeatureExtractor"),c1o=o(" (LayoutLMv3 model)"),m1o=l(),ru=a("li"),sce=a("strong"),f1o=o("levit"),g1o=o(" \u2014 "),Gq=a("a"),h1o=o("LevitFeatureExtractor"),u1o=o(" (LeViT model)"),p1o=l(),tu=a("li"),lce=a("strong"),_1o=o("maskformer"),b1o=o(" \u2014 "),Oq=a("a"),v1o=o("MaskFormerFeatureExtractor"),F1o=o(" (MaskFormer model)"),T1o=l(),au=a("li"),ice=a("strong"),M1o=o("mctct"),E1o=o(" \u2014 "),Vq=a("a"),C1o=o("MCTCTFeatureExtractor"),w1o=o(" (M-CTC-T model)"),A1o=l(),nu=a("li"),dce=a("strong"),L1o=o("mobilevit"),y1o=o(" \u2014 "),Xq=a("a"),x1o=o("MobileViTFeatureExtractor"),$1o=o(" (MobileViT model)"),k1o=l(),su=a("li"),cce=a("strong"),S1o=o("owlvit"),R1o=o(" \u2014 "),zq=a("a"),P1o=o("OwlViTFeatureExtractor"),B1o=o(" (OWL-ViT model)"),I1o=l(),lu=a("li"),mce=a("strong"),N1o=o("perceiver"),q1o=o(" \u2014 "),Wq=a("a"),j1o=o("PerceiverFeatureExtractor"),D1o=o(" (Perceiver model)"),G1o=l(),iu=a("li"),fce=a("strong"),O1o=o("poolformer"),V1o=o(" \u2014 "),Qq=a("a"),X1o=o("PoolFormerFeatureExtractor"),z1o=o(" (PoolFormer model)"),W1o=l(),du=a("li"),gce=a("strong"),Q1o=o("regnet"),H1o=o(" \u2014 "),Hq=a("a"),U1o=o("ConvNextFeatureExtractor"),J1o=o(" (RegNet model)"),Y1o=l(),cu=a("li"),hce=a("strong"),K1o=o("resnet"),Z1o=o(" \u2014 "),Uq=a("a"),eFo=o("ConvNextFeatureExtractor"),oFo=o(" (ResNet model)"),rFo=l(),mu=a("li"),uce=a("strong"),tFo=o("segformer"),aFo=o(" \u2014 "),Jq=a("a"),nFo=o("SegformerFeatureExtractor"),sFo=o(" (SegFormer model)"),lFo=l(),fu=a("li"),pce=a("strong"),iFo=o("speech_to_text"),dFo=o(" \u2014 "),Yq=a("a"),cFo=o("Speech2TextFeatureExtractor"),mFo=o(" (Speech2Text model)"),fFo=l(),gu=a("li"),_ce=a("strong"),gFo=o("swin"),hFo=o(" \u2014 "),Kq=a("a"),uFo=o("ViTFeatureExtractor"),pFo=o(" (Swin Transformer model)"),_Fo=l(),hu=a("li"),bce=a("strong"),bFo=o("swinv2"),vFo=o(" \u2014 "),Zq=a("a"),FFo=o("ViTFeatureExtractor"),TFo=o(" (Swin Transformer V2 model)"),MFo=l(),uu=a("li"),vce=a("strong"),EFo=o("van"),CFo=o(" \u2014 "),ej=a("a"),wFo=o("ConvNextFeatureExtractor"),AFo=o(" (VAN model)"),LFo=l(),pu=a("li"),Fce=a("strong"),yFo=o("vilt"),xFo=o(" \u2014 "),oj=a("a"),$Fo=o("ViltFeatureExtractor"),kFo=o(" (ViLT model)"),SFo=l(),_u=a("li"),Tce=a("strong"),RFo=o("vit"),PFo=o(" \u2014 "),rj=a("a"),BFo=o("ViTFeatureExtractor"),IFo=o(" (ViT model)"),NFo=l(),bu=a("li"),Mce=a("strong"),qFo=o("vit_mae"),jFo=o(" \u2014 "),tj=a("a"),DFo=o("ViTFeatureExtractor"),GFo=o(" (ViTMAE model)"),OFo=l(),vu=a("li"),Ece=a("strong"),VFo=o("wav2vec2"),XFo=o(" \u2014 "),aj=a("a"),zFo=o("Wav2Vec2FeatureExtractor"),WFo=o(" (Wav2Vec2 model)"),QFo=l(),Fu=a("li"),Cce=a("strong"),HFo=o("wav2vec2-conformer"),UFo=o(" \u2014 "),nj=a("a"),JFo=o("Wav2Vec2FeatureExtractor"),YFo=o(" (Wav2Vec2-Conformer model)"),KFo=l(),Tu=a("li"),wce=a("strong"),ZFo=o("yolos"),eTo=o(" \u2014 "),sj=a("a"),oTo=o("YolosFeatureExtractor"),rTo=o(" (YOLOS model)"),tTo=l(),F(Mu.$$.fragment),aTo=l(),F(Eu.$$.fragment),nTo=l(),Cu=a("div"),F(zy.$$.fragment),sTo=l(),Ace=a("p"),lTo=o("Register a new feature extractor for this class."),Dze=l(),Oi=a("h2"),wu=a("a"),Lce=a("span"),F(Wy.$$.fragment),iTo=l(),yce=a("span"),dTo=o("AutoProcessor"),Gze=l(),$o=a("div"),F(Qy.$$.fragment),cTo=l(),Hy=a("p"),mTo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lj=a("a"),fTo=o("AutoProcessor.from_pretrained()"),gTo=o(" class method."),hTo=l(),Uy=a("p"),uTo=o("This class cannot be instantiated directly using "),xce=a("code"),pTo=o("__init__()"),_To=o(" (throws an error)."),bTo=l(),Je=a("div"),F(Jy.$$.fragment),vTo=l(),$ce=a("p"),FTo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),TTo=l(),Vi=a("p"),MTo=o("The processor class to instantiate is selected based on the "),kce=a("code"),ETo=o("model_type"),CTo=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),wTo=o("pretrained_model_name_or_path"),ATo=o(" if possible):"),LTo=l(),me=a("ul"),Au=a("li"),Rce=a("strong"),yTo=o("clip"),xTo=o(" \u2014 "),ij=a("a"),$To=o("CLIPProcessor"),kTo=o(" (CLIP model)"),STo=l(),Lu=a("li"),Pce=a("strong"),RTo=o("flava"),PTo=o(" \u2014 "),dj=a("a"),BTo=o("FlavaProcessor"),ITo=o(" (FLAVA model)"),NTo=l(),yu=a("li"),Bce=a("strong"),qTo=o("groupvit"),jTo=o(" \u2014 "),cj=a("a"),DTo=o("CLIPProcessor"),GTo=o(" (GroupViT model)"),OTo=l(),xu=a("li"),Ice=a("strong"),VTo=o("layoutlmv2"),XTo=o(" \u2014 "),mj=a("a"),zTo=o("LayoutLMv2Processor"),WTo=o(" (LayoutLMv2 model)"),QTo=l(),$u=a("li"),Nce=a("strong"),HTo=o("layoutlmv3"),UTo=o(" \u2014 "),fj=a("a"),JTo=o("LayoutLMv3Processor"),YTo=o(" (LayoutLMv3 model)"),KTo=l(),ku=a("li"),qce=a("strong"),ZTo=o("layoutxlm"),eMo=o(" \u2014 "),gj=a("a"),oMo=o("LayoutXLMProcessor"),rMo=o(" (LayoutXLM model)"),tMo=l(),Su=a("li"),jce=a("strong"),aMo=o("owlvit"),nMo=o(" \u2014 "),hj=a("a"),sMo=o("OwlViTProcessor"),lMo=o(" (OWL-ViT model)"),iMo=l(),Ru=a("li"),Dce=a("strong"),dMo=o("sew"),cMo=o(" \u2014 "),uj=a("a"),mMo=o("Wav2Vec2Processor"),fMo=o(" (SEW model)"),gMo=l(),Pu=a("li"),Gce=a("strong"),hMo=o("sew-d"),uMo=o(" \u2014 "),pj=a("a"),pMo=o("Wav2Vec2Processor"),_Mo=o(" (SEW-D model)"),bMo=l(),Bu=a("li"),Oce=a("strong"),vMo=o("speech_to_text"),FMo=o(" \u2014 "),_j=a("a"),TMo=o("Speech2TextProcessor"),MMo=o(" (Speech2Text model)"),EMo=l(),Iu=a("li"),Vce=a("strong"),CMo=o("speech_to_text_2"),wMo=o(" \u2014 "),bj=a("a"),AMo=o("Speech2Text2Processor"),LMo=o(" (Speech2Text2 model)"),yMo=l(),Nu=a("li"),Xce=a("strong"),xMo=o("trocr"),$Mo=o(" \u2014 "),vj=a("a"),kMo=o("TrOCRProcessor"),SMo=o(" (TrOCR model)"),RMo=l(),qu=a("li"),zce=a("strong"),PMo=o("unispeech"),BMo=o(" \u2014 "),Fj=a("a"),IMo=o("Wav2Vec2Processor"),NMo=o(" (UniSpeech model)"),qMo=l(),ju=a("li"),Wce=a("strong"),jMo=o("unispeech-sat"),DMo=o(" \u2014 "),Tj=a("a"),GMo=o("Wav2Vec2Processor"),OMo=o(" (UniSpeechSat model)"),VMo=l(),Du=a("li"),Qce=a("strong"),XMo=o("vilt"),zMo=o(" \u2014 "),Mj=a("a"),WMo=o("ViltProcessor"),QMo=o(" (ViLT model)"),HMo=l(),Gu=a("li"),Hce=a("strong"),UMo=o("vision-text-dual-encoder"),JMo=o(" \u2014 "),Ej=a("a"),YMo=o("VisionTextDualEncoderProcessor"),KMo=o(" (VisionTextDualEncoder model)"),ZMo=l(),Ou=a("li"),Uce=a("strong"),e4o=o("wav2vec2"),o4o=o(" \u2014 "),Cj=a("a"),r4o=o("Wav2Vec2Processor"),t4o=o(" (Wav2Vec2 model)"),a4o=l(),Vu=a("li"),Jce=a("strong"),n4o=o("wav2vec2-conformer"),s4o=o(" \u2014 "),wj=a("a"),l4o=o("Wav2Vec2Processor"),i4o=o(" (Wav2Vec2-Conformer model)"),d4o=l(),Xu=a("li"),Yce=a("strong"),c4o=o("wavlm"),m4o=o(" \u2014 "),Aj=a("a"),f4o=o("Wav2Vec2Processor"),g4o=o(" (WavLM model)"),h4o=l(),F(zu.$$.fragment),u4o=l(),F(Wu.$$.fragment),p4o=l(),Qu=a("div"),F(Yy.$$.fragment),_4o=l(),Kce=a("p"),b4o=o("Register a new processor for this class."),Oze=l(),Xi=a("h2"),Hu=a("a"),Zce=a("span"),F(Ky.$$.fragment),v4o=l(),eme=a("span"),F4o=o("AutoModel"),Vze=l(),ko=a("div"),F(Zy.$$.fragment),T4o=l(),zi=a("p"),M4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Lj=a("a"),E4o=o("from_pretrained()"),C4o=o(" class method or the "),yj=a("a"),w4o=o("from_config()"),A4o=o(` class
method.`),L4o=l(),e8=a("p"),y4o=o("This class cannot be instantiated directly using "),ome=a("code"),x4o=o("__init__()"),$4o=o(" (throws an error)."),k4o=l(),it=a("div"),F(o8.$$.fragment),S4o=l(),rme=a("p"),R4o=o("Instantiates one of the base model classes of the library from a configuration."),P4o=l(),Wi=a("p"),B4o=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),I4o=o("not"),N4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),q4o=o("from_pretrained()"),j4o=o(" to load the model weights."),D4o=l(),F(Uu.$$.fragment),G4o=l(),Ye=a("div"),F(r8.$$.fragment),O4o=l(),ame=a("p"),V4o=o("Instantiate one of the base model classes of the library from a pretrained model."),X4o=l(),Ia=a("p"),z4o=o("The model class to instantiate is selected based on the "),nme=a("code"),W4o=o("model_type"),Q4o=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),H4o=o("pretrained_model_name_or_path"),U4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),J4o=o("pretrained_model_name_or_path"),Y4o=o(":"),K4o=l(),y=a("ul"),Ju=a("li"),ime=a("strong"),Z4o=o("albert"),eEo=o(" \u2014 "),$j=a("a"),oEo=o("AlbertModel"),rEo=o(" (ALBERT model)"),tEo=l(),Yu=a("li"),dme=a("strong"),aEo=o("bart"),nEo=o(" \u2014 "),kj=a("a"),sEo=o("BartModel"),lEo=o(" (BART model)"),iEo=l(),Ku=a("li"),cme=a("strong"),dEo=o("beit"),cEo=o(" \u2014 "),Sj=a("a"),mEo=o("BeitModel"),fEo=o(" (BEiT model)"),gEo=l(),Zu=a("li"),mme=a("strong"),hEo=o("bert"),uEo=o(" \u2014 "),Rj=a("a"),pEo=o("BertModel"),_Eo=o(" (BERT model)"),bEo=l(),ep=a("li"),fme=a("strong"),vEo=o("bert-generation"),FEo=o(" \u2014 "),Pj=a("a"),TEo=o("BertGenerationEncoder"),MEo=o(" (Bert Generation model)"),EEo=l(),op=a("li"),gme=a("strong"),CEo=o("big_bird"),wEo=o(" \u2014 "),Bj=a("a"),AEo=o("BigBirdModel"),LEo=o(" (BigBird model)"),yEo=l(),rp=a("li"),hme=a("strong"),xEo=o("bigbird_pegasus"),$Eo=o(" \u2014 "),Ij=a("a"),kEo=o("BigBirdPegasusModel"),SEo=o(" (BigBird-Pegasus model)"),REo=l(),tp=a("li"),ume=a("strong"),PEo=o("blenderbot"),BEo=o(" \u2014 "),Nj=a("a"),IEo=o("BlenderbotModel"),NEo=o(" (Blenderbot model)"),qEo=l(),ap=a("li"),pme=a("strong"),jEo=o("blenderbot-small"),DEo=o(" \u2014 "),qj=a("a"),GEo=o("BlenderbotSmallModel"),OEo=o(" (BlenderbotSmall model)"),VEo=l(),np=a("li"),_me=a("strong"),XEo=o("bloom"),zEo=o(" \u2014 "),jj=a("a"),WEo=o("BloomModel"),QEo=o(" (BLOOM model)"),HEo=l(),sp=a("li"),bme=a("strong"),UEo=o("camembert"),JEo=o(" \u2014 "),Dj=a("a"),YEo=o("CamembertModel"),KEo=o(" (CamemBERT model)"),ZEo=l(),lp=a("li"),vme=a("strong"),eCo=o("canine"),oCo=o(" \u2014 "),Gj=a("a"),rCo=o("CanineModel"),tCo=o(" (CANINE model)"),aCo=l(),ip=a("li"),Fme=a("strong"),nCo=o("clip"),sCo=o(" \u2014 "),Oj=a("a"),lCo=o("CLIPModel"),iCo=o(" (CLIP model)"),dCo=l(),dp=a("li"),Tme=a("strong"),cCo=o("codegen"),mCo=o(" \u2014 "),Vj=a("a"),fCo=o("CodeGenModel"),gCo=o(" (CodeGen model)"),hCo=l(),cp=a("li"),Mme=a("strong"),uCo=o("convbert"),pCo=o(" \u2014 "),Xj=a("a"),_Co=o("ConvBertModel"),bCo=o(" (ConvBERT model)"),vCo=l(),mp=a("li"),Eme=a("strong"),FCo=o("convnext"),TCo=o(" \u2014 "),zj=a("a"),MCo=o("ConvNextModel"),ECo=o(" (ConvNeXT model)"),CCo=l(),fp=a("li"),Cme=a("strong"),wCo=o("ctrl"),ACo=o(" \u2014 "),Wj=a("a"),LCo=o("CTRLModel"),yCo=o(" (CTRL model)"),xCo=l(),gp=a("li"),wme=a("strong"),$Co=o("cvt"),kCo=o(" \u2014 "),Qj=a("a"),SCo=o("CvtModel"),RCo=o(" (CvT model)"),PCo=l(),hp=a("li"),Ame=a("strong"),BCo=o("data2vec-audio"),ICo=o(" \u2014 "),Hj=a("a"),NCo=o("Data2VecAudioModel"),qCo=o(" (Data2VecAudio model)"),jCo=l(),up=a("li"),Lme=a("strong"),DCo=o("data2vec-text"),GCo=o(" \u2014 "),Uj=a("a"),OCo=o("Data2VecTextModel"),VCo=o(" (Data2VecText model)"),XCo=l(),pp=a("li"),yme=a("strong"),zCo=o("data2vec-vision"),WCo=o(" \u2014 "),Jj=a("a"),QCo=o("Data2VecVisionModel"),HCo=o(" (Data2VecVision model)"),UCo=l(),_p=a("li"),xme=a("strong"),JCo=o("deberta"),YCo=o(" \u2014 "),Yj=a("a"),KCo=o("DebertaModel"),ZCo=o(" (DeBERTa model)"),e5o=l(),bp=a("li"),$me=a("strong"),o5o=o("deberta-v2"),r5o=o(" \u2014 "),Kj=a("a"),t5o=o("DebertaV2Model"),a5o=o(" (DeBERTa-v2 model)"),n5o=l(),vp=a("li"),kme=a("strong"),s5o=o("decision_transformer"),l5o=o(" \u2014 "),Zj=a("a"),i5o=o("DecisionTransformerModel"),d5o=o(" (Decision Transformer model)"),c5o=l(),Fp=a("li"),Sme=a("strong"),m5o=o("deit"),f5o=o(" \u2014 "),eD=a("a"),g5o=o("DeiTModel"),h5o=o(" (DeiT model)"),u5o=l(),Tp=a("li"),Rme=a("strong"),p5o=o("detr"),_5o=o(" \u2014 "),oD=a("a"),b5o=o("DetrModel"),v5o=o(" (DETR model)"),F5o=l(),Mp=a("li"),Pme=a("strong"),T5o=o("distilbert"),M5o=o(" \u2014 "),rD=a("a"),E5o=o("DistilBertModel"),C5o=o(" (DistilBERT model)"),w5o=l(),Ep=a("li"),Bme=a("strong"),A5o=o("dpr"),L5o=o(" \u2014 "),tD=a("a"),y5o=o("DPRQuestionEncoder"),x5o=o(" (DPR model)"),$5o=l(),Cp=a("li"),Ime=a("strong"),k5o=o("dpt"),S5o=o(" \u2014 "),aD=a("a"),R5o=o("DPTModel"),P5o=o(" (DPT model)"),B5o=l(),wp=a("li"),Nme=a("strong"),I5o=o("electra"),N5o=o(" \u2014 "),nD=a("a"),q5o=o("ElectraModel"),j5o=o(" (ELECTRA model)"),D5o=l(),Ap=a("li"),qme=a("strong"),G5o=o("flaubert"),O5o=o(" \u2014 "),sD=a("a"),V5o=o("FlaubertModel"),X5o=o(" (FlauBERT model)"),z5o=l(),Lp=a("li"),jme=a("strong"),W5o=o("flava"),Q5o=o(" \u2014 "),lD=a("a"),H5o=o("FlavaModel"),U5o=o(" (FLAVA model)"),J5o=l(),yp=a("li"),Dme=a("strong"),Y5o=o("fnet"),K5o=o(" \u2014 "),iD=a("a"),Z5o=o("FNetModel"),e3o=o(" (FNet model)"),o3o=l(),xp=a("li"),Gme=a("strong"),r3o=o("fsmt"),t3o=o(" \u2014 "),dD=a("a"),a3o=o("FSMTModel"),n3o=o(" (FairSeq Machine-Translation model)"),s3o=l(),Js=a("li"),Ome=a("strong"),l3o=o("funnel"),i3o=o(" \u2014 "),cD=a("a"),d3o=o("FunnelModel"),c3o=o(" or "),mD=a("a"),m3o=o("FunnelBaseModel"),f3o=o(" (Funnel Transformer model)"),g3o=l(),$p=a("li"),Vme=a("strong"),h3o=o("glpn"),u3o=o(" \u2014 "),fD=a("a"),p3o=o("GLPNModel"),_3o=o(" (GLPN model)"),b3o=l(),kp=a("li"),Xme=a("strong"),v3o=o("gpt2"),F3o=o(" \u2014 "),gD=a("a"),T3o=o("GPT2Model"),M3o=o(" (OpenAI GPT-2 model)"),E3o=l(),Sp=a("li"),zme=a("strong"),C3o=o("gpt_neo"),w3o=o(" \u2014 "),hD=a("a"),A3o=o("GPTNeoModel"),L3o=o(" (GPT Neo model)"),y3o=l(),Rp=a("li"),Wme=a("strong"),x3o=o("gpt_neox"),$3o=o(" \u2014 "),uD=a("a"),k3o=o("GPTNeoXModel"),S3o=o(" (GPT NeoX model)"),R3o=l(),Pp=a("li"),Qme=a("strong"),P3o=o("gptj"),B3o=o(" \u2014 "),pD=a("a"),I3o=o("GPTJModel"),N3o=o(" (GPT-J model)"),q3o=l(),Bp=a("li"),Hme=a("strong"),j3o=o("groupvit"),D3o=o(" \u2014 "),_D=a("a"),G3o=o("GroupViTModel"),O3o=o(" (GroupViT model)"),V3o=l(),Ip=a("li"),Ume=a("strong"),X3o=o("hubert"),z3o=o(" \u2014 "),bD=a("a"),W3o=o("HubertModel"),Q3o=o(" (Hubert model)"),H3o=l(),Np=a("li"),Jme=a("strong"),U3o=o("ibert"),J3o=o(" \u2014 "),vD=a("a"),Y3o=o("IBertModel"),K3o=o(" (I-BERT model)"),Z3o=l(),qp=a("li"),Yme=a("strong"),e0o=o("imagegpt"),o0o=o(" \u2014 "),FD=a("a"),r0o=o("ImageGPTModel"),t0o=o(" (ImageGPT model)"),a0o=l(),jp=a("li"),Kme=a("strong"),n0o=o("layoutlm"),s0o=o(" \u2014 "),TD=a("a"),l0o=o("LayoutLMModel"),i0o=o(" (LayoutLM model)"),d0o=l(),Dp=a("li"),Zme=a("strong"),c0o=o("layoutlmv2"),m0o=o(" \u2014 "),MD=a("a"),f0o=o("LayoutLMv2Model"),g0o=o(" (LayoutLMv2 model)"),h0o=l(),Gp=a("li"),efe=a("strong"),u0o=o("layoutlmv3"),p0o=o(" \u2014 "),ED=a("a"),_0o=o("LayoutLMv3Model"),b0o=o(" (LayoutLMv3 model)"),v0o=l(),Op=a("li"),ofe=a("strong"),F0o=o("led"),T0o=o(" \u2014 "),CD=a("a"),M0o=o("LEDModel"),E0o=o(" (LED model)"),C0o=l(),Vp=a("li"),rfe=a("strong"),w0o=o("levit"),A0o=o(" \u2014 "),wD=a("a"),L0o=o("LevitModel"),y0o=o(" (LeViT model)"),x0o=l(),Xp=a("li"),tfe=a("strong"),$0o=o("longformer"),k0o=o(" \u2014 "),AD=a("a"),S0o=o("LongformerModel"),R0o=o(" (Longformer model)"),P0o=l(),zp=a("li"),afe=a("strong"),B0o=o("longt5"),I0o=o(" \u2014 "),LD=a("a"),N0o=o("LongT5Model"),q0o=o(" (LongT5 model)"),j0o=l(),Wp=a("li"),nfe=a("strong"),D0o=o("luke"),G0o=o(" \u2014 "),yD=a("a"),O0o=o("LukeModel"),V0o=o(" (LUKE model)"),X0o=l(),Qp=a("li"),sfe=a("strong"),z0o=o("lxmert"),W0o=o(" \u2014 "),xD=a("a"),Q0o=o("LxmertModel"),H0o=o(" (LXMERT model)"),U0o=l(),Hp=a("li"),lfe=a("strong"),J0o=o("m2m_100"),Y0o=o(" \u2014 "),$D=a("a"),K0o=o("M2M100Model"),Z0o=o(" (M2M100 model)"),ewo=l(),Up=a("li"),ife=a("strong"),owo=o("marian"),rwo=o(" \u2014 "),kD=a("a"),two=o("MarianModel"),awo=o(" (Marian model)"),nwo=l(),Jp=a("li"),dfe=a("strong"),swo=o("maskformer"),lwo=o(" \u2014 "),SD=a("a"),iwo=o("MaskFormerModel"),dwo=o(" (MaskFormer model)"),cwo=l(),Yp=a("li"),cfe=a("strong"),mwo=o("mbart"),fwo=o(" \u2014 "),RD=a("a"),gwo=o("MBartModel"),hwo=o(" (mBART model)"),uwo=l(),Kp=a("li"),mfe=a("strong"),pwo=o("mctct"),_wo=o(" \u2014 "),PD=a("a"),bwo=o("MCTCTModel"),vwo=o(" (M-CTC-T model)"),Fwo=l(),Zp=a("li"),ffe=a("strong"),Two=o("megatron-bert"),Mwo=o(" \u2014 "),BD=a("a"),Ewo=o("MegatronBertModel"),Cwo=o(" (Megatron-BERT model)"),wwo=l(),e_=a("li"),gfe=a("strong"),Awo=o("mobilebert"),Lwo=o(" \u2014 "),ID=a("a"),ywo=o("MobileBertModel"),xwo=o(" (MobileBERT model)"),$wo=l(),o_=a("li"),hfe=a("strong"),kwo=o("mobilevit"),Swo=o(" \u2014 "),ND=a("a"),Rwo=o("MobileViTModel"),Pwo=o(" (MobileViT model)"),Bwo=l(),r_=a("li"),ufe=a("strong"),Iwo=o("mpnet"),Nwo=o(" \u2014 "),qD=a("a"),qwo=o("MPNetModel"),jwo=o(" (MPNet model)"),Dwo=l(),t_=a("li"),pfe=a("strong"),Gwo=o("mt5"),Owo=o(" \u2014 "),jD=a("a"),Vwo=o("MT5Model"),Xwo=o(" (MT5 model)"),zwo=l(),a_=a("li"),_fe=a("strong"),Wwo=o("mvp"),Qwo=o(" \u2014 "),DD=a("a"),Hwo=o("MvpModel"),Uwo=o(" (MVP model)"),Jwo=l(),n_=a("li"),bfe=a("strong"),Ywo=o("nezha"),Kwo=o(" \u2014 "),GD=a("a"),Zwo=o("NezhaModel"),e6o=o(" (Nezha model)"),o6o=l(),s_=a("li"),vfe=a("strong"),r6o=o("nllb"),t6o=o(" \u2014 "),OD=a("a"),a6o=o("M2M100Model"),n6o=o(" (NLLB model)"),s6o=l(),l_=a("li"),Ffe=a("strong"),l6o=o("nystromformer"),i6o=o(" \u2014 "),VD=a("a"),d6o=o("NystromformerModel"),c6o=o(" (Nystr\xF6mformer model)"),m6o=l(),i_=a("li"),Tfe=a("strong"),f6o=o("openai-gpt"),g6o=o(" \u2014 "),XD=a("a"),h6o=o("OpenAIGPTModel"),u6o=o(" (OpenAI GPT model)"),p6o=l(),d_=a("li"),Mfe=a("strong"),_6o=o("opt"),b6o=o(" \u2014 "),zD=a("a"),v6o=o("OPTModel"),F6o=o(" (OPT model)"),T6o=l(),c_=a("li"),Efe=a("strong"),M6o=o("owlvit"),E6o=o(" \u2014 "),WD=a("a"),C6o=o("OwlViTModel"),w6o=o(" (OWL-ViT model)"),A6o=l(),m_=a("li"),Cfe=a("strong"),L6o=o("pegasus"),y6o=o(" \u2014 "),QD=a("a"),x6o=o("PegasusModel"),$6o=o(" (Pegasus model)"),k6o=l(),f_=a("li"),wfe=a("strong"),S6o=o("perceiver"),R6o=o(" \u2014 "),HD=a("a"),P6o=o("PerceiverModel"),B6o=o(" (Perceiver model)"),I6o=l(),g_=a("li"),Afe=a("strong"),N6o=o("plbart"),q6o=o(" \u2014 "),UD=a("a"),j6o=o("PLBartModel"),D6o=o(" (PLBart model)"),G6o=l(),h_=a("li"),Lfe=a("strong"),O6o=o("poolformer"),V6o=o(" \u2014 "),JD=a("a"),X6o=o("PoolFormerModel"),z6o=o(" (PoolFormer model)"),W6o=l(),u_=a("li"),yfe=a("strong"),Q6o=o("prophetnet"),H6o=o(" \u2014 "),YD=a("a"),U6o=o("ProphetNetModel"),J6o=o(" (ProphetNet model)"),Y6o=l(),p_=a("li"),xfe=a("strong"),K6o=o("qdqbert"),Z6o=o(" \u2014 "),KD=a("a"),eAo=o("QDQBertModel"),oAo=o(" (QDQBert model)"),rAo=l(),__=a("li"),$fe=a("strong"),tAo=o("reformer"),aAo=o(" \u2014 "),ZD=a("a"),nAo=o("ReformerModel"),sAo=o(" (Reformer model)"),lAo=l(),b_=a("li"),kfe=a("strong"),iAo=o("regnet"),dAo=o(" \u2014 "),eG=a("a"),cAo=o("RegNetModel"),mAo=o(" (RegNet model)"),fAo=l(),v_=a("li"),Sfe=a("strong"),gAo=o("rembert"),hAo=o(" \u2014 "),oG=a("a"),uAo=o("RemBertModel"),pAo=o(" (RemBERT model)"),_Ao=l(),F_=a("li"),Rfe=a("strong"),bAo=o("resnet"),vAo=o(" \u2014 "),rG=a("a"),FAo=o("ResNetModel"),TAo=o(" (ResNet model)"),MAo=l(),T_=a("li"),Pfe=a("strong"),EAo=o("retribert"),CAo=o(" \u2014 "),tG=a("a"),wAo=o("RetriBertModel"),AAo=o(" (RetriBERT model)"),LAo=l(),M_=a("li"),Bfe=a("strong"),yAo=o("roberta"),xAo=o(" \u2014 "),aG=a("a"),$Ao=o("RobertaModel"),kAo=o(" (RoBERTa model)"),SAo=l(),E_=a("li"),Ife=a("strong"),RAo=o("roformer"),PAo=o(" \u2014 "),nG=a("a"),BAo=o("RoFormerModel"),IAo=o(" (RoFormer model)"),NAo=l(),C_=a("li"),Nfe=a("strong"),qAo=o("segformer"),jAo=o(" \u2014 "),sG=a("a"),DAo=o("SegformerModel"),GAo=o(" (SegFormer model)"),OAo=l(),w_=a("li"),qfe=a("strong"),VAo=o("sew"),XAo=o(" \u2014 "),lG=a("a"),zAo=o("SEWModel"),WAo=o(" (SEW model)"),QAo=l(),A_=a("li"),jfe=a("strong"),HAo=o("sew-d"),UAo=o(" \u2014 "),iG=a("a"),JAo=o("SEWDModel"),YAo=o(" (SEW-D model)"),KAo=l(),L_=a("li"),Dfe=a("strong"),ZAo=o("speech_to_text"),e7o=o(" \u2014 "),dG=a("a"),o7o=o("Speech2TextModel"),r7o=o(" (Speech2Text model)"),t7o=l(),y_=a("li"),Gfe=a("strong"),a7o=o("splinter"),n7o=o(" \u2014 "),cG=a("a"),s7o=o("SplinterModel"),l7o=o(" (Splinter model)"),i7o=l(),x_=a("li"),Ofe=a("strong"),d7o=o("squeezebert"),c7o=o(" \u2014 "),mG=a("a"),m7o=o("SqueezeBertModel"),f7o=o(" (SqueezeBERT model)"),g7o=l(),$_=a("li"),Vfe=a("strong"),h7o=o("swin"),u7o=o(" \u2014 "),fG=a("a"),p7o=o("SwinModel"),_7o=o(" (Swin Transformer model)"),b7o=l(),k_=a("li"),Xfe=a("strong"),v7o=o("swinv2"),F7o=o(" \u2014 "),gG=a("a"),T7o=o("Swinv2Model"),M7o=o(" (Swin Transformer V2 model)"),E7o=l(),S_=a("li"),zfe=a("strong"),C7o=o("t5"),w7o=o(" \u2014 "),hG=a("a"),A7o=o("T5Model"),L7o=o(" (T5 model)"),y7o=l(),R_=a("li"),Wfe=a("strong"),x7o=o("tapas"),$7o=o(" \u2014 "),uG=a("a"),k7o=o("TapasModel"),S7o=o(" (TAPAS model)"),R7o=l(),P_=a("li"),Qfe=a("strong"),P7o=o("trajectory_transformer"),B7o=o(" \u2014 "),pG=a("a"),I7o=o("TrajectoryTransformerModel"),N7o=o(" (Trajectory Transformer model)"),q7o=l(),B_=a("li"),Hfe=a("strong"),j7o=o("transfo-xl"),D7o=o(" \u2014 "),_G=a("a"),G7o=o("TransfoXLModel"),O7o=o(" (Transformer-XL model)"),V7o=l(),I_=a("li"),Ufe=a("strong"),X7o=o("unispeech"),z7o=o(" \u2014 "),bG=a("a"),W7o=o("UniSpeechModel"),Q7o=o(" (UniSpeech model)"),H7o=l(),N_=a("li"),Jfe=a("strong"),U7o=o("unispeech-sat"),J7o=o(" \u2014 "),vG=a("a"),Y7o=o("UniSpeechSatModel"),K7o=o(" (UniSpeechSat model)"),Z7o=l(),q_=a("li"),Yfe=a("strong"),eLo=o("van"),oLo=o(" \u2014 "),FG=a("a"),rLo=o("VanModel"),tLo=o(" (VAN model)"),aLo=l(),j_=a("li"),Kfe=a("strong"),nLo=o("vilt"),sLo=o(" \u2014 "),TG=a("a"),lLo=o("ViltModel"),iLo=o(" (ViLT model)"),dLo=l(),D_=a("li"),Zfe=a("strong"),cLo=o("vision-text-dual-encoder"),mLo=o(" \u2014 "),MG=a("a"),fLo=o("VisionTextDualEncoderModel"),gLo=o(" (VisionTextDualEncoder model)"),hLo=l(),G_=a("li"),ege=a("strong"),uLo=o("visual_bert"),pLo=o(" \u2014 "),EG=a("a"),_Lo=o("VisualBertModel"),bLo=o(" (VisualBERT model)"),vLo=l(),O_=a("li"),oge=a("strong"),FLo=o("vit"),TLo=o(" \u2014 "),CG=a("a"),MLo=o("ViTModel"),ELo=o(" (ViT model)"),CLo=l(),V_=a("li"),rge=a("strong"),wLo=o("vit_mae"),ALo=o(" \u2014 "),wG=a("a"),LLo=o("ViTMAEModel"),yLo=o(" (ViTMAE model)"),xLo=l(),X_=a("li"),tge=a("strong"),$Lo=o("wav2vec2"),kLo=o(" \u2014 "),AG=a("a"),SLo=o("Wav2Vec2Model"),RLo=o(" (Wav2Vec2 model)"),PLo=l(),z_=a("li"),age=a("strong"),BLo=o("wav2vec2-conformer"),ILo=o(" \u2014 "),LG=a("a"),NLo=o("Wav2Vec2ConformerModel"),qLo=o(" (Wav2Vec2-Conformer model)"),jLo=l(),W_=a("li"),nge=a("strong"),DLo=o("wavlm"),GLo=o(" \u2014 "),yG=a("a"),OLo=o("WavLMModel"),VLo=o(" (WavLM model)"),XLo=l(),Q_=a("li"),sge=a("strong"),zLo=o("xglm"),WLo=o(" \u2014 "),xG=a("a"),QLo=o("XGLMModel"),HLo=o(" (XGLM model)"),ULo=l(),H_=a("li"),lge=a("strong"),JLo=o("xlm"),YLo=o(" \u2014 "),$G=a("a"),KLo=o("XLMModel"),ZLo=o(" (XLM model)"),eyo=l(),U_=a("li"),ige=a("strong"),oyo=o("xlm-prophetnet"),ryo=o(" \u2014 "),kG=a("a"),tyo=o("XLMProphetNetModel"),ayo=o(" (XLM-ProphetNet model)"),nyo=l(),J_=a("li"),dge=a("strong"),syo=o("xlm-roberta"),lyo=o(" \u2014 "),SG=a("a"),iyo=o("XLMRobertaModel"),dyo=o(" (XLM-RoBERTa model)"),cyo=l(),Y_=a("li"),cge=a("strong"),myo=o("xlm-roberta-xl"),fyo=o(" \u2014 "),RG=a("a"),gyo=o("XLMRobertaXLModel"),hyo=o(" (XLM-RoBERTa-XL model)"),uyo=l(),K_=a("li"),mge=a("strong"),pyo=o("xlnet"),_yo=o(" \u2014 "),PG=a("a"),byo=o("XLNetModel"),vyo=o(" (XLNet model)"),Fyo=l(),Z_=a("li"),fge=a("strong"),Tyo=o("yolos"),Myo=o(" \u2014 "),BG=a("a"),Eyo=o("YolosModel"),Cyo=o(" (YOLOS model)"),wyo=l(),e2=a("li"),gge=a("strong"),Ayo=o("yoso"),Lyo=o(" \u2014 "),IG=a("a"),yyo=o("YosoModel"),xyo=o(" (YOSO model)"),$yo=l(),o2=a("p"),kyo=o("The model is set in evaluation mode by default using "),hge=a("code"),Syo=o("model.eval()"),Ryo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),Pyo=o("model.train()"),Byo=l(),F(r2.$$.fragment),Xze=l(),Qi=a("h2"),t2=a("a"),pge=a("span"),F(t8.$$.fragment),Iyo=l(),_ge=a("span"),Nyo=o("AutoModelForPreTraining"),zze=l(),So=a("div"),F(a8.$$.fragment),qyo=l(),Hi=a("p"),jyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NG=a("a"),Dyo=o("from_pretrained()"),Gyo=o(" class method or the "),qG=a("a"),Oyo=o("from_config()"),Vyo=o(` class
method.`),Xyo=l(),n8=a("p"),zyo=o("This class cannot be instantiated directly using "),bge=a("code"),Wyo=o("__init__()"),Qyo=o(" (throws an error)."),Hyo=l(),dt=a("div"),F(s8.$$.fragment),Uyo=l(),vge=a("p"),Jyo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yyo=l(),Ui=a("p"),Kyo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),Zyo=o("not"),e8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),o8o=o("from_pretrained()"),r8o=o(" to load the model weights."),t8o=l(),F(a2.$$.fragment),a8o=l(),Ke=a("div"),F(l8.$$.fragment),n8o=l(),Tge=a("p"),s8o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l8o=l(),Na=a("p"),i8o=o("The model class to instantiate is selected based on the "),Mge=a("code"),d8o=o("model_type"),c8o=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),m8o=o("pretrained_model_name_or_path"),f8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),g8o=o("pretrained_model_name_or_path"),h8o=o(":"),u8o=l(),G=a("ul"),n2=a("li"),wge=a("strong"),p8o=o("albert"),_8o=o(" \u2014 "),DG=a("a"),b8o=o("AlbertForPreTraining"),v8o=o(" (ALBERT model)"),F8o=l(),s2=a("li"),Age=a("strong"),T8o=o("bart"),M8o=o(" \u2014 "),GG=a("a"),E8o=o("BartForConditionalGeneration"),C8o=o(" (BART model)"),w8o=l(),l2=a("li"),Lge=a("strong"),A8o=o("bert"),L8o=o(" \u2014 "),OG=a("a"),y8o=o("BertForPreTraining"),x8o=o(" (BERT model)"),$8o=l(),i2=a("li"),yge=a("strong"),k8o=o("big_bird"),S8o=o(" \u2014 "),VG=a("a"),R8o=o("BigBirdForPreTraining"),P8o=o(" (BigBird model)"),B8o=l(),d2=a("li"),xge=a("strong"),I8o=o("bloom"),N8o=o(" \u2014 "),XG=a("a"),q8o=o("BloomForCausalLM"),j8o=o(" (BLOOM model)"),D8o=l(),c2=a("li"),$ge=a("strong"),G8o=o("camembert"),O8o=o(" \u2014 "),zG=a("a"),V8o=o("CamembertForMaskedLM"),X8o=o(" (CamemBERT model)"),z8o=l(),m2=a("li"),kge=a("strong"),W8o=o("ctrl"),Q8o=o(" \u2014 "),WG=a("a"),H8o=o("CTRLLMHeadModel"),U8o=o(" (CTRL model)"),J8o=l(),f2=a("li"),Sge=a("strong"),Y8o=o("data2vec-text"),K8o=o(" \u2014 "),QG=a("a"),Z8o=o("Data2VecTextForMaskedLM"),e9o=o(" (Data2VecText model)"),o9o=l(),g2=a("li"),Rge=a("strong"),r9o=o("deberta"),t9o=o(" \u2014 "),HG=a("a"),a9o=o("DebertaForMaskedLM"),n9o=o(" (DeBERTa model)"),s9o=l(),h2=a("li"),Pge=a("strong"),l9o=o("deberta-v2"),i9o=o(" \u2014 "),UG=a("a"),d9o=o("DebertaV2ForMaskedLM"),c9o=o(" (DeBERTa-v2 model)"),m9o=l(),u2=a("li"),Bge=a("strong"),f9o=o("distilbert"),g9o=o(" \u2014 "),JG=a("a"),h9o=o("DistilBertForMaskedLM"),u9o=o(" (DistilBERT model)"),p9o=l(),p2=a("li"),Ige=a("strong"),_9o=o("electra"),b9o=o(" \u2014 "),YG=a("a"),v9o=o("ElectraForPreTraining"),F9o=o(" (ELECTRA model)"),T9o=l(),_2=a("li"),Nge=a("strong"),M9o=o("flaubert"),E9o=o(" \u2014 "),KG=a("a"),C9o=o("FlaubertWithLMHeadModel"),w9o=o(" (FlauBERT model)"),A9o=l(),b2=a("li"),qge=a("strong"),L9o=o("flava"),y9o=o(" \u2014 "),ZG=a("a"),x9o=o("FlavaForPreTraining"),$9o=o(" (FLAVA model)"),k9o=l(),v2=a("li"),jge=a("strong"),S9o=o("fnet"),R9o=o(" \u2014 "),eO=a("a"),P9o=o("FNetForPreTraining"),B9o=o(" (FNet model)"),I9o=l(),F2=a("li"),Dge=a("strong"),N9o=o("fsmt"),q9o=o(" \u2014 "),oO=a("a"),j9o=o("FSMTForConditionalGeneration"),D9o=o(" (FairSeq Machine-Translation model)"),G9o=l(),T2=a("li"),Gge=a("strong"),O9o=o("funnel"),V9o=o(" \u2014 "),rO=a("a"),X9o=o("FunnelForPreTraining"),z9o=o(" (Funnel Transformer model)"),W9o=l(),M2=a("li"),Oge=a("strong"),Q9o=o("gpt2"),H9o=o(" \u2014 "),tO=a("a"),U9o=o("GPT2LMHeadModel"),J9o=o(" (OpenAI GPT-2 model)"),Y9o=l(),E2=a("li"),Vge=a("strong"),K9o=o("ibert"),Z9o=o(" \u2014 "),aO=a("a"),exo=o("IBertForMaskedLM"),oxo=o(" (I-BERT model)"),rxo=l(),C2=a("li"),Xge=a("strong"),txo=o("layoutlm"),axo=o(" \u2014 "),nO=a("a"),nxo=o("LayoutLMForMaskedLM"),sxo=o(" (LayoutLM model)"),lxo=l(),w2=a("li"),zge=a("strong"),ixo=o("longformer"),dxo=o(" \u2014 "),sO=a("a"),cxo=o("LongformerForMaskedLM"),mxo=o(" (Longformer model)"),fxo=l(),A2=a("li"),Wge=a("strong"),gxo=o("luke"),hxo=o(" \u2014 "),lO=a("a"),uxo=o("LukeForMaskedLM"),pxo=o(" (LUKE model)"),_xo=l(),L2=a("li"),Qge=a("strong"),bxo=o("lxmert"),vxo=o(" \u2014 "),iO=a("a"),Fxo=o("LxmertForPreTraining"),Txo=o(" (LXMERT model)"),Mxo=l(),y2=a("li"),Hge=a("strong"),Exo=o("megatron-bert"),Cxo=o(" \u2014 "),dO=a("a"),wxo=o("MegatronBertForPreTraining"),Axo=o(" (Megatron-BERT model)"),Lxo=l(),x2=a("li"),Uge=a("strong"),yxo=o("mobilebert"),xxo=o(" \u2014 "),cO=a("a"),$xo=o("MobileBertForPreTraining"),kxo=o(" (MobileBERT model)"),Sxo=l(),$2=a("li"),Jge=a("strong"),Rxo=o("mpnet"),Pxo=o(" \u2014 "),mO=a("a"),Bxo=o("MPNetForMaskedLM"),Ixo=o(" (MPNet model)"),Nxo=l(),k2=a("li"),Yge=a("strong"),qxo=o("mvp"),jxo=o(" \u2014 "),fO=a("a"),Dxo=o("MvpForConditionalGeneration"),Gxo=o(" (MVP model)"),Oxo=l(),S2=a("li"),Kge=a("strong"),Vxo=o("nezha"),Xxo=o(" \u2014 "),gO=a("a"),zxo=o("NezhaForPreTraining"),Wxo=o(" (Nezha model)"),Qxo=l(),R2=a("li"),Zge=a("strong"),Hxo=o("openai-gpt"),Uxo=o(" \u2014 "),hO=a("a"),Jxo=o("OpenAIGPTLMHeadModel"),Yxo=o(" (OpenAI GPT model)"),Kxo=l(),P2=a("li"),ehe=a("strong"),Zxo=o("retribert"),e$o=o(" \u2014 "),uO=a("a"),o$o=o("RetriBertModel"),r$o=o(" (RetriBERT model)"),t$o=l(),B2=a("li"),ohe=a("strong"),a$o=o("roberta"),n$o=o(" \u2014 "),pO=a("a"),s$o=o("RobertaForMaskedLM"),l$o=o(" (RoBERTa model)"),i$o=l(),I2=a("li"),rhe=a("strong"),d$o=o("splinter"),c$o=o(" \u2014 "),_O=a("a"),m$o=o("SplinterForPreTraining"),f$o=o(" (Splinter model)"),g$o=l(),N2=a("li"),the=a("strong"),h$o=o("squeezebert"),u$o=o(" \u2014 "),bO=a("a"),p$o=o("SqueezeBertForMaskedLM"),_$o=o(" (SqueezeBERT model)"),b$o=l(),q2=a("li"),ahe=a("strong"),v$o=o("t5"),F$o=o(" \u2014 "),vO=a("a"),T$o=o("T5ForConditionalGeneration"),M$o=o(" (T5 model)"),E$o=l(),j2=a("li"),nhe=a("strong"),C$o=o("tapas"),w$o=o(" \u2014 "),FO=a("a"),A$o=o("TapasForMaskedLM"),L$o=o(" (TAPAS model)"),y$o=l(),D2=a("li"),she=a("strong"),x$o=o("transfo-xl"),$$o=o(" \u2014 "),TO=a("a"),k$o=o("TransfoXLLMHeadModel"),S$o=o(" (Transformer-XL model)"),R$o=l(),G2=a("li"),lhe=a("strong"),P$o=o("unispeech"),B$o=o(" \u2014 "),MO=a("a"),I$o=o("UniSpeechForPreTraining"),N$o=o(" (UniSpeech model)"),q$o=l(),O2=a("li"),ihe=a("strong"),j$o=o("unispeech-sat"),D$o=o(" \u2014 "),EO=a("a"),G$o=o("UniSpeechSatForPreTraining"),O$o=o(" (UniSpeechSat model)"),V$o=l(),V2=a("li"),dhe=a("strong"),X$o=o("visual_bert"),z$o=o(" \u2014 "),CO=a("a"),W$o=o("VisualBertForPreTraining"),Q$o=o(" (VisualBERT model)"),H$o=l(),X2=a("li"),che=a("strong"),U$o=o("vit_mae"),J$o=o(" \u2014 "),wO=a("a"),Y$o=o("ViTMAEForPreTraining"),K$o=o(" (ViTMAE model)"),Z$o=l(),z2=a("li"),mhe=a("strong"),eko=o("wav2vec2"),oko=o(" \u2014 "),AO=a("a"),rko=o("Wav2Vec2ForPreTraining"),tko=o(" (Wav2Vec2 model)"),ako=l(),W2=a("li"),fhe=a("strong"),nko=o("wav2vec2-conformer"),sko=o(" \u2014 "),LO=a("a"),lko=o("Wav2Vec2ConformerForPreTraining"),iko=o(" (Wav2Vec2-Conformer model)"),dko=l(),Q2=a("li"),ghe=a("strong"),cko=o("xlm"),mko=o(" \u2014 "),yO=a("a"),fko=o("XLMWithLMHeadModel"),gko=o(" (XLM model)"),hko=l(),H2=a("li"),hhe=a("strong"),uko=o("xlm-roberta"),pko=o(" \u2014 "),xO=a("a"),_ko=o("XLMRobertaForMaskedLM"),bko=o(" (XLM-RoBERTa model)"),vko=l(),U2=a("li"),uhe=a("strong"),Fko=o("xlm-roberta-xl"),Tko=o(" \u2014 "),$O=a("a"),Mko=o("XLMRobertaXLForMaskedLM"),Eko=o(" (XLM-RoBERTa-XL model)"),Cko=l(),J2=a("li"),phe=a("strong"),wko=o("xlnet"),Ako=o(" \u2014 "),kO=a("a"),Lko=o("XLNetLMHeadModel"),yko=o(" (XLNet model)"),xko=l(),Y2=a("p"),$ko=o("The model is set in evaluation mode by default using "),_he=a("code"),kko=o("model.eval()"),Sko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),Rko=o("model.train()"),Pko=l(),F(K2.$$.fragment),Wze=l(),Ji=a("h2"),Z2=a("a"),vhe=a("span"),F(i8.$$.fragment),Bko=l(),Fhe=a("span"),Iko=o("AutoModelForCausalLM"),Qze=l(),Ro=a("div"),F(d8.$$.fragment),Nko=l(),Yi=a("p"),qko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SO=a("a"),jko=o("from_pretrained()"),Dko=o(" class method or the "),RO=a("a"),Gko=o("from_config()"),Oko=o(` class
method.`),Vko=l(),c8=a("p"),Xko=o("This class cannot be instantiated directly using "),The=a("code"),zko=o("__init__()"),Wko=o(" (throws an error)."),Qko=l(),ct=a("div"),F(m8.$$.fragment),Hko=l(),Mhe=a("p"),Uko=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jko=l(),Ki=a("p"),Yko=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),Kko=o("not"),Zko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),eSo=o("from_pretrained()"),oSo=o(" to load the model weights."),rSo=l(),F(eb.$$.fragment),tSo=l(),Ze=a("div"),F(f8.$$.fragment),aSo=l(),Che=a("p"),nSo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sSo=l(),qa=a("p"),lSo=o("The model class to instantiate is selected based on the "),whe=a("code"),iSo=o("model_type"),dSo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),cSo=o("pretrained_model_name_or_path"),mSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),fSo=o("pretrained_model_name_or_path"),gSo=o(":"),hSo=l(),z=a("ul"),ob=a("li"),yhe=a("strong"),uSo=o("bart"),pSo=o(" \u2014 "),BO=a("a"),_So=o("BartForCausalLM"),bSo=o(" (BART model)"),vSo=l(),rb=a("li"),xhe=a("strong"),FSo=o("bert"),TSo=o(" \u2014 "),IO=a("a"),MSo=o("BertLMHeadModel"),ESo=o(" (BERT model)"),CSo=l(),tb=a("li"),$he=a("strong"),wSo=o("bert-generation"),ASo=o(" \u2014 "),NO=a("a"),LSo=o("BertGenerationDecoder"),ySo=o(" (Bert Generation model)"),xSo=l(),ab=a("li"),khe=a("strong"),$So=o("big_bird"),kSo=o(" \u2014 "),qO=a("a"),SSo=o("BigBirdForCausalLM"),RSo=o(" (BigBird model)"),PSo=l(),nb=a("li"),She=a("strong"),BSo=o("bigbird_pegasus"),ISo=o(" \u2014 "),jO=a("a"),NSo=o("BigBirdPegasusForCausalLM"),qSo=o(" (BigBird-Pegasus model)"),jSo=l(),sb=a("li"),Rhe=a("strong"),DSo=o("blenderbot"),GSo=o(" \u2014 "),DO=a("a"),OSo=o("BlenderbotForCausalLM"),VSo=o(" (Blenderbot model)"),XSo=l(),lb=a("li"),Phe=a("strong"),zSo=o("blenderbot-small"),WSo=o(" \u2014 "),GO=a("a"),QSo=o("BlenderbotSmallForCausalLM"),HSo=o(" (BlenderbotSmall model)"),USo=l(),ib=a("li"),Bhe=a("strong"),JSo=o("bloom"),YSo=o(" \u2014 "),OO=a("a"),KSo=o("BloomForCausalLM"),ZSo=o(" (BLOOM model)"),eRo=l(),db=a("li"),Ihe=a("strong"),oRo=o("camembert"),rRo=o(" \u2014 "),VO=a("a"),tRo=o("CamembertForCausalLM"),aRo=o(" (CamemBERT model)"),nRo=l(),cb=a("li"),Nhe=a("strong"),sRo=o("codegen"),lRo=o(" \u2014 "),XO=a("a"),iRo=o("CodeGenForCausalLM"),dRo=o(" (CodeGen model)"),cRo=l(),mb=a("li"),qhe=a("strong"),mRo=o("ctrl"),fRo=o(" \u2014 "),zO=a("a"),gRo=o("CTRLLMHeadModel"),hRo=o(" (CTRL model)"),uRo=l(),fb=a("li"),jhe=a("strong"),pRo=o("data2vec-text"),_Ro=o(" \u2014 "),WO=a("a"),bRo=o("Data2VecTextForCausalLM"),vRo=o(" (Data2VecText model)"),FRo=l(),gb=a("li"),Dhe=a("strong"),TRo=o("electra"),MRo=o(" \u2014 "),QO=a("a"),ERo=o("ElectraForCausalLM"),CRo=o(" (ELECTRA model)"),wRo=l(),hb=a("li"),Ghe=a("strong"),ARo=o("gpt2"),LRo=o(" \u2014 "),HO=a("a"),yRo=o("GPT2LMHeadModel"),xRo=o(" (OpenAI GPT-2 model)"),$Ro=l(),ub=a("li"),Ohe=a("strong"),kRo=o("gpt_neo"),SRo=o(" \u2014 "),UO=a("a"),RRo=o("GPTNeoForCausalLM"),PRo=o(" (GPT Neo model)"),BRo=l(),pb=a("li"),Vhe=a("strong"),IRo=o("gpt_neox"),NRo=o(" \u2014 "),JO=a("a"),qRo=o("GPTNeoXForCausalLM"),jRo=o(" (GPT NeoX model)"),DRo=l(),_b=a("li"),Xhe=a("strong"),GRo=o("gptj"),ORo=o(" \u2014 "),YO=a("a"),VRo=o("GPTJForCausalLM"),XRo=o(" (GPT-J model)"),zRo=l(),bb=a("li"),zhe=a("strong"),WRo=o("marian"),QRo=o(" \u2014 "),KO=a("a"),HRo=o("MarianForCausalLM"),URo=o(" (Marian model)"),JRo=l(),vb=a("li"),Whe=a("strong"),YRo=o("mbart"),KRo=o(" \u2014 "),ZO=a("a"),ZRo=o("MBartForCausalLM"),ePo=o(" (mBART model)"),oPo=l(),Fb=a("li"),Qhe=a("strong"),rPo=o("megatron-bert"),tPo=o(" \u2014 "),eV=a("a"),aPo=o("MegatronBertForCausalLM"),nPo=o(" (Megatron-BERT model)"),sPo=l(),Tb=a("li"),Hhe=a("strong"),lPo=o("mvp"),iPo=o(" \u2014 "),oV=a("a"),dPo=o("MvpForCausalLM"),cPo=o(" (MVP model)"),mPo=l(),Mb=a("li"),Uhe=a("strong"),fPo=o("openai-gpt"),gPo=o(" \u2014 "),rV=a("a"),hPo=o("OpenAIGPTLMHeadModel"),uPo=o(" (OpenAI GPT model)"),pPo=l(),Eb=a("li"),Jhe=a("strong"),_Po=o("opt"),bPo=o(" \u2014 "),tV=a("a"),vPo=o("OPTForCausalLM"),FPo=o(" (OPT model)"),TPo=l(),Cb=a("li"),Yhe=a("strong"),MPo=o("pegasus"),EPo=o(" \u2014 "),aV=a("a"),CPo=o("PegasusForCausalLM"),wPo=o(" (Pegasus model)"),APo=l(),wb=a("li"),Khe=a("strong"),LPo=o("plbart"),yPo=o(" \u2014 "),nV=a("a"),xPo=o("PLBartForCausalLM"),$Po=o(" (PLBart model)"),kPo=l(),Ab=a("li"),Zhe=a("strong"),SPo=o("prophetnet"),RPo=o(" \u2014 "),sV=a("a"),PPo=o("ProphetNetForCausalLM"),BPo=o(" (ProphetNet model)"),IPo=l(),Lb=a("li"),eue=a("strong"),NPo=o("qdqbert"),qPo=o(" \u2014 "),lV=a("a"),jPo=o("QDQBertLMHeadModel"),DPo=o(" (QDQBert model)"),GPo=l(),yb=a("li"),oue=a("strong"),OPo=o("reformer"),VPo=o(" \u2014 "),iV=a("a"),XPo=o("ReformerModelWithLMHead"),zPo=o(" (Reformer model)"),WPo=l(),xb=a("li"),rue=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),dV=a("a"),UPo=o("RemBertForCausalLM"),JPo=o(" (RemBERT model)"),YPo=l(),$b=a("li"),tue=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),cV=a("a"),eBo=o("RobertaForCausalLM"),oBo=o(" (RoBERTa model)"),rBo=l(),kb=a("li"),aue=a("strong"),tBo=o("roformer"),aBo=o(" \u2014 "),mV=a("a"),nBo=o("RoFormerForCausalLM"),sBo=o(" (RoFormer model)"),lBo=l(),Sb=a("li"),nue=a("strong"),iBo=o("speech_to_text_2"),dBo=o(" \u2014 "),fV=a("a"),cBo=o("Speech2Text2ForCausalLM"),mBo=o(" (Speech2Text2 model)"),fBo=l(),Rb=a("li"),sue=a("strong"),gBo=o("transfo-xl"),hBo=o(" \u2014 "),gV=a("a"),uBo=o("TransfoXLLMHeadModel"),pBo=o(" (Transformer-XL model)"),_Bo=l(),Pb=a("li"),lue=a("strong"),bBo=o("trocr"),vBo=o(" \u2014 "),hV=a("a"),FBo=o("TrOCRForCausalLM"),TBo=o(" (TrOCR model)"),MBo=l(),Bb=a("li"),iue=a("strong"),EBo=o("xglm"),CBo=o(" \u2014 "),uV=a("a"),wBo=o("XGLMForCausalLM"),ABo=o(" (XGLM model)"),LBo=l(),Ib=a("li"),due=a("strong"),yBo=o("xlm"),xBo=o(" \u2014 "),pV=a("a"),$Bo=o("XLMWithLMHeadModel"),kBo=o(" (XLM model)"),SBo=l(),Nb=a("li"),cue=a("strong"),RBo=o("xlm-prophetnet"),PBo=o(" \u2014 "),_V=a("a"),BBo=o("XLMProphetNetForCausalLM"),IBo=o(" (XLM-ProphetNet model)"),NBo=l(),qb=a("li"),mue=a("strong"),qBo=o("xlm-roberta"),jBo=o(" \u2014 "),bV=a("a"),DBo=o("XLMRobertaForCausalLM"),GBo=o(" (XLM-RoBERTa model)"),OBo=l(),jb=a("li"),fue=a("strong"),VBo=o("xlm-roberta-xl"),XBo=o(" \u2014 "),vV=a("a"),zBo=o("XLMRobertaXLForCausalLM"),WBo=o(" (XLM-RoBERTa-XL model)"),QBo=l(),Db=a("li"),gue=a("strong"),HBo=o("xlnet"),UBo=o(" \u2014 "),FV=a("a"),JBo=o("XLNetLMHeadModel"),YBo=o(" (XLNet model)"),KBo=l(),Gb=a("p"),ZBo=o("The model is set in evaluation mode by default using "),hue=a("code"),eIo=o("model.eval()"),oIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),rIo=o("model.train()"),tIo=l(),F(Ob.$$.fragment),Hze=l(),Zi=a("h2"),Vb=a("a"),pue=a("span"),F(g8.$$.fragment),aIo=l(),_ue=a("span"),nIo=o("AutoModelForMaskedLM"),Uze=l(),Po=a("div"),F(h8.$$.fragment),sIo=l(),ed=a("p"),lIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TV=a("a"),iIo=o("from_pretrained()"),dIo=o(" class method or the "),MV=a("a"),cIo=o("from_config()"),mIo=o(` class
method.`),fIo=l(),u8=a("p"),gIo=o("This class cannot be instantiated directly using "),bue=a("code"),hIo=o("__init__()"),uIo=o(" (throws an error)."),pIo=l(),mt=a("div"),F(p8.$$.fragment),_Io=l(),vue=a("p"),bIo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vIo=l(),od=a("p"),FIo=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),TIo=o("not"),MIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),EIo=o("from_pretrained()"),CIo=o(" to load the model weights."),wIo=l(),F(Xb.$$.fragment),AIo=l(),eo=a("div"),F(_8.$$.fragment),LIo=l(),Tue=a("p"),yIo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xIo=l(),ja=a("p"),$Io=o("The model class to instantiate is selected based on the "),Mue=a("code"),kIo=o("model_type"),SIo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),RIo=o("pretrained_model_name_or_path"),PIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),BIo=o("pretrained_model_name_or_path"),IIo=o(":"),NIo=l(),Q=a("ul"),zb=a("li"),wue=a("strong"),qIo=o("albert"),jIo=o(" \u2014 "),CV=a("a"),DIo=o("AlbertForMaskedLM"),GIo=o(" (ALBERT model)"),OIo=l(),Wb=a("li"),Aue=a("strong"),VIo=o("bart"),XIo=o(" \u2014 "),wV=a("a"),zIo=o("BartForConditionalGeneration"),WIo=o(" (BART model)"),QIo=l(),Qb=a("li"),Lue=a("strong"),HIo=o("bert"),UIo=o(" \u2014 "),AV=a("a"),JIo=o("BertForMaskedLM"),YIo=o(" (BERT model)"),KIo=l(),Hb=a("li"),yue=a("strong"),ZIo=o("big_bird"),eNo=o(" \u2014 "),LV=a("a"),oNo=o("BigBirdForMaskedLM"),rNo=o(" (BigBird model)"),tNo=l(),Ub=a("li"),xue=a("strong"),aNo=o("camembert"),nNo=o(" \u2014 "),yV=a("a"),sNo=o("CamembertForMaskedLM"),lNo=o(" (CamemBERT model)"),iNo=l(),Jb=a("li"),$ue=a("strong"),dNo=o("convbert"),cNo=o(" \u2014 "),xV=a("a"),mNo=o("ConvBertForMaskedLM"),fNo=o(" (ConvBERT model)"),gNo=l(),Yb=a("li"),kue=a("strong"),hNo=o("data2vec-text"),uNo=o(" \u2014 "),$V=a("a"),pNo=o("Data2VecTextForMaskedLM"),_No=o(" (Data2VecText model)"),bNo=l(),Kb=a("li"),Sue=a("strong"),vNo=o("deberta"),FNo=o(" \u2014 "),kV=a("a"),TNo=o("DebertaForMaskedLM"),MNo=o(" (DeBERTa model)"),ENo=l(),Zb=a("li"),Rue=a("strong"),CNo=o("deberta-v2"),wNo=o(" \u2014 "),SV=a("a"),ANo=o("DebertaV2ForMaskedLM"),LNo=o(" (DeBERTa-v2 model)"),yNo=l(),ev=a("li"),Pue=a("strong"),xNo=o("distilbert"),$No=o(" \u2014 "),RV=a("a"),kNo=o("DistilBertForMaskedLM"),SNo=o(" (DistilBERT model)"),RNo=l(),ov=a("li"),Bue=a("strong"),PNo=o("electra"),BNo=o(" \u2014 "),PV=a("a"),INo=o("ElectraForMaskedLM"),NNo=o(" (ELECTRA model)"),qNo=l(),rv=a("li"),Iue=a("strong"),jNo=o("flaubert"),DNo=o(" \u2014 "),BV=a("a"),GNo=o("FlaubertWithLMHeadModel"),ONo=o(" (FlauBERT model)"),VNo=l(),tv=a("li"),Nue=a("strong"),XNo=o("fnet"),zNo=o(" \u2014 "),IV=a("a"),WNo=o("FNetForMaskedLM"),QNo=o(" (FNet model)"),HNo=l(),av=a("li"),que=a("strong"),UNo=o("funnel"),JNo=o(" \u2014 "),NV=a("a"),YNo=o("FunnelForMaskedLM"),KNo=o(" (Funnel Transformer model)"),ZNo=l(),nv=a("li"),jue=a("strong"),eqo=o("ibert"),oqo=o(" \u2014 "),qV=a("a"),rqo=o("IBertForMaskedLM"),tqo=o(" (I-BERT model)"),aqo=l(),sv=a("li"),Due=a("strong"),nqo=o("layoutlm"),sqo=o(" \u2014 "),jV=a("a"),lqo=o("LayoutLMForMaskedLM"),iqo=o(" (LayoutLM model)"),dqo=l(),lv=a("li"),Gue=a("strong"),cqo=o("longformer"),mqo=o(" \u2014 "),DV=a("a"),fqo=o("LongformerForMaskedLM"),gqo=o(" (Longformer model)"),hqo=l(),iv=a("li"),Oue=a("strong"),uqo=o("luke"),pqo=o(" \u2014 "),GV=a("a"),_qo=o("LukeForMaskedLM"),bqo=o(" (LUKE model)"),vqo=l(),dv=a("li"),Vue=a("strong"),Fqo=o("mbart"),Tqo=o(" \u2014 "),OV=a("a"),Mqo=o("MBartForConditionalGeneration"),Eqo=o(" (mBART model)"),Cqo=l(),cv=a("li"),Xue=a("strong"),wqo=o("megatron-bert"),Aqo=o(" \u2014 "),VV=a("a"),Lqo=o("MegatronBertForMaskedLM"),yqo=o(" (Megatron-BERT model)"),xqo=l(),mv=a("li"),zue=a("strong"),$qo=o("mobilebert"),kqo=o(" \u2014 "),XV=a("a"),Sqo=o("MobileBertForMaskedLM"),Rqo=o(" (MobileBERT model)"),Pqo=l(),fv=a("li"),Wue=a("strong"),Bqo=o("mpnet"),Iqo=o(" \u2014 "),zV=a("a"),Nqo=o("MPNetForMaskedLM"),qqo=o(" (MPNet model)"),jqo=l(),gv=a("li"),Que=a("strong"),Dqo=o("mvp"),Gqo=o(" \u2014 "),WV=a("a"),Oqo=o("MvpForConditionalGeneration"),Vqo=o(" (MVP model)"),Xqo=l(),hv=a("li"),Hue=a("strong"),zqo=o("nezha"),Wqo=o(" \u2014 "),QV=a("a"),Qqo=o("NezhaForMaskedLM"),Hqo=o(" (Nezha model)"),Uqo=l(),uv=a("li"),Uue=a("strong"),Jqo=o("nystromformer"),Yqo=o(" \u2014 "),HV=a("a"),Kqo=o("NystromformerForMaskedLM"),Zqo=o(" (Nystr\xF6mformer model)"),ejo=l(),pv=a("li"),Jue=a("strong"),ojo=o("perceiver"),rjo=o(" \u2014 "),UV=a("a"),tjo=o("PerceiverForMaskedLM"),ajo=o(" (Perceiver model)"),njo=l(),_v=a("li"),Yue=a("strong"),sjo=o("qdqbert"),ljo=o(" \u2014 "),JV=a("a"),ijo=o("QDQBertForMaskedLM"),djo=o(" (QDQBert model)"),cjo=l(),bv=a("li"),Kue=a("strong"),mjo=o("reformer"),fjo=o(" \u2014 "),YV=a("a"),gjo=o("ReformerForMaskedLM"),hjo=o(" (Reformer model)"),ujo=l(),vv=a("li"),Zue=a("strong"),pjo=o("rembert"),_jo=o(" \u2014 "),KV=a("a"),bjo=o("RemBertForMaskedLM"),vjo=o(" (RemBERT model)"),Fjo=l(),Fv=a("li"),epe=a("strong"),Tjo=o("roberta"),Mjo=o(" \u2014 "),ZV=a("a"),Ejo=o("RobertaForMaskedLM"),Cjo=o(" (RoBERTa model)"),wjo=l(),Tv=a("li"),ope=a("strong"),Ajo=o("roformer"),Ljo=o(" \u2014 "),eX=a("a"),yjo=o("RoFormerForMaskedLM"),xjo=o(" (RoFormer model)"),$jo=l(),Mv=a("li"),rpe=a("strong"),kjo=o("squeezebert"),Sjo=o(" \u2014 "),oX=a("a"),Rjo=o("SqueezeBertForMaskedLM"),Pjo=o(" (SqueezeBERT model)"),Bjo=l(),Ev=a("li"),tpe=a("strong"),Ijo=o("tapas"),Njo=o(" \u2014 "),rX=a("a"),qjo=o("TapasForMaskedLM"),jjo=o(" (TAPAS model)"),Djo=l(),Cv=a("li"),ape=a("strong"),Gjo=o("wav2vec2"),Ojo=o(" \u2014 "),npe=a("code"),Vjo=o("Wav2Vec2ForMaskedLM"),Xjo=o(" (Wav2Vec2 model)"),zjo=l(),wv=a("li"),spe=a("strong"),Wjo=o("xlm"),Qjo=o(" \u2014 "),tX=a("a"),Hjo=o("XLMWithLMHeadModel"),Ujo=o(" (XLM model)"),Jjo=l(),Av=a("li"),lpe=a("strong"),Yjo=o("xlm-roberta"),Kjo=o(" \u2014 "),aX=a("a"),Zjo=o("XLMRobertaForMaskedLM"),eDo=o(" (XLM-RoBERTa model)"),oDo=l(),Lv=a("li"),ipe=a("strong"),rDo=o("xlm-roberta-xl"),tDo=o(" \u2014 "),nX=a("a"),aDo=o("XLMRobertaXLForMaskedLM"),nDo=o(" (XLM-RoBERTa-XL model)"),sDo=l(),yv=a("li"),dpe=a("strong"),lDo=o("yoso"),iDo=o(" \u2014 "),sX=a("a"),dDo=o("YosoForMaskedLM"),cDo=o(" (YOSO model)"),mDo=l(),xv=a("p"),fDo=o("The model is set in evaluation mode by default using "),cpe=a("code"),gDo=o("model.eval()"),hDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),uDo=o("model.train()"),pDo=l(),F($v.$$.fragment),Jze=l(),rd=a("h2"),kv=a("a"),fpe=a("span"),F(b8.$$.fragment),_Do=l(),gpe=a("span"),bDo=o("AutoModelForSeq2SeqLM"),Yze=l(),Bo=a("div"),F(v8.$$.fragment),vDo=l(),td=a("p"),FDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=a("a"),TDo=o("from_pretrained()"),MDo=o(" class method or the "),iX=a("a"),EDo=o("from_config()"),CDo=o(` class
method.`),wDo=l(),F8=a("p"),ADo=o("This class cannot be instantiated directly using "),hpe=a("code"),LDo=o("__init__()"),yDo=o(" (throws an error)."),xDo=l(),ft=a("div"),F(T8.$$.fragment),$Do=l(),upe=a("p"),kDo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SDo=l(),ad=a("p"),RDo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),PDo=o("not"),BDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),IDo=o("from_pretrained()"),NDo=o(" to load the model weights."),qDo=l(),F(Sv.$$.fragment),jDo=l(),oo=a("div"),F(M8.$$.fragment),DDo=l(),_pe=a("p"),GDo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ODo=l(),Da=a("p"),VDo=o("The model class to instantiate is selected based on the "),bpe=a("code"),XDo=o("model_type"),zDo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),WDo=o("pretrained_model_name_or_path"),QDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(":"),JDo=l(),fe=a("ul"),Rv=a("li"),Tpe=a("strong"),YDo=o("bart"),KDo=o(" \u2014 "),cX=a("a"),ZDo=o("BartForConditionalGeneration"),eGo=o(" (BART model)"),oGo=l(),Pv=a("li"),Mpe=a("strong"),rGo=o("bigbird_pegasus"),tGo=o(" \u2014 "),mX=a("a"),aGo=o("BigBirdPegasusForConditionalGeneration"),nGo=o(" (BigBird-Pegasus model)"),sGo=l(),Bv=a("li"),Epe=a("strong"),lGo=o("blenderbot"),iGo=o(" \u2014 "),fX=a("a"),dGo=o("BlenderbotForConditionalGeneration"),cGo=o(" (Blenderbot model)"),mGo=l(),Iv=a("li"),Cpe=a("strong"),fGo=o("blenderbot-small"),gGo=o(" \u2014 "),gX=a("a"),hGo=o("BlenderbotSmallForConditionalGeneration"),uGo=o(" (BlenderbotSmall model)"),pGo=l(),Nv=a("li"),wpe=a("strong"),_Go=o("encoder-decoder"),bGo=o(" \u2014 "),hX=a("a"),vGo=o("EncoderDecoderModel"),FGo=o(" (Encoder decoder model)"),TGo=l(),qv=a("li"),Ape=a("strong"),MGo=o("fsmt"),EGo=o(" \u2014 "),uX=a("a"),CGo=o("FSMTForConditionalGeneration"),wGo=o(" (FairSeq Machine-Translation model)"),AGo=l(),jv=a("li"),Lpe=a("strong"),LGo=o("led"),yGo=o(" \u2014 "),pX=a("a"),xGo=o("LEDForConditionalGeneration"),$Go=o(" (LED model)"),kGo=l(),Dv=a("li"),ype=a("strong"),SGo=o("longt5"),RGo=o(" \u2014 "),_X=a("a"),PGo=o("LongT5ForConditionalGeneration"),BGo=o(" (LongT5 model)"),IGo=l(),Gv=a("li"),xpe=a("strong"),NGo=o("m2m_100"),qGo=o(" \u2014 "),bX=a("a"),jGo=o("M2M100ForConditionalGeneration"),DGo=o(" (M2M100 model)"),GGo=l(),Ov=a("li"),$pe=a("strong"),OGo=o("marian"),VGo=o(" \u2014 "),vX=a("a"),XGo=o("MarianMTModel"),zGo=o(" (Marian model)"),WGo=l(),Vv=a("li"),kpe=a("strong"),QGo=o("mbart"),HGo=o(" \u2014 "),FX=a("a"),UGo=o("MBartForConditionalGeneration"),JGo=o(" (mBART model)"),YGo=l(),Xv=a("li"),Spe=a("strong"),KGo=o("mt5"),ZGo=o(" \u2014 "),TX=a("a"),eOo=o("MT5ForConditionalGeneration"),oOo=o(" (MT5 model)"),rOo=l(),zv=a("li"),Rpe=a("strong"),tOo=o("mvp"),aOo=o(" \u2014 "),MX=a("a"),nOo=o("MvpForConditionalGeneration"),sOo=o(" (MVP model)"),lOo=l(),Wv=a("li"),Ppe=a("strong"),iOo=o("nllb"),dOo=o(" \u2014 "),EX=a("a"),cOo=o("M2M100ForConditionalGeneration"),mOo=o(" (NLLB model)"),fOo=l(),Qv=a("li"),Bpe=a("strong"),gOo=o("pegasus"),hOo=o(" \u2014 "),CX=a("a"),uOo=o("PegasusForConditionalGeneration"),pOo=o(" (Pegasus model)"),_Oo=l(),Hv=a("li"),Ipe=a("strong"),bOo=o("plbart"),vOo=o(" \u2014 "),wX=a("a"),FOo=o("PLBartForConditionalGeneration"),TOo=o(" (PLBart model)"),MOo=l(),Uv=a("li"),Npe=a("strong"),EOo=o("prophetnet"),COo=o(" \u2014 "),AX=a("a"),wOo=o("ProphetNetForConditionalGeneration"),AOo=o(" (ProphetNet model)"),LOo=l(),Jv=a("li"),qpe=a("strong"),yOo=o("t5"),xOo=o(" \u2014 "),LX=a("a"),$Oo=o("T5ForConditionalGeneration"),kOo=o(" (T5 model)"),SOo=l(),Yv=a("li"),jpe=a("strong"),ROo=o("xlm-prophetnet"),POo=o(" \u2014 "),yX=a("a"),BOo=o("XLMProphetNetForConditionalGeneration"),IOo=o(" (XLM-ProphetNet model)"),NOo=l(),Kv=a("p"),qOo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),jOo=o("model.eval()"),DOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),GOo=o("model.train()"),OOo=l(),F(Zv.$$.fragment),Kze=l(),nd=a("h2"),e1=a("a"),Ope=a("span"),F(E8.$$.fragment),VOo=l(),Vpe=a("span"),XOo=o("AutoModelForSequenceClassification"),Zze=l(),Io=a("div"),F(C8.$$.fragment),zOo=l(),sd=a("p"),WOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xX=a("a"),QOo=o("from_pretrained()"),HOo=o(" class method or the "),$X=a("a"),UOo=o("from_config()"),JOo=o(` class
method.`),YOo=l(),w8=a("p"),KOo=o("This class cannot be instantiated directly using "),Xpe=a("code"),ZOo=o("__init__()"),eVo=o(" (throws an error)."),oVo=l(),gt=a("div"),F(A8.$$.fragment),rVo=l(),zpe=a("p"),tVo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aVo=l(),ld=a("p"),nVo=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),sVo=o("not"),lVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),iVo=o("from_pretrained()"),dVo=o(" to load the model weights."),cVo=l(),F(o1.$$.fragment),mVo=l(),ro=a("div"),F(L8.$$.fragment),fVo=l(),Qpe=a("p"),gVo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hVo=l(),Ga=a("p"),uVo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),pVo=o("model_type"),_Vo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),FVo=o("pretrained_model_name_or_path"),TVo=o(":"),MVo=l(),P=a("ul"),r1=a("li"),Ype=a("strong"),EVo=o("albert"),CVo=o(" \u2014 "),SX=a("a"),wVo=o("AlbertForSequenceClassification"),AVo=o(" (ALBERT model)"),LVo=l(),t1=a("li"),Kpe=a("strong"),yVo=o("bart"),xVo=o(" \u2014 "),RX=a("a"),$Vo=o("BartForSequenceClassification"),kVo=o(" (BART model)"),SVo=l(),a1=a("li"),Zpe=a("strong"),RVo=o("bert"),PVo=o(" \u2014 "),PX=a("a"),BVo=o("BertForSequenceClassification"),IVo=o(" (BERT model)"),NVo=l(),n1=a("li"),e_e=a("strong"),qVo=o("big_bird"),jVo=o(" \u2014 "),BX=a("a"),DVo=o("BigBirdForSequenceClassification"),GVo=o(" (BigBird model)"),OVo=l(),s1=a("li"),o_e=a("strong"),VVo=o("bigbird_pegasus"),XVo=o(" \u2014 "),IX=a("a"),zVo=o("BigBirdPegasusForSequenceClassification"),WVo=o(" (BigBird-Pegasus model)"),QVo=l(),l1=a("li"),r_e=a("strong"),HVo=o("bloom"),UVo=o(" \u2014 "),NX=a("a"),JVo=o("BloomForSequenceClassification"),YVo=o(" (BLOOM model)"),KVo=l(),i1=a("li"),t_e=a("strong"),ZVo=o("camembert"),eXo=o(" \u2014 "),qX=a("a"),oXo=o("CamembertForSequenceClassification"),rXo=o(" (CamemBERT model)"),tXo=l(),d1=a("li"),a_e=a("strong"),aXo=o("canine"),nXo=o(" \u2014 "),jX=a("a"),sXo=o("CanineForSequenceClassification"),lXo=o(" (CANINE model)"),iXo=l(),c1=a("li"),n_e=a("strong"),dXo=o("convbert"),cXo=o(" \u2014 "),DX=a("a"),mXo=o("ConvBertForSequenceClassification"),fXo=o(" (ConvBERT model)"),gXo=l(),m1=a("li"),s_e=a("strong"),hXo=o("ctrl"),uXo=o(" \u2014 "),GX=a("a"),pXo=o("CTRLForSequenceClassification"),_Xo=o(" (CTRL model)"),bXo=l(),f1=a("li"),l_e=a("strong"),vXo=o("data2vec-text"),FXo=o(" \u2014 "),OX=a("a"),TXo=o("Data2VecTextForSequenceClassification"),MXo=o(" (Data2VecText model)"),EXo=l(),g1=a("li"),i_e=a("strong"),CXo=o("deberta"),wXo=o(" \u2014 "),VX=a("a"),AXo=o("DebertaForSequenceClassification"),LXo=o(" (DeBERTa model)"),yXo=l(),h1=a("li"),d_e=a("strong"),xXo=o("deberta-v2"),$Xo=o(" \u2014 "),XX=a("a"),kXo=o("DebertaV2ForSequenceClassification"),SXo=o(" (DeBERTa-v2 model)"),RXo=l(),u1=a("li"),c_e=a("strong"),PXo=o("distilbert"),BXo=o(" \u2014 "),zX=a("a"),IXo=o("DistilBertForSequenceClassification"),NXo=o(" (DistilBERT model)"),qXo=l(),p1=a("li"),m_e=a("strong"),jXo=o("electra"),DXo=o(" \u2014 "),WX=a("a"),GXo=o("ElectraForSequenceClassification"),OXo=o(" (ELECTRA model)"),VXo=l(),_1=a("li"),f_e=a("strong"),XXo=o("flaubert"),zXo=o(" \u2014 "),QX=a("a"),WXo=o("FlaubertForSequenceClassification"),QXo=o(" (FlauBERT model)"),HXo=l(),b1=a("li"),g_e=a("strong"),UXo=o("fnet"),JXo=o(" \u2014 "),HX=a("a"),YXo=o("FNetForSequenceClassification"),KXo=o(" (FNet model)"),ZXo=l(),v1=a("li"),h_e=a("strong"),ezo=o("funnel"),ozo=o(" \u2014 "),UX=a("a"),rzo=o("FunnelForSequenceClassification"),tzo=o(" (Funnel Transformer model)"),azo=l(),F1=a("li"),u_e=a("strong"),nzo=o("gpt2"),szo=o(" \u2014 "),JX=a("a"),lzo=o("GPT2ForSequenceClassification"),izo=o(" (OpenAI GPT-2 model)"),dzo=l(),T1=a("li"),p_e=a("strong"),czo=o("gpt_neo"),mzo=o(" \u2014 "),YX=a("a"),fzo=o("GPTNeoForSequenceClassification"),gzo=o(" (GPT Neo model)"),hzo=l(),M1=a("li"),__e=a("strong"),uzo=o("gptj"),pzo=o(" \u2014 "),KX=a("a"),_zo=o("GPTJForSequenceClassification"),bzo=o(" (GPT-J model)"),vzo=l(),E1=a("li"),b_e=a("strong"),Fzo=o("ibert"),Tzo=o(" \u2014 "),ZX=a("a"),Mzo=o("IBertForSequenceClassification"),Ezo=o(" (I-BERT model)"),Czo=l(),C1=a("li"),v_e=a("strong"),wzo=o("layoutlm"),Azo=o(" \u2014 "),ez=a("a"),Lzo=o("LayoutLMForSequenceClassification"),yzo=o(" (LayoutLM model)"),xzo=l(),w1=a("li"),F_e=a("strong"),$zo=o("layoutlmv2"),kzo=o(" \u2014 "),oz=a("a"),Szo=o("LayoutLMv2ForSequenceClassification"),Rzo=o(" (LayoutLMv2 model)"),Pzo=l(),A1=a("li"),T_e=a("strong"),Bzo=o("layoutlmv3"),Izo=o(" \u2014 "),rz=a("a"),Nzo=o("LayoutLMv3ForSequenceClassification"),qzo=o(" (LayoutLMv3 model)"),jzo=l(),L1=a("li"),M_e=a("strong"),Dzo=o("led"),Gzo=o(" \u2014 "),tz=a("a"),Ozo=o("LEDForSequenceClassification"),Vzo=o(" (LED model)"),Xzo=l(),y1=a("li"),E_e=a("strong"),zzo=o("longformer"),Wzo=o(" \u2014 "),az=a("a"),Qzo=o("LongformerForSequenceClassification"),Hzo=o(" (Longformer model)"),Uzo=l(),x1=a("li"),C_e=a("strong"),Jzo=o("luke"),Yzo=o(" \u2014 "),nz=a("a"),Kzo=o("LukeForSequenceClassification"),Zzo=o(" (LUKE model)"),eWo=l(),$1=a("li"),w_e=a("strong"),oWo=o("mbart"),rWo=o(" \u2014 "),sz=a("a"),tWo=o("MBartForSequenceClassification"),aWo=o(" (mBART model)"),nWo=l(),k1=a("li"),A_e=a("strong"),sWo=o("megatron-bert"),lWo=o(" \u2014 "),lz=a("a"),iWo=o("MegatronBertForSequenceClassification"),dWo=o(" (Megatron-BERT model)"),cWo=l(),S1=a("li"),L_e=a("strong"),mWo=o("mobilebert"),fWo=o(" \u2014 "),iz=a("a"),gWo=o("MobileBertForSequenceClassification"),hWo=o(" (MobileBERT model)"),uWo=l(),R1=a("li"),y_e=a("strong"),pWo=o("mpnet"),_Wo=o(" \u2014 "),dz=a("a"),bWo=o("MPNetForSequenceClassification"),vWo=o(" (MPNet model)"),FWo=l(),P1=a("li"),x_e=a("strong"),TWo=o("mvp"),MWo=o(" \u2014 "),cz=a("a"),EWo=o("MvpForSequenceClassification"),CWo=o(" (MVP model)"),wWo=l(),B1=a("li"),$_e=a("strong"),AWo=o("nezha"),LWo=o(" \u2014 "),mz=a("a"),yWo=o("NezhaForSequenceClassification"),xWo=o(" (Nezha model)"),$Wo=l(),I1=a("li"),k_e=a("strong"),kWo=o("nystromformer"),SWo=o(" \u2014 "),fz=a("a"),RWo=o("NystromformerForSequenceClassification"),PWo=o(" (Nystr\xF6mformer model)"),BWo=l(),N1=a("li"),S_e=a("strong"),IWo=o("openai-gpt"),NWo=o(" \u2014 "),gz=a("a"),qWo=o("OpenAIGPTForSequenceClassification"),jWo=o(" (OpenAI GPT model)"),DWo=l(),q1=a("li"),R_e=a("strong"),GWo=o("opt"),OWo=o(" \u2014 "),hz=a("a"),VWo=o("OPTForSequenceClassification"),XWo=o(" (OPT model)"),zWo=l(),j1=a("li"),P_e=a("strong"),WWo=o("perceiver"),QWo=o(" \u2014 "),uz=a("a"),HWo=o("PerceiverForSequenceClassification"),UWo=o(" (Perceiver model)"),JWo=l(),D1=a("li"),B_e=a("strong"),YWo=o("plbart"),KWo=o(" \u2014 "),pz=a("a"),ZWo=o("PLBartForSequenceClassification"),eQo=o(" (PLBart model)"),oQo=l(),G1=a("li"),I_e=a("strong"),rQo=o("qdqbert"),tQo=o(" \u2014 "),_z=a("a"),aQo=o("QDQBertForSequenceClassification"),nQo=o(" (QDQBert model)"),sQo=l(),O1=a("li"),N_e=a("strong"),lQo=o("reformer"),iQo=o(" \u2014 "),bz=a("a"),dQo=o("ReformerForSequenceClassification"),cQo=o(" (Reformer model)"),mQo=l(),V1=a("li"),q_e=a("strong"),fQo=o("rembert"),gQo=o(" \u2014 "),vz=a("a"),hQo=o("RemBertForSequenceClassification"),uQo=o(" (RemBERT model)"),pQo=l(),X1=a("li"),j_e=a("strong"),_Qo=o("roberta"),bQo=o(" \u2014 "),Fz=a("a"),vQo=o("RobertaForSequenceClassification"),FQo=o(" (RoBERTa model)"),TQo=l(),z1=a("li"),D_e=a("strong"),MQo=o("roformer"),EQo=o(" \u2014 "),Tz=a("a"),CQo=o("RoFormerForSequenceClassification"),wQo=o(" (RoFormer model)"),AQo=l(),W1=a("li"),G_e=a("strong"),LQo=o("squeezebert"),yQo=o(" \u2014 "),Mz=a("a"),xQo=o("SqueezeBertForSequenceClassification"),$Qo=o(" (SqueezeBERT model)"),kQo=l(),Q1=a("li"),O_e=a("strong"),SQo=o("tapas"),RQo=o(" \u2014 "),Ez=a("a"),PQo=o("TapasForSequenceClassification"),BQo=o(" (TAPAS model)"),IQo=l(),H1=a("li"),V_e=a("strong"),NQo=o("transfo-xl"),qQo=o(" \u2014 "),Cz=a("a"),jQo=o("TransfoXLForSequenceClassification"),DQo=o(" (Transformer-XL model)"),GQo=l(),U1=a("li"),X_e=a("strong"),OQo=o("xlm"),VQo=o(" \u2014 "),wz=a("a"),XQo=o("XLMForSequenceClassification"),zQo=o(" (XLM model)"),WQo=l(),J1=a("li"),z_e=a("strong"),QQo=o("xlm-roberta"),HQo=o(" \u2014 "),Az=a("a"),UQo=o("XLMRobertaForSequenceClassification"),JQo=o(" (XLM-RoBERTa model)"),YQo=l(),Y1=a("li"),W_e=a("strong"),KQo=o("xlm-roberta-xl"),ZQo=o(" \u2014 "),Lz=a("a"),eHo=o("XLMRobertaXLForSequenceClassification"),oHo=o(" (XLM-RoBERTa-XL model)"),rHo=l(),K1=a("li"),Q_e=a("strong"),tHo=o("xlnet"),aHo=o(" \u2014 "),yz=a("a"),nHo=o("XLNetForSequenceClassification"),sHo=o(" (XLNet model)"),lHo=l(),Z1=a("li"),H_e=a("strong"),iHo=o("yoso"),dHo=o(" \u2014 "),xz=a("a"),cHo=o("YosoForSequenceClassification"),mHo=o(" (YOSO model)"),fHo=l(),eF=a("p"),gHo=o("The model is set in evaluation mode by default using "),U_e=a("code"),hHo=o("model.eval()"),uHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),pHo=o("model.train()"),_Ho=l(),F(oF.$$.fragment),eWe=l(),id=a("h2"),rF=a("a"),Y_e=a("span"),F(y8.$$.fragment),bHo=l(),K_e=a("span"),vHo=o("AutoModelForMultipleChoice"),oWe=l(),No=a("div"),F(x8.$$.fragment),FHo=l(),dd=a("p"),THo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$z=a("a"),MHo=o("from_pretrained()"),EHo=o(" class method or the "),kz=a("a"),CHo=o("from_config()"),wHo=o(` class
method.`),AHo=l(),$8=a("p"),LHo=o("This class cannot be instantiated directly using "),Z_e=a("code"),yHo=o("__init__()"),xHo=o(" (throws an error)."),$Ho=l(),ht=a("div"),F(k8.$$.fragment),kHo=l(),e2e=a("p"),SHo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RHo=l(),cd=a("p"),PHo=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),BHo=o("not"),IHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),NHo=o("from_pretrained()"),qHo=o(" to load the model weights."),jHo=l(),F(tF.$$.fragment),DHo=l(),to=a("div"),F(S8.$$.fragment),GHo=l(),r2e=a("p"),OHo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VHo=l(),Oa=a("p"),XHo=o("The model class to instantiate is selected based on the "),t2e=a("code"),zHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),QHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),Z=a("ul"),aF=a("li"),s2e=a("strong"),KHo=o("albert"),ZHo=o(" \u2014 "),Rz=a("a"),eUo=o("AlbertForMultipleChoice"),oUo=o(" (ALBERT model)"),rUo=l(),nF=a("li"),l2e=a("strong"),tUo=o("bert"),aUo=o(" \u2014 "),Pz=a("a"),nUo=o("BertForMultipleChoice"),sUo=o(" (BERT model)"),lUo=l(),sF=a("li"),i2e=a("strong"),iUo=o("big_bird"),dUo=o(" \u2014 "),Bz=a("a"),cUo=o("BigBirdForMultipleChoice"),mUo=o(" (BigBird model)"),fUo=l(),lF=a("li"),d2e=a("strong"),gUo=o("camembert"),hUo=o(" \u2014 "),Iz=a("a"),uUo=o("CamembertForMultipleChoice"),pUo=o(" (CamemBERT model)"),_Uo=l(),iF=a("li"),c2e=a("strong"),bUo=o("canine"),vUo=o(" \u2014 "),Nz=a("a"),FUo=o("CanineForMultipleChoice"),TUo=o(" (CANINE model)"),MUo=l(),dF=a("li"),m2e=a("strong"),EUo=o("convbert"),CUo=o(" \u2014 "),qz=a("a"),wUo=o("ConvBertForMultipleChoice"),AUo=o(" (ConvBERT model)"),LUo=l(),cF=a("li"),f2e=a("strong"),yUo=o("data2vec-text"),xUo=o(" \u2014 "),jz=a("a"),$Uo=o("Data2VecTextForMultipleChoice"),kUo=o(" (Data2VecText model)"),SUo=l(),mF=a("li"),g2e=a("strong"),RUo=o("deberta-v2"),PUo=o(" \u2014 "),Dz=a("a"),BUo=o("DebertaV2ForMultipleChoice"),IUo=o(" (DeBERTa-v2 model)"),NUo=l(),fF=a("li"),h2e=a("strong"),qUo=o("distilbert"),jUo=o(" \u2014 "),Gz=a("a"),DUo=o("DistilBertForMultipleChoice"),GUo=o(" (DistilBERT model)"),OUo=l(),gF=a("li"),u2e=a("strong"),VUo=o("electra"),XUo=o(" \u2014 "),Oz=a("a"),zUo=o("ElectraForMultipleChoice"),WUo=o(" (ELECTRA model)"),QUo=l(),hF=a("li"),p2e=a("strong"),HUo=o("flaubert"),UUo=o(" \u2014 "),Vz=a("a"),JUo=o("FlaubertForMultipleChoice"),YUo=o(" (FlauBERT model)"),KUo=l(),uF=a("li"),_2e=a("strong"),ZUo=o("fnet"),eJo=o(" \u2014 "),Xz=a("a"),oJo=o("FNetForMultipleChoice"),rJo=o(" (FNet model)"),tJo=l(),pF=a("li"),b2e=a("strong"),aJo=o("funnel"),nJo=o(" \u2014 "),zz=a("a"),sJo=o("FunnelForMultipleChoice"),lJo=o(" (Funnel Transformer model)"),iJo=l(),_F=a("li"),v2e=a("strong"),dJo=o("ibert"),cJo=o(" \u2014 "),Wz=a("a"),mJo=o("IBertForMultipleChoice"),fJo=o(" (I-BERT model)"),gJo=l(),bF=a("li"),F2e=a("strong"),hJo=o("longformer"),uJo=o(" \u2014 "),Qz=a("a"),pJo=o("LongformerForMultipleChoice"),_Jo=o(" (Longformer model)"),bJo=l(),vF=a("li"),T2e=a("strong"),vJo=o("luke"),FJo=o(" \u2014 "),Hz=a("a"),TJo=o("LukeForMultipleChoice"),MJo=o(" (LUKE model)"),EJo=l(),FF=a("li"),M2e=a("strong"),CJo=o("megatron-bert"),wJo=o(" \u2014 "),Uz=a("a"),AJo=o("MegatronBertForMultipleChoice"),LJo=o(" (Megatron-BERT model)"),yJo=l(),TF=a("li"),E2e=a("strong"),xJo=o("mobilebert"),$Jo=o(" \u2014 "),Jz=a("a"),kJo=o("MobileBertForMultipleChoice"),SJo=o(" (MobileBERT model)"),RJo=l(),MF=a("li"),C2e=a("strong"),PJo=o("mpnet"),BJo=o(" \u2014 "),Yz=a("a"),IJo=o("MPNetForMultipleChoice"),NJo=o(" (MPNet model)"),qJo=l(),EF=a("li"),w2e=a("strong"),jJo=o("nezha"),DJo=o(" \u2014 "),Kz=a("a"),GJo=o("NezhaForMultipleChoice"),OJo=o(" (Nezha model)"),VJo=l(),CF=a("li"),A2e=a("strong"),XJo=o("nystromformer"),zJo=o(" \u2014 "),Zz=a("a"),WJo=o("NystromformerForMultipleChoice"),QJo=o(" (Nystr\xF6mformer model)"),HJo=l(),wF=a("li"),L2e=a("strong"),UJo=o("qdqbert"),JJo=o(" \u2014 "),eW=a("a"),YJo=o("QDQBertForMultipleChoice"),KJo=o(" (QDQBert model)"),ZJo=l(),AF=a("li"),y2e=a("strong"),eYo=o("rembert"),oYo=o(" \u2014 "),oW=a("a"),rYo=o("RemBertForMultipleChoice"),tYo=o(" (RemBERT model)"),aYo=l(),LF=a("li"),x2e=a("strong"),nYo=o("roberta"),sYo=o(" \u2014 "),rW=a("a"),lYo=o("RobertaForMultipleChoice"),iYo=o(" (RoBERTa model)"),dYo=l(),yF=a("li"),$2e=a("strong"),cYo=o("roformer"),mYo=o(" \u2014 "),tW=a("a"),fYo=o("RoFormerForMultipleChoice"),gYo=o(" (RoFormer model)"),hYo=l(),xF=a("li"),k2e=a("strong"),uYo=o("squeezebert"),pYo=o(" \u2014 "),aW=a("a"),_Yo=o("SqueezeBertForMultipleChoice"),bYo=o(" (SqueezeBERT model)"),vYo=l(),$F=a("li"),S2e=a("strong"),FYo=o("xlm"),TYo=o(" \u2014 "),nW=a("a"),MYo=o("XLMForMultipleChoice"),EYo=o(" (XLM model)"),CYo=l(),kF=a("li"),R2e=a("strong"),wYo=o("xlm-roberta"),AYo=o(" \u2014 "),sW=a("a"),LYo=o("XLMRobertaForMultipleChoice"),yYo=o(" (XLM-RoBERTa model)"),xYo=l(),SF=a("li"),P2e=a("strong"),$Yo=o("xlm-roberta-xl"),kYo=o(" \u2014 "),lW=a("a"),SYo=o("XLMRobertaXLForMultipleChoice"),RYo=o(" (XLM-RoBERTa-XL model)"),PYo=l(),RF=a("li"),B2e=a("strong"),BYo=o("xlnet"),IYo=o(" \u2014 "),iW=a("a"),NYo=o("XLNetForMultipleChoice"),qYo=o(" (XLNet model)"),jYo=l(),PF=a("li"),I2e=a("strong"),DYo=o("yoso"),GYo=o(" \u2014 "),dW=a("a"),OYo=o("YosoForMultipleChoice"),VYo=o(" (YOSO model)"),XYo=l(),BF=a("p"),zYo=o("The model is set in evaluation mode by default using "),N2e=a("code"),WYo=o("model.eval()"),QYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),HYo=o("model.train()"),UYo=l(),F(IF.$$.fragment),rWe=l(),md=a("h2"),NF=a("a"),j2e=a("span"),F(R8.$$.fragment),JYo=l(),D2e=a("span"),YYo=o("AutoModelForNextSentencePrediction"),tWe=l(),qo=a("div"),F(P8.$$.fragment),KYo=l(),fd=a("p"),ZYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cW=a("a"),eKo=o("from_pretrained()"),oKo=o(" class method or the "),mW=a("a"),rKo=o("from_config()"),tKo=o(` class
method.`),aKo=l(),B8=a("p"),nKo=o("This class cannot be instantiated directly using "),G2e=a("code"),sKo=o("__init__()"),lKo=o(" (throws an error)."),iKo=l(),ut=a("div"),F(I8.$$.fragment),dKo=l(),O2e=a("p"),cKo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mKo=l(),gd=a("p"),fKo=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),gKo=o("not"),hKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),uKo=o("from_pretrained()"),pKo=o(" to load the model weights."),_Ko=l(),F(qF.$$.fragment),bKo=l(),ao=a("div"),F(N8.$$.fragment),vKo=l(),X2e=a("p"),FKo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TKo=l(),Va=a("p"),MKo=o("The model class to instantiate is selected based on the "),z2e=a("code"),EKo=o("model_type"),CKo=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),LKo=o("pretrained_model_name_or_path"),yKo=o(":"),xKo=l(),jo=a("ul"),jF=a("li"),H2e=a("strong"),$Ko=o("bert"),kKo=o(" \u2014 "),gW=a("a"),SKo=o("BertForNextSentencePrediction"),RKo=o(" (BERT model)"),PKo=l(),DF=a("li"),U2e=a("strong"),BKo=o("fnet"),IKo=o(" \u2014 "),hW=a("a"),NKo=o("FNetForNextSentencePrediction"),qKo=o(" (FNet model)"),jKo=l(),GF=a("li"),J2e=a("strong"),DKo=o("megatron-bert"),GKo=o(" \u2014 "),uW=a("a"),OKo=o("MegatronBertForNextSentencePrediction"),VKo=o(" (Megatron-BERT model)"),XKo=l(),OF=a("li"),Y2e=a("strong"),zKo=o("mobilebert"),WKo=o(" \u2014 "),pW=a("a"),QKo=o("MobileBertForNextSentencePrediction"),HKo=o(" (MobileBERT model)"),UKo=l(),VF=a("li"),K2e=a("strong"),JKo=o("nezha"),YKo=o(" \u2014 "),_W=a("a"),KKo=o("NezhaForNextSentencePrediction"),ZKo=o(" (Nezha model)"),eZo=l(),XF=a("li"),Z2e=a("strong"),oZo=o("qdqbert"),rZo=o(" \u2014 "),bW=a("a"),tZo=o("QDQBertForNextSentencePrediction"),aZo=o(" (QDQBert model)"),nZo=l(),zF=a("p"),sZo=o("The model is set in evaluation mode by default using "),ebe=a("code"),lZo=o("model.eval()"),iZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),dZo=o("model.train()"),cZo=l(),F(WF.$$.fragment),aWe=l(),hd=a("h2"),QF=a("a"),rbe=a("span"),F(q8.$$.fragment),mZo=l(),tbe=a("span"),fZo=o("AutoModelForTokenClassification"),nWe=l(),Do=a("div"),F(j8.$$.fragment),gZo=l(),ud=a("p"),hZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vW=a("a"),uZo=o("from_pretrained()"),pZo=o(" class method or the "),FW=a("a"),_Zo=o("from_config()"),bZo=o(` class
method.`),vZo=l(),D8=a("p"),FZo=o("This class cannot be instantiated directly using "),abe=a("code"),TZo=o("__init__()"),MZo=o(" (throws an error)."),EZo=l(),pt=a("div"),F(G8.$$.fragment),CZo=l(),nbe=a("p"),wZo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AZo=l(),pd=a("p"),LZo=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),yZo=o("not"),xZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),$Zo=o("from_pretrained()"),kZo=o(" to load the model weights."),SZo=l(),F(HF.$$.fragment),RZo=l(),no=a("div"),F(O8.$$.fragment),PZo=l(),lbe=a("p"),BZo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IZo=l(),Xa=a("p"),NZo=o("The model class to instantiate is selected based on the "),ibe=a("code"),qZo=o("model_type"),jZo=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),DZo=o("pretrained_model_name_or_path"),GZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),OZo=o("pretrained_model_name_or_path"),VZo=o(":"),XZo=l(),H=a("ul"),UF=a("li"),mbe=a("strong"),zZo=o("albert"),WZo=o(" \u2014 "),MW=a("a"),QZo=o("AlbertForTokenClassification"),HZo=o(" (ALBERT model)"),UZo=l(),JF=a("li"),fbe=a("strong"),JZo=o("bert"),YZo=o(" \u2014 "),EW=a("a"),KZo=o("BertForTokenClassification"),ZZo=o(" (BERT model)"),eer=l(),YF=a("li"),gbe=a("strong"),oer=o("big_bird"),rer=o(" \u2014 "),CW=a("a"),ter=o("BigBirdForTokenClassification"),aer=o(" (BigBird model)"),ner=l(),KF=a("li"),hbe=a("strong"),ser=o("bloom"),ler=o(" \u2014 "),wW=a("a"),ier=o("BloomForTokenClassification"),der=o(" (BLOOM model)"),cer=l(),ZF=a("li"),ube=a("strong"),mer=o("camembert"),fer=o(" \u2014 "),AW=a("a"),ger=o("CamembertForTokenClassification"),her=o(" (CamemBERT model)"),uer=l(),eT=a("li"),pbe=a("strong"),per=o("canine"),_er=o(" \u2014 "),LW=a("a"),ber=o("CanineForTokenClassification"),ver=o(" (CANINE model)"),Fer=l(),oT=a("li"),_be=a("strong"),Ter=o("convbert"),Mer=o(" \u2014 "),yW=a("a"),Eer=o("ConvBertForTokenClassification"),Cer=o(" (ConvBERT model)"),wer=l(),rT=a("li"),bbe=a("strong"),Aer=o("data2vec-text"),Ler=o(" \u2014 "),xW=a("a"),yer=o("Data2VecTextForTokenClassification"),xer=o(" (Data2VecText model)"),$er=l(),tT=a("li"),vbe=a("strong"),ker=o("deberta"),Ser=o(" \u2014 "),$W=a("a"),Rer=o("DebertaForTokenClassification"),Per=o(" (DeBERTa model)"),Ber=l(),aT=a("li"),Fbe=a("strong"),Ier=o("deberta-v2"),Ner=o(" \u2014 "),kW=a("a"),qer=o("DebertaV2ForTokenClassification"),jer=o(" (DeBERTa-v2 model)"),Der=l(),nT=a("li"),Tbe=a("strong"),Ger=o("distilbert"),Oer=o(" \u2014 "),SW=a("a"),Ver=o("DistilBertForTokenClassification"),Xer=o(" (DistilBERT model)"),zer=l(),sT=a("li"),Mbe=a("strong"),Wer=o("electra"),Qer=o(" \u2014 "),RW=a("a"),Her=o("ElectraForTokenClassification"),Uer=o(" (ELECTRA model)"),Jer=l(),lT=a("li"),Ebe=a("strong"),Yer=o("flaubert"),Ker=o(" \u2014 "),PW=a("a"),Zer=o("FlaubertForTokenClassification"),eor=o(" (FlauBERT model)"),oor=l(),iT=a("li"),Cbe=a("strong"),ror=o("fnet"),tor=o(" \u2014 "),BW=a("a"),aor=o("FNetForTokenClassification"),nor=o(" (FNet model)"),sor=l(),dT=a("li"),wbe=a("strong"),lor=o("funnel"),ior=o(" \u2014 "),IW=a("a"),dor=o("FunnelForTokenClassification"),cor=o(" (Funnel Transformer model)"),mor=l(),cT=a("li"),Abe=a("strong"),gor=o("gpt2"),hor=o(" \u2014 "),NW=a("a"),uor=o("GPT2ForTokenClassification"),por=o(" (OpenAI GPT-2 model)"),_or=l(),mT=a("li"),Lbe=a("strong"),bor=o("ibert"),vor=o(" \u2014 "),qW=a("a"),For=o("IBertForTokenClassification"),Tor=o(" (I-BERT model)"),Mor=l(),fT=a("li"),ybe=a("strong"),Eor=o("layoutlm"),Cor=o(" \u2014 "),jW=a("a"),wor=o("LayoutLMForTokenClassification"),Aor=o(" (LayoutLM model)"),Lor=l(),gT=a("li"),xbe=a("strong"),yor=o("layoutlmv2"),xor=o(" \u2014 "),DW=a("a"),$or=o("LayoutLMv2ForTokenClassification"),kor=o(" (LayoutLMv2 model)"),Sor=l(),hT=a("li"),$be=a("strong"),Ror=o("layoutlmv3"),Por=o(" \u2014 "),GW=a("a"),Bor=o("LayoutLMv3ForTokenClassification"),Ior=o(" (LayoutLMv3 model)"),Nor=l(),uT=a("li"),kbe=a("strong"),qor=o("longformer"),jor=o(" \u2014 "),OW=a("a"),Dor=o("LongformerForTokenClassification"),Gor=o(" (Longformer model)"),Oor=l(),pT=a("li"),Sbe=a("strong"),Vor=o("luke"),Xor=o(" \u2014 "),VW=a("a"),zor=o("LukeForTokenClassification"),Wor=o(" (LUKE model)"),Qor=l(),_T=a("li"),Rbe=a("strong"),Hor=o("megatron-bert"),Uor=o(" \u2014 "),XW=a("a"),Jor=o("MegatronBertForTokenClassification"),Yor=o(" (Megatron-BERT model)"),Kor=l(),bT=a("li"),Pbe=a("strong"),Zor=o("mobilebert"),err=o(" \u2014 "),zW=a("a"),orr=o("MobileBertForTokenClassification"),rrr=o(" (MobileBERT model)"),trr=l(),vT=a("li"),Bbe=a("strong"),arr=o("mpnet"),nrr=o(" \u2014 "),WW=a("a"),srr=o("MPNetForTokenClassification"),lrr=o(" (MPNet model)"),irr=l(),FT=a("li"),Ibe=a("strong"),drr=o("nezha"),crr=o(" \u2014 "),QW=a("a"),mrr=o("NezhaForTokenClassification"),frr=o(" (Nezha model)"),grr=l(),TT=a("li"),Nbe=a("strong"),hrr=o("nystromformer"),urr=o(" \u2014 "),HW=a("a"),prr=o("NystromformerForTokenClassification"),_rr=o(" (Nystr\xF6mformer model)"),brr=l(),MT=a("li"),qbe=a("strong"),vrr=o("qdqbert"),Frr=o(" \u2014 "),UW=a("a"),Trr=o("QDQBertForTokenClassification"),Mrr=o(" (QDQBert model)"),Err=l(),ET=a("li"),jbe=a("strong"),Crr=o("rembert"),wrr=o(" \u2014 "),JW=a("a"),Arr=o("RemBertForTokenClassification"),Lrr=o(" (RemBERT model)"),yrr=l(),CT=a("li"),Dbe=a("strong"),xrr=o("roberta"),$rr=o(" \u2014 "),YW=a("a"),krr=o("RobertaForTokenClassification"),Srr=o(" (RoBERTa model)"),Rrr=l(),wT=a("li"),Gbe=a("strong"),Prr=o("roformer"),Brr=o(" \u2014 "),KW=a("a"),Irr=o("RoFormerForTokenClassification"),Nrr=o(" (RoFormer model)"),qrr=l(),AT=a("li"),Obe=a("strong"),jrr=o("squeezebert"),Drr=o(" \u2014 "),ZW=a("a"),Grr=o("SqueezeBertForTokenClassification"),Orr=o(" (SqueezeBERT model)"),Vrr=l(),LT=a("li"),Vbe=a("strong"),Xrr=o("xlm"),zrr=o(" \u2014 "),eQ=a("a"),Wrr=o("XLMForTokenClassification"),Qrr=o(" (XLM model)"),Hrr=l(),yT=a("li"),Xbe=a("strong"),Urr=o("xlm-roberta"),Jrr=o(" \u2014 "),oQ=a("a"),Yrr=o("XLMRobertaForTokenClassification"),Krr=o(" (XLM-RoBERTa model)"),Zrr=l(),xT=a("li"),zbe=a("strong"),etr=o("xlm-roberta-xl"),otr=o(" \u2014 "),rQ=a("a"),rtr=o("XLMRobertaXLForTokenClassification"),ttr=o(" (XLM-RoBERTa-XL model)"),atr=l(),$T=a("li"),Wbe=a("strong"),ntr=o("xlnet"),str=o(" \u2014 "),tQ=a("a"),ltr=o("XLNetForTokenClassification"),itr=o(" (XLNet model)"),dtr=l(),kT=a("li"),Qbe=a("strong"),ctr=o("yoso"),mtr=o(" \u2014 "),aQ=a("a"),ftr=o("YosoForTokenClassification"),gtr=o(" (YOSO model)"),htr=l(),ST=a("p"),utr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),ptr=o("model.eval()"),_tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),btr=o("model.train()"),vtr=l(),F(RT.$$.fragment),sWe=l(),_d=a("h2"),PT=a("a"),Jbe=a("span"),F(V8.$$.fragment),Ftr=l(),Ybe=a("span"),Ttr=o("AutoModelForQuestionAnswering"),lWe=l(),Go=a("div"),F(X8.$$.fragment),Mtr=l(),bd=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nQ=a("a"),Ctr=o("from_pretrained()"),wtr=o(" class method or the "),sQ=a("a"),Atr=o("from_config()"),Ltr=o(` class
method.`),ytr=l(),z8=a("p"),xtr=o("This class cannot be instantiated directly using "),Kbe=a("code"),$tr=o("__init__()"),ktr=o(" (throws an error)."),Str=l(),_t=a("div"),F(W8.$$.fragment),Rtr=l(),Zbe=a("p"),Ptr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Btr=l(),vd=a("p"),Itr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),Ntr=o("not"),qtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),jtr=o("from_pretrained()"),Dtr=o(" to load the model weights."),Gtr=l(),F(BT.$$.fragment),Otr=l(),so=a("div"),F(Q8.$$.fragment),Vtr=l(),ove=a("p"),Xtr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ztr=l(),za=a("p"),Wtr=o("The model class to instantiate is selected based on the "),rve=a("code"),Qtr=o("model_type"),Htr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),Utr=o("pretrained_model_name_or_path"),Jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(":"),Ztr=l(),V=a("ul"),IT=a("li"),nve=a("strong"),ear=o("albert"),oar=o(" \u2014 "),iQ=a("a"),rar=o("AlbertForQuestionAnswering"),tar=o(" (ALBERT model)"),aar=l(),NT=a("li"),sve=a("strong"),nar=o("bart"),sar=o(" \u2014 "),dQ=a("a"),lar=o("BartForQuestionAnswering"),iar=o(" (BART model)"),dar=l(),qT=a("li"),lve=a("strong"),car=o("bert"),mar=o(" \u2014 "),cQ=a("a"),far=o("BertForQuestionAnswering"),gar=o(" (BERT model)"),har=l(),jT=a("li"),ive=a("strong"),uar=o("big_bird"),par=o(" \u2014 "),mQ=a("a"),_ar=o("BigBirdForQuestionAnswering"),bar=o(" (BigBird model)"),Far=l(),DT=a("li"),dve=a("strong"),Tar=o("bigbird_pegasus"),Mar=o(" \u2014 "),fQ=a("a"),Ear=o("BigBirdPegasusForQuestionAnswering"),Car=o(" (BigBird-Pegasus model)"),war=l(),GT=a("li"),cve=a("strong"),Aar=o("camembert"),Lar=o(" \u2014 "),gQ=a("a"),yar=o("CamembertForQuestionAnswering"),xar=o(" (CamemBERT model)"),$ar=l(),OT=a("li"),mve=a("strong"),kar=o("canine"),Sar=o(" \u2014 "),hQ=a("a"),Rar=o("CanineForQuestionAnswering"),Par=o(" (CANINE model)"),Bar=l(),VT=a("li"),fve=a("strong"),Iar=o("convbert"),Nar=o(" \u2014 "),uQ=a("a"),qar=o("ConvBertForQuestionAnswering"),jar=o(" (ConvBERT model)"),Dar=l(),XT=a("li"),gve=a("strong"),Gar=o("data2vec-text"),Oar=o(" \u2014 "),pQ=a("a"),Var=o("Data2VecTextForQuestionAnswering"),Xar=o(" (Data2VecText model)"),zar=l(),zT=a("li"),hve=a("strong"),War=o("deberta"),Qar=o(" \u2014 "),_Q=a("a"),Har=o("DebertaForQuestionAnswering"),Uar=o(" (DeBERTa model)"),Jar=l(),WT=a("li"),uve=a("strong"),Yar=o("deberta-v2"),Kar=o(" \u2014 "),bQ=a("a"),Zar=o("DebertaV2ForQuestionAnswering"),enr=o(" (DeBERTa-v2 model)"),onr=l(),QT=a("li"),pve=a("strong"),rnr=o("distilbert"),tnr=o(" \u2014 "),vQ=a("a"),anr=o("DistilBertForQuestionAnswering"),nnr=o(" (DistilBERT model)"),snr=l(),HT=a("li"),_ve=a("strong"),lnr=o("electra"),inr=o(" \u2014 "),FQ=a("a"),dnr=o("ElectraForQuestionAnswering"),cnr=o(" (ELECTRA model)"),mnr=l(),UT=a("li"),bve=a("strong"),fnr=o("flaubert"),gnr=o(" \u2014 "),TQ=a("a"),hnr=o("FlaubertForQuestionAnsweringSimple"),unr=o(" (FlauBERT model)"),pnr=l(),JT=a("li"),vve=a("strong"),_nr=o("fnet"),bnr=o(" \u2014 "),MQ=a("a"),vnr=o("FNetForQuestionAnswering"),Fnr=o(" (FNet model)"),Tnr=l(),YT=a("li"),Fve=a("strong"),Mnr=o("funnel"),Enr=o(" \u2014 "),EQ=a("a"),Cnr=o("FunnelForQuestionAnswering"),wnr=o(" (Funnel Transformer model)"),Anr=l(),KT=a("li"),Tve=a("strong"),Lnr=o("gptj"),ynr=o(" \u2014 "),CQ=a("a"),xnr=o("GPTJForQuestionAnswering"),$nr=o(" (GPT-J model)"),knr=l(),ZT=a("li"),Mve=a("strong"),Snr=o("ibert"),Rnr=o(" \u2014 "),wQ=a("a"),Pnr=o("IBertForQuestionAnswering"),Bnr=o(" (I-BERT model)"),Inr=l(),eM=a("li"),Eve=a("strong"),Nnr=o("layoutlmv2"),qnr=o(" \u2014 "),AQ=a("a"),jnr=o("LayoutLMv2ForQuestionAnswering"),Dnr=o(" (LayoutLMv2 model)"),Gnr=l(),oM=a("li"),Cve=a("strong"),Onr=o("layoutlmv3"),Vnr=o(" \u2014 "),LQ=a("a"),Xnr=o("LayoutLMv3ForQuestionAnswering"),znr=o(" (LayoutLMv3 model)"),Wnr=l(),rM=a("li"),wve=a("strong"),Qnr=o("led"),Hnr=o(" \u2014 "),yQ=a("a"),Unr=o("LEDForQuestionAnswering"),Jnr=o(" (LED model)"),Ynr=l(),tM=a("li"),Ave=a("strong"),Knr=o("longformer"),Znr=o(" \u2014 "),xQ=a("a"),esr=o("LongformerForQuestionAnswering"),osr=o(" (Longformer model)"),rsr=l(),aM=a("li"),Lve=a("strong"),tsr=o("luke"),asr=o(" \u2014 "),$Q=a("a"),nsr=o("LukeForQuestionAnswering"),ssr=o(" (LUKE model)"),lsr=l(),nM=a("li"),yve=a("strong"),isr=o("lxmert"),dsr=o(" \u2014 "),kQ=a("a"),csr=o("LxmertForQuestionAnswering"),msr=o(" (LXMERT model)"),fsr=l(),sM=a("li"),xve=a("strong"),gsr=o("mbart"),hsr=o(" \u2014 "),SQ=a("a"),usr=o("MBartForQuestionAnswering"),psr=o(" (mBART model)"),_sr=l(),lM=a("li"),$ve=a("strong"),bsr=o("megatron-bert"),vsr=o(" \u2014 "),RQ=a("a"),Fsr=o("MegatronBertForQuestionAnswering"),Tsr=o(" (Megatron-BERT model)"),Msr=l(),iM=a("li"),kve=a("strong"),Esr=o("mobilebert"),Csr=o(" \u2014 "),PQ=a("a"),wsr=o("MobileBertForQuestionAnswering"),Asr=o(" (MobileBERT model)"),Lsr=l(),dM=a("li"),Sve=a("strong"),ysr=o("mpnet"),xsr=o(" \u2014 "),BQ=a("a"),$sr=o("MPNetForQuestionAnswering"),ksr=o(" (MPNet model)"),Ssr=l(),cM=a("li"),Rve=a("strong"),Rsr=o("mvp"),Psr=o(" \u2014 "),IQ=a("a"),Bsr=o("MvpForQuestionAnswering"),Isr=o(" (MVP model)"),Nsr=l(),mM=a("li"),Pve=a("strong"),qsr=o("nezha"),jsr=o(" \u2014 "),NQ=a("a"),Dsr=o("NezhaForQuestionAnswering"),Gsr=o(" (Nezha model)"),Osr=l(),fM=a("li"),Bve=a("strong"),Vsr=o("nystromformer"),Xsr=o(" \u2014 "),qQ=a("a"),zsr=o("NystromformerForQuestionAnswering"),Wsr=o(" (Nystr\xF6mformer model)"),Qsr=l(),gM=a("li"),Ive=a("strong"),Hsr=o("qdqbert"),Usr=o(" \u2014 "),jQ=a("a"),Jsr=o("QDQBertForQuestionAnswering"),Ysr=o(" (QDQBert model)"),Ksr=l(),hM=a("li"),Nve=a("strong"),Zsr=o("reformer"),elr=o(" \u2014 "),DQ=a("a"),olr=o("ReformerForQuestionAnswering"),rlr=o(" (Reformer model)"),tlr=l(),uM=a("li"),qve=a("strong"),alr=o("rembert"),nlr=o(" \u2014 "),GQ=a("a"),slr=o("RemBertForQuestionAnswering"),llr=o(" (RemBERT model)"),ilr=l(),pM=a("li"),jve=a("strong"),dlr=o("roberta"),clr=o(" \u2014 "),OQ=a("a"),mlr=o("RobertaForQuestionAnswering"),flr=o(" (RoBERTa model)"),glr=l(),_M=a("li"),Dve=a("strong"),hlr=o("roformer"),ulr=o(" \u2014 "),VQ=a("a"),plr=o("RoFormerForQuestionAnswering"),_lr=o(" (RoFormer model)"),blr=l(),bM=a("li"),Gve=a("strong"),vlr=o("splinter"),Flr=o(" \u2014 "),XQ=a("a"),Tlr=o("SplinterForQuestionAnswering"),Mlr=o(" (Splinter model)"),Elr=l(),vM=a("li"),Ove=a("strong"),Clr=o("squeezebert"),wlr=o(" \u2014 "),zQ=a("a"),Alr=o("SqueezeBertForQuestionAnswering"),Llr=o(" (SqueezeBERT model)"),ylr=l(),FM=a("li"),Vve=a("strong"),xlr=o("xlm"),$lr=o(" \u2014 "),WQ=a("a"),klr=o("XLMForQuestionAnsweringSimple"),Slr=o(" (XLM model)"),Rlr=l(),TM=a("li"),Xve=a("strong"),Plr=o("xlm-roberta"),Blr=o(" \u2014 "),QQ=a("a"),Ilr=o("XLMRobertaForQuestionAnswering"),Nlr=o(" (XLM-RoBERTa model)"),qlr=l(),MM=a("li"),zve=a("strong"),jlr=o("xlm-roberta-xl"),Dlr=o(" \u2014 "),HQ=a("a"),Glr=o("XLMRobertaXLForQuestionAnswering"),Olr=o(" (XLM-RoBERTa-XL model)"),Vlr=l(),EM=a("li"),Wve=a("strong"),Xlr=o("xlnet"),zlr=o(" \u2014 "),UQ=a("a"),Wlr=o("XLNetForQuestionAnsweringSimple"),Qlr=o(" (XLNet model)"),Hlr=l(),CM=a("li"),Qve=a("strong"),Ulr=o("yoso"),Jlr=o(" \u2014 "),JQ=a("a"),Ylr=o("YosoForQuestionAnswering"),Klr=o(" (YOSO model)"),Zlr=l(),wM=a("p"),eir=o("The model is set in evaluation mode by default using "),Hve=a("code"),oir=o("model.eval()"),rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=a("code"),tir=o("model.train()"),air=l(),F(AM.$$.fragment),iWe=l(),Fd=a("h2"),LM=a("a"),Jve=a("span"),F(H8.$$.fragment),nir=l(),Yve=a("span"),sir=o("AutoModelForTableQuestionAnswering"),dWe=l(),Oo=a("div"),F(U8.$$.fragment),lir=l(),Td=a("p"),iir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YQ=a("a"),dir=o("from_pretrained()"),cir=o(" class method or the "),KQ=a("a"),mir=o("from_config()"),fir=o(` class
method.`),gir=l(),J8=a("p"),hir=o("This class cannot be instantiated directly using "),Kve=a("code"),uir=o("__init__()"),pir=o(" (throws an error)."),_ir=l(),bt=a("div"),F(Y8.$$.fragment),bir=l(),Zve=a("p"),vir=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fir=l(),Md=a("p"),Tir=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Mir=o("not"),Eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),Cir=o("from_pretrained()"),wir=o(" to load the model weights."),Air=l(),F(yM.$$.fragment),Lir=l(),lo=a("div"),F(K8.$$.fragment),yir=l(),o1e=a("p"),xir=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$ir=l(),Wa=a("p"),kir=o("The model class to instantiate is selected based on the "),r1e=a("code"),Sir=o("model_type"),Rir=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),Pir=o("pretrained_model_name_or_path"),Bir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),Iir=o("pretrained_model_name_or_path"),Nir=o(":"),qir=l(),n1e=a("ul"),xM=a("li"),s1e=a("strong"),jir=o("tapas"),Dir=o(" \u2014 "),eH=a("a"),Gir=o("TapasForQuestionAnswering"),Oir=o(" (TAPAS model)"),Vir=l(),$M=a("p"),Xir=o("The model is set in evaluation mode by default using "),l1e=a("code"),zir=o("model.eval()"),Wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Qir=o("model.train()"),Hir=l(),F(kM.$$.fragment),cWe=l(),Ed=a("h2"),SM=a("a"),d1e=a("span"),F(Z8.$$.fragment),Uir=l(),c1e=a("span"),Jir=o("AutoModelForImageClassification"),mWe=l(),Vo=a("div"),F(e9.$$.fragment),Yir=l(),Cd=a("p"),Kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oH=a("a"),Zir=o("from_pretrained()"),edr=o(" class method or the "),rH=a("a"),odr=o("from_config()"),rdr=o(` class
method.`),tdr=l(),o9=a("p"),adr=o("This class cannot be instantiated directly using "),m1e=a("code"),ndr=o("__init__()"),sdr=o(" (throws an error)."),ldr=l(),vt=a("div"),F(r9.$$.fragment),idr=l(),f1e=a("p"),ddr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cdr=l(),wd=a("p"),mdr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),fdr=o("not"),gdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),hdr=o("from_pretrained()"),udr=o(" to load the model weights."),pdr=l(),F(RM.$$.fragment),_dr=l(),io=a("div"),F(t9.$$.fragment),bdr=l(),h1e=a("p"),vdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fdr=l(),Qa=a("p"),Tdr=o("The model class to instantiate is selected based on the "),u1e=a("code"),Mdr=o("model_type"),Edr=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),Cdr=o("pretrained_model_name_or_path"),wdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Adr=o("pretrained_model_name_or_path"),Ldr=o(":"),ydr=l(),be=a("ul"),PM=a("li"),b1e=a("strong"),xdr=o("beit"),$dr=o(" \u2014 "),aH=a("a"),kdr=o("BeitForImageClassification"),Sdr=o(" (BEiT model)"),Rdr=l(),BM=a("li"),v1e=a("strong"),Pdr=o("convnext"),Bdr=o(" \u2014 "),nH=a("a"),Idr=o("ConvNextForImageClassification"),Ndr=o(" (ConvNeXT model)"),qdr=l(),IM=a("li"),F1e=a("strong"),jdr=o("cvt"),Ddr=o(" \u2014 "),sH=a("a"),Gdr=o("CvtForImageClassification"),Odr=o(" (CvT model)"),Vdr=l(),NM=a("li"),T1e=a("strong"),Xdr=o("data2vec-vision"),zdr=o(" \u2014 "),lH=a("a"),Wdr=o("Data2VecVisionForImageClassification"),Qdr=o(" (Data2VecVision model)"),Hdr=l(),Ys=a("li"),M1e=a("strong"),Udr=o("deit"),Jdr=o(" \u2014 "),iH=a("a"),Ydr=o("DeiTForImageClassification"),Kdr=o(" or "),dH=a("a"),Zdr=o("DeiTForImageClassificationWithTeacher"),ecr=o(" (DeiT model)"),ocr=l(),qM=a("li"),E1e=a("strong"),rcr=o("imagegpt"),tcr=o(" \u2014 "),cH=a("a"),acr=o("ImageGPTForImageClassification"),ncr=o(" (ImageGPT model)"),scr=l(),Ks=a("li"),C1e=a("strong"),lcr=o("levit"),icr=o(" \u2014 "),mH=a("a"),dcr=o("LevitForImageClassification"),ccr=o(" or "),fH=a("a"),mcr=o("LevitForImageClassificationWithTeacher"),fcr=o(" (LeViT model)"),gcr=l(),jM=a("li"),w1e=a("strong"),hcr=o("mobilevit"),ucr=o(" \u2014 "),gH=a("a"),pcr=o("MobileViTForImageClassification"),_cr=o(" (MobileViT model)"),bcr=l(),Ft=a("li"),A1e=a("strong"),vcr=o("perceiver"),Fcr=o(" \u2014 "),hH=a("a"),Tcr=o("PerceiverForImageClassificationLearned"),Mcr=o(" or "),uH=a("a"),Ecr=o("PerceiverForImageClassificationFourier"),Ccr=o(" or "),pH=a("a"),wcr=o("PerceiverForImageClassificationConvProcessing"),Acr=o(" (Perceiver model)"),Lcr=l(),DM=a("li"),L1e=a("strong"),ycr=o("poolformer"),xcr=o(" \u2014 "),_H=a("a"),$cr=o("PoolFormerForImageClassification"),kcr=o(" (PoolFormer model)"),Scr=l(),GM=a("li"),y1e=a("strong"),Rcr=o("regnet"),Pcr=o(" \u2014 "),bH=a("a"),Bcr=o("RegNetForImageClassification"),Icr=o(" (RegNet model)"),Ncr=l(),OM=a("li"),x1e=a("strong"),qcr=o("resnet"),jcr=o(" \u2014 "),vH=a("a"),Dcr=o("ResNetForImageClassification"),Gcr=o(" (ResNet model)"),Ocr=l(),VM=a("li"),$1e=a("strong"),Vcr=o("segformer"),Xcr=o(" \u2014 "),FH=a("a"),zcr=o("SegformerForImageClassification"),Wcr=o(" (SegFormer model)"),Qcr=l(),XM=a("li"),k1e=a("strong"),Hcr=o("swin"),Ucr=o(" \u2014 "),TH=a("a"),Jcr=o("SwinForImageClassification"),Ycr=o(" (Swin Transformer model)"),Kcr=l(),zM=a("li"),S1e=a("strong"),Zcr=o("swinv2"),emr=o(" \u2014 "),MH=a("a"),omr=o("Swinv2ForImageClassification"),rmr=o(" (Swin Transformer V2 model)"),tmr=l(),WM=a("li"),R1e=a("strong"),amr=o("van"),nmr=o(" \u2014 "),EH=a("a"),smr=o("VanForImageClassification"),lmr=o(" (VAN model)"),imr=l(),QM=a("li"),P1e=a("strong"),dmr=o("vit"),cmr=o(" \u2014 "),CH=a("a"),mmr=o("ViTForImageClassification"),fmr=o(" (ViT model)"),gmr=l(),HM=a("p"),hmr=o("The model is set in evaluation mode by default using "),B1e=a("code"),umr=o("model.eval()"),pmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=a("code"),_mr=o("model.train()"),bmr=l(),F(UM.$$.fragment),fWe=l(),Ad=a("h2"),JM=a("a"),N1e=a("span"),F(a9.$$.fragment),vmr=l(),q1e=a("span"),Fmr=o("AutoModelForVision2Seq"),gWe=l(),Xo=a("div"),F(n9.$$.fragment),Tmr=l(),Ld=a("p"),Mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wH=a("a"),Emr=o("from_pretrained()"),Cmr=o(" class method or the "),AH=a("a"),wmr=o("from_config()"),Amr=o(` class
method.`),Lmr=l(),s9=a("p"),ymr=o("This class cannot be instantiated directly using "),j1e=a("code"),xmr=o("__init__()"),$mr=o(" (throws an error)."),kmr=l(),Tt=a("div"),F(l9.$$.fragment),Smr=l(),D1e=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pmr=l(),yd=a("p"),Bmr=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),Imr=o("not"),Nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),qmr=o("from_pretrained()"),jmr=o(" to load the model weights."),Dmr=l(),F(YM.$$.fragment),Gmr=l(),co=a("div"),F(i9.$$.fragment),Omr=l(),O1e=a("p"),Vmr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xmr=l(),Ha=a("p"),zmr=o("The model class to instantiate is selected based on the "),V1e=a("code"),Wmr=o("model_type"),Qmr=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),Hmr=o("pretrained_model_name_or_path"),Umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),Jmr=o("pretrained_model_name_or_path"),Ymr=o(":"),Kmr=l(),W1e=a("ul"),KM=a("li"),Q1e=a("strong"),Zmr=o("vision-encoder-decoder"),efr=o(" \u2014 "),yH=a("a"),ofr=o("VisionEncoderDecoderModel"),rfr=o(" (Vision Encoder decoder model)"),tfr=l(),ZM=a("p"),afr=o("The model is set in evaluation mode by default using "),H1e=a("code"),nfr=o("model.eval()"),sfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=a("code"),lfr=o("model.train()"),ifr=l(),F(e4.$$.fragment),hWe=l(),xd=a("h2"),o4=a("a"),J1e=a("span"),F(d9.$$.fragment),dfr=l(),Y1e=a("span"),cfr=o("AutoModelForVisualQuestionAnswering"),uWe=l(),zo=a("div"),F(c9.$$.fragment),mfr=l(),$d=a("p"),ffr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),xH=a("a"),gfr=o("from_pretrained()"),hfr=o(" class method or the "),$H=a("a"),ufr=o("from_config()"),pfr=o(` class
method.`),_fr=l(),m9=a("p"),bfr=o("This class cannot be instantiated directly using "),K1e=a("code"),vfr=o("__init__()"),Ffr=o(" (throws an error)."),Tfr=l(),Mt=a("div"),F(f9.$$.fragment),Mfr=l(),Z1e=a("p"),Efr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Cfr=l(),kd=a("p"),wfr=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),Afr=o("not"),Lfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),yfr=o("from_pretrained()"),xfr=o(" to load the model weights."),$fr=l(),F(r4.$$.fragment),kfr=l(),mo=a("div"),F(g9.$$.fragment),Sfr=l(),oFe=a("p"),Rfr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Pfr=l(),Ua=a("p"),Bfr=o("The model class to instantiate is selected based on the "),rFe=a("code"),Ifr=o("model_type"),Nfr=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),qfr=o("pretrained_model_name_or_path"),jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),Dfr=o("pretrained_model_name_or_path"),Gfr=o(":"),Ofr=l(),nFe=a("ul"),t4=a("li"),sFe=a("strong"),Vfr=o("vilt"),Xfr=o(" \u2014 "),SH=a("a"),zfr=o("ViltForQuestionAnswering"),Wfr=o(" (ViLT model)"),Qfr=l(),a4=a("p"),Hfr=o("The model is set in evaluation mode by default using "),lFe=a("code"),Ufr=o("model.eval()"),Jfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=a("code"),Yfr=o("model.train()"),Kfr=l(),F(n4.$$.fragment),pWe=l(),Sd=a("h2"),s4=a("a"),dFe=a("span"),F(h9.$$.fragment),Zfr=l(),cFe=a("span"),egr=o("AutoModelForAudioClassification"),_We=l(),Wo=a("div"),F(u9.$$.fragment),ogr=l(),Rd=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),RH=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),PH=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),p9=a("p"),igr=o("This class cannot be instantiated directly using "),mFe=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),mgr=l(),Et=a("div"),F(_9.$$.fragment),fgr=l(),fFe=a("p"),ggr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hgr=l(),Pd=a("p"),ugr=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),pgr=o("not"),_gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(l4.$$.fragment),Tgr=l(),fo=a("div"),F(b9.$$.fragment),Mgr=l(),hFe=a("p"),Egr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Cgr=l(),Ja=a("p"),wgr=o("The model class to instantiate is selected based on the "),uFe=a("code"),Agr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),Pe=a("ul"),i4=a("li"),bFe=a("strong"),Rgr=o("data2vec-audio"),Pgr=o(" \u2014 "),IH=a("a"),Bgr=o("Data2VecAudioForSequenceClassification"),Igr=o(" (Data2VecAudio model)"),Ngr=l(),d4=a("li"),vFe=a("strong"),qgr=o("hubert"),jgr=o(" \u2014 "),NH=a("a"),Dgr=o("HubertForSequenceClassification"),Ggr=o(" (Hubert model)"),Ogr=l(),c4=a("li"),FFe=a("strong"),Vgr=o("sew"),Xgr=o(" \u2014 "),qH=a("a"),zgr=o("SEWForSequenceClassification"),Wgr=o(" (SEW model)"),Qgr=l(),m4=a("li"),TFe=a("strong"),Hgr=o("sew-d"),Ugr=o(" \u2014 "),jH=a("a"),Jgr=o("SEWDForSequenceClassification"),Ygr=o(" (SEW-D model)"),Kgr=l(),f4=a("li"),MFe=a("strong"),Zgr=o("unispeech"),ehr=o(" \u2014 "),DH=a("a"),ohr=o("UniSpeechForSequenceClassification"),rhr=o(" (UniSpeech model)"),thr=l(),g4=a("li"),EFe=a("strong"),ahr=o("unispeech-sat"),nhr=o(" \u2014 "),GH=a("a"),shr=o("UniSpeechSatForSequenceClassification"),lhr=o(" (UniSpeechSat model)"),ihr=l(),h4=a("li"),CFe=a("strong"),dhr=o("wav2vec2"),chr=o(" \u2014 "),OH=a("a"),mhr=o("Wav2Vec2ForSequenceClassification"),fhr=o(" (Wav2Vec2 model)"),ghr=l(),u4=a("li"),wFe=a("strong"),hhr=o("wav2vec2-conformer"),uhr=o(" \u2014 "),VH=a("a"),phr=o("Wav2Vec2ConformerForSequenceClassification"),_hr=o(" (Wav2Vec2-Conformer model)"),bhr=l(),p4=a("li"),AFe=a("strong"),vhr=o("wavlm"),Fhr=o(" \u2014 "),XH=a("a"),Thr=o("WavLMForSequenceClassification"),Mhr=o(" (WavLM model)"),Ehr=l(),_4=a("p"),Chr=o("The model is set in evaluation mode by default using "),LFe=a("code"),whr=o("model.eval()"),Ahr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=a("code"),Lhr=o("model.train()"),yhr=l(),F(b4.$$.fragment),bWe=l(),Bd=a("h2"),v4=a("a"),xFe=a("span"),F(v9.$$.fragment),xhr=l(),$Fe=a("span"),$hr=o("AutoModelForAudioFrameClassification"),vWe=l(),Qo=a("div"),F(F9.$$.fragment),khr=l(),Id=a("p"),Shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zH=a("a"),Rhr=o("from_pretrained()"),Phr=o(" class method or the "),WH=a("a"),Bhr=o("from_config()"),Ihr=o(` class
method.`),Nhr=l(),T9=a("p"),qhr=o("This class cannot be instantiated directly using "),kFe=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Ghr=l(),Ct=a("div"),F(M9.$$.fragment),Ohr=l(),SFe=a("p"),Vhr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Xhr=l(),Nd=a("p"),zhr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),Whr=o("not"),Qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Hhr=o("from_pretrained()"),Uhr=o(" to load the model weights."),Jhr=l(),F(F4.$$.fragment),Yhr=l(),go=a("div"),F(E9.$$.fragment),Khr=l(),PFe=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),eur=l(),Ya=a("p"),our=o("The model class to instantiate is selected based on the "),BFe=a("code"),rur=o("model_type"),tur=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),sur=o("pretrained_model_name_or_path"),lur=o(":"),iur=l(),rt=a("ul"),T4=a("li"),qFe=a("strong"),dur=o("data2vec-audio"),cur=o(" \u2014 "),HH=a("a"),mur=o("Data2VecAudioForAudioFrameClassification"),fur=o(" (Data2VecAudio model)"),gur=l(),M4=a("li"),jFe=a("strong"),hur=o("unispeech-sat"),uur=o(" \u2014 "),UH=a("a"),pur=o("UniSpeechSatForAudioFrameClassification"),_ur=o(" (UniSpeechSat model)"),bur=l(),E4=a("li"),DFe=a("strong"),vur=o("wav2vec2"),Fur=o(" \u2014 "),JH=a("a"),Tur=o("Wav2Vec2ForAudioFrameClassification"),Mur=o(" (Wav2Vec2 model)"),Eur=l(),C4=a("li"),GFe=a("strong"),Cur=o("wav2vec2-conformer"),wur=o(" \u2014 "),YH=a("a"),Aur=o("Wav2Vec2ConformerForAudioFrameClassification"),Lur=o(" (Wav2Vec2-Conformer model)"),yur=l(),w4=a("li"),OFe=a("strong"),xur=o("wavlm"),$ur=o(" \u2014 "),KH=a("a"),kur=o("WavLMForAudioFrameClassification"),Sur=o(" (WavLM model)"),Rur=l(),A4=a("p"),Pur=o("The model is set in evaluation mode by default using "),VFe=a("code"),Bur=o("model.eval()"),Iur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=a("code"),Nur=o("model.train()"),qur=l(),F(L4.$$.fragment),FWe=l(),qd=a("h2"),y4=a("a"),zFe=a("span"),F(C9.$$.fragment),jur=l(),WFe=a("span"),Dur=o("AutoModelForCTC"),TWe=l(),Ho=a("div"),F(w9.$$.fragment),Gur=l(),jd=a("p"),Our=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZH=a("a"),Vur=o("from_pretrained()"),Xur=o(" class method or the "),eU=a("a"),zur=o("from_config()"),Wur=o(` class
method.`),Qur=l(),A9=a("p"),Hur=o("This class cannot be instantiated directly using "),QFe=a("code"),Uur=o("__init__()"),Jur=o(" (throws an error)."),Yur=l(),wt=a("div"),F(L9.$$.fragment),Kur=l(),HFe=a("p"),Zur=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),epr=l(),Dd=a("p"),opr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),rpr=o("not"),tpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),apr=o("from_pretrained()"),npr=o(" to load the model weights."),spr=l(),F(x4.$$.fragment),lpr=l(),ho=a("div"),F(y9.$$.fragment),ipr=l(),JFe=a("p"),dpr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),cpr=l(),Ka=a("p"),mpr=o("The model class to instantiate is selected based on the "),YFe=a("code"),fpr=o("model_type"),gpr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),hpr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),ppr=o("pretrained_model_name_or_path"),_pr=o(":"),bpr=l(),Le=a("ul"),$4=a("li"),eTe=a("strong"),vpr=o("data2vec-audio"),Fpr=o(" \u2014 "),rU=a("a"),Tpr=o("Data2VecAudioForCTC"),Mpr=o(" (Data2VecAudio model)"),Epr=l(),k4=a("li"),oTe=a("strong"),Cpr=o("hubert"),wpr=o(" \u2014 "),tU=a("a"),Apr=o("HubertForCTC"),Lpr=o(" (Hubert model)"),ypr=l(),S4=a("li"),rTe=a("strong"),xpr=o("mctct"),$pr=o(" \u2014 "),aU=a("a"),kpr=o("MCTCTForCTC"),Spr=o(" (M-CTC-T model)"),Rpr=l(),R4=a("li"),tTe=a("strong"),Ppr=o("sew"),Bpr=o(" \u2014 "),nU=a("a"),Ipr=o("SEWForCTC"),Npr=o(" (SEW model)"),qpr=l(),P4=a("li"),aTe=a("strong"),jpr=o("sew-d"),Dpr=o(" \u2014 "),sU=a("a"),Gpr=o("SEWDForCTC"),Opr=o(" (SEW-D model)"),Vpr=l(),B4=a("li"),nTe=a("strong"),Xpr=o("unispeech"),zpr=o(" \u2014 "),lU=a("a"),Wpr=o("UniSpeechForCTC"),Qpr=o(" (UniSpeech model)"),Hpr=l(),I4=a("li"),sTe=a("strong"),Upr=o("unispeech-sat"),Jpr=o(" \u2014 "),iU=a("a"),Ypr=o("UniSpeechSatForCTC"),Kpr=o(" (UniSpeechSat model)"),Zpr=l(),N4=a("li"),lTe=a("strong"),e_r=o("wav2vec2"),o_r=o(" \u2014 "),dU=a("a"),r_r=o("Wav2Vec2ForCTC"),t_r=o(" (Wav2Vec2 model)"),a_r=l(),q4=a("li"),iTe=a("strong"),n_r=o("wav2vec2-conformer"),s_r=o(" \u2014 "),cU=a("a"),l_r=o("Wav2Vec2ConformerForCTC"),i_r=o(" (Wav2Vec2-Conformer model)"),d_r=l(),j4=a("li"),dTe=a("strong"),c_r=o("wavlm"),m_r=o(" \u2014 "),mU=a("a"),f_r=o("WavLMForCTC"),g_r=o(" (WavLM model)"),h_r=l(),D4=a("p"),u_r=o("The model is set in evaluation mode by default using "),cTe=a("code"),p_r=o("model.eval()"),__r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mTe=a("code"),b_r=o("model.train()"),v_r=l(),F(G4.$$.fragment),MWe=l(),Gd=a("h2"),O4=a("a"),fTe=a("span"),F(x9.$$.fragment),F_r=l(),gTe=a("span"),T_r=o("AutoModelForSpeechSeq2Seq"),EWe=l(),Uo=a("div"),F($9.$$.fragment),M_r=l(),Od=a("p"),E_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fU=a("a"),C_r=o("from_pretrained()"),w_r=o(" class method or the "),gU=a("a"),A_r=o("from_config()"),L_r=o(` class
method.`),y_r=l(),k9=a("p"),x_r=o("This class cannot be instantiated directly using "),hTe=a("code"),$_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),At=a("div"),F(S9.$$.fragment),R_r=l(),uTe=a("p"),P_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B_r=l(),Vd=a("p"),I_r=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),N_r=o("not"),q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),j_r=o("from_pretrained()"),D_r=o(" to load the model weights."),G_r=l(),F(V4.$$.fragment),O_r=l(),uo=a("div"),F(R9.$$.fragment),V_r=l(),_Te=a("p"),X_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z_r=l(),Za=a("p"),W_r=o("The model class to instantiate is selected based on the "),bTe=a("code"),Q_r=o("model_type"),H_r=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),Y_r=o("pretrained_model_name_or_path"),K_r=o(":"),Z_r=l(),P9=a("ul"),X4=a("li"),TTe=a("strong"),e2r=o("speech-encoder-decoder"),o2r=o(" \u2014 "),uU=a("a"),r2r=o("SpeechEncoderDecoderModel"),t2r=o(" (Speech Encoder decoder model)"),a2r=l(),z4=a("li"),MTe=a("strong"),n2r=o("speech_to_text"),s2r=o(" \u2014 "),pU=a("a"),l2r=o("Speech2TextForConditionalGeneration"),i2r=o(" (Speech2Text model)"),d2r=l(),W4=a("p"),c2r=o("The model is set in evaluation mode by default using "),ETe=a("code"),m2r=o("model.eval()"),f2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CTe=a("code"),g2r=o("model.train()"),h2r=l(),F(Q4.$$.fragment),CWe=l(),Xd=a("h2"),H4=a("a"),wTe=a("span"),F(B9.$$.fragment),u2r=l(),ATe=a("span"),p2r=o("AutoModelForAudioXVector"),wWe=l(),Jo=a("div"),F(I9.$$.fragment),_2r=l(),zd=a("p"),b2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_U=a("a"),v2r=o("from_pretrained()"),F2r=o(" class method or the "),bU=a("a"),T2r=o("from_config()"),M2r=o(` class
method.`),E2r=l(),N9=a("p"),C2r=o("This class cannot be instantiated directly using "),LTe=a("code"),w2r=o("__init__()"),A2r=o(" (throws an error)."),L2r=l(),Lt=a("div"),F(q9.$$.fragment),y2r=l(),yTe=a("p"),x2r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$2r=l(),Wd=a("p"),k2r=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),S2r=o("not"),R2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),P2r=o("from_pretrained()"),B2r=o(" to load the model weights."),I2r=l(),F(U4.$$.fragment),N2r=l(),po=a("div"),F(j9.$$.fragment),q2r=l(),$Te=a("p"),j2r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),D2r=l(),en=a("p"),G2r=o("The model class to instantiate is selected based on the "),kTe=a("code"),O2r=o("model_type"),V2r=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),X2r=o("pretrained_model_name_or_path"),z2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),W2r=o("pretrained_model_name_or_path"),Q2r=o(":"),H2r=l(),tt=a("ul"),J4=a("li"),PTe=a("strong"),U2r=o("data2vec-audio"),J2r=o(" \u2014 "),FU=a("a"),Y2r=o("Data2VecAudioForXVector"),K2r=o(" (Data2VecAudio model)"),Z2r=l(),Y4=a("li"),BTe=a("strong"),ebr=o("unispeech-sat"),obr=o(" \u2014 "),TU=a("a"),rbr=o("UniSpeechSatForXVector"),tbr=o(" (UniSpeechSat model)"),abr=l(),K4=a("li"),ITe=a("strong"),nbr=o("wav2vec2"),sbr=o(" \u2014 "),MU=a("a"),lbr=o("Wav2Vec2ForXVector"),ibr=o(" (Wav2Vec2 model)"),dbr=l(),Z4=a("li"),NTe=a("strong"),cbr=o("wav2vec2-conformer"),mbr=o(" \u2014 "),EU=a("a"),fbr=o("Wav2Vec2ConformerForXVector"),gbr=o(" (Wav2Vec2-Conformer model)"),hbr=l(),eE=a("li"),qTe=a("strong"),ubr=o("wavlm"),pbr=o(" \u2014 "),CU=a("a"),_br=o("WavLMForXVector"),bbr=o(" (WavLM model)"),vbr=l(),oE=a("p"),Fbr=o("The model is set in evaluation mode by default using "),jTe=a("code"),Tbr=o("model.eval()"),Mbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DTe=a("code"),Ebr=o("model.train()"),Cbr=l(),F(rE.$$.fragment),AWe=l(),Qd=a("h2"),tE=a("a"),GTe=a("span"),F(D9.$$.fragment),wbr=l(),OTe=a("span"),Abr=o("AutoModelForMaskedImageModeling"),LWe=l(),Yo=a("div"),F(G9.$$.fragment),Lbr=l(),Hd=a("p"),ybr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wU=a("a"),xbr=o("from_pretrained()"),$br=o(" class method or the "),AU=a("a"),kbr=o("from_config()"),Sbr=o(` class
method.`),Rbr=l(),O9=a("p"),Pbr=o("This class cannot be instantiated directly using "),VTe=a("code"),Bbr=o("__init__()"),Ibr=o(" (throws an error)."),Nbr=l(),yt=a("div"),F(V9.$$.fragment),qbr=l(),XTe=a("p"),jbr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dbr=l(),Ud=a("p"),Gbr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),Obr=o("not"),Vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),Xbr=o("from_pretrained()"),zbr=o(" to load the model weights."),Wbr=l(),F(aE.$$.fragment),Qbr=l(),_o=a("div"),F(X9.$$.fragment),Hbr=l(),WTe=a("p"),Ubr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jbr=l(),on=a("p"),Ybr=o("The model class to instantiate is selected based on the "),QTe=a("code"),Kbr=o("model_type"),Zbr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(":"),avr=l(),rn=a("ul"),nE=a("li"),JTe=a("strong"),nvr=o("deit"),svr=o(" \u2014 "),yU=a("a"),lvr=o("DeiTForMaskedImageModeling"),ivr=o(" (DeiT model)"),dvr=l(),sE=a("li"),YTe=a("strong"),cvr=o("swin"),mvr=o(" \u2014 "),xU=a("a"),fvr=o("SwinForMaskedImageModeling"),gvr=o(" (Swin Transformer model)"),hvr=l(),lE=a("li"),KTe=a("strong"),uvr=o("swinv2"),pvr=o(" \u2014 "),$U=a("a"),_vr=o("Swinv2ForMaskedImageModeling"),bvr=o(" (Swin Transformer V2 model)"),vvr=l(),iE=a("li"),ZTe=a("strong"),Fvr=o("vit"),Tvr=o(" \u2014 "),kU=a("a"),Mvr=o("ViTForMaskedImageModeling"),Evr=o(" (ViT model)"),Cvr=l(),dE=a("p"),wvr=o("The model is set in evaluation mode by default using "),eMe=a("code"),Avr=o("model.eval()"),Lvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oMe=a("code"),yvr=o("model.train()"),xvr=l(),F(cE.$$.fragment),yWe=l(),Jd=a("h2"),mE=a("a"),rMe=a("span"),F(z9.$$.fragment),$vr=l(),tMe=a("span"),kvr=o("AutoModelForObjectDetection"),xWe=l(),Ko=a("div"),F(W9.$$.fragment),Svr=l(),Yd=a("p"),Rvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SU=a("a"),Pvr=o("from_pretrained()"),Bvr=o(" class method or the "),RU=a("a"),Ivr=o("from_config()"),Nvr=o(` class
method.`),qvr=l(),Q9=a("p"),jvr=o("This class cannot be instantiated directly using "),aMe=a("code"),Dvr=o("__init__()"),Gvr=o(" (throws an error)."),Ovr=l(),xt=a("div"),F(H9.$$.fragment),Vvr=l(),nMe=a("p"),Xvr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zvr=l(),Kd=a("p"),Wvr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),Qvr=o("not"),Hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),Uvr=o("from_pretrained()"),Jvr=o(" to load the model weights."),Yvr=l(),F(fE.$$.fragment),Kvr=l(),bo=a("div"),F(U9.$$.fragment),Zvr=l(),lMe=a("p"),e1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),o1r=l(),tn=a("p"),r1r=o("The model class to instantiate is selected based on the "),iMe=a("code"),t1r=o("model_type"),a1r=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),n1r=o("pretrained_model_name_or_path"),s1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(":"),d1r=l(),J9=a("ul"),gE=a("li"),mMe=a("strong"),c1r=o("detr"),m1r=o(" \u2014 "),BU=a("a"),f1r=o("DetrForObjectDetection"),g1r=o(" (DETR model)"),h1r=l(),hE=a("li"),fMe=a("strong"),u1r=o("yolos"),p1r=o(" \u2014 "),IU=a("a"),_1r=o("YolosForObjectDetection"),b1r=o(" (YOLOS model)"),v1r=l(),uE=a("p"),F1r=o("The model is set in evaluation mode by default using "),gMe=a("code"),T1r=o("model.eval()"),M1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hMe=a("code"),E1r=o("model.train()"),C1r=l(),F(pE.$$.fragment),$We=l(),Zd=a("h2"),_E=a("a"),uMe=a("span"),F(Y9.$$.fragment),w1r=l(),pMe=a("span"),A1r=o("AutoModelForImageSegmentation"),kWe=l(),Zo=a("div"),F(K9.$$.fragment),L1r=l(),ec=a("p"),y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NU=a("a"),x1r=o("from_pretrained()"),$1r=o(" class method or the "),qU=a("a"),k1r=o("from_config()"),S1r=o(` class
method.`),R1r=l(),Z9=a("p"),P1r=o("This class cannot be instantiated directly using "),_Me=a("code"),B1r=o("__init__()"),I1r=o(" (throws an error)."),N1r=l(),$t=a("div"),F(ex.$$.fragment),q1r=l(),bMe=a("p"),j1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),D1r=l(),oc=a("p"),G1r=o(`Note:
Loading a model from its configuration file does `),vMe=a("strong"),O1r=o("not"),V1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),X1r=o("from_pretrained()"),z1r=o(" to load the model weights."),W1r=l(),F(bE.$$.fragment),Q1r=l(),vo=a("div"),F(ox.$$.fragment),H1r=l(),FMe=a("p"),U1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),J1r=l(),an=a("p"),Y1r=o("The model class to instantiate is selected based on the "),TMe=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),MMe=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),CMe=a("ul"),vE=a("li"),wMe=a("strong"),nFr=o("detr"),sFr=o(" \u2014 "),DU=a("a"),lFr=o("DetrForSegmentation"),iFr=o(" (DETR model)"),dFr=l(),FE=a("p"),cFr=o("The model is set in evaluation mode by default using "),AMe=a("code"),mFr=o("model.eval()"),fFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LMe=a("code"),gFr=o("model.train()"),hFr=l(),F(TE.$$.fragment),SWe=l(),rc=a("h2"),ME=a("a"),yMe=a("span"),F(rx.$$.fragment),uFr=l(),xMe=a("span"),pFr=o("AutoModelForSemanticSegmentation"),RWe=l(),er=a("div"),F(tx.$$.fragment),_Fr=l(),tc=a("p"),bFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GU=a("a"),vFr=o("from_pretrained()"),FFr=o(" class method or the "),OU=a("a"),TFr=o("from_config()"),MFr=o(` class
method.`),EFr=l(),ax=a("p"),CFr=o("This class cannot be instantiated directly using "),$Me=a("code"),wFr=o("__init__()"),AFr=o(" (throws an error)."),LFr=l(),kt=a("div"),F(nx.$$.fragment),yFr=l(),kMe=a("p"),xFr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$Fr=l(),ac=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),PFr=o("from_pretrained()"),BFr=o(" to load the model weights."),IFr=l(),F(EE.$$.fragment),NFr=l(),Fo=a("div"),F(sx.$$.fragment),qFr=l(),RMe=a("p"),jFr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DFr=l(),nn=a("p"),GFr=o("The model class to instantiate is selected based on the "),PMe=a("code"),OFr=o("model_type"),VFr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),WFr=o("pretrained_model_name_or_path"),QFr=o(":"),HFr=l(),at=a("ul"),CE=a("li"),NMe=a("strong"),UFr=o("beit"),JFr=o(" \u2014 "),XU=a("a"),YFr=o("BeitForSemanticSegmentation"),KFr=o(" (BEiT model)"),ZFr=l(),wE=a("li"),qMe=a("strong"),eTr=o("data2vec-vision"),oTr=o(" \u2014 "),zU=a("a"),rTr=o("Data2VecVisionForSemanticSegmentation"),tTr=o(" (Data2VecVision model)"),aTr=l(),AE=a("li"),jMe=a("strong"),nTr=o("dpt"),sTr=o(" \u2014 "),WU=a("a"),lTr=o("DPTForSemanticSegmentation"),iTr=o(" (DPT model)"),dTr=l(),LE=a("li"),DMe=a("strong"),cTr=o("mobilevit"),mTr=o(" \u2014 "),QU=a("a"),fTr=o("MobileViTForSemanticSegmentation"),gTr=o(" (MobileViT model)"),hTr=l(),yE=a("li"),GMe=a("strong"),uTr=o("segformer"),pTr=o(" \u2014 "),HU=a("a"),_Tr=o("SegformerForSemanticSegmentation"),bTr=o(" (SegFormer model)"),vTr=l(),xE=a("p"),FTr=o("The model is set in evaluation mode by default using "),OMe=a("code"),TTr=o("model.eval()"),MTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VMe=a("code"),ETr=o("model.train()"),CTr=l(),F($E.$$.fragment),PWe=l(),nc=a("h2"),kE=a("a"),XMe=a("span"),F(lx.$$.fragment),wTr=l(),zMe=a("span"),ATr=o("AutoModelForInstanceSegmentation"),BWe=l(),or=a("div"),F(ix.$$.fragment),LTr=l(),sc=a("p"),yTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UU=a("a"),xTr=o("from_pretrained()"),$Tr=o(" class method or the "),JU=a("a"),kTr=o("from_config()"),STr=o(` class
method.`),RTr=l(),dx=a("p"),PTr=o("This class cannot be instantiated directly using "),WMe=a("code"),BTr=o("__init__()"),ITr=o(" (throws an error)."),NTr=l(),St=a("div"),F(cx.$$.fragment),qTr=l(),QMe=a("p"),jTr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),DTr=l(),lc=a("p"),GTr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),OTr=o("not"),VTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),XTr=o("from_pretrained()"),zTr=o(" to load the model weights."),WTr=l(),F(SE.$$.fragment),QTr=l(),To=a("div"),F(mx.$$.fragment),HTr=l(),UMe=a("p"),UTr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),JTr=l(),sn=a("p"),YTr=o("The model class to instantiate is selected based on the "),JMe=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),ZMe=a("ul"),RE=a("li"),e4e=a("strong"),nMr=o("maskformer"),sMr=o(" \u2014 "),KU=a("a"),lMr=o("MaskFormerForInstanceSegmentation"),iMr=o(" (MaskFormer model)"),dMr=l(),PE=a("p"),cMr=o("The model is set in evaluation mode by default using "),o4e=a("code"),mMr=o("model.eval()"),fMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=a("code"),gMr=o("model.train()"),hMr=l(),F(BE.$$.fragment),IWe=l(),ic=a("h2"),IE=a("a"),t4e=a("span"),F(fx.$$.fragment),uMr=l(),a4e=a("span"),pMr=o("TFAutoModel"),NWe=l(),rr=a("div"),F(gx.$$.fragment),_Mr=l(),dc=a("p"),bMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=a("a"),vMr=o("from_pretrained()"),FMr=o(" class method or the "),eJ=a("a"),TMr=o("from_config()"),MMr=o(` class
method.`),EMr=l(),hx=a("p"),CMr=o("This class cannot be instantiated directly using "),n4e=a("code"),wMr=o("__init__()"),AMr=o(" (throws an error)."),LMr=l(),Rt=a("div"),F(ux.$$.fragment),yMr=l(),s4e=a("p"),xMr=o("Instantiates one of the base model classes of the library from a configuration."),$Mr=l(),cc=a("p"),kMr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),SMr=o("not"),RMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),PMr=o("from_pretrained()"),BMr=o(" to load the model weights."),IMr=l(),F(NE.$$.fragment),NMr=l(),$r=a("div"),F(px.$$.fragment),qMr=l(),i4e=a("p"),jMr=o("Instantiate one of the base model classes of the library from a pretrained model."),DMr=l(),ln=a("p"),GMr=o("The model class to instantiate is selected based on the "),d4e=a("code"),OMr=o("model_type"),VMr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),XMr=o("pretrained_model_name_or_path"),zMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),WMr=o("pretrained_model_name_or_path"),QMr=o(":"),HMr=l(),I=a("ul"),qE=a("li"),f4e=a("strong"),UMr=o("albert"),JMr=o(" \u2014 "),rJ=a("a"),YMr=o("TFAlbertModel"),KMr=o(" (ALBERT model)"),ZMr=l(),jE=a("li"),g4e=a("strong"),e4r=o("bart"),o4r=o(" \u2014 "),tJ=a("a"),r4r=o("TFBartModel"),t4r=o(" (BART model)"),a4r=l(),DE=a("li"),h4e=a("strong"),n4r=o("bert"),s4r=o(" \u2014 "),aJ=a("a"),l4r=o("TFBertModel"),i4r=o(" (BERT model)"),d4r=l(),GE=a("li"),u4e=a("strong"),c4r=o("blenderbot"),m4r=o(" \u2014 "),nJ=a("a"),f4r=o("TFBlenderbotModel"),g4r=o(" (Blenderbot model)"),h4r=l(),OE=a("li"),p4e=a("strong"),u4r=o("blenderbot-small"),p4r=o(" \u2014 "),sJ=a("a"),_4r=o("TFBlenderbotSmallModel"),b4r=o(" (BlenderbotSmall model)"),v4r=l(),VE=a("li"),_4e=a("strong"),F4r=o("camembert"),T4r=o(" \u2014 "),lJ=a("a"),M4r=o("TFCamembertModel"),E4r=o(" (CamemBERT model)"),C4r=l(),XE=a("li"),b4e=a("strong"),w4r=o("clip"),A4r=o(" \u2014 "),iJ=a("a"),L4r=o("TFCLIPModel"),y4r=o(" (CLIP model)"),x4r=l(),zE=a("li"),v4e=a("strong"),$4r=o("convbert"),k4r=o(" \u2014 "),dJ=a("a"),S4r=o("TFConvBertModel"),R4r=o(" (ConvBERT model)"),P4r=l(),WE=a("li"),F4e=a("strong"),B4r=o("convnext"),I4r=o(" \u2014 "),cJ=a("a"),N4r=o("TFConvNextModel"),q4r=o(" (ConvNeXT model)"),j4r=l(),QE=a("li"),T4e=a("strong"),D4r=o("ctrl"),G4r=o(" \u2014 "),mJ=a("a"),O4r=o("TFCTRLModel"),V4r=o(" (CTRL model)"),X4r=l(),HE=a("li"),M4e=a("strong"),z4r=o("data2vec-vision"),W4r=o(" \u2014 "),fJ=a("a"),Q4r=o("TFData2VecVisionModel"),H4r=o(" (Data2VecVision model)"),U4r=l(),UE=a("li"),E4e=a("strong"),J4r=o("deberta"),Y4r=o(" \u2014 "),gJ=a("a"),K4r=o("TFDebertaModel"),Z4r=o(" (DeBERTa model)"),eEr=l(),JE=a("li"),C4e=a("strong"),oEr=o("deberta-v2"),rEr=o(" \u2014 "),hJ=a("a"),tEr=o("TFDebertaV2Model"),aEr=o(" (DeBERTa-v2 model)"),nEr=l(),YE=a("li"),w4e=a("strong"),sEr=o("deit"),lEr=o(" \u2014 "),uJ=a("a"),iEr=o("TFDeiTModel"),dEr=o(" (DeiT model)"),cEr=l(),KE=a("li"),A4e=a("strong"),mEr=o("distilbert"),fEr=o(" \u2014 "),pJ=a("a"),gEr=o("TFDistilBertModel"),hEr=o(" (DistilBERT model)"),uEr=l(),ZE=a("li"),L4e=a("strong"),pEr=o("dpr"),_Er=o(" \u2014 "),_J=a("a"),bEr=o("TFDPRQuestionEncoder"),vEr=o(" (DPR model)"),FEr=l(),eC=a("li"),y4e=a("strong"),TEr=o("electra"),MEr=o(" \u2014 "),bJ=a("a"),EEr=o("TFElectraModel"),CEr=o(" (ELECTRA model)"),wEr=l(),oC=a("li"),x4e=a("strong"),AEr=o("flaubert"),LEr=o(" \u2014 "),vJ=a("a"),yEr=o("TFFlaubertModel"),xEr=o(" (FlauBERT model)"),$Er=l(),Zs=a("li"),$4e=a("strong"),kEr=o("funnel"),SEr=o(" \u2014 "),FJ=a("a"),REr=o("TFFunnelModel"),PEr=o(" or "),TJ=a("a"),BEr=o("TFFunnelBaseModel"),IEr=o(" (Funnel Transformer model)"),NEr=l(),rC=a("li"),k4e=a("strong"),qEr=o("gpt2"),jEr=o(" \u2014 "),MJ=a("a"),DEr=o("TFGPT2Model"),GEr=o(" (OpenAI GPT-2 model)"),OEr=l(),tC=a("li"),S4e=a("strong"),VEr=o("gptj"),XEr=o(" \u2014 "),EJ=a("a"),zEr=o("TFGPTJModel"),WEr=o(" (GPT-J model)"),QEr=l(),aC=a("li"),R4e=a("strong"),HEr=o("hubert"),UEr=o(" \u2014 "),CJ=a("a"),JEr=o("TFHubertModel"),YEr=o(" (Hubert model)"),KEr=l(),nC=a("li"),P4e=a("strong"),ZEr=o("layoutlm"),eCr=o(" \u2014 "),wJ=a("a"),oCr=o("TFLayoutLMModel"),rCr=o(" (LayoutLM model)"),tCr=l(),sC=a("li"),B4e=a("strong"),aCr=o("led"),nCr=o(" \u2014 "),AJ=a("a"),sCr=o("TFLEDModel"),lCr=o(" (LED model)"),iCr=l(),lC=a("li"),I4e=a("strong"),dCr=o("longformer"),cCr=o(" \u2014 "),LJ=a("a"),mCr=o("TFLongformerModel"),fCr=o(" (Longformer model)"),gCr=l(),iC=a("li"),N4e=a("strong"),hCr=o("lxmert"),uCr=o(" \u2014 "),yJ=a("a"),pCr=o("TFLxmertModel"),_Cr=o(" (LXMERT model)"),bCr=l(),dC=a("li"),q4e=a("strong"),vCr=o("marian"),FCr=o(" \u2014 "),xJ=a("a"),TCr=o("TFMarianModel"),MCr=o(" (Marian model)"),ECr=l(),cC=a("li"),j4e=a("strong"),CCr=o("mbart"),wCr=o(" \u2014 "),$J=a("a"),ACr=o("TFMBartModel"),LCr=o(" (mBART model)"),yCr=l(),mC=a("li"),D4e=a("strong"),xCr=o("mobilebert"),$Cr=o(" \u2014 "),kJ=a("a"),kCr=o("TFMobileBertModel"),SCr=o(" (MobileBERT model)"),RCr=l(),fC=a("li"),G4e=a("strong"),PCr=o("mpnet"),BCr=o(" \u2014 "),SJ=a("a"),ICr=o("TFMPNetModel"),NCr=o(" (MPNet model)"),qCr=l(),gC=a("li"),O4e=a("strong"),jCr=o("mt5"),DCr=o(" \u2014 "),RJ=a("a"),GCr=o("TFMT5Model"),OCr=o(" (MT5 model)"),VCr=l(),hC=a("li"),V4e=a("strong"),XCr=o("openai-gpt"),zCr=o(" \u2014 "),PJ=a("a"),WCr=o("TFOpenAIGPTModel"),QCr=o(" (OpenAI GPT model)"),HCr=l(),uC=a("li"),X4e=a("strong"),UCr=o("opt"),JCr=o(" \u2014 "),BJ=a("a"),YCr=o("TFOPTModel"),KCr=o(" (OPT model)"),ZCr=l(),pC=a("li"),z4e=a("strong"),e5r=o("pegasus"),o5r=o(" \u2014 "),IJ=a("a"),r5r=o("TFPegasusModel"),t5r=o(" (Pegasus model)"),a5r=l(),_C=a("li"),W4e=a("strong"),n5r=o("regnet"),s5r=o(" \u2014 "),NJ=a("a"),l5r=o("TFRegNetModel"),i5r=o(" (RegNet model)"),d5r=l(),bC=a("li"),Q4e=a("strong"),c5r=o("rembert"),m5r=o(" \u2014 "),qJ=a("a"),f5r=o("TFRemBertModel"),g5r=o(" (RemBERT model)"),h5r=l(),vC=a("li"),H4e=a("strong"),u5r=o("resnet"),p5r=o(" \u2014 "),jJ=a("a"),_5r=o("TFResNetModel"),b5r=o(" (ResNet model)"),v5r=l(),FC=a("li"),U4e=a("strong"),F5r=o("roberta"),T5r=o(" \u2014 "),DJ=a("a"),M5r=o("TFRobertaModel"),E5r=o(" (RoBERTa model)"),C5r=l(),TC=a("li"),J4e=a("strong"),w5r=o("roformer"),A5r=o(" \u2014 "),GJ=a("a"),L5r=o("TFRoFormerModel"),y5r=o(" (RoFormer model)"),x5r=l(),MC=a("li"),Y4e=a("strong"),$5r=o("segformer"),k5r=o(" \u2014 "),OJ=a("a"),S5r=o("TFSegformerModel"),R5r=o(" (SegFormer model)"),P5r=l(),EC=a("li"),K4e=a("strong"),B5r=o("speech_to_text"),I5r=o(" \u2014 "),VJ=a("a"),N5r=o("TFSpeech2TextModel"),q5r=o(" (Speech2Text model)"),j5r=l(),CC=a("li"),Z4e=a("strong"),D5r=o("swin"),G5r=o(" \u2014 "),XJ=a("a"),O5r=o("TFSwinModel"),V5r=o(" (Swin Transformer model)"),X5r=l(),wC=a("li"),eEe=a("strong"),z5r=o("t5"),W5r=o(" \u2014 "),zJ=a("a"),Q5r=o("TFT5Model"),H5r=o(" (T5 model)"),U5r=l(),AC=a("li"),oEe=a("strong"),J5r=o("tapas"),Y5r=o(" \u2014 "),WJ=a("a"),K5r=o("TFTapasModel"),Z5r=o(" (TAPAS model)"),e3r=l(),LC=a("li"),rEe=a("strong"),o3r=o("transfo-xl"),r3r=o(" \u2014 "),QJ=a("a"),t3r=o("TFTransfoXLModel"),a3r=o(" (Transformer-XL model)"),n3r=l(),yC=a("li"),tEe=a("strong"),s3r=o("vit"),l3r=o(" \u2014 "),HJ=a("a"),i3r=o("TFViTModel"),d3r=o(" (ViT model)"),c3r=l(),xC=a("li"),aEe=a("strong"),m3r=o("vit_mae"),f3r=o(" \u2014 "),UJ=a("a"),g3r=o("TFViTMAEModel"),h3r=o(" (ViTMAE model)"),u3r=l(),$C=a("li"),nEe=a("strong"),p3r=o("wav2vec2"),_3r=o(" \u2014 "),JJ=a("a"),b3r=o("TFWav2Vec2Model"),v3r=o(" (Wav2Vec2 model)"),F3r=l(),kC=a("li"),sEe=a("strong"),T3r=o("xlm"),M3r=o(" \u2014 "),YJ=a("a"),E3r=o("TFXLMModel"),C3r=o(" (XLM model)"),w3r=l(),SC=a("li"),lEe=a("strong"),A3r=o("xlm-roberta"),L3r=o(" \u2014 "),KJ=a("a"),y3r=o("TFXLMRobertaModel"),x3r=o(" (XLM-RoBERTa model)"),$3r=l(),RC=a("li"),iEe=a("strong"),k3r=o("xlnet"),S3r=o(" \u2014 "),ZJ=a("a"),R3r=o("TFXLNetModel"),P3r=o(" (XLNet model)"),B3r=l(),F(PC.$$.fragment),qWe=l(),mc=a("h2"),BC=a("a"),dEe=a("span"),F(_x.$$.fragment),I3r=l(),cEe=a("span"),N3r=o("TFAutoModelForPreTraining"),jWe=l(),tr=a("div"),F(bx.$$.fragment),q3r=l(),fc=a("p"),j3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eY=a("a"),D3r=o("from_pretrained()"),G3r=o(" class method or the "),oY=a("a"),O3r=o("from_config()"),V3r=o(` class
method.`),X3r=l(),vx=a("p"),z3r=o("This class cannot be instantiated directly using "),mEe=a("code"),W3r=o("__init__()"),Q3r=o(" (throws an error)."),H3r=l(),Pt=a("div"),F(Fx.$$.fragment),U3r=l(),fEe=a("p"),J3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Y3r=l(),gc=a("p"),K3r=o(`Note:
Loading a model from its configuration file does `),gEe=a("strong"),Z3r=o("not"),e0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),o0r=o("from_pretrained()"),r0r=o(" to load the model weights."),t0r=l(),F(IC.$$.fragment),a0r=l(),kr=a("div"),F(Tx.$$.fragment),n0r=l(),hEe=a("p"),s0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l0r=l(),dn=a("p"),i0r=o("The model class to instantiate is selected based on the "),uEe=a("code"),d0r=o("model_type"),c0r=o(` property of the config object (either
passed as an argument or loaded from `),pEe=a("code"),m0r=o("pretrained_model_name_or_path"),f0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=a("code"),g0r=o("pretrained_model_name_or_path"),h0r=o(":"),u0r=l(),se=a("ul"),NC=a("li"),bEe=a("strong"),p0r=o("albert"),_0r=o(" \u2014 "),tY=a("a"),b0r=o("TFAlbertForPreTraining"),v0r=o(" (ALBERT model)"),F0r=l(),qC=a("li"),vEe=a("strong"),T0r=o("bart"),M0r=o(" \u2014 "),aY=a("a"),E0r=o("TFBartForConditionalGeneration"),C0r=o(" (BART model)"),w0r=l(),jC=a("li"),FEe=a("strong"),A0r=o("bert"),L0r=o(" \u2014 "),nY=a("a"),y0r=o("TFBertForPreTraining"),x0r=o(" (BERT model)"),$0r=l(),DC=a("li"),TEe=a("strong"),k0r=o("camembert"),S0r=o(" \u2014 "),sY=a("a"),R0r=o("TFCamembertForMaskedLM"),P0r=o(" (CamemBERT model)"),B0r=l(),GC=a("li"),MEe=a("strong"),I0r=o("ctrl"),N0r=o(" \u2014 "),lY=a("a"),q0r=o("TFCTRLLMHeadModel"),j0r=o(" (CTRL model)"),D0r=l(),OC=a("li"),EEe=a("strong"),G0r=o("distilbert"),O0r=o(" \u2014 "),iY=a("a"),V0r=o("TFDistilBertForMaskedLM"),X0r=o(" (DistilBERT model)"),z0r=l(),VC=a("li"),CEe=a("strong"),W0r=o("electra"),Q0r=o(" \u2014 "),dY=a("a"),H0r=o("TFElectraForPreTraining"),U0r=o(" (ELECTRA model)"),J0r=l(),XC=a("li"),wEe=a("strong"),Y0r=o("flaubert"),K0r=o(" \u2014 "),cY=a("a"),Z0r=o("TFFlaubertWithLMHeadModel"),ewr=o(" (FlauBERT model)"),owr=l(),zC=a("li"),AEe=a("strong"),rwr=o("funnel"),twr=o(" \u2014 "),mY=a("a"),awr=o("TFFunnelForPreTraining"),nwr=o(" (Funnel Transformer model)"),swr=l(),WC=a("li"),LEe=a("strong"),lwr=o("gpt2"),iwr=o(" \u2014 "),fY=a("a"),dwr=o("TFGPT2LMHeadModel"),cwr=o(" (OpenAI GPT-2 model)"),mwr=l(),QC=a("li"),yEe=a("strong"),fwr=o("layoutlm"),gwr=o(" \u2014 "),gY=a("a"),hwr=o("TFLayoutLMForMaskedLM"),uwr=o(" (LayoutLM model)"),pwr=l(),HC=a("li"),xEe=a("strong"),_wr=o("lxmert"),bwr=o(" \u2014 "),hY=a("a"),vwr=o("TFLxmertForPreTraining"),Fwr=o(" (LXMERT model)"),Twr=l(),UC=a("li"),$Ee=a("strong"),Mwr=o("mobilebert"),Ewr=o(" \u2014 "),uY=a("a"),Cwr=o("TFMobileBertForPreTraining"),wwr=o(" (MobileBERT model)"),Awr=l(),JC=a("li"),kEe=a("strong"),Lwr=o("mpnet"),ywr=o(" \u2014 "),pY=a("a"),xwr=o("TFMPNetForMaskedLM"),$wr=o(" (MPNet model)"),kwr=l(),YC=a("li"),SEe=a("strong"),Swr=o("openai-gpt"),Rwr=o(" \u2014 "),_Y=a("a"),Pwr=o("TFOpenAIGPTLMHeadModel"),Bwr=o(" (OpenAI GPT model)"),Iwr=l(),KC=a("li"),REe=a("strong"),Nwr=o("roberta"),qwr=o(" \u2014 "),bY=a("a"),jwr=o("TFRobertaForMaskedLM"),Dwr=o(" (RoBERTa model)"),Gwr=l(),ZC=a("li"),PEe=a("strong"),Owr=o("t5"),Vwr=o(" \u2014 "),vY=a("a"),Xwr=o("TFT5ForConditionalGeneration"),zwr=o(" (T5 model)"),Wwr=l(),e5=a("li"),BEe=a("strong"),Qwr=o("tapas"),Hwr=o(" \u2014 "),FY=a("a"),Uwr=o("TFTapasForMaskedLM"),Jwr=o(" (TAPAS model)"),Ywr=l(),o5=a("li"),IEe=a("strong"),Kwr=o("transfo-xl"),Zwr=o(" \u2014 "),TY=a("a"),e6r=o("TFTransfoXLLMHeadModel"),o6r=o(" (Transformer-XL model)"),r6r=l(),r5=a("li"),NEe=a("strong"),t6r=o("vit_mae"),a6r=o(" \u2014 "),MY=a("a"),n6r=o("TFViTMAEForPreTraining"),s6r=o(" (ViTMAE model)"),l6r=l(),t5=a("li"),qEe=a("strong"),i6r=o("xlm"),d6r=o(" \u2014 "),EY=a("a"),c6r=o("TFXLMWithLMHeadModel"),m6r=o(" (XLM model)"),f6r=l(),a5=a("li"),jEe=a("strong"),g6r=o("xlm-roberta"),h6r=o(" \u2014 "),CY=a("a"),u6r=o("TFXLMRobertaForMaskedLM"),p6r=o(" (XLM-RoBERTa model)"),_6r=l(),n5=a("li"),DEe=a("strong"),b6r=o("xlnet"),v6r=o(" \u2014 "),wY=a("a"),F6r=o("TFXLNetLMHeadModel"),T6r=o(" (XLNet model)"),M6r=l(),F(s5.$$.fragment),DWe=l(),hc=a("h2"),l5=a("a"),GEe=a("span"),F(Mx.$$.fragment),E6r=l(),OEe=a("span"),C6r=o("TFAutoModelForCausalLM"),GWe=l(),ar=a("div"),F(Ex.$$.fragment),w6r=l(),uc=a("p"),A6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=a("a"),L6r=o("from_pretrained()"),y6r=o(" class method or the "),LY=a("a"),x6r=o("from_config()"),$6r=o(` class
method.`),k6r=l(),Cx=a("p"),S6r=o("This class cannot be instantiated directly using "),VEe=a("code"),R6r=o("__init__()"),P6r=o(" (throws an error)."),B6r=l(),Bt=a("div"),F(wx.$$.fragment),I6r=l(),XEe=a("p"),N6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q6r=l(),pc=a("p"),j6r=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),D6r=o("not"),G6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),O6r=o("from_pretrained()"),V6r=o(" to load the model weights."),X6r=l(),F(i5.$$.fragment),z6r=l(),Sr=a("div"),F(Ax.$$.fragment),W6r=l(),WEe=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H6r=l(),cn=a("p"),U6r=o("The model class to instantiate is selected based on the "),QEe=a("code"),J6r=o("model_type"),Y6r=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),Me=a("ul"),d5=a("li"),JEe=a("strong"),tAr=o("bert"),aAr=o(" \u2014 "),xY=a("a"),nAr=o("TFBertLMHeadModel"),sAr=o(" (BERT model)"),lAr=l(),c5=a("li"),YEe=a("strong"),iAr=o("camembert"),dAr=o(" \u2014 "),$Y=a("a"),cAr=o("TFCamembertForCausalLM"),mAr=o(" (CamemBERT model)"),fAr=l(),m5=a("li"),KEe=a("strong"),gAr=o("ctrl"),hAr=o(" \u2014 "),kY=a("a"),uAr=o("TFCTRLLMHeadModel"),pAr=o(" (CTRL model)"),_Ar=l(),f5=a("li"),ZEe=a("strong"),bAr=o("gpt2"),vAr=o(" \u2014 "),SY=a("a"),FAr=o("TFGPT2LMHeadModel"),TAr=o(" (OpenAI GPT-2 model)"),MAr=l(),g5=a("li"),eCe=a("strong"),EAr=o("gptj"),CAr=o(" \u2014 "),RY=a("a"),wAr=o("TFGPTJForCausalLM"),AAr=o(" (GPT-J model)"),LAr=l(),h5=a("li"),oCe=a("strong"),yAr=o("openai-gpt"),xAr=o(" \u2014 "),PY=a("a"),$Ar=o("TFOpenAIGPTLMHeadModel"),kAr=o(" (OpenAI GPT model)"),SAr=l(),u5=a("li"),rCe=a("strong"),RAr=o("opt"),PAr=o(" \u2014 "),BY=a("a"),BAr=o("TFOPTForCausalLM"),IAr=o(" (OPT model)"),NAr=l(),p5=a("li"),tCe=a("strong"),qAr=o("rembert"),jAr=o(" \u2014 "),IY=a("a"),DAr=o("TFRemBertForCausalLM"),GAr=o(" (RemBERT model)"),OAr=l(),_5=a("li"),aCe=a("strong"),VAr=o("roberta"),XAr=o(" \u2014 "),NY=a("a"),zAr=o("TFRobertaForCausalLM"),WAr=o(" (RoBERTa model)"),QAr=l(),b5=a("li"),nCe=a("strong"),HAr=o("roformer"),UAr=o(" \u2014 "),qY=a("a"),JAr=o("TFRoFormerForCausalLM"),YAr=o(" (RoFormer model)"),KAr=l(),v5=a("li"),sCe=a("strong"),ZAr=o("transfo-xl"),e7r=o(" \u2014 "),jY=a("a"),o7r=o("TFTransfoXLLMHeadModel"),r7r=o(" (Transformer-XL model)"),t7r=l(),F5=a("li"),lCe=a("strong"),a7r=o("xlm"),n7r=o(" \u2014 "),DY=a("a"),s7r=o("TFXLMWithLMHeadModel"),l7r=o(" (XLM model)"),i7r=l(),T5=a("li"),iCe=a("strong"),d7r=o("xlnet"),c7r=o(" \u2014 "),GY=a("a"),m7r=o("TFXLNetLMHeadModel"),f7r=o(" (XLNet model)"),g7r=l(),F(M5.$$.fragment),OWe=l(),_c=a("h2"),E5=a("a"),dCe=a("span"),F(Lx.$$.fragment),h7r=l(),cCe=a("span"),u7r=o("TFAutoModelForImageClassification"),VWe=l(),nr=a("div"),F(yx.$$.fragment),p7r=l(),bc=a("p"),_7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OY=a("a"),b7r=o("from_pretrained()"),v7r=o(" class method or the "),VY=a("a"),F7r=o("from_config()"),T7r=o(` class
method.`),M7r=l(),xx=a("p"),E7r=o("This class cannot be instantiated directly using "),mCe=a("code"),C7r=o("__init__()"),w7r=o(" (throws an error)."),A7r=l(),It=a("div"),F($x.$$.fragment),L7r=l(),fCe=a("p"),y7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x7r=l(),vc=a("p"),$7r=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),k7r=o("not"),S7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),R7r=o("from_pretrained()"),P7r=o(" to load the model weights."),B7r=l(),F(C5.$$.fragment),I7r=l(),Rr=a("div"),F(kx.$$.fragment),N7r=l(),hCe=a("p"),q7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j7r=l(),mn=a("p"),D7r=o("The model class to instantiate is selected based on the "),uCe=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(":"),Q7r=l(),Ve=a("ul"),w5=a("li"),bCe=a("strong"),H7r=o("convnext"),U7r=o(" \u2014 "),zY=a("a"),J7r=o("TFConvNextForImageClassification"),Y7r=o(" (ConvNeXT model)"),K7r=l(),A5=a("li"),vCe=a("strong"),Z7r=o("data2vec-vision"),eLr=o(" \u2014 "),WY=a("a"),oLr=o("TFData2VecVisionForImageClassification"),rLr=o(" (Data2VecVision model)"),tLr=l(),el=a("li"),FCe=a("strong"),aLr=o("deit"),nLr=o(" \u2014 "),QY=a("a"),sLr=o("TFDeiTForImageClassification"),lLr=o(" or "),HY=a("a"),iLr=o("TFDeiTForImageClassificationWithTeacher"),dLr=o(" (DeiT model)"),cLr=l(),L5=a("li"),TCe=a("strong"),mLr=o("regnet"),fLr=o(" \u2014 "),UY=a("a"),gLr=o("TFRegNetForImageClassification"),hLr=o(" (RegNet model)"),uLr=l(),y5=a("li"),MCe=a("strong"),pLr=o("resnet"),_Lr=o(" \u2014 "),JY=a("a"),bLr=o("TFResNetForImageClassification"),vLr=o(" (ResNet model)"),FLr=l(),x5=a("li"),ECe=a("strong"),TLr=o("segformer"),MLr=o(" \u2014 "),YY=a("a"),ELr=o("TFSegformerForImageClassification"),CLr=o(" (SegFormer model)"),wLr=l(),$5=a("li"),CCe=a("strong"),ALr=o("swin"),LLr=o(" \u2014 "),KY=a("a"),yLr=o("TFSwinForImageClassification"),xLr=o(" (Swin Transformer model)"),$Lr=l(),k5=a("li"),wCe=a("strong"),kLr=o("vit"),SLr=o(" \u2014 "),ZY=a("a"),RLr=o("TFViTForImageClassification"),PLr=o(" (ViT model)"),BLr=l(),F(S5.$$.fragment),XWe=l(),Fc=a("h2"),R5=a("a"),ACe=a("span"),F(Sx.$$.fragment),ILr=l(),LCe=a("span"),NLr=o("TFAutoModelForMaskedLM"),zWe=l(),sr=a("div"),F(Rx.$$.fragment),qLr=l(),Tc=a("p"),jLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=a("a"),DLr=o("from_pretrained()"),GLr=o(" class method or the "),oK=a("a"),OLr=o("from_config()"),VLr=o(` class
method.`),XLr=l(),Px=a("p"),zLr=o("This class cannot be instantiated directly using "),yCe=a("code"),WLr=o("__init__()"),QLr=o(" (throws an error)."),HLr=l(),Nt=a("div"),F(Bx.$$.fragment),ULr=l(),xCe=a("p"),JLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YLr=l(),Mc=a("p"),KLr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),ZLr=o("not"),eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),oyr=o("from_pretrained()"),ryr=o(" to load the model weights."),tyr=l(),F(P5.$$.fragment),ayr=l(),Pr=a("div"),F(Ix.$$.fragment),nyr=l(),kCe=a("p"),syr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lyr=l(),fn=a("p"),iyr=o("The model class to instantiate is selected based on the "),SCe=a("code"),dyr=o("model_type"),cyr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),myr=o("pretrained_model_name_or_path"),fyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(":"),uyr=l(),ie=a("ul"),B5=a("li"),BCe=a("strong"),pyr=o("albert"),_yr=o(" \u2014 "),tK=a("a"),byr=o("TFAlbertForMaskedLM"),vyr=o(" (ALBERT model)"),Fyr=l(),I5=a("li"),ICe=a("strong"),Tyr=o("bert"),Myr=o(" \u2014 "),aK=a("a"),Eyr=o("TFBertForMaskedLM"),Cyr=o(" (BERT model)"),wyr=l(),N5=a("li"),NCe=a("strong"),Ayr=o("camembert"),Lyr=o(" \u2014 "),nK=a("a"),yyr=o("TFCamembertForMaskedLM"),xyr=o(" (CamemBERT model)"),$yr=l(),q5=a("li"),qCe=a("strong"),kyr=o("convbert"),Syr=o(" \u2014 "),sK=a("a"),Ryr=o("TFConvBertForMaskedLM"),Pyr=o(" (ConvBERT model)"),Byr=l(),j5=a("li"),jCe=a("strong"),Iyr=o("deberta"),Nyr=o(" \u2014 "),lK=a("a"),qyr=o("TFDebertaForMaskedLM"),jyr=o(" (DeBERTa model)"),Dyr=l(),D5=a("li"),DCe=a("strong"),Gyr=o("deberta-v2"),Oyr=o(" \u2014 "),iK=a("a"),Vyr=o("TFDebertaV2ForMaskedLM"),Xyr=o(" (DeBERTa-v2 model)"),zyr=l(),G5=a("li"),GCe=a("strong"),Wyr=o("distilbert"),Qyr=o(" \u2014 "),dK=a("a"),Hyr=o("TFDistilBertForMaskedLM"),Uyr=o(" (DistilBERT model)"),Jyr=l(),O5=a("li"),OCe=a("strong"),Yyr=o("electra"),Kyr=o(" \u2014 "),cK=a("a"),Zyr=o("TFElectraForMaskedLM"),e8r=o(" (ELECTRA model)"),o8r=l(),V5=a("li"),VCe=a("strong"),r8r=o("flaubert"),t8r=o(" \u2014 "),mK=a("a"),a8r=o("TFFlaubertWithLMHeadModel"),n8r=o(" (FlauBERT model)"),s8r=l(),X5=a("li"),XCe=a("strong"),l8r=o("funnel"),i8r=o(" \u2014 "),fK=a("a"),d8r=o("TFFunnelForMaskedLM"),c8r=o(" (Funnel Transformer model)"),m8r=l(),z5=a("li"),zCe=a("strong"),f8r=o("layoutlm"),g8r=o(" \u2014 "),gK=a("a"),h8r=o("TFLayoutLMForMaskedLM"),u8r=o(" (LayoutLM model)"),p8r=l(),W5=a("li"),WCe=a("strong"),_8r=o("longformer"),b8r=o(" \u2014 "),hK=a("a"),v8r=o("TFLongformerForMaskedLM"),F8r=o(" (Longformer model)"),T8r=l(),Q5=a("li"),QCe=a("strong"),M8r=o("mobilebert"),E8r=o(" \u2014 "),uK=a("a"),C8r=o("TFMobileBertForMaskedLM"),w8r=o(" (MobileBERT model)"),A8r=l(),H5=a("li"),HCe=a("strong"),L8r=o("mpnet"),y8r=o(" \u2014 "),pK=a("a"),x8r=o("TFMPNetForMaskedLM"),$8r=o(" (MPNet model)"),k8r=l(),U5=a("li"),UCe=a("strong"),S8r=o("rembert"),R8r=o(" \u2014 "),_K=a("a"),P8r=o("TFRemBertForMaskedLM"),B8r=o(" (RemBERT model)"),I8r=l(),J5=a("li"),JCe=a("strong"),N8r=o("roberta"),q8r=o(" \u2014 "),bK=a("a"),j8r=o("TFRobertaForMaskedLM"),D8r=o(" (RoBERTa model)"),G8r=l(),Y5=a("li"),YCe=a("strong"),O8r=o("roformer"),V8r=o(" \u2014 "),vK=a("a"),X8r=o("TFRoFormerForMaskedLM"),z8r=o(" (RoFormer model)"),W8r=l(),K5=a("li"),KCe=a("strong"),Q8r=o("tapas"),H8r=o(" \u2014 "),FK=a("a"),U8r=o("TFTapasForMaskedLM"),J8r=o(" (TAPAS model)"),Y8r=l(),Z5=a("li"),ZCe=a("strong"),K8r=o("xlm"),Z8r=o(" \u2014 "),TK=a("a"),e9r=o("TFXLMWithLMHeadModel"),o9r=o(" (XLM model)"),r9r=l(),e3=a("li"),e5e=a("strong"),t9r=o("xlm-roberta"),a9r=o(" \u2014 "),MK=a("a"),n9r=o("TFXLMRobertaForMaskedLM"),s9r=o(" (XLM-RoBERTa model)"),l9r=l(),F(o3.$$.fragment),WWe=l(),Ec=a("h2"),r3=a("a"),o5e=a("span"),F(Nx.$$.fragment),i9r=l(),r5e=a("span"),d9r=o("TFAutoModelForSeq2SeqLM"),QWe=l(),lr=a("div"),F(qx.$$.fragment),c9r=l(),Cc=a("p"),m9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EK=a("a"),f9r=o("from_pretrained()"),g9r=o(" class method or the "),CK=a("a"),h9r=o("from_config()"),u9r=o(` class
method.`),p9r=l(),jx=a("p"),_9r=o("This class cannot be instantiated directly using "),t5e=a("code"),b9r=o("__init__()"),v9r=o(" (throws an error)."),F9r=l(),qt=a("div"),F(Dx.$$.fragment),T9r=l(),a5e=a("p"),M9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E9r=l(),wc=a("p"),C9r=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),w9r=o("not"),A9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),L9r=o("from_pretrained()"),y9r=o(" to load the model weights."),x9r=l(),F(t3.$$.fragment),$9r=l(),Br=a("div"),F(Gx.$$.fragment),k9r=l(),s5e=a("p"),S9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R9r=l(),gn=a("p"),P9r=o("The model class to instantiate is selected based on the "),l5e=a("code"),B9r=o("model_type"),I9r=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),N9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(":"),G9r=l(),ye=a("ul"),a3=a("li"),c5e=a("strong"),O9r=o("bart"),V9r=o(" \u2014 "),AK=a("a"),X9r=o("TFBartForConditionalGeneration"),z9r=o(" (BART model)"),W9r=l(),n3=a("li"),m5e=a("strong"),Q9r=o("blenderbot"),H9r=o(" \u2014 "),LK=a("a"),U9r=o("TFBlenderbotForConditionalGeneration"),J9r=o(" (Blenderbot model)"),Y9r=l(),s3=a("li"),f5e=a("strong"),K9r=o("blenderbot-small"),Z9r=o(" \u2014 "),yK=a("a"),exr=o("TFBlenderbotSmallForConditionalGeneration"),oxr=o(" (BlenderbotSmall model)"),rxr=l(),l3=a("li"),g5e=a("strong"),txr=o("encoder-decoder"),axr=o(" \u2014 "),xK=a("a"),nxr=o("TFEncoderDecoderModel"),sxr=o(" (Encoder decoder model)"),lxr=l(),i3=a("li"),h5e=a("strong"),ixr=o("led"),dxr=o(" \u2014 "),$K=a("a"),cxr=o("TFLEDForConditionalGeneration"),mxr=o(" (LED model)"),fxr=l(),d3=a("li"),u5e=a("strong"),gxr=o("marian"),hxr=o(" \u2014 "),kK=a("a"),uxr=o("TFMarianMTModel"),pxr=o(" (Marian model)"),_xr=l(),c3=a("li"),p5e=a("strong"),bxr=o("mbart"),vxr=o(" \u2014 "),SK=a("a"),Fxr=o("TFMBartForConditionalGeneration"),Txr=o(" (mBART model)"),Mxr=l(),m3=a("li"),_5e=a("strong"),Exr=o("mt5"),Cxr=o(" \u2014 "),RK=a("a"),wxr=o("TFMT5ForConditionalGeneration"),Axr=o(" (MT5 model)"),Lxr=l(),f3=a("li"),b5e=a("strong"),yxr=o("pegasus"),xxr=o(" \u2014 "),PK=a("a"),$xr=o("TFPegasusForConditionalGeneration"),kxr=o(" (Pegasus model)"),Sxr=l(),g3=a("li"),v5e=a("strong"),Rxr=o("t5"),Pxr=o(" \u2014 "),BK=a("a"),Bxr=o("TFT5ForConditionalGeneration"),Ixr=o(" (T5 model)"),Nxr=l(),F(h3.$$.fragment),HWe=l(),Ac=a("h2"),u3=a("a"),F5e=a("span"),F(Ox.$$.fragment),qxr=l(),T5e=a("span"),jxr=o("TFAutoModelForSequenceClassification"),UWe=l(),ir=a("div"),F(Vx.$$.fragment),Dxr=l(),Lc=a("p"),Gxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IK=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" class method or the "),NK=a("a"),Xxr=o("from_config()"),zxr=o(` class
method.`),Wxr=l(),Xx=a("p"),Qxr=o("This class cannot be instantiated directly using "),M5e=a("code"),Hxr=o("__init__()"),Uxr=o(" (throws an error)."),Jxr=l(),jt=a("div"),F(zx.$$.fragment),Yxr=l(),E5e=a("p"),Kxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zxr=l(),yc=a("p"),e$r=o(`Note:
Loading a model from its configuration file does `),C5e=a("strong"),o$r=o("not"),r$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),t$r=o("from_pretrained()"),a$r=o(" to load the model weights."),n$r=l(),F(p3.$$.fragment),s$r=l(),Ir=a("div"),F(Wx.$$.fragment),l$r=l(),w5e=a("p"),i$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d$r=l(),hn=a("p"),c$r=o("The model class to instantiate is selected based on the "),A5e=a("code"),m$r=o("model_type"),f$r=o(` property of the config object (either
passed as an argument or loaded from `),L5e=a("code"),g$r=o("pretrained_model_name_or_path"),h$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=a("code"),u$r=o("pretrained_model_name_or_path"),p$r=o(":"),_$r=l(),te=a("ul"),_3=a("li"),x5e=a("strong"),b$r=o("albert"),v$r=o(" \u2014 "),jK=a("a"),F$r=o("TFAlbertForSequenceClassification"),T$r=o(" (ALBERT model)"),M$r=l(),b3=a("li"),$5e=a("strong"),E$r=o("bert"),C$r=o(" \u2014 "),DK=a("a"),w$r=o("TFBertForSequenceClassification"),A$r=o(" (BERT model)"),L$r=l(),v3=a("li"),k5e=a("strong"),y$r=o("camembert"),x$r=o(" \u2014 "),GK=a("a"),$$r=o("TFCamembertForSequenceClassification"),k$r=o(" (CamemBERT model)"),S$r=l(),F3=a("li"),S5e=a("strong"),R$r=o("convbert"),P$r=o(" \u2014 "),OK=a("a"),B$r=o("TFConvBertForSequenceClassification"),I$r=o(" (ConvBERT model)"),N$r=l(),T3=a("li"),R5e=a("strong"),q$r=o("ctrl"),j$r=o(" \u2014 "),VK=a("a"),D$r=o("TFCTRLForSequenceClassification"),G$r=o(" (CTRL model)"),O$r=l(),M3=a("li"),P5e=a("strong"),V$r=o("deberta"),X$r=o(" \u2014 "),XK=a("a"),z$r=o("TFDebertaForSequenceClassification"),W$r=o(" (DeBERTa model)"),Q$r=l(),E3=a("li"),B5e=a("strong"),H$r=o("deberta-v2"),U$r=o(" \u2014 "),zK=a("a"),J$r=o("TFDebertaV2ForSequenceClassification"),Y$r=o(" (DeBERTa-v2 model)"),K$r=l(),C3=a("li"),I5e=a("strong"),Z$r=o("distilbert"),ekr=o(" \u2014 "),WK=a("a"),okr=o("TFDistilBertForSequenceClassification"),rkr=o(" (DistilBERT model)"),tkr=l(),w3=a("li"),N5e=a("strong"),akr=o("electra"),nkr=o(" \u2014 "),QK=a("a"),skr=o("TFElectraForSequenceClassification"),lkr=o(" (ELECTRA model)"),ikr=l(),A3=a("li"),q5e=a("strong"),dkr=o("flaubert"),ckr=o(" \u2014 "),HK=a("a"),mkr=o("TFFlaubertForSequenceClassification"),fkr=o(" (FlauBERT model)"),gkr=l(),L3=a("li"),j5e=a("strong"),hkr=o("funnel"),ukr=o(" \u2014 "),UK=a("a"),pkr=o("TFFunnelForSequenceClassification"),_kr=o(" (Funnel Transformer model)"),bkr=l(),y3=a("li"),D5e=a("strong"),vkr=o("gpt2"),Fkr=o(" \u2014 "),JK=a("a"),Tkr=o("TFGPT2ForSequenceClassification"),Mkr=o(" (OpenAI GPT-2 model)"),Ekr=l(),x3=a("li"),G5e=a("strong"),Ckr=o("gptj"),wkr=o(" \u2014 "),YK=a("a"),Akr=o("TFGPTJForSequenceClassification"),Lkr=o(" (GPT-J model)"),ykr=l(),$3=a("li"),O5e=a("strong"),xkr=o("layoutlm"),$kr=o(" \u2014 "),KK=a("a"),kkr=o("TFLayoutLMForSequenceClassification"),Skr=o(" (LayoutLM model)"),Rkr=l(),k3=a("li"),V5e=a("strong"),Pkr=o("longformer"),Bkr=o(" \u2014 "),ZK=a("a"),Ikr=o("TFLongformerForSequenceClassification"),Nkr=o(" (Longformer model)"),qkr=l(),S3=a("li"),X5e=a("strong"),jkr=o("mobilebert"),Dkr=o(" \u2014 "),eZ=a("a"),Gkr=o("TFMobileBertForSequenceClassification"),Okr=o(" (MobileBERT model)"),Vkr=l(),R3=a("li"),z5e=a("strong"),Xkr=o("mpnet"),zkr=o(" \u2014 "),oZ=a("a"),Wkr=o("TFMPNetForSequenceClassification"),Qkr=o(" (MPNet model)"),Hkr=l(),P3=a("li"),W5e=a("strong"),Ukr=o("openai-gpt"),Jkr=o(" \u2014 "),rZ=a("a"),Ykr=o("TFOpenAIGPTForSequenceClassification"),Kkr=o(" (OpenAI GPT model)"),Zkr=l(),B3=a("li"),Q5e=a("strong"),eSr=o("rembert"),oSr=o(" \u2014 "),tZ=a("a"),rSr=o("TFRemBertForSequenceClassification"),tSr=o(" (RemBERT model)"),aSr=l(),I3=a("li"),H5e=a("strong"),nSr=o("roberta"),sSr=o(" \u2014 "),aZ=a("a"),lSr=o("TFRobertaForSequenceClassification"),iSr=o(" (RoBERTa model)"),dSr=l(),N3=a("li"),U5e=a("strong"),cSr=o("roformer"),mSr=o(" \u2014 "),nZ=a("a"),fSr=o("TFRoFormerForSequenceClassification"),gSr=o(" (RoFormer model)"),hSr=l(),q3=a("li"),J5e=a("strong"),uSr=o("tapas"),pSr=o(" \u2014 "),sZ=a("a"),_Sr=o("TFTapasForSequenceClassification"),bSr=o(" (TAPAS model)"),vSr=l(),j3=a("li"),Y5e=a("strong"),FSr=o("transfo-xl"),TSr=o(" \u2014 "),lZ=a("a"),MSr=o("TFTransfoXLForSequenceClassification"),ESr=o(" (Transformer-XL model)"),CSr=l(),D3=a("li"),K5e=a("strong"),wSr=o("xlm"),ASr=o(" \u2014 "),iZ=a("a"),LSr=o("TFXLMForSequenceClassification"),ySr=o(" (XLM model)"),xSr=l(),G3=a("li"),Z5e=a("strong"),$Sr=o("xlm-roberta"),kSr=o(" \u2014 "),dZ=a("a"),SSr=o("TFXLMRobertaForSequenceClassification"),RSr=o(" (XLM-RoBERTa model)"),PSr=l(),O3=a("li"),e3e=a("strong"),BSr=o("xlnet"),ISr=o(" \u2014 "),cZ=a("a"),NSr=o("TFXLNetForSequenceClassification"),qSr=o(" (XLNet model)"),jSr=l(),F(V3.$$.fragment),JWe=l(),xc=a("h2"),X3=a("a"),o3e=a("span"),F(Qx.$$.fragment),DSr=l(),r3e=a("span"),GSr=o("TFAutoModelForMultipleChoice"),YWe=l(),dr=a("div"),F(Hx.$$.fragment),OSr=l(),$c=a("p"),VSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mZ=a("a"),XSr=o("from_pretrained()"),zSr=o(" class method or the "),fZ=a("a"),WSr=o("from_config()"),QSr=o(` class
method.`),HSr=l(),Ux=a("p"),USr=o("This class cannot be instantiated directly using "),t3e=a("code"),JSr=o("__init__()"),YSr=o(" (throws an error)."),KSr=l(),Dt=a("div"),F(Jx.$$.fragment),ZSr=l(),a3e=a("p"),eRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oRr=l(),kc=a("p"),rRr=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),tRr=o("not"),aRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),nRr=o("from_pretrained()"),sRr=o(" to load the model weights."),lRr=l(),F(z3.$$.fragment),iRr=l(),Nr=a("div"),F(Yx.$$.fragment),dRr=l(),s3e=a("p"),cRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mRr=l(),un=a("p"),fRr=o("The model class to instantiate is selected based on the "),l3e=a("code"),gRr=o("model_type"),hRr=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),uRr=o("pretrained_model_name_or_path"),pRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),_Rr=o("pretrained_model_name_or_path"),bRr=o(":"),vRr=l(),ve=a("ul"),W3=a("li"),c3e=a("strong"),FRr=o("albert"),TRr=o(" \u2014 "),hZ=a("a"),MRr=o("TFAlbertForMultipleChoice"),ERr=o(" (ALBERT model)"),CRr=l(),Q3=a("li"),m3e=a("strong"),wRr=o("bert"),ARr=o(" \u2014 "),uZ=a("a"),LRr=o("TFBertForMultipleChoice"),yRr=o(" (BERT model)"),xRr=l(),H3=a("li"),f3e=a("strong"),$Rr=o("camembert"),kRr=o(" \u2014 "),pZ=a("a"),SRr=o("TFCamembertForMultipleChoice"),RRr=o(" (CamemBERT model)"),PRr=l(),U3=a("li"),g3e=a("strong"),BRr=o("convbert"),IRr=o(" \u2014 "),_Z=a("a"),NRr=o("TFConvBertForMultipleChoice"),qRr=o(" (ConvBERT model)"),jRr=l(),J3=a("li"),h3e=a("strong"),DRr=o("distilbert"),GRr=o(" \u2014 "),bZ=a("a"),ORr=o("TFDistilBertForMultipleChoice"),VRr=o(" (DistilBERT model)"),XRr=l(),Y3=a("li"),u3e=a("strong"),zRr=o("electra"),WRr=o(" \u2014 "),vZ=a("a"),QRr=o("TFElectraForMultipleChoice"),HRr=o(" (ELECTRA model)"),URr=l(),K3=a("li"),p3e=a("strong"),JRr=o("flaubert"),YRr=o(" \u2014 "),FZ=a("a"),KRr=o("TFFlaubertForMultipleChoice"),ZRr=o(" (FlauBERT model)"),ePr=l(),Z3=a("li"),_3e=a("strong"),oPr=o("funnel"),rPr=o(" \u2014 "),TZ=a("a"),tPr=o("TFFunnelForMultipleChoice"),aPr=o(" (Funnel Transformer model)"),nPr=l(),e0=a("li"),b3e=a("strong"),sPr=o("longformer"),lPr=o(" \u2014 "),MZ=a("a"),iPr=o("TFLongformerForMultipleChoice"),dPr=o(" (Longformer model)"),cPr=l(),o0=a("li"),v3e=a("strong"),mPr=o("mobilebert"),fPr=o(" \u2014 "),EZ=a("a"),gPr=o("TFMobileBertForMultipleChoice"),hPr=o(" (MobileBERT model)"),uPr=l(),r0=a("li"),F3e=a("strong"),pPr=o("mpnet"),_Pr=o(" \u2014 "),CZ=a("a"),bPr=o("TFMPNetForMultipleChoice"),vPr=o(" (MPNet model)"),FPr=l(),t0=a("li"),T3e=a("strong"),TPr=o("rembert"),MPr=o(" \u2014 "),wZ=a("a"),EPr=o("TFRemBertForMultipleChoice"),CPr=o(" (RemBERT model)"),wPr=l(),a0=a("li"),M3e=a("strong"),APr=o("roberta"),LPr=o(" \u2014 "),AZ=a("a"),yPr=o("TFRobertaForMultipleChoice"),xPr=o(" (RoBERTa model)"),$Pr=l(),n0=a("li"),E3e=a("strong"),kPr=o("roformer"),SPr=o(" \u2014 "),LZ=a("a"),RPr=o("TFRoFormerForMultipleChoice"),PPr=o(" (RoFormer model)"),BPr=l(),s0=a("li"),C3e=a("strong"),IPr=o("xlm"),NPr=o(" \u2014 "),yZ=a("a"),qPr=o("TFXLMForMultipleChoice"),jPr=o(" (XLM model)"),DPr=l(),l0=a("li"),w3e=a("strong"),GPr=o("xlm-roberta"),OPr=o(" \u2014 "),xZ=a("a"),VPr=o("TFXLMRobertaForMultipleChoice"),XPr=o(" (XLM-RoBERTa model)"),zPr=l(),i0=a("li"),A3e=a("strong"),WPr=o("xlnet"),QPr=o(" \u2014 "),$Z=a("a"),HPr=o("TFXLNetForMultipleChoice"),UPr=o(" (XLNet model)"),JPr=l(),F(d0.$$.fragment),KWe=l(),Sc=a("h2"),c0=a("a"),L3e=a("span"),F(Kx.$$.fragment),YPr=l(),y3e=a("span"),KPr=o("TFAutoModelForNextSentencePrediction"),ZWe=l(),cr=a("div"),F(Zx.$$.fragment),ZPr=l(),Rc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),SZ=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),e$=a("p"),sBr=o("This class cannot be instantiated directly using "),x3e=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),Gt=a("div"),F(o$.$$.fragment),cBr=l(),$3e=a("p"),mBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fBr=l(),Pc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),hBr=o("not"),uBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("a"),pBr=o("from_pretrained()"),_Br=o(" to load the model weights."),bBr=l(),F(m0.$$.fragment),vBr=l(),qr=a("div"),F(r$.$$.fragment),FBr=l(),S3e=a("p"),TBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MBr=l(),pn=a("p"),EBr=o("The model class to instantiate is selected based on the "),R3e=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),ABr=o("pretrained_model_name_or_path"),LBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),yBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),t$=a("ul"),f0=a("li"),I3e=a("strong"),kBr=o("bert"),SBr=o(" \u2014 "),PZ=a("a"),RBr=o("TFBertForNextSentencePrediction"),PBr=o(" (BERT model)"),BBr=l(),g0=a("li"),N3e=a("strong"),IBr=o("mobilebert"),NBr=o(" \u2014 "),BZ=a("a"),qBr=o("TFMobileBertForNextSentencePrediction"),jBr=o(" (MobileBERT model)"),DBr=l(),F(h0.$$.fragment),eQe=l(),Bc=a("h2"),u0=a("a"),q3e=a("span"),F(a$.$$.fragment),GBr=l(),j3e=a("span"),OBr=o("TFAutoModelForTableQuestionAnswering"),oQe=l(),mr=a("div"),F(n$.$$.fragment),VBr=l(),Ic=a("p"),XBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IZ=a("a"),zBr=o("from_pretrained()"),WBr=o(" class method or the "),NZ=a("a"),QBr=o("from_config()"),HBr=o(` class
method.`),UBr=l(),s$=a("p"),JBr=o("This class cannot be instantiated directly using "),D3e=a("code"),YBr=o("__init__()"),KBr=o(" (throws an error)."),ZBr=l(),Ot=a("div"),F(l$.$$.fragment),eIr=l(),G3e=a("p"),oIr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rIr=l(),Nc=a("p"),tIr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),aIr=o("not"),nIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),sIr=o("from_pretrained()"),lIr=o(" to load the model weights."),iIr=l(),F(p0.$$.fragment),dIr=l(),jr=a("div"),F(i$.$$.fragment),cIr=l(),V3e=a("p"),mIr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fIr=l(),_n=a("p"),gIr=o("The model class to instantiate is selected based on the "),X3e=a("code"),hIr=o("model_type"),uIr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),pIr=o("pretrained_model_name_or_path"),_Ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),bIr=o("pretrained_model_name_or_path"),vIr=o(":"),FIr=l(),Q3e=a("ul"),_0=a("li"),H3e=a("strong"),TIr=o("tapas"),MIr=o(" \u2014 "),jZ=a("a"),EIr=o("TFTapasForQuestionAnswering"),CIr=o(" (TAPAS model)"),wIr=l(),F(b0.$$.fragment),rQe=l(),qc=a("h2"),v0=a("a"),U3e=a("span"),F(d$.$$.fragment),AIr=l(),J3e=a("span"),LIr=o("TFAutoModelForTokenClassification"),tQe=l(),fr=a("div"),F(c$.$$.fragment),yIr=l(),jc=a("p"),xIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DZ=a("a"),$Ir=o("from_pretrained()"),kIr=o(" class method or the "),GZ=a("a"),SIr=o("from_config()"),RIr=o(` class
method.`),PIr=l(),m$=a("p"),BIr=o("This class cannot be instantiated directly using "),Y3e=a("code"),IIr=o("__init__()"),NIr=o(" (throws an error)."),qIr=l(),Vt=a("div"),F(f$.$$.fragment),jIr=l(),K3e=a("p"),DIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GIr=l(),Dc=a("p"),OIr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),VIr=o("not"),XIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),zIr=o("from_pretrained()"),WIr=o(" to load the model weights."),QIr=l(),F(F0.$$.fragment),HIr=l(),Dr=a("div"),F(g$.$$.fragment),UIr=l(),e0e=a("p"),JIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YIr=l(),bn=a("p"),KIr=o("The model class to instantiate is selected based on the "),o0e=a("code"),ZIr=o("model_type"),eNr=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),oNr=o("pretrained_model_name_or_path"),rNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),tNr=o("pretrained_model_name_or_path"),aNr=o(":"),nNr=l(),de=a("ul"),T0=a("li"),a0e=a("strong"),sNr=o("albert"),lNr=o(" \u2014 "),VZ=a("a"),iNr=o("TFAlbertForTokenClassification"),dNr=o(" (ALBERT model)"),cNr=l(),M0=a("li"),n0e=a("strong"),mNr=o("bert"),fNr=o(" \u2014 "),XZ=a("a"),gNr=o("TFBertForTokenClassification"),hNr=o(" (BERT model)"),uNr=l(),E0=a("li"),s0e=a("strong"),pNr=o("camembert"),_Nr=o(" \u2014 "),zZ=a("a"),bNr=o("TFCamembertForTokenClassification"),vNr=o(" (CamemBERT model)"),FNr=l(),C0=a("li"),l0e=a("strong"),TNr=o("convbert"),MNr=o(" \u2014 "),WZ=a("a"),ENr=o("TFConvBertForTokenClassification"),CNr=o(" (ConvBERT model)"),wNr=l(),w0=a("li"),i0e=a("strong"),ANr=o("deberta"),LNr=o(" \u2014 "),QZ=a("a"),yNr=o("TFDebertaForTokenClassification"),xNr=o(" (DeBERTa model)"),$Nr=l(),A0=a("li"),d0e=a("strong"),kNr=o("deberta-v2"),SNr=o(" \u2014 "),HZ=a("a"),RNr=o("TFDebertaV2ForTokenClassification"),PNr=o(" (DeBERTa-v2 model)"),BNr=l(),L0=a("li"),c0e=a("strong"),INr=o("distilbert"),NNr=o(" \u2014 "),UZ=a("a"),qNr=o("TFDistilBertForTokenClassification"),jNr=o(" (DistilBERT model)"),DNr=l(),y0=a("li"),m0e=a("strong"),GNr=o("electra"),ONr=o(" \u2014 "),JZ=a("a"),VNr=o("TFElectraForTokenClassification"),XNr=o(" (ELECTRA model)"),zNr=l(),x0=a("li"),f0e=a("strong"),WNr=o("flaubert"),QNr=o(" \u2014 "),YZ=a("a"),HNr=o("TFFlaubertForTokenClassification"),UNr=o(" (FlauBERT model)"),JNr=l(),$0=a("li"),g0e=a("strong"),YNr=o("funnel"),KNr=o(" \u2014 "),KZ=a("a"),ZNr=o("TFFunnelForTokenClassification"),eqr=o(" (Funnel Transformer model)"),oqr=l(),k0=a("li"),h0e=a("strong"),rqr=o("layoutlm"),tqr=o(" \u2014 "),ZZ=a("a"),aqr=o("TFLayoutLMForTokenClassification"),nqr=o(" (LayoutLM model)"),sqr=l(),S0=a("li"),u0e=a("strong"),lqr=o("longformer"),iqr=o(" \u2014 "),eee=a("a"),dqr=o("TFLongformerForTokenClassification"),cqr=o(" (Longformer model)"),mqr=l(),R0=a("li"),p0e=a("strong"),fqr=o("mobilebert"),gqr=o(" \u2014 "),oee=a("a"),hqr=o("TFMobileBertForTokenClassification"),uqr=o(" (MobileBERT model)"),pqr=l(),P0=a("li"),_0e=a("strong"),_qr=o("mpnet"),bqr=o(" \u2014 "),ree=a("a"),vqr=o("TFMPNetForTokenClassification"),Fqr=o(" (MPNet model)"),Tqr=l(),B0=a("li"),b0e=a("strong"),Mqr=o("rembert"),Eqr=o(" \u2014 "),tee=a("a"),Cqr=o("TFRemBertForTokenClassification"),wqr=o(" (RemBERT model)"),Aqr=l(),I0=a("li"),v0e=a("strong"),Lqr=o("roberta"),yqr=o(" \u2014 "),aee=a("a"),xqr=o("TFRobertaForTokenClassification"),$qr=o(" (RoBERTa model)"),kqr=l(),N0=a("li"),F0e=a("strong"),Sqr=o("roformer"),Rqr=o(" \u2014 "),nee=a("a"),Pqr=o("TFRoFormerForTokenClassification"),Bqr=o(" (RoFormer model)"),Iqr=l(),q0=a("li"),T0e=a("strong"),Nqr=o("xlm"),qqr=o(" \u2014 "),see=a("a"),jqr=o("TFXLMForTokenClassification"),Dqr=o(" (XLM model)"),Gqr=l(),j0=a("li"),M0e=a("strong"),Oqr=o("xlm-roberta"),Vqr=o(" \u2014 "),lee=a("a"),Xqr=o("TFXLMRobertaForTokenClassification"),zqr=o(" (XLM-RoBERTa model)"),Wqr=l(),D0=a("li"),E0e=a("strong"),Qqr=o("xlnet"),Hqr=o(" \u2014 "),iee=a("a"),Uqr=o("TFXLNetForTokenClassification"),Jqr=o(" (XLNet model)"),Yqr=l(),F(G0.$$.fragment),aQe=l(),Gc=a("h2"),O0=a("a"),C0e=a("span"),F(h$.$$.fragment),Kqr=l(),w0e=a("span"),Zqr=o("TFAutoModelForQuestionAnswering"),nQe=l(),gr=a("div"),F(u$.$$.fragment),ejr=l(),Oc=a("p"),ojr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dee=a("a"),rjr=o("from_pretrained()"),tjr=o(" class method or the "),cee=a("a"),ajr=o("from_config()"),njr=o(` class
method.`),sjr=l(),p$=a("p"),ljr=o("This class cannot be instantiated directly using "),A0e=a("code"),ijr=o("__init__()"),djr=o(" (throws an error)."),cjr=l(),Xt=a("div"),F(_$.$$.fragment),mjr=l(),L0e=a("p"),fjr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gjr=l(),Vc=a("p"),hjr=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),ujr=o("not"),pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),_jr=o("from_pretrained()"),bjr=o(" to load the model weights."),vjr=l(),F(V0.$$.fragment),Fjr=l(),Gr=a("div"),F(b$.$$.fragment),Tjr=l(),x0e=a("p"),Mjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ejr=l(),vn=a("p"),Cjr=o("The model class to instantiate is selected based on the "),$0e=a("code"),wjr=o("model_type"),Ajr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),Ljr=o("pretrained_model_name_or_path"),yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),xjr=o("pretrained_model_name_or_path"),$jr=o(":"),kjr=l(),ce=a("ul"),X0=a("li"),R0e=a("strong"),Sjr=o("albert"),Rjr=o(" \u2014 "),fee=a("a"),Pjr=o("TFAlbertForQuestionAnswering"),Bjr=o(" (ALBERT model)"),Ijr=l(),z0=a("li"),P0e=a("strong"),Njr=o("bert"),qjr=o(" \u2014 "),gee=a("a"),jjr=o("TFBertForQuestionAnswering"),Djr=o(" (BERT model)"),Gjr=l(),W0=a("li"),B0e=a("strong"),Ojr=o("camembert"),Vjr=o(" \u2014 "),hee=a("a"),Xjr=o("TFCamembertForQuestionAnswering"),zjr=o(" (CamemBERT model)"),Wjr=l(),Q0=a("li"),I0e=a("strong"),Qjr=o("convbert"),Hjr=o(" \u2014 "),uee=a("a"),Ujr=o("TFConvBertForQuestionAnswering"),Jjr=o(" (ConvBERT model)"),Yjr=l(),H0=a("li"),N0e=a("strong"),Kjr=o("deberta"),Zjr=o(" \u2014 "),pee=a("a"),eDr=o("TFDebertaForQuestionAnswering"),oDr=o(" (DeBERTa model)"),rDr=l(),U0=a("li"),q0e=a("strong"),tDr=o("deberta-v2"),aDr=o(" \u2014 "),_ee=a("a"),nDr=o("TFDebertaV2ForQuestionAnswering"),sDr=o(" (DeBERTa-v2 model)"),lDr=l(),J0=a("li"),j0e=a("strong"),iDr=o("distilbert"),dDr=o(" \u2014 "),bee=a("a"),cDr=o("TFDistilBertForQuestionAnswering"),mDr=o(" (DistilBERT model)"),fDr=l(),Y0=a("li"),D0e=a("strong"),gDr=o("electra"),hDr=o(" \u2014 "),vee=a("a"),uDr=o("TFElectraForQuestionAnswering"),pDr=o(" (ELECTRA model)"),_Dr=l(),K0=a("li"),G0e=a("strong"),bDr=o("flaubert"),vDr=o(" \u2014 "),Fee=a("a"),FDr=o("TFFlaubertForQuestionAnsweringSimple"),TDr=o(" (FlauBERT model)"),MDr=l(),Z0=a("li"),O0e=a("strong"),EDr=o("funnel"),CDr=o(" \u2014 "),Tee=a("a"),wDr=o("TFFunnelForQuestionAnswering"),ADr=o(" (Funnel Transformer model)"),LDr=l(),ew=a("li"),V0e=a("strong"),yDr=o("gptj"),xDr=o(" \u2014 "),Mee=a("a"),$Dr=o("TFGPTJForQuestionAnswering"),kDr=o(" (GPT-J model)"),SDr=l(),ow=a("li"),X0e=a("strong"),RDr=o("longformer"),PDr=o(" \u2014 "),Eee=a("a"),BDr=o("TFLongformerForQuestionAnswering"),IDr=o(" (Longformer model)"),NDr=l(),rw=a("li"),z0e=a("strong"),qDr=o("mobilebert"),jDr=o(" \u2014 "),Cee=a("a"),DDr=o("TFMobileBertForQuestionAnswering"),GDr=o(" (MobileBERT model)"),ODr=l(),tw=a("li"),W0e=a("strong"),VDr=o("mpnet"),XDr=o(" \u2014 "),wee=a("a"),zDr=o("TFMPNetForQuestionAnswering"),WDr=o(" (MPNet model)"),QDr=l(),aw=a("li"),Q0e=a("strong"),HDr=o("rembert"),UDr=o(" \u2014 "),Aee=a("a"),JDr=o("TFRemBertForQuestionAnswering"),YDr=o(" (RemBERT model)"),KDr=l(),nw=a("li"),H0e=a("strong"),ZDr=o("roberta"),eGr=o(" \u2014 "),Lee=a("a"),oGr=o("TFRobertaForQuestionAnswering"),rGr=o(" (RoBERTa model)"),tGr=l(),sw=a("li"),U0e=a("strong"),aGr=o("roformer"),nGr=o(" \u2014 "),yee=a("a"),sGr=o("TFRoFormerForQuestionAnswering"),lGr=o(" (RoFormer model)"),iGr=l(),lw=a("li"),J0e=a("strong"),dGr=o("xlm"),cGr=o(" \u2014 "),xee=a("a"),mGr=o("TFXLMForQuestionAnsweringSimple"),fGr=o(" (XLM model)"),gGr=l(),iw=a("li"),Y0e=a("strong"),hGr=o("xlm-roberta"),uGr=o(" \u2014 "),$ee=a("a"),pGr=o("TFXLMRobertaForQuestionAnswering"),_Gr=o(" (XLM-RoBERTa model)"),bGr=l(),dw=a("li"),K0e=a("strong"),vGr=o("xlnet"),FGr=o(" \u2014 "),kee=a("a"),TGr=o("TFXLNetForQuestionAnsweringSimple"),MGr=o(" (XLNet model)"),EGr=l(),F(cw.$$.fragment),sQe=l(),Xc=a("h2"),mw=a("a"),Z0e=a("span"),F(v$.$$.fragment),CGr=l(),ewe=a("span"),wGr=o("TFAutoModelForVision2Seq"),lQe=l(),hr=a("div"),F(F$.$$.fragment),AGr=l(),zc=a("p"),LGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),See=a("a"),yGr=o("from_pretrained()"),xGr=o(" class method or the "),Ree=a("a"),$Gr=o("from_config()"),kGr=o(` class
method.`),SGr=l(),T$=a("p"),RGr=o("This class cannot be instantiated directly using "),owe=a("code"),PGr=o("__init__()"),BGr=o(" (throws an error)."),IGr=l(),zt=a("div"),F(M$.$$.fragment),NGr=l(),rwe=a("p"),qGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jGr=l(),Wc=a("p"),DGr=o(`Note:
Loading a model from its configuration file does `),twe=a("strong"),GGr=o("not"),OGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),VGr=o("from_pretrained()"),XGr=o(" to load the model weights."),zGr=l(),F(fw.$$.fragment),WGr=l(),Or=a("div"),F(E$.$$.fragment),QGr=l(),awe=a("p"),HGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UGr=l(),Fn=a("p"),JGr=o("The model class to instantiate is selected based on the "),nwe=a("code"),YGr=o("model_type"),KGr=o(` property of the config object (either
passed as an argument or loaded from `),swe=a("code"),ZGr=o("pretrained_model_name_or_path"),eOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=a("code"),oOr=o("pretrained_model_name_or_path"),rOr=o(":"),tOr=l(),iwe=a("ul"),gw=a("li"),dwe=a("strong"),aOr=o("vision-encoder-decoder"),nOr=o(" \u2014 "),Bee=a("a"),sOr=o("TFVisionEncoderDecoderModel"),lOr=o(" (Vision Encoder decoder model)"),iOr=l(),F(hw.$$.fragment),iQe=l(),Qc=a("h2"),uw=a("a"),cwe=a("span"),F(C$.$$.fragment),dOr=l(),mwe=a("span"),cOr=o("TFAutoModelForSpeechSeq2Seq"),dQe=l(),ur=a("div"),F(w$.$$.fragment),mOr=l(),Hc=a("p"),fOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iee=a("a"),gOr=o("from_pretrained()"),hOr=o(" class method or the "),Nee=a("a"),uOr=o("from_config()"),pOr=o(` class
method.`),_Or=l(),A$=a("p"),bOr=o("This class cannot be instantiated directly using "),fwe=a("code"),vOr=o("__init__()"),FOr=o(" (throws an error)."),TOr=l(),Wt=a("div"),F(L$.$$.fragment),MOr=l(),gwe=a("p"),EOr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),COr=l(),Uc=a("p"),wOr=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),AOr=o("not"),LOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),yOr=o("from_pretrained()"),xOr=o(" to load the model weights."),$Or=l(),F(pw.$$.fragment),kOr=l(),Vr=a("div"),F(y$.$$.fragment),SOr=l(),uwe=a("p"),ROr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),POr=l(),Tn=a("p"),BOr=o("The model class to instantiate is selected based on the "),pwe=a("code"),IOr=o("model_type"),NOr=o(` property of the config object (either
passed as an argument or loaded from `),_we=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),DOr=o("pretrained_model_name_or_path"),GOr=o(":"),OOr=l(),vwe=a("ul"),_w=a("li"),Fwe=a("strong"),VOr=o("speech_to_text"),XOr=o(" \u2014 "),jee=a("a"),zOr=o("TFSpeech2TextForConditionalGeneration"),WOr=o(" (Speech2Text model)"),QOr=l(),F(bw.$$.fragment),cQe=l(),Jc=a("h2"),vw=a("a"),Twe=a("span"),F(x$.$$.fragment),HOr=l(),Mwe=a("span"),UOr=o("FlaxAutoModel"),mQe=l(),pr=a("div"),F($$.$$.fragment),JOr=l(),Yc=a("p"),YOr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Dee=a("a"),KOr=o("from_pretrained()"),ZOr=o(" class method or the "),Gee=a("a"),eVr=o("from_config()"),oVr=o(` class
method.`),rVr=l(),k$=a("p"),tVr=o("This class cannot be instantiated directly using "),Ewe=a("code"),aVr=o("__init__()"),nVr=o(" (throws an error)."),sVr=l(),Qt=a("div"),F(S$.$$.fragment),lVr=l(),Cwe=a("p"),iVr=o("Instantiates one of the base model classes of the library from a configuration."),dVr=l(),Kc=a("p"),cVr=o(`Note:
Loading a model from its configuration file does `),wwe=a("strong"),mVr=o("not"),fVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=a("a"),gVr=o("from_pretrained()"),hVr=o(" to load the model weights."),uVr=l(),F(Fw.$$.fragment),pVr=l(),Xr=a("div"),F(R$.$$.fragment),_Vr=l(),Awe=a("p"),bVr=o("Instantiate one of the base model classes of the library from a pretrained model."),vVr=l(),Mn=a("p"),FVr=o("The model class to instantiate is selected based on the "),Lwe=a("code"),TVr=o("model_type"),MVr=o(` property of the config object (either
passed as an argument or loaded from `),ywe=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=a("code"),wVr=o("pretrained_model_name_or_path"),AVr=o(":"),LVr=l(),oe=a("ul"),Tw=a("li"),$we=a("strong"),yVr=o("albert"),xVr=o(" \u2014 "),Vee=a("a"),$Vr=o("FlaxAlbertModel"),kVr=o(" (ALBERT model)"),SVr=l(),Mw=a("li"),kwe=a("strong"),RVr=o("bart"),PVr=o(" \u2014 "),Xee=a("a"),BVr=o("FlaxBartModel"),IVr=o(" (BART model)"),NVr=l(),Ew=a("li"),Swe=a("strong"),qVr=o("beit"),jVr=o(" \u2014 "),zee=a("a"),DVr=o("FlaxBeitModel"),GVr=o(" (BEiT model)"),OVr=l(),Cw=a("li"),Rwe=a("strong"),VVr=o("bert"),XVr=o(" \u2014 "),Wee=a("a"),zVr=o("FlaxBertModel"),WVr=o(" (BERT model)"),QVr=l(),ww=a("li"),Pwe=a("strong"),HVr=o("big_bird"),UVr=o(" \u2014 "),Qee=a("a"),JVr=o("FlaxBigBirdModel"),YVr=o(" (BigBird model)"),KVr=l(),Aw=a("li"),Bwe=a("strong"),ZVr=o("blenderbot"),eXr=o(" \u2014 "),Hee=a("a"),oXr=o("FlaxBlenderbotModel"),rXr=o(" (Blenderbot model)"),tXr=l(),Lw=a("li"),Iwe=a("strong"),aXr=o("blenderbot-small"),nXr=o(" \u2014 "),Uee=a("a"),sXr=o("FlaxBlenderbotSmallModel"),lXr=o(" (BlenderbotSmall model)"),iXr=l(),yw=a("li"),Nwe=a("strong"),dXr=o("clip"),cXr=o(" \u2014 "),Jee=a("a"),mXr=o("FlaxCLIPModel"),fXr=o(" (CLIP model)"),gXr=l(),xw=a("li"),qwe=a("strong"),hXr=o("distilbert"),uXr=o(" \u2014 "),Yee=a("a"),pXr=o("FlaxDistilBertModel"),_Xr=o(" (DistilBERT model)"),bXr=l(),$w=a("li"),jwe=a("strong"),vXr=o("electra"),FXr=o(" \u2014 "),Kee=a("a"),TXr=o("FlaxElectraModel"),MXr=o(" (ELECTRA model)"),EXr=l(),kw=a("li"),Dwe=a("strong"),CXr=o("gpt2"),wXr=o(" \u2014 "),Zee=a("a"),AXr=o("FlaxGPT2Model"),LXr=o(" (OpenAI GPT-2 model)"),yXr=l(),Sw=a("li"),Gwe=a("strong"),xXr=o("gpt_neo"),$Xr=o(" \u2014 "),eoe=a("a"),kXr=o("FlaxGPTNeoModel"),SXr=o(" (GPT Neo model)"),RXr=l(),Rw=a("li"),Owe=a("strong"),PXr=o("gptj"),BXr=o(" \u2014 "),ooe=a("a"),IXr=o("FlaxGPTJModel"),NXr=o(" (GPT-J model)"),qXr=l(),Pw=a("li"),Vwe=a("strong"),jXr=o("longt5"),DXr=o(" \u2014 "),roe=a("a"),GXr=o("FlaxLongT5Model"),OXr=o(" (LongT5 model)"),VXr=l(),Bw=a("li"),Xwe=a("strong"),XXr=o("marian"),zXr=o(" \u2014 "),toe=a("a"),WXr=o("FlaxMarianModel"),QXr=o(" (Marian model)"),HXr=l(),Iw=a("li"),zwe=a("strong"),UXr=o("mbart"),JXr=o(" \u2014 "),aoe=a("a"),YXr=o("FlaxMBartModel"),KXr=o(" (mBART model)"),ZXr=l(),Nw=a("li"),Wwe=a("strong"),ezr=o("mt5"),ozr=o(" \u2014 "),noe=a("a"),rzr=o("FlaxMT5Model"),tzr=o(" (MT5 model)"),azr=l(),qw=a("li"),Qwe=a("strong"),nzr=o("opt"),szr=o(" \u2014 "),soe=a("a"),lzr=o("FlaxOPTModel"),izr=o(" (OPT model)"),dzr=l(),jw=a("li"),Hwe=a("strong"),czr=o("pegasus"),mzr=o(" \u2014 "),loe=a("a"),fzr=o("FlaxPegasusModel"),gzr=o(" (Pegasus model)"),hzr=l(),Dw=a("li"),Uwe=a("strong"),uzr=o("roberta"),pzr=o(" \u2014 "),ioe=a("a"),_zr=o("FlaxRobertaModel"),bzr=o(" (RoBERTa model)"),vzr=l(),Gw=a("li"),Jwe=a("strong"),Fzr=o("roformer"),Tzr=o(" \u2014 "),doe=a("a"),Mzr=o("FlaxRoFormerModel"),Ezr=o(" (RoFormer model)"),Czr=l(),Ow=a("li"),Ywe=a("strong"),wzr=o("t5"),Azr=o(" \u2014 "),coe=a("a"),Lzr=o("FlaxT5Model"),yzr=o(" (T5 model)"),xzr=l(),Vw=a("li"),Kwe=a("strong"),$zr=o("vision-text-dual-encoder"),kzr=o(" \u2014 "),moe=a("a"),Szr=o("FlaxVisionTextDualEncoderModel"),Rzr=o(" (VisionTextDualEncoder model)"),Pzr=l(),Xw=a("li"),Zwe=a("strong"),Bzr=o("vit"),Izr=o(" \u2014 "),foe=a("a"),Nzr=o("FlaxViTModel"),qzr=o(" (ViT model)"),jzr=l(),zw=a("li"),e6e=a("strong"),Dzr=o("wav2vec2"),Gzr=o(" \u2014 "),goe=a("a"),Ozr=o("FlaxWav2Vec2Model"),Vzr=o(" (Wav2Vec2 model)"),Xzr=l(),Ww=a("li"),o6e=a("strong"),zzr=o("xglm"),Wzr=o(" \u2014 "),hoe=a("a"),Qzr=o("FlaxXGLMModel"),Hzr=o(" (XGLM model)"),Uzr=l(),Qw=a("li"),r6e=a("strong"),Jzr=o("xlm-roberta"),Yzr=o(" \u2014 "),uoe=a("a"),Kzr=o("FlaxXLMRobertaModel"),Zzr=o(" (XLM-RoBERTa model)"),eWr=l(),F(Hw.$$.fragment),fQe=l(),Zc=a("h2"),Uw=a("a"),t6e=a("span"),F(P$.$$.fragment),oWr=l(),a6e=a("span"),rWr=o("FlaxAutoModelForCausalLM"),gQe=l(),_r=a("div"),F(B$.$$.fragment),tWr=l(),em=a("p"),aWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),poe=a("a"),nWr=o("from_pretrained()"),sWr=o(" class method or the "),_oe=a("a"),lWr=o("from_config()"),iWr=o(` class
method.`),dWr=l(),I$=a("p"),cWr=o("This class cannot be instantiated directly using "),n6e=a("code"),mWr=o("__init__()"),fWr=o(" (throws an error)."),gWr=l(),Ht=a("div"),F(N$.$$.fragment),hWr=l(),s6e=a("p"),uWr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pWr=l(),om=a("p"),_Wr=o(`Note:
Loading a model from its configuration file does `),l6e=a("strong"),bWr=o("not"),vWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),FWr=o("from_pretrained()"),TWr=o(" to load the model weights."),MWr=l(),F(Jw.$$.fragment),EWr=l(),zr=a("div"),F(q$.$$.fragment),CWr=l(),i6e=a("p"),wWr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AWr=l(),En=a("p"),LWr=o("The model class to instantiate is selected based on the "),d6e=a("code"),yWr=o("model_type"),xWr=o(` property of the config object (either
passed as an argument or loaded from `),c6e=a("code"),$Wr=o("pretrained_model_name_or_path"),kWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),SWr=o("pretrained_model_name_or_path"),RWr=o(":"),PWr=l(),xe=a("ul"),Yw=a("li"),f6e=a("strong"),BWr=o("bart"),IWr=o(" \u2014 "),voe=a("a"),NWr=o("FlaxBartForCausalLM"),qWr=o(" (BART model)"),jWr=l(),Kw=a("li"),g6e=a("strong"),DWr=o("bert"),GWr=o(" \u2014 "),Foe=a("a"),OWr=o("FlaxBertForCausalLM"),VWr=o(" (BERT model)"),XWr=l(),Zw=a("li"),h6e=a("strong"),zWr=o("big_bird"),WWr=o(" \u2014 "),Toe=a("a"),QWr=o("FlaxBigBirdForCausalLM"),HWr=o(" (BigBird model)"),UWr=l(),e6=a("li"),u6e=a("strong"),JWr=o("electra"),YWr=o(" \u2014 "),Moe=a("a"),KWr=o("FlaxElectraForCausalLM"),ZWr=o(" (ELECTRA model)"),eQr=l(),o6=a("li"),p6e=a("strong"),oQr=o("gpt2"),rQr=o(" \u2014 "),Eoe=a("a"),tQr=o("FlaxGPT2LMHeadModel"),aQr=o(" (OpenAI GPT-2 model)"),nQr=l(),r6=a("li"),_6e=a("strong"),sQr=o("gpt_neo"),lQr=o(" \u2014 "),Coe=a("a"),iQr=o("FlaxGPTNeoForCausalLM"),dQr=o(" (GPT Neo model)"),cQr=l(),t6=a("li"),b6e=a("strong"),mQr=o("gptj"),fQr=o(" \u2014 "),woe=a("a"),gQr=o("FlaxGPTJForCausalLM"),hQr=o(" (GPT-J model)"),uQr=l(),a6=a("li"),v6e=a("strong"),pQr=o("opt"),_Qr=o(" \u2014 "),Aoe=a("a"),bQr=o("FlaxOPTForCausalLM"),vQr=o(" (OPT model)"),FQr=l(),n6=a("li"),F6e=a("strong"),TQr=o("roberta"),MQr=o(" \u2014 "),Loe=a("a"),EQr=o("FlaxRobertaForCausalLM"),CQr=o(" (RoBERTa model)"),wQr=l(),s6=a("li"),T6e=a("strong"),AQr=o("xglm"),LQr=o(" \u2014 "),yoe=a("a"),yQr=o("FlaxXGLMForCausalLM"),xQr=o(" (XGLM model)"),$Qr=l(),F(l6.$$.fragment),hQe=l(),rm=a("h2"),i6=a("a"),M6e=a("span"),F(j$.$$.fragment),kQr=l(),E6e=a("span"),SQr=o("FlaxAutoModelForPreTraining"),uQe=l(),br=a("div"),F(D$.$$.fragment),RQr=l(),tm=a("p"),PQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xoe=a("a"),BQr=o("from_pretrained()"),IQr=o(" class method or the "),$oe=a("a"),NQr=o("from_config()"),qQr=o(` class
method.`),jQr=l(),G$=a("p"),DQr=o("This class cannot be instantiated directly using "),C6e=a("code"),GQr=o("__init__()"),OQr=o(" (throws an error)."),VQr=l(),Ut=a("div"),F(O$.$$.fragment),XQr=l(),w6e=a("p"),zQr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WQr=l(),am=a("p"),QQr=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),HQr=o("not"),UQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("a"),JQr=o("from_pretrained()"),YQr=o(" to load the model weights."),KQr=l(),F(d6.$$.fragment),ZQr=l(),Wr=a("div"),F(V$.$$.fragment),eHr=l(),L6e=a("p"),oHr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rHr=l(),Cn=a("p"),tHr=o("The model class to instantiate is selected based on the "),y6e=a("code"),aHr=o("model_type"),nHr=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),sHr=o("pretrained_model_name_or_path"),lHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),iHr=o("pretrained_model_name_or_path"),dHr=o(":"),cHr=l(),Ee=a("ul"),c6=a("li"),k6e=a("strong"),mHr=o("albert"),fHr=o(" \u2014 "),Soe=a("a"),gHr=o("FlaxAlbertForPreTraining"),hHr=o(" (ALBERT model)"),uHr=l(),m6=a("li"),S6e=a("strong"),pHr=o("bart"),_Hr=o(" \u2014 "),Roe=a("a"),bHr=o("FlaxBartForConditionalGeneration"),vHr=o(" (BART model)"),FHr=l(),f6=a("li"),R6e=a("strong"),THr=o("bert"),MHr=o(" \u2014 "),Poe=a("a"),EHr=o("FlaxBertForPreTraining"),CHr=o(" (BERT model)"),wHr=l(),g6=a("li"),P6e=a("strong"),AHr=o("big_bird"),LHr=o(" \u2014 "),Boe=a("a"),yHr=o("FlaxBigBirdForPreTraining"),xHr=o(" (BigBird model)"),$Hr=l(),h6=a("li"),B6e=a("strong"),kHr=o("electra"),SHr=o(" \u2014 "),Ioe=a("a"),RHr=o("FlaxElectraForPreTraining"),PHr=o(" (ELECTRA model)"),BHr=l(),u6=a("li"),I6e=a("strong"),IHr=o("longt5"),NHr=o(" \u2014 "),Noe=a("a"),qHr=o("FlaxLongT5ForConditionalGeneration"),jHr=o(" (LongT5 model)"),DHr=l(),p6=a("li"),N6e=a("strong"),GHr=o("mbart"),OHr=o(" \u2014 "),qoe=a("a"),VHr=o("FlaxMBartForConditionalGeneration"),XHr=o(" (mBART model)"),zHr=l(),_6=a("li"),q6e=a("strong"),WHr=o("mt5"),QHr=o(" \u2014 "),joe=a("a"),HHr=o("FlaxMT5ForConditionalGeneration"),UHr=o(" (MT5 model)"),JHr=l(),b6=a("li"),j6e=a("strong"),YHr=o("roberta"),KHr=o(" \u2014 "),Doe=a("a"),ZHr=o("FlaxRobertaForMaskedLM"),eUr=o(" (RoBERTa model)"),oUr=l(),v6=a("li"),D6e=a("strong"),rUr=o("roformer"),tUr=o(" \u2014 "),Goe=a("a"),aUr=o("FlaxRoFormerForMaskedLM"),nUr=o(" (RoFormer model)"),sUr=l(),F6=a("li"),G6e=a("strong"),lUr=o("t5"),iUr=o(" \u2014 "),Ooe=a("a"),dUr=o("FlaxT5ForConditionalGeneration"),cUr=o(" (T5 model)"),mUr=l(),T6=a("li"),O6e=a("strong"),fUr=o("wav2vec2"),gUr=o(" \u2014 "),Voe=a("a"),hUr=o("FlaxWav2Vec2ForPreTraining"),uUr=o(" (Wav2Vec2 model)"),pUr=l(),M6=a("li"),V6e=a("strong"),_Ur=o("xlm-roberta"),bUr=o(" \u2014 "),Xoe=a("a"),vUr=o("FlaxXLMRobertaForMaskedLM"),FUr=o(" (XLM-RoBERTa model)"),TUr=l(),F(E6.$$.fragment),pQe=l(),nm=a("h2"),C6=a("a"),X6e=a("span"),F(X$.$$.fragment),MUr=l(),z6e=a("span"),EUr=o("FlaxAutoModelForMaskedLM"),_Qe=l(),vr=a("div"),F(z$.$$.fragment),CUr=l(),sm=a("p"),wUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zoe=a("a"),AUr=o("from_pretrained()"),LUr=o(" class method or the "),Woe=a("a"),yUr=o("from_config()"),xUr=o(` class
method.`),$Ur=l(),W$=a("p"),kUr=o("This class cannot be instantiated directly using "),W6e=a("code"),SUr=o("__init__()"),RUr=o(" (throws an error)."),PUr=l(),Jt=a("div"),F(Q$.$$.fragment),BUr=l(),Q6e=a("p"),IUr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NUr=l(),lm=a("p"),qUr=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),jUr=o("not"),DUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=a("a"),GUr=o("from_pretrained()"),OUr=o(" to load the model weights."),VUr=l(),F(w6.$$.fragment),XUr=l(),Qr=a("div"),F(H$.$$.fragment),zUr=l(),U6e=a("p"),WUr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QUr=l(),wn=a("p"),HUr=o("The model class to instantiate is selected based on the "),J6e=a("code"),UUr=o("model_type"),JUr=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),YUr=o("pretrained_model_name_or_path"),KUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),ZUr=o("pretrained_model_name_or_path"),eJr=o(":"),oJr=l(),$e=a("ul"),A6=a("li"),Z6e=a("strong"),rJr=o("albert"),tJr=o(" \u2014 "),Hoe=a("a"),aJr=o("FlaxAlbertForMaskedLM"),nJr=o(" (ALBERT model)"),sJr=l(),L6=a("li"),eAe=a("strong"),lJr=o("bart"),iJr=o(" \u2014 "),Uoe=a("a"),dJr=o("FlaxBartForConditionalGeneration"),cJr=o(" (BART model)"),mJr=l(),y6=a("li"),oAe=a("strong"),fJr=o("bert"),gJr=o(" \u2014 "),Joe=a("a"),hJr=o("FlaxBertForMaskedLM"),uJr=o(" (BERT model)"),pJr=l(),x6=a("li"),rAe=a("strong"),_Jr=o("big_bird"),bJr=o(" \u2014 "),Yoe=a("a"),vJr=o("FlaxBigBirdForMaskedLM"),FJr=o(" (BigBird model)"),TJr=l(),$6=a("li"),tAe=a("strong"),MJr=o("distilbert"),EJr=o(" \u2014 "),Koe=a("a"),CJr=o("FlaxDistilBertForMaskedLM"),wJr=o(" (DistilBERT model)"),AJr=l(),k6=a("li"),aAe=a("strong"),LJr=o("electra"),yJr=o(" \u2014 "),Zoe=a("a"),xJr=o("FlaxElectraForMaskedLM"),$Jr=o(" (ELECTRA model)"),kJr=l(),S6=a("li"),nAe=a("strong"),SJr=o("mbart"),RJr=o(" \u2014 "),ere=a("a"),PJr=o("FlaxMBartForConditionalGeneration"),BJr=o(" (mBART model)"),IJr=l(),R6=a("li"),sAe=a("strong"),NJr=o("roberta"),qJr=o(" \u2014 "),ore=a("a"),jJr=o("FlaxRobertaForMaskedLM"),DJr=o(" (RoBERTa model)"),GJr=l(),P6=a("li"),lAe=a("strong"),OJr=o("roformer"),VJr=o(" \u2014 "),rre=a("a"),XJr=o("FlaxRoFormerForMaskedLM"),zJr=o(" (RoFormer model)"),WJr=l(),B6=a("li"),iAe=a("strong"),QJr=o("xlm-roberta"),HJr=o(" \u2014 "),tre=a("a"),UJr=o("FlaxXLMRobertaForMaskedLM"),JJr=o(" (XLM-RoBERTa model)"),YJr=l(),F(I6.$$.fragment),bQe=l(),im=a("h2"),N6=a("a"),dAe=a("span"),F(U$.$$.fragment),KJr=l(),cAe=a("span"),ZJr=o("FlaxAutoModelForSeq2SeqLM"),vQe=l(),Fr=a("div"),F(J$.$$.fragment),eYr=l(),dm=a("p"),oYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),are=a("a"),rYr=o("from_pretrained()"),tYr=o(" class method or the "),nre=a("a"),aYr=o("from_config()"),nYr=o(` class
method.`),sYr=l(),Y$=a("p"),lYr=o("This class cannot be instantiated directly using "),mAe=a("code"),iYr=o("__init__()"),dYr=o(" (throws an error)."),cYr=l(),Yt=a("div"),F(K$.$$.fragment),mYr=l(),fAe=a("p"),fYr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gYr=l(),cm=a("p"),hYr=o(`Note:
Loading a model from its configuration file does `),gAe=a("strong"),uYr=o("not"),pYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),_Yr=o("from_pretrained()"),bYr=o(" to load the model weights."),vYr=l(),F(q6.$$.fragment),FYr=l(),Hr=a("div"),F(Z$.$$.fragment),TYr=l(),hAe=a("p"),MYr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EYr=l(),An=a("p"),CYr=o("The model class to instantiate is selected based on the "),uAe=a("code"),wYr=o("model_type"),AYr=o(` property of the config object (either
passed as an argument or loaded from `),pAe=a("code"),LYr=o("pretrained_model_name_or_path"),yYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ae=a("code"),xYr=o("pretrained_model_name_or_path"),$Yr=o(":"),kYr=l(),ke=a("ul"),j6=a("li"),bAe=a("strong"),SYr=o("bart"),RYr=o(" \u2014 "),lre=a("a"),PYr=o("FlaxBartForConditionalGeneration"),BYr=o(" (BART model)"),IYr=l(),D6=a("li"),vAe=a("strong"),NYr=o("blenderbot"),qYr=o(" \u2014 "),ire=a("a"),jYr=o("FlaxBlenderbotForConditionalGeneration"),DYr=o(" (Blenderbot model)"),GYr=l(),G6=a("li"),FAe=a("strong"),OYr=o("blenderbot-small"),VYr=o(" \u2014 "),dre=a("a"),XYr=o("FlaxBlenderbotSmallForConditionalGeneration"),zYr=o(" (BlenderbotSmall model)"),WYr=l(),O6=a("li"),TAe=a("strong"),QYr=o("encoder-decoder"),HYr=o(" \u2014 "),cre=a("a"),UYr=o("FlaxEncoderDecoderModel"),JYr=o(" (Encoder decoder model)"),YYr=l(),V6=a("li"),MAe=a("strong"),KYr=o("longt5"),ZYr=o(" \u2014 "),mre=a("a"),eKr=o("FlaxLongT5ForConditionalGeneration"),oKr=o(" (LongT5 model)"),rKr=l(),X6=a("li"),EAe=a("strong"),tKr=o("marian"),aKr=o(" \u2014 "),fre=a("a"),nKr=o("FlaxMarianMTModel"),sKr=o(" (Marian model)"),lKr=l(),z6=a("li"),CAe=a("strong"),iKr=o("mbart"),dKr=o(" \u2014 "),gre=a("a"),cKr=o("FlaxMBartForConditionalGeneration"),mKr=o(" (mBART model)"),fKr=l(),W6=a("li"),wAe=a("strong"),gKr=o("mt5"),hKr=o(" \u2014 "),hre=a("a"),uKr=o("FlaxMT5ForConditionalGeneration"),pKr=o(" (MT5 model)"),_Kr=l(),Q6=a("li"),AAe=a("strong"),bKr=o("pegasus"),vKr=o(" \u2014 "),ure=a("a"),FKr=o("FlaxPegasusForConditionalGeneration"),TKr=o(" (Pegasus model)"),MKr=l(),H6=a("li"),LAe=a("strong"),EKr=o("t5"),CKr=o(" \u2014 "),pre=a("a"),wKr=o("FlaxT5ForConditionalGeneration"),AKr=o(" (T5 model)"),LKr=l(),F(U6.$$.fragment),FQe=l(),mm=a("h2"),J6=a("a"),yAe=a("span"),F(ek.$$.fragment),yKr=l(),xAe=a("span"),xKr=o("FlaxAutoModelForSequenceClassification"),TQe=l(),Tr=a("div"),F(ok.$$.fragment),$Kr=l(),fm=a("p"),kKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_re=a("a"),SKr=o("from_pretrained()"),RKr=o(" class method or the "),bre=a("a"),PKr=o("from_config()"),BKr=o(` class
method.`),IKr=l(),rk=a("p"),NKr=o("This class cannot be instantiated directly using "),$Ae=a("code"),qKr=o("__init__()"),jKr=o(" (throws an error)."),DKr=l(),Kt=a("div"),F(tk.$$.fragment),GKr=l(),kAe=a("p"),OKr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VKr=l(),gm=a("p"),XKr=o(`Note:
Loading a model from its configuration file does `),SAe=a("strong"),zKr=o("not"),WKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),QKr=o("from_pretrained()"),HKr=o(" to load the model weights."),UKr=l(),F(Y6.$$.fragment),JKr=l(),Ur=a("div"),F(ak.$$.fragment),YKr=l(),RAe=a("p"),KKr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZKr=l(),Ln=a("p"),eZr=o("The model class to instantiate is selected based on the "),PAe=a("code"),oZr=o("model_type"),rZr=o(` property of the config object (either
passed as an argument or loaded from `),BAe=a("code"),tZr=o("pretrained_model_name_or_path"),aZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=a("code"),nZr=o("pretrained_model_name_or_path"),sZr=o(":"),lZr=l(),Se=a("ul"),K6=a("li"),NAe=a("strong"),iZr=o("albert"),dZr=o(" \u2014 "),Fre=a("a"),cZr=o("FlaxAlbertForSequenceClassification"),mZr=o(" (ALBERT model)"),fZr=l(),Z6=a("li"),qAe=a("strong"),gZr=o("bart"),hZr=o(" \u2014 "),Tre=a("a"),uZr=o("FlaxBartForSequenceClassification"),pZr=o(" (BART model)"),_Zr=l(),eA=a("li"),jAe=a("strong"),bZr=o("bert"),vZr=o(" \u2014 "),Mre=a("a"),FZr=o("FlaxBertForSequenceClassification"),TZr=o(" (BERT model)"),MZr=l(),oA=a("li"),DAe=a("strong"),EZr=o("big_bird"),CZr=o(" \u2014 "),Ere=a("a"),wZr=o("FlaxBigBirdForSequenceClassification"),AZr=o(" (BigBird model)"),LZr=l(),rA=a("li"),GAe=a("strong"),yZr=o("distilbert"),xZr=o(" \u2014 "),Cre=a("a"),$Zr=o("FlaxDistilBertForSequenceClassification"),kZr=o(" (DistilBERT model)"),SZr=l(),tA=a("li"),OAe=a("strong"),RZr=o("electra"),PZr=o(" \u2014 "),wre=a("a"),BZr=o("FlaxElectraForSequenceClassification"),IZr=o(" (ELECTRA model)"),NZr=l(),aA=a("li"),VAe=a("strong"),qZr=o("mbart"),jZr=o(" \u2014 "),Are=a("a"),DZr=o("FlaxMBartForSequenceClassification"),GZr=o(" (mBART model)"),OZr=l(),nA=a("li"),XAe=a("strong"),VZr=o("roberta"),XZr=o(" \u2014 "),Lre=a("a"),zZr=o("FlaxRobertaForSequenceClassification"),WZr=o(" (RoBERTa model)"),QZr=l(),sA=a("li"),zAe=a("strong"),HZr=o("roformer"),UZr=o(" \u2014 "),yre=a("a"),JZr=o("FlaxRoFormerForSequenceClassification"),YZr=o(" (RoFormer model)"),KZr=l(),lA=a("li"),WAe=a("strong"),ZZr=o("xlm-roberta"),eet=o(" \u2014 "),xre=a("a"),oet=o("FlaxXLMRobertaForSequenceClassification"),ret=o(" (XLM-RoBERTa model)"),tet=l(),F(iA.$$.fragment),MQe=l(),hm=a("h2"),dA=a("a"),QAe=a("span"),F(nk.$$.fragment),aet=l(),HAe=a("span"),net=o("FlaxAutoModelForQuestionAnswering"),EQe=l(),Mr=a("div"),F(sk.$$.fragment),set=l(),um=a("p"),iet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$re=a("a"),det=o("from_pretrained()"),cet=o(" class method or the "),kre=a("a"),met=o("from_config()"),fet=o(` class
method.`),get=l(),lk=a("p"),het=o("This class cannot be instantiated directly using "),UAe=a("code"),uet=o("__init__()"),pet=o(" (throws an error)."),_et=l(),Zt=a("div"),F(ik.$$.fragment),bet=l(),JAe=a("p"),vet=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fet=l(),pm=a("p"),Tet=o(`Note:
Loading a model from its configuration file does `),YAe=a("strong"),Met=o("not"),Eet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),Cet=o("from_pretrained()"),wet=o(" to load the model weights."),Aet=l(),F(cA.$$.fragment),Let=l(),Jr=a("div"),F(dk.$$.fragment),yet=l(),KAe=a("p"),xet=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$et=l(),yn=a("p"),ket=o("The model class to instantiate is selected based on the "),ZAe=a("code"),Set=o("model_type"),Ret=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),Pet=o("pretrained_model_name_or_path"),Bet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),Iet=o("pretrained_model_name_or_path"),Net=o(":"),qet=l(),Re=a("ul"),mA=a("li"),r7e=a("strong"),jet=o("albert"),Det=o(" \u2014 "),Rre=a("a"),Get=o("FlaxAlbertForQuestionAnswering"),Oet=o(" (ALBERT model)"),Vet=l(),fA=a("li"),t7e=a("strong"),Xet=o("bart"),zet=o(" \u2014 "),Pre=a("a"),Wet=o("FlaxBartForQuestionAnswering"),Qet=o(" (BART model)"),Het=l(),gA=a("li"),a7e=a("strong"),Uet=o("bert"),Jet=o(" \u2014 "),Bre=a("a"),Yet=o("FlaxBertForQuestionAnswering"),Ket=o(" (BERT model)"),Zet=l(),hA=a("li"),n7e=a("strong"),eot=o("big_bird"),oot=o(" \u2014 "),Ire=a("a"),rot=o("FlaxBigBirdForQuestionAnswering"),tot=o(" (BigBird model)"),aot=l(),uA=a("li"),s7e=a("strong"),not=o("distilbert"),sot=o(" \u2014 "),Nre=a("a"),lot=o("FlaxDistilBertForQuestionAnswering"),iot=o(" (DistilBERT model)"),dot=l(),pA=a("li"),l7e=a("strong"),cot=o("electra"),mot=o(" \u2014 "),qre=a("a"),fot=o("FlaxElectraForQuestionAnswering"),got=o(" (ELECTRA model)"),hot=l(),_A=a("li"),i7e=a("strong"),uot=o("mbart"),pot=o(" \u2014 "),jre=a("a"),_ot=o("FlaxMBartForQuestionAnswering"),bot=o(" (mBART model)"),vot=l(),bA=a("li"),d7e=a("strong"),Fot=o("roberta"),Tot=o(" \u2014 "),Dre=a("a"),Mot=o("FlaxRobertaForQuestionAnswering"),Eot=o(" (RoBERTa model)"),Cot=l(),vA=a("li"),c7e=a("strong"),wot=o("roformer"),Aot=o(" \u2014 "),Gre=a("a"),Lot=o("FlaxRoFormerForQuestionAnswering"),yot=o(" (RoFormer model)"),xot=l(),FA=a("li"),m7e=a("strong"),$ot=o("xlm-roberta"),kot=o(" \u2014 "),Ore=a("a"),Sot=o("FlaxXLMRobertaForQuestionAnswering"),Rot=o(" (XLM-RoBERTa model)"),Pot=l(),F(TA.$$.fragment),CQe=l(),_m=a("h2"),MA=a("a"),f7e=a("span"),F(ck.$$.fragment),Bot=l(),g7e=a("span"),Iot=o("FlaxAutoModelForTokenClassification"),wQe=l(),Er=a("div"),F(mk.$$.fragment),Not=l(),bm=a("p"),qot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vre=a("a"),jot=o("from_pretrained()"),Dot=o(" class method or the "),Xre=a("a"),Got=o("from_config()"),Oot=o(` class
method.`),Vot=l(),fk=a("p"),Xot=o("This class cannot be instantiated directly using "),h7e=a("code"),zot=o("__init__()"),Wot=o(" (throws an error)."),Qot=l(),ea=a("div"),F(gk.$$.fragment),Hot=l(),u7e=a("p"),Uot=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jot=l(),vm=a("p"),Yot=o(`Note:
Loading a model from its configuration file does `),p7e=a("strong"),Kot=o("not"),Zot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=a("a"),ert=o("from_pretrained()"),ort=o(" to load the model weights."),rrt=l(),F(EA.$$.fragment),trt=l(),Yr=a("div"),F(hk.$$.fragment),art=l(),_7e=a("p"),nrt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),srt=l(),xn=a("p"),lrt=o("The model class to instantiate is selected based on the "),b7e=a("code"),irt=o("model_type"),drt=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),crt=o("pretrained_model_name_or_path"),mrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),frt=o("pretrained_model_name_or_path"),grt=o(":"),hrt=l(),Xe=a("ul"),CA=a("li"),T7e=a("strong"),urt=o("albert"),prt=o(" \u2014 "),Wre=a("a"),_rt=o("FlaxAlbertForTokenClassification"),brt=o(" (ALBERT model)"),vrt=l(),wA=a("li"),M7e=a("strong"),Frt=o("bert"),Trt=o(" \u2014 "),Qre=a("a"),Mrt=o("FlaxBertForTokenClassification"),Ert=o(" (BERT model)"),Crt=l(),AA=a("li"),E7e=a("strong"),wrt=o("big_bird"),Art=o(" \u2014 "),Hre=a("a"),Lrt=o("FlaxBigBirdForTokenClassification"),yrt=o(" (BigBird model)"),xrt=l(),LA=a("li"),C7e=a("strong"),$rt=o("distilbert"),krt=o(" \u2014 "),Ure=a("a"),Srt=o("FlaxDistilBertForTokenClassification"),Rrt=o(" (DistilBERT model)"),Prt=l(),yA=a("li"),w7e=a("strong"),Brt=o("electra"),Irt=o(" \u2014 "),Jre=a("a"),Nrt=o("FlaxElectraForTokenClassification"),qrt=o(" (ELECTRA model)"),jrt=l(),xA=a("li"),A7e=a("strong"),Drt=o("roberta"),Grt=o(" \u2014 "),Yre=a("a"),Ort=o("FlaxRobertaForTokenClassification"),Vrt=o(" (RoBERTa model)"),Xrt=l(),$A=a("li"),L7e=a("strong"),zrt=o("roformer"),Wrt=o(" \u2014 "),Kre=a("a"),Qrt=o("FlaxRoFormerForTokenClassification"),Hrt=o(" (RoFormer model)"),Urt=l(),kA=a("li"),y7e=a("strong"),Jrt=o("xlm-roberta"),Yrt=o(" \u2014 "),Zre=a("a"),Krt=o("FlaxXLMRobertaForTokenClassification"),Zrt=o(" (XLM-RoBERTa model)"),ett=l(),F(SA.$$.fragment),AQe=l(),Fm=a("h2"),RA=a("a"),x7e=a("span"),F(uk.$$.fragment),ott=l(),$7e=a("span"),rtt=o("FlaxAutoModelForMultipleChoice"),LQe=l(),Cr=a("div"),F(pk.$$.fragment),ttt=l(),Tm=a("p"),att=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ete=a("a"),ntt=o("from_pretrained()"),stt=o(" class method or the "),ote=a("a"),ltt=o("from_config()"),itt=o(` class
method.`),dtt=l(),_k=a("p"),ctt=o("This class cannot be instantiated directly using "),k7e=a("code"),mtt=o("__init__()"),ftt=o(" (throws an error)."),gtt=l(),oa=a("div"),F(bk.$$.fragment),htt=l(),S7e=a("p"),utt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ptt=l(),Mm=a("p"),_tt=o(`Note:
Loading a model from its configuration file does `),R7e=a("strong"),btt=o("not"),vtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=a("a"),Ftt=o("from_pretrained()"),Ttt=o(" to load the model weights."),Mtt=l(),F(PA.$$.fragment),Ett=l(),Kr=a("div"),F(vk.$$.fragment),Ctt=l(),P7e=a("p"),wtt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Att=l(),$n=a("p"),Ltt=o("The model class to instantiate is selected based on the "),B7e=a("code"),ytt=o("model_type"),xtt=o(` property of the config object (either
passed as an argument or loaded from `),I7e=a("code"),$tt=o("pretrained_model_name_or_path"),ktt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=a("code"),Stt=o("pretrained_model_name_or_path"),Rtt=o(":"),Ptt=l(),ze=a("ul"),BA=a("li"),q7e=a("strong"),Btt=o("albert"),Itt=o(" \u2014 "),tte=a("a"),Ntt=o("FlaxAlbertForMultipleChoice"),qtt=o(" (ALBERT model)"),jtt=l(),IA=a("li"),j7e=a("strong"),Dtt=o("bert"),Gtt=o(" \u2014 "),ate=a("a"),Ott=o("FlaxBertForMultipleChoice"),Vtt=o(" (BERT model)"),Xtt=l(),NA=a("li"),D7e=a("strong"),ztt=o("big_bird"),Wtt=o(" \u2014 "),nte=a("a"),Qtt=o("FlaxBigBirdForMultipleChoice"),Htt=o(" (BigBird model)"),Utt=l(),qA=a("li"),G7e=a("strong"),Jtt=o("distilbert"),Ytt=o(" \u2014 "),ste=a("a"),Ktt=o("FlaxDistilBertForMultipleChoice"),Ztt=o(" (DistilBERT model)"),eat=l(),jA=a("li"),O7e=a("strong"),oat=o("electra"),rat=o(" \u2014 "),lte=a("a"),tat=o("FlaxElectraForMultipleChoice"),aat=o(" (ELECTRA model)"),nat=l(),DA=a("li"),V7e=a("strong"),sat=o("roberta"),lat=o(" \u2014 "),ite=a("a"),iat=o("FlaxRobertaForMultipleChoice"),dat=o(" (RoBERTa model)"),cat=l(),GA=a("li"),X7e=a("strong"),mat=o("roformer"),fat=o(" \u2014 "),dte=a("a"),gat=o("FlaxRoFormerForMultipleChoice"),hat=o(" (RoFormer model)"),uat=l(),OA=a("li"),z7e=a("strong"),pat=o("xlm-roberta"),_at=o(" \u2014 "),cte=a("a"),bat=o("FlaxXLMRobertaForMultipleChoice"),vat=o(" (XLM-RoBERTa model)"),Fat=l(),F(VA.$$.fragment),yQe=l(),Em=a("h2"),XA=a("a"),W7e=a("span"),F(Fk.$$.fragment),Tat=l(),Q7e=a("span"),Mat=o("FlaxAutoModelForNextSentencePrediction"),xQe=l(),wr=a("div"),F(Tk.$$.fragment),Eat=l(),Cm=a("p"),Cat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mte=a("a"),wat=o("from_pretrained()"),Aat=o(" class method or the "),fte=a("a"),Lat=o("from_config()"),yat=o(` class
method.`),xat=l(),Mk=a("p"),$at=o("This class cannot be instantiated directly using "),H7e=a("code"),kat=o("__init__()"),Sat=o(" (throws an error)."),Rat=l(),ra=a("div"),F(Ek.$$.fragment),Pat=l(),U7e=a("p"),Bat=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Iat=l(),wm=a("p"),Nat=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),qat=o("not"),jat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=a("a"),Dat=o("from_pretrained()"),Gat=o(" to load the model weights."),Oat=l(),F(zA.$$.fragment),Vat=l(),Zr=a("div"),F(Ck.$$.fragment),Xat=l(),Y7e=a("p"),zat=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wat=l(),kn=a("p"),Qat=o("The model class to instantiate is selected based on the "),K7e=a("code"),Hat=o("model_type"),Uat=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),Jat=o("pretrained_model_name_or_path"),Yat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eLe=a("code"),Kat=o("pretrained_model_name_or_path"),Zat=o(":"),ent=l(),oLe=a("ul"),WA=a("li"),rLe=a("strong"),ont=o("bert"),rnt=o(" \u2014 "),hte=a("a"),tnt=o("FlaxBertForNextSentencePrediction"),ant=o(" (BERT model)"),nnt=l(),F(QA.$$.fragment),$Qe=l(),Am=a("h2"),HA=a("a"),tLe=a("span"),F(wk.$$.fragment),snt=l(),aLe=a("span"),lnt=o("FlaxAutoModelForImageClassification"),kQe=l(),Ar=a("div"),F(Ak.$$.fragment),int=l(),Lm=a("p"),dnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ute=a("a"),cnt=o("from_pretrained()"),mnt=o(" class method or the "),pte=a("a"),fnt=o("from_config()"),gnt=o(` class
method.`),hnt=l(),Lk=a("p"),unt=o("This class cannot be instantiated directly using "),nLe=a("code"),pnt=o("__init__()"),_nt=o(" (throws an error)."),bnt=l(),ta=a("div"),F(yk.$$.fragment),vnt=l(),sLe=a("p"),Fnt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tnt=l(),ym=a("p"),Mnt=o(`Note:
Loading a model from its configuration file does `),lLe=a("strong"),Ent=o("not"),Cnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=a("a"),wnt=o("from_pretrained()"),Ant=o(" to load the model weights."),Lnt=l(),F(UA.$$.fragment),ynt=l(),et=a("div"),F(xk.$$.fragment),xnt=l(),iLe=a("p"),$nt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),knt=l(),Sn=a("p"),Snt=o("The model class to instantiate is selected based on the "),dLe=a("code"),Rnt=o("model_type"),Pnt=o(` property of the config object (either
passed as an argument or loaded from `),cLe=a("code"),Bnt=o("pretrained_model_name_or_path"),Int=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mLe=a("code"),Nnt=o("pretrained_model_name_or_path"),qnt=o(":"),jnt=l(),$k=a("ul"),JA=a("li"),fLe=a("strong"),Dnt=o("beit"),Gnt=o(" \u2014 "),bte=a("a"),Ont=o("FlaxBeitForImageClassification"),Vnt=o(" (BEiT model)"),Xnt=l(),YA=a("li"),gLe=a("strong"),znt=o("vit"),Wnt=o(" \u2014 "),vte=a("a"),Qnt=o("FlaxViTForImageClassification"),Hnt=o(" (ViT model)"),Unt=l(),F(KA.$$.fragment),SQe=l(),xm=a("h2"),ZA=a("a"),hLe=a("span"),F(kk.$$.fragment),Jnt=l(),uLe=a("span"),Ynt=o("FlaxAutoModelForVision2Seq"),RQe=l(),Lr=a("div"),F(Sk.$$.fragment),Knt=l(),$m=a("p"),Znt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fte=a("a"),est=o("from_pretrained()"),ost=o(" class method or the "),Tte=a("a"),rst=o("from_config()"),tst=o(` class
method.`),ast=l(),Rk=a("p"),nst=o("This class cannot be instantiated directly using "),pLe=a("code"),sst=o("__init__()"),lst=o(" (throws an error)."),ist=l(),aa=a("div"),F(Pk.$$.fragment),dst=l(),_Le=a("p"),cst=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mst=l(),km=a("p"),fst=o(`Note:
Loading a model from its configuration file does `),bLe=a("strong"),gst=o("not"),hst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mte=a("a"),ust=o("from_pretrained()"),pst=o(" to load the model weights."),_st=l(),F(e7.$$.fragment),bst=l(),ot=a("div"),F(Bk.$$.fragment),vst=l(),vLe=a("p"),Fst=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tst=l(),Rn=a("p"),Mst=o("The model class to instantiate is selected based on the "),FLe=a("code"),Est=o("model_type"),Cst=o(` property of the config object (either
passed as an argument or loaded from `),TLe=a("code"),wst=o("pretrained_model_name_or_path"),Ast=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=a("code"),Lst=o("pretrained_model_name_or_path"),yst=o(":"),xst=l(),ELe=a("ul"),o7=a("li"),CLe=a("strong"),$st=o("vision-encoder-decoder"),kst=o(" \u2014 "),Ete=a("a"),Sst=o("FlaxVisionEncoderDecoderModel"),Rst=o(" (Vision Encoder decoder model)"),Pst=l(),F(r7.$$.fragment),this.h()},l(m){const _=rYt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var Ik=s(u);f=n(Ik,"A",{id:!0,class:!0,href:!0});var wLe=s(f);p=n(wLe,"SPAN",{});var ALe=s(p);T(c.$$.fragment,ALe),ALe.forEach(t),wLe.forEach(t),h=i(Ik),wo=n(Ik,"SPAN",{});var LLe=s(wo);$i=r(LLe,"Auto Classes"),LLe.forEach(t),Ik.forEach(t),Bm=i(m),lt=n(m,"P",{});var Nk=s(lt);ki=r(Nk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=n(Nk,"CODE",{});var yLe=s(Si);My=r(yLe,"from_pretrained()"),yLe.forEach(t),Im=r(Nk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Nk.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Pn=s(Qe);Ri=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var xLe=s(Bn);Ey=r(xLe,"AutoConfig"),xLe.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var $Le=s(Nn);Cy=r($Le,"AutoModel"),$Le.forEach(t),Pi=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var kLe=s(qn);wy=r(kLe,"AutoTokenizer"),kLe.forEach(t),Bi=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),Nm=i(m),T(Sa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var qk=s(Ae);nR=r(qk,"will create a model that is an instance of "),Ii=n(qk,"A",{href:!0});var SLe=s(Ii);sR=r(SLe,"BertModel"),SLe.forEach(t),lR=r(qk,"."),qk.forEach(t),Ao=i(m),Ra=n(m,"P",{});var jk=s(Ra);iR=r(jk,"There is one class of "),qm=n(jk,"CODE",{});var RLe=s(qm);dR=r(RLe,"AutoModel"),RLe.forEach(t),XUe=r(jk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jk.forEach(t),xze=i(m),Ni=n(m,"H2",{class:!0});var Dk=s(Ni);jm=n(Dk,"A",{id:!0,class:!0,href:!0});var PLe=s(jm);_ne=n(PLe,"SPAN",{});var BLe=s(_ne);T(Ay.$$.fragment,BLe),BLe.forEach(t),PLe.forEach(t),zUe=i(Dk),bne=n(Dk,"SPAN",{});var ILe=s(bne);WUe=r(ILe,"Extending the Auto Classes"),ILe.forEach(t),Dk.forEach(t),$ze=i(m),jn=n(m,"P",{});var Sm=s(jn);QUe=r(Sm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vne=n(Sm,"CODE",{});var NLe=s(vne);HUe=r(NLe,"NewModel"),NLe.forEach(t),UUe=r(Sm,", make sure you have a "),Fne=n(Sm,"CODE",{});var qLe=s(Fne);JUe=r(qLe,"NewModelConfig"),qLe.forEach(t),YUe=r(Sm,` then you can add those to the auto
classes like this:`),Sm.forEach(t),kze=i(m),T(Ly.$$.fragment,m),Sze=i(m),cR=n(m,"P",{});var jLe=s(cR);KUe=r(jLe,"You will then be able to use the auto classes like you would usually do!"),jLe.forEach(t),Rze=i(m),T(Dm.$$.fragment,m),Pze=i(m),qi=n(m,"H2",{class:!0});var Gk=s(qi);Gm=n(Gk,"A",{id:!0,class:!0,href:!0});var DLe=s(Gm);Tne=n(DLe,"SPAN",{});var GLe=s(Tne);T(yy.$$.fragment,GLe),GLe.forEach(t),DLe.forEach(t),ZUe=i(Gk),Mne=n(Gk,"SPAN",{});var OLe=s(Mne);eJe=r(OLe,"AutoConfig"),OLe.forEach(t),Gk.forEach(t),Bze=i(m),Lo=n(m,"DIV",{class:!0});var nt=s(Lo);T(xy.$$.fragment,nt),oJe=i(nt),$y=n(nt,"P",{});var Ok=s($y);rJe=r(Ok,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mR=n(Ok,"A",{href:!0});var VLe=s(mR);tJe=r(VLe,"from_pretrained()"),VLe.forEach(t),aJe=r(Ok," class method."),Ok.forEach(t),nJe=i(nt),ky=n(nt,"P",{});var Vk=s(ky);sJe=r(Vk,"This class cannot be instantiated directly using "),Ene=n(Vk,"CODE",{});var XLe=s(Ene);lJe=r(XLe,"__init__()"),XLe.forEach(t),iJe=r(Vk," (throws an error)."),Vk.forEach(t),dJe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(Sy.$$.fragment,st),cJe=i(st),Cne=n(st,"P",{});var zLe=s(Cne);mJe=r(zLe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zLe.forEach(t),fJe=i(st),ji=n(st,"P",{});var Rm=s(ji);gJe=r(Rm,"The configuration class to instantiate is selected based on the "),wne=n(Rm,"CODE",{});var WLe=s(wne);hJe=r(WLe,"model_type"),WLe.forEach(t),uJe=r(Rm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ane=n(Rm,"CODE",{});var QLe=s(Ane);pJe=r(QLe,"pretrained_model_name_or_path"),QLe.forEach(t),_Je=r(Rm,":"),Rm.forEach(t),bJe=i(st),A=n(st,"UL",{});var L=s(A);Om=n(L,"LI",{});var t7=s(Om);Lne=n(t7,"STRONG",{});var HLe=s(Lne);vJe=r(HLe,"albert"),HLe.forEach(t),FJe=r(t7," \u2014 "),fR=n(t7,"A",{href:!0});var ULe=s(fR);TJe=r(ULe,"AlbertConfig"),ULe.forEach(t),MJe=r(t7," (ALBERT model)"),t7.forEach(t),EJe=i(L),Vm=n(L,"LI",{});var a7=s(Vm);yne=n(a7,"STRONG",{});var JLe=s(yne);CJe=r(JLe,"bart"),JLe.forEach(t),wJe=r(a7," \u2014 "),gR=n(a7,"A",{href:!0});var YLe=s(gR);AJe=r(YLe,"BartConfig"),YLe.forEach(t),LJe=r(a7," (BART model)"),a7.forEach(t),yJe=i(L),Xm=n(L,"LI",{});var n7=s(Xm);xne=n(n7,"STRONG",{});var KLe=s(xne);xJe=r(KLe,"beit"),KLe.forEach(t),$Je=r(n7," \u2014 "),hR=n(n7,"A",{href:!0});var ZLe=s(hR);kJe=r(ZLe,"BeitConfig"),ZLe.forEach(t),SJe=r(n7," (BEiT model)"),n7.forEach(t),RJe=i(L),zm=n(L,"LI",{});var s7=s(zm);$ne=n(s7,"STRONG",{});var eye=s($ne);PJe=r(eye,"bert"),eye.forEach(t),BJe=r(s7," \u2014 "),uR=n(s7,"A",{href:!0});var oye=s(uR);IJe=r(oye,"BertConfig"),oye.forEach(t),NJe=r(s7," (BERT model)"),s7.forEach(t),qJe=i(L),Wm=n(L,"LI",{});var l7=s(Wm);kne=n(l7,"STRONG",{});var rye=s(kne);jJe=r(rye,"bert-generation"),rye.forEach(t),DJe=r(l7," \u2014 "),pR=n(l7,"A",{href:!0});var tye=s(pR);GJe=r(tye,"BertGenerationConfig"),tye.forEach(t),OJe=r(l7," (Bert Generation model)"),l7.forEach(t),VJe=i(L),Qm=n(L,"LI",{});var i7=s(Qm);Sne=n(i7,"STRONG",{});var aye=s(Sne);XJe=r(aye,"big_bird"),aye.forEach(t),zJe=r(i7," \u2014 "),_R=n(i7,"A",{href:!0});var nye=s(_R);WJe=r(nye,"BigBirdConfig"),nye.forEach(t),QJe=r(i7," (BigBird model)"),i7.forEach(t),HJe=i(L),Hm=n(L,"LI",{});var d7=s(Hm);Rne=n(d7,"STRONG",{});var sye=s(Rne);UJe=r(sye,"bigbird_pegasus"),sye.forEach(t),JJe=r(d7," \u2014 "),bR=n(d7,"A",{href:!0});var lye=s(bR);YJe=r(lye,"BigBirdPegasusConfig"),lye.forEach(t),KJe=r(d7," (BigBird-Pegasus model)"),d7.forEach(t),ZJe=i(L),Um=n(L,"LI",{});var c7=s(Um);Pne=n(c7,"STRONG",{});var iye=s(Pne);eYe=r(iye,"blenderbot"),iye.forEach(t),oYe=r(c7," \u2014 "),vR=n(c7,"A",{href:!0});var dye=s(vR);rYe=r(dye,"BlenderbotConfig"),dye.forEach(t),tYe=r(c7," (Blenderbot model)"),c7.forEach(t),aYe=i(L),Jm=n(L,"LI",{});var m7=s(Jm);Bne=n(m7,"STRONG",{});var cye=s(Bne);nYe=r(cye,"blenderbot-small"),cye.forEach(t),sYe=r(m7," \u2014 "),FR=n(m7,"A",{href:!0});var mye=s(FR);lYe=r(mye,"BlenderbotSmallConfig"),mye.forEach(t),iYe=r(m7," (BlenderbotSmall model)"),m7.forEach(t),dYe=i(L),Ym=n(L,"LI",{});var f7=s(Ym);Ine=n(f7,"STRONG",{});var fye=s(Ine);cYe=r(fye,"bloom"),fye.forEach(t),mYe=r(f7," \u2014 "),TR=n(f7,"A",{href:!0});var gye=s(TR);fYe=r(gye,"BloomConfig"),gye.forEach(t),gYe=r(f7," (BLOOM model)"),f7.forEach(t),hYe=i(L),Km=n(L,"LI",{});var g7=s(Km);Nne=n(g7,"STRONG",{});var hye=s(Nne);uYe=r(hye,"camembert"),hye.forEach(t),pYe=r(g7," \u2014 "),MR=n(g7,"A",{href:!0});var uye=s(MR);_Ye=r(uye,"CamembertConfig"),uye.forEach(t),bYe=r(g7," (CamemBERT model)"),g7.forEach(t),vYe=i(L),Zm=n(L,"LI",{});var h7=s(Zm);qne=n(h7,"STRONG",{});var pye=s(qne);FYe=r(pye,"canine"),pye.forEach(t),TYe=r(h7," \u2014 "),ER=n(h7,"A",{href:!0});var _ye=s(ER);MYe=r(_ye,"CanineConfig"),_ye.forEach(t),EYe=r(h7," (CANINE model)"),h7.forEach(t),CYe=i(L),ef=n(L,"LI",{});var u7=s(ef);jne=n(u7,"STRONG",{});var bye=s(jne);wYe=r(bye,"clip"),bye.forEach(t),AYe=r(u7," \u2014 "),CR=n(u7,"A",{href:!0});var vye=s(CR);LYe=r(vye,"CLIPConfig"),vye.forEach(t),yYe=r(u7," (CLIP model)"),u7.forEach(t),xYe=i(L),of=n(L,"LI",{});var p7=s(of);Dne=n(p7,"STRONG",{});var Fye=s(Dne);$Ye=r(Fye,"codegen"),Fye.forEach(t),kYe=r(p7," \u2014 "),wR=n(p7,"A",{href:!0});var Tye=s(wR);SYe=r(Tye,"CodeGenConfig"),Tye.forEach(t),RYe=r(p7," (CodeGen model)"),p7.forEach(t),PYe=i(L),rf=n(L,"LI",{});var _7=s(rf);Gne=n(_7,"STRONG",{});var Mye=s(Gne);BYe=r(Mye,"convbert"),Mye.forEach(t),IYe=r(_7," \u2014 "),AR=n(_7,"A",{href:!0});var Eye=s(AR);NYe=r(Eye,"ConvBertConfig"),Eye.forEach(t),qYe=r(_7," (ConvBERT model)"),_7.forEach(t),jYe=i(L),tf=n(L,"LI",{});var b7=s(tf);One=n(b7,"STRONG",{});var Cye=s(One);DYe=r(Cye,"convnext"),Cye.forEach(t),GYe=r(b7," \u2014 "),LR=n(b7,"A",{href:!0});var wye=s(LR);OYe=r(wye,"ConvNextConfig"),wye.forEach(t),VYe=r(b7," (ConvNeXT model)"),b7.forEach(t),XYe=i(L),af=n(L,"LI",{});var v7=s(af);Vne=n(v7,"STRONG",{});var Aye=s(Vne);zYe=r(Aye,"ctrl"),Aye.forEach(t),WYe=r(v7," \u2014 "),yR=n(v7,"A",{href:!0});var Lye=s(yR);QYe=r(Lye,"CTRLConfig"),Lye.forEach(t),HYe=r(v7," (CTRL model)"),v7.forEach(t),UYe=i(L),nf=n(L,"LI",{});var F7=s(nf);Xne=n(F7,"STRONG",{});var yye=s(Xne);JYe=r(yye,"cvt"),yye.forEach(t),YYe=r(F7," \u2014 "),xR=n(F7,"A",{href:!0});var xye=s(xR);KYe=r(xye,"CvtConfig"),xye.forEach(t),ZYe=r(F7," (CvT model)"),F7.forEach(t),eKe=i(L),sf=n(L,"LI",{});var T7=s(sf);zne=n(T7,"STRONG",{});var $ye=s(zne);oKe=r($ye,"data2vec-audio"),$ye.forEach(t),rKe=r(T7," \u2014 "),$R=n(T7,"A",{href:!0});var kye=s($R);tKe=r(kye,"Data2VecAudioConfig"),kye.forEach(t),aKe=r(T7," (Data2VecAudio model)"),T7.forEach(t),nKe=i(L),lf=n(L,"LI",{});var M7=s(lf);Wne=n(M7,"STRONG",{});var Sye=s(Wne);sKe=r(Sye,"data2vec-text"),Sye.forEach(t),lKe=r(M7," \u2014 "),kR=n(M7,"A",{href:!0});var Rye=s(kR);iKe=r(Rye,"Data2VecTextConfig"),Rye.forEach(t),dKe=r(M7," (Data2VecText model)"),M7.forEach(t),cKe=i(L),df=n(L,"LI",{});var E7=s(df);Qne=n(E7,"STRONG",{});var Pye=s(Qne);mKe=r(Pye,"data2vec-vision"),Pye.forEach(t),fKe=r(E7," \u2014 "),SR=n(E7,"A",{href:!0});var Bye=s(SR);gKe=r(Bye,"Data2VecVisionConfig"),Bye.forEach(t),hKe=r(E7," (Data2VecVision model)"),E7.forEach(t),uKe=i(L),cf=n(L,"LI",{});var C7=s(cf);Hne=n(C7,"STRONG",{});var Iye=s(Hne);pKe=r(Iye,"deberta"),Iye.forEach(t),_Ke=r(C7," \u2014 "),RR=n(C7,"A",{href:!0});var Nye=s(RR);bKe=r(Nye,"DebertaConfig"),Nye.forEach(t),vKe=r(C7," (DeBERTa model)"),C7.forEach(t),FKe=i(L),mf=n(L,"LI",{});var w7=s(mf);Une=n(w7,"STRONG",{});var qye=s(Une);TKe=r(qye,"deberta-v2"),qye.forEach(t),MKe=r(w7," \u2014 "),PR=n(w7,"A",{href:!0});var jye=s(PR);EKe=r(jye,"DebertaV2Config"),jye.forEach(t),CKe=r(w7," (DeBERTa-v2 model)"),w7.forEach(t),wKe=i(L),ff=n(L,"LI",{});var A7=s(ff);Jne=n(A7,"STRONG",{});var Ist=s(Jne);AKe=r(Ist,"decision_transformer"),Ist.forEach(t),LKe=r(A7," \u2014 "),BR=n(A7,"A",{href:!0});var Nst=s(BR);yKe=r(Nst,"DecisionTransformerConfig"),Nst.forEach(t),xKe=r(A7," (Decision Transformer model)"),A7.forEach(t),$Ke=i(L),gf=n(L,"LI",{});var Dye=s(gf);Yne=n(Dye,"STRONG",{});var qst=s(Yne);kKe=r(qst,"deit"),qst.forEach(t),SKe=r(Dye," \u2014 "),IR=n(Dye,"A",{href:!0});var jst=s(IR);RKe=r(jst,"DeiTConfig"),jst.forEach(t),PKe=r(Dye," (DeiT model)"),Dye.forEach(t),BKe=i(L),hf=n(L,"LI",{});var Gye=s(hf);Kne=n(Gye,"STRONG",{});var Dst=s(Kne);IKe=r(Dst,"detr"),Dst.forEach(t),NKe=r(Gye," \u2014 "),NR=n(Gye,"A",{href:!0});var Gst=s(NR);qKe=r(Gst,"DetrConfig"),Gst.forEach(t),jKe=r(Gye," (DETR model)"),Gye.forEach(t),DKe=i(L),uf=n(L,"LI",{});var Oye=s(uf);Zne=n(Oye,"STRONG",{});var Ost=s(Zne);GKe=r(Ost,"distilbert"),Ost.forEach(t),OKe=r(Oye," \u2014 "),qR=n(Oye,"A",{href:!0});var Vst=s(qR);VKe=r(Vst,"DistilBertConfig"),Vst.forEach(t),XKe=r(Oye," (DistilBERT model)"),Oye.forEach(t),zKe=i(L),pf=n(L,"LI",{});var Vye=s(pf);ese=n(Vye,"STRONG",{});var Xst=s(ese);WKe=r(Xst,"dpr"),Xst.forEach(t),QKe=r(Vye," \u2014 "),jR=n(Vye,"A",{href:!0});var zst=s(jR);HKe=r(zst,"DPRConfig"),zst.forEach(t),UKe=r(Vye," (DPR model)"),Vye.forEach(t),JKe=i(L),_f=n(L,"LI",{});var Xye=s(_f);ose=n(Xye,"STRONG",{});var Wst=s(ose);YKe=r(Wst,"dpt"),Wst.forEach(t),KKe=r(Xye," \u2014 "),DR=n(Xye,"A",{href:!0});var Qst=s(DR);ZKe=r(Qst,"DPTConfig"),Qst.forEach(t),eZe=r(Xye," (DPT model)"),Xye.forEach(t),oZe=i(L),bf=n(L,"LI",{});var zye=s(bf);rse=n(zye,"STRONG",{});var Hst=s(rse);rZe=r(Hst,"electra"),Hst.forEach(t),tZe=r(zye," \u2014 "),GR=n(zye,"A",{href:!0});var Ust=s(GR);aZe=r(Ust,"ElectraConfig"),Ust.forEach(t),nZe=r(zye," (ELECTRA model)"),zye.forEach(t),sZe=i(L),vf=n(L,"LI",{});var Wye=s(vf);tse=n(Wye,"STRONG",{});var Jst=s(tse);lZe=r(Jst,"encoder-decoder"),Jst.forEach(t),iZe=r(Wye," \u2014 "),OR=n(Wye,"A",{href:!0});var Yst=s(OR);dZe=r(Yst,"EncoderDecoderConfig"),Yst.forEach(t),cZe=r(Wye," (Encoder decoder model)"),Wye.forEach(t),mZe=i(L),Ff=n(L,"LI",{});var Qye=s(Ff);ase=n(Qye,"STRONG",{});var Kst=s(ase);fZe=r(Kst,"flaubert"),Kst.forEach(t),gZe=r(Qye," \u2014 "),VR=n(Qye,"A",{href:!0});var Zst=s(VR);hZe=r(Zst,"FlaubertConfig"),Zst.forEach(t),uZe=r(Qye," (FlauBERT model)"),Qye.forEach(t),pZe=i(L),Tf=n(L,"LI",{});var Hye=s(Tf);nse=n(Hye,"STRONG",{});var elt=s(nse);_Ze=r(elt,"flava"),elt.forEach(t),bZe=r(Hye," \u2014 "),XR=n(Hye,"A",{href:!0});var olt=s(XR);vZe=r(olt,"FlavaConfig"),olt.forEach(t),FZe=r(Hye," (FLAVA model)"),Hye.forEach(t),TZe=i(L),Mf=n(L,"LI",{});var Uye=s(Mf);sse=n(Uye,"STRONG",{});var rlt=s(sse);MZe=r(rlt,"fnet"),rlt.forEach(t),EZe=r(Uye," \u2014 "),zR=n(Uye,"A",{href:!0});var tlt=s(zR);CZe=r(tlt,"FNetConfig"),tlt.forEach(t),wZe=r(Uye," (FNet model)"),Uye.forEach(t),AZe=i(L),Ef=n(L,"LI",{});var Jye=s(Ef);lse=n(Jye,"STRONG",{});var alt=s(lse);LZe=r(alt,"fsmt"),alt.forEach(t),yZe=r(Jye," \u2014 "),WR=n(Jye,"A",{href:!0});var nlt=s(WR);xZe=r(nlt,"FSMTConfig"),nlt.forEach(t),$Ze=r(Jye," (FairSeq Machine-Translation model)"),Jye.forEach(t),kZe=i(L),Cf=n(L,"LI",{});var Yye=s(Cf);ise=n(Yye,"STRONG",{});var slt=s(ise);SZe=r(slt,"funnel"),slt.forEach(t),RZe=r(Yye," \u2014 "),QR=n(Yye,"A",{href:!0});var llt=s(QR);PZe=r(llt,"FunnelConfig"),llt.forEach(t),BZe=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),IZe=i(L),wf=n(L,"LI",{});var Kye=s(wf);dse=n(Kye,"STRONG",{});var ilt=s(dse);NZe=r(ilt,"glpn"),ilt.forEach(t),qZe=r(Kye," \u2014 "),HR=n(Kye,"A",{href:!0});var dlt=s(HR);jZe=r(dlt,"GLPNConfig"),dlt.forEach(t),DZe=r(Kye," (GLPN model)"),Kye.forEach(t),GZe=i(L),Af=n(L,"LI",{});var Zye=s(Af);cse=n(Zye,"STRONG",{});var clt=s(cse);OZe=r(clt,"gpt2"),clt.forEach(t),VZe=r(Zye," \u2014 "),UR=n(Zye,"A",{href:!0});var mlt=s(UR);XZe=r(mlt,"GPT2Config"),mlt.forEach(t),zZe=r(Zye," (OpenAI GPT-2 model)"),Zye.forEach(t),WZe=i(L),Lf=n(L,"LI",{});var e8e=s(Lf);mse=n(e8e,"STRONG",{});var flt=s(mse);QZe=r(flt,"gpt_neo"),flt.forEach(t),HZe=r(e8e," \u2014 "),JR=n(e8e,"A",{href:!0});var glt=s(JR);UZe=r(glt,"GPTNeoConfig"),glt.forEach(t),JZe=r(e8e," (GPT Neo model)"),e8e.forEach(t),YZe=i(L),yf=n(L,"LI",{});var o8e=s(yf);fse=n(o8e,"STRONG",{});var hlt=s(fse);KZe=r(hlt,"gpt_neox"),hlt.forEach(t),ZZe=r(o8e," \u2014 "),YR=n(o8e,"A",{href:!0});var ult=s(YR);eeo=r(ult,"GPTNeoXConfig"),ult.forEach(t),oeo=r(o8e," (GPT NeoX model)"),o8e.forEach(t),reo=i(L),xf=n(L,"LI",{});var r8e=s(xf);gse=n(r8e,"STRONG",{});var plt=s(gse);teo=r(plt,"gptj"),plt.forEach(t),aeo=r(r8e," \u2014 "),KR=n(r8e,"A",{href:!0});var _lt=s(KR);neo=r(_lt,"GPTJConfig"),_lt.forEach(t),seo=r(r8e," (GPT-J model)"),r8e.forEach(t),leo=i(L),$f=n(L,"LI",{});var t8e=s($f);hse=n(t8e,"STRONG",{});var blt=s(hse);ieo=r(blt,"groupvit"),blt.forEach(t),deo=r(t8e," \u2014 "),ZR=n(t8e,"A",{href:!0});var vlt=s(ZR);ceo=r(vlt,"GroupViTConfig"),vlt.forEach(t),meo=r(t8e," (GroupViT model)"),t8e.forEach(t),feo=i(L),kf=n(L,"LI",{});var a8e=s(kf);use=n(a8e,"STRONG",{});var Flt=s(use);geo=r(Flt,"hubert"),Flt.forEach(t),heo=r(a8e," \u2014 "),eP=n(a8e,"A",{href:!0});var Tlt=s(eP);ueo=r(Tlt,"HubertConfig"),Tlt.forEach(t),peo=r(a8e," (Hubert model)"),a8e.forEach(t),_eo=i(L),Sf=n(L,"LI",{});var n8e=s(Sf);pse=n(n8e,"STRONG",{});var Mlt=s(pse);beo=r(Mlt,"ibert"),Mlt.forEach(t),veo=r(n8e," \u2014 "),oP=n(n8e,"A",{href:!0});var Elt=s(oP);Feo=r(Elt,"IBertConfig"),Elt.forEach(t),Teo=r(n8e," (I-BERT model)"),n8e.forEach(t),Meo=i(L),Rf=n(L,"LI",{});var s8e=s(Rf);_se=n(s8e,"STRONG",{});var Clt=s(_se);Eeo=r(Clt,"imagegpt"),Clt.forEach(t),Ceo=r(s8e," \u2014 "),rP=n(s8e,"A",{href:!0});var wlt=s(rP);weo=r(wlt,"ImageGPTConfig"),wlt.forEach(t),Aeo=r(s8e," (ImageGPT model)"),s8e.forEach(t),Leo=i(L),Pf=n(L,"LI",{});var l8e=s(Pf);bse=n(l8e,"STRONG",{});var Alt=s(bse);yeo=r(Alt,"layoutlm"),Alt.forEach(t),xeo=r(l8e," \u2014 "),tP=n(l8e,"A",{href:!0});var Llt=s(tP);$eo=r(Llt,"LayoutLMConfig"),Llt.forEach(t),keo=r(l8e," (LayoutLM model)"),l8e.forEach(t),Seo=i(L),Bf=n(L,"LI",{});var i8e=s(Bf);vse=n(i8e,"STRONG",{});var ylt=s(vse);Reo=r(ylt,"layoutlmv2"),ylt.forEach(t),Peo=r(i8e," \u2014 "),aP=n(i8e,"A",{href:!0});var xlt=s(aP);Beo=r(xlt,"LayoutLMv2Config"),xlt.forEach(t),Ieo=r(i8e," (LayoutLMv2 model)"),i8e.forEach(t),Neo=i(L),If=n(L,"LI",{});var d8e=s(If);Fse=n(d8e,"STRONG",{});var $lt=s(Fse);qeo=r($lt,"layoutlmv3"),$lt.forEach(t),jeo=r(d8e," \u2014 "),nP=n(d8e,"A",{href:!0});var klt=s(nP);Deo=r(klt,"LayoutLMv3Config"),klt.forEach(t),Geo=r(d8e," (LayoutLMv3 model)"),d8e.forEach(t),Oeo=i(L),Nf=n(L,"LI",{});var c8e=s(Nf);Tse=n(c8e,"STRONG",{});var Slt=s(Tse);Veo=r(Slt,"led"),Slt.forEach(t),Xeo=r(c8e," \u2014 "),sP=n(c8e,"A",{href:!0});var Rlt=s(sP);zeo=r(Rlt,"LEDConfig"),Rlt.forEach(t),Weo=r(c8e," (LED model)"),c8e.forEach(t),Qeo=i(L),qf=n(L,"LI",{});var m8e=s(qf);Mse=n(m8e,"STRONG",{});var Plt=s(Mse);Heo=r(Plt,"levit"),Plt.forEach(t),Ueo=r(m8e," \u2014 "),lP=n(m8e,"A",{href:!0});var Blt=s(lP);Jeo=r(Blt,"LevitConfig"),Blt.forEach(t),Yeo=r(m8e," (LeViT model)"),m8e.forEach(t),Keo=i(L),jf=n(L,"LI",{});var f8e=s(jf);Ese=n(f8e,"STRONG",{});var Ilt=s(Ese);Zeo=r(Ilt,"longformer"),Ilt.forEach(t),eoo=r(f8e," \u2014 "),iP=n(f8e,"A",{href:!0});var Nlt=s(iP);ooo=r(Nlt,"LongformerConfig"),Nlt.forEach(t),roo=r(f8e," (Longformer model)"),f8e.forEach(t),too=i(L),Df=n(L,"LI",{});var g8e=s(Df);Cse=n(g8e,"STRONG",{});var qlt=s(Cse);aoo=r(qlt,"longt5"),qlt.forEach(t),noo=r(g8e," \u2014 "),dP=n(g8e,"A",{href:!0});var jlt=s(dP);soo=r(jlt,"LongT5Config"),jlt.forEach(t),loo=r(g8e," (LongT5 model)"),g8e.forEach(t),ioo=i(L),Gf=n(L,"LI",{});var h8e=s(Gf);wse=n(h8e,"STRONG",{});var Dlt=s(wse);doo=r(Dlt,"luke"),Dlt.forEach(t),coo=r(h8e," \u2014 "),cP=n(h8e,"A",{href:!0});var Glt=s(cP);moo=r(Glt,"LukeConfig"),Glt.forEach(t),foo=r(h8e," (LUKE model)"),h8e.forEach(t),goo=i(L),Of=n(L,"LI",{});var u8e=s(Of);Ase=n(u8e,"STRONG",{});var Olt=s(Ase);hoo=r(Olt,"lxmert"),Olt.forEach(t),uoo=r(u8e," \u2014 "),mP=n(u8e,"A",{href:!0});var Vlt=s(mP);poo=r(Vlt,"LxmertConfig"),Vlt.forEach(t),_oo=r(u8e," (LXMERT model)"),u8e.forEach(t),boo=i(L),Vf=n(L,"LI",{});var p8e=s(Vf);Lse=n(p8e,"STRONG",{});var Xlt=s(Lse);voo=r(Xlt,"m2m_100"),Xlt.forEach(t),Foo=r(p8e," \u2014 "),fP=n(p8e,"A",{href:!0});var zlt=s(fP);Too=r(zlt,"M2M100Config"),zlt.forEach(t),Moo=r(p8e," (M2M100 model)"),p8e.forEach(t),Eoo=i(L),Xf=n(L,"LI",{});var _8e=s(Xf);yse=n(_8e,"STRONG",{});var Wlt=s(yse);Coo=r(Wlt,"marian"),Wlt.forEach(t),woo=r(_8e," \u2014 "),gP=n(_8e,"A",{href:!0});var Qlt=s(gP);Aoo=r(Qlt,"MarianConfig"),Qlt.forEach(t),Loo=r(_8e," (Marian model)"),_8e.forEach(t),yoo=i(L),zf=n(L,"LI",{});var b8e=s(zf);xse=n(b8e,"STRONG",{});var Hlt=s(xse);xoo=r(Hlt,"maskformer"),Hlt.forEach(t),$oo=r(b8e," \u2014 "),hP=n(b8e,"A",{href:!0});var Ult=s(hP);koo=r(Ult,"MaskFormerConfig"),Ult.forEach(t),Soo=r(b8e," (MaskFormer model)"),b8e.forEach(t),Roo=i(L),Wf=n(L,"LI",{});var v8e=s(Wf);$se=n(v8e,"STRONG",{});var Jlt=s($se);Poo=r(Jlt,"mbart"),Jlt.forEach(t),Boo=r(v8e," \u2014 "),uP=n(v8e,"A",{href:!0});var Ylt=s(uP);Ioo=r(Ylt,"MBartConfig"),Ylt.forEach(t),Noo=r(v8e," (mBART model)"),v8e.forEach(t),qoo=i(L),Qf=n(L,"LI",{});var F8e=s(Qf);kse=n(F8e,"STRONG",{});var Klt=s(kse);joo=r(Klt,"mctct"),Klt.forEach(t),Doo=r(F8e," \u2014 "),pP=n(F8e,"A",{href:!0});var Zlt=s(pP);Goo=r(Zlt,"MCTCTConfig"),Zlt.forEach(t),Ooo=r(F8e," (M-CTC-T model)"),F8e.forEach(t),Voo=i(L),Hf=n(L,"LI",{});var T8e=s(Hf);Sse=n(T8e,"STRONG",{});var eit=s(Sse);Xoo=r(eit,"megatron-bert"),eit.forEach(t),zoo=r(T8e," \u2014 "),_P=n(T8e,"A",{href:!0});var oit=s(_P);Woo=r(oit,"MegatronBertConfig"),oit.forEach(t),Qoo=r(T8e," (Megatron-BERT model)"),T8e.forEach(t),Hoo=i(L),Uf=n(L,"LI",{});var M8e=s(Uf);Rse=n(M8e,"STRONG",{});var rit=s(Rse);Uoo=r(rit,"mobilebert"),rit.forEach(t),Joo=r(M8e," \u2014 "),bP=n(M8e,"A",{href:!0});var tit=s(bP);Yoo=r(tit,"MobileBertConfig"),tit.forEach(t),Koo=r(M8e," (MobileBERT model)"),M8e.forEach(t),Zoo=i(L),Jf=n(L,"LI",{});var E8e=s(Jf);Pse=n(E8e,"STRONG",{});var ait=s(Pse);ero=r(ait,"mobilevit"),ait.forEach(t),oro=r(E8e," \u2014 "),vP=n(E8e,"A",{href:!0});var nit=s(vP);rro=r(nit,"MobileViTConfig"),nit.forEach(t),tro=r(E8e," (MobileViT model)"),E8e.forEach(t),aro=i(L),Yf=n(L,"LI",{});var C8e=s(Yf);Bse=n(C8e,"STRONG",{});var sit=s(Bse);nro=r(sit,"mpnet"),sit.forEach(t),sro=r(C8e," \u2014 "),FP=n(C8e,"A",{href:!0});var lit=s(FP);lro=r(lit,"MPNetConfig"),lit.forEach(t),iro=r(C8e," (MPNet model)"),C8e.forEach(t),dro=i(L),Kf=n(L,"LI",{});var w8e=s(Kf);Ise=n(w8e,"STRONG",{});var iit=s(Ise);cro=r(iit,"mt5"),iit.forEach(t),mro=r(w8e," \u2014 "),TP=n(w8e,"A",{href:!0});var dit=s(TP);fro=r(dit,"MT5Config"),dit.forEach(t),gro=r(w8e," (MT5 model)"),w8e.forEach(t),hro=i(L),Zf=n(L,"LI",{});var A8e=s(Zf);Nse=n(A8e,"STRONG",{});var cit=s(Nse);uro=r(cit,"mvp"),cit.forEach(t),pro=r(A8e," \u2014 "),MP=n(A8e,"A",{href:!0});var mit=s(MP);_ro=r(mit,"MvpConfig"),mit.forEach(t),bro=r(A8e," (MVP model)"),A8e.forEach(t),vro=i(L),eg=n(L,"LI",{});var L8e=s(eg);qse=n(L8e,"STRONG",{});var fit=s(qse);Fro=r(fit,"nezha"),fit.forEach(t),Tro=r(L8e," \u2014 "),EP=n(L8e,"A",{href:!0});var git=s(EP);Mro=r(git,"NezhaConfig"),git.forEach(t),Ero=r(L8e," (Nezha model)"),L8e.forEach(t),Cro=i(L),og=n(L,"LI",{});var y8e=s(og);jse=n(y8e,"STRONG",{});var hit=s(jse);wro=r(hit,"nystromformer"),hit.forEach(t),Aro=r(y8e," \u2014 "),CP=n(y8e,"A",{href:!0});var uit=s(CP);Lro=r(uit,"NystromformerConfig"),uit.forEach(t),yro=r(y8e," (Nystr\xF6mformer model)"),y8e.forEach(t),xro=i(L),rg=n(L,"LI",{});var x8e=s(rg);Dse=n(x8e,"STRONG",{});var pit=s(Dse);$ro=r(pit,"openai-gpt"),pit.forEach(t),kro=r(x8e," \u2014 "),wP=n(x8e,"A",{href:!0});var _it=s(wP);Sro=r(_it,"OpenAIGPTConfig"),_it.forEach(t),Rro=r(x8e," (OpenAI GPT model)"),x8e.forEach(t),Pro=i(L),tg=n(L,"LI",{});var $8e=s(tg);Gse=n($8e,"STRONG",{});var bit=s(Gse);Bro=r(bit,"opt"),bit.forEach(t),Iro=r($8e," \u2014 "),AP=n($8e,"A",{href:!0});var vit=s(AP);Nro=r(vit,"OPTConfig"),vit.forEach(t),qro=r($8e," (OPT model)"),$8e.forEach(t),jro=i(L),ag=n(L,"LI",{});var k8e=s(ag);Ose=n(k8e,"STRONG",{});var Fit=s(Ose);Dro=r(Fit,"owlvit"),Fit.forEach(t),Gro=r(k8e," \u2014 "),LP=n(k8e,"A",{href:!0});var Tit=s(LP);Oro=r(Tit,"OwlViTConfig"),Tit.forEach(t),Vro=r(k8e," (OWL-ViT model)"),k8e.forEach(t),Xro=i(L),ng=n(L,"LI",{});var S8e=s(ng);Vse=n(S8e,"STRONG",{});var Mit=s(Vse);zro=r(Mit,"pegasus"),Mit.forEach(t),Wro=r(S8e," \u2014 "),yP=n(S8e,"A",{href:!0});var Eit=s(yP);Qro=r(Eit,"PegasusConfig"),Eit.forEach(t),Hro=r(S8e," (Pegasus model)"),S8e.forEach(t),Uro=i(L),sg=n(L,"LI",{});var R8e=s(sg);Xse=n(R8e,"STRONG",{});var Cit=s(Xse);Jro=r(Cit,"perceiver"),Cit.forEach(t),Yro=r(R8e," \u2014 "),xP=n(R8e,"A",{href:!0});var wit=s(xP);Kro=r(wit,"PerceiverConfig"),wit.forEach(t),Zro=r(R8e," (Perceiver model)"),R8e.forEach(t),eto=i(L),lg=n(L,"LI",{});var P8e=s(lg);zse=n(P8e,"STRONG",{});var Ait=s(zse);oto=r(Ait,"plbart"),Ait.forEach(t),rto=r(P8e," \u2014 "),$P=n(P8e,"A",{href:!0});var Lit=s($P);tto=r(Lit,"PLBartConfig"),Lit.forEach(t),ato=r(P8e," (PLBart model)"),P8e.forEach(t),nto=i(L),ig=n(L,"LI",{});var B8e=s(ig);Wse=n(B8e,"STRONG",{});var yit=s(Wse);sto=r(yit,"poolformer"),yit.forEach(t),lto=r(B8e," \u2014 "),kP=n(B8e,"A",{href:!0});var xit=s(kP);ito=r(xit,"PoolFormerConfig"),xit.forEach(t),dto=r(B8e," (PoolFormer model)"),B8e.forEach(t),cto=i(L),dg=n(L,"LI",{});var I8e=s(dg);Qse=n(I8e,"STRONG",{});var $it=s(Qse);mto=r($it,"prophetnet"),$it.forEach(t),fto=r(I8e," \u2014 "),SP=n(I8e,"A",{href:!0});var kit=s(SP);gto=r(kit,"ProphetNetConfig"),kit.forEach(t),hto=r(I8e," (ProphetNet model)"),I8e.forEach(t),uto=i(L),cg=n(L,"LI",{});var N8e=s(cg);Hse=n(N8e,"STRONG",{});var Sit=s(Hse);pto=r(Sit,"qdqbert"),Sit.forEach(t),_to=r(N8e," \u2014 "),RP=n(N8e,"A",{href:!0});var Rit=s(RP);bto=r(Rit,"QDQBertConfig"),Rit.forEach(t),vto=r(N8e," (QDQBert model)"),N8e.forEach(t),Fto=i(L),mg=n(L,"LI",{});var q8e=s(mg);Use=n(q8e,"STRONG",{});var Pit=s(Use);Tto=r(Pit,"rag"),Pit.forEach(t),Mto=r(q8e," \u2014 "),PP=n(q8e,"A",{href:!0});var Bit=s(PP);Eto=r(Bit,"RagConfig"),Bit.forEach(t),Cto=r(q8e," (RAG model)"),q8e.forEach(t),wto=i(L),fg=n(L,"LI",{});var j8e=s(fg);Jse=n(j8e,"STRONG",{});var Iit=s(Jse);Ato=r(Iit,"realm"),Iit.forEach(t),Lto=r(j8e," \u2014 "),BP=n(j8e,"A",{href:!0});var Nit=s(BP);yto=r(Nit,"RealmConfig"),Nit.forEach(t),xto=r(j8e," (REALM model)"),j8e.forEach(t),$to=i(L),gg=n(L,"LI",{});var D8e=s(gg);Yse=n(D8e,"STRONG",{});var qit=s(Yse);kto=r(qit,"reformer"),qit.forEach(t),Sto=r(D8e," \u2014 "),IP=n(D8e,"A",{href:!0});var jit=s(IP);Rto=r(jit,"ReformerConfig"),jit.forEach(t),Pto=r(D8e," (Reformer model)"),D8e.forEach(t),Bto=i(L),hg=n(L,"LI",{});var G8e=s(hg);Kse=n(G8e,"STRONG",{});var Dit=s(Kse);Ito=r(Dit,"regnet"),Dit.forEach(t),Nto=r(G8e," \u2014 "),NP=n(G8e,"A",{href:!0});var Git=s(NP);qto=r(Git,"RegNetConfig"),Git.forEach(t),jto=r(G8e," (RegNet model)"),G8e.forEach(t),Dto=i(L),ug=n(L,"LI",{});var O8e=s(ug);Zse=n(O8e,"STRONG",{});var Oit=s(Zse);Gto=r(Oit,"rembert"),Oit.forEach(t),Oto=r(O8e," \u2014 "),qP=n(O8e,"A",{href:!0});var Vit=s(qP);Vto=r(Vit,"RemBertConfig"),Vit.forEach(t),Xto=r(O8e," (RemBERT model)"),O8e.forEach(t),zto=i(L),pg=n(L,"LI",{});var V8e=s(pg);ele=n(V8e,"STRONG",{});var Xit=s(ele);Wto=r(Xit,"resnet"),Xit.forEach(t),Qto=r(V8e," \u2014 "),jP=n(V8e,"A",{href:!0});var zit=s(jP);Hto=r(zit,"ResNetConfig"),zit.forEach(t),Uto=r(V8e," (ResNet model)"),V8e.forEach(t),Jto=i(L),_g=n(L,"LI",{});var X8e=s(_g);ole=n(X8e,"STRONG",{});var Wit=s(ole);Yto=r(Wit,"retribert"),Wit.forEach(t),Kto=r(X8e," \u2014 "),DP=n(X8e,"A",{href:!0});var Qit=s(DP);Zto=r(Qit,"RetriBertConfig"),Qit.forEach(t),eao=r(X8e," (RetriBERT model)"),X8e.forEach(t),oao=i(L),bg=n(L,"LI",{});var z8e=s(bg);rle=n(z8e,"STRONG",{});var Hit=s(rle);rao=r(Hit,"roberta"),Hit.forEach(t),tao=r(z8e," \u2014 "),GP=n(z8e,"A",{href:!0});var Uit=s(GP);aao=r(Uit,"RobertaConfig"),Uit.forEach(t),nao=r(z8e," (RoBERTa model)"),z8e.forEach(t),sao=i(L),vg=n(L,"LI",{});var W8e=s(vg);tle=n(W8e,"STRONG",{});var Jit=s(tle);lao=r(Jit,"roformer"),Jit.forEach(t),iao=r(W8e," \u2014 "),OP=n(W8e,"A",{href:!0});var Yit=s(OP);dao=r(Yit,"RoFormerConfig"),Yit.forEach(t),cao=r(W8e," (RoFormer model)"),W8e.forEach(t),mao=i(L),Fg=n(L,"LI",{});var Q8e=s(Fg);ale=n(Q8e,"STRONG",{});var Kit=s(ale);fao=r(Kit,"segformer"),Kit.forEach(t),gao=r(Q8e," \u2014 "),VP=n(Q8e,"A",{href:!0});var Zit=s(VP);hao=r(Zit,"SegformerConfig"),Zit.forEach(t),uao=r(Q8e," (SegFormer model)"),Q8e.forEach(t),pao=i(L),Tg=n(L,"LI",{});var H8e=s(Tg);nle=n(H8e,"STRONG",{});var edt=s(nle);_ao=r(edt,"sew"),edt.forEach(t),bao=r(H8e," \u2014 "),XP=n(H8e,"A",{href:!0});var odt=s(XP);vao=r(odt,"SEWConfig"),odt.forEach(t),Fao=r(H8e," (SEW model)"),H8e.forEach(t),Tao=i(L),Mg=n(L,"LI",{});var U8e=s(Mg);sle=n(U8e,"STRONG",{});var rdt=s(sle);Mao=r(rdt,"sew-d"),rdt.forEach(t),Eao=r(U8e," \u2014 "),zP=n(U8e,"A",{href:!0});var tdt=s(zP);Cao=r(tdt,"SEWDConfig"),tdt.forEach(t),wao=r(U8e," (SEW-D model)"),U8e.forEach(t),Aao=i(L),Eg=n(L,"LI",{});var J8e=s(Eg);lle=n(J8e,"STRONG",{});var adt=s(lle);Lao=r(adt,"speech-encoder-decoder"),adt.forEach(t),yao=r(J8e," \u2014 "),WP=n(J8e,"A",{href:!0});var ndt=s(WP);xao=r(ndt,"SpeechEncoderDecoderConfig"),ndt.forEach(t),$ao=r(J8e," (Speech Encoder decoder model)"),J8e.forEach(t),kao=i(L),Cg=n(L,"LI",{});var Y8e=s(Cg);ile=n(Y8e,"STRONG",{});var sdt=s(ile);Sao=r(sdt,"speech_to_text"),sdt.forEach(t),Rao=r(Y8e," \u2014 "),QP=n(Y8e,"A",{href:!0});var ldt=s(QP);Pao=r(ldt,"Speech2TextConfig"),ldt.forEach(t),Bao=r(Y8e," (Speech2Text model)"),Y8e.forEach(t),Iao=i(L),wg=n(L,"LI",{});var K8e=s(wg);dle=n(K8e,"STRONG",{});var idt=s(dle);Nao=r(idt,"speech_to_text_2"),idt.forEach(t),qao=r(K8e," \u2014 "),HP=n(K8e,"A",{href:!0});var ddt=s(HP);jao=r(ddt,"Speech2Text2Config"),ddt.forEach(t),Dao=r(K8e," (Speech2Text2 model)"),K8e.forEach(t),Gao=i(L),Ag=n(L,"LI",{});var Z8e=s(Ag);cle=n(Z8e,"STRONG",{});var cdt=s(cle);Oao=r(cdt,"splinter"),cdt.forEach(t),Vao=r(Z8e," \u2014 "),UP=n(Z8e,"A",{href:!0});var mdt=s(UP);Xao=r(mdt,"SplinterConfig"),mdt.forEach(t),zao=r(Z8e," (Splinter model)"),Z8e.forEach(t),Wao=i(L),Lg=n(L,"LI",{});var e9e=s(Lg);mle=n(e9e,"STRONG",{});var fdt=s(mle);Qao=r(fdt,"squeezebert"),fdt.forEach(t),Hao=r(e9e," \u2014 "),JP=n(e9e,"A",{href:!0});var gdt=s(JP);Uao=r(gdt,"SqueezeBertConfig"),gdt.forEach(t),Jao=r(e9e," (SqueezeBERT model)"),e9e.forEach(t),Yao=i(L),yg=n(L,"LI",{});var o9e=s(yg);fle=n(o9e,"STRONG",{});var hdt=s(fle);Kao=r(hdt,"swin"),hdt.forEach(t),Zao=r(o9e," \u2014 "),YP=n(o9e,"A",{href:!0});var udt=s(YP);eno=r(udt,"SwinConfig"),udt.forEach(t),ono=r(o9e," (Swin Transformer model)"),o9e.forEach(t),rno=i(L),xg=n(L,"LI",{});var r9e=s(xg);gle=n(r9e,"STRONG",{});var pdt=s(gle);tno=r(pdt,"swinv2"),pdt.forEach(t),ano=r(r9e," \u2014 "),KP=n(r9e,"A",{href:!0});var _dt=s(KP);nno=r(_dt,"Swinv2Config"),_dt.forEach(t),sno=r(r9e," (Swin Transformer V2 model)"),r9e.forEach(t),lno=i(L),$g=n(L,"LI",{});var t9e=s($g);hle=n(t9e,"STRONG",{});var bdt=s(hle);ino=r(bdt,"t5"),bdt.forEach(t),dno=r(t9e," \u2014 "),ZP=n(t9e,"A",{href:!0});var vdt=s(ZP);cno=r(vdt,"T5Config"),vdt.forEach(t),mno=r(t9e," (T5 model)"),t9e.forEach(t),fno=i(L),kg=n(L,"LI",{});var a9e=s(kg);ule=n(a9e,"STRONG",{});var Fdt=s(ule);gno=r(Fdt,"tapas"),Fdt.forEach(t),hno=r(a9e," \u2014 "),eB=n(a9e,"A",{href:!0});var Tdt=s(eB);uno=r(Tdt,"TapasConfig"),Tdt.forEach(t),pno=r(a9e," (TAPAS model)"),a9e.forEach(t),_no=i(L),Sg=n(L,"LI",{});var n9e=s(Sg);ple=n(n9e,"STRONG",{});var Mdt=s(ple);bno=r(Mdt,"trajectory_transformer"),Mdt.forEach(t),vno=r(n9e," \u2014 "),oB=n(n9e,"A",{href:!0});var Edt=s(oB);Fno=r(Edt,"TrajectoryTransformerConfig"),Edt.forEach(t),Tno=r(n9e," (Trajectory Transformer model)"),n9e.forEach(t),Mno=i(L),Rg=n(L,"LI",{});var s9e=s(Rg);_le=n(s9e,"STRONG",{});var Cdt=s(_le);Eno=r(Cdt,"transfo-xl"),Cdt.forEach(t),Cno=r(s9e," \u2014 "),rB=n(s9e,"A",{href:!0});var wdt=s(rB);wno=r(wdt,"TransfoXLConfig"),wdt.forEach(t),Ano=r(s9e," (Transformer-XL model)"),s9e.forEach(t),Lno=i(L),Pg=n(L,"LI",{});var l9e=s(Pg);ble=n(l9e,"STRONG",{});var Adt=s(ble);yno=r(Adt,"trocr"),Adt.forEach(t),xno=r(l9e," \u2014 "),tB=n(l9e,"A",{href:!0});var Ldt=s(tB);$no=r(Ldt,"TrOCRConfig"),Ldt.forEach(t),kno=r(l9e," (TrOCR model)"),l9e.forEach(t),Sno=i(L),Bg=n(L,"LI",{});var i9e=s(Bg);vle=n(i9e,"STRONG",{});var ydt=s(vle);Rno=r(ydt,"unispeech"),ydt.forEach(t),Pno=r(i9e," \u2014 "),aB=n(i9e,"A",{href:!0});var xdt=s(aB);Bno=r(xdt,"UniSpeechConfig"),xdt.forEach(t),Ino=r(i9e," (UniSpeech model)"),i9e.forEach(t),Nno=i(L),Ig=n(L,"LI",{});var d9e=s(Ig);Fle=n(d9e,"STRONG",{});var $dt=s(Fle);qno=r($dt,"unispeech-sat"),$dt.forEach(t),jno=r(d9e," \u2014 "),nB=n(d9e,"A",{href:!0});var kdt=s(nB);Dno=r(kdt,"UniSpeechSatConfig"),kdt.forEach(t),Gno=r(d9e," (UniSpeechSat model)"),d9e.forEach(t),Ono=i(L),Ng=n(L,"LI",{});var c9e=s(Ng);Tle=n(c9e,"STRONG",{});var Sdt=s(Tle);Vno=r(Sdt,"van"),Sdt.forEach(t),Xno=r(c9e," \u2014 "),sB=n(c9e,"A",{href:!0});var Rdt=s(sB);zno=r(Rdt,"VanConfig"),Rdt.forEach(t),Wno=r(c9e," (VAN model)"),c9e.forEach(t),Qno=i(L),qg=n(L,"LI",{});var m9e=s(qg);Mle=n(m9e,"STRONG",{});var Pdt=s(Mle);Hno=r(Pdt,"vilt"),Pdt.forEach(t),Uno=r(m9e," \u2014 "),lB=n(m9e,"A",{href:!0});var Bdt=s(lB);Jno=r(Bdt,"ViltConfig"),Bdt.forEach(t),Yno=r(m9e," (ViLT model)"),m9e.forEach(t),Kno=i(L),jg=n(L,"LI",{});var f9e=s(jg);Ele=n(f9e,"STRONG",{});var Idt=s(Ele);Zno=r(Idt,"vision-encoder-decoder"),Idt.forEach(t),eso=r(f9e," \u2014 "),iB=n(f9e,"A",{href:!0});var Ndt=s(iB);oso=r(Ndt,"VisionEncoderDecoderConfig"),Ndt.forEach(t),rso=r(f9e," (Vision Encoder decoder model)"),f9e.forEach(t),tso=i(L),Dg=n(L,"LI",{});var g9e=s(Dg);Cle=n(g9e,"STRONG",{});var qdt=s(Cle);aso=r(qdt,"vision-text-dual-encoder"),qdt.forEach(t),nso=r(g9e," \u2014 "),dB=n(g9e,"A",{href:!0});var jdt=s(dB);sso=r(jdt,"VisionTextDualEncoderConfig"),jdt.forEach(t),lso=r(g9e," (VisionTextDualEncoder model)"),g9e.forEach(t),iso=i(L),Gg=n(L,"LI",{});var h9e=s(Gg);wle=n(h9e,"STRONG",{});var Ddt=s(wle);dso=r(Ddt,"visual_bert"),Ddt.forEach(t),cso=r(h9e," \u2014 "),cB=n(h9e,"A",{href:!0});var Gdt=s(cB);mso=r(Gdt,"VisualBertConfig"),Gdt.forEach(t),fso=r(h9e," (VisualBERT model)"),h9e.forEach(t),gso=i(L),Og=n(L,"LI",{});var u9e=s(Og);Ale=n(u9e,"STRONG",{});var Odt=s(Ale);hso=r(Odt,"vit"),Odt.forEach(t),uso=r(u9e," \u2014 "),mB=n(u9e,"A",{href:!0});var Vdt=s(mB);pso=r(Vdt,"ViTConfig"),Vdt.forEach(t),_so=r(u9e," (ViT model)"),u9e.forEach(t),bso=i(L),Vg=n(L,"LI",{});var p9e=s(Vg);Lle=n(p9e,"STRONG",{});var Xdt=s(Lle);vso=r(Xdt,"vit_mae"),Xdt.forEach(t),Fso=r(p9e," \u2014 "),fB=n(p9e,"A",{href:!0});var zdt=s(fB);Tso=r(zdt,"ViTMAEConfig"),zdt.forEach(t),Mso=r(p9e," (ViTMAE model)"),p9e.forEach(t),Eso=i(L),Xg=n(L,"LI",{});var _9e=s(Xg);yle=n(_9e,"STRONG",{});var Wdt=s(yle);Cso=r(Wdt,"wav2vec2"),Wdt.forEach(t),wso=r(_9e," \u2014 "),gB=n(_9e,"A",{href:!0});var Qdt=s(gB);Aso=r(Qdt,"Wav2Vec2Config"),Qdt.forEach(t),Lso=r(_9e," (Wav2Vec2 model)"),_9e.forEach(t),yso=i(L),zg=n(L,"LI",{});var b9e=s(zg);xle=n(b9e,"STRONG",{});var Hdt=s(xle);xso=r(Hdt,"wav2vec2-conformer"),Hdt.forEach(t),$so=r(b9e," \u2014 "),hB=n(b9e,"A",{href:!0});var Udt=s(hB);kso=r(Udt,"Wav2Vec2ConformerConfig"),Udt.forEach(t),Sso=r(b9e," (Wav2Vec2-Conformer model)"),b9e.forEach(t),Rso=i(L),Wg=n(L,"LI",{});var v9e=s(Wg);$le=n(v9e,"STRONG",{});var Jdt=s($le);Pso=r(Jdt,"wavlm"),Jdt.forEach(t),Bso=r(v9e," \u2014 "),uB=n(v9e,"A",{href:!0});var Ydt=s(uB);Iso=r(Ydt,"WavLMConfig"),Ydt.forEach(t),Nso=r(v9e," (WavLM model)"),v9e.forEach(t),qso=i(L),Qg=n(L,"LI",{});var F9e=s(Qg);kle=n(F9e,"STRONG",{});var Kdt=s(kle);jso=r(Kdt,"xglm"),Kdt.forEach(t),Dso=r(F9e," \u2014 "),pB=n(F9e,"A",{href:!0});var Zdt=s(pB);Gso=r(Zdt,"XGLMConfig"),Zdt.forEach(t),Oso=r(F9e," (XGLM model)"),F9e.forEach(t),Vso=i(L),Hg=n(L,"LI",{});var T9e=s(Hg);Sle=n(T9e,"STRONG",{});var ect=s(Sle);Xso=r(ect,"xlm"),ect.forEach(t),zso=r(T9e," \u2014 "),_B=n(T9e,"A",{href:!0});var oct=s(_B);Wso=r(oct,"XLMConfig"),oct.forEach(t),Qso=r(T9e," (XLM model)"),T9e.forEach(t),Hso=i(L),Ug=n(L,"LI",{});var M9e=s(Ug);Rle=n(M9e,"STRONG",{});var rct=s(Rle);Uso=r(rct,"xlm-prophetnet"),rct.forEach(t),Jso=r(M9e," \u2014 "),bB=n(M9e,"A",{href:!0});var tct=s(bB);Yso=r(tct,"XLMProphetNetConfig"),tct.forEach(t),Kso=r(M9e," (XLM-ProphetNet model)"),M9e.forEach(t),Zso=i(L),Jg=n(L,"LI",{});var E9e=s(Jg);Ple=n(E9e,"STRONG",{});var act=s(Ple);elo=r(act,"xlm-roberta"),act.forEach(t),olo=r(E9e," \u2014 "),vB=n(E9e,"A",{href:!0});var nct=s(vB);rlo=r(nct,"XLMRobertaConfig"),nct.forEach(t),tlo=r(E9e," (XLM-RoBERTa model)"),E9e.forEach(t),alo=i(L),Yg=n(L,"LI",{});var C9e=s(Yg);Ble=n(C9e,"STRONG",{});var sct=s(Ble);nlo=r(sct,"xlm-roberta-xl"),sct.forEach(t),slo=r(C9e," \u2014 "),FB=n(C9e,"A",{href:!0});var lct=s(FB);llo=r(lct,"XLMRobertaXLConfig"),lct.forEach(t),ilo=r(C9e," (XLM-RoBERTa-XL model)"),C9e.forEach(t),dlo=i(L),Kg=n(L,"LI",{});var w9e=s(Kg);Ile=n(w9e,"STRONG",{});var ict=s(Ile);clo=r(ict,"xlnet"),ict.forEach(t),mlo=r(w9e," \u2014 "),TB=n(w9e,"A",{href:!0});var dct=s(TB);flo=r(dct,"XLNetConfig"),dct.forEach(t),glo=r(w9e," (XLNet model)"),w9e.forEach(t),hlo=i(L),Zg=n(L,"LI",{});var A9e=s(Zg);Nle=n(A9e,"STRONG",{});var cct=s(Nle);ulo=r(cct,"yolos"),cct.forEach(t),plo=r(A9e," \u2014 "),MB=n(A9e,"A",{href:!0});var mct=s(MB);_lo=r(mct,"YolosConfig"),mct.forEach(t),blo=r(A9e," (YOLOS model)"),A9e.forEach(t),vlo=i(L),eh=n(L,"LI",{});var L9e=s(eh);qle=n(L9e,"STRONG",{});var fct=s(qle);Flo=r(fct,"yoso"),fct.forEach(t),Tlo=r(L9e," \u2014 "),EB=n(L9e,"A",{href:!0});var gct=s(EB);Mlo=r(gct,"YosoConfig"),gct.forEach(t),Elo=r(L9e," (YOSO model)"),L9e.forEach(t),L.forEach(t),Clo=i(st),T(oh.$$.fragment,st),st.forEach(t),wlo=i(nt),rh=n(nt,"DIV",{class:!0});var BQe=s(rh);T(Ry.$$.fragment,BQe),Alo=i(BQe),jle=n(BQe,"P",{});var hct=s(jle);Llo=r(hct,"Register a new configuration for this class."),hct.forEach(t),BQe.forEach(t),nt.forEach(t),Ize=i(m),Di=n(m,"H2",{class:!0});var IQe=s(Di);th=n(IQe,"A",{id:!0,class:!0,href:!0});var uct=s(th);Dle=n(uct,"SPAN",{});var pct=s(Dle);T(Py.$$.fragment,pct),pct.forEach(t),uct.forEach(t),ylo=i(IQe),Gle=n(IQe,"SPAN",{});var _ct=s(Gle);xlo=r(_ct,"AutoTokenizer"),_ct.forEach(t),IQe.forEach(t),Nze=i(m),yo=n(m,"DIV",{class:!0});var ol=s(yo);T(By.$$.fragment,ol),$lo=i(ol),Iy=n(ol,"P",{});var NQe=s(Iy);klo=r(NQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CB=n(NQe,"A",{href:!0});var bct=s(CB);Slo=r(bct,"AutoTokenizer.from_pretrained()"),bct.forEach(t),Rlo=r(NQe," class method."),NQe.forEach(t),Plo=i(ol),Ny=n(ol,"P",{});var qQe=s(Ny);Blo=r(qQe,"This class cannot be instantiated directly using "),Ole=n(qQe,"CODE",{});var vct=s(Ole);Ilo=r(vct,"__init__()"),vct.forEach(t),Nlo=r(qQe," (throws an error)."),qQe.forEach(t),qlo=i(ol),xr=n(ol,"DIV",{class:!0});var rl=s(xr);T(qy.$$.fragment,rl),jlo=i(rl),Vle=n(rl,"P",{});var Fct=s(Vle);Dlo=r(Fct,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Fct.forEach(t),Glo=i(rl),Pa=n(rl,"P",{});var L7=s(Pa);Olo=r(L7,"The tokenizer class to instantiate is selected based on the "),Xle=n(L7,"CODE",{});var Tct=s(Xle);Vlo=r(Tct,"model_type"),Tct.forEach(t),Xlo=r(L7,` property of the config object (either
passed as an argument or loaded from `),zle=n(L7,"CODE",{});var Mct=s(zle);zlo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),Wlo=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(L7,"CODE",{});var Ect=s(Wle);Qlo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),Hlo=r(L7,":"),L7.forEach(t),Ulo=i(rl),k=n(rl,"UL",{});var S=s(k);Dn=n(S,"LI",{});var Xk=s(Dn);Qle=n(Xk,"STRONG",{});var Cct=s(Qle);Jlo=r(Cct,"albert"),Cct.forEach(t),Ylo=r(Xk," \u2014 "),wB=n(Xk,"A",{href:!0});var wct=s(wB);Klo=r(wct,"AlbertTokenizer"),wct.forEach(t),Zlo=r(Xk," or "),AB=n(Xk,"A",{href:!0});var Act=s(AB);eio=r(Act,"AlbertTokenizerFast"),Act.forEach(t),oio=r(Xk," (ALBERT model)"),Xk.forEach(t),rio=i(S),Gn=n(S,"LI",{});var zk=s(Gn);Hle=n(zk,"STRONG",{});var Lct=s(Hle);tio=r(Lct,"bart"),Lct.forEach(t),aio=r(zk," \u2014 "),LB=n(zk,"A",{href:!0});var yct=s(LB);nio=r(yct,"BartTokenizer"),yct.forEach(t),sio=r(zk," or "),yB=n(zk,"A",{href:!0});var xct=s(yB);lio=r(xct,"BartTokenizerFast"),xct.forEach(t),iio=r(zk," (BART model)"),zk.forEach(t),dio=i(S),On=n(S,"LI",{});var Wk=s(On);Ule=n(Wk,"STRONG",{});var $ct=s(Ule);cio=r($ct,"barthez"),$ct.forEach(t),mio=r(Wk," \u2014 "),xB=n(Wk,"A",{href:!0});var kct=s(xB);fio=r(kct,"BarthezTokenizer"),kct.forEach(t),gio=r(Wk," or "),$B=n(Wk,"A",{href:!0});var Sct=s($B);hio=r(Sct,"BarthezTokenizerFast"),Sct.forEach(t),uio=r(Wk," (BARThez model)"),Wk.forEach(t),pio=i(S),ah=n(S,"LI",{});var y9e=s(ah);Jle=n(y9e,"STRONG",{});var Rct=s(Jle);_io=r(Rct,"bartpho"),Rct.forEach(t),bio=r(y9e," \u2014 "),kB=n(y9e,"A",{href:!0});var Pct=s(kB);vio=r(Pct,"BartphoTokenizer"),Pct.forEach(t),Fio=r(y9e," (BARTpho model)"),y9e.forEach(t),Tio=i(S),Vn=n(S,"LI",{});var Qk=s(Vn);Yle=n(Qk,"STRONG",{});var Bct=s(Yle);Mio=r(Bct,"bert"),Bct.forEach(t),Eio=r(Qk," \u2014 "),SB=n(Qk,"A",{href:!0});var Ict=s(SB);Cio=r(Ict,"BertTokenizer"),Ict.forEach(t),wio=r(Qk," or "),RB=n(Qk,"A",{href:!0});var Nct=s(RB);Aio=r(Nct,"BertTokenizerFast"),Nct.forEach(t),Lio=r(Qk," (BERT model)"),Qk.forEach(t),yio=i(S),nh=n(S,"LI",{});var x9e=s(nh);Kle=n(x9e,"STRONG",{});var qct=s(Kle);xio=r(qct,"bert-generation"),qct.forEach(t),$io=r(x9e," \u2014 "),PB=n(x9e,"A",{href:!0});var jct=s(PB);kio=r(jct,"BertGenerationTokenizer"),jct.forEach(t),Sio=r(x9e," (Bert Generation model)"),x9e.forEach(t),Rio=i(S),sh=n(S,"LI",{});var $9e=s(sh);Zle=n($9e,"STRONG",{});var Dct=s(Zle);Pio=r(Dct,"bert-japanese"),Dct.forEach(t),Bio=r($9e," \u2014 "),BB=n($9e,"A",{href:!0});var Gct=s(BB);Iio=r(Gct,"BertJapaneseTokenizer"),Gct.forEach(t),Nio=r($9e," (BertJapanese model)"),$9e.forEach(t),qio=i(S),lh=n(S,"LI",{});var k9e=s(lh);eie=n(k9e,"STRONG",{});var Oct=s(eie);jio=r(Oct,"bertweet"),Oct.forEach(t),Dio=r(k9e," \u2014 "),IB=n(k9e,"A",{href:!0});var Vct=s(IB);Gio=r(Vct,"BertweetTokenizer"),Vct.forEach(t),Oio=r(k9e," (BERTweet model)"),k9e.forEach(t),Vio=i(S),Xn=n(S,"LI",{});var Hk=s(Xn);oie=n(Hk,"STRONG",{});var Xct=s(oie);Xio=r(Xct,"big_bird"),Xct.forEach(t),zio=r(Hk," \u2014 "),NB=n(Hk,"A",{href:!0});var zct=s(NB);Wio=r(zct,"BigBirdTokenizer"),zct.forEach(t),Qio=r(Hk," or "),qB=n(Hk,"A",{href:!0});var Wct=s(qB);Hio=r(Wct,"BigBirdTokenizerFast"),Wct.forEach(t),Uio=r(Hk," (BigBird model)"),Hk.forEach(t),Jio=i(S),zn=n(S,"LI",{});var Uk=s(zn);rie=n(Uk,"STRONG",{});var Qct=s(rie);Yio=r(Qct,"bigbird_pegasus"),Qct.forEach(t),Kio=r(Uk," \u2014 "),jB=n(Uk,"A",{href:!0});var Hct=s(jB);Zio=r(Hct,"PegasusTokenizer"),Hct.forEach(t),edo=r(Uk," or "),DB=n(Uk,"A",{href:!0});var Uct=s(DB);odo=r(Uct,"PegasusTokenizerFast"),Uct.forEach(t),rdo=r(Uk," (BigBird-Pegasus model)"),Uk.forEach(t),tdo=i(S),Wn=n(S,"LI",{});var Jk=s(Wn);tie=n(Jk,"STRONG",{});var Jct=s(tie);ado=r(Jct,"blenderbot"),Jct.forEach(t),ndo=r(Jk," \u2014 "),GB=n(Jk,"A",{href:!0});var Yct=s(GB);sdo=r(Yct,"BlenderbotTokenizer"),Yct.forEach(t),ldo=r(Jk," or "),OB=n(Jk,"A",{href:!0});var Kct=s(OB);ido=r(Kct,"BlenderbotTokenizerFast"),Kct.forEach(t),ddo=r(Jk," (Blenderbot model)"),Jk.forEach(t),cdo=i(S),ih=n(S,"LI",{});var S9e=s(ih);aie=n(S9e,"STRONG",{});var Zct=s(aie);mdo=r(Zct,"blenderbot-small"),Zct.forEach(t),fdo=r(S9e," \u2014 "),VB=n(S9e,"A",{href:!0});var emt=s(VB);gdo=r(emt,"BlenderbotSmallTokenizer"),emt.forEach(t),hdo=r(S9e," (BlenderbotSmall model)"),S9e.forEach(t),udo=i(S),dh=n(S,"LI",{});var R9e=s(dh);nie=n(R9e,"STRONG",{});var omt=s(nie);pdo=r(omt,"bloom"),omt.forEach(t),_do=r(R9e," \u2014 "),XB=n(R9e,"A",{href:!0});var rmt=s(XB);bdo=r(rmt,"BloomTokenizerFast"),rmt.forEach(t),vdo=r(R9e," (BLOOM model)"),R9e.forEach(t),Fdo=i(S),ch=n(S,"LI",{});var P9e=s(ch);sie=n(P9e,"STRONG",{});var tmt=s(sie);Tdo=r(tmt,"byt5"),tmt.forEach(t),Mdo=r(P9e," \u2014 "),zB=n(P9e,"A",{href:!0});var amt=s(zB);Edo=r(amt,"ByT5Tokenizer"),amt.forEach(t),Cdo=r(P9e," (ByT5 model)"),P9e.forEach(t),wdo=i(S),Qn=n(S,"LI",{});var Yk=s(Qn);lie=n(Yk,"STRONG",{});var nmt=s(lie);Ado=r(nmt,"camembert"),nmt.forEach(t),Ldo=r(Yk," \u2014 "),WB=n(Yk,"A",{href:!0});var smt=s(WB);ydo=r(smt,"CamembertTokenizer"),smt.forEach(t),xdo=r(Yk," or "),QB=n(Yk,"A",{href:!0});var lmt=s(QB);$do=r(lmt,"CamembertTokenizerFast"),lmt.forEach(t),kdo=r(Yk," (CamemBERT model)"),Yk.forEach(t),Sdo=i(S),mh=n(S,"LI",{});var B9e=s(mh);iie=n(B9e,"STRONG",{});var imt=s(iie);Rdo=r(imt,"canine"),imt.forEach(t),Pdo=r(B9e," \u2014 "),HB=n(B9e,"A",{href:!0});var dmt=s(HB);Bdo=r(dmt,"CanineTokenizer"),dmt.forEach(t),Ido=r(B9e," (CANINE model)"),B9e.forEach(t),Ndo=i(S),Hn=n(S,"LI",{});var Kk=s(Hn);die=n(Kk,"STRONG",{});var cmt=s(die);qdo=r(cmt,"clip"),cmt.forEach(t),jdo=r(Kk," \u2014 "),UB=n(Kk,"A",{href:!0});var mmt=s(UB);Ddo=r(mmt,"CLIPTokenizer"),mmt.forEach(t),Gdo=r(Kk," or "),JB=n(Kk,"A",{href:!0});var fmt=s(JB);Odo=r(fmt,"CLIPTokenizerFast"),fmt.forEach(t),Vdo=r(Kk," (CLIP model)"),Kk.forEach(t),Xdo=i(S),Un=n(S,"LI",{});var Zk=s(Un);cie=n(Zk,"STRONG",{});var gmt=s(cie);zdo=r(gmt,"codegen"),gmt.forEach(t),Wdo=r(Zk," \u2014 "),YB=n(Zk,"A",{href:!0});var hmt=s(YB);Qdo=r(hmt,"CodeGenTokenizer"),hmt.forEach(t),Hdo=r(Zk," or "),KB=n(Zk,"A",{href:!0});var umt=s(KB);Udo=r(umt,"CodeGenTokenizerFast"),umt.forEach(t),Jdo=r(Zk," (CodeGen model)"),Zk.forEach(t),Ydo=i(S),Jn=n(S,"LI",{});var eS=s(Jn);mie=n(eS,"STRONG",{});var pmt=s(mie);Kdo=r(pmt,"convbert"),pmt.forEach(t),Zdo=r(eS," \u2014 "),ZB=n(eS,"A",{href:!0});var _mt=s(ZB);eco=r(_mt,"ConvBertTokenizer"),_mt.forEach(t),oco=r(eS," or "),eI=n(eS,"A",{href:!0});var bmt=s(eI);rco=r(bmt,"ConvBertTokenizerFast"),bmt.forEach(t),tco=r(eS," (ConvBERT model)"),eS.forEach(t),aco=i(S),Yn=n(S,"LI",{});var oS=s(Yn);fie=n(oS,"STRONG",{});var vmt=s(fie);nco=r(vmt,"cpm"),vmt.forEach(t),sco=r(oS," \u2014 "),oI=n(oS,"A",{href:!0});var Fmt=s(oI);lco=r(Fmt,"CpmTokenizer"),Fmt.forEach(t),ico=r(oS," or "),rI=n(oS,"A",{href:!0});var Tmt=s(rI);dco=r(Tmt,"CpmTokenizerFast"),Tmt.forEach(t),cco=r(oS," (CPM model)"),oS.forEach(t),mco=i(S),fh=n(S,"LI",{});var I9e=s(fh);gie=n(I9e,"STRONG",{});var Mmt=s(gie);fco=r(Mmt,"ctrl"),Mmt.forEach(t),gco=r(I9e," \u2014 "),tI=n(I9e,"A",{href:!0});var Emt=s(tI);hco=r(Emt,"CTRLTokenizer"),Emt.forEach(t),uco=r(I9e," (CTRL model)"),I9e.forEach(t),pco=i(S),Kn=n(S,"LI",{});var rS=s(Kn);hie=n(rS,"STRONG",{});var Cmt=s(hie);_co=r(Cmt,"data2vec-text"),Cmt.forEach(t),bco=r(rS," \u2014 "),aI=n(rS,"A",{href:!0});var wmt=s(aI);vco=r(wmt,"RobertaTokenizer"),wmt.forEach(t),Fco=r(rS," or "),nI=n(rS,"A",{href:!0});var Amt=s(nI);Tco=r(Amt,"RobertaTokenizerFast"),Amt.forEach(t),Mco=r(rS," (Data2VecText model)"),rS.forEach(t),Eco=i(S),Zn=n(S,"LI",{});var tS=s(Zn);uie=n(tS,"STRONG",{});var Lmt=s(uie);Cco=r(Lmt,"deberta"),Lmt.forEach(t),wco=r(tS," \u2014 "),sI=n(tS,"A",{href:!0});var ymt=s(sI);Aco=r(ymt,"DebertaTokenizer"),ymt.forEach(t),Lco=r(tS," or "),lI=n(tS,"A",{href:!0});var xmt=s(lI);yco=r(xmt,"DebertaTokenizerFast"),xmt.forEach(t),xco=r(tS," (DeBERTa model)"),tS.forEach(t),$co=i(S),es=n(S,"LI",{});var aS=s(es);pie=n(aS,"STRONG",{});var $mt=s(pie);kco=r($mt,"deberta-v2"),$mt.forEach(t),Sco=r(aS," \u2014 "),iI=n(aS,"A",{href:!0});var kmt=s(iI);Rco=r(kmt,"DebertaV2Tokenizer"),kmt.forEach(t),Pco=r(aS," or "),dI=n(aS,"A",{href:!0});var Smt=s(dI);Bco=r(Smt,"DebertaV2TokenizerFast"),Smt.forEach(t),Ico=r(aS," (DeBERTa-v2 model)"),aS.forEach(t),Nco=i(S),os=n(S,"LI",{});var nS=s(os);_ie=n(nS,"STRONG",{});var Rmt=s(_ie);qco=r(Rmt,"distilbert"),Rmt.forEach(t),jco=r(nS," \u2014 "),cI=n(nS,"A",{href:!0});var Pmt=s(cI);Dco=r(Pmt,"DistilBertTokenizer"),Pmt.forEach(t),Gco=r(nS," or "),mI=n(nS,"A",{href:!0});var Bmt=s(mI);Oco=r(Bmt,"DistilBertTokenizerFast"),Bmt.forEach(t),Vco=r(nS," (DistilBERT model)"),nS.forEach(t),Xco=i(S),rs=n(S,"LI",{});var sS=s(rs);bie=n(sS,"STRONG",{});var Imt=s(bie);zco=r(Imt,"dpr"),Imt.forEach(t),Wco=r(sS," \u2014 "),fI=n(sS,"A",{href:!0});var Nmt=s(fI);Qco=r(Nmt,"DPRQuestionEncoderTokenizer"),Nmt.forEach(t),Hco=r(sS," or "),gI=n(sS,"A",{href:!0});var qmt=s(gI);Uco=r(qmt,"DPRQuestionEncoderTokenizerFast"),qmt.forEach(t),Jco=r(sS," (DPR model)"),sS.forEach(t),Yco=i(S),ts=n(S,"LI",{});var lS=s(ts);vie=n(lS,"STRONG",{});var jmt=s(vie);Kco=r(jmt,"electra"),jmt.forEach(t),Zco=r(lS," \u2014 "),hI=n(lS,"A",{href:!0});var Dmt=s(hI);emo=r(Dmt,"ElectraTokenizer"),Dmt.forEach(t),omo=r(lS," or "),uI=n(lS,"A",{href:!0});var Gmt=s(uI);rmo=r(Gmt,"ElectraTokenizerFast"),Gmt.forEach(t),tmo=r(lS," (ELECTRA model)"),lS.forEach(t),amo=i(S),gh=n(S,"LI",{});var N9e=s(gh);Fie=n(N9e,"STRONG",{});var Omt=s(Fie);nmo=r(Omt,"flaubert"),Omt.forEach(t),smo=r(N9e," \u2014 "),pI=n(N9e,"A",{href:!0});var Vmt=s(pI);lmo=r(Vmt,"FlaubertTokenizer"),Vmt.forEach(t),imo=r(N9e," (FlauBERT model)"),N9e.forEach(t),dmo=i(S),as=n(S,"LI",{});var iS=s(as);Tie=n(iS,"STRONG",{});var Xmt=s(Tie);cmo=r(Xmt,"fnet"),Xmt.forEach(t),mmo=r(iS," \u2014 "),_I=n(iS,"A",{href:!0});var zmt=s(_I);fmo=r(zmt,"FNetTokenizer"),zmt.forEach(t),gmo=r(iS," or "),bI=n(iS,"A",{href:!0});var Wmt=s(bI);hmo=r(Wmt,"FNetTokenizerFast"),Wmt.forEach(t),umo=r(iS," (FNet model)"),iS.forEach(t),pmo=i(S),hh=n(S,"LI",{});var q9e=s(hh);Mie=n(q9e,"STRONG",{});var Qmt=s(Mie);_mo=r(Qmt,"fsmt"),Qmt.forEach(t),bmo=r(q9e," \u2014 "),vI=n(q9e,"A",{href:!0});var Hmt=s(vI);vmo=r(Hmt,"FSMTTokenizer"),Hmt.forEach(t),Fmo=r(q9e," (FairSeq Machine-Translation model)"),q9e.forEach(t),Tmo=i(S),ns=n(S,"LI",{});var dS=s(ns);Eie=n(dS,"STRONG",{});var Umt=s(Eie);Mmo=r(Umt,"funnel"),Umt.forEach(t),Emo=r(dS," \u2014 "),FI=n(dS,"A",{href:!0});var Jmt=s(FI);Cmo=r(Jmt,"FunnelTokenizer"),Jmt.forEach(t),wmo=r(dS," or "),TI=n(dS,"A",{href:!0});var Ymt=s(TI);Amo=r(Ymt,"FunnelTokenizerFast"),Ymt.forEach(t),Lmo=r(dS," (Funnel Transformer model)"),dS.forEach(t),ymo=i(S),ss=n(S,"LI",{});var cS=s(ss);Cie=n(cS,"STRONG",{});var Kmt=s(Cie);xmo=r(Kmt,"gpt2"),Kmt.forEach(t),$mo=r(cS," \u2014 "),MI=n(cS,"A",{href:!0});var Zmt=s(MI);kmo=r(Zmt,"GPT2Tokenizer"),Zmt.forEach(t),Smo=r(cS," or "),EI=n(cS,"A",{href:!0});var eft=s(EI);Rmo=r(eft,"GPT2TokenizerFast"),eft.forEach(t),Pmo=r(cS," (OpenAI GPT-2 model)"),cS.forEach(t),Bmo=i(S),ls=n(S,"LI",{});var mS=s(ls);wie=n(mS,"STRONG",{});var oft=s(wie);Imo=r(oft,"gpt_neo"),oft.forEach(t),Nmo=r(mS," \u2014 "),CI=n(mS,"A",{href:!0});var rft=s(CI);qmo=r(rft,"GPT2Tokenizer"),rft.forEach(t),jmo=r(mS," or "),wI=n(mS,"A",{href:!0});var tft=s(wI);Dmo=r(tft,"GPT2TokenizerFast"),tft.forEach(t),Gmo=r(mS," (GPT Neo model)"),mS.forEach(t),Omo=i(S),uh=n(S,"LI",{});var j9e=s(uh);Aie=n(j9e,"STRONG",{});var aft=s(Aie);Vmo=r(aft,"gpt_neox"),aft.forEach(t),Xmo=r(j9e," \u2014 "),AI=n(j9e,"A",{href:!0});var nft=s(AI);zmo=r(nft,"GPTNeoXTokenizerFast"),nft.forEach(t),Wmo=r(j9e," (GPT NeoX model)"),j9e.forEach(t),Qmo=i(S),is=n(S,"LI",{});var fS=s(is);Lie=n(fS,"STRONG",{});var sft=s(Lie);Hmo=r(sft,"gptj"),sft.forEach(t),Umo=r(fS," \u2014 "),LI=n(fS,"A",{href:!0});var lft=s(LI);Jmo=r(lft,"GPT2Tokenizer"),lft.forEach(t),Ymo=r(fS," or "),yI=n(fS,"A",{href:!0});var ift=s(yI);Kmo=r(ift,"GPT2TokenizerFast"),ift.forEach(t),Zmo=r(fS," (GPT-J model)"),fS.forEach(t),efo=i(S),ds=n(S,"LI",{});var gS=s(ds);yie=n(gS,"STRONG",{});var dft=s(yie);ofo=r(dft,"groupvit"),dft.forEach(t),rfo=r(gS," \u2014 "),xI=n(gS,"A",{href:!0});var cft=s(xI);tfo=r(cft,"CLIPTokenizer"),cft.forEach(t),afo=r(gS," or "),$I=n(gS,"A",{href:!0});var mft=s($I);nfo=r(mft,"CLIPTokenizerFast"),mft.forEach(t),sfo=r(gS," (GroupViT model)"),gS.forEach(t),lfo=i(S),cs=n(S,"LI",{});var hS=s(cs);xie=n(hS,"STRONG",{});var fft=s(xie);ifo=r(fft,"herbert"),fft.forEach(t),dfo=r(hS," \u2014 "),kI=n(hS,"A",{href:!0});var gft=s(kI);cfo=r(gft,"HerbertTokenizer"),gft.forEach(t),mfo=r(hS," or "),SI=n(hS,"A",{href:!0});var hft=s(SI);ffo=r(hft,"HerbertTokenizerFast"),hft.forEach(t),gfo=r(hS," (HerBERT model)"),hS.forEach(t),hfo=i(S),ph=n(S,"LI",{});var D9e=s(ph);$ie=n(D9e,"STRONG",{});var uft=s($ie);ufo=r(uft,"hubert"),uft.forEach(t),pfo=r(D9e," \u2014 "),RI=n(D9e,"A",{href:!0});var pft=s(RI);_fo=r(pft,"Wav2Vec2CTCTokenizer"),pft.forEach(t),bfo=r(D9e," (Hubert model)"),D9e.forEach(t),vfo=i(S),ms=n(S,"LI",{});var uS=s(ms);kie=n(uS,"STRONG",{});var _ft=s(kie);Ffo=r(_ft,"ibert"),_ft.forEach(t),Tfo=r(uS," \u2014 "),PI=n(uS,"A",{href:!0});var bft=s(PI);Mfo=r(bft,"RobertaTokenizer"),bft.forEach(t),Efo=r(uS," or "),BI=n(uS,"A",{href:!0});var vft=s(BI);Cfo=r(vft,"RobertaTokenizerFast"),vft.forEach(t),wfo=r(uS," (I-BERT model)"),uS.forEach(t),Afo=i(S),fs=n(S,"LI",{});var pS=s(fs);Sie=n(pS,"STRONG",{});var Fft=s(Sie);Lfo=r(Fft,"layoutlm"),Fft.forEach(t),yfo=r(pS," \u2014 "),II=n(pS,"A",{href:!0});var Tft=s(II);xfo=r(Tft,"LayoutLMTokenizer"),Tft.forEach(t),$fo=r(pS," or "),NI=n(pS,"A",{href:!0});var Mft=s(NI);kfo=r(Mft,"LayoutLMTokenizerFast"),Mft.forEach(t),Sfo=r(pS," (LayoutLM model)"),pS.forEach(t),Rfo=i(S),gs=n(S,"LI",{});var _S=s(gs);Rie=n(_S,"STRONG",{});var Eft=s(Rie);Pfo=r(Eft,"layoutlmv2"),Eft.forEach(t),Bfo=r(_S," \u2014 "),qI=n(_S,"A",{href:!0});var Cft=s(qI);Ifo=r(Cft,"LayoutLMv2Tokenizer"),Cft.forEach(t),Nfo=r(_S," or "),jI=n(_S,"A",{href:!0});var wft=s(jI);qfo=r(wft,"LayoutLMv2TokenizerFast"),wft.forEach(t),jfo=r(_S," (LayoutLMv2 model)"),_S.forEach(t),Dfo=i(S),hs=n(S,"LI",{});var bS=s(hs);Pie=n(bS,"STRONG",{});var Aft=s(Pie);Gfo=r(Aft,"layoutlmv3"),Aft.forEach(t),Ofo=r(bS," \u2014 "),DI=n(bS,"A",{href:!0});var Lft=s(DI);Vfo=r(Lft,"LayoutLMv3Tokenizer"),Lft.forEach(t),Xfo=r(bS," or "),GI=n(bS,"A",{href:!0});var yft=s(GI);zfo=r(yft,"LayoutLMv3TokenizerFast"),yft.forEach(t),Wfo=r(bS," (LayoutLMv3 model)"),bS.forEach(t),Qfo=i(S),us=n(S,"LI",{});var vS=s(us);Bie=n(vS,"STRONG",{});var xft=s(Bie);Hfo=r(xft,"layoutxlm"),xft.forEach(t),Ufo=r(vS," \u2014 "),OI=n(vS,"A",{href:!0});var $ft=s(OI);Jfo=r($ft,"LayoutXLMTokenizer"),$ft.forEach(t),Yfo=r(vS," or "),VI=n(vS,"A",{href:!0});var kft=s(VI);Kfo=r(kft,"LayoutXLMTokenizerFast"),kft.forEach(t),Zfo=r(vS," (LayoutXLM model)"),vS.forEach(t),ego=i(S),ps=n(S,"LI",{});var FS=s(ps);Iie=n(FS,"STRONG",{});var Sft=s(Iie);ogo=r(Sft,"led"),Sft.forEach(t),rgo=r(FS," \u2014 "),XI=n(FS,"A",{href:!0});var Rft=s(XI);tgo=r(Rft,"LEDTokenizer"),Rft.forEach(t),ago=r(FS," or "),zI=n(FS,"A",{href:!0});var Pft=s(zI);ngo=r(Pft,"LEDTokenizerFast"),Pft.forEach(t),sgo=r(FS," (LED model)"),FS.forEach(t),lgo=i(S),_s=n(S,"LI",{});var TS=s(_s);Nie=n(TS,"STRONG",{});var Bft=s(Nie);igo=r(Bft,"longformer"),Bft.forEach(t),dgo=r(TS," \u2014 "),WI=n(TS,"A",{href:!0});var Ift=s(WI);cgo=r(Ift,"LongformerTokenizer"),Ift.forEach(t),mgo=r(TS," or "),QI=n(TS,"A",{href:!0});var Nft=s(QI);fgo=r(Nft,"LongformerTokenizerFast"),Nft.forEach(t),ggo=r(TS," (Longformer model)"),TS.forEach(t),hgo=i(S),bs=n(S,"LI",{});var MS=s(bs);qie=n(MS,"STRONG",{});var qft=s(qie);ugo=r(qft,"longt5"),qft.forEach(t),pgo=r(MS," \u2014 "),HI=n(MS,"A",{href:!0});var jft=s(HI);_go=r(jft,"T5Tokenizer"),jft.forEach(t),bgo=r(MS," or "),UI=n(MS,"A",{href:!0});var Dft=s(UI);vgo=r(Dft,"T5TokenizerFast"),Dft.forEach(t),Fgo=r(MS," (LongT5 model)"),MS.forEach(t),Tgo=i(S),_h=n(S,"LI",{});var G9e=s(_h);jie=n(G9e,"STRONG",{});var Gft=s(jie);Mgo=r(Gft,"luke"),Gft.forEach(t),Ego=r(G9e," \u2014 "),JI=n(G9e,"A",{href:!0});var Oft=s(JI);Cgo=r(Oft,"LukeTokenizer"),Oft.forEach(t),wgo=r(G9e," (LUKE model)"),G9e.forEach(t),Ago=i(S),vs=n(S,"LI",{});var ES=s(vs);Die=n(ES,"STRONG",{});var Vft=s(Die);Lgo=r(Vft,"lxmert"),Vft.forEach(t),ygo=r(ES," \u2014 "),YI=n(ES,"A",{href:!0});var Xft=s(YI);xgo=r(Xft,"LxmertTokenizer"),Xft.forEach(t),$go=r(ES," or "),KI=n(ES,"A",{href:!0});var zft=s(KI);kgo=r(zft,"LxmertTokenizerFast"),zft.forEach(t),Sgo=r(ES," (LXMERT model)"),ES.forEach(t),Rgo=i(S),bh=n(S,"LI",{});var O9e=s(bh);Gie=n(O9e,"STRONG",{});var Wft=s(Gie);Pgo=r(Wft,"m2m_100"),Wft.forEach(t),Bgo=r(O9e," \u2014 "),ZI=n(O9e,"A",{href:!0});var Qft=s(ZI);Igo=r(Qft,"M2M100Tokenizer"),Qft.forEach(t),Ngo=r(O9e," (M2M100 model)"),O9e.forEach(t),qgo=i(S),vh=n(S,"LI",{});var V9e=s(vh);Oie=n(V9e,"STRONG",{});var Hft=s(Oie);jgo=r(Hft,"marian"),Hft.forEach(t),Dgo=r(V9e," \u2014 "),eN=n(V9e,"A",{href:!0});var Uft=s(eN);Ggo=r(Uft,"MarianTokenizer"),Uft.forEach(t),Ogo=r(V9e," (Marian model)"),V9e.forEach(t),Vgo=i(S),Fs=n(S,"LI",{});var CS=s(Fs);Vie=n(CS,"STRONG",{});var Jft=s(Vie);Xgo=r(Jft,"mbart"),Jft.forEach(t),zgo=r(CS," \u2014 "),oN=n(CS,"A",{href:!0});var Yft=s(oN);Wgo=r(Yft,"MBartTokenizer"),Yft.forEach(t),Qgo=r(CS," or "),rN=n(CS,"A",{href:!0});var Kft=s(rN);Hgo=r(Kft,"MBartTokenizerFast"),Kft.forEach(t),Ugo=r(CS," (mBART model)"),CS.forEach(t),Jgo=i(S),Ts=n(S,"LI",{});var wS=s(Ts);Xie=n(wS,"STRONG",{});var Zft=s(Xie);Ygo=r(Zft,"mbart50"),Zft.forEach(t),Kgo=r(wS," \u2014 "),tN=n(wS,"A",{href:!0});var egt=s(tN);Zgo=r(egt,"MBart50Tokenizer"),egt.forEach(t),eho=r(wS," or "),aN=n(wS,"A",{href:!0});var ogt=s(aN);oho=r(ogt,"MBart50TokenizerFast"),ogt.forEach(t),rho=r(wS," (mBART-50 model)"),wS.forEach(t),tho=i(S),Ms=n(S,"LI",{});var AS=s(Ms);zie=n(AS,"STRONG",{});var rgt=s(zie);aho=r(rgt,"megatron-bert"),rgt.forEach(t),nho=r(AS," \u2014 "),nN=n(AS,"A",{href:!0});var tgt=s(nN);sho=r(tgt,"BertTokenizer"),tgt.forEach(t),lho=r(AS," or "),sN=n(AS,"A",{href:!0});var agt=s(sN);iho=r(agt,"BertTokenizerFast"),agt.forEach(t),dho=r(AS," (Megatron-BERT model)"),AS.forEach(t),cho=i(S),Fh=n(S,"LI",{});var X9e=s(Fh);Wie=n(X9e,"STRONG",{});var ngt=s(Wie);mho=r(ngt,"mluke"),ngt.forEach(t),fho=r(X9e," \u2014 "),lN=n(X9e,"A",{href:!0});var sgt=s(lN);gho=r(sgt,"MLukeTokenizer"),sgt.forEach(t),hho=r(X9e," (mLUKE model)"),X9e.forEach(t),uho=i(S),Es=n(S,"LI",{});var LS=s(Es);Qie=n(LS,"STRONG",{});var lgt=s(Qie);pho=r(lgt,"mobilebert"),lgt.forEach(t),_ho=r(LS," \u2014 "),iN=n(LS,"A",{href:!0});var igt=s(iN);bho=r(igt,"MobileBertTokenizer"),igt.forEach(t),vho=r(LS," or "),dN=n(LS,"A",{href:!0});var dgt=s(dN);Fho=r(dgt,"MobileBertTokenizerFast"),dgt.forEach(t),Tho=r(LS," (MobileBERT model)"),LS.forEach(t),Mho=i(S),Cs=n(S,"LI",{});var yS=s(Cs);Hie=n(yS,"STRONG",{});var cgt=s(Hie);Eho=r(cgt,"mpnet"),cgt.forEach(t),Cho=r(yS," \u2014 "),cN=n(yS,"A",{href:!0});var mgt=s(cN);who=r(mgt,"MPNetTokenizer"),mgt.forEach(t),Aho=r(yS," or "),mN=n(yS,"A",{href:!0});var fgt=s(mN);Lho=r(fgt,"MPNetTokenizerFast"),fgt.forEach(t),yho=r(yS," (MPNet model)"),yS.forEach(t),xho=i(S),ws=n(S,"LI",{});var xS=s(ws);Uie=n(xS,"STRONG",{});var ggt=s(Uie);$ho=r(ggt,"mt5"),ggt.forEach(t),kho=r(xS," \u2014 "),fN=n(xS,"A",{href:!0});var hgt=s(fN);Sho=r(hgt,"MT5Tokenizer"),hgt.forEach(t),Rho=r(xS," or "),gN=n(xS,"A",{href:!0});var ugt=s(gN);Pho=r(ugt,"MT5TokenizerFast"),ugt.forEach(t),Bho=r(xS," (MT5 model)"),xS.forEach(t),Iho=i(S),As=n(S,"LI",{});var $S=s(As);Jie=n($S,"STRONG",{});var pgt=s(Jie);Nho=r(pgt,"mvp"),pgt.forEach(t),qho=r($S," \u2014 "),hN=n($S,"A",{href:!0});var _gt=s(hN);jho=r(_gt,"MvpTokenizer"),_gt.forEach(t),Dho=r($S," or "),uN=n($S,"A",{href:!0});var bgt=s(uN);Gho=r(bgt,"MvpTokenizerFast"),bgt.forEach(t),Oho=r($S," (MVP model)"),$S.forEach(t),Vho=i(S),Ls=n(S,"LI",{});var kS=s(Ls);Yie=n(kS,"STRONG",{});var vgt=s(Yie);Xho=r(vgt,"nezha"),vgt.forEach(t),zho=r(kS," \u2014 "),pN=n(kS,"A",{href:!0});var Fgt=s(pN);Who=r(Fgt,"BertTokenizer"),Fgt.forEach(t),Qho=r(kS," or "),_N=n(kS,"A",{href:!0});var Tgt=s(_N);Hho=r(Tgt,"BertTokenizerFast"),Tgt.forEach(t),Uho=r(kS," (Nezha model)"),kS.forEach(t),Jho=i(S),ys=n(S,"LI",{});var SS=s(ys);Kie=n(SS,"STRONG",{});var Mgt=s(Kie);Yho=r(Mgt,"nllb"),Mgt.forEach(t),Kho=r(SS," \u2014 "),bN=n(SS,"A",{href:!0});var Egt=s(bN);Zho=r(Egt,"NllbTokenizer"),Egt.forEach(t),euo=r(SS," or "),vN=n(SS,"A",{href:!0});var Cgt=s(vN);ouo=r(Cgt,"NllbTokenizerFast"),Cgt.forEach(t),ruo=r(SS," (NLLB model)"),SS.forEach(t),tuo=i(S),xs=n(S,"LI",{});var RS=s(xs);Zie=n(RS,"STRONG",{});var wgt=s(Zie);auo=r(wgt,"nystromformer"),wgt.forEach(t),nuo=r(RS," \u2014 "),FN=n(RS,"A",{href:!0});var Agt=s(FN);suo=r(Agt,"AlbertTokenizer"),Agt.forEach(t),luo=r(RS," or "),TN=n(RS,"A",{href:!0});var Lgt=s(TN);iuo=r(Lgt,"AlbertTokenizerFast"),Lgt.forEach(t),duo=r(RS," (Nystr\xF6mformer model)"),RS.forEach(t),cuo=i(S),$s=n(S,"LI",{});var PS=s($s);ede=n(PS,"STRONG",{});var ygt=s(ede);muo=r(ygt,"openai-gpt"),ygt.forEach(t),fuo=r(PS," \u2014 "),MN=n(PS,"A",{href:!0});var xgt=s(MN);guo=r(xgt,"OpenAIGPTTokenizer"),xgt.forEach(t),huo=r(PS," or "),EN=n(PS,"A",{href:!0});var $gt=s(EN);uuo=r($gt,"OpenAIGPTTokenizerFast"),$gt.forEach(t),puo=r(PS," (OpenAI GPT model)"),PS.forEach(t),_uo=i(S),Th=n(S,"LI",{});var z9e=s(Th);ode=n(z9e,"STRONG",{});var kgt=s(ode);buo=r(kgt,"opt"),kgt.forEach(t),vuo=r(z9e," \u2014 "),CN=n(z9e,"A",{href:!0});var Sgt=s(CN);Fuo=r(Sgt,"GPT2Tokenizer"),Sgt.forEach(t),Tuo=r(z9e," (OPT model)"),z9e.forEach(t),Muo=i(S),ks=n(S,"LI",{});var BS=s(ks);rde=n(BS,"STRONG",{});var Rgt=s(rde);Euo=r(Rgt,"owlvit"),Rgt.forEach(t),Cuo=r(BS," \u2014 "),wN=n(BS,"A",{href:!0});var Pgt=s(wN);wuo=r(Pgt,"CLIPTokenizer"),Pgt.forEach(t),Auo=r(BS," or "),AN=n(BS,"A",{href:!0});var Bgt=s(AN);Luo=r(Bgt,"CLIPTokenizerFast"),Bgt.forEach(t),yuo=r(BS," (OWL-ViT model)"),BS.forEach(t),xuo=i(S),Ss=n(S,"LI",{});var IS=s(Ss);tde=n(IS,"STRONG",{});var Igt=s(tde);$uo=r(Igt,"pegasus"),Igt.forEach(t),kuo=r(IS," \u2014 "),LN=n(IS,"A",{href:!0});var Ngt=s(LN);Suo=r(Ngt,"PegasusTokenizer"),Ngt.forEach(t),Ruo=r(IS," or "),yN=n(IS,"A",{href:!0});var qgt=s(yN);Puo=r(qgt,"PegasusTokenizerFast"),qgt.forEach(t),Buo=r(IS," (Pegasus model)"),IS.forEach(t),Iuo=i(S),Mh=n(S,"LI",{});var W9e=s(Mh);ade=n(W9e,"STRONG",{});var jgt=s(ade);Nuo=r(jgt,"perceiver"),jgt.forEach(t),quo=r(W9e," \u2014 "),xN=n(W9e,"A",{href:!0});var Dgt=s(xN);juo=r(Dgt,"PerceiverTokenizer"),Dgt.forEach(t),Duo=r(W9e," (Perceiver model)"),W9e.forEach(t),Guo=i(S),Eh=n(S,"LI",{});var Q9e=s(Eh);nde=n(Q9e,"STRONG",{});var Ggt=s(nde);Ouo=r(Ggt,"phobert"),Ggt.forEach(t),Vuo=r(Q9e," \u2014 "),$N=n(Q9e,"A",{href:!0});var Ogt=s($N);Xuo=r(Ogt,"PhobertTokenizer"),Ogt.forEach(t),zuo=r(Q9e," (PhoBERT model)"),Q9e.forEach(t),Wuo=i(S),Ch=n(S,"LI",{});var H9e=s(Ch);sde=n(H9e,"STRONG",{});var Vgt=s(sde);Quo=r(Vgt,"plbart"),Vgt.forEach(t),Huo=r(H9e," \u2014 "),kN=n(H9e,"A",{href:!0});var Xgt=s(kN);Uuo=r(Xgt,"PLBartTokenizer"),Xgt.forEach(t),Juo=r(H9e," (PLBart model)"),H9e.forEach(t),Yuo=i(S),wh=n(S,"LI",{});var U9e=s(wh);lde=n(U9e,"STRONG",{});var zgt=s(lde);Kuo=r(zgt,"prophetnet"),zgt.forEach(t),Zuo=r(U9e," \u2014 "),SN=n(U9e,"A",{href:!0});var Wgt=s(SN);epo=r(Wgt,"ProphetNetTokenizer"),Wgt.forEach(t),opo=r(U9e," (ProphetNet model)"),U9e.forEach(t),rpo=i(S),Rs=n(S,"LI",{});var NS=s(Rs);ide=n(NS,"STRONG",{});var Qgt=s(ide);tpo=r(Qgt,"qdqbert"),Qgt.forEach(t),apo=r(NS," \u2014 "),RN=n(NS,"A",{href:!0});var Hgt=s(RN);npo=r(Hgt,"BertTokenizer"),Hgt.forEach(t),spo=r(NS," or "),PN=n(NS,"A",{href:!0});var Ugt=s(PN);lpo=r(Ugt,"BertTokenizerFast"),Ugt.forEach(t),ipo=r(NS," (QDQBert model)"),NS.forEach(t),dpo=i(S),Ah=n(S,"LI",{});var J9e=s(Ah);dde=n(J9e,"STRONG",{});var Jgt=s(dde);cpo=r(Jgt,"rag"),Jgt.forEach(t),mpo=r(J9e," \u2014 "),BN=n(J9e,"A",{href:!0});var Ygt=s(BN);fpo=r(Ygt,"RagTokenizer"),Ygt.forEach(t),gpo=r(J9e," (RAG model)"),J9e.forEach(t),hpo=i(S),Ps=n(S,"LI",{});var qS=s(Ps);cde=n(qS,"STRONG",{});var Kgt=s(cde);upo=r(Kgt,"realm"),Kgt.forEach(t),ppo=r(qS," \u2014 "),IN=n(qS,"A",{href:!0});var Zgt=s(IN);_po=r(Zgt,"RealmTokenizer"),Zgt.forEach(t),bpo=r(qS," or "),NN=n(qS,"A",{href:!0});var eht=s(NN);vpo=r(eht,"RealmTokenizerFast"),eht.forEach(t),Fpo=r(qS," (REALM model)"),qS.forEach(t),Tpo=i(S),Bs=n(S,"LI",{});var jS=s(Bs);mde=n(jS,"STRONG",{});var oht=s(mde);Mpo=r(oht,"reformer"),oht.forEach(t),Epo=r(jS," \u2014 "),qN=n(jS,"A",{href:!0});var rht=s(qN);Cpo=r(rht,"ReformerTokenizer"),rht.forEach(t),wpo=r(jS," or "),jN=n(jS,"A",{href:!0});var tht=s(jN);Apo=r(tht,"ReformerTokenizerFast"),tht.forEach(t),Lpo=r(jS," (Reformer model)"),jS.forEach(t),ypo=i(S),Is=n(S,"LI",{});var DS=s(Is);fde=n(DS,"STRONG",{});var aht=s(fde);xpo=r(aht,"rembert"),aht.forEach(t),$po=r(DS," \u2014 "),DN=n(DS,"A",{href:!0});var nht=s(DN);kpo=r(nht,"RemBertTokenizer"),nht.forEach(t),Spo=r(DS," or "),GN=n(DS,"A",{href:!0});var sht=s(GN);Rpo=r(sht,"RemBertTokenizerFast"),sht.forEach(t),Ppo=r(DS," (RemBERT model)"),DS.forEach(t),Bpo=i(S),Ns=n(S,"LI",{});var GS=s(Ns);gde=n(GS,"STRONG",{});var lht=s(gde);Ipo=r(lht,"retribert"),lht.forEach(t),Npo=r(GS," \u2014 "),ON=n(GS,"A",{href:!0});var iht=s(ON);qpo=r(iht,"RetriBertTokenizer"),iht.forEach(t),jpo=r(GS," or "),VN=n(GS,"A",{href:!0});var dht=s(VN);Dpo=r(dht,"RetriBertTokenizerFast"),dht.forEach(t),Gpo=r(GS," (RetriBERT model)"),GS.forEach(t),Opo=i(S),qs=n(S,"LI",{});var OS=s(qs);hde=n(OS,"STRONG",{});var cht=s(hde);Vpo=r(cht,"roberta"),cht.forEach(t),Xpo=r(OS," \u2014 "),XN=n(OS,"A",{href:!0});var mht=s(XN);zpo=r(mht,"RobertaTokenizer"),mht.forEach(t),Wpo=r(OS," or "),zN=n(OS,"A",{href:!0});var fht=s(zN);Qpo=r(fht,"RobertaTokenizerFast"),fht.forEach(t),Hpo=r(OS," (RoBERTa model)"),OS.forEach(t),Upo=i(S),js=n(S,"LI",{});var VS=s(js);ude=n(VS,"STRONG",{});var ght=s(ude);Jpo=r(ght,"roformer"),ght.forEach(t),Ypo=r(VS," \u2014 "),WN=n(VS,"A",{href:!0});var hht=s(WN);Kpo=r(hht,"RoFormerTokenizer"),hht.forEach(t),Zpo=r(VS," or "),QN=n(VS,"A",{href:!0});var uht=s(QN);e_o=r(uht,"RoFormerTokenizerFast"),uht.forEach(t),o_o=r(VS," (RoFormer model)"),VS.forEach(t),r_o=i(S),Lh=n(S,"LI",{});var Y9e=s(Lh);pde=n(Y9e,"STRONG",{});var pht=s(pde);t_o=r(pht,"speech_to_text"),pht.forEach(t),a_o=r(Y9e," \u2014 "),HN=n(Y9e,"A",{href:!0});var _ht=s(HN);n_o=r(_ht,"Speech2TextTokenizer"),_ht.forEach(t),s_o=r(Y9e," (Speech2Text model)"),Y9e.forEach(t),l_o=i(S),yh=n(S,"LI",{});var K9e=s(yh);_de=n(K9e,"STRONG",{});var bht=s(_de);i_o=r(bht,"speech_to_text_2"),bht.forEach(t),d_o=r(K9e," \u2014 "),UN=n(K9e,"A",{href:!0});var vht=s(UN);c_o=r(vht,"Speech2Text2Tokenizer"),vht.forEach(t),m_o=r(K9e," (Speech2Text2 model)"),K9e.forEach(t),f_o=i(S),Ds=n(S,"LI",{});var XS=s(Ds);bde=n(XS,"STRONG",{});var Fht=s(bde);g_o=r(Fht,"splinter"),Fht.forEach(t),h_o=r(XS," \u2014 "),JN=n(XS,"A",{href:!0});var Tht=s(JN);u_o=r(Tht,"SplinterTokenizer"),Tht.forEach(t),p_o=r(XS," or "),YN=n(XS,"A",{href:!0});var Mht=s(YN);__o=r(Mht,"SplinterTokenizerFast"),Mht.forEach(t),b_o=r(XS," (Splinter model)"),XS.forEach(t),v_o=i(S),Gs=n(S,"LI",{});var zS=s(Gs);vde=n(zS,"STRONG",{});var Eht=s(vde);F_o=r(Eht,"squeezebert"),Eht.forEach(t),T_o=r(zS," \u2014 "),KN=n(zS,"A",{href:!0});var Cht=s(KN);M_o=r(Cht,"SqueezeBertTokenizer"),Cht.forEach(t),E_o=r(zS," or "),ZN=n(zS,"A",{href:!0});var wht=s(ZN);C_o=r(wht,"SqueezeBertTokenizerFast"),wht.forEach(t),w_o=r(zS," (SqueezeBERT model)"),zS.forEach(t),A_o=i(S),Os=n(S,"LI",{});var WS=s(Os);Fde=n(WS,"STRONG",{});var Aht=s(Fde);L_o=r(Aht,"t5"),Aht.forEach(t),y_o=r(WS," \u2014 "),eq=n(WS,"A",{href:!0});var Lht=s(eq);x_o=r(Lht,"T5Tokenizer"),Lht.forEach(t),$_o=r(WS," or "),oq=n(WS,"A",{href:!0});var yht=s(oq);k_o=r(yht,"T5TokenizerFast"),yht.forEach(t),S_o=r(WS," (T5 model)"),WS.forEach(t),R_o=i(S),xh=n(S,"LI",{});var Z9e=s(xh);Tde=n(Z9e,"STRONG",{});var xht=s(Tde);P_o=r(xht,"tapas"),xht.forEach(t),B_o=r(Z9e," \u2014 "),rq=n(Z9e,"A",{href:!0});var $ht=s(rq);I_o=r($ht,"TapasTokenizer"),$ht.forEach(t),N_o=r(Z9e," (TAPAS model)"),Z9e.forEach(t),q_o=i(S),$h=n(S,"LI",{});var exe=s($h);Mde=n(exe,"STRONG",{});var kht=s(Mde);j_o=r(kht,"tapex"),kht.forEach(t),D_o=r(exe," \u2014 "),tq=n(exe,"A",{href:!0});var Sht=s(tq);G_o=r(Sht,"TapexTokenizer"),Sht.forEach(t),O_o=r(exe," (TAPEX model)"),exe.forEach(t),V_o=i(S),kh=n(S,"LI",{});var oxe=s(kh);Ede=n(oxe,"STRONG",{});var Rht=s(Ede);X_o=r(Rht,"transfo-xl"),Rht.forEach(t),z_o=r(oxe," \u2014 "),aq=n(oxe,"A",{href:!0});var Pht=s(aq);W_o=r(Pht,"TransfoXLTokenizer"),Pht.forEach(t),Q_o=r(oxe," (Transformer-XL model)"),oxe.forEach(t),H_o=i(S),Vs=n(S,"LI",{});var QS=s(Vs);Cde=n(QS,"STRONG",{});var Bht=s(Cde);U_o=r(Bht,"vilt"),Bht.forEach(t),J_o=r(QS," \u2014 "),nq=n(QS,"A",{href:!0});var Iht=s(nq);Y_o=r(Iht,"BertTokenizer"),Iht.forEach(t),K_o=r(QS," or "),sq=n(QS,"A",{href:!0});var Nht=s(sq);Z_o=r(Nht,"BertTokenizerFast"),Nht.forEach(t),e2o=r(QS," (ViLT model)"),QS.forEach(t),o2o=i(S),Xs=n(S,"LI",{});var HS=s(Xs);wde=n(HS,"STRONG",{});var qht=s(wde);r2o=r(qht,"visual_bert"),qht.forEach(t),t2o=r(HS," \u2014 "),lq=n(HS,"A",{href:!0});var jht=s(lq);a2o=r(jht,"BertTokenizer"),jht.forEach(t),n2o=r(HS," or "),iq=n(HS,"A",{href:!0});var Dht=s(iq);s2o=r(Dht,"BertTokenizerFast"),Dht.forEach(t),l2o=r(HS," (VisualBERT model)"),HS.forEach(t),i2o=i(S),Sh=n(S,"LI",{});var rxe=s(Sh);Ade=n(rxe,"STRONG",{});var Ght=s(Ade);d2o=r(Ght,"wav2vec2"),Ght.forEach(t),c2o=r(rxe," \u2014 "),dq=n(rxe,"A",{href:!0});var Oht=s(dq);m2o=r(Oht,"Wav2Vec2CTCTokenizer"),Oht.forEach(t),f2o=r(rxe," (Wav2Vec2 model)"),rxe.forEach(t),g2o=i(S),Rh=n(S,"LI",{});var txe=s(Rh);Lde=n(txe,"STRONG",{});var Vht=s(Lde);h2o=r(Vht,"wav2vec2-conformer"),Vht.forEach(t),u2o=r(txe," \u2014 "),cq=n(txe,"A",{href:!0});var Xht=s(cq);p2o=r(Xht,"Wav2Vec2CTCTokenizer"),Xht.forEach(t),_2o=r(txe," (Wav2Vec2-Conformer model)"),txe.forEach(t),b2o=i(S),Ph=n(S,"LI",{});var axe=s(Ph);yde=n(axe,"STRONG",{});var zht=s(yde);v2o=r(zht,"wav2vec2_phoneme"),zht.forEach(t),F2o=r(axe," \u2014 "),mq=n(axe,"A",{href:!0});var Wht=s(mq);T2o=r(Wht,"Wav2Vec2PhonemeCTCTokenizer"),Wht.forEach(t),M2o=r(axe," (Wav2Vec2Phoneme model)"),axe.forEach(t),E2o=i(S),zs=n(S,"LI",{});var US=s(zs);xde=n(US,"STRONG",{});var Qht=s(xde);C2o=r(Qht,"xglm"),Qht.forEach(t),w2o=r(US," \u2014 "),fq=n(US,"A",{href:!0});var Hht=s(fq);A2o=r(Hht,"XGLMTokenizer"),Hht.forEach(t),L2o=r(US," or "),gq=n(US,"A",{href:!0});var Uht=s(gq);y2o=r(Uht,"XGLMTokenizerFast"),Uht.forEach(t),x2o=r(US," (XGLM model)"),US.forEach(t),$2o=i(S),Bh=n(S,"LI",{});var nxe=s(Bh);$de=n(nxe,"STRONG",{});var Jht=s($de);k2o=r(Jht,"xlm"),Jht.forEach(t),S2o=r(nxe," \u2014 "),hq=n(nxe,"A",{href:!0});var Yht=s(hq);R2o=r(Yht,"XLMTokenizer"),Yht.forEach(t),P2o=r(nxe," (XLM model)"),nxe.forEach(t),B2o=i(S),Ih=n(S,"LI",{});var sxe=s(Ih);kde=n(sxe,"STRONG",{});var Kht=s(kde);I2o=r(Kht,"xlm-prophetnet"),Kht.forEach(t),N2o=r(sxe," \u2014 "),uq=n(sxe,"A",{href:!0});var Zht=s(uq);q2o=r(Zht,"XLMProphetNetTokenizer"),Zht.forEach(t),j2o=r(sxe," (XLM-ProphetNet model)"),sxe.forEach(t),D2o=i(S),Ws=n(S,"LI",{});var JS=s(Ws);Sde=n(JS,"STRONG",{});var eut=s(Sde);G2o=r(eut,"xlm-roberta"),eut.forEach(t),O2o=r(JS," \u2014 "),pq=n(JS,"A",{href:!0});var out=s(pq);V2o=r(out,"XLMRobertaTokenizer"),out.forEach(t),X2o=r(JS," or "),_q=n(JS,"A",{href:!0});var rut=s(_q);z2o=r(rut,"XLMRobertaTokenizerFast"),rut.forEach(t),W2o=r(JS," (XLM-RoBERTa model)"),JS.forEach(t),Q2o=i(S),Qs=n(S,"LI",{});var YS=s(Qs);Rde=n(YS,"STRONG",{});var tut=s(Rde);H2o=r(tut,"xlm-roberta-xl"),tut.forEach(t),U2o=r(YS," \u2014 "),bq=n(YS,"A",{href:!0});var aut=s(bq);J2o=r(aut,"RobertaTokenizer"),aut.forEach(t),Y2o=r(YS," or "),vq=n(YS,"A",{href:!0});var nut=s(vq);K2o=r(nut,"RobertaTokenizerFast"),nut.forEach(t),Z2o=r(YS," (XLM-RoBERTa-XL model)"),YS.forEach(t),ebo=i(S),Hs=n(S,"LI",{});var KS=s(Hs);Pde=n(KS,"STRONG",{});var sut=s(Pde);obo=r(sut,"xlnet"),sut.forEach(t),rbo=r(KS," \u2014 "),Fq=n(KS,"A",{href:!0});var lut=s(Fq);tbo=r(lut,"XLNetTokenizer"),lut.forEach(t),abo=r(KS," or "),Tq=n(KS,"A",{href:!0});var iut=s(Tq);nbo=r(iut,"XLNetTokenizerFast"),iut.forEach(t),sbo=r(KS," (XLNet model)"),KS.forEach(t),lbo=i(S),Us=n(S,"LI",{});var ZS=s(Us);Bde=n(ZS,"STRONG",{});var dut=s(Bde);ibo=r(dut,"yoso"),dut.forEach(t),dbo=r(ZS," \u2014 "),Mq=n(ZS,"A",{href:!0});var cut=s(Mq);cbo=r(cut,"AlbertTokenizer"),cut.forEach(t),mbo=r(ZS," or "),Eq=n(ZS,"A",{href:!0});var mut=s(Eq);fbo=r(mut,"AlbertTokenizerFast"),mut.forEach(t),gbo=r(ZS," (YOSO model)"),ZS.forEach(t),S.forEach(t),hbo=i(rl),T(Nh.$$.fragment,rl),rl.forEach(t),ubo=i(ol),qh=n(ol,"DIV",{class:!0});var jQe=s(qh);T(jy.$$.fragment,jQe),pbo=i(jQe),Ide=n(jQe,"P",{});var fut=s(Ide);_bo=r(fut,"Register a new tokenizer in this mapping."),fut.forEach(t),jQe.forEach(t),ol.forEach(t),qze=i(m),Gi=n(m,"H2",{class:!0});var DQe=s(Gi);jh=n(DQe,"A",{id:!0,class:!0,href:!0});var gut=s(jh);Nde=n(gut,"SPAN",{});var hut=s(Nde);T(Dy.$$.fragment,hut),hut.forEach(t),gut.forEach(t),bbo=i(DQe),qde=n(DQe,"SPAN",{});var uut=s(qde);vbo=r(uut,"AutoFeatureExtractor"),uut.forEach(t),DQe.forEach(t),jze=i(m),xo=n(m,"DIV",{class:!0});var tl=s(xo);T(Gy.$$.fragment,tl),Fbo=i(tl),Oy=n(tl,"P",{});var GQe=s(Oy);Tbo=r(GQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cq=n(GQe,"A",{href:!0});var put=s(Cq);Mbo=r(put,"AutoFeatureExtractor.from_pretrained()"),put.forEach(t),Ebo=r(GQe," class method."),GQe.forEach(t),Cbo=i(tl),Vy=n(tl,"P",{});var OQe=s(Vy);wbo=r(OQe,"This class cannot be instantiated directly using "),jde=n(OQe,"CODE",{});var _ut=s(jde);Abo=r(_ut,"__init__()"),_ut.forEach(t),Lbo=r(OQe," (throws an error)."),OQe.forEach(t),ybo=i(tl),Ue=n(tl,"DIV",{class:!0});var na=s(Ue);T(Xy.$$.fragment,na),xbo=i(na),Dde=n(na,"P",{});var but=s(Dde);$bo=r(but,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),but.forEach(t),kbo=i(na),Ba=n(na,"P",{});var y7=s(Ba);Sbo=r(y7,"The feature extractor class to instantiate is selected based on the "),Gde=n(y7,"CODE",{});var vut=s(Gde);Rbo=r(vut,"model_type"),vut.forEach(t),Pbo=r(y7,` property of the config object
(either passed as an argument or loaded from `),Ode=n(y7,"CODE",{});var Fut=s(Ode);Bbo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Ibo=r(y7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vde=n(y7,"CODE",{});var Tut=s(Vde);Nbo=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),qbo=r(y7,":"),y7.forEach(t),jbo=i(na),J=n(na,"UL",{});var K=s(J);Dh=n(K,"LI",{});var lxe=s(Dh);Xde=n(lxe,"STRONG",{});var Mut=s(Xde);Dbo=r(Mut,"beit"),Mut.forEach(t),Gbo=r(lxe," \u2014 "),wq=n(lxe,"A",{href:!0});var Eut=s(wq);Obo=r(Eut,"BeitFeatureExtractor"),Eut.forEach(t),Vbo=r(lxe," (BEiT model)"),lxe.forEach(t),Xbo=i(K),Gh=n(K,"LI",{});var ixe=s(Gh);zde=n(ixe,"STRONG",{});var Cut=s(zde);zbo=r(Cut,"clip"),Cut.forEach(t),Wbo=r(ixe," \u2014 "),Aq=n(ixe,"A",{href:!0});var wut=s(Aq);Qbo=r(wut,"CLIPFeatureExtractor"),wut.forEach(t),Hbo=r(ixe," (CLIP model)"),ixe.forEach(t),Ubo=i(K),Oh=n(K,"LI",{});var dxe=s(Oh);Wde=n(dxe,"STRONG",{});var Aut=s(Wde);Jbo=r(Aut,"convnext"),Aut.forEach(t),Ybo=r(dxe," \u2014 "),Lq=n(dxe,"A",{href:!0});var Lut=s(Lq);Kbo=r(Lut,"ConvNextFeatureExtractor"),Lut.forEach(t),Zbo=r(dxe," (ConvNeXT model)"),dxe.forEach(t),evo=i(K),Vh=n(K,"LI",{});var cxe=s(Vh);Qde=n(cxe,"STRONG",{});var yut=s(Qde);ovo=r(yut,"cvt"),yut.forEach(t),rvo=r(cxe," \u2014 "),yq=n(cxe,"A",{href:!0});var xut=s(yq);tvo=r(xut,"ConvNextFeatureExtractor"),xut.forEach(t),avo=r(cxe," (CvT model)"),cxe.forEach(t),nvo=i(K),Xh=n(K,"LI",{});var mxe=s(Xh);Hde=n(mxe,"STRONG",{});var $ut=s(Hde);svo=r($ut,"data2vec-audio"),$ut.forEach(t),lvo=r(mxe," \u2014 "),xq=n(mxe,"A",{href:!0});var kut=s(xq);ivo=r(kut,"Wav2Vec2FeatureExtractor"),kut.forEach(t),dvo=r(mxe," (Data2VecAudio model)"),mxe.forEach(t),cvo=i(K),zh=n(K,"LI",{});var fxe=s(zh);Ude=n(fxe,"STRONG",{});var Sut=s(Ude);mvo=r(Sut,"data2vec-vision"),Sut.forEach(t),fvo=r(fxe," \u2014 "),$q=n(fxe,"A",{href:!0});var Rut=s($q);gvo=r(Rut,"BeitFeatureExtractor"),Rut.forEach(t),hvo=r(fxe," (Data2VecVision model)"),fxe.forEach(t),uvo=i(K),Wh=n(K,"LI",{});var gxe=s(Wh);Jde=n(gxe,"STRONG",{});var Put=s(Jde);pvo=r(Put,"deit"),Put.forEach(t),_vo=r(gxe," \u2014 "),kq=n(gxe,"A",{href:!0});var But=s(kq);bvo=r(But,"DeiTFeatureExtractor"),But.forEach(t),vvo=r(gxe," (DeiT model)"),gxe.forEach(t),Fvo=i(K),Qh=n(K,"LI",{});var hxe=s(Qh);Yde=n(hxe,"STRONG",{});var Iut=s(Yde);Tvo=r(Iut,"detr"),Iut.forEach(t),Mvo=r(hxe," \u2014 "),Sq=n(hxe,"A",{href:!0});var Nut=s(Sq);Evo=r(Nut,"DetrFeatureExtractor"),Nut.forEach(t),Cvo=r(hxe," (DETR model)"),hxe.forEach(t),wvo=i(K),Hh=n(K,"LI",{});var uxe=s(Hh);Kde=n(uxe,"STRONG",{});var qut=s(Kde);Avo=r(qut,"dpt"),qut.forEach(t),Lvo=r(uxe," \u2014 "),Rq=n(uxe,"A",{href:!0});var jut=s(Rq);yvo=r(jut,"DPTFeatureExtractor"),jut.forEach(t),xvo=r(uxe," (DPT model)"),uxe.forEach(t),$vo=i(K),Uh=n(K,"LI",{});var pxe=s(Uh);Zde=n(pxe,"STRONG",{});var Dut=s(Zde);kvo=r(Dut,"flava"),Dut.forEach(t),Svo=r(pxe," \u2014 "),Pq=n(pxe,"A",{href:!0});var Gut=s(Pq);Rvo=r(Gut,"FlavaFeatureExtractor"),Gut.forEach(t),Pvo=r(pxe," (FLAVA model)"),pxe.forEach(t),Bvo=i(K),Jh=n(K,"LI",{});var _xe=s(Jh);ece=n(_xe,"STRONG",{});var Out=s(ece);Ivo=r(Out,"glpn"),Out.forEach(t),Nvo=r(_xe," \u2014 "),Bq=n(_xe,"A",{href:!0});var Vut=s(Bq);qvo=r(Vut,"GLPNFeatureExtractor"),Vut.forEach(t),jvo=r(_xe," (GLPN model)"),_xe.forEach(t),Dvo=i(K),Yh=n(K,"LI",{});var bxe=s(Yh);oce=n(bxe,"STRONG",{});var Xut=s(oce);Gvo=r(Xut,"groupvit"),Xut.forEach(t),Ovo=r(bxe," \u2014 "),Iq=n(bxe,"A",{href:!0});var zut=s(Iq);Vvo=r(zut,"CLIPFeatureExtractor"),zut.forEach(t),Xvo=r(bxe," (GroupViT model)"),bxe.forEach(t),zvo=i(K),Kh=n(K,"LI",{});var vxe=s(Kh);rce=n(vxe,"STRONG",{});var Wut=s(rce);Wvo=r(Wut,"hubert"),Wut.forEach(t),Qvo=r(vxe," \u2014 "),Nq=n(vxe,"A",{href:!0});var Qut=s(Nq);Hvo=r(Qut,"Wav2Vec2FeatureExtractor"),Qut.forEach(t),Uvo=r(vxe," (Hubert model)"),vxe.forEach(t),Jvo=i(K),Zh=n(K,"LI",{});var Fxe=s(Zh);tce=n(Fxe,"STRONG",{});var Hut=s(tce);Yvo=r(Hut,"imagegpt"),Hut.forEach(t),Kvo=r(Fxe," \u2014 "),qq=n(Fxe,"A",{href:!0});var Uut=s(qq);Zvo=r(Uut,"ImageGPTFeatureExtractor"),Uut.forEach(t),e1o=r(Fxe," (ImageGPT model)"),Fxe.forEach(t),o1o=i(K),eu=n(K,"LI",{});var Txe=s(eu);ace=n(Txe,"STRONG",{});var Jut=s(ace);r1o=r(Jut,"layoutlmv2"),Jut.forEach(t),t1o=r(Txe," \u2014 "),jq=n(Txe,"A",{href:!0});var Yut=s(jq);a1o=r(Yut,"LayoutLMv2FeatureExtractor"),Yut.forEach(t),n1o=r(Txe," (LayoutLMv2 model)"),Txe.forEach(t),s1o=i(K),ou=n(K,"LI",{});var Mxe=s(ou);nce=n(Mxe,"STRONG",{});var Kut=s(nce);l1o=r(Kut,"layoutlmv3"),Kut.forEach(t),i1o=r(Mxe," \u2014 "),Dq=n(Mxe,"A",{href:!0});var Zut=s(Dq);d1o=r(Zut,"LayoutLMv3FeatureExtractor"),Zut.forEach(t),c1o=r(Mxe," (LayoutLMv3 model)"),Mxe.forEach(t),m1o=i(K),ru=n(K,"LI",{});var Exe=s(ru);sce=n(Exe,"STRONG",{});var ept=s(sce);f1o=r(ept,"levit"),ept.forEach(t),g1o=r(Exe," \u2014 "),Gq=n(Exe,"A",{href:!0});var opt=s(Gq);h1o=r(opt,"LevitFeatureExtractor"),opt.forEach(t),u1o=r(Exe," (LeViT model)"),Exe.forEach(t),p1o=i(K),tu=n(K,"LI",{});var Cxe=s(tu);lce=n(Cxe,"STRONG",{});var rpt=s(lce);_1o=r(rpt,"maskformer"),rpt.forEach(t),b1o=r(Cxe," \u2014 "),Oq=n(Cxe,"A",{href:!0});var tpt=s(Oq);v1o=r(tpt,"MaskFormerFeatureExtractor"),tpt.forEach(t),F1o=r(Cxe," (MaskFormer model)"),Cxe.forEach(t),T1o=i(K),au=n(K,"LI",{});var wxe=s(au);ice=n(wxe,"STRONG",{});var apt=s(ice);M1o=r(apt,"mctct"),apt.forEach(t),E1o=r(wxe," \u2014 "),Vq=n(wxe,"A",{href:!0});var npt=s(Vq);C1o=r(npt,"MCTCTFeatureExtractor"),npt.forEach(t),w1o=r(wxe," (M-CTC-T model)"),wxe.forEach(t),A1o=i(K),nu=n(K,"LI",{});var Axe=s(nu);dce=n(Axe,"STRONG",{});var spt=s(dce);L1o=r(spt,"mobilevit"),spt.forEach(t),y1o=r(Axe," \u2014 "),Xq=n(Axe,"A",{href:!0});var lpt=s(Xq);x1o=r(lpt,"MobileViTFeatureExtractor"),lpt.forEach(t),$1o=r(Axe," (MobileViT model)"),Axe.forEach(t),k1o=i(K),su=n(K,"LI",{});var Lxe=s(su);cce=n(Lxe,"STRONG",{});var ipt=s(cce);S1o=r(ipt,"owlvit"),ipt.forEach(t),R1o=r(Lxe," \u2014 "),zq=n(Lxe,"A",{href:!0});var dpt=s(zq);P1o=r(dpt,"OwlViTFeatureExtractor"),dpt.forEach(t),B1o=r(Lxe," (OWL-ViT model)"),Lxe.forEach(t),I1o=i(K),lu=n(K,"LI",{});var yxe=s(lu);mce=n(yxe,"STRONG",{});var cpt=s(mce);N1o=r(cpt,"perceiver"),cpt.forEach(t),q1o=r(yxe," \u2014 "),Wq=n(yxe,"A",{href:!0});var mpt=s(Wq);j1o=r(mpt,"PerceiverFeatureExtractor"),mpt.forEach(t),D1o=r(yxe," (Perceiver model)"),yxe.forEach(t),G1o=i(K),iu=n(K,"LI",{});var xxe=s(iu);fce=n(xxe,"STRONG",{});var fpt=s(fce);O1o=r(fpt,"poolformer"),fpt.forEach(t),V1o=r(xxe," \u2014 "),Qq=n(xxe,"A",{href:!0});var gpt=s(Qq);X1o=r(gpt,"PoolFormerFeatureExtractor"),gpt.forEach(t),z1o=r(xxe," (PoolFormer model)"),xxe.forEach(t),W1o=i(K),du=n(K,"LI",{});var $xe=s(du);gce=n($xe,"STRONG",{});var hpt=s(gce);Q1o=r(hpt,"regnet"),hpt.forEach(t),H1o=r($xe," \u2014 "),Hq=n($xe,"A",{href:!0});var upt=s(Hq);U1o=r(upt,"ConvNextFeatureExtractor"),upt.forEach(t),J1o=r($xe," (RegNet model)"),$xe.forEach(t),Y1o=i(K),cu=n(K,"LI",{});var kxe=s(cu);hce=n(kxe,"STRONG",{});var ppt=s(hce);K1o=r(ppt,"resnet"),ppt.forEach(t),Z1o=r(kxe," \u2014 "),Uq=n(kxe,"A",{href:!0});var _pt=s(Uq);eFo=r(_pt,"ConvNextFeatureExtractor"),_pt.forEach(t),oFo=r(kxe," (ResNet model)"),kxe.forEach(t),rFo=i(K),mu=n(K,"LI",{});var Sxe=s(mu);uce=n(Sxe,"STRONG",{});var bpt=s(uce);tFo=r(bpt,"segformer"),bpt.forEach(t),aFo=r(Sxe," \u2014 "),Jq=n(Sxe,"A",{href:!0});var vpt=s(Jq);nFo=r(vpt,"SegformerFeatureExtractor"),vpt.forEach(t),sFo=r(Sxe," (SegFormer model)"),Sxe.forEach(t),lFo=i(K),fu=n(K,"LI",{});var Rxe=s(fu);pce=n(Rxe,"STRONG",{});var Fpt=s(pce);iFo=r(Fpt,"speech_to_text"),Fpt.forEach(t),dFo=r(Rxe," \u2014 "),Yq=n(Rxe,"A",{href:!0});var Tpt=s(Yq);cFo=r(Tpt,"Speech2TextFeatureExtractor"),Tpt.forEach(t),mFo=r(Rxe," (Speech2Text model)"),Rxe.forEach(t),fFo=i(K),gu=n(K,"LI",{});var Pxe=s(gu);_ce=n(Pxe,"STRONG",{});var Mpt=s(_ce);gFo=r(Mpt,"swin"),Mpt.forEach(t),hFo=r(Pxe," \u2014 "),Kq=n(Pxe,"A",{href:!0});var Ept=s(Kq);uFo=r(Ept,"ViTFeatureExtractor"),Ept.forEach(t),pFo=r(Pxe," (Swin Transformer model)"),Pxe.forEach(t),_Fo=i(K),hu=n(K,"LI",{});var Bxe=s(hu);bce=n(Bxe,"STRONG",{});var Cpt=s(bce);bFo=r(Cpt,"swinv2"),Cpt.forEach(t),vFo=r(Bxe," \u2014 "),Zq=n(Bxe,"A",{href:!0});var wpt=s(Zq);FFo=r(wpt,"ViTFeatureExtractor"),wpt.forEach(t),TFo=r(Bxe," (Swin Transformer V2 model)"),Bxe.forEach(t),MFo=i(K),uu=n(K,"LI",{});var Ixe=s(uu);vce=n(Ixe,"STRONG",{});var Apt=s(vce);EFo=r(Apt,"van"),Apt.forEach(t),CFo=r(Ixe," \u2014 "),ej=n(Ixe,"A",{href:!0});var Lpt=s(ej);wFo=r(Lpt,"ConvNextFeatureExtractor"),Lpt.forEach(t),AFo=r(Ixe," (VAN model)"),Ixe.forEach(t),LFo=i(K),pu=n(K,"LI",{});var Nxe=s(pu);Fce=n(Nxe,"STRONG",{});var ypt=s(Fce);yFo=r(ypt,"vilt"),ypt.forEach(t),xFo=r(Nxe," \u2014 "),oj=n(Nxe,"A",{href:!0});var xpt=s(oj);$Fo=r(xpt,"ViltFeatureExtractor"),xpt.forEach(t),kFo=r(Nxe," (ViLT model)"),Nxe.forEach(t),SFo=i(K),_u=n(K,"LI",{});var qxe=s(_u);Tce=n(qxe,"STRONG",{});var $pt=s(Tce);RFo=r($pt,"vit"),$pt.forEach(t),PFo=r(qxe," \u2014 "),rj=n(qxe,"A",{href:!0});var kpt=s(rj);BFo=r(kpt,"ViTFeatureExtractor"),kpt.forEach(t),IFo=r(qxe," (ViT model)"),qxe.forEach(t),NFo=i(K),bu=n(K,"LI",{});var jxe=s(bu);Mce=n(jxe,"STRONG",{});var Spt=s(Mce);qFo=r(Spt,"vit_mae"),Spt.forEach(t),jFo=r(jxe," \u2014 "),tj=n(jxe,"A",{href:!0});var Rpt=s(tj);DFo=r(Rpt,"ViTFeatureExtractor"),Rpt.forEach(t),GFo=r(jxe," (ViTMAE model)"),jxe.forEach(t),OFo=i(K),vu=n(K,"LI",{});var Dxe=s(vu);Ece=n(Dxe,"STRONG",{});var Ppt=s(Ece);VFo=r(Ppt,"wav2vec2"),Ppt.forEach(t),XFo=r(Dxe," \u2014 "),aj=n(Dxe,"A",{href:!0});var Bpt=s(aj);zFo=r(Bpt,"Wav2Vec2FeatureExtractor"),Bpt.forEach(t),WFo=r(Dxe," (Wav2Vec2 model)"),Dxe.forEach(t),QFo=i(K),Fu=n(K,"LI",{});var Gxe=s(Fu);Cce=n(Gxe,"STRONG",{});var Ipt=s(Cce);HFo=r(Ipt,"wav2vec2-conformer"),Ipt.forEach(t),UFo=r(Gxe," \u2014 "),nj=n(Gxe,"A",{href:!0});var Npt=s(nj);JFo=r(Npt,"Wav2Vec2FeatureExtractor"),Npt.forEach(t),YFo=r(Gxe," (Wav2Vec2-Conformer model)"),Gxe.forEach(t),KFo=i(K),Tu=n(K,"LI",{});var Oxe=s(Tu);wce=n(Oxe,"STRONG",{});var qpt=s(wce);ZFo=r(qpt,"yolos"),qpt.forEach(t),eTo=r(Oxe," \u2014 "),sj=n(Oxe,"A",{href:!0});var jpt=s(sj);oTo=r(jpt,"YolosFeatureExtractor"),jpt.forEach(t),rTo=r(Oxe," (YOLOS model)"),Oxe.forEach(t),K.forEach(t),tTo=i(na),T(Mu.$$.fragment,na),aTo=i(na),T(Eu.$$.fragment,na),na.forEach(t),nTo=i(tl),Cu=n(tl,"DIV",{class:!0});var VQe=s(Cu);T(zy.$$.fragment,VQe),sTo=i(VQe),Ace=n(VQe,"P",{});var Dpt=s(Ace);lTo=r(Dpt,"Register a new feature extractor for this class."),Dpt.forEach(t),VQe.forEach(t),tl.forEach(t),Dze=i(m),Oi=n(m,"H2",{class:!0});var XQe=s(Oi);wu=n(XQe,"A",{id:!0,class:!0,href:!0});var Gpt=s(wu);Lce=n(Gpt,"SPAN",{});var Opt=s(Lce);T(Wy.$$.fragment,Opt),Opt.forEach(t),Gpt.forEach(t),iTo=i(XQe),yce=n(XQe,"SPAN",{});var Vpt=s(yce);dTo=r(Vpt,"AutoProcessor"),Vpt.forEach(t),XQe.forEach(t),Gze=i(m),$o=n(m,"DIV",{class:!0});var al=s($o);T(Qy.$$.fragment,al),cTo=i(al),Hy=n(al,"P",{});var zQe=s(Hy);mTo=r(zQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lj=n(zQe,"A",{href:!0});var Xpt=s(lj);fTo=r(Xpt,"AutoProcessor.from_pretrained()"),Xpt.forEach(t),gTo=r(zQe," class method."),zQe.forEach(t),hTo=i(al),Uy=n(al,"P",{});var WQe=s(Uy);uTo=r(WQe,"This class cannot be instantiated directly using "),xce=n(WQe,"CODE",{});var zpt=s(xce);pTo=r(zpt,"__init__()"),zpt.forEach(t),_To=r(WQe," (throws an error)."),WQe.forEach(t),bTo=i(al),Je=n(al,"DIV",{class:!0});var sa=s(Je);T(Jy.$$.fragment,sa),vTo=i(sa),$ce=n(sa,"P",{});var Wpt=s($ce);FTo=r(Wpt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Wpt.forEach(t),TTo=i(sa),Vi=n(sa,"P",{});var Cte=s(Vi);MTo=r(Cte,"The processor class to instantiate is selected based on the "),kce=n(Cte,"CODE",{});var Qpt=s(kce);ETo=r(Qpt,"model_type"),Qpt.forEach(t),CTo=r(Cte,` property of the config object (either
passed as an argument or loaded from `),Sce=n(Cte,"CODE",{});var Hpt=s(Sce);wTo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),ATo=r(Cte," if possible):"),Cte.forEach(t),LTo=i(sa),me=n(sa,"UL",{});var pe=s(me);Au=n(pe,"LI",{});var Vxe=s(Au);Rce=n(Vxe,"STRONG",{});var Upt=s(Rce);yTo=r(Upt,"clip"),Upt.forEach(t),xTo=r(Vxe," \u2014 "),ij=n(Vxe,"A",{href:!0});var Jpt=s(ij);$To=r(Jpt,"CLIPProcessor"),Jpt.forEach(t),kTo=r(Vxe," (CLIP model)"),Vxe.forEach(t),STo=i(pe),Lu=n(pe,"LI",{});var Xxe=s(Lu);Pce=n(Xxe,"STRONG",{});var Ypt=s(Pce);RTo=r(Ypt,"flava"),Ypt.forEach(t),PTo=r(Xxe," \u2014 "),dj=n(Xxe,"A",{href:!0});var Kpt=s(dj);BTo=r(Kpt,"FlavaProcessor"),Kpt.forEach(t),ITo=r(Xxe," (FLAVA model)"),Xxe.forEach(t),NTo=i(pe),yu=n(pe,"LI",{});var zxe=s(yu);Bce=n(zxe,"STRONG",{});var Zpt=s(Bce);qTo=r(Zpt,"groupvit"),Zpt.forEach(t),jTo=r(zxe," \u2014 "),cj=n(zxe,"A",{href:!0});var e_t=s(cj);DTo=r(e_t,"CLIPProcessor"),e_t.forEach(t),GTo=r(zxe," (GroupViT model)"),zxe.forEach(t),OTo=i(pe),xu=n(pe,"LI",{});var Wxe=s(xu);Ice=n(Wxe,"STRONG",{});var o_t=s(Ice);VTo=r(o_t,"layoutlmv2"),o_t.forEach(t),XTo=r(Wxe," \u2014 "),mj=n(Wxe,"A",{href:!0});var r_t=s(mj);zTo=r(r_t,"LayoutLMv2Processor"),r_t.forEach(t),WTo=r(Wxe," (LayoutLMv2 model)"),Wxe.forEach(t),QTo=i(pe),$u=n(pe,"LI",{});var Qxe=s($u);Nce=n(Qxe,"STRONG",{});var t_t=s(Nce);HTo=r(t_t,"layoutlmv3"),t_t.forEach(t),UTo=r(Qxe," \u2014 "),fj=n(Qxe,"A",{href:!0});var a_t=s(fj);JTo=r(a_t,"LayoutLMv3Processor"),a_t.forEach(t),YTo=r(Qxe," (LayoutLMv3 model)"),Qxe.forEach(t),KTo=i(pe),ku=n(pe,"LI",{});var Hxe=s(ku);qce=n(Hxe,"STRONG",{});var n_t=s(qce);ZTo=r(n_t,"layoutxlm"),n_t.forEach(t),eMo=r(Hxe," \u2014 "),gj=n(Hxe,"A",{href:!0});var s_t=s(gj);oMo=r(s_t,"LayoutXLMProcessor"),s_t.forEach(t),rMo=r(Hxe," (LayoutXLM model)"),Hxe.forEach(t),tMo=i(pe),Su=n(pe,"LI",{});var Uxe=s(Su);jce=n(Uxe,"STRONG",{});var l_t=s(jce);aMo=r(l_t,"owlvit"),l_t.forEach(t),nMo=r(Uxe," \u2014 "),hj=n(Uxe,"A",{href:!0});var i_t=s(hj);sMo=r(i_t,"OwlViTProcessor"),i_t.forEach(t),lMo=r(Uxe," (OWL-ViT model)"),Uxe.forEach(t),iMo=i(pe),Ru=n(pe,"LI",{});var Jxe=s(Ru);Dce=n(Jxe,"STRONG",{});var d_t=s(Dce);dMo=r(d_t,"sew"),d_t.forEach(t),cMo=r(Jxe," \u2014 "),uj=n(Jxe,"A",{href:!0});var c_t=s(uj);mMo=r(c_t,"Wav2Vec2Processor"),c_t.forEach(t),fMo=r(Jxe," (SEW model)"),Jxe.forEach(t),gMo=i(pe),Pu=n(pe,"LI",{});var Yxe=s(Pu);Gce=n(Yxe,"STRONG",{});var m_t=s(Gce);hMo=r(m_t,"sew-d"),m_t.forEach(t),uMo=r(Yxe," \u2014 "),pj=n(Yxe,"A",{href:!0});var f_t=s(pj);pMo=r(f_t,"Wav2Vec2Processor"),f_t.forEach(t),_Mo=r(Yxe," (SEW-D model)"),Yxe.forEach(t),bMo=i(pe),Bu=n(pe,"LI",{});var Kxe=s(Bu);Oce=n(Kxe,"STRONG",{});var g_t=s(Oce);vMo=r(g_t,"speech_to_text"),g_t.forEach(t),FMo=r(Kxe," \u2014 "),_j=n(Kxe,"A",{href:!0});var h_t=s(_j);TMo=r(h_t,"Speech2TextProcessor"),h_t.forEach(t),MMo=r(Kxe," (Speech2Text model)"),Kxe.forEach(t),EMo=i(pe),Iu=n(pe,"LI",{});var Zxe=s(Iu);Vce=n(Zxe,"STRONG",{});var u_t=s(Vce);CMo=r(u_t,"speech_to_text_2"),u_t.forEach(t),wMo=r(Zxe," \u2014 "),bj=n(Zxe,"A",{href:!0});var p_t=s(bj);AMo=r(p_t,"Speech2Text2Processor"),p_t.forEach(t),LMo=r(Zxe," (Speech2Text2 model)"),Zxe.forEach(t),yMo=i(pe),Nu=n(pe,"LI",{});var e$e=s(Nu);Xce=n(e$e,"STRONG",{});var __t=s(Xce);xMo=r(__t,"trocr"),__t.forEach(t),$Mo=r(e$e," \u2014 "),vj=n(e$e,"A",{href:!0});var b_t=s(vj);kMo=r(b_t,"TrOCRProcessor"),b_t.forEach(t),SMo=r(e$e," (TrOCR model)"),e$e.forEach(t),RMo=i(pe),qu=n(pe,"LI",{});var o$e=s(qu);zce=n(o$e,"STRONG",{});var v_t=s(zce);PMo=r(v_t,"unispeech"),v_t.forEach(t),BMo=r(o$e," \u2014 "),Fj=n(o$e,"A",{href:!0});var F_t=s(Fj);IMo=r(F_t,"Wav2Vec2Processor"),F_t.forEach(t),NMo=r(o$e," (UniSpeech model)"),o$e.forEach(t),qMo=i(pe),ju=n(pe,"LI",{});var r$e=s(ju);Wce=n(r$e,"STRONG",{});var T_t=s(Wce);jMo=r(T_t,"unispeech-sat"),T_t.forEach(t),DMo=r(r$e," \u2014 "),Tj=n(r$e,"A",{href:!0});var M_t=s(Tj);GMo=r(M_t,"Wav2Vec2Processor"),M_t.forEach(t),OMo=r(r$e," (UniSpeechSat model)"),r$e.forEach(t),VMo=i(pe),Du=n(pe,"LI",{});var t$e=s(Du);Qce=n(t$e,"STRONG",{});var E_t=s(Qce);XMo=r(E_t,"vilt"),E_t.forEach(t),zMo=r(t$e," \u2014 "),Mj=n(t$e,"A",{href:!0});var C_t=s(Mj);WMo=r(C_t,"ViltProcessor"),C_t.forEach(t),QMo=r(t$e," (ViLT model)"),t$e.forEach(t),HMo=i(pe),Gu=n(pe,"LI",{});var a$e=s(Gu);Hce=n(a$e,"STRONG",{});var w_t=s(Hce);UMo=r(w_t,"vision-text-dual-encoder"),w_t.forEach(t),JMo=r(a$e," \u2014 "),Ej=n(a$e,"A",{href:!0});var A_t=s(Ej);YMo=r(A_t,"VisionTextDualEncoderProcessor"),A_t.forEach(t),KMo=r(a$e," (VisionTextDualEncoder model)"),a$e.forEach(t),ZMo=i(pe),Ou=n(pe,"LI",{});var n$e=s(Ou);Uce=n(n$e,"STRONG",{});var L_t=s(Uce);e4o=r(L_t,"wav2vec2"),L_t.forEach(t),o4o=r(n$e," \u2014 "),Cj=n(n$e,"A",{href:!0});var y_t=s(Cj);r4o=r(y_t,"Wav2Vec2Processor"),y_t.forEach(t),t4o=r(n$e," (Wav2Vec2 model)"),n$e.forEach(t),a4o=i(pe),Vu=n(pe,"LI",{});var s$e=s(Vu);Jce=n(s$e,"STRONG",{});var x_t=s(Jce);n4o=r(x_t,"wav2vec2-conformer"),x_t.forEach(t),s4o=r(s$e," \u2014 "),wj=n(s$e,"A",{href:!0});var $_t=s(wj);l4o=r($_t,"Wav2Vec2Processor"),$_t.forEach(t),i4o=r(s$e," (Wav2Vec2-Conformer model)"),s$e.forEach(t),d4o=i(pe),Xu=n(pe,"LI",{});var l$e=s(Xu);Yce=n(l$e,"STRONG",{});var k_t=s(Yce);c4o=r(k_t,"wavlm"),k_t.forEach(t),m4o=r(l$e," \u2014 "),Aj=n(l$e,"A",{href:!0});var S_t=s(Aj);f4o=r(S_t,"Wav2Vec2Processor"),S_t.forEach(t),g4o=r(l$e," (WavLM model)"),l$e.forEach(t),pe.forEach(t),h4o=i(sa),T(zu.$$.fragment,sa),u4o=i(sa),T(Wu.$$.fragment,sa),sa.forEach(t),p4o=i(al),Qu=n(al,"DIV",{class:!0});var QQe=s(Qu);T(Yy.$$.fragment,QQe),_4o=i(QQe),Kce=n(QQe,"P",{});var R_t=s(Kce);b4o=r(R_t,"Register a new processor for this class."),R_t.forEach(t),QQe.forEach(t),al.forEach(t),Oze=i(m),Xi=n(m,"H2",{class:!0});var HQe=s(Xi);Hu=n(HQe,"A",{id:!0,class:!0,href:!0});var P_t=s(Hu);Zce=n(P_t,"SPAN",{});var B_t=s(Zce);T(Ky.$$.fragment,B_t),B_t.forEach(t),P_t.forEach(t),v4o=i(HQe),eme=n(HQe,"SPAN",{});var I_t=s(eme);F4o=r(I_t,"AutoModel"),I_t.forEach(t),HQe.forEach(t),Vze=i(m),ko=n(m,"DIV",{class:!0});var nl=s(ko);T(Zy.$$.fragment,nl),T4o=i(nl),zi=n(nl,"P",{});var wte=s(zi);M4o=r(wte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Lj=n(wte,"A",{href:!0});var N_t=s(Lj);E4o=r(N_t,"from_pretrained()"),N_t.forEach(t),C4o=r(wte," class method or the "),yj=n(wte,"A",{href:!0});var q_t=s(yj);w4o=r(q_t,"from_config()"),q_t.forEach(t),A4o=r(wte,` class
method.`),wte.forEach(t),L4o=i(nl),e8=n(nl,"P",{});var UQe=s(e8);y4o=r(UQe,"This class cannot be instantiated directly using "),ome=n(UQe,"CODE",{});var j_t=s(ome);x4o=r(j_t,"__init__()"),j_t.forEach(t),$4o=r(UQe," (throws an error)."),UQe.forEach(t),k4o=i(nl),it=n(nl,"DIV",{class:!0});var x7=s(it);T(o8.$$.fragment,x7),S4o=i(x7),rme=n(x7,"P",{});var D_t=s(rme);R4o=r(D_t,"Instantiates one of the base model classes of the library from a configuration."),D_t.forEach(t),P4o=i(x7),Wi=n(x7,"P",{});var Ate=s(Wi);B4o=r(Ate,`Note:
Loading a model from its configuration file does `),tme=n(Ate,"STRONG",{});var G_t=s(tme);I4o=r(G_t,"not"),G_t.forEach(t),N4o=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n(Ate,"A",{href:!0});var O_t=s(xj);q4o=r(O_t,"from_pretrained()"),O_t.forEach(t),j4o=r(Ate," to load the model weights."),Ate.forEach(t),D4o=i(x7),T(Uu.$$.fragment,x7),x7.forEach(t),G4o=i(nl),Ye=n(nl,"DIV",{class:!0});var la=s(Ye);T(r8.$$.fragment,la),O4o=i(la),ame=n(la,"P",{});var V_t=s(ame);V4o=r(V_t,"Instantiate one of the base model classes of the library from a pretrained model."),V_t.forEach(t),X4o=i(la),Ia=n(la,"P",{});var $7=s(Ia);z4o=r($7,"The model class to instantiate is selected based on the "),nme=n($7,"CODE",{});var X_t=s(nme);W4o=r(X_t,"model_type"),X_t.forEach(t),Q4o=r($7,` property of the config object (either
passed as an argument or loaded from `),sme=n($7,"CODE",{});var z_t=s(sme);H4o=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),U4o=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n($7,"CODE",{});var W_t=s(lme);J4o=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),Y4o=r($7,":"),$7.forEach(t),K4o=i(la),y=n(la,"UL",{});var x=s(y);Ju=n(x,"LI",{});var i$e=s(Ju);ime=n(i$e,"STRONG",{});var Q_t=s(ime);Z4o=r(Q_t,"albert"),Q_t.forEach(t),eEo=r(i$e," \u2014 "),$j=n(i$e,"A",{href:!0});var H_t=s($j);oEo=r(H_t,"AlbertModel"),H_t.forEach(t),rEo=r(i$e," (ALBERT model)"),i$e.forEach(t),tEo=i(x),Yu=n(x,"LI",{});var d$e=s(Yu);dme=n(d$e,"STRONG",{});var U_t=s(dme);aEo=r(U_t,"bart"),U_t.forEach(t),nEo=r(d$e," \u2014 "),kj=n(d$e,"A",{href:!0});var J_t=s(kj);sEo=r(J_t,"BartModel"),J_t.forEach(t),lEo=r(d$e," (BART model)"),d$e.forEach(t),iEo=i(x),Ku=n(x,"LI",{});var c$e=s(Ku);cme=n(c$e,"STRONG",{});var Y_t=s(cme);dEo=r(Y_t,"beit"),Y_t.forEach(t),cEo=r(c$e," \u2014 "),Sj=n(c$e,"A",{href:!0});var K_t=s(Sj);mEo=r(K_t,"BeitModel"),K_t.forEach(t),fEo=r(c$e," (BEiT model)"),c$e.forEach(t),gEo=i(x),Zu=n(x,"LI",{});var m$e=s(Zu);mme=n(m$e,"STRONG",{});var Z_t=s(mme);hEo=r(Z_t,"bert"),Z_t.forEach(t),uEo=r(m$e," \u2014 "),Rj=n(m$e,"A",{href:!0});var e2t=s(Rj);pEo=r(e2t,"BertModel"),e2t.forEach(t),_Eo=r(m$e," (BERT model)"),m$e.forEach(t),bEo=i(x),ep=n(x,"LI",{});var f$e=s(ep);fme=n(f$e,"STRONG",{});var o2t=s(fme);vEo=r(o2t,"bert-generation"),o2t.forEach(t),FEo=r(f$e," \u2014 "),Pj=n(f$e,"A",{href:!0});var r2t=s(Pj);TEo=r(r2t,"BertGenerationEncoder"),r2t.forEach(t),MEo=r(f$e," (Bert Generation model)"),f$e.forEach(t),EEo=i(x),op=n(x,"LI",{});var g$e=s(op);gme=n(g$e,"STRONG",{});var t2t=s(gme);CEo=r(t2t,"big_bird"),t2t.forEach(t),wEo=r(g$e," \u2014 "),Bj=n(g$e,"A",{href:!0});var a2t=s(Bj);AEo=r(a2t,"BigBirdModel"),a2t.forEach(t),LEo=r(g$e," (BigBird model)"),g$e.forEach(t),yEo=i(x),rp=n(x,"LI",{});var h$e=s(rp);hme=n(h$e,"STRONG",{});var n2t=s(hme);xEo=r(n2t,"bigbird_pegasus"),n2t.forEach(t),$Eo=r(h$e," \u2014 "),Ij=n(h$e,"A",{href:!0});var s2t=s(Ij);kEo=r(s2t,"BigBirdPegasusModel"),s2t.forEach(t),SEo=r(h$e," (BigBird-Pegasus model)"),h$e.forEach(t),REo=i(x),tp=n(x,"LI",{});var u$e=s(tp);ume=n(u$e,"STRONG",{});var l2t=s(ume);PEo=r(l2t,"blenderbot"),l2t.forEach(t),BEo=r(u$e," \u2014 "),Nj=n(u$e,"A",{href:!0});var i2t=s(Nj);IEo=r(i2t,"BlenderbotModel"),i2t.forEach(t),NEo=r(u$e," (Blenderbot model)"),u$e.forEach(t),qEo=i(x),ap=n(x,"LI",{});var p$e=s(ap);pme=n(p$e,"STRONG",{});var d2t=s(pme);jEo=r(d2t,"blenderbot-small"),d2t.forEach(t),DEo=r(p$e," \u2014 "),qj=n(p$e,"A",{href:!0});var c2t=s(qj);GEo=r(c2t,"BlenderbotSmallModel"),c2t.forEach(t),OEo=r(p$e," (BlenderbotSmall model)"),p$e.forEach(t),VEo=i(x),np=n(x,"LI",{});var _$e=s(np);_me=n(_$e,"STRONG",{});var m2t=s(_me);XEo=r(m2t,"bloom"),m2t.forEach(t),zEo=r(_$e," \u2014 "),jj=n(_$e,"A",{href:!0});var f2t=s(jj);WEo=r(f2t,"BloomModel"),f2t.forEach(t),QEo=r(_$e," (BLOOM model)"),_$e.forEach(t),HEo=i(x),sp=n(x,"LI",{});var b$e=s(sp);bme=n(b$e,"STRONG",{});var g2t=s(bme);UEo=r(g2t,"camembert"),g2t.forEach(t),JEo=r(b$e," \u2014 "),Dj=n(b$e,"A",{href:!0});var h2t=s(Dj);YEo=r(h2t,"CamembertModel"),h2t.forEach(t),KEo=r(b$e," (CamemBERT model)"),b$e.forEach(t),ZEo=i(x),lp=n(x,"LI",{});var v$e=s(lp);vme=n(v$e,"STRONG",{});var u2t=s(vme);eCo=r(u2t,"canine"),u2t.forEach(t),oCo=r(v$e," \u2014 "),Gj=n(v$e,"A",{href:!0});var p2t=s(Gj);rCo=r(p2t,"CanineModel"),p2t.forEach(t),tCo=r(v$e," (CANINE model)"),v$e.forEach(t),aCo=i(x),ip=n(x,"LI",{});var F$e=s(ip);Fme=n(F$e,"STRONG",{});var _2t=s(Fme);nCo=r(_2t,"clip"),_2t.forEach(t),sCo=r(F$e," \u2014 "),Oj=n(F$e,"A",{href:!0});var b2t=s(Oj);lCo=r(b2t,"CLIPModel"),b2t.forEach(t),iCo=r(F$e," (CLIP model)"),F$e.forEach(t),dCo=i(x),dp=n(x,"LI",{});var T$e=s(dp);Tme=n(T$e,"STRONG",{});var v2t=s(Tme);cCo=r(v2t,"codegen"),v2t.forEach(t),mCo=r(T$e," \u2014 "),Vj=n(T$e,"A",{href:!0});var F2t=s(Vj);fCo=r(F2t,"CodeGenModel"),F2t.forEach(t),gCo=r(T$e," (CodeGen model)"),T$e.forEach(t),hCo=i(x),cp=n(x,"LI",{});var M$e=s(cp);Mme=n(M$e,"STRONG",{});var T2t=s(Mme);uCo=r(T2t,"convbert"),T2t.forEach(t),pCo=r(M$e," \u2014 "),Xj=n(M$e,"A",{href:!0});var M2t=s(Xj);_Co=r(M2t,"ConvBertModel"),M2t.forEach(t),bCo=r(M$e," (ConvBERT model)"),M$e.forEach(t),vCo=i(x),mp=n(x,"LI",{});var E$e=s(mp);Eme=n(E$e,"STRONG",{});var E2t=s(Eme);FCo=r(E2t,"convnext"),E2t.forEach(t),TCo=r(E$e," \u2014 "),zj=n(E$e,"A",{href:!0});var C2t=s(zj);MCo=r(C2t,"ConvNextModel"),C2t.forEach(t),ECo=r(E$e," (ConvNeXT model)"),E$e.forEach(t),CCo=i(x),fp=n(x,"LI",{});var C$e=s(fp);Cme=n(C$e,"STRONG",{});var w2t=s(Cme);wCo=r(w2t,"ctrl"),w2t.forEach(t),ACo=r(C$e," \u2014 "),Wj=n(C$e,"A",{href:!0});var A2t=s(Wj);LCo=r(A2t,"CTRLModel"),A2t.forEach(t),yCo=r(C$e," (CTRL model)"),C$e.forEach(t),xCo=i(x),gp=n(x,"LI",{});var w$e=s(gp);wme=n(w$e,"STRONG",{});var L2t=s(wme);$Co=r(L2t,"cvt"),L2t.forEach(t),kCo=r(w$e," \u2014 "),Qj=n(w$e,"A",{href:!0});var y2t=s(Qj);SCo=r(y2t,"CvtModel"),y2t.forEach(t),RCo=r(w$e," (CvT model)"),w$e.forEach(t),PCo=i(x),hp=n(x,"LI",{});var A$e=s(hp);Ame=n(A$e,"STRONG",{});var x2t=s(Ame);BCo=r(x2t,"data2vec-audio"),x2t.forEach(t),ICo=r(A$e," \u2014 "),Hj=n(A$e,"A",{href:!0});var $2t=s(Hj);NCo=r($2t,"Data2VecAudioModel"),$2t.forEach(t),qCo=r(A$e," (Data2VecAudio model)"),A$e.forEach(t),jCo=i(x),up=n(x,"LI",{});var L$e=s(up);Lme=n(L$e,"STRONG",{});var k2t=s(Lme);DCo=r(k2t,"data2vec-text"),k2t.forEach(t),GCo=r(L$e," \u2014 "),Uj=n(L$e,"A",{href:!0});var S2t=s(Uj);OCo=r(S2t,"Data2VecTextModel"),S2t.forEach(t),VCo=r(L$e," (Data2VecText model)"),L$e.forEach(t),XCo=i(x),pp=n(x,"LI",{});var y$e=s(pp);yme=n(y$e,"STRONG",{});var R2t=s(yme);zCo=r(R2t,"data2vec-vision"),R2t.forEach(t),WCo=r(y$e," \u2014 "),Jj=n(y$e,"A",{href:!0});var P2t=s(Jj);QCo=r(P2t,"Data2VecVisionModel"),P2t.forEach(t),HCo=r(y$e," (Data2VecVision model)"),y$e.forEach(t),UCo=i(x),_p=n(x,"LI",{});var x$e=s(_p);xme=n(x$e,"STRONG",{});var B2t=s(xme);JCo=r(B2t,"deberta"),B2t.forEach(t),YCo=r(x$e," \u2014 "),Yj=n(x$e,"A",{href:!0});var I2t=s(Yj);KCo=r(I2t,"DebertaModel"),I2t.forEach(t),ZCo=r(x$e," (DeBERTa model)"),x$e.forEach(t),e5o=i(x),bp=n(x,"LI",{});var $$e=s(bp);$me=n($$e,"STRONG",{});var N2t=s($me);o5o=r(N2t,"deberta-v2"),N2t.forEach(t),r5o=r($$e," \u2014 "),Kj=n($$e,"A",{href:!0});var q2t=s(Kj);t5o=r(q2t,"DebertaV2Model"),q2t.forEach(t),a5o=r($$e," (DeBERTa-v2 model)"),$$e.forEach(t),n5o=i(x),vp=n(x,"LI",{});var k$e=s(vp);kme=n(k$e,"STRONG",{});var j2t=s(kme);s5o=r(j2t,"decision_transformer"),j2t.forEach(t),l5o=r(k$e," \u2014 "),Zj=n(k$e,"A",{href:!0});var D2t=s(Zj);i5o=r(D2t,"DecisionTransformerModel"),D2t.forEach(t),d5o=r(k$e," (Decision Transformer model)"),k$e.forEach(t),c5o=i(x),Fp=n(x,"LI",{});var S$e=s(Fp);Sme=n(S$e,"STRONG",{});var G2t=s(Sme);m5o=r(G2t,"deit"),G2t.forEach(t),f5o=r(S$e," \u2014 "),eD=n(S$e,"A",{href:!0});var O2t=s(eD);g5o=r(O2t,"DeiTModel"),O2t.forEach(t),h5o=r(S$e," (DeiT model)"),S$e.forEach(t),u5o=i(x),Tp=n(x,"LI",{});var R$e=s(Tp);Rme=n(R$e,"STRONG",{});var V2t=s(Rme);p5o=r(V2t,"detr"),V2t.forEach(t),_5o=r(R$e," \u2014 "),oD=n(R$e,"A",{href:!0});var X2t=s(oD);b5o=r(X2t,"DetrModel"),X2t.forEach(t),v5o=r(R$e," (DETR model)"),R$e.forEach(t),F5o=i(x),Mp=n(x,"LI",{});var P$e=s(Mp);Pme=n(P$e,"STRONG",{});var z2t=s(Pme);T5o=r(z2t,"distilbert"),z2t.forEach(t),M5o=r(P$e," \u2014 "),rD=n(P$e,"A",{href:!0});var W2t=s(rD);E5o=r(W2t,"DistilBertModel"),W2t.forEach(t),C5o=r(P$e," (DistilBERT model)"),P$e.forEach(t),w5o=i(x),Ep=n(x,"LI",{});var B$e=s(Ep);Bme=n(B$e,"STRONG",{});var Q2t=s(Bme);A5o=r(Q2t,"dpr"),Q2t.forEach(t),L5o=r(B$e," \u2014 "),tD=n(B$e,"A",{href:!0});var H2t=s(tD);y5o=r(H2t,"DPRQuestionEncoder"),H2t.forEach(t),x5o=r(B$e," (DPR model)"),B$e.forEach(t),$5o=i(x),Cp=n(x,"LI",{});var I$e=s(Cp);Ime=n(I$e,"STRONG",{});var U2t=s(Ime);k5o=r(U2t,"dpt"),U2t.forEach(t),S5o=r(I$e," \u2014 "),aD=n(I$e,"A",{href:!0});var J2t=s(aD);R5o=r(J2t,"DPTModel"),J2t.forEach(t),P5o=r(I$e," (DPT model)"),I$e.forEach(t),B5o=i(x),wp=n(x,"LI",{});var N$e=s(wp);Nme=n(N$e,"STRONG",{});var Y2t=s(Nme);I5o=r(Y2t,"electra"),Y2t.forEach(t),N5o=r(N$e," \u2014 "),nD=n(N$e,"A",{href:!0});var K2t=s(nD);q5o=r(K2t,"ElectraModel"),K2t.forEach(t),j5o=r(N$e," (ELECTRA model)"),N$e.forEach(t),D5o=i(x),Ap=n(x,"LI",{});var q$e=s(Ap);qme=n(q$e,"STRONG",{});var Z2t=s(qme);G5o=r(Z2t,"flaubert"),Z2t.forEach(t),O5o=r(q$e," \u2014 "),sD=n(q$e,"A",{href:!0});var ebt=s(sD);V5o=r(ebt,"FlaubertModel"),ebt.forEach(t),X5o=r(q$e," (FlauBERT model)"),q$e.forEach(t),z5o=i(x),Lp=n(x,"LI",{});var j$e=s(Lp);jme=n(j$e,"STRONG",{});var obt=s(jme);W5o=r(obt,"flava"),obt.forEach(t),Q5o=r(j$e," \u2014 "),lD=n(j$e,"A",{href:!0});var rbt=s(lD);H5o=r(rbt,"FlavaModel"),rbt.forEach(t),U5o=r(j$e," (FLAVA model)"),j$e.forEach(t),J5o=i(x),yp=n(x,"LI",{});var D$e=s(yp);Dme=n(D$e,"STRONG",{});var tbt=s(Dme);Y5o=r(tbt,"fnet"),tbt.forEach(t),K5o=r(D$e," \u2014 "),iD=n(D$e,"A",{href:!0});var abt=s(iD);Z5o=r(abt,"FNetModel"),abt.forEach(t),e3o=r(D$e," (FNet model)"),D$e.forEach(t),o3o=i(x),xp=n(x,"LI",{});var G$e=s(xp);Gme=n(G$e,"STRONG",{});var nbt=s(Gme);r3o=r(nbt,"fsmt"),nbt.forEach(t),t3o=r(G$e," \u2014 "),dD=n(G$e,"A",{href:!0});var sbt=s(dD);a3o=r(sbt,"FSMTModel"),sbt.forEach(t),n3o=r(G$e," (FairSeq Machine-Translation model)"),G$e.forEach(t),s3o=i(x),Js=n(x,"LI",{});var eR=s(Js);Ome=n(eR,"STRONG",{});var lbt=s(Ome);l3o=r(lbt,"funnel"),lbt.forEach(t),i3o=r(eR," \u2014 "),cD=n(eR,"A",{href:!0});var ibt=s(cD);d3o=r(ibt,"FunnelModel"),ibt.forEach(t),c3o=r(eR," or "),mD=n(eR,"A",{href:!0});var dbt=s(mD);m3o=r(dbt,"FunnelBaseModel"),dbt.forEach(t),f3o=r(eR," (Funnel Transformer model)"),eR.forEach(t),g3o=i(x),$p=n(x,"LI",{});var O$e=s($p);Vme=n(O$e,"STRONG",{});var cbt=s(Vme);h3o=r(cbt,"glpn"),cbt.forEach(t),u3o=r(O$e," \u2014 "),fD=n(O$e,"A",{href:!0});var mbt=s(fD);p3o=r(mbt,"GLPNModel"),mbt.forEach(t),_3o=r(O$e," (GLPN model)"),O$e.forEach(t),b3o=i(x),kp=n(x,"LI",{});var V$e=s(kp);Xme=n(V$e,"STRONG",{});var fbt=s(Xme);v3o=r(fbt,"gpt2"),fbt.forEach(t),F3o=r(V$e," \u2014 "),gD=n(V$e,"A",{href:!0});var gbt=s(gD);T3o=r(gbt,"GPT2Model"),gbt.forEach(t),M3o=r(V$e," (OpenAI GPT-2 model)"),V$e.forEach(t),E3o=i(x),Sp=n(x,"LI",{});var X$e=s(Sp);zme=n(X$e,"STRONG",{});var hbt=s(zme);C3o=r(hbt,"gpt_neo"),hbt.forEach(t),w3o=r(X$e," \u2014 "),hD=n(X$e,"A",{href:!0});var ubt=s(hD);A3o=r(ubt,"GPTNeoModel"),ubt.forEach(t),L3o=r(X$e," (GPT Neo model)"),X$e.forEach(t),y3o=i(x),Rp=n(x,"LI",{});var z$e=s(Rp);Wme=n(z$e,"STRONG",{});var pbt=s(Wme);x3o=r(pbt,"gpt_neox"),pbt.forEach(t),$3o=r(z$e," \u2014 "),uD=n(z$e,"A",{href:!0});var _bt=s(uD);k3o=r(_bt,"GPTNeoXModel"),_bt.forEach(t),S3o=r(z$e," (GPT NeoX model)"),z$e.forEach(t),R3o=i(x),Pp=n(x,"LI",{});var W$e=s(Pp);Qme=n(W$e,"STRONG",{});var bbt=s(Qme);P3o=r(bbt,"gptj"),bbt.forEach(t),B3o=r(W$e," \u2014 "),pD=n(W$e,"A",{href:!0});var vbt=s(pD);I3o=r(vbt,"GPTJModel"),vbt.forEach(t),N3o=r(W$e," (GPT-J model)"),W$e.forEach(t),q3o=i(x),Bp=n(x,"LI",{});var Q$e=s(Bp);Hme=n(Q$e,"STRONG",{});var Fbt=s(Hme);j3o=r(Fbt,"groupvit"),Fbt.forEach(t),D3o=r(Q$e," \u2014 "),_D=n(Q$e,"A",{href:!0});var Tbt=s(_D);G3o=r(Tbt,"GroupViTModel"),Tbt.forEach(t),O3o=r(Q$e," (GroupViT model)"),Q$e.forEach(t),V3o=i(x),Ip=n(x,"LI",{});var H$e=s(Ip);Ume=n(H$e,"STRONG",{});var Mbt=s(Ume);X3o=r(Mbt,"hubert"),Mbt.forEach(t),z3o=r(H$e," \u2014 "),bD=n(H$e,"A",{href:!0});var Ebt=s(bD);W3o=r(Ebt,"HubertModel"),Ebt.forEach(t),Q3o=r(H$e," (Hubert model)"),H$e.forEach(t),H3o=i(x),Np=n(x,"LI",{});var U$e=s(Np);Jme=n(U$e,"STRONG",{});var Cbt=s(Jme);U3o=r(Cbt,"ibert"),Cbt.forEach(t),J3o=r(U$e," \u2014 "),vD=n(U$e,"A",{href:!0});var wbt=s(vD);Y3o=r(wbt,"IBertModel"),wbt.forEach(t),K3o=r(U$e," (I-BERT model)"),U$e.forEach(t),Z3o=i(x),qp=n(x,"LI",{});var J$e=s(qp);Yme=n(J$e,"STRONG",{});var Abt=s(Yme);e0o=r(Abt,"imagegpt"),Abt.forEach(t),o0o=r(J$e," \u2014 "),FD=n(J$e,"A",{href:!0});var Lbt=s(FD);r0o=r(Lbt,"ImageGPTModel"),Lbt.forEach(t),t0o=r(J$e," (ImageGPT model)"),J$e.forEach(t),a0o=i(x),jp=n(x,"LI",{});var Y$e=s(jp);Kme=n(Y$e,"STRONG",{});var ybt=s(Kme);n0o=r(ybt,"layoutlm"),ybt.forEach(t),s0o=r(Y$e," \u2014 "),TD=n(Y$e,"A",{href:!0});var xbt=s(TD);l0o=r(xbt,"LayoutLMModel"),xbt.forEach(t),i0o=r(Y$e," (LayoutLM model)"),Y$e.forEach(t),d0o=i(x),Dp=n(x,"LI",{});var K$e=s(Dp);Zme=n(K$e,"STRONG",{});var $bt=s(Zme);c0o=r($bt,"layoutlmv2"),$bt.forEach(t),m0o=r(K$e," \u2014 "),MD=n(K$e,"A",{href:!0});var kbt=s(MD);f0o=r(kbt,"LayoutLMv2Model"),kbt.forEach(t),g0o=r(K$e," (LayoutLMv2 model)"),K$e.forEach(t),h0o=i(x),Gp=n(x,"LI",{});var Z$e=s(Gp);efe=n(Z$e,"STRONG",{});var Sbt=s(efe);u0o=r(Sbt,"layoutlmv3"),Sbt.forEach(t),p0o=r(Z$e," \u2014 "),ED=n(Z$e,"A",{href:!0});var Rbt=s(ED);_0o=r(Rbt,"LayoutLMv3Model"),Rbt.forEach(t),b0o=r(Z$e," (LayoutLMv3 model)"),Z$e.forEach(t),v0o=i(x),Op=n(x,"LI",{});var eke=s(Op);ofe=n(eke,"STRONG",{});var Pbt=s(ofe);F0o=r(Pbt,"led"),Pbt.forEach(t),T0o=r(eke," \u2014 "),CD=n(eke,"A",{href:!0});var Bbt=s(CD);M0o=r(Bbt,"LEDModel"),Bbt.forEach(t),E0o=r(eke," (LED model)"),eke.forEach(t),C0o=i(x),Vp=n(x,"LI",{});var oke=s(Vp);rfe=n(oke,"STRONG",{});var Ibt=s(rfe);w0o=r(Ibt,"levit"),Ibt.forEach(t),A0o=r(oke," \u2014 "),wD=n(oke,"A",{href:!0});var Nbt=s(wD);L0o=r(Nbt,"LevitModel"),Nbt.forEach(t),y0o=r(oke," (LeViT model)"),oke.forEach(t),x0o=i(x),Xp=n(x,"LI",{});var rke=s(Xp);tfe=n(rke,"STRONG",{});var qbt=s(tfe);$0o=r(qbt,"longformer"),qbt.forEach(t),k0o=r(rke," \u2014 "),AD=n(rke,"A",{href:!0});var jbt=s(AD);S0o=r(jbt,"LongformerModel"),jbt.forEach(t),R0o=r(rke," (Longformer model)"),rke.forEach(t),P0o=i(x),zp=n(x,"LI",{});var tke=s(zp);afe=n(tke,"STRONG",{});var Dbt=s(afe);B0o=r(Dbt,"longt5"),Dbt.forEach(t),I0o=r(tke," \u2014 "),LD=n(tke,"A",{href:!0});var Gbt=s(LD);N0o=r(Gbt,"LongT5Model"),Gbt.forEach(t),q0o=r(tke," (LongT5 model)"),tke.forEach(t),j0o=i(x),Wp=n(x,"LI",{});var ake=s(Wp);nfe=n(ake,"STRONG",{});var Obt=s(nfe);D0o=r(Obt,"luke"),Obt.forEach(t),G0o=r(ake," \u2014 "),yD=n(ake,"A",{href:!0});var Vbt=s(yD);O0o=r(Vbt,"LukeModel"),Vbt.forEach(t),V0o=r(ake," (LUKE model)"),ake.forEach(t),X0o=i(x),Qp=n(x,"LI",{});var nke=s(Qp);sfe=n(nke,"STRONG",{});var Xbt=s(sfe);z0o=r(Xbt,"lxmert"),Xbt.forEach(t),W0o=r(nke," \u2014 "),xD=n(nke,"A",{href:!0});var zbt=s(xD);Q0o=r(zbt,"LxmertModel"),zbt.forEach(t),H0o=r(nke," (LXMERT model)"),nke.forEach(t),U0o=i(x),Hp=n(x,"LI",{});var ske=s(Hp);lfe=n(ske,"STRONG",{});var Wbt=s(lfe);J0o=r(Wbt,"m2m_100"),Wbt.forEach(t),Y0o=r(ske," \u2014 "),$D=n(ske,"A",{href:!0});var Qbt=s($D);K0o=r(Qbt,"M2M100Model"),Qbt.forEach(t),Z0o=r(ske," (M2M100 model)"),ske.forEach(t),ewo=i(x),Up=n(x,"LI",{});var lke=s(Up);ife=n(lke,"STRONG",{});var Hbt=s(ife);owo=r(Hbt,"marian"),Hbt.forEach(t),rwo=r(lke," \u2014 "),kD=n(lke,"A",{href:!0});var Ubt=s(kD);two=r(Ubt,"MarianModel"),Ubt.forEach(t),awo=r(lke," (Marian model)"),lke.forEach(t),nwo=i(x),Jp=n(x,"LI",{});var ike=s(Jp);dfe=n(ike,"STRONG",{});var Jbt=s(dfe);swo=r(Jbt,"maskformer"),Jbt.forEach(t),lwo=r(ike," \u2014 "),SD=n(ike,"A",{href:!0});var Ybt=s(SD);iwo=r(Ybt,"MaskFormerModel"),Ybt.forEach(t),dwo=r(ike," (MaskFormer model)"),ike.forEach(t),cwo=i(x),Yp=n(x,"LI",{});var dke=s(Yp);cfe=n(dke,"STRONG",{});var Kbt=s(cfe);mwo=r(Kbt,"mbart"),Kbt.forEach(t),fwo=r(dke," \u2014 "),RD=n(dke,"A",{href:!0});var Zbt=s(RD);gwo=r(Zbt,"MBartModel"),Zbt.forEach(t),hwo=r(dke," (mBART model)"),dke.forEach(t),uwo=i(x),Kp=n(x,"LI",{});var cke=s(Kp);mfe=n(cke,"STRONG",{});var evt=s(mfe);pwo=r(evt,"mctct"),evt.forEach(t),_wo=r(cke," \u2014 "),PD=n(cke,"A",{href:!0});var ovt=s(PD);bwo=r(ovt,"MCTCTModel"),ovt.forEach(t),vwo=r(cke," (M-CTC-T model)"),cke.forEach(t),Fwo=i(x),Zp=n(x,"LI",{});var mke=s(Zp);ffe=n(mke,"STRONG",{});var rvt=s(ffe);Two=r(rvt,"megatron-bert"),rvt.forEach(t),Mwo=r(mke," \u2014 "),BD=n(mke,"A",{href:!0});var tvt=s(BD);Ewo=r(tvt,"MegatronBertModel"),tvt.forEach(t),Cwo=r(mke," (Megatron-BERT model)"),mke.forEach(t),wwo=i(x),e_=n(x,"LI",{});var fke=s(e_);gfe=n(fke,"STRONG",{});var avt=s(gfe);Awo=r(avt,"mobilebert"),avt.forEach(t),Lwo=r(fke," \u2014 "),ID=n(fke,"A",{href:!0});var nvt=s(ID);ywo=r(nvt,"MobileBertModel"),nvt.forEach(t),xwo=r(fke," (MobileBERT model)"),fke.forEach(t),$wo=i(x),o_=n(x,"LI",{});var gke=s(o_);hfe=n(gke,"STRONG",{});var svt=s(hfe);kwo=r(svt,"mobilevit"),svt.forEach(t),Swo=r(gke," \u2014 "),ND=n(gke,"A",{href:!0});var lvt=s(ND);Rwo=r(lvt,"MobileViTModel"),lvt.forEach(t),Pwo=r(gke," (MobileViT model)"),gke.forEach(t),Bwo=i(x),r_=n(x,"LI",{});var hke=s(r_);ufe=n(hke,"STRONG",{});var ivt=s(ufe);Iwo=r(ivt,"mpnet"),ivt.forEach(t),Nwo=r(hke," \u2014 "),qD=n(hke,"A",{href:!0});var dvt=s(qD);qwo=r(dvt,"MPNetModel"),dvt.forEach(t),jwo=r(hke," (MPNet model)"),hke.forEach(t),Dwo=i(x),t_=n(x,"LI",{});var uke=s(t_);pfe=n(uke,"STRONG",{});var cvt=s(pfe);Gwo=r(cvt,"mt5"),cvt.forEach(t),Owo=r(uke," \u2014 "),jD=n(uke,"A",{href:!0});var mvt=s(jD);Vwo=r(mvt,"MT5Model"),mvt.forEach(t),Xwo=r(uke," (MT5 model)"),uke.forEach(t),zwo=i(x),a_=n(x,"LI",{});var pke=s(a_);_fe=n(pke,"STRONG",{});var fvt=s(_fe);Wwo=r(fvt,"mvp"),fvt.forEach(t),Qwo=r(pke," \u2014 "),DD=n(pke,"A",{href:!0});var gvt=s(DD);Hwo=r(gvt,"MvpModel"),gvt.forEach(t),Uwo=r(pke," (MVP model)"),pke.forEach(t),Jwo=i(x),n_=n(x,"LI",{});var _ke=s(n_);bfe=n(_ke,"STRONG",{});var hvt=s(bfe);Ywo=r(hvt,"nezha"),hvt.forEach(t),Kwo=r(_ke," \u2014 "),GD=n(_ke,"A",{href:!0});var uvt=s(GD);Zwo=r(uvt,"NezhaModel"),uvt.forEach(t),e6o=r(_ke," (Nezha model)"),_ke.forEach(t),o6o=i(x),s_=n(x,"LI",{});var bke=s(s_);vfe=n(bke,"STRONG",{});var pvt=s(vfe);r6o=r(pvt,"nllb"),pvt.forEach(t),t6o=r(bke," \u2014 "),OD=n(bke,"A",{href:!0});var _vt=s(OD);a6o=r(_vt,"M2M100Model"),_vt.forEach(t),n6o=r(bke," (NLLB model)"),bke.forEach(t),s6o=i(x),l_=n(x,"LI",{});var vke=s(l_);Ffe=n(vke,"STRONG",{});var bvt=s(Ffe);l6o=r(bvt,"nystromformer"),bvt.forEach(t),i6o=r(vke," \u2014 "),VD=n(vke,"A",{href:!0});var vvt=s(VD);d6o=r(vvt,"NystromformerModel"),vvt.forEach(t),c6o=r(vke," (Nystr\xF6mformer model)"),vke.forEach(t),m6o=i(x),i_=n(x,"LI",{});var Fke=s(i_);Tfe=n(Fke,"STRONG",{});var Fvt=s(Tfe);f6o=r(Fvt,"openai-gpt"),Fvt.forEach(t),g6o=r(Fke," \u2014 "),XD=n(Fke,"A",{href:!0});var Tvt=s(XD);h6o=r(Tvt,"OpenAIGPTModel"),Tvt.forEach(t),u6o=r(Fke," (OpenAI GPT model)"),Fke.forEach(t),p6o=i(x),d_=n(x,"LI",{});var Tke=s(d_);Mfe=n(Tke,"STRONG",{});var Mvt=s(Mfe);_6o=r(Mvt,"opt"),Mvt.forEach(t),b6o=r(Tke," \u2014 "),zD=n(Tke,"A",{href:!0});var Evt=s(zD);v6o=r(Evt,"OPTModel"),Evt.forEach(t),F6o=r(Tke," (OPT model)"),Tke.forEach(t),T6o=i(x),c_=n(x,"LI",{});var Mke=s(c_);Efe=n(Mke,"STRONG",{});var Cvt=s(Efe);M6o=r(Cvt,"owlvit"),Cvt.forEach(t),E6o=r(Mke," \u2014 "),WD=n(Mke,"A",{href:!0});var wvt=s(WD);C6o=r(wvt,"OwlViTModel"),wvt.forEach(t),w6o=r(Mke," (OWL-ViT model)"),Mke.forEach(t),A6o=i(x),m_=n(x,"LI",{});var Eke=s(m_);Cfe=n(Eke,"STRONG",{});var Avt=s(Cfe);L6o=r(Avt,"pegasus"),Avt.forEach(t),y6o=r(Eke," \u2014 "),QD=n(Eke,"A",{href:!0});var Lvt=s(QD);x6o=r(Lvt,"PegasusModel"),Lvt.forEach(t),$6o=r(Eke," (Pegasus model)"),Eke.forEach(t),k6o=i(x),f_=n(x,"LI",{});var Cke=s(f_);wfe=n(Cke,"STRONG",{});var yvt=s(wfe);S6o=r(yvt,"perceiver"),yvt.forEach(t),R6o=r(Cke," \u2014 "),HD=n(Cke,"A",{href:!0});var xvt=s(HD);P6o=r(xvt,"PerceiverModel"),xvt.forEach(t),B6o=r(Cke," (Perceiver model)"),Cke.forEach(t),I6o=i(x),g_=n(x,"LI",{});var wke=s(g_);Afe=n(wke,"STRONG",{});var $vt=s(Afe);N6o=r($vt,"plbart"),$vt.forEach(t),q6o=r(wke," \u2014 "),UD=n(wke,"A",{href:!0});var kvt=s(UD);j6o=r(kvt,"PLBartModel"),kvt.forEach(t),D6o=r(wke," (PLBart model)"),wke.forEach(t),G6o=i(x),h_=n(x,"LI",{});var Ake=s(h_);Lfe=n(Ake,"STRONG",{});var Svt=s(Lfe);O6o=r(Svt,"poolformer"),Svt.forEach(t),V6o=r(Ake," \u2014 "),JD=n(Ake,"A",{href:!0});var Rvt=s(JD);X6o=r(Rvt,"PoolFormerModel"),Rvt.forEach(t),z6o=r(Ake," (PoolFormer model)"),Ake.forEach(t),W6o=i(x),u_=n(x,"LI",{});var Lke=s(u_);yfe=n(Lke,"STRONG",{});var Pvt=s(yfe);Q6o=r(Pvt,"prophetnet"),Pvt.forEach(t),H6o=r(Lke," \u2014 "),YD=n(Lke,"A",{href:!0});var Bvt=s(YD);U6o=r(Bvt,"ProphetNetModel"),Bvt.forEach(t),J6o=r(Lke," (ProphetNet model)"),Lke.forEach(t),Y6o=i(x),p_=n(x,"LI",{});var yke=s(p_);xfe=n(yke,"STRONG",{});var Ivt=s(xfe);K6o=r(Ivt,"qdqbert"),Ivt.forEach(t),Z6o=r(yke," \u2014 "),KD=n(yke,"A",{href:!0});var Nvt=s(KD);eAo=r(Nvt,"QDQBertModel"),Nvt.forEach(t),oAo=r(yke," (QDQBert model)"),yke.forEach(t),rAo=i(x),__=n(x,"LI",{});var xke=s(__);$fe=n(xke,"STRONG",{});var qvt=s($fe);tAo=r(qvt,"reformer"),qvt.forEach(t),aAo=r(xke," \u2014 "),ZD=n(xke,"A",{href:!0});var jvt=s(ZD);nAo=r(jvt,"ReformerModel"),jvt.forEach(t),sAo=r(xke," (Reformer model)"),xke.forEach(t),lAo=i(x),b_=n(x,"LI",{});var $ke=s(b_);kfe=n($ke,"STRONG",{});var Dvt=s(kfe);iAo=r(Dvt,"regnet"),Dvt.forEach(t),dAo=r($ke," \u2014 "),eG=n($ke,"A",{href:!0});var Gvt=s(eG);cAo=r(Gvt,"RegNetModel"),Gvt.forEach(t),mAo=r($ke," (RegNet model)"),$ke.forEach(t),fAo=i(x),v_=n(x,"LI",{});var kke=s(v_);Sfe=n(kke,"STRONG",{});var Ovt=s(Sfe);gAo=r(Ovt,"rembert"),Ovt.forEach(t),hAo=r(kke," \u2014 "),oG=n(kke,"A",{href:!0});var Vvt=s(oG);uAo=r(Vvt,"RemBertModel"),Vvt.forEach(t),pAo=r(kke," (RemBERT model)"),kke.forEach(t),_Ao=i(x),F_=n(x,"LI",{});var Ske=s(F_);Rfe=n(Ske,"STRONG",{});var Xvt=s(Rfe);bAo=r(Xvt,"resnet"),Xvt.forEach(t),vAo=r(Ske," \u2014 "),rG=n(Ske,"A",{href:!0});var zvt=s(rG);FAo=r(zvt,"ResNetModel"),zvt.forEach(t),TAo=r(Ske," (ResNet model)"),Ske.forEach(t),MAo=i(x),T_=n(x,"LI",{});var Rke=s(T_);Pfe=n(Rke,"STRONG",{});var Wvt=s(Pfe);EAo=r(Wvt,"retribert"),Wvt.forEach(t),CAo=r(Rke," \u2014 "),tG=n(Rke,"A",{href:!0});var Qvt=s(tG);wAo=r(Qvt,"RetriBertModel"),Qvt.forEach(t),AAo=r(Rke," (RetriBERT model)"),Rke.forEach(t),LAo=i(x),M_=n(x,"LI",{});var Pke=s(M_);Bfe=n(Pke,"STRONG",{});var Hvt=s(Bfe);yAo=r(Hvt,"roberta"),Hvt.forEach(t),xAo=r(Pke," \u2014 "),aG=n(Pke,"A",{href:!0});var Uvt=s(aG);$Ao=r(Uvt,"RobertaModel"),Uvt.forEach(t),kAo=r(Pke," (RoBERTa model)"),Pke.forEach(t),SAo=i(x),E_=n(x,"LI",{});var Bke=s(E_);Ife=n(Bke,"STRONG",{});var Jvt=s(Ife);RAo=r(Jvt,"roformer"),Jvt.forEach(t),PAo=r(Bke," \u2014 "),nG=n(Bke,"A",{href:!0});var Yvt=s(nG);BAo=r(Yvt,"RoFormerModel"),Yvt.forEach(t),IAo=r(Bke," (RoFormer model)"),Bke.forEach(t),NAo=i(x),C_=n(x,"LI",{});var Ike=s(C_);Nfe=n(Ike,"STRONG",{});var Kvt=s(Nfe);qAo=r(Kvt,"segformer"),Kvt.forEach(t),jAo=r(Ike," \u2014 "),sG=n(Ike,"A",{href:!0});var Zvt=s(sG);DAo=r(Zvt,"SegformerModel"),Zvt.forEach(t),GAo=r(Ike," (SegFormer model)"),Ike.forEach(t),OAo=i(x),w_=n(x,"LI",{});var Nke=s(w_);qfe=n(Nke,"STRONG",{});var e1t=s(qfe);VAo=r(e1t,"sew"),e1t.forEach(t),XAo=r(Nke," \u2014 "),lG=n(Nke,"A",{href:!0});var o1t=s(lG);zAo=r(o1t,"SEWModel"),o1t.forEach(t),WAo=r(Nke," (SEW model)"),Nke.forEach(t),QAo=i(x),A_=n(x,"LI",{});var qke=s(A_);jfe=n(qke,"STRONG",{});var r1t=s(jfe);HAo=r(r1t,"sew-d"),r1t.forEach(t),UAo=r(qke," \u2014 "),iG=n(qke,"A",{href:!0});var t1t=s(iG);JAo=r(t1t,"SEWDModel"),t1t.forEach(t),YAo=r(qke," (SEW-D model)"),qke.forEach(t),KAo=i(x),L_=n(x,"LI",{});var jke=s(L_);Dfe=n(jke,"STRONG",{});var a1t=s(Dfe);ZAo=r(a1t,"speech_to_text"),a1t.forEach(t),e7o=r(jke," \u2014 "),dG=n(jke,"A",{href:!0});var n1t=s(dG);o7o=r(n1t,"Speech2TextModel"),n1t.forEach(t),r7o=r(jke," (Speech2Text model)"),jke.forEach(t),t7o=i(x),y_=n(x,"LI",{});var Dke=s(y_);Gfe=n(Dke,"STRONG",{});var s1t=s(Gfe);a7o=r(s1t,"splinter"),s1t.forEach(t),n7o=r(Dke," \u2014 "),cG=n(Dke,"A",{href:!0});var l1t=s(cG);s7o=r(l1t,"SplinterModel"),l1t.forEach(t),l7o=r(Dke," (Splinter model)"),Dke.forEach(t),i7o=i(x),x_=n(x,"LI",{});var Gke=s(x_);Ofe=n(Gke,"STRONG",{});var i1t=s(Ofe);d7o=r(i1t,"squeezebert"),i1t.forEach(t),c7o=r(Gke," \u2014 "),mG=n(Gke,"A",{href:!0});var d1t=s(mG);m7o=r(d1t,"SqueezeBertModel"),d1t.forEach(t),f7o=r(Gke," (SqueezeBERT model)"),Gke.forEach(t),g7o=i(x),$_=n(x,"LI",{});var Oke=s($_);Vfe=n(Oke,"STRONG",{});var c1t=s(Vfe);h7o=r(c1t,"swin"),c1t.forEach(t),u7o=r(Oke," \u2014 "),fG=n(Oke,"A",{href:!0});var m1t=s(fG);p7o=r(m1t,"SwinModel"),m1t.forEach(t),_7o=r(Oke," (Swin Transformer model)"),Oke.forEach(t),b7o=i(x),k_=n(x,"LI",{});var Vke=s(k_);Xfe=n(Vke,"STRONG",{});var f1t=s(Xfe);v7o=r(f1t,"swinv2"),f1t.forEach(t),F7o=r(Vke," \u2014 "),gG=n(Vke,"A",{href:!0});var g1t=s(gG);T7o=r(g1t,"Swinv2Model"),g1t.forEach(t),M7o=r(Vke," (Swin Transformer V2 model)"),Vke.forEach(t),E7o=i(x),S_=n(x,"LI",{});var Xke=s(S_);zfe=n(Xke,"STRONG",{});var h1t=s(zfe);C7o=r(h1t,"t5"),h1t.forEach(t),w7o=r(Xke," \u2014 "),hG=n(Xke,"A",{href:!0});var u1t=s(hG);A7o=r(u1t,"T5Model"),u1t.forEach(t),L7o=r(Xke," (T5 model)"),Xke.forEach(t),y7o=i(x),R_=n(x,"LI",{});var zke=s(R_);Wfe=n(zke,"STRONG",{});var p1t=s(Wfe);x7o=r(p1t,"tapas"),p1t.forEach(t),$7o=r(zke," \u2014 "),uG=n(zke,"A",{href:!0});var _1t=s(uG);k7o=r(_1t,"TapasModel"),_1t.forEach(t),S7o=r(zke," (TAPAS model)"),zke.forEach(t),R7o=i(x),P_=n(x,"LI",{});var Wke=s(P_);Qfe=n(Wke,"STRONG",{});var b1t=s(Qfe);P7o=r(b1t,"trajectory_transformer"),b1t.forEach(t),B7o=r(Wke," \u2014 "),pG=n(Wke,"A",{href:!0});var v1t=s(pG);I7o=r(v1t,"TrajectoryTransformerModel"),v1t.forEach(t),N7o=r(Wke," (Trajectory Transformer model)"),Wke.forEach(t),q7o=i(x),B_=n(x,"LI",{});var Qke=s(B_);Hfe=n(Qke,"STRONG",{});var F1t=s(Hfe);j7o=r(F1t,"transfo-xl"),F1t.forEach(t),D7o=r(Qke," \u2014 "),_G=n(Qke,"A",{href:!0});var T1t=s(_G);G7o=r(T1t,"TransfoXLModel"),T1t.forEach(t),O7o=r(Qke," (Transformer-XL model)"),Qke.forEach(t),V7o=i(x),I_=n(x,"LI",{});var Hke=s(I_);Ufe=n(Hke,"STRONG",{});var M1t=s(Ufe);X7o=r(M1t,"unispeech"),M1t.forEach(t),z7o=r(Hke," \u2014 "),bG=n(Hke,"A",{href:!0});var E1t=s(bG);W7o=r(E1t,"UniSpeechModel"),E1t.forEach(t),Q7o=r(Hke," (UniSpeech model)"),Hke.forEach(t),H7o=i(x),N_=n(x,"LI",{});var Uke=s(N_);Jfe=n(Uke,"STRONG",{});var C1t=s(Jfe);U7o=r(C1t,"unispeech-sat"),C1t.forEach(t),J7o=r(Uke," \u2014 "),vG=n(Uke,"A",{href:!0});var w1t=s(vG);Y7o=r(w1t,"UniSpeechSatModel"),w1t.forEach(t),K7o=r(Uke," (UniSpeechSat model)"),Uke.forEach(t),Z7o=i(x),q_=n(x,"LI",{});var Jke=s(q_);Yfe=n(Jke,"STRONG",{});var A1t=s(Yfe);eLo=r(A1t,"van"),A1t.forEach(t),oLo=r(Jke," \u2014 "),FG=n(Jke,"A",{href:!0});var L1t=s(FG);rLo=r(L1t,"VanModel"),L1t.forEach(t),tLo=r(Jke," (VAN model)"),Jke.forEach(t),aLo=i(x),j_=n(x,"LI",{});var Yke=s(j_);Kfe=n(Yke,"STRONG",{});var y1t=s(Kfe);nLo=r(y1t,"vilt"),y1t.forEach(t),sLo=r(Yke," \u2014 "),TG=n(Yke,"A",{href:!0});var x1t=s(TG);lLo=r(x1t,"ViltModel"),x1t.forEach(t),iLo=r(Yke," (ViLT model)"),Yke.forEach(t),dLo=i(x),D_=n(x,"LI",{});var Kke=s(D_);Zfe=n(Kke,"STRONG",{});var $1t=s(Zfe);cLo=r($1t,"vision-text-dual-encoder"),$1t.forEach(t),mLo=r(Kke," \u2014 "),MG=n(Kke,"A",{href:!0});var k1t=s(MG);fLo=r(k1t,"VisionTextDualEncoderModel"),k1t.forEach(t),gLo=r(Kke," (VisionTextDualEncoder model)"),Kke.forEach(t),hLo=i(x),G_=n(x,"LI",{});var Zke=s(G_);ege=n(Zke,"STRONG",{});var S1t=s(ege);uLo=r(S1t,"visual_bert"),S1t.forEach(t),pLo=r(Zke," \u2014 "),EG=n(Zke,"A",{href:!0});var R1t=s(EG);_Lo=r(R1t,"VisualBertModel"),R1t.forEach(t),bLo=r(Zke," (VisualBERT model)"),Zke.forEach(t),vLo=i(x),O_=n(x,"LI",{});var eSe=s(O_);oge=n(eSe,"STRONG",{});var P1t=s(oge);FLo=r(P1t,"vit"),P1t.forEach(t),TLo=r(eSe," \u2014 "),CG=n(eSe,"A",{href:!0});var B1t=s(CG);MLo=r(B1t,"ViTModel"),B1t.forEach(t),ELo=r(eSe," (ViT model)"),eSe.forEach(t),CLo=i(x),V_=n(x,"LI",{});var oSe=s(V_);rge=n(oSe,"STRONG",{});var I1t=s(rge);wLo=r(I1t,"vit_mae"),I1t.forEach(t),ALo=r(oSe," \u2014 "),wG=n(oSe,"A",{href:!0});var N1t=s(wG);LLo=r(N1t,"ViTMAEModel"),N1t.forEach(t),yLo=r(oSe," (ViTMAE model)"),oSe.forEach(t),xLo=i(x),X_=n(x,"LI",{});var rSe=s(X_);tge=n(rSe,"STRONG",{});var q1t=s(tge);$Lo=r(q1t,"wav2vec2"),q1t.forEach(t),kLo=r(rSe," \u2014 "),AG=n(rSe,"A",{href:!0});var j1t=s(AG);SLo=r(j1t,"Wav2Vec2Model"),j1t.forEach(t),RLo=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),PLo=i(x),z_=n(x,"LI",{});var tSe=s(z_);age=n(tSe,"STRONG",{});var D1t=s(age);BLo=r(D1t,"wav2vec2-conformer"),D1t.forEach(t),ILo=r(tSe," \u2014 "),LG=n(tSe,"A",{href:!0});var G1t=s(LG);NLo=r(G1t,"Wav2Vec2ConformerModel"),G1t.forEach(t),qLo=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),jLo=i(x),W_=n(x,"LI",{});var aSe=s(W_);nge=n(aSe,"STRONG",{});var O1t=s(nge);DLo=r(O1t,"wavlm"),O1t.forEach(t),GLo=r(aSe," \u2014 "),yG=n(aSe,"A",{href:!0});var V1t=s(yG);OLo=r(V1t,"WavLMModel"),V1t.forEach(t),VLo=r(aSe," (WavLM model)"),aSe.forEach(t),XLo=i(x),Q_=n(x,"LI",{});var nSe=s(Q_);sge=n(nSe,"STRONG",{});var X1t=s(sge);zLo=r(X1t,"xglm"),X1t.forEach(t),WLo=r(nSe," \u2014 "),xG=n(nSe,"A",{href:!0});var z1t=s(xG);QLo=r(z1t,"XGLMModel"),z1t.forEach(t),HLo=r(nSe," (XGLM model)"),nSe.forEach(t),ULo=i(x),H_=n(x,"LI",{});var sSe=s(H_);lge=n(sSe,"STRONG",{});var W1t=s(lge);JLo=r(W1t,"xlm"),W1t.forEach(t),YLo=r(sSe," \u2014 "),$G=n(sSe,"A",{href:!0});var Q1t=s($G);KLo=r(Q1t,"XLMModel"),Q1t.forEach(t),ZLo=r(sSe," (XLM model)"),sSe.forEach(t),eyo=i(x),U_=n(x,"LI",{});var lSe=s(U_);ige=n(lSe,"STRONG",{});var H1t=s(ige);oyo=r(H1t,"xlm-prophetnet"),H1t.forEach(t),ryo=r(lSe," \u2014 "),kG=n(lSe,"A",{href:!0});var U1t=s(kG);tyo=r(U1t,"XLMProphetNetModel"),U1t.forEach(t),ayo=r(lSe," (XLM-ProphetNet model)"),lSe.forEach(t),nyo=i(x),J_=n(x,"LI",{});var iSe=s(J_);dge=n(iSe,"STRONG",{});var J1t=s(dge);syo=r(J1t,"xlm-roberta"),J1t.forEach(t),lyo=r(iSe," \u2014 "),SG=n(iSe,"A",{href:!0});var Y1t=s(SG);iyo=r(Y1t,"XLMRobertaModel"),Y1t.forEach(t),dyo=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),cyo=i(x),Y_=n(x,"LI",{});var dSe=s(Y_);cge=n(dSe,"STRONG",{});var K1t=s(cge);myo=r(K1t,"xlm-roberta-xl"),K1t.forEach(t),fyo=r(dSe," \u2014 "),RG=n(dSe,"A",{href:!0});var Z1t=s(RG);gyo=r(Z1t,"XLMRobertaXLModel"),Z1t.forEach(t),hyo=r(dSe," (XLM-RoBERTa-XL model)"),dSe.forEach(t),uyo=i(x),K_=n(x,"LI",{});var cSe=s(K_);mge=n(cSe,"STRONG",{});var eFt=s(mge);pyo=r(eFt,"xlnet"),eFt.forEach(t),_yo=r(cSe," \u2014 "),PG=n(cSe,"A",{href:!0});var oFt=s(PG);byo=r(oFt,"XLNetModel"),oFt.forEach(t),vyo=r(cSe," (XLNet model)"),cSe.forEach(t),Fyo=i(x),Z_=n(x,"LI",{});var mSe=s(Z_);fge=n(mSe,"STRONG",{});var rFt=s(fge);Tyo=r(rFt,"yolos"),rFt.forEach(t),Myo=r(mSe," \u2014 "),BG=n(mSe,"A",{href:!0});var tFt=s(BG);Eyo=r(tFt,"YolosModel"),tFt.forEach(t),Cyo=r(mSe," (YOLOS model)"),mSe.forEach(t),wyo=i(x),e2=n(x,"LI",{});var fSe=s(e2);gge=n(fSe,"STRONG",{});var aFt=s(gge);Ayo=r(aFt,"yoso"),aFt.forEach(t),Lyo=r(fSe," \u2014 "),IG=n(fSe,"A",{href:!0});var nFt=s(IG);yyo=r(nFt,"YosoModel"),nFt.forEach(t),xyo=r(fSe," (YOSO model)"),fSe.forEach(t),x.forEach(t),$yo=i(la),o2=n(la,"P",{});var gSe=s(o2);kyo=r(gSe,"The model is set in evaluation mode by default using "),hge=n(gSe,"CODE",{});var sFt=s(hge);Syo=r(sFt,"model.eval()"),sFt.forEach(t),Ryo=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(gSe,"CODE",{});var lFt=s(uge);Pyo=r(lFt,"model.train()"),lFt.forEach(t),gSe.forEach(t),Byo=i(la),T(r2.$$.fragment,la),la.forEach(t),nl.forEach(t),Xze=i(m),Qi=n(m,"H2",{class:!0});var JQe=s(Qi);t2=n(JQe,"A",{id:!0,class:!0,href:!0});var iFt=s(t2);pge=n(iFt,"SPAN",{});var dFt=s(pge);T(t8.$$.fragment,dFt),dFt.forEach(t),iFt.forEach(t),Iyo=i(JQe),_ge=n(JQe,"SPAN",{});var cFt=s(_ge);Nyo=r(cFt,"AutoModelForPreTraining"),cFt.forEach(t),JQe.forEach(t),zze=i(m),So=n(m,"DIV",{class:!0});var sl=s(So);T(a8.$$.fragment,sl),qyo=i(sl),Hi=n(sl,"P",{});var Lte=s(Hi);jyo=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NG=n(Lte,"A",{href:!0});var mFt=s(NG);Dyo=r(mFt,"from_pretrained()"),mFt.forEach(t),Gyo=r(Lte," class method or the "),qG=n(Lte,"A",{href:!0});var fFt=s(qG);Oyo=r(fFt,"from_config()"),fFt.forEach(t),Vyo=r(Lte,` class
method.`),Lte.forEach(t),Xyo=i(sl),n8=n(sl,"P",{});var YQe=s(n8);zyo=r(YQe,"This class cannot be instantiated directly using "),bge=n(YQe,"CODE",{});var gFt=s(bge);Wyo=r(gFt,"__init__()"),gFt.forEach(t),Qyo=r(YQe," (throws an error)."),YQe.forEach(t),Hyo=i(sl),dt=n(sl,"DIV",{class:!0});var k7=s(dt);T(s8.$$.fragment,k7),Uyo=i(k7),vge=n(k7,"P",{});var hFt=s(vge);Jyo=r(hFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hFt.forEach(t),Yyo=i(k7),Ui=n(k7,"P",{});var yte=s(Ui);Kyo=r(yte,`Note:
Loading a model from its configuration file does `),Fge=n(yte,"STRONG",{});var uFt=s(Fge);Zyo=r(uFt,"not"),uFt.forEach(t),e8o=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(yte,"A",{href:!0});var pFt=s(jG);o8o=r(pFt,"from_pretrained()"),pFt.forEach(t),r8o=r(yte," to load the model weights."),yte.forEach(t),t8o=i(k7),T(a2.$$.fragment,k7),k7.forEach(t),a8o=i(sl),Ke=n(sl,"DIV",{class:!0});var ia=s(Ke);T(l8.$$.fragment,ia),n8o=i(ia),Tge=n(ia,"P",{});var _Ft=s(Tge);s8o=r(_Ft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Ft.forEach(t),l8o=i(ia),Na=n(ia,"P",{});var S7=s(Na);i8o=r(S7,"The model class to instantiate is selected based on the "),Mge=n(S7,"CODE",{});var bFt=s(Mge);d8o=r(bFt,"model_type"),bFt.forEach(t),c8o=r(S7,` property of the config object (either
passed as an argument or loaded from `),Ege=n(S7,"CODE",{});var vFt=s(Ege);m8o=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),f8o=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(S7,"CODE",{});var FFt=s(Cge);g8o=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),h8o=r(S7,":"),S7.forEach(t),u8o=i(ia),G=n(ia,"UL",{});var O=s(G);n2=n(O,"LI",{});var hSe=s(n2);wge=n(hSe,"STRONG",{});var TFt=s(wge);p8o=r(TFt,"albert"),TFt.forEach(t),_8o=r(hSe," \u2014 "),DG=n(hSe,"A",{href:!0});var MFt=s(DG);b8o=r(MFt,"AlbertForPreTraining"),MFt.forEach(t),v8o=r(hSe," (ALBERT model)"),hSe.forEach(t),F8o=i(O),s2=n(O,"LI",{});var uSe=s(s2);Age=n(uSe,"STRONG",{});var EFt=s(Age);T8o=r(EFt,"bart"),EFt.forEach(t),M8o=r(uSe," \u2014 "),GG=n(uSe,"A",{href:!0});var CFt=s(GG);E8o=r(CFt,"BartForConditionalGeneration"),CFt.forEach(t),C8o=r(uSe," (BART model)"),uSe.forEach(t),w8o=i(O),l2=n(O,"LI",{});var pSe=s(l2);Lge=n(pSe,"STRONG",{});var wFt=s(Lge);A8o=r(wFt,"bert"),wFt.forEach(t),L8o=r(pSe," \u2014 "),OG=n(pSe,"A",{href:!0});var AFt=s(OG);y8o=r(AFt,"BertForPreTraining"),AFt.forEach(t),x8o=r(pSe," (BERT model)"),pSe.forEach(t),$8o=i(O),i2=n(O,"LI",{});var _Se=s(i2);yge=n(_Se,"STRONG",{});var LFt=s(yge);k8o=r(LFt,"big_bird"),LFt.forEach(t),S8o=r(_Se," \u2014 "),VG=n(_Se,"A",{href:!0});var yFt=s(VG);R8o=r(yFt,"BigBirdForPreTraining"),yFt.forEach(t),P8o=r(_Se," (BigBird model)"),_Se.forEach(t),B8o=i(O),d2=n(O,"LI",{});var bSe=s(d2);xge=n(bSe,"STRONG",{});var xFt=s(xge);I8o=r(xFt,"bloom"),xFt.forEach(t),N8o=r(bSe," \u2014 "),XG=n(bSe,"A",{href:!0});var $Ft=s(XG);q8o=r($Ft,"BloomForCausalLM"),$Ft.forEach(t),j8o=r(bSe," (BLOOM model)"),bSe.forEach(t),D8o=i(O),c2=n(O,"LI",{});var vSe=s(c2);$ge=n(vSe,"STRONG",{});var kFt=s($ge);G8o=r(kFt,"camembert"),kFt.forEach(t),O8o=r(vSe," \u2014 "),zG=n(vSe,"A",{href:!0});var SFt=s(zG);V8o=r(SFt,"CamembertForMaskedLM"),SFt.forEach(t),X8o=r(vSe," (CamemBERT model)"),vSe.forEach(t),z8o=i(O),m2=n(O,"LI",{});var FSe=s(m2);kge=n(FSe,"STRONG",{});var RFt=s(kge);W8o=r(RFt,"ctrl"),RFt.forEach(t),Q8o=r(FSe," \u2014 "),WG=n(FSe,"A",{href:!0});var PFt=s(WG);H8o=r(PFt,"CTRLLMHeadModel"),PFt.forEach(t),U8o=r(FSe," (CTRL model)"),FSe.forEach(t),J8o=i(O),f2=n(O,"LI",{});var TSe=s(f2);Sge=n(TSe,"STRONG",{});var BFt=s(Sge);Y8o=r(BFt,"data2vec-text"),BFt.forEach(t),K8o=r(TSe," \u2014 "),QG=n(TSe,"A",{href:!0});var IFt=s(QG);Z8o=r(IFt,"Data2VecTextForMaskedLM"),IFt.forEach(t),e9o=r(TSe," (Data2VecText model)"),TSe.forEach(t),o9o=i(O),g2=n(O,"LI",{});var MSe=s(g2);Rge=n(MSe,"STRONG",{});var NFt=s(Rge);r9o=r(NFt,"deberta"),NFt.forEach(t),t9o=r(MSe," \u2014 "),HG=n(MSe,"A",{href:!0});var qFt=s(HG);a9o=r(qFt,"DebertaForMaskedLM"),qFt.forEach(t),n9o=r(MSe," (DeBERTa model)"),MSe.forEach(t),s9o=i(O),h2=n(O,"LI",{});var ESe=s(h2);Pge=n(ESe,"STRONG",{});var jFt=s(Pge);l9o=r(jFt,"deberta-v2"),jFt.forEach(t),i9o=r(ESe," \u2014 "),UG=n(ESe,"A",{href:!0});var DFt=s(UG);d9o=r(DFt,"DebertaV2ForMaskedLM"),DFt.forEach(t),c9o=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),m9o=i(O),u2=n(O,"LI",{});var CSe=s(u2);Bge=n(CSe,"STRONG",{});var GFt=s(Bge);f9o=r(GFt,"distilbert"),GFt.forEach(t),g9o=r(CSe," \u2014 "),JG=n(CSe,"A",{href:!0});var OFt=s(JG);h9o=r(OFt,"DistilBertForMaskedLM"),OFt.forEach(t),u9o=r(CSe," (DistilBERT model)"),CSe.forEach(t),p9o=i(O),p2=n(O,"LI",{});var wSe=s(p2);Ige=n(wSe,"STRONG",{});var VFt=s(Ige);_9o=r(VFt,"electra"),VFt.forEach(t),b9o=r(wSe," \u2014 "),YG=n(wSe,"A",{href:!0});var XFt=s(YG);v9o=r(XFt,"ElectraForPreTraining"),XFt.forEach(t),F9o=r(wSe," (ELECTRA model)"),wSe.forEach(t),T9o=i(O),_2=n(O,"LI",{});var ASe=s(_2);Nge=n(ASe,"STRONG",{});var zFt=s(Nge);M9o=r(zFt,"flaubert"),zFt.forEach(t),E9o=r(ASe," \u2014 "),KG=n(ASe,"A",{href:!0});var WFt=s(KG);C9o=r(WFt,"FlaubertWithLMHeadModel"),WFt.forEach(t),w9o=r(ASe," (FlauBERT model)"),ASe.forEach(t),A9o=i(O),b2=n(O,"LI",{});var LSe=s(b2);qge=n(LSe,"STRONG",{});var QFt=s(qge);L9o=r(QFt,"flava"),QFt.forEach(t),y9o=r(LSe," \u2014 "),ZG=n(LSe,"A",{href:!0});var HFt=s(ZG);x9o=r(HFt,"FlavaForPreTraining"),HFt.forEach(t),$9o=r(LSe," (FLAVA model)"),LSe.forEach(t),k9o=i(O),v2=n(O,"LI",{});var ySe=s(v2);jge=n(ySe,"STRONG",{});var UFt=s(jge);S9o=r(UFt,"fnet"),UFt.forEach(t),R9o=r(ySe," \u2014 "),eO=n(ySe,"A",{href:!0});var JFt=s(eO);P9o=r(JFt,"FNetForPreTraining"),JFt.forEach(t),B9o=r(ySe," (FNet model)"),ySe.forEach(t),I9o=i(O),F2=n(O,"LI",{});var xSe=s(F2);Dge=n(xSe,"STRONG",{});var YFt=s(Dge);N9o=r(YFt,"fsmt"),YFt.forEach(t),q9o=r(xSe," \u2014 "),oO=n(xSe,"A",{href:!0});var KFt=s(oO);j9o=r(KFt,"FSMTForConditionalGeneration"),KFt.forEach(t),D9o=r(xSe," (FairSeq Machine-Translation model)"),xSe.forEach(t),G9o=i(O),T2=n(O,"LI",{});var $Se=s(T2);Gge=n($Se,"STRONG",{});var ZFt=s(Gge);O9o=r(ZFt,"funnel"),ZFt.forEach(t),V9o=r($Se," \u2014 "),rO=n($Se,"A",{href:!0});var eTt=s(rO);X9o=r(eTt,"FunnelForPreTraining"),eTt.forEach(t),z9o=r($Se," (Funnel Transformer model)"),$Se.forEach(t),W9o=i(O),M2=n(O,"LI",{});var kSe=s(M2);Oge=n(kSe,"STRONG",{});var oTt=s(Oge);Q9o=r(oTt,"gpt2"),oTt.forEach(t),H9o=r(kSe," \u2014 "),tO=n(kSe,"A",{href:!0});var rTt=s(tO);U9o=r(rTt,"GPT2LMHeadModel"),rTt.forEach(t),J9o=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),Y9o=i(O),E2=n(O,"LI",{});var SSe=s(E2);Vge=n(SSe,"STRONG",{});var tTt=s(Vge);K9o=r(tTt,"ibert"),tTt.forEach(t),Z9o=r(SSe," \u2014 "),aO=n(SSe,"A",{href:!0});var aTt=s(aO);exo=r(aTt,"IBertForMaskedLM"),aTt.forEach(t),oxo=r(SSe," (I-BERT model)"),SSe.forEach(t),rxo=i(O),C2=n(O,"LI",{});var RSe=s(C2);Xge=n(RSe,"STRONG",{});var nTt=s(Xge);txo=r(nTt,"layoutlm"),nTt.forEach(t),axo=r(RSe," \u2014 "),nO=n(RSe,"A",{href:!0});var sTt=s(nO);nxo=r(sTt,"LayoutLMForMaskedLM"),sTt.forEach(t),sxo=r(RSe," (LayoutLM model)"),RSe.forEach(t),lxo=i(O),w2=n(O,"LI",{});var PSe=s(w2);zge=n(PSe,"STRONG",{});var lTt=s(zge);ixo=r(lTt,"longformer"),lTt.forEach(t),dxo=r(PSe," \u2014 "),sO=n(PSe,"A",{href:!0});var iTt=s(sO);cxo=r(iTt,"LongformerForMaskedLM"),iTt.forEach(t),mxo=r(PSe," (Longformer model)"),PSe.forEach(t),fxo=i(O),A2=n(O,"LI",{});var BSe=s(A2);Wge=n(BSe,"STRONG",{});var dTt=s(Wge);gxo=r(dTt,"luke"),dTt.forEach(t),hxo=r(BSe," \u2014 "),lO=n(BSe,"A",{href:!0});var cTt=s(lO);uxo=r(cTt,"LukeForMaskedLM"),cTt.forEach(t),pxo=r(BSe," (LUKE model)"),BSe.forEach(t),_xo=i(O),L2=n(O,"LI",{});var ISe=s(L2);Qge=n(ISe,"STRONG",{});var mTt=s(Qge);bxo=r(mTt,"lxmert"),mTt.forEach(t),vxo=r(ISe," \u2014 "),iO=n(ISe,"A",{href:!0});var fTt=s(iO);Fxo=r(fTt,"LxmertForPreTraining"),fTt.forEach(t),Txo=r(ISe," (LXMERT model)"),ISe.forEach(t),Mxo=i(O),y2=n(O,"LI",{});var NSe=s(y2);Hge=n(NSe,"STRONG",{});var gTt=s(Hge);Exo=r(gTt,"megatron-bert"),gTt.forEach(t),Cxo=r(NSe," \u2014 "),dO=n(NSe,"A",{href:!0});var hTt=s(dO);wxo=r(hTt,"MegatronBertForPreTraining"),hTt.forEach(t),Axo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),Lxo=i(O),x2=n(O,"LI",{});var qSe=s(x2);Uge=n(qSe,"STRONG",{});var uTt=s(Uge);yxo=r(uTt,"mobilebert"),uTt.forEach(t),xxo=r(qSe," \u2014 "),cO=n(qSe,"A",{href:!0});var pTt=s(cO);$xo=r(pTt,"MobileBertForPreTraining"),pTt.forEach(t),kxo=r(qSe," (MobileBERT model)"),qSe.forEach(t),Sxo=i(O),$2=n(O,"LI",{});var jSe=s($2);Jge=n(jSe,"STRONG",{});var _Tt=s(Jge);Rxo=r(_Tt,"mpnet"),_Tt.forEach(t),Pxo=r(jSe," \u2014 "),mO=n(jSe,"A",{href:!0});var bTt=s(mO);Bxo=r(bTt,"MPNetForMaskedLM"),bTt.forEach(t),Ixo=r(jSe," (MPNet model)"),jSe.forEach(t),Nxo=i(O),k2=n(O,"LI",{});var DSe=s(k2);Yge=n(DSe,"STRONG",{});var vTt=s(Yge);qxo=r(vTt,"mvp"),vTt.forEach(t),jxo=r(DSe," \u2014 "),fO=n(DSe,"A",{href:!0});var FTt=s(fO);Dxo=r(FTt,"MvpForConditionalGeneration"),FTt.forEach(t),Gxo=r(DSe," (MVP model)"),DSe.forEach(t),Oxo=i(O),S2=n(O,"LI",{});var GSe=s(S2);Kge=n(GSe,"STRONG",{});var TTt=s(Kge);Vxo=r(TTt,"nezha"),TTt.forEach(t),Xxo=r(GSe," \u2014 "),gO=n(GSe,"A",{href:!0});var MTt=s(gO);zxo=r(MTt,"NezhaForPreTraining"),MTt.forEach(t),Wxo=r(GSe," (Nezha model)"),GSe.forEach(t),Qxo=i(O),R2=n(O,"LI",{});var OSe=s(R2);Zge=n(OSe,"STRONG",{});var ETt=s(Zge);Hxo=r(ETt,"openai-gpt"),ETt.forEach(t),Uxo=r(OSe," \u2014 "),hO=n(OSe,"A",{href:!0});var CTt=s(hO);Jxo=r(CTt,"OpenAIGPTLMHeadModel"),CTt.forEach(t),Yxo=r(OSe," (OpenAI GPT model)"),OSe.forEach(t),Kxo=i(O),P2=n(O,"LI",{});var VSe=s(P2);ehe=n(VSe,"STRONG",{});var wTt=s(ehe);Zxo=r(wTt,"retribert"),wTt.forEach(t),e$o=r(VSe," \u2014 "),uO=n(VSe,"A",{href:!0});var ATt=s(uO);o$o=r(ATt,"RetriBertModel"),ATt.forEach(t),r$o=r(VSe," (RetriBERT model)"),VSe.forEach(t),t$o=i(O),B2=n(O,"LI",{});var XSe=s(B2);ohe=n(XSe,"STRONG",{});var LTt=s(ohe);a$o=r(LTt,"roberta"),LTt.forEach(t),n$o=r(XSe," \u2014 "),pO=n(XSe,"A",{href:!0});var yTt=s(pO);s$o=r(yTt,"RobertaForMaskedLM"),yTt.forEach(t),l$o=r(XSe," (RoBERTa model)"),XSe.forEach(t),i$o=i(O),I2=n(O,"LI",{});var zSe=s(I2);rhe=n(zSe,"STRONG",{});var xTt=s(rhe);d$o=r(xTt,"splinter"),xTt.forEach(t),c$o=r(zSe," \u2014 "),_O=n(zSe,"A",{href:!0});var $Tt=s(_O);m$o=r($Tt,"SplinterForPreTraining"),$Tt.forEach(t),f$o=r(zSe," (Splinter model)"),zSe.forEach(t),g$o=i(O),N2=n(O,"LI",{});var WSe=s(N2);the=n(WSe,"STRONG",{});var kTt=s(the);h$o=r(kTt,"squeezebert"),kTt.forEach(t),u$o=r(WSe," \u2014 "),bO=n(WSe,"A",{href:!0});var STt=s(bO);p$o=r(STt,"SqueezeBertForMaskedLM"),STt.forEach(t),_$o=r(WSe," (SqueezeBERT model)"),WSe.forEach(t),b$o=i(O),q2=n(O,"LI",{});var QSe=s(q2);ahe=n(QSe,"STRONG",{});var RTt=s(ahe);v$o=r(RTt,"t5"),RTt.forEach(t),F$o=r(QSe," \u2014 "),vO=n(QSe,"A",{href:!0});var PTt=s(vO);T$o=r(PTt,"T5ForConditionalGeneration"),PTt.forEach(t),M$o=r(QSe," (T5 model)"),QSe.forEach(t),E$o=i(O),j2=n(O,"LI",{});var HSe=s(j2);nhe=n(HSe,"STRONG",{});var BTt=s(nhe);C$o=r(BTt,"tapas"),BTt.forEach(t),w$o=r(HSe," \u2014 "),FO=n(HSe,"A",{href:!0});var ITt=s(FO);A$o=r(ITt,"TapasForMaskedLM"),ITt.forEach(t),L$o=r(HSe," (TAPAS model)"),HSe.forEach(t),y$o=i(O),D2=n(O,"LI",{});var USe=s(D2);she=n(USe,"STRONG",{});var NTt=s(she);x$o=r(NTt,"transfo-xl"),NTt.forEach(t),$$o=r(USe," \u2014 "),TO=n(USe,"A",{href:!0});var qTt=s(TO);k$o=r(qTt,"TransfoXLLMHeadModel"),qTt.forEach(t),S$o=r(USe," (Transformer-XL model)"),USe.forEach(t),R$o=i(O),G2=n(O,"LI",{});var JSe=s(G2);lhe=n(JSe,"STRONG",{});var jTt=s(lhe);P$o=r(jTt,"unispeech"),jTt.forEach(t),B$o=r(JSe," \u2014 "),MO=n(JSe,"A",{href:!0});var DTt=s(MO);I$o=r(DTt,"UniSpeechForPreTraining"),DTt.forEach(t),N$o=r(JSe," (UniSpeech model)"),JSe.forEach(t),q$o=i(O),O2=n(O,"LI",{});var YSe=s(O2);ihe=n(YSe,"STRONG",{});var GTt=s(ihe);j$o=r(GTt,"unispeech-sat"),GTt.forEach(t),D$o=r(YSe," \u2014 "),EO=n(YSe,"A",{href:!0});var OTt=s(EO);G$o=r(OTt,"UniSpeechSatForPreTraining"),OTt.forEach(t),O$o=r(YSe," (UniSpeechSat model)"),YSe.forEach(t),V$o=i(O),V2=n(O,"LI",{});var KSe=s(V2);dhe=n(KSe,"STRONG",{});var VTt=s(dhe);X$o=r(VTt,"visual_bert"),VTt.forEach(t),z$o=r(KSe," \u2014 "),CO=n(KSe,"A",{href:!0});var XTt=s(CO);W$o=r(XTt,"VisualBertForPreTraining"),XTt.forEach(t),Q$o=r(KSe," (VisualBERT model)"),KSe.forEach(t),H$o=i(O),X2=n(O,"LI",{});var ZSe=s(X2);che=n(ZSe,"STRONG",{});var zTt=s(che);U$o=r(zTt,"vit_mae"),zTt.forEach(t),J$o=r(ZSe," \u2014 "),wO=n(ZSe,"A",{href:!0});var WTt=s(wO);Y$o=r(WTt,"ViTMAEForPreTraining"),WTt.forEach(t),K$o=r(ZSe," (ViTMAE model)"),ZSe.forEach(t),Z$o=i(O),z2=n(O,"LI",{});var eRe=s(z2);mhe=n(eRe,"STRONG",{});var QTt=s(mhe);eko=r(QTt,"wav2vec2"),QTt.forEach(t),oko=r(eRe," \u2014 "),AO=n(eRe,"A",{href:!0});var HTt=s(AO);rko=r(HTt,"Wav2Vec2ForPreTraining"),HTt.forEach(t),tko=r(eRe," (Wav2Vec2 model)"),eRe.forEach(t),ako=i(O),W2=n(O,"LI",{});var oRe=s(W2);fhe=n(oRe,"STRONG",{});var UTt=s(fhe);nko=r(UTt,"wav2vec2-conformer"),UTt.forEach(t),sko=r(oRe," \u2014 "),LO=n(oRe,"A",{href:!0});var JTt=s(LO);lko=r(JTt,"Wav2Vec2ConformerForPreTraining"),JTt.forEach(t),iko=r(oRe," (Wav2Vec2-Conformer model)"),oRe.forEach(t),dko=i(O),Q2=n(O,"LI",{});var rRe=s(Q2);ghe=n(rRe,"STRONG",{});var YTt=s(ghe);cko=r(YTt,"xlm"),YTt.forEach(t),mko=r(rRe," \u2014 "),yO=n(rRe,"A",{href:!0});var KTt=s(yO);fko=r(KTt,"XLMWithLMHeadModel"),KTt.forEach(t),gko=r(rRe," (XLM model)"),rRe.forEach(t),hko=i(O),H2=n(O,"LI",{});var tRe=s(H2);hhe=n(tRe,"STRONG",{});var ZTt=s(hhe);uko=r(ZTt,"xlm-roberta"),ZTt.forEach(t),pko=r(tRe," \u2014 "),xO=n(tRe,"A",{href:!0});var eMt=s(xO);_ko=r(eMt,"XLMRobertaForMaskedLM"),eMt.forEach(t),bko=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),vko=i(O),U2=n(O,"LI",{});var aRe=s(U2);uhe=n(aRe,"STRONG",{});var oMt=s(uhe);Fko=r(oMt,"xlm-roberta-xl"),oMt.forEach(t),Tko=r(aRe," \u2014 "),$O=n(aRe,"A",{href:!0});var rMt=s($O);Mko=r(rMt,"XLMRobertaXLForMaskedLM"),rMt.forEach(t),Eko=r(aRe," (XLM-RoBERTa-XL model)"),aRe.forEach(t),Cko=i(O),J2=n(O,"LI",{});var nRe=s(J2);phe=n(nRe,"STRONG",{});var tMt=s(phe);wko=r(tMt,"xlnet"),tMt.forEach(t),Ako=r(nRe," \u2014 "),kO=n(nRe,"A",{href:!0});var aMt=s(kO);Lko=r(aMt,"XLNetLMHeadModel"),aMt.forEach(t),yko=r(nRe," (XLNet model)"),nRe.forEach(t),O.forEach(t),xko=i(ia),Y2=n(ia,"P",{});var sRe=s(Y2);$ko=r(sRe,"The model is set in evaluation mode by default using "),_he=n(sRe,"CODE",{});var nMt=s(_he);kko=r(nMt,"model.eval()"),nMt.forEach(t),Sko=r(sRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(sRe,"CODE",{});var sMt=s(bhe);Rko=r(sMt,"model.train()"),sMt.forEach(t),sRe.forEach(t),Pko=i(ia),T(K2.$$.fragment,ia),ia.forEach(t),sl.forEach(t),Wze=i(m),Ji=n(m,"H2",{class:!0});var KQe=s(Ji);Z2=n(KQe,"A",{id:!0,class:!0,href:!0});var lMt=s(Z2);vhe=n(lMt,"SPAN",{});var iMt=s(vhe);T(i8.$$.fragment,iMt),iMt.forEach(t),lMt.forEach(t),Bko=i(KQe),Fhe=n(KQe,"SPAN",{});var dMt=s(Fhe);Iko=r(dMt,"AutoModelForCausalLM"),dMt.forEach(t),KQe.forEach(t),Qze=i(m),Ro=n(m,"DIV",{class:!0});var ll=s(Ro);T(d8.$$.fragment,ll),Nko=i(ll),Yi=n(ll,"P",{});var xte=s(Yi);qko=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SO=n(xte,"A",{href:!0});var cMt=s(SO);jko=r(cMt,"from_pretrained()"),cMt.forEach(t),Dko=r(xte," class method or the "),RO=n(xte,"A",{href:!0});var mMt=s(RO);Gko=r(mMt,"from_config()"),mMt.forEach(t),Oko=r(xte,` class
method.`),xte.forEach(t),Vko=i(ll),c8=n(ll,"P",{});var ZQe=s(c8);Xko=r(ZQe,"This class cannot be instantiated directly using "),The=n(ZQe,"CODE",{});var fMt=s(The);zko=r(fMt,"__init__()"),fMt.forEach(t),Wko=r(ZQe," (throws an error)."),ZQe.forEach(t),Qko=i(ll),ct=n(ll,"DIV",{class:!0});var R7=s(ct);T(m8.$$.fragment,R7),Hko=i(R7),Mhe=n(R7,"P",{});var gMt=s(Mhe);Uko=r(gMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gMt.forEach(t),Jko=i(R7),Ki=n(R7,"P",{});var $te=s(Ki);Yko=r($te,`Note:
Loading a model from its configuration file does `),Ehe=n($te,"STRONG",{});var hMt=s(Ehe);Kko=r(hMt,"not"),hMt.forEach(t),Zko=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n($te,"A",{href:!0});var uMt=s(PO);eSo=r(uMt,"from_pretrained()"),uMt.forEach(t),oSo=r($te," to load the model weights."),$te.forEach(t),rSo=i(R7),T(eb.$$.fragment,R7),R7.forEach(t),tSo=i(ll),Ze=n(ll,"DIV",{class:!0});var da=s(Ze);T(f8.$$.fragment,da),aSo=i(da),Che=n(da,"P",{});var pMt=s(Che);nSo=r(pMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pMt.forEach(t),sSo=i(da),qa=n(da,"P",{});var P7=s(qa);lSo=r(P7,"The model class to instantiate is selected based on the "),whe=n(P7,"CODE",{});var _Mt=s(whe);iSo=r(_Mt,"model_type"),_Mt.forEach(t),dSo=r(P7,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(P7,"CODE",{});var bMt=s(Ahe);cSo=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),mSo=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(P7,"CODE",{});var vMt=s(Lhe);fSo=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),gSo=r(P7,":"),P7.forEach(t),hSo=i(da),z=n(da,"UL",{});var W=s(z);ob=n(W,"LI",{});var lRe=s(ob);yhe=n(lRe,"STRONG",{});var FMt=s(yhe);uSo=r(FMt,"bart"),FMt.forEach(t),pSo=r(lRe," \u2014 "),BO=n(lRe,"A",{href:!0});var TMt=s(BO);_So=r(TMt,"BartForCausalLM"),TMt.forEach(t),bSo=r(lRe," (BART model)"),lRe.forEach(t),vSo=i(W),rb=n(W,"LI",{});var iRe=s(rb);xhe=n(iRe,"STRONG",{});var MMt=s(xhe);FSo=r(MMt,"bert"),MMt.forEach(t),TSo=r(iRe," \u2014 "),IO=n(iRe,"A",{href:!0});var EMt=s(IO);MSo=r(EMt,"BertLMHeadModel"),EMt.forEach(t),ESo=r(iRe," (BERT model)"),iRe.forEach(t),CSo=i(W),tb=n(W,"LI",{});var dRe=s(tb);$he=n(dRe,"STRONG",{});var CMt=s($he);wSo=r(CMt,"bert-generation"),CMt.forEach(t),ASo=r(dRe," \u2014 "),NO=n(dRe,"A",{href:!0});var wMt=s(NO);LSo=r(wMt,"BertGenerationDecoder"),wMt.forEach(t),ySo=r(dRe," (Bert Generation model)"),dRe.forEach(t),xSo=i(W),ab=n(W,"LI",{});var cRe=s(ab);khe=n(cRe,"STRONG",{});var AMt=s(khe);$So=r(AMt,"big_bird"),AMt.forEach(t),kSo=r(cRe," \u2014 "),qO=n(cRe,"A",{href:!0});var LMt=s(qO);SSo=r(LMt,"BigBirdForCausalLM"),LMt.forEach(t),RSo=r(cRe," (BigBird model)"),cRe.forEach(t),PSo=i(W),nb=n(W,"LI",{});var mRe=s(nb);She=n(mRe,"STRONG",{});var yMt=s(She);BSo=r(yMt,"bigbird_pegasus"),yMt.forEach(t),ISo=r(mRe," \u2014 "),jO=n(mRe,"A",{href:!0});var xMt=s(jO);NSo=r(xMt,"BigBirdPegasusForCausalLM"),xMt.forEach(t),qSo=r(mRe," (BigBird-Pegasus model)"),mRe.forEach(t),jSo=i(W),sb=n(W,"LI",{});var fRe=s(sb);Rhe=n(fRe,"STRONG",{});var $Mt=s(Rhe);DSo=r($Mt,"blenderbot"),$Mt.forEach(t),GSo=r(fRe," \u2014 "),DO=n(fRe,"A",{href:!0});var kMt=s(DO);OSo=r(kMt,"BlenderbotForCausalLM"),kMt.forEach(t),VSo=r(fRe," (Blenderbot model)"),fRe.forEach(t),XSo=i(W),lb=n(W,"LI",{});var gRe=s(lb);Phe=n(gRe,"STRONG",{});var SMt=s(Phe);zSo=r(SMt,"blenderbot-small"),SMt.forEach(t),WSo=r(gRe," \u2014 "),GO=n(gRe,"A",{href:!0});var RMt=s(GO);QSo=r(RMt,"BlenderbotSmallForCausalLM"),RMt.forEach(t),HSo=r(gRe," (BlenderbotSmall model)"),gRe.forEach(t),USo=i(W),ib=n(W,"LI",{});var hRe=s(ib);Bhe=n(hRe,"STRONG",{});var PMt=s(Bhe);JSo=r(PMt,"bloom"),PMt.forEach(t),YSo=r(hRe," \u2014 "),OO=n(hRe,"A",{href:!0});var BMt=s(OO);KSo=r(BMt,"BloomForCausalLM"),BMt.forEach(t),ZSo=r(hRe," (BLOOM model)"),hRe.forEach(t),eRo=i(W),db=n(W,"LI",{});var uRe=s(db);Ihe=n(uRe,"STRONG",{});var IMt=s(Ihe);oRo=r(IMt,"camembert"),IMt.forEach(t),rRo=r(uRe," \u2014 "),VO=n(uRe,"A",{href:!0});var NMt=s(VO);tRo=r(NMt,"CamembertForCausalLM"),NMt.forEach(t),aRo=r(uRe," (CamemBERT model)"),uRe.forEach(t),nRo=i(W),cb=n(W,"LI",{});var pRe=s(cb);Nhe=n(pRe,"STRONG",{});var qMt=s(Nhe);sRo=r(qMt,"codegen"),qMt.forEach(t),lRo=r(pRe," \u2014 "),XO=n(pRe,"A",{href:!0});var jMt=s(XO);iRo=r(jMt,"CodeGenForCausalLM"),jMt.forEach(t),dRo=r(pRe," (CodeGen model)"),pRe.forEach(t),cRo=i(W),mb=n(W,"LI",{});var _Re=s(mb);qhe=n(_Re,"STRONG",{});var DMt=s(qhe);mRo=r(DMt,"ctrl"),DMt.forEach(t),fRo=r(_Re," \u2014 "),zO=n(_Re,"A",{href:!0});var GMt=s(zO);gRo=r(GMt,"CTRLLMHeadModel"),GMt.forEach(t),hRo=r(_Re," (CTRL model)"),_Re.forEach(t),uRo=i(W),fb=n(W,"LI",{});var bRe=s(fb);jhe=n(bRe,"STRONG",{});var OMt=s(jhe);pRo=r(OMt,"data2vec-text"),OMt.forEach(t),_Ro=r(bRe," \u2014 "),WO=n(bRe,"A",{href:!0});var VMt=s(WO);bRo=r(VMt,"Data2VecTextForCausalLM"),VMt.forEach(t),vRo=r(bRe," (Data2VecText model)"),bRe.forEach(t),FRo=i(W),gb=n(W,"LI",{});var vRe=s(gb);Dhe=n(vRe,"STRONG",{});var XMt=s(Dhe);TRo=r(XMt,"electra"),XMt.forEach(t),MRo=r(vRe," \u2014 "),QO=n(vRe,"A",{href:!0});var zMt=s(QO);ERo=r(zMt,"ElectraForCausalLM"),zMt.forEach(t),CRo=r(vRe," (ELECTRA model)"),vRe.forEach(t),wRo=i(W),hb=n(W,"LI",{});var FRe=s(hb);Ghe=n(FRe,"STRONG",{});var WMt=s(Ghe);ARo=r(WMt,"gpt2"),WMt.forEach(t),LRo=r(FRe," \u2014 "),HO=n(FRe,"A",{href:!0});var QMt=s(HO);yRo=r(QMt,"GPT2LMHeadModel"),QMt.forEach(t),xRo=r(FRe," (OpenAI GPT-2 model)"),FRe.forEach(t),$Ro=i(W),ub=n(W,"LI",{});var TRe=s(ub);Ohe=n(TRe,"STRONG",{});var HMt=s(Ohe);kRo=r(HMt,"gpt_neo"),HMt.forEach(t),SRo=r(TRe," \u2014 "),UO=n(TRe,"A",{href:!0});var UMt=s(UO);RRo=r(UMt,"GPTNeoForCausalLM"),UMt.forEach(t),PRo=r(TRe," (GPT Neo model)"),TRe.forEach(t),BRo=i(W),pb=n(W,"LI",{});var MRe=s(pb);Vhe=n(MRe,"STRONG",{});var JMt=s(Vhe);IRo=r(JMt,"gpt_neox"),JMt.forEach(t),NRo=r(MRe," \u2014 "),JO=n(MRe,"A",{href:!0});var YMt=s(JO);qRo=r(YMt,"GPTNeoXForCausalLM"),YMt.forEach(t),jRo=r(MRe," (GPT NeoX model)"),MRe.forEach(t),DRo=i(W),_b=n(W,"LI",{});var ERe=s(_b);Xhe=n(ERe,"STRONG",{});var KMt=s(Xhe);GRo=r(KMt,"gptj"),KMt.forEach(t),ORo=r(ERe," \u2014 "),YO=n(ERe,"A",{href:!0});var ZMt=s(YO);VRo=r(ZMt,"GPTJForCausalLM"),ZMt.forEach(t),XRo=r(ERe," (GPT-J model)"),ERe.forEach(t),zRo=i(W),bb=n(W,"LI",{});var CRe=s(bb);zhe=n(CRe,"STRONG",{});var e4t=s(zhe);WRo=r(e4t,"marian"),e4t.forEach(t),QRo=r(CRe," \u2014 "),KO=n(CRe,"A",{href:!0});var o4t=s(KO);HRo=r(o4t,"MarianForCausalLM"),o4t.forEach(t),URo=r(CRe," (Marian model)"),CRe.forEach(t),JRo=i(W),vb=n(W,"LI",{});var wRe=s(vb);Whe=n(wRe,"STRONG",{});var r4t=s(Whe);YRo=r(r4t,"mbart"),r4t.forEach(t),KRo=r(wRe," \u2014 "),ZO=n(wRe,"A",{href:!0});var t4t=s(ZO);ZRo=r(t4t,"MBartForCausalLM"),t4t.forEach(t),ePo=r(wRe," (mBART model)"),wRe.forEach(t),oPo=i(W),Fb=n(W,"LI",{});var ARe=s(Fb);Qhe=n(ARe,"STRONG",{});var a4t=s(Qhe);rPo=r(a4t,"megatron-bert"),a4t.forEach(t),tPo=r(ARe," \u2014 "),eV=n(ARe,"A",{href:!0});var n4t=s(eV);aPo=r(n4t,"MegatronBertForCausalLM"),n4t.forEach(t),nPo=r(ARe," (Megatron-BERT model)"),ARe.forEach(t),sPo=i(W),Tb=n(W,"LI",{});var LRe=s(Tb);Hhe=n(LRe,"STRONG",{});var s4t=s(Hhe);lPo=r(s4t,"mvp"),s4t.forEach(t),iPo=r(LRe," \u2014 "),oV=n(LRe,"A",{href:!0});var l4t=s(oV);dPo=r(l4t,"MvpForCausalLM"),l4t.forEach(t),cPo=r(LRe," (MVP model)"),LRe.forEach(t),mPo=i(W),Mb=n(W,"LI",{});var yRe=s(Mb);Uhe=n(yRe,"STRONG",{});var i4t=s(Uhe);fPo=r(i4t,"openai-gpt"),i4t.forEach(t),gPo=r(yRe," \u2014 "),rV=n(yRe,"A",{href:!0});var d4t=s(rV);hPo=r(d4t,"OpenAIGPTLMHeadModel"),d4t.forEach(t),uPo=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),pPo=i(W),Eb=n(W,"LI",{});var xRe=s(Eb);Jhe=n(xRe,"STRONG",{});var c4t=s(Jhe);_Po=r(c4t,"opt"),c4t.forEach(t),bPo=r(xRe," \u2014 "),tV=n(xRe,"A",{href:!0});var m4t=s(tV);vPo=r(m4t,"OPTForCausalLM"),m4t.forEach(t),FPo=r(xRe," (OPT model)"),xRe.forEach(t),TPo=i(W),Cb=n(W,"LI",{});var $Re=s(Cb);Yhe=n($Re,"STRONG",{});var f4t=s(Yhe);MPo=r(f4t,"pegasus"),f4t.forEach(t),EPo=r($Re," \u2014 "),aV=n($Re,"A",{href:!0});var g4t=s(aV);CPo=r(g4t,"PegasusForCausalLM"),g4t.forEach(t),wPo=r($Re," (Pegasus model)"),$Re.forEach(t),APo=i(W),wb=n(W,"LI",{});var kRe=s(wb);Khe=n(kRe,"STRONG",{});var h4t=s(Khe);LPo=r(h4t,"plbart"),h4t.forEach(t),yPo=r(kRe," \u2014 "),nV=n(kRe,"A",{href:!0});var u4t=s(nV);xPo=r(u4t,"PLBartForCausalLM"),u4t.forEach(t),$Po=r(kRe," (PLBart model)"),kRe.forEach(t),kPo=i(W),Ab=n(W,"LI",{});var SRe=s(Ab);Zhe=n(SRe,"STRONG",{});var p4t=s(Zhe);SPo=r(p4t,"prophetnet"),p4t.forEach(t),RPo=r(SRe," \u2014 "),sV=n(SRe,"A",{href:!0});var _4t=s(sV);PPo=r(_4t,"ProphetNetForCausalLM"),_4t.forEach(t),BPo=r(SRe," (ProphetNet model)"),SRe.forEach(t),IPo=i(W),Lb=n(W,"LI",{});var RRe=s(Lb);eue=n(RRe,"STRONG",{});var b4t=s(eue);NPo=r(b4t,"qdqbert"),b4t.forEach(t),qPo=r(RRe," \u2014 "),lV=n(RRe,"A",{href:!0});var v4t=s(lV);jPo=r(v4t,"QDQBertLMHeadModel"),v4t.forEach(t),DPo=r(RRe," (QDQBert model)"),RRe.forEach(t),GPo=i(W),yb=n(W,"LI",{});var PRe=s(yb);oue=n(PRe,"STRONG",{});var F4t=s(oue);OPo=r(F4t,"reformer"),F4t.forEach(t),VPo=r(PRe," \u2014 "),iV=n(PRe,"A",{href:!0});var T4t=s(iV);XPo=r(T4t,"ReformerModelWithLMHead"),T4t.forEach(t),zPo=r(PRe," (Reformer model)"),PRe.forEach(t),WPo=i(W),xb=n(W,"LI",{});var BRe=s(xb);rue=n(BRe,"STRONG",{});var M4t=s(rue);QPo=r(M4t,"rembert"),M4t.forEach(t),HPo=r(BRe," \u2014 "),dV=n(BRe,"A",{href:!0});var E4t=s(dV);UPo=r(E4t,"RemBertForCausalLM"),E4t.forEach(t),JPo=r(BRe," (RemBERT model)"),BRe.forEach(t),YPo=i(W),$b=n(W,"LI",{});var IRe=s($b);tue=n(IRe,"STRONG",{});var C4t=s(tue);KPo=r(C4t,"roberta"),C4t.forEach(t),ZPo=r(IRe," \u2014 "),cV=n(IRe,"A",{href:!0});var w4t=s(cV);eBo=r(w4t,"RobertaForCausalLM"),w4t.forEach(t),oBo=r(IRe," (RoBERTa model)"),IRe.forEach(t),rBo=i(W),kb=n(W,"LI",{});var NRe=s(kb);aue=n(NRe,"STRONG",{});var A4t=s(aue);tBo=r(A4t,"roformer"),A4t.forEach(t),aBo=r(NRe," \u2014 "),mV=n(NRe,"A",{href:!0});var L4t=s(mV);nBo=r(L4t,"RoFormerForCausalLM"),L4t.forEach(t),sBo=r(NRe," (RoFormer model)"),NRe.forEach(t),lBo=i(W),Sb=n(W,"LI",{});var qRe=s(Sb);nue=n(qRe,"STRONG",{});var y4t=s(nue);iBo=r(y4t,"speech_to_text_2"),y4t.forEach(t),dBo=r(qRe," \u2014 "),fV=n(qRe,"A",{href:!0});var x4t=s(fV);cBo=r(x4t,"Speech2Text2ForCausalLM"),x4t.forEach(t),mBo=r(qRe," (Speech2Text2 model)"),qRe.forEach(t),fBo=i(W),Rb=n(W,"LI",{});var jRe=s(Rb);sue=n(jRe,"STRONG",{});var $4t=s(sue);gBo=r($4t,"transfo-xl"),$4t.forEach(t),hBo=r(jRe," \u2014 "),gV=n(jRe,"A",{href:!0});var k4t=s(gV);uBo=r(k4t,"TransfoXLLMHeadModel"),k4t.forEach(t),pBo=r(jRe," (Transformer-XL model)"),jRe.forEach(t),_Bo=i(W),Pb=n(W,"LI",{});var DRe=s(Pb);lue=n(DRe,"STRONG",{});var S4t=s(lue);bBo=r(S4t,"trocr"),S4t.forEach(t),vBo=r(DRe," \u2014 "),hV=n(DRe,"A",{href:!0});var R4t=s(hV);FBo=r(R4t,"TrOCRForCausalLM"),R4t.forEach(t),TBo=r(DRe," (TrOCR model)"),DRe.forEach(t),MBo=i(W),Bb=n(W,"LI",{});var GRe=s(Bb);iue=n(GRe,"STRONG",{});var P4t=s(iue);EBo=r(P4t,"xglm"),P4t.forEach(t),CBo=r(GRe," \u2014 "),uV=n(GRe,"A",{href:!0});var B4t=s(uV);wBo=r(B4t,"XGLMForCausalLM"),B4t.forEach(t),ABo=r(GRe," (XGLM model)"),GRe.forEach(t),LBo=i(W),Ib=n(W,"LI",{});var ORe=s(Ib);due=n(ORe,"STRONG",{});var I4t=s(due);yBo=r(I4t,"xlm"),I4t.forEach(t),xBo=r(ORe," \u2014 "),pV=n(ORe,"A",{href:!0});var N4t=s(pV);$Bo=r(N4t,"XLMWithLMHeadModel"),N4t.forEach(t),kBo=r(ORe," (XLM model)"),ORe.forEach(t),SBo=i(W),Nb=n(W,"LI",{});var VRe=s(Nb);cue=n(VRe,"STRONG",{});var q4t=s(cue);RBo=r(q4t,"xlm-prophetnet"),q4t.forEach(t),PBo=r(VRe," \u2014 "),_V=n(VRe,"A",{href:!0});var j4t=s(_V);BBo=r(j4t,"XLMProphetNetForCausalLM"),j4t.forEach(t),IBo=r(VRe," (XLM-ProphetNet model)"),VRe.forEach(t),NBo=i(W),qb=n(W,"LI",{});var XRe=s(qb);mue=n(XRe,"STRONG",{});var D4t=s(mue);qBo=r(D4t,"xlm-roberta"),D4t.forEach(t),jBo=r(XRe," \u2014 "),bV=n(XRe,"A",{href:!0});var G4t=s(bV);DBo=r(G4t,"XLMRobertaForCausalLM"),G4t.forEach(t),GBo=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),OBo=i(W),jb=n(W,"LI",{});var zRe=s(jb);fue=n(zRe,"STRONG",{});var O4t=s(fue);VBo=r(O4t,"xlm-roberta-xl"),O4t.forEach(t),XBo=r(zRe," \u2014 "),vV=n(zRe,"A",{href:!0});var V4t=s(vV);zBo=r(V4t,"XLMRobertaXLForCausalLM"),V4t.forEach(t),WBo=r(zRe," (XLM-RoBERTa-XL model)"),zRe.forEach(t),QBo=i(W),Db=n(W,"LI",{});var WRe=s(Db);gue=n(WRe,"STRONG",{});var X4t=s(gue);HBo=r(X4t,"xlnet"),X4t.forEach(t),UBo=r(WRe," \u2014 "),FV=n(WRe,"A",{href:!0});var z4t=s(FV);JBo=r(z4t,"XLNetLMHeadModel"),z4t.forEach(t),YBo=r(WRe," (XLNet model)"),WRe.forEach(t),W.forEach(t),KBo=i(da),Gb=n(da,"P",{});var QRe=s(Gb);ZBo=r(QRe,"The model is set in evaluation mode by default using "),hue=n(QRe,"CODE",{});var W4t=s(hue);eIo=r(W4t,"model.eval()"),W4t.forEach(t),oIo=r(QRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(QRe,"CODE",{});var Q4t=s(uue);rIo=r(Q4t,"model.train()"),Q4t.forEach(t),QRe.forEach(t),tIo=i(da),T(Ob.$$.fragment,da),da.forEach(t),ll.forEach(t),Hze=i(m),Zi=n(m,"H2",{class:!0});var eHe=s(Zi);Vb=n(eHe,"A",{id:!0,class:!0,href:!0});var H4t=s(Vb);pue=n(H4t,"SPAN",{});var U4t=s(pue);T(g8.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),aIo=i(eHe),_ue=n(eHe,"SPAN",{});var J4t=s(_ue);nIo=r(J4t,"AutoModelForMaskedLM"),J4t.forEach(t),eHe.forEach(t),Uze=i(m),Po=n(m,"DIV",{class:!0});var il=s(Po);T(h8.$$.fragment,il),sIo=i(il),ed=n(il,"P",{});var kte=s(ed);lIo=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TV=n(kte,"A",{href:!0});var Y4t=s(TV);iIo=r(Y4t,"from_pretrained()"),Y4t.forEach(t),dIo=r(kte," class method or the "),MV=n(kte,"A",{href:!0});var K4t=s(MV);cIo=r(K4t,"from_config()"),K4t.forEach(t),mIo=r(kte,` class
method.`),kte.forEach(t),fIo=i(il),u8=n(il,"P",{});var oHe=s(u8);gIo=r(oHe,"This class cannot be instantiated directly using "),bue=n(oHe,"CODE",{});var Z4t=s(bue);hIo=r(Z4t,"__init__()"),Z4t.forEach(t),uIo=r(oHe," (throws an error)."),oHe.forEach(t),pIo=i(il),mt=n(il,"DIV",{class:!0});var B7=s(mt);T(p8.$$.fragment,B7),_Io=i(B7),vue=n(B7,"P",{});var eEt=s(vue);bIo=r(eEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eEt.forEach(t),vIo=i(B7),od=n(B7,"P",{});var Ste=s(od);FIo=r(Ste,`Note:
Loading a model from its configuration file does `),Fue=n(Ste,"STRONG",{});var oEt=s(Fue);TIo=r(oEt,"not"),oEt.forEach(t),MIo=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(Ste,"A",{href:!0});var rEt=s(EV);EIo=r(rEt,"from_pretrained()"),rEt.forEach(t),CIo=r(Ste," to load the model weights."),Ste.forEach(t),wIo=i(B7),T(Xb.$$.fragment,B7),B7.forEach(t),AIo=i(il),eo=n(il,"DIV",{class:!0});var ca=s(eo);T(_8.$$.fragment,ca),LIo=i(ca),Tue=n(ca,"P",{});var tEt=s(Tue);yIo=r(tEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tEt.forEach(t),xIo=i(ca),ja=n(ca,"P",{});var I7=s(ja);$Io=r(I7,"The model class to instantiate is selected based on the "),Mue=n(I7,"CODE",{});var aEt=s(Mue);kIo=r(aEt,"model_type"),aEt.forEach(t),SIo=r(I7,` property of the config object (either
passed as an argument or loaded from `),Eue=n(I7,"CODE",{});var nEt=s(Eue);RIo=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),PIo=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(I7,"CODE",{});var sEt=s(Cue);BIo=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),IIo=r(I7,":"),I7.forEach(t),NIo=i(ca),Q=n(ca,"UL",{});var U=s(Q);zb=n(U,"LI",{});var HRe=s(zb);wue=n(HRe,"STRONG",{});var lEt=s(wue);qIo=r(lEt,"albert"),lEt.forEach(t),jIo=r(HRe," \u2014 "),CV=n(HRe,"A",{href:!0});var iEt=s(CV);DIo=r(iEt,"AlbertForMaskedLM"),iEt.forEach(t),GIo=r(HRe," (ALBERT model)"),HRe.forEach(t),OIo=i(U),Wb=n(U,"LI",{});var URe=s(Wb);Aue=n(URe,"STRONG",{});var dEt=s(Aue);VIo=r(dEt,"bart"),dEt.forEach(t),XIo=r(URe," \u2014 "),wV=n(URe,"A",{href:!0});var cEt=s(wV);zIo=r(cEt,"BartForConditionalGeneration"),cEt.forEach(t),WIo=r(URe," (BART model)"),URe.forEach(t),QIo=i(U),Qb=n(U,"LI",{});var JRe=s(Qb);Lue=n(JRe,"STRONG",{});var mEt=s(Lue);HIo=r(mEt,"bert"),mEt.forEach(t),UIo=r(JRe," \u2014 "),AV=n(JRe,"A",{href:!0});var fEt=s(AV);JIo=r(fEt,"BertForMaskedLM"),fEt.forEach(t),YIo=r(JRe," (BERT model)"),JRe.forEach(t),KIo=i(U),Hb=n(U,"LI",{});var YRe=s(Hb);yue=n(YRe,"STRONG",{});var gEt=s(yue);ZIo=r(gEt,"big_bird"),gEt.forEach(t),eNo=r(YRe," \u2014 "),LV=n(YRe,"A",{href:!0});var hEt=s(LV);oNo=r(hEt,"BigBirdForMaskedLM"),hEt.forEach(t),rNo=r(YRe," (BigBird model)"),YRe.forEach(t),tNo=i(U),Ub=n(U,"LI",{});var KRe=s(Ub);xue=n(KRe,"STRONG",{});var uEt=s(xue);aNo=r(uEt,"camembert"),uEt.forEach(t),nNo=r(KRe," \u2014 "),yV=n(KRe,"A",{href:!0});var pEt=s(yV);sNo=r(pEt,"CamembertForMaskedLM"),pEt.forEach(t),lNo=r(KRe," (CamemBERT model)"),KRe.forEach(t),iNo=i(U),Jb=n(U,"LI",{});var ZRe=s(Jb);$ue=n(ZRe,"STRONG",{});var _Et=s($ue);dNo=r(_Et,"convbert"),_Et.forEach(t),cNo=r(ZRe," \u2014 "),xV=n(ZRe,"A",{href:!0});var bEt=s(xV);mNo=r(bEt,"ConvBertForMaskedLM"),bEt.forEach(t),fNo=r(ZRe," (ConvBERT model)"),ZRe.forEach(t),gNo=i(U),Yb=n(U,"LI",{});var ePe=s(Yb);kue=n(ePe,"STRONG",{});var vEt=s(kue);hNo=r(vEt,"data2vec-text"),vEt.forEach(t),uNo=r(ePe," \u2014 "),$V=n(ePe,"A",{href:!0});var FEt=s($V);pNo=r(FEt,"Data2VecTextForMaskedLM"),FEt.forEach(t),_No=r(ePe," (Data2VecText model)"),ePe.forEach(t),bNo=i(U),Kb=n(U,"LI",{});var oPe=s(Kb);Sue=n(oPe,"STRONG",{});var TEt=s(Sue);vNo=r(TEt,"deberta"),TEt.forEach(t),FNo=r(oPe," \u2014 "),kV=n(oPe,"A",{href:!0});var MEt=s(kV);TNo=r(MEt,"DebertaForMaskedLM"),MEt.forEach(t),MNo=r(oPe," (DeBERTa model)"),oPe.forEach(t),ENo=i(U),Zb=n(U,"LI",{});var rPe=s(Zb);Rue=n(rPe,"STRONG",{});var EEt=s(Rue);CNo=r(EEt,"deberta-v2"),EEt.forEach(t),wNo=r(rPe," \u2014 "),SV=n(rPe,"A",{href:!0});var CEt=s(SV);ANo=r(CEt,"DebertaV2ForMaskedLM"),CEt.forEach(t),LNo=r(rPe," (DeBERTa-v2 model)"),rPe.forEach(t),yNo=i(U),ev=n(U,"LI",{});var tPe=s(ev);Pue=n(tPe,"STRONG",{});var wEt=s(Pue);xNo=r(wEt,"distilbert"),wEt.forEach(t),$No=r(tPe," \u2014 "),RV=n(tPe,"A",{href:!0});var AEt=s(RV);kNo=r(AEt,"DistilBertForMaskedLM"),AEt.forEach(t),SNo=r(tPe," (DistilBERT model)"),tPe.forEach(t),RNo=i(U),ov=n(U,"LI",{});var aPe=s(ov);Bue=n(aPe,"STRONG",{});var LEt=s(Bue);PNo=r(LEt,"electra"),LEt.forEach(t),BNo=r(aPe," \u2014 "),PV=n(aPe,"A",{href:!0});var yEt=s(PV);INo=r(yEt,"ElectraForMaskedLM"),yEt.forEach(t),NNo=r(aPe," (ELECTRA model)"),aPe.forEach(t),qNo=i(U),rv=n(U,"LI",{});var nPe=s(rv);Iue=n(nPe,"STRONG",{});var xEt=s(Iue);jNo=r(xEt,"flaubert"),xEt.forEach(t),DNo=r(nPe," \u2014 "),BV=n(nPe,"A",{href:!0});var $Et=s(BV);GNo=r($Et,"FlaubertWithLMHeadModel"),$Et.forEach(t),ONo=r(nPe," (FlauBERT model)"),nPe.forEach(t),VNo=i(U),tv=n(U,"LI",{});var sPe=s(tv);Nue=n(sPe,"STRONG",{});var kEt=s(Nue);XNo=r(kEt,"fnet"),kEt.forEach(t),zNo=r(sPe," \u2014 "),IV=n(sPe,"A",{href:!0});var SEt=s(IV);WNo=r(SEt,"FNetForMaskedLM"),SEt.forEach(t),QNo=r(sPe," (FNet model)"),sPe.forEach(t),HNo=i(U),av=n(U,"LI",{});var lPe=s(av);que=n(lPe,"STRONG",{});var REt=s(que);UNo=r(REt,"funnel"),REt.forEach(t),JNo=r(lPe," \u2014 "),NV=n(lPe,"A",{href:!0});var PEt=s(NV);YNo=r(PEt,"FunnelForMaskedLM"),PEt.forEach(t),KNo=r(lPe," (Funnel Transformer model)"),lPe.forEach(t),ZNo=i(U),nv=n(U,"LI",{});var iPe=s(nv);jue=n(iPe,"STRONG",{});var BEt=s(jue);eqo=r(BEt,"ibert"),BEt.forEach(t),oqo=r(iPe," \u2014 "),qV=n(iPe,"A",{href:!0});var IEt=s(qV);rqo=r(IEt,"IBertForMaskedLM"),IEt.forEach(t),tqo=r(iPe," (I-BERT model)"),iPe.forEach(t),aqo=i(U),sv=n(U,"LI",{});var dPe=s(sv);Due=n(dPe,"STRONG",{});var NEt=s(Due);nqo=r(NEt,"layoutlm"),NEt.forEach(t),sqo=r(dPe," \u2014 "),jV=n(dPe,"A",{href:!0});var qEt=s(jV);lqo=r(qEt,"LayoutLMForMaskedLM"),qEt.forEach(t),iqo=r(dPe," (LayoutLM model)"),dPe.forEach(t),dqo=i(U),lv=n(U,"LI",{});var cPe=s(lv);Gue=n(cPe,"STRONG",{});var jEt=s(Gue);cqo=r(jEt,"longformer"),jEt.forEach(t),mqo=r(cPe," \u2014 "),DV=n(cPe,"A",{href:!0});var DEt=s(DV);fqo=r(DEt,"LongformerForMaskedLM"),DEt.forEach(t),gqo=r(cPe," (Longformer model)"),cPe.forEach(t),hqo=i(U),iv=n(U,"LI",{});var mPe=s(iv);Oue=n(mPe,"STRONG",{});var GEt=s(Oue);uqo=r(GEt,"luke"),GEt.forEach(t),pqo=r(mPe," \u2014 "),GV=n(mPe,"A",{href:!0});var OEt=s(GV);_qo=r(OEt,"LukeForMaskedLM"),OEt.forEach(t),bqo=r(mPe," (LUKE model)"),mPe.forEach(t),vqo=i(U),dv=n(U,"LI",{});var fPe=s(dv);Vue=n(fPe,"STRONG",{});var VEt=s(Vue);Fqo=r(VEt,"mbart"),VEt.forEach(t),Tqo=r(fPe," \u2014 "),OV=n(fPe,"A",{href:!0});var XEt=s(OV);Mqo=r(XEt,"MBartForConditionalGeneration"),XEt.forEach(t),Eqo=r(fPe," (mBART model)"),fPe.forEach(t),Cqo=i(U),cv=n(U,"LI",{});var gPe=s(cv);Xue=n(gPe,"STRONG",{});var zEt=s(Xue);wqo=r(zEt,"megatron-bert"),zEt.forEach(t),Aqo=r(gPe," \u2014 "),VV=n(gPe,"A",{href:!0});var WEt=s(VV);Lqo=r(WEt,"MegatronBertForMaskedLM"),WEt.forEach(t),yqo=r(gPe," (Megatron-BERT model)"),gPe.forEach(t),xqo=i(U),mv=n(U,"LI",{});var hPe=s(mv);zue=n(hPe,"STRONG",{});var QEt=s(zue);$qo=r(QEt,"mobilebert"),QEt.forEach(t),kqo=r(hPe," \u2014 "),XV=n(hPe,"A",{href:!0});var HEt=s(XV);Sqo=r(HEt,"MobileBertForMaskedLM"),HEt.forEach(t),Rqo=r(hPe," (MobileBERT model)"),hPe.forEach(t),Pqo=i(U),fv=n(U,"LI",{});var uPe=s(fv);Wue=n(uPe,"STRONG",{});var UEt=s(Wue);Bqo=r(UEt,"mpnet"),UEt.forEach(t),Iqo=r(uPe," \u2014 "),zV=n(uPe,"A",{href:!0});var JEt=s(zV);Nqo=r(JEt,"MPNetForMaskedLM"),JEt.forEach(t),qqo=r(uPe," (MPNet model)"),uPe.forEach(t),jqo=i(U),gv=n(U,"LI",{});var pPe=s(gv);Que=n(pPe,"STRONG",{});var YEt=s(Que);Dqo=r(YEt,"mvp"),YEt.forEach(t),Gqo=r(pPe," \u2014 "),WV=n(pPe,"A",{href:!0});var KEt=s(WV);Oqo=r(KEt,"MvpForConditionalGeneration"),KEt.forEach(t),Vqo=r(pPe," (MVP model)"),pPe.forEach(t),Xqo=i(U),hv=n(U,"LI",{});var _Pe=s(hv);Hue=n(_Pe,"STRONG",{});var ZEt=s(Hue);zqo=r(ZEt,"nezha"),ZEt.forEach(t),Wqo=r(_Pe," \u2014 "),QV=n(_Pe,"A",{href:!0});var eCt=s(QV);Qqo=r(eCt,"NezhaForMaskedLM"),eCt.forEach(t),Hqo=r(_Pe," (Nezha model)"),_Pe.forEach(t),Uqo=i(U),uv=n(U,"LI",{});var bPe=s(uv);Uue=n(bPe,"STRONG",{});var oCt=s(Uue);Jqo=r(oCt,"nystromformer"),oCt.forEach(t),Yqo=r(bPe," \u2014 "),HV=n(bPe,"A",{href:!0});var rCt=s(HV);Kqo=r(rCt,"NystromformerForMaskedLM"),rCt.forEach(t),Zqo=r(bPe," (Nystr\xF6mformer model)"),bPe.forEach(t),ejo=i(U),pv=n(U,"LI",{});var vPe=s(pv);Jue=n(vPe,"STRONG",{});var tCt=s(Jue);ojo=r(tCt,"perceiver"),tCt.forEach(t),rjo=r(vPe," \u2014 "),UV=n(vPe,"A",{href:!0});var aCt=s(UV);tjo=r(aCt,"PerceiverForMaskedLM"),aCt.forEach(t),ajo=r(vPe," (Perceiver model)"),vPe.forEach(t),njo=i(U),_v=n(U,"LI",{});var FPe=s(_v);Yue=n(FPe,"STRONG",{});var nCt=s(Yue);sjo=r(nCt,"qdqbert"),nCt.forEach(t),ljo=r(FPe," \u2014 "),JV=n(FPe,"A",{href:!0});var sCt=s(JV);ijo=r(sCt,"QDQBertForMaskedLM"),sCt.forEach(t),djo=r(FPe," (QDQBert model)"),FPe.forEach(t),cjo=i(U),bv=n(U,"LI",{});var TPe=s(bv);Kue=n(TPe,"STRONG",{});var lCt=s(Kue);mjo=r(lCt,"reformer"),lCt.forEach(t),fjo=r(TPe," \u2014 "),YV=n(TPe,"A",{href:!0});var iCt=s(YV);gjo=r(iCt,"ReformerForMaskedLM"),iCt.forEach(t),hjo=r(TPe," (Reformer model)"),TPe.forEach(t),ujo=i(U),vv=n(U,"LI",{});var MPe=s(vv);Zue=n(MPe,"STRONG",{});var dCt=s(Zue);pjo=r(dCt,"rembert"),dCt.forEach(t),_jo=r(MPe," \u2014 "),KV=n(MPe,"A",{href:!0});var cCt=s(KV);bjo=r(cCt,"RemBertForMaskedLM"),cCt.forEach(t),vjo=r(MPe," (RemBERT model)"),MPe.forEach(t),Fjo=i(U),Fv=n(U,"LI",{});var EPe=s(Fv);epe=n(EPe,"STRONG",{});var mCt=s(epe);Tjo=r(mCt,"roberta"),mCt.forEach(t),Mjo=r(EPe," \u2014 "),ZV=n(EPe,"A",{href:!0});var fCt=s(ZV);Ejo=r(fCt,"RobertaForMaskedLM"),fCt.forEach(t),Cjo=r(EPe," (RoBERTa model)"),EPe.forEach(t),wjo=i(U),Tv=n(U,"LI",{});var CPe=s(Tv);ope=n(CPe,"STRONG",{});var gCt=s(ope);Ajo=r(gCt,"roformer"),gCt.forEach(t),Ljo=r(CPe," \u2014 "),eX=n(CPe,"A",{href:!0});var hCt=s(eX);yjo=r(hCt,"RoFormerForMaskedLM"),hCt.forEach(t),xjo=r(CPe," (RoFormer model)"),CPe.forEach(t),$jo=i(U),Mv=n(U,"LI",{});var wPe=s(Mv);rpe=n(wPe,"STRONG",{});var uCt=s(rpe);kjo=r(uCt,"squeezebert"),uCt.forEach(t),Sjo=r(wPe," \u2014 "),oX=n(wPe,"A",{href:!0});var pCt=s(oX);Rjo=r(pCt,"SqueezeBertForMaskedLM"),pCt.forEach(t),Pjo=r(wPe," (SqueezeBERT model)"),wPe.forEach(t),Bjo=i(U),Ev=n(U,"LI",{});var APe=s(Ev);tpe=n(APe,"STRONG",{});var _Ct=s(tpe);Ijo=r(_Ct,"tapas"),_Ct.forEach(t),Njo=r(APe," \u2014 "),rX=n(APe,"A",{href:!0});var bCt=s(rX);qjo=r(bCt,"TapasForMaskedLM"),bCt.forEach(t),jjo=r(APe," (TAPAS model)"),APe.forEach(t),Djo=i(U),Cv=n(U,"LI",{});var LPe=s(Cv);ape=n(LPe,"STRONG",{});var vCt=s(ape);Gjo=r(vCt,"wav2vec2"),vCt.forEach(t),Ojo=r(LPe," \u2014 "),npe=n(LPe,"CODE",{});var FCt=s(npe);Vjo=r(FCt,"Wav2Vec2ForMaskedLM"),FCt.forEach(t),Xjo=r(LPe," (Wav2Vec2 model)"),LPe.forEach(t),zjo=i(U),wv=n(U,"LI",{});var yPe=s(wv);spe=n(yPe,"STRONG",{});var TCt=s(spe);Wjo=r(TCt,"xlm"),TCt.forEach(t),Qjo=r(yPe," \u2014 "),tX=n(yPe,"A",{href:!0});var MCt=s(tX);Hjo=r(MCt,"XLMWithLMHeadModel"),MCt.forEach(t),Ujo=r(yPe," (XLM model)"),yPe.forEach(t),Jjo=i(U),Av=n(U,"LI",{});var xPe=s(Av);lpe=n(xPe,"STRONG",{});var ECt=s(lpe);Yjo=r(ECt,"xlm-roberta"),ECt.forEach(t),Kjo=r(xPe," \u2014 "),aX=n(xPe,"A",{href:!0});var CCt=s(aX);Zjo=r(CCt,"XLMRobertaForMaskedLM"),CCt.forEach(t),eDo=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),oDo=i(U),Lv=n(U,"LI",{});var $Pe=s(Lv);ipe=n($Pe,"STRONG",{});var wCt=s(ipe);rDo=r(wCt,"xlm-roberta-xl"),wCt.forEach(t),tDo=r($Pe," \u2014 "),nX=n($Pe,"A",{href:!0});var ACt=s(nX);aDo=r(ACt,"XLMRobertaXLForMaskedLM"),ACt.forEach(t),nDo=r($Pe," (XLM-RoBERTa-XL model)"),$Pe.forEach(t),sDo=i(U),yv=n(U,"LI",{});var kPe=s(yv);dpe=n(kPe,"STRONG",{});var LCt=s(dpe);lDo=r(LCt,"yoso"),LCt.forEach(t),iDo=r(kPe," \u2014 "),sX=n(kPe,"A",{href:!0});var yCt=s(sX);dDo=r(yCt,"YosoForMaskedLM"),yCt.forEach(t),cDo=r(kPe," (YOSO model)"),kPe.forEach(t),U.forEach(t),mDo=i(ca),xv=n(ca,"P",{});var SPe=s(xv);fDo=r(SPe,"The model is set in evaluation mode by default using "),cpe=n(SPe,"CODE",{});var xCt=s(cpe);gDo=r(xCt,"model.eval()"),xCt.forEach(t),hDo=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(SPe,"CODE",{});var $Ct=s(mpe);uDo=r($Ct,"model.train()"),$Ct.forEach(t),SPe.forEach(t),pDo=i(ca),T($v.$$.fragment,ca),ca.forEach(t),il.forEach(t),Jze=i(m),rd=n(m,"H2",{class:!0});var rHe=s(rd);kv=n(rHe,"A",{id:!0,class:!0,href:!0});var kCt=s(kv);fpe=n(kCt,"SPAN",{});var SCt=s(fpe);T(b8.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),_Do=i(rHe),gpe=n(rHe,"SPAN",{});var RCt=s(gpe);bDo=r(RCt,"AutoModelForSeq2SeqLM"),RCt.forEach(t),rHe.forEach(t),Yze=i(m),Bo=n(m,"DIV",{class:!0});var dl=s(Bo);T(v8.$$.fragment,dl),vDo=i(dl),td=n(dl,"P",{});var Rte=s(td);FDo=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=n(Rte,"A",{href:!0});var PCt=s(lX);TDo=r(PCt,"from_pretrained()"),PCt.forEach(t),MDo=r(Rte," class method or the "),iX=n(Rte,"A",{href:!0});var BCt=s(iX);EDo=r(BCt,"from_config()"),BCt.forEach(t),CDo=r(Rte,` class
method.`),Rte.forEach(t),wDo=i(dl),F8=n(dl,"P",{});var tHe=s(F8);ADo=r(tHe,"This class cannot be instantiated directly using "),hpe=n(tHe,"CODE",{});var ICt=s(hpe);LDo=r(ICt,"__init__()"),ICt.forEach(t),yDo=r(tHe," (throws an error)."),tHe.forEach(t),xDo=i(dl),ft=n(dl,"DIV",{class:!0});var N7=s(ft);T(T8.$$.fragment,N7),$Do=i(N7),upe=n(N7,"P",{});var NCt=s(upe);kDo=r(NCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NCt.forEach(t),SDo=i(N7),ad=n(N7,"P",{});var Pte=s(ad);RDo=r(Pte,`Note:
Loading a model from its configuration file does `),ppe=n(Pte,"STRONG",{});var qCt=s(ppe);PDo=r(qCt,"not"),qCt.forEach(t),BDo=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(Pte,"A",{href:!0});var jCt=s(dX);IDo=r(jCt,"from_pretrained()"),jCt.forEach(t),NDo=r(Pte," to load the model weights."),Pte.forEach(t),qDo=i(N7),T(Sv.$$.fragment,N7),N7.forEach(t),jDo=i(dl),oo=n(dl,"DIV",{class:!0});var ma=s(oo);T(M8.$$.fragment,ma),DDo=i(ma),_pe=n(ma,"P",{});var DCt=s(_pe);GDo=r(DCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DCt.forEach(t),ODo=i(ma),Da=n(ma,"P",{});var q7=s(Da);VDo=r(q7,"The model class to instantiate is selected based on the "),bpe=n(q7,"CODE",{});var GCt=s(bpe);XDo=r(GCt,"model_type"),GCt.forEach(t),zDo=r(q7,` property of the config object (either
passed as an argument or loaded from `),vpe=n(q7,"CODE",{});var OCt=s(vpe);WDo=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),QDo=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(q7,"CODE",{});var VCt=s(Fpe);HDo=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),UDo=r(q7,":"),q7.forEach(t),JDo=i(ma),fe=n(ma,"UL",{});var _e=s(fe);Rv=n(_e,"LI",{});var RPe=s(Rv);Tpe=n(RPe,"STRONG",{});var XCt=s(Tpe);YDo=r(XCt,"bart"),XCt.forEach(t),KDo=r(RPe," \u2014 "),cX=n(RPe,"A",{href:!0});var zCt=s(cX);ZDo=r(zCt,"BartForConditionalGeneration"),zCt.forEach(t),eGo=r(RPe," (BART model)"),RPe.forEach(t),oGo=i(_e),Pv=n(_e,"LI",{});var PPe=s(Pv);Mpe=n(PPe,"STRONG",{});var WCt=s(Mpe);rGo=r(WCt,"bigbird_pegasus"),WCt.forEach(t),tGo=r(PPe," \u2014 "),mX=n(PPe,"A",{href:!0});var QCt=s(mX);aGo=r(QCt,"BigBirdPegasusForConditionalGeneration"),QCt.forEach(t),nGo=r(PPe," (BigBird-Pegasus model)"),PPe.forEach(t),sGo=i(_e),Bv=n(_e,"LI",{});var BPe=s(Bv);Epe=n(BPe,"STRONG",{});var HCt=s(Epe);lGo=r(HCt,"blenderbot"),HCt.forEach(t),iGo=r(BPe," \u2014 "),fX=n(BPe,"A",{href:!0});var UCt=s(fX);dGo=r(UCt,"BlenderbotForConditionalGeneration"),UCt.forEach(t),cGo=r(BPe," (Blenderbot model)"),BPe.forEach(t),mGo=i(_e),Iv=n(_e,"LI",{});var IPe=s(Iv);Cpe=n(IPe,"STRONG",{});var JCt=s(Cpe);fGo=r(JCt,"blenderbot-small"),JCt.forEach(t),gGo=r(IPe," \u2014 "),gX=n(IPe,"A",{href:!0});var YCt=s(gX);hGo=r(YCt,"BlenderbotSmallForConditionalGeneration"),YCt.forEach(t),uGo=r(IPe," (BlenderbotSmall model)"),IPe.forEach(t),pGo=i(_e),Nv=n(_e,"LI",{});var NPe=s(Nv);wpe=n(NPe,"STRONG",{});var KCt=s(wpe);_Go=r(KCt,"encoder-decoder"),KCt.forEach(t),bGo=r(NPe," \u2014 "),hX=n(NPe,"A",{href:!0});var ZCt=s(hX);vGo=r(ZCt,"EncoderDecoderModel"),ZCt.forEach(t),FGo=r(NPe," (Encoder decoder model)"),NPe.forEach(t),TGo=i(_e),qv=n(_e,"LI",{});var qPe=s(qv);Ape=n(qPe,"STRONG",{});var e5t=s(Ape);MGo=r(e5t,"fsmt"),e5t.forEach(t),EGo=r(qPe," \u2014 "),uX=n(qPe,"A",{href:!0});var o5t=s(uX);CGo=r(o5t,"FSMTForConditionalGeneration"),o5t.forEach(t),wGo=r(qPe," (FairSeq Machine-Translation model)"),qPe.forEach(t),AGo=i(_e),jv=n(_e,"LI",{});var jPe=s(jv);Lpe=n(jPe,"STRONG",{});var r5t=s(Lpe);LGo=r(r5t,"led"),r5t.forEach(t),yGo=r(jPe," \u2014 "),pX=n(jPe,"A",{href:!0});var t5t=s(pX);xGo=r(t5t,"LEDForConditionalGeneration"),t5t.forEach(t),$Go=r(jPe," (LED model)"),jPe.forEach(t),kGo=i(_e),Dv=n(_e,"LI",{});var DPe=s(Dv);ype=n(DPe,"STRONG",{});var a5t=s(ype);SGo=r(a5t,"longt5"),a5t.forEach(t),RGo=r(DPe," \u2014 "),_X=n(DPe,"A",{href:!0});var n5t=s(_X);PGo=r(n5t,"LongT5ForConditionalGeneration"),n5t.forEach(t),BGo=r(DPe," (LongT5 model)"),DPe.forEach(t),IGo=i(_e),Gv=n(_e,"LI",{});var GPe=s(Gv);xpe=n(GPe,"STRONG",{});var s5t=s(xpe);NGo=r(s5t,"m2m_100"),s5t.forEach(t),qGo=r(GPe," \u2014 "),bX=n(GPe,"A",{href:!0});var l5t=s(bX);jGo=r(l5t,"M2M100ForConditionalGeneration"),l5t.forEach(t),DGo=r(GPe," (M2M100 model)"),GPe.forEach(t),GGo=i(_e),Ov=n(_e,"LI",{});var OPe=s(Ov);$pe=n(OPe,"STRONG",{});var i5t=s($pe);OGo=r(i5t,"marian"),i5t.forEach(t),VGo=r(OPe," \u2014 "),vX=n(OPe,"A",{href:!0});var d5t=s(vX);XGo=r(d5t,"MarianMTModel"),d5t.forEach(t),zGo=r(OPe," (Marian model)"),OPe.forEach(t),WGo=i(_e),Vv=n(_e,"LI",{});var VPe=s(Vv);kpe=n(VPe,"STRONG",{});var c5t=s(kpe);QGo=r(c5t,"mbart"),c5t.forEach(t),HGo=r(VPe," \u2014 "),FX=n(VPe,"A",{href:!0});var m5t=s(FX);UGo=r(m5t,"MBartForConditionalGeneration"),m5t.forEach(t),JGo=r(VPe," (mBART model)"),VPe.forEach(t),YGo=i(_e),Xv=n(_e,"LI",{});var XPe=s(Xv);Spe=n(XPe,"STRONG",{});var f5t=s(Spe);KGo=r(f5t,"mt5"),f5t.forEach(t),ZGo=r(XPe," \u2014 "),TX=n(XPe,"A",{href:!0});var g5t=s(TX);eOo=r(g5t,"MT5ForConditionalGeneration"),g5t.forEach(t),oOo=r(XPe," (MT5 model)"),XPe.forEach(t),rOo=i(_e),zv=n(_e,"LI",{});var zPe=s(zv);Rpe=n(zPe,"STRONG",{});var h5t=s(Rpe);tOo=r(h5t,"mvp"),h5t.forEach(t),aOo=r(zPe," \u2014 "),MX=n(zPe,"A",{href:!0});var u5t=s(MX);nOo=r(u5t,"MvpForConditionalGeneration"),u5t.forEach(t),sOo=r(zPe," (MVP model)"),zPe.forEach(t),lOo=i(_e),Wv=n(_e,"LI",{});var WPe=s(Wv);Ppe=n(WPe,"STRONG",{});var p5t=s(Ppe);iOo=r(p5t,"nllb"),p5t.forEach(t),dOo=r(WPe," \u2014 "),EX=n(WPe,"A",{href:!0});var _5t=s(EX);cOo=r(_5t,"M2M100ForConditionalGeneration"),_5t.forEach(t),mOo=r(WPe," (NLLB model)"),WPe.forEach(t),fOo=i(_e),Qv=n(_e,"LI",{});var QPe=s(Qv);Bpe=n(QPe,"STRONG",{});var b5t=s(Bpe);gOo=r(b5t,"pegasus"),b5t.forEach(t),hOo=r(QPe," \u2014 "),CX=n(QPe,"A",{href:!0});var v5t=s(CX);uOo=r(v5t,"PegasusForConditionalGeneration"),v5t.forEach(t),pOo=r(QPe," (Pegasus model)"),QPe.forEach(t),_Oo=i(_e),Hv=n(_e,"LI",{});var HPe=s(Hv);Ipe=n(HPe,"STRONG",{});var F5t=s(Ipe);bOo=r(F5t,"plbart"),F5t.forEach(t),vOo=r(HPe," \u2014 "),wX=n(HPe,"A",{href:!0});var T5t=s(wX);FOo=r(T5t,"PLBartForConditionalGeneration"),T5t.forEach(t),TOo=r(HPe," (PLBart model)"),HPe.forEach(t),MOo=i(_e),Uv=n(_e,"LI",{});var UPe=s(Uv);Npe=n(UPe,"STRONG",{});var M5t=s(Npe);EOo=r(M5t,"prophetnet"),M5t.forEach(t),COo=r(UPe," \u2014 "),AX=n(UPe,"A",{href:!0});var E5t=s(AX);wOo=r(E5t,"ProphetNetForConditionalGeneration"),E5t.forEach(t),AOo=r(UPe," (ProphetNet model)"),UPe.forEach(t),LOo=i(_e),Jv=n(_e,"LI",{});var JPe=s(Jv);qpe=n(JPe,"STRONG",{});var C5t=s(qpe);yOo=r(C5t,"t5"),C5t.forEach(t),xOo=r(JPe," \u2014 "),LX=n(JPe,"A",{href:!0});var w5t=s(LX);$Oo=r(w5t,"T5ForConditionalGeneration"),w5t.forEach(t),kOo=r(JPe," (T5 model)"),JPe.forEach(t),SOo=i(_e),Yv=n(_e,"LI",{});var YPe=s(Yv);jpe=n(YPe,"STRONG",{});var A5t=s(jpe);ROo=r(A5t,"xlm-prophetnet"),A5t.forEach(t),POo=r(YPe," \u2014 "),yX=n(YPe,"A",{href:!0});var L5t=s(yX);BOo=r(L5t,"XLMProphetNetForConditionalGeneration"),L5t.forEach(t),IOo=r(YPe," (XLM-ProphetNet model)"),YPe.forEach(t),_e.forEach(t),NOo=i(ma),Kv=n(ma,"P",{});var KPe=s(Kv);qOo=r(KPe,"The model is set in evaluation mode by default using "),Dpe=n(KPe,"CODE",{});var y5t=s(Dpe);jOo=r(y5t,"model.eval()"),y5t.forEach(t),DOo=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(KPe,"CODE",{});var x5t=s(Gpe);GOo=r(x5t,"model.train()"),x5t.forEach(t),KPe.forEach(t),OOo=i(ma),T(Zv.$$.fragment,ma),ma.forEach(t),dl.forEach(t),Kze=i(m),nd=n(m,"H2",{class:!0});var aHe=s(nd);e1=n(aHe,"A",{id:!0,class:!0,href:!0});var $5t=s(e1);Ope=n($5t,"SPAN",{});var k5t=s(Ope);T(E8.$$.fragment,k5t),k5t.forEach(t),$5t.forEach(t),VOo=i(aHe),Vpe=n(aHe,"SPAN",{});var S5t=s(Vpe);XOo=r(S5t,"AutoModelForSequenceClassification"),S5t.forEach(t),aHe.forEach(t),Zze=i(m),Io=n(m,"DIV",{class:!0});var cl=s(Io);T(C8.$$.fragment,cl),zOo=i(cl),sd=n(cl,"P",{});var Bte=s(sd);WOo=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xX=n(Bte,"A",{href:!0});var R5t=s(xX);QOo=r(R5t,"from_pretrained()"),R5t.forEach(t),HOo=r(Bte," class method or the "),$X=n(Bte,"A",{href:!0});var P5t=s($X);UOo=r(P5t,"from_config()"),P5t.forEach(t),JOo=r(Bte,` class
method.`),Bte.forEach(t),YOo=i(cl),w8=n(cl,"P",{});var nHe=s(w8);KOo=r(nHe,"This class cannot be instantiated directly using "),Xpe=n(nHe,"CODE",{});var B5t=s(Xpe);ZOo=r(B5t,"__init__()"),B5t.forEach(t),eVo=r(nHe," (throws an error)."),nHe.forEach(t),oVo=i(cl),gt=n(cl,"DIV",{class:!0});var j7=s(gt);T(A8.$$.fragment,j7),rVo=i(j7),zpe=n(j7,"P",{});var I5t=s(zpe);tVo=r(I5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I5t.forEach(t),aVo=i(j7),ld=n(j7,"P",{});var Ite=s(ld);nVo=r(Ite,`Note:
Loading a model from its configuration file does `),Wpe=n(Ite,"STRONG",{});var N5t=s(Wpe);sVo=r(N5t,"not"),N5t.forEach(t),lVo=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(Ite,"A",{href:!0});var q5t=s(kX);iVo=r(q5t,"from_pretrained()"),q5t.forEach(t),dVo=r(Ite," to load the model weights."),Ite.forEach(t),cVo=i(j7),T(o1.$$.fragment,j7),j7.forEach(t),mVo=i(cl),ro=n(cl,"DIV",{class:!0});var fa=s(ro);T(L8.$$.fragment,fa),fVo=i(fa),Qpe=n(fa,"P",{});var j5t=s(Qpe);gVo=r(j5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j5t.forEach(t),hVo=i(fa),Ga=n(fa,"P",{});var D7=s(Ga);uVo=r(D7,"The model class to instantiate is selected based on the "),Hpe=n(D7,"CODE",{});var D5t=s(Hpe);pVo=r(D5t,"model_type"),D5t.forEach(t),_Vo=r(D7,` property of the config object (either
passed as an argument or loaded from `),Upe=n(D7,"CODE",{});var G5t=s(Upe);bVo=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),vVo=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(D7,"CODE",{});var O5t=s(Jpe);FVo=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),TVo=r(D7,":"),D7.forEach(t),MVo=i(fa),P=n(fa,"UL",{});var N=s(P);r1=n(N,"LI",{});var ZPe=s(r1);Ype=n(ZPe,"STRONG",{});var V5t=s(Ype);EVo=r(V5t,"albert"),V5t.forEach(t),CVo=r(ZPe," \u2014 "),SX=n(ZPe,"A",{href:!0});var X5t=s(SX);wVo=r(X5t,"AlbertForSequenceClassification"),X5t.forEach(t),AVo=r(ZPe," (ALBERT model)"),ZPe.forEach(t),LVo=i(N),t1=n(N,"LI",{});var eBe=s(t1);Kpe=n(eBe,"STRONG",{});var z5t=s(Kpe);yVo=r(z5t,"bart"),z5t.forEach(t),xVo=r(eBe," \u2014 "),RX=n(eBe,"A",{href:!0});var W5t=s(RX);$Vo=r(W5t,"BartForSequenceClassification"),W5t.forEach(t),kVo=r(eBe," (BART model)"),eBe.forEach(t),SVo=i(N),a1=n(N,"LI",{});var oBe=s(a1);Zpe=n(oBe,"STRONG",{});var Q5t=s(Zpe);RVo=r(Q5t,"bert"),Q5t.forEach(t),PVo=r(oBe," \u2014 "),PX=n(oBe,"A",{href:!0});var H5t=s(PX);BVo=r(H5t,"BertForSequenceClassification"),H5t.forEach(t),IVo=r(oBe," (BERT model)"),oBe.forEach(t),NVo=i(N),n1=n(N,"LI",{});var rBe=s(n1);e_e=n(rBe,"STRONG",{});var U5t=s(e_e);qVo=r(U5t,"big_bird"),U5t.forEach(t),jVo=r(rBe," \u2014 "),BX=n(rBe,"A",{href:!0});var J5t=s(BX);DVo=r(J5t,"BigBirdForSequenceClassification"),J5t.forEach(t),GVo=r(rBe," (BigBird model)"),rBe.forEach(t),OVo=i(N),s1=n(N,"LI",{});var tBe=s(s1);o_e=n(tBe,"STRONG",{});var Y5t=s(o_e);VVo=r(Y5t,"bigbird_pegasus"),Y5t.forEach(t),XVo=r(tBe," \u2014 "),IX=n(tBe,"A",{href:!0});var K5t=s(IX);zVo=r(K5t,"BigBirdPegasusForSequenceClassification"),K5t.forEach(t),WVo=r(tBe," (BigBird-Pegasus model)"),tBe.forEach(t),QVo=i(N),l1=n(N,"LI",{});var aBe=s(l1);r_e=n(aBe,"STRONG",{});var Z5t=s(r_e);HVo=r(Z5t,"bloom"),Z5t.forEach(t),UVo=r(aBe," \u2014 "),NX=n(aBe,"A",{href:!0});var e3t=s(NX);JVo=r(e3t,"BloomForSequenceClassification"),e3t.forEach(t),YVo=r(aBe," (BLOOM model)"),aBe.forEach(t),KVo=i(N),i1=n(N,"LI",{});var nBe=s(i1);t_e=n(nBe,"STRONG",{});var o3t=s(t_e);ZVo=r(o3t,"camembert"),o3t.forEach(t),eXo=r(nBe," \u2014 "),qX=n(nBe,"A",{href:!0});var r3t=s(qX);oXo=r(r3t,"CamembertForSequenceClassification"),r3t.forEach(t),rXo=r(nBe," (CamemBERT model)"),nBe.forEach(t),tXo=i(N),d1=n(N,"LI",{});var sBe=s(d1);a_e=n(sBe,"STRONG",{});var t3t=s(a_e);aXo=r(t3t,"canine"),t3t.forEach(t),nXo=r(sBe," \u2014 "),jX=n(sBe,"A",{href:!0});var a3t=s(jX);sXo=r(a3t,"CanineForSequenceClassification"),a3t.forEach(t),lXo=r(sBe," (CANINE model)"),sBe.forEach(t),iXo=i(N),c1=n(N,"LI",{});var lBe=s(c1);n_e=n(lBe,"STRONG",{});var n3t=s(n_e);dXo=r(n3t,"convbert"),n3t.forEach(t),cXo=r(lBe," \u2014 "),DX=n(lBe,"A",{href:!0});var s3t=s(DX);mXo=r(s3t,"ConvBertForSequenceClassification"),s3t.forEach(t),fXo=r(lBe," (ConvBERT model)"),lBe.forEach(t),gXo=i(N),m1=n(N,"LI",{});var iBe=s(m1);s_e=n(iBe,"STRONG",{});var l3t=s(s_e);hXo=r(l3t,"ctrl"),l3t.forEach(t),uXo=r(iBe," \u2014 "),GX=n(iBe,"A",{href:!0});var i3t=s(GX);pXo=r(i3t,"CTRLForSequenceClassification"),i3t.forEach(t),_Xo=r(iBe," (CTRL model)"),iBe.forEach(t),bXo=i(N),f1=n(N,"LI",{});var dBe=s(f1);l_e=n(dBe,"STRONG",{});var d3t=s(l_e);vXo=r(d3t,"data2vec-text"),d3t.forEach(t),FXo=r(dBe," \u2014 "),OX=n(dBe,"A",{href:!0});var c3t=s(OX);TXo=r(c3t,"Data2VecTextForSequenceClassification"),c3t.forEach(t),MXo=r(dBe," (Data2VecText model)"),dBe.forEach(t),EXo=i(N),g1=n(N,"LI",{});var cBe=s(g1);i_e=n(cBe,"STRONG",{});var m3t=s(i_e);CXo=r(m3t,"deberta"),m3t.forEach(t),wXo=r(cBe," \u2014 "),VX=n(cBe,"A",{href:!0});var f3t=s(VX);AXo=r(f3t,"DebertaForSequenceClassification"),f3t.forEach(t),LXo=r(cBe," (DeBERTa model)"),cBe.forEach(t),yXo=i(N),h1=n(N,"LI",{});var mBe=s(h1);d_e=n(mBe,"STRONG",{});var g3t=s(d_e);xXo=r(g3t,"deberta-v2"),g3t.forEach(t),$Xo=r(mBe," \u2014 "),XX=n(mBe,"A",{href:!0});var h3t=s(XX);kXo=r(h3t,"DebertaV2ForSequenceClassification"),h3t.forEach(t),SXo=r(mBe," (DeBERTa-v2 model)"),mBe.forEach(t),RXo=i(N),u1=n(N,"LI",{});var fBe=s(u1);c_e=n(fBe,"STRONG",{});var u3t=s(c_e);PXo=r(u3t,"distilbert"),u3t.forEach(t),BXo=r(fBe," \u2014 "),zX=n(fBe,"A",{href:!0});var p3t=s(zX);IXo=r(p3t,"DistilBertForSequenceClassification"),p3t.forEach(t),NXo=r(fBe," (DistilBERT model)"),fBe.forEach(t),qXo=i(N),p1=n(N,"LI",{});var gBe=s(p1);m_e=n(gBe,"STRONG",{});var _3t=s(m_e);jXo=r(_3t,"electra"),_3t.forEach(t),DXo=r(gBe," \u2014 "),WX=n(gBe,"A",{href:!0});var b3t=s(WX);GXo=r(b3t,"ElectraForSequenceClassification"),b3t.forEach(t),OXo=r(gBe," (ELECTRA model)"),gBe.forEach(t),VXo=i(N),_1=n(N,"LI",{});var hBe=s(_1);f_e=n(hBe,"STRONG",{});var v3t=s(f_e);XXo=r(v3t,"flaubert"),v3t.forEach(t),zXo=r(hBe," \u2014 "),QX=n(hBe,"A",{href:!0});var F3t=s(QX);WXo=r(F3t,"FlaubertForSequenceClassification"),F3t.forEach(t),QXo=r(hBe," (FlauBERT model)"),hBe.forEach(t),HXo=i(N),b1=n(N,"LI",{});var uBe=s(b1);g_e=n(uBe,"STRONG",{});var T3t=s(g_e);UXo=r(T3t,"fnet"),T3t.forEach(t),JXo=r(uBe," \u2014 "),HX=n(uBe,"A",{href:!0});var M3t=s(HX);YXo=r(M3t,"FNetForSequenceClassification"),M3t.forEach(t),KXo=r(uBe," (FNet model)"),uBe.forEach(t),ZXo=i(N),v1=n(N,"LI",{});var pBe=s(v1);h_e=n(pBe,"STRONG",{});var E3t=s(h_e);ezo=r(E3t,"funnel"),E3t.forEach(t),ozo=r(pBe," \u2014 "),UX=n(pBe,"A",{href:!0});var C3t=s(UX);rzo=r(C3t,"FunnelForSequenceClassification"),C3t.forEach(t),tzo=r(pBe," (Funnel Transformer model)"),pBe.forEach(t),azo=i(N),F1=n(N,"LI",{});var _Be=s(F1);u_e=n(_Be,"STRONG",{});var w3t=s(u_e);nzo=r(w3t,"gpt2"),w3t.forEach(t),szo=r(_Be," \u2014 "),JX=n(_Be,"A",{href:!0});var A3t=s(JX);lzo=r(A3t,"GPT2ForSequenceClassification"),A3t.forEach(t),izo=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),dzo=i(N),T1=n(N,"LI",{});var bBe=s(T1);p_e=n(bBe,"STRONG",{});var L3t=s(p_e);czo=r(L3t,"gpt_neo"),L3t.forEach(t),mzo=r(bBe," \u2014 "),YX=n(bBe,"A",{href:!0});var y3t=s(YX);fzo=r(y3t,"GPTNeoForSequenceClassification"),y3t.forEach(t),gzo=r(bBe," (GPT Neo model)"),bBe.forEach(t),hzo=i(N),M1=n(N,"LI",{});var vBe=s(M1);__e=n(vBe,"STRONG",{});var x3t=s(__e);uzo=r(x3t,"gptj"),x3t.forEach(t),pzo=r(vBe," \u2014 "),KX=n(vBe,"A",{href:!0});var $3t=s(KX);_zo=r($3t,"GPTJForSequenceClassification"),$3t.forEach(t),bzo=r(vBe," (GPT-J model)"),vBe.forEach(t),vzo=i(N),E1=n(N,"LI",{});var FBe=s(E1);b_e=n(FBe,"STRONG",{});var k3t=s(b_e);Fzo=r(k3t,"ibert"),k3t.forEach(t),Tzo=r(FBe," \u2014 "),ZX=n(FBe,"A",{href:!0});var S3t=s(ZX);Mzo=r(S3t,"IBertForSequenceClassification"),S3t.forEach(t),Ezo=r(FBe," (I-BERT model)"),FBe.forEach(t),Czo=i(N),C1=n(N,"LI",{});var TBe=s(C1);v_e=n(TBe,"STRONG",{});var R3t=s(v_e);wzo=r(R3t,"layoutlm"),R3t.forEach(t),Azo=r(TBe," \u2014 "),ez=n(TBe,"A",{href:!0});var P3t=s(ez);Lzo=r(P3t,"LayoutLMForSequenceClassification"),P3t.forEach(t),yzo=r(TBe," (LayoutLM model)"),TBe.forEach(t),xzo=i(N),w1=n(N,"LI",{});var MBe=s(w1);F_e=n(MBe,"STRONG",{});var B3t=s(F_e);$zo=r(B3t,"layoutlmv2"),B3t.forEach(t),kzo=r(MBe," \u2014 "),oz=n(MBe,"A",{href:!0});var I3t=s(oz);Szo=r(I3t,"LayoutLMv2ForSequenceClassification"),I3t.forEach(t),Rzo=r(MBe," (LayoutLMv2 model)"),MBe.forEach(t),Pzo=i(N),A1=n(N,"LI",{});var EBe=s(A1);T_e=n(EBe,"STRONG",{});var N3t=s(T_e);Bzo=r(N3t,"layoutlmv3"),N3t.forEach(t),Izo=r(EBe," \u2014 "),rz=n(EBe,"A",{href:!0});var q3t=s(rz);Nzo=r(q3t,"LayoutLMv3ForSequenceClassification"),q3t.forEach(t),qzo=r(EBe," (LayoutLMv3 model)"),EBe.forEach(t),jzo=i(N),L1=n(N,"LI",{});var CBe=s(L1);M_e=n(CBe,"STRONG",{});var j3t=s(M_e);Dzo=r(j3t,"led"),j3t.forEach(t),Gzo=r(CBe," \u2014 "),tz=n(CBe,"A",{href:!0});var D3t=s(tz);Ozo=r(D3t,"LEDForSequenceClassification"),D3t.forEach(t),Vzo=r(CBe," (LED model)"),CBe.forEach(t),Xzo=i(N),y1=n(N,"LI",{});var wBe=s(y1);E_e=n(wBe,"STRONG",{});var G3t=s(E_e);zzo=r(G3t,"longformer"),G3t.forEach(t),Wzo=r(wBe," \u2014 "),az=n(wBe,"A",{href:!0});var O3t=s(az);Qzo=r(O3t,"LongformerForSequenceClassification"),O3t.forEach(t),Hzo=r(wBe," (Longformer model)"),wBe.forEach(t),Uzo=i(N),x1=n(N,"LI",{});var ABe=s(x1);C_e=n(ABe,"STRONG",{});var V3t=s(C_e);Jzo=r(V3t,"luke"),V3t.forEach(t),Yzo=r(ABe," \u2014 "),nz=n(ABe,"A",{href:!0});var X3t=s(nz);Kzo=r(X3t,"LukeForSequenceClassification"),X3t.forEach(t),Zzo=r(ABe," (LUKE model)"),ABe.forEach(t),eWo=i(N),$1=n(N,"LI",{});var LBe=s($1);w_e=n(LBe,"STRONG",{});var z3t=s(w_e);oWo=r(z3t,"mbart"),z3t.forEach(t),rWo=r(LBe," \u2014 "),sz=n(LBe,"A",{href:!0});var W3t=s(sz);tWo=r(W3t,"MBartForSequenceClassification"),W3t.forEach(t),aWo=r(LBe," (mBART model)"),LBe.forEach(t),nWo=i(N),k1=n(N,"LI",{});var yBe=s(k1);A_e=n(yBe,"STRONG",{});var Q3t=s(A_e);sWo=r(Q3t,"megatron-bert"),Q3t.forEach(t),lWo=r(yBe," \u2014 "),lz=n(yBe,"A",{href:!0});var H3t=s(lz);iWo=r(H3t,"MegatronBertForSequenceClassification"),H3t.forEach(t),dWo=r(yBe," (Megatron-BERT model)"),yBe.forEach(t),cWo=i(N),S1=n(N,"LI",{});var xBe=s(S1);L_e=n(xBe,"STRONG",{});var U3t=s(L_e);mWo=r(U3t,"mobilebert"),U3t.forEach(t),fWo=r(xBe," \u2014 "),iz=n(xBe,"A",{href:!0});var J3t=s(iz);gWo=r(J3t,"MobileBertForSequenceClassification"),J3t.forEach(t),hWo=r(xBe," (MobileBERT model)"),xBe.forEach(t),uWo=i(N),R1=n(N,"LI",{});var $Be=s(R1);y_e=n($Be,"STRONG",{});var Y3t=s(y_e);pWo=r(Y3t,"mpnet"),Y3t.forEach(t),_Wo=r($Be," \u2014 "),dz=n($Be,"A",{href:!0});var K3t=s(dz);bWo=r(K3t,"MPNetForSequenceClassification"),K3t.forEach(t),vWo=r($Be," (MPNet model)"),$Be.forEach(t),FWo=i(N),P1=n(N,"LI",{});var kBe=s(P1);x_e=n(kBe,"STRONG",{});var Z3t=s(x_e);TWo=r(Z3t,"mvp"),Z3t.forEach(t),MWo=r(kBe," \u2014 "),cz=n(kBe,"A",{href:!0});var e0t=s(cz);EWo=r(e0t,"MvpForSequenceClassification"),e0t.forEach(t),CWo=r(kBe," (MVP model)"),kBe.forEach(t),wWo=i(N),B1=n(N,"LI",{});var SBe=s(B1);$_e=n(SBe,"STRONG",{});var o0t=s($_e);AWo=r(o0t,"nezha"),o0t.forEach(t),LWo=r(SBe," \u2014 "),mz=n(SBe,"A",{href:!0});var r0t=s(mz);yWo=r(r0t,"NezhaForSequenceClassification"),r0t.forEach(t),xWo=r(SBe," (Nezha model)"),SBe.forEach(t),$Wo=i(N),I1=n(N,"LI",{});var RBe=s(I1);k_e=n(RBe,"STRONG",{});var t0t=s(k_e);kWo=r(t0t,"nystromformer"),t0t.forEach(t),SWo=r(RBe," \u2014 "),fz=n(RBe,"A",{href:!0});var a0t=s(fz);RWo=r(a0t,"NystromformerForSequenceClassification"),a0t.forEach(t),PWo=r(RBe," (Nystr\xF6mformer model)"),RBe.forEach(t),BWo=i(N),N1=n(N,"LI",{});var PBe=s(N1);S_e=n(PBe,"STRONG",{});var n0t=s(S_e);IWo=r(n0t,"openai-gpt"),n0t.forEach(t),NWo=r(PBe," \u2014 "),gz=n(PBe,"A",{href:!0});var s0t=s(gz);qWo=r(s0t,"OpenAIGPTForSequenceClassification"),s0t.forEach(t),jWo=r(PBe," (OpenAI GPT model)"),PBe.forEach(t),DWo=i(N),q1=n(N,"LI",{});var BBe=s(q1);R_e=n(BBe,"STRONG",{});var l0t=s(R_e);GWo=r(l0t,"opt"),l0t.forEach(t),OWo=r(BBe," \u2014 "),hz=n(BBe,"A",{href:!0});var i0t=s(hz);VWo=r(i0t,"OPTForSequenceClassification"),i0t.forEach(t),XWo=r(BBe," (OPT model)"),BBe.forEach(t),zWo=i(N),j1=n(N,"LI",{});var IBe=s(j1);P_e=n(IBe,"STRONG",{});var d0t=s(P_e);WWo=r(d0t,"perceiver"),d0t.forEach(t),QWo=r(IBe," \u2014 "),uz=n(IBe,"A",{href:!0});var c0t=s(uz);HWo=r(c0t,"PerceiverForSequenceClassification"),c0t.forEach(t),UWo=r(IBe," (Perceiver model)"),IBe.forEach(t),JWo=i(N),D1=n(N,"LI",{});var NBe=s(D1);B_e=n(NBe,"STRONG",{});var m0t=s(B_e);YWo=r(m0t,"plbart"),m0t.forEach(t),KWo=r(NBe," \u2014 "),pz=n(NBe,"A",{href:!0});var f0t=s(pz);ZWo=r(f0t,"PLBartForSequenceClassification"),f0t.forEach(t),eQo=r(NBe," (PLBart model)"),NBe.forEach(t),oQo=i(N),G1=n(N,"LI",{});var qBe=s(G1);I_e=n(qBe,"STRONG",{});var g0t=s(I_e);rQo=r(g0t,"qdqbert"),g0t.forEach(t),tQo=r(qBe," \u2014 "),_z=n(qBe,"A",{href:!0});var h0t=s(_z);aQo=r(h0t,"QDQBertForSequenceClassification"),h0t.forEach(t),nQo=r(qBe," (QDQBert model)"),qBe.forEach(t),sQo=i(N),O1=n(N,"LI",{});var jBe=s(O1);N_e=n(jBe,"STRONG",{});var u0t=s(N_e);lQo=r(u0t,"reformer"),u0t.forEach(t),iQo=r(jBe," \u2014 "),bz=n(jBe,"A",{href:!0});var p0t=s(bz);dQo=r(p0t,"ReformerForSequenceClassification"),p0t.forEach(t),cQo=r(jBe," (Reformer model)"),jBe.forEach(t),mQo=i(N),V1=n(N,"LI",{});var DBe=s(V1);q_e=n(DBe,"STRONG",{});var _0t=s(q_e);fQo=r(_0t,"rembert"),_0t.forEach(t),gQo=r(DBe," \u2014 "),vz=n(DBe,"A",{href:!0});var b0t=s(vz);hQo=r(b0t,"RemBertForSequenceClassification"),b0t.forEach(t),uQo=r(DBe," (RemBERT model)"),DBe.forEach(t),pQo=i(N),X1=n(N,"LI",{});var GBe=s(X1);j_e=n(GBe,"STRONG",{});var v0t=s(j_e);_Qo=r(v0t,"roberta"),v0t.forEach(t),bQo=r(GBe," \u2014 "),Fz=n(GBe,"A",{href:!0});var F0t=s(Fz);vQo=r(F0t,"RobertaForSequenceClassification"),F0t.forEach(t),FQo=r(GBe," (RoBERTa model)"),GBe.forEach(t),TQo=i(N),z1=n(N,"LI",{});var OBe=s(z1);D_e=n(OBe,"STRONG",{});var T0t=s(D_e);MQo=r(T0t,"roformer"),T0t.forEach(t),EQo=r(OBe," \u2014 "),Tz=n(OBe,"A",{href:!0});var M0t=s(Tz);CQo=r(M0t,"RoFormerForSequenceClassification"),M0t.forEach(t),wQo=r(OBe," (RoFormer model)"),OBe.forEach(t),AQo=i(N),W1=n(N,"LI",{});var VBe=s(W1);G_e=n(VBe,"STRONG",{});var E0t=s(G_e);LQo=r(E0t,"squeezebert"),E0t.forEach(t),yQo=r(VBe," \u2014 "),Mz=n(VBe,"A",{href:!0});var C0t=s(Mz);xQo=r(C0t,"SqueezeBertForSequenceClassification"),C0t.forEach(t),$Qo=r(VBe," (SqueezeBERT model)"),VBe.forEach(t),kQo=i(N),Q1=n(N,"LI",{});var XBe=s(Q1);O_e=n(XBe,"STRONG",{});var w0t=s(O_e);SQo=r(w0t,"tapas"),w0t.forEach(t),RQo=r(XBe," \u2014 "),Ez=n(XBe,"A",{href:!0});var A0t=s(Ez);PQo=r(A0t,"TapasForSequenceClassification"),A0t.forEach(t),BQo=r(XBe," (TAPAS model)"),XBe.forEach(t),IQo=i(N),H1=n(N,"LI",{});var zBe=s(H1);V_e=n(zBe,"STRONG",{});var L0t=s(V_e);NQo=r(L0t,"transfo-xl"),L0t.forEach(t),qQo=r(zBe," \u2014 "),Cz=n(zBe,"A",{href:!0});var y0t=s(Cz);jQo=r(y0t,"TransfoXLForSequenceClassification"),y0t.forEach(t),DQo=r(zBe," (Transformer-XL model)"),zBe.forEach(t),GQo=i(N),U1=n(N,"LI",{});var WBe=s(U1);X_e=n(WBe,"STRONG",{});var x0t=s(X_e);OQo=r(x0t,"xlm"),x0t.forEach(t),VQo=r(WBe," \u2014 "),wz=n(WBe,"A",{href:!0});var $0t=s(wz);XQo=r($0t,"XLMForSequenceClassification"),$0t.forEach(t),zQo=r(WBe," (XLM model)"),WBe.forEach(t),WQo=i(N),J1=n(N,"LI",{});var QBe=s(J1);z_e=n(QBe,"STRONG",{});var k0t=s(z_e);QQo=r(k0t,"xlm-roberta"),k0t.forEach(t),HQo=r(QBe," \u2014 "),Az=n(QBe,"A",{href:!0});var S0t=s(Az);UQo=r(S0t,"XLMRobertaForSequenceClassification"),S0t.forEach(t),JQo=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),YQo=i(N),Y1=n(N,"LI",{});var HBe=s(Y1);W_e=n(HBe,"STRONG",{});var R0t=s(W_e);KQo=r(R0t,"xlm-roberta-xl"),R0t.forEach(t),ZQo=r(HBe," \u2014 "),Lz=n(HBe,"A",{href:!0});var P0t=s(Lz);eHo=r(P0t,"XLMRobertaXLForSequenceClassification"),P0t.forEach(t),oHo=r(HBe," (XLM-RoBERTa-XL model)"),HBe.forEach(t),rHo=i(N),K1=n(N,"LI",{});var UBe=s(K1);Q_e=n(UBe,"STRONG",{});var B0t=s(Q_e);tHo=r(B0t,"xlnet"),B0t.forEach(t),aHo=r(UBe," \u2014 "),yz=n(UBe,"A",{href:!0});var I0t=s(yz);nHo=r(I0t,"XLNetForSequenceClassification"),I0t.forEach(t),sHo=r(UBe," (XLNet model)"),UBe.forEach(t),lHo=i(N),Z1=n(N,"LI",{});var JBe=s(Z1);H_e=n(JBe,"STRONG",{});var N0t=s(H_e);iHo=r(N0t,"yoso"),N0t.forEach(t),dHo=r(JBe," \u2014 "),xz=n(JBe,"A",{href:!0});var q0t=s(xz);cHo=r(q0t,"YosoForSequenceClassification"),q0t.forEach(t),mHo=r(JBe," (YOSO model)"),JBe.forEach(t),N.forEach(t),fHo=i(fa),eF=n(fa,"P",{});var YBe=s(eF);gHo=r(YBe,"The model is set in evaluation mode by default using "),U_e=n(YBe,"CODE",{});var j0t=s(U_e);hHo=r(j0t,"model.eval()"),j0t.forEach(t),uHo=r(YBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(YBe,"CODE",{});var D0t=s(J_e);pHo=r(D0t,"model.train()"),D0t.forEach(t),YBe.forEach(t),_Ho=i(fa),T(oF.$$.fragment,fa),fa.forEach(t),cl.forEach(t),eWe=i(m),id=n(m,"H2",{class:!0});var sHe=s(id);rF=n(sHe,"A",{id:!0,class:!0,href:!0});var G0t=s(rF);Y_e=n(G0t,"SPAN",{});var O0t=s(Y_e);T(y8.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),bHo=i(sHe),K_e=n(sHe,"SPAN",{});var V0t=s(K_e);vHo=r(V0t,"AutoModelForMultipleChoice"),V0t.forEach(t),sHe.forEach(t),oWe=i(m),No=n(m,"DIV",{class:!0});var ml=s(No);T(x8.$$.fragment,ml),FHo=i(ml),dd=n(ml,"P",{});var Nte=s(dd);THo=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$z=n(Nte,"A",{href:!0});var X0t=s($z);MHo=r(X0t,"from_pretrained()"),X0t.forEach(t),EHo=r(Nte," class method or the "),kz=n(Nte,"A",{href:!0});var z0t=s(kz);CHo=r(z0t,"from_config()"),z0t.forEach(t),wHo=r(Nte,` class
method.`),Nte.forEach(t),AHo=i(ml),$8=n(ml,"P",{});var lHe=s($8);LHo=r(lHe,"This class cannot be instantiated directly using "),Z_e=n(lHe,"CODE",{});var W0t=s(Z_e);yHo=r(W0t,"__init__()"),W0t.forEach(t),xHo=r(lHe," (throws an error)."),lHe.forEach(t),$Ho=i(ml),ht=n(ml,"DIV",{class:!0});var G7=s(ht);T(k8.$$.fragment,G7),kHo=i(G7),e2e=n(G7,"P",{});var Q0t=s(e2e);SHo=r(Q0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q0t.forEach(t),RHo=i(G7),cd=n(G7,"P",{});var qte=s(cd);PHo=r(qte,`Note:
Loading a model from its configuration file does `),o2e=n(qte,"STRONG",{});var H0t=s(o2e);BHo=r(H0t,"not"),H0t.forEach(t),IHo=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(qte,"A",{href:!0});var U0t=s(Sz);NHo=r(U0t,"from_pretrained()"),U0t.forEach(t),qHo=r(qte," to load the model weights."),qte.forEach(t),jHo=i(G7),T(tF.$$.fragment,G7),G7.forEach(t),DHo=i(ml),to=n(ml,"DIV",{class:!0});var ga=s(to);T(S8.$$.fragment,ga),GHo=i(ga),r2e=n(ga,"P",{});var J0t=s(r2e);OHo=r(J0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J0t.forEach(t),VHo=i(ga),Oa=n(ga,"P",{});var O7=s(Oa);XHo=r(O7,"The model class to instantiate is selected based on the "),t2e=n(O7,"CODE",{});var Y0t=s(t2e);zHo=r(Y0t,"model_type"),Y0t.forEach(t),WHo=r(O7,` property of the config object (either
passed as an argument or loaded from `),a2e=n(O7,"CODE",{});var K0t=s(a2e);QHo=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),HHo=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(O7,"CODE",{});var Z0t=s(n2e);UHo=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),JHo=r(O7,":"),O7.forEach(t),YHo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);aF=n(ee,"LI",{});var KBe=s(aF);s2e=n(KBe,"STRONG",{});var ewt=s(s2e);KHo=r(ewt,"albert"),ewt.forEach(t),ZHo=r(KBe," \u2014 "),Rz=n(KBe,"A",{href:!0});var owt=s(Rz);eUo=r(owt,"AlbertForMultipleChoice"),owt.forEach(t),oUo=r(KBe," (ALBERT model)"),KBe.forEach(t),rUo=i(ee),nF=n(ee,"LI",{});var ZBe=s(nF);l2e=n(ZBe,"STRONG",{});var rwt=s(l2e);tUo=r(rwt,"bert"),rwt.forEach(t),aUo=r(ZBe," \u2014 "),Pz=n(ZBe,"A",{href:!0});var twt=s(Pz);nUo=r(twt,"BertForMultipleChoice"),twt.forEach(t),sUo=r(ZBe," (BERT model)"),ZBe.forEach(t),lUo=i(ee),sF=n(ee,"LI",{});var eIe=s(sF);i2e=n(eIe,"STRONG",{});var awt=s(i2e);iUo=r(awt,"big_bird"),awt.forEach(t),dUo=r(eIe," \u2014 "),Bz=n(eIe,"A",{href:!0});var nwt=s(Bz);cUo=r(nwt,"BigBirdForMultipleChoice"),nwt.forEach(t),mUo=r(eIe," (BigBird model)"),eIe.forEach(t),fUo=i(ee),lF=n(ee,"LI",{});var oIe=s(lF);d2e=n(oIe,"STRONG",{});var swt=s(d2e);gUo=r(swt,"camembert"),swt.forEach(t),hUo=r(oIe," \u2014 "),Iz=n(oIe,"A",{href:!0});var lwt=s(Iz);uUo=r(lwt,"CamembertForMultipleChoice"),lwt.forEach(t),pUo=r(oIe," (CamemBERT model)"),oIe.forEach(t),_Uo=i(ee),iF=n(ee,"LI",{});var rIe=s(iF);c2e=n(rIe,"STRONG",{});var iwt=s(c2e);bUo=r(iwt,"canine"),iwt.forEach(t),vUo=r(rIe," \u2014 "),Nz=n(rIe,"A",{href:!0});var dwt=s(Nz);FUo=r(dwt,"CanineForMultipleChoice"),dwt.forEach(t),TUo=r(rIe," (CANINE model)"),rIe.forEach(t),MUo=i(ee),dF=n(ee,"LI",{});var tIe=s(dF);m2e=n(tIe,"STRONG",{});var cwt=s(m2e);EUo=r(cwt,"convbert"),cwt.forEach(t),CUo=r(tIe," \u2014 "),qz=n(tIe,"A",{href:!0});var mwt=s(qz);wUo=r(mwt,"ConvBertForMultipleChoice"),mwt.forEach(t),AUo=r(tIe," (ConvBERT model)"),tIe.forEach(t),LUo=i(ee),cF=n(ee,"LI",{});var aIe=s(cF);f2e=n(aIe,"STRONG",{});var fwt=s(f2e);yUo=r(fwt,"data2vec-text"),fwt.forEach(t),xUo=r(aIe," \u2014 "),jz=n(aIe,"A",{href:!0});var gwt=s(jz);$Uo=r(gwt,"Data2VecTextForMultipleChoice"),gwt.forEach(t),kUo=r(aIe," (Data2VecText model)"),aIe.forEach(t),SUo=i(ee),mF=n(ee,"LI",{});var nIe=s(mF);g2e=n(nIe,"STRONG",{});var hwt=s(g2e);RUo=r(hwt,"deberta-v2"),hwt.forEach(t),PUo=r(nIe," \u2014 "),Dz=n(nIe,"A",{href:!0});var uwt=s(Dz);BUo=r(uwt,"DebertaV2ForMultipleChoice"),uwt.forEach(t),IUo=r(nIe," (DeBERTa-v2 model)"),nIe.forEach(t),NUo=i(ee),fF=n(ee,"LI",{});var sIe=s(fF);h2e=n(sIe,"STRONG",{});var pwt=s(h2e);qUo=r(pwt,"distilbert"),pwt.forEach(t),jUo=r(sIe," \u2014 "),Gz=n(sIe,"A",{href:!0});var _wt=s(Gz);DUo=r(_wt,"DistilBertForMultipleChoice"),_wt.forEach(t),GUo=r(sIe," (DistilBERT model)"),sIe.forEach(t),OUo=i(ee),gF=n(ee,"LI",{});var lIe=s(gF);u2e=n(lIe,"STRONG",{});var bwt=s(u2e);VUo=r(bwt,"electra"),bwt.forEach(t),XUo=r(lIe," \u2014 "),Oz=n(lIe,"A",{href:!0});var vwt=s(Oz);zUo=r(vwt,"ElectraForMultipleChoice"),vwt.forEach(t),WUo=r(lIe," (ELECTRA model)"),lIe.forEach(t),QUo=i(ee),hF=n(ee,"LI",{});var iIe=s(hF);p2e=n(iIe,"STRONG",{});var Fwt=s(p2e);HUo=r(Fwt,"flaubert"),Fwt.forEach(t),UUo=r(iIe," \u2014 "),Vz=n(iIe,"A",{href:!0});var Twt=s(Vz);JUo=r(Twt,"FlaubertForMultipleChoice"),Twt.forEach(t),YUo=r(iIe," (FlauBERT model)"),iIe.forEach(t),KUo=i(ee),uF=n(ee,"LI",{});var dIe=s(uF);_2e=n(dIe,"STRONG",{});var Mwt=s(_2e);ZUo=r(Mwt,"fnet"),Mwt.forEach(t),eJo=r(dIe," \u2014 "),Xz=n(dIe,"A",{href:!0});var Ewt=s(Xz);oJo=r(Ewt,"FNetForMultipleChoice"),Ewt.forEach(t),rJo=r(dIe," (FNet model)"),dIe.forEach(t),tJo=i(ee),pF=n(ee,"LI",{});var cIe=s(pF);b2e=n(cIe,"STRONG",{});var Cwt=s(b2e);aJo=r(Cwt,"funnel"),Cwt.forEach(t),nJo=r(cIe," \u2014 "),zz=n(cIe,"A",{href:!0});var wwt=s(zz);sJo=r(wwt,"FunnelForMultipleChoice"),wwt.forEach(t),lJo=r(cIe," (Funnel Transformer model)"),cIe.forEach(t),iJo=i(ee),_F=n(ee,"LI",{});var mIe=s(_F);v2e=n(mIe,"STRONG",{});var Awt=s(v2e);dJo=r(Awt,"ibert"),Awt.forEach(t),cJo=r(mIe," \u2014 "),Wz=n(mIe,"A",{href:!0});var Lwt=s(Wz);mJo=r(Lwt,"IBertForMultipleChoice"),Lwt.forEach(t),fJo=r(mIe," (I-BERT model)"),mIe.forEach(t),gJo=i(ee),bF=n(ee,"LI",{});var fIe=s(bF);F2e=n(fIe,"STRONG",{});var ywt=s(F2e);hJo=r(ywt,"longformer"),ywt.forEach(t),uJo=r(fIe," \u2014 "),Qz=n(fIe,"A",{href:!0});var xwt=s(Qz);pJo=r(xwt,"LongformerForMultipleChoice"),xwt.forEach(t),_Jo=r(fIe," (Longformer model)"),fIe.forEach(t),bJo=i(ee),vF=n(ee,"LI",{});var gIe=s(vF);T2e=n(gIe,"STRONG",{});var $wt=s(T2e);vJo=r($wt,"luke"),$wt.forEach(t),FJo=r(gIe," \u2014 "),Hz=n(gIe,"A",{href:!0});var kwt=s(Hz);TJo=r(kwt,"LukeForMultipleChoice"),kwt.forEach(t),MJo=r(gIe," (LUKE model)"),gIe.forEach(t),EJo=i(ee),FF=n(ee,"LI",{});var hIe=s(FF);M2e=n(hIe,"STRONG",{});var Swt=s(M2e);CJo=r(Swt,"megatron-bert"),Swt.forEach(t),wJo=r(hIe," \u2014 "),Uz=n(hIe,"A",{href:!0});var Rwt=s(Uz);AJo=r(Rwt,"MegatronBertForMultipleChoice"),Rwt.forEach(t),LJo=r(hIe," (Megatron-BERT model)"),hIe.forEach(t),yJo=i(ee),TF=n(ee,"LI",{});var uIe=s(TF);E2e=n(uIe,"STRONG",{});var Pwt=s(E2e);xJo=r(Pwt,"mobilebert"),Pwt.forEach(t),$Jo=r(uIe," \u2014 "),Jz=n(uIe,"A",{href:!0});var Bwt=s(Jz);kJo=r(Bwt,"MobileBertForMultipleChoice"),Bwt.forEach(t),SJo=r(uIe," (MobileBERT model)"),uIe.forEach(t),RJo=i(ee),MF=n(ee,"LI",{});var pIe=s(MF);C2e=n(pIe,"STRONG",{});var Iwt=s(C2e);PJo=r(Iwt,"mpnet"),Iwt.forEach(t),BJo=r(pIe," \u2014 "),Yz=n(pIe,"A",{href:!0});var Nwt=s(Yz);IJo=r(Nwt,"MPNetForMultipleChoice"),Nwt.forEach(t),NJo=r(pIe," (MPNet model)"),pIe.forEach(t),qJo=i(ee),EF=n(ee,"LI",{});var _Ie=s(EF);w2e=n(_Ie,"STRONG",{});var qwt=s(w2e);jJo=r(qwt,"nezha"),qwt.forEach(t),DJo=r(_Ie," \u2014 "),Kz=n(_Ie,"A",{href:!0});var jwt=s(Kz);GJo=r(jwt,"NezhaForMultipleChoice"),jwt.forEach(t),OJo=r(_Ie," (Nezha model)"),_Ie.forEach(t),VJo=i(ee),CF=n(ee,"LI",{});var bIe=s(CF);A2e=n(bIe,"STRONG",{});var Dwt=s(A2e);XJo=r(Dwt,"nystromformer"),Dwt.forEach(t),zJo=r(bIe," \u2014 "),Zz=n(bIe,"A",{href:!0});var Gwt=s(Zz);WJo=r(Gwt,"NystromformerForMultipleChoice"),Gwt.forEach(t),QJo=r(bIe," (Nystr\xF6mformer model)"),bIe.forEach(t),HJo=i(ee),wF=n(ee,"LI",{});var vIe=s(wF);L2e=n(vIe,"STRONG",{});var Owt=s(L2e);UJo=r(Owt,"qdqbert"),Owt.forEach(t),JJo=r(vIe," \u2014 "),eW=n(vIe,"A",{href:!0});var Vwt=s(eW);YJo=r(Vwt,"QDQBertForMultipleChoice"),Vwt.forEach(t),KJo=r(vIe," (QDQBert model)"),vIe.forEach(t),ZJo=i(ee),AF=n(ee,"LI",{});var FIe=s(AF);y2e=n(FIe,"STRONG",{});var Xwt=s(y2e);eYo=r(Xwt,"rembert"),Xwt.forEach(t),oYo=r(FIe," \u2014 "),oW=n(FIe,"A",{href:!0});var zwt=s(oW);rYo=r(zwt,"RemBertForMultipleChoice"),zwt.forEach(t),tYo=r(FIe," (RemBERT model)"),FIe.forEach(t),aYo=i(ee),LF=n(ee,"LI",{});var TIe=s(LF);x2e=n(TIe,"STRONG",{});var Wwt=s(x2e);nYo=r(Wwt,"roberta"),Wwt.forEach(t),sYo=r(TIe," \u2014 "),rW=n(TIe,"A",{href:!0});var Qwt=s(rW);lYo=r(Qwt,"RobertaForMultipleChoice"),Qwt.forEach(t),iYo=r(TIe," (RoBERTa model)"),TIe.forEach(t),dYo=i(ee),yF=n(ee,"LI",{});var MIe=s(yF);$2e=n(MIe,"STRONG",{});var Hwt=s($2e);cYo=r(Hwt,"roformer"),Hwt.forEach(t),mYo=r(MIe," \u2014 "),tW=n(MIe,"A",{href:!0});var Uwt=s(tW);fYo=r(Uwt,"RoFormerForMultipleChoice"),Uwt.forEach(t),gYo=r(MIe," (RoFormer model)"),MIe.forEach(t),hYo=i(ee),xF=n(ee,"LI",{});var EIe=s(xF);k2e=n(EIe,"STRONG",{});var Jwt=s(k2e);uYo=r(Jwt,"squeezebert"),Jwt.forEach(t),pYo=r(EIe," \u2014 "),aW=n(EIe,"A",{href:!0});var Ywt=s(aW);_Yo=r(Ywt,"SqueezeBertForMultipleChoice"),Ywt.forEach(t),bYo=r(EIe," (SqueezeBERT model)"),EIe.forEach(t),vYo=i(ee),$F=n(ee,"LI",{});var CIe=s($F);S2e=n(CIe,"STRONG",{});var Kwt=s(S2e);FYo=r(Kwt,"xlm"),Kwt.forEach(t),TYo=r(CIe," \u2014 "),nW=n(CIe,"A",{href:!0});var Zwt=s(nW);MYo=r(Zwt,"XLMForMultipleChoice"),Zwt.forEach(t),EYo=r(CIe," (XLM model)"),CIe.forEach(t),CYo=i(ee),kF=n(ee,"LI",{});var wIe=s(kF);R2e=n(wIe,"STRONG",{});var e6t=s(R2e);wYo=r(e6t,"xlm-roberta"),e6t.forEach(t),AYo=r(wIe," \u2014 "),sW=n(wIe,"A",{href:!0});var o6t=s(sW);LYo=r(o6t,"XLMRobertaForMultipleChoice"),o6t.forEach(t),yYo=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),xYo=i(ee),SF=n(ee,"LI",{});var AIe=s(SF);P2e=n(AIe,"STRONG",{});var r6t=s(P2e);$Yo=r(r6t,"xlm-roberta-xl"),r6t.forEach(t),kYo=r(AIe," \u2014 "),lW=n(AIe,"A",{href:!0});var t6t=s(lW);SYo=r(t6t,"XLMRobertaXLForMultipleChoice"),t6t.forEach(t),RYo=r(AIe," (XLM-RoBERTa-XL model)"),AIe.forEach(t),PYo=i(ee),RF=n(ee,"LI",{});var LIe=s(RF);B2e=n(LIe,"STRONG",{});var a6t=s(B2e);BYo=r(a6t,"xlnet"),a6t.forEach(t),IYo=r(LIe," \u2014 "),iW=n(LIe,"A",{href:!0});var n6t=s(iW);NYo=r(n6t,"XLNetForMultipleChoice"),n6t.forEach(t),qYo=r(LIe," (XLNet model)"),LIe.forEach(t),jYo=i(ee),PF=n(ee,"LI",{});var yIe=s(PF);I2e=n(yIe,"STRONG",{});var s6t=s(I2e);DYo=r(s6t,"yoso"),s6t.forEach(t),GYo=r(yIe," \u2014 "),dW=n(yIe,"A",{href:!0});var l6t=s(dW);OYo=r(l6t,"YosoForMultipleChoice"),l6t.forEach(t),VYo=r(yIe," (YOSO model)"),yIe.forEach(t),ee.forEach(t),XYo=i(ga),BF=n(ga,"P",{});var xIe=s(BF);zYo=r(xIe,"The model is set in evaluation mode by default using "),N2e=n(xIe,"CODE",{});var i6t=s(N2e);WYo=r(i6t,"model.eval()"),i6t.forEach(t),QYo=r(xIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(xIe,"CODE",{});var d6t=s(q2e);HYo=r(d6t,"model.train()"),d6t.forEach(t),xIe.forEach(t),UYo=i(ga),T(IF.$$.fragment,ga),ga.forEach(t),ml.forEach(t),rWe=i(m),md=n(m,"H2",{class:!0});var iHe=s(md);NF=n(iHe,"A",{id:!0,class:!0,href:!0});var c6t=s(NF);j2e=n(c6t,"SPAN",{});var m6t=s(j2e);T(R8.$$.fragment,m6t),m6t.forEach(t),c6t.forEach(t),JYo=i(iHe),D2e=n(iHe,"SPAN",{});var f6t=s(D2e);YYo=r(f6t,"AutoModelForNextSentencePrediction"),f6t.forEach(t),iHe.forEach(t),tWe=i(m),qo=n(m,"DIV",{class:!0});var fl=s(qo);T(P8.$$.fragment,fl),KYo=i(fl),fd=n(fl,"P",{});var jte=s(fd);ZYo=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cW=n(jte,"A",{href:!0});var g6t=s(cW);eKo=r(g6t,"from_pretrained()"),g6t.forEach(t),oKo=r(jte," class method or the "),mW=n(jte,"A",{href:!0});var h6t=s(mW);rKo=r(h6t,"from_config()"),h6t.forEach(t),tKo=r(jte,` class
method.`),jte.forEach(t),aKo=i(fl),B8=n(fl,"P",{});var dHe=s(B8);nKo=r(dHe,"This class cannot be instantiated directly using "),G2e=n(dHe,"CODE",{});var u6t=s(G2e);sKo=r(u6t,"__init__()"),u6t.forEach(t),lKo=r(dHe," (throws an error)."),dHe.forEach(t),iKo=i(fl),ut=n(fl,"DIV",{class:!0});var V7=s(ut);T(I8.$$.fragment,V7),dKo=i(V7),O2e=n(V7,"P",{});var p6t=s(O2e);cKo=r(p6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p6t.forEach(t),mKo=i(V7),gd=n(V7,"P",{});var Dte=s(gd);fKo=r(Dte,`Note:
Loading a model from its configuration file does `),V2e=n(Dte,"STRONG",{});var _6t=s(V2e);gKo=r(_6t,"not"),_6t.forEach(t),hKo=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(Dte,"A",{href:!0});var b6t=s(fW);uKo=r(b6t,"from_pretrained()"),b6t.forEach(t),pKo=r(Dte," to load the model weights."),Dte.forEach(t),_Ko=i(V7),T(qF.$$.fragment,V7),V7.forEach(t),bKo=i(fl),ao=n(fl,"DIV",{class:!0});var ha=s(ao);T(N8.$$.fragment,ha),vKo=i(ha),X2e=n(ha,"P",{});var v6t=s(X2e);FKo=r(v6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v6t.forEach(t),TKo=i(ha),Va=n(ha,"P",{});var X7=s(Va);MKo=r(X7,"The model class to instantiate is selected based on the "),z2e=n(X7,"CODE",{});var F6t=s(z2e);EKo=r(F6t,"model_type"),F6t.forEach(t),CKo=r(X7,` property of the config object (either
passed as an argument or loaded from `),W2e=n(X7,"CODE",{});var T6t=s(W2e);wKo=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),AKo=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(X7,"CODE",{});var M6t=s(Q2e);LKo=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),yKo=r(X7,":"),X7.forEach(t),xKo=i(ha),jo=n(ha,"UL",{});var ua=s(jo);jF=n(ua,"LI",{});var $Ie=s(jF);H2e=n($Ie,"STRONG",{});var E6t=s(H2e);$Ko=r(E6t,"bert"),E6t.forEach(t),kKo=r($Ie," \u2014 "),gW=n($Ie,"A",{href:!0});var C6t=s(gW);SKo=r(C6t,"BertForNextSentencePrediction"),C6t.forEach(t),RKo=r($Ie," (BERT model)"),$Ie.forEach(t),PKo=i(ua),DF=n(ua,"LI",{});var kIe=s(DF);U2e=n(kIe,"STRONG",{});var w6t=s(U2e);BKo=r(w6t,"fnet"),w6t.forEach(t),IKo=r(kIe," \u2014 "),hW=n(kIe,"A",{href:!0});var A6t=s(hW);NKo=r(A6t,"FNetForNextSentencePrediction"),A6t.forEach(t),qKo=r(kIe," (FNet model)"),kIe.forEach(t),jKo=i(ua),GF=n(ua,"LI",{});var SIe=s(GF);J2e=n(SIe,"STRONG",{});var L6t=s(J2e);DKo=r(L6t,"megatron-bert"),L6t.forEach(t),GKo=r(SIe," \u2014 "),uW=n(SIe,"A",{href:!0});var y6t=s(uW);OKo=r(y6t,"MegatronBertForNextSentencePrediction"),y6t.forEach(t),VKo=r(SIe," (Megatron-BERT model)"),SIe.forEach(t),XKo=i(ua),OF=n(ua,"LI",{});var RIe=s(OF);Y2e=n(RIe,"STRONG",{});var x6t=s(Y2e);zKo=r(x6t,"mobilebert"),x6t.forEach(t),WKo=r(RIe," \u2014 "),pW=n(RIe,"A",{href:!0});var $6t=s(pW);QKo=r($6t,"MobileBertForNextSentencePrediction"),$6t.forEach(t),HKo=r(RIe," (MobileBERT model)"),RIe.forEach(t),UKo=i(ua),VF=n(ua,"LI",{});var PIe=s(VF);K2e=n(PIe,"STRONG",{});var k6t=s(K2e);JKo=r(k6t,"nezha"),k6t.forEach(t),YKo=r(PIe," \u2014 "),_W=n(PIe,"A",{href:!0});var S6t=s(_W);KKo=r(S6t,"NezhaForNextSentencePrediction"),S6t.forEach(t),ZKo=r(PIe," (Nezha model)"),PIe.forEach(t),eZo=i(ua),XF=n(ua,"LI",{});var BIe=s(XF);Z2e=n(BIe,"STRONG",{});var R6t=s(Z2e);oZo=r(R6t,"qdqbert"),R6t.forEach(t),rZo=r(BIe," \u2014 "),bW=n(BIe,"A",{href:!0});var P6t=s(bW);tZo=r(P6t,"QDQBertForNextSentencePrediction"),P6t.forEach(t),aZo=r(BIe," (QDQBert model)"),BIe.forEach(t),ua.forEach(t),nZo=i(ha),zF=n(ha,"P",{});var IIe=s(zF);sZo=r(IIe,"The model is set in evaluation mode by default using "),ebe=n(IIe,"CODE",{});var B6t=s(ebe);lZo=r(B6t,"model.eval()"),B6t.forEach(t),iZo=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(IIe,"CODE",{});var I6t=s(obe);dZo=r(I6t,"model.train()"),I6t.forEach(t),IIe.forEach(t),cZo=i(ha),T(WF.$$.fragment,ha),ha.forEach(t),fl.forEach(t),aWe=i(m),hd=n(m,"H2",{class:!0});var cHe=s(hd);QF=n(cHe,"A",{id:!0,class:!0,href:!0});var N6t=s(QF);rbe=n(N6t,"SPAN",{});var q6t=s(rbe);T(q8.$$.fragment,q6t),q6t.forEach(t),N6t.forEach(t),mZo=i(cHe),tbe=n(cHe,"SPAN",{});var j6t=s(tbe);fZo=r(j6t,"AutoModelForTokenClassification"),j6t.forEach(t),cHe.forEach(t),nWe=i(m),Do=n(m,"DIV",{class:!0});var gl=s(Do);T(j8.$$.fragment,gl),gZo=i(gl),ud=n(gl,"P",{});var Gte=s(ud);hZo=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vW=n(Gte,"A",{href:!0});var D6t=s(vW);uZo=r(D6t,"from_pretrained()"),D6t.forEach(t),pZo=r(Gte," class method or the "),FW=n(Gte,"A",{href:!0});var G6t=s(FW);_Zo=r(G6t,"from_config()"),G6t.forEach(t),bZo=r(Gte,` class
method.`),Gte.forEach(t),vZo=i(gl),D8=n(gl,"P",{});var mHe=s(D8);FZo=r(mHe,"This class cannot be instantiated directly using "),abe=n(mHe,"CODE",{});var O6t=s(abe);TZo=r(O6t,"__init__()"),O6t.forEach(t),MZo=r(mHe," (throws an error)."),mHe.forEach(t),EZo=i(gl),pt=n(gl,"DIV",{class:!0});var z7=s(pt);T(G8.$$.fragment,z7),CZo=i(z7),nbe=n(z7,"P",{});var V6t=s(nbe);wZo=r(V6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V6t.forEach(t),AZo=i(z7),pd=n(z7,"P",{});var Ote=s(pd);LZo=r(Ote,`Note:
Loading a model from its configuration file does `),sbe=n(Ote,"STRONG",{});var X6t=s(sbe);yZo=r(X6t,"not"),X6t.forEach(t),xZo=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(Ote,"A",{href:!0});var z6t=s(TW);$Zo=r(z6t,"from_pretrained()"),z6t.forEach(t),kZo=r(Ote," to load the model weights."),Ote.forEach(t),SZo=i(z7),T(HF.$$.fragment,z7),z7.forEach(t),RZo=i(gl),no=n(gl,"DIV",{class:!0});var pa=s(no);T(O8.$$.fragment,pa),PZo=i(pa),lbe=n(pa,"P",{});var W6t=s(lbe);BZo=r(W6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W6t.forEach(t),IZo=i(pa),Xa=n(pa,"P",{});var W7=s(Xa);NZo=r(W7,"The model class to instantiate is selected based on the "),ibe=n(W7,"CODE",{});var Q6t=s(ibe);qZo=r(Q6t,"model_type"),Q6t.forEach(t),jZo=r(W7,` property of the config object (either
passed as an argument or loaded from `),dbe=n(W7,"CODE",{});var H6t=s(dbe);DZo=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),GZo=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(W7,"CODE",{});var U6t=s(cbe);OZo=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),VZo=r(W7,":"),W7.forEach(t),XZo=i(pa),H=n(pa,"UL",{});var Y=s(H);UF=n(Y,"LI",{});var NIe=s(UF);mbe=n(NIe,"STRONG",{});var J6t=s(mbe);zZo=r(J6t,"albert"),J6t.forEach(t),WZo=r(NIe," \u2014 "),MW=n(NIe,"A",{href:!0});var Y6t=s(MW);QZo=r(Y6t,"AlbertForTokenClassification"),Y6t.forEach(t),HZo=r(NIe," (ALBERT model)"),NIe.forEach(t),UZo=i(Y),JF=n(Y,"LI",{});var qIe=s(JF);fbe=n(qIe,"STRONG",{});var K6t=s(fbe);JZo=r(K6t,"bert"),K6t.forEach(t),YZo=r(qIe," \u2014 "),EW=n(qIe,"A",{href:!0});var Z6t=s(EW);KZo=r(Z6t,"BertForTokenClassification"),Z6t.forEach(t),ZZo=r(qIe," (BERT model)"),qIe.forEach(t),eer=i(Y),YF=n(Y,"LI",{});var jIe=s(YF);gbe=n(jIe,"STRONG",{});var eAt=s(gbe);oer=r(eAt,"big_bird"),eAt.forEach(t),rer=r(jIe," \u2014 "),CW=n(jIe,"A",{href:!0});var oAt=s(CW);ter=r(oAt,"BigBirdForTokenClassification"),oAt.forEach(t),aer=r(jIe," (BigBird model)"),jIe.forEach(t),ner=i(Y),KF=n(Y,"LI",{});var DIe=s(KF);hbe=n(DIe,"STRONG",{});var rAt=s(hbe);ser=r(rAt,"bloom"),rAt.forEach(t),ler=r(DIe," \u2014 "),wW=n(DIe,"A",{href:!0});var tAt=s(wW);ier=r(tAt,"BloomForTokenClassification"),tAt.forEach(t),der=r(DIe," (BLOOM model)"),DIe.forEach(t),cer=i(Y),ZF=n(Y,"LI",{});var GIe=s(ZF);ube=n(GIe,"STRONG",{});var aAt=s(ube);mer=r(aAt,"camembert"),aAt.forEach(t),fer=r(GIe," \u2014 "),AW=n(GIe,"A",{href:!0});var nAt=s(AW);ger=r(nAt,"CamembertForTokenClassification"),nAt.forEach(t),her=r(GIe," (CamemBERT model)"),GIe.forEach(t),uer=i(Y),eT=n(Y,"LI",{});var OIe=s(eT);pbe=n(OIe,"STRONG",{});var sAt=s(pbe);per=r(sAt,"canine"),sAt.forEach(t),_er=r(OIe," \u2014 "),LW=n(OIe,"A",{href:!0});var lAt=s(LW);ber=r(lAt,"CanineForTokenClassification"),lAt.forEach(t),ver=r(OIe," (CANINE model)"),OIe.forEach(t),Fer=i(Y),oT=n(Y,"LI",{});var VIe=s(oT);_be=n(VIe,"STRONG",{});var iAt=s(_be);Ter=r(iAt,"convbert"),iAt.forEach(t),Mer=r(VIe," \u2014 "),yW=n(VIe,"A",{href:!0});var dAt=s(yW);Eer=r(dAt,"ConvBertForTokenClassification"),dAt.forEach(t),Cer=r(VIe," (ConvBERT model)"),VIe.forEach(t),wer=i(Y),rT=n(Y,"LI",{});var XIe=s(rT);bbe=n(XIe,"STRONG",{});var cAt=s(bbe);Aer=r(cAt,"data2vec-text"),cAt.forEach(t),Ler=r(XIe," \u2014 "),xW=n(XIe,"A",{href:!0});var mAt=s(xW);yer=r(mAt,"Data2VecTextForTokenClassification"),mAt.forEach(t),xer=r(XIe," (Data2VecText model)"),XIe.forEach(t),$er=i(Y),tT=n(Y,"LI",{});var zIe=s(tT);vbe=n(zIe,"STRONG",{});var fAt=s(vbe);ker=r(fAt,"deberta"),fAt.forEach(t),Ser=r(zIe," \u2014 "),$W=n(zIe,"A",{href:!0});var gAt=s($W);Rer=r(gAt,"DebertaForTokenClassification"),gAt.forEach(t),Per=r(zIe," (DeBERTa model)"),zIe.forEach(t),Ber=i(Y),aT=n(Y,"LI",{});var WIe=s(aT);Fbe=n(WIe,"STRONG",{});var hAt=s(Fbe);Ier=r(hAt,"deberta-v2"),hAt.forEach(t),Ner=r(WIe," \u2014 "),kW=n(WIe,"A",{href:!0});var uAt=s(kW);qer=r(uAt,"DebertaV2ForTokenClassification"),uAt.forEach(t),jer=r(WIe," (DeBERTa-v2 model)"),WIe.forEach(t),Der=i(Y),nT=n(Y,"LI",{});var QIe=s(nT);Tbe=n(QIe,"STRONG",{});var pAt=s(Tbe);Ger=r(pAt,"distilbert"),pAt.forEach(t),Oer=r(QIe," \u2014 "),SW=n(QIe,"A",{href:!0});var _At=s(SW);Ver=r(_At,"DistilBertForTokenClassification"),_At.forEach(t),Xer=r(QIe," (DistilBERT model)"),QIe.forEach(t),zer=i(Y),sT=n(Y,"LI",{});var HIe=s(sT);Mbe=n(HIe,"STRONG",{});var bAt=s(Mbe);Wer=r(bAt,"electra"),bAt.forEach(t),Qer=r(HIe," \u2014 "),RW=n(HIe,"A",{href:!0});var vAt=s(RW);Her=r(vAt,"ElectraForTokenClassification"),vAt.forEach(t),Uer=r(HIe," (ELECTRA model)"),HIe.forEach(t),Jer=i(Y),lT=n(Y,"LI",{});var UIe=s(lT);Ebe=n(UIe,"STRONG",{});var FAt=s(Ebe);Yer=r(FAt,"flaubert"),FAt.forEach(t),Ker=r(UIe," \u2014 "),PW=n(UIe,"A",{href:!0});var TAt=s(PW);Zer=r(TAt,"FlaubertForTokenClassification"),TAt.forEach(t),eor=r(UIe," (FlauBERT model)"),UIe.forEach(t),oor=i(Y),iT=n(Y,"LI",{});var JIe=s(iT);Cbe=n(JIe,"STRONG",{});var MAt=s(Cbe);ror=r(MAt,"fnet"),MAt.forEach(t),tor=r(JIe," \u2014 "),BW=n(JIe,"A",{href:!0});var EAt=s(BW);aor=r(EAt,"FNetForTokenClassification"),EAt.forEach(t),nor=r(JIe," (FNet model)"),JIe.forEach(t),sor=i(Y),dT=n(Y,"LI",{});var YIe=s(dT);wbe=n(YIe,"STRONG",{});var CAt=s(wbe);lor=r(CAt,"funnel"),CAt.forEach(t),ior=r(YIe," \u2014 "),IW=n(YIe,"A",{href:!0});var wAt=s(IW);dor=r(wAt,"FunnelForTokenClassification"),wAt.forEach(t),cor=r(YIe," (Funnel Transformer model)"),YIe.forEach(t),mor=i(Y),cT=n(Y,"LI",{});var KIe=s(cT);Abe=n(KIe,"STRONG",{});var AAt=s(Abe);gor=r(AAt,"gpt2"),AAt.forEach(t),hor=r(KIe," \u2014 "),NW=n(KIe,"A",{href:!0});var LAt=s(NW);uor=r(LAt,"GPT2ForTokenClassification"),LAt.forEach(t),por=r(KIe," (OpenAI GPT-2 model)"),KIe.forEach(t),_or=i(Y),mT=n(Y,"LI",{});var ZIe=s(mT);Lbe=n(ZIe,"STRONG",{});var yAt=s(Lbe);bor=r(yAt,"ibert"),yAt.forEach(t),vor=r(ZIe," \u2014 "),qW=n(ZIe,"A",{href:!0});var xAt=s(qW);For=r(xAt,"IBertForTokenClassification"),xAt.forEach(t),Tor=r(ZIe," (I-BERT model)"),ZIe.forEach(t),Mor=i(Y),fT=n(Y,"LI",{});var eNe=s(fT);ybe=n(eNe,"STRONG",{});var $At=s(ybe);Eor=r($At,"layoutlm"),$At.forEach(t),Cor=r(eNe," \u2014 "),jW=n(eNe,"A",{href:!0});var kAt=s(jW);wor=r(kAt,"LayoutLMForTokenClassification"),kAt.forEach(t),Aor=r(eNe," (LayoutLM model)"),eNe.forEach(t),Lor=i(Y),gT=n(Y,"LI",{});var oNe=s(gT);xbe=n(oNe,"STRONG",{});var SAt=s(xbe);yor=r(SAt,"layoutlmv2"),SAt.forEach(t),xor=r(oNe," \u2014 "),DW=n(oNe,"A",{href:!0});var RAt=s(DW);$or=r(RAt,"LayoutLMv2ForTokenClassification"),RAt.forEach(t),kor=r(oNe," (LayoutLMv2 model)"),oNe.forEach(t),Sor=i(Y),hT=n(Y,"LI",{});var rNe=s(hT);$be=n(rNe,"STRONG",{});var PAt=s($be);Ror=r(PAt,"layoutlmv3"),PAt.forEach(t),Por=r(rNe," \u2014 "),GW=n(rNe,"A",{href:!0});var BAt=s(GW);Bor=r(BAt,"LayoutLMv3ForTokenClassification"),BAt.forEach(t),Ior=r(rNe," (LayoutLMv3 model)"),rNe.forEach(t),Nor=i(Y),uT=n(Y,"LI",{});var tNe=s(uT);kbe=n(tNe,"STRONG",{});var IAt=s(kbe);qor=r(IAt,"longformer"),IAt.forEach(t),jor=r(tNe," \u2014 "),OW=n(tNe,"A",{href:!0});var NAt=s(OW);Dor=r(NAt,"LongformerForTokenClassification"),NAt.forEach(t),Gor=r(tNe," (Longformer model)"),tNe.forEach(t),Oor=i(Y),pT=n(Y,"LI",{});var aNe=s(pT);Sbe=n(aNe,"STRONG",{});var qAt=s(Sbe);Vor=r(qAt,"luke"),qAt.forEach(t),Xor=r(aNe," \u2014 "),VW=n(aNe,"A",{href:!0});var jAt=s(VW);zor=r(jAt,"LukeForTokenClassification"),jAt.forEach(t),Wor=r(aNe," (LUKE model)"),aNe.forEach(t),Qor=i(Y),_T=n(Y,"LI",{});var nNe=s(_T);Rbe=n(nNe,"STRONG",{});var DAt=s(Rbe);Hor=r(DAt,"megatron-bert"),DAt.forEach(t),Uor=r(nNe," \u2014 "),XW=n(nNe,"A",{href:!0});var GAt=s(XW);Jor=r(GAt,"MegatronBertForTokenClassification"),GAt.forEach(t),Yor=r(nNe," (Megatron-BERT model)"),nNe.forEach(t),Kor=i(Y),bT=n(Y,"LI",{});var sNe=s(bT);Pbe=n(sNe,"STRONG",{});var OAt=s(Pbe);Zor=r(OAt,"mobilebert"),OAt.forEach(t),err=r(sNe," \u2014 "),zW=n(sNe,"A",{href:!0});var VAt=s(zW);orr=r(VAt,"MobileBertForTokenClassification"),VAt.forEach(t),rrr=r(sNe," (MobileBERT model)"),sNe.forEach(t),trr=i(Y),vT=n(Y,"LI",{});var lNe=s(vT);Bbe=n(lNe,"STRONG",{});var XAt=s(Bbe);arr=r(XAt,"mpnet"),XAt.forEach(t),nrr=r(lNe," \u2014 "),WW=n(lNe,"A",{href:!0});var zAt=s(WW);srr=r(zAt,"MPNetForTokenClassification"),zAt.forEach(t),lrr=r(lNe," (MPNet model)"),lNe.forEach(t),irr=i(Y),FT=n(Y,"LI",{});var iNe=s(FT);Ibe=n(iNe,"STRONG",{});var WAt=s(Ibe);drr=r(WAt,"nezha"),WAt.forEach(t),crr=r(iNe," \u2014 "),QW=n(iNe,"A",{href:!0});var QAt=s(QW);mrr=r(QAt,"NezhaForTokenClassification"),QAt.forEach(t),frr=r(iNe," (Nezha model)"),iNe.forEach(t),grr=i(Y),TT=n(Y,"LI",{});var dNe=s(TT);Nbe=n(dNe,"STRONG",{});var HAt=s(Nbe);hrr=r(HAt,"nystromformer"),HAt.forEach(t),urr=r(dNe," \u2014 "),HW=n(dNe,"A",{href:!0});var UAt=s(HW);prr=r(UAt,"NystromformerForTokenClassification"),UAt.forEach(t),_rr=r(dNe," (Nystr\xF6mformer model)"),dNe.forEach(t),brr=i(Y),MT=n(Y,"LI",{});var cNe=s(MT);qbe=n(cNe,"STRONG",{});var JAt=s(qbe);vrr=r(JAt,"qdqbert"),JAt.forEach(t),Frr=r(cNe," \u2014 "),UW=n(cNe,"A",{href:!0});var YAt=s(UW);Trr=r(YAt,"QDQBertForTokenClassification"),YAt.forEach(t),Mrr=r(cNe," (QDQBert model)"),cNe.forEach(t),Err=i(Y),ET=n(Y,"LI",{});var mNe=s(ET);jbe=n(mNe,"STRONG",{});var KAt=s(jbe);Crr=r(KAt,"rembert"),KAt.forEach(t),wrr=r(mNe," \u2014 "),JW=n(mNe,"A",{href:!0});var ZAt=s(JW);Arr=r(ZAt,"RemBertForTokenClassification"),ZAt.forEach(t),Lrr=r(mNe," (RemBERT model)"),mNe.forEach(t),yrr=i(Y),CT=n(Y,"LI",{});var fNe=s(CT);Dbe=n(fNe,"STRONG",{});var e7t=s(Dbe);xrr=r(e7t,"roberta"),e7t.forEach(t),$rr=r(fNe," \u2014 "),YW=n(fNe,"A",{href:!0});var o7t=s(YW);krr=r(o7t,"RobertaForTokenClassification"),o7t.forEach(t),Srr=r(fNe," (RoBERTa model)"),fNe.forEach(t),Rrr=i(Y),wT=n(Y,"LI",{});var gNe=s(wT);Gbe=n(gNe,"STRONG",{});var r7t=s(Gbe);Prr=r(r7t,"roformer"),r7t.forEach(t),Brr=r(gNe," \u2014 "),KW=n(gNe,"A",{href:!0});var t7t=s(KW);Irr=r(t7t,"RoFormerForTokenClassification"),t7t.forEach(t),Nrr=r(gNe," (RoFormer model)"),gNe.forEach(t),qrr=i(Y),AT=n(Y,"LI",{});var hNe=s(AT);Obe=n(hNe,"STRONG",{});var a7t=s(Obe);jrr=r(a7t,"squeezebert"),a7t.forEach(t),Drr=r(hNe," \u2014 "),ZW=n(hNe,"A",{href:!0});var n7t=s(ZW);Grr=r(n7t,"SqueezeBertForTokenClassification"),n7t.forEach(t),Orr=r(hNe," (SqueezeBERT model)"),hNe.forEach(t),Vrr=i(Y),LT=n(Y,"LI",{});var uNe=s(LT);Vbe=n(uNe,"STRONG",{});var s7t=s(Vbe);Xrr=r(s7t,"xlm"),s7t.forEach(t),zrr=r(uNe," \u2014 "),eQ=n(uNe,"A",{href:!0});var l7t=s(eQ);Wrr=r(l7t,"XLMForTokenClassification"),l7t.forEach(t),Qrr=r(uNe," (XLM model)"),uNe.forEach(t),Hrr=i(Y),yT=n(Y,"LI",{});var pNe=s(yT);Xbe=n(pNe,"STRONG",{});var i7t=s(Xbe);Urr=r(i7t,"xlm-roberta"),i7t.forEach(t),Jrr=r(pNe," \u2014 "),oQ=n(pNe,"A",{href:!0});var d7t=s(oQ);Yrr=r(d7t,"XLMRobertaForTokenClassification"),d7t.forEach(t),Krr=r(pNe," (XLM-RoBERTa model)"),pNe.forEach(t),Zrr=i(Y),xT=n(Y,"LI",{});var _Ne=s(xT);zbe=n(_Ne,"STRONG",{});var c7t=s(zbe);etr=r(c7t,"xlm-roberta-xl"),c7t.forEach(t),otr=r(_Ne," \u2014 "),rQ=n(_Ne,"A",{href:!0});var m7t=s(rQ);rtr=r(m7t,"XLMRobertaXLForTokenClassification"),m7t.forEach(t),ttr=r(_Ne," (XLM-RoBERTa-XL model)"),_Ne.forEach(t),atr=i(Y),$T=n(Y,"LI",{});var bNe=s($T);Wbe=n(bNe,"STRONG",{});var f7t=s(Wbe);ntr=r(f7t,"xlnet"),f7t.forEach(t),str=r(bNe," \u2014 "),tQ=n(bNe,"A",{href:!0});var g7t=s(tQ);ltr=r(g7t,"XLNetForTokenClassification"),g7t.forEach(t),itr=r(bNe," (XLNet model)"),bNe.forEach(t),dtr=i(Y),kT=n(Y,"LI",{});var vNe=s(kT);Qbe=n(vNe,"STRONG",{});var h7t=s(Qbe);ctr=r(h7t,"yoso"),h7t.forEach(t),mtr=r(vNe," \u2014 "),aQ=n(vNe,"A",{href:!0});var u7t=s(aQ);ftr=r(u7t,"YosoForTokenClassification"),u7t.forEach(t),gtr=r(vNe," (YOSO model)"),vNe.forEach(t),Y.forEach(t),htr=i(pa),ST=n(pa,"P",{});var FNe=s(ST);utr=r(FNe,"The model is set in evaluation mode by default using "),Hbe=n(FNe,"CODE",{});var p7t=s(Hbe);ptr=r(p7t,"model.eval()"),p7t.forEach(t),_tr=r(FNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(FNe,"CODE",{});var _7t=s(Ube);btr=r(_7t,"model.train()"),_7t.forEach(t),FNe.forEach(t),vtr=i(pa),T(RT.$$.fragment,pa),pa.forEach(t),gl.forEach(t),sWe=i(m),_d=n(m,"H2",{class:!0});var fHe=s(_d);PT=n(fHe,"A",{id:!0,class:!0,href:!0});var b7t=s(PT);Jbe=n(b7t,"SPAN",{});var v7t=s(Jbe);T(V8.$$.fragment,v7t),v7t.forEach(t),b7t.forEach(t),Ftr=i(fHe),Ybe=n(fHe,"SPAN",{});var F7t=s(Ybe);Ttr=r(F7t,"AutoModelForQuestionAnswering"),F7t.forEach(t),fHe.forEach(t),lWe=i(m),Go=n(m,"DIV",{class:!0});var hl=s(Go);T(X8.$$.fragment,hl),Mtr=i(hl),bd=n(hl,"P",{});var Vte=s(bd);Etr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nQ=n(Vte,"A",{href:!0});var T7t=s(nQ);Ctr=r(T7t,"from_pretrained()"),T7t.forEach(t),wtr=r(Vte," class method or the "),sQ=n(Vte,"A",{href:!0});var M7t=s(sQ);Atr=r(M7t,"from_config()"),M7t.forEach(t),Ltr=r(Vte,` class
method.`),Vte.forEach(t),ytr=i(hl),z8=n(hl,"P",{});var gHe=s(z8);xtr=r(gHe,"This class cannot be instantiated directly using "),Kbe=n(gHe,"CODE",{});var E7t=s(Kbe);$tr=r(E7t,"__init__()"),E7t.forEach(t),ktr=r(gHe," (throws an error)."),gHe.forEach(t),Str=i(hl),_t=n(hl,"DIV",{class:!0});var Q7=s(_t);T(W8.$$.fragment,Q7),Rtr=i(Q7),Zbe=n(Q7,"P",{});var C7t=s(Zbe);Ptr=r(C7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C7t.forEach(t),Btr=i(Q7),vd=n(Q7,"P",{});var Xte=s(vd);Itr=r(Xte,`Note:
Loading a model from its configuration file does `),eve=n(Xte,"STRONG",{});var w7t=s(eve);Ntr=r(w7t,"not"),w7t.forEach(t),qtr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(Xte,"A",{href:!0});var A7t=s(lQ);jtr=r(A7t,"from_pretrained()"),A7t.forEach(t),Dtr=r(Xte," to load the model weights."),Xte.forEach(t),Gtr=i(Q7),T(BT.$$.fragment,Q7),Q7.forEach(t),Otr=i(hl),so=n(hl,"DIV",{class:!0});var _a=s(so);T(Q8.$$.fragment,_a),Vtr=i(_a),ove=n(_a,"P",{});var L7t=s(ove);Xtr=r(L7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L7t.forEach(t),ztr=i(_a),za=n(_a,"P",{});var H7=s(za);Wtr=r(H7,"The model class to instantiate is selected based on the "),rve=n(H7,"CODE",{});var y7t=s(rve);Qtr=r(y7t,"model_type"),y7t.forEach(t),Htr=r(H7,` property of the config object (either
passed as an argument or loaded from `),tve=n(H7,"CODE",{});var x7t=s(tve);Utr=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),Jtr=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(H7,"CODE",{});var $7t=s(ave);Ytr=r($7t,"pretrained_model_name_or_path"),$7t.forEach(t),Ktr=r(H7,":"),H7.forEach(t),Ztr=i(_a),V=n(_a,"UL",{});var X=s(V);IT=n(X,"LI",{});var TNe=s(IT);nve=n(TNe,"STRONG",{});var k7t=s(nve);ear=r(k7t,"albert"),k7t.forEach(t),oar=r(TNe," \u2014 "),iQ=n(TNe,"A",{href:!0});var S7t=s(iQ);rar=r(S7t,"AlbertForQuestionAnswering"),S7t.forEach(t),tar=r(TNe," (ALBERT model)"),TNe.forEach(t),aar=i(X),NT=n(X,"LI",{});var MNe=s(NT);sve=n(MNe,"STRONG",{});var R7t=s(sve);nar=r(R7t,"bart"),R7t.forEach(t),sar=r(MNe," \u2014 "),dQ=n(MNe,"A",{href:!0});var P7t=s(dQ);lar=r(P7t,"BartForQuestionAnswering"),P7t.forEach(t),iar=r(MNe," (BART model)"),MNe.forEach(t),dar=i(X),qT=n(X,"LI",{});var ENe=s(qT);lve=n(ENe,"STRONG",{});var B7t=s(lve);car=r(B7t,"bert"),B7t.forEach(t),mar=r(ENe," \u2014 "),cQ=n(ENe,"A",{href:!0});var I7t=s(cQ);far=r(I7t,"BertForQuestionAnswering"),I7t.forEach(t),gar=r(ENe," (BERT model)"),ENe.forEach(t),har=i(X),jT=n(X,"LI",{});var CNe=s(jT);ive=n(CNe,"STRONG",{});var N7t=s(ive);uar=r(N7t,"big_bird"),N7t.forEach(t),par=r(CNe," \u2014 "),mQ=n(CNe,"A",{href:!0});var q7t=s(mQ);_ar=r(q7t,"BigBirdForQuestionAnswering"),q7t.forEach(t),bar=r(CNe," (BigBird model)"),CNe.forEach(t),Far=i(X),DT=n(X,"LI",{});var wNe=s(DT);dve=n(wNe,"STRONG",{});var j7t=s(dve);Tar=r(j7t,"bigbird_pegasus"),j7t.forEach(t),Mar=r(wNe," \u2014 "),fQ=n(wNe,"A",{href:!0});var D7t=s(fQ);Ear=r(D7t,"BigBirdPegasusForQuestionAnswering"),D7t.forEach(t),Car=r(wNe," (BigBird-Pegasus model)"),wNe.forEach(t),war=i(X),GT=n(X,"LI",{});var ANe=s(GT);cve=n(ANe,"STRONG",{});var G7t=s(cve);Aar=r(G7t,"camembert"),G7t.forEach(t),Lar=r(ANe," \u2014 "),gQ=n(ANe,"A",{href:!0});var O7t=s(gQ);yar=r(O7t,"CamembertForQuestionAnswering"),O7t.forEach(t),xar=r(ANe," (CamemBERT model)"),ANe.forEach(t),$ar=i(X),OT=n(X,"LI",{});var LNe=s(OT);mve=n(LNe,"STRONG",{});var V7t=s(mve);kar=r(V7t,"canine"),V7t.forEach(t),Sar=r(LNe," \u2014 "),hQ=n(LNe,"A",{href:!0});var X7t=s(hQ);Rar=r(X7t,"CanineForQuestionAnswering"),X7t.forEach(t),Par=r(LNe," (CANINE model)"),LNe.forEach(t),Bar=i(X),VT=n(X,"LI",{});var yNe=s(VT);fve=n(yNe,"STRONG",{});var z7t=s(fve);Iar=r(z7t,"convbert"),z7t.forEach(t),Nar=r(yNe," \u2014 "),uQ=n(yNe,"A",{href:!0});var W7t=s(uQ);qar=r(W7t,"ConvBertForQuestionAnswering"),W7t.forEach(t),jar=r(yNe," (ConvBERT model)"),yNe.forEach(t),Dar=i(X),XT=n(X,"LI",{});var xNe=s(XT);gve=n(xNe,"STRONG",{});var Q7t=s(gve);Gar=r(Q7t,"data2vec-text"),Q7t.forEach(t),Oar=r(xNe," \u2014 "),pQ=n(xNe,"A",{href:!0});var H7t=s(pQ);Var=r(H7t,"Data2VecTextForQuestionAnswering"),H7t.forEach(t),Xar=r(xNe," (Data2VecText model)"),xNe.forEach(t),zar=i(X),zT=n(X,"LI",{});var $Ne=s(zT);hve=n($Ne,"STRONG",{});var U7t=s(hve);War=r(U7t,"deberta"),U7t.forEach(t),Qar=r($Ne," \u2014 "),_Q=n($Ne,"A",{href:!0});var J7t=s(_Q);Har=r(J7t,"DebertaForQuestionAnswering"),J7t.forEach(t),Uar=r($Ne," (DeBERTa model)"),$Ne.forEach(t),Jar=i(X),WT=n(X,"LI",{});var kNe=s(WT);uve=n(kNe,"STRONG",{});var Y7t=s(uve);Yar=r(Y7t,"deberta-v2"),Y7t.forEach(t),Kar=r(kNe," \u2014 "),bQ=n(kNe,"A",{href:!0});var K7t=s(bQ);Zar=r(K7t,"DebertaV2ForQuestionAnswering"),K7t.forEach(t),enr=r(kNe," (DeBERTa-v2 model)"),kNe.forEach(t),onr=i(X),QT=n(X,"LI",{});var SNe=s(QT);pve=n(SNe,"STRONG",{});var Z7t=s(pve);rnr=r(Z7t,"distilbert"),Z7t.forEach(t),tnr=r(SNe," \u2014 "),vQ=n(SNe,"A",{href:!0});var eLt=s(vQ);anr=r(eLt,"DistilBertForQuestionAnswering"),eLt.forEach(t),nnr=r(SNe," (DistilBERT model)"),SNe.forEach(t),snr=i(X),HT=n(X,"LI",{});var RNe=s(HT);_ve=n(RNe,"STRONG",{});var oLt=s(_ve);lnr=r(oLt,"electra"),oLt.forEach(t),inr=r(RNe," \u2014 "),FQ=n(RNe,"A",{href:!0});var rLt=s(FQ);dnr=r(rLt,"ElectraForQuestionAnswering"),rLt.forEach(t),cnr=r(RNe," (ELECTRA model)"),RNe.forEach(t),mnr=i(X),UT=n(X,"LI",{});var PNe=s(UT);bve=n(PNe,"STRONG",{});var tLt=s(bve);fnr=r(tLt,"flaubert"),tLt.forEach(t),gnr=r(PNe," \u2014 "),TQ=n(PNe,"A",{href:!0});var aLt=s(TQ);hnr=r(aLt,"FlaubertForQuestionAnsweringSimple"),aLt.forEach(t),unr=r(PNe," (FlauBERT model)"),PNe.forEach(t),pnr=i(X),JT=n(X,"LI",{});var BNe=s(JT);vve=n(BNe,"STRONG",{});var nLt=s(vve);_nr=r(nLt,"fnet"),nLt.forEach(t),bnr=r(BNe," \u2014 "),MQ=n(BNe,"A",{href:!0});var sLt=s(MQ);vnr=r(sLt,"FNetForQuestionAnswering"),sLt.forEach(t),Fnr=r(BNe," (FNet model)"),BNe.forEach(t),Tnr=i(X),YT=n(X,"LI",{});var INe=s(YT);Fve=n(INe,"STRONG",{});var lLt=s(Fve);Mnr=r(lLt,"funnel"),lLt.forEach(t),Enr=r(INe," \u2014 "),EQ=n(INe,"A",{href:!0});var iLt=s(EQ);Cnr=r(iLt,"FunnelForQuestionAnswering"),iLt.forEach(t),wnr=r(INe," (Funnel Transformer model)"),INe.forEach(t),Anr=i(X),KT=n(X,"LI",{});var NNe=s(KT);Tve=n(NNe,"STRONG",{});var dLt=s(Tve);Lnr=r(dLt,"gptj"),dLt.forEach(t),ynr=r(NNe," \u2014 "),CQ=n(NNe,"A",{href:!0});var cLt=s(CQ);xnr=r(cLt,"GPTJForQuestionAnswering"),cLt.forEach(t),$nr=r(NNe," (GPT-J model)"),NNe.forEach(t),knr=i(X),ZT=n(X,"LI",{});var qNe=s(ZT);Mve=n(qNe,"STRONG",{});var mLt=s(Mve);Snr=r(mLt,"ibert"),mLt.forEach(t),Rnr=r(qNe," \u2014 "),wQ=n(qNe,"A",{href:!0});var fLt=s(wQ);Pnr=r(fLt,"IBertForQuestionAnswering"),fLt.forEach(t),Bnr=r(qNe," (I-BERT model)"),qNe.forEach(t),Inr=i(X),eM=n(X,"LI",{});var jNe=s(eM);Eve=n(jNe,"STRONG",{});var gLt=s(Eve);Nnr=r(gLt,"layoutlmv2"),gLt.forEach(t),qnr=r(jNe," \u2014 "),AQ=n(jNe,"A",{href:!0});var hLt=s(AQ);jnr=r(hLt,"LayoutLMv2ForQuestionAnswering"),hLt.forEach(t),Dnr=r(jNe," (LayoutLMv2 model)"),jNe.forEach(t),Gnr=i(X),oM=n(X,"LI",{});var DNe=s(oM);Cve=n(DNe,"STRONG",{});var uLt=s(Cve);Onr=r(uLt,"layoutlmv3"),uLt.forEach(t),Vnr=r(DNe," \u2014 "),LQ=n(DNe,"A",{href:!0});var pLt=s(LQ);Xnr=r(pLt,"LayoutLMv3ForQuestionAnswering"),pLt.forEach(t),znr=r(DNe," (LayoutLMv3 model)"),DNe.forEach(t),Wnr=i(X),rM=n(X,"LI",{});var GNe=s(rM);wve=n(GNe,"STRONG",{});var _Lt=s(wve);Qnr=r(_Lt,"led"),_Lt.forEach(t),Hnr=r(GNe," \u2014 "),yQ=n(GNe,"A",{href:!0});var bLt=s(yQ);Unr=r(bLt,"LEDForQuestionAnswering"),bLt.forEach(t),Jnr=r(GNe," (LED model)"),GNe.forEach(t),Ynr=i(X),tM=n(X,"LI",{});var ONe=s(tM);Ave=n(ONe,"STRONG",{});var vLt=s(Ave);Knr=r(vLt,"longformer"),vLt.forEach(t),Znr=r(ONe," \u2014 "),xQ=n(ONe,"A",{href:!0});var FLt=s(xQ);esr=r(FLt,"LongformerForQuestionAnswering"),FLt.forEach(t),osr=r(ONe," (Longformer model)"),ONe.forEach(t),rsr=i(X),aM=n(X,"LI",{});var VNe=s(aM);Lve=n(VNe,"STRONG",{});var TLt=s(Lve);tsr=r(TLt,"luke"),TLt.forEach(t),asr=r(VNe," \u2014 "),$Q=n(VNe,"A",{href:!0});var MLt=s($Q);nsr=r(MLt,"LukeForQuestionAnswering"),MLt.forEach(t),ssr=r(VNe," (LUKE model)"),VNe.forEach(t),lsr=i(X),nM=n(X,"LI",{});var XNe=s(nM);yve=n(XNe,"STRONG",{});var ELt=s(yve);isr=r(ELt,"lxmert"),ELt.forEach(t),dsr=r(XNe," \u2014 "),kQ=n(XNe,"A",{href:!0});var CLt=s(kQ);csr=r(CLt,"LxmertForQuestionAnswering"),CLt.forEach(t),msr=r(XNe," (LXMERT model)"),XNe.forEach(t),fsr=i(X),sM=n(X,"LI",{});var zNe=s(sM);xve=n(zNe,"STRONG",{});var wLt=s(xve);gsr=r(wLt,"mbart"),wLt.forEach(t),hsr=r(zNe," \u2014 "),SQ=n(zNe,"A",{href:!0});var ALt=s(SQ);usr=r(ALt,"MBartForQuestionAnswering"),ALt.forEach(t),psr=r(zNe," (mBART model)"),zNe.forEach(t),_sr=i(X),lM=n(X,"LI",{});var WNe=s(lM);$ve=n(WNe,"STRONG",{});var LLt=s($ve);bsr=r(LLt,"megatron-bert"),LLt.forEach(t),vsr=r(WNe," \u2014 "),RQ=n(WNe,"A",{href:!0});var yLt=s(RQ);Fsr=r(yLt,"MegatronBertForQuestionAnswering"),yLt.forEach(t),Tsr=r(WNe," (Megatron-BERT model)"),WNe.forEach(t),Msr=i(X),iM=n(X,"LI",{});var QNe=s(iM);kve=n(QNe,"STRONG",{});var xLt=s(kve);Esr=r(xLt,"mobilebert"),xLt.forEach(t),Csr=r(QNe," \u2014 "),PQ=n(QNe,"A",{href:!0});var $Lt=s(PQ);wsr=r($Lt,"MobileBertForQuestionAnswering"),$Lt.forEach(t),Asr=r(QNe," (MobileBERT model)"),QNe.forEach(t),Lsr=i(X),dM=n(X,"LI",{});var HNe=s(dM);Sve=n(HNe,"STRONG",{});var kLt=s(Sve);ysr=r(kLt,"mpnet"),kLt.forEach(t),xsr=r(HNe," \u2014 "),BQ=n(HNe,"A",{href:!0});var SLt=s(BQ);$sr=r(SLt,"MPNetForQuestionAnswering"),SLt.forEach(t),ksr=r(HNe," (MPNet model)"),HNe.forEach(t),Ssr=i(X),cM=n(X,"LI",{});var UNe=s(cM);Rve=n(UNe,"STRONG",{});var RLt=s(Rve);Rsr=r(RLt,"mvp"),RLt.forEach(t),Psr=r(UNe," \u2014 "),IQ=n(UNe,"A",{href:!0});var PLt=s(IQ);Bsr=r(PLt,"MvpForQuestionAnswering"),PLt.forEach(t),Isr=r(UNe," (MVP model)"),UNe.forEach(t),Nsr=i(X),mM=n(X,"LI",{});var JNe=s(mM);Pve=n(JNe,"STRONG",{});var BLt=s(Pve);qsr=r(BLt,"nezha"),BLt.forEach(t),jsr=r(JNe," \u2014 "),NQ=n(JNe,"A",{href:!0});var ILt=s(NQ);Dsr=r(ILt,"NezhaForQuestionAnswering"),ILt.forEach(t),Gsr=r(JNe," (Nezha model)"),JNe.forEach(t),Osr=i(X),fM=n(X,"LI",{});var YNe=s(fM);Bve=n(YNe,"STRONG",{});var NLt=s(Bve);Vsr=r(NLt,"nystromformer"),NLt.forEach(t),Xsr=r(YNe," \u2014 "),qQ=n(YNe,"A",{href:!0});var qLt=s(qQ);zsr=r(qLt,"NystromformerForQuestionAnswering"),qLt.forEach(t),Wsr=r(YNe," (Nystr\xF6mformer model)"),YNe.forEach(t),Qsr=i(X),gM=n(X,"LI",{});var KNe=s(gM);Ive=n(KNe,"STRONG",{});var jLt=s(Ive);Hsr=r(jLt,"qdqbert"),jLt.forEach(t),Usr=r(KNe," \u2014 "),jQ=n(KNe,"A",{href:!0});var DLt=s(jQ);Jsr=r(DLt,"QDQBertForQuestionAnswering"),DLt.forEach(t),Ysr=r(KNe," (QDQBert model)"),KNe.forEach(t),Ksr=i(X),hM=n(X,"LI",{});var ZNe=s(hM);Nve=n(ZNe,"STRONG",{});var GLt=s(Nve);Zsr=r(GLt,"reformer"),GLt.forEach(t),elr=r(ZNe," \u2014 "),DQ=n(ZNe,"A",{href:!0});var OLt=s(DQ);olr=r(OLt,"ReformerForQuestionAnswering"),OLt.forEach(t),rlr=r(ZNe," (Reformer model)"),ZNe.forEach(t),tlr=i(X),uM=n(X,"LI",{});var eqe=s(uM);qve=n(eqe,"STRONG",{});var VLt=s(qve);alr=r(VLt,"rembert"),VLt.forEach(t),nlr=r(eqe," \u2014 "),GQ=n(eqe,"A",{href:!0});var XLt=s(GQ);slr=r(XLt,"RemBertForQuestionAnswering"),XLt.forEach(t),llr=r(eqe," (RemBERT model)"),eqe.forEach(t),ilr=i(X),pM=n(X,"LI",{});var oqe=s(pM);jve=n(oqe,"STRONG",{});var zLt=s(jve);dlr=r(zLt,"roberta"),zLt.forEach(t),clr=r(oqe," \u2014 "),OQ=n(oqe,"A",{href:!0});var WLt=s(OQ);mlr=r(WLt,"RobertaForQuestionAnswering"),WLt.forEach(t),flr=r(oqe," (RoBERTa model)"),oqe.forEach(t),glr=i(X),_M=n(X,"LI",{});var rqe=s(_M);Dve=n(rqe,"STRONG",{});var QLt=s(Dve);hlr=r(QLt,"roformer"),QLt.forEach(t),ulr=r(rqe," \u2014 "),VQ=n(rqe,"A",{href:!0});var HLt=s(VQ);plr=r(HLt,"RoFormerForQuestionAnswering"),HLt.forEach(t),_lr=r(rqe," (RoFormer model)"),rqe.forEach(t),blr=i(X),bM=n(X,"LI",{});var tqe=s(bM);Gve=n(tqe,"STRONG",{});var ULt=s(Gve);vlr=r(ULt,"splinter"),ULt.forEach(t),Flr=r(tqe," \u2014 "),XQ=n(tqe,"A",{href:!0});var JLt=s(XQ);Tlr=r(JLt,"SplinterForQuestionAnswering"),JLt.forEach(t),Mlr=r(tqe," (Splinter model)"),tqe.forEach(t),Elr=i(X),vM=n(X,"LI",{});var aqe=s(vM);Ove=n(aqe,"STRONG",{});var YLt=s(Ove);Clr=r(YLt,"squeezebert"),YLt.forEach(t),wlr=r(aqe," \u2014 "),zQ=n(aqe,"A",{href:!0});var KLt=s(zQ);Alr=r(KLt,"SqueezeBertForQuestionAnswering"),KLt.forEach(t),Llr=r(aqe," (SqueezeBERT model)"),aqe.forEach(t),ylr=i(X),FM=n(X,"LI",{});var nqe=s(FM);Vve=n(nqe,"STRONG",{});var ZLt=s(Vve);xlr=r(ZLt,"xlm"),ZLt.forEach(t),$lr=r(nqe," \u2014 "),WQ=n(nqe,"A",{href:!0});var eyt=s(WQ);klr=r(eyt,"XLMForQuestionAnsweringSimple"),eyt.forEach(t),Slr=r(nqe," (XLM model)"),nqe.forEach(t),Rlr=i(X),TM=n(X,"LI",{});var sqe=s(TM);Xve=n(sqe,"STRONG",{});var oyt=s(Xve);Plr=r(oyt,"xlm-roberta"),oyt.forEach(t),Blr=r(sqe," \u2014 "),QQ=n(sqe,"A",{href:!0});var ryt=s(QQ);Ilr=r(ryt,"XLMRobertaForQuestionAnswering"),ryt.forEach(t),Nlr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),qlr=i(X),MM=n(X,"LI",{});var lqe=s(MM);zve=n(lqe,"STRONG",{});var tyt=s(zve);jlr=r(tyt,"xlm-roberta-xl"),tyt.forEach(t),Dlr=r(lqe," \u2014 "),HQ=n(lqe,"A",{href:!0});var ayt=s(HQ);Glr=r(ayt,"XLMRobertaXLForQuestionAnswering"),ayt.forEach(t),Olr=r(lqe," (XLM-RoBERTa-XL model)"),lqe.forEach(t),Vlr=i(X),EM=n(X,"LI",{});var iqe=s(EM);Wve=n(iqe,"STRONG",{});var nyt=s(Wve);Xlr=r(nyt,"xlnet"),nyt.forEach(t),zlr=r(iqe," \u2014 "),UQ=n(iqe,"A",{href:!0});var syt=s(UQ);Wlr=r(syt,"XLNetForQuestionAnsweringSimple"),syt.forEach(t),Qlr=r(iqe," (XLNet model)"),iqe.forEach(t),Hlr=i(X),CM=n(X,"LI",{});var dqe=s(CM);Qve=n(dqe,"STRONG",{});var lyt=s(Qve);Ulr=r(lyt,"yoso"),lyt.forEach(t),Jlr=r(dqe," \u2014 "),JQ=n(dqe,"A",{href:!0});var iyt=s(JQ);Ylr=r(iyt,"YosoForQuestionAnswering"),iyt.forEach(t),Klr=r(dqe," (YOSO model)"),dqe.forEach(t),X.forEach(t),Zlr=i(_a),wM=n(_a,"P",{});var cqe=s(wM);eir=r(cqe,"The model is set in evaluation mode by default using "),Hve=n(cqe,"CODE",{});var dyt=s(Hve);oir=r(dyt,"model.eval()"),dyt.forEach(t),rir=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=n(cqe,"CODE",{});var cyt=s(Uve);tir=r(cyt,"model.train()"),cyt.forEach(t),cqe.forEach(t),air=i(_a),T(AM.$$.fragment,_a),_a.forEach(t),hl.forEach(t),iWe=i(m),Fd=n(m,"H2",{class:!0});var hHe=s(Fd);LM=n(hHe,"A",{id:!0,class:!0,href:!0});var myt=s(LM);Jve=n(myt,"SPAN",{});var fyt=s(Jve);T(H8.$$.fragment,fyt),fyt.forEach(t),myt.forEach(t),nir=i(hHe),Yve=n(hHe,"SPAN",{});var gyt=s(Yve);sir=r(gyt,"AutoModelForTableQuestionAnswering"),gyt.forEach(t),hHe.forEach(t),dWe=i(m),Oo=n(m,"DIV",{class:!0});var ul=s(Oo);T(U8.$$.fragment,ul),lir=i(ul),Td=n(ul,"P",{});var zte=s(Td);iir=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YQ=n(zte,"A",{href:!0});var hyt=s(YQ);dir=r(hyt,"from_pretrained()"),hyt.forEach(t),cir=r(zte," class method or the "),KQ=n(zte,"A",{href:!0});var uyt=s(KQ);mir=r(uyt,"from_config()"),uyt.forEach(t),fir=r(zte,` class
method.`),zte.forEach(t),gir=i(ul),J8=n(ul,"P",{});var uHe=s(J8);hir=r(uHe,"This class cannot be instantiated directly using "),Kve=n(uHe,"CODE",{});var pyt=s(Kve);uir=r(pyt,"__init__()"),pyt.forEach(t),pir=r(uHe," (throws an error)."),uHe.forEach(t),_ir=i(ul),bt=n(ul,"DIV",{class:!0});var U7=s(bt);T(Y8.$$.fragment,U7),bir=i(U7),Zve=n(U7,"P",{});var _yt=s(Zve);vir=r(_yt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_yt.forEach(t),Fir=i(U7),Md=n(U7,"P",{});var Wte=s(Md);Tir=r(Wte,`Note:
Loading a model from its configuration file does `),e1e=n(Wte,"STRONG",{});var byt=s(e1e);Mir=r(byt,"not"),byt.forEach(t),Eir=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(Wte,"A",{href:!0});var vyt=s(ZQ);Cir=r(vyt,"from_pretrained()"),vyt.forEach(t),wir=r(Wte," to load the model weights."),Wte.forEach(t),Air=i(U7),T(yM.$$.fragment,U7),U7.forEach(t),Lir=i(ul),lo=n(ul,"DIV",{class:!0});var ba=s(lo);T(K8.$$.fragment,ba),yir=i(ba),o1e=n(ba,"P",{});var Fyt=s(o1e);xir=r(Fyt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fyt.forEach(t),$ir=i(ba),Wa=n(ba,"P",{});var J7=s(Wa);kir=r(J7,"The model class to instantiate is selected based on the "),r1e=n(J7,"CODE",{});var Tyt=s(r1e);Sir=r(Tyt,"model_type"),Tyt.forEach(t),Rir=r(J7,` property of the config object (either
passed as an argument or loaded from `),t1e=n(J7,"CODE",{});var Myt=s(t1e);Pir=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),Bir=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(J7,"CODE",{});var Eyt=s(a1e);Iir=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),Nir=r(J7,":"),J7.forEach(t),qir=i(ba),n1e=n(ba,"UL",{});var Cyt=s(n1e);xM=n(Cyt,"LI",{});var mqe=s(xM);s1e=n(mqe,"STRONG",{});var wyt=s(s1e);jir=r(wyt,"tapas"),wyt.forEach(t),Dir=r(mqe," \u2014 "),eH=n(mqe,"A",{href:!0});var Ayt=s(eH);Gir=r(Ayt,"TapasForQuestionAnswering"),Ayt.forEach(t),Oir=r(mqe," (TAPAS model)"),mqe.forEach(t),Cyt.forEach(t),Vir=i(ba),$M=n(ba,"P",{});var fqe=s($M);Xir=r(fqe,"The model is set in evaluation mode by default using "),l1e=n(fqe,"CODE",{});var Lyt=s(l1e);zir=r(Lyt,"model.eval()"),Lyt.forEach(t),Wir=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(fqe,"CODE",{});var yyt=s(i1e);Qir=r(yyt,"model.train()"),yyt.forEach(t),fqe.forEach(t),Hir=i(ba),T(kM.$$.fragment,ba),ba.forEach(t),ul.forEach(t),cWe=i(m),Ed=n(m,"H2",{class:!0});var pHe=s(Ed);SM=n(pHe,"A",{id:!0,class:!0,href:!0});var xyt=s(SM);d1e=n(xyt,"SPAN",{});var $yt=s(d1e);T(Z8.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),Uir=i(pHe),c1e=n(pHe,"SPAN",{});var kyt=s(c1e);Jir=r(kyt,"AutoModelForImageClassification"),kyt.forEach(t),pHe.forEach(t),mWe=i(m),Vo=n(m,"DIV",{class:!0});var pl=s(Vo);T(e9.$$.fragment,pl),Yir=i(pl),Cd=n(pl,"P",{});var Qte=s(Cd);Kir=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oH=n(Qte,"A",{href:!0});var Syt=s(oH);Zir=r(Syt,"from_pretrained()"),Syt.forEach(t),edr=r(Qte," class method or the "),rH=n(Qte,"A",{href:!0});var Ryt=s(rH);odr=r(Ryt,"from_config()"),Ryt.forEach(t),rdr=r(Qte,` class
method.`),Qte.forEach(t),tdr=i(pl),o9=n(pl,"P",{});var _He=s(o9);adr=r(_He,"This class cannot be instantiated directly using "),m1e=n(_He,"CODE",{});var Pyt=s(m1e);ndr=r(Pyt,"__init__()"),Pyt.forEach(t),sdr=r(_He," (throws an error)."),_He.forEach(t),ldr=i(pl),vt=n(pl,"DIV",{class:!0});var Y7=s(vt);T(r9.$$.fragment,Y7),idr=i(Y7),f1e=n(Y7,"P",{});var Byt=s(f1e);ddr=r(Byt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Byt.forEach(t),cdr=i(Y7),wd=n(Y7,"P",{});var Hte=s(wd);mdr=r(Hte,`Note:
Loading a model from its configuration file does `),g1e=n(Hte,"STRONG",{});var Iyt=s(g1e);fdr=r(Iyt,"not"),Iyt.forEach(t),gdr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Hte,"A",{href:!0});var Nyt=s(tH);hdr=r(Nyt,"from_pretrained()"),Nyt.forEach(t),udr=r(Hte," to load the model weights."),Hte.forEach(t),pdr=i(Y7),T(RM.$$.fragment,Y7),Y7.forEach(t),_dr=i(pl),io=n(pl,"DIV",{class:!0});var va=s(io);T(t9.$$.fragment,va),bdr=i(va),h1e=n(va,"P",{});var qyt=s(h1e);vdr=r(qyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qyt.forEach(t),Fdr=i(va),Qa=n(va,"P",{});var K7=s(Qa);Tdr=r(K7,"The model class to instantiate is selected based on the "),u1e=n(K7,"CODE",{});var jyt=s(u1e);Mdr=r(jyt,"model_type"),jyt.forEach(t),Edr=r(K7,` property of the config object (either
passed as an argument or loaded from `),p1e=n(K7,"CODE",{});var Dyt=s(p1e);Cdr=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),wdr=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(K7,"CODE",{});var Gyt=s(_1e);Adr=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),Ldr=r(K7,":"),K7.forEach(t),ydr=i(va),be=n(va,"UL",{});var Fe=s(be);PM=n(Fe,"LI",{});var gqe=s(PM);b1e=n(gqe,"STRONG",{});var Oyt=s(b1e);xdr=r(Oyt,"beit"),Oyt.forEach(t),$dr=r(gqe," \u2014 "),aH=n(gqe,"A",{href:!0});var Vyt=s(aH);kdr=r(Vyt,"BeitForImageClassification"),Vyt.forEach(t),Sdr=r(gqe," (BEiT model)"),gqe.forEach(t),Rdr=i(Fe),BM=n(Fe,"LI",{});var hqe=s(BM);v1e=n(hqe,"STRONG",{});var Xyt=s(v1e);Pdr=r(Xyt,"convnext"),Xyt.forEach(t),Bdr=r(hqe," \u2014 "),nH=n(hqe,"A",{href:!0});var zyt=s(nH);Idr=r(zyt,"ConvNextForImageClassification"),zyt.forEach(t),Ndr=r(hqe," (ConvNeXT model)"),hqe.forEach(t),qdr=i(Fe),IM=n(Fe,"LI",{});var uqe=s(IM);F1e=n(uqe,"STRONG",{});var Wyt=s(F1e);jdr=r(Wyt,"cvt"),Wyt.forEach(t),Ddr=r(uqe," \u2014 "),sH=n(uqe,"A",{href:!0});var Qyt=s(sH);Gdr=r(Qyt,"CvtForImageClassification"),Qyt.forEach(t),Odr=r(uqe," (CvT model)"),uqe.forEach(t),Vdr=i(Fe),NM=n(Fe,"LI",{});var pqe=s(NM);T1e=n(pqe,"STRONG",{});var Hyt=s(T1e);Xdr=r(Hyt,"data2vec-vision"),Hyt.forEach(t),zdr=r(pqe," \u2014 "),lH=n(pqe,"A",{href:!0});var Uyt=s(lH);Wdr=r(Uyt,"Data2VecVisionForImageClassification"),Uyt.forEach(t),Qdr=r(pqe," (Data2VecVision model)"),pqe.forEach(t),Hdr=i(Fe),Ys=n(Fe,"LI",{});var oR=s(Ys);M1e=n(oR,"STRONG",{});var Jyt=s(M1e);Udr=r(Jyt,"deit"),Jyt.forEach(t),Jdr=r(oR," \u2014 "),iH=n(oR,"A",{href:!0});var Yyt=s(iH);Ydr=r(Yyt,"DeiTForImageClassification"),Yyt.forEach(t),Kdr=r(oR," or "),dH=n(oR,"A",{href:!0});var Kyt=s(dH);Zdr=r(Kyt,"DeiTForImageClassificationWithTeacher"),Kyt.forEach(t),ecr=r(oR," (DeiT model)"),oR.forEach(t),ocr=i(Fe),qM=n(Fe,"LI",{});var _qe=s(qM);E1e=n(_qe,"STRONG",{});var Zyt=s(E1e);rcr=r(Zyt,"imagegpt"),Zyt.forEach(t),tcr=r(_qe," \u2014 "),cH=n(_qe,"A",{href:!0});var e8t=s(cH);acr=r(e8t,"ImageGPTForImageClassification"),e8t.forEach(t),ncr=r(_qe," (ImageGPT model)"),_qe.forEach(t),scr=i(Fe),Ks=n(Fe,"LI",{});var rR=s(Ks);C1e=n(rR,"STRONG",{});var o8t=s(C1e);lcr=r(o8t,"levit"),o8t.forEach(t),icr=r(rR," \u2014 "),mH=n(rR,"A",{href:!0});var r8t=s(mH);dcr=r(r8t,"LevitForImageClassification"),r8t.forEach(t),ccr=r(rR," or "),fH=n(rR,"A",{href:!0});var t8t=s(fH);mcr=r(t8t,"LevitForImageClassificationWithTeacher"),t8t.forEach(t),fcr=r(rR," (LeViT model)"),rR.forEach(t),gcr=i(Fe),jM=n(Fe,"LI",{});var bqe=s(jM);w1e=n(bqe,"STRONG",{});var a8t=s(w1e);hcr=r(a8t,"mobilevit"),a8t.forEach(t),ucr=r(bqe," \u2014 "),gH=n(bqe,"A",{href:!0});var n8t=s(gH);pcr=r(n8t,"MobileViTForImageClassification"),n8t.forEach(t),_cr=r(bqe," (MobileViT model)"),bqe.forEach(t),bcr=i(Fe),Ft=n(Fe,"LI",{});var Pm=s(Ft);A1e=n(Pm,"STRONG",{});var s8t=s(A1e);vcr=r(s8t,"perceiver"),s8t.forEach(t),Fcr=r(Pm," \u2014 "),hH=n(Pm,"A",{href:!0});var l8t=s(hH);Tcr=r(l8t,"PerceiverForImageClassificationLearned"),l8t.forEach(t),Mcr=r(Pm," or "),uH=n(Pm,"A",{href:!0});var i8t=s(uH);Ecr=r(i8t,"PerceiverForImageClassificationFourier"),i8t.forEach(t),Ccr=r(Pm," or "),pH=n(Pm,"A",{href:!0});var d8t=s(pH);wcr=r(d8t,"PerceiverForImageClassificationConvProcessing"),d8t.forEach(t),Acr=r(Pm," (Perceiver model)"),Pm.forEach(t),Lcr=i(Fe),DM=n(Fe,"LI",{});var vqe=s(DM);L1e=n(vqe,"STRONG",{});var c8t=s(L1e);ycr=r(c8t,"poolformer"),c8t.forEach(t),xcr=r(vqe," \u2014 "),_H=n(vqe,"A",{href:!0});var m8t=s(_H);$cr=r(m8t,"PoolFormerForImageClassification"),m8t.forEach(t),kcr=r(vqe," (PoolFormer model)"),vqe.forEach(t),Scr=i(Fe),GM=n(Fe,"LI",{});var Fqe=s(GM);y1e=n(Fqe,"STRONG",{});var f8t=s(y1e);Rcr=r(f8t,"regnet"),f8t.forEach(t),Pcr=r(Fqe," \u2014 "),bH=n(Fqe,"A",{href:!0});var g8t=s(bH);Bcr=r(g8t,"RegNetForImageClassification"),g8t.forEach(t),Icr=r(Fqe," (RegNet model)"),Fqe.forEach(t),Ncr=i(Fe),OM=n(Fe,"LI",{});var Tqe=s(OM);x1e=n(Tqe,"STRONG",{});var h8t=s(x1e);qcr=r(h8t,"resnet"),h8t.forEach(t),jcr=r(Tqe," \u2014 "),vH=n(Tqe,"A",{href:!0});var u8t=s(vH);Dcr=r(u8t,"ResNetForImageClassification"),u8t.forEach(t),Gcr=r(Tqe," (ResNet model)"),Tqe.forEach(t),Ocr=i(Fe),VM=n(Fe,"LI",{});var Mqe=s(VM);$1e=n(Mqe,"STRONG",{});var p8t=s($1e);Vcr=r(p8t,"segformer"),p8t.forEach(t),Xcr=r(Mqe," \u2014 "),FH=n(Mqe,"A",{href:!0});var _8t=s(FH);zcr=r(_8t,"SegformerForImageClassification"),_8t.forEach(t),Wcr=r(Mqe," (SegFormer model)"),Mqe.forEach(t),Qcr=i(Fe),XM=n(Fe,"LI",{});var Eqe=s(XM);k1e=n(Eqe,"STRONG",{});var b8t=s(k1e);Hcr=r(b8t,"swin"),b8t.forEach(t),Ucr=r(Eqe," \u2014 "),TH=n(Eqe,"A",{href:!0});var v8t=s(TH);Jcr=r(v8t,"SwinForImageClassification"),v8t.forEach(t),Ycr=r(Eqe," (Swin Transformer model)"),Eqe.forEach(t),Kcr=i(Fe),zM=n(Fe,"LI",{});var Cqe=s(zM);S1e=n(Cqe,"STRONG",{});var F8t=s(S1e);Zcr=r(F8t,"swinv2"),F8t.forEach(t),emr=r(Cqe," \u2014 "),MH=n(Cqe,"A",{href:!0});var T8t=s(MH);omr=r(T8t,"Swinv2ForImageClassification"),T8t.forEach(t),rmr=r(Cqe," (Swin Transformer V2 model)"),Cqe.forEach(t),tmr=i(Fe),WM=n(Fe,"LI",{});var wqe=s(WM);R1e=n(wqe,"STRONG",{});var M8t=s(R1e);amr=r(M8t,"van"),M8t.forEach(t),nmr=r(wqe," \u2014 "),EH=n(wqe,"A",{href:!0});var E8t=s(EH);smr=r(E8t,"VanForImageClassification"),E8t.forEach(t),lmr=r(wqe," (VAN model)"),wqe.forEach(t),imr=i(Fe),QM=n(Fe,"LI",{});var Aqe=s(QM);P1e=n(Aqe,"STRONG",{});var C8t=s(P1e);dmr=r(C8t,"vit"),C8t.forEach(t),cmr=r(Aqe," \u2014 "),CH=n(Aqe,"A",{href:!0});var w8t=s(CH);mmr=r(w8t,"ViTForImageClassification"),w8t.forEach(t),fmr=r(Aqe," (ViT model)"),Aqe.forEach(t),Fe.forEach(t),gmr=i(va),HM=n(va,"P",{});var Lqe=s(HM);hmr=r(Lqe,"The model is set in evaluation mode by default using "),B1e=n(Lqe,"CODE",{});var A8t=s(B1e);umr=r(A8t,"model.eval()"),A8t.forEach(t),pmr=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I1e=n(Lqe,"CODE",{});var L8t=s(I1e);_mr=r(L8t,"model.train()"),L8t.forEach(t),Lqe.forEach(t),bmr=i(va),T(UM.$$.fragment,va),va.forEach(t),pl.forEach(t),fWe=i(m),Ad=n(m,"H2",{class:!0});var bHe=s(Ad);JM=n(bHe,"A",{id:!0,class:!0,href:!0});var y8t=s(JM);N1e=n(y8t,"SPAN",{});var x8t=s(N1e);T(a9.$$.fragment,x8t),x8t.forEach(t),y8t.forEach(t),vmr=i(bHe),q1e=n(bHe,"SPAN",{});var $8t=s(q1e);Fmr=r($8t,"AutoModelForVision2Seq"),$8t.forEach(t),bHe.forEach(t),gWe=i(m),Xo=n(m,"DIV",{class:!0});var _l=s(Xo);T(n9.$$.fragment,_l),Tmr=i(_l),Ld=n(_l,"P",{});var Ute=s(Ld);Mmr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wH=n(Ute,"A",{href:!0});var k8t=s(wH);Emr=r(k8t,"from_pretrained()"),k8t.forEach(t),Cmr=r(Ute," class method or the "),AH=n(Ute,"A",{href:!0});var S8t=s(AH);wmr=r(S8t,"from_config()"),S8t.forEach(t),Amr=r(Ute,` class
method.`),Ute.forEach(t),Lmr=i(_l),s9=n(_l,"P",{});var vHe=s(s9);ymr=r(vHe,"This class cannot be instantiated directly using "),j1e=n(vHe,"CODE",{});var R8t=s(j1e);xmr=r(R8t,"__init__()"),R8t.forEach(t),$mr=r(vHe," (throws an error)."),vHe.forEach(t),kmr=i(_l),Tt=n(_l,"DIV",{class:!0});var Z7=s(Tt);T(l9.$$.fragment,Z7),Smr=i(Z7),D1e=n(Z7,"P",{});var P8t=s(D1e);Rmr=r(P8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P8t.forEach(t),Pmr=i(Z7),yd=n(Z7,"P",{});var Jte=s(yd);Bmr=r(Jte,`Note:
Loading a model from its configuration file does `),G1e=n(Jte,"STRONG",{});var B8t=s(G1e);Imr=r(B8t,"not"),B8t.forEach(t),Nmr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(Jte,"A",{href:!0});var I8t=s(LH);qmr=r(I8t,"from_pretrained()"),I8t.forEach(t),jmr=r(Jte," to load the model weights."),Jte.forEach(t),Dmr=i(Z7),T(YM.$$.fragment,Z7),Z7.forEach(t),Gmr=i(_l),co=n(_l,"DIV",{class:!0});var Fa=s(co);T(i9.$$.fragment,Fa),Omr=i(Fa),O1e=n(Fa,"P",{});var N8t=s(O1e);Vmr=r(N8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),N8t.forEach(t),Xmr=i(Fa),Ha=n(Fa,"P",{});var eL=s(Ha);zmr=r(eL,"The model class to instantiate is selected based on the "),V1e=n(eL,"CODE",{});var q8t=s(V1e);Wmr=r(q8t,"model_type"),q8t.forEach(t),Qmr=r(eL,` property of the config object (either
passed as an argument or loaded from `),X1e=n(eL,"CODE",{});var j8t=s(X1e);Hmr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),Umr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(eL,"CODE",{});var D8t=s(z1e);Jmr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),Ymr=r(eL,":"),eL.forEach(t),Kmr=i(Fa),W1e=n(Fa,"UL",{});var G8t=s(W1e);KM=n(G8t,"LI",{});var yqe=s(KM);Q1e=n(yqe,"STRONG",{});var O8t=s(Q1e);Zmr=r(O8t,"vision-encoder-decoder"),O8t.forEach(t),efr=r(yqe," \u2014 "),yH=n(yqe,"A",{href:!0});var V8t=s(yH);ofr=r(V8t,"VisionEncoderDecoderModel"),V8t.forEach(t),rfr=r(yqe," (Vision Encoder decoder model)"),yqe.forEach(t),G8t.forEach(t),tfr=i(Fa),ZM=n(Fa,"P",{});var xqe=s(ZM);afr=r(xqe,"The model is set in evaluation mode by default using "),H1e=n(xqe,"CODE",{});var X8t=s(H1e);nfr=r(X8t,"model.eval()"),X8t.forEach(t),sfr=r(xqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=n(xqe,"CODE",{});var z8t=s(U1e);lfr=r(z8t,"model.train()"),z8t.forEach(t),xqe.forEach(t),ifr=i(Fa),T(e4.$$.fragment,Fa),Fa.forEach(t),_l.forEach(t),hWe=i(m),xd=n(m,"H2",{class:!0});var FHe=s(xd);o4=n(FHe,"A",{id:!0,class:!0,href:!0});var W8t=s(o4);J1e=n(W8t,"SPAN",{});var Q8t=s(J1e);T(d9.$$.fragment,Q8t),Q8t.forEach(t),W8t.forEach(t),dfr=i(FHe),Y1e=n(FHe,"SPAN",{});var H8t=s(Y1e);cfr=r(H8t,"AutoModelForVisualQuestionAnswering"),H8t.forEach(t),FHe.forEach(t),uWe=i(m),zo=n(m,"DIV",{class:!0});var bl=s(zo);T(c9.$$.fragment,bl),mfr=i(bl),$d=n(bl,"P",{});var Yte=s($d);ffr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),xH=n(Yte,"A",{href:!0});var U8t=s(xH);gfr=r(U8t,"from_pretrained()"),U8t.forEach(t),hfr=r(Yte," class method or the "),$H=n(Yte,"A",{href:!0});var J8t=s($H);ufr=r(J8t,"from_config()"),J8t.forEach(t),pfr=r(Yte,` class
method.`),Yte.forEach(t),_fr=i(bl),m9=n(bl,"P",{});var THe=s(m9);bfr=r(THe,"This class cannot be instantiated directly using "),K1e=n(THe,"CODE",{});var Y8t=s(K1e);vfr=r(Y8t,"__init__()"),Y8t.forEach(t),Ffr=r(THe," (throws an error)."),THe.forEach(t),Tfr=i(bl),Mt=n(bl,"DIV",{class:!0});var oL=s(Mt);T(f9.$$.fragment,oL),Mfr=i(oL),Z1e=n(oL,"P",{});var K8t=s(Z1e);Efr=r(K8t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),K8t.forEach(t),Cfr=i(oL),kd=n(oL,"P",{});var Kte=s(kd);wfr=r(Kte,`Note:
Loading a model from its configuration file does `),eFe=n(Kte,"STRONG",{});var Z8t=s(eFe);Afr=r(Z8t,"not"),Z8t.forEach(t),Lfr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(Kte,"A",{href:!0});var e9t=s(kH);yfr=r(e9t,"from_pretrained()"),e9t.forEach(t),xfr=r(Kte," to load the model weights."),Kte.forEach(t),$fr=i(oL),T(r4.$$.fragment,oL),oL.forEach(t),kfr=i(bl),mo=n(bl,"DIV",{class:!0});var Ta=s(mo);T(g9.$$.fragment,Ta),Sfr=i(Ta),oFe=n(Ta,"P",{});var o9t=s(oFe);Rfr=r(o9t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),o9t.forEach(t),Pfr=i(Ta),Ua=n(Ta,"P",{});var rL=s(Ua);Bfr=r(rL,"The model class to instantiate is selected based on the "),rFe=n(rL,"CODE",{});var r9t=s(rFe);Ifr=r(r9t,"model_type"),r9t.forEach(t),Nfr=r(rL,` property of the config object (either
passed as an argument or loaded from `),tFe=n(rL,"CODE",{});var t9t=s(tFe);qfr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),jfr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(rL,"CODE",{});var a9t=s(aFe);Dfr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),Gfr=r(rL,":"),rL.forEach(t),Ofr=i(Ta),nFe=n(Ta,"UL",{});var n9t=s(nFe);t4=n(n9t,"LI",{});var $qe=s(t4);sFe=n($qe,"STRONG",{});var s9t=s(sFe);Vfr=r(s9t,"vilt"),s9t.forEach(t),Xfr=r($qe," \u2014 "),SH=n($qe,"A",{href:!0});var l9t=s(SH);zfr=r(l9t,"ViltForQuestionAnswering"),l9t.forEach(t),Wfr=r($qe," (ViLT model)"),$qe.forEach(t),n9t.forEach(t),Qfr=i(Ta),a4=n(Ta,"P",{});var kqe=s(a4);Hfr=r(kqe,"The model is set in evaluation mode by default using "),lFe=n(kqe,"CODE",{});var i9t=s(lFe);Ufr=r(i9t,"model.eval()"),i9t.forEach(t),Jfr=r(kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=n(kqe,"CODE",{});var d9t=s(iFe);Yfr=r(d9t,"model.train()"),d9t.forEach(t),kqe.forEach(t),Kfr=i(Ta),T(n4.$$.fragment,Ta),Ta.forEach(t),bl.forEach(t),pWe=i(m),Sd=n(m,"H2",{class:!0});var MHe=s(Sd);s4=n(MHe,"A",{id:!0,class:!0,href:!0});var c9t=s(s4);dFe=n(c9t,"SPAN",{});var m9t=s(dFe);T(h9.$$.fragment,m9t),m9t.forEach(t),c9t.forEach(t),Zfr=i(MHe),cFe=n(MHe,"SPAN",{});var f9t=s(cFe);egr=r(f9t,"AutoModelForAudioClassification"),f9t.forEach(t),MHe.forEach(t),_We=i(m),Wo=n(m,"DIV",{class:!0});var vl=s(Wo);T(u9.$$.fragment,vl),ogr=i(vl),Rd=n(vl,"P",{});var Zte=s(Rd);rgr=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),RH=n(Zte,"A",{href:!0});var g9t=s(RH);tgr=r(g9t,"from_pretrained()"),g9t.forEach(t),agr=r(Zte," class method or the "),PH=n(Zte,"A",{href:!0});var h9t=s(PH);ngr=r(h9t,"from_config()"),h9t.forEach(t),sgr=r(Zte,` class
method.`),Zte.forEach(t),lgr=i(vl),p9=n(vl,"P",{});var EHe=s(p9);igr=r(EHe,"This class cannot be instantiated directly using "),mFe=n(EHe,"CODE",{});var u9t=s(mFe);dgr=r(u9t,"__init__()"),u9t.forEach(t),cgr=r(EHe," (throws an error)."),EHe.forEach(t),mgr=i(vl),Et=n(vl,"DIV",{class:!0});var tL=s(Et);T(_9.$$.fragment,tL),fgr=i(tL),fFe=n(tL,"P",{});var p9t=s(fFe);ggr=r(p9t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),p9t.forEach(t),hgr=i(tL),Pd=n(tL,"P",{});var eae=s(Pd);ugr=r(eae,`Note:
Loading a model from its configuration file does `),gFe=n(eae,"STRONG",{});var _9t=s(gFe);pgr=r(_9t,"not"),_9t.forEach(t),_gr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(eae,"A",{href:!0});var b9t=s(BH);bgr=r(b9t,"from_pretrained()"),b9t.forEach(t),vgr=r(eae," to load the model weights."),eae.forEach(t),Fgr=i(tL),T(l4.$$.fragment,tL),tL.forEach(t),Tgr=i(vl),fo=n(vl,"DIV",{class:!0});var Ma=s(fo);T(b9.$$.fragment,Ma),Mgr=i(Ma),hFe=n(Ma,"P",{});var v9t=s(hFe);Egr=r(v9t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),v9t.forEach(t),Cgr=i(Ma),Ja=n(Ma,"P",{});var aL=s(Ja);wgr=r(aL,"The model class to instantiate is selected based on the "),uFe=n(aL,"CODE",{});var F9t=s(uFe);Agr=r(F9t,"model_type"),F9t.forEach(t),Lgr=r(aL,` property of the config object (either
passed as an argument or loaded from `),pFe=n(aL,"CODE",{});var T9t=s(pFe);ygr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),xgr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(aL,"CODE",{});var M9t=s(_Fe);$gr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),kgr=r(aL,":"),aL.forEach(t),Sgr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);i4=n(We,"LI",{});var Sqe=s(i4);bFe=n(Sqe,"STRONG",{});var E9t=s(bFe);Rgr=r(E9t,"data2vec-audio"),E9t.forEach(t),Pgr=r(Sqe," \u2014 "),IH=n(Sqe,"A",{href:!0});var C9t=s(IH);Bgr=r(C9t,"Data2VecAudioForSequenceClassification"),C9t.forEach(t),Igr=r(Sqe," (Data2VecAudio model)"),Sqe.forEach(t),Ngr=i(We),d4=n(We,"LI",{});var Rqe=s(d4);vFe=n(Rqe,"STRONG",{});var w9t=s(vFe);qgr=r(w9t,"hubert"),w9t.forEach(t),jgr=r(Rqe," \u2014 "),NH=n(Rqe,"A",{href:!0});var A9t=s(NH);Dgr=r(A9t,"HubertForSequenceClassification"),A9t.forEach(t),Ggr=r(Rqe," (Hubert model)"),Rqe.forEach(t),Ogr=i(We),c4=n(We,"LI",{});var Pqe=s(c4);FFe=n(Pqe,"STRONG",{});var L9t=s(FFe);Vgr=r(L9t,"sew"),L9t.forEach(t),Xgr=r(Pqe," \u2014 "),qH=n(Pqe,"A",{href:!0});var y9t=s(qH);zgr=r(y9t,"SEWForSequenceClassification"),y9t.forEach(t),Wgr=r(Pqe," (SEW model)"),Pqe.forEach(t),Qgr=i(We),m4=n(We,"LI",{});var Bqe=s(m4);TFe=n(Bqe,"STRONG",{});var x9t=s(TFe);Hgr=r(x9t,"sew-d"),x9t.forEach(t),Ugr=r(Bqe," \u2014 "),jH=n(Bqe,"A",{href:!0});var $9t=s(jH);Jgr=r($9t,"SEWDForSequenceClassification"),$9t.forEach(t),Ygr=r(Bqe," (SEW-D model)"),Bqe.forEach(t),Kgr=i(We),f4=n(We,"LI",{});var Iqe=s(f4);MFe=n(Iqe,"STRONG",{});var k9t=s(MFe);Zgr=r(k9t,"unispeech"),k9t.forEach(t),ehr=r(Iqe," \u2014 "),DH=n(Iqe,"A",{href:!0});var S9t=s(DH);ohr=r(S9t,"UniSpeechForSequenceClassification"),S9t.forEach(t),rhr=r(Iqe," (UniSpeech model)"),Iqe.forEach(t),thr=i(We),g4=n(We,"LI",{});var Nqe=s(g4);EFe=n(Nqe,"STRONG",{});var R9t=s(EFe);ahr=r(R9t,"unispeech-sat"),R9t.forEach(t),nhr=r(Nqe," \u2014 "),GH=n(Nqe,"A",{href:!0});var P9t=s(GH);shr=r(P9t,"UniSpeechSatForSequenceClassification"),P9t.forEach(t),lhr=r(Nqe," (UniSpeechSat model)"),Nqe.forEach(t),ihr=i(We),h4=n(We,"LI",{});var qqe=s(h4);CFe=n(qqe,"STRONG",{});var B9t=s(CFe);dhr=r(B9t,"wav2vec2"),B9t.forEach(t),chr=r(qqe," \u2014 "),OH=n(qqe,"A",{href:!0});var I9t=s(OH);mhr=r(I9t,"Wav2Vec2ForSequenceClassification"),I9t.forEach(t),fhr=r(qqe," (Wav2Vec2 model)"),qqe.forEach(t),ghr=i(We),u4=n(We,"LI",{});var jqe=s(u4);wFe=n(jqe,"STRONG",{});var N9t=s(wFe);hhr=r(N9t,"wav2vec2-conformer"),N9t.forEach(t),uhr=r(jqe," \u2014 "),VH=n(jqe,"A",{href:!0});var q9t=s(VH);phr=r(q9t,"Wav2Vec2ConformerForSequenceClassification"),q9t.forEach(t),_hr=r(jqe," (Wav2Vec2-Conformer model)"),jqe.forEach(t),bhr=i(We),p4=n(We,"LI",{});var Dqe=s(p4);AFe=n(Dqe,"STRONG",{});var j9t=s(AFe);vhr=r(j9t,"wavlm"),j9t.forEach(t),Fhr=r(Dqe," \u2014 "),XH=n(Dqe,"A",{href:!0});var D9t=s(XH);Thr=r(D9t,"WavLMForSequenceClassification"),D9t.forEach(t),Mhr=r(Dqe," (WavLM model)"),Dqe.forEach(t),We.forEach(t),Ehr=i(Ma),_4=n(Ma,"P",{});var Gqe=s(_4);Chr=r(Gqe,"The model is set in evaluation mode by default using "),LFe=n(Gqe,"CODE",{});var G9t=s(LFe);whr=r(G9t,"model.eval()"),G9t.forEach(t),Ahr=r(Gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=n(Gqe,"CODE",{});var O9t=s(yFe);Lhr=r(O9t,"model.train()"),O9t.forEach(t),Gqe.forEach(t),yhr=i(Ma),T(b4.$$.fragment,Ma),Ma.forEach(t),vl.forEach(t),bWe=i(m),Bd=n(m,"H2",{class:!0});var CHe=s(Bd);v4=n(CHe,"A",{id:!0,class:!0,href:!0});var V9t=s(v4);xFe=n(V9t,"SPAN",{});var X9t=s(xFe);T(v9.$$.fragment,X9t),X9t.forEach(t),V9t.forEach(t),xhr=i(CHe),$Fe=n(CHe,"SPAN",{});var z9t=s($Fe);$hr=r(z9t,"AutoModelForAudioFrameClassification"),z9t.forEach(t),CHe.forEach(t),vWe=i(m),Qo=n(m,"DIV",{class:!0});var Fl=s(Qo);T(F9.$$.fragment,Fl),khr=i(Fl),Id=n(Fl,"P",{});var oae=s(Id);Shr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zH=n(oae,"A",{href:!0});var W9t=s(zH);Rhr=r(W9t,"from_pretrained()"),W9t.forEach(t),Phr=r(oae," class method or the "),WH=n(oae,"A",{href:!0});var Q9t=s(WH);Bhr=r(Q9t,"from_config()"),Q9t.forEach(t),Ihr=r(oae,` class
method.`),oae.forEach(t),Nhr=i(Fl),T9=n(Fl,"P",{});var wHe=s(T9);qhr=r(wHe,"This class cannot be instantiated directly using "),kFe=n(wHe,"CODE",{});var H9t=s(kFe);jhr=r(H9t,"__init__()"),H9t.forEach(t),Dhr=r(wHe," (throws an error)."),wHe.forEach(t),Ghr=i(Fl),Ct=n(Fl,"DIV",{class:!0});var nL=s(Ct);T(M9.$$.fragment,nL),Ohr=i(nL),SFe=n(nL,"P",{});var U9t=s(SFe);Vhr=r(U9t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),U9t.forEach(t),Xhr=i(nL),Nd=n(nL,"P",{});var rae=s(Nd);zhr=r(rae,`Note:
Loading a model from its configuration file does `),RFe=n(rae,"STRONG",{});var J9t=s(RFe);Whr=r(J9t,"not"),J9t.forEach(t),Qhr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(rae,"A",{href:!0});var Y9t=s(QH);Hhr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),Uhr=r(rae," to load the model weights."),rae.forEach(t),Jhr=i(nL),T(F4.$$.fragment,nL),nL.forEach(t),Yhr=i(Fl),go=n(Fl,"DIV",{class:!0});var Ea=s(go);T(E9.$$.fragment,Ea),Khr=i(Ea),PFe=n(Ea,"P",{});var K9t=s(PFe);Zhr=r(K9t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),K9t.forEach(t),eur=i(Ea),Ya=n(Ea,"P",{});var sL=s(Ya);our=r(sL,"The model class to instantiate is selected based on the "),BFe=n(sL,"CODE",{});var Z9t=s(BFe);rur=r(Z9t,"model_type"),Z9t.forEach(t),tur=r(sL,` property of the config object (either
passed as an argument or loaded from `),IFe=n(sL,"CODE",{});var ext=s(IFe);aur=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),nur=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(sL,"CODE",{});var oxt=s(NFe);sur=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),lur=r(sL,":"),sL.forEach(t),iur=i(Ea),rt=n(Ea,"UL",{});var Tl=s(rt);T4=n(Tl,"LI",{});var Oqe=s(T4);qFe=n(Oqe,"STRONG",{});var rxt=s(qFe);dur=r(rxt,"data2vec-audio"),rxt.forEach(t),cur=r(Oqe," \u2014 "),HH=n(Oqe,"A",{href:!0});var txt=s(HH);mur=r(txt,"Data2VecAudioForAudioFrameClassification"),txt.forEach(t),fur=r(Oqe," (Data2VecAudio model)"),Oqe.forEach(t),gur=i(Tl),M4=n(Tl,"LI",{});var Vqe=s(M4);jFe=n(Vqe,"STRONG",{});var axt=s(jFe);hur=r(axt,"unispeech-sat"),axt.forEach(t),uur=r(Vqe," \u2014 "),UH=n(Vqe,"A",{href:!0});var nxt=s(UH);pur=r(nxt,"UniSpeechSatForAudioFrameClassification"),nxt.forEach(t),_ur=r(Vqe," (UniSpeechSat model)"),Vqe.forEach(t),bur=i(Tl),E4=n(Tl,"LI",{});var Xqe=s(E4);DFe=n(Xqe,"STRONG",{});var sxt=s(DFe);vur=r(sxt,"wav2vec2"),sxt.forEach(t),Fur=r(Xqe," \u2014 "),JH=n(Xqe,"A",{href:!0});var lxt=s(JH);Tur=r(lxt,"Wav2Vec2ForAudioFrameClassification"),lxt.forEach(t),Mur=r(Xqe," (Wav2Vec2 model)"),Xqe.forEach(t),Eur=i(Tl),C4=n(Tl,"LI",{});var zqe=s(C4);GFe=n(zqe,"STRONG",{});var ixt=s(GFe);Cur=r(ixt,"wav2vec2-conformer"),ixt.forEach(t),wur=r(zqe," \u2014 "),YH=n(zqe,"A",{href:!0});var dxt=s(YH);Aur=r(dxt,"Wav2Vec2ConformerForAudioFrameClassification"),dxt.forEach(t),Lur=r(zqe," (Wav2Vec2-Conformer model)"),zqe.forEach(t),yur=i(Tl),w4=n(Tl,"LI",{});var Wqe=s(w4);OFe=n(Wqe,"STRONG",{});var cxt=s(OFe);xur=r(cxt,"wavlm"),cxt.forEach(t),$ur=r(Wqe," \u2014 "),KH=n(Wqe,"A",{href:!0});var mxt=s(KH);kur=r(mxt,"WavLMForAudioFrameClassification"),mxt.forEach(t),Sur=r(Wqe," (WavLM model)"),Wqe.forEach(t),Tl.forEach(t),Rur=i(Ea),A4=n(Ea,"P",{});var Qqe=s(A4);Pur=r(Qqe,"The model is set in evaluation mode by default using "),VFe=n(Qqe,"CODE",{});var fxt=s(VFe);Bur=r(fxt,"model.eval()"),fxt.forEach(t),Iur=r(Qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XFe=n(Qqe,"CODE",{});var gxt=s(XFe);Nur=r(gxt,"model.train()"),gxt.forEach(t),Qqe.forEach(t),qur=i(Ea),T(L4.$$.fragment,Ea),Ea.forEach(t),Fl.forEach(t),FWe=i(m),qd=n(m,"H2",{class:!0});var AHe=s(qd);y4=n(AHe,"A",{id:!0,class:!0,href:!0});var hxt=s(y4);zFe=n(hxt,"SPAN",{});var uxt=s(zFe);T(C9.$$.fragment,uxt),uxt.forEach(t),hxt.forEach(t),jur=i(AHe),WFe=n(AHe,"SPAN",{});var pxt=s(WFe);Dur=r(pxt,"AutoModelForCTC"),pxt.forEach(t),AHe.forEach(t),TWe=i(m),Ho=n(m,"DIV",{class:!0});var Ml=s(Ho);T(w9.$$.fragment,Ml),Gur=i(Ml),jd=n(Ml,"P",{});var tae=s(jd);Our=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZH=n(tae,"A",{href:!0});var _xt=s(ZH);Vur=r(_xt,"from_pretrained()"),_xt.forEach(t),Xur=r(tae," class method or the "),eU=n(tae,"A",{href:!0});var bxt=s(eU);zur=r(bxt,"from_config()"),bxt.forEach(t),Wur=r(tae,` class
method.`),tae.forEach(t),Qur=i(Ml),A9=n(Ml,"P",{});var LHe=s(A9);Hur=r(LHe,"This class cannot be instantiated directly using "),QFe=n(LHe,"CODE",{});var vxt=s(QFe);Uur=r(vxt,"__init__()"),vxt.forEach(t),Jur=r(LHe," (throws an error)."),LHe.forEach(t),Yur=i(Ml),wt=n(Ml,"DIV",{class:!0});var lL=s(wt);T(L9.$$.fragment,lL),Kur=i(lL),HFe=n(lL,"P",{});var Fxt=s(HFe);Zur=r(Fxt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fxt.forEach(t),epr=i(lL),Dd=n(lL,"P",{});var aae=s(Dd);opr=r(aae,`Note:
Loading a model from its configuration file does `),UFe=n(aae,"STRONG",{});var Txt=s(UFe);rpr=r(Txt,"not"),Txt.forEach(t),tpr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(aae,"A",{href:!0});var Mxt=s(oU);apr=r(Mxt,"from_pretrained()"),Mxt.forEach(t),npr=r(aae," to load the model weights."),aae.forEach(t),spr=i(lL),T(x4.$$.fragment,lL),lL.forEach(t),lpr=i(Ml),ho=n(Ml,"DIV",{class:!0});var Ca=s(ho);T(y9.$$.fragment,Ca),ipr=i(Ca),JFe=n(Ca,"P",{});var Ext=s(JFe);dpr=r(Ext,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ext.forEach(t),cpr=i(Ca),Ka=n(Ca,"P",{});var iL=s(Ka);mpr=r(iL,"The model class to instantiate is selected based on the "),YFe=n(iL,"CODE",{});var Cxt=s(YFe);fpr=r(Cxt,"model_type"),Cxt.forEach(t),gpr=r(iL,` property of the config object (either
passed as an argument or loaded from `),KFe=n(iL,"CODE",{});var wxt=s(KFe);hpr=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),upr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(iL,"CODE",{});var Axt=s(ZFe);ppr=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),_pr=r(iL,":"),iL.forEach(t),bpr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);$4=n(Be,"LI",{});var Hqe=s($4);eTe=n(Hqe,"STRONG",{});var Lxt=s(eTe);vpr=r(Lxt,"data2vec-audio"),Lxt.forEach(t),Fpr=r(Hqe," \u2014 "),rU=n(Hqe,"A",{href:!0});var yxt=s(rU);Tpr=r(yxt,"Data2VecAudioForCTC"),yxt.forEach(t),Mpr=r(Hqe," (Data2VecAudio model)"),Hqe.forEach(t),Epr=i(Be),k4=n(Be,"LI",{});var Uqe=s(k4);oTe=n(Uqe,"STRONG",{});var xxt=s(oTe);Cpr=r(xxt,"hubert"),xxt.forEach(t),wpr=r(Uqe," \u2014 "),tU=n(Uqe,"A",{href:!0});var $xt=s(tU);Apr=r($xt,"HubertForCTC"),$xt.forEach(t),Lpr=r(Uqe," (Hubert model)"),Uqe.forEach(t),ypr=i(Be),S4=n(Be,"LI",{});var Jqe=s(S4);rTe=n(Jqe,"STRONG",{});var kxt=s(rTe);xpr=r(kxt,"mctct"),kxt.forEach(t),$pr=r(Jqe," \u2014 "),aU=n(Jqe,"A",{href:!0});var Sxt=s(aU);kpr=r(Sxt,"MCTCTForCTC"),Sxt.forEach(t),Spr=r(Jqe," (M-CTC-T model)"),Jqe.forEach(t),Rpr=i(Be),R4=n(Be,"LI",{});var Yqe=s(R4);tTe=n(Yqe,"STRONG",{});var Rxt=s(tTe);Ppr=r(Rxt,"sew"),Rxt.forEach(t),Bpr=r(Yqe," \u2014 "),nU=n(Yqe,"A",{href:!0});var Pxt=s(nU);Ipr=r(Pxt,"SEWForCTC"),Pxt.forEach(t),Npr=r(Yqe," (SEW model)"),Yqe.forEach(t),qpr=i(Be),P4=n(Be,"LI",{});var Kqe=s(P4);aTe=n(Kqe,"STRONG",{});var Bxt=s(aTe);jpr=r(Bxt,"sew-d"),Bxt.forEach(t),Dpr=r(Kqe," \u2014 "),sU=n(Kqe,"A",{href:!0});var Ixt=s(sU);Gpr=r(Ixt,"SEWDForCTC"),Ixt.forEach(t),Opr=r(Kqe," (SEW-D model)"),Kqe.forEach(t),Vpr=i(Be),B4=n(Be,"LI",{});var Zqe=s(B4);nTe=n(Zqe,"STRONG",{});var Nxt=s(nTe);Xpr=r(Nxt,"unispeech"),Nxt.forEach(t),zpr=r(Zqe," \u2014 "),lU=n(Zqe,"A",{href:!0});var qxt=s(lU);Wpr=r(qxt,"UniSpeechForCTC"),qxt.forEach(t),Qpr=r(Zqe," (UniSpeech model)"),Zqe.forEach(t),Hpr=i(Be),I4=n(Be,"LI",{});var eje=s(I4);sTe=n(eje,"STRONG",{});var jxt=s(sTe);Upr=r(jxt,"unispeech-sat"),jxt.forEach(t),Jpr=r(eje," \u2014 "),iU=n(eje,"A",{href:!0});var Dxt=s(iU);Ypr=r(Dxt,"UniSpeechSatForCTC"),Dxt.forEach(t),Kpr=r(eje," (UniSpeechSat model)"),eje.forEach(t),Zpr=i(Be),N4=n(Be,"LI",{});var oje=s(N4);lTe=n(oje,"STRONG",{});var Gxt=s(lTe);e_r=r(Gxt,"wav2vec2"),Gxt.forEach(t),o_r=r(oje," \u2014 "),dU=n(oje,"A",{href:!0});var Oxt=s(dU);r_r=r(Oxt,"Wav2Vec2ForCTC"),Oxt.forEach(t),t_r=r(oje," (Wav2Vec2 model)"),oje.forEach(t),a_r=i(Be),q4=n(Be,"LI",{});var rje=s(q4);iTe=n(rje,"STRONG",{});var Vxt=s(iTe);n_r=r(Vxt,"wav2vec2-conformer"),Vxt.forEach(t),s_r=r(rje," \u2014 "),cU=n(rje,"A",{href:!0});var Xxt=s(cU);l_r=r(Xxt,"Wav2Vec2ConformerForCTC"),Xxt.forEach(t),i_r=r(rje," (Wav2Vec2-Conformer model)"),rje.forEach(t),d_r=i(Be),j4=n(Be,"LI",{});var tje=s(j4);dTe=n(tje,"STRONG",{});var zxt=s(dTe);c_r=r(zxt,"wavlm"),zxt.forEach(t),m_r=r(tje," \u2014 "),mU=n(tje,"A",{href:!0});var Wxt=s(mU);f_r=r(Wxt,"WavLMForCTC"),Wxt.forEach(t),g_r=r(tje," (WavLM model)"),tje.forEach(t),Be.forEach(t),h_r=i(Ca),D4=n(Ca,"P",{});var aje=s(D4);u_r=r(aje,"The model is set in evaluation mode by default using "),cTe=n(aje,"CODE",{});var Qxt=s(cTe);p_r=r(Qxt,"model.eval()"),Qxt.forEach(t),__r=r(aje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mTe=n(aje,"CODE",{});var Hxt=s(mTe);b_r=r(Hxt,"model.train()"),Hxt.forEach(t),aje.forEach(t),v_r=i(Ca),T(G4.$$.fragment,Ca),Ca.forEach(t),Ml.forEach(t),MWe=i(m),Gd=n(m,"H2",{class:!0});var yHe=s(Gd);O4=n(yHe,"A",{id:!0,class:!0,href:!0});var Uxt=s(O4);fTe=n(Uxt,"SPAN",{});var Jxt=s(fTe);T(x9.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),F_r=i(yHe),gTe=n(yHe,"SPAN",{});var Yxt=s(gTe);T_r=r(Yxt,"AutoModelForSpeechSeq2Seq"),Yxt.forEach(t),yHe.forEach(t),EWe=i(m),Uo=n(m,"DIV",{class:!0});var El=s(Uo);T($9.$$.fragment,El),M_r=i(El),Od=n(El,"P",{});var nae=s(Od);E_r=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),fU=n(nae,"A",{href:!0});var Kxt=s(fU);C_r=r(Kxt,"from_pretrained()"),Kxt.forEach(t),w_r=r(nae," class method or the "),gU=n(nae,"A",{href:!0});var Zxt=s(gU);A_r=r(Zxt,"from_config()"),Zxt.forEach(t),L_r=r(nae,` class
method.`),nae.forEach(t),y_r=i(El),k9=n(El,"P",{});var xHe=s(k9);x_r=r(xHe,"This class cannot be instantiated directly using "),hTe=n(xHe,"CODE",{});var e$t=s(hTe);$_r=r(e$t,"__init__()"),e$t.forEach(t),k_r=r(xHe," (throws an error)."),xHe.forEach(t),S_r=i(El),At=n(El,"DIV",{class:!0});var dL=s(At);T(S9.$$.fragment,dL),R_r=i(dL),uTe=n(dL,"P",{});var o$t=s(uTe);P_r=r(o$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o$t.forEach(t),B_r=i(dL),Vd=n(dL,"P",{});var sae=s(Vd);I_r=r(sae,`Note:
Loading a model from its configuration file does `),pTe=n(sae,"STRONG",{});var r$t=s(pTe);N_r=r(r$t,"not"),r$t.forEach(t),q_r=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(sae,"A",{href:!0});var t$t=s(hU);j_r=r(t$t,"from_pretrained()"),t$t.forEach(t),D_r=r(sae," to load the model weights."),sae.forEach(t),G_r=i(dL),T(V4.$$.fragment,dL),dL.forEach(t),O_r=i(El),uo=n(El,"DIV",{class:!0});var wa=s(uo);T(R9.$$.fragment,wa),V_r=i(wa),_Te=n(wa,"P",{});var a$t=s(_Te);X_r=r(a$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a$t.forEach(t),z_r=i(wa),Za=n(wa,"P",{});var cL=s(Za);W_r=r(cL,"The model class to instantiate is selected based on the "),bTe=n(cL,"CODE",{});var n$t=s(bTe);Q_r=r(n$t,"model_type"),n$t.forEach(t),H_r=r(cL,` property of the config object (either
passed as an argument or loaded from `),vTe=n(cL,"CODE",{});var s$t=s(vTe);U_r=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),J_r=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(cL,"CODE",{});var l$t=s(FTe);Y_r=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),K_r=r(cL,":"),cL.forEach(t),Z_r=i(wa),P9=n(wa,"UL",{});var $He=s(P9);X4=n($He,"LI",{});var nje=s(X4);TTe=n(nje,"STRONG",{});var i$t=s(TTe);e2r=r(i$t,"speech-encoder-decoder"),i$t.forEach(t),o2r=r(nje," \u2014 "),uU=n(nje,"A",{href:!0});var d$t=s(uU);r2r=r(d$t,"SpeechEncoderDecoderModel"),d$t.forEach(t),t2r=r(nje," (Speech Encoder decoder model)"),nje.forEach(t),a2r=i($He),z4=n($He,"LI",{});var sje=s(z4);MTe=n(sje,"STRONG",{});var c$t=s(MTe);n2r=r(c$t,"speech_to_text"),c$t.forEach(t),s2r=r(sje," \u2014 "),pU=n(sje,"A",{href:!0});var m$t=s(pU);l2r=r(m$t,"Speech2TextForConditionalGeneration"),m$t.forEach(t),i2r=r(sje," (Speech2Text model)"),sje.forEach(t),$He.forEach(t),d2r=i(wa),W4=n(wa,"P",{});var lje=s(W4);c2r=r(lje,"The model is set in evaluation mode by default using "),ETe=n(lje,"CODE",{});var f$t=s(ETe);m2r=r(f$t,"model.eval()"),f$t.forEach(t),f2r=r(lje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CTe=n(lje,"CODE",{});var g$t=s(CTe);g2r=r(g$t,"model.train()"),g$t.forEach(t),lje.forEach(t),h2r=i(wa),T(Q4.$$.fragment,wa),wa.forEach(t),El.forEach(t),CWe=i(m),Xd=n(m,"H2",{class:!0});var kHe=s(Xd);H4=n(kHe,"A",{id:!0,class:!0,href:!0});var h$t=s(H4);wTe=n(h$t,"SPAN",{});var u$t=s(wTe);T(B9.$$.fragment,u$t),u$t.forEach(t),h$t.forEach(t),u2r=i(kHe),ATe=n(kHe,"SPAN",{});var p$t=s(ATe);p2r=r(p$t,"AutoModelForAudioXVector"),p$t.forEach(t),kHe.forEach(t),wWe=i(m),Jo=n(m,"DIV",{class:!0});var Cl=s(Jo);T(I9.$$.fragment,Cl),_2r=i(Cl),zd=n(Cl,"P",{});var lae=s(zd);b2r=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),_U=n(lae,"A",{href:!0});var _$t=s(_U);v2r=r(_$t,"from_pretrained()"),_$t.forEach(t),F2r=r(lae," class method or the "),bU=n(lae,"A",{href:!0});var b$t=s(bU);T2r=r(b$t,"from_config()"),b$t.forEach(t),M2r=r(lae,` class
method.`),lae.forEach(t),E2r=i(Cl),N9=n(Cl,"P",{});var SHe=s(N9);C2r=r(SHe,"This class cannot be instantiated directly using "),LTe=n(SHe,"CODE",{});var v$t=s(LTe);w2r=r(v$t,"__init__()"),v$t.forEach(t),A2r=r(SHe," (throws an error)."),SHe.forEach(t),L2r=i(Cl),Lt=n(Cl,"DIV",{class:!0});var mL=s(Lt);T(q9.$$.fragment,mL),y2r=i(mL),yTe=n(mL,"P",{});var F$t=s(yTe);x2r=r(F$t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),F$t.forEach(t),$2r=i(mL),Wd=n(mL,"P",{});var iae=s(Wd);k2r=r(iae,`Note:
Loading a model from its configuration file does `),xTe=n(iae,"STRONG",{});var T$t=s(xTe);S2r=r(T$t,"not"),T$t.forEach(t),R2r=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(iae,"A",{href:!0});var M$t=s(vU);P2r=r(M$t,"from_pretrained()"),M$t.forEach(t),B2r=r(iae," to load the model weights."),iae.forEach(t),I2r=i(mL),T(U4.$$.fragment,mL),mL.forEach(t),N2r=i(Cl),po=n(Cl,"DIV",{class:!0});var Aa=s(po);T(j9.$$.fragment,Aa),q2r=i(Aa),$Te=n(Aa,"P",{});var E$t=s($Te);j2r=r(E$t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),E$t.forEach(t),D2r=i(Aa),en=n(Aa,"P",{});var fL=s(en);G2r=r(fL,"The model class to instantiate is selected based on the "),kTe=n(fL,"CODE",{});var C$t=s(kTe);O2r=r(C$t,"model_type"),C$t.forEach(t),V2r=r(fL,` property of the config object (either
passed as an argument or loaded from `),STe=n(fL,"CODE",{});var w$t=s(STe);X2r=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),z2r=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(fL,"CODE",{});var A$t=s(RTe);W2r=r(A$t,"pretrained_model_name_or_path"),A$t.forEach(t),Q2r=r(fL,":"),fL.forEach(t),H2r=i(Aa),tt=n(Aa,"UL",{});var wl=s(tt);J4=n(wl,"LI",{});var ije=s(J4);PTe=n(ije,"STRONG",{});var L$t=s(PTe);U2r=r(L$t,"data2vec-audio"),L$t.forEach(t),J2r=r(ije," \u2014 "),FU=n(ije,"A",{href:!0});var y$t=s(FU);Y2r=r(y$t,"Data2VecAudioForXVector"),y$t.forEach(t),K2r=r(ije," (Data2VecAudio model)"),ije.forEach(t),Z2r=i(wl),Y4=n(wl,"LI",{});var dje=s(Y4);BTe=n(dje,"STRONG",{});var x$t=s(BTe);ebr=r(x$t,"unispeech-sat"),x$t.forEach(t),obr=r(dje," \u2014 "),TU=n(dje,"A",{href:!0});var $$t=s(TU);rbr=r($$t,"UniSpeechSatForXVector"),$$t.forEach(t),tbr=r(dje," (UniSpeechSat model)"),dje.forEach(t),abr=i(wl),K4=n(wl,"LI",{});var cje=s(K4);ITe=n(cje,"STRONG",{});var k$t=s(ITe);nbr=r(k$t,"wav2vec2"),k$t.forEach(t),sbr=r(cje," \u2014 "),MU=n(cje,"A",{href:!0});var S$t=s(MU);lbr=r(S$t,"Wav2Vec2ForXVector"),S$t.forEach(t),ibr=r(cje," (Wav2Vec2 model)"),cje.forEach(t),dbr=i(wl),Z4=n(wl,"LI",{});var mje=s(Z4);NTe=n(mje,"STRONG",{});var R$t=s(NTe);cbr=r(R$t,"wav2vec2-conformer"),R$t.forEach(t),mbr=r(mje," \u2014 "),EU=n(mje,"A",{href:!0});var P$t=s(EU);fbr=r(P$t,"Wav2Vec2ConformerForXVector"),P$t.forEach(t),gbr=r(mje," (Wav2Vec2-Conformer model)"),mje.forEach(t),hbr=i(wl),eE=n(wl,"LI",{});var fje=s(eE);qTe=n(fje,"STRONG",{});var B$t=s(qTe);ubr=r(B$t,"wavlm"),B$t.forEach(t),pbr=r(fje," \u2014 "),CU=n(fje,"A",{href:!0});var I$t=s(CU);_br=r(I$t,"WavLMForXVector"),I$t.forEach(t),bbr=r(fje," (WavLM model)"),fje.forEach(t),wl.forEach(t),vbr=i(Aa),oE=n(Aa,"P",{});var gje=s(oE);Fbr=r(gje,"The model is set in evaluation mode by default using "),jTe=n(gje,"CODE",{});var N$t=s(jTe);Tbr=r(N$t,"model.eval()"),N$t.forEach(t),Mbr=r(gje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DTe=n(gje,"CODE",{});var q$t=s(DTe);Ebr=r(q$t,"model.train()"),q$t.forEach(t),gje.forEach(t),Cbr=i(Aa),T(rE.$$.fragment,Aa),Aa.forEach(t),Cl.forEach(t),AWe=i(m),Qd=n(m,"H2",{class:!0});var RHe=s(Qd);tE=n(RHe,"A",{id:!0,class:!0,href:!0});var j$t=s(tE);GTe=n(j$t,"SPAN",{});var D$t=s(GTe);T(D9.$$.fragment,D$t),D$t.forEach(t),j$t.forEach(t),wbr=i(RHe),OTe=n(RHe,"SPAN",{});var G$t=s(OTe);Abr=r(G$t,"AutoModelForMaskedImageModeling"),G$t.forEach(t),RHe.forEach(t),LWe=i(m),Yo=n(m,"DIV",{class:!0});var Al=s(Yo);T(G9.$$.fragment,Al),Lbr=i(Al),Hd=n(Al,"P",{});var dae=s(Hd);ybr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wU=n(dae,"A",{href:!0});var O$t=s(wU);xbr=r(O$t,"from_pretrained()"),O$t.forEach(t),$br=r(dae," class method or the "),AU=n(dae,"A",{href:!0});var V$t=s(AU);kbr=r(V$t,"from_config()"),V$t.forEach(t),Sbr=r(dae,` class
method.`),dae.forEach(t),Rbr=i(Al),O9=n(Al,"P",{});var PHe=s(O9);Pbr=r(PHe,"This class cannot be instantiated directly using "),VTe=n(PHe,"CODE",{});var X$t=s(VTe);Bbr=r(X$t,"__init__()"),X$t.forEach(t),Ibr=r(PHe," (throws an error)."),PHe.forEach(t),Nbr=i(Al),yt=n(Al,"DIV",{class:!0});var gL=s(yt);T(V9.$$.fragment,gL),qbr=i(gL),XTe=n(gL,"P",{});var z$t=s(XTe);jbr=r(z$t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),z$t.forEach(t),Dbr=i(gL),Ud=n(gL,"P",{});var cae=s(Ud);Gbr=r(cae,`Note:
Loading a model from its configuration file does `),zTe=n(cae,"STRONG",{});var W$t=s(zTe);Obr=r(W$t,"not"),W$t.forEach(t),Vbr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(cae,"A",{href:!0});var Q$t=s(LU);Xbr=r(Q$t,"from_pretrained()"),Q$t.forEach(t),zbr=r(cae," to load the model weights."),cae.forEach(t),Wbr=i(gL),T(aE.$$.fragment,gL),gL.forEach(t),Qbr=i(Al),_o=n(Al,"DIV",{class:!0});var La=s(_o);T(X9.$$.fragment,La),Hbr=i(La),WTe=n(La,"P",{});var H$t=s(WTe);Ubr=r(H$t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),H$t.forEach(t),Jbr=i(La),on=n(La,"P",{});var hL=s(on);Ybr=r(hL,"The model class to instantiate is selected based on the "),QTe=n(hL,"CODE",{});var U$t=s(QTe);Kbr=r(U$t,"model_type"),U$t.forEach(t),Zbr=r(hL,` property of the config object (either
passed as an argument or loaded from `),HTe=n(hL,"CODE",{});var J$t=s(HTe);evr=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),ovr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(hL,"CODE",{});var Y$t=s(UTe);rvr=r(Y$t,"pretrained_model_name_or_path"),Y$t.forEach(t),tvr=r(hL,":"),hL.forEach(t),avr=i(La),rn=n(La,"UL",{});var uL=s(rn);nE=n(uL,"LI",{});var hje=s(nE);JTe=n(hje,"STRONG",{});var K$t=s(JTe);nvr=r(K$t,"deit"),K$t.forEach(t),svr=r(hje," \u2014 "),yU=n(hje,"A",{href:!0});var Z$t=s(yU);lvr=r(Z$t,"DeiTForMaskedImageModeling"),Z$t.forEach(t),ivr=r(hje," (DeiT model)"),hje.forEach(t),dvr=i(uL),sE=n(uL,"LI",{});var uje=s(sE);YTe=n(uje,"STRONG",{});var ekt=s(YTe);cvr=r(ekt,"swin"),ekt.forEach(t),mvr=r(uje," \u2014 "),xU=n(uje,"A",{href:!0});var okt=s(xU);fvr=r(okt,"SwinForMaskedImageModeling"),okt.forEach(t),gvr=r(uje," (Swin Transformer model)"),uje.forEach(t),hvr=i(uL),lE=n(uL,"LI",{});var pje=s(lE);KTe=n(pje,"STRONG",{});var rkt=s(KTe);uvr=r(rkt,"swinv2"),rkt.forEach(t),pvr=r(pje," \u2014 "),$U=n(pje,"A",{href:!0});var tkt=s($U);_vr=r(tkt,"Swinv2ForMaskedImageModeling"),tkt.forEach(t),bvr=r(pje," (Swin Transformer V2 model)"),pje.forEach(t),vvr=i(uL),iE=n(uL,"LI",{});var _je=s(iE);ZTe=n(_je,"STRONG",{});var akt=s(ZTe);Fvr=r(akt,"vit"),akt.forEach(t),Tvr=r(_je," \u2014 "),kU=n(_je,"A",{href:!0});var nkt=s(kU);Mvr=r(nkt,"ViTForMaskedImageModeling"),nkt.forEach(t),Evr=r(_je," (ViT model)"),_je.forEach(t),uL.forEach(t),Cvr=i(La),dE=n(La,"P",{});var bje=s(dE);wvr=r(bje,"The model is set in evaluation mode by default using "),eMe=n(bje,"CODE",{});var skt=s(eMe);Avr=r(skt,"model.eval()"),skt.forEach(t),Lvr=r(bje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oMe=n(bje,"CODE",{});var lkt=s(oMe);yvr=r(lkt,"model.train()"),lkt.forEach(t),bje.forEach(t),xvr=i(La),T(cE.$$.fragment,La),La.forEach(t),Al.forEach(t),yWe=i(m),Jd=n(m,"H2",{class:!0});var BHe=s(Jd);mE=n(BHe,"A",{id:!0,class:!0,href:!0});var ikt=s(mE);rMe=n(ikt,"SPAN",{});var dkt=s(rMe);T(z9.$$.fragment,dkt),dkt.forEach(t),ikt.forEach(t),$vr=i(BHe),tMe=n(BHe,"SPAN",{});var ckt=s(tMe);kvr=r(ckt,"AutoModelForObjectDetection"),ckt.forEach(t),BHe.forEach(t),xWe=i(m),Ko=n(m,"DIV",{class:!0});var Ll=s(Ko);T(W9.$$.fragment,Ll),Svr=i(Ll),Yd=n(Ll,"P",{});var mae=s(Yd);Rvr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SU=n(mae,"A",{href:!0});var mkt=s(SU);Pvr=r(mkt,"from_pretrained()"),mkt.forEach(t),Bvr=r(mae," class method or the "),RU=n(mae,"A",{href:!0});var fkt=s(RU);Ivr=r(fkt,"from_config()"),fkt.forEach(t),Nvr=r(mae,` class
method.`),mae.forEach(t),qvr=i(Ll),Q9=n(Ll,"P",{});var IHe=s(Q9);jvr=r(IHe,"This class cannot be instantiated directly using "),aMe=n(IHe,"CODE",{});var gkt=s(aMe);Dvr=r(gkt,"__init__()"),gkt.forEach(t),Gvr=r(IHe," (throws an error)."),IHe.forEach(t),Ovr=i(Ll),xt=n(Ll,"DIV",{class:!0});var pL=s(xt);T(H9.$$.fragment,pL),Vvr=i(pL),nMe=n(pL,"P",{});var hkt=s(nMe);Xvr=r(hkt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hkt.forEach(t),zvr=i(pL),Kd=n(pL,"P",{});var fae=s(Kd);Wvr=r(fae,`Note:
Loading a model from its configuration file does `),sMe=n(fae,"STRONG",{});var ukt=s(sMe);Qvr=r(ukt,"not"),ukt.forEach(t),Hvr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(fae,"A",{href:!0});var pkt=s(PU);Uvr=r(pkt,"from_pretrained()"),pkt.forEach(t),Jvr=r(fae," to load the model weights."),fae.forEach(t),Yvr=i(pL),T(fE.$$.fragment,pL),pL.forEach(t),Kvr=i(Ll),bo=n(Ll,"DIV",{class:!0});var ya=s(bo);T(U9.$$.fragment,ya),Zvr=i(ya),lMe=n(ya,"P",{});var _kt=s(lMe);e1r=r(_kt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_kt.forEach(t),o1r=i(ya),tn=n(ya,"P",{});var _L=s(tn);r1r=r(_L,"The model class to instantiate is selected based on the "),iMe=n(_L,"CODE",{});var bkt=s(iMe);t1r=r(bkt,"model_type"),bkt.forEach(t),a1r=r(_L,` property of the config object (either
passed as an argument or loaded from `),dMe=n(_L,"CODE",{});var vkt=s(dMe);n1r=r(vkt,"pretrained_model_name_or_path"),vkt.forEach(t),s1r=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(_L,"CODE",{});var Fkt=s(cMe);l1r=r(Fkt,"pretrained_model_name_or_path"),Fkt.forEach(t),i1r=r(_L,":"),_L.forEach(t),d1r=i(ya),J9=n(ya,"UL",{});var NHe=s(J9);gE=n(NHe,"LI",{});var vje=s(gE);mMe=n(vje,"STRONG",{});var Tkt=s(mMe);c1r=r(Tkt,"detr"),Tkt.forEach(t),m1r=r(vje," \u2014 "),BU=n(vje,"A",{href:!0});var Mkt=s(BU);f1r=r(Mkt,"DetrForObjectDetection"),Mkt.forEach(t),g1r=r(vje," (DETR model)"),vje.forEach(t),h1r=i(NHe),hE=n(NHe,"LI",{});var Fje=s(hE);fMe=n(Fje,"STRONG",{});var Ekt=s(fMe);u1r=r(Ekt,"yolos"),Ekt.forEach(t),p1r=r(Fje," \u2014 "),IU=n(Fje,"A",{href:!0});var Ckt=s(IU);_1r=r(Ckt,"YolosForObjectDetection"),Ckt.forEach(t),b1r=r(Fje," (YOLOS model)"),Fje.forEach(t),NHe.forEach(t),v1r=i(ya),uE=n(ya,"P",{});var Tje=s(uE);F1r=r(Tje,"The model is set in evaluation mode by default using "),gMe=n(Tje,"CODE",{});var wkt=s(gMe);T1r=r(wkt,"model.eval()"),wkt.forEach(t),M1r=r(Tje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hMe=n(Tje,"CODE",{});var Akt=s(hMe);E1r=r(Akt,"model.train()"),Akt.forEach(t),Tje.forEach(t),C1r=i(ya),T(pE.$$.fragment,ya),ya.forEach(t),Ll.forEach(t),$We=i(m),Zd=n(m,"H2",{class:!0});var qHe=s(Zd);_E=n(qHe,"A",{id:!0,class:!0,href:!0});var Lkt=s(_E);uMe=n(Lkt,"SPAN",{});var ykt=s(uMe);T(Y9.$$.fragment,ykt),ykt.forEach(t),Lkt.forEach(t),w1r=i(qHe),pMe=n(qHe,"SPAN",{});var xkt=s(pMe);A1r=r(xkt,"AutoModelForImageSegmentation"),xkt.forEach(t),qHe.forEach(t),kWe=i(m),Zo=n(m,"DIV",{class:!0});var yl=s(Zo);T(K9.$$.fragment,yl),L1r=i(yl),ec=n(yl,"P",{});var gae=s(ec);y1r=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NU=n(gae,"A",{href:!0});var $kt=s(NU);x1r=r($kt,"from_pretrained()"),$kt.forEach(t),$1r=r(gae," class method or the "),qU=n(gae,"A",{href:!0});var kkt=s(qU);k1r=r(kkt,"from_config()"),kkt.forEach(t),S1r=r(gae,` class
method.`),gae.forEach(t),R1r=i(yl),Z9=n(yl,"P",{});var jHe=s(Z9);P1r=r(jHe,"This class cannot be instantiated directly using "),_Me=n(jHe,"CODE",{});var Skt=s(_Me);B1r=r(Skt,"__init__()"),Skt.forEach(t),I1r=r(jHe," (throws an error)."),jHe.forEach(t),N1r=i(yl),$t=n(yl,"DIV",{class:!0});var bL=s($t);T(ex.$$.fragment,bL),q1r=i(bL),bMe=n(bL,"P",{});var Rkt=s(bMe);j1r=r(Rkt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rkt.forEach(t),D1r=i(bL),oc=n(bL,"P",{});var hae=s(oc);G1r=r(hae,`Note:
Loading a model from its configuration file does `),vMe=n(hae,"STRONG",{});var Pkt=s(vMe);O1r=r(Pkt,"not"),Pkt.forEach(t),V1r=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(hae,"A",{href:!0});var Bkt=s(jU);X1r=r(Bkt,"from_pretrained()"),Bkt.forEach(t),z1r=r(hae," to load the model weights."),hae.forEach(t),W1r=i(bL),T(bE.$$.fragment,bL),bL.forEach(t),Q1r=i(yl),vo=n(yl,"DIV",{class:!0});var xa=s(vo);T(ox.$$.fragment,xa),H1r=i(xa),FMe=n(xa,"P",{});var Ikt=s(FMe);U1r=r(Ikt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ikt.forEach(t),J1r=i(xa),an=n(xa,"P",{});var vL=s(an);Y1r=r(vL,"The model class to instantiate is selected based on the "),TMe=n(vL,"CODE",{});var Nkt=s(TMe);K1r=r(Nkt,"model_type"),Nkt.forEach(t),Z1r=r(vL,` property of the config object (either
passed as an argument or loaded from `),MMe=n(vL,"CODE",{});var qkt=s(MMe);eFr=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),oFr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=n(vL,"CODE",{});var jkt=s(EMe);rFr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),tFr=r(vL,":"),vL.forEach(t),aFr=i(xa),CMe=n(xa,"UL",{});var Dkt=s(CMe);vE=n(Dkt,"LI",{});var Mje=s(vE);wMe=n(Mje,"STRONG",{});var Gkt=s(wMe);nFr=r(Gkt,"detr"),Gkt.forEach(t),sFr=r(Mje," \u2014 "),DU=n(Mje,"A",{href:!0});var Okt=s(DU);lFr=r(Okt,"DetrForSegmentation"),Okt.forEach(t),iFr=r(Mje," (DETR model)"),Mje.forEach(t),Dkt.forEach(t),dFr=i(xa),FE=n(xa,"P",{});var Eje=s(FE);cFr=r(Eje,"The model is set in evaluation mode by default using "),AMe=n(Eje,"CODE",{});var Vkt=s(AMe);mFr=r(Vkt,"model.eval()"),Vkt.forEach(t),fFr=r(Eje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LMe=n(Eje,"CODE",{});var Xkt=s(LMe);gFr=r(Xkt,"model.train()"),Xkt.forEach(t),Eje.forEach(t),hFr=i(xa),T(TE.$$.fragment,xa),xa.forEach(t),yl.forEach(t),SWe=i(m),rc=n(m,"H2",{class:!0});var DHe=s(rc);ME=n(DHe,"A",{id:!0,class:!0,href:!0});var zkt=s(ME);yMe=n(zkt,"SPAN",{});var Wkt=s(yMe);T(rx.$$.fragment,Wkt),Wkt.forEach(t),zkt.forEach(t),uFr=i(DHe),xMe=n(DHe,"SPAN",{});var Qkt=s(xMe);pFr=r(Qkt,"AutoModelForSemanticSegmentation"),Qkt.forEach(t),DHe.forEach(t),RWe=i(m),er=n(m,"DIV",{class:!0});var xl=s(er);T(tx.$$.fragment,xl),_Fr=i(xl),tc=n(xl,"P",{});var uae=s(tc);bFr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GU=n(uae,"A",{href:!0});var Hkt=s(GU);vFr=r(Hkt,"from_pretrained()"),Hkt.forEach(t),FFr=r(uae," class method or the "),OU=n(uae,"A",{href:!0});var Ukt=s(OU);TFr=r(Ukt,"from_config()"),Ukt.forEach(t),MFr=r(uae,` class
method.`),uae.forEach(t),EFr=i(xl),ax=n(xl,"P",{});var GHe=s(ax);CFr=r(GHe,"This class cannot be instantiated directly using "),$Me=n(GHe,"CODE",{});var Jkt=s($Me);wFr=r(Jkt,"__init__()"),Jkt.forEach(t),AFr=r(GHe," (throws an error)."),GHe.forEach(t),LFr=i(xl),kt=n(xl,"DIV",{class:!0});var FL=s(kt);T(nx.$$.fragment,FL),yFr=i(FL),kMe=n(FL,"P",{});var Ykt=s(kMe);xFr=r(Ykt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ykt.forEach(t),$Fr=i(FL),ac=n(FL,"P",{});var pae=s(ac);kFr=r(pae,`Note:
Loading a model from its configuration file does `),SMe=n(pae,"STRONG",{});var Kkt=s(SMe);SFr=r(Kkt,"not"),Kkt.forEach(t),RFr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(pae,"A",{href:!0});var Zkt=s(VU);PFr=r(Zkt,"from_pretrained()"),Zkt.forEach(t),BFr=r(pae," to load the model weights."),pae.forEach(t),IFr=i(FL),T(EE.$$.fragment,FL),FL.forEach(t),NFr=i(xl),Fo=n(xl,"DIV",{class:!0});var $a=s(Fo);T(sx.$$.fragment,$a),qFr=i($a),RMe=n($a,"P",{});var eSt=s(RMe);jFr=r(eSt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eSt.forEach(t),DFr=i($a),nn=n($a,"P",{});var TL=s(nn);GFr=r(TL,"The model class to instantiate is selected based on the "),PMe=n(TL,"CODE",{});var oSt=s(PMe);OFr=r(oSt,"model_type"),oSt.forEach(t),VFr=r(TL,` property of the config object (either
passed as an argument or loaded from `),BMe=n(TL,"CODE",{});var rSt=s(BMe);XFr=r(rSt,"pretrained_model_name_or_path"),rSt.forEach(t),zFr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(TL,"CODE",{});var tSt=s(IMe);WFr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),QFr=r(TL,":"),TL.forEach(t),HFr=i($a),at=n($a,"UL",{});var $l=s(at);CE=n($l,"LI",{});var Cje=s(CE);NMe=n(Cje,"STRONG",{});var aSt=s(NMe);UFr=r(aSt,"beit"),aSt.forEach(t),JFr=r(Cje," \u2014 "),XU=n(Cje,"A",{href:!0});var nSt=s(XU);YFr=r(nSt,"BeitForSemanticSegmentation"),nSt.forEach(t),KFr=r(Cje," (BEiT model)"),Cje.forEach(t),ZFr=i($l),wE=n($l,"LI",{});var wje=s(wE);qMe=n(wje,"STRONG",{});var sSt=s(qMe);eTr=r(sSt,"data2vec-vision"),sSt.forEach(t),oTr=r(wje," \u2014 "),zU=n(wje,"A",{href:!0});var lSt=s(zU);rTr=r(lSt,"Data2VecVisionForSemanticSegmentation"),lSt.forEach(t),tTr=r(wje," (Data2VecVision model)"),wje.forEach(t),aTr=i($l),AE=n($l,"LI",{});var Aje=s(AE);jMe=n(Aje,"STRONG",{});var iSt=s(jMe);nTr=r(iSt,"dpt"),iSt.forEach(t),sTr=r(Aje," \u2014 "),WU=n(Aje,"A",{href:!0});var dSt=s(WU);lTr=r(dSt,"DPTForSemanticSegmentation"),dSt.forEach(t),iTr=r(Aje," (DPT model)"),Aje.forEach(t),dTr=i($l),LE=n($l,"LI",{});var Lje=s(LE);DMe=n(Lje,"STRONG",{});var cSt=s(DMe);cTr=r(cSt,"mobilevit"),cSt.forEach(t),mTr=r(Lje," \u2014 "),QU=n(Lje,"A",{href:!0});var mSt=s(QU);fTr=r(mSt,"MobileViTForSemanticSegmentation"),mSt.forEach(t),gTr=r(Lje," (MobileViT model)"),Lje.forEach(t),hTr=i($l),yE=n($l,"LI",{});var yje=s(yE);GMe=n(yje,"STRONG",{});var fSt=s(GMe);uTr=r(fSt,"segformer"),fSt.forEach(t),pTr=r(yje," \u2014 "),HU=n(yje,"A",{href:!0});var gSt=s(HU);_Tr=r(gSt,"SegformerForSemanticSegmentation"),gSt.forEach(t),bTr=r(yje," (SegFormer model)"),yje.forEach(t),$l.forEach(t),vTr=i($a),xE=n($a,"P",{});var xje=s(xE);FTr=r(xje,"The model is set in evaluation mode by default using "),OMe=n(xje,"CODE",{});var hSt=s(OMe);TTr=r(hSt,"model.eval()"),hSt.forEach(t),MTr=r(xje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VMe=n(xje,"CODE",{});var uSt=s(VMe);ETr=r(uSt,"model.train()"),uSt.forEach(t),xje.forEach(t),CTr=i($a),T($E.$$.fragment,$a),$a.forEach(t),xl.forEach(t),PWe=i(m),nc=n(m,"H2",{class:!0});var OHe=s(nc);kE=n(OHe,"A",{id:!0,class:!0,href:!0});var pSt=s(kE);XMe=n(pSt,"SPAN",{});var _St=s(XMe);T(lx.$$.fragment,_St),_St.forEach(t),pSt.forEach(t),wTr=i(OHe),zMe=n(OHe,"SPAN",{});var bSt=s(zMe);ATr=r(bSt,"AutoModelForInstanceSegmentation"),bSt.forEach(t),OHe.forEach(t),BWe=i(m),or=n(m,"DIV",{class:!0});var kl=s(or);T(ix.$$.fragment,kl),LTr=i(kl),sc=n(kl,"P",{});var _ae=s(sc);yTr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UU=n(_ae,"A",{href:!0});var vSt=s(UU);xTr=r(vSt,"from_pretrained()"),vSt.forEach(t),$Tr=r(_ae," class method or the "),JU=n(_ae,"A",{href:!0});var FSt=s(JU);kTr=r(FSt,"from_config()"),FSt.forEach(t),STr=r(_ae,` class
method.`),_ae.forEach(t),RTr=i(kl),dx=n(kl,"P",{});var VHe=s(dx);PTr=r(VHe,"This class cannot be instantiated directly using "),WMe=n(VHe,"CODE",{});var TSt=s(WMe);BTr=r(TSt,"__init__()"),TSt.forEach(t),ITr=r(VHe," (throws an error)."),VHe.forEach(t),NTr=i(kl),St=n(kl,"DIV",{class:!0});var ML=s(St);T(cx.$$.fragment,ML),qTr=i(ML),QMe=n(ML,"P",{});var MSt=s(QMe);jTr=r(MSt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),MSt.forEach(t),DTr=i(ML),lc=n(ML,"P",{});var bae=s(lc);GTr=r(bae,`Note:
Loading a model from its configuration file does `),HMe=n(bae,"STRONG",{});var ESt=s(HMe);OTr=r(ESt,"not"),ESt.forEach(t),VTr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(bae,"A",{href:!0});var CSt=s(YU);XTr=r(CSt,"from_pretrained()"),CSt.forEach(t),zTr=r(bae," to load the model weights."),bae.forEach(t),WTr=i(ML),T(SE.$$.fragment,ML),ML.forEach(t),QTr=i(kl),To=n(kl,"DIV",{class:!0});var ka=s(To);T(mx.$$.fragment,ka),HTr=i(ka),UMe=n(ka,"P",{});var wSt=s(UMe);UTr=r(wSt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wSt.forEach(t),JTr=i(ka),sn=n(ka,"P",{});var EL=s(sn);YTr=r(EL,"The model class to instantiate is selected based on the "),JMe=n(EL,"CODE",{});var ASt=s(JMe);KTr=r(ASt,"model_type"),ASt.forEach(t),ZTr=r(EL,` property of the config object (either
passed as an argument or loaded from `),YMe=n(EL,"CODE",{});var LSt=s(YMe);eMr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),oMr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(EL,"CODE",{});var ySt=s(KMe);rMr=r(ySt,"pretrained_model_name_or_path"),ySt.forEach(t),tMr=r(EL,":"),EL.forEach(t),aMr=i(ka),ZMe=n(ka,"UL",{});var xSt=s(ZMe);RE=n(xSt,"LI",{});var $je=s(RE);e4e=n($je,"STRONG",{});var $St=s(e4e);nMr=r($St,"maskformer"),$St.forEach(t),sMr=r($je," \u2014 "),KU=n($je,"A",{href:!0});var kSt=s(KU);lMr=r(kSt,"MaskFormerForInstanceSegmentation"),kSt.forEach(t),iMr=r($je," (MaskFormer model)"),$je.forEach(t),xSt.forEach(t),dMr=i(ka),PE=n(ka,"P",{});var kje=s(PE);cMr=r(kje,"The model is set in evaluation mode by default using "),o4e=n(kje,"CODE",{});var SSt=s(o4e);mMr=r(SSt,"model.eval()"),SSt.forEach(t),fMr=r(kje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=n(kje,"CODE",{});var RSt=s(r4e);gMr=r(RSt,"model.train()"),RSt.forEach(t),kje.forEach(t),hMr=i(ka),T(BE.$$.fragment,ka),ka.forEach(t),kl.forEach(t),IWe=i(m),ic=n(m,"H2",{class:!0});var XHe=s(ic);IE=n(XHe,"A",{id:!0,class:!0,href:!0});var PSt=s(IE);t4e=n(PSt,"SPAN",{});var BSt=s(t4e);T(fx.$$.fragment,BSt),BSt.forEach(t),PSt.forEach(t),uMr=i(XHe),a4e=n(XHe,"SPAN",{});var ISt=s(a4e);pMr=r(ISt,"TFAutoModel"),ISt.forEach(t),XHe.forEach(t),NWe=i(m),rr=n(m,"DIV",{class:!0});var Sl=s(rr);T(gx.$$.fragment,Sl),_Mr=i(Sl),dc=n(Sl,"P",{});var vae=s(dc);bMr=r(vae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=n(vae,"A",{href:!0});var NSt=s(ZU);vMr=r(NSt,"from_pretrained()"),NSt.forEach(t),FMr=r(vae," class method or the "),eJ=n(vae,"A",{href:!0});var qSt=s(eJ);TMr=r(qSt,"from_config()"),qSt.forEach(t),MMr=r(vae,` class
method.`),vae.forEach(t),EMr=i(Sl),hx=n(Sl,"P",{});var zHe=s(hx);CMr=r(zHe,"This class cannot be instantiated directly using "),n4e=n(zHe,"CODE",{});var jSt=s(n4e);wMr=r(jSt,"__init__()"),jSt.forEach(t),AMr=r(zHe," (throws an error)."),zHe.forEach(t),LMr=i(Sl),Rt=n(Sl,"DIV",{class:!0});var CL=s(Rt);T(ux.$$.fragment,CL),yMr=i(CL),s4e=n(CL,"P",{});var DSt=s(s4e);xMr=r(DSt,"Instantiates one of the base model classes of the library from a configuration."),DSt.forEach(t),$Mr=i(CL),cc=n(CL,"P",{});var Fae=s(cc);kMr=r(Fae,`Note:
Loading a model from its configuration file does `),l4e=n(Fae,"STRONG",{});var GSt=s(l4e);SMr=r(GSt,"not"),GSt.forEach(t),RMr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(Fae,"A",{href:!0});var OSt=s(oJ);PMr=r(OSt,"from_pretrained()"),OSt.forEach(t),BMr=r(Fae," to load the model weights."),Fae.forEach(t),IMr=i(CL),T(NE.$$.fragment,CL),CL.forEach(t),NMr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(px.$$.fragment,Rl),qMr=i(Rl),i4e=n(Rl,"P",{});var VSt=s(i4e);jMr=r(VSt,"Instantiate one of the base model classes of the library from a pretrained model."),VSt.forEach(t),DMr=i(Rl),ln=n(Rl,"P",{});var wL=s(ln);GMr=r(wL,"The model class to instantiate is selected based on the "),d4e=n(wL,"CODE",{});var XSt=s(d4e);OMr=r(XSt,"model_type"),XSt.forEach(t),VMr=r(wL,` property of the config object (either
passed as an argument or loaded from `),c4e=n(wL,"CODE",{});var zSt=s(c4e);XMr=r(zSt,"pretrained_model_name_or_path"),zSt.forEach(t),zMr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(wL,"CODE",{});var WSt=s(m4e);WMr=r(WSt,"pretrained_model_name_or_path"),WSt.forEach(t),QMr=r(wL,":"),wL.forEach(t),HMr=i(Rl),I=n(Rl,"UL",{});var D=s(I);qE=n(D,"LI",{});var Sje=s(qE);f4e=n(Sje,"STRONG",{});var QSt=s(f4e);UMr=r(QSt,"albert"),QSt.forEach(t),JMr=r(Sje," \u2014 "),rJ=n(Sje,"A",{href:!0});var HSt=s(rJ);YMr=r(HSt,"TFAlbertModel"),HSt.forEach(t),KMr=r(Sje," (ALBERT model)"),Sje.forEach(t),ZMr=i(D),jE=n(D,"LI",{});var Rje=s(jE);g4e=n(Rje,"STRONG",{});var USt=s(g4e);e4r=r(USt,"bart"),USt.forEach(t),o4r=r(Rje," \u2014 "),tJ=n(Rje,"A",{href:!0});var JSt=s(tJ);r4r=r(JSt,"TFBartModel"),JSt.forEach(t),t4r=r(Rje," (BART model)"),Rje.forEach(t),a4r=i(D),DE=n(D,"LI",{});var Pje=s(DE);h4e=n(Pje,"STRONG",{});var YSt=s(h4e);n4r=r(YSt,"bert"),YSt.forEach(t),s4r=r(Pje," \u2014 "),aJ=n(Pje,"A",{href:!0});var KSt=s(aJ);l4r=r(KSt,"TFBertModel"),KSt.forEach(t),i4r=r(Pje," (BERT model)"),Pje.forEach(t),d4r=i(D),GE=n(D,"LI",{});var Bje=s(GE);u4e=n(Bje,"STRONG",{});var ZSt=s(u4e);c4r=r(ZSt,"blenderbot"),ZSt.forEach(t),m4r=r(Bje," \u2014 "),nJ=n(Bje,"A",{href:!0});var eRt=s(nJ);f4r=r(eRt,"TFBlenderbotModel"),eRt.forEach(t),g4r=r(Bje," (Blenderbot model)"),Bje.forEach(t),h4r=i(D),OE=n(D,"LI",{});var Ije=s(OE);p4e=n(Ije,"STRONG",{});var oRt=s(p4e);u4r=r(oRt,"blenderbot-small"),oRt.forEach(t),p4r=r(Ije," \u2014 "),sJ=n(Ije,"A",{href:!0});var rRt=s(sJ);_4r=r(rRt,"TFBlenderbotSmallModel"),rRt.forEach(t),b4r=r(Ije," (BlenderbotSmall model)"),Ije.forEach(t),v4r=i(D),VE=n(D,"LI",{});var Nje=s(VE);_4e=n(Nje,"STRONG",{});var tRt=s(_4e);F4r=r(tRt,"camembert"),tRt.forEach(t),T4r=r(Nje," \u2014 "),lJ=n(Nje,"A",{href:!0});var aRt=s(lJ);M4r=r(aRt,"TFCamembertModel"),aRt.forEach(t),E4r=r(Nje," (CamemBERT model)"),Nje.forEach(t),C4r=i(D),XE=n(D,"LI",{});var qje=s(XE);b4e=n(qje,"STRONG",{});var nRt=s(b4e);w4r=r(nRt,"clip"),nRt.forEach(t),A4r=r(qje," \u2014 "),iJ=n(qje,"A",{href:!0});var sRt=s(iJ);L4r=r(sRt,"TFCLIPModel"),sRt.forEach(t),y4r=r(qje," (CLIP model)"),qje.forEach(t),x4r=i(D),zE=n(D,"LI",{});var jje=s(zE);v4e=n(jje,"STRONG",{});var lRt=s(v4e);$4r=r(lRt,"convbert"),lRt.forEach(t),k4r=r(jje," \u2014 "),dJ=n(jje,"A",{href:!0});var iRt=s(dJ);S4r=r(iRt,"TFConvBertModel"),iRt.forEach(t),R4r=r(jje," (ConvBERT model)"),jje.forEach(t),P4r=i(D),WE=n(D,"LI",{});var Dje=s(WE);F4e=n(Dje,"STRONG",{});var dRt=s(F4e);B4r=r(dRt,"convnext"),dRt.forEach(t),I4r=r(Dje," \u2014 "),cJ=n(Dje,"A",{href:!0});var cRt=s(cJ);N4r=r(cRt,"TFConvNextModel"),cRt.forEach(t),q4r=r(Dje," (ConvNeXT model)"),Dje.forEach(t),j4r=i(D),QE=n(D,"LI",{});var Gje=s(QE);T4e=n(Gje,"STRONG",{});var mRt=s(T4e);D4r=r(mRt,"ctrl"),mRt.forEach(t),G4r=r(Gje," \u2014 "),mJ=n(Gje,"A",{href:!0});var fRt=s(mJ);O4r=r(fRt,"TFCTRLModel"),fRt.forEach(t),V4r=r(Gje," (CTRL model)"),Gje.forEach(t),X4r=i(D),HE=n(D,"LI",{});var Oje=s(HE);M4e=n(Oje,"STRONG",{});var gRt=s(M4e);z4r=r(gRt,"data2vec-vision"),gRt.forEach(t),W4r=r(Oje," \u2014 "),fJ=n(Oje,"A",{href:!0});var hRt=s(fJ);Q4r=r(hRt,"TFData2VecVisionModel"),hRt.forEach(t),H4r=r(Oje," (Data2VecVision model)"),Oje.forEach(t),U4r=i(D),UE=n(D,"LI",{});var Vje=s(UE);E4e=n(Vje,"STRONG",{});var uRt=s(E4e);J4r=r(uRt,"deberta"),uRt.forEach(t),Y4r=r(Vje," \u2014 "),gJ=n(Vje,"A",{href:!0});var pRt=s(gJ);K4r=r(pRt,"TFDebertaModel"),pRt.forEach(t),Z4r=r(Vje," (DeBERTa model)"),Vje.forEach(t),eEr=i(D),JE=n(D,"LI",{});var Xje=s(JE);C4e=n(Xje,"STRONG",{});var _Rt=s(C4e);oEr=r(_Rt,"deberta-v2"),_Rt.forEach(t),rEr=r(Xje," \u2014 "),hJ=n(Xje,"A",{href:!0});var bRt=s(hJ);tEr=r(bRt,"TFDebertaV2Model"),bRt.forEach(t),aEr=r(Xje," (DeBERTa-v2 model)"),Xje.forEach(t),nEr=i(D),YE=n(D,"LI",{});var zje=s(YE);w4e=n(zje,"STRONG",{});var vRt=s(w4e);sEr=r(vRt,"deit"),vRt.forEach(t),lEr=r(zje," \u2014 "),uJ=n(zje,"A",{href:!0});var FRt=s(uJ);iEr=r(FRt,"TFDeiTModel"),FRt.forEach(t),dEr=r(zje," (DeiT model)"),zje.forEach(t),cEr=i(D),KE=n(D,"LI",{});var Wje=s(KE);A4e=n(Wje,"STRONG",{});var TRt=s(A4e);mEr=r(TRt,"distilbert"),TRt.forEach(t),fEr=r(Wje," \u2014 "),pJ=n(Wje,"A",{href:!0});var MRt=s(pJ);gEr=r(MRt,"TFDistilBertModel"),MRt.forEach(t),hEr=r(Wje," (DistilBERT model)"),Wje.forEach(t),uEr=i(D),ZE=n(D,"LI",{});var Qje=s(ZE);L4e=n(Qje,"STRONG",{});var ERt=s(L4e);pEr=r(ERt,"dpr"),ERt.forEach(t),_Er=r(Qje," \u2014 "),_J=n(Qje,"A",{href:!0});var CRt=s(_J);bEr=r(CRt,"TFDPRQuestionEncoder"),CRt.forEach(t),vEr=r(Qje," (DPR model)"),Qje.forEach(t),FEr=i(D),eC=n(D,"LI",{});var Hje=s(eC);y4e=n(Hje,"STRONG",{});var wRt=s(y4e);TEr=r(wRt,"electra"),wRt.forEach(t),MEr=r(Hje," \u2014 "),bJ=n(Hje,"A",{href:!0});var ARt=s(bJ);EEr=r(ARt,"TFElectraModel"),ARt.forEach(t),CEr=r(Hje," (ELECTRA model)"),Hje.forEach(t),wEr=i(D),oC=n(D,"LI",{});var Uje=s(oC);x4e=n(Uje,"STRONG",{});var LRt=s(x4e);AEr=r(LRt,"flaubert"),LRt.forEach(t),LEr=r(Uje," \u2014 "),vJ=n(Uje,"A",{href:!0});var yRt=s(vJ);yEr=r(yRt,"TFFlaubertModel"),yRt.forEach(t),xEr=r(Uje," (FlauBERT model)"),Uje.forEach(t),$Er=i(D),Zs=n(D,"LI",{});var tR=s(Zs);$4e=n(tR,"STRONG",{});var xRt=s($4e);kEr=r(xRt,"funnel"),xRt.forEach(t),SEr=r(tR," \u2014 "),FJ=n(tR,"A",{href:!0});var $Rt=s(FJ);REr=r($Rt,"TFFunnelModel"),$Rt.forEach(t),PEr=r(tR," or "),TJ=n(tR,"A",{href:!0});var kRt=s(TJ);BEr=r(kRt,"TFFunnelBaseModel"),kRt.forEach(t),IEr=r(tR," (Funnel Transformer model)"),tR.forEach(t),NEr=i(D),rC=n(D,"LI",{});var Jje=s(rC);k4e=n(Jje,"STRONG",{});var SRt=s(k4e);qEr=r(SRt,"gpt2"),SRt.forEach(t),jEr=r(Jje," \u2014 "),MJ=n(Jje,"A",{href:!0});var RRt=s(MJ);DEr=r(RRt,"TFGPT2Model"),RRt.forEach(t),GEr=r(Jje," (OpenAI GPT-2 model)"),Jje.forEach(t),OEr=i(D),tC=n(D,"LI",{});var Yje=s(tC);S4e=n(Yje,"STRONG",{});var PRt=s(S4e);VEr=r(PRt,"gptj"),PRt.forEach(t),XEr=r(Yje," \u2014 "),EJ=n(Yje,"A",{href:!0});var BRt=s(EJ);zEr=r(BRt,"TFGPTJModel"),BRt.forEach(t),WEr=r(Yje," (GPT-J model)"),Yje.forEach(t),QEr=i(D),aC=n(D,"LI",{});var Kje=s(aC);R4e=n(Kje,"STRONG",{});var IRt=s(R4e);HEr=r(IRt,"hubert"),IRt.forEach(t),UEr=r(Kje," \u2014 "),CJ=n(Kje,"A",{href:!0});var NRt=s(CJ);JEr=r(NRt,"TFHubertModel"),NRt.forEach(t),YEr=r(Kje," (Hubert model)"),Kje.forEach(t),KEr=i(D),nC=n(D,"LI",{});var Zje=s(nC);P4e=n(Zje,"STRONG",{});var qRt=s(P4e);ZEr=r(qRt,"layoutlm"),qRt.forEach(t),eCr=r(Zje," \u2014 "),wJ=n(Zje,"A",{href:!0});var jRt=s(wJ);oCr=r(jRt,"TFLayoutLMModel"),jRt.forEach(t),rCr=r(Zje," (LayoutLM model)"),Zje.forEach(t),tCr=i(D),sC=n(D,"LI",{});var eDe=s(sC);B4e=n(eDe,"STRONG",{});var DRt=s(B4e);aCr=r(DRt,"led"),DRt.forEach(t),nCr=r(eDe," \u2014 "),AJ=n(eDe,"A",{href:!0});var GRt=s(AJ);sCr=r(GRt,"TFLEDModel"),GRt.forEach(t),lCr=r(eDe," (LED model)"),eDe.forEach(t),iCr=i(D),lC=n(D,"LI",{});var oDe=s(lC);I4e=n(oDe,"STRONG",{});var ORt=s(I4e);dCr=r(ORt,"longformer"),ORt.forEach(t),cCr=r(oDe," \u2014 "),LJ=n(oDe,"A",{href:!0});var VRt=s(LJ);mCr=r(VRt,"TFLongformerModel"),VRt.forEach(t),fCr=r(oDe," (Longformer model)"),oDe.forEach(t),gCr=i(D),iC=n(D,"LI",{});var rDe=s(iC);N4e=n(rDe,"STRONG",{});var XRt=s(N4e);hCr=r(XRt,"lxmert"),XRt.forEach(t),uCr=r(rDe," \u2014 "),yJ=n(rDe,"A",{href:!0});var zRt=s(yJ);pCr=r(zRt,"TFLxmertModel"),zRt.forEach(t),_Cr=r(rDe," (LXMERT model)"),rDe.forEach(t),bCr=i(D),dC=n(D,"LI",{});var tDe=s(dC);q4e=n(tDe,"STRONG",{});var WRt=s(q4e);vCr=r(WRt,"marian"),WRt.forEach(t),FCr=r(tDe," \u2014 "),xJ=n(tDe,"A",{href:!0});var QRt=s(xJ);TCr=r(QRt,"TFMarianModel"),QRt.forEach(t),MCr=r(tDe," (Marian model)"),tDe.forEach(t),ECr=i(D),cC=n(D,"LI",{});var aDe=s(cC);j4e=n(aDe,"STRONG",{});var HRt=s(j4e);CCr=r(HRt,"mbart"),HRt.forEach(t),wCr=r(aDe," \u2014 "),$J=n(aDe,"A",{href:!0});var URt=s($J);ACr=r(URt,"TFMBartModel"),URt.forEach(t),LCr=r(aDe," (mBART model)"),aDe.forEach(t),yCr=i(D),mC=n(D,"LI",{});var nDe=s(mC);D4e=n(nDe,"STRONG",{});var JRt=s(D4e);xCr=r(JRt,"mobilebert"),JRt.forEach(t),$Cr=r(nDe," \u2014 "),kJ=n(nDe,"A",{href:!0});var YRt=s(kJ);kCr=r(YRt,"TFMobileBertModel"),YRt.forEach(t),SCr=r(nDe," (MobileBERT model)"),nDe.forEach(t),RCr=i(D),fC=n(D,"LI",{});var sDe=s(fC);G4e=n(sDe,"STRONG",{});var KRt=s(G4e);PCr=r(KRt,"mpnet"),KRt.forEach(t),BCr=r(sDe," \u2014 "),SJ=n(sDe,"A",{href:!0});var ZRt=s(SJ);ICr=r(ZRt,"TFMPNetModel"),ZRt.forEach(t),NCr=r(sDe," (MPNet model)"),sDe.forEach(t),qCr=i(D),gC=n(D,"LI",{});var lDe=s(gC);O4e=n(lDe,"STRONG",{});var ePt=s(O4e);jCr=r(ePt,"mt5"),ePt.forEach(t),DCr=r(lDe," \u2014 "),RJ=n(lDe,"A",{href:!0});var oPt=s(RJ);GCr=r(oPt,"TFMT5Model"),oPt.forEach(t),OCr=r(lDe," (MT5 model)"),lDe.forEach(t),VCr=i(D),hC=n(D,"LI",{});var iDe=s(hC);V4e=n(iDe,"STRONG",{});var rPt=s(V4e);XCr=r(rPt,"openai-gpt"),rPt.forEach(t),zCr=r(iDe," \u2014 "),PJ=n(iDe,"A",{href:!0});var tPt=s(PJ);WCr=r(tPt,"TFOpenAIGPTModel"),tPt.forEach(t),QCr=r(iDe," (OpenAI GPT model)"),iDe.forEach(t),HCr=i(D),uC=n(D,"LI",{});var dDe=s(uC);X4e=n(dDe,"STRONG",{});var aPt=s(X4e);UCr=r(aPt,"opt"),aPt.forEach(t),JCr=r(dDe," \u2014 "),BJ=n(dDe,"A",{href:!0});var nPt=s(BJ);YCr=r(nPt,"TFOPTModel"),nPt.forEach(t),KCr=r(dDe," (OPT model)"),dDe.forEach(t),ZCr=i(D),pC=n(D,"LI",{});var cDe=s(pC);z4e=n(cDe,"STRONG",{});var sPt=s(z4e);e5r=r(sPt,"pegasus"),sPt.forEach(t),o5r=r(cDe," \u2014 "),IJ=n(cDe,"A",{href:!0});var lPt=s(IJ);r5r=r(lPt,"TFPegasusModel"),lPt.forEach(t),t5r=r(cDe," (Pegasus model)"),cDe.forEach(t),a5r=i(D),_C=n(D,"LI",{});var mDe=s(_C);W4e=n(mDe,"STRONG",{});var iPt=s(W4e);n5r=r(iPt,"regnet"),iPt.forEach(t),s5r=r(mDe," \u2014 "),NJ=n(mDe,"A",{href:!0});var dPt=s(NJ);l5r=r(dPt,"TFRegNetModel"),dPt.forEach(t),i5r=r(mDe," (RegNet model)"),mDe.forEach(t),d5r=i(D),bC=n(D,"LI",{});var fDe=s(bC);Q4e=n(fDe,"STRONG",{});var cPt=s(Q4e);c5r=r(cPt,"rembert"),cPt.forEach(t),m5r=r(fDe," \u2014 "),qJ=n(fDe,"A",{href:!0});var mPt=s(qJ);f5r=r(mPt,"TFRemBertModel"),mPt.forEach(t),g5r=r(fDe," (RemBERT model)"),fDe.forEach(t),h5r=i(D),vC=n(D,"LI",{});var gDe=s(vC);H4e=n(gDe,"STRONG",{});var fPt=s(H4e);u5r=r(fPt,"resnet"),fPt.forEach(t),p5r=r(gDe," \u2014 "),jJ=n(gDe,"A",{href:!0});var gPt=s(jJ);_5r=r(gPt,"TFResNetModel"),gPt.forEach(t),b5r=r(gDe," (ResNet model)"),gDe.forEach(t),v5r=i(D),FC=n(D,"LI",{});var hDe=s(FC);U4e=n(hDe,"STRONG",{});var hPt=s(U4e);F5r=r(hPt,"roberta"),hPt.forEach(t),T5r=r(hDe," \u2014 "),DJ=n(hDe,"A",{href:!0});var uPt=s(DJ);M5r=r(uPt,"TFRobertaModel"),uPt.forEach(t),E5r=r(hDe," (RoBERTa model)"),hDe.forEach(t),C5r=i(D),TC=n(D,"LI",{});var uDe=s(TC);J4e=n(uDe,"STRONG",{});var pPt=s(J4e);w5r=r(pPt,"roformer"),pPt.forEach(t),A5r=r(uDe," \u2014 "),GJ=n(uDe,"A",{href:!0});var _Pt=s(GJ);L5r=r(_Pt,"TFRoFormerModel"),_Pt.forEach(t),y5r=r(uDe," (RoFormer model)"),uDe.forEach(t),x5r=i(D),MC=n(D,"LI",{});var pDe=s(MC);Y4e=n(pDe,"STRONG",{});var bPt=s(Y4e);$5r=r(bPt,"segformer"),bPt.forEach(t),k5r=r(pDe," \u2014 "),OJ=n(pDe,"A",{href:!0});var vPt=s(OJ);S5r=r(vPt,"TFSegformerModel"),vPt.forEach(t),R5r=r(pDe," (SegFormer model)"),pDe.forEach(t),P5r=i(D),EC=n(D,"LI",{});var _De=s(EC);K4e=n(_De,"STRONG",{});var FPt=s(K4e);B5r=r(FPt,"speech_to_text"),FPt.forEach(t),I5r=r(_De," \u2014 "),VJ=n(_De,"A",{href:!0});var TPt=s(VJ);N5r=r(TPt,"TFSpeech2TextModel"),TPt.forEach(t),q5r=r(_De," (Speech2Text model)"),_De.forEach(t),j5r=i(D),CC=n(D,"LI",{});var bDe=s(CC);Z4e=n(bDe,"STRONG",{});var MPt=s(Z4e);D5r=r(MPt,"swin"),MPt.forEach(t),G5r=r(bDe," \u2014 "),XJ=n(bDe,"A",{href:!0});var EPt=s(XJ);O5r=r(EPt,"TFSwinModel"),EPt.forEach(t),V5r=r(bDe," (Swin Transformer model)"),bDe.forEach(t),X5r=i(D),wC=n(D,"LI",{});var vDe=s(wC);eEe=n(vDe,"STRONG",{});var CPt=s(eEe);z5r=r(CPt,"t5"),CPt.forEach(t),W5r=r(vDe," \u2014 "),zJ=n(vDe,"A",{href:!0});var wPt=s(zJ);Q5r=r(wPt,"TFT5Model"),wPt.forEach(t),H5r=r(vDe," (T5 model)"),vDe.forEach(t),U5r=i(D),AC=n(D,"LI",{});var FDe=s(AC);oEe=n(FDe,"STRONG",{});var APt=s(oEe);J5r=r(APt,"tapas"),APt.forEach(t),Y5r=r(FDe," \u2014 "),WJ=n(FDe,"A",{href:!0});var LPt=s(WJ);K5r=r(LPt,"TFTapasModel"),LPt.forEach(t),Z5r=r(FDe," (TAPAS model)"),FDe.forEach(t),e3r=i(D),LC=n(D,"LI",{});var TDe=s(LC);rEe=n(TDe,"STRONG",{});var yPt=s(rEe);o3r=r(yPt,"transfo-xl"),yPt.forEach(t),r3r=r(TDe," \u2014 "),QJ=n(TDe,"A",{href:!0});var xPt=s(QJ);t3r=r(xPt,"TFTransfoXLModel"),xPt.forEach(t),a3r=r(TDe," (Transformer-XL model)"),TDe.forEach(t),n3r=i(D),yC=n(D,"LI",{});var MDe=s(yC);tEe=n(MDe,"STRONG",{});var $Pt=s(tEe);s3r=r($Pt,"vit"),$Pt.forEach(t),l3r=r(MDe," \u2014 "),HJ=n(MDe,"A",{href:!0});var kPt=s(HJ);i3r=r(kPt,"TFViTModel"),kPt.forEach(t),d3r=r(MDe," (ViT model)"),MDe.forEach(t),c3r=i(D),xC=n(D,"LI",{});var EDe=s(xC);aEe=n(EDe,"STRONG",{});var SPt=s(aEe);m3r=r(SPt,"vit_mae"),SPt.forEach(t),f3r=r(EDe," \u2014 "),UJ=n(EDe,"A",{href:!0});var RPt=s(UJ);g3r=r(RPt,"TFViTMAEModel"),RPt.forEach(t),h3r=r(EDe," (ViTMAE model)"),EDe.forEach(t),u3r=i(D),$C=n(D,"LI",{});var CDe=s($C);nEe=n(CDe,"STRONG",{});var PPt=s(nEe);p3r=r(PPt,"wav2vec2"),PPt.forEach(t),_3r=r(CDe," \u2014 "),JJ=n(CDe,"A",{href:!0});var BPt=s(JJ);b3r=r(BPt,"TFWav2Vec2Model"),BPt.forEach(t),v3r=r(CDe," (Wav2Vec2 model)"),CDe.forEach(t),F3r=i(D),kC=n(D,"LI",{});var wDe=s(kC);sEe=n(wDe,"STRONG",{});var IPt=s(sEe);T3r=r(IPt,"xlm"),IPt.forEach(t),M3r=r(wDe," \u2014 "),YJ=n(wDe,"A",{href:!0});var NPt=s(YJ);E3r=r(NPt,"TFXLMModel"),NPt.forEach(t),C3r=r(wDe," (XLM model)"),wDe.forEach(t),w3r=i(D),SC=n(D,"LI",{});var ADe=s(SC);lEe=n(ADe,"STRONG",{});var qPt=s(lEe);A3r=r(qPt,"xlm-roberta"),qPt.forEach(t),L3r=r(ADe," \u2014 "),KJ=n(ADe,"A",{href:!0});var jPt=s(KJ);y3r=r(jPt,"TFXLMRobertaModel"),jPt.forEach(t),x3r=r(ADe," (XLM-RoBERTa model)"),ADe.forEach(t),$3r=i(D),RC=n(D,"LI",{});var LDe=s(RC);iEe=n(LDe,"STRONG",{});var DPt=s(iEe);k3r=r(DPt,"xlnet"),DPt.forEach(t),S3r=r(LDe," \u2014 "),ZJ=n(LDe,"A",{href:!0});var GPt=s(ZJ);R3r=r(GPt,"TFXLNetModel"),GPt.forEach(t),P3r=r(LDe," (XLNet model)"),LDe.forEach(t),D.forEach(t),B3r=i(Rl),T(PC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),qWe=i(m),mc=n(m,"H2",{class:!0});var WHe=s(mc);BC=n(WHe,"A",{id:!0,class:!0,href:!0});var OPt=s(BC);dEe=n(OPt,"SPAN",{});var VPt=s(dEe);T(_x.$$.fragment,VPt),VPt.forEach(t),OPt.forEach(t),I3r=i(WHe),cEe=n(WHe,"SPAN",{});var XPt=s(cEe);N3r=r(XPt,"TFAutoModelForPreTraining"),XPt.forEach(t),WHe.forEach(t),jWe=i(m),tr=n(m,"DIV",{class:!0});var Pl=s(tr);T(bx.$$.fragment,Pl),q3r=i(Pl),fc=n(Pl,"P",{});var Tae=s(fc);j3r=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eY=n(Tae,"A",{href:!0});var zPt=s(eY);D3r=r(zPt,"from_pretrained()"),zPt.forEach(t),G3r=r(Tae," class method or the "),oY=n(Tae,"A",{href:!0});var WPt=s(oY);O3r=r(WPt,"from_config()"),WPt.forEach(t),V3r=r(Tae,` class
method.`),Tae.forEach(t),X3r=i(Pl),vx=n(Pl,"P",{});var QHe=s(vx);z3r=r(QHe,"This class cannot be instantiated directly using "),mEe=n(QHe,"CODE",{});var QPt=s(mEe);W3r=r(QPt,"__init__()"),QPt.forEach(t),Q3r=r(QHe," (throws an error)."),QHe.forEach(t),H3r=i(Pl),Pt=n(Pl,"DIV",{class:!0});var AL=s(Pt);T(Fx.$$.fragment,AL),U3r=i(AL),fEe=n(AL,"P",{});var HPt=s(fEe);J3r=r(HPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HPt.forEach(t),Y3r=i(AL),gc=n(AL,"P",{});var Mae=s(gc);K3r=r(Mae,`Note:
Loading a model from its configuration file does `),gEe=n(Mae,"STRONG",{});var UPt=s(gEe);Z3r=r(UPt,"not"),UPt.forEach(t),e0r=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(Mae,"A",{href:!0});var JPt=s(rY);o0r=r(JPt,"from_pretrained()"),JPt.forEach(t),r0r=r(Mae," to load the model weights."),Mae.forEach(t),t0r=i(AL),T(IC.$$.fragment,AL),AL.forEach(t),a0r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(Tx.$$.fragment,Bl),n0r=i(Bl),hEe=n(Bl,"P",{});var YPt=s(hEe);s0r=r(YPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YPt.forEach(t),l0r=i(Bl),dn=n(Bl,"P",{});var LL=s(dn);i0r=r(LL,"The model class to instantiate is selected based on the "),uEe=n(LL,"CODE",{});var KPt=s(uEe);d0r=r(KPt,"model_type"),KPt.forEach(t),c0r=r(LL,` property of the config object (either
passed as an argument or loaded from `),pEe=n(LL,"CODE",{});var ZPt=s(pEe);m0r=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),f0r=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ee=n(LL,"CODE",{});var eBt=s(_Ee);g0r=r(eBt,"pretrained_model_name_or_path"),eBt.forEach(t),h0r=r(LL,":"),LL.forEach(t),u0r=i(Bl),se=n(Bl,"UL",{});var le=s(se);NC=n(le,"LI",{});var yDe=s(NC);bEe=n(yDe,"STRONG",{});var oBt=s(bEe);p0r=r(oBt,"albert"),oBt.forEach(t),_0r=r(yDe," \u2014 "),tY=n(yDe,"A",{href:!0});var rBt=s(tY);b0r=r(rBt,"TFAlbertForPreTraining"),rBt.forEach(t),v0r=r(yDe," (ALBERT model)"),yDe.forEach(t),F0r=i(le),qC=n(le,"LI",{});var xDe=s(qC);vEe=n(xDe,"STRONG",{});var tBt=s(vEe);T0r=r(tBt,"bart"),tBt.forEach(t),M0r=r(xDe," \u2014 "),aY=n(xDe,"A",{href:!0});var aBt=s(aY);E0r=r(aBt,"TFBartForConditionalGeneration"),aBt.forEach(t),C0r=r(xDe," (BART model)"),xDe.forEach(t),w0r=i(le),jC=n(le,"LI",{});var $De=s(jC);FEe=n($De,"STRONG",{});var nBt=s(FEe);A0r=r(nBt,"bert"),nBt.forEach(t),L0r=r($De," \u2014 "),nY=n($De,"A",{href:!0});var sBt=s(nY);y0r=r(sBt,"TFBertForPreTraining"),sBt.forEach(t),x0r=r($De," (BERT model)"),$De.forEach(t),$0r=i(le),DC=n(le,"LI",{});var kDe=s(DC);TEe=n(kDe,"STRONG",{});var lBt=s(TEe);k0r=r(lBt,"camembert"),lBt.forEach(t),S0r=r(kDe," \u2014 "),sY=n(kDe,"A",{href:!0});var iBt=s(sY);R0r=r(iBt,"TFCamembertForMaskedLM"),iBt.forEach(t),P0r=r(kDe," (CamemBERT model)"),kDe.forEach(t),B0r=i(le),GC=n(le,"LI",{});var SDe=s(GC);MEe=n(SDe,"STRONG",{});var dBt=s(MEe);I0r=r(dBt,"ctrl"),dBt.forEach(t),N0r=r(SDe," \u2014 "),lY=n(SDe,"A",{href:!0});var cBt=s(lY);q0r=r(cBt,"TFCTRLLMHeadModel"),cBt.forEach(t),j0r=r(SDe," (CTRL model)"),SDe.forEach(t),D0r=i(le),OC=n(le,"LI",{});var RDe=s(OC);EEe=n(RDe,"STRONG",{});var mBt=s(EEe);G0r=r(mBt,"distilbert"),mBt.forEach(t),O0r=r(RDe," \u2014 "),iY=n(RDe,"A",{href:!0});var fBt=s(iY);V0r=r(fBt,"TFDistilBertForMaskedLM"),fBt.forEach(t),X0r=r(RDe," (DistilBERT model)"),RDe.forEach(t),z0r=i(le),VC=n(le,"LI",{});var PDe=s(VC);CEe=n(PDe,"STRONG",{});var gBt=s(CEe);W0r=r(gBt,"electra"),gBt.forEach(t),Q0r=r(PDe," \u2014 "),dY=n(PDe,"A",{href:!0});var hBt=s(dY);H0r=r(hBt,"TFElectraForPreTraining"),hBt.forEach(t),U0r=r(PDe," (ELECTRA model)"),PDe.forEach(t),J0r=i(le),XC=n(le,"LI",{});var BDe=s(XC);wEe=n(BDe,"STRONG",{});var uBt=s(wEe);Y0r=r(uBt,"flaubert"),uBt.forEach(t),K0r=r(BDe," \u2014 "),cY=n(BDe,"A",{href:!0});var pBt=s(cY);Z0r=r(pBt,"TFFlaubertWithLMHeadModel"),pBt.forEach(t),ewr=r(BDe," (FlauBERT model)"),BDe.forEach(t),owr=i(le),zC=n(le,"LI",{});var IDe=s(zC);AEe=n(IDe,"STRONG",{});var _Bt=s(AEe);rwr=r(_Bt,"funnel"),_Bt.forEach(t),twr=r(IDe," \u2014 "),mY=n(IDe,"A",{href:!0});var bBt=s(mY);awr=r(bBt,"TFFunnelForPreTraining"),bBt.forEach(t),nwr=r(IDe," (Funnel Transformer model)"),IDe.forEach(t),swr=i(le),WC=n(le,"LI",{});var NDe=s(WC);LEe=n(NDe,"STRONG",{});var vBt=s(LEe);lwr=r(vBt,"gpt2"),vBt.forEach(t),iwr=r(NDe," \u2014 "),fY=n(NDe,"A",{href:!0});var FBt=s(fY);dwr=r(FBt,"TFGPT2LMHeadModel"),FBt.forEach(t),cwr=r(NDe," (OpenAI GPT-2 model)"),NDe.forEach(t),mwr=i(le),QC=n(le,"LI",{});var qDe=s(QC);yEe=n(qDe,"STRONG",{});var TBt=s(yEe);fwr=r(TBt,"layoutlm"),TBt.forEach(t),gwr=r(qDe," \u2014 "),gY=n(qDe,"A",{href:!0});var MBt=s(gY);hwr=r(MBt,"TFLayoutLMForMaskedLM"),MBt.forEach(t),uwr=r(qDe," (LayoutLM model)"),qDe.forEach(t),pwr=i(le),HC=n(le,"LI",{});var jDe=s(HC);xEe=n(jDe,"STRONG",{});var EBt=s(xEe);_wr=r(EBt,"lxmert"),EBt.forEach(t),bwr=r(jDe," \u2014 "),hY=n(jDe,"A",{href:!0});var CBt=s(hY);vwr=r(CBt,"TFLxmertForPreTraining"),CBt.forEach(t),Fwr=r(jDe," (LXMERT model)"),jDe.forEach(t),Twr=i(le),UC=n(le,"LI",{});var DDe=s(UC);$Ee=n(DDe,"STRONG",{});var wBt=s($Ee);Mwr=r(wBt,"mobilebert"),wBt.forEach(t),Ewr=r(DDe," \u2014 "),uY=n(DDe,"A",{href:!0});var ABt=s(uY);Cwr=r(ABt,"TFMobileBertForPreTraining"),ABt.forEach(t),wwr=r(DDe," (MobileBERT model)"),DDe.forEach(t),Awr=i(le),JC=n(le,"LI",{});var GDe=s(JC);kEe=n(GDe,"STRONG",{});var LBt=s(kEe);Lwr=r(LBt,"mpnet"),LBt.forEach(t),ywr=r(GDe," \u2014 "),pY=n(GDe,"A",{href:!0});var yBt=s(pY);xwr=r(yBt,"TFMPNetForMaskedLM"),yBt.forEach(t),$wr=r(GDe," (MPNet model)"),GDe.forEach(t),kwr=i(le),YC=n(le,"LI",{});var ODe=s(YC);SEe=n(ODe,"STRONG",{});var xBt=s(SEe);Swr=r(xBt,"openai-gpt"),xBt.forEach(t),Rwr=r(ODe," \u2014 "),_Y=n(ODe,"A",{href:!0});var $Bt=s(_Y);Pwr=r($Bt,"TFOpenAIGPTLMHeadModel"),$Bt.forEach(t),Bwr=r(ODe," (OpenAI GPT model)"),ODe.forEach(t),Iwr=i(le),KC=n(le,"LI",{});var VDe=s(KC);REe=n(VDe,"STRONG",{});var kBt=s(REe);Nwr=r(kBt,"roberta"),kBt.forEach(t),qwr=r(VDe," \u2014 "),bY=n(VDe,"A",{href:!0});var SBt=s(bY);jwr=r(SBt,"TFRobertaForMaskedLM"),SBt.forEach(t),Dwr=r(VDe," (RoBERTa model)"),VDe.forEach(t),Gwr=i(le),ZC=n(le,"LI",{});var XDe=s(ZC);PEe=n(XDe,"STRONG",{});var RBt=s(PEe);Owr=r(RBt,"t5"),RBt.forEach(t),Vwr=r(XDe," \u2014 "),vY=n(XDe,"A",{href:!0});var PBt=s(vY);Xwr=r(PBt,"TFT5ForConditionalGeneration"),PBt.forEach(t),zwr=r(XDe," (T5 model)"),XDe.forEach(t),Wwr=i(le),e5=n(le,"LI",{});var zDe=s(e5);BEe=n(zDe,"STRONG",{});var BBt=s(BEe);Qwr=r(BBt,"tapas"),BBt.forEach(t),Hwr=r(zDe," \u2014 "),FY=n(zDe,"A",{href:!0});var IBt=s(FY);Uwr=r(IBt,"TFTapasForMaskedLM"),IBt.forEach(t),Jwr=r(zDe," (TAPAS model)"),zDe.forEach(t),Ywr=i(le),o5=n(le,"LI",{});var WDe=s(o5);IEe=n(WDe,"STRONG",{});var NBt=s(IEe);Kwr=r(NBt,"transfo-xl"),NBt.forEach(t),Zwr=r(WDe," \u2014 "),TY=n(WDe,"A",{href:!0});var qBt=s(TY);e6r=r(qBt,"TFTransfoXLLMHeadModel"),qBt.forEach(t),o6r=r(WDe," (Transformer-XL model)"),WDe.forEach(t),r6r=i(le),r5=n(le,"LI",{});var QDe=s(r5);NEe=n(QDe,"STRONG",{});var jBt=s(NEe);t6r=r(jBt,"vit_mae"),jBt.forEach(t),a6r=r(QDe," \u2014 "),MY=n(QDe,"A",{href:!0});var DBt=s(MY);n6r=r(DBt,"TFViTMAEForPreTraining"),DBt.forEach(t),s6r=r(QDe," (ViTMAE model)"),QDe.forEach(t),l6r=i(le),t5=n(le,"LI",{});var HDe=s(t5);qEe=n(HDe,"STRONG",{});var GBt=s(qEe);i6r=r(GBt,"xlm"),GBt.forEach(t),d6r=r(HDe," \u2014 "),EY=n(HDe,"A",{href:!0});var OBt=s(EY);c6r=r(OBt,"TFXLMWithLMHeadModel"),OBt.forEach(t),m6r=r(HDe," (XLM model)"),HDe.forEach(t),f6r=i(le),a5=n(le,"LI",{});var UDe=s(a5);jEe=n(UDe,"STRONG",{});var VBt=s(jEe);g6r=r(VBt,"xlm-roberta"),VBt.forEach(t),h6r=r(UDe," \u2014 "),CY=n(UDe,"A",{href:!0});var XBt=s(CY);u6r=r(XBt,"TFXLMRobertaForMaskedLM"),XBt.forEach(t),p6r=r(UDe," (XLM-RoBERTa model)"),UDe.forEach(t),_6r=i(le),n5=n(le,"LI",{});var JDe=s(n5);DEe=n(JDe,"STRONG",{});var zBt=s(DEe);b6r=r(zBt,"xlnet"),zBt.forEach(t),v6r=r(JDe," \u2014 "),wY=n(JDe,"A",{href:!0});var WBt=s(wY);F6r=r(WBt,"TFXLNetLMHeadModel"),WBt.forEach(t),T6r=r(JDe," (XLNet model)"),JDe.forEach(t),le.forEach(t),M6r=i(Bl),T(s5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),DWe=i(m),hc=n(m,"H2",{class:!0});var HHe=s(hc);l5=n(HHe,"A",{id:!0,class:!0,href:!0});var QBt=s(l5);GEe=n(QBt,"SPAN",{});var HBt=s(GEe);T(Mx.$$.fragment,HBt),HBt.forEach(t),QBt.forEach(t),E6r=i(HHe),OEe=n(HHe,"SPAN",{});var UBt=s(OEe);C6r=r(UBt,"TFAutoModelForCausalLM"),UBt.forEach(t),HHe.forEach(t),GWe=i(m),ar=n(m,"DIV",{class:!0});var Il=s(ar);T(Ex.$$.fragment,Il),w6r=i(Il),uc=n(Il,"P",{});var Eae=s(uc);A6r=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=n(Eae,"A",{href:!0});var JBt=s(AY);L6r=r(JBt,"from_pretrained()"),JBt.forEach(t),y6r=r(Eae," class method or the "),LY=n(Eae,"A",{href:!0});var YBt=s(LY);x6r=r(YBt,"from_config()"),YBt.forEach(t),$6r=r(Eae,` class
method.`),Eae.forEach(t),k6r=i(Il),Cx=n(Il,"P",{});var UHe=s(Cx);S6r=r(UHe,"This class cannot be instantiated directly using "),VEe=n(UHe,"CODE",{});var KBt=s(VEe);R6r=r(KBt,"__init__()"),KBt.forEach(t),P6r=r(UHe," (throws an error)."),UHe.forEach(t),B6r=i(Il),Bt=n(Il,"DIV",{class:!0});var yL=s(Bt);T(wx.$$.fragment,yL),I6r=i(yL),XEe=n(yL,"P",{});var ZBt=s(XEe);N6r=r(ZBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZBt.forEach(t),q6r=i(yL),pc=n(yL,"P",{});var Cae=s(pc);j6r=r(Cae,`Note:
Loading a model from its configuration file does `),zEe=n(Cae,"STRONG",{});var eIt=s(zEe);D6r=r(eIt,"not"),eIt.forEach(t),G6r=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(Cae,"A",{href:!0});var oIt=s(yY);O6r=r(oIt,"from_pretrained()"),oIt.forEach(t),V6r=r(Cae," to load the model weights."),Cae.forEach(t),X6r=i(yL),T(i5.$$.fragment,yL),yL.forEach(t),z6r=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(Ax.$$.fragment,Nl),W6r=i(Nl),WEe=n(Nl,"P",{});var rIt=s(WEe);Q6r=r(rIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rIt.forEach(t),H6r=i(Nl),cn=n(Nl,"P",{});var xL=s(cn);U6r=r(xL,"The model class to instantiate is selected based on the "),QEe=n(xL,"CODE",{});var tIt=s(QEe);J6r=r(tIt,"model_type"),tIt.forEach(t),Y6r=r(xL,` property of the config object (either
passed as an argument or loaded from `),HEe=n(xL,"CODE",{});var aIt=s(HEe);K6r=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),Z6r=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(xL,"CODE",{});var nIt=s(UEe);eAr=r(nIt,"pretrained_model_name_or_path"),nIt.forEach(t),oAr=r(xL,":"),xL.forEach(t),rAr=i(Nl),Me=n(Nl,"UL",{});var Ce=s(Me);d5=n(Ce,"LI",{});var YDe=s(d5);JEe=n(YDe,"STRONG",{});var sIt=s(JEe);tAr=r(sIt,"bert"),sIt.forEach(t),aAr=r(YDe," \u2014 "),xY=n(YDe,"A",{href:!0});var lIt=s(xY);nAr=r(lIt,"TFBertLMHeadModel"),lIt.forEach(t),sAr=r(YDe," (BERT model)"),YDe.forEach(t),lAr=i(Ce),c5=n(Ce,"LI",{});var KDe=s(c5);YEe=n(KDe,"STRONG",{});var iIt=s(YEe);iAr=r(iIt,"camembert"),iIt.forEach(t),dAr=r(KDe," \u2014 "),$Y=n(KDe,"A",{href:!0});var dIt=s($Y);cAr=r(dIt,"TFCamembertForCausalLM"),dIt.forEach(t),mAr=r(KDe," (CamemBERT model)"),KDe.forEach(t),fAr=i(Ce),m5=n(Ce,"LI",{});var ZDe=s(m5);KEe=n(ZDe,"STRONG",{});var cIt=s(KEe);gAr=r(cIt,"ctrl"),cIt.forEach(t),hAr=r(ZDe," \u2014 "),kY=n(ZDe,"A",{href:!0});var mIt=s(kY);uAr=r(mIt,"TFCTRLLMHeadModel"),mIt.forEach(t),pAr=r(ZDe," (CTRL model)"),ZDe.forEach(t),_Ar=i(Ce),f5=n(Ce,"LI",{});var eGe=s(f5);ZEe=n(eGe,"STRONG",{});var fIt=s(ZEe);bAr=r(fIt,"gpt2"),fIt.forEach(t),vAr=r(eGe," \u2014 "),SY=n(eGe,"A",{href:!0});var gIt=s(SY);FAr=r(gIt,"TFGPT2LMHeadModel"),gIt.forEach(t),TAr=r(eGe," (OpenAI GPT-2 model)"),eGe.forEach(t),MAr=i(Ce),g5=n(Ce,"LI",{});var oGe=s(g5);eCe=n(oGe,"STRONG",{});var hIt=s(eCe);EAr=r(hIt,"gptj"),hIt.forEach(t),CAr=r(oGe," \u2014 "),RY=n(oGe,"A",{href:!0});var uIt=s(RY);wAr=r(uIt,"TFGPTJForCausalLM"),uIt.forEach(t),AAr=r(oGe," (GPT-J model)"),oGe.forEach(t),LAr=i(Ce),h5=n(Ce,"LI",{});var rGe=s(h5);oCe=n(rGe,"STRONG",{});var pIt=s(oCe);yAr=r(pIt,"openai-gpt"),pIt.forEach(t),xAr=r(rGe," \u2014 "),PY=n(rGe,"A",{href:!0});var _It=s(PY);$Ar=r(_It,"TFOpenAIGPTLMHeadModel"),_It.forEach(t),kAr=r(rGe," (OpenAI GPT model)"),rGe.forEach(t),SAr=i(Ce),u5=n(Ce,"LI",{});var tGe=s(u5);rCe=n(tGe,"STRONG",{});var bIt=s(rCe);RAr=r(bIt,"opt"),bIt.forEach(t),PAr=r(tGe," \u2014 "),BY=n(tGe,"A",{href:!0});var vIt=s(BY);BAr=r(vIt,"TFOPTForCausalLM"),vIt.forEach(t),IAr=r(tGe," (OPT model)"),tGe.forEach(t),NAr=i(Ce),p5=n(Ce,"LI",{});var aGe=s(p5);tCe=n(aGe,"STRONG",{});var FIt=s(tCe);qAr=r(FIt,"rembert"),FIt.forEach(t),jAr=r(aGe," \u2014 "),IY=n(aGe,"A",{href:!0});var TIt=s(IY);DAr=r(TIt,"TFRemBertForCausalLM"),TIt.forEach(t),GAr=r(aGe," (RemBERT model)"),aGe.forEach(t),OAr=i(Ce),_5=n(Ce,"LI",{});var nGe=s(_5);aCe=n(nGe,"STRONG",{});var MIt=s(aCe);VAr=r(MIt,"roberta"),MIt.forEach(t),XAr=r(nGe," \u2014 "),NY=n(nGe,"A",{href:!0});var EIt=s(NY);zAr=r(EIt,"TFRobertaForCausalLM"),EIt.forEach(t),WAr=r(nGe," (RoBERTa model)"),nGe.forEach(t),QAr=i(Ce),b5=n(Ce,"LI",{});var sGe=s(b5);nCe=n(sGe,"STRONG",{});var CIt=s(nCe);HAr=r(CIt,"roformer"),CIt.forEach(t),UAr=r(sGe," \u2014 "),qY=n(sGe,"A",{href:!0});var wIt=s(qY);JAr=r(wIt,"TFRoFormerForCausalLM"),wIt.forEach(t),YAr=r(sGe," (RoFormer model)"),sGe.forEach(t),KAr=i(Ce),v5=n(Ce,"LI",{});var lGe=s(v5);sCe=n(lGe,"STRONG",{});var AIt=s(sCe);ZAr=r(AIt,"transfo-xl"),AIt.forEach(t),e7r=r(lGe," \u2014 "),jY=n(lGe,"A",{href:!0});var LIt=s(jY);o7r=r(LIt,"TFTransfoXLLMHeadModel"),LIt.forEach(t),r7r=r(lGe," (Transformer-XL model)"),lGe.forEach(t),t7r=i(Ce),F5=n(Ce,"LI",{});var iGe=s(F5);lCe=n(iGe,"STRONG",{});var yIt=s(lCe);a7r=r(yIt,"xlm"),yIt.forEach(t),n7r=r(iGe," \u2014 "),DY=n(iGe,"A",{href:!0});var xIt=s(DY);s7r=r(xIt,"TFXLMWithLMHeadModel"),xIt.forEach(t),l7r=r(iGe," (XLM model)"),iGe.forEach(t),i7r=i(Ce),T5=n(Ce,"LI",{});var dGe=s(T5);iCe=n(dGe,"STRONG",{});var $It=s(iCe);d7r=r($It,"xlnet"),$It.forEach(t),c7r=r(dGe," \u2014 "),GY=n(dGe,"A",{href:!0});var kIt=s(GY);m7r=r(kIt,"TFXLNetLMHeadModel"),kIt.forEach(t),f7r=r(dGe," (XLNet model)"),dGe.forEach(t),Ce.forEach(t),g7r=i(Nl),T(M5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),OWe=i(m),_c=n(m,"H2",{class:!0});var JHe=s(_c);E5=n(JHe,"A",{id:!0,class:!0,href:!0});var SIt=s(E5);dCe=n(SIt,"SPAN",{});var RIt=s(dCe);T(Lx.$$.fragment,RIt),RIt.forEach(t),SIt.forEach(t),h7r=i(JHe),cCe=n(JHe,"SPAN",{});var PIt=s(cCe);u7r=r(PIt,"TFAutoModelForImageClassification"),PIt.forEach(t),JHe.forEach(t),VWe=i(m),nr=n(m,"DIV",{class:!0});var ql=s(nr);T(yx.$$.fragment,ql),p7r=i(ql),bc=n(ql,"P",{});var wae=s(bc);_7r=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OY=n(wae,"A",{href:!0});var BIt=s(OY);b7r=r(BIt,"from_pretrained()"),BIt.forEach(t),v7r=r(wae," class method or the "),VY=n(wae,"A",{href:!0});var IIt=s(VY);F7r=r(IIt,"from_config()"),IIt.forEach(t),T7r=r(wae,` class
method.`),wae.forEach(t),M7r=i(ql),xx=n(ql,"P",{});var YHe=s(xx);E7r=r(YHe,"This class cannot be instantiated directly using "),mCe=n(YHe,"CODE",{});var NIt=s(mCe);C7r=r(NIt,"__init__()"),NIt.forEach(t),w7r=r(YHe," (throws an error)."),YHe.forEach(t),A7r=i(ql),It=n(ql,"DIV",{class:!0});var $L=s(It);T($x.$$.fragment,$L),L7r=i($L),fCe=n($L,"P",{});var qIt=s(fCe);y7r=r(qIt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qIt.forEach(t),x7r=i($L),vc=n($L,"P",{});var Aae=s(vc);$7r=r(Aae,`Note:
Loading a model from its configuration file does `),gCe=n(Aae,"STRONG",{});var jIt=s(gCe);k7r=r(jIt,"not"),jIt.forEach(t),S7r=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(Aae,"A",{href:!0});var DIt=s(XY);R7r=r(DIt,"from_pretrained()"),DIt.forEach(t),P7r=r(Aae," to load the model weights."),Aae.forEach(t),B7r=i($L),T(C5.$$.fragment,$L),$L.forEach(t),I7r=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(kx.$$.fragment,jl),N7r=i(jl),hCe=n(jl,"P",{});var GIt=s(hCe);q7r=r(GIt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GIt.forEach(t),j7r=i(jl),mn=n(jl,"P",{});var kL=s(mn);D7r=r(kL,"The model class to instantiate is selected based on the "),uCe=n(kL,"CODE",{});var OIt=s(uCe);G7r=r(OIt,"model_type"),OIt.forEach(t),O7r=r(kL,` property of the config object (either
passed as an argument or loaded from `),pCe=n(kL,"CODE",{});var VIt=s(pCe);V7r=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),X7r=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(kL,"CODE",{});var XIt=s(_Ce);z7r=r(XIt,"pretrained_model_name_or_path"),XIt.forEach(t),W7r=r(kL,":"),kL.forEach(t),Q7r=i(jl),Ve=n(jl,"UL",{});var Mo=s(Ve);w5=n(Mo,"LI",{});var cGe=s(w5);bCe=n(cGe,"STRONG",{});var zIt=s(bCe);H7r=r(zIt,"convnext"),zIt.forEach(t),U7r=r(cGe," \u2014 "),zY=n(cGe,"A",{href:!0});var WIt=s(zY);J7r=r(WIt,"TFConvNextForImageClassification"),WIt.forEach(t),Y7r=r(cGe," (ConvNeXT model)"),cGe.forEach(t),K7r=i(Mo),A5=n(Mo,"LI",{});var mGe=s(A5);vCe=n(mGe,"STRONG",{});var QIt=s(vCe);Z7r=r(QIt,"data2vec-vision"),QIt.forEach(t),eLr=r(mGe," \u2014 "),WY=n(mGe,"A",{href:!0});var HIt=s(WY);oLr=r(HIt,"TFData2VecVisionForImageClassification"),HIt.forEach(t),rLr=r(mGe," (Data2VecVision model)"),mGe.forEach(t),tLr=i(Mo),el=n(Mo,"LI",{});var aR=s(el);FCe=n(aR,"STRONG",{});var UIt=s(FCe);aLr=r(UIt,"deit"),UIt.forEach(t),nLr=r(aR," \u2014 "),QY=n(aR,"A",{href:!0});var JIt=s(QY);sLr=r(JIt,"TFDeiTForImageClassification"),JIt.forEach(t),lLr=r(aR," or "),HY=n(aR,"A",{href:!0});var YIt=s(HY);iLr=r(YIt,"TFDeiTForImageClassificationWithTeacher"),YIt.forEach(t),dLr=r(aR," (DeiT model)"),aR.forEach(t),cLr=i(Mo),L5=n(Mo,"LI",{});var fGe=s(L5);TCe=n(fGe,"STRONG",{});var KIt=s(TCe);mLr=r(KIt,"regnet"),KIt.forEach(t),fLr=r(fGe," \u2014 "),UY=n(fGe,"A",{href:!0});var ZIt=s(UY);gLr=r(ZIt,"TFRegNetForImageClassification"),ZIt.forEach(t),hLr=r(fGe," (RegNet model)"),fGe.forEach(t),uLr=i(Mo),y5=n(Mo,"LI",{});var gGe=s(y5);MCe=n(gGe,"STRONG",{});var eNt=s(MCe);pLr=r(eNt,"resnet"),eNt.forEach(t),_Lr=r(gGe," \u2014 "),JY=n(gGe,"A",{href:!0});var oNt=s(JY);bLr=r(oNt,"TFResNetForImageClassification"),oNt.forEach(t),vLr=r(gGe," (ResNet model)"),gGe.forEach(t),FLr=i(Mo),x5=n(Mo,"LI",{});var hGe=s(x5);ECe=n(hGe,"STRONG",{});var rNt=s(ECe);TLr=r(rNt,"segformer"),rNt.forEach(t),MLr=r(hGe," \u2014 "),YY=n(hGe,"A",{href:!0});var tNt=s(YY);ELr=r(tNt,"TFSegformerForImageClassification"),tNt.forEach(t),CLr=r(hGe," (SegFormer model)"),hGe.forEach(t),wLr=i(Mo),$5=n(Mo,"LI",{});var uGe=s($5);CCe=n(uGe,"STRONG",{});var aNt=s(CCe);ALr=r(aNt,"swin"),aNt.forEach(t),LLr=r(uGe," \u2014 "),KY=n(uGe,"A",{href:!0});var nNt=s(KY);yLr=r(nNt,"TFSwinForImageClassification"),nNt.forEach(t),xLr=r(uGe," (Swin Transformer model)"),uGe.forEach(t),$Lr=i(Mo),k5=n(Mo,"LI",{});var pGe=s(k5);wCe=n(pGe,"STRONG",{});var sNt=s(wCe);kLr=r(sNt,"vit"),sNt.forEach(t),SLr=r(pGe," \u2014 "),ZY=n(pGe,"A",{href:!0});var lNt=s(ZY);RLr=r(lNt,"TFViTForImageClassification"),lNt.forEach(t),PLr=r(pGe," (ViT model)"),pGe.forEach(t),Mo.forEach(t),BLr=i(jl),T(S5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),XWe=i(m),Fc=n(m,"H2",{class:!0});var KHe=s(Fc);R5=n(KHe,"A",{id:!0,class:!0,href:!0});var iNt=s(R5);ACe=n(iNt,"SPAN",{});var dNt=s(ACe);T(Sx.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),ILr=i(KHe),LCe=n(KHe,"SPAN",{});var cNt=s(LCe);NLr=r(cNt,"TFAutoModelForMaskedLM"),cNt.forEach(t),KHe.forEach(t),zWe=i(m),sr=n(m,"DIV",{class:!0});var Dl=s(sr);T(Rx.$$.fragment,Dl),qLr=i(Dl),Tc=n(Dl,"P",{});var Lae=s(Tc);jLr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=n(Lae,"A",{href:!0});var mNt=s(eK);DLr=r(mNt,"from_pretrained()"),mNt.forEach(t),GLr=r(Lae," class method or the "),oK=n(Lae,"A",{href:!0});var fNt=s(oK);OLr=r(fNt,"from_config()"),fNt.forEach(t),VLr=r(Lae,` class
method.`),Lae.forEach(t),XLr=i(Dl),Px=n(Dl,"P",{});var ZHe=s(Px);zLr=r(ZHe,"This class cannot be instantiated directly using "),yCe=n(ZHe,"CODE",{});var gNt=s(yCe);WLr=r(gNt,"__init__()"),gNt.forEach(t),QLr=r(ZHe," (throws an error)."),ZHe.forEach(t),HLr=i(Dl),Nt=n(Dl,"DIV",{class:!0});var SL=s(Nt);T(Bx.$$.fragment,SL),ULr=i(SL),xCe=n(SL,"P",{});var hNt=s(xCe);JLr=r(hNt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hNt.forEach(t),YLr=i(SL),Mc=n(SL,"P",{});var yae=s(Mc);KLr=r(yae,`Note:
Loading a model from its configuration file does `),$Ce=n(yae,"STRONG",{});var uNt=s($Ce);ZLr=r(uNt,"not"),uNt.forEach(t),eyr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(yae,"A",{href:!0});var pNt=s(rK);oyr=r(pNt,"from_pretrained()"),pNt.forEach(t),ryr=r(yae," to load the model weights."),yae.forEach(t),tyr=i(SL),T(P5.$$.fragment,SL),SL.forEach(t),ayr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Ix.$$.fragment,Gl),nyr=i(Gl),kCe=n(Gl,"P",{});var _Nt=s(kCe);syr=r(_Nt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Nt.forEach(t),lyr=i(Gl),fn=n(Gl,"P",{});var RL=s(fn);iyr=r(RL,"The model class to instantiate is selected based on the "),SCe=n(RL,"CODE",{});var bNt=s(SCe);dyr=r(bNt,"model_type"),bNt.forEach(t),cyr=r(RL,` property of the config object (either
passed as an argument or loaded from `),RCe=n(RL,"CODE",{});var vNt=s(RCe);myr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),fyr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(RL,"CODE",{});var FNt=s(PCe);gyr=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),hyr=r(RL,":"),RL.forEach(t),uyr=i(Gl),ie=n(Gl,"UL",{});var ge=s(ie);B5=n(ge,"LI",{});var _Ge=s(B5);BCe=n(_Ge,"STRONG",{});var TNt=s(BCe);pyr=r(TNt,"albert"),TNt.forEach(t),_yr=r(_Ge," \u2014 "),tK=n(_Ge,"A",{href:!0});var MNt=s(tK);byr=r(MNt,"TFAlbertForMaskedLM"),MNt.forEach(t),vyr=r(_Ge," (ALBERT model)"),_Ge.forEach(t),Fyr=i(ge),I5=n(ge,"LI",{});var bGe=s(I5);ICe=n(bGe,"STRONG",{});var ENt=s(ICe);Tyr=r(ENt,"bert"),ENt.forEach(t),Myr=r(bGe," \u2014 "),aK=n(bGe,"A",{href:!0});var CNt=s(aK);Eyr=r(CNt,"TFBertForMaskedLM"),CNt.forEach(t),Cyr=r(bGe," (BERT model)"),bGe.forEach(t),wyr=i(ge),N5=n(ge,"LI",{});var vGe=s(N5);NCe=n(vGe,"STRONG",{});var wNt=s(NCe);Ayr=r(wNt,"camembert"),wNt.forEach(t),Lyr=r(vGe," \u2014 "),nK=n(vGe,"A",{href:!0});var ANt=s(nK);yyr=r(ANt,"TFCamembertForMaskedLM"),ANt.forEach(t),xyr=r(vGe," (CamemBERT model)"),vGe.forEach(t),$yr=i(ge),q5=n(ge,"LI",{});var FGe=s(q5);qCe=n(FGe,"STRONG",{});var LNt=s(qCe);kyr=r(LNt,"convbert"),LNt.forEach(t),Syr=r(FGe," \u2014 "),sK=n(FGe,"A",{href:!0});var yNt=s(sK);Ryr=r(yNt,"TFConvBertForMaskedLM"),yNt.forEach(t),Pyr=r(FGe," (ConvBERT model)"),FGe.forEach(t),Byr=i(ge),j5=n(ge,"LI",{});var TGe=s(j5);jCe=n(TGe,"STRONG",{});var xNt=s(jCe);Iyr=r(xNt,"deberta"),xNt.forEach(t),Nyr=r(TGe," \u2014 "),lK=n(TGe,"A",{href:!0});var $Nt=s(lK);qyr=r($Nt,"TFDebertaForMaskedLM"),$Nt.forEach(t),jyr=r(TGe," (DeBERTa model)"),TGe.forEach(t),Dyr=i(ge),D5=n(ge,"LI",{});var MGe=s(D5);DCe=n(MGe,"STRONG",{});var kNt=s(DCe);Gyr=r(kNt,"deberta-v2"),kNt.forEach(t),Oyr=r(MGe," \u2014 "),iK=n(MGe,"A",{href:!0});var SNt=s(iK);Vyr=r(SNt,"TFDebertaV2ForMaskedLM"),SNt.forEach(t),Xyr=r(MGe," (DeBERTa-v2 model)"),MGe.forEach(t),zyr=i(ge),G5=n(ge,"LI",{});var EGe=s(G5);GCe=n(EGe,"STRONG",{});var RNt=s(GCe);Wyr=r(RNt,"distilbert"),RNt.forEach(t),Qyr=r(EGe," \u2014 "),dK=n(EGe,"A",{href:!0});var PNt=s(dK);Hyr=r(PNt,"TFDistilBertForMaskedLM"),PNt.forEach(t),Uyr=r(EGe," (DistilBERT model)"),EGe.forEach(t),Jyr=i(ge),O5=n(ge,"LI",{});var CGe=s(O5);OCe=n(CGe,"STRONG",{});var BNt=s(OCe);Yyr=r(BNt,"electra"),BNt.forEach(t),Kyr=r(CGe," \u2014 "),cK=n(CGe,"A",{href:!0});var INt=s(cK);Zyr=r(INt,"TFElectraForMaskedLM"),INt.forEach(t),e8r=r(CGe," (ELECTRA model)"),CGe.forEach(t),o8r=i(ge),V5=n(ge,"LI",{});var wGe=s(V5);VCe=n(wGe,"STRONG",{});var NNt=s(VCe);r8r=r(NNt,"flaubert"),NNt.forEach(t),t8r=r(wGe," \u2014 "),mK=n(wGe,"A",{href:!0});var qNt=s(mK);a8r=r(qNt,"TFFlaubertWithLMHeadModel"),qNt.forEach(t),n8r=r(wGe," (FlauBERT model)"),wGe.forEach(t),s8r=i(ge),X5=n(ge,"LI",{});var AGe=s(X5);XCe=n(AGe,"STRONG",{});var jNt=s(XCe);l8r=r(jNt,"funnel"),jNt.forEach(t),i8r=r(AGe," \u2014 "),fK=n(AGe,"A",{href:!0});var DNt=s(fK);d8r=r(DNt,"TFFunnelForMaskedLM"),DNt.forEach(t),c8r=r(AGe," (Funnel Transformer model)"),AGe.forEach(t),m8r=i(ge),z5=n(ge,"LI",{});var LGe=s(z5);zCe=n(LGe,"STRONG",{});var GNt=s(zCe);f8r=r(GNt,"layoutlm"),GNt.forEach(t),g8r=r(LGe," \u2014 "),gK=n(LGe,"A",{href:!0});var ONt=s(gK);h8r=r(ONt,"TFLayoutLMForMaskedLM"),ONt.forEach(t),u8r=r(LGe," (LayoutLM model)"),LGe.forEach(t),p8r=i(ge),W5=n(ge,"LI",{});var yGe=s(W5);WCe=n(yGe,"STRONG",{});var VNt=s(WCe);_8r=r(VNt,"longformer"),VNt.forEach(t),b8r=r(yGe," \u2014 "),hK=n(yGe,"A",{href:!0});var XNt=s(hK);v8r=r(XNt,"TFLongformerForMaskedLM"),XNt.forEach(t),F8r=r(yGe," (Longformer model)"),yGe.forEach(t),T8r=i(ge),Q5=n(ge,"LI",{});var xGe=s(Q5);QCe=n(xGe,"STRONG",{});var zNt=s(QCe);M8r=r(zNt,"mobilebert"),zNt.forEach(t),E8r=r(xGe," \u2014 "),uK=n(xGe,"A",{href:!0});var WNt=s(uK);C8r=r(WNt,"TFMobileBertForMaskedLM"),WNt.forEach(t),w8r=r(xGe," (MobileBERT model)"),xGe.forEach(t),A8r=i(ge),H5=n(ge,"LI",{});var $Ge=s(H5);HCe=n($Ge,"STRONG",{});var QNt=s(HCe);L8r=r(QNt,"mpnet"),QNt.forEach(t),y8r=r($Ge," \u2014 "),pK=n($Ge,"A",{href:!0});var HNt=s(pK);x8r=r(HNt,"TFMPNetForMaskedLM"),HNt.forEach(t),$8r=r($Ge," (MPNet model)"),$Ge.forEach(t),k8r=i(ge),U5=n(ge,"LI",{});var kGe=s(U5);UCe=n(kGe,"STRONG",{});var UNt=s(UCe);S8r=r(UNt,"rembert"),UNt.forEach(t),R8r=r(kGe," \u2014 "),_K=n(kGe,"A",{href:!0});var JNt=s(_K);P8r=r(JNt,"TFRemBertForMaskedLM"),JNt.forEach(t),B8r=r(kGe," (RemBERT model)"),kGe.forEach(t),I8r=i(ge),J5=n(ge,"LI",{});var SGe=s(J5);JCe=n(SGe,"STRONG",{});var YNt=s(JCe);N8r=r(YNt,"roberta"),YNt.forEach(t),q8r=r(SGe," \u2014 "),bK=n(SGe,"A",{href:!0});var KNt=s(bK);j8r=r(KNt,"TFRobertaForMaskedLM"),KNt.forEach(t),D8r=r(SGe," (RoBERTa model)"),SGe.forEach(t),G8r=i(ge),Y5=n(ge,"LI",{});var RGe=s(Y5);YCe=n(RGe,"STRONG",{});var ZNt=s(YCe);O8r=r(ZNt,"roformer"),ZNt.forEach(t),V8r=r(RGe," \u2014 "),vK=n(RGe,"A",{href:!0});var eqt=s(vK);X8r=r(eqt,"TFRoFormerForMaskedLM"),eqt.forEach(t),z8r=r(RGe," (RoFormer model)"),RGe.forEach(t),W8r=i(ge),K5=n(ge,"LI",{});var PGe=s(K5);KCe=n(PGe,"STRONG",{});var oqt=s(KCe);Q8r=r(oqt,"tapas"),oqt.forEach(t),H8r=r(PGe," \u2014 "),FK=n(PGe,"A",{href:!0});var rqt=s(FK);U8r=r(rqt,"TFTapasForMaskedLM"),rqt.forEach(t),J8r=r(PGe," (TAPAS model)"),PGe.forEach(t),Y8r=i(ge),Z5=n(ge,"LI",{});var BGe=s(Z5);ZCe=n(BGe,"STRONG",{});var tqt=s(ZCe);K8r=r(tqt,"xlm"),tqt.forEach(t),Z8r=r(BGe," \u2014 "),TK=n(BGe,"A",{href:!0});var aqt=s(TK);e9r=r(aqt,"TFXLMWithLMHeadModel"),aqt.forEach(t),o9r=r(BGe," (XLM model)"),BGe.forEach(t),r9r=i(ge),e3=n(ge,"LI",{});var IGe=s(e3);e5e=n(IGe,"STRONG",{});var nqt=s(e5e);t9r=r(nqt,"xlm-roberta"),nqt.forEach(t),a9r=r(IGe," \u2014 "),MK=n(IGe,"A",{href:!0});var sqt=s(MK);n9r=r(sqt,"TFXLMRobertaForMaskedLM"),sqt.forEach(t),s9r=r(IGe," (XLM-RoBERTa model)"),IGe.forEach(t),ge.forEach(t),l9r=i(Gl),T(o3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),WWe=i(m),Ec=n(m,"H2",{class:!0});var eUe=s(Ec);r3=n(eUe,"A",{id:!0,class:!0,href:!0});var lqt=s(r3);o5e=n(lqt,"SPAN",{});var iqt=s(o5e);T(Nx.$$.fragment,iqt),iqt.forEach(t),lqt.forEach(t),i9r=i(eUe),r5e=n(eUe,"SPAN",{});var dqt=s(r5e);d9r=r(dqt,"TFAutoModelForSeq2SeqLM"),dqt.forEach(t),eUe.forEach(t),QWe=i(m),lr=n(m,"DIV",{class:!0});var Ol=s(lr);T(qx.$$.fragment,Ol),c9r=i(Ol),Cc=n(Ol,"P",{});var xae=s(Cc);m9r=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EK=n(xae,"A",{href:!0});var cqt=s(EK);f9r=r(cqt,"from_pretrained()"),cqt.forEach(t),g9r=r(xae," class method or the "),CK=n(xae,"A",{href:!0});var mqt=s(CK);h9r=r(mqt,"from_config()"),mqt.forEach(t),u9r=r(xae,` class
method.`),xae.forEach(t),p9r=i(Ol),jx=n(Ol,"P",{});var oUe=s(jx);_9r=r(oUe,"This class cannot be instantiated directly using "),t5e=n(oUe,"CODE",{});var fqt=s(t5e);b9r=r(fqt,"__init__()"),fqt.forEach(t),v9r=r(oUe," (throws an error)."),oUe.forEach(t),F9r=i(Ol),qt=n(Ol,"DIV",{class:!0});var PL=s(qt);T(Dx.$$.fragment,PL),T9r=i(PL),a5e=n(PL,"P",{});var gqt=s(a5e);M9r=r(gqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gqt.forEach(t),E9r=i(PL),wc=n(PL,"P",{});var $ae=s(wc);C9r=r($ae,`Note:
Loading a model from its configuration file does `),n5e=n($ae,"STRONG",{});var hqt=s(n5e);w9r=r(hqt,"not"),hqt.forEach(t),A9r=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n($ae,"A",{href:!0});var uqt=s(wK);L9r=r(uqt,"from_pretrained()"),uqt.forEach(t),y9r=r($ae," to load the model weights."),$ae.forEach(t),x9r=i(PL),T(t3.$$.fragment,PL),PL.forEach(t),$9r=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(Gx.$$.fragment,Vl),k9r=i(Vl),s5e=n(Vl,"P",{});var pqt=s(s5e);S9r=r(pqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pqt.forEach(t),R9r=i(Vl),gn=n(Vl,"P",{});var BL=s(gn);P9r=r(BL,"The model class to instantiate is selected based on the "),l5e=n(BL,"CODE",{});var _qt=s(l5e);B9r=r(_qt,"model_type"),_qt.forEach(t),I9r=r(BL,` property of the config object (either
passed as an argument or loaded from `),i5e=n(BL,"CODE",{});var bqt=s(i5e);N9r=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),q9r=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(BL,"CODE",{});var vqt=s(d5e);j9r=r(vqt,"pretrained_model_name_or_path"),vqt.forEach(t),D9r=r(BL,":"),BL.forEach(t),G9r=i(Vl),ye=n(Vl,"UL",{});var Ie=s(ye);a3=n(Ie,"LI",{});var NGe=s(a3);c5e=n(NGe,"STRONG",{});var Fqt=s(c5e);O9r=r(Fqt,"bart"),Fqt.forEach(t),V9r=r(NGe," \u2014 "),AK=n(NGe,"A",{href:!0});var Tqt=s(AK);X9r=r(Tqt,"TFBartForConditionalGeneration"),Tqt.forEach(t),z9r=r(NGe," (BART model)"),NGe.forEach(t),W9r=i(Ie),n3=n(Ie,"LI",{});var qGe=s(n3);m5e=n(qGe,"STRONG",{});var Mqt=s(m5e);Q9r=r(Mqt,"blenderbot"),Mqt.forEach(t),H9r=r(qGe," \u2014 "),LK=n(qGe,"A",{href:!0});var Eqt=s(LK);U9r=r(Eqt,"TFBlenderbotForConditionalGeneration"),Eqt.forEach(t),J9r=r(qGe," (Blenderbot model)"),qGe.forEach(t),Y9r=i(Ie),s3=n(Ie,"LI",{});var jGe=s(s3);f5e=n(jGe,"STRONG",{});var Cqt=s(f5e);K9r=r(Cqt,"blenderbot-small"),Cqt.forEach(t),Z9r=r(jGe," \u2014 "),yK=n(jGe,"A",{href:!0});var wqt=s(yK);exr=r(wqt,"TFBlenderbotSmallForConditionalGeneration"),wqt.forEach(t),oxr=r(jGe," (BlenderbotSmall model)"),jGe.forEach(t),rxr=i(Ie),l3=n(Ie,"LI",{});var DGe=s(l3);g5e=n(DGe,"STRONG",{});var Aqt=s(g5e);txr=r(Aqt,"encoder-decoder"),Aqt.forEach(t),axr=r(DGe," \u2014 "),xK=n(DGe,"A",{href:!0});var Lqt=s(xK);nxr=r(Lqt,"TFEncoderDecoderModel"),Lqt.forEach(t),sxr=r(DGe," (Encoder decoder model)"),DGe.forEach(t),lxr=i(Ie),i3=n(Ie,"LI",{});var GGe=s(i3);h5e=n(GGe,"STRONG",{});var yqt=s(h5e);ixr=r(yqt,"led"),yqt.forEach(t),dxr=r(GGe," \u2014 "),$K=n(GGe,"A",{href:!0});var xqt=s($K);cxr=r(xqt,"TFLEDForConditionalGeneration"),xqt.forEach(t),mxr=r(GGe," (LED model)"),GGe.forEach(t),fxr=i(Ie),d3=n(Ie,"LI",{});var OGe=s(d3);u5e=n(OGe,"STRONG",{});var $qt=s(u5e);gxr=r($qt,"marian"),$qt.forEach(t),hxr=r(OGe," \u2014 "),kK=n(OGe,"A",{href:!0});var kqt=s(kK);uxr=r(kqt,"TFMarianMTModel"),kqt.forEach(t),pxr=r(OGe," (Marian model)"),OGe.forEach(t),_xr=i(Ie),c3=n(Ie,"LI",{});var VGe=s(c3);p5e=n(VGe,"STRONG",{});var Sqt=s(p5e);bxr=r(Sqt,"mbart"),Sqt.forEach(t),vxr=r(VGe," \u2014 "),SK=n(VGe,"A",{href:!0});var Rqt=s(SK);Fxr=r(Rqt,"TFMBartForConditionalGeneration"),Rqt.forEach(t),Txr=r(VGe," (mBART model)"),VGe.forEach(t),Mxr=i(Ie),m3=n(Ie,"LI",{});var XGe=s(m3);_5e=n(XGe,"STRONG",{});var Pqt=s(_5e);Exr=r(Pqt,"mt5"),Pqt.forEach(t),Cxr=r(XGe," \u2014 "),RK=n(XGe,"A",{href:!0});var Bqt=s(RK);wxr=r(Bqt,"TFMT5ForConditionalGeneration"),Bqt.forEach(t),Axr=r(XGe," (MT5 model)"),XGe.forEach(t),Lxr=i(Ie),f3=n(Ie,"LI",{});var zGe=s(f3);b5e=n(zGe,"STRONG",{});var Iqt=s(b5e);yxr=r(Iqt,"pegasus"),Iqt.forEach(t),xxr=r(zGe," \u2014 "),PK=n(zGe,"A",{href:!0});var Nqt=s(PK);$xr=r(Nqt,"TFPegasusForConditionalGeneration"),Nqt.forEach(t),kxr=r(zGe," (Pegasus model)"),zGe.forEach(t),Sxr=i(Ie),g3=n(Ie,"LI",{});var WGe=s(g3);v5e=n(WGe,"STRONG",{});var qqt=s(v5e);Rxr=r(qqt,"t5"),qqt.forEach(t),Pxr=r(WGe," \u2014 "),BK=n(WGe,"A",{href:!0});var jqt=s(BK);Bxr=r(jqt,"TFT5ForConditionalGeneration"),jqt.forEach(t),Ixr=r(WGe," (T5 model)"),WGe.forEach(t),Ie.forEach(t),Nxr=i(Vl),T(h3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),HWe=i(m),Ac=n(m,"H2",{class:!0});var rUe=s(Ac);u3=n(rUe,"A",{id:!0,class:!0,href:!0});var Dqt=s(u3);F5e=n(Dqt,"SPAN",{});var Gqt=s(F5e);T(Ox.$$.fragment,Gqt),Gqt.forEach(t),Dqt.forEach(t),qxr=i(rUe),T5e=n(rUe,"SPAN",{});var Oqt=s(T5e);jxr=r(Oqt,"TFAutoModelForSequenceClassification"),Oqt.forEach(t),rUe.forEach(t),UWe=i(m),ir=n(m,"DIV",{class:!0});var Xl=s(ir);T(Vx.$$.fragment,Xl),Dxr=i(Xl),Lc=n(Xl,"P",{});var kae=s(Lc);Gxr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IK=n(kae,"A",{href:!0});var Vqt=s(IK);Oxr=r(Vqt,"from_pretrained()"),Vqt.forEach(t),Vxr=r(kae," class method or the "),NK=n(kae,"A",{href:!0});var Xqt=s(NK);Xxr=r(Xqt,"from_config()"),Xqt.forEach(t),zxr=r(kae,` class
method.`),kae.forEach(t),Wxr=i(Xl),Xx=n(Xl,"P",{});var tUe=s(Xx);Qxr=r(tUe,"This class cannot be instantiated directly using "),M5e=n(tUe,"CODE",{});var zqt=s(M5e);Hxr=r(zqt,"__init__()"),zqt.forEach(t),Uxr=r(tUe," (throws an error)."),tUe.forEach(t),Jxr=i(Xl),jt=n(Xl,"DIV",{class:!0});var IL=s(jt);T(zx.$$.fragment,IL),Yxr=i(IL),E5e=n(IL,"P",{});var Wqt=s(E5e);Kxr=r(Wqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wqt.forEach(t),Zxr=i(IL),yc=n(IL,"P",{});var Sae=s(yc);e$r=r(Sae,`Note:
Loading a model from its configuration file does `),C5e=n(Sae,"STRONG",{});var Qqt=s(C5e);o$r=r(Qqt,"not"),Qqt.forEach(t),r$r=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Sae,"A",{href:!0});var Hqt=s(qK);t$r=r(Hqt,"from_pretrained()"),Hqt.forEach(t),a$r=r(Sae," to load the model weights."),Sae.forEach(t),n$r=i(IL),T(p3.$$.fragment,IL),IL.forEach(t),s$r=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Wx.$$.fragment,zl),l$r=i(zl),w5e=n(zl,"P",{});var Uqt=s(w5e);i$r=r(Uqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uqt.forEach(t),d$r=i(zl),hn=n(zl,"P",{});var NL=s(hn);c$r=r(NL,"The model class to instantiate is selected based on the "),A5e=n(NL,"CODE",{});var Jqt=s(A5e);m$r=r(Jqt,"model_type"),Jqt.forEach(t),f$r=r(NL,` property of the config object (either
passed as an argument or loaded from `),L5e=n(NL,"CODE",{});var Yqt=s(L5e);g$r=r(Yqt,"pretrained_model_name_or_path"),Yqt.forEach(t),h$r=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=n(NL,"CODE",{});var Kqt=s(y5e);u$r=r(Kqt,"pretrained_model_name_or_path"),Kqt.forEach(t),p$r=r(NL,":"),NL.forEach(t),_$r=i(zl),te=n(zl,"UL",{});var ne=s(te);_3=n(ne,"LI",{});var QGe=s(_3);x5e=n(QGe,"STRONG",{});var Zqt=s(x5e);b$r=r(Zqt,"albert"),Zqt.forEach(t),v$r=r(QGe," \u2014 "),jK=n(QGe,"A",{href:!0});var ejt=s(jK);F$r=r(ejt,"TFAlbertForSequenceClassification"),ejt.forEach(t),T$r=r(QGe," (ALBERT model)"),QGe.forEach(t),M$r=i(ne),b3=n(ne,"LI",{});var HGe=s(b3);$5e=n(HGe,"STRONG",{});var ojt=s($5e);E$r=r(ojt,"bert"),ojt.forEach(t),C$r=r(HGe," \u2014 "),DK=n(HGe,"A",{href:!0});var rjt=s(DK);w$r=r(rjt,"TFBertForSequenceClassification"),rjt.forEach(t),A$r=r(HGe," (BERT model)"),HGe.forEach(t),L$r=i(ne),v3=n(ne,"LI",{});var UGe=s(v3);k5e=n(UGe,"STRONG",{});var tjt=s(k5e);y$r=r(tjt,"camembert"),tjt.forEach(t),x$r=r(UGe," \u2014 "),GK=n(UGe,"A",{href:!0});var ajt=s(GK);$$r=r(ajt,"TFCamembertForSequenceClassification"),ajt.forEach(t),k$r=r(UGe," (CamemBERT model)"),UGe.forEach(t),S$r=i(ne),F3=n(ne,"LI",{});var JGe=s(F3);S5e=n(JGe,"STRONG",{});var njt=s(S5e);R$r=r(njt,"convbert"),njt.forEach(t),P$r=r(JGe," \u2014 "),OK=n(JGe,"A",{href:!0});var sjt=s(OK);B$r=r(sjt,"TFConvBertForSequenceClassification"),sjt.forEach(t),I$r=r(JGe," (ConvBERT model)"),JGe.forEach(t),N$r=i(ne),T3=n(ne,"LI",{});var YGe=s(T3);R5e=n(YGe,"STRONG",{});var ljt=s(R5e);q$r=r(ljt,"ctrl"),ljt.forEach(t),j$r=r(YGe," \u2014 "),VK=n(YGe,"A",{href:!0});var ijt=s(VK);D$r=r(ijt,"TFCTRLForSequenceClassification"),ijt.forEach(t),G$r=r(YGe," (CTRL model)"),YGe.forEach(t),O$r=i(ne),M3=n(ne,"LI",{});var KGe=s(M3);P5e=n(KGe,"STRONG",{});var djt=s(P5e);V$r=r(djt,"deberta"),djt.forEach(t),X$r=r(KGe," \u2014 "),XK=n(KGe,"A",{href:!0});var cjt=s(XK);z$r=r(cjt,"TFDebertaForSequenceClassification"),cjt.forEach(t),W$r=r(KGe," (DeBERTa model)"),KGe.forEach(t),Q$r=i(ne),E3=n(ne,"LI",{});var ZGe=s(E3);B5e=n(ZGe,"STRONG",{});var mjt=s(B5e);H$r=r(mjt,"deberta-v2"),mjt.forEach(t),U$r=r(ZGe," \u2014 "),zK=n(ZGe,"A",{href:!0});var fjt=s(zK);J$r=r(fjt,"TFDebertaV2ForSequenceClassification"),fjt.forEach(t),Y$r=r(ZGe," (DeBERTa-v2 model)"),ZGe.forEach(t),K$r=i(ne),C3=n(ne,"LI",{});var eOe=s(C3);I5e=n(eOe,"STRONG",{});var gjt=s(I5e);Z$r=r(gjt,"distilbert"),gjt.forEach(t),ekr=r(eOe," \u2014 "),WK=n(eOe,"A",{href:!0});var hjt=s(WK);okr=r(hjt,"TFDistilBertForSequenceClassification"),hjt.forEach(t),rkr=r(eOe," (DistilBERT model)"),eOe.forEach(t),tkr=i(ne),w3=n(ne,"LI",{});var oOe=s(w3);N5e=n(oOe,"STRONG",{});var ujt=s(N5e);akr=r(ujt,"electra"),ujt.forEach(t),nkr=r(oOe," \u2014 "),QK=n(oOe,"A",{href:!0});var pjt=s(QK);skr=r(pjt,"TFElectraForSequenceClassification"),pjt.forEach(t),lkr=r(oOe," (ELECTRA model)"),oOe.forEach(t),ikr=i(ne),A3=n(ne,"LI",{});var rOe=s(A3);q5e=n(rOe,"STRONG",{});var _jt=s(q5e);dkr=r(_jt,"flaubert"),_jt.forEach(t),ckr=r(rOe," \u2014 "),HK=n(rOe,"A",{href:!0});var bjt=s(HK);mkr=r(bjt,"TFFlaubertForSequenceClassification"),bjt.forEach(t),fkr=r(rOe," (FlauBERT model)"),rOe.forEach(t),gkr=i(ne),L3=n(ne,"LI",{});var tOe=s(L3);j5e=n(tOe,"STRONG",{});var vjt=s(j5e);hkr=r(vjt,"funnel"),vjt.forEach(t),ukr=r(tOe," \u2014 "),UK=n(tOe,"A",{href:!0});var Fjt=s(UK);pkr=r(Fjt,"TFFunnelForSequenceClassification"),Fjt.forEach(t),_kr=r(tOe," (Funnel Transformer model)"),tOe.forEach(t),bkr=i(ne),y3=n(ne,"LI",{});var aOe=s(y3);D5e=n(aOe,"STRONG",{});var Tjt=s(D5e);vkr=r(Tjt,"gpt2"),Tjt.forEach(t),Fkr=r(aOe," \u2014 "),JK=n(aOe,"A",{href:!0});var Mjt=s(JK);Tkr=r(Mjt,"TFGPT2ForSequenceClassification"),Mjt.forEach(t),Mkr=r(aOe," (OpenAI GPT-2 model)"),aOe.forEach(t),Ekr=i(ne),x3=n(ne,"LI",{});var nOe=s(x3);G5e=n(nOe,"STRONG",{});var Ejt=s(G5e);Ckr=r(Ejt,"gptj"),Ejt.forEach(t),wkr=r(nOe," \u2014 "),YK=n(nOe,"A",{href:!0});var Cjt=s(YK);Akr=r(Cjt,"TFGPTJForSequenceClassification"),Cjt.forEach(t),Lkr=r(nOe," (GPT-J model)"),nOe.forEach(t),ykr=i(ne),$3=n(ne,"LI",{});var sOe=s($3);O5e=n(sOe,"STRONG",{});var wjt=s(O5e);xkr=r(wjt,"layoutlm"),wjt.forEach(t),$kr=r(sOe," \u2014 "),KK=n(sOe,"A",{href:!0});var Ajt=s(KK);kkr=r(Ajt,"TFLayoutLMForSequenceClassification"),Ajt.forEach(t),Skr=r(sOe," (LayoutLM model)"),sOe.forEach(t),Rkr=i(ne),k3=n(ne,"LI",{});var lOe=s(k3);V5e=n(lOe,"STRONG",{});var Ljt=s(V5e);Pkr=r(Ljt,"longformer"),Ljt.forEach(t),Bkr=r(lOe," \u2014 "),ZK=n(lOe,"A",{href:!0});var yjt=s(ZK);Ikr=r(yjt,"TFLongformerForSequenceClassification"),yjt.forEach(t),Nkr=r(lOe," (Longformer model)"),lOe.forEach(t),qkr=i(ne),S3=n(ne,"LI",{});var iOe=s(S3);X5e=n(iOe,"STRONG",{});var xjt=s(X5e);jkr=r(xjt,"mobilebert"),xjt.forEach(t),Dkr=r(iOe," \u2014 "),eZ=n(iOe,"A",{href:!0});var $jt=s(eZ);Gkr=r($jt,"TFMobileBertForSequenceClassification"),$jt.forEach(t),Okr=r(iOe," (MobileBERT model)"),iOe.forEach(t),Vkr=i(ne),R3=n(ne,"LI",{});var dOe=s(R3);z5e=n(dOe,"STRONG",{});var kjt=s(z5e);Xkr=r(kjt,"mpnet"),kjt.forEach(t),zkr=r(dOe," \u2014 "),oZ=n(dOe,"A",{href:!0});var Sjt=s(oZ);Wkr=r(Sjt,"TFMPNetForSequenceClassification"),Sjt.forEach(t),Qkr=r(dOe," (MPNet model)"),dOe.forEach(t),Hkr=i(ne),P3=n(ne,"LI",{});var cOe=s(P3);W5e=n(cOe,"STRONG",{});var Rjt=s(W5e);Ukr=r(Rjt,"openai-gpt"),Rjt.forEach(t),Jkr=r(cOe," \u2014 "),rZ=n(cOe,"A",{href:!0});var Pjt=s(rZ);Ykr=r(Pjt,"TFOpenAIGPTForSequenceClassification"),Pjt.forEach(t),Kkr=r(cOe," (OpenAI GPT model)"),cOe.forEach(t),Zkr=i(ne),B3=n(ne,"LI",{});var mOe=s(B3);Q5e=n(mOe,"STRONG",{});var Bjt=s(Q5e);eSr=r(Bjt,"rembert"),Bjt.forEach(t),oSr=r(mOe," \u2014 "),tZ=n(mOe,"A",{href:!0});var Ijt=s(tZ);rSr=r(Ijt,"TFRemBertForSequenceClassification"),Ijt.forEach(t),tSr=r(mOe," (RemBERT model)"),mOe.forEach(t),aSr=i(ne),I3=n(ne,"LI",{});var fOe=s(I3);H5e=n(fOe,"STRONG",{});var Njt=s(H5e);nSr=r(Njt,"roberta"),Njt.forEach(t),sSr=r(fOe," \u2014 "),aZ=n(fOe,"A",{href:!0});var qjt=s(aZ);lSr=r(qjt,"TFRobertaForSequenceClassification"),qjt.forEach(t),iSr=r(fOe," (RoBERTa model)"),fOe.forEach(t),dSr=i(ne),N3=n(ne,"LI",{});var gOe=s(N3);U5e=n(gOe,"STRONG",{});var jjt=s(U5e);cSr=r(jjt,"roformer"),jjt.forEach(t),mSr=r(gOe," \u2014 "),nZ=n(gOe,"A",{href:!0});var Djt=s(nZ);fSr=r(Djt,"TFRoFormerForSequenceClassification"),Djt.forEach(t),gSr=r(gOe," (RoFormer model)"),gOe.forEach(t),hSr=i(ne),q3=n(ne,"LI",{});var hOe=s(q3);J5e=n(hOe,"STRONG",{});var Gjt=s(J5e);uSr=r(Gjt,"tapas"),Gjt.forEach(t),pSr=r(hOe," \u2014 "),sZ=n(hOe,"A",{href:!0});var Ojt=s(sZ);_Sr=r(Ojt,"TFTapasForSequenceClassification"),Ojt.forEach(t),bSr=r(hOe," (TAPAS model)"),hOe.forEach(t),vSr=i(ne),j3=n(ne,"LI",{});var uOe=s(j3);Y5e=n(uOe,"STRONG",{});var Vjt=s(Y5e);FSr=r(Vjt,"transfo-xl"),Vjt.forEach(t),TSr=r(uOe," \u2014 "),lZ=n(uOe,"A",{href:!0});var Xjt=s(lZ);MSr=r(Xjt,"TFTransfoXLForSequenceClassification"),Xjt.forEach(t),ESr=r(uOe," (Transformer-XL model)"),uOe.forEach(t),CSr=i(ne),D3=n(ne,"LI",{});var pOe=s(D3);K5e=n(pOe,"STRONG",{});var zjt=s(K5e);wSr=r(zjt,"xlm"),zjt.forEach(t),ASr=r(pOe," \u2014 "),iZ=n(pOe,"A",{href:!0});var Wjt=s(iZ);LSr=r(Wjt,"TFXLMForSequenceClassification"),Wjt.forEach(t),ySr=r(pOe," (XLM model)"),pOe.forEach(t),xSr=i(ne),G3=n(ne,"LI",{});var _Oe=s(G3);Z5e=n(_Oe,"STRONG",{});var Qjt=s(Z5e);$Sr=r(Qjt,"xlm-roberta"),Qjt.forEach(t),kSr=r(_Oe," \u2014 "),dZ=n(_Oe,"A",{href:!0});var Hjt=s(dZ);SSr=r(Hjt,"TFXLMRobertaForSequenceClassification"),Hjt.forEach(t),RSr=r(_Oe," (XLM-RoBERTa model)"),_Oe.forEach(t),PSr=i(ne),O3=n(ne,"LI",{});var bOe=s(O3);e3e=n(bOe,"STRONG",{});var Ujt=s(e3e);BSr=r(Ujt,"xlnet"),Ujt.forEach(t),ISr=r(bOe," \u2014 "),cZ=n(bOe,"A",{href:!0});var Jjt=s(cZ);NSr=r(Jjt,"TFXLNetForSequenceClassification"),Jjt.forEach(t),qSr=r(bOe," (XLNet model)"),bOe.forEach(t),ne.forEach(t),jSr=i(zl),T(V3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),JWe=i(m),xc=n(m,"H2",{class:!0});var aUe=s(xc);X3=n(aUe,"A",{id:!0,class:!0,href:!0});var Yjt=s(X3);o3e=n(Yjt,"SPAN",{});var Kjt=s(o3e);T(Qx.$$.fragment,Kjt),Kjt.forEach(t),Yjt.forEach(t),DSr=i(aUe),r3e=n(aUe,"SPAN",{});var Zjt=s(r3e);GSr=r(Zjt,"TFAutoModelForMultipleChoice"),Zjt.forEach(t),aUe.forEach(t),YWe=i(m),dr=n(m,"DIV",{class:!0});var Wl=s(dr);T(Hx.$$.fragment,Wl),OSr=i(Wl),$c=n(Wl,"P",{});var Rae=s($c);VSr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mZ=n(Rae,"A",{href:!0});var eDt=s(mZ);XSr=r(eDt,"from_pretrained()"),eDt.forEach(t),zSr=r(Rae," class method or the "),fZ=n(Rae,"A",{href:!0});var oDt=s(fZ);WSr=r(oDt,"from_config()"),oDt.forEach(t),QSr=r(Rae,` class
method.`),Rae.forEach(t),HSr=i(Wl),Ux=n(Wl,"P",{});var nUe=s(Ux);USr=r(nUe,"This class cannot be instantiated directly using "),t3e=n(nUe,"CODE",{});var rDt=s(t3e);JSr=r(rDt,"__init__()"),rDt.forEach(t),YSr=r(nUe," (throws an error)."),nUe.forEach(t),KSr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var qL=s(Dt);T(Jx.$$.fragment,qL),ZSr=i(qL),a3e=n(qL,"P",{});var tDt=s(a3e);eRr=r(tDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tDt.forEach(t),oRr=i(qL),kc=n(qL,"P",{});var Pae=s(kc);rRr=r(Pae,`Note:
Loading a model from its configuration file does `),n3e=n(Pae,"STRONG",{});var aDt=s(n3e);tRr=r(aDt,"not"),aDt.forEach(t),aRr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(Pae,"A",{href:!0});var nDt=s(gZ);nRr=r(nDt,"from_pretrained()"),nDt.forEach(t),sRr=r(Pae," to load the model weights."),Pae.forEach(t),lRr=i(qL),T(z3.$$.fragment,qL),qL.forEach(t),iRr=i(Wl),Nr=n(Wl,"DIV",{class:!0});var Ql=s(Nr);T(Yx.$$.fragment,Ql),dRr=i(Ql),s3e=n(Ql,"P",{});var sDt=s(s3e);cRr=r(sDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sDt.forEach(t),mRr=i(Ql),un=n(Ql,"P",{});var jL=s(un);fRr=r(jL,"The model class to instantiate is selected based on the "),l3e=n(jL,"CODE",{});var lDt=s(l3e);gRr=r(lDt,"model_type"),lDt.forEach(t),hRr=r(jL,` property of the config object (either
passed as an argument or loaded from `),i3e=n(jL,"CODE",{});var iDt=s(i3e);uRr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),pRr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(jL,"CODE",{});var dDt=s(d3e);_Rr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),bRr=r(jL,":"),jL.forEach(t),vRr=i(Ql),ve=n(Ql,"UL",{});var Te=s(ve);W3=n(Te,"LI",{});var vOe=s(W3);c3e=n(vOe,"STRONG",{});var cDt=s(c3e);FRr=r(cDt,"albert"),cDt.forEach(t),TRr=r(vOe," \u2014 "),hZ=n(vOe,"A",{href:!0});var mDt=s(hZ);MRr=r(mDt,"TFAlbertForMultipleChoice"),mDt.forEach(t),ERr=r(vOe," (ALBERT model)"),vOe.forEach(t),CRr=i(Te),Q3=n(Te,"LI",{});var FOe=s(Q3);m3e=n(FOe,"STRONG",{});var fDt=s(m3e);wRr=r(fDt,"bert"),fDt.forEach(t),ARr=r(FOe," \u2014 "),uZ=n(FOe,"A",{href:!0});var gDt=s(uZ);LRr=r(gDt,"TFBertForMultipleChoice"),gDt.forEach(t),yRr=r(FOe," (BERT model)"),FOe.forEach(t),xRr=i(Te),H3=n(Te,"LI",{});var TOe=s(H3);f3e=n(TOe,"STRONG",{});var hDt=s(f3e);$Rr=r(hDt,"camembert"),hDt.forEach(t),kRr=r(TOe," \u2014 "),pZ=n(TOe,"A",{href:!0});var uDt=s(pZ);SRr=r(uDt,"TFCamembertForMultipleChoice"),uDt.forEach(t),RRr=r(TOe," (CamemBERT model)"),TOe.forEach(t),PRr=i(Te),U3=n(Te,"LI",{});var MOe=s(U3);g3e=n(MOe,"STRONG",{});var pDt=s(g3e);BRr=r(pDt,"convbert"),pDt.forEach(t),IRr=r(MOe," \u2014 "),_Z=n(MOe,"A",{href:!0});var _Dt=s(_Z);NRr=r(_Dt,"TFConvBertForMultipleChoice"),_Dt.forEach(t),qRr=r(MOe," (ConvBERT model)"),MOe.forEach(t),jRr=i(Te),J3=n(Te,"LI",{});var EOe=s(J3);h3e=n(EOe,"STRONG",{});var bDt=s(h3e);DRr=r(bDt,"distilbert"),bDt.forEach(t),GRr=r(EOe," \u2014 "),bZ=n(EOe,"A",{href:!0});var vDt=s(bZ);ORr=r(vDt,"TFDistilBertForMultipleChoice"),vDt.forEach(t),VRr=r(EOe," (DistilBERT model)"),EOe.forEach(t),XRr=i(Te),Y3=n(Te,"LI",{});var COe=s(Y3);u3e=n(COe,"STRONG",{});var FDt=s(u3e);zRr=r(FDt,"electra"),FDt.forEach(t),WRr=r(COe," \u2014 "),vZ=n(COe,"A",{href:!0});var TDt=s(vZ);QRr=r(TDt,"TFElectraForMultipleChoice"),TDt.forEach(t),HRr=r(COe," (ELECTRA model)"),COe.forEach(t),URr=i(Te),K3=n(Te,"LI",{});var wOe=s(K3);p3e=n(wOe,"STRONG",{});var MDt=s(p3e);JRr=r(MDt,"flaubert"),MDt.forEach(t),YRr=r(wOe," \u2014 "),FZ=n(wOe,"A",{href:!0});var EDt=s(FZ);KRr=r(EDt,"TFFlaubertForMultipleChoice"),EDt.forEach(t),ZRr=r(wOe," (FlauBERT model)"),wOe.forEach(t),ePr=i(Te),Z3=n(Te,"LI",{});var AOe=s(Z3);_3e=n(AOe,"STRONG",{});var CDt=s(_3e);oPr=r(CDt,"funnel"),CDt.forEach(t),rPr=r(AOe," \u2014 "),TZ=n(AOe,"A",{href:!0});var wDt=s(TZ);tPr=r(wDt,"TFFunnelForMultipleChoice"),wDt.forEach(t),aPr=r(AOe," (Funnel Transformer model)"),AOe.forEach(t),nPr=i(Te),e0=n(Te,"LI",{});var LOe=s(e0);b3e=n(LOe,"STRONG",{});var ADt=s(b3e);sPr=r(ADt,"longformer"),ADt.forEach(t),lPr=r(LOe," \u2014 "),MZ=n(LOe,"A",{href:!0});var LDt=s(MZ);iPr=r(LDt,"TFLongformerForMultipleChoice"),LDt.forEach(t),dPr=r(LOe," (Longformer model)"),LOe.forEach(t),cPr=i(Te),o0=n(Te,"LI",{});var yOe=s(o0);v3e=n(yOe,"STRONG",{});var yDt=s(v3e);mPr=r(yDt,"mobilebert"),yDt.forEach(t),fPr=r(yOe," \u2014 "),EZ=n(yOe,"A",{href:!0});var xDt=s(EZ);gPr=r(xDt,"TFMobileBertForMultipleChoice"),xDt.forEach(t),hPr=r(yOe," (MobileBERT model)"),yOe.forEach(t),uPr=i(Te),r0=n(Te,"LI",{});var xOe=s(r0);F3e=n(xOe,"STRONG",{});var $Dt=s(F3e);pPr=r($Dt,"mpnet"),$Dt.forEach(t),_Pr=r(xOe," \u2014 "),CZ=n(xOe,"A",{href:!0});var kDt=s(CZ);bPr=r(kDt,"TFMPNetForMultipleChoice"),kDt.forEach(t),vPr=r(xOe," (MPNet model)"),xOe.forEach(t),FPr=i(Te),t0=n(Te,"LI",{});var $Oe=s(t0);T3e=n($Oe,"STRONG",{});var SDt=s(T3e);TPr=r(SDt,"rembert"),SDt.forEach(t),MPr=r($Oe," \u2014 "),wZ=n($Oe,"A",{href:!0});var RDt=s(wZ);EPr=r(RDt,"TFRemBertForMultipleChoice"),RDt.forEach(t),CPr=r($Oe," (RemBERT model)"),$Oe.forEach(t),wPr=i(Te),a0=n(Te,"LI",{});var kOe=s(a0);M3e=n(kOe,"STRONG",{});var PDt=s(M3e);APr=r(PDt,"roberta"),PDt.forEach(t),LPr=r(kOe," \u2014 "),AZ=n(kOe,"A",{href:!0});var BDt=s(AZ);yPr=r(BDt,"TFRobertaForMultipleChoice"),BDt.forEach(t),xPr=r(kOe," (RoBERTa model)"),kOe.forEach(t),$Pr=i(Te),n0=n(Te,"LI",{});var SOe=s(n0);E3e=n(SOe,"STRONG",{});var IDt=s(E3e);kPr=r(IDt,"roformer"),IDt.forEach(t),SPr=r(SOe," \u2014 "),LZ=n(SOe,"A",{href:!0});var NDt=s(LZ);RPr=r(NDt,"TFRoFormerForMultipleChoice"),NDt.forEach(t),PPr=r(SOe," (RoFormer model)"),SOe.forEach(t),BPr=i(Te),s0=n(Te,"LI",{});var ROe=s(s0);C3e=n(ROe,"STRONG",{});var qDt=s(C3e);IPr=r(qDt,"xlm"),qDt.forEach(t),NPr=r(ROe," \u2014 "),yZ=n(ROe,"A",{href:!0});var jDt=s(yZ);qPr=r(jDt,"TFXLMForMultipleChoice"),jDt.forEach(t),jPr=r(ROe," (XLM model)"),ROe.forEach(t),DPr=i(Te),l0=n(Te,"LI",{});var POe=s(l0);w3e=n(POe,"STRONG",{});var DDt=s(w3e);GPr=r(DDt,"xlm-roberta"),DDt.forEach(t),OPr=r(POe," \u2014 "),xZ=n(POe,"A",{href:!0});var GDt=s(xZ);VPr=r(GDt,"TFXLMRobertaForMultipleChoice"),GDt.forEach(t),XPr=r(POe," (XLM-RoBERTa model)"),POe.forEach(t),zPr=i(Te),i0=n(Te,"LI",{});var BOe=s(i0);A3e=n(BOe,"STRONG",{});var ODt=s(A3e);WPr=r(ODt,"xlnet"),ODt.forEach(t),QPr=r(BOe," \u2014 "),$Z=n(BOe,"A",{href:!0});var VDt=s($Z);HPr=r(VDt,"TFXLNetForMultipleChoice"),VDt.forEach(t),UPr=r(BOe," (XLNet model)"),BOe.forEach(t),Te.forEach(t),JPr=i(Ql),T(d0.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),KWe=i(m),Sc=n(m,"H2",{class:!0});var sUe=s(Sc);c0=n(sUe,"A",{id:!0,class:!0,href:!0});var XDt=s(c0);L3e=n(XDt,"SPAN",{});var zDt=s(L3e);T(Kx.$$.fragment,zDt),zDt.forEach(t),XDt.forEach(t),YPr=i(sUe),y3e=n(sUe,"SPAN",{});var WDt=s(y3e);KPr=r(WDt,"TFAutoModelForNextSentencePrediction"),WDt.forEach(t),sUe.forEach(t),ZWe=i(m),cr=n(m,"DIV",{class:!0});var Hl=s(cr);T(Zx.$$.fragment,Hl),ZPr=i(Hl),Rc=n(Hl,"P",{});var Bae=s(Rc);eBr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=n(Bae,"A",{href:!0});var QDt=s(kZ);oBr=r(QDt,"from_pretrained()"),QDt.forEach(t),rBr=r(Bae," class method or the "),SZ=n(Bae,"A",{href:!0});var HDt=s(SZ);tBr=r(HDt,"from_config()"),HDt.forEach(t),aBr=r(Bae,` class
method.`),Bae.forEach(t),nBr=i(Hl),e$=n(Hl,"P",{});var lUe=s(e$);sBr=r(lUe,"This class cannot be instantiated directly using "),x3e=n(lUe,"CODE",{});var UDt=s(x3e);lBr=r(UDt,"__init__()"),UDt.forEach(t),iBr=r(lUe," (throws an error)."),lUe.forEach(t),dBr=i(Hl),Gt=n(Hl,"DIV",{class:!0});var DL=s(Gt);T(o$.$$.fragment,DL),cBr=i(DL),$3e=n(DL,"P",{});var JDt=s($3e);mBr=r(JDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JDt.forEach(t),fBr=i(DL),Pc=n(DL,"P",{});var Iae=s(Pc);gBr=r(Iae,`Note:
Loading a model from its configuration file does `),k3e=n(Iae,"STRONG",{});var YDt=s(k3e);hBr=r(YDt,"not"),YDt.forEach(t),uBr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(Iae,"A",{href:!0});var KDt=s(RZ);pBr=r(KDt,"from_pretrained()"),KDt.forEach(t),_Br=r(Iae," to load the model weights."),Iae.forEach(t),bBr=i(DL),T(m0.$$.fragment,DL),DL.forEach(t),vBr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(r$.$$.fragment,Ul),FBr=i(Ul),S3e=n(Ul,"P",{});var ZDt=s(S3e);TBr=r(ZDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZDt.forEach(t),MBr=i(Ul),pn=n(Ul,"P",{});var GL=s(pn);EBr=r(GL,"The model class to instantiate is selected based on the "),R3e=n(GL,"CODE",{});var eGt=s(R3e);CBr=r(eGt,"model_type"),eGt.forEach(t),wBr=r(GL,` property of the config object (either
passed as an argument or loaded from `),P3e=n(GL,"CODE",{});var oGt=s(P3e);ABr=r(oGt,"pretrained_model_name_or_path"),oGt.forEach(t),LBr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(GL,"CODE",{});var rGt=s(B3e);yBr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),xBr=r(GL,":"),GL.forEach(t),$Br=i(Ul),t$=n(Ul,"UL",{});var iUe=s(t$);f0=n(iUe,"LI",{});var IOe=s(f0);I3e=n(IOe,"STRONG",{});var tGt=s(I3e);kBr=r(tGt,"bert"),tGt.forEach(t),SBr=r(IOe," \u2014 "),PZ=n(IOe,"A",{href:!0});var aGt=s(PZ);RBr=r(aGt,"TFBertForNextSentencePrediction"),aGt.forEach(t),PBr=r(IOe," (BERT model)"),IOe.forEach(t),BBr=i(iUe),g0=n(iUe,"LI",{});var NOe=s(g0);N3e=n(NOe,"STRONG",{});var nGt=s(N3e);IBr=r(nGt,"mobilebert"),nGt.forEach(t),NBr=r(NOe," \u2014 "),BZ=n(NOe,"A",{href:!0});var sGt=s(BZ);qBr=r(sGt,"TFMobileBertForNextSentencePrediction"),sGt.forEach(t),jBr=r(NOe," (MobileBERT model)"),NOe.forEach(t),iUe.forEach(t),DBr=i(Ul),T(h0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),eQe=i(m),Bc=n(m,"H2",{class:!0});var dUe=s(Bc);u0=n(dUe,"A",{id:!0,class:!0,href:!0});var lGt=s(u0);q3e=n(lGt,"SPAN",{});var iGt=s(q3e);T(a$.$$.fragment,iGt),iGt.forEach(t),lGt.forEach(t),GBr=i(dUe),j3e=n(dUe,"SPAN",{});var dGt=s(j3e);OBr=r(dGt,"TFAutoModelForTableQuestionAnswering"),dGt.forEach(t),dUe.forEach(t),oQe=i(m),mr=n(m,"DIV",{class:!0});var Jl=s(mr);T(n$.$$.fragment,Jl),VBr=i(Jl),Ic=n(Jl,"P",{});var Nae=s(Ic);XBr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IZ=n(Nae,"A",{href:!0});var cGt=s(IZ);zBr=r(cGt,"from_pretrained()"),cGt.forEach(t),WBr=r(Nae," class method or the "),NZ=n(Nae,"A",{href:!0});var mGt=s(NZ);QBr=r(mGt,"from_config()"),mGt.forEach(t),HBr=r(Nae,` class
method.`),Nae.forEach(t),UBr=i(Jl),s$=n(Jl,"P",{});var cUe=s(s$);JBr=r(cUe,"This class cannot be instantiated directly using "),D3e=n(cUe,"CODE",{});var fGt=s(D3e);YBr=r(fGt,"__init__()"),fGt.forEach(t),KBr=r(cUe," (throws an error)."),cUe.forEach(t),ZBr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var OL=s(Ot);T(l$.$$.fragment,OL),eIr=i(OL),G3e=n(OL,"P",{});var gGt=s(G3e);oIr=r(gGt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gGt.forEach(t),rIr=i(OL),Nc=n(OL,"P",{});var qae=s(Nc);tIr=r(qae,`Note:
Loading a model from its configuration file does `),O3e=n(qae,"STRONG",{});var hGt=s(O3e);aIr=r(hGt,"not"),hGt.forEach(t),nIr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(qae,"A",{href:!0});var uGt=s(qZ);sIr=r(uGt,"from_pretrained()"),uGt.forEach(t),lIr=r(qae," to load the model weights."),qae.forEach(t),iIr=i(OL),T(p0.$$.fragment,OL),OL.forEach(t),dIr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(i$.$$.fragment,Yl),cIr=i(Yl),V3e=n(Yl,"P",{});var pGt=s(V3e);mIr=r(pGt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pGt.forEach(t),fIr=i(Yl),_n=n(Yl,"P",{});var VL=s(_n);gIr=r(VL,"The model class to instantiate is selected based on the "),X3e=n(VL,"CODE",{});var _Gt=s(X3e);hIr=r(_Gt,"model_type"),_Gt.forEach(t),uIr=r(VL,` property of the config object (either
passed as an argument or loaded from `),z3e=n(VL,"CODE",{});var bGt=s(z3e);pIr=r(bGt,"pretrained_model_name_or_path"),bGt.forEach(t),_Ir=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(VL,"CODE",{});var vGt=s(W3e);bIr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),vIr=r(VL,":"),VL.forEach(t),FIr=i(Yl),Q3e=n(Yl,"UL",{});var FGt=s(Q3e);_0=n(FGt,"LI",{});var qOe=s(_0);H3e=n(qOe,"STRONG",{});var TGt=s(H3e);TIr=r(TGt,"tapas"),TGt.forEach(t),MIr=r(qOe," \u2014 "),jZ=n(qOe,"A",{href:!0});var MGt=s(jZ);EIr=r(MGt,"TFTapasForQuestionAnswering"),MGt.forEach(t),CIr=r(qOe," (TAPAS model)"),qOe.forEach(t),FGt.forEach(t),wIr=i(Yl),T(b0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),rQe=i(m),qc=n(m,"H2",{class:!0});var mUe=s(qc);v0=n(mUe,"A",{id:!0,class:!0,href:!0});var EGt=s(v0);U3e=n(EGt,"SPAN",{});var CGt=s(U3e);T(d$.$$.fragment,CGt),CGt.forEach(t),EGt.forEach(t),AIr=i(mUe),J3e=n(mUe,"SPAN",{});var wGt=s(J3e);LIr=r(wGt,"TFAutoModelForTokenClassification"),wGt.forEach(t),mUe.forEach(t),tQe=i(m),fr=n(m,"DIV",{class:!0});var Kl=s(fr);T(c$.$$.fragment,Kl),yIr=i(Kl),jc=n(Kl,"P",{});var jae=s(jc);xIr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DZ=n(jae,"A",{href:!0});var AGt=s(DZ);$Ir=r(AGt,"from_pretrained()"),AGt.forEach(t),kIr=r(jae," class method or the "),GZ=n(jae,"A",{href:!0});var LGt=s(GZ);SIr=r(LGt,"from_config()"),LGt.forEach(t),RIr=r(jae,` class
method.`),jae.forEach(t),PIr=i(Kl),m$=n(Kl,"P",{});var fUe=s(m$);BIr=r(fUe,"This class cannot be instantiated directly using "),Y3e=n(fUe,"CODE",{});var yGt=s(Y3e);IIr=r(yGt,"__init__()"),yGt.forEach(t),NIr=r(fUe," (throws an error)."),fUe.forEach(t),qIr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var XL=s(Vt);T(f$.$$.fragment,XL),jIr=i(XL),K3e=n(XL,"P",{});var xGt=s(K3e);DIr=r(xGt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xGt.forEach(t),GIr=i(XL),Dc=n(XL,"P",{});var Dae=s(Dc);OIr=r(Dae,`Note:
Loading a model from its configuration file does `),Z3e=n(Dae,"STRONG",{});var $Gt=s(Z3e);VIr=r($Gt,"not"),$Gt.forEach(t),XIr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Dae,"A",{href:!0});var kGt=s(OZ);zIr=r(kGt,"from_pretrained()"),kGt.forEach(t),WIr=r(Dae," to load the model weights."),Dae.forEach(t),QIr=i(XL),T(F0.$$.fragment,XL),XL.forEach(t),HIr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(g$.$$.fragment,Zl),UIr=i(Zl),e0e=n(Zl,"P",{});var SGt=s(e0e);JIr=r(SGt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SGt.forEach(t),YIr=i(Zl),bn=n(Zl,"P",{});var zL=s(bn);KIr=r(zL,"The model class to instantiate is selected based on the "),o0e=n(zL,"CODE",{});var RGt=s(o0e);ZIr=r(RGt,"model_type"),RGt.forEach(t),eNr=r(zL,` property of the config object (either
passed as an argument or loaded from `),r0e=n(zL,"CODE",{});var PGt=s(r0e);oNr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),rNr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(zL,"CODE",{});var BGt=s(t0e);tNr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),aNr=r(zL,":"),zL.forEach(t),nNr=i(Zl),de=n(Zl,"UL",{});var he=s(de);T0=n(he,"LI",{});var jOe=s(T0);a0e=n(jOe,"STRONG",{});var IGt=s(a0e);sNr=r(IGt,"albert"),IGt.forEach(t),lNr=r(jOe," \u2014 "),VZ=n(jOe,"A",{href:!0});var NGt=s(VZ);iNr=r(NGt,"TFAlbertForTokenClassification"),NGt.forEach(t),dNr=r(jOe," (ALBERT model)"),jOe.forEach(t),cNr=i(he),M0=n(he,"LI",{});var DOe=s(M0);n0e=n(DOe,"STRONG",{});var qGt=s(n0e);mNr=r(qGt,"bert"),qGt.forEach(t),fNr=r(DOe," \u2014 "),XZ=n(DOe,"A",{href:!0});var jGt=s(XZ);gNr=r(jGt,"TFBertForTokenClassification"),jGt.forEach(t),hNr=r(DOe," (BERT model)"),DOe.forEach(t),uNr=i(he),E0=n(he,"LI",{});var GOe=s(E0);s0e=n(GOe,"STRONG",{});var DGt=s(s0e);pNr=r(DGt,"camembert"),DGt.forEach(t),_Nr=r(GOe," \u2014 "),zZ=n(GOe,"A",{href:!0});var GGt=s(zZ);bNr=r(GGt,"TFCamembertForTokenClassification"),GGt.forEach(t),vNr=r(GOe," (CamemBERT model)"),GOe.forEach(t),FNr=i(he),C0=n(he,"LI",{});var OOe=s(C0);l0e=n(OOe,"STRONG",{});var OGt=s(l0e);TNr=r(OGt,"convbert"),OGt.forEach(t),MNr=r(OOe," \u2014 "),WZ=n(OOe,"A",{href:!0});var VGt=s(WZ);ENr=r(VGt,"TFConvBertForTokenClassification"),VGt.forEach(t),CNr=r(OOe," (ConvBERT model)"),OOe.forEach(t),wNr=i(he),w0=n(he,"LI",{});var VOe=s(w0);i0e=n(VOe,"STRONG",{});var XGt=s(i0e);ANr=r(XGt,"deberta"),XGt.forEach(t),LNr=r(VOe," \u2014 "),QZ=n(VOe,"A",{href:!0});var zGt=s(QZ);yNr=r(zGt,"TFDebertaForTokenClassification"),zGt.forEach(t),xNr=r(VOe," (DeBERTa model)"),VOe.forEach(t),$Nr=i(he),A0=n(he,"LI",{});var XOe=s(A0);d0e=n(XOe,"STRONG",{});var WGt=s(d0e);kNr=r(WGt,"deberta-v2"),WGt.forEach(t),SNr=r(XOe," \u2014 "),HZ=n(XOe,"A",{href:!0});var QGt=s(HZ);RNr=r(QGt,"TFDebertaV2ForTokenClassification"),QGt.forEach(t),PNr=r(XOe," (DeBERTa-v2 model)"),XOe.forEach(t),BNr=i(he),L0=n(he,"LI",{});var zOe=s(L0);c0e=n(zOe,"STRONG",{});var HGt=s(c0e);INr=r(HGt,"distilbert"),HGt.forEach(t),NNr=r(zOe," \u2014 "),UZ=n(zOe,"A",{href:!0});var UGt=s(UZ);qNr=r(UGt,"TFDistilBertForTokenClassification"),UGt.forEach(t),jNr=r(zOe," (DistilBERT model)"),zOe.forEach(t),DNr=i(he),y0=n(he,"LI",{});var WOe=s(y0);m0e=n(WOe,"STRONG",{});var JGt=s(m0e);GNr=r(JGt,"electra"),JGt.forEach(t),ONr=r(WOe," \u2014 "),JZ=n(WOe,"A",{href:!0});var YGt=s(JZ);VNr=r(YGt,"TFElectraForTokenClassification"),YGt.forEach(t),XNr=r(WOe," (ELECTRA model)"),WOe.forEach(t),zNr=i(he),x0=n(he,"LI",{});var QOe=s(x0);f0e=n(QOe,"STRONG",{});var KGt=s(f0e);WNr=r(KGt,"flaubert"),KGt.forEach(t),QNr=r(QOe," \u2014 "),YZ=n(QOe,"A",{href:!0});var ZGt=s(YZ);HNr=r(ZGt,"TFFlaubertForTokenClassification"),ZGt.forEach(t),UNr=r(QOe," (FlauBERT model)"),QOe.forEach(t),JNr=i(he),$0=n(he,"LI",{});var HOe=s($0);g0e=n(HOe,"STRONG",{});var eOt=s(g0e);YNr=r(eOt,"funnel"),eOt.forEach(t),KNr=r(HOe," \u2014 "),KZ=n(HOe,"A",{href:!0});var oOt=s(KZ);ZNr=r(oOt,"TFFunnelForTokenClassification"),oOt.forEach(t),eqr=r(HOe," (Funnel Transformer model)"),HOe.forEach(t),oqr=i(he),k0=n(he,"LI",{});var UOe=s(k0);h0e=n(UOe,"STRONG",{});var rOt=s(h0e);rqr=r(rOt,"layoutlm"),rOt.forEach(t),tqr=r(UOe," \u2014 "),ZZ=n(UOe,"A",{href:!0});var tOt=s(ZZ);aqr=r(tOt,"TFLayoutLMForTokenClassification"),tOt.forEach(t),nqr=r(UOe," (LayoutLM model)"),UOe.forEach(t),sqr=i(he),S0=n(he,"LI",{});var JOe=s(S0);u0e=n(JOe,"STRONG",{});var aOt=s(u0e);lqr=r(aOt,"longformer"),aOt.forEach(t),iqr=r(JOe," \u2014 "),eee=n(JOe,"A",{href:!0});var nOt=s(eee);dqr=r(nOt,"TFLongformerForTokenClassification"),nOt.forEach(t),cqr=r(JOe," (Longformer model)"),JOe.forEach(t),mqr=i(he),R0=n(he,"LI",{});var YOe=s(R0);p0e=n(YOe,"STRONG",{});var sOt=s(p0e);fqr=r(sOt,"mobilebert"),sOt.forEach(t),gqr=r(YOe," \u2014 "),oee=n(YOe,"A",{href:!0});var lOt=s(oee);hqr=r(lOt,"TFMobileBertForTokenClassification"),lOt.forEach(t),uqr=r(YOe," (MobileBERT model)"),YOe.forEach(t),pqr=i(he),P0=n(he,"LI",{});var KOe=s(P0);_0e=n(KOe,"STRONG",{});var iOt=s(_0e);_qr=r(iOt,"mpnet"),iOt.forEach(t),bqr=r(KOe," \u2014 "),ree=n(KOe,"A",{href:!0});var dOt=s(ree);vqr=r(dOt,"TFMPNetForTokenClassification"),dOt.forEach(t),Fqr=r(KOe," (MPNet model)"),KOe.forEach(t),Tqr=i(he),B0=n(he,"LI",{});var ZOe=s(B0);b0e=n(ZOe,"STRONG",{});var cOt=s(b0e);Mqr=r(cOt,"rembert"),cOt.forEach(t),Eqr=r(ZOe," \u2014 "),tee=n(ZOe,"A",{href:!0});var mOt=s(tee);Cqr=r(mOt,"TFRemBertForTokenClassification"),mOt.forEach(t),wqr=r(ZOe," (RemBERT model)"),ZOe.forEach(t),Aqr=i(he),I0=n(he,"LI",{});var eVe=s(I0);v0e=n(eVe,"STRONG",{});var fOt=s(v0e);Lqr=r(fOt,"roberta"),fOt.forEach(t),yqr=r(eVe," \u2014 "),aee=n(eVe,"A",{href:!0});var gOt=s(aee);xqr=r(gOt,"TFRobertaForTokenClassification"),gOt.forEach(t),$qr=r(eVe," (RoBERTa model)"),eVe.forEach(t),kqr=i(he),N0=n(he,"LI",{});var oVe=s(N0);F0e=n(oVe,"STRONG",{});var hOt=s(F0e);Sqr=r(hOt,"roformer"),hOt.forEach(t),Rqr=r(oVe," \u2014 "),nee=n(oVe,"A",{href:!0});var uOt=s(nee);Pqr=r(uOt,"TFRoFormerForTokenClassification"),uOt.forEach(t),Bqr=r(oVe," (RoFormer model)"),oVe.forEach(t),Iqr=i(he),q0=n(he,"LI",{});var rVe=s(q0);T0e=n(rVe,"STRONG",{});var pOt=s(T0e);Nqr=r(pOt,"xlm"),pOt.forEach(t),qqr=r(rVe," \u2014 "),see=n(rVe,"A",{href:!0});var _Ot=s(see);jqr=r(_Ot,"TFXLMForTokenClassification"),_Ot.forEach(t),Dqr=r(rVe," (XLM model)"),rVe.forEach(t),Gqr=i(he),j0=n(he,"LI",{});var tVe=s(j0);M0e=n(tVe,"STRONG",{});var bOt=s(M0e);Oqr=r(bOt,"xlm-roberta"),bOt.forEach(t),Vqr=r(tVe," \u2014 "),lee=n(tVe,"A",{href:!0});var vOt=s(lee);Xqr=r(vOt,"TFXLMRobertaForTokenClassification"),vOt.forEach(t),zqr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),Wqr=i(he),D0=n(he,"LI",{});var aVe=s(D0);E0e=n(aVe,"STRONG",{});var FOt=s(E0e);Qqr=r(FOt,"xlnet"),FOt.forEach(t),Hqr=r(aVe," \u2014 "),iee=n(aVe,"A",{href:!0});var TOt=s(iee);Uqr=r(TOt,"TFXLNetForTokenClassification"),TOt.forEach(t),Jqr=r(aVe," (XLNet model)"),aVe.forEach(t),he.forEach(t),Yqr=i(Zl),T(G0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),aQe=i(m),Gc=n(m,"H2",{class:!0});var gUe=s(Gc);O0=n(gUe,"A",{id:!0,class:!0,href:!0});var MOt=s(O0);C0e=n(MOt,"SPAN",{});var EOt=s(C0e);T(h$.$$.fragment,EOt),EOt.forEach(t),MOt.forEach(t),Kqr=i(gUe),w0e=n(gUe,"SPAN",{});var COt=s(w0e);Zqr=r(COt,"TFAutoModelForQuestionAnswering"),COt.forEach(t),gUe.forEach(t),nQe=i(m),gr=n(m,"DIV",{class:!0});var ei=s(gr);T(u$.$$.fragment,ei),ejr=i(ei),Oc=n(ei,"P",{});var Gae=s(Oc);ojr=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dee=n(Gae,"A",{href:!0});var wOt=s(dee);rjr=r(wOt,"from_pretrained()"),wOt.forEach(t),tjr=r(Gae," class method or the "),cee=n(Gae,"A",{href:!0});var AOt=s(cee);ajr=r(AOt,"from_config()"),AOt.forEach(t),njr=r(Gae,` class
method.`),Gae.forEach(t),sjr=i(ei),p$=n(ei,"P",{});var hUe=s(p$);ljr=r(hUe,"This class cannot be instantiated directly using "),A0e=n(hUe,"CODE",{});var LOt=s(A0e);ijr=r(LOt,"__init__()"),LOt.forEach(t),djr=r(hUe," (throws an error)."),hUe.forEach(t),cjr=i(ei),Xt=n(ei,"DIV",{class:!0});var WL=s(Xt);T(_$.$$.fragment,WL),mjr=i(WL),L0e=n(WL,"P",{});var yOt=s(L0e);fjr=r(yOt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yOt.forEach(t),gjr=i(WL),Vc=n(WL,"P",{});var Oae=s(Vc);hjr=r(Oae,`Note:
Loading a model from its configuration file does `),y0e=n(Oae,"STRONG",{});var xOt=s(y0e);ujr=r(xOt,"not"),xOt.forEach(t),pjr=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(Oae,"A",{href:!0});var $Ot=s(mee);_jr=r($Ot,"from_pretrained()"),$Ot.forEach(t),bjr=r(Oae," to load the model weights."),Oae.forEach(t),vjr=i(WL),T(V0.$$.fragment,WL),WL.forEach(t),Fjr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(b$.$$.fragment,oi),Tjr=i(oi),x0e=n(oi,"P",{});var kOt=s(x0e);Mjr=r(kOt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kOt.forEach(t),Ejr=i(oi),vn=n(oi,"P",{});var QL=s(vn);Cjr=r(QL,"The model class to instantiate is selected based on the "),$0e=n(QL,"CODE",{});var SOt=s($0e);wjr=r(SOt,"model_type"),SOt.forEach(t),Ajr=r(QL,` property of the config object (either
passed as an argument or loaded from `),k0e=n(QL,"CODE",{});var ROt=s(k0e);Ljr=r(ROt,"pretrained_model_name_or_path"),ROt.forEach(t),yjr=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(QL,"CODE",{});var POt=s(S0e);xjr=r(POt,"pretrained_model_name_or_path"),POt.forEach(t),$jr=r(QL,":"),QL.forEach(t),kjr=i(oi),ce=n(oi,"UL",{});var ue=s(ce);X0=n(ue,"LI",{});var nVe=s(X0);R0e=n(nVe,"STRONG",{});var BOt=s(R0e);Sjr=r(BOt,"albert"),BOt.forEach(t),Rjr=r(nVe," \u2014 "),fee=n(nVe,"A",{href:!0});var IOt=s(fee);Pjr=r(IOt,"TFAlbertForQuestionAnswering"),IOt.forEach(t),Bjr=r(nVe," (ALBERT model)"),nVe.forEach(t),Ijr=i(ue),z0=n(ue,"LI",{});var sVe=s(z0);P0e=n(sVe,"STRONG",{});var NOt=s(P0e);Njr=r(NOt,"bert"),NOt.forEach(t),qjr=r(sVe," \u2014 "),gee=n(sVe,"A",{href:!0});var qOt=s(gee);jjr=r(qOt,"TFBertForQuestionAnswering"),qOt.forEach(t),Djr=r(sVe," (BERT model)"),sVe.forEach(t),Gjr=i(ue),W0=n(ue,"LI",{});var lVe=s(W0);B0e=n(lVe,"STRONG",{});var jOt=s(B0e);Ojr=r(jOt,"camembert"),jOt.forEach(t),Vjr=r(lVe," \u2014 "),hee=n(lVe,"A",{href:!0});var DOt=s(hee);Xjr=r(DOt,"TFCamembertForQuestionAnswering"),DOt.forEach(t),zjr=r(lVe," (CamemBERT model)"),lVe.forEach(t),Wjr=i(ue),Q0=n(ue,"LI",{});var iVe=s(Q0);I0e=n(iVe,"STRONG",{});var GOt=s(I0e);Qjr=r(GOt,"convbert"),GOt.forEach(t),Hjr=r(iVe," \u2014 "),uee=n(iVe,"A",{href:!0});var OOt=s(uee);Ujr=r(OOt,"TFConvBertForQuestionAnswering"),OOt.forEach(t),Jjr=r(iVe," (ConvBERT model)"),iVe.forEach(t),Yjr=i(ue),H0=n(ue,"LI",{});var dVe=s(H0);N0e=n(dVe,"STRONG",{});var VOt=s(N0e);Kjr=r(VOt,"deberta"),VOt.forEach(t),Zjr=r(dVe," \u2014 "),pee=n(dVe,"A",{href:!0});var XOt=s(pee);eDr=r(XOt,"TFDebertaForQuestionAnswering"),XOt.forEach(t),oDr=r(dVe," (DeBERTa model)"),dVe.forEach(t),rDr=i(ue),U0=n(ue,"LI",{});var cVe=s(U0);q0e=n(cVe,"STRONG",{});var zOt=s(q0e);tDr=r(zOt,"deberta-v2"),zOt.forEach(t),aDr=r(cVe," \u2014 "),_ee=n(cVe,"A",{href:!0});var WOt=s(_ee);nDr=r(WOt,"TFDebertaV2ForQuestionAnswering"),WOt.forEach(t),sDr=r(cVe," (DeBERTa-v2 model)"),cVe.forEach(t),lDr=i(ue),J0=n(ue,"LI",{});var mVe=s(J0);j0e=n(mVe,"STRONG",{});var QOt=s(j0e);iDr=r(QOt,"distilbert"),QOt.forEach(t),dDr=r(mVe," \u2014 "),bee=n(mVe,"A",{href:!0});var HOt=s(bee);cDr=r(HOt,"TFDistilBertForQuestionAnswering"),HOt.forEach(t),mDr=r(mVe," (DistilBERT model)"),mVe.forEach(t),fDr=i(ue),Y0=n(ue,"LI",{});var fVe=s(Y0);D0e=n(fVe,"STRONG",{});var UOt=s(D0e);gDr=r(UOt,"electra"),UOt.forEach(t),hDr=r(fVe," \u2014 "),vee=n(fVe,"A",{href:!0});var JOt=s(vee);uDr=r(JOt,"TFElectraForQuestionAnswering"),JOt.forEach(t),pDr=r(fVe," (ELECTRA model)"),fVe.forEach(t),_Dr=i(ue),K0=n(ue,"LI",{});var gVe=s(K0);G0e=n(gVe,"STRONG",{});var YOt=s(G0e);bDr=r(YOt,"flaubert"),YOt.forEach(t),vDr=r(gVe," \u2014 "),Fee=n(gVe,"A",{href:!0});var KOt=s(Fee);FDr=r(KOt,"TFFlaubertForQuestionAnsweringSimple"),KOt.forEach(t),TDr=r(gVe," (FlauBERT model)"),gVe.forEach(t),MDr=i(ue),Z0=n(ue,"LI",{});var hVe=s(Z0);O0e=n(hVe,"STRONG",{});var ZOt=s(O0e);EDr=r(ZOt,"funnel"),ZOt.forEach(t),CDr=r(hVe," \u2014 "),Tee=n(hVe,"A",{href:!0});var eVt=s(Tee);wDr=r(eVt,"TFFunnelForQuestionAnswering"),eVt.forEach(t),ADr=r(hVe," (Funnel Transformer model)"),hVe.forEach(t),LDr=i(ue),ew=n(ue,"LI",{});var uVe=s(ew);V0e=n(uVe,"STRONG",{});var oVt=s(V0e);yDr=r(oVt,"gptj"),oVt.forEach(t),xDr=r(uVe," \u2014 "),Mee=n(uVe,"A",{href:!0});var rVt=s(Mee);$Dr=r(rVt,"TFGPTJForQuestionAnswering"),rVt.forEach(t),kDr=r(uVe," (GPT-J model)"),uVe.forEach(t),SDr=i(ue),ow=n(ue,"LI",{});var pVe=s(ow);X0e=n(pVe,"STRONG",{});var tVt=s(X0e);RDr=r(tVt,"longformer"),tVt.forEach(t),PDr=r(pVe," \u2014 "),Eee=n(pVe,"A",{href:!0});var aVt=s(Eee);BDr=r(aVt,"TFLongformerForQuestionAnswering"),aVt.forEach(t),IDr=r(pVe," (Longformer model)"),pVe.forEach(t),NDr=i(ue),rw=n(ue,"LI",{});var _Ve=s(rw);z0e=n(_Ve,"STRONG",{});var nVt=s(z0e);qDr=r(nVt,"mobilebert"),nVt.forEach(t),jDr=r(_Ve," \u2014 "),Cee=n(_Ve,"A",{href:!0});var sVt=s(Cee);DDr=r(sVt,"TFMobileBertForQuestionAnswering"),sVt.forEach(t),GDr=r(_Ve," (MobileBERT model)"),_Ve.forEach(t),ODr=i(ue),tw=n(ue,"LI",{});var bVe=s(tw);W0e=n(bVe,"STRONG",{});var lVt=s(W0e);VDr=r(lVt,"mpnet"),lVt.forEach(t),XDr=r(bVe," \u2014 "),wee=n(bVe,"A",{href:!0});var iVt=s(wee);zDr=r(iVt,"TFMPNetForQuestionAnswering"),iVt.forEach(t),WDr=r(bVe," (MPNet model)"),bVe.forEach(t),QDr=i(ue),aw=n(ue,"LI",{});var vVe=s(aw);Q0e=n(vVe,"STRONG",{});var dVt=s(Q0e);HDr=r(dVt,"rembert"),dVt.forEach(t),UDr=r(vVe," \u2014 "),Aee=n(vVe,"A",{href:!0});var cVt=s(Aee);JDr=r(cVt,"TFRemBertForQuestionAnswering"),cVt.forEach(t),YDr=r(vVe," (RemBERT model)"),vVe.forEach(t),KDr=i(ue),nw=n(ue,"LI",{});var FVe=s(nw);H0e=n(FVe,"STRONG",{});var mVt=s(H0e);ZDr=r(mVt,"roberta"),mVt.forEach(t),eGr=r(FVe," \u2014 "),Lee=n(FVe,"A",{href:!0});var fVt=s(Lee);oGr=r(fVt,"TFRobertaForQuestionAnswering"),fVt.forEach(t),rGr=r(FVe," (RoBERTa model)"),FVe.forEach(t),tGr=i(ue),sw=n(ue,"LI",{});var TVe=s(sw);U0e=n(TVe,"STRONG",{});var gVt=s(U0e);aGr=r(gVt,"roformer"),gVt.forEach(t),nGr=r(TVe," \u2014 "),yee=n(TVe,"A",{href:!0});var hVt=s(yee);sGr=r(hVt,"TFRoFormerForQuestionAnswering"),hVt.forEach(t),lGr=r(TVe," (RoFormer model)"),TVe.forEach(t),iGr=i(ue),lw=n(ue,"LI",{});var MVe=s(lw);J0e=n(MVe,"STRONG",{});var uVt=s(J0e);dGr=r(uVt,"xlm"),uVt.forEach(t),cGr=r(MVe," \u2014 "),xee=n(MVe,"A",{href:!0});var pVt=s(xee);mGr=r(pVt,"TFXLMForQuestionAnsweringSimple"),pVt.forEach(t),fGr=r(MVe," (XLM model)"),MVe.forEach(t),gGr=i(ue),iw=n(ue,"LI",{});var EVe=s(iw);Y0e=n(EVe,"STRONG",{});var _Vt=s(Y0e);hGr=r(_Vt,"xlm-roberta"),_Vt.forEach(t),uGr=r(EVe," \u2014 "),$ee=n(EVe,"A",{href:!0});var bVt=s($ee);pGr=r(bVt,"TFXLMRobertaForQuestionAnswering"),bVt.forEach(t),_Gr=r(EVe," (XLM-RoBERTa model)"),EVe.forEach(t),bGr=i(ue),dw=n(ue,"LI",{});var CVe=s(dw);K0e=n(CVe,"STRONG",{});var vVt=s(K0e);vGr=r(vVt,"xlnet"),vVt.forEach(t),FGr=r(CVe," \u2014 "),kee=n(CVe,"A",{href:!0});var FVt=s(kee);TGr=r(FVt,"TFXLNetForQuestionAnsweringSimple"),FVt.forEach(t),MGr=r(CVe," (XLNet model)"),CVe.forEach(t),ue.forEach(t),EGr=i(oi),T(cw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),sQe=i(m),Xc=n(m,"H2",{class:!0});var uUe=s(Xc);mw=n(uUe,"A",{id:!0,class:!0,href:!0});var TVt=s(mw);Z0e=n(TVt,"SPAN",{});var MVt=s(Z0e);T(v$.$$.fragment,MVt),MVt.forEach(t),TVt.forEach(t),CGr=i(uUe),ewe=n(uUe,"SPAN",{});var EVt=s(ewe);wGr=r(EVt,"TFAutoModelForVision2Seq"),EVt.forEach(t),uUe.forEach(t),lQe=i(m),hr=n(m,"DIV",{class:!0});var ri=s(hr);T(F$.$$.fragment,ri),AGr=i(ri),zc=n(ri,"P",{});var Vae=s(zc);LGr=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),See=n(Vae,"A",{href:!0});var CVt=s(See);yGr=r(CVt,"from_pretrained()"),CVt.forEach(t),xGr=r(Vae," class method or the "),Ree=n(Vae,"A",{href:!0});var wVt=s(Ree);$Gr=r(wVt,"from_config()"),wVt.forEach(t),kGr=r(Vae,` class
method.`),Vae.forEach(t),SGr=i(ri),T$=n(ri,"P",{});var pUe=s(T$);RGr=r(pUe,"This class cannot be instantiated directly using "),owe=n(pUe,"CODE",{});var AVt=s(owe);PGr=r(AVt,"__init__()"),AVt.forEach(t),BGr=r(pUe," (throws an error)."),pUe.forEach(t),IGr=i(ri),zt=n(ri,"DIV",{class:!0});var HL=s(zt);T(M$.$$.fragment,HL),NGr=i(HL),rwe=n(HL,"P",{});var LVt=s(rwe);qGr=r(LVt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LVt.forEach(t),jGr=i(HL),Wc=n(HL,"P",{});var Xae=s(Wc);DGr=r(Xae,`Note:
Loading a model from its configuration file does `),twe=n(Xae,"STRONG",{});var yVt=s(twe);GGr=r(yVt,"not"),yVt.forEach(t),OGr=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(Xae,"A",{href:!0});var xVt=s(Pee);VGr=r(xVt,"from_pretrained()"),xVt.forEach(t),XGr=r(Xae," to load the model weights."),Xae.forEach(t),zGr=i(HL),T(fw.$$.fragment,HL),HL.forEach(t),WGr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(E$.$$.fragment,ti),QGr=i(ti),awe=n(ti,"P",{});var $Vt=s(awe);HGr=r($Vt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Vt.forEach(t),UGr=i(ti),Fn=n(ti,"P",{});var UL=s(Fn);JGr=r(UL,"The model class to instantiate is selected based on the "),nwe=n(UL,"CODE",{});var kVt=s(nwe);YGr=r(kVt,"model_type"),kVt.forEach(t),KGr=r(UL,` property of the config object (either
passed as an argument or loaded from `),swe=n(UL,"CODE",{});var SVt=s(swe);ZGr=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),eOr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=n(UL,"CODE",{});var RVt=s(lwe);oOr=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),rOr=r(UL,":"),UL.forEach(t),tOr=i(ti),iwe=n(ti,"UL",{});var PVt=s(iwe);gw=n(PVt,"LI",{});var wVe=s(gw);dwe=n(wVe,"STRONG",{});var BVt=s(dwe);aOr=r(BVt,"vision-encoder-decoder"),BVt.forEach(t),nOr=r(wVe," \u2014 "),Bee=n(wVe,"A",{href:!0});var IVt=s(Bee);sOr=r(IVt,"TFVisionEncoderDecoderModel"),IVt.forEach(t),lOr=r(wVe," (Vision Encoder decoder model)"),wVe.forEach(t),PVt.forEach(t),iOr=i(ti),T(hw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),iQe=i(m),Qc=n(m,"H2",{class:!0});var _Ue=s(Qc);uw=n(_Ue,"A",{id:!0,class:!0,href:!0});var NVt=s(uw);cwe=n(NVt,"SPAN",{});var qVt=s(cwe);T(C$.$$.fragment,qVt),qVt.forEach(t),NVt.forEach(t),dOr=i(_Ue),mwe=n(_Ue,"SPAN",{});var jVt=s(mwe);cOr=r(jVt,"TFAutoModelForSpeechSeq2Seq"),jVt.forEach(t),_Ue.forEach(t),dQe=i(m),ur=n(m,"DIV",{class:!0});var ai=s(ur);T(w$.$$.fragment,ai),mOr=i(ai),Hc=n(ai,"P",{});var zae=s(Hc);fOr=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iee=n(zae,"A",{href:!0});var DVt=s(Iee);gOr=r(DVt,"from_pretrained()"),DVt.forEach(t),hOr=r(zae," class method or the "),Nee=n(zae,"A",{href:!0});var GVt=s(Nee);uOr=r(GVt,"from_config()"),GVt.forEach(t),pOr=r(zae,` class
method.`),zae.forEach(t),_Or=i(ai),A$=n(ai,"P",{});var bUe=s(A$);bOr=r(bUe,"This class cannot be instantiated directly using "),fwe=n(bUe,"CODE",{});var OVt=s(fwe);vOr=r(OVt,"__init__()"),OVt.forEach(t),FOr=r(bUe," (throws an error)."),bUe.forEach(t),TOr=i(ai),Wt=n(ai,"DIV",{class:!0});var JL=s(Wt);T(L$.$$.fragment,JL),MOr=i(JL),gwe=n(JL,"P",{});var VVt=s(gwe);EOr=r(VVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),VVt.forEach(t),COr=i(JL),Uc=n(JL,"P",{});var Wae=s(Uc);wOr=r(Wae,`Note:
Loading a model from its configuration file does `),hwe=n(Wae,"STRONG",{});var XVt=s(hwe);AOr=r(XVt,"not"),XVt.forEach(t),LOr=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(Wae,"A",{href:!0});var zVt=s(qee);yOr=r(zVt,"from_pretrained()"),zVt.forEach(t),xOr=r(Wae," to load the model weights."),Wae.forEach(t),$Or=i(JL),T(pw.$$.fragment,JL),JL.forEach(t),kOr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(y$.$$.fragment,ni),SOr=i(ni),uwe=n(ni,"P",{});var WVt=s(uwe);ROr=r(WVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WVt.forEach(t),POr=i(ni),Tn=n(ni,"P",{});var YL=s(Tn);BOr=r(YL,"The model class to instantiate is selected based on the "),pwe=n(YL,"CODE",{});var QVt=s(pwe);IOr=r(QVt,"model_type"),QVt.forEach(t),NOr=r(YL,` property of the config object (either
passed as an argument or loaded from `),_we=n(YL,"CODE",{});var HVt=s(_we);qOr=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),jOr=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(YL,"CODE",{});var UVt=s(bwe);DOr=r(UVt,"pretrained_model_name_or_path"),UVt.forEach(t),GOr=r(YL,":"),YL.forEach(t),OOr=i(ni),vwe=n(ni,"UL",{});var JVt=s(vwe);_w=n(JVt,"LI",{});var AVe=s(_w);Fwe=n(AVe,"STRONG",{});var YVt=s(Fwe);VOr=r(YVt,"speech_to_text"),YVt.forEach(t),XOr=r(AVe," \u2014 "),jee=n(AVe,"A",{href:!0});var KVt=s(jee);zOr=r(KVt,"TFSpeech2TextForConditionalGeneration"),KVt.forEach(t),WOr=r(AVe," (Speech2Text model)"),AVe.forEach(t),JVt.forEach(t),QOr=i(ni),T(bw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),cQe=i(m),Jc=n(m,"H2",{class:!0});var vUe=s(Jc);vw=n(vUe,"A",{id:!0,class:!0,href:!0});var ZVt=s(vw);Twe=n(ZVt,"SPAN",{});var eXt=s(Twe);T(x$.$$.fragment,eXt),eXt.forEach(t),ZVt.forEach(t),HOr=i(vUe),Mwe=n(vUe,"SPAN",{});var oXt=s(Mwe);UOr=r(oXt,"FlaxAutoModel"),oXt.forEach(t),vUe.forEach(t),mQe=i(m),pr=n(m,"DIV",{class:!0});var si=s(pr);T($$.$$.fragment,si),JOr=i(si),Yc=n(si,"P",{});var Qae=s(Yc);YOr=r(Qae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Dee=n(Qae,"A",{href:!0});var rXt=s(Dee);KOr=r(rXt,"from_pretrained()"),rXt.forEach(t),ZOr=r(Qae," class method or the "),Gee=n(Qae,"A",{href:!0});var tXt=s(Gee);eVr=r(tXt,"from_config()"),tXt.forEach(t),oVr=r(Qae,` class
method.`),Qae.forEach(t),rVr=i(si),k$=n(si,"P",{});var FUe=s(k$);tVr=r(FUe,"This class cannot be instantiated directly using "),Ewe=n(FUe,"CODE",{});var aXt=s(Ewe);aVr=r(aXt,"__init__()"),aXt.forEach(t),nVr=r(FUe," (throws an error)."),FUe.forEach(t),sVr=i(si),Qt=n(si,"DIV",{class:!0});var KL=s(Qt);T(S$.$$.fragment,KL),lVr=i(KL),Cwe=n(KL,"P",{});var nXt=s(Cwe);iVr=r(nXt,"Instantiates one of the base model classes of the library from a configuration."),nXt.forEach(t),dVr=i(KL),Kc=n(KL,"P",{});var Hae=s(Kc);cVr=r(Hae,`Note:
Loading a model from its configuration file does `),wwe=n(Hae,"STRONG",{});var sXt=s(wwe);mVr=r(sXt,"not"),sXt.forEach(t),fVr=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=n(Hae,"A",{href:!0});var lXt=s(Oee);gVr=r(lXt,"from_pretrained()"),lXt.forEach(t),hVr=r(Hae," to load the model weights."),Hae.forEach(t),uVr=i(KL),T(Fw.$$.fragment,KL),KL.forEach(t),pVr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(R$.$$.fragment,li),_Vr=i(li),Awe=n(li,"P",{});var iXt=s(Awe);bVr=r(iXt,"Instantiate one of the base model classes of the library from a pretrained model."),iXt.forEach(t),vVr=i(li),Mn=n(li,"P",{});var ZL=s(Mn);FVr=r(ZL,"The model class to instantiate is selected based on the "),Lwe=n(ZL,"CODE",{});var dXt=s(Lwe);TVr=r(dXt,"model_type"),dXt.forEach(t),MVr=r(ZL,` property of the config object (either
passed as an argument or loaded from `),ywe=n(ZL,"CODE",{});var cXt=s(ywe);EVr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),CVr=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=n(ZL,"CODE",{});var mXt=s(xwe);wVr=r(mXt,"pretrained_model_name_or_path"),mXt.forEach(t),AVr=r(ZL,":"),ZL.forEach(t),LVr=i(li),oe=n(li,"UL",{});var ae=s(oe);Tw=n(ae,"LI",{});var LVe=s(Tw);$we=n(LVe,"STRONG",{});var fXt=s($we);yVr=r(fXt,"albert"),fXt.forEach(t),xVr=r(LVe," \u2014 "),Vee=n(LVe,"A",{href:!0});var gXt=s(Vee);$Vr=r(gXt,"FlaxAlbertModel"),gXt.forEach(t),kVr=r(LVe," (ALBERT model)"),LVe.forEach(t),SVr=i(ae),Mw=n(ae,"LI",{});var yVe=s(Mw);kwe=n(yVe,"STRONG",{});var hXt=s(kwe);RVr=r(hXt,"bart"),hXt.forEach(t),PVr=r(yVe," \u2014 "),Xee=n(yVe,"A",{href:!0});var uXt=s(Xee);BVr=r(uXt,"FlaxBartModel"),uXt.forEach(t),IVr=r(yVe," (BART model)"),yVe.forEach(t),NVr=i(ae),Ew=n(ae,"LI",{});var xVe=s(Ew);Swe=n(xVe,"STRONG",{});var pXt=s(Swe);qVr=r(pXt,"beit"),pXt.forEach(t),jVr=r(xVe," \u2014 "),zee=n(xVe,"A",{href:!0});var _Xt=s(zee);DVr=r(_Xt,"FlaxBeitModel"),_Xt.forEach(t),GVr=r(xVe," (BEiT model)"),xVe.forEach(t),OVr=i(ae),Cw=n(ae,"LI",{});var $Ve=s(Cw);Rwe=n($Ve,"STRONG",{});var bXt=s(Rwe);VVr=r(bXt,"bert"),bXt.forEach(t),XVr=r($Ve," \u2014 "),Wee=n($Ve,"A",{href:!0});var vXt=s(Wee);zVr=r(vXt,"FlaxBertModel"),vXt.forEach(t),WVr=r($Ve," (BERT model)"),$Ve.forEach(t),QVr=i(ae),ww=n(ae,"LI",{});var kVe=s(ww);Pwe=n(kVe,"STRONG",{});var FXt=s(Pwe);HVr=r(FXt,"big_bird"),FXt.forEach(t),UVr=r(kVe," \u2014 "),Qee=n(kVe,"A",{href:!0});var TXt=s(Qee);JVr=r(TXt,"FlaxBigBirdModel"),TXt.forEach(t),YVr=r(kVe," (BigBird model)"),kVe.forEach(t),KVr=i(ae),Aw=n(ae,"LI",{});var SVe=s(Aw);Bwe=n(SVe,"STRONG",{});var MXt=s(Bwe);ZVr=r(MXt,"blenderbot"),MXt.forEach(t),eXr=r(SVe," \u2014 "),Hee=n(SVe,"A",{href:!0});var EXt=s(Hee);oXr=r(EXt,"FlaxBlenderbotModel"),EXt.forEach(t),rXr=r(SVe," (Blenderbot model)"),SVe.forEach(t),tXr=i(ae),Lw=n(ae,"LI",{});var RVe=s(Lw);Iwe=n(RVe,"STRONG",{});var CXt=s(Iwe);aXr=r(CXt,"blenderbot-small"),CXt.forEach(t),nXr=r(RVe," \u2014 "),Uee=n(RVe,"A",{href:!0});var wXt=s(Uee);sXr=r(wXt,"FlaxBlenderbotSmallModel"),wXt.forEach(t),lXr=r(RVe," (BlenderbotSmall model)"),RVe.forEach(t),iXr=i(ae),yw=n(ae,"LI",{});var PVe=s(yw);Nwe=n(PVe,"STRONG",{});var AXt=s(Nwe);dXr=r(AXt,"clip"),AXt.forEach(t),cXr=r(PVe," \u2014 "),Jee=n(PVe,"A",{href:!0});var LXt=s(Jee);mXr=r(LXt,"FlaxCLIPModel"),LXt.forEach(t),fXr=r(PVe," (CLIP model)"),PVe.forEach(t),gXr=i(ae),xw=n(ae,"LI",{});var BVe=s(xw);qwe=n(BVe,"STRONG",{});var yXt=s(qwe);hXr=r(yXt,"distilbert"),yXt.forEach(t),uXr=r(BVe," \u2014 "),Yee=n(BVe,"A",{href:!0});var xXt=s(Yee);pXr=r(xXt,"FlaxDistilBertModel"),xXt.forEach(t),_Xr=r(BVe," (DistilBERT model)"),BVe.forEach(t),bXr=i(ae),$w=n(ae,"LI",{});var IVe=s($w);jwe=n(IVe,"STRONG",{});var $Xt=s(jwe);vXr=r($Xt,"electra"),$Xt.forEach(t),FXr=r(IVe," \u2014 "),Kee=n(IVe,"A",{href:!0});var kXt=s(Kee);TXr=r(kXt,"FlaxElectraModel"),kXt.forEach(t),MXr=r(IVe," (ELECTRA model)"),IVe.forEach(t),EXr=i(ae),kw=n(ae,"LI",{});var NVe=s(kw);Dwe=n(NVe,"STRONG",{});var SXt=s(Dwe);CXr=r(SXt,"gpt2"),SXt.forEach(t),wXr=r(NVe," \u2014 "),Zee=n(NVe,"A",{href:!0});var RXt=s(Zee);AXr=r(RXt,"FlaxGPT2Model"),RXt.forEach(t),LXr=r(NVe," (OpenAI GPT-2 model)"),NVe.forEach(t),yXr=i(ae),Sw=n(ae,"LI",{});var qVe=s(Sw);Gwe=n(qVe,"STRONG",{});var PXt=s(Gwe);xXr=r(PXt,"gpt_neo"),PXt.forEach(t),$Xr=r(qVe," \u2014 "),eoe=n(qVe,"A",{href:!0});var BXt=s(eoe);kXr=r(BXt,"FlaxGPTNeoModel"),BXt.forEach(t),SXr=r(qVe," (GPT Neo model)"),qVe.forEach(t),RXr=i(ae),Rw=n(ae,"LI",{});var jVe=s(Rw);Owe=n(jVe,"STRONG",{});var IXt=s(Owe);PXr=r(IXt,"gptj"),IXt.forEach(t),BXr=r(jVe," \u2014 "),ooe=n(jVe,"A",{href:!0});var NXt=s(ooe);IXr=r(NXt,"FlaxGPTJModel"),NXt.forEach(t),NXr=r(jVe," (GPT-J model)"),jVe.forEach(t),qXr=i(ae),Pw=n(ae,"LI",{});var DVe=s(Pw);Vwe=n(DVe,"STRONG",{});var qXt=s(Vwe);jXr=r(qXt,"longt5"),qXt.forEach(t),DXr=r(DVe," \u2014 "),roe=n(DVe,"A",{href:!0});var jXt=s(roe);GXr=r(jXt,"FlaxLongT5Model"),jXt.forEach(t),OXr=r(DVe," (LongT5 model)"),DVe.forEach(t),VXr=i(ae),Bw=n(ae,"LI",{});var GVe=s(Bw);Xwe=n(GVe,"STRONG",{});var DXt=s(Xwe);XXr=r(DXt,"marian"),DXt.forEach(t),zXr=r(GVe," \u2014 "),toe=n(GVe,"A",{href:!0});var GXt=s(toe);WXr=r(GXt,"FlaxMarianModel"),GXt.forEach(t),QXr=r(GVe," (Marian model)"),GVe.forEach(t),HXr=i(ae),Iw=n(ae,"LI",{});var OVe=s(Iw);zwe=n(OVe,"STRONG",{});var OXt=s(zwe);UXr=r(OXt,"mbart"),OXt.forEach(t),JXr=r(OVe," \u2014 "),aoe=n(OVe,"A",{href:!0});var VXt=s(aoe);YXr=r(VXt,"FlaxMBartModel"),VXt.forEach(t),KXr=r(OVe," (mBART model)"),OVe.forEach(t),ZXr=i(ae),Nw=n(ae,"LI",{});var VVe=s(Nw);Wwe=n(VVe,"STRONG",{});var XXt=s(Wwe);ezr=r(XXt,"mt5"),XXt.forEach(t),ozr=r(VVe," \u2014 "),noe=n(VVe,"A",{href:!0});var zXt=s(noe);rzr=r(zXt,"FlaxMT5Model"),zXt.forEach(t),tzr=r(VVe," (MT5 model)"),VVe.forEach(t),azr=i(ae),qw=n(ae,"LI",{});var XVe=s(qw);Qwe=n(XVe,"STRONG",{});var WXt=s(Qwe);nzr=r(WXt,"opt"),WXt.forEach(t),szr=r(XVe," \u2014 "),soe=n(XVe,"A",{href:!0});var QXt=s(soe);lzr=r(QXt,"FlaxOPTModel"),QXt.forEach(t),izr=r(XVe," (OPT model)"),XVe.forEach(t),dzr=i(ae),jw=n(ae,"LI",{});var zVe=s(jw);Hwe=n(zVe,"STRONG",{});var HXt=s(Hwe);czr=r(HXt,"pegasus"),HXt.forEach(t),mzr=r(zVe," \u2014 "),loe=n(zVe,"A",{href:!0});var UXt=s(loe);fzr=r(UXt,"FlaxPegasusModel"),UXt.forEach(t),gzr=r(zVe," (Pegasus model)"),zVe.forEach(t),hzr=i(ae),Dw=n(ae,"LI",{});var WVe=s(Dw);Uwe=n(WVe,"STRONG",{});var JXt=s(Uwe);uzr=r(JXt,"roberta"),JXt.forEach(t),pzr=r(WVe," \u2014 "),ioe=n(WVe,"A",{href:!0});var YXt=s(ioe);_zr=r(YXt,"FlaxRobertaModel"),YXt.forEach(t),bzr=r(WVe," (RoBERTa model)"),WVe.forEach(t),vzr=i(ae),Gw=n(ae,"LI",{});var QVe=s(Gw);Jwe=n(QVe,"STRONG",{});var KXt=s(Jwe);Fzr=r(KXt,"roformer"),KXt.forEach(t),Tzr=r(QVe," \u2014 "),doe=n(QVe,"A",{href:!0});var ZXt=s(doe);Mzr=r(ZXt,"FlaxRoFormerModel"),ZXt.forEach(t),Ezr=r(QVe," (RoFormer model)"),QVe.forEach(t),Czr=i(ae),Ow=n(ae,"LI",{});var HVe=s(Ow);Ywe=n(HVe,"STRONG",{});var ezt=s(Ywe);wzr=r(ezt,"t5"),ezt.forEach(t),Azr=r(HVe," \u2014 "),coe=n(HVe,"A",{href:!0});var ozt=s(coe);Lzr=r(ozt,"FlaxT5Model"),ozt.forEach(t),yzr=r(HVe," (T5 model)"),HVe.forEach(t),xzr=i(ae),Vw=n(ae,"LI",{});var UVe=s(Vw);Kwe=n(UVe,"STRONG",{});var rzt=s(Kwe);$zr=r(rzt,"vision-text-dual-encoder"),rzt.forEach(t),kzr=r(UVe," \u2014 "),moe=n(UVe,"A",{href:!0});var tzt=s(moe);Szr=r(tzt,"FlaxVisionTextDualEncoderModel"),tzt.forEach(t),Rzr=r(UVe," (VisionTextDualEncoder model)"),UVe.forEach(t),Pzr=i(ae),Xw=n(ae,"LI",{});var JVe=s(Xw);Zwe=n(JVe,"STRONG",{});var azt=s(Zwe);Bzr=r(azt,"vit"),azt.forEach(t),Izr=r(JVe," \u2014 "),foe=n(JVe,"A",{href:!0});var nzt=s(foe);Nzr=r(nzt,"FlaxViTModel"),nzt.forEach(t),qzr=r(JVe," (ViT model)"),JVe.forEach(t),jzr=i(ae),zw=n(ae,"LI",{});var YVe=s(zw);e6e=n(YVe,"STRONG",{});var szt=s(e6e);Dzr=r(szt,"wav2vec2"),szt.forEach(t),Gzr=r(YVe," \u2014 "),goe=n(YVe,"A",{href:!0});var lzt=s(goe);Ozr=r(lzt,"FlaxWav2Vec2Model"),lzt.forEach(t),Vzr=r(YVe," (Wav2Vec2 model)"),YVe.forEach(t),Xzr=i(ae),Ww=n(ae,"LI",{});var KVe=s(Ww);o6e=n(KVe,"STRONG",{});var izt=s(o6e);zzr=r(izt,"xglm"),izt.forEach(t),Wzr=r(KVe," \u2014 "),hoe=n(KVe,"A",{href:!0});var dzt=s(hoe);Qzr=r(dzt,"FlaxXGLMModel"),dzt.forEach(t),Hzr=r(KVe," (XGLM model)"),KVe.forEach(t),Uzr=i(ae),Qw=n(ae,"LI",{});var ZVe=s(Qw);r6e=n(ZVe,"STRONG",{});var czt=s(r6e);Jzr=r(czt,"xlm-roberta"),czt.forEach(t),Yzr=r(ZVe," \u2014 "),uoe=n(ZVe,"A",{href:!0});var mzt=s(uoe);Kzr=r(mzt,"FlaxXLMRobertaModel"),mzt.forEach(t),Zzr=r(ZVe," (XLM-RoBERTa model)"),ZVe.forEach(t),ae.forEach(t),eWr=i(li),T(Hw.$$.fragment,li),li.forEach(t),si.forEach(t),fQe=i(m),Zc=n(m,"H2",{class:!0});var TUe=s(Zc);Uw=n(TUe,"A",{id:!0,class:!0,href:!0});var fzt=s(Uw);t6e=n(fzt,"SPAN",{});var gzt=s(t6e);T(P$.$$.fragment,gzt),gzt.forEach(t),fzt.forEach(t),oWr=i(TUe),a6e=n(TUe,"SPAN",{});var hzt=s(a6e);rWr=r(hzt,"FlaxAutoModelForCausalLM"),hzt.forEach(t),TUe.forEach(t),gQe=i(m),_r=n(m,"DIV",{class:!0});var ii=s(_r);T(B$.$$.fragment,ii),tWr=i(ii),em=n(ii,"P",{});var Uae=s(em);aWr=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),poe=n(Uae,"A",{href:!0});var uzt=s(poe);nWr=r(uzt,"from_pretrained()"),uzt.forEach(t),sWr=r(Uae," class method or the "),_oe=n(Uae,"A",{href:!0});var pzt=s(_oe);lWr=r(pzt,"from_config()"),pzt.forEach(t),iWr=r(Uae,` class
method.`),Uae.forEach(t),dWr=i(ii),I$=n(ii,"P",{});var MUe=s(I$);cWr=r(MUe,"This class cannot be instantiated directly using "),n6e=n(MUe,"CODE",{});var _zt=s(n6e);mWr=r(_zt,"__init__()"),_zt.forEach(t),fWr=r(MUe," (throws an error)."),MUe.forEach(t),gWr=i(ii),Ht=n(ii,"DIV",{class:!0});var ey=s(Ht);T(N$.$$.fragment,ey),hWr=i(ey),s6e=n(ey,"P",{});var bzt=s(s6e);uWr=r(bzt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bzt.forEach(t),pWr=i(ey),om=n(ey,"P",{});var Jae=s(om);_Wr=r(Jae,`Note:
Loading a model from its configuration file does `),l6e=n(Jae,"STRONG",{});var vzt=s(l6e);bWr=r(vzt,"not"),vzt.forEach(t),vWr=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Jae,"A",{href:!0});var Fzt=s(boe);FWr=r(Fzt,"from_pretrained()"),Fzt.forEach(t),TWr=r(Jae," to load the model weights."),Jae.forEach(t),MWr=i(ey),T(Jw.$$.fragment,ey),ey.forEach(t),EWr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(q$.$$.fragment,di),CWr=i(di),i6e=n(di,"P",{});var Tzt=s(i6e);wWr=r(Tzt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tzt.forEach(t),AWr=i(di),En=n(di,"P",{});var oy=s(En);LWr=r(oy,"The model class to instantiate is selected based on the "),d6e=n(oy,"CODE",{});var Mzt=s(d6e);yWr=r(Mzt,"model_type"),Mzt.forEach(t),xWr=r(oy,` property of the config object (either
passed as an argument or loaded from `),c6e=n(oy,"CODE",{});var Ezt=s(c6e);$Wr=r(Ezt,"pretrained_model_name_or_path"),Ezt.forEach(t),kWr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(oy,"CODE",{});var Czt=s(m6e);SWr=r(Czt,"pretrained_model_name_or_path"),Czt.forEach(t),RWr=r(oy,":"),oy.forEach(t),PWr=i(di),xe=n(di,"UL",{});var Ne=s(xe);Yw=n(Ne,"LI",{});var eXe=s(Yw);f6e=n(eXe,"STRONG",{});var wzt=s(f6e);BWr=r(wzt,"bart"),wzt.forEach(t),IWr=r(eXe," \u2014 "),voe=n(eXe,"A",{href:!0});var Azt=s(voe);NWr=r(Azt,"FlaxBartForCausalLM"),Azt.forEach(t),qWr=r(eXe," (BART model)"),eXe.forEach(t),jWr=i(Ne),Kw=n(Ne,"LI",{});var oXe=s(Kw);g6e=n(oXe,"STRONG",{});var Lzt=s(g6e);DWr=r(Lzt,"bert"),Lzt.forEach(t),GWr=r(oXe," \u2014 "),Foe=n(oXe,"A",{href:!0});var yzt=s(Foe);OWr=r(yzt,"FlaxBertForCausalLM"),yzt.forEach(t),VWr=r(oXe," (BERT model)"),oXe.forEach(t),XWr=i(Ne),Zw=n(Ne,"LI",{});var rXe=s(Zw);h6e=n(rXe,"STRONG",{});var xzt=s(h6e);zWr=r(xzt,"big_bird"),xzt.forEach(t),WWr=r(rXe," \u2014 "),Toe=n(rXe,"A",{href:!0});var $zt=s(Toe);QWr=r($zt,"FlaxBigBirdForCausalLM"),$zt.forEach(t),HWr=r(rXe," (BigBird model)"),rXe.forEach(t),UWr=i(Ne),e6=n(Ne,"LI",{});var tXe=s(e6);u6e=n(tXe,"STRONG",{});var kzt=s(u6e);JWr=r(kzt,"electra"),kzt.forEach(t),YWr=r(tXe," \u2014 "),Moe=n(tXe,"A",{href:!0});var Szt=s(Moe);KWr=r(Szt,"FlaxElectraForCausalLM"),Szt.forEach(t),ZWr=r(tXe," (ELECTRA model)"),tXe.forEach(t),eQr=i(Ne),o6=n(Ne,"LI",{});var aXe=s(o6);p6e=n(aXe,"STRONG",{});var Rzt=s(p6e);oQr=r(Rzt,"gpt2"),Rzt.forEach(t),rQr=r(aXe," \u2014 "),Eoe=n(aXe,"A",{href:!0});var Pzt=s(Eoe);tQr=r(Pzt,"FlaxGPT2LMHeadModel"),Pzt.forEach(t),aQr=r(aXe," (OpenAI GPT-2 model)"),aXe.forEach(t),nQr=i(Ne),r6=n(Ne,"LI",{});var nXe=s(r6);_6e=n(nXe,"STRONG",{});var Bzt=s(_6e);sQr=r(Bzt,"gpt_neo"),Bzt.forEach(t),lQr=r(nXe," \u2014 "),Coe=n(nXe,"A",{href:!0});var Izt=s(Coe);iQr=r(Izt,"FlaxGPTNeoForCausalLM"),Izt.forEach(t),dQr=r(nXe," (GPT Neo model)"),nXe.forEach(t),cQr=i(Ne),t6=n(Ne,"LI",{});var sXe=s(t6);b6e=n(sXe,"STRONG",{});var Nzt=s(b6e);mQr=r(Nzt,"gptj"),Nzt.forEach(t),fQr=r(sXe," \u2014 "),woe=n(sXe,"A",{href:!0});var qzt=s(woe);gQr=r(qzt,"FlaxGPTJForCausalLM"),qzt.forEach(t),hQr=r(sXe," (GPT-J model)"),sXe.forEach(t),uQr=i(Ne),a6=n(Ne,"LI",{});var lXe=s(a6);v6e=n(lXe,"STRONG",{});var jzt=s(v6e);pQr=r(jzt,"opt"),jzt.forEach(t),_Qr=r(lXe," \u2014 "),Aoe=n(lXe,"A",{href:!0});var Dzt=s(Aoe);bQr=r(Dzt,"FlaxOPTForCausalLM"),Dzt.forEach(t),vQr=r(lXe," (OPT model)"),lXe.forEach(t),FQr=i(Ne),n6=n(Ne,"LI",{});var iXe=s(n6);F6e=n(iXe,"STRONG",{});var Gzt=s(F6e);TQr=r(Gzt,"roberta"),Gzt.forEach(t),MQr=r(iXe," \u2014 "),Loe=n(iXe,"A",{href:!0});var Ozt=s(Loe);EQr=r(Ozt,"FlaxRobertaForCausalLM"),Ozt.forEach(t),CQr=r(iXe," (RoBERTa model)"),iXe.forEach(t),wQr=i(Ne),s6=n(Ne,"LI",{});var dXe=s(s6);T6e=n(dXe,"STRONG",{});var Vzt=s(T6e);AQr=r(Vzt,"xglm"),Vzt.forEach(t),LQr=r(dXe," \u2014 "),yoe=n(dXe,"A",{href:!0});var Xzt=s(yoe);yQr=r(Xzt,"FlaxXGLMForCausalLM"),Xzt.forEach(t),xQr=r(dXe," (XGLM model)"),dXe.forEach(t),Ne.forEach(t),$Qr=i(di),T(l6.$$.fragment,di),di.forEach(t),ii.forEach(t),hQe=i(m),rm=n(m,"H2",{class:!0});var EUe=s(rm);i6=n(EUe,"A",{id:!0,class:!0,href:!0});var zzt=s(i6);M6e=n(zzt,"SPAN",{});var Wzt=s(M6e);T(j$.$$.fragment,Wzt),Wzt.forEach(t),zzt.forEach(t),kQr=i(EUe),E6e=n(EUe,"SPAN",{});var Qzt=s(E6e);SQr=r(Qzt,"FlaxAutoModelForPreTraining"),Qzt.forEach(t),EUe.forEach(t),uQe=i(m),br=n(m,"DIV",{class:!0});var ci=s(br);T(D$.$$.fragment,ci),RQr=i(ci),tm=n(ci,"P",{});var Yae=s(tm);PQr=r(Yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xoe=n(Yae,"A",{href:!0});var Hzt=s(xoe);BQr=r(Hzt,"from_pretrained()"),Hzt.forEach(t),IQr=r(Yae," class method or the "),$oe=n(Yae,"A",{href:!0});var Uzt=s($oe);NQr=r(Uzt,"from_config()"),Uzt.forEach(t),qQr=r(Yae,` class
method.`),Yae.forEach(t),jQr=i(ci),G$=n(ci,"P",{});var CUe=s(G$);DQr=r(CUe,"This class cannot be instantiated directly using "),C6e=n(CUe,"CODE",{});var Jzt=s(C6e);GQr=r(Jzt,"__init__()"),Jzt.forEach(t),OQr=r(CUe," (throws an error)."),CUe.forEach(t),VQr=i(ci),Ut=n(ci,"DIV",{class:!0});var ry=s(Ut);T(O$.$$.fragment,ry),XQr=i(ry),w6e=n(ry,"P",{});var Yzt=s(w6e);zQr=r(Yzt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yzt.forEach(t),WQr=i(ry),am=n(ry,"P",{});var Kae=s(am);QQr=r(Kae,`Note:
Loading a model from its configuration file does `),A6e=n(Kae,"STRONG",{});var Kzt=s(A6e);HQr=r(Kzt,"not"),Kzt.forEach(t),UQr=r(Kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(Kae,"A",{href:!0});var Zzt=s(koe);JQr=r(Zzt,"from_pretrained()"),Zzt.forEach(t),YQr=r(Kae," to load the model weights."),Kae.forEach(t),KQr=i(ry),T(d6.$$.fragment,ry),ry.forEach(t),ZQr=i(ci),Wr=n(ci,"DIV",{class:!0});var mi=s(Wr);T(V$.$$.fragment,mi),eHr=i(mi),L6e=n(mi,"P",{});var eWt=s(L6e);oHr=r(eWt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eWt.forEach(t),rHr=i(mi),Cn=n(mi,"P",{});var ty=s(Cn);tHr=r(ty,"The model class to instantiate is selected based on the "),y6e=n(ty,"CODE",{});var oWt=s(y6e);aHr=r(oWt,"model_type"),oWt.forEach(t),nHr=r(ty,` property of the config object (either
passed as an argument or loaded from `),x6e=n(ty,"CODE",{});var rWt=s(x6e);sHr=r(rWt,"pretrained_model_name_or_path"),rWt.forEach(t),lHr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(ty,"CODE",{});var tWt=s($6e);iHr=r(tWt,"pretrained_model_name_or_path"),tWt.forEach(t),dHr=r(ty,":"),ty.forEach(t),cHr=i(mi),Ee=n(mi,"UL",{});var we=s(Ee);c6=n(we,"LI",{});var cXe=s(c6);k6e=n(cXe,"STRONG",{});var aWt=s(k6e);mHr=r(aWt,"albert"),aWt.forEach(t),fHr=r(cXe," \u2014 "),Soe=n(cXe,"A",{href:!0});var nWt=s(Soe);gHr=r(nWt,"FlaxAlbertForPreTraining"),nWt.forEach(t),hHr=r(cXe," (ALBERT model)"),cXe.forEach(t),uHr=i(we),m6=n(we,"LI",{});var mXe=s(m6);S6e=n(mXe,"STRONG",{});var sWt=s(S6e);pHr=r(sWt,"bart"),sWt.forEach(t),_Hr=r(mXe," \u2014 "),Roe=n(mXe,"A",{href:!0});var lWt=s(Roe);bHr=r(lWt,"FlaxBartForConditionalGeneration"),lWt.forEach(t),vHr=r(mXe," (BART model)"),mXe.forEach(t),FHr=i(we),f6=n(we,"LI",{});var fXe=s(f6);R6e=n(fXe,"STRONG",{});var iWt=s(R6e);THr=r(iWt,"bert"),iWt.forEach(t),MHr=r(fXe," \u2014 "),Poe=n(fXe,"A",{href:!0});var dWt=s(Poe);EHr=r(dWt,"FlaxBertForPreTraining"),dWt.forEach(t),CHr=r(fXe," (BERT model)"),fXe.forEach(t),wHr=i(we),g6=n(we,"LI",{});var gXe=s(g6);P6e=n(gXe,"STRONG",{});var cWt=s(P6e);AHr=r(cWt,"big_bird"),cWt.forEach(t),LHr=r(gXe," \u2014 "),Boe=n(gXe,"A",{href:!0});var mWt=s(Boe);yHr=r(mWt,"FlaxBigBirdForPreTraining"),mWt.forEach(t),xHr=r(gXe," (BigBird model)"),gXe.forEach(t),$Hr=i(we),h6=n(we,"LI",{});var hXe=s(h6);B6e=n(hXe,"STRONG",{});var fWt=s(B6e);kHr=r(fWt,"electra"),fWt.forEach(t),SHr=r(hXe," \u2014 "),Ioe=n(hXe,"A",{href:!0});var gWt=s(Ioe);RHr=r(gWt,"FlaxElectraForPreTraining"),gWt.forEach(t),PHr=r(hXe," (ELECTRA model)"),hXe.forEach(t),BHr=i(we),u6=n(we,"LI",{});var uXe=s(u6);I6e=n(uXe,"STRONG",{});var hWt=s(I6e);IHr=r(hWt,"longt5"),hWt.forEach(t),NHr=r(uXe," \u2014 "),Noe=n(uXe,"A",{href:!0});var uWt=s(Noe);qHr=r(uWt,"FlaxLongT5ForConditionalGeneration"),uWt.forEach(t),jHr=r(uXe," (LongT5 model)"),uXe.forEach(t),DHr=i(we),p6=n(we,"LI",{});var pXe=s(p6);N6e=n(pXe,"STRONG",{});var pWt=s(N6e);GHr=r(pWt,"mbart"),pWt.forEach(t),OHr=r(pXe," \u2014 "),qoe=n(pXe,"A",{href:!0});var _Wt=s(qoe);VHr=r(_Wt,"FlaxMBartForConditionalGeneration"),_Wt.forEach(t),XHr=r(pXe," (mBART model)"),pXe.forEach(t),zHr=i(we),_6=n(we,"LI",{});var _Xe=s(_6);q6e=n(_Xe,"STRONG",{});var bWt=s(q6e);WHr=r(bWt,"mt5"),bWt.forEach(t),QHr=r(_Xe," \u2014 "),joe=n(_Xe,"A",{href:!0});var vWt=s(joe);HHr=r(vWt,"FlaxMT5ForConditionalGeneration"),vWt.forEach(t),UHr=r(_Xe," (MT5 model)"),_Xe.forEach(t),JHr=i(we),b6=n(we,"LI",{});var bXe=s(b6);j6e=n(bXe,"STRONG",{});var FWt=s(j6e);YHr=r(FWt,"roberta"),FWt.forEach(t),KHr=r(bXe," \u2014 "),Doe=n(bXe,"A",{href:!0});var TWt=s(Doe);ZHr=r(TWt,"FlaxRobertaForMaskedLM"),TWt.forEach(t),eUr=r(bXe," (RoBERTa model)"),bXe.forEach(t),oUr=i(we),v6=n(we,"LI",{});var vXe=s(v6);D6e=n(vXe,"STRONG",{});var MWt=s(D6e);rUr=r(MWt,"roformer"),MWt.forEach(t),tUr=r(vXe," \u2014 "),Goe=n(vXe,"A",{href:!0});var EWt=s(Goe);aUr=r(EWt,"FlaxRoFormerForMaskedLM"),EWt.forEach(t),nUr=r(vXe," (RoFormer model)"),vXe.forEach(t),sUr=i(we),F6=n(we,"LI",{});var FXe=s(F6);G6e=n(FXe,"STRONG",{});var CWt=s(G6e);lUr=r(CWt,"t5"),CWt.forEach(t),iUr=r(FXe," \u2014 "),Ooe=n(FXe,"A",{href:!0});var wWt=s(Ooe);dUr=r(wWt,"FlaxT5ForConditionalGeneration"),wWt.forEach(t),cUr=r(FXe," (T5 model)"),FXe.forEach(t),mUr=i(we),T6=n(we,"LI",{});var TXe=s(T6);O6e=n(TXe,"STRONG",{});var AWt=s(O6e);fUr=r(AWt,"wav2vec2"),AWt.forEach(t),gUr=r(TXe," \u2014 "),Voe=n(TXe,"A",{href:!0});var LWt=s(Voe);hUr=r(LWt,"FlaxWav2Vec2ForPreTraining"),LWt.forEach(t),uUr=r(TXe," (Wav2Vec2 model)"),TXe.forEach(t),pUr=i(we),M6=n(we,"LI",{});var MXe=s(M6);V6e=n(MXe,"STRONG",{});var yWt=s(V6e);_Ur=r(yWt,"xlm-roberta"),yWt.forEach(t),bUr=r(MXe," \u2014 "),Xoe=n(MXe,"A",{href:!0});var xWt=s(Xoe);vUr=r(xWt,"FlaxXLMRobertaForMaskedLM"),xWt.forEach(t),FUr=r(MXe," (XLM-RoBERTa model)"),MXe.forEach(t),we.forEach(t),TUr=i(mi),T(E6.$$.fragment,mi),mi.forEach(t),ci.forEach(t),pQe=i(m),nm=n(m,"H2",{class:!0});var wUe=s(nm);C6=n(wUe,"A",{id:!0,class:!0,href:!0});var $Wt=s(C6);X6e=n($Wt,"SPAN",{});var kWt=s(X6e);T(X$.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),MUr=i(wUe),z6e=n(wUe,"SPAN",{});var SWt=s(z6e);EUr=r(SWt,"FlaxAutoModelForMaskedLM"),SWt.forEach(t),wUe.forEach(t),_Qe=i(m),vr=n(m,"DIV",{class:!0});var fi=s(vr);T(z$.$$.fragment,fi),CUr=i(fi),sm=n(fi,"P",{});var Zae=s(sm);wUr=r(Zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zoe=n(Zae,"A",{href:!0});var RWt=s(zoe);AUr=r(RWt,"from_pretrained()"),RWt.forEach(t),LUr=r(Zae," class method or the "),Woe=n(Zae,"A",{href:!0});var PWt=s(Woe);yUr=r(PWt,"from_config()"),PWt.forEach(t),xUr=r(Zae,` class
method.`),Zae.forEach(t),$Ur=i(fi),W$=n(fi,"P",{});var AUe=s(W$);kUr=r(AUe,"This class cannot be instantiated directly using "),W6e=n(AUe,"CODE",{});var BWt=s(W6e);SUr=r(BWt,"__init__()"),BWt.forEach(t),RUr=r(AUe," (throws an error)."),AUe.forEach(t),PUr=i(fi),Jt=n(fi,"DIV",{class:!0});var ay=s(Jt);T(Q$.$$.fragment,ay),BUr=i(ay),Q6e=n(ay,"P",{});var IWt=s(Q6e);IUr=r(IWt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),IWt.forEach(t),NUr=i(ay),lm=n(ay,"P",{});var ene=s(lm);qUr=r(ene,`Note:
Loading a model from its configuration file does `),H6e=n(ene,"STRONG",{});var NWt=s(H6e);jUr=r(NWt,"not"),NWt.forEach(t),DUr=r(ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=n(ene,"A",{href:!0});var qWt=s(Qoe);GUr=r(qWt,"from_pretrained()"),qWt.forEach(t),OUr=r(ene," to load the model weights."),ene.forEach(t),VUr=i(ay),T(w6.$$.fragment,ay),ay.forEach(t),XUr=i(fi),Qr=n(fi,"DIV",{class:!0});var gi=s(Qr);T(H$.$$.fragment,gi),zUr=i(gi),U6e=n(gi,"P",{});var jWt=s(U6e);WUr=r(jWt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jWt.forEach(t),QUr=i(gi),wn=n(gi,"P",{});var ny=s(wn);HUr=r(ny,"The model class to instantiate is selected based on the "),J6e=n(ny,"CODE",{});var DWt=s(J6e);UUr=r(DWt,"model_type"),DWt.forEach(t),JUr=r(ny,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(ny,"CODE",{});var GWt=s(Y6e);YUr=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),KUr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(ny,"CODE",{});var OWt=s(K6e);ZUr=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),eJr=r(ny,":"),ny.forEach(t),oJr=i(gi),$e=n(gi,"UL",{});var qe=s($e);A6=n(qe,"LI",{});var EXe=s(A6);Z6e=n(EXe,"STRONG",{});var VWt=s(Z6e);rJr=r(VWt,"albert"),VWt.forEach(t),tJr=r(EXe," \u2014 "),Hoe=n(EXe,"A",{href:!0});var XWt=s(Hoe);aJr=r(XWt,"FlaxAlbertForMaskedLM"),XWt.forEach(t),nJr=r(EXe," (ALBERT model)"),EXe.forEach(t),sJr=i(qe),L6=n(qe,"LI",{});var CXe=s(L6);eAe=n(CXe,"STRONG",{});var zWt=s(eAe);lJr=r(zWt,"bart"),zWt.forEach(t),iJr=r(CXe," \u2014 "),Uoe=n(CXe,"A",{href:!0});var WWt=s(Uoe);dJr=r(WWt,"FlaxBartForConditionalGeneration"),WWt.forEach(t),cJr=r(CXe," (BART model)"),CXe.forEach(t),mJr=i(qe),y6=n(qe,"LI",{});var wXe=s(y6);oAe=n(wXe,"STRONG",{});var QWt=s(oAe);fJr=r(QWt,"bert"),QWt.forEach(t),gJr=r(wXe," \u2014 "),Joe=n(wXe,"A",{href:!0});var HWt=s(Joe);hJr=r(HWt,"FlaxBertForMaskedLM"),HWt.forEach(t),uJr=r(wXe," (BERT model)"),wXe.forEach(t),pJr=i(qe),x6=n(qe,"LI",{});var AXe=s(x6);rAe=n(AXe,"STRONG",{});var UWt=s(rAe);_Jr=r(UWt,"big_bird"),UWt.forEach(t),bJr=r(AXe," \u2014 "),Yoe=n(AXe,"A",{href:!0});var JWt=s(Yoe);vJr=r(JWt,"FlaxBigBirdForMaskedLM"),JWt.forEach(t),FJr=r(AXe," (BigBird model)"),AXe.forEach(t),TJr=i(qe),$6=n(qe,"LI",{});var LXe=s($6);tAe=n(LXe,"STRONG",{});var YWt=s(tAe);MJr=r(YWt,"distilbert"),YWt.forEach(t),EJr=r(LXe," \u2014 "),Koe=n(LXe,"A",{href:!0});var KWt=s(Koe);CJr=r(KWt,"FlaxDistilBertForMaskedLM"),KWt.forEach(t),wJr=r(LXe," (DistilBERT model)"),LXe.forEach(t),AJr=i(qe),k6=n(qe,"LI",{});var yXe=s(k6);aAe=n(yXe,"STRONG",{});var ZWt=s(aAe);LJr=r(ZWt,"electra"),ZWt.forEach(t),yJr=r(yXe," \u2014 "),Zoe=n(yXe,"A",{href:!0});var eQt=s(Zoe);xJr=r(eQt,"FlaxElectraForMaskedLM"),eQt.forEach(t),$Jr=r(yXe," (ELECTRA model)"),yXe.forEach(t),kJr=i(qe),S6=n(qe,"LI",{});var xXe=s(S6);nAe=n(xXe,"STRONG",{});var oQt=s(nAe);SJr=r(oQt,"mbart"),oQt.forEach(t),RJr=r(xXe," \u2014 "),ere=n(xXe,"A",{href:!0});var rQt=s(ere);PJr=r(rQt,"FlaxMBartForConditionalGeneration"),rQt.forEach(t),BJr=r(xXe," (mBART model)"),xXe.forEach(t),IJr=i(qe),R6=n(qe,"LI",{});var $Xe=s(R6);sAe=n($Xe,"STRONG",{});var tQt=s(sAe);NJr=r(tQt,"roberta"),tQt.forEach(t),qJr=r($Xe," \u2014 "),ore=n($Xe,"A",{href:!0});var aQt=s(ore);jJr=r(aQt,"FlaxRobertaForMaskedLM"),aQt.forEach(t),DJr=r($Xe," (RoBERTa model)"),$Xe.forEach(t),GJr=i(qe),P6=n(qe,"LI",{});var kXe=s(P6);lAe=n(kXe,"STRONG",{});var nQt=s(lAe);OJr=r(nQt,"roformer"),nQt.forEach(t),VJr=r(kXe," \u2014 "),rre=n(kXe,"A",{href:!0});var sQt=s(rre);XJr=r(sQt,"FlaxRoFormerForMaskedLM"),sQt.forEach(t),zJr=r(kXe," (RoFormer model)"),kXe.forEach(t),WJr=i(qe),B6=n(qe,"LI",{});var SXe=s(B6);iAe=n(SXe,"STRONG",{});var lQt=s(iAe);QJr=r(lQt,"xlm-roberta"),lQt.forEach(t),HJr=r(SXe," \u2014 "),tre=n(SXe,"A",{href:!0});var iQt=s(tre);UJr=r(iQt,"FlaxXLMRobertaForMaskedLM"),iQt.forEach(t),JJr=r(SXe," (XLM-RoBERTa model)"),SXe.forEach(t),qe.forEach(t),YJr=i(gi),T(I6.$$.fragment,gi),gi.forEach(t),fi.forEach(t),bQe=i(m),im=n(m,"H2",{class:!0});var LUe=s(im);N6=n(LUe,"A",{id:!0,class:!0,href:!0});var dQt=s(N6);dAe=n(dQt,"SPAN",{});var cQt=s(dAe);T(U$.$$.fragment,cQt),cQt.forEach(t),dQt.forEach(t),KJr=i(LUe),cAe=n(LUe,"SPAN",{});var mQt=s(cAe);ZJr=r(mQt,"FlaxAutoModelForSeq2SeqLM"),mQt.forEach(t),LUe.forEach(t),vQe=i(m),Fr=n(m,"DIV",{class:!0});var hi=s(Fr);T(J$.$$.fragment,hi),eYr=i(hi),dm=n(hi,"P",{});var one=s(dm);oYr=r(one,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),are=n(one,"A",{href:!0});var fQt=s(are);rYr=r(fQt,"from_pretrained()"),fQt.forEach(t),tYr=r(one," class method or the "),nre=n(one,"A",{href:!0});var gQt=s(nre);aYr=r(gQt,"from_config()"),gQt.forEach(t),nYr=r(one,` class
method.`),one.forEach(t),sYr=i(hi),Y$=n(hi,"P",{});var yUe=s(Y$);lYr=r(yUe,"This class cannot be instantiated directly using "),mAe=n(yUe,"CODE",{});var hQt=s(mAe);iYr=r(hQt,"__init__()"),hQt.forEach(t),dYr=r(yUe," (throws an error)."),yUe.forEach(t),cYr=i(hi),Yt=n(hi,"DIV",{class:!0});var sy=s(Yt);T(K$.$$.fragment,sy),mYr=i(sy),fAe=n(sy,"P",{});var uQt=s(fAe);fYr=r(uQt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uQt.forEach(t),gYr=i(sy),cm=n(sy,"P",{});var rne=s(cm);hYr=r(rne,`Note:
Loading a model from its configuration file does `),gAe=n(rne,"STRONG",{});var pQt=s(gAe);uYr=r(pQt,"not"),pQt.forEach(t),pYr=r(rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(rne,"A",{href:!0});var _Qt=s(sre);_Yr=r(_Qt,"from_pretrained()"),_Qt.forEach(t),bYr=r(rne," to load the model weights."),rne.forEach(t),vYr=i(sy),T(q6.$$.fragment,sy),sy.forEach(t),FYr=i(hi),Hr=n(hi,"DIV",{class:!0});var ui=s(Hr);T(Z$.$$.fragment,ui),TYr=i(ui),hAe=n(ui,"P",{});var bQt=s(hAe);MYr=r(bQt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bQt.forEach(t),EYr=i(ui),An=n(ui,"P",{});var ly=s(An);CYr=r(ly,"The model class to instantiate is selected based on the "),uAe=n(ly,"CODE",{});var vQt=s(uAe);wYr=r(vQt,"model_type"),vQt.forEach(t),AYr=r(ly,` property of the config object (either
passed as an argument or loaded from `),pAe=n(ly,"CODE",{});var FQt=s(pAe);LYr=r(FQt,"pretrained_model_name_or_path"),FQt.forEach(t),yYr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ae=n(ly,"CODE",{});var TQt=s(_Ae);xYr=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),$Yr=r(ly,":"),ly.forEach(t),kYr=i(ui),ke=n(ui,"UL",{});var je=s(ke);j6=n(je,"LI",{});var RXe=s(j6);bAe=n(RXe,"STRONG",{});var MQt=s(bAe);SYr=r(MQt,"bart"),MQt.forEach(t),RYr=r(RXe," \u2014 "),lre=n(RXe,"A",{href:!0});var EQt=s(lre);PYr=r(EQt,"FlaxBartForConditionalGeneration"),EQt.forEach(t),BYr=r(RXe," (BART model)"),RXe.forEach(t),IYr=i(je),D6=n(je,"LI",{});var PXe=s(D6);vAe=n(PXe,"STRONG",{});var CQt=s(vAe);NYr=r(CQt,"blenderbot"),CQt.forEach(t),qYr=r(PXe," \u2014 "),ire=n(PXe,"A",{href:!0});var wQt=s(ire);jYr=r(wQt,"FlaxBlenderbotForConditionalGeneration"),wQt.forEach(t),DYr=r(PXe," (Blenderbot model)"),PXe.forEach(t),GYr=i(je),G6=n(je,"LI",{});var BXe=s(G6);FAe=n(BXe,"STRONG",{});var AQt=s(FAe);OYr=r(AQt,"blenderbot-small"),AQt.forEach(t),VYr=r(BXe," \u2014 "),dre=n(BXe,"A",{href:!0});var LQt=s(dre);XYr=r(LQt,"FlaxBlenderbotSmallForConditionalGeneration"),LQt.forEach(t),zYr=r(BXe," (BlenderbotSmall model)"),BXe.forEach(t),WYr=i(je),O6=n(je,"LI",{});var IXe=s(O6);TAe=n(IXe,"STRONG",{});var yQt=s(TAe);QYr=r(yQt,"encoder-decoder"),yQt.forEach(t),HYr=r(IXe," \u2014 "),cre=n(IXe,"A",{href:!0});var xQt=s(cre);UYr=r(xQt,"FlaxEncoderDecoderModel"),xQt.forEach(t),JYr=r(IXe," (Encoder decoder model)"),IXe.forEach(t),YYr=i(je),V6=n(je,"LI",{});var NXe=s(V6);MAe=n(NXe,"STRONG",{});var $Qt=s(MAe);KYr=r($Qt,"longt5"),$Qt.forEach(t),ZYr=r(NXe," \u2014 "),mre=n(NXe,"A",{href:!0});var kQt=s(mre);eKr=r(kQt,"FlaxLongT5ForConditionalGeneration"),kQt.forEach(t),oKr=r(NXe," (LongT5 model)"),NXe.forEach(t),rKr=i(je),X6=n(je,"LI",{});var qXe=s(X6);EAe=n(qXe,"STRONG",{});var SQt=s(EAe);tKr=r(SQt,"marian"),SQt.forEach(t),aKr=r(qXe," \u2014 "),fre=n(qXe,"A",{href:!0});var RQt=s(fre);nKr=r(RQt,"FlaxMarianMTModel"),RQt.forEach(t),sKr=r(qXe," (Marian model)"),qXe.forEach(t),lKr=i(je),z6=n(je,"LI",{});var jXe=s(z6);CAe=n(jXe,"STRONG",{});var PQt=s(CAe);iKr=r(PQt,"mbart"),PQt.forEach(t),dKr=r(jXe," \u2014 "),gre=n(jXe,"A",{href:!0});var BQt=s(gre);cKr=r(BQt,"FlaxMBartForConditionalGeneration"),BQt.forEach(t),mKr=r(jXe," (mBART model)"),jXe.forEach(t),fKr=i(je),W6=n(je,"LI",{});var DXe=s(W6);wAe=n(DXe,"STRONG",{});var IQt=s(wAe);gKr=r(IQt,"mt5"),IQt.forEach(t),hKr=r(DXe," \u2014 "),hre=n(DXe,"A",{href:!0});var NQt=s(hre);uKr=r(NQt,"FlaxMT5ForConditionalGeneration"),NQt.forEach(t),pKr=r(DXe," (MT5 model)"),DXe.forEach(t),_Kr=i(je),Q6=n(je,"LI",{});var GXe=s(Q6);AAe=n(GXe,"STRONG",{});var qQt=s(AAe);bKr=r(qQt,"pegasus"),qQt.forEach(t),vKr=r(GXe," \u2014 "),ure=n(GXe,"A",{href:!0});var jQt=s(ure);FKr=r(jQt,"FlaxPegasusForConditionalGeneration"),jQt.forEach(t),TKr=r(GXe," (Pegasus model)"),GXe.forEach(t),MKr=i(je),H6=n(je,"LI",{});var OXe=s(H6);LAe=n(OXe,"STRONG",{});var DQt=s(LAe);EKr=r(DQt,"t5"),DQt.forEach(t),CKr=r(OXe," \u2014 "),pre=n(OXe,"A",{href:!0});var GQt=s(pre);wKr=r(GQt,"FlaxT5ForConditionalGeneration"),GQt.forEach(t),AKr=r(OXe," (T5 model)"),OXe.forEach(t),je.forEach(t),LKr=i(ui),T(U6.$$.fragment,ui),ui.forEach(t),hi.forEach(t),FQe=i(m),mm=n(m,"H2",{class:!0});var xUe=s(mm);J6=n(xUe,"A",{id:!0,class:!0,href:!0});var OQt=s(J6);yAe=n(OQt,"SPAN",{});var VQt=s(yAe);T(ek.$$.fragment,VQt),VQt.forEach(t),OQt.forEach(t),yKr=i(xUe),xAe=n(xUe,"SPAN",{});var XQt=s(xAe);xKr=r(XQt,"FlaxAutoModelForSequenceClassification"),XQt.forEach(t),xUe.forEach(t),TQe=i(m),Tr=n(m,"DIV",{class:!0});var pi=s(Tr);T(ok.$$.fragment,pi),$Kr=i(pi),fm=n(pi,"P",{});var tne=s(fm);kKr=r(tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_re=n(tne,"A",{href:!0});var zQt=s(_re);SKr=r(zQt,"from_pretrained()"),zQt.forEach(t),RKr=r(tne," class method or the "),bre=n(tne,"A",{href:!0});var WQt=s(bre);PKr=r(WQt,"from_config()"),WQt.forEach(t),BKr=r(tne,` class
method.`),tne.forEach(t),IKr=i(pi),rk=n(pi,"P",{});var $Ue=s(rk);NKr=r($Ue,"This class cannot be instantiated directly using "),$Ae=n($Ue,"CODE",{});var QQt=s($Ae);qKr=r(QQt,"__init__()"),QQt.forEach(t),jKr=r($Ue," (throws an error)."),$Ue.forEach(t),DKr=i(pi),Kt=n(pi,"DIV",{class:!0});var iy=s(Kt);T(tk.$$.fragment,iy),GKr=i(iy),kAe=n(iy,"P",{});var HQt=s(kAe);OKr=r(HQt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HQt.forEach(t),VKr=i(iy),gm=n(iy,"P",{});var ane=s(gm);XKr=r(ane,`Note:
Loading a model from its configuration file does `),SAe=n(ane,"STRONG",{});var UQt=s(SAe);zKr=r(UQt,"not"),UQt.forEach(t),WKr=r(ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(ane,"A",{href:!0});var JQt=s(vre);QKr=r(JQt,"from_pretrained()"),JQt.forEach(t),HKr=r(ane," to load the model weights."),ane.forEach(t),UKr=i(iy),T(Y6.$$.fragment,iy),iy.forEach(t),JKr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(ak.$$.fragment,_i),YKr=i(_i),RAe=n(_i,"P",{});var YQt=s(RAe);KKr=r(YQt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YQt.forEach(t),ZKr=i(_i),Ln=n(_i,"P",{});var dy=s(Ln);eZr=r(dy,"The model class to instantiate is selected based on the "),PAe=n(dy,"CODE",{});var KQt=s(PAe);oZr=r(KQt,"model_type"),KQt.forEach(t),rZr=r(dy,` property of the config object (either
passed as an argument or loaded from `),BAe=n(dy,"CODE",{});var ZQt=s(BAe);tZr=r(ZQt,"pretrained_model_name_or_path"),ZQt.forEach(t),aZr=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=n(dy,"CODE",{});var eHt=s(IAe);nZr=r(eHt,"pretrained_model_name_or_path"),eHt.forEach(t),sZr=r(dy,":"),dy.forEach(t),lZr=i(_i),Se=n(_i,"UL",{});var De=s(Se);K6=n(De,"LI",{});var VXe=s(K6);NAe=n(VXe,"STRONG",{});var oHt=s(NAe);iZr=r(oHt,"albert"),oHt.forEach(t),dZr=r(VXe," \u2014 "),Fre=n(VXe,"A",{href:!0});var rHt=s(Fre);cZr=r(rHt,"FlaxAlbertForSequenceClassification"),rHt.forEach(t),mZr=r(VXe," (ALBERT model)"),VXe.forEach(t),fZr=i(De),Z6=n(De,"LI",{});var XXe=s(Z6);qAe=n(XXe,"STRONG",{});var tHt=s(qAe);gZr=r(tHt,"bart"),tHt.forEach(t),hZr=r(XXe," \u2014 "),Tre=n(XXe,"A",{href:!0});var aHt=s(Tre);uZr=r(aHt,"FlaxBartForSequenceClassification"),aHt.forEach(t),pZr=r(XXe," (BART model)"),XXe.forEach(t),_Zr=i(De),eA=n(De,"LI",{});var zXe=s(eA);jAe=n(zXe,"STRONG",{});var nHt=s(jAe);bZr=r(nHt,"bert"),nHt.forEach(t),vZr=r(zXe," \u2014 "),Mre=n(zXe,"A",{href:!0});var sHt=s(Mre);FZr=r(sHt,"FlaxBertForSequenceClassification"),sHt.forEach(t),TZr=r(zXe," (BERT model)"),zXe.forEach(t),MZr=i(De),oA=n(De,"LI",{});var WXe=s(oA);DAe=n(WXe,"STRONG",{});var lHt=s(DAe);EZr=r(lHt,"big_bird"),lHt.forEach(t),CZr=r(WXe," \u2014 "),Ere=n(WXe,"A",{href:!0});var iHt=s(Ere);wZr=r(iHt,"FlaxBigBirdForSequenceClassification"),iHt.forEach(t),AZr=r(WXe," (BigBird model)"),WXe.forEach(t),LZr=i(De),rA=n(De,"LI",{});var QXe=s(rA);GAe=n(QXe,"STRONG",{});var dHt=s(GAe);yZr=r(dHt,"distilbert"),dHt.forEach(t),xZr=r(QXe," \u2014 "),Cre=n(QXe,"A",{href:!0});var cHt=s(Cre);$Zr=r(cHt,"FlaxDistilBertForSequenceClassification"),cHt.forEach(t),kZr=r(QXe," (DistilBERT model)"),QXe.forEach(t),SZr=i(De),tA=n(De,"LI",{});var HXe=s(tA);OAe=n(HXe,"STRONG",{});var mHt=s(OAe);RZr=r(mHt,"electra"),mHt.forEach(t),PZr=r(HXe," \u2014 "),wre=n(HXe,"A",{href:!0});var fHt=s(wre);BZr=r(fHt,"FlaxElectraForSequenceClassification"),fHt.forEach(t),IZr=r(HXe," (ELECTRA model)"),HXe.forEach(t),NZr=i(De),aA=n(De,"LI",{});var UXe=s(aA);VAe=n(UXe,"STRONG",{});var gHt=s(VAe);qZr=r(gHt,"mbart"),gHt.forEach(t),jZr=r(UXe," \u2014 "),Are=n(UXe,"A",{href:!0});var hHt=s(Are);DZr=r(hHt,"FlaxMBartForSequenceClassification"),hHt.forEach(t),GZr=r(UXe," (mBART model)"),UXe.forEach(t),OZr=i(De),nA=n(De,"LI",{});var JXe=s(nA);XAe=n(JXe,"STRONG",{});var uHt=s(XAe);VZr=r(uHt,"roberta"),uHt.forEach(t),XZr=r(JXe," \u2014 "),Lre=n(JXe,"A",{href:!0});var pHt=s(Lre);zZr=r(pHt,"FlaxRobertaForSequenceClassification"),pHt.forEach(t),WZr=r(JXe," (RoBERTa model)"),JXe.forEach(t),QZr=i(De),sA=n(De,"LI",{});var YXe=s(sA);zAe=n(YXe,"STRONG",{});var _Ht=s(zAe);HZr=r(_Ht,"roformer"),_Ht.forEach(t),UZr=r(YXe," \u2014 "),yre=n(YXe,"A",{href:!0});var bHt=s(yre);JZr=r(bHt,"FlaxRoFormerForSequenceClassification"),bHt.forEach(t),YZr=r(YXe," (RoFormer model)"),YXe.forEach(t),KZr=i(De),lA=n(De,"LI",{});var KXe=s(lA);WAe=n(KXe,"STRONG",{});var vHt=s(WAe);ZZr=r(vHt,"xlm-roberta"),vHt.forEach(t),eet=r(KXe," \u2014 "),xre=n(KXe,"A",{href:!0});var FHt=s(xre);oet=r(FHt,"FlaxXLMRobertaForSequenceClassification"),FHt.forEach(t),ret=r(KXe," (XLM-RoBERTa model)"),KXe.forEach(t),De.forEach(t),tet=i(_i),T(iA.$$.fragment,_i),_i.forEach(t),pi.forEach(t),MQe=i(m),hm=n(m,"H2",{class:!0});var kUe=s(hm);dA=n(kUe,"A",{id:!0,class:!0,href:!0});var THt=s(dA);QAe=n(THt,"SPAN",{});var MHt=s(QAe);T(nk.$$.fragment,MHt),MHt.forEach(t),THt.forEach(t),aet=i(kUe),HAe=n(kUe,"SPAN",{});var EHt=s(HAe);net=r(EHt,"FlaxAutoModelForQuestionAnswering"),EHt.forEach(t),kUe.forEach(t),EQe=i(m),Mr=n(m,"DIV",{class:!0});var bi=s(Mr);T(sk.$$.fragment,bi),set=i(bi),um=n(bi,"P",{});var nne=s(um);iet=r(nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$re=n(nne,"A",{href:!0});var CHt=s($re);det=r(CHt,"from_pretrained()"),CHt.forEach(t),cet=r(nne," class method or the "),kre=n(nne,"A",{href:!0});var wHt=s(kre);met=r(wHt,"from_config()"),wHt.forEach(t),fet=r(nne,` class
method.`),nne.forEach(t),get=i(bi),lk=n(bi,"P",{});var SUe=s(lk);het=r(SUe,"This class cannot be instantiated directly using "),UAe=n(SUe,"CODE",{});var AHt=s(UAe);uet=r(AHt,"__init__()"),AHt.forEach(t),pet=r(SUe," (throws an error)."),SUe.forEach(t),_et=i(bi),Zt=n(bi,"DIV",{class:!0});var cy=s(Zt);T(ik.$$.fragment,cy),bet=i(cy),JAe=n(cy,"P",{});var LHt=s(JAe);vet=r(LHt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LHt.forEach(t),Fet=i(cy),pm=n(cy,"P",{});var sne=s(pm);Tet=r(sne,`Note:
Loading a model from its configuration file does `),YAe=n(sne,"STRONG",{});var yHt=s(YAe);Met=r(yHt,"not"),yHt.forEach(t),Eet=r(sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(sne,"A",{href:!0});var xHt=s(Sre);Cet=r(xHt,"from_pretrained()"),xHt.forEach(t),wet=r(sne," to load the model weights."),sne.forEach(t),Aet=i(cy),T(cA.$$.fragment,cy),cy.forEach(t),Let=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(dk.$$.fragment,vi),yet=i(vi),KAe=n(vi,"P",{});var $Ht=s(KAe);xet=r($Ht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Ht.forEach(t),$et=i(vi),yn=n(vi,"P",{});var my=s(yn);ket=r(my,"The model class to instantiate is selected based on the "),ZAe=n(my,"CODE",{});var kHt=s(ZAe);Set=r(kHt,"model_type"),kHt.forEach(t),Ret=r(my,` property of the config object (either
passed as an argument or loaded from `),e7e=n(my,"CODE",{});var SHt=s(e7e);Pet=r(SHt,"pretrained_model_name_or_path"),SHt.forEach(t),Bet=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(my,"CODE",{});var RHt=s(o7e);Iet=r(RHt,"pretrained_model_name_or_path"),RHt.forEach(t),Net=r(my,":"),my.forEach(t),qet=i(vi),Re=n(vi,"UL",{});var Ge=s(Re);mA=n(Ge,"LI",{});var ZXe=s(mA);r7e=n(ZXe,"STRONG",{});var PHt=s(r7e);jet=r(PHt,"albert"),PHt.forEach(t),Det=r(ZXe," \u2014 "),Rre=n(ZXe,"A",{href:!0});var BHt=s(Rre);Get=r(BHt,"FlaxAlbertForQuestionAnswering"),BHt.forEach(t),Oet=r(ZXe," (ALBERT model)"),ZXe.forEach(t),Vet=i(Ge),fA=n(Ge,"LI",{});var eze=s(fA);t7e=n(eze,"STRONG",{});var IHt=s(t7e);Xet=r(IHt,"bart"),IHt.forEach(t),zet=r(eze," \u2014 "),Pre=n(eze,"A",{href:!0});var NHt=s(Pre);Wet=r(NHt,"FlaxBartForQuestionAnswering"),NHt.forEach(t),Qet=r(eze," (BART model)"),eze.forEach(t),Het=i(Ge),gA=n(Ge,"LI",{});var oze=s(gA);a7e=n(oze,"STRONG",{});var qHt=s(a7e);Uet=r(qHt,"bert"),qHt.forEach(t),Jet=r(oze," \u2014 "),Bre=n(oze,"A",{href:!0});var jHt=s(Bre);Yet=r(jHt,"FlaxBertForQuestionAnswering"),jHt.forEach(t),Ket=r(oze," (BERT model)"),oze.forEach(t),Zet=i(Ge),hA=n(Ge,"LI",{});var rze=s(hA);n7e=n(rze,"STRONG",{});var DHt=s(n7e);eot=r(DHt,"big_bird"),DHt.forEach(t),oot=r(rze," \u2014 "),Ire=n(rze,"A",{href:!0});var GHt=s(Ire);rot=r(GHt,"FlaxBigBirdForQuestionAnswering"),GHt.forEach(t),tot=r(rze," (BigBird model)"),rze.forEach(t),aot=i(Ge),uA=n(Ge,"LI",{});var tze=s(uA);s7e=n(tze,"STRONG",{});var OHt=s(s7e);not=r(OHt,"distilbert"),OHt.forEach(t),sot=r(tze," \u2014 "),Nre=n(tze,"A",{href:!0});var VHt=s(Nre);lot=r(VHt,"FlaxDistilBertForQuestionAnswering"),VHt.forEach(t),iot=r(tze," (DistilBERT model)"),tze.forEach(t),dot=i(Ge),pA=n(Ge,"LI",{});var aze=s(pA);l7e=n(aze,"STRONG",{});var XHt=s(l7e);cot=r(XHt,"electra"),XHt.forEach(t),mot=r(aze," \u2014 "),qre=n(aze,"A",{href:!0});var zHt=s(qre);fot=r(zHt,"FlaxElectraForQuestionAnswering"),zHt.forEach(t),got=r(aze," (ELECTRA model)"),aze.forEach(t),hot=i(Ge),_A=n(Ge,"LI",{});var nze=s(_A);i7e=n(nze,"STRONG",{});var WHt=s(i7e);uot=r(WHt,"mbart"),WHt.forEach(t),pot=r(nze," \u2014 "),jre=n(nze,"A",{href:!0});var QHt=s(jre);_ot=r(QHt,"FlaxMBartForQuestionAnswering"),QHt.forEach(t),bot=r(nze," (mBART model)"),nze.forEach(t),vot=i(Ge),bA=n(Ge,"LI",{});var sze=s(bA);d7e=n(sze,"STRONG",{});var HHt=s(d7e);Fot=r(HHt,"roberta"),HHt.forEach(t),Tot=r(sze," \u2014 "),Dre=n(sze,"A",{href:!0});var UHt=s(Dre);Mot=r(UHt,"FlaxRobertaForQuestionAnswering"),UHt.forEach(t),Eot=r(sze," (RoBERTa model)"),sze.forEach(t),Cot=i(Ge),vA=n(Ge,"LI",{});var lze=s(vA);c7e=n(lze,"STRONG",{});var JHt=s(c7e);wot=r(JHt,"roformer"),JHt.forEach(t),Aot=r(lze," \u2014 "),Gre=n(lze,"A",{href:!0});var YHt=s(Gre);Lot=r(YHt,"FlaxRoFormerForQuestionAnswering"),YHt.forEach(t),yot=r(lze," (RoFormer model)"),lze.forEach(t),xot=i(Ge),FA=n(Ge,"LI",{});var ize=s(FA);m7e=n(ize,"STRONG",{});var KHt=s(m7e);$ot=r(KHt,"xlm-roberta"),KHt.forEach(t),kot=r(ize," \u2014 "),Ore=n(ize,"A",{href:!0});var ZHt=s(Ore);Sot=r(ZHt,"FlaxXLMRobertaForQuestionAnswering"),ZHt.forEach(t),Rot=r(ize," (XLM-RoBERTa model)"),ize.forEach(t),Ge.forEach(t),Pot=i(vi),T(TA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),CQe=i(m),_m=n(m,"H2",{class:!0});var RUe=s(_m);MA=n(RUe,"A",{id:!0,class:!0,href:!0});var eUt=s(MA);f7e=n(eUt,"SPAN",{});var oUt=s(f7e);T(ck.$$.fragment,oUt),oUt.forEach(t),eUt.forEach(t),Bot=i(RUe),g7e=n(RUe,"SPAN",{});var rUt=s(g7e);Iot=r(rUt,"FlaxAutoModelForTokenClassification"),rUt.forEach(t),RUe.forEach(t),wQe=i(m),Er=n(m,"DIV",{class:!0});var Fi=s(Er);T(mk.$$.fragment,Fi),Not=i(Fi),bm=n(Fi,"P",{});var lne=s(bm);qot=r(lne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vre=n(lne,"A",{href:!0});var tUt=s(Vre);jot=r(tUt,"from_pretrained()"),tUt.forEach(t),Dot=r(lne," class method or the "),Xre=n(lne,"A",{href:!0});var aUt=s(Xre);Got=r(aUt,"from_config()"),aUt.forEach(t),Oot=r(lne,` class
method.`),lne.forEach(t),Vot=i(Fi),fk=n(Fi,"P",{});var PUe=s(fk);Xot=r(PUe,"This class cannot be instantiated directly using "),h7e=n(PUe,"CODE",{});var nUt=s(h7e);zot=r(nUt,"__init__()"),nUt.forEach(t),Wot=r(PUe," (throws an error)."),PUe.forEach(t),Qot=i(Fi),ea=n(Fi,"DIV",{class:!0});var fy=s(ea);T(gk.$$.fragment,fy),Hot=i(fy),u7e=n(fy,"P",{});var sUt=s(u7e);Uot=r(sUt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sUt.forEach(t),Jot=i(fy),vm=n(fy,"P",{});var ine=s(vm);Yot=r(ine,`Note:
Loading a model from its configuration file does `),p7e=n(ine,"STRONG",{});var lUt=s(p7e);Kot=r(lUt,"not"),lUt.forEach(t),Zot=r(ine,` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=n(ine,"A",{href:!0});var iUt=s(zre);ert=r(iUt,"from_pretrained()"),iUt.forEach(t),ort=r(ine," to load the model weights."),ine.forEach(t),rrt=i(fy),T(EA.$$.fragment,fy),fy.forEach(t),trt=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(hk.$$.fragment,Ti),art=i(Ti),_7e=n(Ti,"P",{});var dUt=s(_7e);nrt=r(dUt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dUt.forEach(t),srt=i(Ti),xn=n(Ti,"P",{});var gy=s(xn);lrt=r(gy,"The model class to instantiate is selected based on the "),b7e=n(gy,"CODE",{});var cUt=s(b7e);irt=r(cUt,"model_type"),cUt.forEach(t),drt=r(gy,` property of the config object (either
passed as an argument or loaded from `),v7e=n(gy,"CODE",{});var mUt=s(v7e);crt=r(mUt,"pretrained_model_name_or_path"),mUt.forEach(t),mrt=r(gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(gy,"CODE",{});var fUt=s(F7e);frt=r(fUt,"pretrained_model_name_or_path"),fUt.forEach(t),grt=r(gy,":"),gy.forEach(t),hrt=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);CA=n(Eo,"LI",{});var dze=s(CA);T7e=n(dze,"STRONG",{});var gUt=s(T7e);urt=r(gUt,"albert"),gUt.forEach(t),prt=r(dze," \u2014 "),Wre=n(dze,"A",{href:!0});var hUt=s(Wre);_rt=r(hUt,"FlaxAlbertForTokenClassification"),hUt.forEach(t),brt=r(dze," (ALBERT model)"),dze.forEach(t),vrt=i(Eo),wA=n(Eo,"LI",{});var cze=s(wA);M7e=n(cze,"STRONG",{});var uUt=s(M7e);Frt=r(uUt,"bert"),uUt.forEach(t),Trt=r(cze," \u2014 "),Qre=n(cze,"A",{href:!0});var pUt=s(Qre);Mrt=r(pUt,"FlaxBertForTokenClassification"),pUt.forEach(t),Ert=r(cze," (BERT model)"),cze.forEach(t),Crt=i(Eo),AA=n(Eo,"LI",{});var mze=s(AA);E7e=n(mze,"STRONG",{});var _Ut=s(E7e);wrt=r(_Ut,"big_bird"),_Ut.forEach(t),Art=r(mze," \u2014 "),Hre=n(mze,"A",{href:!0});var bUt=s(Hre);Lrt=r(bUt,"FlaxBigBirdForTokenClassification"),bUt.forEach(t),yrt=r(mze," (BigBird model)"),mze.forEach(t),xrt=i(Eo),LA=n(Eo,"LI",{});var fze=s(LA);C7e=n(fze,"STRONG",{});var vUt=s(C7e);$rt=r(vUt,"distilbert"),vUt.forEach(t),krt=r(fze," \u2014 "),Ure=n(fze,"A",{href:!0});var FUt=s(Ure);Srt=r(FUt,"FlaxDistilBertForTokenClassification"),FUt.forEach(t),Rrt=r(fze," (DistilBERT model)"),fze.forEach(t),Prt=i(Eo),yA=n(Eo,"LI",{});var gze=s(yA);w7e=n(gze,"STRONG",{});var TUt=s(w7e);Brt=r(TUt,"electra"),TUt.forEach(t),Irt=r(gze," \u2014 "),Jre=n(gze,"A",{href:!0});var MUt=s(Jre);Nrt=r(MUt,"FlaxElectraForTokenClassification"),MUt.forEach(t),qrt=r(gze," (ELECTRA model)"),gze.forEach(t),jrt=i(Eo),xA=n(Eo,"LI",{});var hze=s(xA);A7e=n(hze,"STRONG",{});var EUt=s(A7e);Drt=r(EUt,"roberta"),EUt.forEach(t),Grt=r(hze," \u2014 "),Yre=n(hze,"A",{href:!0});var CUt=s(Yre);Ort=r(CUt,"FlaxRobertaForTokenClassification"),CUt.forEach(t),Vrt=r(hze," (RoBERTa model)"),hze.forEach(t),Xrt=i(Eo),$A=n(Eo,"LI",{});var uze=s($A);L7e=n(uze,"STRONG",{});var wUt=s(L7e);zrt=r(wUt,"roformer"),wUt.forEach(t),Wrt=r(uze," \u2014 "),Kre=n(uze,"A",{href:!0});var AUt=s(Kre);Qrt=r(AUt,"FlaxRoFormerForTokenClassification"),AUt.forEach(t),Hrt=r(uze," (RoFormer model)"),uze.forEach(t),Urt=i(Eo),kA=n(Eo,"LI",{});var pze=s(kA);y7e=n(pze,"STRONG",{});var LUt=s(y7e);Jrt=r(LUt,"xlm-roberta"),LUt.forEach(t),Yrt=r(pze," \u2014 "),Zre=n(pze,"A",{href:!0});var yUt=s(Zre);Krt=r(yUt,"FlaxXLMRobertaForTokenClassification"),yUt.forEach(t),Zrt=r(pze," (XLM-RoBERTa model)"),pze.forEach(t),Eo.forEach(t),ett=i(Ti),T(SA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),AQe=i(m),Fm=n(m,"H2",{class:!0});var BUe=s(Fm);RA=n(BUe,"A",{id:!0,class:!0,href:!0});var xUt=s(RA);x7e=n(xUt,"SPAN",{});var $Ut=s(x7e);T(uk.$$.fragment,$Ut),$Ut.forEach(t),xUt.forEach(t),ott=i(BUe),$7e=n(BUe,"SPAN",{});var kUt=s($7e);rtt=r(kUt,"FlaxAutoModelForMultipleChoice"),kUt.forEach(t),BUe.forEach(t),LQe=i(m),Cr=n(m,"DIV",{class:!0});var Mi=s(Cr);T(pk.$$.fragment,Mi),ttt=i(Mi),Tm=n(Mi,"P",{});var dne=s(Tm);att=r(dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ete=n(dne,"A",{href:!0});var SUt=s(ete);ntt=r(SUt,"from_pretrained()"),SUt.forEach(t),stt=r(dne," class method or the "),ote=n(dne,"A",{href:!0});var RUt=s(ote);ltt=r(RUt,"from_config()"),RUt.forEach(t),itt=r(dne,` class
method.`),dne.forEach(t),dtt=i(Mi),_k=n(Mi,"P",{});var IUe=s(_k);ctt=r(IUe,"This class cannot be instantiated directly using "),k7e=n(IUe,"CODE",{});var PUt=s(k7e);mtt=r(PUt,"__init__()"),PUt.forEach(t),ftt=r(IUe," (throws an error)."),IUe.forEach(t),gtt=i(Mi),oa=n(Mi,"DIV",{class:!0});var hy=s(oa);T(bk.$$.fragment,hy),htt=i(hy),S7e=n(hy,"P",{});var BUt=s(S7e);utt=r(BUt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BUt.forEach(t),ptt=i(hy),Mm=n(hy,"P",{});var cne=s(Mm);_tt=r(cne,`Note:
Loading a model from its configuration file does `),R7e=n(cne,"STRONG",{});var IUt=s(R7e);btt=r(IUt,"not"),IUt.forEach(t),vtt=r(cne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=n(cne,"A",{href:!0});var NUt=s(rte);Ftt=r(NUt,"from_pretrained()"),NUt.forEach(t),Ttt=r(cne," to load the model weights."),cne.forEach(t),Mtt=i(hy),T(PA.$$.fragment,hy),hy.forEach(t),Ett=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(vk.$$.fragment,Ei),Ctt=i(Ei),P7e=n(Ei,"P",{});var qUt=s(P7e);wtt=r(qUt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qUt.forEach(t),Att=i(Ei),$n=n(Ei,"P",{});var uy=s($n);Ltt=r(uy,"The model class to instantiate is selected based on the "),B7e=n(uy,"CODE",{});var jUt=s(B7e);ytt=r(jUt,"model_type"),jUt.forEach(t),xtt=r(uy,` property of the config object (either
passed as an argument or loaded from `),I7e=n(uy,"CODE",{});var DUt=s(I7e);$tt=r(DUt,"pretrained_model_name_or_path"),DUt.forEach(t),ktt=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=n(uy,"CODE",{});var GUt=s(N7e);Stt=r(GUt,"pretrained_model_name_or_path"),GUt.forEach(t),Rtt=r(uy,":"),uy.forEach(t),Ptt=i(Ei),ze=n(Ei,"UL",{});var Co=s(ze);BA=n(Co,"LI",{});var _ze=s(BA);q7e=n(_ze,"STRONG",{});var OUt=s(q7e);Btt=r(OUt,"albert"),OUt.forEach(t),Itt=r(_ze," \u2014 "),tte=n(_ze,"A",{href:!0});var VUt=s(tte);Ntt=r(VUt,"FlaxAlbertForMultipleChoice"),VUt.forEach(t),qtt=r(_ze," (ALBERT model)"),_ze.forEach(t),jtt=i(Co),IA=n(Co,"LI",{});var bze=s(IA);j7e=n(bze,"STRONG",{});var XUt=s(j7e);Dtt=r(XUt,"bert"),XUt.forEach(t),Gtt=r(bze," \u2014 "),ate=n(bze,"A",{href:!0});var zUt=s(ate);Ott=r(zUt,"FlaxBertForMultipleChoice"),zUt.forEach(t),Vtt=r(bze," (BERT model)"),bze.forEach(t),Xtt=i(Co),NA=n(Co,"LI",{});var vze=s(NA);D7e=n(vze,"STRONG",{});var WUt=s(D7e);ztt=r(WUt,"big_bird"),WUt.forEach(t),Wtt=r(vze," \u2014 "),nte=n(vze,"A",{href:!0});var QUt=s(nte);Qtt=r(QUt,"FlaxBigBirdForMultipleChoice"),QUt.forEach(t),Htt=r(vze," (BigBird model)"),vze.forEach(t),Utt=i(Co),qA=n(Co,"LI",{});var Fze=s(qA);G7e=n(Fze,"STRONG",{});var HUt=s(G7e);Jtt=r(HUt,"distilbert"),HUt.forEach(t),Ytt=r(Fze," \u2014 "),ste=n(Fze,"A",{href:!0});var UUt=s(ste);Ktt=r(UUt,"FlaxDistilBertForMultipleChoice"),UUt.forEach(t),Ztt=r(Fze," (DistilBERT model)"),Fze.forEach(t),eat=i(Co),jA=n(Co,"LI",{});var Tze=s(jA);O7e=n(Tze,"STRONG",{});var JUt=s(O7e);oat=r(JUt,"electra"),JUt.forEach(t),rat=r(Tze," \u2014 "),lte=n(Tze,"A",{href:!0});var YUt=s(lte);tat=r(YUt,"FlaxElectraForMultipleChoice"),YUt.forEach(t),aat=r(Tze," (ELECTRA model)"),Tze.forEach(t),nat=i(Co),DA=n(Co,"LI",{});var Mze=s(DA);V7e=n(Mze,"STRONG",{});var KUt=s(V7e);sat=r(KUt,"roberta"),KUt.forEach(t),lat=r(Mze," \u2014 "),ite=n(Mze,"A",{href:!0});var ZUt=s(ite);iat=r(ZUt,"FlaxRobertaForMultipleChoice"),ZUt.forEach(t),dat=r(Mze," (RoBERTa model)"),Mze.forEach(t),cat=i(Co),GA=n(Co,"LI",{});var Eze=s(GA);X7e=n(Eze,"STRONG",{});var eJt=s(X7e);mat=r(eJt,"roformer"),eJt.forEach(t),fat=r(Eze," \u2014 "),dte=n(Eze,"A",{href:!0});var oJt=s(dte);gat=r(oJt,"FlaxRoFormerForMultipleChoice"),oJt.forEach(t),hat=r(Eze," (RoFormer model)"),Eze.forEach(t),uat=i(Co),OA=n(Co,"LI",{});var Cze=s(OA);z7e=n(Cze,"STRONG",{});var rJt=s(z7e);pat=r(rJt,"xlm-roberta"),rJt.forEach(t),_at=r(Cze," \u2014 "),cte=n(Cze,"A",{href:!0});var tJt=s(cte);bat=r(tJt,"FlaxXLMRobertaForMultipleChoice"),tJt.forEach(t),vat=r(Cze," (XLM-RoBERTa model)"),Cze.forEach(t),Co.forEach(t),Fat=i(Ei),T(VA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),yQe=i(m),Em=n(m,"H2",{class:!0});var NUe=s(Em);XA=n(NUe,"A",{id:!0,class:!0,href:!0});var aJt=s(XA);W7e=n(aJt,"SPAN",{});var nJt=s(W7e);T(Fk.$$.fragment,nJt),nJt.forEach(t),aJt.forEach(t),Tat=i(NUe),Q7e=n(NUe,"SPAN",{});var sJt=s(Q7e);Mat=r(sJt,"FlaxAutoModelForNextSentencePrediction"),sJt.forEach(t),NUe.forEach(t),xQe=i(m),wr=n(m,"DIV",{class:!0});var Ci=s(wr);T(Tk.$$.fragment,Ci),Eat=i(Ci),Cm=n(Ci,"P",{});var mne=s(Cm);Cat=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mte=n(mne,"A",{href:!0});var lJt=s(mte);wat=r(lJt,"from_pretrained()"),lJt.forEach(t),Aat=r(mne," class method or the "),fte=n(mne,"A",{href:!0});var iJt=s(fte);Lat=r(iJt,"from_config()"),iJt.forEach(t),yat=r(mne,` class
method.`),mne.forEach(t),xat=i(Ci),Mk=n(Ci,"P",{});var qUe=s(Mk);$at=r(qUe,"This class cannot be instantiated directly using "),H7e=n(qUe,"CODE",{});var dJt=s(H7e);kat=r(dJt,"__init__()"),dJt.forEach(t),Sat=r(qUe," (throws an error)."),qUe.forEach(t),Rat=i(Ci),ra=n(Ci,"DIV",{class:!0});var py=s(ra);T(Ek.$$.fragment,py),Pat=i(py),U7e=n(py,"P",{});var cJt=s(U7e);Bat=r(cJt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cJt.forEach(t),Iat=i(py),wm=n(py,"P",{});var fne=s(wm);Nat=r(fne,`Note:
Loading a model from its configuration file does `),J7e=n(fne,"STRONG",{});var mJt=s(J7e);qat=r(mJt,"not"),mJt.forEach(t),jat=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=n(fne,"A",{href:!0});var fJt=s(gte);Dat=r(fJt,"from_pretrained()"),fJt.forEach(t),Gat=r(fne," to load the model weights."),fne.forEach(t),Oat=i(py),T(zA.$$.fragment,py),py.forEach(t),Vat=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(Ck.$$.fragment,wi),Xat=i(wi),Y7e=n(wi,"P",{});var gJt=s(Y7e);zat=r(gJt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gJt.forEach(t),Wat=i(wi),kn=n(wi,"P",{});var _y=s(kn);Qat=r(_y,"The model class to instantiate is selected based on the "),K7e=n(_y,"CODE",{});var hJt=s(K7e);Hat=r(hJt,"model_type"),hJt.forEach(t),Uat=r(_y,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(_y,"CODE",{});var uJt=s(Z7e);Jat=r(uJt,"pretrained_model_name_or_path"),uJt.forEach(t),Yat=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eLe=n(_y,"CODE",{});var pJt=s(eLe);Kat=r(pJt,"pretrained_model_name_or_path"),pJt.forEach(t),Zat=r(_y,":"),_y.forEach(t),ent=i(wi),oLe=n(wi,"UL",{});var _Jt=s(oLe);WA=n(_Jt,"LI",{});var wze=s(WA);rLe=n(wze,"STRONG",{});var bJt=s(rLe);ont=r(bJt,"bert"),bJt.forEach(t),rnt=r(wze," \u2014 "),hte=n(wze,"A",{href:!0});var vJt=s(hte);tnt=r(vJt,"FlaxBertForNextSentencePrediction"),vJt.forEach(t),ant=r(wze," (BERT model)"),wze.forEach(t),_Jt.forEach(t),nnt=i(wi),T(QA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),$Qe=i(m),Am=n(m,"H2",{class:!0});var jUe=s(Am);HA=n(jUe,"A",{id:!0,class:!0,href:!0});var FJt=s(HA);tLe=n(FJt,"SPAN",{});var TJt=s(tLe);T(wk.$$.fragment,TJt),TJt.forEach(t),FJt.forEach(t),snt=i(jUe),aLe=n(jUe,"SPAN",{});var MJt=s(aLe);lnt=r(MJt,"FlaxAutoModelForImageClassification"),MJt.forEach(t),jUe.forEach(t),kQe=i(m),Ar=n(m,"DIV",{class:!0});var Ai=s(Ar);T(Ak.$$.fragment,Ai),int=i(Ai),Lm=n(Ai,"P",{});var gne=s(Lm);dnt=r(gne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ute=n(gne,"A",{href:!0});var EJt=s(ute);cnt=r(EJt,"from_pretrained()"),EJt.forEach(t),mnt=r(gne," class method or the "),pte=n(gne,"A",{href:!0});var CJt=s(pte);fnt=r(CJt,"from_config()"),CJt.forEach(t),gnt=r(gne,` class
method.`),gne.forEach(t),hnt=i(Ai),Lk=n(Ai,"P",{});var DUe=s(Lk);unt=r(DUe,"This class cannot be instantiated directly using "),nLe=n(DUe,"CODE",{});var wJt=s(nLe);pnt=r(wJt,"__init__()"),wJt.forEach(t),_nt=r(DUe," (throws an error)."),DUe.forEach(t),bnt=i(Ai),ta=n(Ai,"DIV",{class:!0});var by=s(ta);T(yk.$$.fragment,by),vnt=i(by),sLe=n(by,"P",{});var AJt=s(sLe);Fnt=r(AJt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),AJt.forEach(t),Tnt=i(by),ym=n(by,"P",{});var hne=s(ym);Mnt=r(hne,`Note:
Loading a model from its configuration file does `),lLe=n(hne,"STRONG",{});var LJt=s(lLe);Ent=r(LJt,"not"),LJt.forEach(t),Cnt=r(hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=n(hne,"A",{href:!0});var yJt=s(_te);wnt=r(yJt,"from_pretrained()"),yJt.forEach(t),Ant=r(hne," to load the model weights."),hne.forEach(t),Lnt=i(by),T(UA.$$.fragment,by),by.forEach(t),ynt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(xk.$$.fragment,Li),xnt=i(Li),iLe=n(Li,"P",{});var xJt=s(iLe);$nt=r(xJt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xJt.forEach(t),knt=i(Li),Sn=n(Li,"P",{});var vy=s(Sn);Snt=r(vy,"The model class to instantiate is selected based on the "),dLe=n(vy,"CODE",{});var $Jt=s(dLe);Rnt=r($Jt,"model_type"),$Jt.forEach(t),Pnt=r(vy,` property of the config object (either
passed as an argument or loaded from `),cLe=n(vy,"CODE",{});var kJt=s(cLe);Bnt=r(kJt,"pretrained_model_name_or_path"),kJt.forEach(t),Int=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mLe=n(vy,"CODE",{});var SJt=s(mLe);Nnt=r(SJt,"pretrained_model_name_or_path"),SJt.forEach(t),qnt=r(vy,":"),vy.forEach(t),jnt=i(Li),$k=n(Li,"UL",{});var GUe=s($k);JA=n(GUe,"LI",{});var Aze=s(JA);fLe=n(Aze,"STRONG",{});var RJt=s(fLe);Dnt=r(RJt,"beit"),RJt.forEach(t),Gnt=r(Aze," \u2014 "),bte=n(Aze,"A",{href:!0});var PJt=s(bte);Ont=r(PJt,"FlaxBeitForImageClassification"),PJt.forEach(t),Vnt=r(Aze," (BEiT model)"),Aze.forEach(t),Xnt=i(GUe),YA=n(GUe,"LI",{});var Lze=s(YA);gLe=n(Lze,"STRONG",{});var BJt=s(gLe);znt=r(BJt,"vit"),BJt.forEach(t),Wnt=r(Lze," \u2014 "),vte=n(Lze,"A",{href:!0});var IJt=s(vte);Qnt=r(IJt,"FlaxViTForImageClassification"),IJt.forEach(t),Hnt=r(Lze," (ViT model)"),Lze.forEach(t),GUe.forEach(t),Unt=i(Li),T(KA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),SQe=i(m),xm=n(m,"H2",{class:!0});var OUe=s(xm);ZA=n(OUe,"A",{id:!0,class:!0,href:!0});var NJt=s(ZA);hLe=n(NJt,"SPAN",{});var qJt=s(hLe);T(kk.$$.fragment,qJt),qJt.forEach(t),NJt.forEach(t),Jnt=i(OUe),uLe=n(OUe,"SPAN",{});var jJt=s(uLe);Ynt=r(jJt,"FlaxAutoModelForVision2Seq"),jJt.forEach(t),OUe.forEach(t),RQe=i(m),Lr=n(m,"DIV",{class:!0});var yi=s(Lr);T(Sk.$$.fragment,yi),Knt=i(yi),$m=n(yi,"P",{});var une=s($m);Znt=r(une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fte=n(une,"A",{href:!0});var DJt=s(Fte);est=r(DJt,"from_pretrained()"),DJt.forEach(t),ost=r(une," class method or the "),Tte=n(une,"A",{href:!0});var GJt=s(Tte);rst=r(GJt,"from_config()"),GJt.forEach(t),tst=r(une,` class
method.`),une.forEach(t),ast=i(yi),Rk=n(yi,"P",{});var VUe=s(Rk);nst=r(VUe,"This class cannot be instantiated directly using "),pLe=n(VUe,"CODE",{});var OJt=s(pLe);sst=r(OJt,"__init__()"),OJt.forEach(t),lst=r(VUe," (throws an error)."),VUe.forEach(t),ist=i(yi),aa=n(yi,"DIV",{class:!0});var Fy=s(aa);T(Pk.$$.fragment,Fy),dst=i(Fy),_Le=n(Fy,"P",{});var VJt=s(_Le);cst=r(VJt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VJt.forEach(t),mst=i(Fy),km=n(Fy,"P",{});var pne=s(km);fst=r(pne,`Note:
Loading a model from its configuration file does `),bLe=n(pne,"STRONG",{});var XJt=s(bLe);gst=r(XJt,"not"),XJt.forEach(t),hst=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mte=n(pne,"A",{href:!0});var zJt=s(Mte);ust=r(zJt,"from_pretrained()"),zJt.forEach(t),pst=r(pne," to load the model weights."),pne.forEach(t),_st=i(Fy),T(e7.$$.fragment,Fy),Fy.forEach(t),bst=i(yi),ot=n(yi,"DIV",{class:!0});var xi=s(ot);T(Bk.$$.fragment,xi),vst=i(xi),vLe=n(xi,"P",{});var WJt=s(vLe);Fst=r(WJt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WJt.forEach(t),Tst=i(xi),Rn=n(xi,"P",{});var Ty=s(Rn);Mst=r(Ty,"The model class to instantiate is selected based on the "),FLe=n(Ty,"CODE",{});var QJt=s(FLe);Est=r(QJt,"model_type"),QJt.forEach(t),Cst=r(Ty,` property of the config object (either
passed as an argument or loaded from `),TLe=n(Ty,"CODE",{});var HJt=s(TLe);wst=r(HJt,"pretrained_model_name_or_path"),HJt.forEach(t),Ast=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=n(Ty,"CODE",{});var UJt=s(MLe);Lst=r(UJt,"pretrained_model_name_or_path"),UJt.forEach(t),yst=r(Ty,":"),Ty.forEach(t),xst=i(xi),ELe=n(xi,"UL",{});var JJt=s(ELe);o7=n(JJt,"LI",{});var yze=s(o7);CLe=n(yze,"STRONG",{});var YJt=s(CLe);$st=r(YJt,"vision-encoder-decoder"),YJt.forEach(t),kst=r(yze," \u2014 "),Ete=n(yze,"A",{href:!0});var KJt=s(Ete);Sst=r(KJt,"FlaxVisionEncoderDecoderModel"),KJt.forEach(t),Rst=r(yze," (Vision Encoder decoder model)"),yze.forEach(t),JJt.forEach(t),Pst=i(xi),T(r7.$$.fragment,xi),xi.forEach(t),yi.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(aZt)),d(f,"id","auto-classes"),d(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f,"href","#auto-classes"),d(u,"class","relative group"),d(Bn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(qn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Ii,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(jm,"id","extending-the-auto-classes"),d(jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jm,"href","#extending-the-auto-classes"),d(Ni,"class","relative group"),d(Gm,"id","transformers.AutoConfig"),d(Gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gm,"href","#transformers.AutoConfig"),d(qi,"class","relative group"),d(mR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(fR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(gR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(hR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(uR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(pR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(_R,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(bR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(vR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(FR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(TR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),d(MR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(ER,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(CR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(wR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),d(AR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(LR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(yR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(xR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),d($R,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(kR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(SR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(RR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(PR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(BR,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(IR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(NR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(qR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(jR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(DR,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(GR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(OR,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(VR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(XR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),d(zR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(WR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(QR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(HR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(UR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(JR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(YR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(KR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(ZR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),d(eP,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(oP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(rP,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(tP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(aP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(nP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(sP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(lP,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),d(iP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(dP,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),d(cP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(mP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(fP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(gP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(hP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(uP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(pP,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),d(_P,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(bP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(vP,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(FP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(TP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(MP,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),d(EP,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),d(CP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(wP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(AP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),d(LP,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),d(yP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(xP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d($P,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(kP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(SP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(RP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(PP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(BP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(IP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(NP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(qP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(jP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(DP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(GP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(OP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(VP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(XP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(zP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(WP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(QP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(HP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(UP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(JP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(YP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(KP,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),d(ZP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(eB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(oB,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(rB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(tB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(aB,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(nB,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(sB,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(lB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(iB,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(dB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(cB,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(mB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(fB,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(gB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(hB,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(uB,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(pB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(_B,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(bB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(vB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(FB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(TB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(MB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),d(EB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(th,"id","transformers.AutoTokenizer"),d(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(th,"href","#transformers.AutoTokenizer"),d(Di,"class","relative group"),d(CB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(wB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(AB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(LB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(yB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(xB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d($B,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(kB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(SB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(RB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(PB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(BB,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(IB,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(NB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(qB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(jB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(DB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(GB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(OB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(VB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(XB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(zB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(WB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(QB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(HB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(UB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(JB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(YB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(KB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(ZB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(eI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(oI,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(rI,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(tI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(aI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(nI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(sI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(lI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(iI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(dI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(cI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(mI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(fI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(gI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(hI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(uI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(pI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(_I,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(bI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(vI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(FI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(TI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(MI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(EI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(CI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(wI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(AI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(LI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(yI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(xI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d($I,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(kI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(SI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(RI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(PI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(BI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(II,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(NI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(qI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(jI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(DI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(GI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(OI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(VI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(XI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(zI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(WI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(QI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(HI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(UI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(JI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(YI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(KI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(ZI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(eN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(oN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(rN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(tN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(aN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(nN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(sN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(lN,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(iN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(dN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(cN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(mN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(fN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(gN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(hN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),d(uN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(pN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(_N,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(bN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),d(vN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(FN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(TN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(MN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(EN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(CN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(wN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(AN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(LN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(yN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d($N,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(kN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(SN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(RN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(PN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(BN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(IN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(NN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(qN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(jN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(DN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(GN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(ON,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(VN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(XN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(WN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(QN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(HN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(UN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(JN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(YN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(KN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(ZN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(eq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(oq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(rq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(tq,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(aq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(nq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(sq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(lq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(iq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(dq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(cq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(mq,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(fq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(gq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(hq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(uq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(pq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(_q,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(bq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(vq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Fq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(Tq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(Mq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(Eq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoFeatureExtractor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoFeatureExtractor"),d(Gi,"class","relative group"),d(Cq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(wq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Aq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Lq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(yq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($q,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(kq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Sq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Rq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(Pq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(Bq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(Iq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Nq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(qq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(jq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Dq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(Gq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(Oq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(Vq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Xq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(zq,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Wq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Qq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Hq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Uq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Jq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Yq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Kq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Zq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ej,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(rj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(tj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(aj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(nj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(sj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wu,"id","transformers.AutoProcessor"),d(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wu,"href","#transformers.AutoProcessor"),d(Oi,"class","relative group"),d(lj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(ij,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(dj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),d(cj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(mj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(fj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(gj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(hj,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(uj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(pj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(_j,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(bj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(vj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Fj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Tj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Mj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),d(Ej,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Cj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(wj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Aj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hu,"id","transformers.AutoModel"),d(Hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hu,"href","#transformers.AutoModel"),d(Xi,"class","relative group"),d(Lj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($j,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(kj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(Sj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(Rj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Pj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Bj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(Ij,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Nj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(qj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(jj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),d(Dj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(Gj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(Oj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(Vj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),d(Xj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(zj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(Wj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(Qj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),d(Hj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Uj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Jj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Yj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(Kj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Zj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(eD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(oD,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(rD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(tD,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(aD,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(nD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(sD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(lD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),d(iD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(dD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(cD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(mD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(fD,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(gD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(hD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(uD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(pD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(_D,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),d(bD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(vD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(FD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(TD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(MD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(ED,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(CD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(wD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),d(AD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(LD,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),d(yD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(xD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d($D,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(kD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(SD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(RD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(PD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),d(BD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(ID,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(ND,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),d(qD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(jD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(DD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),d(GD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),d(OD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(VD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(XD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(zD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),d(WD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(QD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(HD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(UD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(JD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(YD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(KD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(ZD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(eG,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(oG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(rG,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(tG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(aG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(nG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(sG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(lG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(iG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(dG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(cG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(mG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(fG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(gG,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),d(hG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(uG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(pG,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(_G,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(bG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(vG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(FG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(TG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(MG,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(EG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(CG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(wG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(AG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(LG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(yG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(xG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d($G,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(kG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(SG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(RG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(PG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(BG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),d(IG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t2,"id","transformers.AutoModelForPreTraining"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForPreTraining"),d(Qi,"class","relative group"),d(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(GG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(OG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(VG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(XG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(zG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(WG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(QG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(HG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(UG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(JG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(YG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(KG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(ZG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),d(eO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(oO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(rO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(tO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(aO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(nO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(sO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(lO,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(iO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(dO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(cO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(mO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(fO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(gO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(hO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(uO,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(pO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(_O,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(bO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(vO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(FO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(TO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(MO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(EO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(CO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(wO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(AO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(LO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(yO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(xO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d($O,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(kO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z2,"id","transformers.AutoModelForCausalLM"),d(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z2,"href","#transformers.AutoModelForCausalLM"),d(Ji,"class","relative group"),d(SO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(IO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(NO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(qO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(jO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(DO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(GO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(OO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(VO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(XO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(zO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(WO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(QO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(HO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(UO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(JO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(YO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(KO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(ZO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(eV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(oV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),d(rV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(tV,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),d(aV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(nV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(sV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(lV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(iV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(dV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(cV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(mV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(fV,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(gV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(hV,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(uV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(pV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(_V,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(bV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(vV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(FV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vb,"id","transformers.AutoModelForMaskedLM"),d(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vb,"href","#transformers.AutoModelForMaskedLM"),d(Zi,"class","relative group"),d(TV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(wV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(LV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(yV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(xV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d($V,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(kV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(SV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(RV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(PV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(BV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(IV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(NV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(qV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(jV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(DV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(GV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(OV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(VV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(XV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(zV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(WV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(QV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(HV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(UV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(JV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(YV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(KV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(ZV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(oX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(tX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(nX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(sX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kv,"id","transformers.AutoModelForSeq2SeqLM"),d(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kv,"href","#transformers.AutoModelForSeq2SeqLM"),d(rd,"class","relative group"),d(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(mX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(fX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(gX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(hX,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(uX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(pX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(_X,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(bX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(vX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(FX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(TX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(MX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(EX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(CX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(wX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(AX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(LX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(yX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e1,"id","transformers.AutoModelForSequenceClassification"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForSequenceClassification"),d(nd,"class","relative group"),d(xX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(RX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(PX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(BX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(IX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(NX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(qX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(jX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(DX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(GX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(OX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(VX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(XX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(zX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(WX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(QX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(HX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(UX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(JX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(YX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(KX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(ZX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(ez,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(oz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(rz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(tz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(az,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),d(sz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(lz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(iz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(dz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(cz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(mz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(fz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(gz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(hz,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(uz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(pz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(_z,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(bz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(vz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Fz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Tz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Mz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Ez,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Cz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(wz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Az,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Lz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(yz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(xz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rF,"id","transformers.AutoModelForMultipleChoice"),d(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rF,"href","#transformers.AutoModelForMultipleChoice"),d(id,"class","relative group"),d($z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Pz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Bz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Iz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Nz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(qz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(jz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Dz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(Gz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Oz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Vz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Xz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(zz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Wz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Qz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Hz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),d(Uz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Jz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Yz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Kz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(Zz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(eW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(oW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(rW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(tW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(aW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(nW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(sW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(lW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(iW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(dW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NF,"id","transformers.AutoModelForNextSentencePrediction"),d(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NF,"href","#transformers.AutoModelForNextSentencePrediction"),d(md,"class","relative group"),d(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(hW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(uW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(pW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(_W,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(bW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QF,"id","transformers.AutoModelForTokenClassification"),d(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QF,"href","#transformers.AutoModelForTokenClassification"),d(hd,"class","relative group"),d(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(EW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(CW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(wW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(AW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(LW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(yW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(xW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d($W,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(kW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(SW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(RW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(PW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(BW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(IW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(NW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(qW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(jW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(DW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(GW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(OW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(VW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),d(XW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(zW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(WW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(QW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(HW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(UW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(JW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(YW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(KW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ZW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(eQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(oQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(rQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(tQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(aQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PT,"id","transformers.AutoModelForQuestionAnswering"),d(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PT,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(nQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(dQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(cQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(mQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(fQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(gQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(hQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(uQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(pQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(_Q,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(bQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(vQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(FQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(TQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(MQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(EQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(CQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(wQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(LQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(yQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(xQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d($Q,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),d(kQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(SQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(RQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(PQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(IQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(NQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(qQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(jQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(DQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(GQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(OQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(VQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(XQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(zQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(WQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(QQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(HQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(UQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(JQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LM,"id","transformers.AutoModelForTableQuestionAnswering"),d(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LM,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Fd,"class","relative group"),d(YQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SM,"id","transformers.AutoModelForImageClassification"),d(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SM,"href","#transformers.AutoModelForImageClassification"),d(Ed,"class","relative group"),d(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(nH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(sH,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),d(lH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(iH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(dH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(cH,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(mH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),d(fH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(gH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(hH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(uH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(pH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(_H,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(bH,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(vH,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(FH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(TH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(MH,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),d(EH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(CH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JM,"id","transformers.AutoModelForVision2Seq"),d(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JM,"href","#transformers.AutoModelForVision2Seq"),d(Ad,"class","relative group"),d(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o4,"id","transformers.AutoModelForVisualQuestionAnswering"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(xd,"class","relative group"),d(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s4,"id","transformers.AutoModelForAudioClassification"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.AutoModelForAudioClassification"),d(Sd,"class","relative group"),d(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(NH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(qH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(jH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(DH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(GH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(OH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(VH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(XH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v4,"id","transformers.AutoModelForAudioFrameClassification"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.AutoModelForAudioFrameClassification"),d(Bd,"class","relative group"),d(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(UH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(JH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(YH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(KH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y4,"id","transformers.AutoModelForCTC"),d(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y4,"href","#transformers.AutoModelForCTC"),d(qd,"class","relative group"),d(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(tU,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(aU,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),d(nU,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(sU,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(lU,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(iU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(dU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(cU,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(mU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O4,"id","transformers.AutoModelForSpeechSeq2Seq"),d(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O4,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Gd,"class","relative group"),d(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uU,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(pU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H4,"id","transformers.AutoModelForAudioXVector"),d(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H4,"href","#transformers.AutoModelForAudioXVector"),d(Xd,"class","relative group"),d(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(TU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(MU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(EU,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(CU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tE,"id","transformers.AutoModelForMaskedImageModeling"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.AutoModelForMaskedImageModeling"),d(Qd,"class","relative group"),d(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yU,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(xU,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d($U,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),d(kU,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mE,"id","transformers.AutoModelForObjectDetection"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(IU,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_E,"id","transformers.AutoModelForImageSegmentation"),d(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_E,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(NU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ME,"id","transformers.AutoModelForSemanticSegmentation"),d(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ME,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(GU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XU,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(zU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(WU,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(QU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(HU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kE,"id","transformers.AutoModelForInstanceSegmentation"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IE,"id","transformers.TFAutoModel"),d(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IE,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(tJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(aJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(nJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(sJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(lJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(iJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(dJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(cJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(mJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(fJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(gJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(hJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(uJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),d(pJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(_J,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(bJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(vJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(FJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(TJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(MJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(EJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(CJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(wJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(AJ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(LJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(yJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(xJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d($J,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(kJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(SJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(RJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(PJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(BJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),d(IJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(NJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),d(qJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(jJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),d(DJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(GJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(OJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),d(VJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(XJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),d(zJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(WJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(QJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(HJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(UJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(JJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(YJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(KJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(ZJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BC,"id","transformers.TFAutoModelForPreTraining"),d(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BC,"href","#transformers.TFAutoModelForPreTraining"),d(mc,"class","relative group"),d(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(aY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(nY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(sY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(lY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(iY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(dY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(cY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(mY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(fY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(gY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(hY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(uY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(pY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(_Y,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(bY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(vY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(FY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(TY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(MY,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(EY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(wY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l5,"id","transformers.TFAutoModelForCausalLM"),d(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l5,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d($Y,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(kY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(SY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(RY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(PY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BY,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(IY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(NY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(qY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(jY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(DY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(GY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E5,"id","transformers.TFAutoModelForImageClassification"),d(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E5,"href","#transformers.TFAutoModelForImageClassification"),d(_c,"class","relative group"),d(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(WY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(QY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(HY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(UY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(JY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(YY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(KY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(ZY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R5,"id","transformers.TFAutoModelForMaskedLM"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(aK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(nK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(sK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(lK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(iK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(dK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(cK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(mK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(fK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(gK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(hK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(uK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(pK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(_K,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(bK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(vK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(FK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(TK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(MK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r3,"id","transformers.TFAutoModelForSeq2SeqLM"),d(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r3,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(LK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(yK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(xK,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d($K,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(kK,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(SK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(RK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(PK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(BK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u3,"id","transformers.TFAutoModelForSequenceClassification"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(DK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(GK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(OK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(VK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(XK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(zK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(WK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(QK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(HK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(UK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(JK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(YK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(KK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(ZK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(eZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(oZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(rZ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(tZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(aZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(nZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(sZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(lZ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(iZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(dZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(cZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X3,"id","transformers.TFAutoModelForMultipleChoice"),d(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X3,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(uZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(pZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(_Z,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(bZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(vZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(FZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(TZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(MZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(EZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(CZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(wZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(AZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(LZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(yZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(xZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d($Z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c0,"id","transformers.TFAutoModelForNextSentencePrediction"),d(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c0,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(BZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u0,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v0,"id","transformers.TFAutoModelForTokenClassification"),d(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v0,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(DZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(XZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(zZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(WZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(QZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(HZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(UZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(JZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(YZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(KZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(ZZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(eee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(oee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(ree,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(tee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(aee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(nee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(see,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(lee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(iee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O0,"id","transformers.TFAutoModelForQuestionAnswering"),d(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O0,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(gee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(hee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(uee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(pee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(_ee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(bee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(vee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Fee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Tee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Mee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(Eee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(Cee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(wee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(Aee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(Lee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(yee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(xee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d($ee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(kee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mw,"id","transformers.TFAutoModelForVision2Seq"),d(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mw,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(See,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bee,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uw,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uw,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(Iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vw,"id","transformers.FlaxAutoModel"),d(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vw,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(Dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Xee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(zee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(Wee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(Qee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(Hee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(Uee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(Jee,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Yee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Kee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(Zee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(eoe,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(ooe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(roe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(toe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(aoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(noe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(soe,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),d(loe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(ioe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(doe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(coe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(moe,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(foe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(goe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(uoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uw,"id","transformers.FlaxAutoModelForCausalLM"),d(Uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uw,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(voe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(Foe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(Toe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(Moe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(Eoe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(Coe,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(woe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(Aoe,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(Loe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(yoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i6,"id","transformers.FlaxAutoModelForPreTraining"),d(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i6,"href","#transformers.FlaxAutoModelForPreTraining"),d(rm,"class","relative group"),d(xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Soe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(Roe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Poe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(Boe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(Ioe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Noe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(qoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(joe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Doe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Goe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Ooe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Voe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Xoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C6,"id","transformers.FlaxAutoModelForMaskedLM"),d(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C6,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nm,"class","relative group"),d(zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(Uoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Joe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Yoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Koe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Zoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(ere,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(ore,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(rre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(tre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N6,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N6,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(im,"class","relative group"),d(are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(ire,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(dre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(cre,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(mre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(fre,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(gre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(hre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(ure,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(pre,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J6,"id","transformers.FlaxAutoModelForSequenceClassification"),d(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J6,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mm,"class","relative group"),d(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Tre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Mre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Ere,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Cre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(wre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Are,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Lre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(yre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(xre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dA,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(dA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(hm,"class","relative group"),d($re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Pre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Bre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Ire,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Nre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(qre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(jre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Dre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Gre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ore,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MA,"id","transformers.FlaxAutoModelForTokenClassification"),d(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MA,"href","#transformers.FlaxAutoModelForTokenClassification"),d(_m,"class","relative group"),d(Vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Qre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Hre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Ure,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Jre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Yre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Kre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Zre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RA,"id","transformers.FlaxAutoModelForMultipleChoice"),d(RA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RA,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Fm,"class","relative group"),d(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(ate,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(nte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(ste,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(lte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(ite,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(dte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(cte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(XA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Em,"class","relative group"),d(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HA,"id","transformers.FlaxAutoModelForImageClassification"),d(HA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HA,"href","#transformers.FlaxAutoModelForImageClassification"),d(Am,"class","relative group"),d(ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bte,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(vte,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZA,"id","transformers.FlaxAutoModelForVision2Seq"),d(ZA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZA,"href","#transformers.FlaxAutoModelForVision2Seq"),d(xm,"class","relative group"),d(Fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ete,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(c,p,null),e(u,h),e(u,wo),e(wo,$i),b(m,Bm,_),b(m,lt,_),e(lt,ki),e(lt,Si),e(Si,My),e(lt,Im),b(m,Oe,_),b(m,Qe,_),e(Qe,Ri),e(Qe,Bn),e(Bn,Ey),e(Qe,In),e(Qe,Nn),e(Nn,Cy),e(Qe,Pi),e(Qe,qn),e(qn,wy),e(Qe,Bi),b(m,Nm,_),M(Sa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,nR),e(Ae,Ii),e(Ii,sR),e(Ae,lR),b(m,Ao,_),b(m,Ra,_),e(Ra,iR),e(Ra,qm),e(qm,dR),e(Ra,XUe),b(m,xze,_),b(m,Ni,_),e(Ni,jm),e(jm,_ne),M(Ay,_ne,null),e(Ni,zUe),e(Ni,bne),e(bne,WUe),b(m,$ze,_),b(m,jn,_),e(jn,QUe),e(jn,vne),e(vne,HUe),e(jn,UUe),e(jn,Fne),e(Fne,JUe),e(jn,YUe),b(m,kze,_),M(Ly,m,_),b(m,Sze,_),b(m,cR,_),e(cR,KUe),b(m,Rze,_),M(Dm,m,_),b(m,Pze,_),b(m,qi,_),e(qi,Gm),e(Gm,Tne),M(yy,Tne,null),e(qi,ZUe),e(qi,Mne),e(Mne,eJe),b(m,Bze,_),b(m,Lo,_),M(xy,Lo,null),e(Lo,oJe),e(Lo,$y),e($y,rJe),e($y,mR),e(mR,tJe),e($y,aJe),e(Lo,nJe),e(Lo,ky),e(ky,sJe),e(ky,Ene),e(Ene,lJe),e(ky,iJe),e(Lo,dJe),e(Lo,yr),M(Sy,yr,null),e(yr,cJe),e(yr,Cne),e(Cne,mJe),e(yr,fJe),e(yr,ji),e(ji,gJe),e(ji,wne),e(wne,hJe),e(ji,uJe),e(ji,Ane),e(Ane,pJe),e(ji,_Je),e(yr,bJe),e(yr,A),e(A,Om),e(Om,Lne),e(Lne,vJe),e(Om,FJe),e(Om,fR),e(fR,TJe),e(Om,MJe),e(A,EJe),e(A,Vm),e(Vm,yne),e(yne,CJe),e(Vm,wJe),e(Vm,gR),e(gR,AJe),e(Vm,LJe),e(A,yJe),e(A,Xm),e(Xm,xne),e(xne,xJe),e(Xm,$Je),e(Xm,hR),e(hR,kJe),e(Xm,SJe),e(A,RJe),e(A,zm),e(zm,$ne),e($ne,PJe),e(zm,BJe),e(zm,uR),e(uR,IJe),e(zm,NJe),e(A,qJe),e(A,Wm),e(Wm,kne),e(kne,jJe),e(Wm,DJe),e(Wm,pR),e(pR,GJe),e(Wm,OJe),e(A,VJe),e(A,Qm),e(Qm,Sne),e(Sne,XJe),e(Qm,zJe),e(Qm,_R),e(_R,WJe),e(Qm,QJe),e(A,HJe),e(A,Hm),e(Hm,Rne),e(Rne,UJe),e(Hm,JJe),e(Hm,bR),e(bR,YJe),e(Hm,KJe),e(A,ZJe),e(A,Um),e(Um,Pne),e(Pne,eYe),e(Um,oYe),e(Um,vR),e(vR,rYe),e(Um,tYe),e(A,aYe),e(A,Jm),e(Jm,Bne),e(Bne,nYe),e(Jm,sYe),e(Jm,FR),e(FR,lYe),e(Jm,iYe),e(A,dYe),e(A,Ym),e(Ym,Ine),e(Ine,cYe),e(Ym,mYe),e(Ym,TR),e(TR,fYe),e(Ym,gYe),e(A,hYe),e(A,Km),e(Km,Nne),e(Nne,uYe),e(Km,pYe),e(Km,MR),e(MR,_Ye),e(Km,bYe),e(A,vYe),e(A,Zm),e(Zm,qne),e(qne,FYe),e(Zm,TYe),e(Zm,ER),e(ER,MYe),e(Zm,EYe),e(A,CYe),e(A,ef),e(ef,jne),e(jne,wYe),e(ef,AYe),e(ef,CR),e(CR,LYe),e(ef,yYe),e(A,xYe),e(A,of),e(of,Dne),e(Dne,$Ye),e(of,kYe),e(of,wR),e(wR,SYe),e(of,RYe),e(A,PYe),e(A,rf),e(rf,Gne),e(Gne,BYe),e(rf,IYe),e(rf,AR),e(AR,NYe),e(rf,qYe),e(A,jYe),e(A,tf),e(tf,One),e(One,DYe),e(tf,GYe),e(tf,LR),e(LR,OYe),e(tf,VYe),e(A,XYe),e(A,af),e(af,Vne),e(Vne,zYe),e(af,WYe),e(af,yR),e(yR,QYe),e(af,HYe),e(A,UYe),e(A,nf),e(nf,Xne),e(Xne,JYe),e(nf,YYe),e(nf,xR),e(xR,KYe),e(nf,ZYe),e(A,eKe),e(A,sf),e(sf,zne),e(zne,oKe),e(sf,rKe),e(sf,$R),e($R,tKe),e(sf,aKe),e(A,nKe),e(A,lf),e(lf,Wne),e(Wne,sKe),e(lf,lKe),e(lf,kR),e(kR,iKe),e(lf,dKe),e(A,cKe),e(A,df),e(df,Qne),e(Qne,mKe),e(df,fKe),e(df,SR),e(SR,gKe),e(df,hKe),e(A,uKe),e(A,cf),e(cf,Hne),e(Hne,pKe),e(cf,_Ke),e(cf,RR),e(RR,bKe),e(cf,vKe),e(A,FKe),e(A,mf),e(mf,Une),e(Une,TKe),e(mf,MKe),e(mf,PR),e(PR,EKe),e(mf,CKe),e(A,wKe),e(A,ff),e(ff,Jne),e(Jne,AKe),e(ff,LKe),e(ff,BR),e(BR,yKe),e(ff,xKe),e(A,$Ke),e(A,gf),e(gf,Yne),e(Yne,kKe),e(gf,SKe),e(gf,IR),e(IR,RKe),e(gf,PKe),e(A,BKe),e(A,hf),e(hf,Kne),e(Kne,IKe),e(hf,NKe),e(hf,NR),e(NR,qKe),e(hf,jKe),e(A,DKe),e(A,uf),e(uf,Zne),e(Zne,GKe),e(uf,OKe),e(uf,qR),e(qR,VKe),e(uf,XKe),e(A,zKe),e(A,pf),e(pf,ese),e(ese,WKe),e(pf,QKe),e(pf,jR),e(jR,HKe),e(pf,UKe),e(A,JKe),e(A,_f),e(_f,ose),e(ose,YKe),e(_f,KKe),e(_f,DR),e(DR,ZKe),e(_f,eZe),e(A,oZe),e(A,bf),e(bf,rse),e(rse,rZe),e(bf,tZe),e(bf,GR),e(GR,aZe),e(bf,nZe),e(A,sZe),e(A,vf),e(vf,tse),e(tse,lZe),e(vf,iZe),e(vf,OR),e(OR,dZe),e(vf,cZe),e(A,mZe),e(A,Ff),e(Ff,ase),e(ase,fZe),e(Ff,gZe),e(Ff,VR),e(VR,hZe),e(Ff,uZe),e(A,pZe),e(A,Tf),e(Tf,nse),e(nse,_Ze),e(Tf,bZe),e(Tf,XR),e(XR,vZe),e(Tf,FZe),e(A,TZe),e(A,Mf),e(Mf,sse),e(sse,MZe),e(Mf,EZe),e(Mf,zR),e(zR,CZe),e(Mf,wZe),e(A,AZe),e(A,Ef),e(Ef,lse),e(lse,LZe),e(Ef,yZe),e(Ef,WR),e(WR,xZe),e(Ef,$Ze),e(A,kZe),e(A,Cf),e(Cf,ise),e(ise,SZe),e(Cf,RZe),e(Cf,QR),e(QR,PZe),e(Cf,BZe),e(A,IZe),e(A,wf),e(wf,dse),e(dse,NZe),e(wf,qZe),e(wf,HR),e(HR,jZe),e(wf,DZe),e(A,GZe),e(A,Af),e(Af,cse),e(cse,OZe),e(Af,VZe),e(Af,UR),e(UR,XZe),e(Af,zZe),e(A,WZe),e(A,Lf),e(Lf,mse),e(mse,QZe),e(Lf,HZe),e(Lf,JR),e(JR,UZe),e(Lf,JZe),e(A,YZe),e(A,yf),e(yf,fse),e(fse,KZe),e(yf,ZZe),e(yf,YR),e(YR,eeo),e(yf,oeo),e(A,reo),e(A,xf),e(xf,gse),e(gse,teo),e(xf,aeo),e(xf,KR),e(KR,neo),e(xf,seo),e(A,leo),e(A,$f),e($f,hse),e(hse,ieo),e($f,deo),e($f,ZR),e(ZR,ceo),e($f,meo),e(A,feo),e(A,kf),e(kf,use),e(use,geo),e(kf,heo),e(kf,eP),e(eP,ueo),e(kf,peo),e(A,_eo),e(A,Sf),e(Sf,pse),e(pse,beo),e(Sf,veo),e(Sf,oP),e(oP,Feo),e(Sf,Teo),e(A,Meo),e(A,Rf),e(Rf,_se),e(_se,Eeo),e(Rf,Ceo),e(Rf,rP),e(rP,weo),e(Rf,Aeo),e(A,Leo),e(A,Pf),e(Pf,bse),e(bse,yeo),e(Pf,xeo),e(Pf,tP),e(tP,$eo),e(Pf,keo),e(A,Seo),e(A,Bf),e(Bf,vse),e(vse,Reo),e(Bf,Peo),e(Bf,aP),e(aP,Beo),e(Bf,Ieo),e(A,Neo),e(A,If),e(If,Fse),e(Fse,qeo),e(If,jeo),e(If,nP),e(nP,Deo),e(If,Geo),e(A,Oeo),e(A,Nf),e(Nf,Tse),e(Tse,Veo),e(Nf,Xeo),e(Nf,sP),e(sP,zeo),e(Nf,Weo),e(A,Qeo),e(A,qf),e(qf,Mse),e(Mse,Heo),e(qf,Ueo),e(qf,lP),e(lP,Jeo),e(qf,Yeo),e(A,Keo),e(A,jf),e(jf,Ese),e(Ese,Zeo),e(jf,eoo),e(jf,iP),e(iP,ooo),e(jf,roo),e(A,too),e(A,Df),e(Df,Cse),e(Cse,aoo),e(Df,noo),e(Df,dP),e(dP,soo),e(Df,loo),e(A,ioo),e(A,Gf),e(Gf,wse),e(wse,doo),e(Gf,coo),e(Gf,cP),e(cP,moo),e(Gf,foo),e(A,goo),e(A,Of),e(Of,Ase),e(Ase,hoo),e(Of,uoo),e(Of,mP),e(mP,poo),e(Of,_oo),e(A,boo),e(A,Vf),e(Vf,Lse),e(Lse,voo),e(Vf,Foo),e(Vf,fP),e(fP,Too),e(Vf,Moo),e(A,Eoo),e(A,Xf),e(Xf,yse),e(yse,Coo),e(Xf,woo),e(Xf,gP),e(gP,Aoo),e(Xf,Loo),e(A,yoo),e(A,zf),e(zf,xse),e(xse,xoo),e(zf,$oo),e(zf,hP),e(hP,koo),e(zf,Soo),e(A,Roo),e(A,Wf),e(Wf,$se),e($se,Poo),e(Wf,Boo),e(Wf,uP),e(uP,Ioo),e(Wf,Noo),e(A,qoo),e(A,Qf),e(Qf,kse),e(kse,joo),e(Qf,Doo),e(Qf,pP),e(pP,Goo),e(Qf,Ooo),e(A,Voo),e(A,Hf),e(Hf,Sse),e(Sse,Xoo),e(Hf,zoo),e(Hf,_P),e(_P,Woo),e(Hf,Qoo),e(A,Hoo),e(A,Uf),e(Uf,Rse),e(Rse,Uoo),e(Uf,Joo),e(Uf,bP),e(bP,Yoo),e(Uf,Koo),e(A,Zoo),e(A,Jf),e(Jf,Pse),e(Pse,ero),e(Jf,oro),e(Jf,vP),e(vP,rro),e(Jf,tro),e(A,aro),e(A,Yf),e(Yf,Bse),e(Bse,nro),e(Yf,sro),e(Yf,FP),e(FP,lro),e(Yf,iro),e(A,dro),e(A,Kf),e(Kf,Ise),e(Ise,cro),e(Kf,mro),e(Kf,TP),e(TP,fro),e(Kf,gro),e(A,hro),e(A,Zf),e(Zf,Nse),e(Nse,uro),e(Zf,pro),e(Zf,MP),e(MP,_ro),e(Zf,bro),e(A,vro),e(A,eg),e(eg,qse),e(qse,Fro),e(eg,Tro),e(eg,EP),e(EP,Mro),e(eg,Ero),e(A,Cro),e(A,og),e(og,jse),e(jse,wro),e(og,Aro),e(og,CP),e(CP,Lro),e(og,yro),e(A,xro),e(A,rg),e(rg,Dse),e(Dse,$ro),e(rg,kro),e(rg,wP),e(wP,Sro),e(rg,Rro),e(A,Pro),e(A,tg),e(tg,Gse),e(Gse,Bro),e(tg,Iro),e(tg,AP),e(AP,Nro),e(tg,qro),e(A,jro),e(A,ag),e(ag,Ose),e(Ose,Dro),e(ag,Gro),e(ag,LP),e(LP,Oro),e(ag,Vro),e(A,Xro),e(A,ng),e(ng,Vse),e(Vse,zro),e(ng,Wro),e(ng,yP),e(yP,Qro),e(ng,Hro),e(A,Uro),e(A,sg),e(sg,Xse),e(Xse,Jro),e(sg,Yro),e(sg,xP),e(xP,Kro),e(sg,Zro),e(A,eto),e(A,lg),e(lg,zse),e(zse,oto),e(lg,rto),e(lg,$P),e($P,tto),e(lg,ato),e(A,nto),e(A,ig),e(ig,Wse),e(Wse,sto),e(ig,lto),e(ig,kP),e(kP,ito),e(ig,dto),e(A,cto),e(A,dg),e(dg,Qse),e(Qse,mto),e(dg,fto),e(dg,SP),e(SP,gto),e(dg,hto),e(A,uto),e(A,cg),e(cg,Hse),e(Hse,pto),e(cg,_to),e(cg,RP),e(RP,bto),e(cg,vto),e(A,Fto),e(A,mg),e(mg,Use),e(Use,Tto),e(mg,Mto),e(mg,PP),e(PP,Eto),e(mg,Cto),e(A,wto),e(A,fg),e(fg,Jse),e(Jse,Ato),e(fg,Lto),e(fg,BP),e(BP,yto),e(fg,xto),e(A,$to),e(A,gg),e(gg,Yse),e(Yse,kto),e(gg,Sto),e(gg,IP),e(IP,Rto),e(gg,Pto),e(A,Bto),e(A,hg),e(hg,Kse),e(Kse,Ito),e(hg,Nto),e(hg,NP),e(NP,qto),e(hg,jto),e(A,Dto),e(A,ug),e(ug,Zse),e(Zse,Gto),e(ug,Oto),e(ug,qP),e(qP,Vto),e(ug,Xto),e(A,zto),e(A,pg),e(pg,ele),e(ele,Wto),e(pg,Qto),e(pg,jP),e(jP,Hto),e(pg,Uto),e(A,Jto),e(A,_g),e(_g,ole),e(ole,Yto),e(_g,Kto),e(_g,DP),e(DP,Zto),e(_g,eao),e(A,oao),e(A,bg),e(bg,rle),e(rle,rao),e(bg,tao),e(bg,GP),e(GP,aao),e(bg,nao),e(A,sao),e(A,vg),e(vg,tle),e(tle,lao),e(vg,iao),e(vg,OP),e(OP,dao),e(vg,cao),e(A,mao),e(A,Fg),e(Fg,ale),e(ale,fao),e(Fg,gao),e(Fg,VP),e(VP,hao),e(Fg,uao),e(A,pao),e(A,Tg),e(Tg,nle),e(nle,_ao),e(Tg,bao),e(Tg,XP),e(XP,vao),e(Tg,Fao),e(A,Tao),e(A,Mg),e(Mg,sle),e(sle,Mao),e(Mg,Eao),e(Mg,zP),e(zP,Cao),e(Mg,wao),e(A,Aao),e(A,Eg),e(Eg,lle),e(lle,Lao),e(Eg,yao),e(Eg,WP),e(WP,xao),e(Eg,$ao),e(A,kao),e(A,Cg),e(Cg,ile),e(ile,Sao),e(Cg,Rao),e(Cg,QP),e(QP,Pao),e(Cg,Bao),e(A,Iao),e(A,wg),e(wg,dle),e(dle,Nao),e(wg,qao),e(wg,HP),e(HP,jao),e(wg,Dao),e(A,Gao),e(A,Ag),e(Ag,cle),e(cle,Oao),e(Ag,Vao),e(Ag,UP),e(UP,Xao),e(Ag,zao),e(A,Wao),e(A,Lg),e(Lg,mle),e(mle,Qao),e(Lg,Hao),e(Lg,JP),e(JP,Uao),e(Lg,Jao),e(A,Yao),e(A,yg),e(yg,fle),e(fle,Kao),e(yg,Zao),e(yg,YP),e(YP,eno),e(yg,ono),e(A,rno),e(A,xg),e(xg,gle),e(gle,tno),e(xg,ano),e(xg,KP),e(KP,nno),e(xg,sno),e(A,lno),e(A,$g),e($g,hle),e(hle,ino),e($g,dno),e($g,ZP),e(ZP,cno),e($g,mno),e(A,fno),e(A,kg),e(kg,ule),e(ule,gno),e(kg,hno),e(kg,eB),e(eB,uno),e(kg,pno),e(A,_no),e(A,Sg),e(Sg,ple),e(ple,bno),e(Sg,vno),e(Sg,oB),e(oB,Fno),e(Sg,Tno),e(A,Mno),e(A,Rg),e(Rg,_le),e(_le,Eno),e(Rg,Cno),e(Rg,rB),e(rB,wno),e(Rg,Ano),e(A,Lno),e(A,Pg),e(Pg,ble),e(ble,yno),e(Pg,xno),e(Pg,tB),e(tB,$no),e(Pg,kno),e(A,Sno),e(A,Bg),e(Bg,vle),e(vle,Rno),e(Bg,Pno),e(Bg,aB),e(aB,Bno),e(Bg,Ino),e(A,Nno),e(A,Ig),e(Ig,Fle),e(Fle,qno),e(Ig,jno),e(Ig,nB),e(nB,Dno),e(Ig,Gno),e(A,Ono),e(A,Ng),e(Ng,Tle),e(Tle,Vno),e(Ng,Xno),e(Ng,sB),e(sB,zno),e(Ng,Wno),e(A,Qno),e(A,qg),e(qg,Mle),e(Mle,Hno),e(qg,Uno),e(qg,lB),e(lB,Jno),e(qg,Yno),e(A,Kno),e(A,jg),e(jg,Ele),e(Ele,Zno),e(jg,eso),e(jg,iB),e(iB,oso),e(jg,rso),e(A,tso),e(A,Dg),e(Dg,Cle),e(Cle,aso),e(Dg,nso),e(Dg,dB),e(dB,sso),e(Dg,lso),e(A,iso),e(A,Gg),e(Gg,wle),e(wle,dso),e(Gg,cso),e(Gg,cB),e(cB,mso),e(Gg,fso),e(A,gso),e(A,Og),e(Og,Ale),e(Ale,hso),e(Og,uso),e(Og,mB),e(mB,pso),e(Og,_so),e(A,bso),e(A,Vg),e(Vg,Lle),e(Lle,vso),e(Vg,Fso),e(Vg,fB),e(fB,Tso),e(Vg,Mso),e(A,Eso),e(A,Xg),e(Xg,yle),e(yle,Cso),e(Xg,wso),e(Xg,gB),e(gB,Aso),e(Xg,Lso),e(A,yso),e(A,zg),e(zg,xle),e(xle,xso),e(zg,$so),e(zg,hB),e(hB,kso),e(zg,Sso),e(A,Rso),e(A,Wg),e(Wg,$le),e($le,Pso),e(Wg,Bso),e(Wg,uB),e(uB,Iso),e(Wg,Nso),e(A,qso),e(A,Qg),e(Qg,kle),e(kle,jso),e(Qg,Dso),e(Qg,pB),e(pB,Gso),e(Qg,Oso),e(A,Vso),e(A,Hg),e(Hg,Sle),e(Sle,Xso),e(Hg,zso),e(Hg,_B),e(_B,Wso),e(Hg,Qso),e(A,Hso),e(A,Ug),e(Ug,Rle),e(Rle,Uso),e(Ug,Jso),e(Ug,bB),e(bB,Yso),e(Ug,Kso),e(A,Zso),e(A,Jg),e(Jg,Ple),e(Ple,elo),e(Jg,olo),e(Jg,vB),e(vB,rlo),e(Jg,tlo),e(A,alo),e(A,Yg),e(Yg,Ble),e(Ble,nlo),e(Yg,slo),e(Yg,FB),e(FB,llo),e(Yg,ilo),e(A,dlo),e(A,Kg),e(Kg,Ile),e(Ile,clo),e(Kg,mlo),e(Kg,TB),e(TB,flo),e(Kg,glo),e(A,hlo),e(A,Zg),e(Zg,Nle),e(Nle,ulo),e(Zg,plo),e(Zg,MB),e(MB,_lo),e(Zg,blo),e(A,vlo),e(A,eh),e(eh,qle),e(qle,Flo),e(eh,Tlo),e(eh,EB),e(EB,Mlo),e(eh,Elo),e(yr,Clo),M(oh,yr,null),e(Lo,wlo),e(Lo,rh),M(Ry,rh,null),e(rh,Alo),e(rh,jle),e(jle,Llo),b(m,Ize,_),b(m,Di,_),e(Di,th),e(th,Dle),M(Py,Dle,null),e(Di,ylo),e(Di,Gle),e(Gle,xlo),b(m,Nze,_),b(m,yo,_),M(By,yo,null),e(yo,$lo),e(yo,Iy),e(Iy,klo),e(Iy,CB),e(CB,Slo),e(Iy,Rlo),e(yo,Plo),e(yo,Ny),e(Ny,Blo),e(Ny,Ole),e(Ole,Ilo),e(Ny,Nlo),e(yo,qlo),e(yo,xr),M(qy,xr,null),e(xr,jlo),e(xr,Vle),e(Vle,Dlo),e(xr,Glo),e(xr,Pa),e(Pa,Olo),e(Pa,Xle),e(Xle,Vlo),e(Pa,Xlo),e(Pa,zle),e(zle,zlo),e(Pa,Wlo),e(Pa,Wle),e(Wle,Qlo),e(Pa,Hlo),e(xr,Ulo),e(xr,k),e(k,Dn),e(Dn,Qle),e(Qle,Jlo),e(Dn,Ylo),e(Dn,wB),e(wB,Klo),e(Dn,Zlo),e(Dn,AB),e(AB,eio),e(Dn,oio),e(k,rio),e(k,Gn),e(Gn,Hle),e(Hle,tio),e(Gn,aio),e(Gn,LB),e(LB,nio),e(Gn,sio),e(Gn,yB),e(yB,lio),e(Gn,iio),e(k,dio),e(k,On),e(On,Ule),e(Ule,cio),e(On,mio),e(On,xB),e(xB,fio),e(On,gio),e(On,$B),e($B,hio),e(On,uio),e(k,pio),e(k,ah),e(ah,Jle),e(Jle,_io),e(ah,bio),e(ah,kB),e(kB,vio),e(ah,Fio),e(k,Tio),e(k,Vn),e(Vn,Yle),e(Yle,Mio),e(Vn,Eio),e(Vn,SB),e(SB,Cio),e(Vn,wio),e(Vn,RB),e(RB,Aio),e(Vn,Lio),e(k,yio),e(k,nh),e(nh,Kle),e(Kle,xio),e(nh,$io),e(nh,PB),e(PB,kio),e(nh,Sio),e(k,Rio),e(k,sh),e(sh,Zle),e(Zle,Pio),e(sh,Bio),e(sh,BB),e(BB,Iio),e(sh,Nio),e(k,qio),e(k,lh),e(lh,eie),e(eie,jio),e(lh,Dio),e(lh,IB),e(IB,Gio),e(lh,Oio),e(k,Vio),e(k,Xn),e(Xn,oie),e(oie,Xio),e(Xn,zio),e(Xn,NB),e(NB,Wio),e(Xn,Qio),e(Xn,qB),e(qB,Hio),e(Xn,Uio),e(k,Jio),e(k,zn),e(zn,rie),e(rie,Yio),e(zn,Kio),e(zn,jB),e(jB,Zio),e(zn,edo),e(zn,DB),e(DB,odo),e(zn,rdo),e(k,tdo),e(k,Wn),e(Wn,tie),e(tie,ado),e(Wn,ndo),e(Wn,GB),e(GB,sdo),e(Wn,ldo),e(Wn,OB),e(OB,ido),e(Wn,ddo),e(k,cdo),e(k,ih),e(ih,aie),e(aie,mdo),e(ih,fdo),e(ih,VB),e(VB,gdo),e(ih,hdo),e(k,udo),e(k,dh),e(dh,nie),e(nie,pdo),e(dh,_do),e(dh,XB),e(XB,bdo),e(dh,vdo),e(k,Fdo),e(k,ch),e(ch,sie),e(sie,Tdo),e(ch,Mdo),e(ch,zB),e(zB,Edo),e(ch,Cdo),e(k,wdo),e(k,Qn),e(Qn,lie),e(lie,Ado),e(Qn,Ldo),e(Qn,WB),e(WB,ydo),e(Qn,xdo),e(Qn,QB),e(QB,$do),e(Qn,kdo),e(k,Sdo),e(k,mh),e(mh,iie),e(iie,Rdo),e(mh,Pdo),e(mh,HB),e(HB,Bdo),e(mh,Ido),e(k,Ndo),e(k,Hn),e(Hn,die),e(die,qdo),e(Hn,jdo),e(Hn,UB),e(UB,Ddo),e(Hn,Gdo),e(Hn,JB),e(JB,Odo),e(Hn,Vdo),e(k,Xdo),e(k,Un),e(Un,cie),e(cie,zdo),e(Un,Wdo),e(Un,YB),e(YB,Qdo),e(Un,Hdo),e(Un,KB),e(KB,Udo),e(Un,Jdo),e(k,Ydo),e(k,Jn),e(Jn,mie),e(mie,Kdo),e(Jn,Zdo),e(Jn,ZB),e(ZB,eco),e(Jn,oco),e(Jn,eI),e(eI,rco),e(Jn,tco),e(k,aco),e(k,Yn),e(Yn,fie),e(fie,nco),e(Yn,sco),e(Yn,oI),e(oI,lco),e(Yn,ico),e(Yn,rI),e(rI,dco),e(Yn,cco),e(k,mco),e(k,fh),e(fh,gie),e(gie,fco),e(fh,gco),e(fh,tI),e(tI,hco),e(fh,uco),e(k,pco),e(k,Kn),e(Kn,hie),e(hie,_co),e(Kn,bco),e(Kn,aI),e(aI,vco),e(Kn,Fco),e(Kn,nI),e(nI,Tco),e(Kn,Mco),e(k,Eco),e(k,Zn),e(Zn,uie),e(uie,Cco),e(Zn,wco),e(Zn,sI),e(sI,Aco),e(Zn,Lco),e(Zn,lI),e(lI,yco),e(Zn,xco),e(k,$co),e(k,es),e(es,pie),e(pie,kco),e(es,Sco),e(es,iI),e(iI,Rco),e(es,Pco),e(es,dI),e(dI,Bco),e(es,Ico),e(k,Nco),e(k,os),e(os,_ie),e(_ie,qco),e(os,jco),e(os,cI),e(cI,Dco),e(os,Gco),e(os,mI),e(mI,Oco),e(os,Vco),e(k,Xco),e(k,rs),e(rs,bie),e(bie,zco),e(rs,Wco),e(rs,fI),e(fI,Qco),e(rs,Hco),e(rs,gI),e(gI,Uco),e(rs,Jco),e(k,Yco),e(k,ts),e(ts,vie),e(vie,Kco),e(ts,Zco),e(ts,hI),e(hI,emo),e(ts,omo),e(ts,uI),e(uI,rmo),e(ts,tmo),e(k,amo),e(k,gh),e(gh,Fie),e(Fie,nmo),e(gh,smo),e(gh,pI),e(pI,lmo),e(gh,imo),e(k,dmo),e(k,as),e(as,Tie),e(Tie,cmo),e(as,mmo),e(as,_I),e(_I,fmo),e(as,gmo),e(as,bI),e(bI,hmo),e(as,umo),e(k,pmo),e(k,hh),e(hh,Mie),e(Mie,_mo),e(hh,bmo),e(hh,vI),e(vI,vmo),e(hh,Fmo),e(k,Tmo),e(k,ns),e(ns,Eie),e(Eie,Mmo),e(ns,Emo),e(ns,FI),e(FI,Cmo),e(ns,wmo),e(ns,TI),e(TI,Amo),e(ns,Lmo),e(k,ymo),e(k,ss),e(ss,Cie),e(Cie,xmo),e(ss,$mo),e(ss,MI),e(MI,kmo),e(ss,Smo),e(ss,EI),e(EI,Rmo),e(ss,Pmo),e(k,Bmo),e(k,ls),e(ls,wie),e(wie,Imo),e(ls,Nmo),e(ls,CI),e(CI,qmo),e(ls,jmo),e(ls,wI),e(wI,Dmo),e(ls,Gmo),e(k,Omo),e(k,uh),e(uh,Aie),e(Aie,Vmo),e(uh,Xmo),e(uh,AI),e(AI,zmo),e(uh,Wmo),e(k,Qmo),e(k,is),e(is,Lie),e(Lie,Hmo),e(is,Umo),e(is,LI),e(LI,Jmo),e(is,Ymo),e(is,yI),e(yI,Kmo),e(is,Zmo),e(k,efo),e(k,ds),e(ds,yie),e(yie,ofo),e(ds,rfo),e(ds,xI),e(xI,tfo),e(ds,afo),e(ds,$I),e($I,nfo),e(ds,sfo),e(k,lfo),e(k,cs),e(cs,xie),e(xie,ifo),e(cs,dfo),e(cs,kI),e(kI,cfo),e(cs,mfo),e(cs,SI),e(SI,ffo),e(cs,gfo),e(k,hfo),e(k,ph),e(ph,$ie),e($ie,ufo),e(ph,pfo),e(ph,RI),e(RI,_fo),e(ph,bfo),e(k,vfo),e(k,ms),e(ms,kie),e(kie,Ffo),e(ms,Tfo),e(ms,PI),e(PI,Mfo),e(ms,Efo),e(ms,BI),e(BI,Cfo),e(ms,wfo),e(k,Afo),e(k,fs),e(fs,Sie),e(Sie,Lfo),e(fs,yfo),e(fs,II),e(II,xfo),e(fs,$fo),e(fs,NI),e(NI,kfo),e(fs,Sfo),e(k,Rfo),e(k,gs),e(gs,Rie),e(Rie,Pfo),e(gs,Bfo),e(gs,qI),e(qI,Ifo),e(gs,Nfo),e(gs,jI),e(jI,qfo),e(gs,jfo),e(k,Dfo),e(k,hs),e(hs,Pie),e(Pie,Gfo),e(hs,Ofo),e(hs,DI),e(DI,Vfo),e(hs,Xfo),e(hs,GI),e(GI,zfo),e(hs,Wfo),e(k,Qfo),e(k,us),e(us,Bie),e(Bie,Hfo),e(us,Ufo),e(us,OI),e(OI,Jfo),e(us,Yfo),e(us,VI),e(VI,Kfo),e(us,Zfo),e(k,ego),e(k,ps),e(ps,Iie),e(Iie,ogo),e(ps,rgo),e(ps,XI),e(XI,tgo),e(ps,ago),e(ps,zI),e(zI,ngo),e(ps,sgo),e(k,lgo),e(k,_s),e(_s,Nie),e(Nie,igo),e(_s,dgo),e(_s,WI),e(WI,cgo),e(_s,mgo),e(_s,QI),e(QI,fgo),e(_s,ggo),e(k,hgo),e(k,bs),e(bs,qie),e(qie,ugo),e(bs,pgo),e(bs,HI),e(HI,_go),e(bs,bgo),e(bs,UI),e(UI,vgo),e(bs,Fgo),e(k,Tgo),e(k,_h),e(_h,jie),e(jie,Mgo),e(_h,Ego),e(_h,JI),e(JI,Cgo),e(_h,wgo),e(k,Ago),e(k,vs),e(vs,Die),e(Die,Lgo),e(vs,ygo),e(vs,YI),e(YI,xgo),e(vs,$go),e(vs,KI),e(KI,kgo),e(vs,Sgo),e(k,Rgo),e(k,bh),e(bh,Gie),e(Gie,Pgo),e(bh,Bgo),e(bh,ZI),e(ZI,Igo),e(bh,Ngo),e(k,qgo),e(k,vh),e(vh,Oie),e(Oie,jgo),e(vh,Dgo),e(vh,eN),e(eN,Ggo),e(vh,Ogo),e(k,Vgo),e(k,Fs),e(Fs,Vie),e(Vie,Xgo),e(Fs,zgo),e(Fs,oN),e(oN,Wgo),e(Fs,Qgo),e(Fs,rN),e(rN,Hgo),e(Fs,Ugo),e(k,Jgo),e(k,Ts),e(Ts,Xie),e(Xie,Ygo),e(Ts,Kgo),e(Ts,tN),e(tN,Zgo),e(Ts,eho),e(Ts,aN),e(aN,oho),e(Ts,rho),e(k,tho),e(k,Ms),e(Ms,zie),e(zie,aho),e(Ms,nho),e(Ms,nN),e(nN,sho),e(Ms,lho),e(Ms,sN),e(sN,iho),e(Ms,dho),e(k,cho),e(k,Fh),e(Fh,Wie),e(Wie,mho),e(Fh,fho),e(Fh,lN),e(lN,gho),e(Fh,hho),e(k,uho),e(k,Es),e(Es,Qie),e(Qie,pho),e(Es,_ho),e(Es,iN),e(iN,bho),e(Es,vho),e(Es,dN),e(dN,Fho),e(Es,Tho),e(k,Mho),e(k,Cs),e(Cs,Hie),e(Hie,Eho),e(Cs,Cho),e(Cs,cN),e(cN,who),e(Cs,Aho),e(Cs,mN),e(mN,Lho),e(Cs,yho),e(k,xho),e(k,ws),e(ws,Uie),e(Uie,$ho),e(ws,kho),e(ws,fN),e(fN,Sho),e(ws,Rho),e(ws,gN),e(gN,Pho),e(ws,Bho),e(k,Iho),e(k,As),e(As,Jie),e(Jie,Nho),e(As,qho),e(As,hN),e(hN,jho),e(As,Dho),e(As,uN),e(uN,Gho),e(As,Oho),e(k,Vho),e(k,Ls),e(Ls,Yie),e(Yie,Xho),e(Ls,zho),e(Ls,pN),e(pN,Who),e(Ls,Qho),e(Ls,_N),e(_N,Hho),e(Ls,Uho),e(k,Jho),e(k,ys),e(ys,Kie),e(Kie,Yho),e(ys,Kho),e(ys,bN),e(bN,Zho),e(ys,euo),e(ys,vN),e(vN,ouo),e(ys,ruo),e(k,tuo),e(k,xs),e(xs,Zie),e(Zie,auo),e(xs,nuo),e(xs,FN),e(FN,suo),e(xs,luo),e(xs,TN),e(TN,iuo),e(xs,duo),e(k,cuo),e(k,$s),e($s,ede),e(ede,muo),e($s,fuo),e($s,MN),e(MN,guo),e($s,huo),e($s,EN),e(EN,uuo),e($s,puo),e(k,_uo),e(k,Th),e(Th,ode),e(ode,buo),e(Th,vuo),e(Th,CN),e(CN,Fuo),e(Th,Tuo),e(k,Muo),e(k,ks),e(ks,rde),e(rde,Euo),e(ks,Cuo),e(ks,wN),e(wN,wuo),e(ks,Auo),e(ks,AN),e(AN,Luo),e(ks,yuo),e(k,xuo),e(k,Ss),e(Ss,tde),e(tde,$uo),e(Ss,kuo),e(Ss,LN),e(LN,Suo),e(Ss,Ruo),e(Ss,yN),e(yN,Puo),e(Ss,Buo),e(k,Iuo),e(k,Mh),e(Mh,ade),e(ade,Nuo),e(Mh,quo),e(Mh,xN),e(xN,juo),e(Mh,Duo),e(k,Guo),e(k,Eh),e(Eh,nde),e(nde,Ouo),e(Eh,Vuo),e(Eh,$N),e($N,Xuo),e(Eh,zuo),e(k,Wuo),e(k,Ch),e(Ch,sde),e(sde,Quo),e(Ch,Huo),e(Ch,kN),e(kN,Uuo),e(Ch,Juo),e(k,Yuo),e(k,wh),e(wh,lde),e(lde,Kuo),e(wh,Zuo),e(wh,SN),e(SN,epo),e(wh,opo),e(k,rpo),e(k,Rs),e(Rs,ide),e(ide,tpo),e(Rs,apo),e(Rs,RN),e(RN,npo),e(Rs,spo),e(Rs,PN),e(PN,lpo),e(Rs,ipo),e(k,dpo),e(k,Ah),e(Ah,dde),e(dde,cpo),e(Ah,mpo),e(Ah,BN),e(BN,fpo),e(Ah,gpo),e(k,hpo),e(k,Ps),e(Ps,cde),e(cde,upo),e(Ps,ppo),e(Ps,IN),e(IN,_po),e(Ps,bpo),e(Ps,NN),e(NN,vpo),e(Ps,Fpo),e(k,Tpo),e(k,Bs),e(Bs,mde),e(mde,Mpo),e(Bs,Epo),e(Bs,qN),e(qN,Cpo),e(Bs,wpo),e(Bs,jN),e(jN,Apo),e(Bs,Lpo),e(k,ypo),e(k,Is),e(Is,fde),e(fde,xpo),e(Is,$po),e(Is,DN),e(DN,kpo),e(Is,Spo),e(Is,GN),e(GN,Rpo),e(Is,Ppo),e(k,Bpo),e(k,Ns),e(Ns,gde),e(gde,Ipo),e(Ns,Npo),e(Ns,ON),e(ON,qpo),e(Ns,jpo),e(Ns,VN),e(VN,Dpo),e(Ns,Gpo),e(k,Opo),e(k,qs),e(qs,hde),e(hde,Vpo),e(qs,Xpo),e(qs,XN),e(XN,zpo),e(qs,Wpo),e(qs,zN),e(zN,Qpo),e(qs,Hpo),e(k,Upo),e(k,js),e(js,ude),e(ude,Jpo),e(js,Ypo),e(js,WN),e(WN,Kpo),e(js,Zpo),e(js,QN),e(QN,e_o),e(js,o_o),e(k,r_o),e(k,Lh),e(Lh,pde),e(pde,t_o),e(Lh,a_o),e(Lh,HN),e(HN,n_o),e(Lh,s_o),e(k,l_o),e(k,yh),e(yh,_de),e(_de,i_o),e(yh,d_o),e(yh,UN),e(UN,c_o),e(yh,m_o),e(k,f_o),e(k,Ds),e(Ds,bde),e(bde,g_o),e(Ds,h_o),e(Ds,JN),e(JN,u_o),e(Ds,p_o),e(Ds,YN),e(YN,__o),e(Ds,b_o),e(k,v_o),e(k,Gs),e(Gs,vde),e(vde,F_o),e(Gs,T_o),e(Gs,KN),e(KN,M_o),e(Gs,E_o),e(Gs,ZN),e(ZN,C_o),e(Gs,w_o),e(k,A_o),e(k,Os),e(Os,Fde),e(Fde,L_o),e(Os,y_o),e(Os,eq),e(eq,x_o),e(Os,$_o),e(Os,oq),e(oq,k_o),e(Os,S_o),e(k,R_o),e(k,xh),e(xh,Tde),e(Tde,P_o),e(xh,B_o),e(xh,rq),e(rq,I_o),e(xh,N_o),e(k,q_o),e(k,$h),e($h,Mde),e(Mde,j_o),e($h,D_o),e($h,tq),e(tq,G_o),e($h,O_o),e(k,V_o),e(k,kh),e(kh,Ede),e(Ede,X_o),e(kh,z_o),e(kh,aq),e(aq,W_o),e(kh,Q_o),e(k,H_o),e(k,Vs),e(Vs,Cde),e(Cde,U_o),e(Vs,J_o),e(Vs,nq),e(nq,Y_o),e(Vs,K_o),e(Vs,sq),e(sq,Z_o),e(Vs,e2o),e(k,o2o),e(k,Xs),e(Xs,wde),e(wde,r2o),e(Xs,t2o),e(Xs,lq),e(lq,a2o),e(Xs,n2o),e(Xs,iq),e(iq,s2o),e(Xs,l2o),e(k,i2o),e(k,Sh),e(Sh,Ade),e(Ade,d2o),e(Sh,c2o),e(Sh,dq),e(dq,m2o),e(Sh,f2o),e(k,g2o),e(k,Rh),e(Rh,Lde),e(Lde,h2o),e(Rh,u2o),e(Rh,cq),e(cq,p2o),e(Rh,_2o),e(k,b2o),e(k,Ph),e(Ph,yde),e(yde,v2o),e(Ph,F2o),e(Ph,mq),e(mq,T2o),e(Ph,M2o),e(k,E2o),e(k,zs),e(zs,xde),e(xde,C2o),e(zs,w2o),e(zs,fq),e(fq,A2o),e(zs,L2o),e(zs,gq),e(gq,y2o),e(zs,x2o),e(k,$2o),e(k,Bh),e(Bh,$de),e($de,k2o),e(Bh,S2o),e(Bh,hq),e(hq,R2o),e(Bh,P2o),e(k,B2o),e(k,Ih),e(Ih,kde),e(kde,I2o),e(Ih,N2o),e(Ih,uq),e(uq,q2o),e(Ih,j2o),e(k,D2o),e(k,Ws),e(Ws,Sde),e(Sde,G2o),e(Ws,O2o),e(Ws,pq),e(pq,V2o),e(Ws,X2o),e(Ws,_q),e(_q,z2o),e(Ws,W2o),e(k,Q2o),e(k,Qs),e(Qs,Rde),e(Rde,H2o),e(Qs,U2o),e(Qs,bq),e(bq,J2o),e(Qs,Y2o),e(Qs,vq),e(vq,K2o),e(Qs,Z2o),e(k,ebo),e(k,Hs),e(Hs,Pde),e(Pde,obo),e(Hs,rbo),e(Hs,Fq),e(Fq,tbo),e(Hs,abo),e(Hs,Tq),e(Tq,nbo),e(Hs,sbo),e(k,lbo),e(k,Us),e(Us,Bde),e(Bde,ibo),e(Us,dbo),e(Us,Mq),e(Mq,cbo),e(Us,mbo),e(Us,Eq),e(Eq,fbo),e(Us,gbo),e(xr,hbo),M(Nh,xr,null),e(yo,ubo),e(yo,qh),M(jy,qh,null),e(qh,pbo),e(qh,Ide),e(Ide,_bo),b(m,qze,_),b(m,Gi,_),e(Gi,jh),e(jh,Nde),M(Dy,Nde,null),e(Gi,bbo),e(Gi,qde),e(qde,vbo),b(m,jze,_),b(m,xo,_),M(Gy,xo,null),e(xo,Fbo),e(xo,Oy),e(Oy,Tbo),e(Oy,Cq),e(Cq,Mbo),e(Oy,Ebo),e(xo,Cbo),e(xo,Vy),e(Vy,wbo),e(Vy,jde),e(jde,Abo),e(Vy,Lbo),e(xo,ybo),e(xo,Ue),M(Xy,Ue,null),e(Ue,xbo),e(Ue,Dde),e(Dde,$bo),e(Ue,kbo),e(Ue,Ba),e(Ba,Sbo),e(Ba,Gde),e(Gde,Rbo),e(Ba,Pbo),e(Ba,Ode),e(Ode,Bbo),e(Ba,Ibo),e(Ba,Vde),e(Vde,Nbo),e(Ba,qbo),e(Ue,jbo),e(Ue,J),e(J,Dh),e(Dh,Xde),e(Xde,Dbo),e(Dh,Gbo),e(Dh,wq),e(wq,Obo),e(Dh,Vbo),e(J,Xbo),e(J,Gh),e(Gh,zde),e(zde,zbo),e(Gh,Wbo),e(Gh,Aq),e(Aq,Qbo),e(Gh,Hbo),e(J,Ubo),e(J,Oh),e(Oh,Wde),e(Wde,Jbo),e(Oh,Ybo),e(Oh,Lq),e(Lq,Kbo),e(Oh,Zbo),e(J,evo),e(J,Vh),e(Vh,Qde),e(Qde,ovo),e(Vh,rvo),e(Vh,yq),e(yq,tvo),e(Vh,avo),e(J,nvo),e(J,Xh),e(Xh,Hde),e(Hde,svo),e(Xh,lvo),e(Xh,xq),e(xq,ivo),e(Xh,dvo),e(J,cvo),e(J,zh),e(zh,Ude),e(Ude,mvo),e(zh,fvo),e(zh,$q),e($q,gvo),e(zh,hvo),e(J,uvo),e(J,Wh),e(Wh,Jde),e(Jde,pvo),e(Wh,_vo),e(Wh,kq),e(kq,bvo),e(Wh,vvo),e(J,Fvo),e(J,Qh),e(Qh,Yde),e(Yde,Tvo),e(Qh,Mvo),e(Qh,Sq),e(Sq,Evo),e(Qh,Cvo),e(J,wvo),e(J,Hh),e(Hh,Kde),e(Kde,Avo),e(Hh,Lvo),e(Hh,Rq),e(Rq,yvo),e(Hh,xvo),e(J,$vo),e(J,Uh),e(Uh,Zde),e(Zde,kvo),e(Uh,Svo),e(Uh,Pq),e(Pq,Rvo),e(Uh,Pvo),e(J,Bvo),e(J,Jh),e(Jh,ece),e(ece,Ivo),e(Jh,Nvo),e(Jh,Bq),e(Bq,qvo),e(Jh,jvo),e(J,Dvo),e(J,Yh),e(Yh,oce),e(oce,Gvo),e(Yh,Ovo),e(Yh,Iq),e(Iq,Vvo),e(Yh,Xvo),e(J,zvo),e(J,Kh),e(Kh,rce),e(rce,Wvo),e(Kh,Qvo),e(Kh,Nq),e(Nq,Hvo),e(Kh,Uvo),e(J,Jvo),e(J,Zh),e(Zh,tce),e(tce,Yvo),e(Zh,Kvo),e(Zh,qq),e(qq,Zvo),e(Zh,e1o),e(J,o1o),e(J,eu),e(eu,ace),e(ace,r1o),e(eu,t1o),e(eu,jq),e(jq,a1o),e(eu,n1o),e(J,s1o),e(J,ou),e(ou,nce),e(nce,l1o),e(ou,i1o),e(ou,Dq),e(Dq,d1o),e(ou,c1o),e(J,m1o),e(J,ru),e(ru,sce),e(sce,f1o),e(ru,g1o),e(ru,Gq),e(Gq,h1o),e(ru,u1o),e(J,p1o),e(J,tu),e(tu,lce),e(lce,_1o),e(tu,b1o),e(tu,Oq),e(Oq,v1o),e(tu,F1o),e(J,T1o),e(J,au),e(au,ice),e(ice,M1o),e(au,E1o),e(au,Vq),e(Vq,C1o),e(au,w1o),e(J,A1o),e(J,nu),e(nu,dce),e(dce,L1o),e(nu,y1o),e(nu,Xq),e(Xq,x1o),e(nu,$1o),e(J,k1o),e(J,su),e(su,cce),e(cce,S1o),e(su,R1o),e(su,zq),e(zq,P1o),e(su,B1o),e(J,I1o),e(J,lu),e(lu,mce),e(mce,N1o),e(lu,q1o),e(lu,Wq),e(Wq,j1o),e(lu,D1o),e(J,G1o),e(J,iu),e(iu,fce),e(fce,O1o),e(iu,V1o),e(iu,Qq),e(Qq,X1o),e(iu,z1o),e(J,W1o),e(J,du),e(du,gce),e(gce,Q1o),e(du,H1o),e(du,Hq),e(Hq,U1o),e(du,J1o),e(J,Y1o),e(J,cu),e(cu,hce),e(hce,K1o),e(cu,Z1o),e(cu,Uq),e(Uq,eFo),e(cu,oFo),e(J,rFo),e(J,mu),e(mu,uce),e(uce,tFo),e(mu,aFo),e(mu,Jq),e(Jq,nFo),e(mu,sFo),e(J,lFo),e(J,fu),e(fu,pce),e(pce,iFo),e(fu,dFo),e(fu,Yq),e(Yq,cFo),e(fu,mFo),e(J,fFo),e(J,gu),e(gu,_ce),e(_ce,gFo),e(gu,hFo),e(gu,Kq),e(Kq,uFo),e(gu,pFo),e(J,_Fo),e(J,hu),e(hu,bce),e(bce,bFo),e(hu,vFo),e(hu,Zq),e(Zq,FFo),e(hu,TFo),e(J,MFo),e(J,uu),e(uu,vce),e(vce,EFo),e(uu,CFo),e(uu,ej),e(ej,wFo),e(uu,AFo),e(J,LFo),e(J,pu),e(pu,Fce),e(Fce,yFo),e(pu,xFo),e(pu,oj),e(oj,$Fo),e(pu,kFo),e(J,SFo),e(J,_u),e(_u,Tce),e(Tce,RFo),e(_u,PFo),e(_u,rj),e(rj,BFo),e(_u,IFo),e(J,NFo),e(J,bu),e(bu,Mce),e(Mce,qFo),e(bu,jFo),e(bu,tj),e(tj,DFo),e(bu,GFo),e(J,OFo),e(J,vu),e(vu,Ece),e(Ece,VFo),e(vu,XFo),e(vu,aj),e(aj,zFo),e(vu,WFo),e(J,QFo),e(J,Fu),e(Fu,Cce),e(Cce,HFo),e(Fu,UFo),e(Fu,nj),e(nj,JFo),e(Fu,YFo),e(J,KFo),e(J,Tu),e(Tu,wce),e(wce,ZFo),e(Tu,eTo),e(Tu,sj),e(sj,oTo),e(Tu,rTo),e(Ue,tTo),M(Mu,Ue,null),e(Ue,aTo),M(Eu,Ue,null),e(xo,nTo),e(xo,Cu),M(zy,Cu,null),e(Cu,sTo),e(Cu,Ace),e(Ace,lTo),b(m,Dze,_),b(m,Oi,_),e(Oi,wu),e(wu,Lce),M(Wy,Lce,null),e(Oi,iTo),e(Oi,yce),e(yce,dTo),b(m,Gze,_),b(m,$o,_),M(Qy,$o,null),e($o,cTo),e($o,Hy),e(Hy,mTo),e(Hy,lj),e(lj,fTo),e(Hy,gTo),e($o,hTo),e($o,Uy),e(Uy,uTo),e(Uy,xce),e(xce,pTo),e(Uy,_To),e($o,bTo),e($o,Je),M(Jy,Je,null),e(Je,vTo),e(Je,$ce),e($ce,FTo),e(Je,TTo),e(Je,Vi),e(Vi,MTo),e(Vi,kce),e(kce,ETo),e(Vi,CTo),e(Vi,Sce),e(Sce,wTo),e(Vi,ATo),e(Je,LTo),e(Je,me),e(me,Au),e(Au,Rce),e(Rce,yTo),e(Au,xTo),e(Au,ij),e(ij,$To),e(Au,kTo),e(me,STo),e(me,Lu),e(Lu,Pce),e(Pce,RTo),e(Lu,PTo),e(Lu,dj),e(dj,BTo),e(Lu,ITo),e(me,NTo),e(me,yu),e(yu,Bce),e(Bce,qTo),e(yu,jTo),e(yu,cj),e(cj,DTo),e(yu,GTo),e(me,OTo),e(me,xu),e(xu,Ice),e(Ice,VTo),e(xu,XTo),e(xu,mj),e(mj,zTo),e(xu,WTo),e(me,QTo),e(me,$u),e($u,Nce),e(Nce,HTo),e($u,UTo),e($u,fj),e(fj,JTo),e($u,YTo),e(me,KTo),e(me,ku),e(ku,qce),e(qce,ZTo),e(ku,eMo),e(ku,gj),e(gj,oMo),e(ku,rMo),e(me,tMo),e(me,Su),e(Su,jce),e(jce,aMo),e(Su,nMo),e(Su,hj),e(hj,sMo),e(Su,lMo),e(me,iMo),e(me,Ru),e(Ru,Dce),e(Dce,dMo),e(Ru,cMo),e(Ru,uj),e(uj,mMo),e(Ru,fMo),e(me,gMo),e(me,Pu),e(Pu,Gce),e(Gce,hMo),e(Pu,uMo),e(Pu,pj),e(pj,pMo),e(Pu,_Mo),e(me,bMo),e(me,Bu),e(Bu,Oce),e(Oce,vMo),e(Bu,FMo),e(Bu,_j),e(_j,TMo),e(Bu,MMo),e(me,EMo),e(me,Iu),e(Iu,Vce),e(Vce,CMo),e(Iu,wMo),e(Iu,bj),e(bj,AMo),e(Iu,LMo),e(me,yMo),e(me,Nu),e(Nu,Xce),e(Xce,xMo),e(Nu,$Mo),e(Nu,vj),e(vj,kMo),e(Nu,SMo),e(me,RMo),e(me,qu),e(qu,zce),e(zce,PMo),e(qu,BMo),e(qu,Fj),e(Fj,IMo),e(qu,NMo),e(me,qMo),e(me,ju),e(ju,Wce),e(Wce,jMo),e(ju,DMo),e(ju,Tj),e(Tj,GMo),e(ju,OMo),e(me,VMo),e(me,Du),e(Du,Qce),e(Qce,XMo),e(Du,zMo),e(Du,Mj),e(Mj,WMo),e(Du,QMo),e(me,HMo),e(me,Gu),e(Gu,Hce),e(Hce,UMo),e(Gu,JMo),e(Gu,Ej),e(Ej,YMo),e(Gu,KMo),e(me,ZMo),e(me,Ou),e(Ou,Uce),e(Uce,e4o),e(Ou,o4o),e(Ou,Cj),e(Cj,r4o),e(Ou,t4o),e(me,a4o),e(me,Vu),e(Vu,Jce),e(Jce,n4o),e(Vu,s4o),e(Vu,wj),e(wj,l4o),e(Vu,i4o),e(me,d4o),e(me,Xu),e(Xu,Yce),e(Yce,c4o),e(Xu,m4o),e(Xu,Aj),e(Aj,f4o),e(Xu,g4o),e(Je,h4o),M(zu,Je,null),e(Je,u4o),M(Wu,Je,null),e($o,p4o),e($o,Qu),M(Yy,Qu,null),e(Qu,_4o),e(Qu,Kce),e(Kce,b4o),b(m,Oze,_),b(m,Xi,_),e(Xi,Hu),e(Hu,Zce),M(Ky,Zce,null),e(Xi,v4o),e(Xi,eme),e(eme,F4o),b(m,Vze,_),b(m,ko,_),M(Zy,ko,null),e(ko,T4o),e(ko,zi),e(zi,M4o),e(zi,Lj),e(Lj,E4o),e(zi,C4o),e(zi,yj),e(yj,w4o),e(zi,A4o),e(ko,L4o),e(ko,e8),e(e8,y4o),e(e8,ome),e(ome,x4o),e(e8,$4o),e(ko,k4o),e(ko,it),M(o8,it,null),e(it,S4o),e(it,rme),e(rme,R4o),e(it,P4o),e(it,Wi),e(Wi,B4o),e(Wi,tme),e(tme,I4o),e(Wi,N4o),e(Wi,xj),e(xj,q4o),e(Wi,j4o),e(it,D4o),M(Uu,it,null),e(ko,G4o),e(ko,Ye),M(r8,Ye,null),e(Ye,O4o),e(Ye,ame),e(ame,V4o),e(Ye,X4o),e(Ye,Ia),e(Ia,z4o),e(Ia,nme),e(nme,W4o),e(Ia,Q4o),e(Ia,sme),e(sme,H4o),e(Ia,U4o),e(Ia,lme),e(lme,J4o),e(Ia,Y4o),e(Ye,K4o),e(Ye,y),e(y,Ju),e(Ju,ime),e(ime,Z4o),e(Ju,eEo),e(Ju,$j),e($j,oEo),e(Ju,rEo),e(y,tEo),e(y,Yu),e(Yu,dme),e(dme,aEo),e(Yu,nEo),e(Yu,kj),e(kj,sEo),e(Yu,lEo),e(y,iEo),e(y,Ku),e(Ku,cme),e(cme,dEo),e(Ku,cEo),e(Ku,Sj),e(Sj,mEo),e(Ku,fEo),e(y,gEo),e(y,Zu),e(Zu,mme),e(mme,hEo),e(Zu,uEo),e(Zu,Rj),e(Rj,pEo),e(Zu,_Eo),e(y,bEo),e(y,ep),e(ep,fme),e(fme,vEo),e(ep,FEo),e(ep,Pj),e(Pj,TEo),e(ep,MEo),e(y,EEo),e(y,op),e(op,gme),e(gme,CEo),e(op,wEo),e(op,Bj),e(Bj,AEo),e(op,LEo),e(y,yEo),e(y,rp),e(rp,hme),e(hme,xEo),e(rp,$Eo),e(rp,Ij),e(Ij,kEo),e(rp,SEo),e(y,REo),e(y,tp),e(tp,ume),e(ume,PEo),e(tp,BEo),e(tp,Nj),e(Nj,IEo),e(tp,NEo),e(y,qEo),e(y,ap),e(ap,pme),e(pme,jEo),e(ap,DEo),e(ap,qj),e(qj,GEo),e(ap,OEo),e(y,VEo),e(y,np),e(np,_me),e(_me,XEo),e(np,zEo),e(np,jj),e(jj,WEo),e(np,QEo),e(y,HEo),e(y,sp),e(sp,bme),e(bme,UEo),e(sp,JEo),e(sp,Dj),e(Dj,YEo),e(sp,KEo),e(y,ZEo),e(y,lp),e(lp,vme),e(vme,eCo),e(lp,oCo),e(lp,Gj),e(Gj,rCo),e(lp,tCo),e(y,aCo),e(y,ip),e(ip,Fme),e(Fme,nCo),e(ip,sCo),e(ip,Oj),e(Oj,lCo),e(ip,iCo),e(y,dCo),e(y,dp),e(dp,Tme),e(Tme,cCo),e(dp,mCo),e(dp,Vj),e(Vj,fCo),e(dp,gCo),e(y,hCo),e(y,cp),e(cp,Mme),e(Mme,uCo),e(cp,pCo),e(cp,Xj),e(Xj,_Co),e(cp,bCo),e(y,vCo),e(y,mp),e(mp,Eme),e(Eme,FCo),e(mp,TCo),e(mp,zj),e(zj,MCo),e(mp,ECo),e(y,CCo),e(y,fp),e(fp,Cme),e(Cme,wCo),e(fp,ACo),e(fp,Wj),e(Wj,LCo),e(fp,yCo),e(y,xCo),e(y,gp),e(gp,wme),e(wme,$Co),e(gp,kCo),e(gp,Qj),e(Qj,SCo),e(gp,RCo),e(y,PCo),e(y,hp),e(hp,Ame),e(Ame,BCo),e(hp,ICo),e(hp,Hj),e(Hj,NCo),e(hp,qCo),e(y,jCo),e(y,up),e(up,Lme),e(Lme,DCo),e(up,GCo),e(up,Uj),e(Uj,OCo),e(up,VCo),e(y,XCo),e(y,pp),e(pp,yme),e(yme,zCo),e(pp,WCo),e(pp,Jj),e(Jj,QCo),e(pp,HCo),e(y,UCo),e(y,_p),e(_p,xme),e(xme,JCo),e(_p,YCo),e(_p,Yj),e(Yj,KCo),e(_p,ZCo),e(y,e5o),e(y,bp),e(bp,$me),e($me,o5o),e(bp,r5o),e(bp,Kj),e(Kj,t5o),e(bp,a5o),e(y,n5o),e(y,vp),e(vp,kme),e(kme,s5o),e(vp,l5o),e(vp,Zj),e(Zj,i5o),e(vp,d5o),e(y,c5o),e(y,Fp),e(Fp,Sme),e(Sme,m5o),e(Fp,f5o),e(Fp,eD),e(eD,g5o),e(Fp,h5o),e(y,u5o),e(y,Tp),e(Tp,Rme),e(Rme,p5o),e(Tp,_5o),e(Tp,oD),e(oD,b5o),e(Tp,v5o),e(y,F5o),e(y,Mp),e(Mp,Pme),e(Pme,T5o),e(Mp,M5o),e(Mp,rD),e(rD,E5o),e(Mp,C5o),e(y,w5o),e(y,Ep),e(Ep,Bme),e(Bme,A5o),e(Ep,L5o),e(Ep,tD),e(tD,y5o),e(Ep,x5o),e(y,$5o),e(y,Cp),e(Cp,Ime),e(Ime,k5o),e(Cp,S5o),e(Cp,aD),e(aD,R5o),e(Cp,P5o),e(y,B5o),e(y,wp),e(wp,Nme),e(Nme,I5o),e(wp,N5o),e(wp,nD),e(nD,q5o),e(wp,j5o),e(y,D5o),e(y,Ap),e(Ap,qme),e(qme,G5o),e(Ap,O5o),e(Ap,sD),e(sD,V5o),e(Ap,X5o),e(y,z5o),e(y,Lp),e(Lp,jme),e(jme,W5o),e(Lp,Q5o),e(Lp,lD),e(lD,H5o),e(Lp,U5o),e(y,J5o),e(y,yp),e(yp,Dme),e(Dme,Y5o),e(yp,K5o),e(yp,iD),e(iD,Z5o),e(yp,e3o),e(y,o3o),e(y,xp),e(xp,Gme),e(Gme,r3o),e(xp,t3o),e(xp,dD),e(dD,a3o),e(xp,n3o),e(y,s3o),e(y,Js),e(Js,Ome),e(Ome,l3o),e(Js,i3o),e(Js,cD),e(cD,d3o),e(Js,c3o),e(Js,mD),e(mD,m3o),e(Js,f3o),e(y,g3o),e(y,$p),e($p,Vme),e(Vme,h3o),e($p,u3o),e($p,fD),e(fD,p3o),e($p,_3o),e(y,b3o),e(y,kp),e(kp,Xme),e(Xme,v3o),e(kp,F3o),e(kp,gD),e(gD,T3o),e(kp,M3o),e(y,E3o),e(y,Sp),e(Sp,zme),e(zme,C3o),e(Sp,w3o),e(Sp,hD),e(hD,A3o),e(Sp,L3o),e(y,y3o),e(y,Rp),e(Rp,Wme),e(Wme,x3o),e(Rp,$3o),e(Rp,uD),e(uD,k3o),e(Rp,S3o),e(y,R3o),e(y,Pp),e(Pp,Qme),e(Qme,P3o),e(Pp,B3o),e(Pp,pD),e(pD,I3o),e(Pp,N3o),e(y,q3o),e(y,Bp),e(Bp,Hme),e(Hme,j3o),e(Bp,D3o),e(Bp,_D),e(_D,G3o),e(Bp,O3o),e(y,V3o),e(y,Ip),e(Ip,Ume),e(Ume,X3o),e(Ip,z3o),e(Ip,bD),e(bD,W3o),e(Ip,Q3o),e(y,H3o),e(y,Np),e(Np,Jme),e(Jme,U3o),e(Np,J3o),e(Np,vD),e(vD,Y3o),e(Np,K3o),e(y,Z3o),e(y,qp),e(qp,Yme),e(Yme,e0o),e(qp,o0o),e(qp,FD),e(FD,r0o),e(qp,t0o),e(y,a0o),e(y,jp),e(jp,Kme),e(Kme,n0o),e(jp,s0o),e(jp,TD),e(TD,l0o),e(jp,i0o),e(y,d0o),e(y,Dp),e(Dp,Zme),e(Zme,c0o),e(Dp,m0o),e(Dp,MD),e(MD,f0o),e(Dp,g0o),e(y,h0o),e(y,Gp),e(Gp,efe),e(efe,u0o),e(Gp,p0o),e(Gp,ED),e(ED,_0o),e(Gp,b0o),e(y,v0o),e(y,Op),e(Op,ofe),e(ofe,F0o),e(Op,T0o),e(Op,CD),e(CD,M0o),e(Op,E0o),e(y,C0o),e(y,Vp),e(Vp,rfe),e(rfe,w0o),e(Vp,A0o),e(Vp,wD),e(wD,L0o),e(Vp,y0o),e(y,x0o),e(y,Xp),e(Xp,tfe),e(tfe,$0o),e(Xp,k0o),e(Xp,AD),e(AD,S0o),e(Xp,R0o),e(y,P0o),e(y,zp),e(zp,afe),e(afe,B0o),e(zp,I0o),e(zp,LD),e(LD,N0o),e(zp,q0o),e(y,j0o),e(y,Wp),e(Wp,nfe),e(nfe,D0o),e(Wp,G0o),e(Wp,yD),e(yD,O0o),e(Wp,V0o),e(y,X0o),e(y,Qp),e(Qp,sfe),e(sfe,z0o),e(Qp,W0o),e(Qp,xD),e(xD,Q0o),e(Qp,H0o),e(y,U0o),e(y,Hp),e(Hp,lfe),e(lfe,J0o),e(Hp,Y0o),e(Hp,$D),e($D,K0o),e(Hp,Z0o),e(y,ewo),e(y,Up),e(Up,ife),e(ife,owo),e(Up,rwo),e(Up,kD),e(kD,two),e(Up,awo),e(y,nwo),e(y,Jp),e(Jp,dfe),e(dfe,swo),e(Jp,lwo),e(Jp,SD),e(SD,iwo),e(Jp,dwo),e(y,cwo),e(y,Yp),e(Yp,cfe),e(cfe,mwo),e(Yp,fwo),e(Yp,RD),e(RD,gwo),e(Yp,hwo),e(y,uwo),e(y,Kp),e(Kp,mfe),e(mfe,pwo),e(Kp,_wo),e(Kp,PD),e(PD,bwo),e(Kp,vwo),e(y,Fwo),e(y,Zp),e(Zp,ffe),e(ffe,Two),e(Zp,Mwo),e(Zp,BD),e(BD,Ewo),e(Zp,Cwo),e(y,wwo),e(y,e_),e(e_,gfe),e(gfe,Awo),e(e_,Lwo),e(e_,ID),e(ID,ywo),e(e_,xwo),e(y,$wo),e(y,o_),e(o_,hfe),e(hfe,kwo),e(o_,Swo),e(o_,ND),e(ND,Rwo),e(o_,Pwo),e(y,Bwo),e(y,r_),e(r_,ufe),e(ufe,Iwo),e(r_,Nwo),e(r_,qD),e(qD,qwo),e(r_,jwo),e(y,Dwo),e(y,t_),e(t_,pfe),e(pfe,Gwo),e(t_,Owo),e(t_,jD),e(jD,Vwo),e(t_,Xwo),e(y,zwo),e(y,a_),e(a_,_fe),e(_fe,Wwo),e(a_,Qwo),e(a_,DD),e(DD,Hwo),e(a_,Uwo),e(y,Jwo),e(y,n_),e(n_,bfe),e(bfe,Ywo),e(n_,Kwo),e(n_,GD),e(GD,Zwo),e(n_,e6o),e(y,o6o),e(y,s_),e(s_,vfe),e(vfe,r6o),e(s_,t6o),e(s_,OD),e(OD,a6o),e(s_,n6o),e(y,s6o),e(y,l_),e(l_,Ffe),e(Ffe,l6o),e(l_,i6o),e(l_,VD),e(VD,d6o),e(l_,c6o),e(y,m6o),e(y,i_),e(i_,Tfe),e(Tfe,f6o),e(i_,g6o),e(i_,XD),e(XD,h6o),e(i_,u6o),e(y,p6o),e(y,d_),e(d_,Mfe),e(Mfe,_6o),e(d_,b6o),e(d_,zD),e(zD,v6o),e(d_,F6o),e(y,T6o),e(y,c_),e(c_,Efe),e(Efe,M6o),e(c_,E6o),e(c_,WD),e(WD,C6o),e(c_,w6o),e(y,A6o),e(y,m_),e(m_,Cfe),e(Cfe,L6o),e(m_,y6o),e(m_,QD),e(QD,x6o),e(m_,$6o),e(y,k6o),e(y,f_),e(f_,wfe),e(wfe,S6o),e(f_,R6o),e(f_,HD),e(HD,P6o),e(f_,B6o),e(y,I6o),e(y,g_),e(g_,Afe),e(Afe,N6o),e(g_,q6o),e(g_,UD),e(UD,j6o),e(g_,D6o),e(y,G6o),e(y,h_),e(h_,Lfe),e(Lfe,O6o),e(h_,V6o),e(h_,JD),e(JD,X6o),e(h_,z6o),e(y,W6o),e(y,u_),e(u_,yfe),e(yfe,Q6o),e(u_,H6o),e(u_,YD),e(YD,U6o),e(u_,J6o),e(y,Y6o),e(y,p_),e(p_,xfe),e(xfe,K6o),e(p_,Z6o),e(p_,KD),e(KD,eAo),e(p_,oAo),e(y,rAo),e(y,__),e(__,$fe),e($fe,tAo),e(__,aAo),e(__,ZD),e(ZD,nAo),e(__,sAo),e(y,lAo),e(y,b_),e(b_,kfe),e(kfe,iAo),e(b_,dAo),e(b_,eG),e(eG,cAo),e(b_,mAo),e(y,fAo),e(y,v_),e(v_,Sfe),e(Sfe,gAo),e(v_,hAo),e(v_,oG),e(oG,uAo),e(v_,pAo),e(y,_Ao),e(y,F_),e(F_,Rfe),e(Rfe,bAo),e(F_,vAo),e(F_,rG),e(rG,FAo),e(F_,TAo),e(y,MAo),e(y,T_),e(T_,Pfe),e(Pfe,EAo),e(T_,CAo),e(T_,tG),e(tG,wAo),e(T_,AAo),e(y,LAo),e(y,M_),e(M_,Bfe),e(Bfe,yAo),e(M_,xAo),e(M_,aG),e(aG,$Ao),e(M_,kAo),e(y,SAo),e(y,E_),e(E_,Ife),e(Ife,RAo),e(E_,PAo),e(E_,nG),e(nG,BAo),e(E_,IAo),e(y,NAo),e(y,C_),e(C_,Nfe),e(Nfe,qAo),e(C_,jAo),e(C_,sG),e(sG,DAo),e(C_,GAo),e(y,OAo),e(y,w_),e(w_,qfe),e(qfe,VAo),e(w_,XAo),e(w_,lG),e(lG,zAo),e(w_,WAo),e(y,QAo),e(y,A_),e(A_,jfe),e(jfe,HAo),e(A_,UAo),e(A_,iG),e(iG,JAo),e(A_,YAo),e(y,KAo),e(y,L_),e(L_,Dfe),e(Dfe,ZAo),e(L_,e7o),e(L_,dG),e(dG,o7o),e(L_,r7o),e(y,t7o),e(y,y_),e(y_,Gfe),e(Gfe,a7o),e(y_,n7o),e(y_,cG),e(cG,s7o),e(y_,l7o),e(y,i7o),e(y,x_),e(x_,Ofe),e(Ofe,d7o),e(x_,c7o),e(x_,mG),e(mG,m7o),e(x_,f7o),e(y,g7o),e(y,$_),e($_,Vfe),e(Vfe,h7o),e($_,u7o),e($_,fG),e(fG,p7o),e($_,_7o),e(y,b7o),e(y,k_),e(k_,Xfe),e(Xfe,v7o),e(k_,F7o),e(k_,gG),e(gG,T7o),e(k_,M7o),e(y,E7o),e(y,S_),e(S_,zfe),e(zfe,C7o),e(S_,w7o),e(S_,hG),e(hG,A7o),e(S_,L7o),e(y,y7o),e(y,R_),e(R_,Wfe),e(Wfe,x7o),e(R_,$7o),e(R_,uG),e(uG,k7o),e(R_,S7o),e(y,R7o),e(y,P_),e(P_,Qfe),e(Qfe,P7o),e(P_,B7o),e(P_,pG),e(pG,I7o),e(P_,N7o),e(y,q7o),e(y,B_),e(B_,Hfe),e(Hfe,j7o),e(B_,D7o),e(B_,_G),e(_G,G7o),e(B_,O7o),e(y,V7o),e(y,I_),e(I_,Ufe),e(Ufe,X7o),e(I_,z7o),e(I_,bG),e(bG,W7o),e(I_,Q7o),e(y,H7o),e(y,N_),e(N_,Jfe),e(Jfe,U7o),e(N_,J7o),e(N_,vG),e(vG,Y7o),e(N_,K7o),e(y,Z7o),e(y,q_),e(q_,Yfe),e(Yfe,eLo),e(q_,oLo),e(q_,FG),e(FG,rLo),e(q_,tLo),e(y,aLo),e(y,j_),e(j_,Kfe),e(Kfe,nLo),e(j_,sLo),e(j_,TG),e(TG,lLo),e(j_,iLo),e(y,dLo),e(y,D_),e(D_,Zfe),e(Zfe,cLo),e(D_,mLo),e(D_,MG),e(MG,fLo),e(D_,gLo),e(y,hLo),e(y,G_),e(G_,ege),e(ege,uLo),e(G_,pLo),e(G_,EG),e(EG,_Lo),e(G_,bLo),e(y,vLo),e(y,O_),e(O_,oge),e(oge,FLo),e(O_,TLo),e(O_,CG),e(CG,MLo),e(O_,ELo),e(y,CLo),e(y,V_),e(V_,rge),e(rge,wLo),e(V_,ALo),e(V_,wG),e(wG,LLo),e(V_,yLo),e(y,xLo),e(y,X_),e(X_,tge),e(tge,$Lo),e(X_,kLo),e(X_,AG),e(AG,SLo),e(X_,RLo),e(y,PLo),e(y,z_),e(z_,age),e(age,BLo),e(z_,ILo),e(z_,LG),e(LG,NLo),e(z_,qLo),e(y,jLo),e(y,W_),e(W_,nge),e(nge,DLo),e(W_,GLo),e(W_,yG),e(yG,OLo),e(W_,VLo),e(y,XLo),e(y,Q_),e(Q_,sge),e(sge,zLo),e(Q_,WLo),e(Q_,xG),e(xG,QLo),e(Q_,HLo),e(y,ULo),e(y,H_),e(H_,lge),e(lge,JLo),e(H_,YLo),e(H_,$G),e($G,KLo),e(H_,ZLo),e(y,eyo),e(y,U_),e(U_,ige),e(ige,oyo),e(U_,ryo),e(U_,kG),e(kG,tyo),e(U_,ayo),e(y,nyo),e(y,J_),e(J_,dge),e(dge,syo),e(J_,lyo),e(J_,SG),e(SG,iyo),e(J_,dyo),e(y,cyo),e(y,Y_),e(Y_,cge),e(cge,myo),e(Y_,fyo),e(Y_,RG),e(RG,gyo),e(Y_,hyo),e(y,uyo),e(y,K_),e(K_,mge),e(mge,pyo),e(K_,_yo),e(K_,PG),e(PG,byo),e(K_,vyo),e(y,Fyo),e(y,Z_),e(Z_,fge),e(fge,Tyo),e(Z_,Myo),e(Z_,BG),e(BG,Eyo),e(Z_,Cyo),e(y,wyo),e(y,e2),e(e2,gge),e(gge,Ayo),e(e2,Lyo),e(e2,IG),e(IG,yyo),e(e2,xyo),e(Ye,$yo),e(Ye,o2),e(o2,kyo),e(o2,hge),e(hge,Syo),e(o2,Ryo),e(o2,uge),e(uge,Pyo),e(Ye,Byo),M(r2,Ye,null),b(m,Xze,_),b(m,Qi,_),e(Qi,t2),e(t2,pge),M(t8,pge,null),e(Qi,Iyo),e(Qi,_ge),e(_ge,Nyo),b(m,zze,_),b(m,So,_),M(a8,So,null),e(So,qyo),e(So,Hi),e(Hi,jyo),e(Hi,NG),e(NG,Dyo),e(Hi,Gyo),e(Hi,qG),e(qG,Oyo),e(Hi,Vyo),e(So,Xyo),e(So,n8),e(n8,zyo),e(n8,bge),e(bge,Wyo),e(n8,Qyo),e(So,Hyo),e(So,dt),M(s8,dt,null),e(dt,Uyo),e(dt,vge),e(vge,Jyo),e(dt,Yyo),e(dt,Ui),e(Ui,Kyo),e(Ui,Fge),e(Fge,Zyo),e(Ui,e8o),e(Ui,jG),e(jG,o8o),e(Ui,r8o),e(dt,t8o),M(a2,dt,null),e(So,a8o),e(So,Ke),M(l8,Ke,null),e(Ke,n8o),e(Ke,Tge),e(Tge,s8o),e(Ke,l8o),e(Ke,Na),e(Na,i8o),e(Na,Mge),e(Mge,d8o),e(Na,c8o),e(Na,Ege),e(Ege,m8o),e(Na,f8o),e(Na,Cge),e(Cge,g8o),e(Na,h8o),e(Ke,u8o),e(Ke,G),e(G,n2),e(n2,wge),e(wge,p8o),e(n2,_8o),e(n2,DG),e(DG,b8o),e(n2,v8o),e(G,F8o),e(G,s2),e(s2,Age),e(Age,T8o),e(s2,M8o),e(s2,GG),e(GG,E8o),e(s2,C8o),e(G,w8o),e(G,l2),e(l2,Lge),e(Lge,A8o),e(l2,L8o),e(l2,OG),e(OG,y8o),e(l2,x8o),e(G,$8o),e(G,i2),e(i2,yge),e(yge,k8o),e(i2,S8o),e(i2,VG),e(VG,R8o),e(i2,P8o),e(G,B8o),e(G,d2),e(d2,xge),e(xge,I8o),e(d2,N8o),e(d2,XG),e(XG,q8o),e(d2,j8o),e(G,D8o),e(G,c2),e(c2,$ge),e($ge,G8o),e(c2,O8o),e(c2,zG),e(zG,V8o),e(c2,X8o),e(G,z8o),e(G,m2),e(m2,kge),e(kge,W8o),e(m2,Q8o),e(m2,WG),e(WG,H8o),e(m2,U8o),e(G,J8o),e(G,f2),e(f2,Sge),e(Sge,Y8o),e(f2,K8o),e(f2,QG),e(QG,Z8o),e(f2,e9o),e(G,o9o),e(G,g2),e(g2,Rge),e(Rge,r9o),e(g2,t9o),e(g2,HG),e(HG,a9o),e(g2,n9o),e(G,s9o),e(G,h2),e(h2,Pge),e(Pge,l9o),e(h2,i9o),e(h2,UG),e(UG,d9o),e(h2,c9o),e(G,m9o),e(G,u2),e(u2,Bge),e(Bge,f9o),e(u2,g9o),e(u2,JG),e(JG,h9o),e(u2,u9o),e(G,p9o),e(G,p2),e(p2,Ige),e(Ige,_9o),e(p2,b9o),e(p2,YG),e(YG,v9o),e(p2,F9o),e(G,T9o),e(G,_2),e(_2,Nge),e(Nge,M9o),e(_2,E9o),e(_2,KG),e(KG,C9o),e(_2,w9o),e(G,A9o),e(G,b2),e(b2,qge),e(qge,L9o),e(b2,y9o),e(b2,ZG),e(ZG,x9o),e(b2,$9o),e(G,k9o),e(G,v2),e(v2,jge),e(jge,S9o),e(v2,R9o),e(v2,eO),e(eO,P9o),e(v2,B9o),e(G,I9o),e(G,F2),e(F2,Dge),e(Dge,N9o),e(F2,q9o),e(F2,oO),e(oO,j9o),e(F2,D9o),e(G,G9o),e(G,T2),e(T2,Gge),e(Gge,O9o),e(T2,V9o),e(T2,rO),e(rO,X9o),e(T2,z9o),e(G,W9o),e(G,M2),e(M2,Oge),e(Oge,Q9o),e(M2,H9o),e(M2,tO),e(tO,U9o),e(M2,J9o),e(G,Y9o),e(G,E2),e(E2,Vge),e(Vge,K9o),e(E2,Z9o),e(E2,aO),e(aO,exo),e(E2,oxo),e(G,rxo),e(G,C2),e(C2,Xge),e(Xge,txo),e(C2,axo),e(C2,nO),e(nO,nxo),e(C2,sxo),e(G,lxo),e(G,w2),e(w2,zge),e(zge,ixo),e(w2,dxo),e(w2,sO),e(sO,cxo),e(w2,mxo),e(G,fxo),e(G,A2),e(A2,Wge),e(Wge,gxo),e(A2,hxo),e(A2,lO),e(lO,uxo),e(A2,pxo),e(G,_xo),e(G,L2),e(L2,Qge),e(Qge,bxo),e(L2,vxo),e(L2,iO),e(iO,Fxo),e(L2,Txo),e(G,Mxo),e(G,y2),e(y2,Hge),e(Hge,Exo),e(y2,Cxo),e(y2,dO),e(dO,wxo),e(y2,Axo),e(G,Lxo),e(G,x2),e(x2,Uge),e(Uge,yxo),e(x2,xxo),e(x2,cO),e(cO,$xo),e(x2,kxo),e(G,Sxo),e(G,$2),e($2,Jge),e(Jge,Rxo),e($2,Pxo),e($2,mO),e(mO,Bxo),e($2,Ixo),e(G,Nxo),e(G,k2),e(k2,Yge),e(Yge,qxo),e(k2,jxo),e(k2,fO),e(fO,Dxo),e(k2,Gxo),e(G,Oxo),e(G,S2),e(S2,Kge),e(Kge,Vxo),e(S2,Xxo),e(S2,gO),e(gO,zxo),e(S2,Wxo),e(G,Qxo),e(G,R2),e(R2,Zge),e(Zge,Hxo),e(R2,Uxo),e(R2,hO),e(hO,Jxo),e(R2,Yxo),e(G,Kxo),e(G,P2),e(P2,ehe),e(ehe,Zxo),e(P2,e$o),e(P2,uO),e(uO,o$o),e(P2,r$o),e(G,t$o),e(G,B2),e(B2,ohe),e(ohe,a$o),e(B2,n$o),e(B2,pO),e(pO,s$o),e(B2,l$o),e(G,i$o),e(G,I2),e(I2,rhe),e(rhe,d$o),e(I2,c$o),e(I2,_O),e(_O,m$o),e(I2,f$o),e(G,g$o),e(G,N2),e(N2,the),e(the,h$o),e(N2,u$o),e(N2,bO),e(bO,p$o),e(N2,_$o),e(G,b$o),e(G,q2),e(q2,ahe),e(ahe,v$o),e(q2,F$o),e(q2,vO),e(vO,T$o),e(q2,M$o),e(G,E$o),e(G,j2),e(j2,nhe),e(nhe,C$o),e(j2,w$o),e(j2,FO),e(FO,A$o),e(j2,L$o),e(G,y$o),e(G,D2),e(D2,she),e(she,x$o),e(D2,$$o),e(D2,TO),e(TO,k$o),e(D2,S$o),e(G,R$o),e(G,G2),e(G2,lhe),e(lhe,P$o),e(G2,B$o),e(G2,MO),e(MO,I$o),e(G2,N$o),e(G,q$o),e(G,O2),e(O2,ihe),e(ihe,j$o),e(O2,D$o),e(O2,EO),e(EO,G$o),e(O2,O$o),e(G,V$o),e(G,V2),e(V2,dhe),e(dhe,X$o),e(V2,z$o),e(V2,CO),e(CO,W$o),e(V2,Q$o),e(G,H$o),e(G,X2),e(X2,che),e(che,U$o),e(X2,J$o),e(X2,wO),e(wO,Y$o),e(X2,K$o),e(G,Z$o),e(G,z2),e(z2,mhe),e(mhe,eko),e(z2,oko),e(z2,AO),e(AO,rko),e(z2,tko),e(G,ako),e(G,W2),e(W2,fhe),e(fhe,nko),e(W2,sko),e(W2,LO),e(LO,lko),e(W2,iko),e(G,dko),e(G,Q2),e(Q2,ghe),e(ghe,cko),e(Q2,mko),e(Q2,yO),e(yO,fko),e(Q2,gko),e(G,hko),e(G,H2),e(H2,hhe),e(hhe,uko),e(H2,pko),e(H2,xO),e(xO,_ko),e(H2,bko),e(G,vko),e(G,U2),e(U2,uhe),e(uhe,Fko),e(U2,Tko),e(U2,$O),e($O,Mko),e(U2,Eko),e(G,Cko),e(G,J2),e(J2,phe),e(phe,wko),e(J2,Ako),e(J2,kO),e(kO,Lko),e(J2,yko),e(Ke,xko),e(Ke,Y2),e(Y2,$ko),e(Y2,_he),e(_he,kko),e(Y2,Sko),e(Y2,bhe),e(bhe,Rko),e(Ke,Pko),M(K2,Ke,null),b(m,Wze,_),b(m,Ji,_),e(Ji,Z2),e(Z2,vhe),M(i8,vhe,null),e(Ji,Bko),e(Ji,Fhe),e(Fhe,Iko),b(m,Qze,_),b(m,Ro,_),M(d8,Ro,null),e(Ro,Nko),e(Ro,Yi),e(Yi,qko),e(Yi,SO),e(SO,jko),e(Yi,Dko),e(Yi,RO),e(RO,Gko),e(Yi,Oko),e(Ro,Vko),e(Ro,c8),e(c8,Xko),e(c8,The),e(The,zko),e(c8,Wko),e(Ro,Qko),e(Ro,ct),M(m8,ct,null),e(ct,Hko),e(ct,Mhe),e(Mhe,Uko),e(ct,Jko),e(ct,Ki),e(Ki,Yko),e(Ki,Ehe),e(Ehe,Kko),e(Ki,Zko),e(Ki,PO),e(PO,eSo),e(Ki,oSo),e(ct,rSo),M(eb,ct,null),e(Ro,tSo),e(Ro,Ze),M(f8,Ze,null),e(Ze,aSo),e(Ze,Che),e(Che,nSo),e(Ze,sSo),e(Ze,qa),e(qa,lSo),e(qa,whe),e(whe,iSo),e(qa,dSo),e(qa,Ahe),e(Ahe,cSo),e(qa,mSo),e(qa,Lhe),e(Lhe,fSo),e(qa,gSo),e(Ze,hSo),e(Ze,z),e(z,ob),e(ob,yhe),e(yhe,uSo),e(ob,pSo),e(ob,BO),e(BO,_So),e(ob,bSo),e(z,vSo),e(z,rb),e(rb,xhe),e(xhe,FSo),e(rb,TSo),e(rb,IO),e(IO,MSo),e(rb,ESo),e(z,CSo),e(z,tb),e(tb,$he),e($he,wSo),e(tb,ASo),e(tb,NO),e(NO,LSo),e(tb,ySo),e(z,xSo),e(z,ab),e(ab,khe),e(khe,$So),e(ab,kSo),e(ab,qO),e(qO,SSo),e(ab,RSo),e(z,PSo),e(z,nb),e(nb,She),e(She,BSo),e(nb,ISo),e(nb,jO),e(jO,NSo),e(nb,qSo),e(z,jSo),e(z,sb),e(sb,Rhe),e(Rhe,DSo),e(sb,GSo),e(sb,DO),e(DO,OSo),e(sb,VSo),e(z,XSo),e(z,lb),e(lb,Phe),e(Phe,zSo),e(lb,WSo),e(lb,GO),e(GO,QSo),e(lb,HSo),e(z,USo),e(z,ib),e(ib,Bhe),e(Bhe,JSo),e(ib,YSo),e(ib,OO),e(OO,KSo),e(ib,ZSo),e(z,eRo),e(z,db),e(db,Ihe),e(Ihe,oRo),e(db,rRo),e(db,VO),e(VO,tRo),e(db,aRo),e(z,nRo),e(z,cb),e(cb,Nhe),e(Nhe,sRo),e(cb,lRo),e(cb,XO),e(XO,iRo),e(cb,dRo),e(z,cRo),e(z,mb),e(mb,qhe),e(qhe,mRo),e(mb,fRo),e(mb,zO),e(zO,gRo),e(mb,hRo),e(z,uRo),e(z,fb),e(fb,jhe),e(jhe,pRo),e(fb,_Ro),e(fb,WO),e(WO,bRo),e(fb,vRo),e(z,FRo),e(z,gb),e(gb,Dhe),e(Dhe,TRo),e(gb,MRo),e(gb,QO),e(QO,ERo),e(gb,CRo),e(z,wRo),e(z,hb),e(hb,Ghe),e(Ghe,ARo),e(hb,LRo),e(hb,HO),e(HO,yRo),e(hb,xRo),e(z,$Ro),e(z,ub),e(ub,Ohe),e(Ohe,kRo),e(ub,SRo),e(ub,UO),e(UO,RRo),e(ub,PRo),e(z,BRo),e(z,pb),e(pb,Vhe),e(Vhe,IRo),e(pb,NRo),e(pb,JO),e(JO,qRo),e(pb,jRo),e(z,DRo),e(z,_b),e(_b,Xhe),e(Xhe,GRo),e(_b,ORo),e(_b,YO),e(YO,VRo),e(_b,XRo),e(z,zRo),e(z,bb),e(bb,zhe),e(zhe,WRo),e(bb,QRo),e(bb,KO),e(KO,HRo),e(bb,URo),e(z,JRo),e(z,vb),e(vb,Whe),e(Whe,YRo),e(vb,KRo),e(vb,ZO),e(ZO,ZRo),e(vb,ePo),e(z,oPo),e(z,Fb),e(Fb,Qhe),e(Qhe,rPo),e(Fb,tPo),e(Fb,eV),e(eV,aPo),e(Fb,nPo),e(z,sPo),e(z,Tb),e(Tb,Hhe),e(Hhe,lPo),e(Tb,iPo),e(Tb,oV),e(oV,dPo),e(Tb,cPo),e(z,mPo),e(z,Mb),e(Mb,Uhe),e(Uhe,fPo),e(Mb,gPo),e(Mb,rV),e(rV,hPo),e(Mb,uPo),e(z,pPo),e(z,Eb),e(Eb,Jhe),e(Jhe,_Po),e(Eb,bPo),e(Eb,tV),e(tV,vPo),e(Eb,FPo),e(z,TPo),e(z,Cb),e(Cb,Yhe),e(Yhe,MPo),e(Cb,EPo),e(Cb,aV),e(aV,CPo),e(Cb,wPo),e(z,APo),e(z,wb),e(wb,Khe),e(Khe,LPo),e(wb,yPo),e(wb,nV),e(nV,xPo),e(wb,$Po),e(z,kPo),e(z,Ab),e(Ab,Zhe),e(Zhe,SPo),e(Ab,RPo),e(Ab,sV),e(sV,PPo),e(Ab,BPo),e(z,IPo),e(z,Lb),e(Lb,eue),e(eue,NPo),e(Lb,qPo),e(Lb,lV),e(lV,jPo),e(Lb,DPo),e(z,GPo),e(z,yb),e(yb,oue),e(oue,OPo),e(yb,VPo),e(yb,iV),e(iV,XPo),e(yb,zPo),e(z,WPo),e(z,xb),e(xb,rue),e(rue,QPo),e(xb,HPo),e(xb,dV),e(dV,UPo),e(xb,JPo),e(z,YPo),e(z,$b),e($b,tue),e(tue,KPo),e($b,ZPo),e($b,cV),e(cV,eBo),e($b,oBo),e(z,rBo),e(z,kb),e(kb,aue),e(aue,tBo),e(kb,aBo),e(kb,mV),e(mV,nBo),e(kb,sBo),e(z,lBo),e(z,Sb),e(Sb,nue),e(nue,iBo),e(Sb,dBo),e(Sb,fV),e(fV,cBo),e(Sb,mBo),e(z,fBo),e(z,Rb),e(Rb,sue),e(sue,gBo),e(Rb,hBo),e(Rb,gV),e(gV,uBo),e(Rb,pBo),e(z,_Bo),e(z,Pb),e(Pb,lue),e(lue,bBo),e(Pb,vBo),e(Pb,hV),e(hV,FBo),e(Pb,TBo),e(z,MBo),e(z,Bb),e(Bb,iue),e(iue,EBo),e(Bb,CBo),e(Bb,uV),e(uV,wBo),e(Bb,ABo),e(z,LBo),e(z,Ib),e(Ib,due),e(due,yBo),e(Ib,xBo),e(Ib,pV),e(pV,$Bo),e(Ib,kBo),e(z,SBo),e(z,Nb),e(Nb,cue),e(cue,RBo),e(Nb,PBo),e(Nb,_V),e(_V,BBo),e(Nb,IBo),e(z,NBo),e(z,qb),e(qb,mue),e(mue,qBo),e(qb,jBo),e(qb,bV),e(bV,DBo),e(qb,GBo),e(z,OBo),e(z,jb),e(jb,fue),e(fue,VBo),e(jb,XBo),e(jb,vV),e(vV,zBo),e(jb,WBo),e(z,QBo),e(z,Db),e(Db,gue),e(gue,HBo),e(Db,UBo),e(Db,FV),e(FV,JBo),e(Db,YBo),e(Ze,KBo),e(Ze,Gb),e(Gb,ZBo),e(Gb,hue),e(hue,eIo),e(Gb,oIo),e(Gb,uue),e(uue,rIo),e(Ze,tIo),M(Ob,Ze,null),b(m,Hze,_),b(m,Zi,_),e(Zi,Vb),e(Vb,pue),M(g8,pue,null),e(Zi,aIo),e(Zi,_ue),e(_ue,nIo),b(m,Uze,_),b(m,Po,_),M(h8,Po,null),e(Po,sIo),e(Po,ed),e(ed,lIo),e(ed,TV),e(TV,iIo),e(ed,dIo),e(ed,MV),e(MV,cIo),e(ed,mIo),e(Po,fIo),e(Po,u8),e(u8,gIo),e(u8,bue),e(bue,hIo),e(u8,uIo),e(Po,pIo),e(Po,mt),M(p8,mt,null),e(mt,_Io),e(mt,vue),e(vue,bIo),e(mt,vIo),e(mt,od),e(od,FIo),e(od,Fue),e(Fue,TIo),e(od,MIo),e(od,EV),e(EV,EIo),e(od,CIo),e(mt,wIo),M(Xb,mt,null),e(Po,AIo),e(Po,eo),M(_8,eo,null),e(eo,LIo),e(eo,Tue),e(Tue,yIo),e(eo,xIo),e(eo,ja),e(ja,$Io),e(ja,Mue),e(Mue,kIo),e(ja,SIo),e(ja,Eue),e(Eue,RIo),e(ja,PIo),e(ja,Cue),e(Cue,BIo),e(ja,IIo),e(eo,NIo),e(eo,Q),e(Q,zb),e(zb,wue),e(wue,qIo),e(zb,jIo),e(zb,CV),e(CV,DIo),e(zb,GIo),e(Q,OIo),e(Q,Wb),e(Wb,Aue),e(Aue,VIo),e(Wb,XIo),e(Wb,wV),e(wV,zIo),e(Wb,WIo),e(Q,QIo),e(Q,Qb),e(Qb,Lue),e(Lue,HIo),e(Qb,UIo),e(Qb,AV),e(AV,JIo),e(Qb,YIo),e(Q,KIo),e(Q,Hb),e(Hb,yue),e(yue,ZIo),e(Hb,eNo),e(Hb,LV),e(LV,oNo),e(Hb,rNo),e(Q,tNo),e(Q,Ub),e(Ub,xue),e(xue,aNo),e(Ub,nNo),e(Ub,yV),e(yV,sNo),e(Ub,lNo),e(Q,iNo),e(Q,Jb),e(Jb,$ue),e($ue,dNo),e(Jb,cNo),e(Jb,xV),e(xV,mNo),e(Jb,fNo),e(Q,gNo),e(Q,Yb),e(Yb,kue),e(kue,hNo),e(Yb,uNo),e(Yb,$V),e($V,pNo),e(Yb,_No),e(Q,bNo),e(Q,Kb),e(Kb,Sue),e(Sue,vNo),e(Kb,FNo),e(Kb,kV),e(kV,TNo),e(Kb,MNo),e(Q,ENo),e(Q,Zb),e(Zb,Rue),e(Rue,CNo),e(Zb,wNo),e(Zb,SV),e(SV,ANo),e(Zb,LNo),e(Q,yNo),e(Q,ev),e(ev,Pue),e(Pue,xNo),e(ev,$No),e(ev,RV),e(RV,kNo),e(ev,SNo),e(Q,RNo),e(Q,ov),e(ov,Bue),e(Bue,PNo),e(ov,BNo),e(ov,PV),e(PV,INo),e(ov,NNo),e(Q,qNo),e(Q,rv),e(rv,Iue),e(Iue,jNo),e(rv,DNo),e(rv,BV),e(BV,GNo),e(rv,ONo),e(Q,VNo),e(Q,tv),e(tv,Nue),e(Nue,XNo),e(tv,zNo),e(tv,IV),e(IV,WNo),e(tv,QNo),e(Q,HNo),e(Q,av),e(av,que),e(que,UNo),e(av,JNo),e(av,NV),e(NV,YNo),e(av,KNo),e(Q,ZNo),e(Q,nv),e(nv,jue),e(jue,eqo),e(nv,oqo),e(nv,qV),e(qV,rqo),e(nv,tqo),e(Q,aqo),e(Q,sv),e(sv,Due),e(Due,nqo),e(sv,sqo),e(sv,jV),e(jV,lqo),e(sv,iqo),e(Q,dqo),e(Q,lv),e(lv,Gue),e(Gue,cqo),e(lv,mqo),e(lv,DV),e(DV,fqo),e(lv,gqo),e(Q,hqo),e(Q,iv),e(iv,Oue),e(Oue,uqo),e(iv,pqo),e(iv,GV),e(GV,_qo),e(iv,bqo),e(Q,vqo),e(Q,dv),e(dv,Vue),e(Vue,Fqo),e(dv,Tqo),e(dv,OV),e(OV,Mqo),e(dv,Eqo),e(Q,Cqo),e(Q,cv),e(cv,Xue),e(Xue,wqo),e(cv,Aqo),e(cv,VV),e(VV,Lqo),e(cv,yqo),e(Q,xqo),e(Q,mv),e(mv,zue),e(zue,$qo),e(mv,kqo),e(mv,XV),e(XV,Sqo),e(mv,Rqo),e(Q,Pqo),e(Q,fv),e(fv,Wue),e(Wue,Bqo),e(fv,Iqo),e(fv,zV),e(zV,Nqo),e(fv,qqo),e(Q,jqo),e(Q,gv),e(gv,Que),e(Que,Dqo),e(gv,Gqo),e(gv,WV),e(WV,Oqo),e(gv,Vqo),e(Q,Xqo),e(Q,hv),e(hv,Hue),e(Hue,zqo),e(hv,Wqo),e(hv,QV),e(QV,Qqo),e(hv,Hqo),e(Q,Uqo),e(Q,uv),e(uv,Uue),e(Uue,Jqo),e(uv,Yqo),e(uv,HV),e(HV,Kqo),e(uv,Zqo),e(Q,ejo),e(Q,pv),e(pv,Jue),e(Jue,ojo),e(pv,rjo),e(pv,UV),e(UV,tjo),e(pv,ajo),e(Q,njo),e(Q,_v),e(_v,Yue),e(Yue,sjo),e(_v,ljo),e(_v,JV),e(JV,ijo),e(_v,djo),e(Q,cjo),e(Q,bv),e(bv,Kue),e(Kue,mjo),e(bv,fjo),e(bv,YV),e(YV,gjo),e(bv,hjo),e(Q,ujo),e(Q,vv),e(vv,Zue),e(Zue,pjo),e(vv,_jo),e(vv,KV),e(KV,bjo),e(vv,vjo),e(Q,Fjo),e(Q,Fv),e(Fv,epe),e(epe,Tjo),e(Fv,Mjo),e(Fv,ZV),e(ZV,Ejo),e(Fv,Cjo),e(Q,wjo),e(Q,Tv),e(Tv,ope),e(ope,Ajo),e(Tv,Ljo),e(Tv,eX),e(eX,yjo),e(Tv,xjo),e(Q,$jo),e(Q,Mv),e(Mv,rpe),e(rpe,kjo),e(Mv,Sjo),e(Mv,oX),e(oX,Rjo),e(Mv,Pjo),e(Q,Bjo),e(Q,Ev),e(Ev,tpe),e(tpe,Ijo),e(Ev,Njo),e(Ev,rX),e(rX,qjo),e(Ev,jjo),e(Q,Djo),e(Q,Cv),e(Cv,ape),e(ape,Gjo),e(Cv,Ojo),e(Cv,npe),e(npe,Vjo),e(Cv,Xjo),e(Q,zjo),e(Q,wv),e(wv,spe),e(spe,Wjo),e(wv,Qjo),e(wv,tX),e(tX,Hjo),e(wv,Ujo),e(Q,Jjo),e(Q,Av),e(Av,lpe),e(lpe,Yjo),e(Av,Kjo),e(Av,aX),e(aX,Zjo),e(Av,eDo),e(Q,oDo),e(Q,Lv),e(Lv,ipe),e(ipe,rDo),e(Lv,tDo),e(Lv,nX),e(nX,aDo),e(Lv,nDo),e(Q,sDo),e(Q,yv),e(yv,dpe),e(dpe,lDo),e(yv,iDo),e(yv,sX),e(sX,dDo),e(yv,cDo),e(eo,mDo),e(eo,xv),e(xv,fDo),e(xv,cpe),e(cpe,gDo),e(xv,hDo),e(xv,mpe),e(mpe,uDo),e(eo,pDo),M($v,eo,null),b(m,Jze,_),b(m,rd,_),e(rd,kv),e(kv,fpe),M(b8,fpe,null),e(rd,_Do),e(rd,gpe),e(gpe,bDo),b(m,Yze,_),b(m,Bo,_),M(v8,Bo,null),e(Bo,vDo),e(Bo,td),e(td,FDo),e(td,lX),e(lX,TDo),e(td,MDo),e(td,iX),e(iX,EDo),e(td,CDo),e(Bo,wDo),e(Bo,F8),e(F8,ADo),e(F8,hpe),e(hpe,LDo),e(F8,yDo),e(Bo,xDo),e(Bo,ft),M(T8,ft,null),e(ft,$Do),e(ft,upe),e(upe,kDo),e(ft,SDo),e(ft,ad),e(ad,RDo),e(ad,ppe),e(ppe,PDo),e(ad,BDo),e(ad,dX),e(dX,IDo),e(ad,NDo),e(ft,qDo),M(Sv,ft,null),e(Bo,jDo),e(Bo,oo),M(M8,oo,null),e(oo,DDo),e(oo,_pe),e(_pe,GDo),e(oo,ODo),e(oo,Da),e(Da,VDo),e(Da,bpe),e(bpe,XDo),e(Da,zDo),e(Da,vpe),e(vpe,WDo),e(Da,QDo),e(Da,Fpe),e(Fpe,HDo),e(Da,UDo),e(oo,JDo),e(oo,fe),e(fe,Rv),e(Rv,Tpe),e(Tpe,YDo),e(Rv,KDo),e(Rv,cX),e(cX,ZDo),e(Rv,eGo),e(fe,oGo),e(fe,Pv),e(Pv,Mpe),e(Mpe,rGo),e(Pv,tGo),e(Pv,mX),e(mX,aGo),e(Pv,nGo),e(fe,sGo),e(fe,Bv),e(Bv,Epe),e(Epe,lGo),e(Bv,iGo),e(Bv,fX),e(fX,dGo),e(Bv,cGo),e(fe,mGo),e(fe,Iv),e(Iv,Cpe),e(Cpe,fGo),e(Iv,gGo),e(Iv,gX),e(gX,hGo),e(Iv,uGo),e(fe,pGo),e(fe,Nv),e(Nv,wpe),e(wpe,_Go),e(Nv,bGo),e(Nv,hX),e(hX,vGo),e(Nv,FGo),e(fe,TGo),e(fe,qv),e(qv,Ape),e(Ape,MGo),e(qv,EGo),e(qv,uX),e(uX,CGo),e(qv,wGo),e(fe,AGo),e(fe,jv),e(jv,Lpe),e(Lpe,LGo),e(jv,yGo),e(jv,pX),e(pX,xGo),e(jv,$Go),e(fe,kGo),e(fe,Dv),e(Dv,ype),e(ype,SGo),e(Dv,RGo),e(Dv,_X),e(_X,PGo),e(Dv,BGo),e(fe,IGo),e(fe,Gv),e(Gv,xpe),e(xpe,NGo),e(Gv,qGo),e(Gv,bX),e(bX,jGo),e(Gv,DGo),e(fe,GGo),e(fe,Ov),e(Ov,$pe),e($pe,OGo),e(Ov,VGo),e(Ov,vX),e(vX,XGo),e(Ov,zGo),e(fe,WGo),e(fe,Vv),e(Vv,kpe),e(kpe,QGo),e(Vv,HGo),e(Vv,FX),e(FX,UGo),e(Vv,JGo),e(fe,YGo),e(fe,Xv),e(Xv,Spe),e(Spe,KGo),e(Xv,ZGo),e(Xv,TX),e(TX,eOo),e(Xv,oOo),e(fe,rOo),e(fe,zv),e(zv,Rpe),e(Rpe,tOo),e(zv,aOo),e(zv,MX),e(MX,nOo),e(zv,sOo),e(fe,lOo),e(fe,Wv),e(Wv,Ppe),e(Ppe,iOo),e(Wv,dOo),e(Wv,EX),e(EX,cOo),e(Wv,mOo),e(fe,fOo),e(fe,Qv),e(Qv,Bpe),e(Bpe,gOo),e(Qv,hOo),e(Qv,CX),e(CX,uOo),e(Qv,pOo),e(fe,_Oo),e(fe,Hv),e(Hv,Ipe),e(Ipe,bOo),e(Hv,vOo),e(Hv,wX),e(wX,FOo),e(Hv,TOo),e(fe,MOo),e(fe,Uv),e(Uv,Npe),e(Npe,EOo),e(Uv,COo),e(Uv,AX),e(AX,wOo),e(Uv,AOo),e(fe,LOo),e(fe,Jv),e(Jv,qpe),e(qpe,yOo),e(Jv,xOo),e(Jv,LX),e(LX,$Oo),e(Jv,kOo),e(fe,SOo),e(fe,Yv),e(Yv,jpe),e(jpe,ROo),e(Yv,POo),e(Yv,yX),e(yX,BOo),e(Yv,IOo),e(oo,NOo),e(oo,Kv),e(Kv,qOo),e(Kv,Dpe),e(Dpe,jOo),e(Kv,DOo),e(Kv,Gpe),e(Gpe,GOo),e(oo,OOo),M(Zv,oo,null),b(m,Kze,_),b(m,nd,_),e(nd,e1),e(e1,Ope),M(E8,Ope,null),e(nd,VOo),e(nd,Vpe),e(Vpe,XOo),b(m,Zze,_),b(m,Io,_),M(C8,Io,null),e(Io,zOo),e(Io,sd),e(sd,WOo),e(sd,xX),e(xX,QOo),e(sd,HOo),e(sd,$X),e($X,UOo),e(sd,JOo),e(Io,YOo),e(Io,w8),e(w8,KOo),e(w8,Xpe),e(Xpe,ZOo),e(w8,eVo),e(Io,oVo),e(Io,gt),M(A8,gt,null),e(gt,rVo),e(gt,zpe),e(zpe,tVo),e(gt,aVo),e(gt,ld),e(ld,nVo),e(ld,Wpe),e(Wpe,sVo),e(ld,lVo),e(ld,kX),e(kX,iVo),e(ld,dVo),e(gt,cVo),M(o1,gt,null),e(Io,mVo),e(Io,ro),M(L8,ro,null),e(ro,fVo),e(ro,Qpe),e(Qpe,gVo),e(ro,hVo),e(ro,Ga),e(Ga,uVo),e(Ga,Hpe),e(Hpe,pVo),e(Ga,_Vo),e(Ga,Upe),e(Upe,bVo),e(Ga,vVo),e(Ga,Jpe),e(Jpe,FVo),e(Ga,TVo),e(ro,MVo),e(ro,P),e(P,r1),e(r1,Ype),e(Ype,EVo),e(r1,CVo),e(r1,SX),e(SX,wVo),e(r1,AVo),e(P,LVo),e(P,t1),e(t1,Kpe),e(Kpe,yVo),e(t1,xVo),e(t1,RX),e(RX,$Vo),e(t1,kVo),e(P,SVo),e(P,a1),e(a1,Zpe),e(Zpe,RVo),e(a1,PVo),e(a1,PX),e(PX,BVo),e(a1,IVo),e(P,NVo),e(P,n1),e(n1,e_e),e(e_e,qVo),e(n1,jVo),e(n1,BX),e(BX,DVo),e(n1,GVo),e(P,OVo),e(P,s1),e(s1,o_e),e(o_e,VVo),e(s1,XVo),e(s1,IX),e(IX,zVo),e(s1,WVo),e(P,QVo),e(P,l1),e(l1,r_e),e(r_e,HVo),e(l1,UVo),e(l1,NX),e(NX,JVo),e(l1,YVo),e(P,KVo),e(P,i1),e(i1,t_e),e(t_e,ZVo),e(i1,eXo),e(i1,qX),e(qX,oXo),e(i1,rXo),e(P,tXo),e(P,d1),e(d1,a_e),e(a_e,aXo),e(d1,nXo),e(d1,jX),e(jX,sXo),e(d1,lXo),e(P,iXo),e(P,c1),e(c1,n_e),e(n_e,dXo),e(c1,cXo),e(c1,DX),e(DX,mXo),e(c1,fXo),e(P,gXo),e(P,m1),e(m1,s_e),e(s_e,hXo),e(m1,uXo),e(m1,GX),e(GX,pXo),e(m1,_Xo),e(P,bXo),e(P,f1),e(f1,l_e),e(l_e,vXo),e(f1,FXo),e(f1,OX),e(OX,TXo),e(f1,MXo),e(P,EXo),e(P,g1),e(g1,i_e),e(i_e,CXo),e(g1,wXo),e(g1,VX),e(VX,AXo),e(g1,LXo),e(P,yXo),e(P,h1),e(h1,d_e),e(d_e,xXo),e(h1,$Xo),e(h1,XX),e(XX,kXo),e(h1,SXo),e(P,RXo),e(P,u1),e(u1,c_e),e(c_e,PXo),e(u1,BXo),e(u1,zX),e(zX,IXo),e(u1,NXo),e(P,qXo),e(P,p1),e(p1,m_e),e(m_e,jXo),e(p1,DXo),e(p1,WX),e(WX,GXo),e(p1,OXo),e(P,VXo),e(P,_1),e(_1,f_e),e(f_e,XXo),e(_1,zXo),e(_1,QX),e(QX,WXo),e(_1,QXo),e(P,HXo),e(P,b1),e(b1,g_e),e(g_e,UXo),e(b1,JXo),e(b1,HX),e(HX,YXo),e(b1,KXo),e(P,ZXo),e(P,v1),e(v1,h_e),e(h_e,ezo),e(v1,ozo),e(v1,UX),e(UX,rzo),e(v1,tzo),e(P,azo),e(P,F1),e(F1,u_e),e(u_e,nzo),e(F1,szo),e(F1,JX),e(JX,lzo),e(F1,izo),e(P,dzo),e(P,T1),e(T1,p_e),e(p_e,czo),e(T1,mzo),e(T1,YX),e(YX,fzo),e(T1,gzo),e(P,hzo),e(P,M1),e(M1,__e),e(__e,uzo),e(M1,pzo),e(M1,KX),e(KX,_zo),e(M1,bzo),e(P,vzo),e(P,E1),e(E1,b_e),e(b_e,Fzo),e(E1,Tzo),e(E1,ZX),e(ZX,Mzo),e(E1,Ezo),e(P,Czo),e(P,C1),e(C1,v_e),e(v_e,wzo),e(C1,Azo),e(C1,ez),e(ez,Lzo),e(C1,yzo),e(P,xzo),e(P,w1),e(w1,F_e),e(F_e,$zo),e(w1,kzo),e(w1,oz),e(oz,Szo),e(w1,Rzo),e(P,Pzo),e(P,A1),e(A1,T_e),e(T_e,Bzo),e(A1,Izo),e(A1,rz),e(rz,Nzo),e(A1,qzo),e(P,jzo),e(P,L1),e(L1,M_e),e(M_e,Dzo),e(L1,Gzo),e(L1,tz),e(tz,Ozo),e(L1,Vzo),e(P,Xzo),e(P,y1),e(y1,E_e),e(E_e,zzo),e(y1,Wzo),e(y1,az),e(az,Qzo),e(y1,Hzo),e(P,Uzo),e(P,x1),e(x1,C_e),e(C_e,Jzo),e(x1,Yzo),e(x1,nz),e(nz,Kzo),e(x1,Zzo),e(P,eWo),e(P,$1),e($1,w_e),e(w_e,oWo),e($1,rWo),e($1,sz),e(sz,tWo),e($1,aWo),e(P,nWo),e(P,k1),e(k1,A_e),e(A_e,sWo),e(k1,lWo),e(k1,lz),e(lz,iWo),e(k1,dWo),e(P,cWo),e(P,S1),e(S1,L_e),e(L_e,mWo),e(S1,fWo),e(S1,iz),e(iz,gWo),e(S1,hWo),e(P,uWo),e(P,R1),e(R1,y_e),e(y_e,pWo),e(R1,_Wo),e(R1,dz),e(dz,bWo),e(R1,vWo),e(P,FWo),e(P,P1),e(P1,x_e),e(x_e,TWo),e(P1,MWo),e(P1,cz),e(cz,EWo),e(P1,CWo),e(P,wWo),e(P,B1),e(B1,$_e),e($_e,AWo),e(B1,LWo),e(B1,mz),e(mz,yWo),e(B1,xWo),e(P,$Wo),e(P,I1),e(I1,k_e),e(k_e,kWo),e(I1,SWo),e(I1,fz),e(fz,RWo),e(I1,PWo),e(P,BWo),e(P,N1),e(N1,S_e),e(S_e,IWo),e(N1,NWo),e(N1,gz),e(gz,qWo),e(N1,jWo),e(P,DWo),e(P,q1),e(q1,R_e),e(R_e,GWo),e(q1,OWo),e(q1,hz),e(hz,VWo),e(q1,XWo),e(P,zWo),e(P,j1),e(j1,P_e),e(P_e,WWo),e(j1,QWo),e(j1,uz),e(uz,HWo),e(j1,UWo),e(P,JWo),e(P,D1),e(D1,B_e),e(B_e,YWo),e(D1,KWo),e(D1,pz),e(pz,ZWo),e(D1,eQo),e(P,oQo),e(P,G1),e(G1,I_e),e(I_e,rQo),e(G1,tQo),e(G1,_z),e(_z,aQo),e(G1,nQo),e(P,sQo),e(P,O1),e(O1,N_e),e(N_e,lQo),e(O1,iQo),e(O1,bz),e(bz,dQo),e(O1,cQo),e(P,mQo),e(P,V1),e(V1,q_e),e(q_e,fQo),e(V1,gQo),e(V1,vz),e(vz,hQo),e(V1,uQo),e(P,pQo),e(P,X1),e(X1,j_e),e(j_e,_Qo),e(X1,bQo),e(X1,Fz),e(Fz,vQo),e(X1,FQo),e(P,TQo),e(P,z1),e(z1,D_e),e(D_e,MQo),e(z1,EQo),e(z1,Tz),e(Tz,CQo),e(z1,wQo),e(P,AQo),e(P,W1),e(W1,G_e),e(G_e,LQo),e(W1,yQo),e(W1,Mz),e(Mz,xQo),e(W1,$Qo),e(P,kQo),e(P,Q1),e(Q1,O_e),e(O_e,SQo),e(Q1,RQo),e(Q1,Ez),e(Ez,PQo),e(Q1,BQo),e(P,IQo),e(P,H1),e(H1,V_e),e(V_e,NQo),e(H1,qQo),e(H1,Cz),e(Cz,jQo),e(H1,DQo),e(P,GQo),e(P,U1),e(U1,X_e),e(X_e,OQo),e(U1,VQo),e(U1,wz),e(wz,XQo),e(U1,zQo),e(P,WQo),e(P,J1),e(J1,z_e),e(z_e,QQo),e(J1,HQo),e(J1,Az),e(Az,UQo),e(J1,JQo),e(P,YQo),e(P,Y1),e(Y1,W_e),e(W_e,KQo),e(Y1,ZQo),e(Y1,Lz),e(Lz,eHo),e(Y1,oHo),e(P,rHo),e(P,K1),e(K1,Q_e),e(Q_e,tHo),e(K1,aHo),e(K1,yz),e(yz,nHo),e(K1,sHo),e(P,lHo),e(P,Z1),e(Z1,H_e),e(H_e,iHo),e(Z1,dHo),e(Z1,xz),e(xz,cHo),e(Z1,mHo),e(ro,fHo),e(ro,eF),e(eF,gHo),e(eF,U_e),e(U_e,hHo),e(eF,uHo),e(eF,J_e),e(J_e,pHo),e(ro,_Ho),M(oF,ro,null),b(m,eWe,_),b(m,id,_),e(id,rF),e(rF,Y_e),M(y8,Y_e,null),e(id,bHo),e(id,K_e),e(K_e,vHo),b(m,oWe,_),b(m,No,_),M(x8,No,null),e(No,FHo),e(No,dd),e(dd,THo),e(dd,$z),e($z,MHo),e(dd,EHo),e(dd,kz),e(kz,CHo),e(dd,wHo),e(No,AHo),e(No,$8),e($8,LHo),e($8,Z_e),e(Z_e,yHo),e($8,xHo),e(No,$Ho),e(No,ht),M(k8,ht,null),e(ht,kHo),e(ht,e2e),e(e2e,SHo),e(ht,RHo),e(ht,cd),e(cd,PHo),e(cd,o2e),e(o2e,BHo),e(cd,IHo),e(cd,Sz),e(Sz,NHo),e(cd,qHo),e(ht,jHo),M(tF,ht,null),e(No,DHo),e(No,to),M(S8,to,null),e(to,GHo),e(to,r2e),e(r2e,OHo),e(to,VHo),e(to,Oa),e(Oa,XHo),e(Oa,t2e),e(t2e,zHo),e(Oa,WHo),e(Oa,a2e),e(a2e,QHo),e(Oa,HHo),e(Oa,n2e),e(n2e,UHo),e(Oa,JHo),e(to,YHo),e(to,Z),e(Z,aF),e(aF,s2e),e(s2e,KHo),e(aF,ZHo),e(aF,Rz),e(Rz,eUo),e(aF,oUo),e(Z,rUo),e(Z,nF),e(nF,l2e),e(l2e,tUo),e(nF,aUo),e(nF,Pz),e(Pz,nUo),e(nF,sUo),e(Z,lUo),e(Z,sF),e(sF,i2e),e(i2e,iUo),e(sF,dUo),e(sF,Bz),e(Bz,cUo),e(sF,mUo),e(Z,fUo),e(Z,lF),e(lF,d2e),e(d2e,gUo),e(lF,hUo),e(lF,Iz),e(Iz,uUo),e(lF,pUo),e(Z,_Uo),e(Z,iF),e(iF,c2e),e(c2e,bUo),e(iF,vUo),e(iF,Nz),e(Nz,FUo),e(iF,TUo),e(Z,MUo),e(Z,dF),e(dF,m2e),e(m2e,EUo),e(dF,CUo),e(dF,qz),e(qz,wUo),e(dF,AUo),e(Z,LUo),e(Z,cF),e(cF,f2e),e(f2e,yUo),e(cF,xUo),e(cF,jz),e(jz,$Uo),e(cF,kUo),e(Z,SUo),e(Z,mF),e(mF,g2e),e(g2e,RUo),e(mF,PUo),e(mF,Dz),e(Dz,BUo),e(mF,IUo),e(Z,NUo),e(Z,fF),e(fF,h2e),e(h2e,qUo),e(fF,jUo),e(fF,Gz),e(Gz,DUo),e(fF,GUo),e(Z,OUo),e(Z,gF),e(gF,u2e),e(u2e,VUo),e(gF,XUo),e(gF,Oz),e(Oz,zUo),e(gF,WUo),e(Z,QUo),e(Z,hF),e(hF,p2e),e(p2e,HUo),e(hF,UUo),e(hF,Vz),e(Vz,JUo),e(hF,YUo),e(Z,KUo),e(Z,uF),e(uF,_2e),e(_2e,ZUo),e(uF,eJo),e(uF,Xz),e(Xz,oJo),e(uF,rJo),e(Z,tJo),e(Z,pF),e(pF,b2e),e(b2e,aJo),e(pF,nJo),e(pF,zz),e(zz,sJo),e(pF,lJo),e(Z,iJo),e(Z,_F),e(_F,v2e),e(v2e,dJo),e(_F,cJo),e(_F,Wz),e(Wz,mJo),e(_F,fJo),e(Z,gJo),e(Z,bF),e(bF,F2e),e(F2e,hJo),e(bF,uJo),e(bF,Qz),e(Qz,pJo),e(bF,_Jo),e(Z,bJo),e(Z,vF),e(vF,T2e),e(T2e,vJo),e(vF,FJo),e(vF,Hz),e(Hz,TJo),e(vF,MJo),e(Z,EJo),e(Z,FF),e(FF,M2e),e(M2e,CJo),e(FF,wJo),e(FF,Uz),e(Uz,AJo),e(FF,LJo),e(Z,yJo),e(Z,TF),e(TF,E2e),e(E2e,xJo),e(TF,$Jo),e(TF,Jz),e(Jz,kJo),e(TF,SJo),e(Z,RJo),e(Z,MF),e(MF,C2e),e(C2e,PJo),e(MF,BJo),e(MF,Yz),e(Yz,IJo),e(MF,NJo),e(Z,qJo),e(Z,EF),e(EF,w2e),e(w2e,jJo),e(EF,DJo),e(EF,Kz),e(Kz,GJo),e(EF,OJo),e(Z,VJo),e(Z,CF),e(CF,A2e),e(A2e,XJo),e(CF,zJo),e(CF,Zz),e(Zz,WJo),e(CF,QJo),e(Z,HJo),e(Z,wF),e(wF,L2e),e(L2e,UJo),e(wF,JJo),e(wF,eW),e(eW,YJo),e(wF,KJo),e(Z,ZJo),e(Z,AF),e(AF,y2e),e(y2e,eYo),e(AF,oYo),e(AF,oW),e(oW,rYo),e(AF,tYo),e(Z,aYo),e(Z,LF),e(LF,x2e),e(x2e,nYo),e(LF,sYo),e(LF,rW),e(rW,lYo),e(LF,iYo),e(Z,dYo),e(Z,yF),e(yF,$2e),e($2e,cYo),e(yF,mYo),e(yF,tW),e(tW,fYo),e(yF,gYo),e(Z,hYo),e(Z,xF),e(xF,k2e),e(k2e,uYo),e(xF,pYo),e(xF,aW),e(aW,_Yo),e(xF,bYo),e(Z,vYo),e(Z,$F),e($F,S2e),e(S2e,FYo),e($F,TYo),e($F,nW),e(nW,MYo),e($F,EYo),e(Z,CYo),e(Z,kF),e(kF,R2e),e(R2e,wYo),e(kF,AYo),e(kF,sW),e(sW,LYo),e(kF,yYo),e(Z,xYo),e(Z,SF),e(SF,P2e),e(P2e,$Yo),e(SF,kYo),e(SF,lW),e(lW,SYo),e(SF,RYo),e(Z,PYo),e(Z,RF),e(RF,B2e),e(B2e,BYo),e(RF,IYo),e(RF,iW),e(iW,NYo),e(RF,qYo),e(Z,jYo),e(Z,PF),e(PF,I2e),e(I2e,DYo),e(PF,GYo),e(PF,dW),e(dW,OYo),e(PF,VYo),e(to,XYo),e(to,BF),e(BF,zYo),e(BF,N2e),e(N2e,WYo),e(BF,QYo),e(BF,q2e),e(q2e,HYo),e(to,UYo),M(IF,to,null),b(m,rWe,_),b(m,md,_),e(md,NF),e(NF,j2e),M(R8,j2e,null),e(md,JYo),e(md,D2e),e(D2e,YYo),b(m,tWe,_),b(m,qo,_),M(P8,qo,null),e(qo,KYo),e(qo,fd),e(fd,ZYo),e(fd,cW),e(cW,eKo),e(fd,oKo),e(fd,mW),e(mW,rKo),e(fd,tKo),e(qo,aKo),e(qo,B8),e(B8,nKo),e(B8,G2e),e(G2e,sKo),e(B8,lKo),e(qo,iKo),e(qo,ut),M(I8,ut,null),e(ut,dKo),e(ut,O2e),e(O2e,cKo),e(ut,mKo),e(ut,gd),e(gd,fKo),e(gd,V2e),e(V2e,gKo),e(gd,hKo),e(gd,fW),e(fW,uKo),e(gd,pKo),e(ut,_Ko),M(qF,ut,null),e(qo,bKo),e(qo,ao),M(N8,ao,null),e(ao,vKo),e(ao,X2e),e(X2e,FKo),e(ao,TKo),e(ao,Va),e(Va,MKo),e(Va,z2e),e(z2e,EKo),e(Va,CKo),e(Va,W2e),e(W2e,wKo),e(Va,AKo),e(Va,Q2e),e(Q2e,LKo),e(Va,yKo),e(ao,xKo),e(ao,jo),e(jo,jF),e(jF,H2e),e(H2e,$Ko),e(jF,kKo),e(jF,gW),e(gW,SKo),e(jF,RKo),e(jo,PKo),e(jo,DF),e(DF,U2e),e(U2e,BKo),e(DF,IKo),e(DF,hW),e(hW,NKo),e(DF,qKo),e(jo,jKo),e(jo,GF),e(GF,J2e),e(J2e,DKo),e(GF,GKo),e(GF,uW),e(uW,OKo),e(GF,VKo),e(jo,XKo),e(jo,OF),e(OF,Y2e),e(Y2e,zKo),e(OF,WKo),e(OF,pW),e(pW,QKo),e(OF,HKo),e(jo,UKo),e(jo,VF),e(VF,K2e),e(K2e,JKo),e(VF,YKo),e(VF,_W),e(_W,KKo),e(VF,ZKo),e(jo,eZo),e(jo,XF),e(XF,Z2e),e(Z2e,oZo),e(XF,rZo),e(XF,bW),e(bW,tZo),e(XF,aZo),e(ao,nZo),e(ao,zF),e(zF,sZo),e(zF,ebe),e(ebe,lZo),e(zF,iZo),e(zF,obe),e(obe,dZo),e(ao,cZo),M(WF,ao,null),b(m,aWe,_),b(m,hd,_),e(hd,QF),e(QF,rbe),M(q8,rbe,null),e(hd,mZo),e(hd,tbe),e(tbe,fZo),b(m,nWe,_),b(m,Do,_),M(j8,Do,null),e(Do,gZo),e(Do,ud),e(ud,hZo),e(ud,vW),e(vW,uZo),e(ud,pZo),e(ud,FW),e(FW,_Zo),e(ud,bZo),e(Do,vZo),e(Do,D8),e(D8,FZo),e(D8,abe),e(abe,TZo),e(D8,MZo),e(Do,EZo),e(Do,pt),M(G8,pt,null),e(pt,CZo),e(pt,nbe),e(nbe,wZo),e(pt,AZo),e(pt,pd),e(pd,LZo),e(pd,sbe),e(sbe,yZo),e(pd,xZo),e(pd,TW),e(TW,$Zo),e(pd,kZo),e(pt,SZo),M(HF,pt,null),e(Do,RZo),e(Do,no),M(O8,no,null),e(no,PZo),e(no,lbe),e(lbe,BZo),e(no,IZo),e(no,Xa),e(Xa,NZo),e(Xa,ibe),e(ibe,qZo),e(Xa,jZo),e(Xa,dbe),e(dbe,DZo),e(Xa,GZo),e(Xa,cbe),e(cbe,OZo),e(Xa,VZo),e(no,XZo),e(no,H),e(H,UF),e(UF,mbe),e(mbe,zZo),e(UF,WZo),e(UF,MW),e(MW,QZo),e(UF,HZo),e(H,UZo),e(H,JF),e(JF,fbe),e(fbe,JZo),e(JF,YZo),e(JF,EW),e(EW,KZo),e(JF,ZZo),e(H,eer),e(H,YF),e(YF,gbe),e(gbe,oer),e(YF,rer),e(YF,CW),e(CW,ter),e(YF,aer),e(H,ner),e(H,KF),e(KF,hbe),e(hbe,ser),e(KF,ler),e(KF,wW),e(wW,ier),e(KF,der),e(H,cer),e(H,ZF),e(ZF,ube),e(ube,mer),e(ZF,fer),e(ZF,AW),e(AW,ger),e(ZF,her),e(H,uer),e(H,eT),e(eT,pbe),e(pbe,per),e(eT,_er),e(eT,LW),e(LW,ber),e(eT,ver),e(H,Fer),e(H,oT),e(oT,_be),e(_be,Ter),e(oT,Mer),e(oT,yW),e(yW,Eer),e(oT,Cer),e(H,wer),e(H,rT),e(rT,bbe),e(bbe,Aer),e(rT,Ler),e(rT,xW),e(xW,yer),e(rT,xer),e(H,$er),e(H,tT),e(tT,vbe),e(vbe,ker),e(tT,Ser),e(tT,$W),e($W,Rer),e(tT,Per),e(H,Ber),e(H,aT),e(aT,Fbe),e(Fbe,Ier),e(aT,Ner),e(aT,kW),e(kW,qer),e(aT,jer),e(H,Der),e(H,nT),e(nT,Tbe),e(Tbe,Ger),e(nT,Oer),e(nT,SW),e(SW,Ver),e(nT,Xer),e(H,zer),e(H,sT),e(sT,Mbe),e(Mbe,Wer),e(sT,Qer),e(sT,RW),e(RW,Her),e(sT,Uer),e(H,Jer),e(H,lT),e(lT,Ebe),e(Ebe,Yer),e(lT,Ker),e(lT,PW),e(PW,Zer),e(lT,eor),e(H,oor),e(H,iT),e(iT,Cbe),e(Cbe,ror),e(iT,tor),e(iT,BW),e(BW,aor),e(iT,nor),e(H,sor),e(H,dT),e(dT,wbe),e(wbe,lor),e(dT,ior),e(dT,IW),e(IW,dor),e(dT,cor),e(H,mor),e(H,cT),e(cT,Abe),e(Abe,gor),e(cT,hor),e(cT,NW),e(NW,uor),e(cT,por),e(H,_or),e(H,mT),e(mT,Lbe),e(Lbe,bor),e(mT,vor),e(mT,qW),e(qW,For),e(mT,Tor),e(H,Mor),e(H,fT),e(fT,ybe),e(ybe,Eor),e(fT,Cor),e(fT,jW),e(jW,wor),e(fT,Aor),e(H,Lor),e(H,gT),e(gT,xbe),e(xbe,yor),e(gT,xor),e(gT,DW),e(DW,$or),e(gT,kor),e(H,Sor),e(H,hT),e(hT,$be),e($be,Ror),e(hT,Por),e(hT,GW),e(GW,Bor),e(hT,Ior),e(H,Nor),e(H,uT),e(uT,kbe),e(kbe,qor),e(uT,jor),e(uT,OW),e(OW,Dor),e(uT,Gor),e(H,Oor),e(H,pT),e(pT,Sbe),e(Sbe,Vor),e(pT,Xor),e(pT,VW),e(VW,zor),e(pT,Wor),e(H,Qor),e(H,_T),e(_T,Rbe),e(Rbe,Hor),e(_T,Uor),e(_T,XW),e(XW,Jor),e(_T,Yor),e(H,Kor),e(H,bT),e(bT,Pbe),e(Pbe,Zor),e(bT,err),e(bT,zW),e(zW,orr),e(bT,rrr),e(H,trr),e(H,vT),e(vT,Bbe),e(Bbe,arr),e(vT,nrr),e(vT,WW),e(WW,srr),e(vT,lrr),e(H,irr),e(H,FT),e(FT,Ibe),e(Ibe,drr),e(FT,crr),e(FT,QW),e(QW,mrr),e(FT,frr),e(H,grr),e(H,TT),e(TT,Nbe),e(Nbe,hrr),e(TT,urr),e(TT,HW),e(HW,prr),e(TT,_rr),e(H,brr),e(H,MT),e(MT,qbe),e(qbe,vrr),e(MT,Frr),e(MT,UW),e(UW,Trr),e(MT,Mrr),e(H,Err),e(H,ET),e(ET,jbe),e(jbe,Crr),e(ET,wrr),e(ET,JW),e(JW,Arr),e(ET,Lrr),e(H,yrr),e(H,CT),e(CT,Dbe),e(Dbe,xrr),e(CT,$rr),e(CT,YW),e(YW,krr),e(CT,Srr),e(H,Rrr),e(H,wT),e(wT,Gbe),e(Gbe,Prr),e(wT,Brr),e(wT,KW),e(KW,Irr),e(wT,Nrr),e(H,qrr),e(H,AT),e(AT,Obe),e(Obe,jrr),e(AT,Drr),e(AT,ZW),e(ZW,Grr),e(AT,Orr),e(H,Vrr),e(H,LT),e(LT,Vbe),e(Vbe,Xrr),e(LT,zrr),e(LT,eQ),e(eQ,Wrr),e(LT,Qrr),e(H,Hrr),e(H,yT),e(yT,Xbe),e(Xbe,Urr),e(yT,Jrr),e(yT,oQ),e(oQ,Yrr),e(yT,Krr),e(H,Zrr),e(H,xT),e(xT,zbe),e(zbe,etr),e(xT,otr),e(xT,rQ),e(rQ,rtr),e(xT,ttr),e(H,atr),e(H,$T),e($T,Wbe),e(Wbe,ntr),e($T,str),e($T,tQ),e(tQ,ltr),e($T,itr),e(H,dtr),e(H,kT),e(kT,Qbe),e(Qbe,ctr),e(kT,mtr),e(kT,aQ),e(aQ,ftr),e(kT,gtr),e(no,htr),e(no,ST),e(ST,utr),e(ST,Hbe),e(Hbe,ptr),e(ST,_tr),e(ST,Ube),e(Ube,btr),e(no,vtr),M(RT,no,null),b(m,sWe,_),b(m,_d,_),e(_d,PT),e(PT,Jbe),M(V8,Jbe,null),e(_d,Ftr),e(_d,Ybe),e(Ybe,Ttr),b(m,lWe,_),b(m,Go,_),M(X8,Go,null),e(Go,Mtr),e(Go,bd),e(bd,Etr),e(bd,nQ),e(nQ,Ctr),e(bd,wtr),e(bd,sQ),e(sQ,Atr),e(bd,Ltr),e(Go,ytr),e(Go,z8),e(z8,xtr),e(z8,Kbe),e(Kbe,$tr),e(z8,ktr),e(Go,Str),e(Go,_t),M(W8,_t,null),e(_t,Rtr),e(_t,Zbe),e(Zbe,Ptr),e(_t,Btr),e(_t,vd),e(vd,Itr),e(vd,eve),e(eve,Ntr),e(vd,qtr),e(vd,lQ),e(lQ,jtr),e(vd,Dtr),e(_t,Gtr),M(BT,_t,null),e(Go,Otr),e(Go,so),M(Q8,so,null),e(so,Vtr),e(so,ove),e(ove,Xtr),e(so,ztr),e(so,za),e(za,Wtr),e(za,rve),e(rve,Qtr),e(za,Htr),e(za,tve),e(tve,Utr),e(za,Jtr),e(za,ave),e(ave,Ytr),e(za,Ktr),e(so,Ztr),e(so,V),e(V,IT),e(IT,nve),e(nve,ear),e(IT,oar),e(IT,iQ),e(iQ,rar),e(IT,tar),e(V,aar),e(V,NT),e(NT,sve),e(sve,nar),e(NT,sar),e(NT,dQ),e(dQ,lar),e(NT,iar),e(V,dar),e(V,qT),e(qT,lve),e(lve,car),e(qT,mar),e(qT,cQ),e(cQ,far),e(qT,gar),e(V,har),e(V,jT),e(jT,ive),e(ive,uar),e(jT,par),e(jT,mQ),e(mQ,_ar),e(jT,bar),e(V,Far),e(V,DT),e(DT,dve),e(dve,Tar),e(DT,Mar),e(DT,fQ),e(fQ,Ear),e(DT,Car),e(V,war),e(V,GT),e(GT,cve),e(cve,Aar),e(GT,Lar),e(GT,gQ),e(gQ,yar),e(GT,xar),e(V,$ar),e(V,OT),e(OT,mve),e(mve,kar),e(OT,Sar),e(OT,hQ),e(hQ,Rar),e(OT,Par),e(V,Bar),e(V,VT),e(VT,fve),e(fve,Iar),e(VT,Nar),e(VT,uQ),e(uQ,qar),e(VT,jar),e(V,Dar),e(V,XT),e(XT,gve),e(gve,Gar),e(XT,Oar),e(XT,pQ),e(pQ,Var),e(XT,Xar),e(V,zar),e(V,zT),e(zT,hve),e(hve,War),e(zT,Qar),e(zT,_Q),e(_Q,Har),e(zT,Uar),e(V,Jar),e(V,WT),e(WT,uve),e(uve,Yar),e(WT,Kar),e(WT,bQ),e(bQ,Zar),e(WT,enr),e(V,onr),e(V,QT),e(QT,pve),e(pve,rnr),e(QT,tnr),e(QT,vQ),e(vQ,anr),e(QT,nnr),e(V,snr),e(V,HT),e(HT,_ve),e(_ve,lnr),e(HT,inr),e(HT,FQ),e(FQ,dnr),e(HT,cnr),e(V,mnr),e(V,UT),e(UT,bve),e(bve,fnr),e(UT,gnr),e(UT,TQ),e(TQ,hnr),e(UT,unr),e(V,pnr),e(V,JT),e(JT,vve),e(vve,_nr),e(JT,bnr),e(JT,MQ),e(MQ,vnr),e(JT,Fnr),e(V,Tnr),e(V,YT),e(YT,Fve),e(Fve,Mnr),e(YT,Enr),e(YT,EQ),e(EQ,Cnr),e(YT,wnr),e(V,Anr),e(V,KT),e(KT,Tve),e(Tve,Lnr),e(KT,ynr),e(KT,CQ),e(CQ,xnr),e(KT,$nr),e(V,knr),e(V,ZT),e(ZT,Mve),e(Mve,Snr),e(ZT,Rnr),e(ZT,wQ),e(wQ,Pnr),e(ZT,Bnr),e(V,Inr),e(V,eM),e(eM,Eve),e(Eve,Nnr),e(eM,qnr),e(eM,AQ),e(AQ,jnr),e(eM,Dnr),e(V,Gnr),e(V,oM),e(oM,Cve),e(Cve,Onr),e(oM,Vnr),e(oM,LQ),e(LQ,Xnr),e(oM,znr),e(V,Wnr),e(V,rM),e(rM,wve),e(wve,Qnr),e(rM,Hnr),e(rM,yQ),e(yQ,Unr),e(rM,Jnr),e(V,Ynr),e(V,tM),e(tM,Ave),e(Ave,Knr),e(tM,Znr),e(tM,xQ),e(xQ,esr),e(tM,osr),e(V,rsr),e(V,aM),e(aM,Lve),e(Lve,tsr),e(aM,asr),e(aM,$Q),e($Q,nsr),e(aM,ssr),e(V,lsr),e(V,nM),e(nM,yve),e(yve,isr),e(nM,dsr),e(nM,kQ),e(kQ,csr),e(nM,msr),e(V,fsr),e(V,sM),e(sM,xve),e(xve,gsr),e(sM,hsr),e(sM,SQ),e(SQ,usr),e(sM,psr),e(V,_sr),e(V,lM),e(lM,$ve),e($ve,bsr),e(lM,vsr),e(lM,RQ),e(RQ,Fsr),e(lM,Tsr),e(V,Msr),e(V,iM),e(iM,kve),e(kve,Esr),e(iM,Csr),e(iM,PQ),e(PQ,wsr),e(iM,Asr),e(V,Lsr),e(V,dM),e(dM,Sve),e(Sve,ysr),e(dM,xsr),e(dM,BQ),e(BQ,$sr),e(dM,ksr),e(V,Ssr),e(V,cM),e(cM,Rve),e(Rve,Rsr),e(cM,Psr),e(cM,IQ),e(IQ,Bsr),e(cM,Isr),e(V,Nsr),e(V,mM),e(mM,Pve),e(Pve,qsr),e(mM,jsr),e(mM,NQ),e(NQ,Dsr),e(mM,Gsr),e(V,Osr),e(V,fM),e(fM,Bve),e(Bve,Vsr),e(fM,Xsr),e(fM,qQ),e(qQ,zsr),e(fM,Wsr),e(V,Qsr),e(V,gM),e(gM,Ive),e(Ive,Hsr),e(gM,Usr),e(gM,jQ),e(jQ,Jsr),e(gM,Ysr),e(V,Ksr),e(V,hM),e(hM,Nve),e(Nve,Zsr),e(hM,elr),e(hM,DQ),e(DQ,olr),e(hM,rlr),e(V,tlr),e(V,uM),e(uM,qve),e(qve,alr),e(uM,nlr),e(uM,GQ),e(GQ,slr),e(uM,llr),e(V,ilr),e(V,pM),e(pM,jve),e(jve,dlr),e(pM,clr),e(pM,OQ),e(OQ,mlr),e(pM,flr),e(V,glr),e(V,_M),e(_M,Dve),e(Dve,hlr),e(_M,ulr),e(_M,VQ),e(VQ,plr),e(_M,_lr),e(V,blr),e(V,bM),e(bM,Gve),e(Gve,vlr),e(bM,Flr),e(bM,XQ),e(XQ,Tlr),e(bM,Mlr),e(V,Elr),e(V,vM),e(vM,Ove),e(Ove,Clr),e(vM,wlr),e(vM,zQ),e(zQ,Alr),e(vM,Llr),e(V,ylr),e(V,FM),e(FM,Vve),e(Vve,xlr),e(FM,$lr),e(FM,WQ),e(WQ,klr),e(FM,Slr),e(V,Rlr),e(V,TM),e(TM,Xve),e(Xve,Plr),e(TM,Blr),e(TM,QQ),e(QQ,Ilr),e(TM,Nlr),e(V,qlr),e(V,MM),e(MM,zve),e(zve,jlr),e(MM,Dlr),e(MM,HQ),e(HQ,Glr),e(MM,Olr),e(V,Vlr),e(V,EM),e(EM,Wve),e(Wve,Xlr),e(EM,zlr),e(EM,UQ),e(UQ,Wlr),e(EM,Qlr),e(V,Hlr),e(V,CM),e(CM,Qve),e(Qve,Ulr),e(CM,Jlr),e(CM,JQ),e(JQ,Ylr),e(CM,Klr),e(so,Zlr),e(so,wM),e(wM,eir),e(wM,Hve),e(Hve,oir),e(wM,rir),e(wM,Uve),e(Uve,tir),e(so,air),M(AM,so,null),b(m,iWe,_),b(m,Fd,_),e(Fd,LM),e(LM,Jve),M(H8,Jve,null),e(Fd,nir),e(Fd,Yve),e(Yve,sir),b(m,dWe,_),b(m,Oo,_),M(U8,Oo,null),e(Oo,lir),e(Oo,Td),e(Td,iir),e(Td,YQ),e(YQ,dir),e(Td,cir),e(Td,KQ),e(KQ,mir),e(Td,fir),e(Oo,gir),e(Oo,J8),e(J8,hir),e(J8,Kve),e(Kve,uir),e(J8,pir),e(Oo,_ir),e(Oo,bt),M(Y8,bt,null),e(bt,bir),e(bt,Zve),e(Zve,vir),e(bt,Fir),e(bt,Md),e(Md,Tir),e(Md,e1e),e(e1e,Mir),e(Md,Eir),e(Md,ZQ),e(ZQ,Cir),e(Md,wir),e(bt,Air),M(yM,bt,null),e(Oo,Lir),e(Oo,lo),M(K8,lo,null),e(lo,yir),e(lo,o1e),e(o1e,xir),e(lo,$ir),e(lo,Wa),e(Wa,kir),e(Wa,r1e),e(r1e,Sir),e(Wa,Rir),e(Wa,t1e),e(t1e,Pir),e(Wa,Bir),e(Wa,a1e),e(a1e,Iir),e(Wa,Nir),e(lo,qir),e(lo,n1e),e(n1e,xM),e(xM,s1e),e(s1e,jir),e(xM,Dir),e(xM,eH),e(eH,Gir),e(xM,Oir),e(lo,Vir),e(lo,$M),e($M,Xir),e($M,l1e),e(l1e,zir),e($M,Wir),e($M,i1e),e(i1e,Qir),e(lo,Hir),M(kM,lo,null),b(m,cWe,_),b(m,Ed,_),e(Ed,SM),e(SM,d1e),M(Z8,d1e,null),e(Ed,Uir),e(Ed,c1e),e(c1e,Jir),b(m,mWe,_),b(m,Vo,_),M(e9,Vo,null),e(Vo,Yir),e(Vo,Cd),e(Cd,Kir),e(Cd,oH),e(oH,Zir),e(Cd,edr),e(Cd,rH),e(rH,odr),e(Cd,rdr),e(Vo,tdr),e(Vo,o9),e(o9,adr),e(o9,m1e),e(m1e,ndr),e(o9,sdr),e(Vo,ldr),e(Vo,vt),M(r9,vt,null),e(vt,idr),e(vt,f1e),e(f1e,ddr),e(vt,cdr),e(vt,wd),e(wd,mdr),e(wd,g1e),e(g1e,fdr),e(wd,gdr),e(wd,tH),e(tH,hdr),e(wd,udr),e(vt,pdr),M(RM,vt,null),e(Vo,_dr),e(Vo,io),M(t9,io,null),e(io,bdr),e(io,h1e),e(h1e,vdr),e(io,Fdr),e(io,Qa),e(Qa,Tdr),e(Qa,u1e),e(u1e,Mdr),e(Qa,Edr),e(Qa,p1e),e(p1e,Cdr),e(Qa,wdr),e(Qa,_1e),e(_1e,Adr),e(Qa,Ldr),e(io,ydr),e(io,be),e(be,PM),e(PM,b1e),e(b1e,xdr),e(PM,$dr),e(PM,aH),e(aH,kdr),e(PM,Sdr),e(be,Rdr),e(be,BM),e(BM,v1e),e(v1e,Pdr),e(BM,Bdr),e(BM,nH),e(nH,Idr),e(BM,Ndr),e(be,qdr),e(be,IM),e(IM,F1e),e(F1e,jdr),e(IM,Ddr),e(IM,sH),e(sH,Gdr),e(IM,Odr),e(be,Vdr),e(be,NM),e(NM,T1e),e(T1e,Xdr),e(NM,zdr),e(NM,lH),e(lH,Wdr),e(NM,Qdr),e(be,Hdr),e(be,Ys),e(Ys,M1e),e(M1e,Udr),e(Ys,Jdr),e(Ys,iH),e(iH,Ydr),e(Ys,Kdr),e(Ys,dH),e(dH,Zdr),e(Ys,ecr),e(be,ocr),e(be,qM),e(qM,E1e),e(E1e,rcr),e(qM,tcr),e(qM,cH),e(cH,acr),e(qM,ncr),e(be,scr),e(be,Ks),e(Ks,C1e),e(C1e,lcr),e(Ks,icr),e(Ks,mH),e(mH,dcr),e(Ks,ccr),e(Ks,fH),e(fH,mcr),e(Ks,fcr),e(be,gcr),e(be,jM),e(jM,w1e),e(w1e,hcr),e(jM,ucr),e(jM,gH),e(gH,pcr),e(jM,_cr),e(be,bcr),e(be,Ft),e(Ft,A1e),e(A1e,vcr),e(Ft,Fcr),e(Ft,hH),e(hH,Tcr),e(Ft,Mcr),e(Ft,uH),e(uH,Ecr),e(Ft,Ccr),e(Ft,pH),e(pH,wcr),e(Ft,Acr),e(be,Lcr),e(be,DM),e(DM,L1e),e(L1e,ycr),e(DM,xcr),e(DM,_H),e(_H,$cr),e(DM,kcr),e(be,Scr),e(be,GM),e(GM,y1e),e(y1e,Rcr),e(GM,Pcr),e(GM,bH),e(bH,Bcr),e(GM,Icr),e(be,Ncr),e(be,OM),e(OM,x1e),e(x1e,qcr),e(OM,jcr),e(OM,vH),e(vH,Dcr),e(OM,Gcr),e(be,Ocr),e(be,VM),e(VM,$1e),e($1e,Vcr),e(VM,Xcr),e(VM,FH),e(FH,zcr),e(VM,Wcr),e(be,Qcr),e(be,XM),e(XM,k1e),e(k1e,Hcr),e(XM,Ucr),e(XM,TH),e(TH,Jcr),e(XM,Ycr),e(be,Kcr),e(be,zM),e(zM,S1e),e(S1e,Zcr),e(zM,emr),e(zM,MH),e(MH,omr),e(zM,rmr),e(be,tmr),e(be,WM),e(WM,R1e),e(R1e,amr),e(WM,nmr),e(WM,EH),e(EH,smr),e(WM,lmr),e(be,imr),e(be,QM),e(QM,P1e),e(P1e,dmr),e(QM,cmr),e(QM,CH),e(CH,mmr),e(QM,fmr),e(io,gmr),e(io,HM),e(HM,hmr),e(HM,B1e),e(B1e,umr),e(HM,pmr),e(HM,I1e),e(I1e,_mr),e(io,bmr),M(UM,io,null),b(m,fWe,_),b(m,Ad,_),e(Ad,JM),e(JM,N1e),M(a9,N1e,null),e(Ad,vmr),e(Ad,q1e),e(q1e,Fmr),b(m,gWe,_),b(m,Xo,_),M(n9,Xo,null),e(Xo,Tmr),e(Xo,Ld),e(Ld,Mmr),e(Ld,wH),e(wH,Emr),e(Ld,Cmr),e(Ld,AH),e(AH,wmr),e(Ld,Amr),e(Xo,Lmr),e(Xo,s9),e(s9,ymr),e(s9,j1e),e(j1e,xmr),e(s9,$mr),e(Xo,kmr),e(Xo,Tt),M(l9,Tt,null),e(Tt,Smr),e(Tt,D1e),e(D1e,Rmr),e(Tt,Pmr),e(Tt,yd),e(yd,Bmr),e(yd,G1e),e(G1e,Imr),e(yd,Nmr),e(yd,LH),e(LH,qmr),e(yd,jmr),e(Tt,Dmr),M(YM,Tt,null),e(Xo,Gmr),e(Xo,co),M(i9,co,null),e(co,Omr),e(co,O1e),e(O1e,Vmr),e(co,Xmr),e(co,Ha),e(Ha,zmr),e(Ha,V1e),e(V1e,Wmr),e(Ha,Qmr),e(Ha,X1e),e(X1e,Hmr),e(Ha,Umr),e(Ha,z1e),e(z1e,Jmr),e(Ha,Ymr),e(co,Kmr),e(co,W1e),e(W1e,KM),e(KM,Q1e),e(Q1e,Zmr),e(KM,efr),e(KM,yH),e(yH,ofr),e(KM,rfr),e(co,tfr),e(co,ZM),e(ZM,afr),e(ZM,H1e),e(H1e,nfr),e(ZM,sfr),e(ZM,U1e),e(U1e,lfr),e(co,ifr),M(e4,co,null),b(m,hWe,_),b(m,xd,_),e(xd,o4),e(o4,J1e),M(d9,J1e,null),e(xd,dfr),e(xd,Y1e),e(Y1e,cfr),b(m,uWe,_),b(m,zo,_),M(c9,zo,null),e(zo,mfr),e(zo,$d),e($d,ffr),e($d,xH),e(xH,gfr),e($d,hfr),e($d,$H),e($H,ufr),e($d,pfr),e(zo,_fr),e(zo,m9),e(m9,bfr),e(m9,K1e),e(K1e,vfr),e(m9,Ffr),e(zo,Tfr),e(zo,Mt),M(f9,Mt,null),e(Mt,Mfr),e(Mt,Z1e),e(Z1e,Efr),e(Mt,Cfr),e(Mt,kd),e(kd,wfr),e(kd,eFe),e(eFe,Afr),e(kd,Lfr),e(kd,kH),e(kH,yfr),e(kd,xfr),e(Mt,$fr),M(r4,Mt,null),e(zo,kfr),e(zo,mo),M(g9,mo,null),e(mo,Sfr),e(mo,oFe),e(oFe,Rfr),e(mo,Pfr),e(mo,Ua),e(Ua,Bfr),e(Ua,rFe),e(rFe,Ifr),e(Ua,Nfr),e(Ua,tFe),e(tFe,qfr),e(Ua,jfr),e(Ua,aFe),e(aFe,Dfr),e(Ua,Gfr),e(mo,Ofr),e(mo,nFe),e(nFe,t4),e(t4,sFe),e(sFe,Vfr),e(t4,Xfr),e(t4,SH),e(SH,zfr),e(t4,Wfr),e(mo,Qfr),e(mo,a4),e(a4,Hfr),e(a4,lFe),e(lFe,Ufr),e(a4,Jfr),e(a4,iFe),e(iFe,Yfr),e(mo,Kfr),M(n4,mo,null),b(m,pWe,_),b(m,Sd,_),e(Sd,s4),e(s4,dFe),M(h9,dFe,null),e(Sd,Zfr),e(Sd,cFe),e(cFe,egr),b(m,_We,_),b(m,Wo,_),M(u9,Wo,null),e(Wo,ogr),e(Wo,Rd),e(Rd,rgr),e(Rd,RH),e(RH,tgr),e(Rd,agr),e(Rd,PH),e(PH,ngr),e(Rd,sgr),e(Wo,lgr),e(Wo,p9),e(p9,igr),e(p9,mFe),e(mFe,dgr),e(p9,cgr),e(Wo,mgr),e(Wo,Et),M(_9,Et,null),e(Et,fgr),e(Et,fFe),e(fFe,ggr),e(Et,hgr),e(Et,Pd),e(Pd,ugr),e(Pd,gFe),e(gFe,pgr),e(Pd,_gr),e(Pd,BH),e(BH,bgr),e(Pd,vgr),e(Et,Fgr),M(l4,Et,null),e(Wo,Tgr),e(Wo,fo),M(b9,fo,null),e(fo,Mgr),e(fo,hFe),e(hFe,Egr),e(fo,Cgr),e(fo,Ja),e(Ja,wgr),e(Ja,uFe),e(uFe,Agr),e(Ja,Lgr),e(Ja,pFe),e(pFe,ygr),e(Ja,xgr),e(Ja,_Fe),e(_Fe,$gr),e(Ja,kgr),e(fo,Sgr),e(fo,Pe),e(Pe,i4),e(i4,bFe),e(bFe,Rgr),e(i4,Pgr),e(i4,IH),e(IH,Bgr),e(i4,Igr),e(Pe,Ngr),e(Pe,d4),e(d4,vFe),e(vFe,qgr),e(d4,jgr),e(d4,NH),e(NH,Dgr),e(d4,Ggr),e(Pe,Ogr),e(Pe,c4),e(c4,FFe),e(FFe,Vgr),e(c4,Xgr),e(c4,qH),e(qH,zgr),e(c4,Wgr),e(Pe,Qgr),e(Pe,m4),e(m4,TFe),e(TFe,Hgr),e(m4,Ugr),e(m4,jH),e(jH,Jgr),e(m4,Ygr),e(Pe,Kgr),e(Pe,f4),e(f4,MFe),e(MFe,Zgr),e(f4,ehr),e(f4,DH),e(DH,ohr),e(f4,rhr),e(Pe,thr),e(Pe,g4),e(g4,EFe),e(EFe,ahr),e(g4,nhr),e(g4,GH),e(GH,shr),e(g4,lhr),e(Pe,ihr),e(Pe,h4),e(h4,CFe),e(CFe,dhr),e(h4,chr),e(h4,OH),e(OH,mhr),e(h4,fhr),e(Pe,ghr),e(Pe,u4),e(u4,wFe),e(wFe,hhr),e(u4,uhr),e(u4,VH),e(VH,phr),e(u4,_hr),e(Pe,bhr),e(Pe,p4),e(p4,AFe),e(AFe,vhr),e(p4,Fhr),e(p4,XH),e(XH,Thr),e(p4,Mhr),e(fo,Ehr),e(fo,_4),e(_4,Chr),e(_4,LFe),e(LFe,whr),e(_4,Ahr),e(_4,yFe),e(yFe,Lhr),e(fo,yhr),M(b4,fo,null),b(m,bWe,_),b(m,Bd,_),e(Bd,v4),e(v4,xFe),M(v9,xFe,null),e(Bd,xhr),e(Bd,$Fe),e($Fe,$hr),b(m,vWe,_),b(m,Qo,_),M(F9,Qo,null),e(Qo,khr),e(Qo,Id),e(Id,Shr),e(Id,zH),e(zH,Rhr),e(Id,Phr),e(Id,WH),e(WH,Bhr),e(Id,Ihr),e(Qo,Nhr),e(Qo,T9),e(T9,qhr),e(T9,kFe),e(kFe,jhr),e(T9,Dhr),e(Qo,Ghr),e(Qo,Ct),M(M9,Ct,null),e(Ct,Ohr),e(Ct,SFe),e(SFe,Vhr),e(Ct,Xhr),e(Ct,Nd),e(Nd,zhr),e(Nd,RFe),e(RFe,Whr),e(Nd,Qhr),e(Nd,QH),e(QH,Hhr),e(Nd,Uhr),e(Ct,Jhr),M(F4,Ct,null),e(Qo,Yhr),e(Qo,go),M(E9,go,null),e(go,Khr),e(go,PFe),e(PFe,Zhr),e(go,eur),e(go,Ya),e(Ya,our),e(Ya,BFe),e(BFe,rur),e(Ya,tur),e(Ya,IFe),e(IFe,aur),e(Ya,nur),e(Ya,NFe),e(NFe,sur),e(Ya,lur),e(go,iur),e(go,rt),e(rt,T4),e(T4,qFe),e(qFe,dur),e(T4,cur),e(T4,HH),e(HH,mur),e(T4,fur),e(rt,gur),e(rt,M4),e(M4,jFe),e(jFe,hur),e(M4,uur),e(M4,UH),e(UH,pur),e(M4,_ur),e(rt,bur),e(rt,E4),e(E4,DFe),e(DFe,vur),e(E4,Fur),e(E4,JH),e(JH,Tur),e(E4,Mur),e(rt,Eur),e(rt,C4),e(C4,GFe),e(GFe,Cur),e(C4,wur),e(C4,YH),e(YH,Aur),e(C4,Lur),e(rt,yur),e(rt,w4),e(w4,OFe),e(OFe,xur),e(w4,$ur),e(w4,KH),e(KH,kur),e(w4,Sur),e(go,Rur),e(go,A4),e(A4,Pur),e(A4,VFe),e(VFe,Bur),e(A4,Iur),e(A4,XFe),e(XFe,Nur),e(go,qur),M(L4,go,null),b(m,FWe,_),b(m,qd,_),e(qd,y4),e(y4,zFe),M(C9,zFe,null),e(qd,jur),e(qd,WFe),e(WFe,Dur),b(m,TWe,_),b(m,Ho,_),M(w9,Ho,null),e(Ho,Gur),e(Ho,jd),e(jd,Our),e(jd,ZH),e(ZH,Vur),e(jd,Xur),e(jd,eU),e(eU,zur),e(jd,Wur),e(Ho,Qur),e(Ho,A9),e(A9,Hur),e(A9,QFe),e(QFe,Uur),e(A9,Jur),e(Ho,Yur),e(Ho,wt),M(L9,wt,null),e(wt,Kur),e(wt,HFe),e(HFe,Zur),e(wt,epr),e(wt,Dd),e(Dd,opr),e(Dd,UFe),e(UFe,rpr),e(Dd,tpr),e(Dd,oU),e(oU,apr),e(Dd,npr),e(wt,spr),M(x4,wt,null),e(Ho,lpr),e(Ho,ho),M(y9,ho,null),e(ho,ipr),e(ho,JFe),e(JFe,dpr),e(ho,cpr),e(ho,Ka),e(Ka,mpr),e(Ka,YFe),e(YFe,fpr),e(Ka,gpr),e(Ka,KFe),e(KFe,hpr),e(Ka,upr),e(Ka,ZFe),e(ZFe,ppr),e(Ka,_pr),e(ho,bpr),e(ho,Le),e(Le,$4),e($4,eTe),e(eTe,vpr),e($4,Fpr),e($4,rU),e(rU,Tpr),e($4,Mpr),e(Le,Epr),e(Le,k4),e(k4,oTe),e(oTe,Cpr),e(k4,wpr),e(k4,tU),e(tU,Apr),e(k4,Lpr),e(Le,ypr),e(Le,S4),e(S4,rTe),e(rTe,xpr),e(S4,$pr),e(S4,aU),e(aU,kpr),e(S4,Spr),e(Le,Rpr),e(Le,R4),e(R4,tTe),e(tTe,Ppr),e(R4,Bpr),e(R4,nU),e(nU,Ipr),e(R4,Npr),e(Le,qpr),e(Le,P4),e(P4,aTe),e(aTe,jpr),e(P4,Dpr),e(P4,sU),e(sU,Gpr),e(P4,Opr),e(Le,Vpr),e(Le,B4),e(B4,nTe),e(nTe,Xpr),e(B4,zpr),e(B4,lU),e(lU,Wpr),e(B4,Qpr),e(Le,Hpr),e(Le,I4),e(I4,sTe),e(sTe,Upr),e(I4,Jpr),e(I4,iU),e(iU,Ypr),e(I4,Kpr),e(Le,Zpr),e(Le,N4),e(N4,lTe),e(lTe,e_r),e(N4,o_r),e(N4,dU),e(dU,r_r),e(N4,t_r),e(Le,a_r),e(Le,q4),e(q4,iTe),e(iTe,n_r),e(q4,s_r),e(q4,cU),e(cU,l_r),e(q4,i_r),e(Le,d_r),e(Le,j4),e(j4,dTe),e(dTe,c_r),e(j4,m_r),e(j4,mU),e(mU,f_r),e(j4,g_r),e(ho,h_r),e(ho,D4),e(D4,u_r),e(D4,cTe),e(cTe,p_r),e(D4,__r),e(D4,mTe),e(mTe,b_r),e(ho,v_r),M(G4,ho,null),b(m,MWe,_),b(m,Gd,_),e(Gd,O4),e(O4,fTe),M(x9,fTe,null),e(Gd,F_r),e(Gd,gTe),e(gTe,T_r),b(m,EWe,_),b(m,Uo,_),M($9,Uo,null),e(Uo,M_r),e(Uo,Od),e(Od,E_r),e(Od,fU),e(fU,C_r),e(Od,w_r),e(Od,gU),e(gU,A_r),e(Od,L_r),e(Uo,y_r),e(Uo,k9),e(k9,x_r),e(k9,hTe),e(hTe,$_r),e(k9,k_r),e(Uo,S_r),e(Uo,At),M(S9,At,null),e(At,R_r),e(At,uTe),e(uTe,P_r),e(At,B_r),e(At,Vd),e(Vd,I_r),e(Vd,pTe),e(pTe,N_r),e(Vd,q_r),e(Vd,hU),e(hU,j_r),e(Vd,D_r),e(At,G_r),M(V4,At,null),e(Uo,O_r),e(Uo,uo),M(R9,uo,null),e(uo,V_r),e(uo,_Te),e(_Te,X_r),e(uo,z_r),e(uo,Za),e(Za,W_r),e(Za,bTe),e(bTe,Q_r),e(Za,H_r),e(Za,vTe),e(vTe,U_r),e(Za,J_r),e(Za,FTe),e(FTe,Y_r),e(Za,K_r),e(uo,Z_r),e(uo,P9),e(P9,X4),e(X4,TTe),e(TTe,e2r),e(X4,o2r),e(X4,uU),e(uU,r2r),e(X4,t2r),e(P9,a2r),e(P9,z4),e(z4,MTe),e(MTe,n2r),e(z4,s2r),e(z4,pU),e(pU,l2r),e(z4,i2r),e(uo,d2r),e(uo,W4),e(W4,c2r),e(W4,ETe),e(ETe,m2r),e(W4,f2r),e(W4,CTe),e(CTe,g2r),e(uo,h2r),M(Q4,uo,null),b(m,CWe,_),b(m,Xd,_),e(Xd,H4),e(H4,wTe),M(B9,wTe,null),e(Xd,u2r),e(Xd,ATe),e(ATe,p2r),b(m,wWe,_),b(m,Jo,_),M(I9,Jo,null),e(Jo,_2r),e(Jo,zd),e(zd,b2r),e(zd,_U),e(_U,v2r),e(zd,F2r),e(zd,bU),e(bU,T2r),e(zd,M2r),e(Jo,E2r),e(Jo,N9),e(N9,C2r),e(N9,LTe),e(LTe,w2r),e(N9,A2r),e(Jo,L2r),e(Jo,Lt),M(q9,Lt,null),e(Lt,y2r),e(Lt,yTe),e(yTe,x2r),e(Lt,$2r),e(Lt,Wd),e(Wd,k2r),e(Wd,xTe),e(xTe,S2r),e(Wd,R2r),e(Wd,vU),e(vU,P2r),e(Wd,B2r),e(Lt,I2r),M(U4,Lt,null),e(Jo,N2r),e(Jo,po),M(j9,po,null),e(po,q2r),e(po,$Te),e($Te,j2r),e(po,D2r),e(po,en),e(en,G2r),e(en,kTe),e(kTe,O2r),e(en,V2r),e(en,STe),e(STe,X2r),e(en,z2r),e(en,RTe),e(RTe,W2r),e(en,Q2r),e(po,H2r),e(po,tt),e(tt,J4),e(J4,PTe),e(PTe,U2r),e(J4,J2r),e(J4,FU),e(FU,Y2r),e(J4,K2r),e(tt,Z2r),e(tt,Y4),e(Y4,BTe),e(BTe,ebr),e(Y4,obr),e(Y4,TU),e(TU,rbr),e(Y4,tbr),e(tt,abr),e(tt,K4),e(K4,ITe),e(ITe,nbr),e(K4,sbr),e(K4,MU),e(MU,lbr),e(K4,ibr),e(tt,dbr),e(tt,Z4),e(Z4,NTe),e(NTe,cbr),e(Z4,mbr),e(Z4,EU),e(EU,fbr),e(Z4,gbr),e(tt,hbr),e(tt,eE),e(eE,qTe),e(qTe,ubr),e(eE,pbr),e(eE,CU),e(CU,_br),e(eE,bbr),e(po,vbr),e(po,oE),e(oE,Fbr),e(oE,jTe),e(jTe,Tbr),e(oE,Mbr),e(oE,DTe),e(DTe,Ebr),e(po,Cbr),M(rE,po,null),b(m,AWe,_),b(m,Qd,_),e(Qd,tE),e(tE,GTe),M(D9,GTe,null),e(Qd,wbr),e(Qd,OTe),e(OTe,Abr),b(m,LWe,_),b(m,Yo,_),M(G9,Yo,null),e(Yo,Lbr),e(Yo,Hd),e(Hd,ybr),e(Hd,wU),e(wU,xbr),e(Hd,$br),e(Hd,AU),e(AU,kbr),e(Hd,Sbr),e(Yo,Rbr),e(Yo,O9),e(O9,Pbr),e(O9,VTe),e(VTe,Bbr),e(O9,Ibr),e(Yo,Nbr),e(Yo,yt),M(V9,yt,null),e(yt,qbr),e(yt,XTe),e(XTe,jbr),e(yt,Dbr),e(yt,Ud),e(Ud,Gbr),e(Ud,zTe),e(zTe,Obr),e(Ud,Vbr),e(Ud,LU),e(LU,Xbr),e(Ud,zbr),e(yt,Wbr),M(aE,yt,null),e(Yo,Qbr),e(Yo,_o),M(X9,_o,null),e(_o,Hbr),e(_o,WTe),e(WTe,Ubr),e(_o,Jbr),e(_o,on),e(on,Ybr),e(on,QTe),e(QTe,Kbr),e(on,Zbr),e(on,HTe),e(HTe,evr),e(on,ovr),e(on,UTe),e(UTe,rvr),e(on,tvr),e(_o,avr),e(_o,rn),e(rn,nE),e(nE,JTe),e(JTe,nvr),e(nE,svr),e(nE,yU),e(yU,lvr),e(nE,ivr),e(rn,dvr),e(rn,sE),e(sE,YTe),e(YTe,cvr),e(sE,mvr),e(sE,xU),e(xU,fvr),e(sE,gvr),e(rn,hvr),e(rn,lE),e(lE,KTe),e(KTe,uvr),e(lE,pvr),e(lE,$U),e($U,_vr),e(lE,bvr),e(rn,vvr),e(rn,iE),e(iE,ZTe),e(ZTe,Fvr),e(iE,Tvr),e(iE,kU),e(kU,Mvr),e(iE,Evr),e(_o,Cvr),e(_o,dE),e(dE,wvr),e(dE,eMe),e(eMe,Avr),e(dE,Lvr),e(dE,oMe),e(oMe,yvr),e(_o,xvr),M(cE,_o,null),b(m,yWe,_),b(m,Jd,_),e(Jd,mE),e(mE,rMe),M(z9,rMe,null),e(Jd,$vr),e(Jd,tMe),e(tMe,kvr),b(m,xWe,_),b(m,Ko,_),M(W9,Ko,null),e(Ko,Svr),e(Ko,Yd),e(Yd,Rvr),e(Yd,SU),e(SU,Pvr),e(Yd,Bvr),e(Yd,RU),e(RU,Ivr),e(Yd,Nvr),e(Ko,qvr),e(Ko,Q9),e(Q9,jvr),e(Q9,aMe),e(aMe,Dvr),e(Q9,Gvr),e(Ko,Ovr),e(Ko,xt),M(H9,xt,null),e(xt,Vvr),e(xt,nMe),e(nMe,Xvr),e(xt,zvr),e(xt,Kd),e(Kd,Wvr),e(Kd,sMe),e(sMe,Qvr),e(Kd,Hvr),e(Kd,PU),e(PU,Uvr),e(Kd,Jvr),e(xt,Yvr),M(fE,xt,null),e(Ko,Kvr),e(Ko,bo),M(U9,bo,null),e(bo,Zvr),e(bo,lMe),e(lMe,e1r),e(bo,o1r),e(bo,tn),e(tn,r1r),e(tn,iMe),e(iMe,t1r),e(tn,a1r),e(tn,dMe),e(dMe,n1r),e(tn,s1r),e(tn,cMe),e(cMe,l1r),e(tn,i1r),e(bo,d1r),e(bo,J9),e(J9,gE),e(gE,mMe),e(mMe,c1r),e(gE,m1r),e(gE,BU),e(BU,f1r),e(gE,g1r),e(J9,h1r),e(J9,hE),e(hE,fMe),e(fMe,u1r),e(hE,p1r),e(hE,IU),e(IU,_1r),e(hE,b1r),e(bo,v1r),e(bo,uE),e(uE,F1r),e(uE,gMe),e(gMe,T1r),e(uE,M1r),e(uE,hMe),e(hMe,E1r),e(bo,C1r),M(pE,bo,null),b(m,$We,_),b(m,Zd,_),e(Zd,_E),e(_E,uMe),M(Y9,uMe,null),e(Zd,w1r),e(Zd,pMe),e(pMe,A1r),b(m,kWe,_),b(m,Zo,_),M(K9,Zo,null),e(Zo,L1r),e(Zo,ec),e(ec,y1r),e(ec,NU),e(NU,x1r),e(ec,$1r),e(ec,qU),e(qU,k1r),e(ec,S1r),e(Zo,R1r),e(Zo,Z9),e(Z9,P1r),e(Z9,_Me),e(_Me,B1r),e(Z9,I1r),e(Zo,N1r),e(Zo,$t),M(ex,$t,null),e($t,q1r),e($t,bMe),e(bMe,j1r),e($t,D1r),e($t,oc),e(oc,G1r),e(oc,vMe),e(vMe,O1r),e(oc,V1r),e(oc,jU),e(jU,X1r),e(oc,z1r),e($t,W1r),M(bE,$t,null),e(Zo,Q1r),e(Zo,vo),M(ox,vo,null),e(vo,H1r),e(vo,FMe),e(FMe,U1r),e(vo,J1r),e(vo,an),e(an,Y1r),e(an,TMe),e(TMe,K1r),e(an,Z1r),e(an,MMe),e(MMe,eFr),e(an,oFr),e(an,EMe),e(EMe,rFr),e(an,tFr),e(vo,aFr),e(vo,CMe),e(CMe,vE),e(vE,wMe),e(wMe,nFr),e(vE,sFr),e(vE,DU),e(DU,lFr),e(vE,iFr),e(vo,dFr),e(vo,FE),e(FE,cFr),e(FE,AMe),e(AMe,mFr),e(FE,fFr),e(FE,LMe),e(LMe,gFr),e(vo,hFr),M(TE,vo,null),b(m,SWe,_),b(m,rc,_),e(rc,ME),e(ME,yMe),M(rx,yMe,null),e(rc,uFr),e(rc,xMe),e(xMe,pFr),b(m,RWe,_),b(m,er,_),M(tx,er,null),e(er,_Fr),e(er,tc),e(tc,bFr),e(tc,GU),e(GU,vFr),e(tc,FFr),e(tc,OU),e(OU,TFr),e(tc,MFr),e(er,EFr),e(er,ax),e(ax,CFr),e(ax,$Me),e($Me,wFr),e(ax,AFr),e(er,LFr),e(er,kt),M(nx,kt,null),e(kt,yFr),e(kt,kMe),e(kMe,xFr),e(kt,$Fr),e(kt,ac),e(ac,kFr),e(ac,SMe),e(SMe,SFr),e(ac,RFr),e(ac,VU),e(VU,PFr),e(ac,BFr),e(kt,IFr),M(EE,kt,null),e(er,NFr),e(er,Fo),M(sx,Fo,null),e(Fo,qFr),e(Fo,RMe),e(RMe,jFr),e(Fo,DFr),e(Fo,nn),e(nn,GFr),e(nn,PMe),e(PMe,OFr),e(nn,VFr),e(nn,BMe),e(BMe,XFr),e(nn,zFr),e(nn,IMe),e(IMe,WFr),e(nn,QFr),e(Fo,HFr),e(Fo,at),e(at,CE),e(CE,NMe),e(NMe,UFr),e(CE,JFr),e(CE,XU),e(XU,YFr),e(CE,KFr),e(at,ZFr),e(at,wE),e(wE,qMe),e(qMe,eTr),e(wE,oTr),e(wE,zU),e(zU,rTr),e(wE,tTr),e(at,aTr),e(at,AE),e(AE,jMe),e(jMe,nTr),e(AE,sTr),e(AE,WU),e(WU,lTr),e(AE,iTr),e(at,dTr),e(at,LE),e(LE,DMe),e(DMe,cTr),e(LE,mTr),e(LE,QU),e(QU,fTr),e(LE,gTr),e(at,hTr),e(at,yE),e(yE,GMe),e(GMe,uTr),e(yE,pTr),e(yE,HU),e(HU,_Tr),e(yE,bTr),e(Fo,vTr),e(Fo,xE),e(xE,FTr),e(xE,OMe),e(OMe,TTr),e(xE,MTr),e(xE,VMe),e(VMe,ETr),e(Fo,CTr),M($E,Fo,null),b(m,PWe,_),b(m,nc,_),e(nc,kE),e(kE,XMe),M(lx,XMe,null),e(nc,wTr),e(nc,zMe),e(zMe,ATr),b(m,BWe,_),b(m,or,_),M(ix,or,null),e(or,LTr),e(or,sc),e(sc,yTr),e(sc,UU),e(UU,xTr),e(sc,$Tr),e(sc,JU),e(JU,kTr),e(sc,STr),e(or,RTr),e(or,dx),e(dx,PTr),e(dx,WMe),e(WMe,BTr),e(dx,ITr),e(or,NTr),e(or,St),M(cx,St,null),e(St,qTr),e(St,QMe),e(QMe,jTr),e(St,DTr),e(St,lc),e(lc,GTr),e(lc,HMe),e(HMe,OTr),e(lc,VTr),e(lc,YU),e(YU,XTr),e(lc,zTr),e(St,WTr),M(SE,St,null),e(or,QTr),e(or,To),M(mx,To,null),e(To,HTr),e(To,UMe),e(UMe,UTr),e(To,JTr),e(To,sn),e(sn,YTr),e(sn,JMe),e(JMe,KTr),e(sn,ZTr),e(sn,YMe),e(YMe,eMr),e(sn,oMr),e(sn,KMe),e(KMe,rMr),e(sn,tMr),e(To,aMr),e(To,ZMe),e(ZMe,RE),e(RE,e4e),e(e4e,nMr),e(RE,sMr),e(RE,KU),e(KU,lMr),e(RE,iMr),e(To,dMr),e(To,PE),e(PE,cMr),e(PE,o4e),e(o4e,mMr),e(PE,fMr),e(PE,r4e),e(r4e,gMr),e(To,hMr),M(BE,To,null),b(m,IWe,_),b(m,ic,_),e(ic,IE),e(IE,t4e),M(fx,t4e,null),e(ic,uMr),e(ic,a4e),e(a4e,pMr),b(m,NWe,_),b(m,rr,_),M(gx,rr,null),e(rr,_Mr),e(rr,dc),e(dc,bMr),e(dc,ZU),e(ZU,vMr),e(dc,FMr),e(dc,eJ),e(eJ,TMr),e(dc,MMr),e(rr,EMr),e(rr,hx),e(hx,CMr),e(hx,n4e),e(n4e,wMr),e(hx,AMr),e(rr,LMr),e(rr,Rt),M(ux,Rt,null),e(Rt,yMr),e(Rt,s4e),e(s4e,xMr),e(Rt,$Mr),e(Rt,cc),e(cc,kMr),e(cc,l4e),e(l4e,SMr),e(cc,RMr),e(cc,oJ),e(oJ,PMr),e(cc,BMr),e(Rt,IMr),M(NE,Rt,null),e(rr,NMr),e(rr,$r),M(px,$r,null),e($r,qMr),e($r,i4e),e(i4e,jMr),e($r,DMr),e($r,ln),e(ln,GMr),e(ln,d4e),e(d4e,OMr),e(ln,VMr),e(ln,c4e),e(c4e,XMr),e(ln,zMr),e(ln,m4e),e(m4e,WMr),e(ln,QMr),e($r,HMr),e($r,I),e(I,qE),e(qE,f4e),e(f4e,UMr),e(qE,JMr),e(qE,rJ),e(rJ,YMr),e(qE,KMr),e(I,ZMr),e(I,jE),e(jE,g4e),e(g4e,e4r),e(jE,o4r),e(jE,tJ),e(tJ,r4r),e(jE,t4r),e(I,a4r),e(I,DE),e(DE,h4e),e(h4e,n4r),e(DE,s4r),e(DE,aJ),e(aJ,l4r),e(DE,i4r),e(I,d4r),e(I,GE),e(GE,u4e),e(u4e,c4r),e(GE,m4r),e(GE,nJ),e(nJ,f4r),e(GE,g4r),e(I,h4r),e(I,OE),e(OE,p4e),e(p4e,u4r),e(OE,p4r),e(OE,sJ),e(sJ,_4r),e(OE,b4r),e(I,v4r),e(I,VE),e(VE,_4e),e(_4e,F4r),e(VE,T4r),e(VE,lJ),e(lJ,M4r),e(VE,E4r),e(I,C4r),e(I,XE),e(XE,b4e),e(b4e,w4r),e(XE,A4r),e(XE,iJ),e(iJ,L4r),e(XE,y4r),e(I,x4r),e(I,zE),e(zE,v4e),e(v4e,$4r),e(zE,k4r),e(zE,dJ),e(dJ,S4r),e(zE,R4r),e(I,P4r),e(I,WE),e(WE,F4e),e(F4e,B4r),e(WE,I4r),e(WE,cJ),e(cJ,N4r),e(WE,q4r),e(I,j4r),e(I,QE),e(QE,T4e),e(T4e,D4r),e(QE,G4r),e(QE,mJ),e(mJ,O4r),e(QE,V4r),e(I,X4r),e(I,HE),e(HE,M4e),e(M4e,z4r),e(HE,W4r),e(HE,fJ),e(fJ,Q4r),e(HE,H4r),e(I,U4r),e(I,UE),e(UE,E4e),e(E4e,J4r),e(UE,Y4r),e(UE,gJ),e(gJ,K4r),e(UE,Z4r),e(I,eEr),e(I,JE),e(JE,C4e),e(C4e,oEr),e(JE,rEr),e(JE,hJ),e(hJ,tEr),e(JE,aEr),e(I,nEr),e(I,YE),e(YE,w4e),e(w4e,sEr),e(YE,lEr),e(YE,uJ),e(uJ,iEr),e(YE,dEr),e(I,cEr),e(I,KE),e(KE,A4e),e(A4e,mEr),e(KE,fEr),e(KE,pJ),e(pJ,gEr),e(KE,hEr),e(I,uEr),e(I,ZE),e(ZE,L4e),e(L4e,pEr),e(ZE,_Er),e(ZE,_J),e(_J,bEr),e(ZE,vEr),e(I,FEr),e(I,eC),e(eC,y4e),e(y4e,TEr),e(eC,MEr),e(eC,bJ),e(bJ,EEr),e(eC,CEr),e(I,wEr),e(I,oC),e(oC,x4e),e(x4e,AEr),e(oC,LEr),e(oC,vJ),e(vJ,yEr),e(oC,xEr),e(I,$Er),e(I,Zs),e(Zs,$4e),e($4e,kEr),e(Zs,SEr),e(Zs,FJ),e(FJ,REr),e(Zs,PEr),e(Zs,TJ),e(TJ,BEr),e(Zs,IEr),e(I,NEr),e(I,rC),e(rC,k4e),e(k4e,qEr),e(rC,jEr),e(rC,MJ),e(MJ,DEr),e(rC,GEr),e(I,OEr),e(I,tC),e(tC,S4e),e(S4e,VEr),e(tC,XEr),e(tC,EJ),e(EJ,zEr),e(tC,WEr),e(I,QEr),e(I,aC),e(aC,R4e),e(R4e,HEr),e(aC,UEr),e(aC,CJ),e(CJ,JEr),e(aC,YEr),e(I,KEr),e(I,nC),e(nC,P4e),e(P4e,ZEr),e(nC,eCr),e(nC,wJ),e(wJ,oCr),e(nC,rCr),e(I,tCr),e(I,sC),e(sC,B4e),e(B4e,aCr),e(sC,nCr),e(sC,AJ),e(AJ,sCr),e(sC,lCr),e(I,iCr),e(I,lC),e(lC,I4e),e(I4e,dCr),e(lC,cCr),e(lC,LJ),e(LJ,mCr),e(lC,fCr),e(I,gCr),e(I,iC),e(iC,N4e),e(N4e,hCr),e(iC,uCr),e(iC,yJ),e(yJ,pCr),e(iC,_Cr),e(I,bCr),e(I,dC),e(dC,q4e),e(q4e,vCr),e(dC,FCr),e(dC,xJ),e(xJ,TCr),e(dC,MCr),e(I,ECr),e(I,cC),e(cC,j4e),e(j4e,CCr),e(cC,wCr),e(cC,$J),e($J,ACr),e(cC,LCr),e(I,yCr),e(I,mC),e(mC,D4e),e(D4e,xCr),e(mC,$Cr),e(mC,kJ),e(kJ,kCr),e(mC,SCr),e(I,RCr),e(I,fC),e(fC,G4e),e(G4e,PCr),e(fC,BCr),e(fC,SJ),e(SJ,ICr),e(fC,NCr),e(I,qCr),e(I,gC),e(gC,O4e),e(O4e,jCr),e(gC,DCr),e(gC,RJ),e(RJ,GCr),e(gC,OCr),e(I,VCr),e(I,hC),e(hC,V4e),e(V4e,XCr),e(hC,zCr),e(hC,PJ),e(PJ,WCr),e(hC,QCr),e(I,HCr),e(I,uC),e(uC,X4e),e(X4e,UCr),e(uC,JCr),e(uC,BJ),e(BJ,YCr),e(uC,KCr),e(I,ZCr),e(I,pC),e(pC,z4e),e(z4e,e5r),e(pC,o5r),e(pC,IJ),e(IJ,r5r),e(pC,t5r),e(I,a5r),e(I,_C),e(_C,W4e),e(W4e,n5r),e(_C,s5r),e(_C,NJ),e(NJ,l5r),e(_C,i5r),e(I,d5r),e(I,bC),e(bC,Q4e),e(Q4e,c5r),e(bC,m5r),e(bC,qJ),e(qJ,f5r),e(bC,g5r),e(I,h5r),e(I,vC),e(vC,H4e),e(H4e,u5r),e(vC,p5r),e(vC,jJ),e(jJ,_5r),e(vC,b5r),e(I,v5r),e(I,FC),e(FC,U4e),e(U4e,F5r),e(FC,T5r),e(FC,DJ),e(DJ,M5r),e(FC,E5r),e(I,C5r),e(I,TC),e(TC,J4e),e(J4e,w5r),e(TC,A5r),e(TC,GJ),e(GJ,L5r),e(TC,y5r),e(I,x5r),e(I,MC),e(MC,Y4e),e(Y4e,$5r),e(MC,k5r),e(MC,OJ),e(OJ,S5r),e(MC,R5r),e(I,P5r),e(I,EC),e(EC,K4e),e(K4e,B5r),e(EC,I5r),e(EC,VJ),e(VJ,N5r),e(EC,q5r),e(I,j5r),e(I,CC),e(CC,Z4e),e(Z4e,D5r),e(CC,G5r),e(CC,XJ),e(XJ,O5r),e(CC,V5r),e(I,X5r),e(I,wC),e(wC,eEe),e(eEe,z5r),e(wC,W5r),e(wC,zJ),e(zJ,Q5r),e(wC,H5r),e(I,U5r),e(I,AC),e(AC,oEe),e(oEe,J5r),e(AC,Y5r),e(AC,WJ),e(WJ,K5r),e(AC,Z5r),e(I,e3r),e(I,LC),e(LC,rEe),e(rEe,o3r),e(LC,r3r),e(LC,QJ),e(QJ,t3r),e(LC,a3r),e(I,n3r),e(I,yC),e(yC,tEe),e(tEe,s3r),e(yC,l3r),e(yC,HJ),e(HJ,i3r),e(yC,d3r),e(I,c3r),e(I,xC),e(xC,aEe),e(aEe,m3r),e(xC,f3r),e(xC,UJ),e(UJ,g3r),e(xC,h3r),e(I,u3r),e(I,$C),e($C,nEe),e(nEe,p3r),e($C,_3r),e($C,JJ),e(JJ,b3r),e($C,v3r),e(I,F3r),e(I,kC),e(kC,sEe),e(sEe,T3r),e(kC,M3r),e(kC,YJ),e(YJ,E3r),e(kC,C3r),e(I,w3r),e(I,SC),e(SC,lEe),e(lEe,A3r),e(SC,L3r),e(SC,KJ),e(KJ,y3r),e(SC,x3r),e(I,$3r),e(I,RC),e(RC,iEe),e(iEe,k3r),e(RC,S3r),e(RC,ZJ),e(ZJ,R3r),e(RC,P3r),e($r,B3r),M(PC,$r,null),b(m,qWe,_),b(m,mc,_),e(mc,BC),e(BC,dEe),M(_x,dEe,null),e(mc,I3r),e(mc,cEe),e(cEe,N3r),b(m,jWe,_),b(m,tr,_),M(bx,tr,null),e(tr,q3r),e(tr,fc),e(fc,j3r),e(fc,eY),e(eY,D3r),e(fc,G3r),e(fc,oY),e(oY,O3r),e(fc,V3r),e(tr,X3r),e(tr,vx),e(vx,z3r),e(vx,mEe),e(mEe,W3r),e(vx,Q3r),e(tr,H3r),e(tr,Pt),M(Fx,Pt,null),e(Pt,U3r),e(Pt,fEe),e(fEe,J3r),e(Pt,Y3r),e(Pt,gc),e(gc,K3r),e(gc,gEe),e(gEe,Z3r),e(gc,e0r),e(gc,rY),e(rY,o0r),e(gc,r0r),e(Pt,t0r),M(IC,Pt,null),e(tr,a0r),e(tr,kr),M(Tx,kr,null),e(kr,n0r),e(kr,hEe),e(hEe,s0r),e(kr,l0r),e(kr,dn),e(dn,i0r),e(dn,uEe),e(uEe,d0r),e(dn,c0r),e(dn,pEe),e(pEe,m0r),e(dn,f0r),e(dn,_Ee),e(_Ee,g0r),e(dn,h0r),e(kr,u0r),e(kr,se),e(se,NC),e(NC,bEe),e(bEe,p0r),e(NC,_0r),e(NC,tY),e(tY,b0r),e(NC,v0r),e(se,F0r),e(se,qC),e(qC,vEe),e(vEe,T0r),e(qC,M0r),e(qC,aY),e(aY,E0r),e(qC,C0r),e(se,w0r),e(se,jC),e(jC,FEe),e(FEe,A0r),e(jC,L0r),e(jC,nY),e(nY,y0r),e(jC,x0r),e(se,$0r),e(se,DC),e(DC,TEe),e(TEe,k0r),e(DC,S0r),e(DC,sY),e(sY,R0r),e(DC,P0r),e(se,B0r),e(se,GC),e(GC,MEe),e(MEe,I0r),e(GC,N0r),e(GC,lY),e(lY,q0r),e(GC,j0r),e(se,D0r),e(se,OC),e(OC,EEe),e(EEe,G0r),e(OC,O0r),e(OC,iY),e(iY,V0r),e(OC,X0r),e(se,z0r),e(se,VC),e(VC,CEe),e(CEe,W0r),e(VC,Q0r),e(VC,dY),e(dY,H0r),e(VC,U0r),e(se,J0r),e(se,XC),e(XC,wEe),e(wEe,Y0r),e(XC,K0r),e(XC,cY),e(cY,Z0r),e(XC,ewr),e(se,owr),e(se,zC),e(zC,AEe),e(AEe,rwr),e(zC,twr),e(zC,mY),e(mY,awr),e(zC,nwr),e(se,swr),e(se,WC),e(WC,LEe),e(LEe,lwr),e(WC,iwr),e(WC,fY),e(fY,dwr),e(WC,cwr),e(se,mwr),e(se,QC),e(QC,yEe),e(yEe,fwr),e(QC,gwr),e(QC,gY),e(gY,hwr),e(QC,uwr),e(se,pwr),e(se,HC),e(HC,xEe),e(xEe,_wr),e(HC,bwr),e(HC,hY),e(hY,vwr),e(HC,Fwr),e(se,Twr),e(se,UC),e(UC,$Ee),e($Ee,Mwr),e(UC,Ewr),e(UC,uY),e(uY,Cwr),e(UC,wwr),e(se,Awr),e(se,JC),e(JC,kEe),e(kEe,Lwr),e(JC,ywr),e(JC,pY),e(pY,xwr),e(JC,$wr),e(se,kwr),e(se,YC),e(YC,SEe),e(SEe,Swr),e(YC,Rwr),e(YC,_Y),e(_Y,Pwr),e(YC,Bwr),e(se,Iwr),e(se,KC),e(KC,REe),e(REe,Nwr),e(KC,qwr),e(KC,bY),e(bY,jwr),e(KC,Dwr),e(se,Gwr),e(se,ZC),e(ZC,PEe),e(PEe,Owr),e(ZC,Vwr),e(ZC,vY),e(vY,Xwr),e(ZC,zwr),e(se,Wwr),e(se,e5),e(e5,BEe),e(BEe,Qwr),e(e5,Hwr),e(e5,FY),e(FY,Uwr),e(e5,Jwr),e(se,Ywr),e(se,o5),e(o5,IEe),e(IEe,Kwr),e(o5,Zwr),e(o5,TY),e(TY,e6r),e(o5,o6r),e(se,r6r),e(se,r5),e(r5,NEe),e(NEe,t6r),e(r5,a6r),e(r5,MY),e(MY,n6r),e(r5,s6r),e(se,l6r),e(se,t5),e(t5,qEe),e(qEe,i6r),e(t5,d6r),e(t5,EY),e(EY,c6r),e(t5,m6r),e(se,f6r),e(se,a5),e(a5,jEe),e(jEe,g6r),e(a5,h6r),e(a5,CY),e(CY,u6r),e(a5,p6r),e(se,_6r),e(se,n5),e(n5,DEe),e(DEe,b6r),e(n5,v6r),e(n5,wY),e(wY,F6r),e(n5,T6r),e(kr,M6r),M(s5,kr,null),b(m,DWe,_),b(m,hc,_),e(hc,l5),e(l5,GEe),M(Mx,GEe,null),e(hc,E6r),e(hc,OEe),e(OEe,C6r),b(m,GWe,_),b(m,ar,_),M(Ex,ar,null),e(ar,w6r),e(ar,uc),e(uc,A6r),e(uc,AY),e(AY,L6r),e(uc,y6r),e(uc,LY),e(LY,x6r),e(uc,$6r),e(ar,k6r),e(ar,Cx),e(Cx,S6r),e(Cx,VEe),e(VEe,R6r),e(Cx,P6r),e(ar,B6r),e(ar,Bt),M(wx,Bt,null),e(Bt,I6r),e(Bt,XEe),e(XEe,N6r),e(Bt,q6r),e(Bt,pc),e(pc,j6r),e(pc,zEe),e(zEe,D6r),e(pc,G6r),e(pc,yY),e(yY,O6r),e(pc,V6r),e(Bt,X6r),M(i5,Bt,null),e(ar,z6r),e(ar,Sr),M(Ax,Sr,null),e(Sr,W6r),e(Sr,WEe),e(WEe,Q6r),e(Sr,H6r),e(Sr,cn),e(cn,U6r),e(cn,QEe),e(QEe,J6r),e(cn,Y6r),e(cn,HEe),e(HEe,K6r),e(cn,Z6r),e(cn,UEe),e(UEe,eAr),e(cn,oAr),e(Sr,rAr),e(Sr,Me),e(Me,d5),e(d5,JEe),e(JEe,tAr),e(d5,aAr),e(d5,xY),e(xY,nAr),e(d5,sAr),e(Me,lAr),e(Me,c5),e(c5,YEe),e(YEe,iAr),e(c5,dAr),e(c5,$Y),e($Y,cAr),e(c5,mAr),e(Me,fAr),e(Me,m5),e(m5,KEe),e(KEe,gAr),e(m5,hAr),e(m5,kY),e(kY,uAr),e(m5,pAr),e(Me,_Ar),e(Me,f5),e(f5,ZEe),e(ZEe,bAr),e(f5,vAr),e(f5,SY),e(SY,FAr),e(f5,TAr),e(Me,MAr),e(Me,g5),e(g5,eCe),e(eCe,EAr),e(g5,CAr),e(g5,RY),e(RY,wAr),e(g5,AAr),e(Me,LAr),e(Me,h5),e(h5,oCe),e(oCe,yAr),e(h5,xAr),e(h5,PY),e(PY,$Ar),e(h5,kAr),e(Me,SAr),e(Me,u5),e(u5,rCe),e(rCe,RAr),e(u5,PAr),e(u5,BY),e(BY,BAr),e(u5,IAr),e(Me,NAr),e(Me,p5),e(p5,tCe),e(tCe,qAr),e(p5,jAr),e(p5,IY),e(IY,DAr),e(p5,GAr),e(Me,OAr),e(Me,_5),e(_5,aCe),e(aCe,VAr),e(_5,XAr),e(_5,NY),e(NY,zAr),e(_5,WAr),e(Me,QAr),e(Me,b5),e(b5,nCe),e(nCe,HAr),e(b5,UAr),e(b5,qY),e(qY,JAr),e(b5,YAr),e(Me,KAr),e(Me,v5),e(v5,sCe),e(sCe,ZAr),e(v5,e7r),e(v5,jY),e(jY,o7r),e(v5,r7r),e(Me,t7r),e(Me,F5),e(F5,lCe),e(lCe,a7r),e(F5,n7r),e(F5,DY),e(DY,s7r),e(F5,l7r),e(Me,i7r),e(Me,T5),e(T5,iCe),e(iCe,d7r),e(T5,c7r),e(T5,GY),e(GY,m7r),e(T5,f7r),e(Sr,g7r),M(M5,Sr,null),b(m,OWe,_),b(m,_c,_),e(_c,E5),e(E5,dCe),M(Lx,dCe,null),e(_c,h7r),e(_c,cCe),e(cCe,u7r),b(m,VWe,_),b(m,nr,_),M(yx,nr,null),e(nr,p7r),e(nr,bc),e(bc,_7r),e(bc,OY),e(OY,b7r),e(bc,v7r),e(bc,VY),e(VY,F7r),e(bc,T7r),e(nr,M7r),e(nr,xx),e(xx,E7r),e(xx,mCe),e(mCe,C7r),e(xx,w7r),e(nr,A7r),e(nr,It),M($x,It,null),e(It,L7r),e(It,fCe),e(fCe,y7r),e(It,x7r),e(It,vc),e(vc,$7r),e(vc,gCe),e(gCe,k7r),e(vc,S7r),e(vc,XY),e(XY,R7r),e(vc,P7r),e(It,B7r),M(C5,It,null),e(nr,I7r),e(nr,Rr),M(kx,Rr,null),e(Rr,N7r),e(Rr,hCe),e(hCe,q7r),e(Rr,j7r),e(Rr,mn),e(mn,D7r),e(mn,uCe),e(uCe,G7r),e(mn,O7r),e(mn,pCe),e(pCe,V7r),e(mn,X7r),e(mn,_Ce),e(_Ce,z7r),e(mn,W7r),e(Rr,Q7r),e(Rr,Ve),e(Ve,w5),e(w5,bCe),e(bCe,H7r),e(w5,U7r),e(w5,zY),e(zY,J7r),e(w5,Y7r),e(Ve,K7r),e(Ve,A5),e(A5,vCe),e(vCe,Z7r),e(A5,eLr),e(A5,WY),e(WY,oLr),e(A5,rLr),e(Ve,tLr),e(Ve,el),e(el,FCe),e(FCe,aLr),e(el,nLr),e(el,QY),e(QY,sLr),e(el,lLr),e(el,HY),e(HY,iLr),e(el,dLr),e(Ve,cLr),e(Ve,L5),e(L5,TCe),e(TCe,mLr),e(L5,fLr),e(L5,UY),e(UY,gLr),e(L5,hLr),e(Ve,uLr),e(Ve,y5),e(y5,MCe),e(MCe,pLr),e(y5,_Lr),e(y5,JY),e(JY,bLr),e(y5,vLr),e(Ve,FLr),e(Ve,x5),e(x5,ECe),e(ECe,TLr),e(x5,MLr),e(x5,YY),e(YY,ELr),e(x5,CLr),e(Ve,wLr),e(Ve,$5),e($5,CCe),e(CCe,ALr),e($5,LLr),e($5,KY),e(KY,yLr),e($5,xLr),e(Ve,$Lr),e(Ve,k5),e(k5,wCe),e(wCe,kLr),e(k5,SLr),e(k5,ZY),e(ZY,RLr),e(k5,PLr),e(Rr,BLr),M(S5,Rr,null),b(m,XWe,_),b(m,Fc,_),e(Fc,R5),e(R5,ACe),M(Sx,ACe,null),e(Fc,ILr),e(Fc,LCe),e(LCe,NLr),b(m,zWe,_),b(m,sr,_),M(Rx,sr,null),e(sr,qLr),e(sr,Tc),e(Tc,jLr),e(Tc,eK),e(eK,DLr),e(Tc,GLr),e(Tc,oK),e(oK,OLr),e(Tc,VLr),e(sr,XLr),e(sr,Px),e(Px,zLr),e(Px,yCe),e(yCe,WLr),e(Px,QLr),e(sr,HLr),e(sr,Nt),M(Bx,Nt,null),e(Nt,ULr),e(Nt,xCe),e(xCe,JLr),e(Nt,YLr),e(Nt,Mc),e(Mc,KLr),e(Mc,$Ce),e($Ce,ZLr),e(Mc,eyr),e(Mc,rK),e(rK,oyr),e(Mc,ryr),e(Nt,tyr),M(P5,Nt,null),e(sr,ayr),e(sr,Pr),M(Ix,Pr,null),e(Pr,nyr),e(Pr,kCe),e(kCe,syr),e(Pr,lyr),e(Pr,fn),e(fn,iyr),e(fn,SCe),e(SCe,dyr),e(fn,cyr),e(fn,RCe),e(RCe,myr),e(fn,fyr),e(fn,PCe),e(PCe,gyr),e(fn,hyr),e(Pr,uyr),e(Pr,ie),e(ie,B5),e(B5,BCe),e(BCe,pyr),e(B5,_yr),e(B5,tK),e(tK,byr),e(B5,vyr),e(ie,Fyr),e(ie,I5),e(I5,ICe),e(ICe,Tyr),e(I5,Myr),e(I5,aK),e(aK,Eyr),e(I5,Cyr),e(ie,wyr),e(ie,N5),e(N5,NCe),e(NCe,Ayr),e(N5,Lyr),e(N5,nK),e(nK,yyr),e(N5,xyr),e(ie,$yr),e(ie,q5),e(q5,qCe),e(qCe,kyr),e(q5,Syr),e(q5,sK),e(sK,Ryr),e(q5,Pyr),e(ie,Byr),e(ie,j5),e(j5,jCe),e(jCe,Iyr),e(j5,Nyr),e(j5,lK),e(lK,qyr),e(j5,jyr),e(ie,Dyr),e(ie,D5),e(D5,DCe),e(DCe,Gyr),e(D5,Oyr),e(D5,iK),e(iK,Vyr),e(D5,Xyr),e(ie,zyr),e(ie,G5),e(G5,GCe),e(GCe,Wyr),e(G5,Qyr),e(G5,dK),e(dK,Hyr),e(G5,Uyr),e(ie,Jyr),e(ie,O5),e(O5,OCe),e(OCe,Yyr),e(O5,Kyr),e(O5,cK),e(cK,Zyr),e(O5,e8r),e(ie,o8r),e(ie,V5),e(V5,VCe),e(VCe,r8r),e(V5,t8r),e(V5,mK),e(mK,a8r),e(V5,n8r),e(ie,s8r),e(ie,X5),e(X5,XCe),e(XCe,l8r),e(X5,i8r),e(X5,fK),e(fK,d8r),e(X5,c8r),e(ie,m8r),e(ie,z5),e(z5,zCe),e(zCe,f8r),e(z5,g8r),e(z5,gK),e(gK,h8r),e(z5,u8r),e(ie,p8r),e(ie,W5),e(W5,WCe),e(WCe,_8r),e(W5,b8r),e(W5,hK),e(hK,v8r),e(W5,F8r),e(ie,T8r),e(ie,Q5),e(Q5,QCe),e(QCe,M8r),e(Q5,E8r),e(Q5,uK),e(uK,C8r),e(Q5,w8r),e(ie,A8r),e(ie,H5),e(H5,HCe),e(HCe,L8r),e(H5,y8r),e(H5,pK),e(pK,x8r),e(H5,$8r),e(ie,k8r),e(ie,U5),e(U5,UCe),e(UCe,S8r),e(U5,R8r),e(U5,_K),e(_K,P8r),e(U5,B8r),e(ie,I8r),e(ie,J5),e(J5,JCe),e(JCe,N8r),e(J5,q8r),e(J5,bK),e(bK,j8r),e(J5,D8r),e(ie,G8r),e(ie,Y5),e(Y5,YCe),e(YCe,O8r),e(Y5,V8r),e(Y5,vK),e(vK,X8r),e(Y5,z8r),e(ie,W8r),e(ie,K5),e(K5,KCe),e(KCe,Q8r),e(K5,H8r),e(K5,FK),e(FK,U8r),e(K5,J8r),e(ie,Y8r),e(ie,Z5),e(Z5,ZCe),e(ZCe,K8r),e(Z5,Z8r),e(Z5,TK),e(TK,e9r),e(Z5,o9r),e(ie,r9r),e(ie,e3),e(e3,e5e),e(e5e,t9r),e(e3,a9r),e(e3,MK),e(MK,n9r),e(e3,s9r),e(Pr,l9r),M(o3,Pr,null),b(m,WWe,_),b(m,Ec,_),e(Ec,r3),e(r3,o5e),M(Nx,o5e,null),e(Ec,i9r),e(Ec,r5e),e(r5e,d9r),b(m,QWe,_),b(m,lr,_),M(qx,lr,null),e(lr,c9r),e(lr,Cc),e(Cc,m9r),e(Cc,EK),e(EK,f9r),e(Cc,g9r),e(Cc,CK),e(CK,h9r),e(Cc,u9r),e(lr,p9r),e(lr,jx),e(jx,_9r),e(jx,t5e),e(t5e,b9r),e(jx,v9r),e(lr,F9r),e(lr,qt),M(Dx,qt,null),e(qt,T9r),e(qt,a5e),e(a5e,M9r),e(qt,E9r),e(qt,wc),e(wc,C9r),e(wc,n5e),e(n5e,w9r),e(wc,A9r),e(wc,wK),e(wK,L9r),e(wc,y9r),e(qt,x9r),M(t3,qt,null),e(lr,$9r),e(lr,Br),M(Gx,Br,null),e(Br,k9r),e(Br,s5e),e(s5e,S9r),e(Br,R9r),e(Br,gn),e(gn,P9r),e(gn,l5e),e(l5e,B9r),e(gn,I9r),e(gn,i5e),e(i5e,N9r),e(gn,q9r),e(gn,d5e),e(d5e,j9r),e(gn,D9r),e(Br,G9r),e(Br,ye),e(ye,a3),e(a3,c5e),e(c5e,O9r),e(a3,V9r),e(a3,AK),e(AK,X9r),e(a3,z9r),e(ye,W9r),e(ye,n3),e(n3,m5e),e(m5e,Q9r),e(n3,H9r),e(n3,LK),e(LK,U9r),e(n3,J9r),e(ye,Y9r),e(ye,s3),e(s3,f5e),e(f5e,K9r),e(s3,Z9r),e(s3,yK),e(yK,exr),e(s3,oxr),e(ye,rxr),e(ye,l3),e(l3,g5e),e(g5e,txr),e(l3,axr),e(l3,xK),e(xK,nxr),e(l3,sxr),e(ye,lxr),e(ye,i3),e(i3,h5e),e(h5e,ixr),e(i3,dxr),e(i3,$K),e($K,cxr),e(i3,mxr),e(ye,fxr),e(ye,d3),e(d3,u5e),e(u5e,gxr),e(d3,hxr),e(d3,kK),e(kK,uxr),e(d3,pxr),e(ye,_xr),e(ye,c3),e(c3,p5e),e(p5e,bxr),e(c3,vxr),e(c3,SK),e(SK,Fxr),e(c3,Txr),e(ye,Mxr),e(ye,m3),e(m3,_5e),e(_5e,Exr),e(m3,Cxr),e(m3,RK),e(RK,wxr),e(m3,Axr),e(ye,Lxr),e(ye,f3),e(f3,b5e),e(b5e,yxr),e(f3,xxr),e(f3,PK),e(PK,$xr),e(f3,kxr),e(ye,Sxr),e(ye,g3),e(g3,v5e),e(v5e,Rxr),e(g3,Pxr),e(g3,BK),e(BK,Bxr),e(g3,Ixr),e(Br,Nxr),M(h3,Br,null),b(m,HWe,_),b(m,Ac,_),e(Ac,u3),e(u3,F5e),M(Ox,F5e,null),e(Ac,qxr),e(Ac,T5e),e(T5e,jxr),b(m,UWe,_),b(m,ir,_),M(Vx,ir,null),e(ir,Dxr),e(ir,Lc),e(Lc,Gxr),e(Lc,IK),e(IK,Oxr),e(Lc,Vxr),e(Lc,NK),e(NK,Xxr),e(Lc,zxr),e(ir,Wxr),e(ir,Xx),e(Xx,Qxr),e(Xx,M5e),e(M5e,Hxr),e(Xx,Uxr),e(ir,Jxr),e(ir,jt),M(zx,jt,null),e(jt,Yxr),e(jt,E5e),e(E5e,Kxr),e(jt,Zxr),e(jt,yc),e(yc,e$r),e(yc,C5e),e(C5e,o$r),e(yc,r$r),e(yc,qK),e(qK,t$r),e(yc,a$r),e(jt,n$r),M(p3,jt,null),e(ir,s$r),e(ir,Ir),M(Wx,Ir,null),e(Ir,l$r),e(Ir,w5e),e(w5e,i$r),e(Ir,d$r),e(Ir,hn),e(hn,c$r),e(hn,A5e),e(A5e,m$r),e(hn,f$r),e(hn,L5e),e(L5e,g$r),e(hn,h$r),e(hn,y5e),e(y5e,u$r),e(hn,p$r),e(Ir,_$r),e(Ir,te),e(te,_3),e(_3,x5e),e(x5e,b$r),e(_3,v$r),e(_3,jK),e(jK,F$r),e(_3,T$r),e(te,M$r),e(te,b3),e(b3,$5e),e($5e,E$r),e(b3,C$r),e(b3,DK),e(DK,w$r),e(b3,A$r),e(te,L$r),e(te,v3),e(v3,k5e),e(k5e,y$r),e(v3,x$r),e(v3,GK),e(GK,$$r),e(v3,k$r),e(te,S$r),e(te,F3),e(F3,S5e),e(S5e,R$r),e(F3,P$r),e(F3,OK),e(OK,B$r),e(F3,I$r),e(te,N$r),e(te,T3),e(T3,R5e),e(R5e,q$r),e(T3,j$r),e(T3,VK),e(VK,D$r),e(T3,G$r),e(te,O$r),e(te,M3),e(M3,P5e),e(P5e,V$r),e(M3,X$r),e(M3,XK),e(XK,z$r),e(M3,W$r),e(te,Q$r),e(te,E3),e(E3,B5e),e(B5e,H$r),e(E3,U$r),e(E3,zK),e(zK,J$r),e(E3,Y$r),e(te,K$r),e(te,C3),e(C3,I5e),e(I5e,Z$r),e(C3,ekr),e(C3,WK),e(WK,okr),e(C3,rkr),e(te,tkr),e(te,w3),e(w3,N5e),e(N5e,akr),e(w3,nkr),e(w3,QK),e(QK,skr),e(w3,lkr),e(te,ikr),e(te,A3),e(A3,q5e),e(q5e,dkr),e(A3,ckr),e(A3,HK),e(HK,mkr),e(A3,fkr),e(te,gkr),e(te,L3),e(L3,j5e),e(j5e,hkr),e(L3,ukr),e(L3,UK),e(UK,pkr),e(L3,_kr),e(te,bkr),e(te,y3),e(y3,D5e),e(D5e,vkr),e(y3,Fkr),e(y3,JK),e(JK,Tkr),e(y3,Mkr),e(te,Ekr),e(te,x3),e(x3,G5e),e(G5e,Ckr),e(x3,wkr),e(x3,YK),e(YK,Akr),e(x3,Lkr),e(te,ykr),e(te,$3),e($3,O5e),e(O5e,xkr),e($3,$kr),e($3,KK),e(KK,kkr),e($3,Skr),e(te,Rkr),e(te,k3),e(k3,V5e),e(V5e,Pkr),e(k3,Bkr),e(k3,ZK),e(ZK,Ikr),e(k3,Nkr),e(te,qkr),e(te,S3),e(S3,X5e),e(X5e,jkr),e(S3,Dkr),e(S3,eZ),e(eZ,Gkr),e(S3,Okr),e(te,Vkr),e(te,R3),e(R3,z5e),e(z5e,Xkr),e(R3,zkr),e(R3,oZ),e(oZ,Wkr),e(R3,Qkr),e(te,Hkr),e(te,P3),e(P3,W5e),e(W5e,Ukr),e(P3,Jkr),e(P3,rZ),e(rZ,Ykr),e(P3,Kkr),e(te,Zkr),e(te,B3),e(B3,Q5e),e(Q5e,eSr),e(B3,oSr),e(B3,tZ),e(tZ,rSr),e(B3,tSr),e(te,aSr),e(te,I3),e(I3,H5e),e(H5e,nSr),e(I3,sSr),e(I3,aZ),e(aZ,lSr),e(I3,iSr),e(te,dSr),e(te,N3),e(N3,U5e),e(U5e,cSr),e(N3,mSr),e(N3,nZ),e(nZ,fSr),e(N3,gSr),e(te,hSr),e(te,q3),e(q3,J5e),e(J5e,uSr),e(q3,pSr),e(q3,sZ),e(sZ,_Sr),e(q3,bSr),e(te,vSr),e(te,j3),e(j3,Y5e),e(Y5e,FSr),e(j3,TSr),e(j3,lZ),e(lZ,MSr),e(j3,ESr),e(te,CSr),e(te,D3),e(D3,K5e),e(K5e,wSr),e(D3,ASr),e(D3,iZ),e(iZ,LSr),e(D3,ySr),e(te,xSr),e(te,G3),e(G3,Z5e),e(Z5e,$Sr),e(G3,kSr),e(G3,dZ),e(dZ,SSr),e(G3,RSr),e(te,PSr),e(te,O3),e(O3,e3e),e(e3e,BSr),e(O3,ISr),e(O3,cZ),e(cZ,NSr),e(O3,qSr),e(Ir,jSr),M(V3,Ir,null),b(m,JWe,_),b(m,xc,_),e(xc,X3),e(X3,o3e),M(Qx,o3e,null),e(xc,DSr),e(xc,r3e),e(r3e,GSr),b(m,YWe,_),b(m,dr,_),M(Hx,dr,null),e(dr,OSr),e(dr,$c),e($c,VSr),e($c,mZ),e(mZ,XSr),e($c,zSr),e($c,fZ),e(fZ,WSr),e($c,QSr),e(dr,HSr),e(dr,Ux),e(Ux,USr),e(Ux,t3e),e(t3e,JSr),e(Ux,YSr),e(dr,KSr),e(dr,Dt),M(Jx,Dt,null),e(Dt,ZSr),e(Dt,a3e),e(a3e,eRr),e(Dt,oRr),e(Dt,kc),e(kc,rRr),e(kc,n3e),e(n3e,tRr),e(kc,aRr),e(kc,gZ),e(gZ,nRr),e(kc,sRr),e(Dt,lRr),M(z3,Dt,null),e(dr,iRr),e(dr,Nr),M(Yx,Nr,null),e(Nr,dRr),e(Nr,s3e),e(s3e,cRr),e(Nr,mRr),e(Nr,un),e(un,fRr),e(un,l3e),e(l3e,gRr),e(un,hRr),e(un,i3e),e(i3e,uRr),e(un,pRr),e(un,d3e),e(d3e,_Rr),e(un,bRr),e(Nr,vRr),e(Nr,ve),e(ve,W3),e(W3,c3e),e(c3e,FRr),e(W3,TRr),e(W3,hZ),e(hZ,MRr),e(W3,ERr),e(ve,CRr),e(ve,Q3),e(Q3,m3e),e(m3e,wRr),e(Q3,ARr),e(Q3,uZ),e(uZ,LRr),e(Q3,yRr),e(ve,xRr),e(ve,H3),e(H3,f3e),e(f3e,$Rr),e(H3,kRr),e(H3,pZ),e(pZ,SRr),e(H3,RRr),e(ve,PRr),e(ve,U3),e(U3,g3e),e(g3e,BRr),e(U3,IRr),e(U3,_Z),e(_Z,NRr),e(U3,qRr),e(ve,jRr),e(ve,J3),e(J3,h3e),e(h3e,DRr),e(J3,GRr),e(J3,bZ),e(bZ,ORr),e(J3,VRr),e(ve,XRr),e(ve,Y3),e(Y3,u3e),e(u3e,zRr),e(Y3,WRr),e(Y3,vZ),e(vZ,QRr),e(Y3,HRr),e(ve,URr),e(ve,K3),e(K3,p3e),e(p3e,JRr),e(K3,YRr),e(K3,FZ),e(FZ,KRr),e(K3,ZRr),e(ve,ePr),e(ve,Z3),e(Z3,_3e),e(_3e,oPr),e(Z3,rPr),e(Z3,TZ),e(TZ,tPr),e(Z3,aPr),e(ve,nPr),e(ve,e0),e(e0,b3e),e(b3e,sPr),e(e0,lPr),e(e0,MZ),e(MZ,iPr),e(e0,dPr),e(ve,cPr),e(ve,o0),e(o0,v3e),e(v3e,mPr),e(o0,fPr),e(o0,EZ),e(EZ,gPr),e(o0,hPr),e(ve,uPr),e(ve,r0),e(r0,F3e),e(F3e,pPr),e(r0,_Pr),e(r0,CZ),e(CZ,bPr),e(r0,vPr),e(ve,FPr),e(ve,t0),e(t0,T3e),e(T3e,TPr),e(t0,MPr),e(t0,wZ),e(wZ,EPr),e(t0,CPr),e(ve,wPr),e(ve,a0),e(a0,M3e),e(M3e,APr),e(a0,LPr),e(a0,AZ),e(AZ,yPr),e(a0,xPr),e(ve,$Pr),e(ve,n0),e(n0,E3e),e(E3e,kPr),e(n0,SPr),e(n0,LZ),e(LZ,RPr),e(n0,PPr),e(ve,BPr),e(ve,s0),e(s0,C3e),e(C3e,IPr),e(s0,NPr),e(s0,yZ),e(yZ,qPr),e(s0,jPr),e(ve,DPr),e(ve,l0),e(l0,w3e),e(w3e,GPr),e(l0,OPr),e(l0,xZ),e(xZ,VPr),e(l0,XPr),e(ve,zPr),e(ve,i0),e(i0,A3e),e(A3e,WPr),e(i0,QPr),e(i0,$Z),e($Z,HPr),e(i0,UPr),e(Nr,JPr),M(d0,Nr,null),b(m,KWe,_),b(m,Sc,_),e(Sc,c0),e(c0,L3e),M(Kx,L3e,null),e(Sc,YPr),e(Sc,y3e),e(y3e,KPr),b(m,ZWe,_),b(m,cr,_),M(Zx,cr,null),e(cr,ZPr),e(cr,Rc),e(Rc,eBr),e(Rc,kZ),e(kZ,oBr),e(Rc,rBr),e(Rc,SZ),e(SZ,tBr),e(Rc,aBr),e(cr,nBr),e(cr,e$),e(e$,sBr),e(e$,x3e),e(x3e,lBr),e(e$,iBr),e(cr,dBr),e(cr,Gt),M(o$,Gt,null),e(Gt,cBr),e(Gt,$3e),e($3e,mBr),e(Gt,fBr),e(Gt,Pc),e(Pc,gBr),e(Pc,k3e),e(k3e,hBr),e(Pc,uBr),e(Pc,RZ),e(RZ,pBr),e(Pc,_Br),e(Gt,bBr),M(m0,Gt,null),e(cr,vBr),e(cr,qr),M(r$,qr,null),e(qr,FBr),e(qr,S3e),e(S3e,TBr),e(qr,MBr),e(qr,pn),e(pn,EBr),e(pn,R3e),e(R3e,CBr),e(pn,wBr),e(pn,P3e),e(P3e,ABr),e(pn,LBr),e(pn,B3e),e(B3e,yBr),e(pn,xBr),e(qr,$Br),e(qr,t$),e(t$,f0),e(f0,I3e),e(I3e,kBr),e(f0,SBr),e(f0,PZ),e(PZ,RBr),e(f0,PBr),e(t$,BBr),e(t$,g0),e(g0,N3e),e(N3e,IBr),e(g0,NBr),e(g0,BZ),e(BZ,qBr),e(g0,jBr),e(qr,DBr),M(h0,qr,null),b(m,eQe,_),b(m,Bc,_),e(Bc,u0),e(u0,q3e),M(a$,q3e,null),e(Bc,GBr),e(Bc,j3e),e(j3e,OBr),b(m,oQe,_),b(m,mr,_),M(n$,mr,null),e(mr,VBr),e(mr,Ic),e(Ic,XBr),e(Ic,IZ),e(IZ,zBr),e(Ic,WBr),e(Ic,NZ),e(NZ,QBr),e(Ic,HBr),e(mr,UBr),e(mr,s$),e(s$,JBr),e(s$,D3e),e(D3e,YBr),e(s$,KBr),e(mr,ZBr),e(mr,Ot),M(l$,Ot,null),e(Ot,eIr),e(Ot,G3e),e(G3e,oIr),e(Ot,rIr),e(Ot,Nc),e(Nc,tIr),e(Nc,O3e),e(O3e,aIr),e(Nc,nIr),e(Nc,qZ),e(qZ,sIr),e(Nc,lIr),e(Ot,iIr),M(p0,Ot,null),e(mr,dIr),e(mr,jr),M(i$,jr,null),e(jr,cIr),e(jr,V3e),e(V3e,mIr),e(jr,fIr),e(jr,_n),e(_n,gIr),e(_n,X3e),e(X3e,hIr),e(_n,uIr),e(_n,z3e),e(z3e,pIr),e(_n,_Ir),e(_n,W3e),e(W3e,bIr),e(_n,vIr),e(jr,FIr),e(jr,Q3e),e(Q3e,_0),e(_0,H3e),e(H3e,TIr),e(_0,MIr),e(_0,jZ),e(jZ,EIr),e(_0,CIr),e(jr,wIr),M(b0,jr,null),b(m,rQe,_),b(m,qc,_),e(qc,v0),e(v0,U3e),M(d$,U3e,null),e(qc,AIr),e(qc,J3e),e(J3e,LIr),b(m,tQe,_),b(m,fr,_),M(c$,fr,null),e(fr,yIr),e(fr,jc),e(jc,xIr),e(jc,DZ),e(DZ,$Ir),e(jc,kIr),e(jc,GZ),e(GZ,SIr),e(jc,RIr),e(fr,PIr),e(fr,m$),e(m$,BIr),e(m$,Y3e),e(Y3e,IIr),e(m$,NIr),e(fr,qIr),e(fr,Vt),M(f$,Vt,null),e(Vt,jIr),e(Vt,K3e),e(K3e,DIr),e(Vt,GIr),e(Vt,Dc),e(Dc,OIr),e(Dc,Z3e),e(Z3e,VIr),e(Dc,XIr),e(Dc,OZ),e(OZ,zIr),e(Dc,WIr),e(Vt,QIr),M(F0,Vt,null),e(fr,HIr),e(fr,Dr),M(g$,Dr,null),e(Dr,UIr),e(Dr,e0e),e(e0e,JIr),e(Dr,YIr),e(Dr,bn),e(bn,KIr),e(bn,o0e),e(o0e,ZIr),e(bn,eNr),e(bn,r0e),e(r0e,oNr),e(bn,rNr),e(bn,t0e),e(t0e,tNr),e(bn,aNr),e(Dr,nNr),e(Dr,de),e(de,T0),e(T0,a0e),e(a0e,sNr),e(T0,lNr),e(T0,VZ),e(VZ,iNr),e(T0,dNr),e(de,cNr),e(de,M0),e(M0,n0e),e(n0e,mNr),e(M0,fNr),e(M0,XZ),e(XZ,gNr),e(M0,hNr),e(de,uNr),e(de,E0),e(E0,s0e),e(s0e,pNr),e(E0,_Nr),e(E0,zZ),e(zZ,bNr),e(E0,vNr),e(de,FNr),e(de,C0),e(C0,l0e),e(l0e,TNr),e(C0,MNr),e(C0,WZ),e(WZ,ENr),e(C0,CNr),e(de,wNr),e(de,w0),e(w0,i0e),e(i0e,ANr),e(w0,LNr),e(w0,QZ),e(QZ,yNr),e(w0,xNr),e(de,$Nr),e(de,A0),e(A0,d0e),e(d0e,kNr),e(A0,SNr),e(A0,HZ),e(HZ,RNr),e(A0,PNr),e(de,BNr),e(de,L0),e(L0,c0e),e(c0e,INr),e(L0,NNr),e(L0,UZ),e(UZ,qNr),e(L0,jNr),e(de,DNr),e(de,y0),e(y0,m0e),e(m0e,GNr),e(y0,ONr),e(y0,JZ),e(JZ,VNr),e(y0,XNr),e(de,zNr),e(de,x0),e(x0,f0e),e(f0e,WNr),e(x0,QNr),e(x0,YZ),e(YZ,HNr),e(x0,UNr),e(de,JNr),e(de,$0),e($0,g0e),e(g0e,YNr),e($0,KNr),e($0,KZ),e(KZ,ZNr),e($0,eqr),e(de,oqr),e(de,k0),e(k0,h0e),e(h0e,rqr),e(k0,tqr),e(k0,ZZ),e(ZZ,aqr),e(k0,nqr),e(de,sqr),e(de,S0),e(S0,u0e),e(u0e,lqr),e(S0,iqr),e(S0,eee),e(eee,dqr),e(S0,cqr),e(de,mqr),e(de,R0),e(R0,p0e),e(p0e,fqr),e(R0,gqr),e(R0,oee),e(oee,hqr),e(R0,uqr),e(de,pqr),e(de,P0),e(P0,_0e),e(_0e,_qr),e(P0,bqr),e(P0,ree),e(ree,vqr),e(P0,Fqr),e(de,Tqr),e(de,B0),e(B0,b0e),e(b0e,Mqr),e(B0,Eqr),e(B0,tee),e(tee,Cqr),e(B0,wqr),e(de,Aqr),e(de,I0),e(I0,v0e),e(v0e,Lqr),e(I0,yqr),e(I0,aee),e(aee,xqr),e(I0,$qr),e(de,kqr),e(de,N0),e(N0,F0e),e(F0e,Sqr),e(N0,Rqr),e(N0,nee),e(nee,Pqr),e(N0,Bqr),e(de,Iqr),e(de,q0),e(q0,T0e),e(T0e,Nqr),e(q0,qqr),e(q0,see),e(see,jqr),e(q0,Dqr),e(de,Gqr),e(de,j0),e(j0,M0e),e(M0e,Oqr),e(j0,Vqr),e(j0,lee),e(lee,Xqr),e(j0,zqr),e(de,Wqr),e(de,D0),e(D0,E0e),e(E0e,Qqr),e(D0,Hqr),e(D0,iee),e(iee,Uqr),e(D0,Jqr),e(Dr,Yqr),M(G0,Dr,null),b(m,aQe,_),b(m,Gc,_),e(Gc,O0),e(O0,C0e),M(h$,C0e,null),e(Gc,Kqr),e(Gc,w0e),e(w0e,Zqr),b(m,nQe,_),b(m,gr,_),M(u$,gr,null),e(gr,ejr),e(gr,Oc),e(Oc,ojr),e(Oc,dee),e(dee,rjr),e(Oc,tjr),e(Oc,cee),e(cee,ajr),e(Oc,njr),e(gr,sjr),e(gr,p$),e(p$,ljr),e(p$,A0e),e(A0e,ijr),e(p$,djr),e(gr,cjr),e(gr,Xt),M(_$,Xt,null),e(Xt,mjr),e(Xt,L0e),e(L0e,fjr),e(Xt,gjr),e(Xt,Vc),e(Vc,hjr),e(Vc,y0e),e(y0e,ujr),e(Vc,pjr),e(Vc,mee),e(mee,_jr),e(Vc,bjr),e(Xt,vjr),M(V0,Xt,null),e(gr,Fjr),e(gr,Gr),M(b$,Gr,null),e(Gr,Tjr),e(Gr,x0e),e(x0e,Mjr),e(Gr,Ejr),e(Gr,vn),e(vn,Cjr),e(vn,$0e),e($0e,wjr),e(vn,Ajr),e(vn,k0e),e(k0e,Ljr),e(vn,yjr),e(vn,S0e),e(S0e,xjr),e(vn,$jr),e(Gr,kjr),e(Gr,ce),e(ce,X0),e(X0,R0e),e(R0e,Sjr),e(X0,Rjr),e(X0,fee),e(fee,Pjr),e(X0,Bjr),e(ce,Ijr),e(ce,z0),e(z0,P0e),e(P0e,Njr),e(z0,qjr),e(z0,gee),e(gee,jjr),e(z0,Djr),e(ce,Gjr),e(ce,W0),e(W0,B0e),e(B0e,Ojr),e(W0,Vjr),e(W0,hee),e(hee,Xjr),e(W0,zjr),e(ce,Wjr),e(ce,Q0),e(Q0,I0e),e(I0e,Qjr),e(Q0,Hjr),e(Q0,uee),e(uee,Ujr),e(Q0,Jjr),e(ce,Yjr),e(ce,H0),e(H0,N0e),e(N0e,Kjr),e(H0,Zjr),e(H0,pee),e(pee,eDr),e(H0,oDr),e(ce,rDr),e(ce,U0),e(U0,q0e),e(q0e,tDr),e(U0,aDr),e(U0,_ee),e(_ee,nDr),e(U0,sDr),e(ce,lDr),e(ce,J0),e(J0,j0e),e(j0e,iDr),e(J0,dDr),e(J0,bee),e(bee,cDr),e(J0,mDr),e(ce,fDr),e(ce,Y0),e(Y0,D0e),e(D0e,gDr),e(Y0,hDr),e(Y0,vee),e(vee,uDr),e(Y0,pDr),e(ce,_Dr),e(ce,K0),e(K0,G0e),e(G0e,bDr),e(K0,vDr),e(K0,Fee),e(Fee,FDr),e(K0,TDr),e(ce,MDr),e(ce,Z0),e(Z0,O0e),e(O0e,EDr),e(Z0,CDr),e(Z0,Tee),e(Tee,wDr),e(Z0,ADr),e(ce,LDr),e(ce,ew),e(ew,V0e),e(V0e,yDr),e(ew,xDr),e(ew,Mee),e(Mee,$Dr),e(ew,kDr),e(ce,SDr),e(ce,ow),e(ow,X0e),e(X0e,RDr),e(ow,PDr),e(ow,Eee),e(Eee,BDr),e(ow,IDr),e(ce,NDr),e(ce,rw),e(rw,z0e),e(z0e,qDr),e(rw,jDr),e(rw,Cee),e(Cee,DDr),e(rw,GDr),e(ce,ODr),e(ce,tw),e(tw,W0e),e(W0e,VDr),e(tw,XDr),e(tw,wee),e(wee,zDr),e(tw,WDr),e(ce,QDr),e(ce,aw),e(aw,Q0e),e(Q0e,HDr),e(aw,UDr),e(aw,Aee),e(Aee,JDr),e(aw,YDr),e(ce,KDr),e(ce,nw),e(nw,H0e),e(H0e,ZDr),e(nw,eGr),e(nw,Lee),e(Lee,oGr),e(nw,rGr),e(ce,tGr),e(ce,sw),e(sw,U0e),e(U0e,aGr),e(sw,nGr),e(sw,yee),e(yee,sGr),e(sw,lGr),e(ce,iGr),e(ce,lw),e(lw,J0e),e(J0e,dGr),e(lw,cGr),e(lw,xee),e(xee,mGr),e(lw,fGr),e(ce,gGr),e(ce,iw),e(iw,Y0e),e(Y0e,hGr),e(iw,uGr),e(iw,$ee),e($ee,pGr),e(iw,_Gr),e(ce,bGr),e(ce,dw),e(dw,K0e),e(K0e,vGr),e(dw,FGr),e(dw,kee),e(kee,TGr),e(dw,MGr),e(Gr,EGr),M(cw,Gr,null),b(m,sQe,_),b(m,Xc,_),e(Xc,mw),e(mw,Z0e),M(v$,Z0e,null),e(Xc,CGr),e(Xc,ewe),e(ewe,wGr),b(m,lQe,_),b(m,hr,_),M(F$,hr,null),e(hr,AGr),e(hr,zc),e(zc,LGr),e(zc,See),e(See,yGr),e(zc,xGr),e(zc,Ree),e(Ree,$Gr),e(zc,kGr),e(hr,SGr),e(hr,T$),e(T$,RGr),e(T$,owe),e(owe,PGr),e(T$,BGr),e(hr,IGr),e(hr,zt),M(M$,zt,null),e(zt,NGr),e(zt,rwe),e(rwe,qGr),e(zt,jGr),e(zt,Wc),e(Wc,DGr),e(Wc,twe),e(twe,GGr),e(Wc,OGr),e(Wc,Pee),e(Pee,VGr),e(Wc,XGr),e(zt,zGr),M(fw,zt,null),e(hr,WGr),e(hr,Or),M(E$,Or,null),e(Or,QGr),e(Or,awe),e(awe,HGr),e(Or,UGr),e(Or,Fn),e(Fn,JGr),e(Fn,nwe),e(nwe,YGr),e(Fn,KGr),e(Fn,swe),e(swe,ZGr),e(Fn,eOr),e(Fn,lwe),e(lwe,oOr),e(Fn,rOr),e(Or,tOr),e(Or,iwe),e(iwe,gw),e(gw,dwe),e(dwe,aOr),e(gw,nOr),e(gw,Bee),e(Bee,sOr),e(gw,lOr),e(Or,iOr),M(hw,Or,null),b(m,iQe,_),b(m,Qc,_),e(Qc,uw),e(uw,cwe),M(C$,cwe,null),e(Qc,dOr),e(Qc,mwe),e(mwe,cOr),b(m,dQe,_),b(m,ur,_),M(w$,ur,null),e(ur,mOr),e(ur,Hc),e(Hc,fOr),e(Hc,Iee),e(Iee,gOr),e(Hc,hOr),e(Hc,Nee),e(Nee,uOr),e(Hc,pOr),e(ur,_Or),e(ur,A$),e(A$,bOr),e(A$,fwe),e(fwe,vOr),e(A$,FOr),e(ur,TOr),e(ur,Wt),M(L$,Wt,null),e(Wt,MOr),e(Wt,gwe),e(gwe,EOr),e(Wt,COr),e(Wt,Uc),e(Uc,wOr),e(Uc,hwe),e(hwe,AOr),e(Uc,LOr),e(Uc,qee),e(qee,yOr),e(Uc,xOr),e(Wt,$Or),M(pw,Wt,null),e(ur,kOr),e(ur,Vr),M(y$,Vr,null),e(Vr,SOr),e(Vr,uwe),e(uwe,ROr),e(Vr,POr),e(Vr,Tn),e(Tn,BOr),e(Tn,pwe),e(pwe,IOr),e(Tn,NOr),e(Tn,_we),e(_we,qOr),e(Tn,jOr),e(Tn,bwe),e(bwe,DOr),e(Tn,GOr),e(Vr,OOr),e(Vr,vwe),e(vwe,_w),e(_w,Fwe),e(Fwe,VOr),e(_w,XOr),e(_w,jee),e(jee,zOr),e(_w,WOr),e(Vr,QOr),M(bw,Vr,null),b(m,cQe,_),b(m,Jc,_),e(Jc,vw),e(vw,Twe),M(x$,Twe,null),e(Jc,HOr),e(Jc,Mwe),e(Mwe,UOr),b(m,mQe,_),b(m,pr,_),M($$,pr,null),e(pr,JOr),e(pr,Yc),e(Yc,YOr),e(Yc,Dee),e(Dee,KOr),e(Yc,ZOr),e(Yc,Gee),e(Gee,eVr),e(Yc,oVr),e(pr,rVr),e(pr,k$),e(k$,tVr),e(k$,Ewe),e(Ewe,aVr),e(k$,nVr),e(pr,sVr),e(pr,Qt),M(S$,Qt,null),e(Qt,lVr),e(Qt,Cwe),e(Cwe,iVr),e(Qt,dVr),e(Qt,Kc),e(Kc,cVr),e(Kc,wwe),e(wwe,mVr),e(Kc,fVr),e(Kc,Oee),e(Oee,gVr),e(Kc,hVr),e(Qt,uVr),M(Fw,Qt,null),e(pr,pVr),e(pr,Xr),M(R$,Xr,null),e(Xr,_Vr),e(Xr,Awe),e(Awe,bVr),e(Xr,vVr),e(Xr,Mn),e(Mn,FVr),e(Mn,Lwe),e(Lwe,TVr),e(Mn,MVr),e(Mn,ywe),e(ywe,EVr),e(Mn,CVr),e(Mn,xwe),e(xwe,wVr),e(Mn,AVr),e(Xr,LVr),e(Xr,oe),e(oe,Tw),e(Tw,$we),e($we,yVr),e(Tw,xVr),e(Tw,Vee),e(Vee,$Vr),e(Tw,kVr),e(oe,SVr),e(oe,Mw),e(Mw,kwe),e(kwe,RVr),e(Mw,PVr),e(Mw,Xee),e(Xee,BVr),e(Mw,IVr),e(oe,NVr),e(oe,Ew),e(Ew,Swe),e(Swe,qVr),e(Ew,jVr),e(Ew,zee),e(zee,DVr),e(Ew,GVr),e(oe,OVr),e(oe,Cw),e(Cw,Rwe),e(Rwe,VVr),e(Cw,XVr),e(Cw,Wee),e(Wee,zVr),e(Cw,WVr),e(oe,QVr),e(oe,ww),e(ww,Pwe),e(Pwe,HVr),e(ww,UVr),e(ww,Qee),e(Qee,JVr),e(ww,YVr),e(oe,KVr),e(oe,Aw),e(Aw,Bwe),e(Bwe,ZVr),e(Aw,eXr),e(Aw,Hee),e(Hee,oXr),e(Aw,rXr),e(oe,tXr),e(oe,Lw),e(Lw,Iwe),e(Iwe,aXr),e(Lw,nXr),e(Lw,Uee),e(Uee,sXr),e(Lw,lXr),e(oe,iXr),e(oe,yw),e(yw,Nwe),e(Nwe,dXr),e(yw,cXr),e(yw,Jee),e(Jee,mXr),e(yw,fXr),e(oe,gXr),e(oe,xw),e(xw,qwe),e(qwe,hXr),e(xw,uXr),e(xw,Yee),e(Yee,pXr),e(xw,_Xr),e(oe,bXr),e(oe,$w),e($w,jwe),e(jwe,vXr),e($w,FXr),e($w,Kee),e(Kee,TXr),e($w,MXr),e(oe,EXr),e(oe,kw),e(kw,Dwe),e(Dwe,CXr),e(kw,wXr),e(kw,Zee),e(Zee,AXr),e(kw,LXr),e(oe,yXr),e(oe,Sw),e(Sw,Gwe),e(Gwe,xXr),e(Sw,$Xr),e(Sw,eoe),e(eoe,kXr),e(Sw,SXr),e(oe,RXr),e(oe,Rw),e(Rw,Owe),e(Owe,PXr),e(Rw,BXr),e(Rw,ooe),e(ooe,IXr),e(Rw,NXr),e(oe,qXr),e(oe,Pw),e(Pw,Vwe),e(Vwe,jXr),e(Pw,DXr),e(Pw,roe),e(roe,GXr),e(Pw,OXr),e(oe,VXr),e(oe,Bw),e(Bw,Xwe),e(Xwe,XXr),e(Bw,zXr),e(Bw,toe),e(toe,WXr),e(Bw,QXr),e(oe,HXr),e(oe,Iw),e(Iw,zwe),e(zwe,UXr),e(Iw,JXr),e(Iw,aoe),e(aoe,YXr),e(Iw,KXr),e(oe,ZXr),e(oe,Nw),e(Nw,Wwe),e(Wwe,ezr),e(Nw,ozr),e(Nw,noe),e(noe,rzr),e(Nw,tzr),e(oe,azr),e(oe,qw),e(qw,Qwe),e(Qwe,nzr),e(qw,szr),e(qw,soe),e(soe,lzr),e(qw,izr),e(oe,dzr),e(oe,jw),e(jw,Hwe),e(Hwe,czr),e(jw,mzr),e(jw,loe),e(loe,fzr),e(jw,gzr),e(oe,hzr),e(oe,Dw),e(Dw,Uwe),e(Uwe,uzr),e(Dw,pzr),e(Dw,ioe),e(ioe,_zr),e(Dw,bzr),e(oe,vzr),e(oe,Gw),e(Gw,Jwe),e(Jwe,Fzr),e(Gw,Tzr),e(Gw,doe),e(doe,Mzr),e(Gw,Ezr),e(oe,Czr),e(oe,Ow),e(Ow,Ywe),e(Ywe,wzr),e(Ow,Azr),e(Ow,coe),e(coe,Lzr),e(Ow,yzr),e(oe,xzr),e(oe,Vw),e(Vw,Kwe),e(Kwe,$zr),e(Vw,kzr),e(Vw,moe),e(moe,Szr),e(Vw,Rzr),e(oe,Pzr),e(oe,Xw),e(Xw,Zwe),e(Zwe,Bzr),e(Xw,Izr),e(Xw,foe),e(foe,Nzr),e(Xw,qzr),e(oe,jzr),e(oe,zw),e(zw,e6e),e(e6e,Dzr),e(zw,Gzr),e(zw,goe),e(goe,Ozr),e(zw,Vzr),e(oe,Xzr),e(oe,Ww),e(Ww,o6e),e(o6e,zzr),e(Ww,Wzr),e(Ww,hoe),e(hoe,Qzr),e(Ww,Hzr),e(oe,Uzr),e(oe,Qw),e(Qw,r6e),e(r6e,Jzr),e(Qw,Yzr),e(Qw,uoe),e(uoe,Kzr),e(Qw,Zzr),e(Xr,eWr),M(Hw,Xr,null),b(m,fQe,_),b(m,Zc,_),e(Zc,Uw),e(Uw,t6e),M(P$,t6e,null),e(Zc,oWr),e(Zc,a6e),e(a6e,rWr),b(m,gQe,_),b(m,_r,_),M(B$,_r,null),e(_r,tWr),e(_r,em),e(em,aWr),e(em,poe),e(poe,nWr),e(em,sWr),e(em,_oe),e(_oe,lWr),e(em,iWr),e(_r,dWr),e(_r,I$),e(I$,cWr),e(I$,n6e),e(n6e,mWr),e(I$,fWr),e(_r,gWr),e(_r,Ht),M(N$,Ht,null),e(Ht,hWr),e(Ht,s6e),e(s6e,uWr),e(Ht,pWr),e(Ht,om),e(om,_Wr),e(om,l6e),e(l6e,bWr),e(om,vWr),e(om,boe),e(boe,FWr),e(om,TWr),e(Ht,MWr),M(Jw,Ht,null),e(_r,EWr),e(_r,zr),M(q$,zr,null),e(zr,CWr),e(zr,i6e),e(i6e,wWr),e(zr,AWr),e(zr,En),e(En,LWr),e(En,d6e),e(d6e,yWr),e(En,xWr),e(En,c6e),e(c6e,$Wr),e(En,kWr),e(En,m6e),e(m6e,SWr),e(En,RWr),e(zr,PWr),e(zr,xe),e(xe,Yw),e(Yw,f6e),e(f6e,BWr),e(Yw,IWr),e(Yw,voe),e(voe,NWr),e(Yw,qWr),e(xe,jWr),e(xe,Kw),e(Kw,g6e),e(g6e,DWr),e(Kw,GWr),e(Kw,Foe),e(Foe,OWr),e(Kw,VWr),e(xe,XWr),e(xe,Zw),e(Zw,h6e),e(h6e,zWr),e(Zw,WWr),e(Zw,Toe),e(Toe,QWr),e(Zw,HWr),e(xe,UWr),e(xe,e6),e(e6,u6e),e(u6e,JWr),e(e6,YWr),e(e6,Moe),e(Moe,KWr),e(e6,ZWr),e(xe,eQr),e(xe,o6),e(o6,p6e),e(p6e,oQr),e(o6,rQr),e(o6,Eoe),e(Eoe,tQr),e(o6,aQr),e(xe,nQr),e(xe,r6),e(r6,_6e),e(_6e,sQr),e(r6,lQr),e(r6,Coe),e(Coe,iQr),e(r6,dQr),e(xe,cQr),e(xe,t6),e(t6,b6e),e(b6e,mQr),e(t6,fQr),e(t6,woe),e(woe,gQr),e(t6,hQr),e(xe,uQr),e(xe,a6),e(a6,v6e),e(v6e,pQr),e(a6,_Qr),e(a6,Aoe),e(Aoe,bQr),e(a6,vQr),e(xe,FQr),e(xe,n6),e(n6,F6e),e(F6e,TQr),e(n6,MQr),e(n6,Loe),e(Loe,EQr),e(n6,CQr),e(xe,wQr),e(xe,s6),e(s6,T6e),e(T6e,AQr),e(s6,LQr),e(s6,yoe),e(yoe,yQr),e(s6,xQr),e(zr,$Qr),M(l6,zr,null),b(m,hQe,_),b(m,rm,_),e(rm,i6),e(i6,M6e),M(j$,M6e,null),e(rm,kQr),e(rm,E6e),e(E6e,SQr),b(m,uQe,_),b(m,br,_),M(D$,br,null),e(br,RQr),e(br,tm),e(tm,PQr),e(tm,xoe),e(xoe,BQr),e(tm,IQr),e(tm,$oe),e($oe,NQr),e(tm,qQr),e(br,jQr),e(br,G$),e(G$,DQr),e(G$,C6e),e(C6e,GQr),e(G$,OQr),e(br,VQr),e(br,Ut),M(O$,Ut,null),e(Ut,XQr),e(Ut,w6e),e(w6e,zQr),e(Ut,WQr),e(Ut,am),e(am,QQr),e(am,A6e),e(A6e,HQr),e(am,UQr),e(am,koe),e(koe,JQr),e(am,YQr),e(Ut,KQr),M(d6,Ut,null),e(br,ZQr),e(br,Wr),M(V$,Wr,null),e(Wr,eHr),e(Wr,L6e),e(L6e,oHr),e(Wr,rHr),e(Wr,Cn),e(Cn,tHr),e(Cn,y6e),e(y6e,aHr),e(Cn,nHr),e(Cn,x6e),e(x6e,sHr),e(Cn,lHr),e(Cn,$6e),e($6e,iHr),e(Cn,dHr),e(Wr,cHr),e(Wr,Ee),e(Ee,c6),e(c6,k6e),e(k6e,mHr),e(c6,fHr),e(c6,Soe),e(Soe,gHr),e(c6,hHr),e(Ee,uHr),e(Ee,m6),e(m6,S6e),e(S6e,pHr),e(m6,_Hr),e(m6,Roe),e(Roe,bHr),e(m6,vHr),e(Ee,FHr),e(Ee,f6),e(f6,R6e),e(R6e,THr),e(f6,MHr),e(f6,Poe),e(Poe,EHr),e(f6,CHr),e(Ee,wHr),e(Ee,g6),e(g6,P6e),e(P6e,AHr),e(g6,LHr),e(g6,Boe),e(Boe,yHr),e(g6,xHr),e(Ee,$Hr),e(Ee,h6),e(h6,B6e),e(B6e,kHr),e(h6,SHr),e(h6,Ioe),e(Ioe,RHr),e(h6,PHr),e(Ee,BHr),e(Ee,u6),e(u6,I6e),e(I6e,IHr),e(u6,NHr),e(u6,Noe),e(Noe,qHr),e(u6,jHr),e(Ee,DHr),e(Ee,p6),e(p6,N6e),e(N6e,GHr),e(p6,OHr),e(p6,qoe),e(qoe,VHr),e(p6,XHr),e(Ee,zHr),e(Ee,_6),e(_6,q6e),e(q6e,WHr),e(_6,QHr),e(_6,joe),e(joe,HHr),e(_6,UHr),e(Ee,JHr),e(Ee,b6),e(b6,j6e),e(j6e,YHr),e(b6,KHr),e(b6,Doe),e(Doe,ZHr),e(b6,eUr),e(Ee,oUr),e(Ee,v6),e(v6,D6e),e(D6e,rUr),e(v6,tUr),e(v6,Goe),e(Goe,aUr),e(v6,nUr),e(Ee,sUr),e(Ee,F6),e(F6,G6e),e(G6e,lUr),e(F6,iUr),e(F6,Ooe),e(Ooe,dUr),e(F6,cUr),e(Ee,mUr),e(Ee,T6),e(T6,O6e),e(O6e,fUr),e(T6,gUr),e(T6,Voe),e(Voe,hUr),e(T6,uUr),e(Ee,pUr),e(Ee,M6),e(M6,V6e),e(V6e,_Ur),e(M6,bUr),e(M6,Xoe),e(Xoe,vUr),e(M6,FUr),e(Wr,TUr),M(E6,Wr,null),b(m,pQe,_),b(m,nm,_),e(nm,C6),e(C6,X6e),M(X$,X6e,null),e(nm,MUr),e(nm,z6e),e(z6e,EUr),b(m,_Qe,_),b(m,vr,_),M(z$,vr,null),e(vr,CUr),e(vr,sm),e(sm,wUr),e(sm,zoe),e(zoe,AUr),e(sm,LUr),e(sm,Woe),e(Woe,yUr),e(sm,xUr),e(vr,$Ur),e(vr,W$),e(W$,kUr),e(W$,W6e),e(W6e,SUr),e(W$,RUr),e(vr,PUr),e(vr,Jt),M(Q$,Jt,null),e(Jt,BUr),e(Jt,Q6e),e(Q6e,IUr),e(Jt,NUr),e(Jt,lm),e(lm,qUr),e(lm,H6e),e(H6e,jUr),e(lm,DUr),e(lm,Qoe),e(Qoe,GUr),e(lm,OUr),e(Jt,VUr),M(w6,Jt,null),e(vr,XUr),e(vr,Qr),M(H$,Qr,null),e(Qr,zUr),e(Qr,U6e),e(U6e,WUr),e(Qr,QUr),e(Qr,wn),e(wn,HUr),e(wn,J6e),e(J6e,UUr),e(wn,JUr),e(wn,Y6e),e(Y6e,YUr),e(wn,KUr),e(wn,K6e),e(K6e,ZUr),e(wn,eJr),e(Qr,oJr),e(Qr,$e),e($e,A6),e(A6,Z6e),e(Z6e,rJr),e(A6,tJr),e(A6,Hoe),e(Hoe,aJr),e(A6,nJr),e($e,sJr),e($e,L6),e(L6,eAe),e(eAe,lJr),e(L6,iJr),e(L6,Uoe),e(Uoe,dJr),e(L6,cJr),e($e,mJr),e($e,y6),e(y6,oAe),e(oAe,fJr),e(y6,gJr),e(y6,Joe),e(Joe,hJr),e(y6,uJr),e($e,pJr),e($e,x6),e(x6,rAe),e(rAe,_Jr),e(x6,bJr),e(x6,Yoe),e(Yoe,vJr),e(x6,FJr),e($e,TJr),e($e,$6),e($6,tAe),e(tAe,MJr),e($6,EJr),e($6,Koe),e(Koe,CJr),e($6,wJr),e($e,AJr),e($e,k6),e(k6,aAe),e(aAe,LJr),e(k6,yJr),e(k6,Zoe),e(Zoe,xJr),e(k6,$Jr),e($e,kJr),e($e,S6),e(S6,nAe),e(nAe,SJr),e(S6,RJr),e(S6,ere),e(ere,PJr),e(S6,BJr),e($e,IJr),e($e,R6),e(R6,sAe),e(sAe,NJr),e(R6,qJr),e(R6,ore),e(ore,jJr),e(R6,DJr),e($e,GJr),e($e,P6),e(P6,lAe),e(lAe,OJr),e(P6,VJr),e(P6,rre),e(rre,XJr),e(P6,zJr),e($e,WJr),e($e,B6),e(B6,iAe),e(iAe,QJr),e(B6,HJr),e(B6,tre),e(tre,UJr),e(B6,JJr),e(Qr,YJr),M(I6,Qr,null),b(m,bQe,_),b(m,im,_),e(im,N6),e(N6,dAe),M(U$,dAe,null),e(im,KJr),e(im,cAe),e(cAe,ZJr),b(m,vQe,_),b(m,Fr,_),M(J$,Fr,null),e(Fr,eYr),e(Fr,dm),e(dm,oYr),e(dm,are),e(are,rYr),e(dm,tYr),e(dm,nre),e(nre,aYr),e(dm,nYr),e(Fr,sYr),e(Fr,Y$),e(Y$,lYr),e(Y$,mAe),e(mAe,iYr),e(Y$,dYr),e(Fr,cYr),e(Fr,Yt),M(K$,Yt,null),e(Yt,mYr),e(Yt,fAe),e(fAe,fYr),e(Yt,gYr),e(Yt,cm),e(cm,hYr),e(cm,gAe),e(gAe,uYr),e(cm,pYr),e(cm,sre),e(sre,_Yr),e(cm,bYr),e(Yt,vYr),M(q6,Yt,null),e(Fr,FYr),e(Fr,Hr),M(Z$,Hr,null),e(Hr,TYr),e(Hr,hAe),e(hAe,MYr),e(Hr,EYr),e(Hr,An),e(An,CYr),e(An,uAe),e(uAe,wYr),e(An,AYr),e(An,pAe),e(pAe,LYr),e(An,yYr),e(An,_Ae),e(_Ae,xYr),e(An,$Yr),e(Hr,kYr),e(Hr,ke),e(ke,j6),e(j6,bAe),e(bAe,SYr),e(j6,RYr),e(j6,lre),e(lre,PYr),e(j6,BYr),e(ke,IYr),e(ke,D6),e(D6,vAe),e(vAe,NYr),e(D6,qYr),e(D6,ire),e(ire,jYr),e(D6,DYr),e(ke,GYr),e(ke,G6),e(G6,FAe),e(FAe,OYr),e(G6,VYr),e(G6,dre),e(dre,XYr),e(G6,zYr),e(ke,WYr),e(ke,O6),e(O6,TAe),e(TAe,QYr),e(O6,HYr),e(O6,cre),e(cre,UYr),e(O6,JYr),e(ke,YYr),e(ke,V6),e(V6,MAe),e(MAe,KYr),e(V6,ZYr),e(V6,mre),e(mre,eKr),e(V6,oKr),e(ke,rKr),e(ke,X6),e(X6,EAe),e(EAe,tKr),e(X6,aKr),e(X6,fre),e(fre,nKr),e(X6,sKr),e(ke,lKr),e(ke,z6),e(z6,CAe),e(CAe,iKr),e(z6,dKr),e(z6,gre),e(gre,cKr),e(z6,mKr),e(ke,fKr),e(ke,W6),e(W6,wAe),e(wAe,gKr),e(W6,hKr),e(W6,hre),e(hre,uKr),e(W6,pKr),e(ke,_Kr),e(ke,Q6),e(Q6,AAe),e(AAe,bKr),e(Q6,vKr),e(Q6,ure),e(ure,FKr),e(Q6,TKr),e(ke,MKr),e(ke,H6),e(H6,LAe),e(LAe,EKr),e(H6,CKr),e(H6,pre),e(pre,wKr),e(H6,AKr),e(Hr,LKr),M(U6,Hr,null),b(m,FQe,_),b(m,mm,_),e(mm,J6),e(J6,yAe),M(ek,yAe,null),e(mm,yKr),e(mm,xAe),e(xAe,xKr),b(m,TQe,_),b(m,Tr,_),M(ok,Tr,null),e(Tr,$Kr),e(Tr,fm),e(fm,kKr),e(fm,_re),e(_re,SKr),e(fm,RKr),e(fm,bre),e(bre,PKr),e(fm,BKr),e(Tr,IKr),e(Tr,rk),e(rk,NKr),e(rk,$Ae),e($Ae,qKr),e(rk,jKr),e(Tr,DKr),e(Tr,Kt),M(tk,Kt,null),e(Kt,GKr),e(Kt,kAe),e(kAe,OKr),e(Kt,VKr),e(Kt,gm),e(gm,XKr),e(gm,SAe),e(SAe,zKr),e(gm,WKr),e(gm,vre),e(vre,QKr),e(gm,HKr),e(Kt,UKr),M(Y6,Kt,null),e(Tr,JKr),e(Tr,Ur),M(ak,Ur,null),e(Ur,YKr),e(Ur,RAe),e(RAe,KKr),e(Ur,ZKr),e(Ur,Ln),e(Ln,eZr),e(Ln,PAe),e(PAe,oZr),e(Ln,rZr),e(Ln,BAe),e(BAe,tZr),e(Ln,aZr),e(Ln,IAe),e(IAe,nZr),e(Ln,sZr),e(Ur,lZr),e(Ur,Se),e(Se,K6),e(K6,NAe),e(NAe,iZr),e(K6,dZr),e(K6,Fre),e(Fre,cZr),e(K6,mZr),e(Se,fZr),e(Se,Z6),e(Z6,qAe),e(qAe,gZr),e(Z6,hZr),e(Z6,Tre),e(Tre,uZr),e(Z6,pZr),e(Se,_Zr),e(Se,eA),e(eA,jAe),e(jAe,bZr),e(eA,vZr),e(eA,Mre),e(Mre,FZr),e(eA,TZr),e(Se,MZr),e(Se,oA),e(oA,DAe),e(DAe,EZr),e(oA,CZr),e(oA,Ere),e(Ere,wZr),e(oA,AZr),e(Se,LZr),e(Se,rA),e(rA,GAe),e(GAe,yZr),e(rA,xZr),e(rA,Cre),e(Cre,$Zr),e(rA,kZr),e(Se,SZr),e(Se,tA),e(tA,OAe),e(OAe,RZr),e(tA,PZr),e(tA,wre),e(wre,BZr),e(tA,IZr),e(Se,NZr),e(Se,aA),e(aA,VAe),e(VAe,qZr),e(aA,jZr),e(aA,Are),e(Are,DZr),e(aA,GZr),e(Se,OZr),e(Se,nA),e(nA,XAe),e(XAe,VZr),e(nA,XZr),e(nA,Lre),e(Lre,zZr),e(nA,WZr),e(Se,QZr),e(Se,sA),e(sA,zAe),e(zAe,HZr),e(sA,UZr),e(sA,yre),e(yre,JZr),e(sA,YZr),e(Se,KZr),e(Se,lA),e(lA,WAe),e(WAe,ZZr),e(lA,eet),e(lA,xre),e(xre,oet),e(lA,ret),e(Ur,tet),M(iA,Ur,null),b(m,MQe,_),b(m,hm,_),e(hm,dA),e(dA,QAe),M(nk,QAe,null),e(hm,aet),e(hm,HAe),e(HAe,net),b(m,EQe,_),b(m,Mr,_),M(sk,Mr,null),e(Mr,set),e(Mr,um),e(um,iet),e(um,$re),e($re,det),e(um,cet),e(um,kre),e(kre,met),e(um,fet),e(Mr,get),e(Mr,lk),e(lk,het),e(lk,UAe),e(UAe,uet),e(lk,pet),e(Mr,_et),e(Mr,Zt),M(ik,Zt,null),e(Zt,bet),e(Zt,JAe),e(JAe,vet),e(Zt,Fet),e(Zt,pm),e(pm,Tet),e(pm,YAe),e(YAe,Met),e(pm,Eet),e(pm,Sre),e(Sre,Cet),e(pm,wet),e(Zt,Aet),M(cA,Zt,null),e(Mr,Let),e(Mr,Jr),M(dk,Jr,null),e(Jr,yet),e(Jr,KAe),e(KAe,xet),e(Jr,$et),e(Jr,yn),e(yn,ket),e(yn,ZAe),e(ZAe,Set),e(yn,Ret),e(yn,e7e),e(e7e,Pet),e(yn,Bet),e(yn,o7e),e(o7e,Iet),e(yn,Net),e(Jr,qet),e(Jr,Re),e(Re,mA),e(mA,r7e),e(r7e,jet),e(mA,Det),e(mA,Rre),e(Rre,Get),e(mA,Oet),e(Re,Vet),e(Re,fA),e(fA,t7e),e(t7e,Xet),e(fA,zet),e(fA,Pre),e(Pre,Wet),e(fA,Qet),e(Re,Het),e(Re,gA),e(gA,a7e),e(a7e,Uet),e(gA,Jet),e(gA,Bre),e(Bre,Yet),e(gA,Ket),e(Re,Zet),e(Re,hA),e(hA,n7e),e(n7e,eot),e(hA,oot),e(hA,Ire),e(Ire,rot),e(hA,tot),e(Re,aot),e(Re,uA),e(uA,s7e),e(s7e,not),e(uA,sot),e(uA,Nre),e(Nre,lot),e(uA,iot),e(Re,dot),e(Re,pA),e(pA,l7e),e(l7e,cot),e(pA,mot),e(pA,qre),e(qre,fot),e(pA,got),e(Re,hot),e(Re,_A),e(_A,i7e),e(i7e,uot),e(_A,pot),e(_A,jre),e(jre,_ot),e(_A,bot),e(Re,vot),e(Re,bA),e(bA,d7e),e(d7e,Fot),e(bA,Tot),e(bA,Dre),e(Dre,Mot),e(bA,Eot),e(Re,Cot),e(Re,vA),e(vA,c7e),e(c7e,wot),e(vA,Aot),e(vA,Gre),e(Gre,Lot),e(vA,yot),e(Re,xot),e(Re,FA),e(FA,m7e),e(m7e,$ot),e(FA,kot),e(FA,Ore),e(Ore,Sot),e(FA,Rot),e(Jr,Pot),M(TA,Jr,null),b(m,CQe,_),b(m,_m,_),e(_m,MA),e(MA,f7e),M(ck,f7e,null),e(_m,Bot),e(_m,g7e),e(g7e,Iot),b(m,wQe,_),b(m,Er,_),M(mk,Er,null),e(Er,Not),e(Er,bm),e(bm,qot),e(bm,Vre),e(Vre,jot),e(bm,Dot),e(bm,Xre),e(Xre,Got),e(bm,Oot),e(Er,Vot),e(Er,fk),e(fk,Xot),e(fk,h7e),e(h7e,zot),e(fk,Wot),e(Er,Qot),e(Er,ea),M(gk,ea,null),e(ea,Hot),e(ea,u7e),e(u7e,Uot),e(ea,Jot),e(ea,vm),e(vm,Yot),e(vm,p7e),e(p7e,Kot),e(vm,Zot),e(vm,zre),e(zre,ert),e(vm,ort),e(ea,rrt),M(EA,ea,null),e(Er,trt),e(Er,Yr),M(hk,Yr,null),e(Yr,art),e(Yr,_7e),e(_7e,nrt),e(Yr,srt),e(Yr,xn),e(xn,lrt),e(xn,b7e),e(b7e,irt),e(xn,drt),e(xn,v7e),e(v7e,crt),e(xn,mrt),e(xn,F7e),e(F7e,frt),e(xn,grt),e(Yr,hrt),e(Yr,Xe),e(Xe,CA),e(CA,T7e),e(T7e,urt),e(CA,prt),e(CA,Wre),e(Wre,_rt),e(CA,brt),e(Xe,vrt),e(Xe,wA),e(wA,M7e),e(M7e,Frt),e(wA,Trt),e(wA,Qre),e(Qre,Mrt),e(wA,Ert),e(Xe,Crt),e(Xe,AA),e(AA,E7e),e(E7e,wrt),e(AA,Art),e(AA,Hre),e(Hre,Lrt),e(AA,yrt),e(Xe,xrt),e(Xe,LA),e(LA,C7e),e(C7e,$rt),e(LA,krt),e(LA,Ure),e(Ure,Srt),e(LA,Rrt),e(Xe,Prt),e(Xe,yA),e(yA,w7e),e(w7e,Brt),e(yA,Irt),e(yA,Jre),e(Jre,Nrt),e(yA,qrt),e(Xe,jrt),e(Xe,xA),e(xA,A7e),e(A7e,Drt),e(xA,Grt),e(xA,Yre),e(Yre,Ort),e(xA,Vrt),e(Xe,Xrt),e(Xe,$A),e($A,L7e),e(L7e,zrt),e($A,Wrt),e($A,Kre),e(Kre,Qrt),e($A,Hrt),e(Xe,Urt),e(Xe,kA),e(kA,y7e),e(y7e,Jrt),e(kA,Yrt),e(kA,Zre),e(Zre,Krt),e(kA,Zrt),e(Yr,ett),M(SA,Yr,null),b(m,AQe,_),b(m,Fm,_),e(Fm,RA),e(RA,x7e),M(uk,x7e,null),e(Fm,ott),e(Fm,$7e),e($7e,rtt),b(m,LQe,_),b(m,Cr,_),M(pk,Cr,null),e(Cr,ttt),e(Cr,Tm),e(Tm,att),e(Tm,ete),e(ete,ntt),e(Tm,stt),e(Tm,ote),e(ote,ltt),e(Tm,itt),e(Cr,dtt),e(Cr,_k),e(_k,ctt),e(_k,k7e),e(k7e,mtt),e(_k,ftt),e(Cr,gtt),e(Cr,oa),M(bk,oa,null),e(oa,htt),e(oa,S7e),e(S7e,utt),e(oa,ptt),e(oa,Mm),e(Mm,_tt),e(Mm,R7e),e(R7e,btt),e(Mm,vtt),e(Mm,rte),e(rte,Ftt),e(Mm,Ttt),e(oa,Mtt),M(PA,oa,null),e(Cr,Ett),e(Cr,Kr),M(vk,Kr,null),e(Kr,Ctt),e(Kr,P7e),e(P7e,wtt),e(Kr,Att),e(Kr,$n),e($n,Ltt),e($n,B7e),e(B7e,ytt),e($n,xtt),e($n,I7e),e(I7e,$tt),e($n,ktt),e($n,N7e),e(N7e,Stt),e($n,Rtt),e(Kr,Ptt),e(Kr,ze),e(ze,BA),e(BA,q7e),e(q7e,Btt),e(BA,Itt),e(BA,tte),e(tte,Ntt),e(BA,qtt),e(ze,jtt),e(ze,IA),e(IA,j7e),e(j7e,Dtt),e(IA,Gtt),e(IA,ate),e(ate,Ott),e(IA,Vtt),e(ze,Xtt),e(ze,NA),e(NA,D7e),e(D7e,ztt),e(NA,Wtt),e(NA,nte),e(nte,Qtt),e(NA,Htt),e(ze,Utt),e(ze,qA),e(qA,G7e),e(G7e,Jtt),e(qA,Ytt),e(qA,ste),e(ste,Ktt),e(qA,Ztt),e(ze,eat),e(ze,jA),e(jA,O7e),e(O7e,oat),e(jA,rat),e(jA,lte),e(lte,tat),e(jA,aat),e(ze,nat),e(ze,DA),e(DA,V7e),e(V7e,sat),e(DA,lat),e(DA,ite),e(ite,iat),e(DA,dat),e(ze,cat),e(ze,GA),e(GA,X7e),e(X7e,mat),e(GA,fat),e(GA,dte),e(dte,gat),e(GA,hat),e(ze,uat),e(ze,OA),e(OA,z7e),e(z7e,pat),e(OA,_at),e(OA,cte),e(cte,bat),e(OA,vat),e(Kr,Fat),M(VA,Kr,null),b(m,yQe,_),b(m,Em,_),e(Em,XA),e(XA,W7e),M(Fk,W7e,null),e(Em,Tat),e(Em,Q7e),e(Q7e,Mat),b(m,xQe,_),b(m,wr,_),M(Tk,wr,null),e(wr,Eat),e(wr,Cm),e(Cm,Cat),e(Cm,mte),e(mte,wat),e(Cm,Aat),e(Cm,fte),e(fte,Lat),e(Cm,yat),e(wr,xat),e(wr,Mk),e(Mk,$at),e(Mk,H7e),e(H7e,kat),e(Mk,Sat),e(wr,Rat),e(wr,ra),M(Ek,ra,null),e(ra,Pat),e(ra,U7e),e(U7e,Bat),e(ra,Iat),e(ra,wm),e(wm,Nat),e(wm,J7e),e(J7e,qat),e(wm,jat),e(wm,gte),e(gte,Dat),e(wm,Gat),e(ra,Oat),M(zA,ra,null),e(wr,Vat),e(wr,Zr),M(Ck,Zr,null),e(Zr,Xat),e(Zr,Y7e),e(Y7e,zat),e(Zr,Wat),e(Zr,kn),e(kn,Qat),e(kn,K7e),e(K7e,Hat),e(kn,Uat),e(kn,Z7e),e(Z7e,Jat),e(kn,Yat),e(kn,eLe),e(eLe,Kat),e(kn,Zat),e(Zr,ent),e(Zr,oLe),e(oLe,WA),e(WA,rLe),e(rLe,ont),e(WA,rnt),e(WA,hte),e(hte,tnt),e(WA,ant),e(Zr,nnt),M(QA,Zr,null),b(m,$Qe,_),b(m,Am,_),e(Am,HA),e(HA,tLe),M(wk,tLe,null),e(Am,snt),e(Am,aLe),e(aLe,lnt),b(m,kQe,_),b(m,Ar,_),M(Ak,Ar,null),e(Ar,int),e(Ar,Lm),e(Lm,dnt),e(Lm,ute),e(ute,cnt),e(Lm,mnt),e(Lm,pte),e(pte,fnt),e(Lm,gnt),e(Ar,hnt),e(Ar,Lk),e(Lk,unt),e(Lk,nLe),e(nLe,pnt),e(Lk,_nt),e(Ar,bnt),e(Ar,ta),M(yk,ta,null),e(ta,vnt),e(ta,sLe),e(sLe,Fnt),e(ta,Tnt),e(ta,ym),e(ym,Mnt),e(ym,lLe),e(lLe,Ent),e(ym,Cnt),e(ym,_te),e(_te,wnt),e(ym,Ant),e(ta,Lnt),M(UA,ta,null),e(Ar,ynt),e(Ar,et),M(xk,et,null),e(et,xnt),e(et,iLe),e(iLe,$nt),e(et,knt),e(et,Sn),e(Sn,Snt),e(Sn,dLe),e(dLe,Rnt),e(Sn,Pnt),e(Sn,cLe),e(cLe,Bnt),e(Sn,Int),e(Sn,mLe),e(mLe,Nnt),e(Sn,qnt),e(et,jnt),e(et,$k),e($k,JA),e(JA,fLe),e(fLe,Dnt),e(JA,Gnt),e(JA,bte),e(bte,Ont),e(JA,Vnt),e($k,Xnt),e($k,YA),e(YA,gLe),e(gLe,znt),e(YA,Wnt),e(YA,vte),e(vte,Qnt),e(YA,Hnt),e(et,Unt),M(KA,et,null),b(m,SQe,_),b(m,xm,_),e(xm,ZA),e(ZA,hLe),M(kk,hLe,null),e(xm,Jnt),e(xm,uLe),e(uLe,Ynt),b(m,RQe,_),b(m,Lr,_),M(Sk,Lr,null),e(Lr,Knt),e(Lr,$m),e($m,Znt),e($m,Fte),e(Fte,est),e($m,ost),e($m,Tte),e(Tte,rst),e($m,tst),e(Lr,ast),e(Lr,Rk),e(Rk,nst),e(Rk,pLe),e(pLe,sst),e(Rk,lst),e(Lr,ist),e(Lr,aa),M(Pk,aa,null),e(aa,dst),e(aa,_Le),e(_Le,cst),e(aa,mst),e(aa,km),e(km,fst),e(km,bLe),e(bLe,gst),e(km,hst),e(km,Mte),e(Mte,ust),e(km,pst),e(aa,_st),M(e7,aa,null),e(Lr,bst),e(Lr,ot),M(Bk,ot,null),e(ot,vst),e(ot,vLe),e(vLe,Fst),e(ot,Tst),e(ot,Rn),e(Rn,Mst),e(Rn,FLe),e(FLe,Est),e(Rn,Cst),e(Rn,TLe),e(TLe,wst),e(Rn,Ast),e(Rn,MLe),e(MLe,Lst),e(Rn,yst),e(ot,xst),e(ot,ELe),e(ELe,o7),e(o7,CLe),e(CLe,$st),e(o7,kst),e(o7,Ete),e(Ete,Sst),e(o7,Rst),e(ot,Pst),M(r7,ot,null),PQe=!0},p(m,[_]){const Ik={};_&2&&(Ik.$$scope={dirty:_,ctx:m}),Dm.$set(Ik);const wLe={};_&2&&(wLe.$$scope={dirty:_,ctx:m}),oh.$set(wLe);const ALe={};_&2&&(ALe.$$scope={dirty:_,ctx:m}),Nh.$set(ALe);const LLe={};_&2&&(LLe.$$scope={dirty:_,ctx:m}),Mu.$set(LLe);const Nk={};_&2&&(Nk.$$scope={dirty:_,ctx:m}),Eu.$set(Nk);const yLe={};_&2&&(yLe.$$scope={dirty:_,ctx:m}),zu.$set(yLe);const Pn={};_&2&&(Pn.$$scope={dirty:_,ctx:m}),Wu.$set(Pn);const xLe={};_&2&&(xLe.$$scope={dirty:_,ctx:m}),Uu.$set(xLe);const $Le={};_&2&&($Le.$$scope={dirty:_,ctx:m}),r2.$set($Le);const kLe={};_&2&&(kLe.$$scope={dirty:_,ctx:m}),a2.$set(kLe);const qk={};_&2&&(qk.$$scope={dirty:_,ctx:m}),K2.$set(qk);const SLe={};_&2&&(SLe.$$scope={dirty:_,ctx:m}),eb.$set(SLe);const jk={};_&2&&(jk.$$scope={dirty:_,ctx:m}),Ob.$set(jk);const RLe={};_&2&&(RLe.$$scope={dirty:_,ctx:m}),Xb.$set(RLe);const Dk={};_&2&&(Dk.$$scope={dirty:_,ctx:m}),$v.$set(Dk);const PLe={};_&2&&(PLe.$$scope={dirty:_,ctx:m}),Sv.$set(PLe);const BLe={};_&2&&(BLe.$$scope={dirty:_,ctx:m}),Zv.$set(BLe);const ILe={};_&2&&(ILe.$$scope={dirty:_,ctx:m}),o1.$set(ILe);const Sm={};_&2&&(Sm.$$scope={dirty:_,ctx:m}),oF.$set(Sm);const NLe={};_&2&&(NLe.$$scope={dirty:_,ctx:m}),tF.$set(NLe);const qLe={};_&2&&(qLe.$$scope={dirty:_,ctx:m}),IF.$set(qLe);const jLe={};_&2&&(jLe.$$scope={dirty:_,ctx:m}),qF.$set(jLe);const Gk={};_&2&&(Gk.$$scope={dirty:_,ctx:m}),WF.$set(Gk);const DLe={};_&2&&(DLe.$$scope={dirty:_,ctx:m}),HF.$set(DLe);const GLe={};_&2&&(GLe.$$scope={dirty:_,ctx:m}),RT.$set(GLe);const OLe={};_&2&&(OLe.$$scope={dirty:_,ctx:m}),BT.$set(OLe);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),AM.$set(nt);const Ok={};_&2&&(Ok.$$scope={dirty:_,ctx:m}),yM.$set(Ok);const VLe={};_&2&&(VLe.$$scope={dirty:_,ctx:m}),kM.$set(VLe);const Vk={};_&2&&(Vk.$$scope={dirty:_,ctx:m}),RM.$set(Vk);const XLe={};_&2&&(XLe.$$scope={dirty:_,ctx:m}),UM.$set(XLe);const st={};_&2&&(st.$$scope={dirty:_,ctx:m}),YM.$set(st);const zLe={};_&2&&(zLe.$$scope={dirty:_,ctx:m}),e4.$set(zLe);const Rm={};_&2&&(Rm.$$scope={dirty:_,ctx:m}),r4.$set(Rm);const WLe={};_&2&&(WLe.$$scope={dirty:_,ctx:m}),n4.$set(WLe);const QLe={};_&2&&(QLe.$$scope={dirty:_,ctx:m}),l4.$set(QLe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),b4.$set(L);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),F4.$set(t7);const HLe={};_&2&&(HLe.$$scope={dirty:_,ctx:m}),L4.$set(HLe);const ULe={};_&2&&(ULe.$$scope={dirty:_,ctx:m}),x4.$set(ULe);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:m}),G4.$set(a7);const JLe={};_&2&&(JLe.$$scope={dirty:_,ctx:m}),V4.$set(JLe);const YLe={};_&2&&(YLe.$$scope={dirty:_,ctx:m}),Q4.$set(YLe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:m}),U4.$set(n7);const KLe={};_&2&&(KLe.$$scope={dirty:_,ctx:m}),rE.$set(KLe);const ZLe={};_&2&&(ZLe.$$scope={dirty:_,ctx:m}),aE.$set(ZLe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:m}),cE.$set(s7);const eye={};_&2&&(eye.$$scope={dirty:_,ctx:m}),fE.$set(eye);const oye={};_&2&&(oye.$$scope={dirty:_,ctx:m}),pE.$set(oye);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:m}),bE.$set(l7);const rye={};_&2&&(rye.$$scope={dirty:_,ctx:m}),TE.$set(rye);const tye={};_&2&&(tye.$$scope={dirty:_,ctx:m}),EE.$set(tye);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:m}),$E.$set(i7);const aye={};_&2&&(aye.$$scope={dirty:_,ctx:m}),SE.$set(aye);const nye={};_&2&&(nye.$$scope={dirty:_,ctx:m}),BE.$set(nye);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:m}),NE.$set(d7);const sye={};_&2&&(sye.$$scope={dirty:_,ctx:m}),PC.$set(sye);const lye={};_&2&&(lye.$$scope={dirty:_,ctx:m}),IC.$set(lye);const c7={};_&2&&(c7.$$scope={dirty:_,ctx:m}),s5.$set(c7);const iye={};_&2&&(iye.$$scope={dirty:_,ctx:m}),i5.$set(iye);const dye={};_&2&&(dye.$$scope={dirty:_,ctx:m}),M5.$set(dye);const m7={};_&2&&(m7.$$scope={dirty:_,ctx:m}),C5.$set(m7);const cye={};_&2&&(cye.$$scope={dirty:_,ctx:m}),S5.$set(cye);const mye={};_&2&&(mye.$$scope={dirty:_,ctx:m}),P5.$set(mye);const f7={};_&2&&(f7.$$scope={dirty:_,ctx:m}),o3.$set(f7);const fye={};_&2&&(fye.$$scope={dirty:_,ctx:m}),t3.$set(fye);const gye={};_&2&&(gye.$$scope={dirty:_,ctx:m}),h3.$set(gye);const g7={};_&2&&(g7.$$scope={dirty:_,ctx:m}),p3.$set(g7);const hye={};_&2&&(hye.$$scope={dirty:_,ctx:m}),V3.$set(hye);const uye={};_&2&&(uye.$$scope={dirty:_,ctx:m}),z3.$set(uye);const h7={};_&2&&(h7.$$scope={dirty:_,ctx:m}),d0.$set(h7);const pye={};_&2&&(pye.$$scope={dirty:_,ctx:m}),m0.$set(pye);const _ye={};_&2&&(_ye.$$scope={dirty:_,ctx:m}),h0.$set(_ye);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:m}),p0.$set(u7);const bye={};_&2&&(bye.$$scope={dirty:_,ctx:m}),b0.$set(bye);const vye={};_&2&&(vye.$$scope={dirty:_,ctx:m}),F0.$set(vye);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:m}),G0.$set(p7);const Fye={};_&2&&(Fye.$$scope={dirty:_,ctx:m}),V0.$set(Fye);const Tye={};_&2&&(Tye.$$scope={dirty:_,ctx:m}),cw.$set(Tye);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:m}),fw.$set(_7);const Mye={};_&2&&(Mye.$$scope={dirty:_,ctx:m}),hw.$set(Mye);const Eye={};_&2&&(Eye.$$scope={dirty:_,ctx:m}),pw.$set(Eye);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:m}),bw.$set(b7);const Cye={};_&2&&(Cye.$$scope={dirty:_,ctx:m}),Fw.$set(Cye);const wye={};_&2&&(wye.$$scope={dirty:_,ctx:m}),Hw.$set(wye);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:m}),Jw.$set(v7);const Aye={};_&2&&(Aye.$$scope={dirty:_,ctx:m}),l6.$set(Aye);const Lye={};_&2&&(Lye.$$scope={dirty:_,ctx:m}),d6.$set(Lye);const F7={};_&2&&(F7.$$scope={dirty:_,ctx:m}),E6.$set(F7);const yye={};_&2&&(yye.$$scope={dirty:_,ctx:m}),w6.$set(yye);const xye={};_&2&&(xye.$$scope={dirty:_,ctx:m}),I6.$set(xye);const T7={};_&2&&(T7.$$scope={dirty:_,ctx:m}),q6.$set(T7);const $ye={};_&2&&($ye.$$scope={dirty:_,ctx:m}),U6.$set($ye);const kye={};_&2&&(kye.$$scope={dirty:_,ctx:m}),Y6.$set(kye);const M7={};_&2&&(M7.$$scope={dirty:_,ctx:m}),iA.$set(M7);const Sye={};_&2&&(Sye.$$scope={dirty:_,ctx:m}),cA.$set(Sye);const Rye={};_&2&&(Rye.$$scope={dirty:_,ctx:m}),TA.$set(Rye);const E7={};_&2&&(E7.$$scope={dirty:_,ctx:m}),EA.$set(E7);const Pye={};_&2&&(Pye.$$scope={dirty:_,ctx:m}),SA.$set(Pye);const Bye={};_&2&&(Bye.$$scope={dirty:_,ctx:m}),PA.$set(Bye);const C7={};_&2&&(C7.$$scope={dirty:_,ctx:m}),VA.$set(C7);const Iye={};_&2&&(Iye.$$scope={dirty:_,ctx:m}),zA.$set(Iye);const Nye={};_&2&&(Nye.$$scope={dirty:_,ctx:m}),QA.$set(Nye);const w7={};_&2&&(w7.$$scope={dirty:_,ctx:m}),UA.$set(w7);const qye={};_&2&&(qye.$$scope={dirty:_,ctx:m}),KA.$set(qye);const jye={};_&2&&(jye.$$scope={dirty:_,ctx:m}),e7.$set(jye);const A7={};_&2&&(A7.$$scope={dirty:_,ctx:m}),r7.$set(A7)},i(m){PQe||(E(c.$$.fragment,m),E(Sa.$$.fragment,m),E(Ay.$$.fragment,m),E(Ly.$$.fragment,m),E(Dm.$$.fragment,m),E(yy.$$.fragment,m),E(xy.$$.fragment,m),E(Sy.$$.fragment,m),E(oh.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(qy.$$.fragment,m),E(Nh.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Xy.$$.fragment,m),E(Mu.$$.fragment,m),E(Eu.$$.fragment,m),E(zy.$$.fragment,m),E(Wy.$$.fragment,m),E(Qy.$$.fragment,m),E(Jy.$$.fragment,m),E(zu.$$.fragment,m),E(Wu.$$.fragment,m),E(Yy.$$.fragment,m),E(Ky.$$.fragment,m),E(Zy.$$.fragment,m),E(o8.$$.fragment,m),E(Uu.$$.fragment,m),E(r8.$$.fragment,m),E(r2.$$.fragment,m),E(t8.$$.fragment,m),E(a8.$$.fragment,m),E(s8.$$.fragment,m),E(a2.$$.fragment,m),E(l8.$$.fragment,m),E(K2.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(eb.$$.fragment,m),E(f8.$$.fragment,m),E(Ob.$$.fragment,m),E(g8.$$.fragment,m),E(h8.$$.fragment,m),E(p8.$$.fragment,m),E(Xb.$$.fragment,m),E(_8.$$.fragment,m),E($v.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(T8.$$.fragment,m),E(Sv.$$.fragment,m),E(M8.$$.fragment,m),E(Zv.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(A8.$$.fragment,m),E(o1.$$.fragment,m),E(L8.$$.fragment,m),E(oF.$$.fragment,m),E(y8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(tF.$$.fragment,m),E(S8.$$.fragment,m),E(IF.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(I8.$$.fragment,m),E(qF.$$.fragment,m),E(N8.$$.fragment,m),E(WF.$$.fragment,m),E(q8.$$.fragment,m),E(j8.$$.fragment,m),E(G8.$$.fragment,m),E(HF.$$.fragment,m),E(O8.$$.fragment,m),E(RT.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(W8.$$.fragment,m),E(BT.$$.fragment,m),E(Q8.$$.fragment,m),E(AM.$$.fragment,m),E(H8.$$.fragment,m),E(U8.$$.fragment,m),E(Y8.$$.fragment,m),E(yM.$$.fragment,m),E(K8.$$.fragment,m),E(kM.$$.fragment,m),E(Z8.$$.fragment,m),E(e9.$$.fragment,m),E(r9.$$.fragment,m),E(RM.$$.fragment,m),E(t9.$$.fragment,m),E(UM.$$.fragment,m),E(a9.$$.fragment,m),E(n9.$$.fragment,m),E(l9.$$.fragment,m),E(YM.$$.fragment,m),E(i9.$$.fragment,m),E(e4.$$.fragment,m),E(d9.$$.fragment,m),E(c9.$$.fragment,m),E(f9.$$.fragment,m),E(r4.$$.fragment,m),E(g9.$$.fragment,m),E(n4.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(_9.$$.fragment,m),E(l4.$$.fragment,m),E(b9.$$.fragment,m),E(b4.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(M9.$$.fragment,m),E(F4.$$.fragment,m),E(E9.$$.fragment,m),E(L4.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(L9.$$.fragment,m),E(x4.$$.fragment,m),E(y9.$$.fragment,m),E(G4.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E(V4.$$.fragment,m),E(R9.$$.fragment,m),E(Q4.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(q9.$$.fragment,m),E(U4.$$.fragment,m),E(j9.$$.fragment,m),E(rE.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(aE.$$.fragment,m),E(X9.$$.fragment,m),E(cE.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(fE.$$.fragment,m),E(U9.$$.fragment,m),E(pE.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(ex.$$.fragment,m),E(bE.$$.fragment,m),E(ox.$$.fragment,m),E(TE.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(nx.$$.fragment,m),E(EE.$$.fragment,m),E(sx.$$.fragment,m),E($E.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(cx.$$.fragment,m),E(SE.$$.fragment,m),E(mx.$$.fragment,m),E(BE.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(ux.$$.fragment,m),E(NE.$$.fragment,m),E(px.$$.fragment,m),E(PC.$$.fragment,m),E(_x.$$.fragment,m),E(bx.$$.fragment,m),E(Fx.$$.fragment,m),E(IC.$$.fragment,m),E(Tx.$$.fragment,m),E(s5.$$.fragment,m),E(Mx.$$.fragment,m),E(Ex.$$.fragment,m),E(wx.$$.fragment,m),E(i5.$$.fragment,m),E(Ax.$$.fragment,m),E(M5.$$.fragment,m),E(Lx.$$.fragment,m),E(yx.$$.fragment,m),E($x.$$.fragment,m),E(C5.$$.fragment,m),E(kx.$$.fragment,m),E(S5.$$.fragment,m),E(Sx.$$.fragment,m),E(Rx.$$.fragment,m),E(Bx.$$.fragment,m),E(P5.$$.fragment,m),E(Ix.$$.fragment,m),E(o3.$$.fragment,m),E(Nx.$$.fragment,m),E(qx.$$.fragment,m),E(Dx.$$.fragment,m),E(t3.$$.fragment,m),E(Gx.$$.fragment,m),E(h3.$$.fragment,m),E(Ox.$$.fragment,m),E(Vx.$$.fragment,m),E(zx.$$.fragment,m),E(p3.$$.fragment,m),E(Wx.$$.fragment,m),E(V3.$$.fragment,m),E(Qx.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(z3.$$.fragment,m),E(Yx.$$.fragment,m),E(d0.$$.fragment,m),E(Kx.$$.fragment,m),E(Zx.$$.fragment,m),E(o$.$$.fragment,m),E(m0.$$.fragment,m),E(r$.$$.fragment,m),E(h0.$$.fragment,m),E(a$.$$.fragment,m),E(n$.$$.fragment,m),E(l$.$$.fragment,m),E(p0.$$.fragment,m),E(i$.$$.fragment,m),E(b0.$$.fragment,m),E(d$.$$.fragment,m),E(c$.$$.fragment,m),E(f$.$$.fragment,m),E(F0.$$.fragment,m),E(g$.$$.fragment,m),E(G0.$$.fragment,m),E(h$.$$.fragment,m),E(u$.$$.fragment,m),E(_$.$$.fragment,m),E(V0.$$.fragment,m),E(b$.$$.fragment,m),E(cw.$$.fragment,m),E(v$.$$.fragment,m),E(F$.$$.fragment,m),E(M$.$$.fragment,m),E(fw.$$.fragment,m),E(E$.$$.fragment,m),E(hw.$$.fragment,m),E(C$.$$.fragment,m),E(w$.$$.fragment,m),E(L$.$$.fragment,m),E(pw.$$.fragment,m),E(y$.$$.fragment,m),E(bw.$$.fragment,m),E(x$.$$.fragment,m),E($$.$$.fragment,m),E(S$.$$.fragment,m),E(Fw.$$.fragment,m),E(R$.$$.fragment,m),E(Hw.$$.fragment,m),E(P$.$$.fragment,m),E(B$.$$.fragment,m),E(N$.$$.fragment,m),E(Jw.$$.fragment,m),E(q$.$$.fragment,m),E(l6.$$.fragment,m),E(j$.$$.fragment,m),E(D$.$$.fragment,m),E(O$.$$.fragment,m),E(d6.$$.fragment,m),E(V$.$$.fragment,m),E(E6.$$.fragment,m),E(X$.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(w6.$$.fragment,m),E(H$.$$.fragment,m),E(I6.$$.fragment,m),E(U$.$$.fragment,m),E(J$.$$.fragment,m),E(K$.$$.fragment,m),E(q6.$$.fragment,m),E(Z$.$$.fragment,m),E(U6.$$.fragment,m),E(ek.$$.fragment,m),E(ok.$$.fragment,m),E(tk.$$.fragment,m),E(Y6.$$.fragment,m),E(ak.$$.fragment,m),E(iA.$$.fragment,m),E(nk.$$.fragment,m),E(sk.$$.fragment,m),E(ik.$$.fragment,m),E(cA.$$.fragment,m),E(dk.$$.fragment,m),E(TA.$$.fragment,m),E(ck.$$.fragment,m),E(mk.$$.fragment,m),E(gk.$$.fragment,m),E(EA.$$.fragment,m),E(hk.$$.fragment,m),E(SA.$$.fragment,m),E(uk.$$.fragment,m),E(pk.$$.fragment,m),E(bk.$$.fragment,m),E(PA.$$.fragment,m),E(vk.$$.fragment,m),E(VA.$$.fragment,m),E(Fk.$$.fragment,m),E(Tk.$$.fragment,m),E(Ek.$$.fragment,m),E(zA.$$.fragment,m),E(Ck.$$.fragment,m),E(QA.$$.fragment,m),E(wk.$$.fragment,m),E(Ak.$$.fragment,m),E(yk.$$.fragment,m),E(UA.$$.fragment,m),E(xk.$$.fragment,m),E(KA.$$.fragment,m),E(kk.$$.fragment,m),E(Sk.$$.fragment,m),E(Pk.$$.fragment,m),E(e7.$$.fragment,m),E(Bk.$$.fragment,m),E(r7.$$.fragment,m),PQe=!0)},o(m){C(c.$$.fragment,m),C(Sa.$$.fragment,m),C(Ay.$$.fragment,m),C(Ly.$$.fragment,m),C(Dm.$$.fragment,m),C(yy.$$.fragment,m),C(xy.$$.fragment,m),C(Sy.$$.fragment,m),C(oh.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(qy.$$.fragment,m),C(Nh.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Xy.$$.fragment,m),C(Mu.$$.fragment,m),C(Eu.$$.fragment,m),C(zy.$$.fragment,m),C(Wy.$$.fragment,m),C(Qy.$$.fragment,m),C(Jy.$$.fragment,m),C(zu.$$.fragment,m),C(Wu.$$.fragment,m),C(Yy.$$.fragment,m),C(Ky.$$.fragment,m),C(Zy.$$.fragment,m),C(o8.$$.fragment,m),C(Uu.$$.fragment,m),C(r8.$$.fragment,m),C(r2.$$.fragment,m),C(t8.$$.fragment,m),C(a8.$$.fragment,m),C(s8.$$.fragment,m),C(a2.$$.fragment,m),C(l8.$$.fragment,m),C(K2.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(eb.$$.fragment,m),C(f8.$$.fragment,m),C(Ob.$$.fragment,m),C(g8.$$.fragment,m),C(h8.$$.fragment,m),C(p8.$$.fragment,m),C(Xb.$$.fragment,m),C(_8.$$.fragment,m),C($v.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(T8.$$.fragment,m),C(Sv.$$.fragment,m),C(M8.$$.fragment,m),C(Zv.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(A8.$$.fragment,m),C(o1.$$.fragment,m),C(L8.$$.fragment,m),C(oF.$$.fragment,m),C(y8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(tF.$$.fragment,m),C(S8.$$.fragment,m),C(IF.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(I8.$$.fragment,m),C(qF.$$.fragment,m),C(N8.$$.fragment,m),C(WF.$$.fragment,m),C(q8.$$.fragment,m),C(j8.$$.fragment,m),C(G8.$$.fragment,m),C(HF.$$.fragment,m),C(O8.$$.fragment,m),C(RT.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(W8.$$.fragment,m),C(BT.$$.fragment,m),C(Q8.$$.fragment,m),C(AM.$$.fragment,m),C(H8.$$.fragment,m),C(U8.$$.fragment,m),C(Y8.$$.fragment,m),C(yM.$$.fragment,m),C(K8.$$.fragment,m),C(kM.$$.fragment,m),C(Z8.$$.fragment,m),C(e9.$$.fragment,m),C(r9.$$.fragment,m),C(RM.$$.fragment,m),C(t9.$$.fragment,m),C(UM.$$.fragment,m),C(a9.$$.fragment,m),C(n9.$$.fragment,m),C(l9.$$.fragment,m),C(YM.$$.fragment,m),C(i9.$$.fragment,m),C(e4.$$.fragment,m),C(d9.$$.fragment,m),C(c9.$$.fragment,m),C(f9.$$.fragment,m),C(r4.$$.fragment,m),C(g9.$$.fragment,m),C(n4.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(_9.$$.fragment,m),C(l4.$$.fragment,m),C(b9.$$.fragment,m),C(b4.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(M9.$$.fragment,m),C(F4.$$.fragment,m),C(E9.$$.fragment,m),C(L4.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(L9.$$.fragment,m),C(x4.$$.fragment,m),C(y9.$$.fragment,m),C(G4.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C(V4.$$.fragment,m),C(R9.$$.fragment,m),C(Q4.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(q9.$$.fragment,m),C(U4.$$.fragment,m),C(j9.$$.fragment,m),C(rE.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(aE.$$.fragment,m),C(X9.$$.fragment,m),C(cE.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(fE.$$.fragment,m),C(U9.$$.fragment,m),C(pE.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(ex.$$.fragment,m),C(bE.$$.fragment,m),C(ox.$$.fragment,m),C(TE.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(nx.$$.fragment,m),C(EE.$$.fragment,m),C(sx.$$.fragment,m),C($E.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(cx.$$.fragment,m),C(SE.$$.fragment,m),C(mx.$$.fragment,m),C(BE.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(ux.$$.fragment,m),C(NE.$$.fragment,m),C(px.$$.fragment,m),C(PC.$$.fragment,m),C(_x.$$.fragment,m),C(bx.$$.fragment,m),C(Fx.$$.fragment,m),C(IC.$$.fragment,m),C(Tx.$$.fragment,m),C(s5.$$.fragment,m),C(Mx.$$.fragment,m),C(Ex.$$.fragment,m),C(wx.$$.fragment,m),C(i5.$$.fragment,m),C(Ax.$$.fragment,m),C(M5.$$.fragment,m),C(Lx.$$.fragment,m),C(yx.$$.fragment,m),C($x.$$.fragment,m),C(C5.$$.fragment,m),C(kx.$$.fragment,m),C(S5.$$.fragment,m),C(Sx.$$.fragment,m),C(Rx.$$.fragment,m),C(Bx.$$.fragment,m),C(P5.$$.fragment,m),C(Ix.$$.fragment,m),C(o3.$$.fragment,m),C(Nx.$$.fragment,m),C(qx.$$.fragment,m),C(Dx.$$.fragment,m),C(t3.$$.fragment,m),C(Gx.$$.fragment,m),C(h3.$$.fragment,m),C(Ox.$$.fragment,m),C(Vx.$$.fragment,m),C(zx.$$.fragment,m),C(p3.$$.fragment,m),C(Wx.$$.fragment,m),C(V3.$$.fragment,m),C(Qx.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(z3.$$.fragment,m),C(Yx.$$.fragment,m),C(d0.$$.fragment,m),C(Kx.$$.fragment,m),C(Zx.$$.fragment,m),C(o$.$$.fragment,m),C(m0.$$.fragment,m),C(r$.$$.fragment,m),C(h0.$$.fragment,m),C(a$.$$.fragment,m),C(n$.$$.fragment,m),C(l$.$$.fragment,m),C(p0.$$.fragment,m),C(i$.$$.fragment,m),C(b0.$$.fragment,m),C(d$.$$.fragment,m),C(c$.$$.fragment,m),C(f$.$$.fragment,m),C(F0.$$.fragment,m),C(g$.$$.fragment,m),C(G0.$$.fragment,m),C(h$.$$.fragment,m),C(u$.$$.fragment,m),C(_$.$$.fragment,m),C(V0.$$.fragment,m),C(b$.$$.fragment,m),C(cw.$$.fragment,m),C(v$.$$.fragment,m),C(F$.$$.fragment,m),C(M$.$$.fragment,m),C(fw.$$.fragment,m),C(E$.$$.fragment,m),C(hw.$$.fragment,m),C(C$.$$.fragment,m),C(w$.$$.fragment,m),C(L$.$$.fragment,m),C(pw.$$.fragment,m),C(y$.$$.fragment,m),C(bw.$$.fragment,m),C(x$.$$.fragment,m),C($$.$$.fragment,m),C(S$.$$.fragment,m),C(Fw.$$.fragment,m),C(R$.$$.fragment,m),C(Hw.$$.fragment,m),C(P$.$$.fragment,m),C(B$.$$.fragment,m),C(N$.$$.fragment,m),C(Jw.$$.fragment,m),C(q$.$$.fragment,m),C(l6.$$.fragment,m),C(j$.$$.fragment,m),C(D$.$$.fragment,m),C(O$.$$.fragment,m),C(d6.$$.fragment,m),C(V$.$$.fragment,m),C(E6.$$.fragment,m),C(X$.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(w6.$$.fragment,m),C(H$.$$.fragment,m),C(I6.$$.fragment,m),C(U$.$$.fragment,m),C(J$.$$.fragment,m),C(K$.$$.fragment,m),C(q6.$$.fragment,m),C(Z$.$$.fragment,m),C(U6.$$.fragment,m),C(ek.$$.fragment,m),C(ok.$$.fragment,m),C(tk.$$.fragment,m),C(Y6.$$.fragment,m),C(ak.$$.fragment,m),C(iA.$$.fragment,m),C(nk.$$.fragment,m),C(sk.$$.fragment,m),C(ik.$$.fragment,m),C(cA.$$.fragment,m),C(dk.$$.fragment,m),C(TA.$$.fragment,m),C(ck.$$.fragment,m),C(mk.$$.fragment,m),C(gk.$$.fragment,m),C(EA.$$.fragment,m),C(hk.$$.fragment,m),C(SA.$$.fragment,m),C(uk.$$.fragment,m),C(pk.$$.fragment,m),C(bk.$$.fragment,m),C(PA.$$.fragment,m),C(vk.$$.fragment,m),C(VA.$$.fragment,m),C(Fk.$$.fragment,m),C(Tk.$$.fragment,m),C(Ek.$$.fragment,m),C(zA.$$.fragment,m),C(Ck.$$.fragment,m),C(QA.$$.fragment,m),C(wk.$$.fragment,m),C(Ak.$$.fragment,m),C(yk.$$.fragment,m),C(UA.$$.fragment,m),C(xk.$$.fragment,m),C(KA.$$.fragment,m),C(kk.$$.fragment,m),C(Sk.$$.fragment,m),C(Pk.$$.fragment,m),C(e7.$$.fragment,m),C(Bk.$$.fragment,m),C(r7.$$.fragment,m),PQe=!1},d(m){t(g),m&&t(v),m&&t(u),w(c),m&&t(Bm),m&&t(lt),m&&t(Oe),m&&t(Qe),m&&t(Nm),w(Sa,m),m&&t(He),m&&t(Ae),m&&t(Ao),m&&t(Ra),m&&t(xze),m&&t(Ni),w(Ay),m&&t($ze),m&&t(jn),m&&t(kze),w(Ly,m),m&&t(Sze),m&&t(cR),m&&t(Rze),w(Dm,m),m&&t(Pze),m&&t(qi),w(yy),m&&t(Bze),m&&t(Lo),w(xy),w(Sy),w(oh),w(Ry),m&&t(Ize),m&&t(Di),w(Py),m&&t(Nze),m&&t(yo),w(By),w(qy),w(Nh),w(jy),m&&t(qze),m&&t(Gi),w(Dy),m&&t(jze),m&&t(xo),w(Gy),w(Xy),w(Mu),w(Eu),w(zy),m&&t(Dze),m&&t(Oi),w(Wy),m&&t(Gze),m&&t($o),w(Qy),w(Jy),w(zu),w(Wu),w(Yy),m&&t(Oze),m&&t(Xi),w(Ky),m&&t(Vze),m&&t(ko),w(Zy),w(o8),w(Uu),w(r8),w(r2),m&&t(Xze),m&&t(Qi),w(t8),m&&t(zze),m&&t(So),w(a8),w(s8),w(a2),w(l8),w(K2),m&&t(Wze),m&&t(Ji),w(i8),m&&t(Qze),m&&t(Ro),w(d8),w(m8),w(eb),w(f8),w(Ob),m&&t(Hze),m&&t(Zi),w(g8),m&&t(Uze),m&&t(Po),w(h8),w(p8),w(Xb),w(_8),w($v),m&&t(Jze),m&&t(rd),w(b8),m&&t(Yze),m&&t(Bo),w(v8),w(T8),w(Sv),w(M8),w(Zv),m&&t(Kze),m&&t(nd),w(E8),m&&t(Zze),m&&t(Io),w(C8),w(A8),w(o1),w(L8),w(oF),m&&t(eWe),m&&t(id),w(y8),m&&t(oWe),m&&t(No),w(x8),w(k8),w(tF),w(S8),w(IF),m&&t(rWe),m&&t(md),w(R8),m&&t(tWe),m&&t(qo),w(P8),w(I8),w(qF),w(N8),w(WF),m&&t(aWe),m&&t(hd),w(q8),m&&t(nWe),m&&t(Do),w(j8),w(G8),w(HF),w(O8),w(RT),m&&t(sWe),m&&t(_d),w(V8),m&&t(lWe),m&&t(Go),w(X8),w(W8),w(BT),w(Q8),w(AM),m&&t(iWe),m&&t(Fd),w(H8),m&&t(dWe),m&&t(Oo),w(U8),w(Y8),w(yM),w(K8),w(kM),m&&t(cWe),m&&t(Ed),w(Z8),m&&t(mWe),m&&t(Vo),w(e9),w(r9),w(RM),w(t9),w(UM),m&&t(fWe),m&&t(Ad),w(a9),m&&t(gWe),m&&t(Xo),w(n9),w(l9),w(YM),w(i9),w(e4),m&&t(hWe),m&&t(xd),w(d9),m&&t(uWe),m&&t(zo),w(c9),w(f9),w(r4),w(g9),w(n4),m&&t(pWe),m&&t(Sd),w(h9),m&&t(_We),m&&t(Wo),w(u9),w(_9),w(l4),w(b9),w(b4),m&&t(bWe),m&&t(Bd),w(v9),m&&t(vWe),m&&t(Qo),w(F9),w(M9),w(F4),w(E9),w(L4),m&&t(FWe),m&&t(qd),w(C9),m&&t(TWe),m&&t(Ho),w(w9),w(L9),w(x4),w(y9),w(G4),m&&t(MWe),m&&t(Gd),w(x9),m&&t(EWe),m&&t(Uo),w($9),w(S9),w(V4),w(R9),w(Q4),m&&t(CWe),m&&t(Xd),w(B9),m&&t(wWe),m&&t(Jo),w(I9),w(q9),w(U4),w(j9),w(rE),m&&t(AWe),m&&t(Qd),w(D9),m&&t(LWe),m&&t(Yo),w(G9),w(V9),w(aE),w(X9),w(cE),m&&t(yWe),m&&t(Jd),w(z9),m&&t(xWe),m&&t(Ko),w(W9),w(H9),w(fE),w(U9),w(pE),m&&t($We),m&&t(Zd),w(Y9),m&&t(kWe),m&&t(Zo),w(K9),w(ex),w(bE),w(ox),w(TE),m&&t(SWe),m&&t(rc),w(rx),m&&t(RWe),m&&t(er),w(tx),w(nx),w(EE),w(sx),w($E),m&&t(PWe),m&&t(nc),w(lx),m&&t(BWe),m&&t(or),w(ix),w(cx),w(SE),w(mx),w(BE),m&&t(IWe),m&&t(ic),w(fx),m&&t(NWe),m&&t(rr),w(gx),w(ux),w(NE),w(px),w(PC),m&&t(qWe),m&&t(mc),w(_x),m&&t(jWe),m&&t(tr),w(bx),w(Fx),w(IC),w(Tx),w(s5),m&&t(DWe),m&&t(hc),w(Mx),m&&t(GWe),m&&t(ar),w(Ex),w(wx),w(i5),w(Ax),w(M5),m&&t(OWe),m&&t(_c),w(Lx),m&&t(VWe),m&&t(nr),w(yx),w($x),w(C5),w(kx),w(S5),m&&t(XWe),m&&t(Fc),w(Sx),m&&t(zWe),m&&t(sr),w(Rx),w(Bx),w(P5),w(Ix),w(o3),m&&t(WWe),m&&t(Ec),w(Nx),m&&t(QWe),m&&t(lr),w(qx),w(Dx),w(t3),w(Gx),w(h3),m&&t(HWe),m&&t(Ac),w(Ox),m&&t(UWe),m&&t(ir),w(Vx),w(zx),w(p3),w(Wx),w(V3),m&&t(JWe),m&&t(xc),w(Qx),m&&t(YWe),m&&t(dr),w(Hx),w(Jx),w(z3),w(Yx),w(d0),m&&t(KWe),m&&t(Sc),w(Kx),m&&t(ZWe),m&&t(cr),w(Zx),w(o$),w(m0),w(r$),w(h0),m&&t(eQe),m&&t(Bc),w(a$),m&&t(oQe),m&&t(mr),w(n$),w(l$),w(p0),w(i$),w(b0),m&&t(rQe),m&&t(qc),w(d$),m&&t(tQe),m&&t(fr),w(c$),w(f$),w(F0),w(g$),w(G0),m&&t(aQe),m&&t(Gc),w(h$),m&&t(nQe),m&&t(gr),w(u$),w(_$),w(V0),w(b$),w(cw),m&&t(sQe),m&&t(Xc),w(v$),m&&t(lQe),m&&t(hr),w(F$),w(M$),w(fw),w(E$),w(hw),m&&t(iQe),m&&t(Qc),w(C$),m&&t(dQe),m&&t(ur),w(w$),w(L$),w(pw),w(y$),w(bw),m&&t(cQe),m&&t(Jc),w(x$),m&&t(mQe),m&&t(pr),w($$),w(S$),w(Fw),w(R$),w(Hw),m&&t(fQe),m&&t(Zc),w(P$),m&&t(gQe),m&&t(_r),w(B$),w(N$),w(Jw),w(q$),w(l6),m&&t(hQe),m&&t(rm),w(j$),m&&t(uQe),m&&t(br),w(D$),w(O$),w(d6),w(V$),w(E6),m&&t(pQe),m&&t(nm),w(X$),m&&t(_Qe),m&&t(vr),w(z$),w(Q$),w(w6),w(H$),w(I6),m&&t(bQe),m&&t(im),w(U$),m&&t(vQe),m&&t(Fr),w(J$),w(K$),w(q6),w(Z$),w(U6),m&&t(FQe),m&&t(mm),w(ek),m&&t(TQe),m&&t(Tr),w(ok),w(tk),w(Y6),w(ak),w(iA),m&&t(MQe),m&&t(hm),w(nk),m&&t(EQe),m&&t(Mr),w(sk),w(ik),w(cA),w(dk),w(TA),m&&t(CQe),m&&t(_m),w(ck),m&&t(wQe),m&&t(Er),w(mk),w(gk),w(EA),w(hk),w(SA),m&&t(AQe),m&&t(Fm),w(uk),m&&t(LQe),m&&t(Cr),w(pk),w(bk),w(PA),w(vk),w(VA),m&&t(yQe),m&&t(Em),w(Fk),m&&t(xQe),m&&t(wr),w(Tk),w(Ek),w(zA),w(Ck),w(QA),m&&t($Qe),m&&t(Am),w(wk),m&&t(kQe),m&&t(Ar),w(Ak),w(yk),w(UA),w(xk),w(KA),m&&t(SQe),m&&t(xm),w(kk),m&&t(RQe),m&&t(Lr),w(Sk),w(Pk),w(e7),w(Bk),w(r7)}}}const aZt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function nZt($){return tYt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fZt extends ZJt{constructor(g){super();eYt(this,g,nZt,tZt,oYt,{})}}export{fZt as default,aZt as metadata};
