import{S as RFa,i as PFa,s as BFa,e as a,k as l,w as F,t as o,M as IFa,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as NFa,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as YCt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function qFa($){let g,v,u,f,p,d,h,xo,dd,Rf,bt,cd,md,Cx,Pf,Ve,He,fd,ns,wx,ss,ls,Ax,gd,is,Lx,hd,Bf,Ja;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("~transformer.PretrainedConfig"),xo=o(`, make sure its
`),dd=a("code"),Rf=o("model_type"),bt=o(" attribute is set to the same key you use when registering the config (here "),cd=a("code"),md=o('"new-model"'),Cx=o(")."),Pf=l(),Ve=a("p"),He=o("Likewise, if your "),fd=a("code"),ns=o("NewModel"),wx=o(" is a subclass of "),ss=a("a"),ls=o("PreTrainedModel"),Ax=o(`, make sure its
`),gd=a("code"),is=o("config_class"),Lx=o(` attribute is set to the same class you use when registering the model (here
`),hd=a("code"),Bf=o("NewModelConfig"),Ja=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var RI=s(u);f=r(RI,"NewModelConfig"),RI.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ud=s(d);h=r(ud,"~transformer.PretrainedConfig"),ud.forEach(t),xo=r(Ae,`, make sure its
`),dd=n(Ae,"CODE",{});var PI=s(dd);Rf=r(PI,"model_type"),PI.forEach(t),bt=r(Ae," attribute is set to the same key you use when registering the config (here "),cd=n(Ae,"CODE",{});var BI=s(cd);md=r(BI,'"new-model"'),BI.forEach(t),Cx=r(Ae,")."),Ae.forEach(t),Pf=i(Je),Ve=n(Je,"P",{});var $o=s(Ve);He=r($o,"Likewise, if your "),fd=n($o,"CODE",{});var Ya=s(fd);ns=r(Ya,"NewModel"),Ya.forEach(t),wx=r($o," is a subclass of "),ss=n($o,"A",{href:!0});var II=s(ss);ls=r(II,"PreTrainedModel"),II.forEach(t),Ax=r($o,`, make sure its
`),gd=n($o,"CODE",{});var If=s(gd);is=r(If,"config_class"),If.forEach(t),Lx=r($o,` attribute is set to the same class you use when registering the model (here
`),hd=n($o,"CODE",{});var NI=s(hd);Bf=r(NI,"NewModelConfig"),NI.forEach(t),Ja=r($o,")."),$o.forEach(t),this.h()},h(){c(ss,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,xo),e(g,dd),e(dd,Rf),e(g,bt),e(g,cd),e(cd,md),e(g,Cx),b(Je,Pf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,fd),e(fd,ns),e(Ve,wx),e(Ve,ss),e(ss,ls),e(Ve,Ax),e(Ve,gd),e(gd,is),e(Ve,Lx),e(Ve,hd),e(hd,Bf),e(Ve,Ja)},d(Je){Je&&t(g),Je&&t(Pf),Je&&t(Ve)}}}function jFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GFa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);f=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function OFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VFa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var xo=s(u);f=r(xo,"use_auth_token=True"),xo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function XFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KFa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ETa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ATa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function STa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ITa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForZeroShotObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForZeroShotObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KTa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Ma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QMa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WMa($){let g,v,u,f,p,d,h,xo,dd,Rf,bt,cd,md,Cx,Pf,Ve,He,fd,ns,wx,ss,ls,Ax,gd,is,Lx,hd,Bf,Ja,Je,Ae,RI,ud,PI,BI,$o,Ya,II,If,NI,Jno,poo,pd,Nf,Jce,yx,Yno,Yce,Zno,_oo,ds,Kno,Zce,eso,oso,Kce,rso,tso,boo,xx,voo,qI,aso,Foo,qf,Too,_d,jf,eme,$x,nso,ome,sso,Moo,ko,kx,lso,Sx,iso,jI,dso,cso,mso,Rx,fso,rme,gso,hso,uso,Ir,Px,pso,tme,_so,bso,bd,vso,ame,Fso,Tso,nme,Mso,Eso,Cso,A,Df,sme,wso,Aso,DI,Lso,yso,xso,Gf,lme,$so,kso,GI,Sso,Rso,Pso,Of,ime,Bso,Iso,OI,Nso,qso,jso,Vf,dme,Dso,Gso,VI,Oso,Vso,Xso,Xf,cme,zso,Qso,XI,Wso,Uso,Hso,zf,mme,Jso,Yso,zI,Zso,Kso,elo,Qf,fme,olo,rlo,QI,tlo,alo,nlo,Wf,gme,slo,llo,WI,ilo,dlo,clo,Uf,hme,mlo,flo,UI,glo,hlo,ulo,Hf,ume,plo,_lo,HI,blo,vlo,Flo,Jf,pme,Tlo,Mlo,JI,Elo,Clo,wlo,Yf,_me,Alo,Llo,YI,ylo,xlo,$lo,Zf,bme,klo,Slo,ZI,Rlo,Plo,Blo,Kf,vme,Ilo,Nlo,KI,qlo,jlo,Dlo,eg,Fme,Glo,Olo,eN,Vlo,Xlo,zlo,og,Tme,Qlo,Wlo,oN,Ulo,Hlo,Jlo,rg,Mme,Ylo,Zlo,rN,Klo,eio,oio,tg,Eme,rio,tio,tN,aio,nio,sio,ag,Cme,lio,iio,aN,dio,cio,mio,ng,wme,fio,gio,nN,hio,uio,pio,sg,Ame,_io,bio,sN,vio,Fio,Tio,lg,Lme,Mio,Eio,lN,Cio,wio,Aio,ig,yme,Lio,yio,iN,xio,$io,kio,dg,xme,Sio,Rio,dN,Pio,Bio,Iio,cg,$me,Nio,qio,cN,jio,Dio,Gio,mg,kme,Oio,Vio,mN,Xio,zio,Qio,fg,Sme,Wio,Uio,fN,Hio,Jio,Yio,gg,Rme,Zio,Kio,gN,edo,odo,rdo,hg,Pme,tdo,ado,hN,ndo,sdo,ldo,ug,Bme,ido,ddo,uN,cdo,mdo,fdo,pg,Ime,gdo,hdo,pN,udo,pdo,_do,_g,Nme,bdo,vdo,_N,Fdo,Tdo,Mdo,bg,qme,Edo,Cdo,bN,wdo,Ado,Ldo,vg,jme,ydo,xdo,vN,$do,kdo,Sdo,Fg,Dme,Rdo,Pdo,FN,Bdo,Ido,Ndo,Tg,Gme,qdo,jdo,TN,Ddo,Gdo,Odo,Mg,Ome,Vdo,Xdo,MN,zdo,Qdo,Wdo,Eg,Vme,Udo,Hdo,EN,Jdo,Ydo,Zdo,Cg,Xme,Kdo,eco,CN,oco,rco,tco,wg,zme,aco,nco,wN,sco,lco,ico,Ag,Qme,dco,cco,AN,mco,fco,gco,Lg,Wme,hco,uco,LN,pco,_co,bco,yg,Ume,vco,Fco,yN,Tco,Mco,Eco,xg,Hme,Cco,wco,xN,Aco,Lco,yco,$g,Jme,xco,$co,$N,kco,Sco,Rco,kg,Yme,Pco,Bco,kN,Ico,Nco,qco,Sg,Zme,jco,Dco,SN,Gco,Oco,Vco,Rg,Kme,Xco,zco,RN,Qco,Wco,Uco,Pg,efe,Hco,Jco,PN,Yco,Zco,Kco,Bg,ofe,emo,omo,BN,rmo,tmo,amo,Ig,rfe,nmo,smo,IN,lmo,imo,dmo,Ng,tfe,cmo,mmo,NN,fmo,gmo,hmo,qg,afe,umo,pmo,qN,_mo,bmo,vmo,jg,nfe,Fmo,Tmo,jN,Mmo,Emo,Cmo,Dg,sfe,wmo,Amo,DN,Lmo,ymo,xmo,Gg,lfe,$mo,kmo,GN,Smo,Rmo,Pmo,Og,ife,Bmo,Imo,ON,Nmo,qmo,jmo,Vg,dfe,Dmo,Gmo,VN,Omo,Vmo,Xmo,Xg,cfe,zmo,Qmo,XN,Wmo,Umo,Hmo,zg,mfe,Jmo,Ymo,zN,Zmo,Kmo,efo,Qg,ffe,ofo,rfo,QN,tfo,afo,nfo,Wg,gfe,sfo,lfo,WN,ifo,dfo,cfo,Ug,hfe,mfo,ffo,UN,gfo,hfo,ufo,Hg,ufe,pfo,_fo,HN,bfo,vfo,Ffo,Jg,pfe,Tfo,Mfo,JN,Efo,Cfo,wfo,Yg,_fe,Afo,Lfo,YN,yfo,xfo,$fo,Zg,bfe,kfo,Sfo,ZN,Rfo,Pfo,Bfo,Kg,vfe,Ifo,Nfo,KN,qfo,jfo,Dfo,eh,Ffe,Gfo,Ofo,eq,Vfo,Xfo,zfo,oh,Tfe,Qfo,Wfo,oq,Ufo,Hfo,Jfo,rh,Mfe,Yfo,Zfo,rq,Kfo,ego,ogo,th,Efe,rgo,tgo,tq,ago,ngo,sgo,ah,Cfe,lgo,igo,aq,dgo,cgo,mgo,nh,wfe,fgo,ggo,nq,hgo,ugo,pgo,sh,Afe,_go,bgo,sq,vgo,Fgo,Tgo,lh,Lfe,Mgo,Ego,lq,Cgo,wgo,Ago,ih,yfe,Lgo,ygo,iq,xgo,$go,kgo,dh,xfe,Sgo,Rgo,dq,Pgo,Bgo,Igo,ch,$fe,Ngo,qgo,cq,jgo,Dgo,Ggo,mh,kfe,Ogo,Vgo,mq,Xgo,zgo,Qgo,fh,Sfe,Wgo,Ugo,fq,Hgo,Jgo,Ygo,gh,Rfe,Zgo,Kgo,gq,eho,oho,rho,hh,Pfe,tho,aho,hq,nho,sho,lho,uh,Bfe,iho,dho,uq,cho,mho,fho,ph,Ife,gho,hho,pq,uho,pho,_ho,_h,Nfe,bho,vho,_q,Fho,Tho,Mho,bh,qfe,Eho,Cho,bq,who,Aho,Lho,vh,jfe,yho,xho,vq,$ho,kho,Sho,Fh,Dfe,Rho,Pho,Fq,Bho,Iho,Nho,Th,Gfe,qho,jho,Tq,Dho,Gho,Oho,Mh,Ofe,Vho,Xho,Mq,zho,Qho,Who,Eh,Vfe,Uho,Hho,Eq,Jho,Yho,Zho,Ch,Xfe,Kho,euo,Cq,ouo,ruo,tuo,wh,zfe,auo,nuo,wq,suo,luo,iuo,Ah,Qfe,duo,cuo,Aq,muo,fuo,guo,Lh,Wfe,huo,uuo,Lq,puo,_uo,buo,yh,Ufe,vuo,Fuo,yq,Tuo,Muo,Euo,xh,Hfe,Cuo,wuo,xq,Auo,Luo,yuo,$h,Jfe,xuo,$uo,$q,kuo,Suo,Ruo,kh,Yfe,Puo,Buo,kq,Iuo,Nuo,quo,Sh,Zfe,juo,Duo,Sq,Guo,Ouo,Vuo,Rh,Kfe,Xuo,zuo,Rq,Quo,Wuo,Uuo,Ph,ege,Huo,Juo,Pq,Yuo,Zuo,Kuo,Bh,oge,epo,opo,Bq,rpo,tpo,apo,Ih,rge,npo,spo,Iq,lpo,ipo,dpo,Nh,tge,cpo,mpo,Nq,fpo,gpo,hpo,qh,age,upo,ppo,qq,_po,bpo,vpo,jh,nge,Fpo,Tpo,jq,Mpo,Epo,Cpo,Dh,sge,wpo,Apo,Dq,Lpo,ypo,xpo,Gh,lge,$po,kpo,Gq,Spo,Rpo,Ppo,Oh,ige,Bpo,Ipo,Oq,Npo,qpo,jpo,Vh,dge,Dpo,Gpo,Vq,Opo,Vpo,Xpo,Xh,cge,zpo,Qpo,Xq,Wpo,Upo,Hpo,zh,mge,Jpo,Ypo,zq,Zpo,Kpo,e_o,Qh,fge,o_o,r_o,Qq,t_o,a_o,n_o,Wh,gge,s_o,l_o,Wq,i_o,d_o,c_o,Uh,hge,m_o,f_o,Uq,g_o,h_o,u_o,Hh,uge,p_o,__o,Hq,b_o,v_o,F_o,Jh,pge,T_o,M_o,Jq,E_o,C_o,w_o,Yh,_ge,A_o,L_o,Yq,y_o,x_o,$_o,Zh,bge,k_o,S_o,Zq,R_o,P_o,B_o,Kh,vge,I_o,N_o,Kq,q_o,j_o,D_o,eu,Fge,G_o,O_o,ej,V_o,X_o,z_o,ou,Tge,Q_o,W_o,oj,U_o,H_o,J_o,ru,Mge,Y_o,Z_o,rj,K_o,e1o,o1o,tu,Ege,r1o,t1o,tj,a1o,n1o,s1o,au,Cge,l1o,i1o,aj,d1o,c1o,m1o,nu,wge,f1o,g1o,nj,h1o,u1o,p1o,su,Age,_1o,b1o,sj,v1o,F1o,T1o,lu,Lge,M1o,E1o,lj,C1o,w1o,A1o,iu,yge,L1o,y1o,ij,x1o,$1o,k1o,du,xge,S1o,R1o,dj,P1o,B1o,I1o,cu,$ge,N1o,q1o,cj,j1o,D1o,G1o,mu,O1o,fu,Bx,V1o,kge,X1o,Eoo,vd,gu,Sge,Ix,z1o,Rge,Q1o,Coo,So,Nx,W1o,qx,U1o,mj,H1o,J1o,Y1o,jx,Z1o,Pge,K1o,e2o,o2o,Nr,Dx,r2o,Bge,t2o,a2o,Za,n2o,Ige,s2o,l2o,Nge,i2o,d2o,qge,c2o,m2o,f2o,k,cs,jge,g2o,h2o,fj,u2o,p2o,gj,_2o,b2o,v2o,ms,Dge,F2o,T2o,hj,M2o,E2o,uj,C2o,w2o,A2o,fs,Gge,L2o,y2o,pj,x2o,$2o,_j,k2o,S2o,R2o,hu,Oge,P2o,B2o,bj,I2o,N2o,q2o,gs,Vge,j2o,D2o,vj,G2o,O2o,Fj,V2o,X2o,z2o,uu,Xge,Q2o,W2o,Tj,U2o,H2o,J2o,pu,zge,Y2o,Z2o,Mj,K2o,ebo,obo,_u,Qge,rbo,tbo,Ej,abo,nbo,sbo,hs,Wge,lbo,ibo,Cj,dbo,cbo,wj,mbo,fbo,gbo,us,Uge,hbo,ubo,Aj,pbo,_bo,Lj,bbo,vbo,Fbo,ps,Hge,Tbo,Mbo,yj,Ebo,Cbo,xj,wbo,Abo,Lbo,bu,Jge,ybo,xbo,$j,$bo,kbo,Sbo,vu,Yge,Rbo,Pbo,kj,Bbo,Ibo,Nbo,Fu,Zge,qbo,jbo,Sj,Dbo,Gbo,Obo,_s,Kge,Vbo,Xbo,Rj,zbo,Qbo,Pj,Wbo,Ubo,Hbo,Tu,ehe,Jbo,Ybo,Bj,Zbo,Kbo,evo,bs,ohe,ovo,rvo,Ij,tvo,avo,Nj,nvo,svo,lvo,vs,rhe,ivo,dvo,qj,cvo,mvo,jj,fvo,gvo,hvo,Fs,the,uvo,pvo,Dj,_vo,bvo,Gj,vvo,Fvo,Tvo,Ts,ahe,Mvo,Evo,Oj,Cvo,wvo,Vj,Avo,Lvo,yvo,Mu,nhe,xvo,$vo,Xj,kvo,Svo,Rvo,Ms,she,Pvo,Bvo,zj,Ivo,Nvo,Qj,qvo,jvo,Dvo,Es,lhe,Gvo,Ovo,Wj,Vvo,Xvo,Uj,zvo,Qvo,Wvo,Cs,ihe,Uvo,Hvo,Hj,Jvo,Yvo,Jj,Zvo,Kvo,eFo,ws,dhe,oFo,rFo,Yj,tFo,aFo,Zj,nFo,sFo,lFo,As,che,iFo,dFo,Kj,cFo,mFo,eD,fFo,gFo,hFo,Ls,mhe,uFo,pFo,oD,_Fo,bFo,rD,vFo,FFo,TFo,ys,fhe,MFo,EFo,tD,CFo,wFo,aD,AFo,LFo,yFo,Eu,ghe,xFo,$Fo,nD,kFo,SFo,RFo,xs,hhe,PFo,BFo,sD,IFo,NFo,lD,qFo,jFo,DFo,Cu,uhe,GFo,OFo,iD,VFo,XFo,zFo,$s,phe,QFo,WFo,dD,UFo,HFo,cD,JFo,YFo,ZFo,ks,_he,KFo,eTo,mD,oTo,rTo,fD,tTo,aTo,nTo,Ss,bhe,sTo,lTo,gD,iTo,dTo,hD,cTo,mTo,fTo,wu,vhe,gTo,hTo,uD,uTo,pTo,_To,Au,Fhe,bTo,vTo,pD,FTo,TTo,MTo,Rs,The,ETo,CTo,_D,wTo,ATo,bD,LTo,yTo,xTo,Ps,Mhe,$To,kTo,vD,STo,RTo,FD,PTo,BTo,ITo,Bs,Ehe,NTo,qTo,TD,jTo,DTo,MD,GTo,OTo,VTo,Lu,Che,XTo,zTo,ED,QTo,WTo,UTo,Is,whe,HTo,JTo,CD,YTo,ZTo,wD,KTo,eMo,oMo,Ns,Ahe,rMo,tMo,AD,aMo,nMo,LD,sMo,lMo,iMo,qs,Lhe,dMo,cMo,yD,mMo,fMo,xD,gMo,hMo,uMo,js,yhe,pMo,_Mo,$D,bMo,vMo,kD,FMo,TMo,MMo,Ds,xhe,EMo,CMo,SD,wMo,AMo,RD,LMo,yMo,xMo,Gs,$he,$Mo,kMo,PD,SMo,RMo,BD,PMo,BMo,IMo,Os,khe,NMo,qMo,ID,jMo,DMo,ND,GMo,OMo,VMo,Vs,She,XMo,zMo,qD,QMo,WMo,jD,UMo,HMo,JMo,yu,Rhe,YMo,ZMo,DD,KMo,eEo,oEo,Xs,Phe,rEo,tEo,GD,aEo,nEo,OD,sEo,lEo,iEo,xu,Bhe,dEo,cEo,VD,mEo,fEo,gEo,$u,Ihe,hEo,uEo,XD,pEo,_Eo,bEo,zs,Nhe,vEo,FEo,zD,TEo,MEo,QD,EEo,CEo,wEo,Qs,qhe,AEo,LEo,WD,yEo,xEo,UD,$Eo,kEo,SEo,Ws,jhe,REo,PEo,HD,BEo,IEo,JD,NEo,qEo,jEo,ku,Dhe,DEo,GEo,YD,OEo,VEo,XEo,Us,Ghe,zEo,QEo,ZD,WEo,UEo,KD,HEo,JEo,YEo,Hs,Ohe,ZEo,KEo,eG,e4o,o4o,oG,r4o,t4o,a4o,Js,Vhe,n4o,s4o,rG,l4o,i4o,tG,d4o,c4o,m4o,Ys,Xhe,f4o,g4o,aG,h4o,u4o,nG,p4o,_4o,b4o,Zs,zhe,v4o,F4o,sG,T4o,M4o,lG,E4o,C4o,w4o,Ks,Qhe,A4o,L4o,iG,y4o,x4o,dG,$4o,k4o,S4o,el,Whe,R4o,P4o,cG,B4o,I4o,mG,N4o,q4o,j4o,ol,Uhe,D4o,G4o,fG,O4o,V4o,gG,X4o,z4o,Q4o,Su,Hhe,W4o,U4o,hG,H4o,J4o,Y4o,rl,Jhe,Z4o,K4o,uG,eCo,oCo,pG,rCo,tCo,aCo,tl,Yhe,nCo,sCo,_G,lCo,iCo,bG,dCo,cCo,mCo,Ru,Zhe,fCo,gCo,vG,hCo,uCo,pCo,Pu,Khe,_Co,bCo,FG,vCo,FCo,TCo,Bu,eue,MCo,ECo,TG,CCo,wCo,ACo,Iu,oue,LCo,yCo,MG,xCo,$Co,kCo,al,rue,SCo,RCo,EG,PCo,BCo,CG,ICo,NCo,qCo,Nu,tue,jCo,DCo,wG,GCo,OCo,VCo,nl,aue,XCo,zCo,AG,QCo,WCo,LG,UCo,HCo,JCo,sl,nue,YCo,ZCo,yG,KCo,e3o,xG,o3o,r3o,t3o,ll,sue,a3o,n3o,$G,s3o,l3o,kG,i3o,d3o,c3o,il,lue,m3o,f3o,SG,g3o,h3o,RG,u3o,p3o,_3o,dl,iue,b3o,v3o,PG,F3o,T3o,BG,M3o,E3o,C3o,cl,due,w3o,A3o,IG,L3o,y3o,NG,x3o,$3o,k3o,qu,cue,S3o,R3o,qG,P3o,B3o,I3o,ju,mue,N3o,q3o,jG,j3o,D3o,G3o,ml,fue,O3o,V3o,DG,X3o,z3o,GG,Q3o,W3o,U3o,fl,gue,H3o,J3o,OG,Y3o,Z3o,VG,K3o,e5o,o5o,gl,hue,r5o,t5o,XG,a5o,n5o,zG,s5o,l5o,i5o,Du,uue,d5o,c5o,QG,m5o,f5o,g5o,Gu,pue,h5o,u5o,WG,p5o,_5o,b5o,Ou,_ue,v5o,F5o,UG,T5o,M5o,E5o,hl,bue,C5o,w5o,HG,A5o,L5o,JG,y5o,x5o,$5o,ul,vue,k5o,S5o,YG,R5o,P5o,ZG,B5o,I5o,N5o,Vu,Fue,q5o,j5o,KG,D5o,G5o,O5o,Xu,Tue,V5o,X5o,eO,z5o,Q5o,W5o,zu,Mue,U5o,H5o,oO,J5o,Y5o,Z5o,Qu,Eue,K5o,e0o,rO,o0o,r0o,t0o,pl,Cue,a0o,n0o,tO,s0o,l0o,aO,i0o,d0o,c0o,_l,wue,m0o,f0o,nO,g0o,h0o,sO,u0o,p0o,_0o,Wu,Aue,b0o,v0o,lO,F0o,T0o,M0o,Uu,Lue,E0o,C0o,iO,w0o,A0o,L0o,bl,yue,y0o,x0o,dO,$0o,k0o,cO,S0o,R0o,P0o,vl,xue,B0o,I0o,mO,N0o,q0o,fO,j0o,D0o,G0o,Fl,$ue,O0o,V0o,gO,X0o,z0o,hO,Q0o,W0o,U0o,Tl,kue,H0o,J0o,uO,Y0o,Z0o,pO,K0o,ewo,owo,Hu,rwo,Ju,Gx,two,Sue,awo,woo,Fd,Yu,Rue,Ox,nwo,Pue,swo,Aoo,Ro,Vx,lwo,Xx,iwo,_O,dwo,cwo,mwo,zx,fwo,Bue,gwo,hwo,uwo,Ye,Qx,pwo,Iue,_wo,bwo,Ka,vwo,Nue,Fwo,Two,que,Mwo,Ewo,jue,Cwo,wwo,Awo,z,Zu,Due,Lwo,ywo,bO,xwo,$wo,kwo,Ku,Gue,Swo,Rwo,vO,Pwo,Bwo,Iwo,ep,Oue,Nwo,qwo,FO,jwo,Dwo,Gwo,op,Vue,Owo,Vwo,TO,Xwo,zwo,Qwo,rp,Xue,Wwo,Uwo,MO,Hwo,Jwo,Ywo,tp,zue,Zwo,Kwo,EO,eAo,oAo,rAo,ap,Que,tAo,aAo,CO,nAo,sAo,lAo,np,Wue,iAo,dAo,wO,cAo,mAo,fAo,sp,Uue,gAo,hAo,AO,uAo,pAo,_Ao,lp,Hue,bAo,vAo,LO,FAo,TAo,MAo,ip,Jue,EAo,CAo,yO,wAo,AAo,LAo,dp,Yue,yAo,xAo,xO,$Ao,kAo,SAo,cp,Zue,RAo,PAo,$O,BAo,IAo,NAo,mp,Kue,qAo,jAo,kO,DAo,GAo,OAo,fp,epe,VAo,XAo,SO,zAo,QAo,WAo,gp,ope,UAo,HAo,RO,JAo,YAo,ZAo,hp,rpe,KAo,e6o,PO,o6o,r6o,t6o,up,tpe,a6o,n6o,BO,s6o,l6o,i6o,pp,ape,d6o,c6o,IO,m6o,f6o,g6o,_p,npe,h6o,u6o,NO,p6o,_6o,b6o,bp,spe,v6o,F6o,qO,T6o,M6o,E6o,vp,lpe,C6o,w6o,jO,A6o,L6o,y6o,Fp,ipe,x6o,$6o,DO,k6o,S6o,R6o,Tp,dpe,P6o,B6o,GO,I6o,N6o,q6o,Mp,cpe,j6o,D6o,OO,G6o,O6o,V6o,Ep,mpe,X6o,z6o,VO,Q6o,W6o,U6o,Cp,fpe,H6o,J6o,XO,Y6o,Z6o,K6o,wp,gpe,e7o,o7o,zO,r7o,t7o,a7o,Ap,hpe,n7o,s7o,QO,l7o,i7o,d7o,Lp,upe,c7o,m7o,WO,f7o,g7o,h7o,yp,ppe,u7o,p7o,UO,_7o,b7o,v7o,xp,_pe,F7o,T7o,HO,M7o,E7o,C7o,$p,bpe,w7o,A7o,JO,L7o,y7o,x7o,kp,vpe,$7o,k7o,YO,S7o,R7o,P7o,Sp,Fpe,B7o,I7o,ZO,N7o,q7o,j7o,Rp,Tpe,D7o,G7o,KO,O7o,V7o,X7o,Pp,Mpe,z7o,Q7o,eV,W7o,U7o,H7o,Bp,Epe,J7o,Y7o,oV,Z7o,K7o,eLo,Ip,Cpe,oLo,rLo,rV,tLo,aLo,nLo,Np,wpe,sLo,lLo,tV,iLo,dLo,cLo,qp,Ape,mLo,fLo,aV,gLo,hLo,uLo,jp,Lpe,pLo,_Lo,nV,bLo,vLo,FLo,Dp,ype,TLo,MLo,sV,ELo,CLo,wLo,Gp,ALo,Op,LLo,Vp,Wx,yLo,xpe,xLo,Loo,Td,Xp,$pe,Ux,$Lo,kpe,kLo,yoo,Po,Hx,SLo,Jx,RLo,lV,PLo,BLo,ILo,Yx,NLo,Spe,qLo,jLo,DLo,Ze,Zx,GLo,Rpe,OLo,VLo,Md,XLo,Ppe,zLo,QLo,Bpe,WLo,ULo,HLo,se,zp,Ipe,JLo,YLo,iV,ZLo,KLo,e8o,Qp,Npe,o8o,r8o,dV,t8o,a8o,n8o,Wp,qpe,s8o,l8o,cV,i8o,d8o,c8o,Up,jpe,m8o,f8o,mV,g8o,h8o,u8o,Hp,Dpe,p8o,_8o,fV,b8o,v8o,F8o,Jp,Gpe,T8o,M8o,gV,E8o,C8o,w8o,Yp,Ope,A8o,L8o,hV,y8o,x8o,$8o,Zp,Vpe,k8o,S8o,uV,R8o,P8o,B8o,Kp,Xpe,I8o,N8o,pV,q8o,j8o,D8o,e_,zpe,G8o,O8o,_V,V8o,X8o,z8o,o_,Qpe,Q8o,W8o,bV,U8o,H8o,J8o,r_,Wpe,Y8o,Z8o,vV,K8o,eyo,oyo,t_,Upe,ryo,tyo,FV,ayo,nyo,syo,a_,Hpe,lyo,iyo,TV,dyo,cyo,myo,n_,Jpe,fyo,gyo,MV,hyo,uyo,pyo,s_,Ype,_yo,byo,EV,vyo,Fyo,Tyo,l_,Zpe,Myo,Eyo,CV,Cyo,wyo,Ayo,i_,Kpe,Lyo,yyo,wV,xyo,$yo,kyo,d_,e_e,Syo,Ryo,AV,Pyo,Byo,Iyo,c_,o_e,Nyo,qyo,LV,jyo,Dyo,Gyo,m_,r_e,Oyo,Vyo,yV,Xyo,zyo,Qyo,f_,t_e,Wyo,Uyo,xV,Hyo,Jyo,Yyo,g_,a_e,Zyo,Kyo,$V,e9o,o9o,r9o,h_,t9o,u_,a9o,p_,Kx,n9o,n_e,s9o,xoo,Ed,__,s_e,e$,l9o,l_e,i9o,$oo,Bo,o$,d9o,Cd,c9o,kV,m9o,f9o,SV,g9o,h9o,u9o,r$,p9o,i_e,_9o,b9o,v9o,vt,t$,F9o,d_e,T9o,M9o,wd,E9o,c_e,C9o,w9o,RV,A9o,L9o,y9o,b_,x9o,Ke,a$,$9o,m_e,k9o,S9o,en,R9o,f_e,P9o,B9o,g_e,I9o,N9o,h_e,q9o,j9o,D9o,y,v_,u_e,G9o,O9o,PV,V9o,X9o,z9o,F_,p_e,Q9o,W9o,BV,U9o,H9o,J9o,T_,__e,Y9o,Z9o,IV,K9o,exo,oxo,M_,b_e,rxo,txo,NV,axo,nxo,sxo,E_,v_e,lxo,ixo,qV,dxo,cxo,mxo,C_,F_e,fxo,gxo,jV,hxo,uxo,pxo,w_,T_e,_xo,bxo,DV,vxo,Fxo,Txo,A_,M_e,Mxo,Exo,GV,Cxo,wxo,Axo,L_,E_e,Lxo,yxo,OV,xxo,$xo,kxo,y_,C_e,Sxo,Rxo,VV,Pxo,Bxo,Ixo,x_,w_e,Nxo,qxo,XV,jxo,Dxo,Gxo,$_,A_e,Oxo,Vxo,zV,Xxo,zxo,Qxo,k_,L_e,Wxo,Uxo,QV,Hxo,Jxo,Yxo,S_,y_e,Zxo,Kxo,WV,e$o,o$o,r$o,R_,x_e,t$o,a$o,UV,n$o,s$o,l$o,P_,$_e,i$o,d$o,HV,c$o,m$o,f$o,B_,k_e,g$o,h$o,JV,u$o,p$o,_$o,I_,S_e,b$o,v$o,YV,F$o,T$o,M$o,N_,R_e,E$o,C$o,ZV,w$o,A$o,L$o,q_,P_e,y$o,x$o,KV,$$o,k$o,S$o,j_,B_e,R$o,P$o,eX,B$o,I$o,N$o,D_,I_e,q$o,j$o,oX,D$o,G$o,O$o,G_,N_e,V$o,X$o,rX,z$o,Q$o,W$o,O_,q_e,U$o,H$o,tX,J$o,Y$o,Z$o,V_,j_e,K$o,eko,aX,oko,rko,tko,X_,D_e,ako,nko,nX,sko,lko,iko,z_,G_e,dko,cko,sX,mko,fko,gko,Q_,O_e,hko,uko,lX,pko,_ko,bko,W_,V_e,vko,Fko,iX,Tko,Mko,Eko,U_,X_e,Cko,wko,dX,Ako,Lko,yko,H_,z_e,xko,$ko,cX,kko,Sko,Rko,J_,Q_e,Pko,Bko,mX,Iko,Nko,qko,Y_,W_e,jko,Dko,fX,Gko,Oko,Vko,Z_,U_e,Xko,zko,gX,Qko,Wko,Uko,K_,H_e,Hko,Jko,hX,Yko,Zko,Kko,e1,J_e,eSo,oSo,uX,rSo,tSo,aSo,o1,Y_e,nSo,sSo,pX,lSo,iSo,dSo,r1,Z_e,cSo,mSo,_X,fSo,gSo,hSo,t1,K_e,uSo,pSo,bX,_So,bSo,vSo,Ml,e1e,FSo,TSo,vX,MSo,ESo,FX,CSo,wSo,ASo,a1,o1e,LSo,ySo,TX,xSo,$So,kSo,n1,r1e,SSo,RSo,MX,PSo,BSo,ISo,s1,t1e,NSo,qSo,EX,jSo,DSo,GSo,l1,a1e,OSo,VSo,CX,XSo,zSo,QSo,i1,n1e,WSo,USo,wX,HSo,JSo,YSo,d1,s1e,ZSo,KSo,AX,eRo,oRo,rRo,c1,l1e,tRo,aRo,LX,nRo,sRo,lRo,m1,i1e,iRo,dRo,yX,cRo,mRo,fRo,f1,d1e,gRo,hRo,xX,uRo,pRo,_Ro,g1,c1e,bRo,vRo,$X,FRo,TRo,MRo,h1,m1e,ERo,CRo,kX,wRo,ARo,LRo,u1,f1e,yRo,xRo,SX,$Ro,kRo,SRo,p1,g1e,RRo,PRo,RX,BRo,IRo,NRo,_1,h1e,qRo,jRo,PX,DRo,GRo,ORo,b1,u1e,VRo,XRo,BX,zRo,QRo,WRo,v1,p1e,URo,HRo,IX,JRo,YRo,ZRo,F1,_1e,KRo,ePo,NX,oPo,rPo,tPo,T1,b1e,aPo,nPo,qX,sPo,lPo,iPo,M1,v1e,dPo,cPo,jX,mPo,fPo,gPo,E1,F1e,hPo,uPo,DX,pPo,_Po,bPo,C1,T1e,vPo,FPo,GX,TPo,MPo,EPo,w1,M1e,CPo,wPo,OX,APo,LPo,yPo,A1,E1e,xPo,$Po,VX,kPo,SPo,RPo,L1,C1e,PPo,BPo,XX,IPo,NPo,qPo,y1,w1e,jPo,DPo,zX,GPo,OPo,VPo,x1,A1e,XPo,zPo,QX,QPo,WPo,UPo,$1,L1e,HPo,JPo,WX,YPo,ZPo,KPo,k1,y1e,eBo,oBo,UX,rBo,tBo,aBo,S1,x1e,nBo,sBo,HX,lBo,iBo,dBo,R1,$1e,cBo,mBo,JX,fBo,gBo,hBo,P1,k1e,uBo,pBo,YX,_Bo,bBo,vBo,B1,S1e,FBo,TBo,ZX,MBo,EBo,CBo,I1,R1e,wBo,ABo,KX,LBo,yBo,xBo,N1,P1e,$Bo,kBo,ez,SBo,RBo,PBo,q1,B1e,BBo,IBo,oz,NBo,qBo,jBo,j1,I1e,DBo,GBo,rz,OBo,VBo,XBo,D1,N1e,zBo,QBo,tz,WBo,UBo,HBo,G1,q1e,JBo,YBo,az,ZBo,KBo,eIo,O1,j1e,oIo,rIo,nz,tIo,aIo,nIo,V1,D1e,sIo,lIo,sz,iIo,dIo,cIo,X1,G1e,mIo,fIo,lz,gIo,hIo,uIo,z1,O1e,pIo,_Io,iz,bIo,vIo,FIo,Q1,V1e,TIo,MIo,dz,EIo,CIo,wIo,W1,X1e,AIo,LIo,cz,yIo,xIo,$Io,U1,z1e,kIo,SIo,mz,RIo,PIo,BIo,H1,Q1e,IIo,NIo,fz,qIo,jIo,DIo,J1,W1e,GIo,OIo,gz,VIo,XIo,zIo,Y1,U1e,QIo,WIo,hz,UIo,HIo,JIo,Z1,H1e,YIo,ZIo,uz,KIo,eNo,oNo,K1,J1e,rNo,tNo,pz,aNo,nNo,sNo,e2,Y1e,lNo,iNo,_z,dNo,cNo,mNo,o2,Z1e,fNo,gNo,bz,hNo,uNo,pNo,r2,K1e,_No,bNo,vz,vNo,FNo,TNo,t2,e2e,MNo,ENo,Fz,CNo,wNo,ANo,a2,o2e,LNo,yNo,Tz,xNo,$No,kNo,n2,r2e,SNo,RNo,Mz,PNo,BNo,INo,s2,t2e,NNo,qNo,Ez,jNo,DNo,GNo,l2,a2e,ONo,VNo,Cz,XNo,zNo,QNo,i2,n2e,WNo,UNo,wz,HNo,JNo,YNo,d2,s2e,ZNo,KNo,Az,eqo,oqo,rqo,c2,l2e,tqo,aqo,Lz,nqo,sqo,lqo,m2,i2e,iqo,dqo,yz,cqo,mqo,fqo,f2,d2e,gqo,hqo,xz,uqo,pqo,_qo,g2,c2e,bqo,vqo,$z,Fqo,Tqo,Mqo,h2,m2e,Eqo,Cqo,kz,wqo,Aqo,Lqo,u2,f2e,yqo,xqo,Sz,$qo,kqo,Sqo,p2,g2e,Rqo,Pqo,Rz,Bqo,Iqo,Nqo,_2,h2e,qqo,jqo,Pz,Dqo,Gqo,Oqo,b2,u2e,Vqo,Xqo,Bz,zqo,Qqo,Wqo,v2,p2e,Uqo,Hqo,Iz,Jqo,Yqo,Zqo,F2,_2e,Kqo,ejo,Nz,ojo,rjo,tjo,T2,b2e,ajo,njo,qz,sjo,ljo,ijo,M2,v2e,djo,cjo,jz,mjo,fjo,gjo,E2,F2e,hjo,ujo,Dz,pjo,_jo,bjo,C2,T2e,vjo,Fjo,Gz,Tjo,Mjo,Ejo,w2,M2e,Cjo,wjo,Oz,Ajo,Ljo,yjo,A2,E2e,xjo,$jo,Vz,kjo,Sjo,Rjo,L2,C2e,Pjo,Bjo,Xz,Ijo,Njo,qjo,y2,w2e,jjo,Djo,zz,Gjo,Ojo,Vjo,x2,A2e,Xjo,zjo,Qz,Qjo,Wjo,Ujo,$2,L2e,Hjo,Jjo,Wz,Yjo,Zjo,Kjo,k2,y2e,eDo,oDo,Uz,rDo,tDo,aDo,S2,x2e,nDo,sDo,Hz,lDo,iDo,dDo,R2,$2e,cDo,mDo,Jz,fDo,gDo,hDo,P2,k2e,uDo,pDo,Yz,_Do,bDo,vDo,B2,S2e,FDo,TDo,Zz,MDo,EDo,CDo,I2,R2e,wDo,ADo,Kz,LDo,yDo,xDo,N2,$Do,P2e,kDo,SDo,B2e,RDo,PDo,q2,koo,Ad,j2,I2e,n$,BDo,N2e,IDo,Soo,Io,s$,NDo,Ld,qDo,eQ,jDo,DDo,oQ,GDo,ODo,VDo,l$,XDo,q2e,zDo,QDo,WDo,Ft,i$,UDo,j2e,HDo,JDo,yd,YDo,D2e,ZDo,KDo,rQ,eGo,oGo,rGo,D2,tGo,eo,d$,aGo,G2e,nGo,sGo,on,lGo,O2e,iGo,dGo,V2e,cGo,mGo,X2e,fGo,gGo,hGo,G,G2,z2e,uGo,pGo,tQ,_Go,bGo,vGo,O2,Q2e,FGo,TGo,aQ,MGo,EGo,CGo,V2,W2e,wGo,AGo,nQ,LGo,yGo,xGo,X2,U2e,$Go,kGo,sQ,SGo,RGo,PGo,z2,H2e,BGo,IGo,lQ,NGo,qGo,jGo,Q2,J2e,DGo,GGo,iQ,OGo,VGo,XGo,W2,Y2e,zGo,QGo,dQ,WGo,UGo,HGo,U2,Z2e,JGo,YGo,cQ,ZGo,KGo,eOo,H2,K2e,oOo,rOo,mQ,tOo,aOo,nOo,J2,ebe,sOo,lOo,fQ,iOo,dOo,cOo,Y2,obe,mOo,fOo,gQ,gOo,hOo,uOo,Z2,rbe,pOo,_Oo,hQ,bOo,vOo,FOo,K2,tbe,TOo,MOo,uQ,EOo,COo,wOo,eb,abe,AOo,LOo,pQ,yOo,xOo,$Oo,ob,nbe,kOo,SOo,_Q,ROo,POo,BOo,rb,sbe,IOo,NOo,bQ,qOo,jOo,DOo,tb,lbe,GOo,OOo,vQ,VOo,XOo,zOo,ab,ibe,QOo,WOo,FQ,UOo,HOo,JOo,nb,dbe,YOo,ZOo,TQ,KOo,eVo,oVo,sb,cbe,rVo,tVo,MQ,aVo,nVo,sVo,lb,mbe,lVo,iVo,EQ,dVo,cVo,mVo,ib,fbe,fVo,gVo,CQ,hVo,uVo,pVo,db,gbe,_Vo,bVo,wQ,vVo,FVo,TVo,cb,hbe,MVo,EVo,AQ,CVo,wVo,AVo,mb,ube,LVo,yVo,LQ,xVo,$Vo,kVo,fb,pbe,SVo,RVo,yQ,PVo,BVo,IVo,gb,_be,NVo,qVo,xQ,jVo,DVo,GVo,hb,bbe,OVo,VVo,$Q,XVo,zVo,QVo,ub,vbe,WVo,UVo,kQ,HVo,JVo,YVo,pb,Fbe,ZVo,KVo,SQ,eXo,oXo,rXo,_b,Tbe,tXo,aXo,RQ,nXo,sXo,lXo,bb,Mbe,iXo,dXo,PQ,cXo,mXo,fXo,vb,Ebe,gXo,hXo,BQ,uXo,pXo,_Xo,Fb,Cbe,bXo,vXo,IQ,FXo,TXo,MXo,Tb,wbe,EXo,CXo,NQ,wXo,AXo,LXo,Mb,Abe,yXo,xXo,qQ,$Xo,kXo,SXo,Eb,Lbe,RXo,PXo,jQ,BXo,IXo,NXo,Cb,ybe,qXo,jXo,DQ,DXo,GXo,OXo,wb,xbe,VXo,XXo,GQ,zXo,QXo,WXo,Ab,$be,UXo,HXo,OQ,JXo,YXo,ZXo,Lb,kbe,KXo,ezo,VQ,ozo,rzo,tzo,yb,Sbe,azo,nzo,XQ,szo,lzo,izo,xb,Rbe,dzo,czo,zQ,mzo,fzo,gzo,$b,Pbe,hzo,uzo,QQ,pzo,_zo,bzo,kb,Bbe,vzo,Fzo,WQ,Tzo,Mzo,Ezo,Sb,Ibe,Czo,wzo,UQ,Azo,Lzo,yzo,Rb,Nbe,xzo,$zo,HQ,kzo,Szo,Rzo,Pb,qbe,Pzo,Bzo,JQ,Izo,Nzo,qzo,Bb,jzo,jbe,Dzo,Gzo,Dbe,Ozo,Vzo,Ib,Roo,xd,Nb,Gbe,c$,Xzo,Obe,zzo,Poo,No,m$,Qzo,$d,Wzo,YQ,Uzo,Hzo,ZQ,Jzo,Yzo,Zzo,f$,Kzo,Vbe,eQo,oQo,rQo,Tt,g$,tQo,Xbe,aQo,nQo,kd,sQo,zbe,lQo,iQo,KQ,dQo,cQo,mQo,qb,fQo,oo,h$,gQo,Qbe,hQo,uQo,rn,pQo,Wbe,_Qo,bQo,Ube,vQo,FQo,Hbe,TQo,MQo,EQo,Q,jb,Jbe,CQo,wQo,eW,AQo,LQo,yQo,Db,Ybe,xQo,$Qo,oW,kQo,SQo,RQo,Gb,Zbe,PQo,BQo,rW,IQo,NQo,qQo,Ob,Kbe,jQo,DQo,tW,GQo,OQo,VQo,Vb,eve,XQo,zQo,aW,QQo,WQo,UQo,Xb,ove,HQo,JQo,nW,YQo,ZQo,KQo,zb,rve,eWo,oWo,sW,rWo,tWo,aWo,Qb,tve,nWo,sWo,lW,lWo,iWo,dWo,Wb,ave,cWo,mWo,iW,fWo,gWo,hWo,Ub,nve,uWo,pWo,dW,_Wo,bWo,vWo,Hb,sve,FWo,TWo,cW,MWo,EWo,CWo,Jb,lve,wWo,AWo,mW,LWo,yWo,xWo,Yb,ive,$Wo,kWo,fW,SWo,RWo,PWo,Zb,dve,BWo,IWo,gW,NWo,qWo,jWo,Kb,cve,DWo,GWo,hW,OWo,VWo,XWo,ev,mve,zWo,QWo,uW,WWo,UWo,HWo,ov,fve,JWo,YWo,pW,ZWo,KWo,eUo,rv,gve,oUo,rUo,_W,tUo,aUo,nUo,tv,hve,sUo,lUo,bW,iUo,dUo,cUo,av,uve,mUo,fUo,vW,gUo,hUo,uUo,nv,pve,pUo,_Uo,FW,bUo,vUo,FUo,sv,_ve,TUo,MUo,TW,EUo,CUo,wUo,lv,bve,AUo,LUo,MW,yUo,xUo,$Uo,iv,vve,kUo,SUo,EW,RUo,PUo,BUo,dv,Fve,IUo,NUo,CW,qUo,jUo,DUo,cv,Tve,GUo,OUo,wW,VUo,XUo,zUo,mv,Mve,QUo,WUo,AW,UUo,HUo,JUo,fv,Eve,YUo,ZUo,LW,KUo,eHo,oHo,gv,Cve,rHo,tHo,yW,aHo,nHo,sHo,hv,wve,lHo,iHo,xW,dHo,cHo,mHo,uv,Ave,fHo,gHo,$W,hHo,uHo,pHo,pv,Lve,_Ho,bHo,kW,vHo,FHo,THo,_v,yve,MHo,EHo,SW,CHo,wHo,AHo,bv,xve,LHo,yHo,RW,xHo,$Ho,kHo,vv,$ve,SHo,RHo,PW,PHo,BHo,IHo,Fv,kve,NHo,qHo,BW,jHo,DHo,GHo,Tv,Sve,OHo,VHo,IW,XHo,zHo,QHo,Mv,Rve,WHo,UHo,NW,HHo,JHo,YHo,Ev,Pve,ZHo,KHo,qW,eJo,oJo,rJo,Cv,Bve,tJo,aJo,jW,nJo,sJo,lJo,wv,Ive,iJo,dJo,DW,cJo,mJo,fJo,Av,Nve,gJo,hJo,GW,uJo,pJo,_Jo,Lv,bJo,qve,vJo,FJo,jve,TJo,MJo,yv,Boo,Sd,xv,Dve,u$,EJo,Gve,CJo,Ioo,qo,p$,wJo,Rd,AJo,OW,LJo,yJo,VW,xJo,$Jo,kJo,_$,SJo,Ove,RJo,PJo,BJo,Mt,b$,IJo,Vve,NJo,qJo,Pd,jJo,Xve,DJo,GJo,XW,OJo,VJo,XJo,$v,zJo,ro,v$,QJo,zve,WJo,UJo,tn,HJo,Qve,JJo,YJo,Wve,ZJo,KJo,Uve,eYo,oYo,rYo,J,kv,Hve,tYo,aYo,zW,nYo,sYo,lYo,Sv,Jve,iYo,dYo,QW,cYo,mYo,fYo,Rv,Yve,gYo,hYo,WW,uYo,pYo,_Yo,Pv,Zve,bYo,vYo,UW,FYo,TYo,MYo,Bv,Kve,EYo,CYo,HW,wYo,AYo,LYo,Iv,eFe,yYo,xYo,JW,$Yo,kYo,SYo,Nv,oFe,RYo,PYo,YW,BYo,IYo,NYo,qv,rFe,qYo,jYo,ZW,DYo,GYo,OYo,jv,tFe,VYo,XYo,KW,zYo,QYo,WYo,Dv,aFe,UYo,HYo,eU,JYo,YYo,ZYo,Gv,nFe,KYo,eZo,oU,oZo,rZo,tZo,Ov,sFe,aZo,nZo,rU,sZo,lZo,iZo,Vv,lFe,dZo,cZo,tU,mZo,fZo,gZo,Xv,iFe,hZo,uZo,aU,pZo,_Zo,bZo,zv,dFe,vZo,FZo,nU,TZo,MZo,EZo,Qv,cFe,CZo,wZo,sU,AZo,LZo,yZo,Wv,mFe,xZo,$Zo,lU,kZo,SZo,RZo,Uv,fFe,PZo,BZo,iU,IZo,NZo,qZo,Hv,gFe,jZo,DZo,dU,GZo,OZo,VZo,Jv,hFe,XZo,zZo,cU,QZo,WZo,UZo,Yv,uFe,HZo,JZo,mU,YZo,ZZo,KZo,Zv,pFe,eKo,oKo,fU,rKo,tKo,aKo,Kv,_Fe,nKo,sKo,gU,lKo,iKo,dKo,eF,bFe,cKo,mKo,hU,fKo,gKo,hKo,oF,vFe,uKo,pKo,uU,_Ko,bKo,vKo,rF,FFe,FKo,TKo,pU,MKo,EKo,CKo,tF,TFe,wKo,AKo,_U,LKo,yKo,xKo,aF,MFe,$Ko,kKo,bU,SKo,RKo,PKo,nF,EFe,BKo,IKo,vU,NKo,qKo,jKo,sF,CFe,DKo,GKo,FU,OKo,VKo,XKo,lF,wFe,zKo,QKo,TU,WKo,UKo,HKo,iF,AFe,JKo,YKo,MU,ZKo,KKo,eer,dF,LFe,oer,rer,EU,ter,aer,ner,cF,yFe,ser,ler,CU,ier,der,cer,mF,xFe,mer,fer,$Fe,ger,her,uer,fF,kFe,per,_er,wU,ber,ver,Fer,gF,SFe,Ter,Mer,AU,Eer,Cer,wer,hF,RFe,Aer,Ler,LU,yer,xer,$er,uF,PFe,ker,Ser,yU,Rer,Per,Ber,pF,Ier,BFe,Ner,qer,IFe,jer,Der,_F,Noo,Bd,bF,NFe,F$,Ger,qFe,Oer,qoo,jo,T$,Ver,Id,Xer,xU,zer,Qer,$U,Wer,Uer,Her,M$,Jer,jFe,Yer,Zer,Ker,Et,E$,eor,DFe,oor,ror,Nd,tor,GFe,aor,nor,kU,sor,lor,ior,vF,dor,to,C$,cor,OFe,mor,gor,an,hor,VFe,uor,por,XFe,_or,bor,zFe,vor,For,Tor,fe,FF,QFe,Mor,Eor,SU,Cor,wor,Aor,TF,WFe,Lor,yor,RU,xor,$or,kor,MF,UFe,Sor,Ror,PU,Por,Bor,Ior,EF,HFe,Nor,qor,BU,jor,Dor,Gor,CF,JFe,Oor,Vor,IU,Xor,zor,Qor,wF,YFe,Wor,Uor,NU,Hor,Jor,Yor,AF,ZFe,Zor,Kor,qU,err,orr,rrr,LF,KFe,trr,arr,jU,nrr,srr,lrr,yF,eTe,irr,drr,DU,crr,mrr,frr,xF,oTe,grr,hrr,GU,urr,prr,_rr,$F,rTe,brr,vrr,OU,Frr,Trr,Mrr,kF,tTe,Err,Crr,VU,wrr,Arr,Lrr,SF,aTe,yrr,xrr,XU,$rr,krr,Srr,RF,nTe,Rrr,Prr,zU,Brr,Irr,Nrr,PF,sTe,qrr,jrr,QU,Drr,Grr,Orr,BF,lTe,Vrr,Xrr,WU,zrr,Qrr,Wrr,IF,iTe,Urr,Hrr,UU,Jrr,Yrr,Zrr,NF,dTe,Krr,etr,HU,otr,rtr,ttr,qF,cTe,atr,ntr,JU,str,ltr,itr,jF,mTe,dtr,ctr,YU,mtr,ftr,gtr,DF,htr,fTe,utr,ptr,gTe,_tr,btr,GF,joo,qd,OF,hTe,w$,vtr,uTe,Ftr,Doo,Do,A$,Ttr,jd,Mtr,ZU,Etr,Ctr,KU,wtr,Atr,Ltr,L$,ytr,pTe,xtr,$tr,ktr,Ct,y$,Str,_Te,Rtr,Ptr,Dd,Btr,bTe,Itr,Ntr,eH,qtr,jtr,Dtr,VF,Gtr,ao,x$,Otr,vTe,Vtr,Xtr,nn,ztr,FTe,Qtr,Wtr,TTe,Utr,Htr,MTe,Jtr,Ytr,Ztr,q,XF,ETe,Ktr,ear,oH,oar,rar,tar,zF,CTe,aar,nar,rH,sar,lar,iar,QF,wTe,dar,car,tH,mar,far,gar,WF,ATe,har,uar,aH,par,_ar,bar,UF,LTe,Far,Tar,nH,Mar,Ear,Car,HF,yTe,war,Aar,sH,Lar,yar,xar,JF,xTe,$ar,kar,lH,Sar,Rar,Par,YF,$Te,Bar,Iar,iH,Nar,qar,jar,ZF,kTe,Dar,Gar,dH,Oar,Var,Xar,KF,STe,zar,Qar,cH,War,Uar,Har,eT,RTe,Jar,Yar,mH,Zar,Kar,enr,oT,PTe,onr,rnr,fH,tnr,anr,nnr,rT,BTe,snr,lnr,gH,inr,dnr,cnr,tT,ITe,mnr,fnr,hH,gnr,hnr,unr,aT,NTe,pnr,_nr,uH,bnr,vnr,Fnr,nT,qTe,Tnr,Mnr,pH,Enr,Cnr,wnr,sT,jTe,Anr,Lnr,_H,ynr,xnr,$nr,lT,DTe,knr,Snr,bH,Rnr,Pnr,Bnr,iT,GTe,Inr,Nnr,vH,qnr,jnr,Dnr,dT,OTe,Gnr,Onr,FH,Vnr,Xnr,znr,cT,VTe,Qnr,Wnr,TH,Unr,Hnr,Jnr,mT,XTe,Ynr,Znr,MH,Knr,esr,osr,fT,zTe,rsr,tsr,EH,asr,nsr,ssr,gT,QTe,lsr,isr,CH,dsr,csr,msr,hT,WTe,fsr,gsr,wH,hsr,usr,psr,uT,UTe,_sr,bsr,AH,vsr,Fsr,Tsr,pT,HTe,Msr,Esr,LH,Csr,wsr,Asr,_T,JTe,Lsr,ysr,yH,xsr,$sr,ksr,bT,YTe,Ssr,Rsr,xH,Psr,Bsr,Isr,vT,ZTe,Nsr,qsr,$H,jsr,Dsr,Gsr,FT,KTe,Osr,Vsr,kH,Xsr,zsr,Qsr,TT,eMe,Wsr,Usr,SH,Hsr,Jsr,Ysr,MT,oMe,Zsr,Ksr,RH,elr,olr,rlr,ET,rMe,tlr,alr,PH,nlr,slr,llr,CT,tMe,ilr,dlr,BH,clr,mlr,flr,wT,aMe,glr,hlr,IH,ulr,plr,_lr,AT,nMe,blr,vlr,NH,Flr,Tlr,Mlr,LT,sMe,Elr,Clr,qH,wlr,Alr,Llr,yT,lMe,ylr,xlr,jH,$lr,klr,Slr,xT,iMe,Rlr,Plr,DH,Blr,Ilr,Nlr,$T,dMe,qlr,jlr,GH,Dlr,Glr,Olr,kT,cMe,Vlr,Xlr,OH,zlr,Qlr,Wlr,ST,mMe,Ulr,Hlr,VH,Jlr,Ylr,Zlr,RT,fMe,Klr,eir,XH,oir,rir,tir,PT,gMe,air,nir,zH,sir,lir,iir,BT,hMe,dir,cir,QH,mir,fir,gir,IT,uMe,hir,uir,WH,pir,_ir,bir,NT,pMe,vir,Fir,UH,Tir,Mir,Eir,qT,_Me,Cir,wir,HH,Air,Lir,yir,jT,bMe,xir,$ir,JH,kir,Sir,Rir,DT,vMe,Pir,Bir,YH,Iir,Nir,qir,GT,FMe,jir,Dir,ZH,Gir,Oir,Vir,OT,TMe,Xir,zir,KH,Qir,Wir,Uir,VT,MMe,Hir,Jir,eJ,Yir,Zir,Kir,XT,EMe,edr,odr,oJ,rdr,tdr,adr,zT,ndr,CMe,sdr,ldr,wMe,idr,ddr,QT,Goo,Gd,WT,AMe,$$,cdr,LMe,mdr,Ooo,Go,k$,fdr,Od,gdr,rJ,hdr,udr,tJ,pdr,_dr,bdr,S$,vdr,yMe,Fdr,Tdr,Mdr,wt,R$,Edr,xMe,Cdr,wdr,Vd,Adr,$Me,Ldr,ydr,aJ,xdr,$dr,kdr,UT,Sdr,no,P$,Rdr,kMe,Pdr,Bdr,sn,Idr,SMe,Ndr,qdr,RMe,jdr,Ddr,PMe,Gdr,Odr,Vdr,K,HT,BMe,Xdr,zdr,nJ,Qdr,Wdr,Udr,JT,IMe,Hdr,Jdr,sJ,Ydr,Zdr,Kdr,YT,NMe,ecr,ocr,lJ,rcr,tcr,acr,ZT,qMe,ncr,scr,iJ,lcr,icr,dcr,KT,jMe,ccr,mcr,dJ,fcr,gcr,hcr,eM,DMe,ucr,pcr,cJ,_cr,bcr,vcr,oM,GMe,Fcr,Tcr,mJ,Mcr,Ecr,Ccr,rM,OMe,wcr,Acr,fJ,Lcr,ycr,xcr,tM,VMe,$cr,kcr,gJ,Scr,Rcr,Pcr,aM,XMe,Bcr,Icr,hJ,Ncr,qcr,jcr,nM,zMe,Dcr,Gcr,uJ,Ocr,Vcr,Xcr,sM,QMe,zcr,Qcr,pJ,Wcr,Ucr,Hcr,lM,WMe,Jcr,Ycr,_J,Zcr,Kcr,emr,iM,UMe,omr,rmr,bJ,tmr,amr,nmr,dM,HMe,smr,lmr,vJ,imr,dmr,cmr,cM,JMe,mmr,fmr,FJ,gmr,hmr,umr,mM,YMe,pmr,_mr,TJ,bmr,vmr,Fmr,fM,ZMe,Tmr,Mmr,MJ,Emr,Cmr,wmr,gM,KMe,Amr,Lmr,EJ,ymr,xmr,$mr,hM,eEe,kmr,Smr,CJ,Rmr,Pmr,Bmr,uM,oEe,Imr,Nmr,wJ,qmr,jmr,Dmr,pM,rEe,Gmr,Omr,AJ,Vmr,Xmr,zmr,_M,tEe,Qmr,Wmr,LJ,Umr,Hmr,Jmr,bM,aEe,Ymr,Zmr,yJ,Kmr,efr,ofr,vM,nEe,rfr,tfr,xJ,afr,nfr,sfr,FM,sEe,lfr,ifr,$J,dfr,cfr,mfr,TM,lEe,ffr,gfr,kJ,hfr,ufr,pfr,MM,iEe,_fr,bfr,SJ,vfr,Ffr,Tfr,EM,dEe,Mfr,Efr,RJ,Cfr,wfr,Afr,CM,cEe,Lfr,yfr,PJ,xfr,$fr,kfr,wM,mEe,Sfr,Rfr,BJ,Pfr,Bfr,Ifr,AM,fEe,Nfr,qfr,IJ,jfr,Dfr,Gfr,LM,Ofr,gEe,Vfr,Xfr,hEe,zfr,Qfr,yM,Voo,Xd,xM,uEe,B$,Wfr,pEe,Ufr,Xoo,Oo,I$,Hfr,zd,Jfr,NJ,Yfr,Zfr,qJ,Kfr,egr,ogr,N$,rgr,_Ee,tgr,agr,ngr,At,q$,sgr,bEe,lgr,igr,Qd,dgr,vEe,cgr,mgr,jJ,fgr,ggr,hgr,$M,ugr,so,j$,pgr,FEe,_gr,bgr,ln,vgr,TEe,Fgr,Tgr,MEe,Mgr,Egr,EEe,Cgr,wgr,Agr,Ue,kM,CEe,Lgr,ygr,DJ,xgr,$gr,kgr,SM,wEe,Sgr,Rgr,GJ,Pgr,Bgr,Igr,RM,AEe,Ngr,qgr,OJ,jgr,Dgr,Ggr,PM,LEe,Ogr,Vgr,VJ,Xgr,zgr,Qgr,BM,yEe,Wgr,Ugr,XJ,Hgr,Jgr,Ygr,IM,xEe,Zgr,Kgr,zJ,ehr,ohr,rhr,NM,$Ee,thr,ahr,QJ,nhr,shr,lhr,qM,ihr,kEe,dhr,chr,SEe,mhr,fhr,jM,zoo,Wd,DM,REe,D$,ghr,PEe,hhr,Qoo,Vo,G$,uhr,Ud,phr,WJ,_hr,bhr,UJ,vhr,Fhr,Thr,O$,Mhr,BEe,Ehr,Chr,whr,Lt,V$,Ahr,IEe,Lhr,yhr,Hd,xhr,NEe,$hr,khr,HJ,Shr,Rhr,Phr,GM,Bhr,lo,X$,Ihr,qEe,Nhr,qhr,dn,jhr,jEe,Dhr,Ghr,DEe,Ohr,Vhr,GEe,Xhr,zhr,Qhr,H,OM,OEe,Whr,Uhr,JJ,Hhr,Jhr,Yhr,VM,VEe,Zhr,Khr,YJ,eur,our,rur,XM,XEe,tur,aur,ZJ,nur,sur,lur,zM,zEe,iur,dur,KJ,cur,mur,fur,QM,QEe,gur,hur,eY,uur,pur,_ur,WM,WEe,bur,vur,oY,Fur,Tur,Mur,UM,UEe,Eur,Cur,rY,wur,Aur,Lur,HM,HEe,yur,xur,tY,$ur,kur,Sur,JM,JEe,Rur,Pur,aY,Bur,Iur,Nur,YM,YEe,qur,jur,nY,Dur,Gur,Our,ZM,ZEe,Vur,Xur,sY,zur,Qur,Wur,KM,KEe,Uur,Hur,lY,Jur,Yur,Zur,eE,e4e,Kur,epr,iY,opr,rpr,tpr,oE,o4e,apr,npr,dY,spr,lpr,ipr,rE,r4e,dpr,cpr,cY,mpr,fpr,gpr,tE,t4e,hpr,upr,mY,ppr,_pr,bpr,aE,a4e,vpr,Fpr,fY,Tpr,Mpr,Epr,nE,n4e,Cpr,wpr,gY,Apr,Lpr,ypr,sE,s4e,xpr,$pr,hY,kpr,Spr,Rpr,lE,l4e,Ppr,Bpr,uY,Ipr,Npr,qpr,iE,i4e,jpr,Dpr,pY,Gpr,Opr,Vpr,dE,d4e,Xpr,zpr,_Y,Qpr,Wpr,Upr,cE,c4e,Hpr,Jpr,bY,Ypr,Zpr,Kpr,mE,m4e,e_r,o_r,vY,r_r,t_r,a_r,fE,f4e,n_r,s_r,FY,l_r,i_r,d_r,gE,g4e,c_r,m_r,TY,f_r,g_r,h_r,hE,h4e,u_r,p_r,MY,__r,b_r,v_r,uE,u4e,F_r,T_r,EY,M_r,E_r,C_r,pE,p4e,w_r,A_r,CY,L_r,y_r,x_r,_E,_4e,$_r,k_r,wY,S_r,R_r,P_r,bE,b4e,B_r,I_r,AY,N_r,q_r,j_r,vE,v4e,D_r,G_r,LY,O_r,V_r,X_r,FE,F4e,z_r,Q_r,yY,W_r,U_r,H_r,TE,T4e,J_r,Y_r,xY,Z_r,K_r,e1r,ME,M4e,o1r,r1r,$Y,t1r,a1r,n1r,EE,E4e,s1r,l1r,kY,i1r,d1r,c1r,CE,C4e,m1r,f1r,SY,g1r,h1r,u1r,wE,w4e,p1r,_1r,RY,b1r,v1r,F1r,AE,A4e,T1r,M1r,PY,E1r,C1r,w1r,LE,L4e,A1r,L1r,BY,y1r,x1r,$1r,yE,k1r,y4e,S1r,R1r,x4e,P1r,B1r,xE,Woo,Jd,$E,$4e,z$,I1r,k4e,N1r,Uoo,Xo,Q$,q1r,Yd,j1r,IY,D1r,G1r,NY,O1r,V1r,X1r,W$,z1r,S4e,Q1r,W1r,U1r,yt,U$,H1r,R4e,J1r,Y1r,Zd,Z1r,P4e,K1r,e2r,qY,o2r,r2r,t2r,kE,a2r,io,H$,n2r,B4e,s2r,l2r,cn,i2r,I4e,d2r,c2r,N4e,m2r,f2r,q4e,g2r,h2r,u2r,O,SE,j4e,p2r,_2r,jY,b2r,v2r,F2r,RE,D4e,T2r,M2r,DY,E2r,C2r,w2r,PE,G4e,A2r,L2r,GY,y2r,x2r,$2r,BE,O4e,k2r,S2r,OY,R2r,P2r,B2r,IE,V4e,I2r,N2r,VY,q2r,j2r,D2r,NE,X4e,G2r,O2r,XY,V2r,X2r,z2r,qE,z4e,Q2r,W2r,zY,U2r,H2r,J2r,jE,Q4e,Y2r,Z2r,QY,K2r,ebr,obr,DE,W4e,rbr,tbr,WY,abr,nbr,sbr,GE,U4e,lbr,ibr,UY,dbr,cbr,mbr,OE,H4e,fbr,gbr,HY,hbr,ubr,pbr,VE,J4e,_br,bbr,JY,vbr,Fbr,Tbr,XE,Y4e,Mbr,Ebr,YY,Cbr,wbr,Abr,zE,Z4e,Lbr,ybr,ZY,xbr,$br,kbr,QE,K4e,Sbr,Rbr,KY,Pbr,Bbr,Ibr,WE,eCe,Nbr,qbr,eZ,jbr,Dbr,Gbr,UE,oCe,Obr,Vbr,oZ,Xbr,zbr,Qbr,HE,rCe,Wbr,Ubr,rZ,Hbr,Jbr,Ybr,JE,tCe,Zbr,Kbr,tZ,evr,ovr,rvr,YE,aCe,tvr,avr,aZ,nvr,svr,lvr,ZE,nCe,ivr,dvr,nZ,cvr,mvr,fvr,KE,sCe,gvr,hvr,sZ,uvr,pvr,_vr,e4,lCe,bvr,vvr,lZ,Fvr,Tvr,Mvr,o4,iCe,Evr,Cvr,iZ,wvr,Avr,Lvr,r4,dCe,yvr,xvr,dZ,$vr,kvr,Svr,t4,cCe,Rvr,Pvr,cZ,Bvr,Ivr,Nvr,a4,mCe,qvr,jvr,mZ,Dvr,Gvr,Ovr,n4,fCe,Vvr,Xvr,fZ,zvr,Qvr,Wvr,s4,gCe,Uvr,Hvr,gZ,Jvr,Yvr,Zvr,l4,hCe,Kvr,eFr,hZ,oFr,rFr,tFr,i4,uCe,aFr,nFr,uZ,sFr,lFr,iFr,d4,pCe,dFr,cFr,pZ,mFr,fFr,gFr,c4,_Ce,hFr,uFr,_Z,pFr,_Fr,bFr,m4,bCe,vFr,FFr,bZ,TFr,MFr,EFr,f4,vCe,CFr,wFr,vZ,AFr,LFr,yFr,g4,FCe,xFr,$Fr,FZ,kFr,SFr,RFr,h4,TCe,PFr,BFr,TZ,IFr,NFr,qFr,u4,MCe,jFr,DFr,MZ,GFr,OFr,VFr,p4,ECe,XFr,zFr,EZ,QFr,WFr,UFr,_4,CCe,HFr,JFr,CZ,YFr,ZFr,KFr,b4,wCe,eTr,oTr,wZ,rTr,tTr,aTr,v4,ACe,nTr,sTr,AZ,lTr,iTr,dTr,F4,LCe,cTr,mTr,LZ,fTr,gTr,hTr,T4,yCe,uTr,pTr,yZ,_Tr,bTr,vTr,M4,xCe,FTr,TTr,xZ,MTr,ETr,CTr,E4,$Ce,wTr,ATr,$Z,LTr,yTr,xTr,C4,kCe,$Tr,kTr,kZ,STr,RTr,PTr,w4,BTr,SCe,ITr,NTr,RCe,qTr,jTr,A4,Hoo,Kd,L4,PCe,J$,DTr,BCe,GTr,Joo,zo,Y$,OTr,ec,VTr,SZ,XTr,zTr,RZ,QTr,WTr,UTr,Z$,HTr,ICe,JTr,YTr,ZTr,xt,K$,KTr,NCe,eMr,oMr,oc,rMr,qCe,tMr,aMr,PZ,nMr,sMr,lMr,y4,iMr,co,ek,dMr,jCe,cMr,mMr,mn,fMr,DCe,gMr,hMr,GCe,uMr,pMr,OCe,_Mr,bMr,vMr,VCe,x4,XCe,FMr,TMr,BZ,MMr,EMr,CMr,$4,wMr,zCe,AMr,LMr,QCe,yMr,xMr,k4,Yoo,rc,S4,WCe,ok,$Mr,UCe,kMr,Zoo,Qo,rk,SMr,tc,RMr,IZ,PMr,BMr,NZ,IMr,NMr,qMr,tk,jMr,HCe,DMr,GMr,OMr,$t,ak,VMr,JCe,XMr,zMr,ac,QMr,YCe,WMr,UMr,qZ,HMr,JMr,YMr,R4,ZMr,mo,nk,KMr,ZCe,eEr,oEr,fn,rEr,KCe,tEr,aEr,e3e,nEr,sEr,o3e,lEr,iEr,dEr,nc,P4,r3e,cEr,mEr,jZ,fEr,gEr,hEr,B4,t3e,uEr,pEr,DZ,_Er,bEr,vEr,I4,a3e,FEr,TEr,GZ,MEr,EEr,CEr,N4,wEr,n3e,AEr,LEr,s3e,yEr,xEr,q4,Koo,sc,j4,l3e,sk,$Er,i3e,kEr,ero,Wo,lk,SEr,lc,REr,OZ,PEr,BEr,VZ,IEr,NEr,qEr,ik,jEr,d3e,DEr,GEr,OEr,kt,dk,VEr,c3e,XEr,zEr,ic,QEr,m3e,WEr,UEr,XZ,HEr,JEr,YEr,D4,ZEr,fo,ck,KEr,f3e,e4r,o4r,gn,r4r,g3e,t4r,a4r,h3e,n4r,s4r,u3e,l4r,i4r,d4r,be,G4,p3e,c4r,m4r,zZ,f4r,g4r,h4r,O4,_3e,u4r,p4r,QZ,_4r,b4r,v4r,V4,b3e,F4r,T4r,WZ,M4r,E4r,C4r,X4,v3e,w4r,A4r,UZ,L4r,y4r,x4r,El,F3e,$4r,k4r,HZ,S4r,R4r,JZ,P4r,B4r,I4r,z4,T3e,N4r,q4r,YZ,j4r,D4r,G4r,Cl,M3e,O4r,V4r,ZZ,X4r,z4r,KZ,Q4r,W4r,U4r,Q4,E3e,H4r,J4r,eK,Y4r,Z4r,K4r,St,C3e,eCr,oCr,oK,rCr,tCr,rK,aCr,nCr,tK,sCr,lCr,iCr,W4,w3e,dCr,cCr,aK,mCr,fCr,gCr,U4,A3e,hCr,uCr,nK,pCr,_Cr,bCr,H4,L3e,vCr,FCr,sK,TCr,MCr,ECr,J4,y3e,CCr,wCr,lK,ACr,LCr,yCr,Y4,x3e,xCr,$Cr,iK,kCr,SCr,RCr,Z4,$3e,PCr,BCr,dK,ICr,NCr,qCr,K4,k3e,jCr,DCr,cK,GCr,OCr,VCr,eC,S3e,XCr,zCr,mK,QCr,WCr,UCr,oC,R3e,HCr,JCr,fK,YCr,ZCr,KCr,rC,e3r,P3e,o3r,r3r,B3e,t3r,a3r,tC,oro,dc,aC,I3e,mk,n3r,N3e,s3r,rro,Uo,fk,l3r,cc,i3r,gK,d3r,c3r,hK,m3r,f3r,g3r,gk,h3r,q3e,u3r,p3r,_3r,Rt,hk,b3r,j3e,v3r,F3r,mc,T3r,D3e,M3r,E3r,uK,C3r,w3r,A3r,nC,L3r,go,uk,y3r,G3e,x3r,$3r,hn,k3r,O3e,S3r,R3r,V3e,P3r,B3r,X3e,I3r,N3r,q3r,z3e,sC,Q3e,j3r,D3r,pK,G3r,O3r,V3r,lC,X3r,W3e,z3r,Q3r,U3e,W3r,U3r,iC,tro,fc,dC,H3e,pk,H3r,J3e,J3r,aro,Ho,_k,Y3r,gc,Z3r,_K,K3r,e5r,bK,o5r,r5r,t5r,bk,a5r,Y3e,n5r,s5r,l5r,Pt,vk,i5r,Z3e,d5r,c5r,hc,m5r,K3e,f5r,g5r,vK,h5r,u5r,p5r,cC,_5r,ho,Fk,b5r,e5e,v5r,F5r,un,T5r,o5e,M5r,E5r,r5e,C5r,w5r,t5e,A5r,L5r,y5r,a5e,mC,n5e,x5r,$5r,FK,k5r,S5r,R5r,fC,P5r,s5e,B5r,I5r,l5e,N5r,q5r,gC,nro,uc,hC,i5e,Tk,j5r,d5e,D5r,sro,Jo,Mk,G5r,pc,O5r,TK,V5r,X5r,MK,z5r,Q5r,W5r,Ek,U5r,c5e,H5r,J5r,Y5r,Bt,Ck,Z5r,m5e,K5r,e0r,_c,o0r,f5e,r0r,t0r,EK,a0r,n0r,s0r,uC,l0r,uo,wk,i0r,g5e,d0r,c0r,pn,m0r,h5e,f0r,g0r,u5e,h0r,u0r,p5e,p0r,_0r,b0r,_5e,pC,b5e,v0r,F0r,CK,T0r,M0r,E0r,_C,C0r,v5e,w0r,A0r,F5e,L0r,y0r,bC,lro,bc,vC,T5e,Ak,x0r,M5e,$0r,iro,Yo,Lk,k0r,vc,S0r,wK,R0r,P0r,AK,B0r,I0r,N0r,yk,q0r,E5e,j0r,D0r,G0r,It,xk,O0r,C5e,V0r,X0r,Fc,z0r,w5e,Q0r,W0r,LK,U0r,H0r,J0r,FC,Y0r,po,$k,Z0r,A5e,K0r,ewr,_n,owr,L5e,rwr,twr,y5e,awr,nwr,x5e,swr,lwr,iwr,Pe,TC,$5e,dwr,cwr,yK,mwr,fwr,gwr,MC,k5e,hwr,uwr,xK,pwr,_wr,bwr,EC,S5e,vwr,Fwr,$K,Twr,Mwr,Ewr,CC,R5e,Cwr,wwr,kK,Awr,Lwr,ywr,wC,P5e,xwr,$wr,SK,kwr,Swr,Rwr,AC,B5e,Pwr,Bwr,RK,Iwr,Nwr,qwr,LC,I5e,jwr,Dwr,PK,Gwr,Owr,Vwr,yC,N5e,Xwr,zwr,BK,Qwr,Wwr,Uwr,xC,q5e,Hwr,Jwr,IK,Ywr,Zwr,Kwr,$C,eAr,j5e,oAr,rAr,D5e,tAr,aAr,kC,dro,Tc,SC,G5e,kk,nAr,O5e,sAr,cro,Zo,Sk,lAr,Mc,iAr,NK,dAr,cAr,qK,mAr,fAr,gAr,Rk,hAr,V5e,uAr,pAr,_Ar,Nt,Pk,bAr,X5e,vAr,FAr,Ec,TAr,z5e,MAr,EAr,jK,CAr,wAr,AAr,RC,LAr,_o,Bk,yAr,Q5e,xAr,$Ar,bn,kAr,W5e,SAr,RAr,U5e,PAr,BAr,H5e,IAr,NAr,qAr,gt,PC,J5e,jAr,DAr,DK,GAr,OAr,VAr,BC,Y5e,XAr,zAr,GK,QAr,WAr,UAr,IC,Z5e,HAr,JAr,OK,YAr,ZAr,KAr,NC,K5e,e6r,o6r,VK,r6r,t6r,a6r,qC,e0e,n6r,s6r,XK,l6r,i6r,d6r,jC,c6r,o0e,m6r,f6r,r0e,g6r,h6r,DC,mro,Cc,GC,t0e,Ik,u6r,a0e,p6r,fro,Ko,Nk,_6r,wc,b6r,zK,v6r,F6r,QK,T6r,M6r,E6r,qk,C6r,n0e,w6r,A6r,L6r,qt,jk,y6r,s0e,x6r,$6r,Ac,k6r,l0e,S6r,R6r,WK,P6r,B6r,I6r,OC,N6r,bo,Dk,q6r,i0e,j6r,D6r,vn,G6r,d0e,O6r,V6r,c0e,X6r,z6r,m0e,Q6r,W6r,U6r,Le,VC,f0e,H6r,J6r,UK,Y6r,Z6r,K6r,XC,g0e,e7r,o7r,HK,r7r,t7r,a7r,zC,h0e,n7r,s7r,JK,l7r,i7r,d7r,QC,u0e,c7r,m7r,YK,f7r,g7r,h7r,WC,p0e,u7r,p7r,ZK,_7r,b7r,v7r,UC,_0e,F7r,T7r,KK,M7r,E7r,C7r,HC,b0e,w7r,A7r,eee,L7r,y7r,x7r,JC,v0e,$7r,k7r,oee,S7r,R7r,P7r,YC,F0e,B7r,I7r,ree,N7r,q7r,j7r,ZC,T0e,D7r,G7r,tee,O7r,V7r,X7r,KC,z7r,M0e,Q7r,W7r,E0e,U7r,H7r,e3,gro,Lc,o3,C0e,Gk,J7r,w0e,Y7r,hro,er,Ok,Z7r,yc,K7r,aee,eLr,oLr,nee,rLr,tLr,aLr,Vk,nLr,A0e,sLr,lLr,iLr,jt,Xk,dLr,L0e,cLr,mLr,xc,fLr,y0e,gLr,hLr,see,uLr,pLr,_Lr,r3,bLr,vo,zk,vLr,x0e,FLr,TLr,Fn,MLr,$0e,ELr,CLr,k0e,wLr,ALr,S0e,LLr,yLr,xLr,$c,t3,R0e,$Lr,kLr,lee,SLr,RLr,PLr,a3,P0e,BLr,ILr,iee,NLr,qLr,jLr,n3,B0e,DLr,GLr,dee,OLr,VLr,XLr,s3,zLr,I0e,QLr,WLr,N0e,ULr,HLr,l3,uro,kc,i3,q0e,Qk,JLr,j0e,YLr,pro,or,Wk,ZLr,Sc,KLr,cee,e8r,o8r,mee,r8r,t8r,a8r,Uk,n8r,D0e,s8r,l8r,i8r,Dt,Hk,d8r,G0e,c8r,m8r,Rc,f8r,O0e,g8r,h8r,fee,u8r,p8r,_8r,d3,b8r,Fo,Jk,v8r,V0e,F8r,T8r,Tn,M8r,X0e,E8r,C8r,z0e,w8r,A8r,Q0e,L8r,y8r,x8r,ht,c3,W0e,$8r,k8r,gee,S8r,R8r,P8r,m3,U0e,B8r,I8r,hee,N8r,q8r,j8r,f3,H0e,D8r,G8r,uee,O8r,V8r,X8r,g3,J0e,z8r,Q8r,pee,W8r,U8r,H8r,h3,Y0e,J8r,Y8r,_ee,Z8r,K8r,eyr,u3,oyr,Z0e,ryr,tyr,K0e,ayr,nyr,p3,_ro,Pc,_3,ewe,Yk,syr,owe,lyr,bro,rr,Zk,iyr,Bc,dyr,bee,cyr,myr,vee,fyr,gyr,hyr,Kk,uyr,rwe,pyr,_yr,byr,Gt,eS,vyr,twe,Fyr,Tyr,Ic,Myr,awe,Eyr,Cyr,Fee,wyr,Ayr,Lyr,b3,yyr,To,oS,xyr,nwe,$yr,kyr,Mn,Syr,swe,Ryr,Pyr,lwe,Byr,Iyr,iwe,Nyr,qyr,jyr,En,v3,dwe,Dyr,Gyr,Tee,Oyr,Vyr,Xyr,F3,cwe,zyr,Qyr,Mee,Wyr,Uyr,Hyr,T3,mwe,Jyr,Yyr,Eee,Zyr,Kyr,e9r,M3,fwe,o9r,r9r,Cee,t9r,a9r,n9r,E3,s9r,gwe,l9r,i9r,hwe,d9r,c9r,C3,vro,Nc,w3,uwe,rS,m9r,pwe,f9r,Fro,tr,tS,g9r,qc,h9r,wee,u9r,p9r,Aee,_9r,b9r,v9r,aS,F9r,_we,T9r,M9r,E9r,Ot,nS,C9r,bwe,w9r,A9r,jc,L9r,vwe,y9r,x9r,Lee,$9r,k9r,S9r,A3,R9r,Mo,sS,P9r,Fwe,B9r,I9r,Cn,N9r,Twe,q9r,j9r,Mwe,D9r,G9r,Ewe,O9r,V9r,X9r,wn,L3,Cwe,z9r,Q9r,yee,W9r,U9r,H9r,y3,wwe,J9r,Y9r,xee,Z9r,K9r,exr,x3,Awe,oxr,rxr,$ee,txr,axr,nxr,$3,Lwe,sxr,lxr,kee,ixr,dxr,cxr,k3,mxr,ywe,fxr,gxr,xwe,hxr,uxr,S3,Tro,Dc,R3,$we,lS,pxr,kwe,_xr,Mro,ar,iS,bxr,Gc,vxr,See,Fxr,Txr,Ree,Mxr,Exr,Cxr,dS,wxr,Swe,Axr,Lxr,yxr,Vt,cS,xxr,Rwe,$xr,kxr,Oc,Sxr,Pwe,Rxr,Pxr,Pee,Bxr,Ixr,Nxr,P3,qxr,Eo,mS,jxr,Bwe,Dxr,Gxr,An,Oxr,Iwe,Vxr,Xxr,Nwe,zxr,Qxr,qwe,Wxr,Uxr,Hxr,jwe,B3,Dwe,Jxr,Yxr,Bee,Zxr,Kxr,e$r,I3,o$r,Gwe,r$r,t$r,Owe,a$r,n$r,N3,Ero,Vc,q3,Vwe,fS,s$r,Xwe,l$r,Cro,nr,gS,i$r,Xc,d$r,Iee,c$r,m$r,Nee,f$r,g$r,h$r,hS,u$r,zwe,p$r,_$r,b$r,Xt,uS,v$r,Qwe,F$r,T$r,zc,M$r,Wwe,E$r,C$r,qee,w$r,A$r,L$r,j3,y$r,Co,pS,x$r,Uwe,$$r,k$r,Ln,S$r,Hwe,R$r,P$r,Jwe,B$r,I$r,Ywe,N$r,q$r,j$r,ut,D3,Zwe,D$r,G$r,jee,O$r,V$r,X$r,G3,Kwe,z$r,Q$r,Dee,W$r,U$r,H$r,O3,eAe,J$r,Y$r,Gee,Z$r,K$r,ekr,V3,oAe,okr,rkr,Oee,tkr,akr,nkr,X3,rAe,skr,lkr,Vee,ikr,dkr,ckr,z3,mkr,tAe,fkr,gkr,aAe,hkr,ukr,Q3,wro,Qc,W3,nAe,_S,pkr,sAe,_kr,Aro,sr,bS,bkr,Wc,vkr,Xee,Fkr,Tkr,zee,Mkr,Ekr,Ckr,vS,wkr,lAe,Akr,Lkr,ykr,zt,FS,xkr,iAe,$kr,kkr,Uc,Skr,dAe,Rkr,Pkr,Qee,Bkr,Ikr,Nkr,U3,qkr,wo,TS,jkr,cAe,Dkr,Gkr,yn,Okr,mAe,Vkr,Xkr,fAe,zkr,Qkr,gAe,Wkr,Ukr,Hkr,hAe,H3,uAe,Jkr,Ykr,Wee,Zkr,Kkr,eSr,J3,oSr,pAe,rSr,tSr,_Ae,aSr,nSr,Y3,Lro,Hc,Z3,bAe,MS,sSr,vAe,lSr,yro,lr,ES,iSr,Jc,dSr,Uee,cSr,mSr,Hee,fSr,gSr,hSr,CS,uSr,FAe,pSr,_Sr,bSr,Qt,wS,vSr,TAe,FSr,TSr,Yc,MSr,MAe,ESr,CSr,Jee,wSr,ASr,LSr,K3,ySr,Ao,AS,xSr,EAe,$Sr,kSr,xn,SSr,CAe,RSr,PSr,wAe,BSr,ISr,AAe,NSr,qSr,jSr,LAe,e5,yAe,DSr,GSr,Yee,OSr,VSr,XSr,o5,zSr,xAe,QSr,WSr,$Ae,USr,HSr,r5,xro,Zc,t5,kAe,LS,JSr,SAe,YSr,$ro,ir,yS,ZSr,Kc,KSr,Zee,eRr,oRr,Kee,rRr,tRr,aRr,xS,nRr,RAe,sRr,lRr,iRr,Wt,$S,dRr,PAe,cRr,mRr,em,fRr,BAe,gRr,hRr,eoe,uRr,pRr,_Rr,a5,bRr,qr,kS,vRr,IAe,FRr,TRr,$n,MRr,NAe,ERr,CRr,qAe,wRr,ARr,jAe,LRr,yRr,xRr,B,n5,DAe,$Rr,kRr,ooe,SRr,RRr,PRr,s5,GAe,BRr,IRr,roe,NRr,qRr,jRr,l5,OAe,DRr,GRr,toe,ORr,VRr,XRr,i5,VAe,zRr,QRr,aoe,WRr,URr,HRr,d5,XAe,JRr,YRr,noe,ZRr,KRr,ePr,c5,zAe,oPr,rPr,soe,tPr,aPr,nPr,m5,QAe,sPr,lPr,loe,iPr,dPr,cPr,f5,WAe,mPr,fPr,ioe,gPr,hPr,uPr,g5,UAe,pPr,_Pr,doe,bPr,vPr,FPr,h5,HAe,TPr,MPr,coe,EPr,CPr,wPr,u5,JAe,APr,LPr,moe,yPr,xPr,$Pr,p5,YAe,kPr,SPr,foe,RPr,PPr,BPr,_5,ZAe,IPr,NPr,goe,qPr,jPr,DPr,b5,KAe,GPr,OPr,hoe,VPr,XPr,zPr,v5,e6e,QPr,WPr,uoe,UPr,HPr,JPr,F5,o6e,YPr,ZPr,poe,KPr,eBr,oBr,T5,r6e,rBr,tBr,_oe,aBr,nBr,sBr,M5,t6e,lBr,iBr,boe,dBr,cBr,mBr,wl,a6e,fBr,gBr,voe,hBr,uBr,Foe,pBr,_Br,bBr,E5,n6e,vBr,FBr,Toe,TBr,MBr,EBr,C5,s6e,CBr,wBr,Moe,ABr,LBr,yBr,w5,l6e,xBr,$Br,Eoe,kBr,SBr,RBr,A5,i6e,PBr,BBr,Coe,IBr,NBr,qBr,L5,d6e,jBr,DBr,woe,GBr,OBr,VBr,y5,c6e,XBr,zBr,Aoe,QBr,WBr,UBr,x5,m6e,HBr,JBr,Loe,YBr,ZBr,KBr,$5,f6e,eIr,oIr,yoe,rIr,tIr,aIr,k5,g6e,nIr,sIr,xoe,lIr,iIr,dIr,S5,h6e,cIr,mIr,$oe,fIr,gIr,hIr,R5,u6e,uIr,pIr,koe,_Ir,bIr,vIr,P5,p6e,FIr,TIr,Soe,MIr,EIr,CIr,B5,_6e,wIr,AIr,Roe,LIr,yIr,xIr,I5,b6e,$Ir,kIr,Poe,SIr,RIr,PIr,N5,v6e,BIr,IIr,Boe,NIr,qIr,jIr,q5,F6e,DIr,GIr,Ioe,OIr,VIr,XIr,j5,T6e,zIr,QIr,Noe,WIr,UIr,HIr,D5,M6e,JIr,YIr,qoe,ZIr,KIr,eNr,G5,E6e,oNr,rNr,joe,tNr,aNr,nNr,O5,C6e,sNr,lNr,Doe,iNr,dNr,cNr,V5,w6e,mNr,fNr,Goe,gNr,hNr,uNr,X5,A6e,pNr,_Nr,Ooe,bNr,vNr,FNr,z5,L6e,TNr,MNr,Voe,ENr,CNr,wNr,Q5,y6e,ANr,LNr,Xoe,yNr,xNr,$Nr,W5,x6e,kNr,SNr,zoe,RNr,PNr,BNr,U5,$6e,INr,NNr,Qoe,qNr,jNr,DNr,H5,k6e,GNr,ONr,Woe,VNr,XNr,zNr,J5,S6e,QNr,WNr,Uoe,UNr,HNr,JNr,Y5,R6e,YNr,ZNr,Hoe,KNr,eqr,oqr,Z5,P6e,rqr,tqr,Joe,aqr,nqr,sqr,K5,B6e,lqr,iqr,Yoe,dqr,cqr,mqr,e0,I6e,fqr,gqr,Zoe,hqr,uqr,pqr,o0,N6e,_qr,bqr,Koe,vqr,Fqr,Tqr,r0,q6e,Mqr,Eqr,ere,Cqr,wqr,Aqr,t0,j6e,Lqr,yqr,ore,xqr,$qr,kqr,a0,D6e,Sqr,Rqr,rre,Pqr,Bqr,Iqr,n0,G6e,Nqr,qqr,tre,jqr,Dqr,Gqr,s0,kro,om,l0,O6e,SS,Oqr,V6e,Vqr,Sro,dr,RS,Xqr,rm,zqr,are,Qqr,Wqr,nre,Uqr,Hqr,Jqr,PS,Yqr,X6e,Zqr,Kqr,ejr,Ut,BS,ojr,z6e,rjr,tjr,tm,ajr,Q6e,njr,sjr,sre,ljr,ijr,djr,i0,cjr,jr,IS,mjr,W6e,fjr,gjr,kn,hjr,U6e,ujr,pjr,H6e,_jr,bjr,J6e,vjr,Fjr,Tjr,le,d0,Y6e,Mjr,Ejr,lre,Cjr,wjr,Ajr,c0,Z6e,Ljr,yjr,ire,xjr,$jr,kjr,m0,K6e,Sjr,Rjr,dre,Pjr,Bjr,Ijr,f0,e7e,Njr,qjr,cre,jjr,Djr,Gjr,g0,o7e,Ojr,Vjr,mre,Xjr,zjr,Qjr,h0,r7e,Wjr,Ujr,fre,Hjr,Jjr,Yjr,u0,t7e,Zjr,Kjr,gre,eDr,oDr,rDr,p0,a7e,tDr,aDr,hre,nDr,sDr,lDr,_0,n7e,iDr,dDr,ure,cDr,mDr,fDr,b0,s7e,gDr,hDr,pre,uDr,pDr,_Dr,v0,l7e,bDr,vDr,_re,FDr,TDr,MDr,F0,i7e,EDr,CDr,bre,wDr,ADr,LDr,T0,d7e,yDr,xDr,vre,$Dr,kDr,SDr,M0,c7e,RDr,PDr,Fre,BDr,IDr,NDr,E0,m7e,qDr,jDr,Tre,DDr,GDr,ODr,C0,f7e,VDr,XDr,Mre,zDr,QDr,WDr,w0,g7e,UDr,HDr,Ere,JDr,YDr,ZDr,A0,h7e,KDr,eGr,Cre,oGr,rGr,tGr,L0,u7e,aGr,nGr,wre,sGr,lGr,iGr,y0,p7e,dGr,cGr,Are,mGr,fGr,gGr,x0,_7e,hGr,uGr,Lre,pGr,_Gr,bGr,$0,b7e,vGr,FGr,yre,TGr,MGr,EGr,k0,v7e,CGr,wGr,xre,AGr,LGr,yGr,S0,Rro,am,R0,F7e,NS,xGr,T7e,$Gr,Pro,cr,qS,kGr,nm,SGr,$re,RGr,PGr,kre,BGr,IGr,NGr,jS,qGr,M7e,jGr,DGr,GGr,Ht,DS,OGr,E7e,VGr,XGr,sm,zGr,C7e,QGr,WGr,Sre,UGr,HGr,JGr,P0,YGr,Dr,GS,ZGr,w7e,KGr,eOr,Sn,oOr,A7e,rOr,tOr,L7e,aOr,nOr,y7e,sOr,lOr,iOr,Me,B0,x7e,dOr,cOr,Rre,mOr,fOr,gOr,I0,$7e,hOr,uOr,Pre,pOr,_Or,bOr,N0,k7e,vOr,FOr,Bre,TOr,MOr,EOr,q0,S7e,COr,wOr,Ire,AOr,LOr,yOr,j0,R7e,xOr,$Or,Nre,kOr,SOr,ROr,D0,P7e,POr,BOr,qre,IOr,NOr,qOr,G0,B7e,jOr,DOr,jre,GOr,OOr,VOr,O0,I7e,XOr,zOr,Dre,QOr,WOr,UOr,V0,N7e,HOr,JOr,Gre,YOr,ZOr,KOr,X0,q7e,eVr,oVr,Ore,rVr,tVr,aVr,z0,j7e,nVr,sVr,Vre,lVr,iVr,dVr,Q0,D7e,cVr,mVr,Xre,fVr,gVr,hVr,W0,G7e,uVr,pVr,zre,_Vr,bVr,vVr,U0,O7e,FVr,TVr,Qre,MVr,EVr,CVr,H0,Bro,lm,J0,V7e,OS,wVr,X7e,AVr,Iro,mr,VS,LVr,im,yVr,Wre,xVr,$Vr,Ure,kVr,SVr,RVr,XS,PVr,z7e,BVr,IVr,NVr,Jt,zS,qVr,Q7e,jVr,DVr,dm,GVr,W7e,OVr,VVr,Hre,XVr,zVr,QVr,Y0,WVr,Gr,QS,UVr,U7e,HVr,JVr,Rn,YVr,H7e,ZVr,KVr,J7e,eXr,oXr,Y7e,rXr,tXr,aXr,Be,Z0,Z7e,nXr,sXr,Jre,lXr,iXr,dXr,K0,K7e,cXr,mXr,Yre,fXr,gXr,hXr,Al,eLe,uXr,pXr,Zre,_Xr,bXr,Kre,vXr,FXr,TXr,ew,oLe,MXr,EXr,ete,CXr,wXr,AXr,ow,rLe,LXr,yXr,ote,xXr,$Xr,kXr,rw,tLe,SXr,RXr,rte,PXr,BXr,IXr,tw,aLe,NXr,qXr,tte,jXr,DXr,GXr,aw,nLe,OXr,VXr,ate,XXr,zXr,QXr,nw,sLe,WXr,UXr,nte,HXr,JXr,YXr,sw,Nro,cm,lw,lLe,WS,ZXr,iLe,KXr,qro,fr,US,ezr,mm,ozr,ste,rzr,tzr,lte,azr,nzr,szr,HS,lzr,dLe,izr,dzr,czr,Yt,JS,mzr,cLe,fzr,gzr,fm,hzr,mLe,uzr,pzr,ite,_zr,bzr,vzr,iw,Fzr,Or,YS,Tzr,fLe,Mzr,Ezr,Pn,Czr,gLe,wzr,Azr,hLe,Lzr,yzr,uLe,xzr,$zr,kzr,gm,dw,pLe,Szr,Rzr,dte,Pzr,Bzr,Izr,cw,_Le,Nzr,qzr,cte,jzr,Dzr,Gzr,mw,bLe,Ozr,Vzr,mte,Xzr,zzr,Qzr,fw,jro,hm,gw,vLe,ZS,Wzr,FLe,Uzr,Dro,gr,KS,Hzr,um,Jzr,fte,Yzr,Zzr,gte,Kzr,eQr,oQr,eR,rQr,TLe,tQr,aQr,nQr,Zt,oR,sQr,MLe,lQr,iQr,pm,dQr,ELe,cQr,mQr,hte,fQr,gQr,hQr,hw,uQr,Vr,rR,pQr,CLe,_Qr,bQr,Bn,vQr,wLe,FQr,TQr,ALe,MQr,EQr,LLe,CQr,wQr,AQr,ge,uw,yLe,LQr,yQr,ute,xQr,$Qr,kQr,pw,xLe,SQr,RQr,pte,PQr,BQr,IQr,_w,$Le,NQr,qQr,_te,jQr,DQr,GQr,bw,kLe,OQr,VQr,bte,XQr,zQr,QQr,vw,SLe,WQr,UQr,vte,HQr,JQr,YQr,Fw,RLe,ZQr,KQr,Fte,eWr,oWr,rWr,Tw,PLe,tWr,aWr,Tte,nWr,sWr,lWr,Mw,BLe,iWr,dWr,Mte,cWr,mWr,fWr,Ew,ILe,gWr,hWr,Ete,uWr,pWr,_Wr,Cw,NLe,bWr,vWr,Cte,FWr,TWr,MWr,ww,qLe,EWr,CWr,wte,wWr,AWr,LWr,Aw,jLe,yWr,xWr,Ate,$Wr,kWr,SWr,Lw,DLe,RWr,PWr,Lte,BWr,IWr,NWr,yw,GLe,qWr,jWr,yte,DWr,GWr,OWr,xw,OLe,VWr,XWr,xte,zWr,QWr,WWr,$w,VLe,UWr,HWr,$te,JWr,YWr,ZWr,kw,XLe,KWr,eUr,kte,oUr,rUr,tUr,Sw,zLe,aUr,nUr,Ste,sUr,lUr,iUr,Rw,QLe,dUr,cUr,Rte,mUr,fUr,gUr,Pw,WLe,hUr,uUr,Pte,pUr,_Ur,bUr,Bw,Gro,_m,Iw,ULe,tR,vUr,HLe,FUr,Oro,hr,aR,TUr,bm,MUr,Bte,EUr,CUr,Ite,wUr,AUr,LUr,nR,yUr,JLe,xUr,$Ur,kUr,Kt,sR,SUr,YLe,RUr,PUr,vm,BUr,ZLe,IUr,NUr,Nte,qUr,jUr,DUr,Nw,GUr,Xr,lR,OUr,KLe,VUr,XUr,In,zUr,e8e,QUr,WUr,o8e,UUr,HUr,r8e,JUr,YUr,ZUr,ye,qw,t8e,KUr,eHr,qte,oHr,rHr,tHr,jw,a8e,aHr,nHr,jte,sHr,lHr,iHr,Dw,n8e,dHr,cHr,Dte,mHr,fHr,gHr,Gw,s8e,hHr,uHr,Gte,pHr,_Hr,bHr,Ow,l8e,vHr,FHr,Ote,THr,MHr,EHr,Vw,i8e,CHr,wHr,Vte,AHr,LHr,yHr,Xw,d8e,xHr,$Hr,Xte,kHr,SHr,RHr,zw,c8e,PHr,BHr,zte,IHr,NHr,qHr,Qw,m8e,jHr,DHr,Qte,GHr,OHr,VHr,Ww,f8e,XHr,zHr,Wte,QHr,WHr,UHr,Uw,Vro,Fm,Hw,g8e,iR,HHr,h8e,JHr,Xro,ur,dR,YHr,Tm,ZHr,Ute,KHr,eJr,Hte,oJr,rJr,tJr,cR,aJr,u8e,nJr,sJr,lJr,ea,mR,iJr,p8e,dJr,cJr,Mm,mJr,_8e,fJr,gJr,Jte,hJr,uJr,pJr,Jw,_Jr,zr,fR,bJr,b8e,vJr,FJr,Nn,TJr,v8e,MJr,EJr,F8e,CJr,wJr,T8e,AJr,LJr,yJr,re,Yw,M8e,xJr,$Jr,Yte,kJr,SJr,RJr,Zw,E8e,PJr,BJr,Zte,IJr,NJr,qJr,Kw,C8e,jJr,DJr,Kte,GJr,OJr,VJr,eA,w8e,XJr,zJr,eae,QJr,WJr,UJr,oA,A8e,HJr,JJr,oae,YJr,ZJr,KJr,rA,L8e,eYr,oYr,rae,rYr,tYr,aYr,tA,y8e,nYr,sYr,tae,lYr,iYr,dYr,aA,x8e,cYr,mYr,aae,fYr,gYr,hYr,nA,$8e,uYr,pYr,nae,_Yr,bYr,vYr,sA,k8e,FYr,TYr,sae,MYr,EYr,CYr,lA,S8e,wYr,AYr,lae,LYr,yYr,xYr,iA,R8e,$Yr,kYr,iae,SYr,RYr,PYr,dA,P8e,BYr,IYr,dae,NYr,qYr,jYr,cA,B8e,DYr,GYr,cae,OYr,VYr,XYr,mA,I8e,zYr,QYr,mae,WYr,UYr,HYr,fA,N8e,JYr,YYr,fae,ZYr,KYr,eZr,gA,q8e,oZr,rZr,gae,tZr,aZr,nZr,hA,j8e,sZr,lZr,hae,iZr,dZr,cZr,uA,D8e,mZr,fZr,uae,gZr,hZr,uZr,pA,G8e,pZr,_Zr,pae,bZr,vZr,FZr,_A,O8e,TZr,MZr,_ae,EZr,CZr,wZr,bA,V8e,AZr,LZr,bae,yZr,xZr,$Zr,vA,X8e,kZr,SZr,vae,RZr,PZr,BZr,FA,z8e,IZr,NZr,Fae,qZr,jZr,DZr,TA,Q8e,GZr,OZr,Tae,VZr,XZr,zZr,MA,W8e,QZr,WZr,Mae,UZr,HZr,JZr,EA,U8e,YZr,ZZr,Eae,KZr,eKr,oKr,CA,zro,Em,wA,H8e,gR,rKr,J8e,tKr,Qro,pr,hR,aKr,Cm,nKr,Cae,sKr,lKr,wae,iKr,dKr,cKr,uR,mKr,Y8e,fKr,gKr,hKr,oa,pR,uKr,Z8e,pKr,_Kr,wm,bKr,K8e,vKr,FKr,Aae,TKr,MKr,EKr,AA,CKr,Qr,_R,wKr,eye,AKr,LKr,qn,yKr,oye,xKr,$Kr,rye,kKr,SKr,tye,RKr,PKr,BKr,ve,LA,aye,IKr,NKr,Lae,qKr,jKr,DKr,yA,nye,GKr,OKr,yae,VKr,XKr,zKr,xA,sye,QKr,WKr,xae,UKr,HKr,JKr,$A,lye,YKr,ZKr,$ae,KKr,eet,oet,kA,iye,ret,tet,kae,aet,net,set,SA,dye,iet,det,Sae,cet,met,fet,RA,cye,get,het,Rae,uet,pet,_et,PA,mye,bet,vet,Pae,Fet,Tet,Met,BA,fye,Eet,Cet,Bae,wet,Aet,Let,IA,gye,yet,xet,Iae,$et,ket,Set,NA,hye,Ret,Pet,Nae,Bet,Iet,Net,qA,uye,qet,jet,qae,Det,Get,Oet,jA,pye,Vet,Xet,jae,zet,Qet,Wet,DA,_ye,Uet,Het,Dae,Jet,Yet,Zet,GA,bye,Ket,eot,Gae,oot,rot,tot,OA,vye,aot,not,Oae,sot,lot,iot,VA,Fye,dot,cot,Vae,mot,fot,got,XA,Wro,Am,zA,Tye,bR,hot,Mye,uot,Uro,_r,vR,pot,Lm,_ot,Xae,bot,vot,zae,Fot,Tot,Mot,FR,Eot,Eye,Cot,wot,Aot,ra,TR,Lot,Cye,yot,xot,ym,$ot,wye,kot,Sot,Qae,Rot,Pot,Bot,QA,Iot,Wr,MR,Not,Aye,qot,jot,jn,Dot,Lye,Got,Oot,yye,Vot,Xot,xye,zot,Qot,Wot,ER,WA,$ye,Uot,Hot,Wae,Jot,Yot,Zot,UA,kye,Kot,ert,Uae,ort,rrt,trt,HA,Hro,xm,JA,Sye,CR,art,Rye,nrt,Jro,br,wR,srt,$m,lrt,Hae,irt,drt,Jae,crt,mrt,frt,AR,grt,Pye,hrt,urt,prt,ta,LR,_rt,Bye,brt,vrt,km,Frt,Iye,Trt,Mrt,Yae,Ert,Crt,wrt,YA,Art,Ur,yR,Lrt,Nye,yrt,xrt,Dn,$rt,qye,krt,Srt,jye,Rrt,Prt,Dye,Brt,Irt,Nrt,Gye,ZA,Oye,qrt,jrt,Zae,Drt,Grt,Ort,KA,Yro,Sm,e6,Vye,xR,Vrt,Xye,Xrt,Zro,vr,$R,zrt,Rm,Qrt,Kae,Wrt,Urt,ene,Hrt,Jrt,Yrt,kR,Zrt,zye,Krt,ett,ott,aa,SR,rtt,Qye,ttt,att,Pm,ntt,Wye,stt,ltt,one,itt,dtt,ctt,o6,mtt,Hr,RR,ftt,Uye,gtt,htt,Gn,utt,Hye,ptt,_tt,Jye,btt,vtt,Yye,Ftt,Ttt,Mtt,Zye,r6,Kye,Ett,Ctt,rne,wtt,Att,Ltt,t6,Kro,Bm,a6,e9e,PR,ytt,o9e,xtt,eto,Fr,BR,$tt,Im,ktt,tne,Stt,Rtt,ane,Ptt,Btt,Itt,IR,Ntt,r9e,qtt,jtt,Dtt,na,NR,Gtt,t9e,Ott,Vtt,Nm,Xtt,a9e,ztt,Qtt,nne,Wtt,Utt,Htt,n6,Jtt,Jr,qR,Ytt,n9e,Ztt,Ktt,On,eat,s9e,oat,rat,l9e,tat,aat,i9e,nat,sat,lat,ce,s6,d9e,iat,dat,sne,cat,mat,fat,l6,c9e,gat,hat,lne,uat,pat,_at,i6,m9e,bat,vat,ine,Fat,Tat,Mat,d6,f9e,Eat,Cat,dne,wat,Aat,Lat,c6,g9e,yat,xat,cne,$at,kat,Sat,m6,h9e,Rat,Pat,mne,Bat,Iat,Nat,f6,u9e,qat,jat,fne,Dat,Gat,Oat,g6,p9e,Vat,Xat,gne,zat,Qat,Wat,h6,_9e,Uat,Hat,hne,Jat,Yat,Zat,u6,b9e,Kat,ent,une,ont,rnt,tnt,p6,v9e,ant,nnt,pne,snt,lnt,int,_6,F9e,dnt,cnt,_ne,mnt,fnt,gnt,b6,T9e,hnt,unt,bne,pnt,_nt,bnt,v6,M9e,vnt,Fnt,vne,Tnt,Mnt,Ent,F6,E9e,Cnt,wnt,Fne,Ant,Lnt,ynt,T6,C9e,xnt,$nt,Tne,knt,Snt,Rnt,M6,w9e,Pnt,Bnt,Mne,Int,Nnt,qnt,E6,A9e,jnt,Dnt,Ene,Gnt,Ont,Vnt,C6,L9e,Xnt,znt,Cne,Qnt,Wnt,Unt,w6,y9e,Hnt,Jnt,wne,Ynt,Znt,Knt,A6,x9e,est,ost,Ane,rst,tst,ast,L6,oto,qm,y6,$9e,jR,nst,k9e,sst,rto,Tr,DR,lst,jm,ist,Lne,dst,cst,yne,mst,fst,gst,GR,hst,S9e,ust,pst,_st,sa,OR,bst,R9e,vst,Fst,Dm,Tst,P9e,Mst,Est,xne,Cst,wst,Ast,x6,Lst,Yr,VR,yst,B9e,xst,$st,Vn,kst,I9e,Sst,Rst,N9e,Pst,Bst,q9e,Ist,Nst,qst,me,$6,j9e,jst,Dst,$ne,Gst,Ost,Vst,k6,D9e,Xst,zst,kne,Qst,Wst,Ust,S6,G9e,Hst,Jst,Sne,Yst,Zst,Kst,R6,O9e,elt,olt,Rne,rlt,tlt,alt,P6,V9e,nlt,slt,Pne,llt,ilt,dlt,B6,X9e,clt,mlt,Bne,flt,glt,hlt,I6,z9e,ult,plt,Ine,_lt,blt,vlt,N6,Q9e,Flt,Tlt,Nne,Mlt,Elt,Clt,q6,W9e,wlt,Alt,qne,Llt,ylt,xlt,j6,U9e,$lt,klt,jne,Slt,Rlt,Plt,D6,H9e,Blt,Ilt,Dne,Nlt,qlt,jlt,G6,J9e,Dlt,Glt,Gne,Olt,Vlt,Xlt,O6,Y9e,zlt,Qlt,One,Wlt,Ult,Hlt,V6,Z9e,Jlt,Ylt,Vne,Zlt,Klt,eit,X6,K9e,oit,rit,Xne,tit,ait,nit,z6,exe,sit,lit,zne,iit,dit,cit,Q6,oxe,mit,fit,Qne,git,hit,uit,W6,rxe,pit,_it,Wne,bit,vit,Fit,U6,txe,Tit,Mit,Une,Eit,Cit,wit,H6,axe,Ait,Lit,Hne,yit,xit,$it,J6,nxe,kit,Sit,Jne,Rit,Pit,Bit,Y6,tto,Gm,Z6,sxe,XR,Iit,lxe,Nit,ato,Mr,zR,qit,Om,jit,Yne,Dit,Git,Zne,Oit,Vit,Xit,QR,zit,ixe,Qit,Wit,Uit,la,WR,Hit,dxe,Jit,Yit,Vm,Zit,cxe,Kit,edt,Kne,odt,rdt,tdt,K6,adt,Zr,UR,ndt,mxe,sdt,ldt,Xn,idt,fxe,ddt,cdt,gxe,mdt,fdt,hxe,gdt,hdt,udt,uxe,e7,pxe,pdt,_dt,ese,bdt,vdt,Fdt,o7,nto,Xm,r7,_xe,HR,Tdt,bxe,Mdt,sto,Er,JR,Edt,zm,Cdt,ose,wdt,Adt,rse,Ldt,ydt,xdt,YR,$dt,vxe,kdt,Sdt,Rdt,ia,ZR,Pdt,Fxe,Bdt,Idt,Qm,Ndt,Txe,qdt,jdt,tse,Ddt,Gdt,Odt,t7,Vdt,Kr,KR,Xdt,Mxe,zdt,Qdt,zn,Wdt,Exe,Udt,Hdt,Cxe,Jdt,Ydt,wxe,Zdt,Kdt,ect,eP,a7,Axe,oct,rct,ase,tct,act,nct,n7,Lxe,sct,lct,nse,ict,dct,cct,s7,lto,Wm,l7,yxe,oP,mct,xxe,fct,ito,Cr,rP,gct,Um,hct,sse,uct,pct,lse,_ct,bct,vct,tP,Fct,$xe,Tct,Mct,Ect,da,aP,Cct,kxe,wct,Act,Hm,Lct,Sxe,yct,xct,ise,$ct,kct,Sct,i7,Rct,et,nP,Pct,Rxe,Bct,Ict,Qn,Nct,Pxe,qct,jct,Bxe,Dct,Gct,Ixe,Oct,Vct,Xct,te,d7,Nxe,zct,Qct,dse,Wct,Uct,Hct,c7,qxe,Jct,Yct,cse,Zct,Kct,emt,m7,jxe,omt,rmt,mse,tmt,amt,nmt,f7,Dxe,smt,lmt,fse,imt,dmt,cmt,g7,Gxe,mmt,fmt,gse,gmt,hmt,umt,h7,Oxe,pmt,_mt,hse,bmt,vmt,Fmt,u7,Vxe,Tmt,Mmt,use,Emt,Cmt,wmt,p7,Xxe,Amt,Lmt,pse,ymt,xmt,$mt,_7,zxe,kmt,Smt,_se,Rmt,Pmt,Bmt,b7,Qxe,Imt,Nmt,bse,qmt,jmt,Dmt,v7,Wxe,Gmt,Omt,vse,Vmt,Xmt,zmt,F7,Uxe,Qmt,Wmt,Fse,Umt,Hmt,Jmt,T7,Hxe,Ymt,Zmt,Tse,Kmt,eft,oft,M7,Jxe,rft,tft,Mse,aft,nft,sft,E7,Yxe,lft,ift,Ese,dft,cft,mft,C7,Zxe,fft,gft,Cse,hft,uft,pft,w7,Kxe,_ft,bft,wse,vft,Fft,Tft,A7,e$e,Mft,Eft,Ase,Cft,wft,Aft,L7,o$e,Lft,yft,Lse,xft,$ft,kft,y7,r$e,Sft,Rft,yse,Pft,Bft,Ift,x7,t$e,Nft,qft,xse,jft,Dft,Gft,$7,a$e,Oft,Vft,$se,Xft,zft,Qft,k7,n$e,Wft,Uft,kse,Hft,Jft,Yft,S7,s$e,Zft,Kft,Sse,egt,ogt,rgt,R7,l$e,tgt,agt,Rse,ngt,sgt,lgt,P7,i$e,igt,dgt,Pse,cgt,mgt,fgt,B7,d$e,ggt,hgt,Bse,ugt,pgt,_gt,I7,dto,Jm,N7,c$e,sP,bgt,m$e,vgt,cto,wr,lP,Fgt,Ym,Tgt,Ise,Mgt,Egt,Nse,Cgt,wgt,Agt,iP,Lgt,f$e,ygt,xgt,$gt,ca,dP,kgt,g$e,Sgt,Rgt,Zm,Pgt,h$e,Bgt,Igt,qse,Ngt,qgt,jgt,q7,Dgt,ot,cP,Ggt,u$e,Ogt,Vgt,Wn,Xgt,p$e,zgt,Qgt,_$e,Wgt,Ugt,b$e,Hgt,Jgt,Ygt,xe,j7,v$e,Zgt,Kgt,jse,eht,oht,rht,D7,F$e,tht,aht,Dse,nht,sht,lht,G7,T$e,iht,dht,Gse,cht,mht,fht,O7,M$e,ght,hht,Ose,uht,pht,_ht,V7,E$e,bht,vht,Vse,Fht,Tht,Mht,X7,C$e,Eht,Cht,Xse,wht,Aht,Lht,z7,w$e,yht,xht,zse,$ht,kht,Sht,Q7,A$e,Rht,Pht,Qse,Bht,Iht,Nht,W7,L$e,qht,jht,Wse,Dht,Ght,Oht,U7,y$e,Vht,Xht,Use,zht,Qht,Wht,H7,mto,Km,J7,x$e,mP,Uht,$$e,Hht,fto,Ar,fP,Jht,ef,Yht,Hse,Zht,Kht,Jse,eut,out,rut,gP,tut,k$e,aut,nut,sut,ma,hP,lut,S$e,iut,dut,of,cut,R$e,mut,fut,Yse,gut,hut,uut,Y7,put,rt,uP,_ut,P$e,but,vut,Un,Fut,B$e,Tut,Mut,I$e,Eut,Cut,N$e,wut,Aut,Lut,Ee,Z7,q$e,yut,xut,Zse,$ut,kut,Sut,K7,j$e,Rut,Put,Kse,But,Iut,Nut,eL,D$e,qut,jut,ele,Dut,Gut,Out,oL,G$e,Vut,Xut,ole,zut,Qut,Wut,rL,O$e,Uut,Hut,rle,Jut,Yut,Zut,tL,V$e,Kut,ept,tle,opt,rpt,tpt,aL,X$e,apt,npt,ale,spt,lpt,ipt,nL,z$e,dpt,cpt,nle,mpt,fpt,gpt,sL,Q$e,hpt,upt,sle,ppt,_pt,bpt,lL,W$e,vpt,Fpt,lle,Tpt,Mpt,Ept,iL,U$e,Cpt,wpt,ile,Apt,Lpt,ypt,dL,H$e,xpt,$pt,dle,kpt,Spt,Rpt,cL,J$e,Ppt,Bpt,cle,Ipt,Npt,qpt,mL,gto,rf,fL,Y$e,pP,jpt,Z$e,Dpt,hto,Lr,_P,Gpt,tf,Opt,mle,Vpt,Xpt,fle,zpt,Qpt,Wpt,bP,Upt,K$e,Hpt,Jpt,Ypt,fa,vP,Zpt,eke,Kpt,e_t,af,o_t,oke,r_t,t_t,gle,a_t,n_t,s_t,gL,l_t,tt,FP,i_t,rke,d_t,c_t,Hn,m_t,tke,f_t,g_t,ake,h_t,u_t,nke,p_t,__t,b_t,$e,hL,ske,v_t,F_t,hle,T_t,M_t,E_t,uL,lke,C_t,w_t,ule,A_t,L_t,y_t,pL,ike,x_t,$_t,ple,k_t,S_t,R_t,_L,dke,P_t,B_t,_le,I_t,N_t,q_t,bL,cke,j_t,D_t,ble,G_t,O_t,V_t,vL,mke,X_t,z_t,vle,Q_t,W_t,U_t,FL,fke,H_t,J_t,Fle,Y_t,Z_t,K_t,TL,gke,e1t,o1t,Tle,r1t,t1t,a1t,ML,hke,n1t,s1t,Mle,l1t,i1t,d1t,EL,uke,c1t,m1t,Ele,f1t,g1t,h1t,CL,uto,nf,wL,pke,TP,u1t,_ke,p1t,pto,yr,MP,_1t,sf,b1t,Cle,v1t,F1t,wle,T1t,M1t,E1t,EP,C1t,bke,w1t,A1t,L1t,ga,CP,y1t,vke,x1t,$1t,lf,k1t,Fke,S1t,R1t,Ale,P1t,B1t,I1t,AL,N1t,at,wP,q1t,Tke,j1t,D1t,Jn,G1t,Mke,O1t,V1t,Eke,X1t,z1t,Cke,Q1t,W1t,U1t,ke,LL,wke,H1t,J1t,Lle,Y1t,Z1t,K1t,yL,Ake,e2t,o2t,yle,r2t,t2t,a2t,xL,Lke,n2t,s2t,xle,l2t,i2t,d2t,$L,yke,c2t,m2t,$le,f2t,g2t,h2t,kL,xke,u2t,p2t,kle,_2t,b2t,v2t,SL,$ke,F2t,T2t,Sle,M2t,E2t,C2t,RL,kke,w2t,A2t,Rle,L2t,y2t,x2t,PL,Ske,$2t,k2t,Ple,S2t,R2t,P2t,BL,Rke,B2t,I2t,Ble,N2t,q2t,j2t,IL,Pke,D2t,G2t,Ile,O2t,V2t,X2t,NL,_to,df,qL,Bke,AP,z2t,Ike,Q2t,bto,xr,LP,W2t,cf,U2t,Nle,H2t,J2t,qle,Y2t,Z2t,K2t,yP,ebt,Nke,obt,rbt,tbt,ha,xP,abt,qke,nbt,sbt,mf,lbt,jke,ibt,dbt,jle,cbt,mbt,fbt,jL,gbt,nt,$P,hbt,Dke,ubt,pbt,Yn,_bt,Gke,bbt,vbt,Oke,Fbt,Tbt,Vke,Mbt,Ebt,Cbt,Se,DL,Xke,wbt,Abt,Dle,Lbt,ybt,xbt,GL,zke,$bt,kbt,Gle,Sbt,Rbt,Pbt,OL,Qke,Bbt,Ibt,Ole,Nbt,qbt,jbt,VL,Wke,Dbt,Gbt,Vle,Obt,Vbt,Xbt,XL,Uke,zbt,Qbt,Xle,Wbt,Ubt,Hbt,zL,Hke,Jbt,Ybt,zle,Zbt,Kbt,evt,QL,Jke,ovt,rvt,Qle,tvt,avt,nvt,WL,Yke,svt,lvt,Wle,ivt,dvt,cvt,UL,Zke,mvt,fvt,Ule,gvt,hvt,uvt,HL,Kke,pvt,_vt,Hle,bvt,vvt,Fvt,JL,vto,ff,YL,eSe,kP,Tvt,oSe,Mvt,Fto,$r,SP,Evt,gf,Cvt,Jle,wvt,Avt,Yle,Lvt,yvt,xvt,RP,$vt,rSe,kvt,Svt,Rvt,ua,PP,Pvt,tSe,Bvt,Ivt,hf,Nvt,aSe,qvt,jvt,Zle,Dvt,Gvt,Ovt,ZL,Vvt,st,BP,Xvt,nSe,zvt,Qvt,Zn,Wvt,sSe,Uvt,Hvt,lSe,Jvt,Yvt,iSe,Zvt,Kvt,eFt,Re,KL,dSe,oFt,rFt,Kle,tFt,aFt,nFt,e8,cSe,sFt,lFt,eie,iFt,dFt,cFt,o8,mSe,mFt,fFt,oie,gFt,hFt,uFt,r8,fSe,pFt,_Ft,rie,bFt,vFt,FFt,t8,gSe,TFt,MFt,tie,EFt,CFt,wFt,a8,hSe,AFt,LFt,aie,yFt,xFt,$Ft,n8,uSe,kFt,SFt,nie,RFt,PFt,BFt,s8,pSe,IFt,NFt,sie,qFt,jFt,DFt,l8,_Se,GFt,OFt,lie,VFt,XFt,zFt,i8,bSe,QFt,WFt,iie,UFt,HFt,JFt,d8,Tto,uf,c8,vSe,IP,YFt,FSe,ZFt,Mto,kr,NP,KFt,pf,eTt,die,oTt,rTt,cie,tTt,aTt,nTt,qP,sTt,TSe,lTt,iTt,dTt,pa,jP,cTt,MSe,mTt,fTt,_f,gTt,ESe,hTt,uTt,mie,pTt,_Tt,bTt,m8,vTt,lt,DP,FTt,CSe,TTt,MTt,Kn,ETt,wSe,CTt,wTt,ASe,ATt,LTt,LSe,yTt,xTt,$Tt,Xe,f8,ySe,kTt,STt,fie,RTt,PTt,BTt,g8,xSe,ITt,NTt,gie,qTt,jTt,DTt,h8,$Se,GTt,OTt,hie,VTt,XTt,zTt,u8,kSe,QTt,WTt,uie,UTt,HTt,JTt,p8,SSe,YTt,ZTt,pie,KTt,eMt,oMt,_8,RSe,rMt,tMt,_ie,aMt,nMt,sMt,b8,PSe,lMt,iMt,bie,dMt,cMt,mMt,v8,BSe,fMt,gMt,vie,hMt,uMt,pMt,F8,Eto,bf,T8,ISe,GP,_Mt,NSe,bMt,Cto,Sr,OP,vMt,vf,FMt,Fie,TMt,MMt,Tie,EMt,CMt,wMt,VP,AMt,qSe,LMt,yMt,xMt,_a,XP,$Mt,jSe,kMt,SMt,Ff,RMt,DSe,PMt,BMt,Mie,IMt,NMt,qMt,M8,jMt,it,zP,DMt,GSe,GMt,OMt,es,VMt,OSe,XMt,zMt,VSe,QMt,WMt,XSe,UMt,HMt,JMt,ze,E8,zSe,YMt,ZMt,Eie,KMt,eEt,oEt,C8,QSe,rEt,tEt,Cie,aEt,nEt,sEt,w8,WSe,lEt,iEt,wie,dEt,cEt,mEt,A8,USe,fEt,gEt,Aie,hEt,uEt,pEt,L8,HSe,_Et,bEt,Lie,vEt,FEt,TEt,y8,JSe,MEt,EEt,yie,CEt,wEt,AEt,x8,YSe,LEt,yEt,xie,xEt,$Et,kEt,$8,ZSe,SEt,REt,$ie,PEt,BEt,IEt,k8,wto,Tf,S8,KSe,QP,NEt,eRe,qEt,Ato,Rr,WP,jEt,Mf,DEt,kie,GEt,OEt,Sie,VEt,XEt,zEt,UP,QEt,oRe,WEt,UEt,HEt,ba,HP,JEt,rRe,YEt,ZEt,Ef,KEt,tRe,e4t,o4t,Rie,r4t,t4t,a4t,R8,n4t,dt,JP,s4t,aRe,l4t,i4t,os,d4t,nRe,c4t,m4t,sRe,f4t,g4t,lRe,h4t,u4t,p4t,iRe,P8,dRe,_4t,b4t,Pie,v4t,F4t,T4t,B8,Lto,Cf,I8,cRe,YP,M4t,mRe,E4t,yto,Pr,ZP,C4t,wf,w4t,Bie,A4t,L4t,Iie,y4t,x4t,$4t,KP,k4t,fRe,S4t,R4t,P4t,va,eB,B4t,gRe,I4t,N4t,Af,q4t,hRe,j4t,D4t,Nie,G4t,O4t,V4t,N8,X4t,ct,oB,z4t,uRe,Q4t,W4t,rs,U4t,pRe,H4t,J4t,_Re,Y4t,Z4t,bRe,K4t,eCt,oCt,rB,q8,vRe,rCt,tCt,qie,aCt,nCt,sCt,j8,FRe,lCt,iCt,jie,dCt,cCt,mCt,D8,xto,Lf,G8,TRe,tB,fCt,MRe,gCt,$to,Br,aB,hCt,yf,uCt,Die,pCt,_Ct,Gie,bCt,vCt,FCt,nB,TCt,ERe,MCt,ECt,CCt,Fa,sB,wCt,CRe,ACt,LCt,xf,yCt,wRe,xCt,$Ct,Oie,kCt,SCt,RCt,O8,PCt,mt,lB,BCt,ARe,ICt,NCt,ts,qCt,LRe,jCt,DCt,yRe,GCt,OCt,xRe,VCt,XCt,zCt,$Re,V8,kRe,QCt,WCt,Vie,UCt,HCt,JCt,X8,kto;return d=new oe({}),Ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yx=new oe({}),xx=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new YCt({props:{warning:!0,$$slots:{default:[qFa]},$$scope:{ctx:$}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L659"}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L682"}}),mu=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[jFa]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L805"}}),Ix=new oe({}),Nx=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L428"}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L442"}}),Hu=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[DFa]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L643"}}),Ox=new oe({}),Vx=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L217"}}),Gp=new YCt({props:{$$slots:{default:[GFa]},$$scope:{ctx:$}}}),Op=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[OFa]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L344"}}),Ux=new oe({}),Hx=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L96"}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L110"}}),h_=new YCt({props:{$$slots:{default:[VFa]},$$scope:{ctx:$}}}),u_=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[XFa]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L277"}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L874"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig">TimeSeriesTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel">TimeSeriesTransformerModel</a> (Time Series Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel">WhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[zFa]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[QFa]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L881"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D2=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[WFa]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ib=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UFa]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L896"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qb=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[HFa]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[JFa]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L903"}}),b$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[YFa]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ZFa]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L910"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[KFa]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eTa]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L919"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[oTa]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[rTa]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L975"}}),R$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[tTa]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[aTa]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L982"}}),q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nTa]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sTa]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L968"}}),V$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[lTa]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iTa]},$$scope:{ctx:$}}}),z$=new oe({}),Q$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L928"}}),U$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering">BloomForQuestionAnswering</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering">OPTForQuestionAnswering</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dTa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cTa]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L935"}}),K$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[mTa]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[fTa]},$$scope:{ctx:$}}}),ok=new oe({}),rk=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L957"}}),ak=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new I({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[gTa]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new I({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[hTa]},$$scope:{ctx:$}}}),sk=new oe({}),lk=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L991"}}),dk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[uTa]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[pTa]},$$scope:{ctx:$}}}),mk=new oe({}),fk=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1039"}}),hk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[_Ta]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[bTa]},$$scope:{ctx:$}}}),pk=new oe({}),_k=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1046"}}),vk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[vTa]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FTa]},$$scope:{ctx:$}}}),Tk=new oe({}),Mk=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),Ck=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[TTa]},$$scope:{ctx:$}}}),wk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[MTa]},$$scope:{ctx:$}}}),Ak=new oe({}),Lk=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1053"}}),xk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ETa]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[CTa]},$$scope:{ctx:$}}}),kk=new oe({}),Sk=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1076"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[wTa]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[ATa]},$$scope:{ctx:$}}}),Ik=new oe({}),Nk=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1060"}}),jk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[LTa]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[yTa]},$$scope:{ctx:$}}}),Gk=new oe({}),Ok=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1067"}}),Xk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration">WhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xTa]},$$scope:{ctx:$}}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$Ta]},$$scope:{ctx:$}}}),Qk=new oe({}),Wk=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1085"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[kTa]},$$scope:{ctx:$}}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[STa]},$$scope:{ctx:$}}}),Yk=new oe({}),Zk=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1092"}}),eS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[RTa]},$$scope:{ctx:$}}}),oS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[PTa]},$$scope:{ctx:$}}}),rS=new oe({}),tS=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1023"}}),nS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[BTa]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ITa]},$$scope:{ctx:$}}}),lS=new oe({}),iS=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L998"}}),cS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[NTa]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[qTa]},$$scope:{ctx:$}}}),fS=new oe({}),gS=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1005"}}),uS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[jTa]},$$scope:{ctx:$}}}),pS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[DTa]},$$scope:{ctx:$}}}),_S=new oe({}),bS=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1014"}}),FS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[GTa]},$$scope:{ctx:$}}}),TS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[OTa]},$$scope:{ctx:$}}}),MS=new oe({}),ES=new R({props:{name:"class transformers.AutoModelForZeroShotObjectDetection",anchor:"transformers.AutoModelForZeroShotObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1030"}}),wS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection">OwlViTForObjectDetection</a> (OWL-ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new I({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.example",$$slots:{default:[VTa]},$$scope:{ctx:$}}}),AS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new I({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.example",$$slots:{default:[XTa]},$$scope:{ctx:$}}}),LS=new oe({}),yS=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L437"}}),$S=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel">TFWhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[zTa]},$$scope:{ctx:$}}}),kS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[QTa]},$$scope:{ctx:$}}}),SS=new oe({}),RS=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),BS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[WTa]},$$scope:{ctx:$}}}),IS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UTa]},$$scope:{ctx:$}}}),NS=new oe({}),qS=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),DS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[HTa]},$$scope:{ctx:$}}}),GS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[JTa]},$$scope:{ctx:$}}}),OS=new oe({}),VS=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),zS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[YTa]},$$scope:{ctx:$}}}),QS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZTa]},$$scope:{ctx:$}}}),WS=new oe({}),US=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),JS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[KTa]},$$scope:{ctx:$}}}),YS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[eMa]},$$scope:{ctx:$}}}),ZS=new oe({}),KS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),oR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[oMa]},$$scope:{ctx:$}}}),rR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rMa]},$$scope:{ctx:$}}}),tR=new oe({}),aR=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),sR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tMa]},$$scope:{ctx:$}}}),lR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aMa]},$$scope:{ctx:$}}}),iR=new oe({}),dR=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),mR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nMa]},$$scope:{ctx:$}}}),fR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sMa]},$$scope:{ctx:$}}}),gR=new oe({}),hR=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L563"}}),pR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[lMa]},$$scope:{ctx:$}}}),_R=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[iMa]},$$scope:{ctx:$}}}),bR=new oe({}),vR=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L570"}}),TR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QA=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[dMa]},$$scope:{ctx:$}}}),MR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HA=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[cMa]},$$scope:{ctx:$}}}),CR=new oe({}),wR=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L543"}}),LR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[mMa]},$$scope:{ctx:$}}}),yR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[fMa]},$$scope:{ctx:$}}}),xR=new oe({}),$R=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),SR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new I({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[gMa]},$$scope:{ctx:$}}}),RR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new I({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[hMa]},$$scope:{ctx:$}}}),PR=new oe({}),BR=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L554"}}),NR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[uMa]},$$scope:{ctx:$}}}),qR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pMa]},$$scope:{ctx:$}}}),jR=new oe({}),DR=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),OR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Ma]},$$scope:{ctx:$}}}),VR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bMa]},$$scope:{ctx:$}}}),XR=new oe({}),zR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),WR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[vMa]},$$scope:{ctx:$}}}),UR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FMa]},$$scope:{ctx:$}}}),HR=new oe({}),JR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L579"}}),ZR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration">TFWhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[TMa]},$$scope:{ctx:$}}}),KR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[MMa]},$$scope:{ctx:$}}}),oP=new oe({}),rP=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),aP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[EMa]},$$scope:{ctx:$}}}),nP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[CMa]},$$scope:{ctx:$}}}),sP=new oe({}),lP=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),dP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[wMa]},$$scope:{ctx:$}}}),cP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[AMa]},$$scope:{ctx:$}}}),mP=new oe({}),fP=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),hP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[LMa]},$$scope:{ctx:$}}}),uP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mL=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yMa]},$$scope:{ctx:$}}}),pP=new oe({}),_P=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),vP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gL=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[xMa]},$$scope:{ctx:$}}}),FP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CL=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$Ma]},$$scope:{ctx:$}}}),TP=new oe({}),MP=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),CP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AL=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kMa]},$$scope:{ctx:$}}}),wP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NL=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SMa]},$$scope:{ctx:$}}}),AP=new oe({}),LP=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),xP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jL=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RMa]},$$scope:{ctx:$}}}),$P=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JL=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[PMa]},$$scope:{ctx:$}}}),kP=new oe({}),SP=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),PP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZL=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[BMa]},$$scope:{ctx:$}}}),BP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[IMa]},$$scope:{ctx:$}}}),IP=new oe({}),NP=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),jP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[NMa]},$$scope:{ctx:$}}}),DP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[qMa]},$$scope:{ctx:$}}}),GP=new oe({}),OP=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),XP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[jMa]},$$scope:{ctx:$}}}),zP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k8=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DMa]},$$scope:{ctx:$}}}),QP=new oe({}),WP=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),HP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R8=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GMa]},$$scope:{ctx:$}}}),JP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B8=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OMa]},$$scope:{ctx:$}}}),YP=new oe({}),ZP=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),eB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N8=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[VMa]},$$scope:{ctx:$}}}),oB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D8=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XMa]},$$scope:{ctx:$}}}),tB=new oe({}),aB=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),sB=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O8=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[zMa]},$$scope:{ctx:$}}}),lB=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X8=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QMa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),xo=a("span"),dd=o("Auto Classes"),Rf=l(),bt=a("p"),cd=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),md=a("code"),Cx=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),fd=o("Instantiating one of "),ns=a("a"),wx=o("AutoConfig"),ss=o(", "),ls=a("a"),Ax=o("AutoModel"),gd=o(`, and
`),is=a("a"),Lx=o("AutoTokenizer"),hd=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Ja.$$.fragment),Je=l(),Ae=a("p"),RI=o("will create a model that is an instance of "),ud=a("a"),PI=o("BertModel"),BI=o("."),$o=l(),Ya=a("p"),II=o("There is one class of "),If=a("code"),NI=o("AutoModel"),Jno=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),poo=l(),pd=a("h2"),Nf=a("a"),Jce=a("span"),F(yx.$$.fragment),Yno=l(),Yce=a("span"),Zno=o("Extending the Auto Classes"),_oo=l(),ds=a("p"),Kno=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zce=a("code"),eso=o("NewModel"),oso=o(", make sure you have a "),Kce=a("code"),rso=o("NewModelConfig"),tso=o(` then you can add those to the auto
classes like this:`),boo=l(),F(xx.$$.fragment),voo=l(),qI=a("p"),aso=o("You will then be able to use the auto classes like you would usually do!"),Foo=l(),F(qf.$$.fragment),Too=l(),_d=a("h2"),jf=a("a"),eme=a("span"),F($x.$$.fragment),nso=l(),ome=a("span"),sso=o("AutoConfig"),Moo=l(),ko=a("div"),F(kx.$$.fragment),lso=l(),Sx=a("p"),iso=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jI=a("a"),dso=o("from_pretrained()"),cso=o(" class method."),mso=l(),Rx=a("p"),fso=o("This class cannot be instantiated directly using "),rme=a("code"),gso=o("__init__()"),hso=o(" (throws an error)."),uso=l(),Ir=a("div"),F(Px.$$.fragment),pso=l(),tme=a("p"),_so=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bso=l(),bd=a("p"),vso=o("The configuration class to instantiate is selected based on the "),ame=a("code"),Fso=o("model_type"),Tso=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nme=a("code"),Mso=o("pretrained_model_name_or_path"),Eso=o(":"),Cso=l(),A=a("ul"),Df=a("li"),sme=a("strong"),wso=o("albert"),Aso=o(" \u2014 "),DI=a("a"),Lso=o("AlbertConfig"),yso=o(" (ALBERT model)"),xso=l(),Gf=a("li"),lme=a("strong"),$so=o("bart"),kso=o(" \u2014 "),GI=a("a"),Sso=o("BartConfig"),Rso=o(" (BART model)"),Pso=l(),Of=a("li"),ime=a("strong"),Bso=o("beit"),Iso=o(" \u2014 "),OI=a("a"),Nso=o("BeitConfig"),qso=o(" (BEiT model)"),jso=l(),Vf=a("li"),dme=a("strong"),Dso=o("bert"),Gso=o(" \u2014 "),VI=a("a"),Oso=o("BertConfig"),Vso=o(" (BERT model)"),Xso=l(),Xf=a("li"),cme=a("strong"),zso=o("bert-generation"),Qso=o(" \u2014 "),XI=a("a"),Wso=o("BertGenerationConfig"),Uso=o(" (Bert Generation model)"),Hso=l(),zf=a("li"),mme=a("strong"),Jso=o("big_bird"),Yso=o(" \u2014 "),zI=a("a"),Zso=o("BigBirdConfig"),Kso=o(" (BigBird model)"),elo=l(),Qf=a("li"),fme=a("strong"),olo=o("bigbird_pegasus"),rlo=o(" \u2014 "),QI=a("a"),tlo=o("BigBirdPegasusConfig"),alo=o(" (BigBird-Pegasus model)"),nlo=l(),Wf=a("li"),gme=a("strong"),slo=o("blenderbot"),llo=o(" \u2014 "),WI=a("a"),ilo=o("BlenderbotConfig"),dlo=o(" (Blenderbot model)"),clo=l(),Uf=a("li"),hme=a("strong"),mlo=o("blenderbot-small"),flo=o(" \u2014 "),UI=a("a"),glo=o("BlenderbotSmallConfig"),hlo=o(" (BlenderbotSmall model)"),ulo=l(),Hf=a("li"),ume=a("strong"),plo=o("bloom"),_lo=o(" \u2014 "),HI=a("a"),blo=o("BloomConfig"),vlo=o(" (BLOOM model)"),Flo=l(),Jf=a("li"),pme=a("strong"),Tlo=o("camembert"),Mlo=o(" \u2014 "),JI=a("a"),Elo=o("CamembertConfig"),Clo=o(" (CamemBERT model)"),wlo=l(),Yf=a("li"),_me=a("strong"),Alo=o("canine"),Llo=o(" \u2014 "),YI=a("a"),ylo=o("CanineConfig"),xlo=o(" (CANINE model)"),$lo=l(),Zf=a("li"),bme=a("strong"),klo=o("clip"),Slo=o(" \u2014 "),ZI=a("a"),Rlo=o("CLIPConfig"),Plo=o(" (CLIP model)"),Blo=l(),Kf=a("li"),vme=a("strong"),Ilo=o("codegen"),Nlo=o(" \u2014 "),KI=a("a"),qlo=o("CodeGenConfig"),jlo=o(" (CodeGen model)"),Dlo=l(),eg=a("li"),Fme=a("strong"),Glo=o("conditional_detr"),Olo=o(" \u2014 "),eN=a("a"),Vlo=o("ConditionalDetrConfig"),Xlo=o(" (Conditional DETR model)"),zlo=l(),og=a("li"),Tme=a("strong"),Qlo=o("convbert"),Wlo=o(" \u2014 "),oN=a("a"),Ulo=o("ConvBertConfig"),Hlo=o(" (ConvBERT model)"),Jlo=l(),rg=a("li"),Mme=a("strong"),Ylo=o("convnext"),Zlo=o(" \u2014 "),rN=a("a"),Klo=o("ConvNextConfig"),eio=o(" (ConvNeXT model)"),oio=l(),tg=a("li"),Eme=a("strong"),rio=o("ctrl"),tio=o(" \u2014 "),tN=a("a"),aio=o("CTRLConfig"),nio=o(" (CTRL model)"),sio=l(),ag=a("li"),Cme=a("strong"),lio=o("cvt"),iio=o(" \u2014 "),aN=a("a"),dio=o("CvtConfig"),cio=o(" (CvT model)"),mio=l(),ng=a("li"),wme=a("strong"),fio=o("data2vec-audio"),gio=o(" \u2014 "),nN=a("a"),hio=o("Data2VecAudioConfig"),uio=o(" (Data2VecAudio model)"),pio=l(),sg=a("li"),Ame=a("strong"),_io=o("data2vec-text"),bio=o(" \u2014 "),sN=a("a"),vio=o("Data2VecTextConfig"),Fio=o(" (Data2VecText model)"),Tio=l(),lg=a("li"),Lme=a("strong"),Mio=o("data2vec-vision"),Eio=o(" \u2014 "),lN=a("a"),Cio=o("Data2VecVisionConfig"),wio=o(" (Data2VecVision model)"),Aio=l(),ig=a("li"),yme=a("strong"),Lio=o("deberta"),yio=o(" \u2014 "),iN=a("a"),xio=o("DebertaConfig"),$io=o(" (DeBERTa model)"),kio=l(),dg=a("li"),xme=a("strong"),Sio=o("deberta-v2"),Rio=o(" \u2014 "),dN=a("a"),Pio=o("DebertaV2Config"),Bio=o(" (DeBERTa-v2 model)"),Iio=l(),cg=a("li"),$me=a("strong"),Nio=o("decision_transformer"),qio=o(" \u2014 "),cN=a("a"),jio=o("DecisionTransformerConfig"),Dio=o(" (Decision Transformer model)"),Gio=l(),mg=a("li"),kme=a("strong"),Oio=o("deformable_detr"),Vio=o(" \u2014 "),mN=a("a"),Xio=o("DeformableDetrConfig"),zio=o(" (Deformable DETR model)"),Qio=l(),fg=a("li"),Sme=a("strong"),Wio=o("deit"),Uio=o(" \u2014 "),fN=a("a"),Hio=o("DeiTConfig"),Jio=o(" (DeiT model)"),Yio=l(),gg=a("li"),Rme=a("strong"),Zio=o("detr"),Kio=o(" \u2014 "),gN=a("a"),edo=o("DetrConfig"),odo=o(" (DETR model)"),rdo=l(),hg=a("li"),Pme=a("strong"),tdo=o("distilbert"),ado=o(" \u2014 "),hN=a("a"),ndo=o("DistilBertConfig"),sdo=o(" (DistilBERT model)"),ldo=l(),ug=a("li"),Bme=a("strong"),ido=o("donut-swin"),ddo=o(" \u2014 "),uN=a("a"),cdo=o("DonutSwinConfig"),mdo=o(" (DonutSwin model)"),fdo=l(),pg=a("li"),Ime=a("strong"),gdo=o("dpr"),hdo=o(" \u2014 "),pN=a("a"),udo=o("DPRConfig"),pdo=o(" (DPR model)"),_do=l(),_g=a("li"),Nme=a("strong"),bdo=o("dpt"),vdo=o(" \u2014 "),_N=a("a"),Fdo=o("DPTConfig"),Tdo=o(" (DPT model)"),Mdo=l(),bg=a("li"),qme=a("strong"),Edo=o("electra"),Cdo=o(" \u2014 "),bN=a("a"),wdo=o("ElectraConfig"),Ado=o(" (ELECTRA model)"),Ldo=l(),vg=a("li"),jme=a("strong"),ydo=o("encoder-decoder"),xdo=o(" \u2014 "),vN=a("a"),$do=o("EncoderDecoderConfig"),kdo=o(" (Encoder decoder model)"),Sdo=l(),Fg=a("li"),Dme=a("strong"),Rdo=o("ernie"),Pdo=o(" \u2014 "),FN=a("a"),Bdo=o("ErnieConfig"),Ido=o(" (ERNIE model)"),Ndo=l(),Tg=a("li"),Gme=a("strong"),qdo=o("esm"),jdo=o(" \u2014 "),TN=a("a"),Ddo=o("EsmConfig"),Gdo=o(" (ESM model)"),Odo=l(),Mg=a("li"),Ome=a("strong"),Vdo=o("flaubert"),Xdo=o(" \u2014 "),MN=a("a"),zdo=o("FlaubertConfig"),Qdo=o(" (FlauBERT model)"),Wdo=l(),Eg=a("li"),Vme=a("strong"),Udo=o("flava"),Hdo=o(" \u2014 "),EN=a("a"),Jdo=o("FlavaConfig"),Ydo=o(" (FLAVA model)"),Zdo=l(),Cg=a("li"),Xme=a("strong"),Kdo=o("fnet"),eco=o(" \u2014 "),CN=a("a"),oco=o("FNetConfig"),rco=o(" (FNet model)"),tco=l(),wg=a("li"),zme=a("strong"),aco=o("fsmt"),nco=o(" \u2014 "),wN=a("a"),sco=o("FSMTConfig"),lco=o(" (FairSeq Machine-Translation model)"),ico=l(),Ag=a("li"),Qme=a("strong"),dco=o("funnel"),cco=o(" \u2014 "),AN=a("a"),mco=o("FunnelConfig"),fco=o(" (Funnel Transformer model)"),gco=l(),Lg=a("li"),Wme=a("strong"),hco=o("glpn"),uco=o(" \u2014 "),LN=a("a"),pco=o("GLPNConfig"),_co=o(" (GLPN model)"),bco=l(),yg=a("li"),Ume=a("strong"),vco=o("gpt2"),Fco=o(" \u2014 "),yN=a("a"),Tco=o("GPT2Config"),Mco=o(" (OpenAI GPT-2 model)"),Eco=l(),xg=a("li"),Hme=a("strong"),Cco=o("gpt_neo"),wco=o(" \u2014 "),xN=a("a"),Aco=o("GPTNeoConfig"),Lco=o(" (GPT Neo model)"),yco=l(),$g=a("li"),Jme=a("strong"),xco=o("gpt_neox"),$co=o(" \u2014 "),$N=a("a"),kco=o("GPTNeoXConfig"),Sco=o(" (GPT NeoX model)"),Rco=l(),kg=a("li"),Yme=a("strong"),Pco=o("gpt_neox_japanese"),Bco=o(" \u2014 "),kN=a("a"),Ico=o("GPTNeoXJapaneseConfig"),Nco=o(" (GPT NeoX Japanese model)"),qco=l(),Sg=a("li"),Zme=a("strong"),jco=o("gptj"),Dco=o(" \u2014 "),SN=a("a"),Gco=o("GPTJConfig"),Oco=o(" (GPT-J model)"),Vco=l(),Rg=a("li"),Kme=a("strong"),Xco=o("groupvit"),zco=o(" \u2014 "),RN=a("a"),Qco=o("GroupViTConfig"),Wco=o(" (GroupViT model)"),Uco=l(),Pg=a("li"),efe=a("strong"),Hco=o("hubert"),Jco=o(" \u2014 "),PN=a("a"),Yco=o("HubertConfig"),Zco=o(" (Hubert model)"),Kco=l(),Bg=a("li"),ofe=a("strong"),emo=o("ibert"),omo=o(" \u2014 "),BN=a("a"),rmo=o("IBertConfig"),tmo=o(" (I-BERT model)"),amo=l(),Ig=a("li"),rfe=a("strong"),nmo=o("imagegpt"),smo=o(" \u2014 "),IN=a("a"),lmo=o("ImageGPTConfig"),imo=o(" (ImageGPT model)"),dmo=l(),Ng=a("li"),tfe=a("strong"),cmo=o("layoutlm"),mmo=o(" \u2014 "),NN=a("a"),fmo=o("LayoutLMConfig"),gmo=o(" (LayoutLM model)"),hmo=l(),qg=a("li"),afe=a("strong"),umo=o("layoutlmv2"),pmo=o(" \u2014 "),qN=a("a"),_mo=o("LayoutLMv2Config"),bmo=o(" (LayoutLMv2 model)"),vmo=l(),jg=a("li"),nfe=a("strong"),Fmo=o("layoutlmv3"),Tmo=o(" \u2014 "),jN=a("a"),Mmo=o("LayoutLMv3Config"),Emo=o(" (LayoutLMv3 model)"),Cmo=l(),Dg=a("li"),sfe=a("strong"),wmo=o("led"),Amo=o(" \u2014 "),DN=a("a"),Lmo=o("LEDConfig"),ymo=o(" (LED model)"),xmo=l(),Gg=a("li"),lfe=a("strong"),$mo=o("levit"),kmo=o(" \u2014 "),GN=a("a"),Smo=o("LevitConfig"),Rmo=o(" (LeViT model)"),Pmo=l(),Og=a("li"),ife=a("strong"),Bmo=o("longformer"),Imo=o(" \u2014 "),ON=a("a"),Nmo=o("LongformerConfig"),qmo=o(" (Longformer model)"),jmo=l(),Vg=a("li"),dfe=a("strong"),Dmo=o("longt5"),Gmo=o(" \u2014 "),VN=a("a"),Omo=o("LongT5Config"),Vmo=o(" (LongT5 model)"),Xmo=l(),Xg=a("li"),cfe=a("strong"),zmo=o("luke"),Qmo=o(" \u2014 "),XN=a("a"),Wmo=o("LukeConfig"),Umo=o(" (LUKE model)"),Hmo=l(),zg=a("li"),mfe=a("strong"),Jmo=o("lxmert"),Ymo=o(" \u2014 "),zN=a("a"),Zmo=o("LxmertConfig"),Kmo=o(" (LXMERT model)"),efo=l(),Qg=a("li"),ffe=a("strong"),ofo=o("m2m_100"),rfo=o(" \u2014 "),QN=a("a"),tfo=o("M2M100Config"),afo=o(" (M2M100 model)"),nfo=l(),Wg=a("li"),gfe=a("strong"),sfo=o("marian"),lfo=o(" \u2014 "),WN=a("a"),ifo=o("MarianConfig"),dfo=o(" (Marian model)"),cfo=l(),Ug=a("li"),hfe=a("strong"),mfo=o("markuplm"),ffo=o(" \u2014 "),UN=a("a"),gfo=o("MarkupLMConfig"),hfo=o(" (MarkupLM model)"),ufo=l(),Hg=a("li"),ufe=a("strong"),pfo=o("maskformer"),_fo=o(" \u2014 "),HN=a("a"),bfo=o("MaskFormerConfig"),vfo=o(" (MaskFormer model)"),Ffo=l(),Jg=a("li"),pfe=a("strong"),Tfo=o("mbart"),Mfo=o(" \u2014 "),JN=a("a"),Efo=o("MBartConfig"),Cfo=o(" (mBART model)"),wfo=l(),Yg=a("li"),_fe=a("strong"),Afo=o("mctct"),Lfo=o(" \u2014 "),YN=a("a"),yfo=o("MCTCTConfig"),xfo=o(" (M-CTC-T model)"),$fo=l(),Zg=a("li"),bfe=a("strong"),kfo=o("megatron-bert"),Sfo=o(" \u2014 "),ZN=a("a"),Rfo=o("MegatronBertConfig"),Pfo=o(" (Megatron-BERT model)"),Bfo=l(),Kg=a("li"),vfe=a("strong"),Ifo=o("mobilebert"),Nfo=o(" \u2014 "),KN=a("a"),qfo=o("MobileBertConfig"),jfo=o(" (MobileBERT model)"),Dfo=l(),eh=a("li"),Ffe=a("strong"),Gfo=o("mobilevit"),Ofo=o(" \u2014 "),eq=a("a"),Vfo=o("MobileViTConfig"),Xfo=o(" (MobileViT model)"),zfo=l(),oh=a("li"),Tfe=a("strong"),Qfo=o("mpnet"),Wfo=o(" \u2014 "),oq=a("a"),Ufo=o("MPNetConfig"),Hfo=o(" (MPNet model)"),Jfo=l(),rh=a("li"),Mfe=a("strong"),Yfo=o("mt5"),Zfo=o(" \u2014 "),rq=a("a"),Kfo=o("MT5Config"),ego=o(" (MT5 model)"),ogo=l(),th=a("li"),Efe=a("strong"),rgo=o("mvp"),tgo=o(" \u2014 "),tq=a("a"),ago=o("MvpConfig"),ngo=o(" (MVP model)"),sgo=l(),ah=a("li"),Cfe=a("strong"),lgo=o("nezha"),igo=o(" \u2014 "),aq=a("a"),dgo=o("NezhaConfig"),cgo=o(" (Nezha model)"),mgo=l(),nh=a("li"),wfe=a("strong"),fgo=o("nystromformer"),ggo=o(" \u2014 "),nq=a("a"),hgo=o("NystromformerConfig"),ugo=o(" (Nystr\xF6mformer model)"),pgo=l(),sh=a("li"),Afe=a("strong"),_go=o("openai-gpt"),bgo=o(" \u2014 "),sq=a("a"),vgo=o("OpenAIGPTConfig"),Fgo=o(" (OpenAI GPT model)"),Tgo=l(),lh=a("li"),Lfe=a("strong"),Mgo=o("opt"),Ego=o(" \u2014 "),lq=a("a"),Cgo=o("OPTConfig"),wgo=o(" (OPT model)"),Ago=l(),ih=a("li"),yfe=a("strong"),Lgo=o("owlvit"),ygo=o(" \u2014 "),iq=a("a"),xgo=o("OwlViTConfig"),$go=o(" (OWL-ViT model)"),kgo=l(),dh=a("li"),xfe=a("strong"),Sgo=o("pegasus"),Rgo=o(" \u2014 "),dq=a("a"),Pgo=o("PegasusConfig"),Bgo=o(" (Pegasus model)"),Igo=l(),ch=a("li"),$fe=a("strong"),Ngo=o("pegasus_x"),qgo=o(" \u2014 "),cq=a("a"),jgo=o("PegasusXConfig"),Dgo=o(" (PEGASUS-X model)"),Ggo=l(),mh=a("li"),kfe=a("strong"),Ogo=o("perceiver"),Vgo=o(" \u2014 "),mq=a("a"),Xgo=o("PerceiverConfig"),zgo=o(" (Perceiver model)"),Qgo=l(),fh=a("li"),Sfe=a("strong"),Wgo=o("plbart"),Ugo=o(" \u2014 "),fq=a("a"),Hgo=o("PLBartConfig"),Jgo=o(" (PLBart model)"),Ygo=l(),gh=a("li"),Rfe=a("strong"),Zgo=o("poolformer"),Kgo=o(" \u2014 "),gq=a("a"),eho=o("PoolFormerConfig"),oho=o(" (PoolFormer model)"),rho=l(),hh=a("li"),Pfe=a("strong"),tho=o("prophetnet"),aho=o(" \u2014 "),hq=a("a"),nho=o("ProphetNetConfig"),sho=o(" (ProphetNet model)"),lho=l(),uh=a("li"),Bfe=a("strong"),iho=o("qdqbert"),dho=o(" \u2014 "),uq=a("a"),cho=o("QDQBertConfig"),mho=o(" (QDQBert model)"),fho=l(),ph=a("li"),Ife=a("strong"),gho=o("rag"),hho=o(" \u2014 "),pq=a("a"),uho=o("RagConfig"),pho=o(" (RAG model)"),_ho=l(),_h=a("li"),Nfe=a("strong"),bho=o("realm"),vho=o(" \u2014 "),_q=a("a"),Fho=o("RealmConfig"),Tho=o(" (REALM model)"),Mho=l(),bh=a("li"),qfe=a("strong"),Eho=o("reformer"),Cho=o(" \u2014 "),bq=a("a"),who=o("ReformerConfig"),Aho=o(" (Reformer model)"),Lho=l(),vh=a("li"),jfe=a("strong"),yho=o("regnet"),xho=o(" \u2014 "),vq=a("a"),$ho=o("RegNetConfig"),kho=o(" (RegNet model)"),Sho=l(),Fh=a("li"),Dfe=a("strong"),Rho=o("rembert"),Pho=o(" \u2014 "),Fq=a("a"),Bho=o("RemBertConfig"),Iho=o(" (RemBERT model)"),Nho=l(),Th=a("li"),Gfe=a("strong"),qho=o("resnet"),jho=o(" \u2014 "),Tq=a("a"),Dho=o("ResNetConfig"),Gho=o(" (ResNet model)"),Oho=l(),Mh=a("li"),Ofe=a("strong"),Vho=o("retribert"),Xho=o(" \u2014 "),Mq=a("a"),zho=o("RetriBertConfig"),Qho=o(" (RetriBERT model)"),Who=l(),Eh=a("li"),Vfe=a("strong"),Uho=o("roberta"),Hho=o(" \u2014 "),Eq=a("a"),Jho=o("RobertaConfig"),Yho=o(" (RoBERTa model)"),Zho=l(),Ch=a("li"),Xfe=a("strong"),Kho=o("roformer"),euo=o(" \u2014 "),Cq=a("a"),ouo=o("RoFormerConfig"),ruo=o(" (RoFormer model)"),tuo=l(),wh=a("li"),zfe=a("strong"),auo=o("segformer"),nuo=o(" \u2014 "),wq=a("a"),suo=o("SegformerConfig"),luo=o(" (SegFormer model)"),iuo=l(),Ah=a("li"),Qfe=a("strong"),duo=o("sew"),cuo=o(" \u2014 "),Aq=a("a"),muo=o("SEWConfig"),fuo=o(" (SEW model)"),guo=l(),Lh=a("li"),Wfe=a("strong"),huo=o("sew-d"),uuo=o(" \u2014 "),Lq=a("a"),puo=o("SEWDConfig"),_uo=o(" (SEW-D model)"),buo=l(),yh=a("li"),Ufe=a("strong"),vuo=o("speech-encoder-decoder"),Fuo=o(" \u2014 "),yq=a("a"),Tuo=o("SpeechEncoderDecoderConfig"),Muo=o(" (Speech Encoder decoder model)"),Euo=l(),xh=a("li"),Hfe=a("strong"),Cuo=o("speech_to_text"),wuo=o(" \u2014 "),xq=a("a"),Auo=o("Speech2TextConfig"),Luo=o(" (Speech2Text model)"),yuo=l(),$h=a("li"),Jfe=a("strong"),xuo=o("speech_to_text_2"),$uo=o(" \u2014 "),$q=a("a"),kuo=o("Speech2Text2Config"),Suo=o(" (Speech2Text2 model)"),Ruo=l(),kh=a("li"),Yfe=a("strong"),Puo=o("splinter"),Buo=o(" \u2014 "),kq=a("a"),Iuo=o("SplinterConfig"),Nuo=o(" (Splinter model)"),quo=l(),Sh=a("li"),Zfe=a("strong"),juo=o("squeezebert"),Duo=o(" \u2014 "),Sq=a("a"),Guo=o("SqueezeBertConfig"),Ouo=o(" (SqueezeBERT model)"),Vuo=l(),Rh=a("li"),Kfe=a("strong"),Xuo=o("swin"),zuo=o(" \u2014 "),Rq=a("a"),Quo=o("SwinConfig"),Wuo=o(" (Swin Transformer model)"),Uuo=l(),Ph=a("li"),ege=a("strong"),Huo=o("swinv2"),Juo=o(" \u2014 "),Pq=a("a"),Yuo=o("Swinv2Config"),Zuo=o(" (Swin Transformer V2 model)"),Kuo=l(),Bh=a("li"),oge=a("strong"),epo=o("t5"),opo=o(" \u2014 "),Bq=a("a"),rpo=o("T5Config"),tpo=o(" (T5 model)"),apo=l(),Ih=a("li"),rge=a("strong"),npo=o("tapas"),spo=o(" \u2014 "),Iq=a("a"),lpo=o("TapasConfig"),ipo=o(" (TAPAS model)"),dpo=l(),Nh=a("li"),tge=a("strong"),cpo=o("time_series_transformer"),mpo=o(" \u2014 "),Nq=a("a"),fpo=o("TimeSeriesTransformerConfig"),gpo=o(" (Time Series Transformer model)"),hpo=l(),qh=a("li"),age=a("strong"),upo=o("trajectory_transformer"),ppo=o(" \u2014 "),qq=a("a"),_po=o("TrajectoryTransformerConfig"),bpo=o(" (Trajectory Transformer model)"),vpo=l(),jh=a("li"),nge=a("strong"),Fpo=o("transfo-xl"),Tpo=o(" \u2014 "),jq=a("a"),Mpo=o("TransfoXLConfig"),Epo=o(" (Transformer-XL model)"),Cpo=l(),Dh=a("li"),sge=a("strong"),wpo=o("trocr"),Apo=o(" \u2014 "),Dq=a("a"),Lpo=o("TrOCRConfig"),ypo=o(" (TrOCR model)"),xpo=l(),Gh=a("li"),lge=a("strong"),$po=o("unispeech"),kpo=o(" \u2014 "),Gq=a("a"),Spo=o("UniSpeechConfig"),Rpo=o(" (UniSpeech model)"),Ppo=l(),Oh=a("li"),ige=a("strong"),Bpo=o("unispeech-sat"),Ipo=o(" \u2014 "),Oq=a("a"),Npo=o("UniSpeechSatConfig"),qpo=o(" (UniSpeechSat model)"),jpo=l(),Vh=a("li"),dge=a("strong"),Dpo=o("van"),Gpo=o(" \u2014 "),Vq=a("a"),Opo=o("VanConfig"),Vpo=o(" (VAN model)"),Xpo=l(),Xh=a("li"),cge=a("strong"),zpo=o("videomae"),Qpo=o(" \u2014 "),Xq=a("a"),Wpo=o("VideoMAEConfig"),Upo=o(" (VideoMAE model)"),Hpo=l(),zh=a("li"),mge=a("strong"),Jpo=o("vilt"),Ypo=o(" \u2014 "),zq=a("a"),Zpo=o("ViltConfig"),Kpo=o(" (ViLT model)"),e_o=l(),Qh=a("li"),fge=a("strong"),o_o=o("vision-encoder-decoder"),r_o=o(" \u2014 "),Qq=a("a"),t_o=o("VisionEncoderDecoderConfig"),a_o=o(" (Vision Encoder decoder model)"),n_o=l(),Wh=a("li"),gge=a("strong"),s_o=o("vision-text-dual-encoder"),l_o=o(" \u2014 "),Wq=a("a"),i_o=o("VisionTextDualEncoderConfig"),d_o=o(" (VisionTextDualEncoder model)"),c_o=l(),Uh=a("li"),hge=a("strong"),m_o=o("visual_bert"),f_o=o(" \u2014 "),Uq=a("a"),g_o=o("VisualBertConfig"),h_o=o(" (VisualBERT model)"),u_o=l(),Hh=a("li"),uge=a("strong"),p_o=o("vit"),__o=o(" \u2014 "),Hq=a("a"),b_o=o("ViTConfig"),v_o=o(" (ViT model)"),F_o=l(),Jh=a("li"),pge=a("strong"),T_o=o("vit_mae"),M_o=o(" \u2014 "),Jq=a("a"),E_o=o("ViTMAEConfig"),C_o=o(" (ViTMAE model)"),w_o=l(),Yh=a("li"),_ge=a("strong"),A_o=o("vit_msn"),L_o=o(" \u2014 "),Yq=a("a"),y_o=o("ViTMSNConfig"),x_o=o(" (ViTMSN model)"),$_o=l(),Zh=a("li"),bge=a("strong"),k_o=o("wav2vec2"),S_o=o(" \u2014 "),Zq=a("a"),R_o=o("Wav2Vec2Config"),P_o=o(" (Wav2Vec2 model)"),B_o=l(),Kh=a("li"),vge=a("strong"),I_o=o("wav2vec2-conformer"),N_o=o(" \u2014 "),Kq=a("a"),q_o=o("Wav2Vec2ConformerConfig"),j_o=o(" (Wav2Vec2-Conformer model)"),D_o=l(),eu=a("li"),Fge=a("strong"),G_o=o("wavlm"),O_o=o(" \u2014 "),ej=a("a"),V_o=o("WavLMConfig"),X_o=o(" (WavLM model)"),z_o=l(),ou=a("li"),Tge=a("strong"),Q_o=o("whisper"),W_o=o(" \u2014 "),oj=a("a"),U_o=o("WhisperConfig"),H_o=o(" (Whisper model)"),J_o=l(),ru=a("li"),Mge=a("strong"),Y_o=o("xclip"),Z_o=o(" \u2014 "),rj=a("a"),K_o=o("XCLIPConfig"),e1o=o(" (X-CLIP model)"),o1o=l(),tu=a("li"),Ege=a("strong"),r1o=o("xglm"),t1o=o(" \u2014 "),tj=a("a"),a1o=o("XGLMConfig"),n1o=o(" (XGLM model)"),s1o=l(),au=a("li"),Cge=a("strong"),l1o=o("xlm"),i1o=o(" \u2014 "),aj=a("a"),d1o=o("XLMConfig"),c1o=o(" (XLM model)"),m1o=l(),nu=a("li"),wge=a("strong"),f1o=o("xlm-prophetnet"),g1o=o(" \u2014 "),nj=a("a"),h1o=o("XLMProphetNetConfig"),u1o=o(" (XLM-ProphetNet model)"),p1o=l(),su=a("li"),Age=a("strong"),_1o=o("xlm-roberta"),b1o=o(" \u2014 "),sj=a("a"),v1o=o("XLMRobertaConfig"),F1o=o(" (XLM-RoBERTa model)"),T1o=l(),lu=a("li"),Lge=a("strong"),M1o=o("xlm-roberta-xl"),E1o=o(" \u2014 "),lj=a("a"),C1o=o("XLMRobertaXLConfig"),w1o=o(" (XLM-RoBERTa-XL model)"),A1o=l(),iu=a("li"),yge=a("strong"),L1o=o("xlnet"),y1o=o(" \u2014 "),ij=a("a"),x1o=o("XLNetConfig"),$1o=o(" (XLNet model)"),k1o=l(),du=a("li"),xge=a("strong"),S1o=o("yolos"),R1o=o(" \u2014 "),dj=a("a"),P1o=o("YolosConfig"),B1o=o(" (YOLOS model)"),I1o=l(),cu=a("li"),$ge=a("strong"),N1o=o("yoso"),q1o=o(" \u2014 "),cj=a("a"),j1o=o("YosoConfig"),D1o=o(" (YOSO model)"),G1o=l(),F(mu.$$.fragment),O1o=l(),fu=a("div"),F(Bx.$$.fragment),V1o=l(),kge=a("p"),X1o=o("Register a new configuration for this class."),Eoo=l(),vd=a("h2"),gu=a("a"),Sge=a("span"),F(Ix.$$.fragment),z1o=l(),Rge=a("span"),Q1o=o("AutoTokenizer"),Coo=l(),So=a("div"),F(Nx.$$.fragment),W1o=l(),qx=a("p"),U1o=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mj=a("a"),H1o=o("AutoTokenizer.from_pretrained()"),J1o=o(" class method."),Y1o=l(),jx=a("p"),Z1o=o("This class cannot be instantiated directly using "),Pge=a("code"),K1o=o("__init__()"),e2o=o(" (throws an error)."),o2o=l(),Nr=a("div"),F(Dx.$$.fragment),r2o=l(),Bge=a("p"),t2o=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),a2o=l(),Za=a("p"),n2o=o("The tokenizer class to instantiate is selected based on the "),Ige=a("code"),s2o=o("model_type"),l2o=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),i2o=o("pretrained_model_name_or_path"),d2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),c2o=o("pretrained_model_name_or_path"),m2o=o(":"),f2o=l(),k=a("ul"),cs=a("li"),jge=a("strong"),g2o=o("albert"),h2o=o(" \u2014 "),fj=a("a"),u2o=o("AlbertTokenizer"),p2o=o(" or "),gj=a("a"),_2o=o("AlbertTokenizerFast"),b2o=o(" (ALBERT model)"),v2o=l(),ms=a("li"),Dge=a("strong"),F2o=o("bart"),T2o=o(" \u2014 "),hj=a("a"),M2o=o("BartTokenizer"),E2o=o(" or "),uj=a("a"),C2o=o("BartTokenizerFast"),w2o=o(" (BART model)"),A2o=l(),fs=a("li"),Gge=a("strong"),L2o=o("barthez"),y2o=o(" \u2014 "),pj=a("a"),x2o=o("BarthezTokenizer"),$2o=o(" or "),_j=a("a"),k2o=o("BarthezTokenizerFast"),S2o=o(" (BARThez model)"),R2o=l(),hu=a("li"),Oge=a("strong"),P2o=o("bartpho"),B2o=o(" \u2014 "),bj=a("a"),I2o=o("BartphoTokenizer"),N2o=o(" (BARTpho model)"),q2o=l(),gs=a("li"),Vge=a("strong"),j2o=o("bert"),D2o=o(" \u2014 "),vj=a("a"),G2o=o("BertTokenizer"),O2o=o(" or "),Fj=a("a"),V2o=o("BertTokenizerFast"),X2o=o(" (BERT model)"),z2o=l(),uu=a("li"),Xge=a("strong"),Q2o=o("bert-generation"),W2o=o(" \u2014 "),Tj=a("a"),U2o=o("BertGenerationTokenizer"),H2o=o(" (Bert Generation model)"),J2o=l(),pu=a("li"),zge=a("strong"),Y2o=o("bert-japanese"),Z2o=o(" \u2014 "),Mj=a("a"),K2o=o("BertJapaneseTokenizer"),ebo=o(" (BertJapanese model)"),obo=l(),_u=a("li"),Qge=a("strong"),rbo=o("bertweet"),tbo=o(" \u2014 "),Ej=a("a"),abo=o("BertweetTokenizer"),nbo=o(" (BERTweet model)"),sbo=l(),hs=a("li"),Wge=a("strong"),lbo=o("big_bird"),ibo=o(" \u2014 "),Cj=a("a"),dbo=o("BigBirdTokenizer"),cbo=o(" or "),wj=a("a"),mbo=o("BigBirdTokenizerFast"),fbo=o(" (BigBird model)"),gbo=l(),us=a("li"),Uge=a("strong"),hbo=o("bigbird_pegasus"),ubo=o(" \u2014 "),Aj=a("a"),pbo=o("PegasusTokenizer"),_bo=o(" or "),Lj=a("a"),bbo=o("PegasusTokenizerFast"),vbo=o(" (BigBird-Pegasus model)"),Fbo=l(),ps=a("li"),Hge=a("strong"),Tbo=o("blenderbot"),Mbo=o(" \u2014 "),yj=a("a"),Ebo=o("BlenderbotTokenizer"),Cbo=o(" or "),xj=a("a"),wbo=o("BlenderbotTokenizerFast"),Abo=o(" (Blenderbot model)"),Lbo=l(),bu=a("li"),Jge=a("strong"),ybo=o("blenderbot-small"),xbo=o(" \u2014 "),$j=a("a"),$bo=o("BlenderbotSmallTokenizer"),kbo=o(" (BlenderbotSmall model)"),Sbo=l(),vu=a("li"),Yge=a("strong"),Rbo=o("bloom"),Pbo=o(" \u2014 "),kj=a("a"),Bbo=o("BloomTokenizerFast"),Ibo=o(" (BLOOM model)"),Nbo=l(),Fu=a("li"),Zge=a("strong"),qbo=o("byt5"),jbo=o(" \u2014 "),Sj=a("a"),Dbo=o("ByT5Tokenizer"),Gbo=o(" (ByT5 model)"),Obo=l(),_s=a("li"),Kge=a("strong"),Vbo=o("camembert"),Xbo=o(" \u2014 "),Rj=a("a"),zbo=o("CamembertTokenizer"),Qbo=o(" or "),Pj=a("a"),Wbo=o("CamembertTokenizerFast"),Ubo=o(" (CamemBERT model)"),Hbo=l(),Tu=a("li"),ehe=a("strong"),Jbo=o("canine"),Ybo=o(" \u2014 "),Bj=a("a"),Zbo=o("CanineTokenizer"),Kbo=o(" (CANINE model)"),evo=l(),bs=a("li"),ohe=a("strong"),ovo=o("clip"),rvo=o(" \u2014 "),Ij=a("a"),tvo=o("CLIPTokenizer"),avo=o(" or "),Nj=a("a"),nvo=o("CLIPTokenizerFast"),svo=o(" (CLIP model)"),lvo=l(),vs=a("li"),rhe=a("strong"),ivo=o("codegen"),dvo=o(" \u2014 "),qj=a("a"),cvo=o("CodeGenTokenizer"),mvo=o(" or "),jj=a("a"),fvo=o("CodeGenTokenizerFast"),gvo=o(" (CodeGen model)"),hvo=l(),Fs=a("li"),the=a("strong"),uvo=o("convbert"),pvo=o(" \u2014 "),Dj=a("a"),_vo=o("ConvBertTokenizer"),bvo=o(" or "),Gj=a("a"),vvo=o("ConvBertTokenizerFast"),Fvo=o(" (ConvBERT model)"),Tvo=l(),Ts=a("li"),ahe=a("strong"),Mvo=o("cpm"),Evo=o(" \u2014 "),Oj=a("a"),Cvo=o("CpmTokenizer"),wvo=o(" or "),Vj=a("a"),Avo=o("CpmTokenizerFast"),Lvo=o(" (CPM model)"),yvo=l(),Mu=a("li"),nhe=a("strong"),xvo=o("ctrl"),$vo=o(" \u2014 "),Xj=a("a"),kvo=o("CTRLTokenizer"),Svo=o(" (CTRL model)"),Rvo=l(),Ms=a("li"),she=a("strong"),Pvo=o("data2vec-text"),Bvo=o(" \u2014 "),zj=a("a"),Ivo=o("RobertaTokenizer"),Nvo=o(" or "),Qj=a("a"),qvo=o("RobertaTokenizerFast"),jvo=o(" (Data2VecText model)"),Dvo=l(),Es=a("li"),lhe=a("strong"),Gvo=o("deberta"),Ovo=o(" \u2014 "),Wj=a("a"),Vvo=o("DebertaTokenizer"),Xvo=o(" or "),Uj=a("a"),zvo=o("DebertaTokenizerFast"),Qvo=o(" (DeBERTa model)"),Wvo=l(),Cs=a("li"),ihe=a("strong"),Uvo=o("deberta-v2"),Hvo=o(" \u2014 "),Hj=a("a"),Jvo=o("DebertaV2Tokenizer"),Yvo=o(" or "),Jj=a("a"),Zvo=o("DebertaV2TokenizerFast"),Kvo=o(" (DeBERTa-v2 model)"),eFo=l(),ws=a("li"),dhe=a("strong"),oFo=o("distilbert"),rFo=o(" \u2014 "),Yj=a("a"),tFo=o("DistilBertTokenizer"),aFo=o(" or "),Zj=a("a"),nFo=o("DistilBertTokenizerFast"),sFo=o(" (DistilBERT model)"),lFo=l(),As=a("li"),che=a("strong"),iFo=o("dpr"),dFo=o(" \u2014 "),Kj=a("a"),cFo=o("DPRQuestionEncoderTokenizer"),mFo=o(" or "),eD=a("a"),fFo=o("DPRQuestionEncoderTokenizerFast"),gFo=o(" (DPR model)"),hFo=l(),Ls=a("li"),mhe=a("strong"),uFo=o("electra"),pFo=o(" \u2014 "),oD=a("a"),_Fo=o("ElectraTokenizer"),bFo=o(" or "),rD=a("a"),vFo=o("ElectraTokenizerFast"),FFo=o(" (ELECTRA model)"),TFo=l(),ys=a("li"),fhe=a("strong"),MFo=o("ernie"),EFo=o(" \u2014 "),tD=a("a"),CFo=o("BertTokenizer"),wFo=o(" or "),aD=a("a"),AFo=o("BertTokenizerFast"),LFo=o(" (ERNIE model)"),yFo=l(),Eu=a("li"),ghe=a("strong"),xFo=o("flaubert"),$Fo=o(" \u2014 "),nD=a("a"),kFo=o("FlaubertTokenizer"),SFo=o(" (FlauBERT model)"),RFo=l(),xs=a("li"),hhe=a("strong"),PFo=o("fnet"),BFo=o(" \u2014 "),sD=a("a"),IFo=o("FNetTokenizer"),NFo=o(" or "),lD=a("a"),qFo=o("FNetTokenizerFast"),jFo=o(" (FNet model)"),DFo=l(),Cu=a("li"),uhe=a("strong"),GFo=o("fsmt"),OFo=o(" \u2014 "),iD=a("a"),VFo=o("FSMTTokenizer"),XFo=o(" (FairSeq Machine-Translation model)"),zFo=l(),$s=a("li"),phe=a("strong"),QFo=o("funnel"),WFo=o(" \u2014 "),dD=a("a"),UFo=o("FunnelTokenizer"),HFo=o(" or "),cD=a("a"),JFo=o("FunnelTokenizerFast"),YFo=o(" (Funnel Transformer model)"),ZFo=l(),ks=a("li"),_he=a("strong"),KFo=o("gpt2"),eTo=o(" \u2014 "),mD=a("a"),oTo=o("GPT2Tokenizer"),rTo=o(" or "),fD=a("a"),tTo=o("GPT2TokenizerFast"),aTo=o(" (OpenAI GPT-2 model)"),nTo=l(),Ss=a("li"),bhe=a("strong"),sTo=o("gpt_neo"),lTo=o(" \u2014 "),gD=a("a"),iTo=o("GPT2Tokenizer"),dTo=o(" or "),hD=a("a"),cTo=o("GPT2TokenizerFast"),mTo=o(" (GPT Neo model)"),fTo=l(),wu=a("li"),vhe=a("strong"),gTo=o("gpt_neox"),hTo=o(" \u2014 "),uD=a("a"),uTo=o("GPTNeoXTokenizerFast"),pTo=o(" (GPT NeoX model)"),_To=l(),Au=a("li"),Fhe=a("strong"),bTo=o("gpt_neox_japanese"),vTo=o(" \u2014 "),pD=a("a"),FTo=o("GPTNeoXJapaneseTokenizer"),TTo=o(" (GPT NeoX Japanese model)"),MTo=l(),Rs=a("li"),The=a("strong"),ETo=o("gptj"),CTo=o(" \u2014 "),_D=a("a"),wTo=o("GPT2Tokenizer"),ATo=o(" or "),bD=a("a"),LTo=o("GPT2TokenizerFast"),yTo=o(" (GPT-J model)"),xTo=l(),Ps=a("li"),Mhe=a("strong"),$To=o("groupvit"),kTo=o(" \u2014 "),vD=a("a"),STo=o("CLIPTokenizer"),RTo=o(" or "),FD=a("a"),PTo=o("CLIPTokenizerFast"),BTo=o(" (GroupViT model)"),ITo=l(),Bs=a("li"),Ehe=a("strong"),NTo=o("herbert"),qTo=o(" \u2014 "),TD=a("a"),jTo=o("HerbertTokenizer"),DTo=o(" or "),MD=a("a"),GTo=o("HerbertTokenizerFast"),OTo=o(" (HerBERT model)"),VTo=l(),Lu=a("li"),Che=a("strong"),XTo=o("hubert"),zTo=o(" \u2014 "),ED=a("a"),QTo=o("Wav2Vec2CTCTokenizer"),WTo=o(" (Hubert model)"),UTo=l(),Is=a("li"),whe=a("strong"),HTo=o("ibert"),JTo=o(" \u2014 "),CD=a("a"),YTo=o("RobertaTokenizer"),ZTo=o(" or "),wD=a("a"),KTo=o("RobertaTokenizerFast"),eMo=o(" (I-BERT model)"),oMo=l(),Ns=a("li"),Ahe=a("strong"),rMo=o("layoutlm"),tMo=o(" \u2014 "),AD=a("a"),aMo=o("LayoutLMTokenizer"),nMo=o(" or "),LD=a("a"),sMo=o("LayoutLMTokenizerFast"),lMo=o(" (LayoutLM model)"),iMo=l(),qs=a("li"),Lhe=a("strong"),dMo=o("layoutlmv2"),cMo=o(" \u2014 "),yD=a("a"),mMo=o("LayoutLMv2Tokenizer"),fMo=o(" or "),xD=a("a"),gMo=o("LayoutLMv2TokenizerFast"),hMo=o(" (LayoutLMv2 model)"),uMo=l(),js=a("li"),yhe=a("strong"),pMo=o("layoutlmv3"),_Mo=o(" \u2014 "),$D=a("a"),bMo=o("LayoutLMv3Tokenizer"),vMo=o(" or "),kD=a("a"),FMo=o("LayoutLMv3TokenizerFast"),TMo=o(" (LayoutLMv3 model)"),MMo=l(),Ds=a("li"),xhe=a("strong"),EMo=o("layoutxlm"),CMo=o(" \u2014 "),SD=a("a"),wMo=o("LayoutXLMTokenizer"),AMo=o(" or "),RD=a("a"),LMo=o("LayoutXLMTokenizerFast"),yMo=o(" (LayoutXLM model)"),xMo=l(),Gs=a("li"),$he=a("strong"),$Mo=o("led"),kMo=o(" \u2014 "),PD=a("a"),SMo=o("LEDTokenizer"),RMo=o(" or "),BD=a("a"),PMo=o("LEDTokenizerFast"),BMo=o(" (LED model)"),IMo=l(),Os=a("li"),khe=a("strong"),NMo=o("longformer"),qMo=o(" \u2014 "),ID=a("a"),jMo=o("LongformerTokenizer"),DMo=o(" or "),ND=a("a"),GMo=o("LongformerTokenizerFast"),OMo=o(" (Longformer model)"),VMo=l(),Vs=a("li"),She=a("strong"),XMo=o("longt5"),zMo=o(" \u2014 "),qD=a("a"),QMo=o("T5Tokenizer"),WMo=o(" or "),jD=a("a"),UMo=o("T5TokenizerFast"),HMo=o(" (LongT5 model)"),JMo=l(),yu=a("li"),Rhe=a("strong"),YMo=o("luke"),ZMo=o(" \u2014 "),DD=a("a"),KMo=o("LukeTokenizer"),eEo=o(" (LUKE model)"),oEo=l(),Xs=a("li"),Phe=a("strong"),rEo=o("lxmert"),tEo=o(" \u2014 "),GD=a("a"),aEo=o("LxmertTokenizer"),nEo=o(" or "),OD=a("a"),sEo=o("LxmertTokenizerFast"),lEo=o(" (LXMERT model)"),iEo=l(),xu=a("li"),Bhe=a("strong"),dEo=o("m2m_100"),cEo=o(" \u2014 "),VD=a("a"),mEo=o("M2M100Tokenizer"),fEo=o(" (M2M100 model)"),gEo=l(),$u=a("li"),Ihe=a("strong"),hEo=o("marian"),uEo=o(" \u2014 "),XD=a("a"),pEo=o("MarianTokenizer"),_Eo=o(" (Marian model)"),bEo=l(),zs=a("li"),Nhe=a("strong"),vEo=o("mbart"),FEo=o(" \u2014 "),zD=a("a"),TEo=o("MBartTokenizer"),MEo=o(" or "),QD=a("a"),EEo=o("MBartTokenizerFast"),CEo=o(" (mBART model)"),wEo=l(),Qs=a("li"),qhe=a("strong"),AEo=o("mbart50"),LEo=o(" \u2014 "),WD=a("a"),yEo=o("MBart50Tokenizer"),xEo=o(" or "),UD=a("a"),$Eo=o("MBart50TokenizerFast"),kEo=o(" (mBART-50 model)"),SEo=l(),Ws=a("li"),jhe=a("strong"),REo=o("megatron-bert"),PEo=o(" \u2014 "),HD=a("a"),BEo=o("BertTokenizer"),IEo=o(" or "),JD=a("a"),NEo=o("BertTokenizerFast"),qEo=o(" (Megatron-BERT model)"),jEo=l(),ku=a("li"),Dhe=a("strong"),DEo=o("mluke"),GEo=o(" \u2014 "),YD=a("a"),OEo=o("MLukeTokenizer"),VEo=o(" (mLUKE model)"),XEo=l(),Us=a("li"),Ghe=a("strong"),zEo=o("mobilebert"),QEo=o(" \u2014 "),ZD=a("a"),WEo=o("MobileBertTokenizer"),UEo=o(" or "),KD=a("a"),HEo=o("MobileBertTokenizerFast"),JEo=o(" (MobileBERT model)"),YEo=l(),Hs=a("li"),Ohe=a("strong"),ZEo=o("mpnet"),KEo=o(" \u2014 "),eG=a("a"),e4o=o("MPNetTokenizer"),o4o=o(" or "),oG=a("a"),r4o=o("MPNetTokenizerFast"),t4o=o(" (MPNet model)"),a4o=l(),Js=a("li"),Vhe=a("strong"),n4o=o("mt5"),s4o=o(" \u2014 "),rG=a("a"),l4o=o("MT5Tokenizer"),i4o=o(" or "),tG=a("a"),d4o=o("MT5TokenizerFast"),c4o=o(" (MT5 model)"),m4o=l(),Ys=a("li"),Xhe=a("strong"),f4o=o("mvp"),g4o=o(" \u2014 "),aG=a("a"),h4o=o("MvpTokenizer"),u4o=o(" or "),nG=a("a"),p4o=o("MvpTokenizerFast"),_4o=o(" (MVP model)"),b4o=l(),Zs=a("li"),zhe=a("strong"),v4o=o("nezha"),F4o=o(" \u2014 "),sG=a("a"),T4o=o("BertTokenizer"),M4o=o(" or "),lG=a("a"),E4o=o("BertTokenizerFast"),C4o=o(" (Nezha model)"),w4o=l(),Ks=a("li"),Qhe=a("strong"),A4o=o("nllb"),L4o=o(" \u2014 "),iG=a("a"),y4o=o("NllbTokenizer"),x4o=o(" or "),dG=a("a"),$4o=o("NllbTokenizerFast"),k4o=o(" (NLLB model)"),S4o=l(),el=a("li"),Whe=a("strong"),R4o=o("nystromformer"),P4o=o(" \u2014 "),cG=a("a"),B4o=o("AlbertTokenizer"),I4o=o(" or "),mG=a("a"),N4o=o("AlbertTokenizerFast"),q4o=o(" (Nystr\xF6mformer model)"),j4o=l(),ol=a("li"),Uhe=a("strong"),D4o=o("openai-gpt"),G4o=o(" \u2014 "),fG=a("a"),O4o=o("OpenAIGPTTokenizer"),V4o=o(" or "),gG=a("a"),X4o=o("OpenAIGPTTokenizerFast"),z4o=o(" (OpenAI GPT model)"),Q4o=l(),Su=a("li"),Hhe=a("strong"),W4o=o("opt"),U4o=o(" \u2014 "),hG=a("a"),H4o=o("GPT2Tokenizer"),J4o=o(" (OPT model)"),Y4o=l(),rl=a("li"),Jhe=a("strong"),Z4o=o("owlvit"),K4o=o(" \u2014 "),uG=a("a"),eCo=o("CLIPTokenizer"),oCo=o(" or "),pG=a("a"),rCo=o("CLIPTokenizerFast"),tCo=o(" (OWL-ViT model)"),aCo=l(),tl=a("li"),Yhe=a("strong"),nCo=o("pegasus"),sCo=o(" \u2014 "),_G=a("a"),lCo=o("PegasusTokenizer"),iCo=o(" or "),bG=a("a"),dCo=o("PegasusTokenizerFast"),cCo=o(" (Pegasus model)"),mCo=l(),Ru=a("li"),Zhe=a("strong"),fCo=o("perceiver"),gCo=o(" \u2014 "),vG=a("a"),hCo=o("PerceiverTokenizer"),uCo=o(" (Perceiver model)"),pCo=l(),Pu=a("li"),Khe=a("strong"),_Co=o("phobert"),bCo=o(" \u2014 "),FG=a("a"),vCo=o("PhobertTokenizer"),FCo=o(" (PhoBERT model)"),TCo=l(),Bu=a("li"),eue=a("strong"),MCo=o("plbart"),ECo=o(" \u2014 "),TG=a("a"),CCo=o("PLBartTokenizer"),wCo=o(" (PLBart model)"),ACo=l(),Iu=a("li"),oue=a("strong"),LCo=o("prophetnet"),yCo=o(" \u2014 "),MG=a("a"),xCo=o("ProphetNetTokenizer"),$Co=o(" (ProphetNet model)"),kCo=l(),al=a("li"),rue=a("strong"),SCo=o("qdqbert"),RCo=o(" \u2014 "),EG=a("a"),PCo=o("BertTokenizer"),BCo=o(" or "),CG=a("a"),ICo=o("BertTokenizerFast"),NCo=o(" (QDQBert model)"),qCo=l(),Nu=a("li"),tue=a("strong"),jCo=o("rag"),DCo=o(" \u2014 "),wG=a("a"),GCo=o("RagTokenizer"),OCo=o(" (RAG model)"),VCo=l(),nl=a("li"),aue=a("strong"),XCo=o("realm"),zCo=o(" \u2014 "),AG=a("a"),QCo=o("RealmTokenizer"),WCo=o(" or "),LG=a("a"),UCo=o("RealmTokenizerFast"),HCo=o(" (REALM model)"),JCo=l(),sl=a("li"),nue=a("strong"),YCo=o("reformer"),ZCo=o(" \u2014 "),yG=a("a"),KCo=o("ReformerTokenizer"),e3o=o(" or "),xG=a("a"),o3o=o("ReformerTokenizerFast"),r3o=o(" (Reformer model)"),t3o=l(),ll=a("li"),sue=a("strong"),a3o=o("rembert"),n3o=o(" \u2014 "),$G=a("a"),s3o=o("RemBertTokenizer"),l3o=o(" or "),kG=a("a"),i3o=o("RemBertTokenizerFast"),d3o=o(" (RemBERT model)"),c3o=l(),il=a("li"),lue=a("strong"),m3o=o("retribert"),f3o=o(" \u2014 "),SG=a("a"),g3o=o("RetriBertTokenizer"),h3o=o(" or "),RG=a("a"),u3o=o("RetriBertTokenizerFast"),p3o=o(" (RetriBERT model)"),_3o=l(),dl=a("li"),iue=a("strong"),b3o=o("roberta"),v3o=o(" \u2014 "),PG=a("a"),F3o=o("RobertaTokenizer"),T3o=o(" or "),BG=a("a"),M3o=o("RobertaTokenizerFast"),E3o=o(" (RoBERTa model)"),C3o=l(),cl=a("li"),due=a("strong"),w3o=o("roformer"),A3o=o(" \u2014 "),IG=a("a"),L3o=o("RoFormerTokenizer"),y3o=o(" or "),NG=a("a"),x3o=o("RoFormerTokenizerFast"),$3o=o(" (RoFormer model)"),k3o=l(),qu=a("li"),cue=a("strong"),S3o=o("speech_to_text"),R3o=o(" \u2014 "),qG=a("a"),P3o=o("Speech2TextTokenizer"),B3o=o(" (Speech2Text model)"),I3o=l(),ju=a("li"),mue=a("strong"),N3o=o("speech_to_text_2"),q3o=o(" \u2014 "),jG=a("a"),j3o=o("Speech2Text2Tokenizer"),D3o=o(" (Speech2Text2 model)"),G3o=l(),ml=a("li"),fue=a("strong"),O3o=o("splinter"),V3o=o(" \u2014 "),DG=a("a"),X3o=o("SplinterTokenizer"),z3o=o(" or "),GG=a("a"),Q3o=o("SplinterTokenizerFast"),W3o=o(" (Splinter model)"),U3o=l(),fl=a("li"),gue=a("strong"),H3o=o("squeezebert"),J3o=o(" \u2014 "),OG=a("a"),Y3o=o("SqueezeBertTokenizer"),Z3o=o(" or "),VG=a("a"),K3o=o("SqueezeBertTokenizerFast"),e5o=o(" (SqueezeBERT model)"),o5o=l(),gl=a("li"),hue=a("strong"),r5o=o("t5"),t5o=o(" \u2014 "),XG=a("a"),a5o=o("T5Tokenizer"),n5o=o(" or "),zG=a("a"),s5o=o("T5TokenizerFast"),l5o=o(" (T5 model)"),i5o=l(),Du=a("li"),uue=a("strong"),d5o=o("tapas"),c5o=o(" \u2014 "),QG=a("a"),m5o=o("TapasTokenizer"),f5o=o(" (TAPAS model)"),g5o=l(),Gu=a("li"),pue=a("strong"),h5o=o("tapex"),u5o=o(" \u2014 "),WG=a("a"),p5o=o("TapexTokenizer"),_5o=o(" (TAPEX model)"),b5o=l(),Ou=a("li"),_ue=a("strong"),v5o=o("transfo-xl"),F5o=o(" \u2014 "),UG=a("a"),T5o=o("TransfoXLTokenizer"),M5o=o(" (Transformer-XL model)"),E5o=l(),hl=a("li"),bue=a("strong"),C5o=o("vilt"),w5o=o(" \u2014 "),HG=a("a"),A5o=o("BertTokenizer"),L5o=o(" or "),JG=a("a"),y5o=o("BertTokenizerFast"),x5o=o(" (ViLT model)"),$5o=l(),ul=a("li"),vue=a("strong"),k5o=o("visual_bert"),S5o=o(" \u2014 "),YG=a("a"),R5o=o("BertTokenizer"),P5o=o(" or "),ZG=a("a"),B5o=o("BertTokenizerFast"),I5o=o(" (VisualBERT model)"),N5o=l(),Vu=a("li"),Fue=a("strong"),q5o=o("wav2vec2"),j5o=o(" \u2014 "),KG=a("a"),D5o=o("Wav2Vec2CTCTokenizer"),G5o=o(" (Wav2Vec2 model)"),O5o=l(),Xu=a("li"),Tue=a("strong"),V5o=o("wav2vec2-conformer"),X5o=o(" \u2014 "),eO=a("a"),z5o=o("Wav2Vec2CTCTokenizer"),Q5o=o(" (Wav2Vec2-Conformer model)"),W5o=l(),zu=a("li"),Mue=a("strong"),U5o=o("wav2vec2_phoneme"),H5o=o(" \u2014 "),oO=a("a"),J5o=o("Wav2Vec2PhonemeCTCTokenizer"),Y5o=o(" (Wav2Vec2Phoneme model)"),Z5o=l(),Qu=a("li"),Eue=a("strong"),K5o=o("whisper"),e0o=o(" \u2014 "),rO=a("a"),o0o=o("WhisperTokenizer"),r0o=o(" (Whisper model)"),t0o=l(),pl=a("li"),Cue=a("strong"),a0o=o("xclip"),n0o=o(" \u2014 "),tO=a("a"),s0o=o("CLIPTokenizer"),l0o=o(" or "),aO=a("a"),i0o=o("CLIPTokenizerFast"),d0o=o(" (X-CLIP model)"),c0o=l(),_l=a("li"),wue=a("strong"),m0o=o("xglm"),f0o=o(" \u2014 "),nO=a("a"),g0o=o("XGLMTokenizer"),h0o=o(" or "),sO=a("a"),u0o=o("XGLMTokenizerFast"),p0o=o(" (XGLM model)"),_0o=l(),Wu=a("li"),Aue=a("strong"),b0o=o("xlm"),v0o=o(" \u2014 "),lO=a("a"),F0o=o("XLMTokenizer"),T0o=o(" (XLM model)"),M0o=l(),Uu=a("li"),Lue=a("strong"),E0o=o("xlm-prophetnet"),C0o=o(" \u2014 "),iO=a("a"),w0o=o("XLMProphetNetTokenizer"),A0o=o(" (XLM-ProphetNet model)"),L0o=l(),bl=a("li"),yue=a("strong"),y0o=o("xlm-roberta"),x0o=o(" \u2014 "),dO=a("a"),$0o=o("XLMRobertaTokenizer"),k0o=o(" or "),cO=a("a"),S0o=o("XLMRobertaTokenizerFast"),R0o=o(" (XLM-RoBERTa model)"),P0o=l(),vl=a("li"),xue=a("strong"),B0o=o("xlm-roberta-xl"),I0o=o(" \u2014 "),mO=a("a"),N0o=o("XLMRobertaTokenizer"),q0o=o(" or "),fO=a("a"),j0o=o("XLMRobertaTokenizerFast"),D0o=o(" (XLM-RoBERTa-XL model)"),G0o=l(),Fl=a("li"),$ue=a("strong"),O0o=o("xlnet"),V0o=o(" \u2014 "),gO=a("a"),X0o=o("XLNetTokenizer"),z0o=o(" or "),hO=a("a"),Q0o=o("XLNetTokenizerFast"),W0o=o(" (XLNet model)"),U0o=l(),Tl=a("li"),kue=a("strong"),H0o=o("yoso"),J0o=o(" \u2014 "),uO=a("a"),Y0o=o("AlbertTokenizer"),Z0o=o(" or "),pO=a("a"),K0o=o("AlbertTokenizerFast"),ewo=o(" (YOSO model)"),owo=l(),F(Hu.$$.fragment),rwo=l(),Ju=a("div"),F(Gx.$$.fragment),two=l(),Sue=a("p"),awo=o("Register a new tokenizer in this mapping."),woo=l(),Fd=a("h2"),Yu=a("a"),Rue=a("span"),F(Ox.$$.fragment),nwo=l(),Pue=a("span"),swo=o("AutoFeatureExtractor"),Aoo=l(),Ro=a("div"),F(Vx.$$.fragment),lwo=l(),Xx=a("p"),iwo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_O=a("a"),dwo=o("AutoFeatureExtractor.from_pretrained()"),cwo=o(" class method."),mwo=l(),zx=a("p"),fwo=o("This class cannot be instantiated directly using "),Bue=a("code"),gwo=o("__init__()"),hwo=o(" (throws an error)."),uwo=l(),Ye=a("div"),F(Qx.$$.fragment),pwo=l(),Iue=a("p"),_wo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bwo=l(),Ka=a("p"),vwo=o("The feature extractor class to instantiate is selected based on the "),Nue=a("code"),Fwo=o("model_type"),Two=o(` property of the config object
(either passed as an argument or loaded from `),que=a("code"),Mwo=o("pretrained_model_name_or_path"),Ewo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jue=a("code"),Cwo=o("pretrained_model_name_or_path"),wwo=o(":"),Awo=l(),z=a("ul"),Zu=a("li"),Due=a("strong"),Lwo=o("beit"),ywo=o(" \u2014 "),bO=a("a"),xwo=o("BeitFeatureExtractor"),$wo=o(" (BEiT model)"),kwo=l(),Ku=a("li"),Gue=a("strong"),Swo=o("clip"),Rwo=o(" \u2014 "),vO=a("a"),Pwo=o("CLIPFeatureExtractor"),Bwo=o(" (CLIP model)"),Iwo=l(),ep=a("li"),Oue=a("strong"),Nwo=o("conditional_detr"),qwo=o(" \u2014 "),FO=a("a"),jwo=o("ConditionalDetrFeatureExtractor"),Dwo=o(" (Conditional DETR model)"),Gwo=l(),op=a("li"),Vue=a("strong"),Owo=o("convnext"),Vwo=o(" \u2014 "),TO=a("a"),Xwo=o("ConvNextFeatureExtractor"),zwo=o(" (ConvNeXT model)"),Qwo=l(),rp=a("li"),Xue=a("strong"),Wwo=o("cvt"),Uwo=o(" \u2014 "),MO=a("a"),Hwo=o("ConvNextFeatureExtractor"),Jwo=o(" (CvT model)"),Ywo=l(),tp=a("li"),zue=a("strong"),Zwo=o("data2vec-audio"),Kwo=o(" \u2014 "),EO=a("a"),eAo=o("Wav2Vec2FeatureExtractor"),oAo=o(" (Data2VecAudio model)"),rAo=l(),ap=a("li"),Que=a("strong"),tAo=o("data2vec-vision"),aAo=o(" \u2014 "),CO=a("a"),nAo=o("BeitFeatureExtractor"),sAo=o(" (Data2VecVision model)"),lAo=l(),np=a("li"),Wue=a("strong"),iAo=o("deformable_detr"),dAo=o(" \u2014 "),wO=a("a"),cAo=o("DeformableDetrFeatureExtractor"),mAo=o(" (Deformable DETR model)"),fAo=l(),sp=a("li"),Uue=a("strong"),gAo=o("deit"),hAo=o(" \u2014 "),AO=a("a"),uAo=o("DeiTFeatureExtractor"),pAo=o(" (DeiT model)"),_Ao=l(),lp=a("li"),Hue=a("strong"),bAo=o("detr"),vAo=o(" \u2014 "),LO=a("a"),FAo=o("DetrFeatureExtractor"),TAo=o(" (DETR model)"),MAo=l(),ip=a("li"),Jue=a("strong"),EAo=o("donut"),CAo=o(" \u2014 "),yO=a("a"),wAo=o("DonutFeatureExtractor"),AAo=o(" (Donut model)"),LAo=l(),dp=a("li"),Yue=a("strong"),yAo=o("dpt"),xAo=o(" \u2014 "),xO=a("a"),$Ao=o("DPTFeatureExtractor"),kAo=o(" (DPT model)"),SAo=l(),cp=a("li"),Zue=a("strong"),RAo=o("flava"),PAo=o(" \u2014 "),$O=a("a"),BAo=o("FlavaFeatureExtractor"),IAo=o(" (FLAVA model)"),NAo=l(),mp=a("li"),Kue=a("strong"),qAo=o("glpn"),jAo=o(" \u2014 "),kO=a("a"),DAo=o("GLPNFeatureExtractor"),GAo=o(" (GLPN model)"),OAo=l(),fp=a("li"),epe=a("strong"),VAo=o("groupvit"),XAo=o(" \u2014 "),SO=a("a"),zAo=o("CLIPFeatureExtractor"),QAo=o(" (GroupViT model)"),WAo=l(),gp=a("li"),ope=a("strong"),UAo=o("hubert"),HAo=o(" \u2014 "),RO=a("a"),JAo=o("Wav2Vec2FeatureExtractor"),YAo=o(" (Hubert model)"),ZAo=l(),hp=a("li"),rpe=a("strong"),KAo=o("imagegpt"),e6o=o(" \u2014 "),PO=a("a"),o6o=o("ImageGPTFeatureExtractor"),r6o=o(" (ImageGPT model)"),t6o=l(),up=a("li"),tpe=a("strong"),a6o=o("layoutlmv2"),n6o=o(" \u2014 "),BO=a("a"),s6o=o("LayoutLMv2FeatureExtractor"),l6o=o(" (LayoutLMv2 model)"),i6o=l(),pp=a("li"),ape=a("strong"),d6o=o("layoutlmv3"),c6o=o(" \u2014 "),IO=a("a"),m6o=o("LayoutLMv3FeatureExtractor"),f6o=o(" (LayoutLMv3 model)"),g6o=l(),_p=a("li"),npe=a("strong"),h6o=o("levit"),u6o=o(" \u2014 "),NO=a("a"),p6o=o("LevitFeatureExtractor"),_6o=o(" (LeViT model)"),b6o=l(),bp=a("li"),spe=a("strong"),v6o=o("maskformer"),F6o=o(" \u2014 "),qO=a("a"),T6o=o("MaskFormerFeatureExtractor"),M6o=o(" (MaskFormer model)"),E6o=l(),vp=a("li"),lpe=a("strong"),C6o=o("mctct"),w6o=o(" \u2014 "),jO=a("a"),A6o=o("MCTCTFeatureExtractor"),L6o=o(" (M-CTC-T model)"),y6o=l(),Fp=a("li"),ipe=a("strong"),x6o=o("mobilevit"),$6o=o(" \u2014 "),DO=a("a"),k6o=o("MobileViTFeatureExtractor"),S6o=o(" (MobileViT model)"),R6o=l(),Tp=a("li"),dpe=a("strong"),P6o=o("owlvit"),B6o=o(" \u2014 "),GO=a("a"),I6o=o("OwlViTFeatureExtractor"),N6o=o(" (OWL-ViT model)"),q6o=l(),Mp=a("li"),cpe=a("strong"),j6o=o("perceiver"),D6o=o(" \u2014 "),OO=a("a"),G6o=o("PerceiverFeatureExtractor"),O6o=o(" (Perceiver model)"),V6o=l(),Ep=a("li"),mpe=a("strong"),X6o=o("poolformer"),z6o=o(" \u2014 "),VO=a("a"),Q6o=o("PoolFormerFeatureExtractor"),W6o=o(" (PoolFormer model)"),U6o=l(),Cp=a("li"),fpe=a("strong"),H6o=o("regnet"),J6o=o(" \u2014 "),XO=a("a"),Y6o=o("ConvNextFeatureExtractor"),Z6o=o(" (RegNet model)"),K6o=l(),wp=a("li"),gpe=a("strong"),e7o=o("resnet"),o7o=o(" \u2014 "),zO=a("a"),r7o=o("ConvNextFeatureExtractor"),t7o=o(" (ResNet model)"),a7o=l(),Ap=a("li"),hpe=a("strong"),n7o=o("segformer"),s7o=o(" \u2014 "),QO=a("a"),l7o=o("SegformerFeatureExtractor"),i7o=o(" (SegFormer model)"),d7o=l(),Lp=a("li"),upe=a("strong"),c7o=o("speech_to_text"),m7o=o(" \u2014 "),WO=a("a"),f7o=o("Speech2TextFeatureExtractor"),g7o=o(" (Speech2Text model)"),h7o=l(),yp=a("li"),ppe=a("strong"),u7o=o("swin"),p7o=o(" \u2014 "),UO=a("a"),_7o=o("ViTFeatureExtractor"),b7o=o(" (Swin Transformer model)"),v7o=l(),xp=a("li"),_pe=a("strong"),F7o=o("swinv2"),T7o=o(" \u2014 "),HO=a("a"),M7o=o("ViTFeatureExtractor"),E7o=o(" (Swin Transformer V2 model)"),C7o=l(),$p=a("li"),bpe=a("strong"),w7o=o("van"),A7o=o(" \u2014 "),JO=a("a"),L7o=o("ConvNextFeatureExtractor"),y7o=o(" (VAN model)"),x7o=l(),kp=a("li"),vpe=a("strong"),$7o=o("videomae"),k7o=o(" \u2014 "),YO=a("a"),S7o=o("VideoMAEFeatureExtractor"),R7o=o(" (VideoMAE model)"),P7o=l(),Sp=a("li"),Fpe=a("strong"),B7o=o("vilt"),I7o=o(" \u2014 "),ZO=a("a"),N7o=o("ViltFeatureExtractor"),q7o=o(" (ViLT model)"),j7o=l(),Rp=a("li"),Tpe=a("strong"),D7o=o("vit"),G7o=o(" \u2014 "),KO=a("a"),O7o=o("ViTFeatureExtractor"),V7o=o(" (ViT model)"),X7o=l(),Pp=a("li"),Mpe=a("strong"),z7o=o("vit_mae"),Q7o=o(" \u2014 "),eV=a("a"),W7o=o("ViTFeatureExtractor"),U7o=o(" (ViTMAE model)"),H7o=l(),Bp=a("li"),Epe=a("strong"),J7o=o("vit_msn"),Y7o=o(" \u2014 "),oV=a("a"),Z7o=o("ViTFeatureExtractor"),K7o=o(" (ViTMSN model)"),eLo=l(),Ip=a("li"),Cpe=a("strong"),oLo=o("wav2vec2"),rLo=o(" \u2014 "),rV=a("a"),tLo=o("Wav2Vec2FeatureExtractor"),aLo=o(" (Wav2Vec2 model)"),nLo=l(),Np=a("li"),wpe=a("strong"),sLo=o("wav2vec2-conformer"),lLo=o(" \u2014 "),tV=a("a"),iLo=o("Wav2Vec2FeatureExtractor"),dLo=o(" (Wav2Vec2-Conformer model)"),cLo=l(),qp=a("li"),Ape=a("strong"),mLo=o("whisper"),fLo=o(" \u2014 "),aV=a("a"),gLo=o("WhisperFeatureExtractor"),hLo=o(" (Whisper model)"),uLo=l(),jp=a("li"),Lpe=a("strong"),pLo=o("xclip"),_Lo=o(" \u2014 "),nV=a("a"),bLo=o("CLIPFeatureExtractor"),vLo=o(" (X-CLIP model)"),FLo=l(),Dp=a("li"),ype=a("strong"),TLo=o("yolos"),MLo=o(" \u2014 "),sV=a("a"),ELo=o("YolosFeatureExtractor"),CLo=o(" (YOLOS model)"),wLo=l(),F(Gp.$$.fragment),ALo=l(),F(Op.$$.fragment),LLo=l(),Vp=a("div"),F(Wx.$$.fragment),yLo=l(),xpe=a("p"),xLo=o("Register a new feature extractor for this class."),Loo=l(),Td=a("h2"),Xp=a("a"),$pe=a("span"),F(Ux.$$.fragment),$Lo=l(),kpe=a("span"),kLo=o("AutoProcessor"),yoo=l(),Po=a("div"),F(Hx.$$.fragment),SLo=l(),Jx=a("p"),RLo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lV=a("a"),PLo=o("AutoProcessor.from_pretrained()"),BLo=o(" class method."),ILo=l(),Yx=a("p"),NLo=o("This class cannot be instantiated directly using "),Spe=a("code"),qLo=o("__init__()"),jLo=o(" (throws an error)."),DLo=l(),Ze=a("div"),F(Zx.$$.fragment),GLo=l(),Rpe=a("p"),OLo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VLo=l(),Md=a("p"),XLo=o("The processor class to instantiate is selected based on the "),Ppe=a("code"),zLo=o("model_type"),QLo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),WLo=o("pretrained_model_name_or_path"),ULo=o(" if possible):"),HLo=l(),se=a("ul"),zp=a("li"),Ipe=a("strong"),JLo=o("clip"),YLo=o(" \u2014 "),iV=a("a"),ZLo=o("CLIPProcessor"),KLo=o(" (CLIP model)"),e8o=l(),Qp=a("li"),Npe=a("strong"),o8o=o("donut"),r8o=o(" \u2014 "),dV=a("a"),t8o=o("DonutProcessor"),a8o=o(" (Donut model)"),n8o=l(),Wp=a("li"),qpe=a("strong"),s8o=o("flava"),l8o=o(" \u2014 "),cV=a("a"),i8o=o("FlavaProcessor"),d8o=o(" (FLAVA model)"),c8o=l(),Up=a("li"),jpe=a("strong"),m8o=o("groupvit"),f8o=o(" \u2014 "),mV=a("a"),g8o=o("CLIPProcessor"),h8o=o(" (GroupViT model)"),u8o=l(),Hp=a("li"),Dpe=a("strong"),p8o=o("layoutlmv2"),_8o=o(" \u2014 "),fV=a("a"),b8o=o("LayoutLMv2Processor"),v8o=o(" (LayoutLMv2 model)"),F8o=l(),Jp=a("li"),Gpe=a("strong"),T8o=o("layoutlmv3"),M8o=o(" \u2014 "),gV=a("a"),E8o=o("LayoutLMv3Processor"),C8o=o(" (LayoutLMv3 model)"),w8o=l(),Yp=a("li"),Ope=a("strong"),A8o=o("layoutxlm"),L8o=o(" \u2014 "),hV=a("a"),y8o=o("LayoutXLMProcessor"),x8o=o(" (LayoutXLM model)"),$8o=l(),Zp=a("li"),Vpe=a("strong"),k8o=o("markuplm"),S8o=o(" \u2014 "),uV=a("a"),R8o=o("MarkupLMProcessor"),P8o=o(" (MarkupLM model)"),B8o=l(),Kp=a("li"),Xpe=a("strong"),I8o=o("owlvit"),N8o=o(" \u2014 "),pV=a("a"),q8o=o("OwlViTProcessor"),j8o=o(" (OWL-ViT model)"),D8o=l(),e_=a("li"),zpe=a("strong"),G8o=o("sew"),O8o=o(" \u2014 "),_V=a("a"),V8o=o("Wav2Vec2Processor"),X8o=o(" (SEW model)"),z8o=l(),o_=a("li"),Qpe=a("strong"),Q8o=o("sew-d"),W8o=o(" \u2014 "),bV=a("a"),U8o=o("Wav2Vec2Processor"),H8o=o(" (SEW-D model)"),J8o=l(),r_=a("li"),Wpe=a("strong"),Y8o=o("speech_to_text"),Z8o=o(" \u2014 "),vV=a("a"),K8o=o("Speech2TextProcessor"),eyo=o(" (Speech2Text model)"),oyo=l(),t_=a("li"),Upe=a("strong"),ryo=o("speech_to_text_2"),tyo=o(" \u2014 "),FV=a("a"),ayo=o("Speech2Text2Processor"),nyo=o(" (Speech2Text2 model)"),syo=l(),a_=a("li"),Hpe=a("strong"),lyo=o("trocr"),iyo=o(" \u2014 "),TV=a("a"),dyo=o("TrOCRProcessor"),cyo=o(" (TrOCR model)"),myo=l(),n_=a("li"),Jpe=a("strong"),fyo=o("unispeech"),gyo=o(" \u2014 "),MV=a("a"),hyo=o("Wav2Vec2Processor"),uyo=o(" (UniSpeech model)"),pyo=l(),s_=a("li"),Ype=a("strong"),_yo=o("unispeech-sat"),byo=o(" \u2014 "),EV=a("a"),vyo=o("Wav2Vec2Processor"),Fyo=o(" (UniSpeechSat model)"),Tyo=l(),l_=a("li"),Zpe=a("strong"),Myo=o("vilt"),Eyo=o(" \u2014 "),CV=a("a"),Cyo=o("ViltProcessor"),wyo=o(" (ViLT model)"),Ayo=l(),i_=a("li"),Kpe=a("strong"),Lyo=o("vision-text-dual-encoder"),yyo=o(" \u2014 "),wV=a("a"),xyo=o("VisionTextDualEncoderProcessor"),$yo=o(" (VisionTextDualEncoder model)"),kyo=l(),d_=a("li"),e_e=a("strong"),Syo=o("wav2vec2"),Ryo=o(" \u2014 "),AV=a("a"),Pyo=o("Wav2Vec2Processor"),Byo=o(" (Wav2Vec2 model)"),Iyo=l(),c_=a("li"),o_e=a("strong"),Nyo=o("wav2vec2-conformer"),qyo=o(" \u2014 "),LV=a("a"),jyo=o("Wav2Vec2Processor"),Dyo=o(" (Wav2Vec2-Conformer model)"),Gyo=l(),m_=a("li"),r_e=a("strong"),Oyo=o("wavlm"),Vyo=o(" \u2014 "),yV=a("a"),Xyo=o("Wav2Vec2Processor"),zyo=o(" (WavLM model)"),Qyo=l(),f_=a("li"),t_e=a("strong"),Wyo=o("whisper"),Uyo=o(" \u2014 "),xV=a("a"),Hyo=o("WhisperProcessor"),Jyo=o(" (Whisper model)"),Yyo=l(),g_=a("li"),a_e=a("strong"),Zyo=o("xclip"),Kyo=o(" \u2014 "),$V=a("a"),e9o=o("CLIPProcessor"),o9o=o(" (X-CLIP model)"),r9o=l(),F(h_.$$.fragment),t9o=l(),F(u_.$$.fragment),a9o=l(),p_=a("div"),F(Kx.$$.fragment),n9o=l(),n_e=a("p"),s9o=o("Register a new processor for this class."),xoo=l(),Ed=a("h2"),__=a("a"),s_e=a("span"),F(e$.$$.fragment),l9o=l(),l_e=a("span"),i9o=o("AutoModel"),$oo=l(),Bo=a("div"),F(o$.$$.fragment),d9o=l(),Cd=a("p"),c9o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kV=a("a"),m9o=o("from_pretrained()"),f9o=o(" class method or the "),SV=a("a"),g9o=o("from_config()"),h9o=o(` class
method.`),u9o=l(),r$=a("p"),p9o=o("This class cannot be instantiated directly using "),i_e=a("code"),_9o=o("__init__()"),b9o=o(" (throws an error)."),v9o=l(),vt=a("div"),F(t$.$$.fragment),F9o=l(),d_e=a("p"),T9o=o("Instantiates one of the base model classes of the library from a configuration."),M9o=l(),wd=a("p"),E9o=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),C9o=o("not"),w9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),A9o=o("from_pretrained()"),L9o=o(" to load the model weights."),y9o=l(),F(b_.$$.fragment),x9o=l(),Ke=a("div"),F(a$.$$.fragment),$9o=l(),m_e=a("p"),k9o=o("Instantiate one of the base model classes of the library from a pretrained model."),S9o=l(),en=a("p"),R9o=o("The model class to instantiate is selected based on the "),f_e=a("code"),P9o=o("model_type"),B9o=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),I9o=o("pretrained_model_name_or_path"),N9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),q9o=o("pretrained_model_name_or_path"),j9o=o(":"),D9o=l(),y=a("ul"),v_=a("li"),u_e=a("strong"),G9o=o("albert"),O9o=o(" \u2014 "),PV=a("a"),V9o=o("AlbertModel"),X9o=o(" (ALBERT model)"),z9o=l(),F_=a("li"),p_e=a("strong"),Q9o=o("bart"),W9o=o(" \u2014 "),BV=a("a"),U9o=o("BartModel"),H9o=o(" (BART model)"),J9o=l(),T_=a("li"),__e=a("strong"),Y9o=o("beit"),Z9o=o(" \u2014 "),IV=a("a"),K9o=o("BeitModel"),exo=o(" (BEiT model)"),oxo=l(),M_=a("li"),b_e=a("strong"),rxo=o("bert"),txo=o(" \u2014 "),NV=a("a"),axo=o("BertModel"),nxo=o(" (BERT model)"),sxo=l(),E_=a("li"),v_e=a("strong"),lxo=o("bert-generation"),ixo=o(" \u2014 "),qV=a("a"),dxo=o("BertGenerationEncoder"),cxo=o(" (Bert Generation model)"),mxo=l(),C_=a("li"),F_e=a("strong"),fxo=o("big_bird"),gxo=o(" \u2014 "),jV=a("a"),hxo=o("BigBirdModel"),uxo=o(" (BigBird model)"),pxo=l(),w_=a("li"),T_e=a("strong"),_xo=o("bigbird_pegasus"),bxo=o(" \u2014 "),DV=a("a"),vxo=o("BigBirdPegasusModel"),Fxo=o(" (BigBird-Pegasus model)"),Txo=l(),A_=a("li"),M_e=a("strong"),Mxo=o("blenderbot"),Exo=o(" \u2014 "),GV=a("a"),Cxo=o("BlenderbotModel"),wxo=o(" (Blenderbot model)"),Axo=l(),L_=a("li"),E_e=a("strong"),Lxo=o("blenderbot-small"),yxo=o(" \u2014 "),OV=a("a"),xxo=o("BlenderbotSmallModel"),$xo=o(" (BlenderbotSmall model)"),kxo=l(),y_=a("li"),C_e=a("strong"),Sxo=o("bloom"),Rxo=o(" \u2014 "),VV=a("a"),Pxo=o("BloomModel"),Bxo=o(" (BLOOM model)"),Ixo=l(),x_=a("li"),w_e=a("strong"),Nxo=o("camembert"),qxo=o(" \u2014 "),XV=a("a"),jxo=o("CamembertModel"),Dxo=o(" (CamemBERT model)"),Gxo=l(),$_=a("li"),A_e=a("strong"),Oxo=o("canine"),Vxo=o(" \u2014 "),zV=a("a"),Xxo=o("CanineModel"),zxo=o(" (CANINE model)"),Qxo=l(),k_=a("li"),L_e=a("strong"),Wxo=o("clip"),Uxo=o(" \u2014 "),QV=a("a"),Hxo=o("CLIPModel"),Jxo=o(" (CLIP model)"),Yxo=l(),S_=a("li"),y_e=a("strong"),Zxo=o("codegen"),Kxo=o(" \u2014 "),WV=a("a"),e$o=o("CodeGenModel"),o$o=o(" (CodeGen model)"),r$o=l(),R_=a("li"),x_e=a("strong"),t$o=o("conditional_detr"),a$o=o(" \u2014 "),UV=a("a"),n$o=o("ConditionalDetrModel"),s$o=o(" (Conditional DETR model)"),l$o=l(),P_=a("li"),$_e=a("strong"),i$o=o("convbert"),d$o=o(" \u2014 "),HV=a("a"),c$o=o("ConvBertModel"),m$o=o(" (ConvBERT model)"),f$o=l(),B_=a("li"),k_e=a("strong"),g$o=o("convnext"),h$o=o(" \u2014 "),JV=a("a"),u$o=o("ConvNextModel"),p$o=o(" (ConvNeXT model)"),_$o=l(),I_=a("li"),S_e=a("strong"),b$o=o("ctrl"),v$o=o(" \u2014 "),YV=a("a"),F$o=o("CTRLModel"),T$o=o(" (CTRL model)"),M$o=l(),N_=a("li"),R_e=a("strong"),E$o=o("cvt"),C$o=o(" \u2014 "),ZV=a("a"),w$o=o("CvtModel"),A$o=o(" (CvT model)"),L$o=l(),q_=a("li"),P_e=a("strong"),y$o=o("data2vec-audio"),x$o=o(" \u2014 "),KV=a("a"),$$o=o("Data2VecAudioModel"),k$o=o(" (Data2VecAudio model)"),S$o=l(),j_=a("li"),B_e=a("strong"),R$o=o("data2vec-text"),P$o=o(" \u2014 "),eX=a("a"),B$o=o("Data2VecTextModel"),I$o=o(" (Data2VecText model)"),N$o=l(),D_=a("li"),I_e=a("strong"),q$o=o("data2vec-vision"),j$o=o(" \u2014 "),oX=a("a"),D$o=o("Data2VecVisionModel"),G$o=o(" (Data2VecVision model)"),O$o=l(),G_=a("li"),N_e=a("strong"),V$o=o("deberta"),X$o=o(" \u2014 "),rX=a("a"),z$o=o("DebertaModel"),Q$o=o(" (DeBERTa model)"),W$o=l(),O_=a("li"),q_e=a("strong"),U$o=o("deberta-v2"),H$o=o(" \u2014 "),tX=a("a"),J$o=o("DebertaV2Model"),Y$o=o(" (DeBERTa-v2 model)"),Z$o=l(),V_=a("li"),j_e=a("strong"),K$o=o("decision_transformer"),eko=o(" \u2014 "),aX=a("a"),oko=o("DecisionTransformerModel"),rko=o(" (Decision Transformer model)"),tko=l(),X_=a("li"),D_e=a("strong"),ako=o("deformable_detr"),nko=o(" \u2014 "),nX=a("a"),sko=o("DeformableDetrModel"),lko=o(" (Deformable DETR model)"),iko=l(),z_=a("li"),G_e=a("strong"),dko=o("deit"),cko=o(" \u2014 "),sX=a("a"),mko=o("DeiTModel"),fko=o(" (DeiT model)"),gko=l(),Q_=a("li"),O_e=a("strong"),hko=o("detr"),uko=o(" \u2014 "),lX=a("a"),pko=o("DetrModel"),_ko=o(" (DETR model)"),bko=l(),W_=a("li"),V_e=a("strong"),vko=o("distilbert"),Fko=o(" \u2014 "),iX=a("a"),Tko=o("DistilBertModel"),Mko=o(" (DistilBERT model)"),Eko=l(),U_=a("li"),X_e=a("strong"),Cko=o("donut-swin"),wko=o(" \u2014 "),dX=a("a"),Ako=o("DonutSwinModel"),Lko=o(" (DonutSwin model)"),yko=l(),H_=a("li"),z_e=a("strong"),xko=o("dpr"),$ko=o(" \u2014 "),cX=a("a"),kko=o("DPRQuestionEncoder"),Sko=o(" (DPR model)"),Rko=l(),J_=a("li"),Q_e=a("strong"),Pko=o("dpt"),Bko=o(" \u2014 "),mX=a("a"),Iko=o("DPTModel"),Nko=o(" (DPT model)"),qko=l(),Y_=a("li"),W_e=a("strong"),jko=o("electra"),Dko=o(" \u2014 "),fX=a("a"),Gko=o("ElectraModel"),Oko=o(" (ELECTRA model)"),Vko=l(),Z_=a("li"),U_e=a("strong"),Xko=o("ernie"),zko=o(" \u2014 "),gX=a("a"),Qko=o("ErnieModel"),Wko=o(" (ERNIE model)"),Uko=l(),K_=a("li"),H_e=a("strong"),Hko=o("esm"),Jko=o(" \u2014 "),hX=a("a"),Yko=o("EsmModel"),Zko=o(" (ESM model)"),Kko=l(),e1=a("li"),J_e=a("strong"),eSo=o("flaubert"),oSo=o(" \u2014 "),uX=a("a"),rSo=o("FlaubertModel"),tSo=o(" (FlauBERT model)"),aSo=l(),o1=a("li"),Y_e=a("strong"),nSo=o("flava"),sSo=o(" \u2014 "),pX=a("a"),lSo=o("FlavaModel"),iSo=o(" (FLAVA model)"),dSo=l(),r1=a("li"),Z_e=a("strong"),cSo=o("fnet"),mSo=o(" \u2014 "),_X=a("a"),fSo=o("FNetModel"),gSo=o(" (FNet model)"),hSo=l(),t1=a("li"),K_e=a("strong"),uSo=o("fsmt"),pSo=o(" \u2014 "),bX=a("a"),_So=o("FSMTModel"),bSo=o(" (FairSeq Machine-Translation model)"),vSo=l(),Ml=a("li"),e1e=a("strong"),FSo=o("funnel"),TSo=o(" \u2014 "),vX=a("a"),MSo=o("FunnelModel"),ESo=o(" or "),FX=a("a"),CSo=o("FunnelBaseModel"),wSo=o(" (Funnel Transformer model)"),ASo=l(),a1=a("li"),o1e=a("strong"),LSo=o("glpn"),ySo=o(" \u2014 "),TX=a("a"),xSo=o("GLPNModel"),$So=o(" (GLPN model)"),kSo=l(),n1=a("li"),r1e=a("strong"),SSo=o("gpt2"),RSo=o(" \u2014 "),MX=a("a"),PSo=o("GPT2Model"),BSo=o(" (OpenAI GPT-2 model)"),ISo=l(),s1=a("li"),t1e=a("strong"),NSo=o("gpt_neo"),qSo=o(" \u2014 "),EX=a("a"),jSo=o("GPTNeoModel"),DSo=o(" (GPT Neo model)"),GSo=l(),l1=a("li"),a1e=a("strong"),OSo=o("gpt_neox"),VSo=o(" \u2014 "),CX=a("a"),XSo=o("GPTNeoXModel"),zSo=o(" (GPT NeoX model)"),QSo=l(),i1=a("li"),n1e=a("strong"),WSo=o("gpt_neox_japanese"),USo=o(" \u2014 "),wX=a("a"),HSo=o("GPTNeoXJapaneseModel"),JSo=o(" (GPT NeoX Japanese model)"),YSo=l(),d1=a("li"),s1e=a("strong"),ZSo=o("gptj"),KSo=o(" \u2014 "),AX=a("a"),eRo=o("GPTJModel"),oRo=o(" (GPT-J model)"),rRo=l(),c1=a("li"),l1e=a("strong"),tRo=o("groupvit"),aRo=o(" \u2014 "),LX=a("a"),nRo=o("GroupViTModel"),sRo=o(" (GroupViT model)"),lRo=l(),m1=a("li"),i1e=a("strong"),iRo=o("hubert"),dRo=o(" \u2014 "),yX=a("a"),cRo=o("HubertModel"),mRo=o(" (Hubert model)"),fRo=l(),f1=a("li"),d1e=a("strong"),gRo=o("ibert"),hRo=o(" \u2014 "),xX=a("a"),uRo=o("IBertModel"),pRo=o(" (I-BERT model)"),_Ro=l(),g1=a("li"),c1e=a("strong"),bRo=o("imagegpt"),vRo=o(" \u2014 "),$X=a("a"),FRo=o("ImageGPTModel"),TRo=o(" (ImageGPT model)"),MRo=l(),h1=a("li"),m1e=a("strong"),ERo=o("layoutlm"),CRo=o(" \u2014 "),kX=a("a"),wRo=o("LayoutLMModel"),ARo=o(" (LayoutLM model)"),LRo=l(),u1=a("li"),f1e=a("strong"),yRo=o("layoutlmv2"),xRo=o(" \u2014 "),SX=a("a"),$Ro=o("LayoutLMv2Model"),kRo=o(" (LayoutLMv2 model)"),SRo=l(),p1=a("li"),g1e=a("strong"),RRo=o("layoutlmv3"),PRo=o(" \u2014 "),RX=a("a"),BRo=o("LayoutLMv3Model"),IRo=o(" (LayoutLMv3 model)"),NRo=l(),_1=a("li"),h1e=a("strong"),qRo=o("led"),jRo=o(" \u2014 "),PX=a("a"),DRo=o("LEDModel"),GRo=o(" (LED model)"),ORo=l(),b1=a("li"),u1e=a("strong"),VRo=o("levit"),XRo=o(" \u2014 "),BX=a("a"),zRo=o("LevitModel"),QRo=o(" (LeViT model)"),WRo=l(),v1=a("li"),p1e=a("strong"),URo=o("longformer"),HRo=o(" \u2014 "),IX=a("a"),JRo=o("LongformerModel"),YRo=o(" (Longformer model)"),ZRo=l(),F1=a("li"),_1e=a("strong"),KRo=o("longt5"),ePo=o(" \u2014 "),NX=a("a"),oPo=o("LongT5Model"),rPo=o(" (LongT5 model)"),tPo=l(),T1=a("li"),b1e=a("strong"),aPo=o("luke"),nPo=o(" \u2014 "),qX=a("a"),sPo=o("LukeModel"),lPo=o(" (LUKE model)"),iPo=l(),M1=a("li"),v1e=a("strong"),dPo=o("lxmert"),cPo=o(" \u2014 "),jX=a("a"),mPo=o("LxmertModel"),fPo=o(" (LXMERT model)"),gPo=l(),E1=a("li"),F1e=a("strong"),hPo=o("m2m_100"),uPo=o(" \u2014 "),DX=a("a"),pPo=o("M2M100Model"),_Po=o(" (M2M100 model)"),bPo=l(),C1=a("li"),T1e=a("strong"),vPo=o("marian"),FPo=o(" \u2014 "),GX=a("a"),TPo=o("MarianModel"),MPo=o(" (Marian model)"),EPo=l(),w1=a("li"),M1e=a("strong"),CPo=o("markuplm"),wPo=o(" \u2014 "),OX=a("a"),APo=o("MarkupLMModel"),LPo=o(" (MarkupLM model)"),yPo=l(),A1=a("li"),E1e=a("strong"),xPo=o("maskformer"),$Po=o(" \u2014 "),VX=a("a"),kPo=o("MaskFormerModel"),SPo=o(" (MaskFormer model)"),RPo=l(),L1=a("li"),C1e=a("strong"),PPo=o("mbart"),BPo=o(" \u2014 "),XX=a("a"),IPo=o("MBartModel"),NPo=o(" (mBART model)"),qPo=l(),y1=a("li"),w1e=a("strong"),jPo=o("mctct"),DPo=o(" \u2014 "),zX=a("a"),GPo=o("MCTCTModel"),OPo=o(" (M-CTC-T model)"),VPo=l(),x1=a("li"),A1e=a("strong"),XPo=o("megatron-bert"),zPo=o(" \u2014 "),QX=a("a"),QPo=o("MegatronBertModel"),WPo=o(" (Megatron-BERT model)"),UPo=l(),$1=a("li"),L1e=a("strong"),HPo=o("mobilebert"),JPo=o(" \u2014 "),WX=a("a"),YPo=o("MobileBertModel"),ZPo=o(" (MobileBERT model)"),KPo=l(),k1=a("li"),y1e=a("strong"),eBo=o("mobilevit"),oBo=o(" \u2014 "),UX=a("a"),rBo=o("MobileViTModel"),tBo=o(" (MobileViT model)"),aBo=l(),S1=a("li"),x1e=a("strong"),nBo=o("mpnet"),sBo=o(" \u2014 "),HX=a("a"),lBo=o("MPNetModel"),iBo=o(" (MPNet model)"),dBo=l(),R1=a("li"),$1e=a("strong"),cBo=o("mt5"),mBo=o(" \u2014 "),JX=a("a"),fBo=o("MT5Model"),gBo=o(" (MT5 model)"),hBo=l(),P1=a("li"),k1e=a("strong"),uBo=o("mvp"),pBo=o(" \u2014 "),YX=a("a"),_Bo=o("MvpModel"),bBo=o(" (MVP model)"),vBo=l(),B1=a("li"),S1e=a("strong"),FBo=o("nezha"),TBo=o(" \u2014 "),ZX=a("a"),MBo=o("NezhaModel"),EBo=o(" (Nezha model)"),CBo=l(),I1=a("li"),R1e=a("strong"),wBo=o("nllb"),ABo=o(" \u2014 "),KX=a("a"),LBo=o("M2M100Model"),yBo=o(" (NLLB model)"),xBo=l(),N1=a("li"),P1e=a("strong"),$Bo=o("nystromformer"),kBo=o(" \u2014 "),ez=a("a"),SBo=o("NystromformerModel"),RBo=o(" (Nystr\xF6mformer model)"),PBo=l(),q1=a("li"),B1e=a("strong"),BBo=o("openai-gpt"),IBo=o(" \u2014 "),oz=a("a"),NBo=o("OpenAIGPTModel"),qBo=o(" (OpenAI GPT model)"),jBo=l(),j1=a("li"),I1e=a("strong"),DBo=o("opt"),GBo=o(" \u2014 "),rz=a("a"),OBo=o("OPTModel"),VBo=o(" (OPT model)"),XBo=l(),D1=a("li"),N1e=a("strong"),zBo=o("owlvit"),QBo=o(" \u2014 "),tz=a("a"),WBo=o("OwlViTModel"),UBo=o(" (OWL-ViT model)"),HBo=l(),G1=a("li"),q1e=a("strong"),JBo=o("pegasus"),YBo=o(" \u2014 "),az=a("a"),ZBo=o("PegasusModel"),KBo=o(" (Pegasus model)"),eIo=l(),O1=a("li"),j1e=a("strong"),oIo=o("pegasus_x"),rIo=o(" \u2014 "),nz=a("a"),tIo=o("PegasusXModel"),aIo=o(" (PEGASUS-X model)"),nIo=l(),V1=a("li"),D1e=a("strong"),sIo=o("perceiver"),lIo=o(" \u2014 "),sz=a("a"),iIo=o("PerceiverModel"),dIo=o(" (Perceiver model)"),cIo=l(),X1=a("li"),G1e=a("strong"),mIo=o("plbart"),fIo=o(" \u2014 "),lz=a("a"),gIo=o("PLBartModel"),hIo=o(" (PLBart model)"),uIo=l(),z1=a("li"),O1e=a("strong"),pIo=o("poolformer"),_Io=o(" \u2014 "),iz=a("a"),bIo=o("PoolFormerModel"),vIo=o(" (PoolFormer model)"),FIo=l(),Q1=a("li"),V1e=a("strong"),TIo=o("prophetnet"),MIo=o(" \u2014 "),dz=a("a"),EIo=o("ProphetNetModel"),CIo=o(" (ProphetNet model)"),wIo=l(),W1=a("li"),X1e=a("strong"),AIo=o("qdqbert"),LIo=o(" \u2014 "),cz=a("a"),yIo=o("QDQBertModel"),xIo=o(" (QDQBert model)"),$Io=l(),U1=a("li"),z1e=a("strong"),kIo=o("reformer"),SIo=o(" \u2014 "),mz=a("a"),RIo=o("ReformerModel"),PIo=o(" (Reformer model)"),BIo=l(),H1=a("li"),Q1e=a("strong"),IIo=o("regnet"),NIo=o(" \u2014 "),fz=a("a"),qIo=o("RegNetModel"),jIo=o(" (RegNet model)"),DIo=l(),J1=a("li"),W1e=a("strong"),GIo=o("rembert"),OIo=o(" \u2014 "),gz=a("a"),VIo=o("RemBertModel"),XIo=o(" (RemBERT model)"),zIo=l(),Y1=a("li"),U1e=a("strong"),QIo=o("resnet"),WIo=o(" \u2014 "),hz=a("a"),UIo=o("ResNetModel"),HIo=o(" (ResNet model)"),JIo=l(),Z1=a("li"),H1e=a("strong"),YIo=o("retribert"),ZIo=o(" \u2014 "),uz=a("a"),KIo=o("RetriBertModel"),eNo=o(" (RetriBERT model)"),oNo=l(),K1=a("li"),J1e=a("strong"),rNo=o("roberta"),tNo=o(" \u2014 "),pz=a("a"),aNo=o("RobertaModel"),nNo=o(" (RoBERTa model)"),sNo=l(),e2=a("li"),Y1e=a("strong"),lNo=o("roformer"),iNo=o(" \u2014 "),_z=a("a"),dNo=o("RoFormerModel"),cNo=o(" (RoFormer model)"),mNo=l(),o2=a("li"),Z1e=a("strong"),fNo=o("segformer"),gNo=o(" \u2014 "),bz=a("a"),hNo=o("SegformerModel"),uNo=o(" (SegFormer model)"),pNo=l(),r2=a("li"),K1e=a("strong"),_No=o("sew"),bNo=o(" \u2014 "),vz=a("a"),vNo=o("SEWModel"),FNo=o(" (SEW model)"),TNo=l(),t2=a("li"),e2e=a("strong"),MNo=o("sew-d"),ENo=o(" \u2014 "),Fz=a("a"),CNo=o("SEWDModel"),wNo=o(" (SEW-D model)"),ANo=l(),a2=a("li"),o2e=a("strong"),LNo=o("speech_to_text"),yNo=o(" \u2014 "),Tz=a("a"),xNo=o("Speech2TextModel"),$No=o(" (Speech2Text model)"),kNo=l(),n2=a("li"),r2e=a("strong"),SNo=o("splinter"),RNo=o(" \u2014 "),Mz=a("a"),PNo=o("SplinterModel"),BNo=o(" (Splinter model)"),INo=l(),s2=a("li"),t2e=a("strong"),NNo=o("squeezebert"),qNo=o(" \u2014 "),Ez=a("a"),jNo=o("SqueezeBertModel"),DNo=o(" (SqueezeBERT model)"),GNo=l(),l2=a("li"),a2e=a("strong"),ONo=o("swin"),VNo=o(" \u2014 "),Cz=a("a"),XNo=o("SwinModel"),zNo=o(" (Swin Transformer model)"),QNo=l(),i2=a("li"),n2e=a("strong"),WNo=o("swinv2"),UNo=o(" \u2014 "),wz=a("a"),HNo=o("Swinv2Model"),JNo=o(" (Swin Transformer V2 model)"),YNo=l(),d2=a("li"),s2e=a("strong"),ZNo=o("t5"),KNo=o(" \u2014 "),Az=a("a"),eqo=o("T5Model"),oqo=o(" (T5 model)"),rqo=l(),c2=a("li"),l2e=a("strong"),tqo=o("tapas"),aqo=o(" \u2014 "),Lz=a("a"),nqo=o("TapasModel"),sqo=o(" (TAPAS model)"),lqo=l(),m2=a("li"),i2e=a("strong"),iqo=o("time_series_transformer"),dqo=o(" \u2014 "),yz=a("a"),cqo=o("TimeSeriesTransformerModel"),mqo=o(" (Time Series Transformer model)"),fqo=l(),f2=a("li"),d2e=a("strong"),gqo=o("trajectory_transformer"),hqo=o(" \u2014 "),xz=a("a"),uqo=o("TrajectoryTransformerModel"),pqo=o(" (Trajectory Transformer model)"),_qo=l(),g2=a("li"),c2e=a("strong"),bqo=o("transfo-xl"),vqo=o(" \u2014 "),$z=a("a"),Fqo=o("TransfoXLModel"),Tqo=o(" (Transformer-XL model)"),Mqo=l(),h2=a("li"),m2e=a("strong"),Eqo=o("unispeech"),Cqo=o(" \u2014 "),kz=a("a"),wqo=o("UniSpeechModel"),Aqo=o(" (UniSpeech model)"),Lqo=l(),u2=a("li"),f2e=a("strong"),yqo=o("unispeech-sat"),xqo=o(" \u2014 "),Sz=a("a"),$qo=o("UniSpeechSatModel"),kqo=o(" (UniSpeechSat model)"),Sqo=l(),p2=a("li"),g2e=a("strong"),Rqo=o("van"),Pqo=o(" \u2014 "),Rz=a("a"),Bqo=o("VanModel"),Iqo=o(" (VAN model)"),Nqo=l(),_2=a("li"),h2e=a("strong"),qqo=o("videomae"),jqo=o(" \u2014 "),Pz=a("a"),Dqo=o("VideoMAEModel"),Gqo=o(" (VideoMAE model)"),Oqo=l(),b2=a("li"),u2e=a("strong"),Vqo=o("vilt"),Xqo=o(" \u2014 "),Bz=a("a"),zqo=o("ViltModel"),Qqo=o(" (ViLT model)"),Wqo=l(),v2=a("li"),p2e=a("strong"),Uqo=o("vision-text-dual-encoder"),Hqo=o(" \u2014 "),Iz=a("a"),Jqo=o("VisionTextDualEncoderModel"),Yqo=o(" (VisionTextDualEncoder model)"),Zqo=l(),F2=a("li"),_2e=a("strong"),Kqo=o("visual_bert"),ejo=o(" \u2014 "),Nz=a("a"),ojo=o("VisualBertModel"),rjo=o(" (VisualBERT model)"),tjo=l(),T2=a("li"),b2e=a("strong"),ajo=o("vit"),njo=o(" \u2014 "),qz=a("a"),sjo=o("ViTModel"),ljo=o(" (ViT model)"),ijo=l(),M2=a("li"),v2e=a("strong"),djo=o("vit_mae"),cjo=o(" \u2014 "),jz=a("a"),mjo=o("ViTMAEModel"),fjo=o(" (ViTMAE model)"),gjo=l(),E2=a("li"),F2e=a("strong"),hjo=o("vit_msn"),ujo=o(" \u2014 "),Dz=a("a"),pjo=o("ViTMSNModel"),_jo=o(" (ViTMSN model)"),bjo=l(),C2=a("li"),T2e=a("strong"),vjo=o("wav2vec2"),Fjo=o(" \u2014 "),Gz=a("a"),Tjo=o("Wav2Vec2Model"),Mjo=o(" (Wav2Vec2 model)"),Ejo=l(),w2=a("li"),M2e=a("strong"),Cjo=o("wav2vec2-conformer"),wjo=o(" \u2014 "),Oz=a("a"),Ajo=o("Wav2Vec2ConformerModel"),Ljo=o(" (Wav2Vec2-Conformer model)"),yjo=l(),A2=a("li"),E2e=a("strong"),xjo=o("wavlm"),$jo=o(" \u2014 "),Vz=a("a"),kjo=o("WavLMModel"),Sjo=o(" (WavLM model)"),Rjo=l(),L2=a("li"),C2e=a("strong"),Pjo=o("whisper"),Bjo=o(" \u2014 "),Xz=a("a"),Ijo=o("WhisperModel"),Njo=o(" (Whisper model)"),qjo=l(),y2=a("li"),w2e=a("strong"),jjo=o("xclip"),Djo=o(" \u2014 "),zz=a("a"),Gjo=o("XCLIPModel"),Ojo=o(" (X-CLIP model)"),Vjo=l(),x2=a("li"),A2e=a("strong"),Xjo=o("xglm"),zjo=o(" \u2014 "),Qz=a("a"),Qjo=o("XGLMModel"),Wjo=o(" (XGLM model)"),Ujo=l(),$2=a("li"),L2e=a("strong"),Hjo=o("xlm"),Jjo=o(" \u2014 "),Wz=a("a"),Yjo=o("XLMModel"),Zjo=o(" (XLM model)"),Kjo=l(),k2=a("li"),y2e=a("strong"),eDo=o("xlm-prophetnet"),oDo=o(" \u2014 "),Uz=a("a"),rDo=o("XLMProphetNetModel"),tDo=o(" (XLM-ProphetNet model)"),aDo=l(),S2=a("li"),x2e=a("strong"),nDo=o("xlm-roberta"),sDo=o(" \u2014 "),Hz=a("a"),lDo=o("XLMRobertaModel"),iDo=o(" (XLM-RoBERTa model)"),dDo=l(),R2=a("li"),$2e=a("strong"),cDo=o("xlm-roberta-xl"),mDo=o(" \u2014 "),Jz=a("a"),fDo=o("XLMRobertaXLModel"),gDo=o(" (XLM-RoBERTa-XL model)"),hDo=l(),P2=a("li"),k2e=a("strong"),uDo=o("xlnet"),pDo=o(" \u2014 "),Yz=a("a"),_Do=o("XLNetModel"),bDo=o(" (XLNet model)"),vDo=l(),B2=a("li"),S2e=a("strong"),FDo=o("yolos"),TDo=o(" \u2014 "),Zz=a("a"),MDo=o("YolosModel"),EDo=o(" (YOLOS model)"),CDo=l(),I2=a("li"),R2e=a("strong"),wDo=o("yoso"),ADo=o(" \u2014 "),Kz=a("a"),LDo=o("YosoModel"),yDo=o(" (YOSO model)"),xDo=l(),N2=a("p"),$Do=o("The model is set in evaluation mode by default using "),P2e=a("code"),kDo=o("model.eval()"),SDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),RDo=o("model.train()"),PDo=l(),F(q2.$$.fragment),koo=l(),Ad=a("h2"),j2=a("a"),I2e=a("span"),F(n$.$$.fragment),BDo=l(),N2e=a("span"),IDo=o("AutoModelForPreTraining"),Soo=l(),Io=a("div"),F(s$.$$.fragment),NDo=l(),Ld=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eQ=a("a"),jDo=o("from_pretrained()"),DDo=o(" class method or the "),oQ=a("a"),GDo=o("from_config()"),ODo=o(` class
method.`),VDo=l(),l$=a("p"),XDo=o("This class cannot be instantiated directly using "),q2e=a("code"),zDo=o("__init__()"),QDo=o(" (throws an error)."),WDo=l(),Ft=a("div"),F(i$.$$.fragment),UDo=l(),j2e=a("p"),HDo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JDo=l(),yd=a("p"),YDo=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),ZDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),eGo=o("from_pretrained()"),oGo=o(" to load the model weights."),rGo=l(),F(D2.$$.fragment),tGo=l(),eo=a("div"),F(d$.$$.fragment),aGo=l(),G2e=a("p"),nGo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sGo=l(),on=a("p"),lGo=o("The model class to instantiate is selected based on the "),O2e=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),cGo=o("pretrained_model_name_or_path"),mGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),fGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),G=a("ul"),G2=a("li"),z2e=a("strong"),uGo=o("albert"),pGo=o(" \u2014 "),tQ=a("a"),_Go=o("AlbertForPreTraining"),bGo=o(" (ALBERT model)"),vGo=l(),O2=a("li"),Q2e=a("strong"),FGo=o("bart"),TGo=o(" \u2014 "),aQ=a("a"),MGo=o("BartForConditionalGeneration"),EGo=o(" (BART model)"),CGo=l(),V2=a("li"),W2e=a("strong"),wGo=o("bert"),AGo=o(" \u2014 "),nQ=a("a"),LGo=o("BertForPreTraining"),yGo=o(" (BERT model)"),xGo=l(),X2=a("li"),U2e=a("strong"),$Go=o("big_bird"),kGo=o(" \u2014 "),sQ=a("a"),SGo=o("BigBirdForPreTraining"),RGo=o(" (BigBird model)"),PGo=l(),z2=a("li"),H2e=a("strong"),BGo=o("bloom"),IGo=o(" \u2014 "),lQ=a("a"),NGo=o("BloomForCausalLM"),qGo=o(" (BLOOM model)"),jGo=l(),Q2=a("li"),J2e=a("strong"),DGo=o("camembert"),GGo=o(" \u2014 "),iQ=a("a"),OGo=o("CamembertForMaskedLM"),VGo=o(" (CamemBERT model)"),XGo=l(),W2=a("li"),Y2e=a("strong"),zGo=o("ctrl"),QGo=o(" \u2014 "),dQ=a("a"),WGo=o("CTRLLMHeadModel"),UGo=o(" (CTRL model)"),HGo=l(),U2=a("li"),Z2e=a("strong"),JGo=o("data2vec-text"),YGo=o(" \u2014 "),cQ=a("a"),ZGo=o("Data2VecTextForMaskedLM"),KGo=o(" (Data2VecText model)"),eOo=l(),H2=a("li"),K2e=a("strong"),oOo=o("deberta"),rOo=o(" \u2014 "),mQ=a("a"),tOo=o("DebertaForMaskedLM"),aOo=o(" (DeBERTa model)"),nOo=l(),J2=a("li"),ebe=a("strong"),sOo=o("deberta-v2"),lOo=o(" \u2014 "),fQ=a("a"),iOo=o("DebertaV2ForMaskedLM"),dOo=o(" (DeBERTa-v2 model)"),cOo=l(),Y2=a("li"),obe=a("strong"),mOo=o("distilbert"),fOo=o(" \u2014 "),gQ=a("a"),gOo=o("DistilBertForMaskedLM"),hOo=o(" (DistilBERT model)"),uOo=l(),Z2=a("li"),rbe=a("strong"),pOo=o("electra"),_Oo=o(" \u2014 "),hQ=a("a"),bOo=o("ElectraForPreTraining"),vOo=o(" (ELECTRA model)"),FOo=l(),K2=a("li"),tbe=a("strong"),TOo=o("ernie"),MOo=o(" \u2014 "),uQ=a("a"),EOo=o("ErnieForPreTraining"),COo=o(" (ERNIE model)"),wOo=l(),eb=a("li"),abe=a("strong"),AOo=o("flaubert"),LOo=o(" \u2014 "),pQ=a("a"),yOo=o("FlaubertWithLMHeadModel"),xOo=o(" (FlauBERT model)"),$Oo=l(),ob=a("li"),nbe=a("strong"),kOo=o("flava"),SOo=o(" \u2014 "),_Q=a("a"),ROo=o("FlavaForPreTraining"),POo=o(" (FLAVA model)"),BOo=l(),rb=a("li"),sbe=a("strong"),IOo=o("fnet"),NOo=o(" \u2014 "),bQ=a("a"),qOo=o("FNetForPreTraining"),jOo=o(" (FNet model)"),DOo=l(),tb=a("li"),lbe=a("strong"),GOo=o("fsmt"),OOo=o(" \u2014 "),vQ=a("a"),VOo=o("FSMTForConditionalGeneration"),XOo=o(" (FairSeq Machine-Translation model)"),zOo=l(),ab=a("li"),ibe=a("strong"),QOo=o("funnel"),WOo=o(" \u2014 "),FQ=a("a"),UOo=o("FunnelForPreTraining"),HOo=o(" (Funnel Transformer model)"),JOo=l(),nb=a("li"),dbe=a("strong"),YOo=o("gpt2"),ZOo=o(" \u2014 "),TQ=a("a"),KOo=o("GPT2LMHeadModel"),eVo=o(" (OpenAI GPT-2 model)"),oVo=l(),sb=a("li"),cbe=a("strong"),rVo=o("ibert"),tVo=o(" \u2014 "),MQ=a("a"),aVo=o("IBertForMaskedLM"),nVo=o(" (I-BERT model)"),sVo=l(),lb=a("li"),mbe=a("strong"),lVo=o("layoutlm"),iVo=o(" \u2014 "),EQ=a("a"),dVo=o("LayoutLMForMaskedLM"),cVo=o(" (LayoutLM model)"),mVo=l(),ib=a("li"),fbe=a("strong"),fVo=o("longformer"),gVo=o(" \u2014 "),CQ=a("a"),hVo=o("LongformerForMaskedLM"),uVo=o(" (Longformer model)"),pVo=l(),db=a("li"),gbe=a("strong"),_Vo=o("luke"),bVo=o(" \u2014 "),wQ=a("a"),vVo=o("LukeForMaskedLM"),FVo=o(" (LUKE model)"),TVo=l(),cb=a("li"),hbe=a("strong"),MVo=o("lxmert"),EVo=o(" \u2014 "),AQ=a("a"),CVo=o("LxmertForPreTraining"),wVo=o(" (LXMERT model)"),AVo=l(),mb=a("li"),ube=a("strong"),LVo=o("megatron-bert"),yVo=o(" \u2014 "),LQ=a("a"),xVo=o("MegatronBertForPreTraining"),$Vo=o(" (Megatron-BERT model)"),kVo=l(),fb=a("li"),pbe=a("strong"),SVo=o("mobilebert"),RVo=o(" \u2014 "),yQ=a("a"),PVo=o("MobileBertForPreTraining"),BVo=o(" (MobileBERT model)"),IVo=l(),gb=a("li"),_be=a("strong"),NVo=o("mpnet"),qVo=o(" \u2014 "),xQ=a("a"),jVo=o("MPNetForMaskedLM"),DVo=o(" (MPNet model)"),GVo=l(),hb=a("li"),bbe=a("strong"),OVo=o("mvp"),VVo=o(" \u2014 "),$Q=a("a"),XVo=o("MvpForConditionalGeneration"),zVo=o(" (MVP model)"),QVo=l(),ub=a("li"),vbe=a("strong"),WVo=o("nezha"),UVo=o(" \u2014 "),kQ=a("a"),HVo=o("NezhaForPreTraining"),JVo=o(" (Nezha model)"),YVo=l(),pb=a("li"),Fbe=a("strong"),ZVo=o("openai-gpt"),KVo=o(" \u2014 "),SQ=a("a"),eXo=o("OpenAIGPTLMHeadModel"),oXo=o(" (OpenAI GPT model)"),rXo=l(),_b=a("li"),Tbe=a("strong"),tXo=o("retribert"),aXo=o(" \u2014 "),RQ=a("a"),nXo=o("RetriBertModel"),sXo=o(" (RetriBERT model)"),lXo=l(),bb=a("li"),Mbe=a("strong"),iXo=o("roberta"),dXo=o(" \u2014 "),PQ=a("a"),cXo=o("RobertaForMaskedLM"),mXo=o(" (RoBERTa model)"),fXo=l(),vb=a("li"),Ebe=a("strong"),gXo=o("splinter"),hXo=o(" \u2014 "),BQ=a("a"),uXo=o("SplinterForPreTraining"),pXo=o(" (Splinter model)"),_Xo=l(),Fb=a("li"),Cbe=a("strong"),bXo=o("squeezebert"),vXo=o(" \u2014 "),IQ=a("a"),FXo=o("SqueezeBertForMaskedLM"),TXo=o(" (SqueezeBERT model)"),MXo=l(),Tb=a("li"),wbe=a("strong"),EXo=o("t5"),CXo=o(" \u2014 "),NQ=a("a"),wXo=o("T5ForConditionalGeneration"),AXo=o(" (T5 model)"),LXo=l(),Mb=a("li"),Abe=a("strong"),yXo=o("tapas"),xXo=o(" \u2014 "),qQ=a("a"),$Xo=o("TapasForMaskedLM"),kXo=o(" (TAPAS model)"),SXo=l(),Eb=a("li"),Lbe=a("strong"),RXo=o("transfo-xl"),PXo=o(" \u2014 "),jQ=a("a"),BXo=o("TransfoXLLMHeadModel"),IXo=o(" (Transformer-XL model)"),NXo=l(),Cb=a("li"),ybe=a("strong"),qXo=o("unispeech"),jXo=o(" \u2014 "),DQ=a("a"),DXo=o("UniSpeechForPreTraining"),GXo=o(" (UniSpeech model)"),OXo=l(),wb=a("li"),xbe=a("strong"),VXo=o("unispeech-sat"),XXo=o(" \u2014 "),GQ=a("a"),zXo=o("UniSpeechSatForPreTraining"),QXo=o(" (UniSpeechSat model)"),WXo=l(),Ab=a("li"),$be=a("strong"),UXo=o("videomae"),HXo=o(" \u2014 "),OQ=a("a"),JXo=o("VideoMAEForPreTraining"),YXo=o(" (VideoMAE model)"),ZXo=l(),Lb=a("li"),kbe=a("strong"),KXo=o("visual_bert"),ezo=o(" \u2014 "),VQ=a("a"),ozo=o("VisualBertForPreTraining"),rzo=o(" (VisualBERT model)"),tzo=l(),yb=a("li"),Sbe=a("strong"),azo=o("vit_mae"),nzo=o(" \u2014 "),XQ=a("a"),szo=o("ViTMAEForPreTraining"),lzo=o(" (ViTMAE model)"),izo=l(),xb=a("li"),Rbe=a("strong"),dzo=o("wav2vec2"),czo=o(" \u2014 "),zQ=a("a"),mzo=o("Wav2Vec2ForPreTraining"),fzo=o(" (Wav2Vec2 model)"),gzo=l(),$b=a("li"),Pbe=a("strong"),hzo=o("wav2vec2-conformer"),uzo=o(" \u2014 "),QQ=a("a"),pzo=o("Wav2Vec2ConformerForPreTraining"),_zo=o(" (Wav2Vec2-Conformer model)"),bzo=l(),kb=a("li"),Bbe=a("strong"),vzo=o("xlm"),Fzo=o(" \u2014 "),WQ=a("a"),Tzo=o("XLMWithLMHeadModel"),Mzo=o(" (XLM model)"),Ezo=l(),Sb=a("li"),Ibe=a("strong"),Czo=o("xlm-roberta"),wzo=o(" \u2014 "),UQ=a("a"),Azo=o("XLMRobertaForMaskedLM"),Lzo=o(" (XLM-RoBERTa model)"),yzo=l(),Rb=a("li"),Nbe=a("strong"),xzo=o("xlm-roberta-xl"),$zo=o(" \u2014 "),HQ=a("a"),kzo=o("XLMRobertaXLForMaskedLM"),Szo=o(" (XLM-RoBERTa-XL model)"),Rzo=l(),Pb=a("li"),qbe=a("strong"),Pzo=o("xlnet"),Bzo=o(" \u2014 "),JQ=a("a"),Izo=o("XLNetLMHeadModel"),Nzo=o(" (XLNet model)"),qzo=l(),Bb=a("p"),jzo=o("The model is set in evaluation mode by default using "),jbe=a("code"),Dzo=o("model.eval()"),Gzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),Ozo=o("model.train()"),Vzo=l(),F(Ib.$$.fragment),Roo=l(),xd=a("h2"),Nb=a("a"),Gbe=a("span"),F(c$.$$.fragment),Xzo=l(),Obe=a("span"),zzo=o("AutoModelForCausalLM"),Poo=l(),No=a("div"),F(m$.$$.fragment),Qzo=l(),$d=a("p"),Wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=a("a"),Uzo=o("from_pretrained()"),Hzo=o(" class method or the "),ZQ=a("a"),Jzo=o("from_config()"),Yzo=o(` class
method.`),Zzo=l(),f$=a("p"),Kzo=o("This class cannot be instantiated directly using "),Vbe=a("code"),eQo=o("__init__()"),oQo=o(" (throws an error)."),rQo=l(),Tt=a("div"),F(g$.$$.fragment),tQo=l(),Xbe=a("p"),aQo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nQo=l(),kd=a("p"),sQo=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),lQo=o("not"),iQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),dQo=o("from_pretrained()"),cQo=o(" to load the model weights."),mQo=l(),F(qb.$$.fragment),fQo=l(),oo=a("div"),F(h$.$$.fragment),gQo=l(),Qbe=a("p"),hQo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uQo=l(),rn=a("p"),pQo=o("The model class to instantiate is selected based on the "),Wbe=a("code"),_Qo=o("model_type"),bQo=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),vQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),TQo=o("pretrained_model_name_or_path"),MQo=o(":"),EQo=l(),Q=a("ul"),jb=a("li"),Jbe=a("strong"),CQo=o("bart"),wQo=o(" \u2014 "),eW=a("a"),AQo=o("BartForCausalLM"),LQo=o(" (BART model)"),yQo=l(),Db=a("li"),Ybe=a("strong"),xQo=o("bert"),$Qo=o(" \u2014 "),oW=a("a"),kQo=o("BertLMHeadModel"),SQo=o(" (BERT model)"),RQo=l(),Gb=a("li"),Zbe=a("strong"),PQo=o("bert-generation"),BQo=o(" \u2014 "),rW=a("a"),IQo=o("BertGenerationDecoder"),NQo=o(" (Bert Generation model)"),qQo=l(),Ob=a("li"),Kbe=a("strong"),jQo=o("big_bird"),DQo=o(" \u2014 "),tW=a("a"),GQo=o("BigBirdForCausalLM"),OQo=o(" (BigBird model)"),VQo=l(),Vb=a("li"),eve=a("strong"),XQo=o("bigbird_pegasus"),zQo=o(" \u2014 "),aW=a("a"),QQo=o("BigBirdPegasusForCausalLM"),WQo=o(" (BigBird-Pegasus model)"),UQo=l(),Xb=a("li"),ove=a("strong"),HQo=o("blenderbot"),JQo=o(" \u2014 "),nW=a("a"),YQo=o("BlenderbotForCausalLM"),ZQo=o(" (Blenderbot model)"),KQo=l(),zb=a("li"),rve=a("strong"),eWo=o("blenderbot-small"),oWo=o(" \u2014 "),sW=a("a"),rWo=o("BlenderbotSmallForCausalLM"),tWo=o(" (BlenderbotSmall model)"),aWo=l(),Qb=a("li"),tve=a("strong"),nWo=o("bloom"),sWo=o(" \u2014 "),lW=a("a"),lWo=o("BloomForCausalLM"),iWo=o(" (BLOOM model)"),dWo=l(),Wb=a("li"),ave=a("strong"),cWo=o("camembert"),mWo=o(" \u2014 "),iW=a("a"),fWo=o("CamembertForCausalLM"),gWo=o(" (CamemBERT model)"),hWo=l(),Ub=a("li"),nve=a("strong"),uWo=o("codegen"),pWo=o(" \u2014 "),dW=a("a"),_Wo=o("CodeGenForCausalLM"),bWo=o(" (CodeGen model)"),vWo=l(),Hb=a("li"),sve=a("strong"),FWo=o("ctrl"),TWo=o(" \u2014 "),cW=a("a"),MWo=o("CTRLLMHeadModel"),EWo=o(" (CTRL model)"),CWo=l(),Jb=a("li"),lve=a("strong"),wWo=o("data2vec-text"),AWo=o(" \u2014 "),mW=a("a"),LWo=o("Data2VecTextForCausalLM"),yWo=o(" (Data2VecText model)"),xWo=l(),Yb=a("li"),ive=a("strong"),$Wo=o("electra"),kWo=o(" \u2014 "),fW=a("a"),SWo=o("ElectraForCausalLM"),RWo=o(" (ELECTRA model)"),PWo=l(),Zb=a("li"),dve=a("strong"),BWo=o("ernie"),IWo=o(" \u2014 "),gW=a("a"),NWo=o("ErnieForCausalLM"),qWo=o(" (ERNIE model)"),jWo=l(),Kb=a("li"),cve=a("strong"),DWo=o("gpt2"),GWo=o(" \u2014 "),hW=a("a"),OWo=o("GPT2LMHeadModel"),VWo=o(" (OpenAI GPT-2 model)"),XWo=l(),ev=a("li"),mve=a("strong"),zWo=o("gpt_neo"),QWo=o(" \u2014 "),uW=a("a"),WWo=o("GPTNeoForCausalLM"),UWo=o(" (GPT Neo model)"),HWo=l(),ov=a("li"),fve=a("strong"),JWo=o("gpt_neox"),YWo=o(" \u2014 "),pW=a("a"),ZWo=o("GPTNeoXForCausalLM"),KWo=o(" (GPT NeoX model)"),eUo=l(),rv=a("li"),gve=a("strong"),oUo=o("gpt_neox_japanese"),rUo=o(" \u2014 "),_W=a("a"),tUo=o("GPTNeoXJapaneseForCausalLM"),aUo=o(" (GPT NeoX Japanese model)"),nUo=l(),tv=a("li"),hve=a("strong"),sUo=o("gptj"),lUo=o(" \u2014 "),bW=a("a"),iUo=o("GPTJForCausalLM"),dUo=o(" (GPT-J model)"),cUo=l(),av=a("li"),uve=a("strong"),mUo=o("marian"),fUo=o(" \u2014 "),vW=a("a"),gUo=o("MarianForCausalLM"),hUo=o(" (Marian model)"),uUo=l(),nv=a("li"),pve=a("strong"),pUo=o("mbart"),_Uo=o(" \u2014 "),FW=a("a"),bUo=o("MBartForCausalLM"),vUo=o(" (mBART model)"),FUo=l(),sv=a("li"),_ve=a("strong"),TUo=o("megatron-bert"),MUo=o(" \u2014 "),TW=a("a"),EUo=o("MegatronBertForCausalLM"),CUo=o(" (Megatron-BERT model)"),wUo=l(),lv=a("li"),bve=a("strong"),AUo=o("mvp"),LUo=o(" \u2014 "),MW=a("a"),yUo=o("MvpForCausalLM"),xUo=o(" (MVP model)"),$Uo=l(),iv=a("li"),vve=a("strong"),kUo=o("openai-gpt"),SUo=o(" \u2014 "),EW=a("a"),RUo=o("OpenAIGPTLMHeadModel"),PUo=o(" (OpenAI GPT model)"),BUo=l(),dv=a("li"),Fve=a("strong"),IUo=o("opt"),NUo=o(" \u2014 "),CW=a("a"),qUo=o("OPTForCausalLM"),jUo=o(" (OPT model)"),DUo=l(),cv=a("li"),Tve=a("strong"),GUo=o("pegasus"),OUo=o(" \u2014 "),wW=a("a"),VUo=o("PegasusForCausalLM"),XUo=o(" (Pegasus model)"),zUo=l(),mv=a("li"),Mve=a("strong"),QUo=o("plbart"),WUo=o(" \u2014 "),AW=a("a"),UUo=o("PLBartForCausalLM"),HUo=o(" (PLBart model)"),JUo=l(),fv=a("li"),Eve=a("strong"),YUo=o("prophetnet"),ZUo=o(" \u2014 "),LW=a("a"),KUo=o("ProphetNetForCausalLM"),eHo=o(" (ProphetNet model)"),oHo=l(),gv=a("li"),Cve=a("strong"),rHo=o("qdqbert"),tHo=o(" \u2014 "),yW=a("a"),aHo=o("QDQBertLMHeadModel"),nHo=o(" (QDQBert model)"),sHo=l(),hv=a("li"),wve=a("strong"),lHo=o("reformer"),iHo=o(" \u2014 "),xW=a("a"),dHo=o("ReformerModelWithLMHead"),cHo=o(" (Reformer model)"),mHo=l(),uv=a("li"),Ave=a("strong"),fHo=o("rembert"),gHo=o(" \u2014 "),$W=a("a"),hHo=o("RemBertForCausalLM"),uHo=o(" (RemBERT model)"),pHo=l(),pv=a("li"),Lve=a("strong"),_Ho=o("roberta"),bHo=o(" \u2014 "),kW=a("a"),vHo=o("RobertaForCausalLM"),FHo=o(" (RoBERTa model)"),THo=l(),_v=a("li"),yve=a("strong"),MHo=o("roformer"),EHo=o(" \u2014 "),SW=a("a"),CHo=o("RoFormerForCausalLM"),wHo=o(" (RoFormer model)"),AHo=l(),bv=a("li"),xve=a("strong"),LHo=o("speech_to_text_2"),yHo=o(" \u2014 "),RW=a("a"),xHo=o("Speech2Text2ForCausalLM"),$Ho=o(" (Speech2Text2 model)"),kHo=l(),vv=a("li"),$ve=a("strong"),SHo=o("transfo-xl"),RHo=o(" \u2014 "),PW=a("a"),PHo=o("TransfoXLLMHeadModel"),BHo=o(" (Transformer-XL model)"),IHo=l(),Fv=a("li"),kve=a("strong"),NHo=o("trocr"),qHo=o(" \u2014 "),BW=a("a"),jHo=o("TrOCRForCausalLM"),DHo=o(" (TrOCR model)"),GHo=l(),Tv=a("li"),Sve=a("strong"),OHo=o("xglm"),VHo=o(" \u2014 "),IW=a("a"),XHo=o("XGLMForCausalLM"),zHo=o(" (XGLM model)"),QHo=l(),Mv=a("li"),Rve=a("strong"),WHo=o("xlm"),UHo=o(" \u2014 "),NW=a("a"),HHo=o("XLMWithLMHeadModel"),JHo=o(" (XLM model)"),YHo=l(),Ev=a("li"),Pve=a("strong"),ZHo=o("xlm-prophetnet"),KHo=o(" \u2014 "),qW=a("a"),eJo=o("XLMProphetNetForCausalLM"),oJo=o(" (XLM-ProphetNet model)"),rJo=l(),Cv=a("li"),Bve=a("strong"),tJo=o("xlm-roberta"),aJo=o(" \u2014 "),jW=a("a"),nJo=o("XLMRobertaForCausalLM"),sJo=o(" (XLM-RoBERTa model)"),lJo=l(),wv=a("li"),Ive=a("strong"),iJo=o("xlm-roberta-xl"),dJo=o(" \u2014 "),DW=a("a"),cJo=o("XLMRobertaXLForCausalLM"),mJo=o(" (XLM-RoBERTa-XL model)"),fJo=l(),Av=a("li"),Nve=a("strong"),gJo=o("xlnet"),hJo=o(" \u2014 "),GW=a("a"),uJo=o("XLNetLMHeadModel"),pJo=o(" (XLNet model)"),_Jo=l(),Lv=a("p"),bJo=o("The model is set in evaluation mode by default using "),qve=a("code"),vJo=o("model.eval()"),FJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=a("code"),TJo=o("model.train()"),MJo=l(),F(yv.$$.fragment),Boo=l(),Sd=a("h2"),xv=a("a"),Dve=a("span"),F(u$.$$.fragment),EJo=l(),Gve=a("span"),CJo=o("AutoModelForMaskedLM"),Ioo=l(),qo=a("div"),F(p$.$$.fragment),wJo=l(),Rd=a("p"),AJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OW=a("a"),LJo=o("from_pretrained()"),yJo=o(" class method or the "),VW=a("a"),xJo=o("from_config()"),$Jo=o(` class
method.`),kJo=l(),_$=a("p"),SJo=o("This class cannot be instantiated directly using "),Ove=a("code"),RJo=o("__init__()"),PJo=o(" (throws an error)."),BJo=l(),Mt=a("div"),F(b$.$$.fragment),IJo=l(),Vve=a("p"),NJo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qJo=l(),Pd=a("p"),jJo=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),DJo=o("not"),GJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),OJo=o("from_pretrained()"),VJo=o(" to load the model weights."),XJo=l(),F($v.$$.fragment),zJo=l(),ro=a("div"),F(v$.$$.fragment),QJo=l(),zve=a("p"),WJo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UJo=l(),tn=a("p"),HJo=o("The model class to instantiate is selected based on the "),Qve=a("code"),JJo=o("model_type"),YJo=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),ZJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(":"),rYo=l(),J=a("ul"),kv=a("li"),Hve=a("strong"),tYo=o("albert"),aYo=o(" \u2014 "),zW=a("a"),nYo=o("AlbertForMaskedLM"),sYo=o(" (ALBERT model)"),lYo=l(),Sv=a("li"),Jve=a("strong"),iYo=o("bart"),dYo=o(" \u2014 "),QW=a("a"),cYo=o("BartForConditionalGeneration"),mYo=o(" (BART model)"),fYo=l(),Rv=a("li"),Yve=a("strong"),gYo=o("bert"),hYo=o(" \u2014 "),WW=a("a"),uYo=o("BertForMaskedLM"),pYo=o(" (BERT model)"),_Yo=l(),Pv=a("li"),Zve=a("strong"),bYo=o("big_bird"),vYo=o(" \u2014 "),UW=a("a"),FYo=o("BigBirdForMaskedLM"),TYo=o(" (BigBird model)"),MYo=l(),Bv=a("li"),Kve=a("strong"),EYo=o("camembert"),CYo=o(" \u2014 "),HW=a("a"),wYo=o("CamembertForMaskedLM"),AYo=o(" (CamemBERT model)"),LYo=l(),Iv=a("li"),eFe=a("strong"),yYo=o("convbert"),xYo=o(" \u2014 "),JW=a("a"),$Yo=o("ConvBertForMaskedLM"),kYo=o(" (ConvBERT model)"),SYo=l(),Nv=a("li"),oFe=a("strong"),RYo=o("data2vec-text"),PYo=o(" \u2014 "),YW=a("a"),BYo=o("Data2VecTextForMaskedLM"),IYo=o(" (Data2VecText model)"),NYo=l(),qv=a("li"),rFe=a("strong"),qYo=o("deberta"),jYo=o(" \u2014 "),ZW=a("a"),DYo=o("DebertaForMaskedLM"),GYo=o(" (DeBERTa model)"),OYo=l(),jv=a("li"),tFe=a("strong"),VYo=o("deberta-v2"),XYo=o(" \u2014 "),KW=a("a"),zYo=o("DebertaV2ForMaskedLM"),QYo=o(" (DeBERTa-v2 model)"),WYo=l(),Dv=a("li"),aFe=a("strong"),UYo=o("distilbert"),HYo=o(" \u2014 "),eU=a("a"),JYo=o("DistilBertForMaskedLM"),YYo=o(" (DistilBERT model)"),ZYo=l(),Gv=a("li"),nFe=a("strong"),KYo=o("electra"),eZo=o(" \u2014 "),oU=a("a"),oZo=o("ElectraForMaskedLM"),rZo=o(" (ELECTRA model)"),tZo=l(),Ov=a("li"),sFe=a("strong"),aZo=o("ernie"),nZo=o(" \u2014 "),rU=a("a"),sZo=o("ErnieForMaskedLM"),lZo=o(" (ERNIE model)"),iZo=l(),Vv=a("li"),lFe=a("strong"),dZo=o("flaubert"),cZo=o(" \u2014 "),tU=a("a"),mZo=o("FlaubertWithLMHeadModel"),fZo=o(" (FlauBERT model)"),gZo=l(),Xv=a("li"),iFe=a("strong"),hZo=o("fnet"),uZo=o(" \u2014 "),aU=a("a"),pZo=o("FNetForMaskedLM"),_Zo=o(" (FNet model)"),bZo=l(),zv=a("li"),dFe=a("strong"),vZo=o("funnel"),FZo=o(" \u2014 "),nU=a("a"),TZo=o("FunnelForMaskedLM"),MZo=o(" (Funnel Transformer model)"),EZo=l(),Qv=a("li"),cFe=a("strong"),CZo=o("ibert"),wZo=o(" \u2014 "),sU=a("a"),AZo=o("IBertForMaskedLM"),LZo=o(" (I-BERT model)"),yZo=l(),Wv=a("li"),mFe=a("strong"),xZo=o("layoutlm"),$Zo=o(" \u2014 "),lU=a("a"),kZo=o("LayoutLMForMaskedLM"),SZo=o(" (LayoutLM model)"),RZo=l(),Uv=a("li"),fFe=a("strong"),PZo=o("longformer"),BZo=o(" \u2014 "),iU=a("a"),IZo=o("LongformerForMaskedLM"),NZo=o(" (Longformer model)"),qZo=l(),Hv=a("li"),gFe=a("strong"),jZo=o("luke"),DZo=o(" \u2014 "),dU=a("a"),GZo=o("LukeForMaskedLM"),OZo=o(" (LUKE model)"),VZo=l(),Jv=a("li"),hFe=a("strong"),XZo=o("mbart"),zZo=o(" \u2014 "),cU=a("a"),QZo=o("MBartForConditionalGeneration"),WZo=o(" (mBART model)"),UZo=l(),Yv=a("li"),uFe=a("strong"),HZo=o("megatron-bert"),JZo=o(" \u2014 "),mU=a("a"),YZo=o("MegatronBertForMaskedLM"),ZZo=o(" (Megatron-BERT model)"),KZo=l(),Zv=a("li"),pFe=a("strong"),eKo=o("mobilebert"),oKo=o(" \u2014 "),fU=a("a"),rKo=o("MobileBertForMaskedLM"),tKo=o(" (MobileBERT model)"),aKo=l(),Kv=a("li"),_Fe=a("strong"),nKo=o("mpnet"),sKo=o(" \u2014 "),gU=a("a"),lKo=o("MPNetForMaskedLM"),iKo=o(" (MPNet model)"),dKo=l(),eF=a("li"),bFe=a("strong"),cKo=o("mvp"),mKo=o(" \u2014 "),hU=a("a"),fKo=o("MvpForConditionalGeneration"),gKo=o(" (MVP model)"),hKo=l(),oF=a("li"),vFe=a("strong"),uKo=o("nezha"),pKo=o(" \u2014 "),uU=a("a"),_Ko=o("NezhaForMaskedLM"),bKo=o(" (Nezha model)"),vKo=l(),rF=a("li"),FFe=a("strong"),FKo=o("nystromformer"),TKo=o(" \u2014 "),pU=a("a"),MKo=o("NystromformerForMaskedLM"),EKo=o(" (Nystr\xF6mformer model)"),CKo=l(),tF=a("li"),TFe=a("strong"),wKo=o("perceiver"),AKo=o(" \u2014 "),_U=a("a"),LKo=o("PerceiverForMaskedLM"),yKo=o(" (Perceiver model)"),xKo=l(),aF=a("li"),MFe=a("strong"),$Ko=o("qdqbert"),kKo=o(" \u2014 "),bU=a("a"),SKo=o("QDQBertForMaskedLM"),RKo=o(" (QDQBert model)"),PKo=l(),nF=a("li"),EFe=a("strong"),BKo=o("reformer"),IKo=o(" \u2014 "),vU=a("a"),NKo=o("ReformerForMaskedLM"),qKo=o(" (Reformer model)"),jKo=l(),sF=a("li"),CFe=a("strong"),DKo=o("rembert"),GKo=o(" \u2014 "),FU=a("a"),OKo=o("RemBertForMaskedLM"),VKo=o(" (RemBERT model)"),XKo=l(),lF=a("li"),wFe=a("strong"),zKo=o("roberta"),QKo=o(" \u2014 "),TU=a("a"),WKo=o("RobertaForMaskedLM"),UKo=o(" (RoBERTa model)"),HKo=l(),iF=a("li"),AFe=a("strong"),JKo=o("roformer"),YKo=o(" \u2014 "),MU=a("a"),ZKo=o("RoFormerForMaskedLM"),KKo=o(" (RoFormer model)"),eer=l(),dF=a("li"),LFe=a("strong"),oer=o("squeezebert"),rer=o(" \u2014 "),EU=a("a"),ter=o("SqueezeBertForMaskedLM"),aer=o(" (SqueezeBERT model)"),ner=l(),cF=a("li"),yFe=a("strong"),ser=o("tapas"),ler=o(" \u2014 "),CU=a("a"),ier=o("TapasForMaskedLM"),der=o(" (TAPAS model)"),cer=l(),mF=a("li"),xFe=a("strong"),mer=o("wav2vec2"),fer=o(" \u2014 "),$Fe=a("code"),ger=o("Wav2Vec2ForMaskedLM"),her=o(" (Wav2Vec2 model)"),uer=l(),fF=a("li"),kFe=a("strong"),per=o("xlm"),_er=o(" \u2014 "),wU=a("a"),ber=o("XLMWithLMHeadModel"),ver=o(" (XLM model)"),Fer=l(),gF=a("li"),SFe=a("strong"),Ter=o("xlm-roberta"),Mer=o(" \u2014 "),AU=a("a"),Eer=o("XLMRobertaForMaskedLM"),Cer=o(" (XLM-RoBERTa model)"),wer=l(),hF=a("li"),RFe=a("strong"),Aer=o("xlm-roberta-xl"),Ler=o(" \u2014 "),LU=a("a"),yer=o("XLMRobertaXLForMaskedLM"),xer=o(" (XLM-RoBERTa-XL model)"),$er=l(),uF=a("li"),PFe=a("strong"),ker=o("yoso"),Ser=o(" \u2014 "),yU=a("a"),Rer=o("YosoForMaskedLM"),Per=o(" (YOSO model)"),Ber=l(),pF=a("p"),Ier=o("The model is set in evaluation mode by default using "),BFe=a("code"),Ner=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=a("code"),jer=o("model.train()"),Der=l(),F(_F.$$.fragment),Noo=l(),Bd=a("h2"),bF=a("a"),NFe=a("span"),F(F$.$$.fragment),Ger=l(),qFe=a("span"),Oer=o("AutoModelForSeq2SeqLM"),qoo=l(),jo=a("div"),F(T$.$$.fragment),Ver=l(),Id=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xU=a("a"),zer=o("from_pretrained()"),Qer=o(" class method or the "),$U=a("a"),Wer=o("from_config()"),Uer=o(` class
method.`),Her=l(),M$=a("p"),Jer=o("This class cannot be instantiated directly using "),jFe=a("code"),Yer=o("__init__()"),Zer=o(" (throws an error)."),Ker=l(),Et=a("div"),F(E$.$$.fragment),eor=l(),DFe=a("p"),oor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ror=l(),Nd=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(vF.$$.fragment),dor=l(),to=a("div"),F(C$.$$.fragment),cor=l(),OFe=a("p"),mor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gor=l(),an=a("p"),hor=o("The model class to instantiate is selected based on the "),VFe=a("code"),uor=o("model_type"),por=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),_or=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),fe=a("ul"),FF=a("li"),QFe=a("strong"),Mor=o("bart"),Eor=o(" \u2014 "),SU=a("a"),Cor=o("BartForConditionalGeneration"),wor=o(" (BART model)"),Aor=l(),TF=a("li"),WFe=a("strong"),Lor=o("bigbird_pegasus"),yor=o(" \u2014 "),RU=a("a"),xor=o("BigBirdPegasusForConditionalGeneration"),$or=o(" (BigBird-Pegasus model)"),kor=l(),MF=a("li"),UFe=a("strong"),Sor=o("blenderbot"),Ror=o(" \u2014 "),PU=a("a"),Por=o("BlenderbotForConditionalGeneration"),Bor=o(" (Blenderbot model)"),Ior=l(),EF=a("li"),HFe=a("strong"),Nor=o("blenderbot-small"),qor=o(" \u2014 "),BU=a("a"),jor=o("BlenderbotSmallForConditionalGeneration"),Dor=o(" (BlenderbotSmall model)"),Gor=l(),CF=a("li"),JFe=a("strong"),Oor=o("encoder-decoder"),Vor=o(" \u2014 "),IU=a("a"),Xor=o("EncoderDecoderModel"),zor=o(" (Encoder decoder model)"),Qor=l(),wF=a("li"),YFe=a("strong"),Wor=o("fsmt"),Uor=o(" \u2014 "),NU=a("a"),Hor=o("FSMTForConditionalGeneration"),Jor=o(" (FairSeq Machine-Translation model)"),Yor=l(),AF=a("li"),ZFe=a("strong"),Zor=o("led"),Kor=o(" \u2014 "),qU=a("a"),err=o("LEDForConditionalGeneration"),orr=o(" (LED model)"),rrr=l(),LF=a("li"),KFe=a("strong"),trr=o("longt5"),arr=o(" \u2014 "),jU=a("a"),nrr=o("LongT5ForConditionalGeneration"),srr=o(" (LongT5 model)"),lrr=l(),yF=a("li"),eTe=a("strong"),irr=o("m2m_100"),drr=o(" \u2014 "),DU=a("a"),crr=o("M2M100ForConditionalGeneration"),mrr=o(" (M2M100 model)"),frr=l(),xF=a("li"),oTe=a("strong"),grr=o("marian"),hrr=o(" \u2014 "),GU=a("a"),urr=o("MarianMTModel"),prr=o(" (Marian model)"),_rr=l(),$F=a("li"),rTe=a("strong"),brr=o("mbart"),vrr=o(" \u2014 "),OU=a("a"),Frr=o("MBartForConditionalGeneration"),Trr=o(" (mBART model)"),Mrr=l(),kF=a("li"),tTe=a("strong"),Err=o("mt5"),Crr=o(" \u2014 "),VU=a("a"),wrr=o("MT5ForConditionalGeneration"),Arr=o(" (MT5 model)"),Lrr=l(),SF=a("li"),aTe=a("strong"),yrr=o("mvp"),xrr=o(" \u2014 "),XU=a("a"),$rr=o("MvpForConditionalGeneration"),krr=o(" (MVP model)"),Srr=l(),RF=a("li"),nTe=a("strong"),Rrr=o("nllb"),Prr=o(" \u2014 "),zU=a("a"),Brr=o("M2M100ForConditionalGeneration"),Irr=o(" (NLLB model)"),Nrr=l(),PF=a("li"),sTe=a("strong"),qrr=o("pegasus"),jrr=o(" \u2014 "),QU=a("a"),Drr=o("PegasusForConditionalGeneration"),Grr=o(" (Pegasus model)"),Orr=l(),BF=a("li"),lTe=a("strong"),Vrr=o("pegasus_x"),Xrr=o(" \u2014 "),WU=a("a"),zrr=o("PegasusXForConditionalGeneration"),Qrr=o(" (PEGASUS-X model)"),Wrr=l(),IF=a("li"),iTe=a("strong"),Urr=o("plbart"),Hrr=o(" \u2014 "),UU=a("a"),Jrr=o("PLBartForConditionalGeneration"),Yrr=o(" (PLBart model)"),Zrr=l(),NF=a("li"),dTe=a("strong"),Krr=o("prophetnet"),etr=o(" \u2014 "),HU=a("a"),otr=o("ProphetNetForConditionalGeneration"),rtr=o(" (ProphetNet model)"),ttr=l(),qF=a("li"),cTe=a("strong"),atr=o("t5"),ntr=o(" \u2014 "),JU=a("a"),str=o("T5ForConditionalGeneration"),ltr=o(" (T5 model)"),itr=l(),jF=a("li"),mTe=a("strong"),dtr=o("xlm-prophetnet"),ctr=o(" \u2014 "),YU=a("a"),mtr=o("XLMProphetNetForConditionalGeneration"),ftr=o(" (XLM-ProphetNet model)"),gtr=l(),DF=a("p"),htr=o("The model is set in evaluation mode by default using "),fTe=a("code"),utr=o("model.eval()"),ptr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gTe=a("code"),_tr=o("model.train()"),btr=l(),F(GF.$$.fragment),joo=l(),qd=a("h2"),OF=a("a"),hTe=a("span"),F(w$.$$.fragment),vtr=l(),uTe=a("span"),Ftr=o("AutoModelForSequenceClassification"),Doo=l(),Do=a("div"),F(A$.$$.fragment),Ttr=l(),jd=a("p"),Mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZU=a("a"),Etr=o("from_pretrained()"),Ctr=o(" class method or the "),KU=a("a"),wtr=o("from_config()"),Atr=o(` class
method.`),Ltr=l(),L$=a("p"),ytr=o("This class cannot be instantiated directly using "),pTe=a("code"),xtr=o("__init__()"),$tr=o(" (throws an error)."),ktr=l(),Ct=a("div"),F(y$.$$.fragment),Str=l(),_Te=a("p"),Rtr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ptr=l(),Dd=a("p"),Btr=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),Itr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),qtr=o("from_pretrained()"),jtr=o(" to load the model weights."),Dtr=l(),F(VF.$$.fragment),Gtr=l(),ao=a("div"),F(x$.$$.fragment),Otr=l(),vTe=a("p"),Vtr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xtr=l(),nn=a("p"),ztr=o("The model class to instantiate is selected based on the "),FTe=a("code"),Qtr=o("model_type"),Wtr=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),Utr=o("pretrained_model_name_or_path"),Htr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),Jtr=o("pretrained_model_name_or_path"),Ytr=o(":"),Ztr=l(),q=a("ul"),XF=a("li"),ETe=a("strong"),Ktr=o("albert"),ear=o(" \u2014 "),oH=a("a"),oar=o("AlbertForSequenceClassification"),rar=o(" (ALBERT model)"),tar=l(),zF=a("li"),CTe=a("strong"),aar=o("bart"),nar=o(" \u2014 "),rH=a("a"),sar=o("BartForSequenceClassification"),lar=o(" (BART model)"),iar=l(),QF=a("li"),wTe=a("strong"),dar=o("bert"),car=o(" \u2014 "),tH=a("a"),mar=o("BertForSequenceClassification"),far=o(" (BERT model)"),gar=l(),WF=a("li"),ATe=a("strong"),har=o("big_bird"),uar=o(" \u2014 "),aH=a("a"),par=o("BigBirdForSequenceClassification"),_ar=o(" (BigBird model)"),bar=l(),UF=a("li"),LTe=a("strong"),Far=o("bigbird_pegasus"),Tar=o(" \u2014 "),nH=a("a"),Mar=o("BigBirdPegasusForSequenceClassification"),Ear=o(" (BigBird-Pegasus model)"),Car=l(),HF=a("li"),yTe=a("strong"),war=o("bloom"),Aar=o(" \u2014 "),sH=a("a"),Lar=o("BloomForSequenceClassification"),yar=o(" (BLOOM model)"),xar=l(),JF=a("li"),xTe=a("strong"),$ar=o("camembert"),kar=o(" \u2014 "),lH=a("a"),Sar=o("CamembertForSequenceClassification"),Rar=o(" (CamemBERT model)"),Par=l(),YF=a("li"),$Te=a("strong"),Bar=o("canine"),Iar=o(" \u2014 "),iH=a("a"),Nar=o("CanineForSequenceClassification"),qar=o(" (CANINE model)"),jar=l(),ZF=a("li"),kTe=a("strong"),Dar=o("convbert"),Gar=o(" \u2014 "),dH=a("a"),Oar=o("ConvBertForSequenceClassification"),Var=o(" (ConvBERT model)"),Xar=l(),KF=a("li"),STe=a("strong"),zar=o("ctrl"),Qar=o(" \u2014 "),cH=a("a"),War=o("CTRLForSequenceClassification"),Uar=o(" (CTRL model)"),Har=l(),eT=a("li"),RTe=a("strong"),Jar=o("data2vec-text"),Yar=o(" \u2014 "),mH=a("a"),Zar=o("Data2VecTextForSequenceClassification"),Kar=o(" (Data2VecText model)"),enr=l(),oT=a("li"),PTe=a("strong"),onr=o("deberta"),rnr=o(" \u2014 "),fH=a("a"),tnr=o("DebertaForSequenceClassification"),anr=o(" (DeBERTa model)"),nnr=l(),rT=a("li"),BTe=a("strong"),snr=o("deberta-v2"),lnr=o(" \u2014 "),gH=a("a"),inr=o("DebertaV2ForSequenceClassification"),dnr=o(" (DeBERTa-v2 model)"),cnr=l(),tT=a("li"),ITe=a("strong"),mnr=o("distilbert"),fnr=o(" \u2014 "),hH=a("a"),gnr=o("DistilBertForSequenceClassification"),hnr=o(" (DistilBERT model)"),unr=l(),aT=a("li"),NTe=a("strong"),pnr=o("electra"),_nr=o(" \u2014 "),uH=a("a"),bnr=o("ElectraForSequenceClassification"),vnr=o(" (ELECTRA model)"),Fnr=l(),nT=a("li"),qTe=a("strong"),Tnr=o("ernie"),Mnr=o(" \u2014 "),pH=a("a"),Enr=o("ErnieForSequenceClassification"),Cnr=o(" (ERNIE model)"),wnr=l(),sT=a("li"),jTe=a("strong"),Anr=o("esm"),Lnr=o(" \u2014 "),_H=a("a"),ynr=o("EsmForSequenceClassification"),xnr=o(" (ESM model)"),$nr=l(),lT=a("li"),DTe=a("strong"),knr=o("flaubert"),Snr=o(" \u2014 "),bH=a("a"),Rnr=o("FlaubertForSequenceClassification"),Pnr=o(" (FlauBERT model)"),Bnr=l(),iT=a("li"),GTe=a("strong"),Inr=o("fnet"),Nnr=o(" \u2014 "),vH=a("a"),qnr=o("FNetForSequenceClassification"),jnr=o(" (FNet model)"),Dnr=l(),dT=a("li"),OTe=a("strong"),Gnr=o("funnel"),Onr=o(" \u2014 "),FH=a("a"),Vnr=o("FunnelForSequenceClassification"),Xnr=o(" (Funnel Transformer model)"),znr=l(),cT=a("li"),VTe=a("strong"),Qnr=o("gpt2"),Wnr=o(" \u2014 "),TH=a("a"),Unr=o("GPT2ForSequenceClassification"),Hnr=o(" (OpenAI GPT-2 model)"),Jnr=l(),mT=a("li"),XTe=a("strong"),Ynr=o("gpt_neo"),Znr=o(" \u2014 "),MH=a("a"),Knr=o("GPTNeoForSequenceClassification"),esr=o(" (GPT Neo model)"),osr=l(),fT=a("li"),zTe=a("strong"),rsr=o("gptj"),tsr=o(" \u2014 "),EH=a("a"),asr=o("GPTJForSequenceClassification"),nsr=o(" (GPT-J model)"),ssr=l(),gT=a("li"),QTe=a("strong"),lsr=o("ibert"),isr=o(" \u2014 "),CH=a("a"),dsr=o("IBertForSequenceClassification"),csr=o(" (I-BERT model)"),msr=l(),hT=a("li"),WTe=a("strong"),fsr=o("layoutlm"),gsr=o(" \u2014 "),wH=a("a"),hsr=o("LayoutLMForSequenceClassification"),usr=o(" (LayoutLM model)"),psr=l(),uT=a("li"),UTe=a("strong"),_sr=o("layoutlmv2"),bsr=o(" \u2014 "),AH=a("a"),vsr=o("LayoutLMv2ForSequenceClassification"),Fsr=o(" (LayoutLMv2 model)"),Tsr=l(),pT=a("li"),HTe=a("strong"),Msr=o("layoutlmv3"),Esr=o(" \u2014 "),LH=a("a"),Csr=o("LayoutLMv3ForSequenceClassification"),wsr=o(" (LayoutLMv3 model)"),Asr=l(),_T=a("li"),JTe=a("strong"),Lsr=o("led"),ysr=o(" \u2014 "),yH=a("a"),xsr=o("LEDForSequenceClassification"),$sr=o(" (LED model)"),ksr=l(),bT=a("li"),YTe=a("strong"),Ssr=o("longformer"),Rsr=o(" \u2014 "),xH=a("a"),Psr=o("LongformerForSequenceClassification"),Bsr=o(" (Longformer model)"),Isr=l(),vT=a("li"),ZTe=a("strong"),Nsr=o("luke"),qsr=o(" \u2014 "),$H=a("a"),jsr=o("LukeForSequenceClassification"),Dsr=o(" (LUKE model)"),Gsr=l(),FT=a("li"),KTe=a("strong"),Osr=o("markuplm"),Vsr=o(" \u2014 "),kH=a("a"),Xsr=o("MarkupLMForSequenceClassification"),zsr=o(" (MarkupLM model)"),Qsr=l(),TT=a("li"),eMe=a("strong"),Wsr=o("mbart"),Usr=o(" \u2014 "),SH=a("a"),Hsr=o("MBartForSequenceClassification"),Jsr=o(" (mBART model)"),Ysr=l(),MT=a("li"),oMe=a("strong"),Zsr=o("megatron-bert"),Ksr=o(" \u2014 "),RH=a("a"),elr=o("MegatronBertForSequenceClassification"),olr=o(" (Megatron-BERT model)"),rlr=l(),ET=a("li"),rMe=a("strong"),tlr=o("mobilebert"),alr=o(" \u2014 "),PH=a("a"),nlr=o("MobileBertForSequenceClassification"),slr=o(" (MobileBERT model)"),llr=l(),CT=a("li"),tMe=a("strong"),ilr=o("mpnet"),dlr=o(" \u2014 "),BH=a("a"),clr=o("MPNetForSequenceClassification"),mlr=o(" (MPNet model)"),flr=l(),wT=a("li"),aMe=a("strong"),glr=o("mvp"),hlr=o(" \u2014 "),IH=a("a"),ulr=o("MvpForSequenceClassification"),plr=o(" (MVP model)"),_lr=l(),AT=a("li"),nMe=a("strong"),blr=o("nezha"),vlr=o(" \u2014 "),NH=a("a"),Flr=o("NezhaForSequenceClassification"),Tlr=o(" (Nezha model)"),Mlr=l(),LT=a("li"),sMe=a("strong"),Elr=o("nystromformer"),Clr=o(" \u2014 "),qH=a("a"),wlr=o("NystromformerForSequenceClassification"),Alr=o(" (Nystr\xF6mformer model)"),Llr=l(),yT=a("li"),lMe=a("strong"),ylr=o("openai-gpt"),xlr=o(" \u2014 "),jH=a("a"),$lr=o("OpenAIGPTForSequenceClassification"),klr=o(" (OpenAI GPT model)"),Slr=l(),xT=a("li"),iMe=a("strong"),Rlr=o("opt"),Plr=o(" \u2014 "),DH=a("a"),Blr=o("OPTForSequenceClassification"),Ilr=o(" (OPT model)"),Nlr=l(),$T=a("li"),dMe=a("strong"),qlr=o("perceiver"),jlr=o(" \u2014 "),GH=a("a"),Dlr=o("PerceiverForSequenceClassification"),Glr=o(" (Perceiver model)"),Olr=l(),kT=a("li"),cMe=a("strong"),Vlr=o("plbart"),Xlr=o(" \u2014 "),OH=a("a"),zlr=o("PLBartForSequenceClassification"),Qlr=o(" (PLBart model)"),Wlr=l(),ST=a("li"),mMe=a("strong"),Ulr=o("qdqbert"),Hlr=o(" \u2014 "),VH=a("a"),Jlr=o("QDQBertForSequenceClassification"),Ylr=o(" (QDQBert model)"),Zlr=l(),RT=a("li"),fMe=a("strong"),Klr=o("reformer"),eir=o(" \u2014 "),XH=a("a"),oir=o("ReformerForSequenceClassification"),rir=o(" (Reformer model)"),tir=l(),PT=a("li"),gMe=a("strong"),air=o("rembert"),nir=o(" \u2014 "),zH=a("a"),sir=o("RemBertForSequenceClassification"),lir=o(" (RemBERT model)"),iir=l(),BT=a("li"),hMe=a("strong"),dir=o("roberta"),cir=o(" \u2014 "),QH=a("a"),mir=o("RobertaForSequenceClassification"),fir=o(" (RoBERTa model)"),gir=l(),IT=a("li"),uMe=a("strong"),hir=o("roformer"),uir=o(" \u2014 "),WH=a("a"),pir=o("RoFormerForSequenceClassification"),_ir=o(" (RoFormer model)"),bir=l(),NT=a("li"),pMe=a("strong"),vir=o("squeezebert"),Fir=o(" \u2014 "),UH=a("a"),Tir=o("SqueezeBertForSequenceClassification"),Mir=o(" (SqueezeBERT model)"),Eir=l(),qT=a("li"),_Me=a("strong"),Cir=o("tapas"),wir=o(" \u2014 "),HH=a("a"),Air=o("TapasForSequenceClassification"),Lir=o(" (TAPAS model)"),yir=l(),jT=a("li"),bMe=a("strong"),xir=o("transfo-xl"),$ir=o(" \u2014 "),JH=a("a"),kir=o("TransfoXLForSequenceClassification"),Sir=o(" (Transformer-XL model)"),Rir=l(),DT=a("li"),vMe=a("strong"),Pir=o("xlm"),Bir=o(" \u2014 "),YH=a("a"),Iir=o("XLMForSequenceClassification"),Nir=o(" (XLM model)"),qir=l(),GT=a("li"),FMe=a("strong"),jir=o("xlm-roberta"),Dir=o(" \u2014 "),ZH=a("a"),Gir=o("XLMRobertaForSequenceClassification"),Oir=o(" (XLM-RoBERTa model)"),Vir=l(),OT=a("li"),TMe=a("strong"),Xir=o("xlm-roberta-xl"),zir=o(" \u2014 "),KH=a("a"),Qir=o("XLMRobertaXLForSequenceClassification"),Wir=o(" (XLM-RoBERTa-XL model)"),Uir=l(),VT=a("li"),MMe=a("strong"),Hir=o("xlnet"),Jir=o(" \u2014 "),eJ=a("a"),Yir=o("XLNetForSequenceClassification"),Zir=o(" (XLNet model)"),Kir=l(),XT=a("li"),EMe=a("strong"),edr=o("yoso"),odr=o(" \u2014 "),oJ=a("a"),rdr=o("YosoForSequenceClassification"),tdr=o(" (YOSO model)"),adr=l(),zT=a("p"),ndr=o("The model is set in evaluation mode by default using "),CMe=a("code"),sdr=o("model.eval()"),ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wMe=a("code"),idr=o("model.train()"),ddr=l(),F(QT.$$.fragment),Goo=l(),Gd=a("h2"),WT=a("a"),AMe=a("span"),F($$.$$.fragment),cdr=l(),LMe=a("span"),mdr=o("AutoModelForMultipleChoice"),Ooo=l(),Go=a("div"),F(k$.$$.fragment),fdr=l(),Od=a("p"),gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rJ=a("a"),hdr=o("from_pretrained()"),udr=o(" class method or the "),tJ=a("a"),pdr=o("from_config()"),_dr=o(` class
method.`),bdr=l(),S$=a("p"),vdr=o("This class cannot be instantiated directly using "),yMe=a("code"),Fdr=o("__init__()"),Tdr=o(" (throws an error)."),Mdr=l(),wt=a("div"),F(R$.$$.fragment),Edr=l(),xMe=a("p"),Cdr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wdr=l(),Vd=a("p"),Adr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),Ldr=o("not"),ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),xdr=o("from_pretrained()"),$dr=o(" to load the model weights."),kdr=l(),F(UT.$$.fragment),Sdr=l(),no=a("div"),F(P$.$$.fragment),Rdr=l(),kMe=a("p"),Pdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bdr=l(),sn=a("p"),Idr=o("The model class to instantiate is selected based on the "),SMe=a("code"),Ndr=o("model_type"),qdr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),jdr=o("pretrained_model_name_or_path"),Ddr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),Gdr=o("pretrained_model_name_or_path"),Odr=o(":"),Vdr=l(),K=a("ul"),HT=a("li"),BMe=a("strong"),Xdr=o("albert"),zdr=o(" \u2014 "),nJ=a("a"),Qdr=o("AlbertForMultipleChoice"),Wdr=o(" (ALBERT model)"),Udr=l(),JT=a("li"),IMe=a("strong"),Hdr=o("bert"),Jdr=o(" \u2014 "),sJ=a("a"),Ydr=o("BertForMultipleChoice"),Zdr=o(" (BERT model)"),Kdr=l(),YT=a("li"),NMe=a("strong"),ecr=o("big_bird"),ocr=o(" \u2014 "),lJ=a("a"),rcr=o("BigBirdForMultipleChoice"),tcr=o(" (BigBird model)"),acr=l(),ZT=a("li"),qMe=a("strong"),ncr=o("camembert"),scr=o(" \u2014 "),iJ=a("a"),lcr=o("CamembertForMultipleChoice"),icr=o(" (CamemBERT model)"),dcr=l(),KT=a("li"),jMe=a("strong"),ccr=o("canine"),mcr=o(" \u2014 "),dJ=a("a"),fcr=o("CanineForMultipleChoice"),gcr=o(" (CANINE model)"),hcr=l(),eM=a("li"),DMe=a("strong"),ucr=o("convbert"),pcr=o(" \u2014 "),cJ=a("a"),_cr=o("ConvBertForMultipleChoice"),bcr=o(" (ConvBERT model)"),vcr=l(),oM=a("li"),GMe=a("strong"),Fcr=o("data2vec-text"),Tcr=o(" \u2014 "),mJ=a("a"),Mcr=o("Data2VecTextForMultipleChoice"),Ecr=o(" (Data2VecText model)"),Ccr=l(),rM=a("li"),OMe=a("strong"),wcr=o("deberta-v2"),Acr=o(" \u2014 "),fJ=a("a"),Lcr=o("DebertaV2ForMultipleChoice"),ycr=o(" (DeBERTa-v2 model)"),xcr=l(),tM=a("li"),VMe=a("strong"),$cr=o("distilbert"),kcr=o(" \u2014 "),gJ=a("a"),Scr=o("DistilBertForMultipleChoice"),Rcr=o(" (DistilBERT model)"),Pcr=l(),aM=a("li"),XMe=a("strong"),Bcr=o("electra"),Icr=o(" \u2014 "),hJ=a("a"),Ncr=o("ElectraForMultipleChoice"),qcr=o(" (ELECTRA model)"),jcr=l(),nM=a("li"),zMe=a("strong"),Dcr=o("ernie"),Gcr=o(" \u2014 "),uJ=a("a"),Ocr=o("ErnieForMultipleChoice"),Vcr=o(" (ERNIE model)"),Xcr=l(),sM=a("li"),QMe=a("strong"),zcr=o("flaubert"),Qcr=o(" \u2014 "),pJ=a("a"),Wcr=o("FlaubertForMultipleChoice"),Ucr=o(" (FlauBERT model)"),Hcr=l(),lM=a("li"),WMe=a("strong"),Jcr=o("fnet"),Ycr=o(" \u2014 "),_J=a("a"),Zcr=o("FNetForMultipleChoice"),Kcr=o(" (FNet model)"),emr=l(),iM=a("li"),UMe=a("strong"),omr=o("funnel"),rmr=o(" \u2014 "),bJ=a("a"),tmr=o("FunnelForMultipleChoice"),amr=o(" (Funnel Transformer model)"),nmr=l(),dM=a("li"),HMe=a("strong"),smr=o("ibert"),lmr=o(" \u2014 "),vJ=a("a"),imr=o("IBertForMultipleChoice"),dmr=o(" (I-BERT model)"),cmr=l(),cM=a("li"),JMe=a("strong"),mmr=o("longformer"),fmr=o(" \u2014 "),FJ=a("a"),gmr=o("LongformerForMultipleChoice"),hmr=o(" (Longformer model)"),umr=l(),mM=a("li"),YMe=a("strong"),pmr=o("luke"),_mr=o(" \u2014 "),TJ=a("a"),bmr=o("LukeForMultipleChoice"),vmr=o(" (LUKE model)"),Fmr=l(),fM=a("li"),ZMe=a("strong"),Tmr=o("megatron-bert"),Mmr=o(" \u2014 "),MJ=a("a"),Emr=o("MegatronBertForMultipleChoice"),Cmr=o(" (Megatron-BERT model)"),wmr=l(),gM=a("li"),KMe=a("strong"),Amr=o("mobilebert"),Lmr=o(" \u2014 "),EJ=a("a"),ymr=o("MobileBertForMultipleChoice"),xmr=o(" (MobileBERT model)"),$mr=l(),hM=a("li"),eEe=a("strong"),kmr=o("mpnet"),Smr=o(" \u2014 "),CJ=a("a"),Rmr=o("MPNetForMultipleChoice"),Pmr=o(" (MPNet model)"),Bmr=l(),uM=a("li"),oEe=a("strong"),Imr=o("nezha"),Nmr=o(" \u2014 "),wJ=a("a"),qmr=o("NezhaForMultipleChoice"),jmr=o(" (Nezha model)"),Dmr=l(),pM=a("li"),rEe=a("strong"),Gmr=o("nystromformer"),Omr=o(" \u2014 "),AJ=a("a"),Vmr=o("NystromformerForMultipleChoice"),Xmr=o(" (Nystr\xF6mformer model)"),zmr=l(),_M=a("li"),tEe=a("strong"),Qmr=o("qdqbert"),Wmr=o(" \u2014 "),LJ=a("a"),Umr=o("QDQBertForMultipleChoice"),Hmr=o(" (QDQBert model)"),Jmr=l(),bM=a("li"),aEe=a("strong"),Ymr=o("rembert"),Zmr=o(" \u2014 "),yJ=a("a"),Kmr=o("RemBertForMultipleChoice"),efr=o(" (RemBERT model)"),ofr=l(),vM=a("li"),nEe=a("strong"),rfr=o("roberta"),tfr=o(" \u2014 "),xJ=a("a"),afr=o("RobertaForMultipleChoice"),nfr=o(" (RoBERTa model)"),sfr=l(),FM=a("li"),sEe=a("strong"),lfr=o("roformer"),ifr=o(" \u2014 "),$J=a("a"),dfr=o("RoFormerForMultipleChoice"),cfr=o(" (RoFormer model)"),mfr=l(),TM=a("li"),lEe=a("strong"),ffr=o("squeezebert"),gfr=o(" \u2014 "),kJ=a("a"),hfr=o("SqueezeBertForMultipleChoice"),ufr=o(" (SqueezeBERT model)"),pfr=l(),MM=a("li"),iEe=a("strong"),_fr=o("xlm"),bfr=o(" \u2014 "),SJ=a("a"),vfr=o("XLMForMultipleChoice"),Ffr=o(" (XLM model)"),Tfr=l(),EM=a("li"),dEe=a("strong"),Mfr=o("xlm-roberta"),Efr=o(" \u2014 "),RJ=a("a"),Cfr=o("XLMRobertaForMultipleChoice"),wfr=o(" (XLM-RoBERTa model)"),Afr=l(),CM=a("li"),cEe=a("strong"),Lfr=o("xlm-roberta-xl"),yfr=o(" \u2014 "),PJ=a("a"),xfr=o("XLMRobertaXLForMultipleChoice"),$fr=o(" (XLM-RoBERTa-XL model)"),kfr=l(),wM=a("li"),mEe=a("strong"),Sfr=o("xlnet"),Rfr=o(" \u2014 "),BJ=a("a"),Pfr=o("XLNetForMultipleChoice"),Bfr=o(" (XLNet model)"),Ifr=l(),AM=a("li"),fEe=a("strong"),Nfr=o("yoso"),qfr=o(" \u2014 "),IJ=a("a"),jfr=o("YosoForMultipleChoice"),Dfr=o(" (YOSO model)"),Gfr=l(),LM=a("p"),Ofr=o("The model is set in evaluation mode by default using "),gEe=a("code"),Vfr=o("model.eval()"),Xfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hEe=a("code"),zfr=o("model.train()"),Qfr=l(),F(yM.$$.fragment),Voo=l(),Xd=a("h2"),xM=a("a"),uEe=a("span"),F(B$.$$.fragment),Wfr=l(),pEe=a("span"),Ufr=o("AutoModelForNextSentencePrediction"),Xoo=l(),Oo=a("div"),F(I$.$$.fragment),Hfr=l(),zd=a("p"),Jfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NJ=a("a"),Yfr=o("from_pretrained()"),Zfr=o(" class method or the "),qJ=a("a"),Kfr=o("from_config()"),egr=o(` class
method.`),ogr=l(),N$=a("p"),rgr=o("This class cannot be instantiated directly using "),_Ee=a("code"),tgr=o("__init__()"),agr=o(" (throws an error)."),ngr=l(),At=a("div"),F(q$.$$.fragment),sgr=l(),bEe=a("p"),lgr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),igr=l(),Qd=a("p"),dgr=o(`Note:
Loading a model from its configuration file does `),vEe=a("strong"),cgr=o("not"),mgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),fgr=o("from_pretrained()"),ggr=o(" to load the model weights."),hgr=l(),F($M.$$.fragment),ugr=l(),so=a("div"),F(j$.$$.fragment),pgr=l(),FEe=a("p"),_gr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bgr=l(),ln=a("p"),vgr=o("The model class to instantiate is selected based on the "),TEe=a("code"),Fgr=o("model_type"),Tgr=o(` property of the config object (either
passed as an argument or loaded from `),MEe=a("code"),Mgr=o("pretrained_model_name_or_path"),Egr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=a("code"),Cgr=o("pretrained_model_name_or_path"),wgr=o(":"),Agr=l(),Ue=a("ul"),kM=a("li"),CEe=a("strong"),Lgr=o("bert"),ygr=o(" \u2014 "),DJ=a("a"),xgr=o("BertForNextSentencePrediction"),$gr=o(" (BERT model)"),kgr=l(),SM=a("li"),wEe=a("strong"),Sgr=o("ernie"),Rgr=o(" \u2014 "),GJ=a("a"),Pgr=o("ErnieForNextSentencePrediction"),Bgr=o(" (ERNIE model)"),Igr=l(),RM=a("li"),AEe=a("strong"),Ngr=o("fnet"),qgr=o(" \u2014 "),OJ=a("a"),jgr=o("FNetForNextSentencePrediction"),Dgr=o(" (FNet model)"),Ggr=l(),PM=a("li"),LEe=a("strong"),Ogr=o("megatron-bert"),Vgr=o(" \u2014 "),VJ=a("a"),Xgr=o("MegatronBertForNextSentencePrediction"),zgr=o(" (Megatron-BERT model)"),Qgr=l(),BM=a("li"),yEe=a("strong"),Wgr=o("mobilebert"),Ugr=o(" \u2014 "),XJ=a("a"),Hgr=o("MobileBertForNextSentencePrediction"),Jgr=o(" (MobileBERT model)"),Ygr=l(),IM=a("li"),xEe=a("strong"),Zgr=o("nezha"),Kgr=o(" \u2014 "),zJ=a("a"),ehr=o("NezhaForNextSentencePrediction"),ohr=o(" (Nezha model)"),rhr=l(),NM=a("li"),$Ee=a("strong"),thr=o("qdqbert"),ahr=o(" \u2014 "),QJ=a("a"),nhr=o("QDQBertForNextSentencePrediction"),shr=o(" (QDQBert model)"),lhr=l(),qM=a("p"),ihr=o("The model is set in evaluation mode by default using "),kEe=a("code"),dhr=o("model.eval()"),chr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SEe=a("code"),mhr=o("model.train()"),fhr=l(),F(jM.$$.fragment),zoo=l(),Wd=a("h2"),DM=a("a"),REe=a("span"),F(D$.$$.fragment),ghr=l(),PEe=a("span"),hhr=o("AutoModelForTokenClassification"),Qoo=l(),Vo=a("div"),F(G$.$$.fragment),uhr=l(),Ud=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WJ=a("a"),_hr=o("from_pretrained()"),bhr=o(" class method or the "),UJ=a("a"),vhr=o("from_config()"),Fhr=o(` class
method.`),Thr=l(),O$=a("p"),Mhr=o("This class cannot be instantiated directly using "),BEe=a("code"),Ehr=o("__init__()"),Chr=o(" (throws an error)."),whr=l(),Lt=a("div"),F(V$.$$.fragment),Ahr=l(),IEe=a("p"),Lhr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yhr=l(),Hd=a("p"),xhr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),$hr=o("not"),khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),Shr=o("from_pretrained()"),Rhr=o(" to load the model weights."),Phr=l(),F(GM.$$.fragment),Bhr=l(),lo=a("div"),F(X$.$$.fragment),Ihr=l(),qEe=a("p"),Nhr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qhr=l(),dn=a("p"),jhr=o("The model class to instantiate is selected based on the "),jEe=a("code"),Dhr=o("model_type"),Ghr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),Ohr=o("pretrained_model_name_or_path"),Vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),Xhr=o("pretrained_model_name_or_path"),zhr=o(":"),Qhr=l(),H=a("ul"),OM=a("li"),OEe=a("strong"),Whr=o("albert"),Uhr=o(" \u2014 "),JJ=a("a"),Hhr=o("AlbertForTokenClassification"),Jhr=o(" (ALBERT model)"),Yhr=l(),VM=a("li"),VEe=a("strong"),Zhr=o("bert"),Khr=o(" \u2014 "),YJ=a("a"),eur=o("BertForTokenClassification"),our=o(" (BERT model)"),rur=l(),XM=a("li"),XEe=a("strong"),tur=o("big_bird"),aur=o(" \u2014 "),ZJ=a("a"),nur=o("BigBirdForTokenClassification"),sur=o(" (BigBird model)"),lur=l(),zM=a("li"),zEe=a("strong"),iur=o("bloom"),dur=o(" \u2014 "),KJ=a("a"),cur=o("BloomForTokenClassification"),mur=o(" (BLOOM model)"),fur=l(),QM=a("li"),QEe=a("strong"),gur=o("camembert"),hur=o(" \u2014 "),eY=a("a"),uur=o("CamembertForTokenClassification"),pur=o(" (CamemBERT model)"),_ur=l(),WM=a("li"),WEe=a("strong"),bur=o("canine"),vur=o(" \u2014 "),oY=a("a"),Fur=o("CanineForTokenClassification"),Tur=o(" (CANINE model)"),Mur=l(),UM=a("li"),UEe=a("strong"),Eur=o("convbert"),Cur=o(" \u2014 "),rY=a("a"),wur=o("ConvBertForTokenClassification"),Aur=o(" (ConvBERT model)"),Lur=l(),HM=a("li"),HEe=a("strong"),yur=o("data2vec-text"),xur=o(" \u2014 "),tY=a("a"),$ur=o("Data2VecTextForTokenClassification"),kur=o(" (Data2VecText model)"),Sur=l(),JM=a("li"),JEe=a("strong"),Rur=o("deberta"),Pur=o(" \u2014 "),aY=a("a"),Bur=o("DebertaForTokenClassification"),Iur=o(" (DeBERTa model)"),Nur=l(),YM=a("li"),YEe=a("strong"),qur=o("deberta-v2"),jur=o(" \u2014 "),nY=a("a"),Dur=o("DebertaV2ForTokenClassification"),Gur=o(" (DeBERTa-v2 model)"),Our=l(),ZM=a("li"),ZEe=a("strong"),Vur=o("distilbert"),Xur=o(" \u2014 "),sY=a("a"),zur=o("DistilBertForTokenClassification"),Qur=o(" (DistilBERT model)"),Wur=l(),KM=a("li"),KEe=a("strong"),Uur=o("electra"),Hur=o(" \u2014 "),lY=a("a"),Jur=o("ElectraForTokenClassification"),Yur=o(" (ELECTRA model)"),Zur=l(),eE=a("li"),e4e=a("strong"),Kur=o("ernie"),epr=o(" \u2014 "),iY=a("a"),opr=o("ErnieForTokenClassification"),rpr=o(" (ERNIE model)"),tpr=l(),oE=a("li"),o4e=a("strong"),apr=o("esm"),npr=o(" \u2014 "),dY=a("a"),spr=o("EsmForTokenClassification"),lpr=o(" (ESM model)"),ipr=l(),rE=a("li"),r4e=a("strong"),dpr=o("flaubert"),cpr=o(" \u2014 "),cY=a("a"),mpr=o("FlaubertForTokenClassification"),fpr=o(" (FlauBERT model)"),gpr=l(),tE=a("li"),t4e=a("strong"),hpr=o("fnet"),upr=o(" \u2014 "),mY=a("a"),ppr=o("FNetForTokenClassification"),_pr=o(" (FNet model)"),bpr=l(),aE=a("li"),a4e=a("strong"),vpr=o("funnel"),Fpr=o(" \u2014 "),fY=a("a"),Tpr=o("FunnelForTokenClassification"),Mpr=o(" (Funnel Transformer model)"),Epr=l(),nE=a("li"),n4e=a("strong"),Cpr=o("gpt2"),wpr=o(" \u2014 "),gY=a("a"),Apr=o("GPT2ForTokenClassification"),Lpr=o(" (OpenAI GPT-2 model)"),ypr=l(),sE=a("li"),s4e=a("strong"),xpr=o("ibert"),$pr=o(" \u2014 "),hY=a("a"),kpr=o("IBertForTokenClassification"),Spr=o(" (I-BERT model)"),Rpr=l(),lE=a("li"),l4e=a("strong"),Ppr=o("layoutlm"),Bpr=o(" \u2014 "),uY=a("a"),Ipr=o("LayoutLMForTokenClassification"),Npr=o(" (LayoutLM model)"),qpr=l(),iE=a("li"),i4e=a("strong"),jpr=o("layoutlmv2"),Dpr=o(" \u2014 "),pY=a("a"),Gpr=o("LayoutLMv2ForTokenClassification"),Opr=o(" (LayoutLMv2 model)"),Vpr=l(),dE=a("li"),d4e=a("strong"),Xpr=o("layoutlmv3"),zpr=o(" \u2014 "),_Y=a("a"),Qpr=o("LayoutLMv3ForTokenClassification"),Wpr=o(" (LayoutLMv3 model)"),Upr=l(),cE=a("li"),c4e=a("strong"),Hpr=o("longformer"),Jpr=o(" \u2014 "),bY=a("a"),Ypr=o("LongformerForTokenClassification"),Zpr=o(" (Longformer model)"),Kpr=l(),mE=a("li"),m4e=a("strong"),e_r=o("luke"),o_r=o(" \u2014 "),vY=a("a"),r_r=o("LukeForTokenClassification"),t_r=o(" (LUKE model)"),a_r=l(),fE=a("li"),f4e=a("strong"),n_r=o("markuplm"),s_r=o(" \u2014 "),FY=a("a"),l_r=o("MarkupLMForTokenClassification"),i_r=o(" (MarkupLM model)"),d_r=l(),gE=a("li"),g4e=a("strong"),c_r=o("megatron-bert"),m_r=o(" \u2014 "),TY=a("a"),f_r=o("MegatronBertForTokenClassification"),g_r=o(" (Megatron-BERT model)"),h_r=l(),hE=a("li"),h4e=a("strong"),u_r=o("mobilebert"),p_r=o(" \u2014 "),MY=a("a"),__r=o("MobileBertForTokenClassification"),b_r=o(" (MobileBERT model)"),v_r=l(),uE=a("li"),u4e=a("strong"),F_r=o("mpnet"),T_r=o(" \u2014 "),EY=a("a"),M_r=o("MPNetForTokenClassification"),E_r=o(" (MPNet model)"),C_r=l(),pE=a("li"),p4e=a("strong"),w_r=o("nezha"),A_r=o(" \u2014 "),CY=a("a"),L_r=o("NezhaForTokenClassification"),y_r=o(" (Nezha model)"),x_r=l(),_E=a("li"),_4e=a("strong"),$_r=o("nystromformer"),k_r=o(" \u2014 "),wY=a("a"),S_r=o("NystromformerForTokenClassification"),R_r=o(" (Nystr\xF6mformer model)"),P_r=l(),bE=a("li"),b4e=a("strong"),B_r=o("qdqbert"),I_r=o(" \u2014 "),AY=a("a"),N_r=o("QDQBertForTokenClassification"),q_r=o(" (QDQBert model)"),j_r=l(),vE=a("li"),v4e=a("strong"),D_r=o("rembert"),G_r=o(" \u2014 "),LY=a("a"),O_r=o("RemBertForTokenClassification"),V_r=o(" (RemBERT model)"),X_r=l(),FE=a("li"),F4e=a("strong"),z_r=o("roberta"),Q_r=o(" \u2014 "),yY=a("a"),W_r=o("RobertaForTokenClassification"),U_r=o(" (RoBERTa model)"),H_r=l(),TE=a("li"),T4e=a("strong"),J_r=o("roformer"),Y_r=o(" \u2014 "),xY=a("a"),Z_r=o("RoFormerForTokenClassification"),K_r=o(" (RoFormer model)"),e1r=l(),ME=a("li"),M4e=a("strong"),o1r=o("squeezebert"),r1r=o(" \u2014 "),$Y=a("a"),t1r=o("SqueezeBertForTokenClassification"),a1r=o(" (SqueezeBERT model)"),n1r=l(),EE=a("li"),E4e=a("strong"),s1r=o("xlm"),l1r=o(" \u2014 "),kY=a("a"),i1r=o("XLMForTokenClassification"),d1r=o(" (XLM model)"),c1r=l(),CE=a("li"),C4e=a("strong"),m1r=o("xlm-roberta"),f1r=o(" \u2014 "),SY=a("a"),g1r=o("XLMRobertaForTokenClassification"),h1r=o(" (XLM-RoBERTa model)"),u1r=l(),wE=a("li"),w4e=a("strong"),p1r=o("xlm-roberta-xl"),_1r=o(" \u2014 "),RY=a("a"),b1r=o("XLMRobertaXLForTokenClassification"),v1r=o(" (XLM-RoBERTa-XL model)"),F1r=l(),AE=a("li"),A4e=a("strong"),T1r=o("xlnet"),M1r=o(" \u2014 "),PY=a("a"),E1r=o("XLNetForTokenClassification"),C1r=o(" (XLNet model)"),w1r=l(),LE=a("li"),L4e=a("strong"),A1r=o("yoso"),L1r=o(" \u2014 "),BY=a("a"),y1r=o("YosoForTokenClassification"),x1r=o(" (YOSO model)"),$1r=l(),yE=a("p"),k1r=o("The model is set in evaluation mode by default using "),y4e=a("code"),S1r=o("model.eval()"),R1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x4e=a("code"),P1r=o("model.train()"),B1r=l(),F(xE.$$.fragment),Woo=l(),Jd=a("h2"),$E=a("a"),$4e=a("span"),F(z$.$$.fragment),I1r=l(),k4e=a("span"),N1r=o("AutoModelForQuestionAnswering"),Uoo=l(),Xo=a("div"),F(Q$.$$.fragment),q1r=l(),Yd=a("p"),j1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=a("a"),D1r=o("from_pretrained()"),G1r=o(" class method or the "),NY=a("a"),O1r=o("from_config()"),V1r=o(` class
method.`),X1r=l(),W$=a("p"),z1r=o("This class cannot be instantiated directly using "),S4e=a("code"),Q1r=o("__init__()"),W1r=o(" (throws an error)."),U1r=l(),yt=a("div"),F(U$.$$.fragment),H1r=l(),R4e=a("p"),J1r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Y1r=l(),Zd=a("p"),Z1r=o(`Note:
Loading a model from its configuration file does `),P4e=a("strong"),K1r=o("not"),e2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),o2r=o("from_pretrained()"),r2r=o(" to load the model weights."),t2r=l(),F(kE.$$.fragment),a2r=l(),io=a("div"),F(H$.$$.fragment),n2r=l(),B4e=a("p"),s2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l2r=l(),cn=a("p"),i2r=o("The model class to instantiate is selected based on the "),I4e=a("code"),d2r=o("model_type"),c2r=o(` property of the config object (either
passed as an argument or loaded from `),N4e=a("code"),m2r=o("pretrained_model_name_or_path"),f2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(":"),u2r=l(),O=a("ul"),SE=a("li"),j4e=a("strong"),p2r=o("albert"),_2r=o(" \u2014 "),jY=a("a"),b2r=o("AlbertForQuestionAnswering"),v2r=o(" (ALBERT model)"),F2r=l(),RE=a("li"),D4e=a("strong"),T2r=o("bart"),M2r=o(" \u2014 "),DY=a("a"),E2r=o("BartForQuestionAnswering"),C2r=o(" (BART model)"),w2r=l(),PE=a("li"),G4e=a("strong"),A2r=o("bert"),L2r=o(" \u2014 "),GY=a("a"),y2r=o("BertForQuestionAnswering"),x2r=o(" (BERT model)"),$2r=l(),BE=a("li"),O4e=a("strong"),k2r=o("big_bird"),S2r=o(" \u2014 "),OY=a("a"),R2r=o("BigBirdForQuestionAnswering"),P2r=o(" (BigBird model)"),B2r=l(),IE=a("li"),V4e=a("strong"),I2r=o("bigbird_pegasus"),N2r=o(" \u2014 "),VY=a("a"),q2r=o("BigBirdPegasusForQuestionAnswering"),j2r=o(" (BigBird-Pegasus model)"),D2r=l(),NE=a("li"),X4e=a("strong"),G2r=o("bloom"),O2r=o(" \u2014 "),XY=a("a"),V2r=o("BloomForQuestionAnswering"),X2r=o(" (BLOOM model)"),z2r=l(),qE=a("li"),z4e=a("strong"),Q2r=o("camembert"),W2r=o(" \u2014 "),zY=a("a"),U2r=o("CamembertForQuestionAnswering"),H2r=o(" (CamemBERT model)"),J2r=l(),jE=a("li"),Q4e=a("strong"),Y2r=o("canine"),Z2r=o(" \u2014 "),QY=a("a"),K2r=o("CanineForQuestionAnswering"),ebr=o(" (CANINE model)"),obr=l(),DE=a("li"),W4e=a("strong"),rbr=o("convbert"),tbr=o(" \u2014 "),WY=a("a"),abr=o("ConvBertForQuestionAnswering"),nbr=o(" (ConvBERT model)"),sbr=l(),GE=a("li"),U4e=a("strong"),lbr=o("data2vec-text"),ibr=o(" \u2014 "),UY=a("a"),dbr=o("Data2VecTextForQuestionAnswering"),cbr=o(" (Data2VecText model)"),mbr=l(),OE=a("li"),H4e=a("strong"),fbr=o("deberta"),gbr=o(" \u2014 "),HY=a("a"),hbr=o("DebertaForQuestionAnswering"),ubr=o(" (DeBERTa model)"),pbr=l(),VE=a("li"),J4e=a("strong"),_br=o("deberta-v2"),bbr=o(" \u2014 "),JY=a("a"),vbr=o("DebertaV2ForQuestionAnswering"),Fbr=o(" (DeBERTa-v2 model)"),Tbr=l(),XE=a("li"),Y4e=a("strong"),Mbr=o("distilbert"),Ebr=o(" \u2014 "),YY=a("a"),Cbr=o("DistilBertForQuestionAnswering"),wbr=o(" (DistilBERT model)"),Abr=l(),zE=a("li"),Z4e=a("strong"),Lbr=o("electra"),ybr=o(" \u2014 "),ZY=a("a"),xbr=o("ElectraForQuestionAnswering"),$br=o(" (ELECTRA model)"),kbr=l(),QE=a("li"),K4e=a("strong"),Sbr=o("ernie"),Rbr=o(" \u2014 "),KY=a("a"),Pbr=o("ErnieForQuestionAnswering"),Bbr=o(" (ERNIE model)"),Ibr=l(),WE=a("li"),eCe=a("strong"),Nbr=o("flaubert"),qbr=o(" \u2014 "),eZ=a("a"),jbr=o("FlaubertForQuestionAnsweringSimple"),Dbr=o(" (FlauBERT model)"),Gbr=l(),UE=a("li"),oCe=a("strong"),Obr=o("fnet"),Vbr=o(" \u2014 "),oZ=a("a"),Xbr=o("FNetForQuestionAnswering"),zbr=o(" (FNet model)"),Qbr=l(),HE=a("li"),rCe=a("strong"),Wbr=o("funnel"),Ubr=o(" \u2014 "),rZ=a("a"),Hbr=o("FunnelForQuestionAnswering"),Jbr=o(" (Funnel Transformer model)"),Ybr=l(),JE=a("li"),tCe=a("strong"),Zbr=o("gptj"),Kbr=o(" \u2014 "),tZ=a("a"),evr=o("GPTJForQuestionAnswering"),ovr=o(" (GPT-J model)"),rvr=l(),YE=a("li"),aCe=a("strong"),tvr=o("ibert"),avr=o(" \u2014 "),aZ=a("a"),nvr=o("IBertForQuestionAnswering"),svr=o(" (I-BERT model)"),lvr=l(),ZE=a("li"),nCe=a("strong"),ivr=o("layoutlmv2"),dvr=o(" \u2014 "),nZ=a("a"),cvr=o("LayoutLMv2ForQuestionAnswering"),mvr=o(" (LayoutLMv2 model)"),fvr=l(),KE=a("li"),sCe=a("strong"),gvr=o("layoutlmv3"),hvr=o(" \u2014 "),sZ=a("a"),uvr=o("LayoutLMv3ForQuestionAnswering"),pvr=o(" (LayoutLMv3 model)"),_vr=l(),e4=a("li"),lCe=a("strong"),bvr=o("led"),vvr=o(" \u2014 "),lZ=a("a"),Fvr=o("LEDForQuestionAnswering"),Tvr=o(" (LED model)"),Mvr=l(),o4=a("li"),iCe=a("strong"),Evr=o("longformer"),Cvr=o(" \u2014 "),iZ=a("a"),wvr=o("LongformerForQuestionAnswering"),Avr=o(" (Longformer model)"),Lvr=l(),r4=a("li"),dCe=a("strong"),yvr=o("luke"),xvr=o(" \u2014 "),dZ=a("a"),$vr=o("LukeForQuestionAnswering"),kvr=o(" (LUKE model)"),Svr=l(),t4=a("li"),cCe=a("strong"),Rvr=o("lxmert"),Pvr=o(" \u2014 "),cZ=a("a"),Bvr=o("LxmertForQuestionAnswering"),Ivr=o(" (LXMERT model)"),Nvr=l(),a4=a("li"),mCe=a("strong"),qvr=o("markuplm"),jvr=o(" \u2014 "),mZ=a("a"),Dvr=o("MarkupLMForQuestionAnswering"),Gvr=o(" (MarkupLM model)"),Ovr=l(),n4=a("li"),fCe=a("strong"),Vvr=o("mbart"),Xvr=o(" \u2014 "),fZ=a("a"),zvr=o("MBartForQuestionAnswering"),Qvr=o(" (mBART model)"),Wvr=l(),s4=a("li"),gCe=a("strong"),Uvr=o("megatron-bert"),Hvr=o(" \u2014 "),gZ=a("a"),Jvr=o("MegatronBertForQuestionAnswering"),Yvr=o(" (Megatron-BERT model)"),Zvr=l(),l4=a("li"),hCe=a("strong"),Kvr=o("mobilebert"),eFr=o(" \u2014 "),hZ=a("a"),oFr=o("MobileBertForQuestionAnswering"),rFr=o(" (MobileBERT model)"),tFr=l(),i4=a("li"),uCe=a("strong"),aFr=o("mpnet"),nFr=o(" \u2014 "),uZ=a("a"),sFr=o("MPNetForQuestionAnswering"),lFr=o(" (MPNet model)"),iFr=l(),d4=a("li"),pCe=a("strong"),dFr=o("mvp"),cFr=o(" \u2014 "),pZ=a("a"),mFr=o("MvpForQuestionAnswering"),fFr=o(" (MVP model)"),gFr=l(),c4=a("li"),_Ce=a("strong"),hFr=o("nezha"),uFr=o(" \u2014 "),_Z=a("a"),pFr=o("NezhaForQuestionAnswering"),_Fr=o(" (Nezha model)"),bFr=l(),m4=a("li"),bCe=a("strong"),vFr=o("nystromformer"),FFr=o(" \u2014 "),bZ=a("a"),TFr=o("NystromformerForQuestionAnswering"),MFr=o(" (Nystr\xF6mformer model)"),EFr=l(),f4=a("li"),vCe=a("strong"),CFr=o("opt"),wFr=o(" \u2014 "),vZ=a("a"),AFr=o("OPTForQuestionAnswering"),LFr=o(" (OPT model)"),yFr=l(),g4=a("li"),FCe=a("strong"),xFr=o("qdqbert"),$Fr=o(" \u2014 "),FZ=a("a"),kFr=o("QDQBertForQuestionAnswering"),SFr=o(" (QDQBert model)"),RFr=l(),h4=a("li"),TCe=a("strong"),PFr=o("reformer"),BFr=o(" \u2014 "),TZ=a("a"),IFr=o("ReformerForQuestionAnswering"),NFr=o(" (Reformer model)"),qFr=l(),u4=a("li"),MCe=a("strong"),jFr=o("rembert"),DFr=o(" \u2014 "),MZ=a("a"),GFr=o("RemBertForQuestionAnswering"),OFr=o(" (RemBERT model)"),VFr=l(),p4=a("li"),ECe=a("strong"),XFr=o("roberta"),zFr=o(" \u2014 "),EZ=a("a"),QFr=o("RobertaForQuestionAnswering"),WFr=o(" (RoBERTa model)"),UFr=l(),_4=a("li"),CCe=a("strong"),HFr=o("roformer"),JFr=o(" \u2014 "),CZ=a("a"),YFr=o("RoFormerForQuestionAnswering"),ZFr=o(" (RoFormer model)"),KFr=l(),b4=a("li"),wCe=a("strong"),eTr=o("splinter"),oTr=o(" \u2014 "),wZ=a("a"),rTr=o("SplinterForQuestionAnswering"),tTr=o(" (Splinter model)"),aTr=l(),v4=a("li"),ACe=a("strong"),nTr=o("squeezebert"),sTr=o(" \u2014 "),AZ=a("a"),lTr=o("SqueezeBertForQuestionAnswering"),iTr=o(" (SqueezeBERT model)"),dTr=l(),F4=a("li"),LCe=a("strong"),cTr=o("xlm"),mTr=o(" \u2014 "),LZ=a("a"),fTr=o("XLMForQuestionAnsweringSimple"),gTr=o(" (XLM model)"),hTr=l(),T4=a("li"),yCe=a("strong"),uTr=o("xlm-roberta"),pTr=o(" \u2014 "),yZ=a("a"),_Tr=o("XLMRobertaForQuestionAnswering"),bTr=o(" (XLM-RoBERTa model)"),vTr=l(),M4=a("li"),xCe=a("strong"),FTr=o("xlm-roberta-xl"),TTr=o(" \u2014 "),xZ=a("a"),MTr=o("XLMRobertaXLForQuestionAnswering"),ETr=o(" (XLM-RoBERTa-XL model)"),CTr=l(),E4=a("li"),$Ce=a("strong"),wTr=o("xlnet"),ATr=o(" \u2014 "),$Z=a("a"),LTr=o("XLNetForQuestionAnsweringSimple"),yTr=o(" (XLNet model)"),xTr=l(),C4=a("li"),kCe=a("strong"),$Tr=o("yoso"),kTr=o(" \u2014 "),kZ=a("a"),STr=o("YosoForQuestionAnswering"),RTr=o(" (YOSO model)"),PTr=l(),w4=a("p"),BTr=o("The model is set in evaluation mode by default using "),SCe=a("code"),ITr=o("model.eval()"),NTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RCe=a("code"),qTr=o("model.train()"),jTr=l(),F(A4.$$.fragment),Hoo=l(),Kd=a("h2"),L4=a("a"),PCe=a("span"),F(J$.$$.fragment),DTr=l(),BCe=a("span"),GTr=o("AutoModelForTableQuestionAnswering"),Joo=l(),zo=a("div"),F(Y$.$$.fragment),OTr=l(),ec=a("p"),VTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SZ=a("a"),XTr=o("from_pretrained()"),zTr=o(" class method or the "),RZ=a("a"),QTr=o("from_config()"),WTr=o(` class
method.`),UTr=l(),Z$=a("p"),HTr=o("This class cannot be instantiated directly using "),ICe=a("code"),JTr=o("__init__()"),YTr=o(" (throws an error)."),ZTr=l(),xt=a("div"),F(K$.$$.fragment),KTr=l(),NCe=a("p"),eMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oMr=l(),oc=a("p"),rMr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),tMr=o("not"),aMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),nMr=o("from_pretrained()"),sMr=o(" to load the model weights."),lMr=l(),F(y4.$$.fragment),iMr=l(),co=a("div"),F(ek.$$.fragment),dMr=l(),jCe=a("p"),cMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mMr=l(),mn=a("p"),fMr=o("The model class to instantiate is selected based on the "),DCe=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),GCe=a("code"),uMr=o("pretrained_model_name_or_path"),pMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=a("code"),_Mr=o("pretrained_model_name_or_path"),bMr=o(":"),vMr=l(),VCe=a("ul"),x4=a("li"),XCe=a("strong"),FMr=o("tapas"),TMr=o(" \u2014 "),BZ=a("a"),MMr=o("TapasForQuestionAnswering"),EMr=o(" (TAPAS model)"),CMr=l(),$4=a("p"),wMr=o("The model is set in evaluation mode by default using "),zCe=a("code"),AMr=o("model.eval()"),LMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QCe=a("code"),yMr=o("model.train()"),xMr=l(),F(k4.$$.fragment),Yoo=l(),rc=a("h2"),S4=a("a"),WCe=a("span"),F(ok.$$.fragment),$Mr=l(),UCe=a("span"),kMr=o("AutoModelForDocumentQuestionAnswering"),Zoo=l(),Qo=a("div"),F(rk.$$.fragment),SMr=l(),tc=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),IZ=a("a"),PMr=o("from_pretrained()"),BMr=o(" class method or the "),NZ=a("a"),IMr=o("from_config()"),NMr=o(` class
method.`),qMr=l(),tk=a("p"),jMr=o("This class cannot be instantiated directly using "),HCe=a("code"),DMr=o("__init__()"),GMr=o(" (throws an error)."),OMr=l(),$t=a("div"),F(ak.$$.fragment),VMr=l(),JCe=a("p"),XMr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),zMr=l(),ac=a("p"),QMr=o(`Note:
Loading a model from its configuration file does `),YCe=a("strong"),WMr=o("not"),UMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),HMr=o("from_pretrained()"),JMr=o(" to load the model weights."),YMr=l(),F(R4.$$.fragment),ZMr=l(),mo=a("div"),F(nk.$$.fragment),KMr=l(),ZCe=a("p"),eEr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),oEr=l(),fn=a("p"),rEr=o("The model class to instantiate is selected based on the "),KCe=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),e3e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),nc=a("ul"),P4=a("li"),r3e=a("strong"),cEr=o("layoutlm"),mEr=o(" \u2014 "),jZ=a("a"),fEr=o("LayoutLMForQuestionAnswering"),gEr=o(" (LayoutLM model)"),hEr=l(),B4=a("li"),t3e=a("strong"),uEr=o("layoutlmv2"),pEr=o(" \u2014 "),DZ=a("a"),_Er=o("LayoutLMv2ForQuestionAnswering"),bEr=o(" (LayoutLMv2 model)"),vEr=l(),I4=a("li"),a3e=a("strong"),FEr=o("layoutlmv3"),TEr=o(" \u2014 "),GZ=a("a"),MEr=o("LayoutLMv3ForQuestionAnswering"),EEr=o(" (LayoutLMv3 model)"),CEr=l(),N4=a("p"),wEr=o("The model is set in evaluation mode by default using "),n3e=a("code"),AEr=o("model.eval()"),LEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s3e=a("code"),yEr=o("model.train()"),xEr=l(),F(q4.$$.fragment),Koo=l(),sc=a("h2"),j4=a("a"),l3e=a("span"),F(sk.$$.fragment),$Er=l(),i3e=a("span"),kEr=o("AutoModelForImageClassification"),ero=l(),Wo=a("div"),F(lk.$$.fragment),SEr=l(),lc=a("p"),REr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OZ=a("a"),PEr=o("from_pretrained()"),BEr=o(" class method or the "),VZ=a("a"),IEr=o("from_config()"),NEr=o(` class
method.`),qEr=l(),ik=a("p"),jEr=o("This class cannot be instantiated directly using "),d3e=a("code"),DEr=o("__init__()"),GEr=o(" (throws an error)."),OEr=l(),kt=a("div"),F(dk.$$.fragment),VEr=l(),c3e=a("p"),XEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zEr=l(),ic=a("p"),QEr=o(`Note:
Loading a model from its configuration file does `),m3e=a("strong"),WEr=o("not"),UEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),HEr=o("from_pretrained()"),JEr=o(" to load the model weights."),YEr=l(),F(D4.$$.fragment),ZEr=l(),fo=a("div"),F(ck.$$.fragment),KEr=l(),f3e=a("p"),e4r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o4r=l(),gn=a("p"),r4r=o("The model class to instantiate is selected based on the "),g3e=a("code"),t4r=o("model_type"),a4r=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),n4r=o("pretrained_model_name_or_path"),s4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),l4r=o("pretrained_model_name_or_path"),i4r=o(":"),d4r=l(),be=a("ul"),G4=a("li"),p3e=a("strong"),c4r=o("beit"),m4r=o(" \u2014 "),zZ=a("a"),f4r=o("BeitForImageClassification"),g4r=o(" (BEiT model)"),h4r=l(),O4=a("li"),_3e=a("strong"),u4r=o("convnext"),p4r=o(" \u2014 "),QZ=a("a"),_4r=o("ConvNextForImageClassification"),b4r=o(" (ConvNeXT model)"),v4r=l(),V4=a("li"),b3e=a("strong"),F4r=o("cvt"),T4r=o(" \u2014 "),WZ=a("a"),M4r=o("CvtForImageClassification"),E4r=o(" (CvT model)"),C4r=l(),X4=a("li"),v3e=a("strong"),w4r=o("data2vec-vision"),A4r=o(" \u2014 "),UZ=a("a"),L4r=o("Data2VecVisionForImageClassification"),y4r=o(" (Data2VecVision model)"),x4r=l(),El=a("li"),F3e=a("strong"),$4r=o("deit"),k4r=o(" \u2014 "),HZ=a("a"),S4r=o("DeiTForImageClassification"),R4r=o(" or "),JZ=a("a"),P4r=o("DeiTForImageClassificationWithTeacher"),B4r=o(" (DeiT model)"),I4r=l(),z4=a("li"),T3e=a("strong"),N4r=o("imagegpt"),q4r=o(" \u2014 "),YZ=a("a"),j4r=o("ImageGPTForImageClassification"),D4r=o(" (ImageGPT model)"),G4r=l(),Cl=a("li"),M3e=a("strong"),O4r=o("levit"),V4r=o(" \u2014 "),ZZ=a("a"),X4r=o("LevitForImageClassification"),z4r=o(" or "),KZ=a("a"),Q4r=o("LevitForImageClassificationWithTeacher"),W4r=o(" (LeViT model)"),U4r=l(),Q4=a("li"),E3e=a("strong"),H4r=o("mobilevit"),J4r=o(" \u2014 "),eK=a("a"),Y4r=o("MobileViTForImageClassification"),Z4r=o(" (MobileViT model)"),K4r=l(),St=a("li"),C3e=a("strong"),eCr=o("perceiver"),oCr=o(" \u2014 "),oK=a("a"),rCr=o("PerceiverForImageClassificationLearned"),tCr=o(" or "),rK=a("a"),aCr=o("PerceiverForImageClassificationFourier"),nCr=o(" or "),tK=a("a"),sCr=o("PerceiverForImageClassificationConvProcessing"),lCr=o(" (Perceiver model)"),iCr=l(),W4=a("li"),w3e=a("strong"),dCr=o("poolformer"),cCr=o(" \u2014 "),aK=a("a"),mCr=o("PoolFormerForImageClassification"),fCr=o(" (PoolFormer model)"),gCr=l(),U4=a("li"),A3e=a("strong"),hCr=o("regnet"),uCr=o(" \u2014 "),nK=a("a"),pCr=o("RegNetForImageClassification"),_Cr=o(" (RegNet model)"),bCr=l(),H4=a("li"),L3e=a("strong"),vCr=o("resnet"),FCr=o(" \u2014 "),sK=a("a"),TCr=o("ResNetForImageClassification"),MCr=o(" (ResNet model)"),ECr=l(),J4=a("li"),y3e=a("strong"),CCr=o("segformer"),wCr=o(" \u2014 "),lK=a("a"),ACr=o("SegformerForImageClassification"),LCr=o(" (SegFormer model)"),yCr=l(),Y4=a("li"),x3e=a("strong"),xCr=o("swin"),$Cr=o(" \u2014 "),iK=a("a"),kCr=o("SwinForImageClassification"),SCr=o(" (Swin Transformer model)"),RCr=l(),Z4=a("li"),$3e=a("strong"),PCr=o("swinv2"),BCr=o(" \u2014 "),dK=a("a"),ICr=o("Swinv2ForImageClassification"),NCr=o(" (Swin Transformer V2 model)"),qCr=l(),K4=a("li"),k3e=a("strong"),jCr=o("van"),DCr=o(" \u2014 "),cK=a("a"),GCr=o("VanForImageClassification"),OCr=o(" (VAN model)"),VCr=l(),eC=a("li"),S3e=a("strong"),XCr=o("vit"),zCr=o(" \u2014 "),mK=a("a"),QCr=o("ViTForImageClassification"),WCr=o(" (ViT model)"),UCr=l(),oC=a("li"),R3e=a("strong"),HCr=o("vit_msn"),JCr=o(" \u2014 "),fK=a("a"),YCr=o("ViTMSNForImageClassification"),ZCr=o(" (ViTMSN model)"),KCr=l(),rC=a("p"),e3r=o("The model is set in evaluation mode by default using "),P3e=a("code"),o3r=o("model.eval()"),r3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B3e=a("code"),t3r=o("model.train()"),a3r=l(),F(tC.$$.fragment),oro=l(),dc=a("h2"),aC=a("a"),I3e=a("span"),F(mk.$$.fragment),n3r=l(),N3e=a("span"),s3r=o("AutoModelForVideoClassification"),rro=l(),Uo=a("div"),F(fk.$$.fragment),l3r=l(),cc=a("p"),i3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),gK=a("a"),d3r=o("from_pretrained()"),c3r=o(" class method or the "),hK=a("a"),m3r=o("from_config()"),f3r=o(` class
method.`),g3r=l(),gk=a("p"),h3r=o("This class cannot be instantiated directly using "),q3e=a("code"),u3r=o("__init__()"),p3r=o(" (throws an error)."),_3r=l(),Rt=a("div"),F(hk.$$.fragment),b3r=l(),j3e=a("p"),v3r=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),F3r=l(),mc=a("p"),T3r=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),M3r=o("not"),E3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),C3r=o("from_pretrained()"),w3r=o(" to load the model weights."),A3r=l(),F(nC.$$.fragment),L3r=l(),go=a("div"),F(uk.$$.fragment),y3r=l(),G3e=a("p"),x3r=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),$3r=l(),hn=a("p"),k3r=o("The model class to instantiate is selected based on the "),O3e=a("code"),S3r=o("model_type"),R3r=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),P3r=o("pretrained_model_name_or_path"),B3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),I3r=o("pretrained_model_name_or_path"),N3r=o(":"),q3r=l(),z3e=a("ul"),sC=a("li"),Q3e=a("strong"),j3r=o("videomae"),D3r=o(" \u2014 "),pK=a("a"),G3r=o("VideoMAEForVideoClassification"),O3r=o(" (VideoMAE model)"),V3r=l(),lC=a("p"),X3r=o("The model is set in evaluation mode by default using "),W3e=a("code"),z3r=o("model.eval()"),Q3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U3e=a("code"),W3r=o("model.train()"),U3r=l(),F(iC.$$.fragment),tro=l(),fc=a("h2"),dC=a("a"),H3e=a("span"),F(pk.$$.fragment),H3r=l(),J3e=a("span"),J3r=o("AutoModelForVision2Seq"),aro=l(),Ho=a("div"),F(_k.$$.fragment),Y3r=l(),gc=a("p"),Z3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_K=a("a"),K3r=o("from_pretrained()"),e5r=o(" class method or the "),bK=a("a"),o5r=o("from_config()"),r5r=o(` class
method.`),t5r=l(),bk=a("p"),a5r=o("This class cannot be instantiated directly using "),Y3e=a("code"),n5r=o("__init__()"),s5r=o(" (throws an error)."),l5r=l(),Pt=a("div"),F(vk.$$.fragment),i5r=l(),Z3e=a("p"),d5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),c5r=l(),hc=a("p"),m5r=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),f5r=o("not"),g5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),h5r=o("from_pretrained()"),u5r=o(" to load the model weights."),p5r=l(),F(cC.$$.fragment),_5r=l(),ho=a("div"),F(Fk.$$.fragment),b5r=l(),e5e=a("p"),v5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),F5r=l(),un=a("p"),T5r=o("The model class to instantiate is selected based on the "),o5e=a("code"),M5r=o("model_type"),E5r=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),A5r=o("pretrained_model_name_or_path"),L5r=o(":"),y5r=l(),a5e=a("ul"),mC=a("li"),n5e=a("strong"),x5r=o("vision-encoder-decoder"),$5r=o(" \u2014 "),FK=a("a"),k5r=o("VisionEncoderDecoderModel"),S5r=o(" (Vision Encoder decoder model)"),R5r=l(),fC=a("p"),P5r=o("The model is set in evaluation mode by default using "),s5e=a("code"),B5r=o("model.eval()"),I5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l5e=a("code"),N5r=o("model.train()"),q5r=l(),F(gC.$$.fragment),nro=l(),uc=a("h2"),hC=a("a"),i5e=a("span"),F(Tk.$$.fragment),j5r=l(),d5e=a("span"),D5r=o("AutoModelForVisualQuestionAnswering"),sro=l(),Jo=a("div"),F(Mk.$$.fragment),G5r=l(),pc=a("p"),O5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TK=a("a"),V5r=o("from_pretrained()"),X5r=o(" class method or the "),MK=a("a"),z5r=o("from_config()"),Q5r=o(` class
method.`),W5r=l(),Ek=a("p"),U5r=o("This class cannot be instantiated directly using "),c5e=a("code"),H5r=o("__init__()"),J5r=o(" (throws an error)."),Y5r=l(),Bt=a("div"),F(Ck.$$.fragment),Z5r=l(),m5e=a("p"),K5r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),e0r=l(),_c=a("p"),o0r=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),r0r=o("not"),t0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),a0r=o("from_pretrained()"),n0r=o(" to load the model weights."),s0r=l(),F(uC.$$.fragment),l0r=l(),uo=a("div"),F(wk.$$.fragment),i0r=l(),g5e=a("p"),d0r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),c0r=l(),pn=a("p"),m0r=o("The model class to instantiate is selected based on the "),h5e=a("code"),f0r=o("model_type"),g0r=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),h0r=o("pretrained_model_name_or_path"),u0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),p0r=o("pretrained_model_name_or_path"),_0r=o(":"),b0r=l(),_5e=a("ul"),pC=a("li"),b5e=a("strong"),v0r=o("vilt"),F0r=o(" \u2014 "),CK=a("a"),T0r=o("ViltForQuestionAnswering"),M0r=o(" (ViLT model)"),E0r=l(),_C=a("p"),C0r=o("The model is set in evaluation mode by default using "),v5e=a("code"),w0r=o("model.eval()"),A0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F5e=a("code"),L0r=o("model.train()"),y0r=l(),F(bC.$$.fragment),lro=l(),bc=a("h2"),vC=a("a"),T5e=a("span"),F(Ak.$$.fragment),x0r=l(),M5e=a("span"),$0r=o("AutoModelForAudioClassification"),iro=l(),Yo=a("div"),F(Lk.$$.fragment),k0r=l(),vc=a("p"),S0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wK=a("a"),R0r=o("from_pretrained()"),P0r=o(" class method or the "),AK=a("a"),B0r=o("from_config()"),I0r=o(` class
method.`),N0r=l(),yk=a("p"),q0r=o("This class cannot be instantiated directly using "),E5e=a("code"),j0r=o("__init__()"),D0r=o(" (throws an error)."),G0r=l(),It=a("div"),F(xk.$$.fragment),O0r=l(),C5e=a("p"),V0r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),X0r=l(),Fc=a("p"),z0r=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),Q0r=o("not"),W0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),U0r=o("from_pretrained()"),H0r=o(" to load the model weights."),J0r=l(),F(FC.$$.fragment),Y0r=l(),po=a("div"),F($k.$$.fragment),Z0r=l(),A5e=a("p"),K0r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ewr=l(),_n=a("p"),owr=o("The model class to instantiate is selected based on the "),L5e=a("code"),rwr=o("model_type"),twr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),awr=o("pretrained_model_name_or_path"),nwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),swr=o("pretrained_model_name_or_path"),lwr=o(":"),iwr=l(),Pe=a("ul"),TC=a("li"),$5e=a("strong"),dwr=o("data2vec-audio"),cwr=o(" \u2014 "),yK=a("a"),mwr=o("Data2VecAudioForSequenceClassification"),fwr=o(" (Data2VecAudio model)"),gwr=l(),MC=a("li"),k5e=a("strong"),hwr=o("hubert"),uwr=o(" \u2014 "),xK=a("a"),pwr=o("HubertForSequenceClassification"),_wr=o(" (Hubert model)"),bwr=l(),EC=a("li"),S5e=a("strong"),vwr=o("sew"),Fwr=o(" \u2014 "),$K=a("a"),Twr=o("SEWForSequenceClassification"),Mwr=o(" (SEW model)"),Ewr=l(),CC=a("li"),R5e=a("strong"),Cwr=o("sew-d"),wwr=o(" \u2014 "),kK=a("a"),Awr=o("SEWDForSequenceClassification"),Lwr=o(" (SEW-D model)"),ywr=l(),wC=a("li"),P5e=a("strong"),xwr=o("unispeech"),$wr=o(" \u2014 "),SK=a("a"),kwr=o("UniSpeechForSequenceClassification"),Swr=o(" (UniSpeech model)"),Rwr=l(),AC=a("li"),B5e=a("strong"),Pwr=o("unispeech-sat"),Bwr=o(" \u2014 "),RK=a("a"),Iwr=o("UniSpeechSatForSequenceClassification"),Nwr=o(" (UniSpeechSat model)"),qwr=l(),LC=a("li"),I5e=a("strong"),jwr=o("wav2vec2"),Dwr=o(" \u2014 "),PK=a("a"),Gwr=o("Wav2Vec2ForSequenceClassification"),Owr=o(" (Wav2Vec2 model)"),Vwr=l(),yC=a("li"),N5e=a("strong"),Xwr=o("wav2vec2-conformer"),zwr=o(" \u2014 "),BK=a("a"),Qwr=o("Wav2Vec2ConformerForSequenceClassification"),Wwr=o(" (Wav2Vec2-Conformer model)"),Uwr=l(),xC=a("li"),q5e=a("strong"),Hwr=o("wavlm"),Jwr=o(" \u2014 "),IK=a("a"),Ywr=o("WavLMForSequenceClassification"),Zwr=o(" (WavLM model)"),Kwr=l(),$C=a("p"),eAr=o("The model is set in evaluation mode by default using "),j5e=a("code"),oAr=o("model.eval()"),rAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D5e=a("code"),tAr=o("model.train()"),aAr=l(),F(kC.$$.fragment),dro=l(),Tc=a("h2"),SC=a("a"),G5e=a("span"),F(kk.$$.fragment),nAr=l(),O5e=a("span"),sAr=o("AutoModelForAudioFrameClassification"),cro=l(),Zo=a("div"),F(Sk.$$.fragment),lAr=l(),Mc=a("p"),iAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NK=a("a"),dAr=o("from_pretrained()"),cAr=o(" class method or the "),qK=a("a"),mAr=o("from_config()"),fAr=o(` class
method.`),gAr=l(),Rk=a("p"),hAr=o("This class cannot be instantiated directly using "),V5e=a("code"),uAr=o("__init__()"),pAr=o(" (throws an error)."),_Ar=l(),Nt=a("div"),F(Pk.$$.fragment),bAr=l(),X5e=a("p"),vAr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),FAr=l(),Ec=a("p"),TAr=o(`Note:
Loading a model from its configuration file does `),z5e=a("strong"),MAr=o("not"),EAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),CAr=o("from_pretrained()"),wAr=o(" to load the model weights."),AAr=l(),F(RC.$$.fragment),LAr=l(),_o=a("div"),F(Bk.$$.fragment),yAr=l(),Q5e=a("p"),xAr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$Ar=l(),bn=a("p"),kAr=o("The model class to instantiate is selected based on the "),W5e=a("code"),SAr=o("model_type"),RAr=o(` property of the config object (either
passed as an argument or loaded from `),U5e=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),IAr=o("pretrained_model_name_or_path"),NAr=o(":"),qAr=l(),gt=a("ul"),PC=a("li"),J5e=a("strong"),jAr=o("data2vec-audio"),DAr=o(" \u2014 "),DK=a("a"),GAr=o("Data2VecAudioForAudioFrameClassification"),OAr=o(" (Data2VecAudio model)"),VAr=l(),BC=a("li"),Y5e=a("strong"),XAr=o("unispeech-sat"),zAr=o(" \u2014 "),GK=a("a"),QAr=o("UniSpeechSatForAudioFrameClassification"),WAr=o(" (UniSpeechSat model)"),UAr=l(),IC=a("li"),Z5e=a("strong"),HAr=o("wav2vec2"),JAr=o(" \u2014 "),OK=a("a"),YAr=o("Wav2Vec2ForAudioFrameClassification"),ZAr=o(" (Wav2Vec2 model)"),KAr=l(),NC=a("li"),K5e=a("strong"),e6r=o("wav2vec2-conformer"),o6r=o(" \u2014 "),VK=a("a"),r6r=o("Wav2Vec2ConformerForAudioFrameClassification"),t6r=o(" (Wav2Vec2-Conformer model)"),a6r=l(),qC=a("li"),e0e=a("strong"),n6r=o("wavlm"),s6r=o(" \u2014 "),XK=a("a"),l6r=o("WavLMForAudioFrameClassification"),i6r=o(" (WavLM model)"),d6r=l(),jC=a("p"),c6r=o("The model is set in evaluation mode by default using "),o0e=a("code"),m6r=o("model.eval()"),f6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r0e=a("code"),g6r=o("model.train()"),h6r=l(),F(DC.$$.fragment),mro=l(),Cc=a("h2"),GC=a("a"),t0e=a("span"),F(Ik.$$.fragment),u6r=l(),a0e=a("span"),p6r=o("AutoModelForCTC"),fro=l(),Ko=a("div"),F(Nk.$$.fragment),_6r=l(),wc=a("p"),b6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zK=a("a"),v6r=o("from_pretrained()"),F6r=o(" class method or the "),QK=a("a"),T6r=o("from_config()"),M6r=o(` class
method.`),E6r=l(),qk=a("p"),C6r=o("This class cannot be instantiated directly using "),n0e=a("code"),w6r=o("__init__()"),A6r=o(" (throws an error)."),L6r=l(),qt=a("div"),F(jk.$$.fragment),y6r=l(),s0e=a("p"),x6r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$6r=l(),Ac=a("p"),k6r=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),S6r=o("not"),R6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),P6r=o("from_pretrained()"),B6r=o(" to load the model weights."),I6r=l(),F(OC.$$.fragment),N6r=l(),bo=a("div"),F(Dk.$$.fragment),q6r=l(),i0e=a("p"),j6r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),D6r=l(),vn=a("p"),G6r=o("The model class to instantiate is selected based on the "),d0e=a("code"),O6r=o("model_type"),V6r=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),Q6r=o("pretrained_model_name_or_path"),W6r=o(":"),U6r=l(),Le=a("ul"),VC=a("li"),f0e=a("strong"),H6r=o("data2vec-audio"),J6r=o(" \u2014 "),UK=a("a"),Y6r=o("Data2VecAudioForCTC"),Z6r=o(" (Data2VecAudio model)"),K6r=l(),XC=a("li"),g0e=a("strong"),e7r=o("hubert"),o7r=o(" \u2014 "),HK=a("a"),r7r=o("HubertForCTC"),t7r=o(" (Hubert model)"),a7r=l(),zC=a("li"),h0e=a("strong"),n7r=o("mctct"),s7r=o(" \u2014 "),JK=a("a"),l7r=o("MCTCTForCTC"),i7r=o(" (M-CTC-T model)"),d7r=l(),QC=a("li"),u0e=a("strong"),c7r=o("sew"),m7r=o(" \u2014 "),YK=a("a"),f7r=o("SEWForCTC"),g7r=o(" (SEW model)"),h7r=l(),WC=a("li"),p0e=a("strong"),u7r=o("sew-d"),p7r=o(" \u2014 "),ZK=a("a"),_7r=o("SEWDForCTC"),b7r=o(" (SEW-D model)"),v7r=l(),UC=a("li"),_0e=a("strong"),F7r=o("unispeech"),T7r=o(" \u2014 "),KK=a("a"),M7r=o("UniSpeechForCTC"),E7r=o(" (UniSpeech model)"),C7r=l(),HC=a("li"),b0e=a("strong"),w7r=o("unispeech-sat"),A7r=o(" \u2014 "),eee=a("a"),L7r=o("UniSpeechSatForCTC"),y7r=o(" (UniSpeechSat model)"),x7r=l(),JC=a("li"),v0e=a("strong"),$7r=o("wav2vec2"),k7r=o(" \u2014 "),oee=a("a"),S7r=o("Wav2Vec2ForCTC"),R7r=o(" (Wav2Vec2 model)"),P7r=l(),YC=a("li"),F0e=a("strong"),B7r=o("wav2vec2-conformer"),I7r=o(" \u2014 "),ree=a("a"),N7r=o("Wav2Vec2ConformerForCTC"),q7r=o(" (Wav2Vec2-Conformer model)"),j7r=l(),ZC=a("li"),T0e=a("strong"),D7r=o("wavlm"),G7r=o(" \u2014 "),tee=a("a"),O7r=o("WavLMForCTC"),V7r=o(" (WavLM model)"),X7r=l(),KC=a("p"),z7r=o("The model is set in evaluation mode by default using "),M0e=a("code"),Q7r=o("model.eval()"),W7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E0e=a("code"),U7r=o("model.train()"),H7r=l(),F(e3.$$.fragment),gro=l(),Lc=a("h2"),o3=a("a"),C0e=a("span"),F(Gk.$$.fragment),J7r=l(),w0e=a("span"),Y7r=o("AutoModelForSpeechSeq2Seq"),hro=l(),er=a("div"),F(Ok.$$.fragment),Z7r=l(),yc=a("p"),K7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aee=a("a"),eLr=o("from_pretrained()"),oLr=o(" class method or the "),nee=a("a"),rLr=o("from_config()"),tLr=o(` class
method.`),aLr=l(),Vk=a("p"),nLr=o("This class cannot be instantiated directly using "),A0e=a("code"),sLr=o("__init__()"),lLr=o(" (throws an error)."),iLr=l(),jt=a("div"),F(Xk.$$.fragment),dLr=l(),L0e=a("p"),cLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mLr=l(),xc=a("p"),fLr=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),gLr=o("not"),hLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),uLr=o("from_pretrained()"),pLr=o(" to load the model weights."),_Lr=l(),F(r3.$$.fragment),bLr=l(),vo=a("div"),F(zk.$$.fragment),vLr=l(),x0e=a("p"),FLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TLr=l(),Fn=a("p"),MLr=o("The model class to instantiate is selected based on the "),$0e=a("code"),ELr=o("model_type"),CLr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),LLr=o("pretrained_model_name_or_path"),yLr=o(":"),xLr=l(),$c=a("ul"),t3=a("li"),R0e=a("strong"),$Lr=o("speech-encoder-decoder"),kLr=o(" \u2014 "),lee=a("a"),SLr=o("SpeechEncoderDecoderModel"),RLr=o(" (Speech Encoder decoder model)"),PLr=l(),a3=a("li"),P0e=a("strong"),BLr=o("speech_to_text"),ILr=o(" \u2014 "),iee=a("a"),NLr=o("Speech2TextForConditionalGeneration"),qLr=o(" (Speech2Text model)"),jLr=l(),n3=a("li"),B0e=a("strong"),DLr=o("whisper"),GLr=o(" \u2014 "),dee=a("a"),OLr=o("WhisperForConditionalGeneration"),VLr=o(" (Whisper model)"),XLr=l(),s3=a("p"),zLr=o("The model is set in evaluation mode by default using "),I0e=a("code"),QLr=o("model.eval()"),WLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N0e=a("code"),ULr=o("model.train()"),HLr=l(),F(l3.$$.fragment),uro=l(),kc=a("h2"),i3=a("a"),q0e=a("span"),F(Qk.$$.fragment),JLr=l(),j0e=a("span"),YLr=o("AutoModelForAudioXVector"),pro=l(),or=a("div"),F(Wk.$$.fragment),ZLr=l(),Sc=a("p"),KLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cee=a("a"),e8r=o("from_pretrained()"),o8r=o(" class method or the "),mee=a("a"),r8r=o("from_config()"),t8r=o(` class
method.`),a8r=l(),Uk=a("p"),n8r=o("This class cannot be instantiated directly using "),D0e=a("code"),s8r=o("__init__()"),l8r=o(" (throws an error)."),i8r=l(),Dt=a("div"),F(Hk.$$.fragment),d8r=l(),G0e=a("p"),c8r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),m8r=l(),Rc=a("p"),f8r=o(`Note:
Loading a model from its configuration file does `),O0e=a("strong"),g8r=o("not"),h8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=a("a"),u8r=o("from_pretrained()"),p8r=o(" to load the model weights."),_8r=l(),F(d3.$$.fragment),b8r=l(),Fo=a("div"),F(Jk.$$.fragment),v8r=l(),V0e=a("p"),F8r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),T8r=l(),Tn=a("p"),M8r=o("The model class to instantiate is selected based on the "),X0e=a("code"),E8r=o("model_type"),C8r=o(` property of the config object (either
passed as an argument or loaded from `),z0e=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=a("code"),L8r=o("pretrained_model_name_or_path"),y8r=o(":"),x8r=l(),ht=a("ul"),c3=a("li"),W0e=a("strong"),$8r=o("data2vec-audio"),k8r=o(" \u2014 "),gee=a("a"),S8r=o("Data2VecAudioForXVector"),R8r=o(" (Data2VecAudio model)"),P8r=l(),m3=a("li"),U0e=a("strong"),B8r=o("unispeech-sat"),I8r=o(" \u2014 "),hee=a("a"),N8r=o("UniSpeechSatForXVector"),q8r=o(" (UniSpeechSat model)"),j8r=l(),f3=a("li"),H0e=a("strong"),D8r=o("wav2vec2"),G8r=o(" \u2014 "),uee=a("a"),O8r=o("Wav2Vec2ForXVector"),V8r=o(" (Wav2Vec2 model)"),X8r=l(),g3=a("li"),J0e=a("strong"),z8r=o("wav2vec2-conformer"),Q8r=o(" \u2014 "),pee=a("a"),W8r=o("Wav2Vec2ConformerForXVector"),U8r=o(" (Wav2Vec2-Conformer model)"),H8r=l(),h3=a("li"),Y0e=a("strong"),J8r=o("wavlm"),Y8r=o(" \u2014 "),_ee=a("a"),Z8r=o("WavLMForXVector"),K8r=o(" (WavLM model)"),eyr=l(),u3=a("p"),oyr=o("The model is set in evaluation mode by default using "),Z0e=a("code"),ryr=o("model.eval()"),tyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K0e=a("code"),ayr=o("model.train()"),nyr=l(),F(p3.$$.fragment),_ro=l(),Pc=a("h2"),_3=a("a"),ewe=a("span"),F(Yk.$$.fragment),syr=l(),owe=a("span"),lyr=o("AutoModelForMaskedImageModeling"),bro=l(),rr=a("div"),F(Zk.$$.fragment),iyr=l(),Bc=a("p"),dyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bee=a("a"),cyr=o("from_pretrained()"),myr=o(" class method or the "),vee=a("a"),fyr=o("from_config()"),gyr=o(` class
method.`),hyr=l(),Kk=a("p"),uyr=o("This class cannot be instantiated directly using "),rwe=a("code"),pyr=o("__init__()"),_yr=o(" (throws an error)."),byr=l(),Gt=a("div"),F(eS.$$.fragment),vyr=l(),twe=a("p"),Fyr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Tyr=l(),Ic=a("p"),Myr=o(`Note:
Loading a model from its configuration file does `),awe=a("strong"),Eyr=o("not"),Cyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("a"),wyr=o("from_pretrained()"),Ayr=o(" to load the model weights."),Lyr=l(),F(b3.$$.fragment),yyr=l(),To=a("div"),F(oS.$$.fragment),xyr=l(),nwe=a("p"),$yr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),kyr=l(),Mn=a("p"),Syr=o("The model class to instantiate is selected based on the "),swe=a("code"),Ryr=o("model_type"),Pyr=o(` property of the config object (either
passed as an argument or loaded from `),lwe=a("code"),Byr=o("pretrained_model_name_or_path"),Iyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iwe=a("code"),Nyr=o("pretrained_model_name_or_path"),qyr=o(":"),jyr=l(),En=a("ul"),v3=a("li"),dwe=a("strong"),Dyr=o("deit"),Gyr=o(" \u2014 "),Tee=a("a"),Oyr=o("DeiTForMaskedImageModeling"),Vyr=o(" (DeiT model)"),Xyr=l(),F3=a("li"),cwe=a("strong"),zyr=o("swin"),Qyr=o(" \u2014 "),Mee=a("a"),Wyr=o("SwinForMaskedImageModeling"),Uyr=o(" (Swin Transformer model)"),Hyr=l(),T3=a("li"),mwe=a("strong"),Jyr=o("swinv2"),Yyr=o(" \u2014 "),Eee=a("a"),Zyr=o("Swinv2ForMaskedImageModeling"),Kyr=o(" (Swin Transformer V2 model)"),e9r=l(),M3=a("li"),fwe=a("strong"),o9r=o("vit"),r9r=o(" \u2014 "),Cee=a("a"),t9r=o("ViTForMaskedImageModeling"),a9r=o(" (ViT model)"),n9r=l(),E3=a("p"),s9r=o("The model is set in evaluation mode by default using "),gwe=a("code"),l9r=o("model.eval()"),i9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hwe=a("code"),d9r=o("model.train()"),c9r=l(),F(C3.$$.fragment),vro=l(),Nc=a("h2"),w3=a("a"),uwe=a("span"),F(rS.$$.fragment),m9r=l(),pwe=a("span"),f9r=o("AutoModelForObjectDetection"),Fro=l(),tr=a("div"),F(tS.$$.fragment),g9r=l(),qc=a("p"),h9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wee=a("a"),u9r=o("from_pretrained()"),p9r=o(" class method or the "),Aee=a("a"),_9r=o("from_config()"),b9r=o(` class
method.`),v9r=l(),aS=a("p"),F9r=o("This class cannot be instantiated directly using "),_we=a("code"),T9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Ot=a("div"),F(nS.$$.fragment),C9r=l(),bwe=a("p"),w9r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),A9r=l(),jc=a("p"),L9r=o(`Note:
Loading a model from its configuration file does `),vwe=a("strong"),y9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),$9r=o("from_pretrained()"),k9r=o(" to load the model weights."),S9r=l(),F(A3.$$.fragment),R9r=l(),Mo=a("div"),F(sS.$$.fragment),P9r=l(),Fwe=a("p"),B9r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),I9r=l(),Cn=a("p"),N9r=o("The model class to instantiate is selected based on the "),Twe=a("code"),q9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),Mwe=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(":"),X9r=l(),wn=a("ul"),L3=a("li"),Cwe=a("strong"),z9r=o("conditional_detr"),Q9r=o(" \u2014 "),yee=a("a"),W9r=o("ConditionalDetrForObjectDetection"),U9r=o(" (Conditional DETR model)"),H9r=l(),y3=a("li"),wwe=a("strong"),J9r=o("deformable_detr"),Y9r=o(" \u2014 "),xee=a("a"),Z9r=o("DeformableDetrForObjectDetection"),K9r=o(" (Deformable DETR model)"),exr=l(),x3=a("li"),Awe=a("strong"),oxr=o("detr"),rxr=o(" \u2014 "),$ee=a("a"),txr=o("DetrForObjectDetection"),axr=o(" (DETR model)"),nxr=l(),$3=a("li"),Lwe=a("strong"),sxr=o("yolos"),lxr=o(" \u2014 "),kee=a("a"),ixr=o("YolosForObjectDetection"),dxr=o(" (YOLOS model)"),cxr=l(),k3=a("p"),mxr=o("The model is set in evaluation mode by default using "),ywe=a("code"),fxr=o("model.eval()"),gxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xwe=a("code"),hxr=o("model.train()"),uxr=l(),F(S3.$$.fragment),Tro=l(),Dc=a("h2"),R3=a("a"),$we=a("span"),F(lS.$$.fragment),pxr=l(),kwe=a("span"),_xr=o("AutoModelForImageSegmentation"),Mro=l(),ar=a("div"),F(iS.$$.fragment),bxr=l(),Gc=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),See=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),Ree=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),dS=a("p"),wxr=o("This class cannot be instantiated directly using "),Swe=a("code"),Axr=o("__init__()"),Lxr=o(" (throws an error)."),yxr=l(),Vt=a("div"),F(cS.$$.fragment),xxr=l(),Rwe=a("p"),$xr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kxr=l(),Oc=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),Pwe=a("strong"),Rxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),Bxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),Nxr=l(),F(P3.$$.fragment),qxr=l(),Eo=a("div"),F(mS.$$.fragment),jxr=l(),Bwe=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Gxr=l(),An=a("p"),Oxr=o("The model class to instantiate is selected based on the "),Iwe=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=a("code"),Wxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Hxr=l(),jwe=a("ul"),B3=a("li"),Dwe=a("strong"),Jxr=o("detr"),Yxr=o(" \u2014 "),Bee=a("a"),Zxr=o("DetrForSegmentation"),Kxr=o(" (DETR model)"),e$r=l(),I3=a("p"),o$r=o("The model is set in evaluation mode by default using "),Gwe=a("code"),r$r=o("model.eval()"),t$r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Owe=a("code"),a$r=o("model.train()"),n$r=l(),F(N3.$$.fragment),Ero=l(),Vc=a("h2"),q3=a("a"),Vwe=a("span"),F(fS.$$.fragment),s$r=l(),Xwe=a("span"),l$r=o("AutoModelForSemanticSegmentation"),Cro=l(),nr=a("div"),F(gS.$$.fragment),i$r=l(),Xc=a("p"),d$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Iee=a("a"),c$r=o("from_pretrained()"),m$r=o(" class method or the "),Nee=a("a"),f$r=o("from_config()"),g$r=o(` class
method.`),h$r=l(),hS=a("p"),u$r=o("This class cannot be instantiated directly using "),zwe=a("code"),p$r=o("__init__()"),_$r=o(" (throws an error)."),b$r=l(),Xt=a("div"),F(uS.$$.fragment),v$r=l(),Qwe=a("p"),F$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),T$r=l(),zc=a("p"),M$r=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),E$r=o("not"),C$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),w$r=o("from_pretrained()"),A$r=o(" to load the model weights."),L$r=l(),F(j3.$$.fragment),y$r=l(),Co=a("div"),F(pS.$$.fragment),x$r=l(),Uwe=a("p"),$$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),k$r=l(),Ln=a("p"),S$r=o("The model class to instantiate is selected based on the "),Hwe=a("code"),R$r=o("model_type"),P$r=o(` property of the config object (either
passed as an argument or loaded from `),Jwe=a("code"),B$r=o("pretrained_model_name_or_path"),I$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=a("code"),N$r=o("pretrained_model_name_or_path"),q$r=o(":"),j$r=l(),ut=a("ul"),D3=a("li"),Zwe=a("strong"),D$r=o("beit"),G$r=o(" \u2014 "),jee=a("a"),O$r=o("BeitForSemanticSegmentation"),V$r=o(" (BEiT model)"),X$r=l(),G3=a("li"),Kwe=a("strong"),z$r=o("data2vec-vision"),Q$r=o(" \u2014 "),Dee=a("a"),W$r=o("Data2VecVisionForSemanticSegmentation"),U$r=o(" (Data2VecVision model)"),H$r=l(),O3=a("li"),eAe=a("strong"),J$r=o("dpt"),Y$r=o(" \u2014 "),Gee=a("a"),Z$r=o("DPTForSemanticSegmentation"),K$r=o(" (DPT model)"),ekr=l(),V3=a("li"),oAe=a("strong"),okr=o("mobilevit"),rkr=o(" \u2014 "),Oee=a("a"),tkr=o("MobileViTForSemanticSegmentation"),akr=o(" (MobileViT model)"),nkr=l(),X3=a("li"),rAe=a("strong"),skr=o("segformer"),lkr=o(" \u2014 "),Vee=a("a"),ikr=o("SegformerForSemanticSegmentation"),dkr=o(" (SegFormer model)"),ckr=l(),z3=a("p"),mkr=o("The model is set in evaluation mode by default using "),tAe=a("code"),fkr=o("model.eval()"),gkr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aAe=a("code"),hkr=o("model.train()"),ukr=l(),F(Q3.$$.fragment),wro=l(),Qc=a("h2"),W3=a("a"),nAe=a("span"),F(_S.$$.fragment),pkr=l(),sAe=a("span"),_kr=o("AutoModelForInstanceSegmentation"),Aro=l(),sr=a("div"),F(bS.$$.fragment),bkr=l(),Wc=a("p"),vkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Xee=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" class method or the "),zee=a("a"),Mkr=o("from_config()"),Ekr=o(` class
method.`),Ckr=l(),vS=a("p"),wkr=o("This class cannot be instantiated directly using "),lAe=a("code"),Akr=o("__init__()"),Lkr=o(" (throws an error)."),ykr=l(),zt=a("div"),F(FS.$$.fragment),xkr=l(),iAe=a("p"),$kr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kkr=l(),Uc=a("p"),Skr=o(`Note:
Loading a model from its configuration file does `),dAe=a("strong"),Rkr=o("not"),Pkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),Bkr=o("from_pretrained()"),Ikr=o(" to load the model weights."),Nkr=l(),F(U3.$$.fragment),qkr=l(),wo=a("div"),F(TS.$$.fragment),jkr=l(),cAe=a("p"),Dkr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Gkr=l(),yn=a("p"),Okr=o("The model class to instantiate is selected based on the "),mAe=a("code"),Vkr=o("model_type"),Xkr=o(` property of the config object (either
passed as an argument or loaded from `),fAe=a("code"),zkr=o("pretrained_model_name_or_path"),Qkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=a("code"),Wkr=o("pretrained_model_name_or_path"),Ukr=o(":"),Hkr=l(),hAe=a("ul"),H3=a("li"),uAe=a("strong"),Jkr=o("maskformer"),Ykr=o(" \u2014 "),Wee=a("a"),Zkr=o("MaskFormerForInstanceSegmentation"),Kkr=o(" (MaskFormer model)"),eSr=l(),J3=a("p"),oSr=o("The model is set in evaluation mode by default using "),pAe=a("code"),rSr=o("model.eval()"),tSr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Ae=a("code"),aSr=o("model.train()"),nSr=l(),F(Y3.$$.fragment),Lro=l(),Hc=a("h2"),Z3=a("a"),bAe=a("span"),F(MS.$$.fragment),sSr=l(),vAe=a("span"),lSr=o("AutoModelForZeroShotObjectDetection"),yro=l(),lr=a("div"),F(ES.$$.fragment),iSr=l(),Jc=a("p"),dSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Uee=a("a"),cSr=o("from_pretrained()"),mSr=o(" class method or the "),Hee=a("a"),fSr=o("from_config()"),gSr=o(` class
method.`),hSr=l(),CS=a("p"),uSr=o("This class cannot be instantiated directly using "),FAe=a("code"),pSr=o("__init__()"),_Sr=o(" (throws an error)."),bSr=l(),Qt=a("div"),F(wS.$$.fragment),vSr=l(),TAe=a("p"),FSr=o("Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),TSr=l(),Yc=a("p"),MSr=o(`Note:
Loading a model from its configuration file does `),MAe=a("strong"),ESr=o("not"),CSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=a("a"),wSr=o("from_pretrained()"),ASr=o(" to load the model weights."),LSr=l(),F(K3.$$.fragment),ySr=l(),Ao=a("div"),F(AS.$$.fragment),xSr=l(),EAe=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),kSr=l(),xn=a("p"),SSr=o("The model class to instantiate is selected based on the "),CAe=a("code"),RSr=o("model_type"),PSr=o(` property of the config object (either
passed as an argument or loaded from `),wAe=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=a("code"),NSr=o("pretrained_model_name_or_path"),qSr=o(":"),jSr=l(),LAe=a("ul"),e5=a("li"),yAe=a("strong"),DSr=o("owlvit"),GSr=o(" \u2014 "),Yee=a("a"),OSr=o("OwlViTForObjectDetection"),VSr=o(" (OWL-ViT model)"),XSr=l(),o5=a("p"),zSr=o("The model is set in evaluation mode by default using "),xAe=a("code"),QSr=o("model.eval()"),WSr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ae=a("code"),USr=o("model.train()"),HSr=l(),F(r5.$$.fragment),xro=l(),Zc=a("h2"),t5=a("a"),kAe=a("span"),F(LS.$$.fragment),JSr=l(),SAe=a("span"),YSr=o("TFAutoModel"),$ro=l(),ir=a("div"),F(yS.$$.fragment),ZSr=l(),Kc=a("p"),KSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zee=a("a"),eRr=o("from_pretrained()"),oRr=o(" class method or the "),Kee=a("a"),rRr=o("from_config()"),tRr=o(` class
method.`),aRr=l(),xS=a("p"),nRr=o("This class cannot be instantiated directly using "),RAe=a("code"),sRr=o("__init__()"),lRr=o(" (throws an error)."),iRr=l(),Wt=a("div"),F($S.$$.fragment),dRr=l(),PAe=a("p"),cRr=o("Instantiates one of the base model classes of the library from a configuration."),mRr=l(),em=a("p"),fRr=o(`Note:
Loading a model from its configuration file does `),BAe=a("strong"),gRr=o("not"),hRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),uRr=o("from_pretrained()"),pRr=o(" to load the model weights."),_Rr=l(),F(a5.$$.fragment),bRr=l(),qr=a("div"),F(kS.$$.fragment),vRr=l(),IAe=a("p"),FRr=o("Instantiate one of the base model classes of the library from a pretrained model."),TRr=l(),$n=a("p"),MRr=o("The model class to instantiate is selected based on the "),NAe=a("code"),ERr=o("model_type"),CRr=o(` property of the config object (either
passed as an argument or loaded from `),qAe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=a("code"),LRr=o("pretrained_model_name_or_path"),yRr=o(":"),xRr=l(),B=a("ul"),n5=a("li"),DAe=a("strong"),$Rr=o("albert"),kRr=o(" \u2014 "),ooe=a("a"),SRr=o("TFAlbertModel"),RRr=o(" (ALBERT model)"),PRr=l(),s5=a("li"),GAe=a("strong"),BRr=o("bart"),IRr=o(" \u2014 "),roe=a("a"),NRr=o("TFBartModel"),qRr=o(" (BART model)"),jRr=l(),l5=a("li"),OAe=a("strong"),DRr=o("bert"),GRr=o(" \u2014 "),toe=a("a"),ORr=o("TFBertModel"),VRr=o(" (BERT model)"),XRr=l(),i5=a("li"),VAe=a("strong"),zRr=o("blenderbot"),QRr=o(" \u2014 "),aoe=a("a"),WRr=o("TFBlenderbotModel"),URr=o(" (Blenderbot model)"),HRr=l(),d5=a("li"),XAe=a("strong"),JRr=o("blenderbot-small"),YRr=o(" \u2014 "),noe=a("a"),ZRr=o("TFBlenderbotSmallModel"),KRr=o(" (BlenderbotSmall model)"),ePr=l(),c5=a("li"),zAe=a("strong"),oPr=o("camembert"),rPr=o(" \u2014 "),soe=a("a"),tPr=o("TFCamembertModel"),aPr=o(" (CamemBERT model)"),nPr=l(),m5=a("li"),QAe=a("strong"),sPr=o("clip"),lPr=o(" \u2014 "),loe=a("a"),iPr=o("TFCLIPModel"),dPr=o(" (CLIP model)"),cPr=l(),f5=a("li"),WAe=a("strong"),mPr=o("convbert"),fPr=o(" \u2014 "),ioe=a("a"),gPr=o("TFConvBertModel"),hPr=o(" (ConvBERT model)"),uPr=l(),g5=a("li"),UAe=a("strong"),pPr=o("convnext"),_Pr=o(" \u2014 "),doe=a("a"),bPr=o("TFConvNextModel"),vPr=o(" (ConvNeXT model)"),FPr=l(),h5=a("li"),HAe=a("strong"),TPr=o("ctrl"),MPr=o(" \u2014 "),coe=a("a"),EPr=o("TFCTRLModel"),CPr=o(" (CTRL model)"),wPr=l(),u5=a("li"),JAe=a("strong"),APr=o("data2vec-vision"),LPr=o(" \u2014 "),moe=a("a"),yPr=o("TFData2VecVisionModel"),xPr=o(" (Data2VecVision model)"),$Pr=l(),p5=a("li"),YAe=a("strong"),kPr=o("deberta"),SPr=o(" \u2014 "),foe=a("a"),RPr=o("TFDebertaModel"),PPr=o(" (DeBERTa model)"),BPr=l(),_5=a("li"),ZAe=a("strong"),IPr=o("deberta-v2"),NPr=o(" \u2014 "),goe=a("a"),qPr=o("TFDebertaV2Model"),jPr=o(" (DeBERTa-v2 model)"),DPr=l(),b5=a("li"),KAe=a("strong"),GPr=o("deit"),OPr=o(" \u2014 "),hoe=a("a"),VPr=o("TFDeiTModel"),XPr=o(" (DeiT model)"),zPr=l(),v5=a("li"),e6e=a("strong"),QPr=o("distilbert"),WPr=o(" \u2014 "),uoe=a("a"),UPr=o("TFDistilBertModel"),HPr=o(" (DistilBERT model)"),JPr=l(),F5=a("li"),o6e=a("strong"),YPr=o("dpr"),ZPr=o(" \u2014 "),poe=a("a"),KPr=o("TFDPRQuestionEncoder"),eBr=o(" (DPR model)"),oBr=l(),T5=a("li"),r6e=a("strong"),rBr=o("electra"),tBr=o(" \u2014 "),_oe=a("a"),aBr=o("TFElectraModel"),nBr=o(" (ELECTRA model)"),sBr=l(),M5=a("li"),t6e=a("strong"),lBr=o("flaubert"),iBr=o(" \u2014 "),boe=a("a"),dBr=o("TFFlaubertModel"),cBr=o(" (FlauBERT model)"),mBr=l(),wl=a("li"),a6e=a("strong"),fBr=o("funnel"),gBr=o(" \u2014 "),voe=a("a"),hBr=o("TFFunnelModel"),uBr=o(" or "),Foe=a("a"),pBr=o("TFFunnelBaseModel"),_Br=o(" (Funnel Transformer model)"),bBr=l(),E5=a("li"),n6e=a("strong"),vBr=o("gpt2"),FBr=o(" \u2014 "),Toe=a("a"),TBr=o("TFGPT2Model"),MBr=o(" (OpenAI GPT-2 model)"),EBr=l(),C5=a("li"),s6e=a("strong"),CBr=o("gptj"),wBr=o(" \u2014 "),Moe=a("a"),ABr=o("TFGPTJModel"),LBr=o(" (GPT-J model)"),yBr=l(),w5=a("li"),l6e=a("strong"),xBr=o("groupvit"),$Br=o(" \u2014 "),Eoe=a("a"),kBr=o("TFGroupViTModel"),SBr=o(" (GroupViT model)"),RBr=l(),A5=a("li"),i6e=a("strong"),PBr=o("hubert"),BBr=o(" \u2014 "),Coe=a("a"),IBr=o("TFHubertModel"),NBr=o(" (Hubert model)"),qBr=l(),L5=a("li"),d6e=a("strong"),jBr=o("layoutlm"),DBr=o(" \u2014 "),woe=a("a"),GBr=o("TFLayoutLMModel"),OBr=o(" (LayoutLM model)"),VBr=l(),y5=a("li"),c6e=a("strong"),XBr=o("layoutlmv3"),zBr=o(" \u2014 "),Aoe=a("a"),QBr=o("TFLayoutLMv3Model"),WBr=o(" (LayoutLMv3 model)"),UBr=l(),x5=a("li"),m6e=a("strong"),HBr=o("led"),JBr=o(" \u2014 "),Loe=a("a"),YBr=o("TFLEDModel"),ZBr=o(" (LED model)"),KBr=l(),$5=a("li"),f6e=a("strong"),eIr=o("longformer"),oIr=o(" \u2014 "),yoe=a("a"),rIr=o("TFLongformerModel"),tIr=o(" (Longformer model)"),aIr=l(),k5=a("li"),g6e=a("strong"),nIr=o("lxmert"),sIr=o(" \u2014 "),xoe=a("a"),lIr=o("TFLxmertModel"),iIr=o(" (LXMERT model)"),dIr=l(),S5=a("li"),h6e=a("strong"),cIr=o("marian"),mIr=o(" \u2014 "),$oe=a("a"),fIr=o("TFMarianModel"),gIr=o(" (Marian model)"),hIr=l(),R5=a("li"),u6e=a("strong"),uIr=o("mbart"),pIr=o(" \u2014 "),koe=a("a"),_Ir=o("TFMBartModel"),bIr=o(" (mBART model)"),vIr=l(),P5=a("li"),p6e=a("strong"),FIr=o("mobilebert"),TIr=o(" \u2014 "),Soe=a("a"),MIr=o("TFMobileBertModel"),EIr=o(" (MobileBERT model)"),CIr=l(),B5=a("li"),_6e=a("strong"),wIr=o("mobilevit"),AIr=o(" \u2014 "),Roe=a("a"),LIr=o("TFMobileViTModel"),yIr=o(" (MobileViT model)"),xIr=l(),I5=a("li"),b6e=a("strong"),$Ir=o("mpnet"),kIr=o(" \u2014 "),Poe=a("a"),SIr=o("TFMPNetModel"),RIr=o(" (MPNet model)"),PIr=l(),N5=a("li"),v6e=a("strong"),BIr=o("mt5"),IIr=o(" \u2014 "),Boe=a("a"),NIr=o("TFMT5Model"),qIr=o(" (MT5 model)"),jIr=l(),q5=a("li"),F6e=a("strong"),DIr=o("openai-gpt"),GIr=o(" \u2014 "),Ioe=a("a"),OIr=o("TFOpenAIGPTModel"),VIr=o(" (OpenAI GPT model)"),XIr=l(),j5=a("li"),T6e=a("strong"),zIr=o("opt"),QIr=o(" \u2014 "),Noe=a("a"),WIr=o("TFOPTModel"),UIr=o(" (OPT model)"),HIr=l(),D5=a("li"),M6e=a("strong"),JIr=o("pegasus"),YIr=o(" \u2014 "),qoe=a("a"),ZIr=o("TFPegasusModel"),KIr=o(" (Pegasus model)"),eNr=l(),G5=a("li"),E6e=a("strong"),oNr=o("regnet"),rNr=o(" \u2014 "),joe=a("a"),tNr=o("TFRegNetModel"),aNr=o(" (RegNet model)"),nNr=l(),O5=a("li"),C6e=a("strong"),sNr=o("rembert"),lNr=o(" \u2014 "),Doe=a("a"),iNr=o("TFRemBertModel"),dNr=o(" (RemBERT model)"),cNr=l(),V5=a("li"),w6e=a("strong"),mNr=o("resnet"),fNr=o(" \u2014 "),Goe=a("a"),gNr=o("TFResNetModel"),hNr=o(" (ResNet model)"),uNr=l(),X5=a("li"),A6e=a("strong"),pNr=o("roberta"),_Nr=o(" \u2014 "),Ooe=a("a"),bNr=o("TFRobertaModel"),vNr=o(" (RoBERTa model)"),FNr=l(),z5=a("li"),L6e=a("strong"),TNr=o("roformer"),MNr=o(" \u2014 "),Voe=a("a"),ENr=o("TFRoFormerModel"),CNr=o(" (RoFormer model)"),wNr=l(),Q5=a("li"),y6e=a("strong"),ANr=o("segformer"),LNr=o(" \u2014 "),Xoe=a("a"),yNr=o("TFSegformerModel"),xNr=o(" (SegFormer model)"),$Nr=l(),W5=a("li"),x6e=a("strong"),kNr=o("speech_to_text"),SNr=o(" \u2014 "),zoe=a("a"),RNr=o("TFSpeech2TextModel"),PNr=o(" (Speech2Text model)"),BNr=l(),U5=a("li"),$6e=a("strong"),INr=o("swin"),NNr=o(" \u2014 "),Qoe=a("a"),qNr=o("TFSwinModel"),jNr=o(" (Swin Transformer model)"),DNr=l(),H5=a("li"),k6e=a("strong"),GNr=o("t5"),ONr=o(" \u2014 "),Woe=a("a"),VNr=o("TFT5Model"),XNr=o(" (T5 model)"),zNr=l(),J5=a("li"),S6e=a("strong"),QNr=o("tapas"),WNr=o(" \u2014 "),Uoe=a("a"),UNr=o("TFTapasModel"),HNr=o(" (TAPAS model)"),JNr=l(),Y5=a("li"),R6e=a("strong"),YNr=o("transfo-xl"),ZNr=o(" \u2014 "),Hoe=a("a"),KNr=o("TFTransfoXLModel"),eqr=o(" (Transformer-XL model)"),oqr=l(),Z5=a("li"),P6e=a("strong"),rqr=o("vit"),tqr=o(" \u2014 "),Joe=a("a"),aqr=o("TFViTModel"),nqr=o(" (ViT model)"),sqr=l(),K5=a("li"),B6e=a("strong"),lqr=o("vit_mae"),iqr=o(" \u2014 "),Yoe=a("a"),dqr=o("TFViTMAEModel"),cqr=o(" (ViTMAE model)"),mqr=l(),e0=a("li"),I6e=a("strong"),fqr=o("wav2vec2"),gqr=o(" \u2014 "),Zoe=a("a"),hqr=o("TFWav2Vec2Model"),uqr=o(" (Wav2Vec2 model)"),pqr=l(),o0=a("li"),N6e=a("strong"),_qr=o("whisper"),bqr=o(" \u2014 "),Koe=a("a"),vqr=o("TFWhisperModel"),Fqr=o(" (Whisper model)"),Tqr=l(),r0=a("li"),q6e=a("strong"),Mqr=o("xglm"),Eqr=o(" \u2014 "),ere=a("a"),Cqr=o("TFXGLMModel"),wqr=o(" (XGLM model)"),Aqr=l(),t0=a("li"),j6e=a("strong"),Lqr=o("xlm"),yqr=o(" \u2014 "),ore=a("a"),xqr=o("TFXLMModel"),$qr=o(" (XLM model)"),kqr=l(),a0=a("li"),D6e=a("strong"),Sqr=o("xlm-roberta"),Rqr=o(" \u2014 "),rre=a("a"),Pqr=o("TFXLMRobertaModel"),Bqr=o(" (XLM-RoBERTa model)"),Iqr=l(),n0=a("li"),G6e=a("strong"),Nqr=o("xlnet"),qqr=o(" \u2014 "),tre=a("a"),jqr=o("TFXLNetModel"),Dqr=o(" (XLNet model)"),Gqr=l(),F(s0.$$.fragment),kro=l(),om=a("h2"),l0=a("a"),O6e=a("span"),F(SS.$$.fragment),Oqr=l(),V6e=a("span"),Vqr=o("TFAutoModelForPreTraining"),Sro=l(),dr=a("div"),F(RS.$$.fragment),Xqr=l(),rm=a("p"),zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),are=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" class method or the "),nre=a("a"),Uqr=o("from_config()"),Hqr=o(` class
method.`),Jqr=l(),PS=a("p"),Yqr=o("This class cannot be instantiated directly using "),X6e=a("code"),Zqr=o("__init__()"),Kqr=o(" (throws an error)."),ejr=l(),Ut=a("div"),F(BS.$$.fragment),ojr=l(),z6e=a("p"),rjr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tjr=l(),tm=a("p"),ajr=o(`Note:
Loading a model from its configuration file does `),Q6e=a("strong"),njr=o("not"),sjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),ljr=o("from_pretrained()"),ijr=o(" to load the model weights."),djr=l(),F(i0.$$.fragment),cjr=l(),jr=a("div"),F(IS.$$.fragment),mjr=l(),W6e=a("p"),fjr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gjr=l(),kn=a("p"),hjr=o("The model class to instantiate is selected based on the "),U6e=a("code"),ujr=o("model_type"),pjr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),_jr=o("pretrained_model_name_or_path"),bjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),vjr=o("pretrained_model_name_or_path"),Fjr=o(":"),Tjr=l(),le=a("ul"),d0=a("li"),Y6e=a("strong"),Mjr=o("albert"),Ejr=o(" \u2014 "),lre=a("a"),Cjr=o("TFAlbertForPreTraining"),wjr=o(" (ALBERT model)"),Ajr=l(),c0=a("li"),Z6e=a("strong"),Ljr=o("bart"),yjr=o(" \u2014 "),ire=a("a"),xjr=o("TFBartForConditionalGeneration"),$jr=o(" (BART model)"),kjr=l(),m0=a("li"),K6e=a("strong"),Sjr=o("bert"),Rjr=o(" \u2014 "),dre=a("a"),Pjr=o("TFBertForPreTraining"),Bjr=o(" (BERT model)"),Ijr=l(),f0=a("li"),e7e=a("strong"),Njr=o("camembert"),qjr=o(" \u2014 "),cre=a("a"),jjr=o("TFCamembertForMaskedLM"),Djr=o(" (CamemBERT model)"),Gjr=l(),g0=a("li"),o7e=a("strong"),Ojr=o("ctrl"),Vjr=o(" \u2014 "),mre=a("a"),Xjr=o("TFCTRLLMHeadModel"),zjr=o(" (CTRL model)"),Qjr=l(),h0=a("li"),r7e=a("strong"),Wjr=o("distilbert"),Ujr=o(" \u2014 "),fre=a("a"),Hjr=o("TFDistilBertForMaskedLM"),Jjr=o(" (DistilBERT model)"),Yjr=l(),u0=a("li"),t7e=a("strong"),Zjr=o("electra"),Kjr=o(" \u2014 "),gre=a("a"),eDr=o("TFElectraForPreTraining"),oDr=o(" (ELECTRA model)"),rDr=l(),p0=a("li"),a7e=a("strong"),tDr=o("flaubert"),aDr=o(" \u2014 "),hre=a("a"),nDr=o("TFFlaubertWithLMHeadModel"),sDr=o(" (FlauBERT model)"),lDr=l(),_0=a("li"),n7e=a("strong"),iDr=o("funnel"),dDr=o(" \u2014 "),ure=a("a"),cDr=o("TFFunnelForPreTraining"),mDr=o(" (Funnel Transformer model)"),fDr=l(),b0=a("li"),s7e=a("strong"),gDr=o("gpt2"),hDr=o(" \u2014 "),pre=a("a"),uDr=o("TFGPT2LMHeadModel"),pDr=o(" (OpenAI GPT-2 model)"),_Dr=l(),v0=a("li"),l7e=a("strong"),bDr=o("layoutlm"),vDr=o(" \u2014 "),_re=a("a"),FDr=o("TFLayoutLMForMaskedLM"),TDr=o(" (LayoutLM model)"),MDr=l(),F0=a("li"),i7e=a("strong"),EDr=o("lxmert"),CDr=o(" \u2014 "),bre=a("a"),wDr=o("TFLxmertForPreTraining"),ADr=o(" (LXMERT model)"),LDr=l(),T0=a("li"),d7e=a("strong"),yDr=o("mobilebert"),xDr=o(" \u2014 "),vre=a("a"),$Dr=o("TFMobileBertForPreTraining"),kDr=o(" (MobileBERT model)"),SDr=l(),M0=a("li"),c7e=a("strong"),RDr=o("mpnet"),PDr=o(" \u2014 "),Fre=a("a"),BDr=o("TFMPNetForMaskedLM"),IDr=o(" (MPNet model)"),NDr=l(),E0=a("li"),m7e=a("strong"),qDr=o("openai-gpt"),jDr=o(" \u2014 "),Tre=a("a"),DDr=o("TFOpenAIGPTLMHeadModel"),GDr=o(" (OpenAI GPT model)"),ODr=l(),C0=a("li"),f7e=a("strong"),VDr=o("roberta"),XDr=o(" \u2014 "),Mre=a("a"),zDr=o("TFRobertaForMaskedLM"),QDr=o(" (RoBERTa model)"),WDr=l(),w0=a("li"),g7e=a("strong"),UDr=o("t5"),HDr=o(" \u2014 "),Ere=a("a"),JDr=o("TFT5ForConditionalGeneration"),YDr=o(" (T5 model)"),ZDr=l(),A0=a("li"),h7e=a("strong"),KDr=o("tapas"),eGr=o(" \u2014 "),Cre=a("a"),oGr=o("TFTapasForMaskedLM"),rGr=o(" (TAPAS model)"),tGr=l(),L0=a("li"),u7e=a("strong"),aGr=o("transfo-xl"),nGr=o(" \u2014 "),wre=a("a"),sGr=o("TFTransfoXLLMHeadModel"),lGr=o(" (Transformer-XL model)"),iGr=l(),y0=a("li"),p7e=a("strong"),dGr=o("vit_mae"),cGr=o(" \u2014 "),Are=a("a"),mGr=o("TFViTMAEForPreTraining"),fGr=o(" (ViTMAE model)"),gGr=l(),x0=a("li"),_7e=a("strong"),hGr=o("xlm"),uGr=o(" \u2014 "),Lre=a("a"),pGr=o("TFXLMWithLMHeadModel"),_Gr=o(" (XLM model)"),bGr=l(),$0=a("li"),b7e=a("strong"),vGr=o("xlm-roberta"),FGr=o(" \u2014 "),yre=a("a"),TGr=o("TFXLMRobertaForMaskedLM"),MGr=o(" (XLM-RoBERTa model)"),EGr=l(),k0=a("li"),v7e=a("strong"),CGr=o("xlnet"),wGr=o(" \u2014 "),xre=a("a"),AGr=o("TFXLNetLMHeadModel"),LGr=o(" (XLNet model)"),yGr=l(),F(S0.$$.fragment),Rro=l(),am=a("h2"),R0=a("a"),F7e=a("span"),F(NS.$$.fragment),xGr=l(),T7e=a("span"),$Gr=o("TFAutoModelForCausalLM"),Pro=l(),cr=a("div"),F(qS.$$.fragment),kGr=l(),nm=a("p"),SGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$re=a("a"),RGr=o("from_pretrained()"),PGr=o(" class method or the "),kre=a("a"),BGr=o("from_config()"),IGr=o(` class
method.`),NGr=l(),jS=a("p"),qGr=o("This class cannot be instantiated directly using "),M7e=a("code"),jGr=o("__init__()"),DGr=o(" (throws an error)."),GGr=l(),Ht=a("div"),F(DS.$$.fragment),OGr=l(),E7e=a("p"),VGr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XGr=l(),sm=a("p"),zGr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),QGr=o("not"),WGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),UGr=o("from_pretrained()"),HGr=o(" to load the model weights."),JGr=l(),F(P0.$$.fragment),YGr=l(),Dr=a("div"),F(GS.$$.fragment),ZGr=l(),w7e=a("p"),KGr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eOr=l(),Sn=a("p"),oOr=o("The model class to instantiate is selected based on the "),A7e=a("code"),rOr=o("model_type"),tOr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),aOr=o("pretrained_model_name_or_path"),nOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),sOr=o("pretrained_model_name_or_path"),lOr=o(":"),iOr=l(),Me=a("ul"),B0=a("li"),x7e=a("strong"),dOr=o("bert"),cOr=o(" \u2014 "),Rre=a("a"),mOr=o("TFBertLMHeadModel"),fOr=o(" (BERT model)"),gOr=l(),I0=a("li"),$7e=a("strong"),hOr=o("camembert"),uOr=o(" \u2014 "),Pre=a("a"),pOr=o("TFCamembertForCausalLM"),_Or=o(" (CamemBERT model)"),bOr=l(),N0=a("li"),k7e=a("strong"),vOr=o("ctrl"),FOr=o(" \u2014 "),Bre=a("a"),TOr=o("TFCTRLLMHeadModel"),MOr=o(" (CTRL model)"),EOr=l(),q0=a("li"),S7e=a("strong"),COr=o("gpt2"),wOr=o(" \u2014 "),Ire=a("a"),AOr=o("TFGPT2LMHeadModel"),LOr=o(" (OpenAI GPT-2 model)"),yOr=l(),j0=a("li"),R7e=a("strong"),xOr=o("gptj"),$Or=o(" \u2014 "),Nre=a("a"),kOr=o("TFGPTJForCausalLM"),SOr=o(" (GPT-J model)"),ROr=l(),D0=a("li"),P7e=a("strong"),POr=o("openai-gpt"),BOr=o(" \u2014 "),qre=a("a"),IOr=o("TFOpenAIGPTLMHeadModel"),NOr=o(" (OpenAI GPT model)"),qOr=l(),G0=a("li"),B7e=a("strong"),jOr=o("opt"),DOr=o(" \u2014 "),jre=a("a"),GOr=o("TFOPTForCausalLM"),OOr=o(" (OPT model)"),VOr=l(),O0=a("li"),I7e=a("strong"),XOr=o("rembert"),zOr=o(" \u2014 "),Dre=a("a"),QOr=o("TFRemBertForCausalLM"),WOr=o(" (RemBERT model)"),UOr=l(),V0=a("li"),N7e=a("strong"),HOr=o("roberta"),JOr=o(" \u2014 "),Gre=a("a"),YOr=o("TFRobertaForCausalLM"),ZOr=o(" (RoBERTa model)"),KOr=l(),X0=a("li"),q7e=a("strong"),eVr=o("roformer"),oVr=o(" \u2014 "),Ore=a("a"),rVr=o("TFRoFormerForCausalLM"),tVr=o(" (RoFormer model)"),aVr=l(),z0=a("li"),j7e=a("strong"),nVr=o("transfo-xl"),sVr=o(" \u2014 "),Vre=a("a"),lVr=o("TFTransfoXLLMHeadModel"),iVr=o(" (Transformer-XL model)"),dVr=l(),Q0=a("li"),D7e=a("strong"),cVr=o("xglm"),mVr=o(" \u2014 "),Xre=a("a"),fVr=o("TFXGLMForCausalLM"),gVr=o(" (XGLM model)"),hVr=l(),W0=a("li"),G7e=a("strong"),uVr=o("xlm"),pVr=o(" \u2014 "),zre=a("a"),_Vr=o("TFXLMWithLMHeadModel"),bVr=o(" (XLM model)"),vVr=l(),U0=a("li"),O7e=a("strong"),FVr=o("xlnet"),TVr=o(" \u2014 "),Qre=a("a"),MVr=o("TFXLNetLMHeadModel"),EVr=o(" (XLNet model)"),CVr=l(),F(H0.$$.fragment),Bro=l(),lm=a("h2"),J0=a("a"),V7e=a("span"),F(OS.$$.fragment),wVr=l(),X7e=a("span"),AVr=o("TFAutoModelForImageClassification"),Iro=l(),mr=a("div"),F(VS.$$.fragment),LVr=l(),im=a("p"),yVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wre=a("a"),xVr=o("from_pretrained()"),$Vr=o(" class method or the "),Ure=a("a"),kVr=o("from_config()"),SVr=o(` class
method.`),RVr=l(),XS=a("p"),PVr=o("This class cannot be instantiated directly using "),z7e=a("code"),BVr=o("__init__()"),IVr=o(" (throws an error)."),NVr=l(),Jt=a("div"),F(zS.$$.fragment),qVr=l(),Q7e=a("p"),jVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DVr=l(),dm=a("p"),GVr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),OVr=o("not"),VVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=a("a"),XVr=o("from_pretrained()"),zVr=o(" to load the model weights."),QVr=l(),F(Y0.$$.fragment),WVr=l(),Gr=a("div"),F(QS.$$.fragment),UVr=l(),U7e=a("p"),HVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JVr=l(),Rn=a("p"),YVr=o("The model class to instantiate is selected based on the "),H7e=a("code"),ZVr=o("model_type"),KVr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),eXr=o("pretrained_model_name_or_path"),oXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(":"),aXr=l(),Be=a("ul"),Z0=a("li"),Z7e=a("strong"),nXr=o("convnext"),sXr=o(" \u2014 "),Jre=a("a"),lXr=o("TFConvNextForImageClassification"),iXr=o(" (ConvNeXT model)"),dXr=l(),K0=a("li"),K7e=a("strong"),cXr=o("data2vec-vision"),mXr=o(" \u2014 "),Yre=a("a"),fXr=o("TFData2VecVisionForImageClassification"),gXr=o(" (Data2VecVision model)"),hXr=l(),Al=a("li"),eLe=a("strong"),uXr=o("deit"),pXr=o(" \u2014 "),Zre=a("a"),_Xr=o("TFDeiTForImageClassification"),bXr=o(" or "),Kre=a("a"),vXr=o("TFDeiTForImageClassificationWithTeacher"),FXr=o(" (DeiT model)"),TXr=l(),ew=a("li"),oLe=a("strong"),MXr=o("mobilevit"),EXr=o(" \u2014 "),ete=a("a"),CXr=o("TFMobileViTForImageClassification"),wXr=o(" (MobileViT model)"),AXr=l(),ow=a("li"),rLe=a("strong"),LXr=o("regnet"),yXr=o(" \u2014 "),ote=a("a"),xXr=o("TFRegNetForImageClassification"),$Xr=o(" (RegNet model)"),kXr=l(),rw=a("li"),tLe=a("strong"),SXr=o("resnet"),RXr=o(" \u2014 "),rte=a("a"),PXr=o("TFResNetForImageClassification"),BXr=o(" (ResNet model)"),IXr=l(),tw=a("li"),aLe=a("strong"),NXr=o("segformer"),qXr=o(" \u2014 "),tte=a("a"),jXr=o("TFSegformerForImageClassification"),DXr=o(" (SegFormer model)"),GXr=l(),aw=a("li"),nLe=a("strong"),OXr=o("swin"),VXr=o(" \u2014 "),ate=a("a"),XXr=o("TFSwinForImageClassification"),zXr=o(" (Swin Transformer model)"),QXr=l(),nw=a("li"),sLe=a("strong"),WXr=o("vit"),UXr=o(" \u2014 "),nte=a("a"),HXr=o("TFViTForImageClassification"),JXr=o(" (ViT model)"),YXr=l(),F(sw.$$.fragment),Nro=l(),cm=a("h2"),lw=a("a"),lLe=a("span"),F(WS.$$.fragment),ZXr=l(),iLe=a("span"),KXr=o("TFAutoModelForSemanticSegmentation"),qro=l(),fr=a("div"),F(US.$$.fragment),ezr=l(),mm=a("p"),ozr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ste=a("a"),rzr=o("from_pretrained()"),tzr=o(" class method or the "),lte=a("a"),azr=o("from_config()"),nzr=o(` class
method.`),szr=l(),HS=a("p"),lzr=o("This class cannot be instantiated directly using "),dLe=a("code"),izr=o("__init__()"),dzr=o(" (throws an error)."),czr=l(),Yt=a("div"),F(JS.$$.fragment),mzr=l(),cLe=a("p"),fzr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gzr=l(),fm=a("p"),hzr=o(`Note:
Loading a model from its configuration file does `),mLe=a("strong"),uzr=o("not"),pzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),_zr=o("from_pretrained()"),bzr=o(" to load the model weights."),vzr=l(),F(iw.$$.fragment),Fzr=l(),Or=a("div"),F(YS.$$.fragment),Tzr=l(),fLe=a("p"),Mzr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ezr=l(),Pn=a("p"),Czr=o("The model class to instantiate is selected based on the "),gLe=a("code"),wzr=o("model_type"),Azr=o(` property of the config object (either
passed as an argument or loaded from `),hLe=a("code"),Lzr=o("pretrained_model_name_or_path"),yzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uLe=a("code"),xzr=o("pretrained_model_name_or_path"),$zr=o(":"),kzr=l(),gm=a("ul"),dw=a("li"),pLe=a("strong"),Szr=o("data2vec-vision"),Rzr=o(" \u2014 "),dte=a("a"),Pzr=o("TFData2VecVisionForSemanticSegmentation"),Bzr=o(" (Data2VecVision model)"),Izr=l(),cw=a("li"),_Le=a("strong"),Nzr=o("mobilevit"),qzr=o(" \u2014 "),cte=a("a"),jzr=o("TFMobileViTForSemanticSegmentation"),Dzr=o(" (MobileViT model)"),Gzr=l(),mw=a("li"),bLe=a("strong"),Ozr=o("segformer"),Vzr=o(" \u2014 "),mte=a("a"),Xzr=o("TFSegformerForSemanticSegmentation"),zzr=o(" (SegFormer model)"),Qzr=l(),F(fw.$$.fragment),jro=l(),hm=a("h2"),gw=a("a"),vLe=a("span"),F(ZS.$$.fragment),Wzr=l(),FLe=a("span"),Uzr=o("TFAutoModelForMaskedLM"),Dro=l(),gr=a("div"),F(KS.$$.fragment),Hzr=l(),um=a("p"),Jzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fte=a("a"),Yzr=o("from_pretrained()"),Zzr=o(" class method or the "),gte=a("a"),Kzr=o("from_config()"),eQr=o(` class
method.`),oQr=l(),eR=a("p"),rQr=o("This class cannot be instantiated directly using "),TLe=a("code"),tQr=o("__init__()"),aQr=o(" (throws an error)."),nQr=l(),Zt=a("div"),F(oR.$$.fragment),sQr=l(),MLe=a("p"),lQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iQr=l(),pm=a("p"),dQr=o(`Note:
Loading a model from its configuration file does `),ELe=a("strong"),cQr=o("not"),mQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=a("a"),fQr=o("from_pretrained()"),gQr=o(" to load the model weights."),hQr=l(),F(hw.$$.fragment),uQr=l(),Vr=a("div"),F(rR.$$.fragment),pQr=l(),CLe=a("p"),_Qr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bQr=l(),Bn=a("p"),vQr=o("The model class to instantiate is selected based on the "),wLe=a("code"),FQr=o("model_type"),TQr=o(` property of the config object (either
passed as an argument or loaded from `),ALe=a("code"),MQr=o("pretrained_model_name_or_path"),EQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=a("code"),CQr=o("pretrained_model_name_or_path"),wQr=o(":"),AQr=l(),ge=a("ul"),uw=a("li"),yLe=a("strong"),LQr=o("albert"),yQr=o(" \u2014 "),ute=a("a"),xQr=o("TFAlbertForMaskedLM"),$Qr=o(" (ALBERT model)"),kQr=l(),pw=a("li"),xLe=a("strong"),SQr=o("bert"),RQr=o(" \u2014 "),pte=a("a"),PQr=o("TFBertForMaskedLM"),BQr=o(" (BERT model)"),IQr=l(),_w=a("li"),$Le=a("strong"),NQr=o("camembert"),qQr=o(" \u2014 "),_te=a("a"),jQr=o("TFCamembertForMaskedLM"),DQr=o(" (CamemBERT model)"),GQr=l(),bw=a("li"),kLe=a("strong"),OQr=o("convbert"),VQr=o(" \u2014 "),bte=a("a"),XQr=o("TFConvBertForMaskedLM"),zQr=o(" (ConvBERT model)"),QQr=l(),vw=a("li"),SLe=a("strong"),WQr=o("deberta"),UQr=o(" \u2014 "),vte=a("a"),HQr=o("TFDebertaForMaskedLM"),JQr=o(" (DeBERTa model)"),YQr=l(),Fw=a("li"),RLe=a("strong"),ZQr=o("deberta-v2"),KQr=o(" \u2014 "),Fte=a("a"),eWr=o("TFDebertaV2ForMaskedLM"),oWr=o(" (DeBERTa-v2 model)"),rWr=l(),Tw=a("li"),PLe=a("strong"),tWr=o("distilbert"),aWr=o(" \u2014 "),Tte=a("a"),nWr=o("TFDistilBertForMaskedLM"),sWr=o(" (DistilBERT model)"),lWr=l(),Mw=a("li"),BLe=a("strong"),iWr=o("electra"),dWr=o(" \u2014 "),Mte=a("a"),cWr=o("TFElectraForMaskedLM"),mWr=o(" (ELECTRA model)"),fWr=l(),Ew=a("li"),ILe=a("strong"),gWr=o("flaubert"),hWr=o(" \u2014 "),Ete=a("a"),uWr=o("TFFlaubertWithLMHeadModel"),pWr=o(" (FlauBERT model)"),_Wr=l(),Cw=a("li"),NLe=a("strong"),bWr=o("funnel"),vWr=o(" \u2014 "),Cte=a("a"),FWr=o("TFFunnelForMaskedLM"),TWr=o(" (Funnel Transformer model)"),MWr=l(),ww=a("li"),qLe=a("strong"),EWr=o("layoutlm"),CWr=o(" \u2014 "),wte=a("a"),wWr=o("TFLayoutLMForMaskedLM"),AWr=o(" (LayoutLM model)"),LWr=l(),Aw=a("li"),jLe=a("strong"),yWr=o("longformer"),xWr=o(" \u2014 "),Ate=a("a"),$Wr=o("TFLongformerForMaskedLM"),kWr=o(" (Longformer model)"),SWr=l(),Lw=a("li"),DLe=a("strong"),RWr=o("mobilebert"),PWr=o(" \u2014 "),Lte=a("a"),BWr=o("TFMobileBertForMaskedLM"),IWr=o(" (MobileBERT model)"),NWr=l(),yw=a("li"),GLe=a("strong"),qWr=o("mpnet"),jWr=o(" \u2014 "),yte=a("a"),DWr=o("TFMPNetForMaskedLM"),GWr=o(" (MPNet model)"),OWr=l(),xw=a("li"),OLe=a("strong"),VWr=o("rembert"),XWr=o(" \u2014 "),xte=a("a"),zWr=o("TFRemBertForMaskedLM"),QWr=o(" (RemBERT model)"),WWr=l(),$w=a("li"),VLe=a("strong"),UWr=o("roberta"),HWr=o(" \u2014 "),$te=a("a"),JWr=o("TFRobertaForMaskedLM"),YWr=o(" (RoBERTa model)"),ZWr=l(),kw=a("li"),XLe=a("strong"),KWr=o("roformer"),eUr=o(" \u2014 "),kte=a("a"),oUr=o("TFRoFormerForMaskedLM"),rUr=o(" (RoFormer model)"),tUr=l(),Sw=a("li"),zLe=a("strong"),aUr=o("tapas"),nUr=o(" \u2014 "),Ste=a("a"),sUr=o("TFTapasForMaskedLM"),lUr=o(" (TAPAS model)"),iUr=l(),Rw=a("li"),QLe=a("strong"),dUr=o("xlm"),cUr=o(" \u2014 "),Rte=a("a"),mUr=o("TFXLMWithLMHeadModel"),fUr=o(" (XLM model)"),gUr=l(),Pw=a("li"),WLe=a("strong"),hUr=o("xlm-roberta"),uUr=o(" \u2014 "),Pte=a("a"),pUr=o("TFXLMRobertaForMaskedLM"),_Ur=o(" (XLM-RoBERTa model)"),bUr=l(),F(Bw.$$.fragment),Gro=l(),_m=a("h2"),Iw=a("a"),ULe=a("span"),F(tR.$$.fragment),vUr=l(),HLe=a("span"),FUr=o("TFAutoModelForSeq2SeqLM"),Oro=l(),hr=a("div"),F(aR.$$.fragment),TUr=l(),bm=a("p"),MUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Bte=a("a"),EUr=o("from_pretrained()"),CUr=o(" class method or the "),Ite=a("a"),wUr=o("from_config()"),AUr=o(` class
method.`),LUr=l(),nR=a("p"),yUr=o("This class cannot be instantiated directly using "),JLe=a("code"),xUr=o("__init__()"),$Ur=o(" (throws an error)."),kUr=l(),Kt=a("div"),F(sR.$$.fragment),SUr=l(),YLe=a("p"),RUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PUr=l(),vm=a("p"),BUr=o(`Note:
Loading a model from its configuration file does `),ZLe=a("strong"),IUr=o("not"),NUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=a("a"),qUr=o("from_pretrained()"),jUr=o(" to load the model weights."),DUr=l(),F(Nw.$$.fragment),GUr=l(),Xr=a("div"),F(lR.$$.fragment),OUr=l(),KLe=a("p"),VUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XUr=l(),In=a("p"),zUr=o("The model class to instantiate is selected based on the "),e8e=a("code"),QUr=o("model_type"),WUr=o(` property of the config object (either
passed as an argument or loaded from `),o8e=a("code"),UUr=o("pretrained_model_name_or_path"),HUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=a("code"),JUr=o("pretrained_model_name_or_path"),YUr=o(":"),ZUr=l(),ye=a("ul"),qw=a("li"),t8e=a("strong"),KUr=o("bart"),eHr=o(" \u2014 "),qte=a("a"),oHr=o("TFBartForConditionalGeneration"),rHr=o(" (BART model)"),tHr=l(),jw=a("li"),a8e=a("strong"),aHr=o("blenderbot"),nHr=o(" \u2014 "),jte=a("a"),sHr=o("TFBlenderbotForConditionalGeneration"),lHr=o(" (Blenderbot model)"),iHr=l(),Dw=a("li"),n8e=a("strong"),dHr=o("blenderbot-small"),cHr=o(" \u2014 "),Dte=a("a"),mHr=o("TFBlenderbotSmallForConditionalGeneration"),fHr=o(" (BlenderbotSmall model)"),gHr=l(),Gw=a("li"),s8e=a("strong"),hHr=o("encoder-decoder"),uHr=o(" \u2014 "),Gte=a("a"),pHr=o("TFEncoderDecoderModel"),_Hr=o(" (Encoder decoder model)"),bHr=l(),Ow=a("li"),l8e=a("strong"),vHr=o("led"),FHr=o(" \u2014 "),Ote=a("a"),THr=o("TFLEDForConditionalGeneration"),MHr=o(" (LED model)"),EHr=l(),Vw=a("li"),i8e=a("strong"),CHr=o("marian"),wHr=o(" \u2014 "),Vte=a("a"),AHr=o("TFMarianMTModel"),LHr=o(" (Marian model)"),yHr=l(),Xw=a("li"),d8e=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),Xte=a("a"),kHr=o("TFMBartForConditionalGeneration"),SHr=o(" (mBART model)"),RHr=l(),zw=a("li"),c8e=a("strong"),PHr=o("mt5"),BHr=o(" \u2014 "),zte=a("a"),IHr=o("TFMT5ForConditionalGeneration"),NHr=o(" (MT5 model)"),qHr=l(),Qw=a("li"),m8e=a("strong"),jHr=o("pegasus"),DHr=o(" \u2014 "),Qte=a("a"),GHr=o("TFPegasusForConditionalGeneration"),OHr=o(" (Pegasus model)"),VHr=l(),Ww=a("li"),f8e=a("strong"),XHr=o("t5"),zHr=o(" \u2014 "),Wte=a("a"),QHr=o("TFT5ForConditionalGeneration"),WHr=o(" (T5 model)"),UHr=l(),F(Uw.$$.fragment),Vro=l(),Fm=a("h2"),Hw=a("a"),g8e=a("span"),F(iR.$$.fragment),HHr=l(),h8e=a("span"),JHr=o("TFAutoModelForSequenceClassification"),Xro=l(),ur=a("div"),F(dR.$$.fragment),YHr=l(),Tm=a("p"),ZHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ute=a("a"),KHr=o("from_pretrained()"),eJr=o(" class method or the "),Hte=a("a"),oJr=o("from_config()"),rJr=o(` class
method.`),tJr=l(),cR=a("p"),aJr=o("This class cannot be instantiated directly using "),u8e=a("code"),nJr=o("__init__()"),sJr=o(" (throws an error)."),lJr=l(),ea=a("div"),F(mR.$$.fragment),iJr=l(),p8e=a("p"),dJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cJr=l(),Mm=a("p"),mJr=o(`Note:
Loading a model from its configuration file does `),_8e=a("strong"),fJr=o("not"),gJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=a("a"),hJr=o("from_pretrained()"),uJr=o(" to load the model weights."),pJr=l(),F(Jw.$$.fragment),_Jr=l(),zr=a("div"),F(fR.$$.fragment),bJr=l(),b8e=a("p"),vJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FJr=l(),Nn=a("p"),TJr=o("The model class to instantiate is selected based on the "),v8e=a("code"),MJr=o("model_type"),EJr=o(` property of the config object (either
passed as an argument or loaded from `),F8e=a("code"),CJr=o("pretrained_model_name_or_path"),wJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(":"),yJr=l(),re=a("ul"),Yw=a("li"),M8e=a("strong"),xJr=o("albert"),$Jr=o(" \u2014 "),Yte=a("a"),kJr=o("TFAlbertForSequenceClassification"),SJr=o(" (ALBERT model)"),RJr=l(),Zw=a("li"),E8e=a("strong"),PJr=o("bert"),BJr=o(" \u2014 "),Zte=a("a"),IJr=o("TFBertForSequenceClassification"),NJr=o(" (BERT model)"),qJr=l(),Kw=a("li"),C8e=a("strong"),jJr=o("camembert"),DJr=o(" \u2014 "),Kte=a("a"),GJr=o("TFCamembertForSequenceClassification"),OJr=o(" (CamemBERT model)"),VJr=l(),eA=a("li"),w8e=a("strong"),XJr=o("convbert"),zJr=o(" \u2014 "),eae=a("a"),QJr=o("TFConvBertForSequenceClassification"),WJr=o(" (ConvBERT model)"),UJr=l(),oA=a("li"),A8e=a("strong"),HJr=o("ctrl"),JJr=o(" \u2014 "),oae=a("a"),YJr=o("TFCTRLForSequenceClassification"),ZJr=o(" (CTRL model)"),KJr=l(),rA=a("li"),L8e=a("strong"),eYr=o("deberta"),oYr=o(" \u2014 "),rae=a("a"),rYr=o("TFDebertaForSequenceClassification"),tYr=o(" (DeBERTa model)"),aYr=l(),tA=a("li"),y8e=a("strong"),nYr=o("deberta-v2"),sYr=o(" \u2014 "),tae=a("a"),lYr=o("TFDebertaV2ForSequenceClassification"),iYr=o(" (DeBERTa-v2 model)"),dYr=l(),aA=a("li"),x8e=a("strong"),cYr=o("distilbert"),mYr=o(" \u2014 "),aae=a("a"),fYr=o("TFDistilBertForSequenceClassification"),gYr=o(" (DistilBERT model)"),hYr=l(),nA=a("li"),$8e=a("strong"),uYr=o("electra"),pYr=o(" \u2014 "),nae=a("a"),_Yr=o("TFElectraForSequenceClassification"),bYr=o(" (ELECTRA model)"),vYr=l(),sA=a("li"),k8e=a("strong"),FYr=o("flaubert"),TYr=o(" \u2014 "),sae=a("a"),MYr=o("TFFlaubertForSequenceClassification"),EYr=o(" (FlauBERT model)"),CYr=l(),lA=a("li"),S8e=a("strong"),wYr=o("funnel"),AYr=o(" \u2014 "),lae=a("a"),LYr=o("TFFunnelForSequenceClassification"),yYr=o(" (Funnel Transformer model)"),xYr=l(),iA=a("li"),R8e=a("strong"),$Yr=o("gpt2"),kYr=o(" \u2014 "),iae=a("a"),SYr=o("TFGPT2ForSequenceClassification"),RYr=o(" (OpenAI GPT-2 model)"),PYr=l(),dA=a("li"),P8e=a("strong"),BYr=o("gptj"),IYr=o(" \u2014 "),dae=a("a"),NYr=o("TFGPTJForSequenceClassification"),qYr=o(" (GPT-J model)"),jYr=l(),cA=a("li"),B8e=a("strong"),DYr=o("layoutlm"),GYr=o(" \u2014 "),cae=a("a"),OYr=o("TFLayoutLMForSequenceClassification"),VYr=o(" (LayoutLM model)"),XYr=l(),mA=a("li"),I8e=a("strong"),zYr=o("layoutlmv3"),QYr=o(" \u2014 "),mae=a("a"),WYr=o("TFLayoutLMv3ForSequenceClassification"),UYr=o(" (LayoutLMv3 model)"),HYr=l(),fA=a("li"),N8e=a("strong"),JYr=o("longformer"),YYr=o(" \u2014 "),fae=a("a"),ZYr=o("TFLongformerForSequenceClassification"),KYr=o(" (Longformer model)"),eZr=l(),gA=a("li"),q8e=a("strong"),oZr=o("mobilebert"),rZr=o(" \u2014 "),gae=a("a"),tZr=o("TFMobileBertForSequenceClassification"),aZr=o(" (MobileBERT model)"),nZr=l(),hA=a("li"),j8e=a("strong"),sZr=o("mpnet"),lZr=o(" \u2014 "),hae=a("a"),iZr=o("TFMPNetForSequenceClassification"),dZr=o(" (MPNet model)"),cZr=l(),uA=a("li"),D8e=a("strong"),mZr=o("openai-gpt"),fZr=o(" \u2014 "),uae=a("a"),gZr=o("TFOpenAIGPTForSequenceClassification"),hZr=o(" (OpenAI GPT model)"),uZr=l(),pA=a("li"),G8e=a("strong"),pZr=o("rembert"),_Zr=o(" \u2014 "),pae=a("a"),bZr=o("TFRemBertForSequenceClassification"),vZr=o(" (RemBERT model)"),FZr=l(),_A=a("li"),O8e=a("strong"),TZr=o("roberta"),MZr=o(" \u2014 "),_ae=a("a"),EZr=o("TFRobertaForSequenceClassification"),CZr=o(" (RoBERTa model)"),wZr=l(),bA=a("li"),V8e=a("strong"),AZr=o("roformer"),LZr=o(" \u2014 "),bae=a("a"),yZr=o("TFRoFormerForSequenceClassification"),xZr=o(" (RoFormer model)"),$Zr=l(),vA=a("li"),X8e=a("strong"),kZr=o("tapas"),SZr=o(" \u2014 "),vae=a("a"),RZr=o("TFTapasForSequenceClassification"),PZr=o(" (TAPAS model)"),BZr=l(),FA=a("li"),z8e=a("strong"),IZr=o("transfo-xl"),NZr=o(" \u2014 "),Fae=a("a"),qZr=o("TFTransfoXLForSequenceClassification"),jZr=o(" (Transformer-XL model)"),DZr=l(),TA=a("li"),Q8e=a("strong"),GZr=o("xlm"),OZr=o(" \u2014 "),Tae=a("a"),VZr=o("TFXLMForSequenceClassification"),XZr=o(" (XLM model)"),zZr=l(),MA=a("li"),W8e=a("strong"),QZr=o("xlm-roberta"),WZr=o(" \u2014 "),Mae=a("a"),UZr=o("TFXLMRobertaForSequenceClassification"),HZr=o(" (XLM-RoBERTa model)"),JZr=l(),EA=a("li"),U8e=a("strong"),YZr=o("xlnet"),ZZr=o(" \u2014 "),Eae=a("a"),KZr=o("TFXLNetForSequenceClassification"),eKr=o(" (XLNet model)"),oKr=l(),F(CA.$$.fragment),zro=l(),Em=a("h2"),wA=a("a"),H8e=a("span"),F(gR.$$.fragment),rKr=l(),J8e=a("span"),tKr=o("TFAutoModelForMultipleChoice"),Qro=l(),pr=a("div"),F(hR.$$.fragment),aKr=l(),Cm=a("p"),nKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cae=a("a"),sKr=o("from_pretrained()"),lKr=o(" class method or the "),wae=a("a"),iKr=o("from_config()"),dKr=o(` class
method.`),cKr=l(),uR=a("p"),mKr=o("This class cannot be instantiated directly using "),Y8e=a("code"),fKr=o("__init__()"),gKr=o(" (throws an error)."),hKr=l(),oa=a("div"),F(pR.$$.fragment),uKr=l(),Z8e=a("p"),pKr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Kr=l(),wm=a("p"),bKr=o(`Note:
Loading a model from its configuration file does `),K8e=a("strong"),vKr=o("not"),FKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aae=a("a"),TKr=o("from_pretrained()"),MKr=o(" to load the model weights."),EKr=l(),F(AA.$$.fragment),CKr=l(),Qr=a("div"),F(_R.$$.fragment),wKr=l(),eye=a("p"),AKr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LKr=l(),qn=a("p"),yKr=o("The model class to instantiate is selected based on the "),oye=a("code"),xKr=o("model_type"),$Kr=o(` property of the config object (either
passed as an argument or loaded from `),rye=a("code"),kKr=o("pretrained_model_name_or_path"),SKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tye=a("code"),RKr=o("pretrained_model_name_or_path"),PKr=o(":"),BKr=l(),ve=a("ul"),LA=a("li"),aye=a("strong"),IKr=o("albert"),NKr=o(" \u2014 "),Lae=a("a"),qKr=o("TFAlbertForMultipleChoice"),jKr=o(" (ALBERT model)"),DKr=l(),yA=a("li"),nye=a("strong"),GKr=o("bert"),OKr=o(" \u2014 "),yae=a("a"),VKr=o("TFBertForMultipleChoice"),XKr=o(" (BERT model)"),zKr=l(),xA=a("li"),sye=a("strong"),QKr=o("camembert"),WKr=o(" \u2014 "),xae=a("a"),UKr=o("TFCamembertForMultipleChoice"),HKr=o(" (CamemBERT model)"),JKr=l(),$A=a("li"),lye=a("strong"),YKr=o("convbert"),ZKr=o(" \u2014 "),$ae=a("a"),KKr=o("TFConvBertForMultipleChoice"),eet=o(" (ConvBERT model)"),oet=l(),kA=a("li"),iye=a("strong"),ret=o("distilbert"),tet=o(" \u2014 "),kae=a("a"),aet=o("TFDistilBertForMultipleChoice"),net=o(" (DistilBERT model)"),set=l(),SA=a("li"),dye=a("strong"),iet=o("electra"),det=o(" \u2014 "),Sae=a("a"),cet=o("TFElectraForMultipleChoice"),met=o(" (ELECTRA model)"),fet=l(),RA=a("li"),cye=a("strong"),get=o("flaubert"),het=o(" \u2014 "),Rae=a("a"),uet=o("TFFlaubertForMultipleChoice"),pet=o(" (FlauBERT model)"),_et=l(),PA=a("li"),mye=a("strong"),bet=o("funnel"),vet=o(" \u2014 "),Pae=a("a"),Fet=o("TFFunnelForMultipleChoice"),Tet=o(" (Funnel Transformer model)"),Met=l(),BA=a("li"),fye=a("strong"),Eet=o("longformer"),Cet=o(" \u2014 "),Bae=a("a"),wet=o("TFLongformerForMultipleChoice"),Aet=o(" (Longformer model)"),Let=l(),IA=a("li"),gye=a("strong"),yet=o("mobilebert"),xet=o(" \u2014 "),Iae=a("a"),$et=o("TFMobileBertForMultipleChoice"),ket=o(" (MobileBERT model)"),Set=l(),NA=a("li"),hye=a("strong"),Ret=o("mpnet"),Pet=o(" \u2014 "),Nae=a("a"),Bet=o("TFMPNetForMultipleChoice"),Iet=o(" (MPNet model)"),Net=l(),qA=a("li"),uye=a("strong"),qet=o("rembert"),jet=o(" \u2014 "),qae=a("a"),Det=o("TFRemBertForMultipleChoice"),Get=o(" (RemBERT model)"),Oet=l(),jA=a("li"),pye=a("strong"),Vet=o("roberta"),Xet=o(" \u2014 "),jae=a("a"),zet=o("TFRobertaForMultipleChoice"),Qet=o(" (RoBERTa model)"),Wet=l(),DA=a("li"),_ye=a("strong"),Uet=o("roformer"),Het=o(" \u2014 "),Dae=a("a"),Jet=o("TFRoFormerForMultipleChoice"),Yet=o(" (RoFormer model)"),Zet=l(),GA=a("li"),bye=a("strong"),Ket=o("xlm"),eot=o(" \u2014 "),Gae=a("a"),oot=o("TFXLMForMultipleChoice"),rot=o(" (XLM model)"),tot=l(),OA=a("li"),vye=a("strong"),aot=o("xlm-roberta"),not=o(" \u2014 "),Oae=a("a"),sot=o("TFXLMRobertaForMultipleChoice"),lot=o(" (XLM-RoBERTa model)"),iot=l(),VA=a("li"),Fye=a("strong"),dot=o("xlnet"),cot=o(" \u2014 "),Vae=a("a"),mot=o("TFXLNetForMultipleChoice"),fot=o(" (XLNet model)"),got=l(),F(XA.$$.fragment),Wro=l(),Am=a("h2"),zA=a("a"),Tye=a("span"),F(bR.$$.fragment),hot=l(),Mye=a("span"),uot=o("TFAutoModelForNextSentencePrediction"),Uro=l(),_r=a("div"),F(vR.$$.fragment),pot=l(),Lm=a("p"),_ot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xae=a("a"),bot=o("from_pretrained()"),vot=o(" class method or the "),zae=a("a"),Fot=o("from_config()"),Tot=o(` class
method.`),Mot=l(),FR=a("p"),Eot=o("This class cannot be instantiated directly using "),Eye=a("code"),Cot=o("__init__()"),wot=o(" (throws an error)."),Aot=l(),ra=a("div"),F(TR.$$.fragment),Lot=l(),Cye=a("p"),yot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xot=l(),ym=a("p"),$ot=o(`Note:
Loading a model from its configuration file does `),wye=a("strong"),kot=o("not"),Sot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=a("a"),Rot=o("from_pretrained()"),Pot=o(" to load the model weights."),Bot=l(),F(QA.$$.fragment),Iot=l(),Wr=a("div"),F(MR.$$.fragment),Not=l(),Aye=a("p"),qot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jot=l(),jn=a("p"),Dot=o("The model class to instantiate is selected based on the "),Lye=a("code"),Got=o("model_type"),Oot=o(` property of the config object (either
passed as an argument or loaded from `),yye=a("code"),Vot=o("pretrained_model_name_or_path"),Xot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=a("code"),zot=o("pretrained_model_name_or_path"),Qot=o(":"),Wot=l(),ER=a("ul"),WA=a("li"),$ye=a("strong"),Uot=o("bert"),Hot=o(" \u2014 "),Wae=a("a"),Jot=o("TFBertForNextSentencePrediction"),Yot=o(" (BERT model)"),Zot=l(),UA=a("li"),kye=a("strong"),Kot=o("mobilebert"),ert=o(" \u2014 "),Uae=a("a"),ort=o("TFMobileBertForNextSentencePrediction"),rrt=o(" (MobileBERT model)"),trt=l(),F(HA.$$.fragment),Hro=l(),xm=a("h2"),JA=a("a"),Sye=a("span"),F(CR.$$.fragment),art=l(),Rye=a("span"),nrt=o("TFAutoModelForTableQuestionAnswering"),Jro=l(),br=a("div"),F(wR.$$.fragment),srt=l(),$m=a("p"),lrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Hae=a("a"),irt=o("from_pretrained()"),drt=o(" class method or the "),Jae=a("a"),crt=o("from_config()"),mrt=o(` class
method.`),frt=l(),AR=a("p"),grt=o("This class cannot be instantiated directly using "),Pye=a("code"),hrt=o("__init__()"),urt=o(" (throws an error)."),prt=l(),ta=a("div"),F(LR.$$.fragment),_rt=l(),Bye=a("p"),brt=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vrt=l(),km=a("p"),Frt=o(`Note:
Loading a model from its configuration file does `),Iye=a("strong"),Trt=o("not"),Mrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yae=a("a"),Ert=o("from_pretrained()"),Crt=o(" to load the model weights."),wrt=l(),F(YA.$$.fragment),Art=l(),Ur=a("div"),F(yR.$$.fragment),Lrt=l(),Nye=a("p"),yrt=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xrt=l(),Dn=a("p"),$rt=o("The model class to instantiate is selected based on the "),qye=a("code"),krt=o("model_type"),Srt=o(` property of the config object (either
passed as an argument or loaded from `),jye=a("code"),Rrt=o("pretrained_model_name_or_path"),Prt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=a("code"),Brt=o("pretrained_model_name_or_path"),Irt=o(":"),Nrt=l(),Gye=a("ul"),ZA=a("li"),Oye=a("strong"),qrt=o("tapas"),jrt=o(" \u2014 "),Zae=a("a"),Drt=o("TFTapasForQuestionAnswering"),Grt=o(" (TAPAS model)"),Ort=l(),F(KA.$$.fragment),Yro=l(),Sm=a("h2"),e6=a("a"),Vye=a("span"),F(xR.$$.fragment),Vrt=l(),Xye=a("span"),Xrt=o("TFAutoModelForDocumentQuestionAnswering"),Zro=l(),vr=a("div"),F($R.$$.fragment),zrt=l(),Rm=a("p"),Qrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Kae=a("a"),Wrt=o("from_pretrained()"),Urt=o(" class method or the "),ene=a("a"),Hrt=o("from_config()"),Jrt=o(` class
method.`),Yrt=l(),kR=a("p"),Zrt=o("This class cannot be instantiated directly using "),zye=a("code"),Krt=o("__init__()"),ett=o(" (throws an error)."),ott=l(),aa=a("div"),F(SR.$$.fragment),rtt=l(),Qye=a("p"),ttt=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),att=l(),Pm=a("p"),ntt=o(`Note:
Loading a model from its configuration file does `),Wye=a("strong"),stt=o("not"),ltt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),one=a("a"),itt=o("from_pretrained()"),dtt=o(" to load the model weights."),ctt=l(),F(o6.$$.fragment),mtt=l(),Hr=a("div"),F(RR.$$.fragment),ftt=l(),Uye=a("p"),gtt=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),htt=l(),Gn=a("p"),utt=o("The model class to instantiate is selected based on the "),Hye=a("code"),ptt=o("model_type"),_tt=o(` property of the config object (either
passed as an argument or loaded from `),Jye=a("code"),btt=o("pretrained_model_name_or_path"),vtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yye=a("code"),Ftt=o("pretrained_model_name_or_path"),Ttt=o(":"),Mtt=l(),Zye=a("ul"),r6=a("li"),Kye=a("strong"),Ett=o("layoutlm"),Ctt=o(" \u2014 "),rne=a("a"),wtt=o("TFLayoutLMForQuestionAnswering"),Att=o(" (LayoutLM model)"),Ltt=l(),F(t6.$$.fragment),Kro=l(),Bm=a("h2"),a6=a("a"),e9e=a("span"),F(PR.$$.fragment),ytt=l(),o9e=a("span"),xtt=o("TFAutoModelForTokenClassification"),eto=l(),Fr=a("div"),F(BR.$$.fragment),$tt=l(),Im=a("p"),ktt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tne=a("a"),Stt=o("from_pretrained()"),Rtt=o(" class method or the "),ane=a("a"),Ptt=o("from_config()"),Btt=o(` class
method.`),Itt=l(),IR=a("p"),Ntt=o("This class cannot be instantiated directly using "),r9e=a("code"),qtt=o("__init__()"),jtt=o(" (throws an error)."),Dtt=l(),na=a("div"),F(NR.$$.fragment),Gtt=l(),t9e=a("p"),Ott=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vtt=l(),Nm=a("p"),Xtt=o(`Note:
Loading a model from its configuration file does `),a9e=a("strong"),ztt=o("not"),Qtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=a("a"),Wtt=o("from_pretrained()"),Utt=o(" to load the model weights."),Htt=l(),F(n6.$$.fragment),Jtt=l(),Jr=a("div"),F(qR.$$.fragment),Ytt=l(),n9e=a("p"),Ztt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ktt=l(),On=a("p"),eat=o("The model class to instantiate is selected based on the "),s9e=a("code"),oat=o("model_type"),rat=o(` property of the config object (either
passed as an argument or loaded from `),l9e=a("code"),tat=o("pretrained_model_name_or_path"),aat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=a("code"),nat=o("pretrained_model_name_or_path"),sat=o(":"),lat=l(),ce=a("ul"),s6=a("li"),d9e=a("strong"),iat=o("albert"),dat=o(" \u2014 "),sne=a("a"),cat=o("TFAlbertForTokenClassification"),mat=o(" (ALBERT model)"),fat=l(),l6=a("li"),c9e=a("strong"),gat=o("bert"),hat=o(" \u2014 "),lne=a("a"),uat=o("TFBertForTokenClassification"),pat=o(" (BERT model)"),_at=l(),i6=a("li"),m9e=a("strong"),bat=o("camembert"),vat=o(" \u2014 "),ine=a("a"),Fat=o("TFCamembertForTokenClassification"),Tat=o(" (CamemBERT model)"),Mat=l(),d6=a("li"),f9e=a("strong"),Eat=o("convbert"),Cat=o(" \u2014 "),dne=a("a"),wat=o("TFConvBertForTokenClassification"),Aat=o(" (ConvBERT model)"),Lat=l(),c6=a("li"),g9e=a("strong"),yat=o("deberta"),xat=o(" \u2014 "),cne=a("a"),$at=o("TFDebertaForTokenClassification"),kat=o(" (DeBERTa model)"),Sat=l(),m6=a("li"),h9e=a("strong"),Rat=o("deberta-v2"),Pat=o(" \u2014 "),mne=a("a"),Bat=o("TFDebertaV2ForTokenClassification"),Iat=o(" (DeBERTa-v2 model)"),Nat=l(),f6=a("li"),u9e=a("strong"),qat=o("distilbert"),jat=o(" \u2014 "),fne=a("a"),Dat=o("TFDistilBertForTokenClassification"),Gat=o(" (DistilBERT model)"),Oat=l(),g6=a("li"),p9e=a("strong"),Vat=o("electra"),Xat=o(" \u2014 "),gne=a("a"),zat=o("TFElectraForTokenClassification"),Qat=o(" (ELECTRA model)"),Wat=l(),h6=a("li"),_9e=a("strong"),Uat=o("flaubert"),Hat=o(" \u2014 "),hne=a("a"),Jat=o("TFFlaubertForTokenClassification"),Yat=o(" (FlauBERT model)"),Zat=l(),u6=a("li"),b9e=a("strong"),Kat=o("funnel"),ent=o(" \u2014 "),une=a("a"),ont=o("TFFunnelForTokenClassification"),rnt=o(" (Funnel Transformer model)"),tnt=l(),p6=a("li"),v9e=a("strong"),ant=o("layoutlm"),nnt=o(" \u2014 "),pne=a("a"),snt=o("TFLayoutLMForTokenClassification"),lnt=o(" (LayoutLM model)"),int=l(),_6=a("li"),F9e=a("strong"),dnt=o("layoutlmv3"),cnt=o(" \u2014 "),_ne=a("a"),mnt=o("TFLayoutLMv3ForTokenClassification"),fnt=o(" (LayoutLMv3 model)"),gnt=l(),b6=a("li"),T9e=a("strong"),hnt=o("longformer"),unt=o(" \u2014 "),bne=a("a"),pnt=o("TFLongformerForTokenClassification"),_nt=o(" (Longformer model)"),bnt=l(),v6=a("li"),M9e=a("strong"),vnt=o("mobilebert"),Fnt=o(" \u2014 "),vne=a("a"),Tnt=o("TFMobileBertForTokenClassification"),Mnt=o(" (MobileBERT model)"),Ent=l(),F6=a("li"),E9e=a("strong"),Cnt=o("mpnet"),wnt=o(" \u2014 "),Fne=a("a"),Ant=o("TFMPNetForTokenClassification"),Lnt=o(" (MPNet model)"),ynt=l(),T6=a("li"),C9e=a("strong"),xnt=o("rembert"),$nt=o(" \u2014 "),Tne=a("a"),knt=o("TFRemBertForTokenClassification"),Snt=o(" (RemBERT model)"),Rnt=l(),M6=a("li"),w9e=a("strong"),Pnt=o("roberta"),Bnt=o(" \u2014 "),Mne=a("a"),Int=o("TFRobertaForTokenClassification"),Nnt=o(" (RoBERTa model)"),qnt=l(),E6=a("li"),A9e=a("strong"),jnt=o("roformer"),Dnt=o(" \u2014 "),Ene=a("a"),Gnt=o("TFRoFormerForTokenClassification"),Ont=o(" (RoFormer model)"),Vnt=l(),C6=a("li"),L9e=a("strong"),Xnt=o("xlm"),znt=o(" \u2014 "),Cne=a("a"),Qnt=o("TFXLMForTokenClassification"),Wnt=o(" (XLM model)"),Unt=l(),w6=a("li"),y9e=a("strong"),Hnt=o("xlm-roberta"),Jnt=o(" \u2014 "),wne=a("a"),Ynt=o("TFXLMRobertaForTokenClassification"),Znt=o(" (XLM-RoBERTa model)"),Knt=l(),A6=a("li"),x9e=a("strong"),est=o("xlnet"),ost=o(" \u2014 "),Ane=a("a"),rst=o("TFXLNetForTokenClassification"),tst=o(" (XLNet model)"),ast=l(),F(L6.$$.fragment),oto=l(),qm=a("h2"),y6=a("a"),$9e=a("span"),F(jR.$$.fragment),nst=l(),k9e=a("span"),sst=o("TFAutoModelForQuestionAnswering"),rto=l(),Tr=a("div"),F(DR.$$.fragment),lst=l(),jm=a("p"),ist=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lne=a("a"),dst=o("from_pretrained()"),cst=o(" class method or the "),yne=a("a"),mst=o("from_config()"),fst=o(` class
method.`),gst=l(),GR=a("p"),hst=o("This class cannot be instantiated directly using "),S9e=a("code"),ust=o("__init__()"),pst=o(" (throws an error)."),_st=l(),sa=a("div"),F(OR.$$.fragment),bst=l(),R9e=a("p"),vst=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fst=l(),Dm=a("p"),Tst=o(`Note:
Loading a model from its configuration file does `),P9e=a("strong"),Mst=o("not"),Est=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=a("a"),Cst=o("from_pretrained()"),wst=o(" to load the model weights."),Ast=l(),F(x6.$$.fragment),Lst=l(),Yr=a("div"),F(VR.$$.fragment),yst=l(),B9e=a("p"),xst=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$st=l(),Vn=a("p"),kst=o("The model class to instantiate is selected based on the "),I9e=a("code"),Sst=o("model_type"),Rst=o(` property of the config object (either
passed as an argument or loaded from `),N9e=a("code"),Pst=o("pretrained_model_name_or_path"),Bst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q9e=a("code"),Ist=o("pretrained_model_name_or_path"),Nst=o(":"),qst=l(),me=a("ul"),$6=a("li"),j9e=a("strong"),jst=o("albert"),Dst=o(" \u2014 "),$ne=a("a"),Gst=o("TFAlbertForQuestionAnswering"),Ost=o(" (ALBERT model)"),Vst=l(),k6=a("li"),D9e=a("strong"),Xst=o("bert"),zst=o(" \u2014 "),kne=a("a"),Qst=o("TFBertForQuestionAnswering"),Wst=o(" (BERT model)"),Ust=l(),S6=a("li"),G9e=a("strong"),Hst=o("camembert"),Jst=o(" \u2014 "),Sne=a("a"),Yst=o("TFCamembertForQuestionAnswering"),Zst=o(" (CamemBERT model)"),Kst=l(),R6=a("li"),O9e=a("strong"),elt=o("convbert"),olt=o(" \u2014 "),Rne=a("a"),rlt=o("TFConvBertForQuestionAnswering"),tlt=o(" (ConvBERT model)"),alt=l(),P6=a("li"),V9e=a("strong"),nlt=o("deberta"),slt=o(" \u2014 "),Pne=a("a"),llt=o("TFDebertaForQuestionAnswering"),ilt=o(" (DeBERTa model)"),dlt=l(),B6=a("li"),X9e=a("strong"),clt=o("deberta-v2"),mlt=o(" \u2014 "),Bne=a("a"),flt=o("TFDebertaV2ForQuestionAnswering"),glt=o(" (DeBERTa-v2 model)"),hlt=l(),I6=a("li"),z9e=a("strong"),ult=o("distilbert"),plt=o(" \u2014 "),Ine=a("a"),_lt=o("TFDistilBertForQuestionAnswering"),blt=o(" (DistilBERT model)"),vlt=l(),N6=a("li"),Q9e=a("strong"),Flt=o("electra"),Tlt=o(" \u2014 "),Nne=a("a"),Mlt=o("TFElectraForQuestionAnswering"),Elt=o(" (ELECTRA model)"),Clt=l(),q6=a("li"),W9e=a("strong"),wlt=o("flaubert"),Alt=o(" \u2014 "),qne=a("a"),Llt=o("TFFlaubertForQuestionAnsweringSimple"),ylt=o(" (FlauBERT model)"),xlt=l(),j6=a("li"),U9e=a("strong"),$lt=o("funnel"),klt=o(" \u2014 "),jne=a("a"),Slt=o("TFFunnelForQuestionAnswering"),Rlt=o(" (Funnel Transformer model)"),Plt=l(),D6=a("li"),H9e=a("strong"),Blt=o("gptj"),Ilt=o(" \u2014 "),Dne=a("a"),Nlt=o("TFGPTJForQuestionAnswering"),qlt=o(" (GPT-J model)"),jlt=l(),G6=a("li"),J9e=a("strong"),Dlt=o("layoutlmv3"),Glt=o(" \u2014 "),Gne=a("a"),Olt=o("TFLayoutLMv3ForQuestionAnswering"),Vlt=o(" (LayoutLMv3 model)"),Xlt=l(),O6=a("li"),Y9e=a("strong"),zlt=o("longformer"),Qlt=o(" \u2014 "),One=a("a"),Wlt=o("TFLongformerForQuestionAnswering"),Ult=o(" (Longformer model)"),Hlt=l(),V6=a("li"),Z9e=a("strong"),Jlt=o("mobilebert"),Ylt=o(" \u2014 "),Vne=a("a"),Zlt=o("TFMobileBertForQuestionAnswering"),Klt=o(" (MobileBERT model)"),eit=l(),X6=a("li"),K9e=a("strong"),oit=o("mpnet"),rit=o(" \u2014 "),Xne=a("a"),tit=o("TFMPNetForQuestionAnswering"),ait=o(" (MPNet model)"),nit=l(),z6=a("li"),exe=a("strong"),sit=o("rembert"),lit=o(" \u2014 "),zne=a("a"),iit=o("TFRemBertForQuestionAnswering"),dit=o(" (RemBERT model)"),cit=l(),Q6=a("li"),oxe=a("strong"),mit=o("roberta"),fit=o(" \u2014 "),Qne=a("a"),git=o("TFRobertaForQuestionAnswering"),hit=o(" (RoBERTa model)"),uit=l(),W6=a("li"),rxe=a("strong"),pit=o("roformer"),_it=o(" \u2014 "),Wne=a("a"),bit=o("TFRoFormerForQuestionAnswering"),vit=o(" (RoFormer model)"),Fit=l(),U6=a("li"),txe=a("strong"),Tit=o("xlm"),Mit=o(" \u2014 "),Une=a("a"),Eit=o("TFXLMForQuestionAnsweringSimple"),Cit=o(" (XLM model)"),wit=l(),H6=a("li"),axe=a("strong"),Ait=o("xlm-roberta"),Lit=o(" \u2014 "),Hne=a("a"),yit=o("TFXLMRobertaForQuestionAnswering"),xit=o(" (XLM-RoBERTa model)"),$it=l(),J6=a("li"),nxe=a("strong"),kit=o("xlnet"),Sit=o(" \u2014 "),Jne=a("a"),Rit=o("TFXLNetForQuestionAnsweringSimple"),Pit=o(" (XLNet model)"),Bit=l(),F(Y6.$$.fragment),tto=l(),Gm=a("h2"),Z6=a("a"),sxe=a("span"),F(XR.$$.fragment),Iit=l(),lxe=a("span"),Nit=o("TFAutoModelForVision2Seq"),ato=l(),Mr=a("div"),F(zR.$$.fragment),qit=l(),Om=a("p"),jit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yne=a("a"),Dit=o("from_pretrained()"),Git=o(" class method or the "),Zne=a("a"),Oit=o("from_config()"),Vit=o(` class
method.`),Xit=l(),QR=a("p"),zit=o("This class cannot be instantiated directly using "),ixe=a("code"),Qit=o("__init__()"),Wit=o(" (throws an error)."),Uit=l(),la=a("div"),F(WR.$$.fragment),Hit=l(),dxe=a("p"),Jit=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yit=l(),Vm=a("p"),Zit=o(`Note:
Loading a model from its configuration file does `),cxe=a("strong"),Kit=o("not"),edt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kne=a("a"),odt=o("from_pretrained()"),rdt=o(" to load the model weights."),tdt=l(),F(K6.$$.fragment),adt=l(),Zr=a("div"),F(UR.$$.fragment),ndt=l(),mxe=a("p"),sdt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ldt=l(),Xn=a("p"),idt=o("The model class to instantiate is selected based on the "),fxe=a("code"),ddt=o("model_type"),cdt=o(` property of the config object (either
passed as an argument or loaded from `),gxe=a("code"),mdt=o("pretrained_model_name_or_path"),fdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hxe=a("code"),gdt=o("pretrained_model_name_or_path"),hdt=o(":"),udt=l(),uxe=a("ul"),e7=a("li"),pxe=a("strong"),pdt=o("vision-encoder-decoder"),_dt=o(" \u2014 "),ese=a("a"),bdt=o("TFVisionEncoderDecoderModel"),vdt=o(" (Vision Encoder decoder model)"),Fdt=l(),F(o7.$$.fragment),nto=l(),Xm=a("h2"),r7=a("a"),_xe=a("span"),F(HR.$$.fragment),Tdt=l(),bxe=a("span"),Mdt=o("TFAutoModelForSpeechSeq2Seq"),sto=l(),Er=a("div"),F(JR.$$.fragment),Edt=l(),zm=a("p"),Cdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ose=a("a"),wdt=o("from_pretrained()"),Adt=o(" class method or the "),rse=a("a"),Ldt=o("from_config()"),ydt=o(` class
method.`),xdt=l(),YR=a("p"),$dt=o("This class cannot be instantiated directly using "),vxe=a("code"),kdt=o("__init__()"),Sdt=o(" (throws an error)."),Rdt=l(),ia=a("div"),F(ZR.$$.fragment),Pdt=l(),Fxe=a("p"),Bdt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Idt=l(),Qm=a("p"),Ndt=o(`Note:
Loading a model from its configuration file does `),Txe=a("strong"),qdt=o("not"),jdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=a("a"),Ddt=o("from_pretrained()"),Gdt=o(" to load the model weights."),Odt=l(),F(t7.$$.fragment),Vdt=l(),Kr=a("div"),F(KR.$$.fragment),Xdt=l(),Mxe=a("p"),zdt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qdt=l(),zn=a("p"),Wdt=o("The model class to instantiate is selected based on the "),Exe=a("code"),Udt=o("model_type"),Hdt=o(` property of the config object (either
passed as an argument or loaded from `),Cxe=a("code"),Jdt=o("pretrained_model_name_or_path"),Ydt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wxe=a("code"),Zdt=o("pretrained_model_name_or_path"),Kdt=o(":"),ect=l(),eP=a("ul"),a7=a("li"),Axe=a("strong"),oct=o("speech_to_text"),rct=o(" \u2014 "),ase=a("a"),tct=o("TFSpeech2TextForConditionalGeneration"),act=o(" (Speech2Text model)"),nct=l(),n7=a("li"),Lxe=a("strong"),sct=o("whisper"),lct=o(" \u2014 "),nse=a("a"),ict=o("TFWhisperForConditionalGeneration"),dct=o(" (Whisper model)"),cct=l(),F(s7.$$.fragment),lto=l(),Wm=a("h2"),l7=a("a"),yxe=a("span"),F(oP.$$.fragment),mct=l(),xxe=a("span"),fct=o("FlaxAutoModel"),ito=l(),Cr=a("div"),F(rP.$$.fragment),gct=l(),Um=a("p"),hct=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sse=a("a"),uct=o("from_pretrained()"),pct=o(" class method or the "),lse=a("a"),_ct=o("from_config()"),bct=o(` class
method.`),vct=l(),tP=a("p"),Fct=o("This class cannot be instantiated directly using "),$xe=a("code"),Tct=o("__init__()"),Mct=o(" (throws an error)."),Ect=l(),da=a("div"),F(aP.$$.fragment),Cct=l(),kxe=a("p"),wct=o("Instantiates one of the base model classes of the library from a configuration."),Act=l(),Hm=a("p"),Lct=o(`Note:
Loading a model from its configuration file does `),Sxe=a("strong"),yct=o("not"),xct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=a("a"),$ct=o("from_pretrained()"),kct=o(" to load the model weights."),Sct=l(),F(i7.$$.fragment),Rct=l(),et=a("div"),F(nP.$$.fragment),Pct=l(),Rxe=a("p"),Bct=o("Instantiate one of the base model classes of the library from a pretrained model."),Ict=l(),Qn=a("p"),Nct=o("The model class to instantiate is selected based on the "),Pxe=a("code"),qct=o("model_type"),jct=o(` property of the config object (either
passed as an argument or loaded from `),Bxe=a("code"),Dct=o("pretrained_model_name_or_path"),Gct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ixe=a("code"),Oct=o("pretrained_model_name_or_path"),Vct=o(":"),Xct=l(),te=a("ul"),d7=a("li"),Nxe=a("strong"),zct=o("albert"),Qct=o(" \u2014 "),dse=a("a"),Wct=o("FlaxAlbertModel"),Uct=o(" (ALBERT model)"),Hct=l(),c7=a("li"),qxe=a("strong"),Jct=o("bart"),Yct=o(" \u2014 "),cse=a("a"),Zct=o("FlaxBartModel"),Kct=o(" (BART model)"),emt=l(),m7=a("li"),jxe=a("strong"),omt=o("beit"),rmt=o(" \u2014 "),mse=a("a"),tmt=o("FlaxBeitModel"),amt=o(" (BEiT model)"),nmt=l(),f7=a("li"),Dxe=a("strong"),smt=o("bert"),lmt=o(" \u2014 "),fse=a("a"),imt=o("FlaxBertModel"),dmt=o(" (BERT model)"),cmt=l(),g7=a("li"),Gxe=a("strong"),mmt=o("big_bird"),fmt=o(" \u2014 "),gse=a("a"),gmt=o("FlaxBigBirdModel"),hmt=o(" (BigBird model)"),umt=l(),h7=a("li"),Oxe=a("strong"),pmt=o("blenderbot"),_mt=o(" \u2014 "),hse=a("a"),bmt=o("FlaxBlenderbotModel"),vmt=o(" (Blenderbot model)"),Fmt=l(),u7=a("li"),Vxe=a("strong"),Tmt=o("blenderbot-small"),Mmt=o(" \u2014 "),use=a("a"),Emt=o("FlaxBlenderbotSmallModel"),Cmt=o(" (BlenderbotSmall model)"),wmt=l(),p7=a("li"),Xxe=a("strong"),Amt=o("clip"),Lmt=o(" \u2014 "),pse=a("a"),ymt=o("FlaxCLIPModel"),xmt=o(" (CLIP model)"),$mt=l(),_7=a("li"),zxe=a("strong"),kmt=o("distilbert"),Smt=o(" \u2014 "),_se=a("a"),Rmt=o("FlaxDistilBertModel"),Pmt=o(" (DistilBERT model)"),Bmt=l(),b7=a("li"),Qxe=a("strong"),Imt=o("electra"),Nmt=o(" \u2014 "),bse=a("a"),qmt=o("FlaxElectraModel"),jmt=o(" (ELECTRA model)"),Dmt=l(),v7=a("li"),Wxe=a("strong"),Gmt=o("gpt2"),Omt=o(" \u2014 "),vse=a("a"),Vmt=o("FlaxGPT2Model"),Xmt=o(" (OpenAI GPT-2 model)"),zmt=l(),F7=a("li"),Uxe=a("strong"),Qmt=o("gpt_neo"),Wmt=o(" \u2014 "),Fse=a("a"),Umt=o("FlaxGPTNeoModel"),Hmt=o(" (GPT Neo model)"),Jmt=l(),T7=a("li"),Hxe=a("strong"),Ymt=o("gptj"),Zmt=o(" \u2014 "),Tse=a("a"),Kmt=o("FlaxGPTJModel"),eft=o(" (GPT-J model)"),oft=l(),M7=a("li"),Jxe=a("strong"),rft=o("longt5"),tft=o(" \u2014 "),Mse=a("a"),aft=o("FlaxLongT5Model"),nft=o(" (LongT5 model)"),sft=l(),E7=a("li"),Yxe=a("strong"),lft=o("marian"),ift=o(" \u2014 "),Ese=a("a"),dft=o("FlaxMarianModel"),cft=o(" (Marian model)"),mft=l(),C7=a("li"),Zxe=a("strong"),fft=o("mbart"),gft=o(" \u2014 "),Cse=a("a"),hft=o("FlaxMBartModel"),uft=o(" (mBART model)"),pft=l(),w7=a("li"),Kxe=a("strong"),_ft=o("mt5"),bft=o(" \u2014 "),wse=a("a"),vft=o("FlaxMT5Model"),Fft=o(" (MT5 model)"),Tft=l(),A7=a("li"),e$e=a("strong"),Mft=o("opt"),Eft=o(" \u2014 "),Ase=a("a"),Cft=o("FlaxOPTModel"),wft=o(" (OPT model)"),Aft=l(),L7=a("li"),o$e=a("strong"),Lft=o("pegasus"),yft=o(" \u2014 "),Lse=a("a"),xft=o("FlaxPegasusModel"),$ft=o(" (Pegasus model)"),kft=l(),y7=a("li"),r$e=a("strong"),Sft=o("roberta"),Rft=o(" \u2014 "),yse=a("a"),Pft=o("FlaxRobertaModel"),Bft=o(" (RoBERTa model)"),Ift=l(),x7=a("li"),t$e=a("strong"),Nft=o("roformer"),qft=o(" \u2014 "),xse=a("a"),jft=o("FlaxRoFormerModel"),Dft=o(" (RoFormer model)"),Gft=l(),$7=a("li"),a$e=a("strong"),Oft=o("t5"),Vft=o(" \u2014 "),$se=a("a"),Xft=o("FlaxT5Model"),zft=o(" (T5 model)"),Qft=l(),k7=a("li"),n$e=a("strong"),Wft=o("vision-text-dual-encoder"),Uft=o(" \u2014 "),kse=a("a"),Hft=o("FlaxVisionTextDualEncoderModel"),Jft=o(" (VisionTextDualEncoder model)"),Yft=l(),S7=a("li"),s$e=a("strong"),Zft=o("vit"),Kft=o(" \u2014 "),Sse=a("a"),egt=o("FlaxViTModel"),ogt=o(" (ViT model)"),rgt=l(),R7=a("li"),l$e=a("strong"),tgt=o("wav2vec2"),agt=o(" \u2014 "),Rse=a("a"),ngt=o("FlaxWav2Vec2Model"),sgt=o(" (Wav2Vec2 model)"),lgt=l(),P7=a("li"),i$e=a("strong"),igt=o("xglm"),dgt=o(" \u2014 "),Pse=a("a"),cgt=o("FlaxXGLMModel"),mgt=o(" (XGLM model)"),fgt=l(),B7=a("li"),d$e=a("strong"),ggt=o("xlm-roberta"),hgt=o(" \u2014 "),Bse=a("a"),ugt=o("FlaxXLMRobertaModel"),pgt=o(" (XLM-RoBERTa model)"),_gt=l(),F(I7.$$.fragment),dto=l(),Jm=a("h2"),N7=a("a"),c$e=a("span"),F(sP.$$.fragment),bgt=l(),m$e=a("span"),vgt=o("FlaxAutoModelForCausalLM"),cto=l(),wr=a("div"),F(lP.$$.fragment),Fgt=l(),Ym=a("p"),Tgt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ise=a("a"),Mgt=o("from_pretrained()"),Egt=o(" class method or the "),Nse=a("a"),Cgt=o("from_config()"),wgt=o(` class
method.`),Agt=l(),iP=a("p"),Lgt=o("This class cannot be instantiated directly using "),f$e=a("code"),ygt=o("__init__()"),xgt=o(" (throws an error)."),$gt=l(),ca=a("div"),F(dP.$$.fragment),kgt=l(),g$e=a("p"),Sgt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rgt=l(),Zm=a("p"),Pgt=o(`Note:
Loading a model from its configuration file does `),h$e=a("strong"),Bgt=o("not"),Igt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=a("a"),Ngt=o("from_pretrained()"),qgt=o(" to load the model weights."),jgt=l(),F(q7.$$.fragment),Dgt=l(),ot=a("div"),F(cP.$$.fragment),Ggt=l(),u$e=a("p"),Ogt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vgt=l(),Wn=a("p"),Xgt=o("The model class to instantiate is selected based on the "),p$e=a("code"),zgt=o("model_type"),Qgt=o(` property of the config object (either
passed as an argument or loaded from `),_$e=a("code"),Wgt=o("pretrained_model_name_or_path"),Ugt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b$e=a("code"),Hgt=o("pretrained_model_name_or_path"),Jgt=o(":"),Ygt=l(),xe=a("ul"),j7=a("li"),v$e=a("strong"),Zgt=o("bart"),Kgt=o(" \u2014 "),jse=a("a"),eht=o("FlaxBartForCausalLM"),oht=o(" (BART model)"),rht=l(),D7=a("li"),F$e=a("strong"),tht=o("bert"),aht=o(" \u2014 "),Dse=a("a"),nht=o("FlaxBertForCausalLM"),sht=o(" (BERT model)"),lht=l(),G7=a("li"),T$e=a("strong"),iht=o("big_bird"),dht=o(" \u2014 "),Gse=a("a"),cht=o("FlaxBigBirdForCausalLM"),mht=o(" (BigBird model)"),fht=l(),O7=a("li"),M$e=a("strong"),ght=o("electra"),hht=o(" \u2014 "),Ose=a("a"),uht=o("FlaxElectraForCausalLM"),pht=o(" (ELECTRA model)"),_ht=l(),V7=a("li"),E$e=a("strong"),bht=o("gpt2"),vht=o(" \u2014 "),Vse=a("a"),Fht=o("FlaxGPT2LMHeadModel"),Tht=o(" (OpenAI GPT-2 model)"),Mht=l(),X7=a("li"),C$e=a("strong"),Eht=o("gpt_neo"),Cht=o(" \u2014 "),Xse=a("a"),wht=o("FlaxGPTNeoForCausalLM"),Aht=o(" (GPT Neo model)"),Lht=l(),z7=a("li"),w$e=a("strong"),yht=o("gptj"),xht=o(" \u2014 "),zse=a("a"),$ht=o("FlaxGPTJForCausalLM"),kht=o(" (GPT-J model)"),Sht=l(),Q7=a("li"),A$e=a("strong"),Rht=o("opt"),Pht=o(" \u2014 "),Qse=a("a"),Bht=o("FlaxOPTForCausalLM"),Iht=o(" (OPT model)"),Nht=l(),W7=a("li"),L$e=a("strong"),qht=o("roberta"),jht=o(" \u2014 "),Wse=a("a"),Dht=o("FlaxRobertaForCausalLM"),Ght=o(" (RoBERTa model)"),Oht=l(),U7=a("li"),y$e=a("strong"),Vht=o("xglm"),Xht=o(" \u2014 "),Use=a("a"),zht=o("FlaxXGLMForCausalLM"),Qht=o(" (XGLM model)"),Wht=l(),F(H7.$$.fragment),mto=l(),Km=a("h2"),J7=a("a"),x$e=a("span"),F(mP.$$.fragment),Uht=l(),$$e=a("span"),Hht=o("FlaxAutoModelForPreTraining"),fto=l(),Ar=a("div"),F(fP.$$.fragment),Jht=l(),ef=a("p"),Yht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hse=a("a"),Zht=o("from_pretrained()"),Kht=o(" class method or the "),Jse=a("a"),eut=o("from_config()"),out=o(` class
method.`),rut=l(),gP=a("p"),tut=o("This class cannot be instantiated directly using "),k$e=a("code"),aut=o("__init__()"),nut=o(" (throws an error)."),sut=l(),ma=a("div"),F(hP.$$.fragment),lut=l(),S$e=a("p"),iut=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dut=l(),of=a("p"),cut=o(`Note:
Loading a model from its configuration file does `),R$e=a("strong"),mut=o("not"),fut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=a("a"),gut=o("from_pretrained()"),hut=o(" to load the model weights."),uut=l(),F(Y7.$$.fragment),put=l(),rt=a("div"),F(uP.$$.fragment),_ut=l(),P$e=a("p"),but=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vut=l(),Un=a("p"),Fut=o("The model class to instantiate is selected based on the "),B$e=a("code"),Tut=o("model_type"),Mut=o(` property of the config object (either
passed as an argument or loaded from `),I$e=a("code"),Eut=o("pretrained_model_name_or_path"),Cut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N$e=a("code"),wut=o("pretrained_model_name_or_path"),Aut=o(":"),Lut=l(),Ee=a("ul"),Z7=a("li"),q$e=a("strong"),yut=o("albert"),xut=o(" \u2014 "),Zse=a("a"),$ut=o("FlaxAlbertForPreTraining"),kut=o(" (ALBERT model)"),Sut=l(),K7=a("li"),j$e=a("strong"),Rut=o("bart"),Put=o(" \u2014 "),Kse=a("a"),But=o("FlaxBartForConditionalGeneration"),Iut=o(" (BART model)"),Nut=l(),eL=a("li"),D$e=a("strong"),qut=o("bert"),jut=o(" \u2014 "),ele=a("a"),Dut=o("FlaxBertForPreTraining"),Gut=o(" (BERT model)"),Out=l(),oL=a("li"),G$e=a("strong"),Vut=o("big_bird"),Xut=o(" \u2014 "),ole=a("a"),zut=o("FlaxBigBirdForPreTraining"),Qut=o(" (BigBird model)"),Wut=l(),rL=a("li"),O$e=a("strong"),Uut=o("electra"),Hut=o(" \u2014 "),rle=a("a"),Jut=o("FlaxElectraForPreTraining"),Yut=o(" (ELECTRA model)"),Zut=l(),tL=a("li"),V$e=a("strong"),Kut=o("longt5"),ept=o(" \u2014 "),tle=a("a"),opt=o("FlaxLongT5ForConditionalGeneration"),rpt=o(" (LongT5 model)"),tpt=l(),aL=a("li"),X$e=a("strong"),apt=o("mbart"),npt=o(" \u2014 "),ale=a("a"),spt=o("FlaxMBartForConditionalGeneration"),lpt=o(" (mBART model)"),ipt=l(),nL=a("li"),z$e=a("strong"),dpt=o("mt5"),cpt=o(" \u2014 "),nle=a("a"),mpt=o("FlaxMT5ForConditionalGeneration"),fpt=o(" (MT5 model)"),gpt=l(),sL=a("li"),Q$e=a("strong"),hpt=o("roberta"),upt=o(" \u2014 "),sle=a("a"),ppt=o("FlaxRobertaForMaskedLM"),_pt=o(" (RoBERTa model)"),bpt=l(),lL=a("li"),W$e=a("strong"),vpt=o("roformer"),Fpt=o(" \u2014 "),lle=a("a"),Tpt=o("FlaxRoFormerForMaskedLM"),Mpt=o(" (RoFormer model)"),Ept=l(),iL=a("li"),U$e=a("strong"),Cpt=o("t5"),wpt=o(" \u2014 "),ile=a("a"),Apt=o("FlaxT5ForConditionalGeneration"),Lpt=o(" (T5 model)"),ypt=l(),dL=a("li"),H$e=a("strong"),xpt=o("wav2vec2"),$pt=o(" \u2014 "),dle=a("a"),kpt=o("FlaxWav2Vec2ForPreTraining"),Spt=o(" (Wav2Vec2 model)"),Rpt=l(),cL=a("li"),J$e=a("strong"),Ppt=o("xlm-roberta"),Bpt=o(" \u2014 "),cle=a("a"),Ipt=o("FlaxXLMRobertaForMaskedLM"),Npt=o(" (XLM-RoBERTa model)"),qpt=l(),F(mL.$$.fragment),gto=l(),rf=a("h2"),fL=a("a"),Y$e=a("span"),F(pP.$$.fragment),jpt=l(),Z$e=a("span"),Dpt=o("FlaxAutoModelForMaskedLM"),hto=l(),Lr=a("div"),F(_P.$$.fragment),Gpt=l(),tf=a("p"),Opt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mle=a("a"),Vpt=o("from_pretrained()"),Xpt=o(" class method or the "),fle=a("a"),zpt=o("from_config()"),Qpt=o(` class
method.`),Wpt=l(),bP=a("p"),Upt=o("This class cannot be instantiated directly using "),K$e=a("code"),Hpt=o("__init__()"),Jpt=o(" (throws an error)."),Ypt=l(),fa=a("div"),F(vP.$$.fragment),Zpt=l(),eke=a("p"),Kpt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e_t=l(),af=a("p"),o_t=o(`Note:
Loading a model from its configuration file does `),oke=a("strong"),r_t=o("not"),t_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gle=a("a"),a_t=o("from_pretrained()"),n_t=o(" to load the model weights."),s_t=l(),F(gL.$$.fragment),l_t=l(),tt=a("div"),F(FP.$$.fragment),i_t=l(),rke=a("p"),d_t=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c_t=l(),Hn=a("p"),m_t=o("The model class to instantiate is selected based on the "),tke=a("code"),f_t=o("model_type"),g_t=o(` property of the config object (either
passed as an argument or loaded from `),ake=a("code"),h_t=o("pretrained_model_name_or_path"),u_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nke=a("code"),p_t=o("pretrained_model_name_or_path"),__t=o(":"),b_t=l(),$e=a("ul"),hL=a("li"),ske=a("strong"),v_t=o("albert"),F_t=o(" \u2014 "),hle=a("a"),T_t=o("FlaxAlbertForMaskedLM"),M_t=o(" (ALBERT model)"),E_t=l(),uL=a("li"),lke=a("strong"),C_t=o("bart"),w_t=o(" \u2014 "),ule=a("a"),A_t=o("FlaxBartForConditionalGeneration"),L_t=o(" (BART model)"),y_t=l(),pL=a("li"),ike=a("strong"),x_t=o("bert"),$_t=o(" \u2014 "),ple=a("a"),k_t=o("FlaxBertForMaskedLM"),S_t=o(" (BERT model)"),R_t=l(),_L=a("li"),dke=a("strong"),P_t=o("big_bird"),B_t=o(" \u2014 "),_le=a("a"),I_t=o("FlaxBigBirdForMaskedLM"),N_t=o(" (BigBird model)"),q_t=l(),bL=a("li"),cke=a("strong"),j_t=o("distilbert"),D_t=o(" \u2014 "),ble=a("a"),G_t=o("FlaxDistilBertForMaskedLM"),O_t=o(" (DistilBERT model)"),V_t=l(),vL=a("li"),mke=a("strong"),X_t=o("electra"),z_t=o(" \u2014 "),vle=a("a"),Q_t=o("FlaxElectraForMaskedLM"),W_t=o(" (ELECTRA model)"),U_t=l(),FL=a("li"),fke=a("strong"),H_t=o("mbart"),J_t=o(" \u2014 "),Fle=a("a"),Y_t=o("FlaxMBartForConditionalGeneration"),Z_t=o(" (mBART model)"),K_t=l(),TL=a("li"),gke=a("strong"),e1t=o("roberta"),o1t=o(" \u2014 "),Tle=a("a"),r1t=o("FlaxRobertaForMaskedLM"),t1t=o(" (RoBERTa model)"),a1t=l(),ML=a("li"),hke=a("strong"),n1t=o("roformer"),s1t=o(" \u2014 "),Mle=a("a"),l1t=o("FlaxRoFormerForMaskedLM"),i1t=o(" (RoFormer model)"),d1t=l(),EL=a("li"),uke=a("strong"),c1t=o("xlm-roberta"),m1t=o(" \u2014 "),Ele=a("a"),f1t=o("FlaxXLMRobertaForMaskedLM"),g1t=o(" (XLM-RoBERTa model)"),h1t=l(),F(CL.$$.fragment),uto=l(),nf=a("h2"),wL=a("a"),pke=a("span"),F(TP.$$.fragment),u1t=l(),_ke=a("span"),p1t=o("FlaxAutoModelForSeq2SeqLM"),pto=l(),yr=a("div"),F(MP.$$.fragment),_1t=l(),sf=a("p"),b1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cle=a("a"),v1t=o("from_pretrained()"),F1t=o(" class method or the "),wle=a("a"),T1t=o("from_config()"),M1t=o(` class
method.`),E1t=l(),EP=a("p"),C1t=o("This class cannot be instantiated directly using "),bke=a("code"),w1t=o("__init__()"),A1t=o(" (throws an error)."),L1t=l(),ga=a("div"),F(CP.$$.fragment),y1t=l(),vke=a("p"),x1t=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$1t=l(),lf=a("p"),k1t=o(`Note:
Loading a model from its configuration file does `),Fke=a("strong"),S1t=o("not"),R1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=a("a"),P1t=o("from_pretrained()"),B1t=o(" to load the model weights."),I1t=l(),F(AL.$$.fragment),N1t=l(),at=a("div"),F(wP.$$.fragment),q1t=l(),Tke=a("p"),j1t=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D1t=l(),Jn=a("p"),G1t=o("The model class to instantiate is selected based on the "),Mke=a("code"),O1t=o("model_type"),V1t=o(` property of the config object (either
passed as an argument or loaded from `),Eke=a("code"),X1t=o("pretrained_model_name_or_path"),z1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cke=a("code"),Q1t=o("pretrained_model_name_or_path"),W1t=o(":"),U1t=l(),ke=a("ul"),LL=a("li"),wke=a("strong"),H1t=o("bart"),J1t=o(" \u2014 "),Lle=a("a"),Y1t=o("FlaxBartForConditionalGeneration"),Z1t=o(" (BART model)"),K1t=l(),yL=a("li"),Ake=a("strong"),e2t=o("blenderbot"),o2t=o(" \u2014 "),yle=a("a"),r2t=o("FlaxBlenderbotForConditionalGeneration"),t2t=o(" (Blenderbot model)"),a2t=l(),xL=a("li"),Lke=a("strong"),n2t=o("blenderbot-small"),s2t=o(" \u2014 "),xle=a("a"),l2t=o("FlaxBlenderbotSmallForConditionalGeneration"),i2t=o(" (BlenderbotSmall model)"),d2t=l(),$L=a("li"),yke=a("strong"),c2t=o("encoder-decoder"),m2t=o(" \u2014 "),$le=a("a"),f2t=o("FlaxEncoderDecoderModel"),g2t=o(" (Encoder decoder model)"),h2t=l(),kL=a("li"),xke=a("strong"),u2t=o("longt5"),p2t=o(" \u2014 "),kle=a("a"),_2t=o("FlaxLongT5ForConditionalGeneration"),b2t=o(" (LongT5 model)"),v2t=l(),SL=a("li"),$ke=a("strong"),F2t=o("marian"),T2t=o(" \u2014 "),Sle=a("a"),M2t=o("FlaxMarianMTModel"),E2t=o(" (Marian model)"),C2t=l(),RL=a("li"),kke=a("strong"),w2t=o("mbart"),A2t=o(" \u2014 "),Rle=a("a"),L2t=o("FlaxMBartForConditionalGeneration"),y2t=o(" (mBART model)"),x2t=l(),PL=a("li"),Ske=a("strong"),$2t=o("mt5"),k2t=o(" \u2014 "),Ple=a("a"),S2t=o("FlaxMT5ForConditionalGeneration"),R2t=o(" (MT5 model)"),P2t=l(),BL=a("li"),Rke=a("strong"),B2t=o("pegasus"),I2t=o(" \u2014 "),Ble=a("a"),N2t=o("FlaxPegasusForConditionalGeneration"),q2t=o(" (Pegasus model)"),j2t=l(),IL=a("li"),Pke=a("strong"),D2t=o("t5"),G2t=o(" \u2014 "),Ile=a("a"),O2t=o("FlaxT5ForConditionalGeneration"),V2t=o(" (T5 model)"),X2t=l(),F(NL.$$.fragment),_to=l(),df=a("h2"),qL=a("a"),Bke=a("span"),F(AP.$$.fragment),z2t=l(),Ike=a("span"),Q2t=o("FlaxAutoModelForSequenceClassification"),bto=l(),xr=a("div"),F(LP.$$.fragment),W2t=l(),cf=a("p"),U2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nle=a("a"),H2t=o("from_pretrained()"),J2t=o(" class method or the "),qle=a("a"),Y2t=o("from_config()"),Z2t=o(` class
method.`),K2t=l(),yP=a("p"),ebt=o("This class cannot be instantiated directly using "),Nke=a("code"),obt=o("__init__()"),rbt=o(" (throws an error)."),tbt=l(),ha=a("div"),F(xP.$$.fragment),abt=l(),qke=a("p"),nbt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sbt=l(),mf=a("p"),lbt=o(`Note:
Loading a model from its configuration file does `),jke=a("strong"),ibt=o("not"),dbt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=a("a"),cbt=o("from_pretrained()"),mbt=o(" to load the model weights."),fbt=l(),F(jL.$$.fragment),gbt=l(),nt=a("div"),F($P.$$.fragment),hbt=l(),Dke=a("p"),ubt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pbt=l(),Yn=a("p"),_bt=o("The model class to instantiate is selected based on the "),Gke=a("code"),bbt=o("model_type"),vbt=o(` property of the config object (either
passed as an argument or loaded from `),Oke=a("code"),Fbt=o("pretrained_model_name_or_path"),Tbt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vke=a("code"),Mbt=o("pretrained_model_name_or_path"),Ebt=o(":"),Cbt=l(),Se=a("ul"),DL=a("li"),Xke=a("strong"),wbt=o("albert"),Abt=o(" \u2014 "),Dle=a("a"),Lbt=o("FlaxAlbertForSequenceClassification"),ybt=o(" (ALBERT model)"),xbt=l(),GL=a("li"),zke=a("strong"),$bt=o("bart"),kbt=o(" \u2014 "),Gle=a("a"),Sbt=o("FlaxBartForSequenceClassification"),Rbt=o(" (BART model)"),Pbt=l(),OL=a("li"),Qke=a("strong"),Bbt=o("bert"),Ibt=o(" \u2014 "),Ole=a("a"),Nbt=o("FlaxBertForSequenceClassification"),qbt=o(" (BERT model)"),jbt=l(),VL=a("li"),Wke=a("strong"),Dbt=o("big_bird"),Gbt=o(" \u2014 "),Vle=a("a"),Obt=o("FlaxBigBirdForSequenceClassification"),Vbt=o(" (BigBird model)"),Xbt=l(),XL=a("li"),Uke=a("strong"),zbt=o("distilbert"),Qbt=o(" \u2014 "),Xle=a("a"),Wbt=o("FlaxDistilBertForSequenceClassification"),Ubt=o(" (DistilBERT model)"),Hbt=l(),zL=a("li"),Hke=a("strong"),Jbt=o("electra"),Ybt=o(" \u2014 "),zle=a("a"),Zbt=o("FlaxElectraForSequenceClassification"),Kbt=o(" (ELECTRA model)"),evt=l(),QL=a("li"),Jke=a("strong"),ovt=o("mbart"),rvt=o(" \u2014 "),Qle=a("a"),tvt=o("FlaxMBartForSequenceClassification"),avt=o(" (mBART model)"),nvt=l(),WL=a("li"),Yke=a("strong"),svt=o("roberta"),lvt=o(" \u2014 "),Wle=a("a"),ivt=o("FlaxRobertaForSequenceClassification"),dvt=o(" (RoBERTa model)"),cvt=l(),UL=a("li"),Zke=a("strong"),mvt=o("roformer"),fvt=o(" \u2014 "),Ule=a("a"),gvt=o("FlaxRoFormerForSequenceClassification"),hvt=o(" (RoFormer model)"),uvt=l(),HL=a("li"),Kke=a("strong"),pvt=o("xlm-roberta"),_vt=o(" \u2014 "),Hle=a("a"),bvt=o("FlaxXLMRobertaForSequenceClassification"),vvt=o(" (XLM-RoBERTa model)"),Fvt=l(),F(JL.$$.fragment),vto=l(),ff=a("h2"),YL=a("a"),eSe=a("span"),F(kP.$$.fragment),Tvt=l(),oSe=a("span"),Mvt=o("FlaxAutoModelForQuestionAnswering"),Fto=l(),$r=a("div"),F(SP.$$.fragment),Evt=l(),gf=a("p"),Cvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jle=a("a"),wvt=o("from_pretrained()"),Avt=o(" class method or the "),Yle=a("a"),Lvt=o("from_config()"),yvt=o(` class
method.`),xvt=l(),RP=a("p"),$vt=o("This class cannot be instantiated directly using "),rSe=a("code"),kvt=o("__init__()"),Svt=o(" (throws an error)."),Rvt=l(),ua=a("div"),F(PP.$$.fragment),Pvt=l(),tSe=a("p"),Bvt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ivt=l(),hf=a("p"),Nvt=o(`Note:
Loading a model from its configuration file does `),aSe=a("strong"),qvt=o("not"),jvt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zle=a("a"),Dvt=o("from_pretrained()"),Gvt=o(" to load the model weights."),Ovt=l(),F(ZL.$$.fragment),Vvt=l(),st=a("div"),F(BP.$$.fragment),Xvt=l(),nSe=a("p"),zvt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qvt=l(),Zn=a("p"),Wvt=o("The model class to instantiate is selected based on the "),sSe=a("code"),Uvt=o("model_type"),Hvt=o(` property of the config object (either
passed as an argument or loaded from `),lSe=a("code"),Jvt=o("pretrained_model_name_or_path"),Yvt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iSe=a("code"),Zvt=o("pretrained_model_name_or_path"),Kvt=o(":"),eFt=l(),Re=a("ul"),KL=a("li"),dSe=a("strong"),oFt=o("albert"),rFt=o(" \u2014 "),Kle=a("a"),tFt=o("FlaxAlbertForQuestionAnswering"),aFt=o(" (ALBERT model)"),nFt=l(),e8=a("li"),cSe=a("strong"),sFt=o("bart"),lFt=o(" \u2014 "),eie=a("a"),iFt=o("FlaxBartForQuestionAnswering"),dFt=o(" (BART model)"),cFt=l(),o8=a("li"),mSe=a("strong"),mFt=o("bert"),fFt=o(" \u2014 "),oie=a("a"),gFt=o("FlaxBertForQuestionAnswering"),hFt=o(" (BERT model)"),uFt=l(),r8=a("li"),fSe=a("strong"),pFt=o("big_bird"),_Ft=o(" \u2014 "),rie=a("a"),bFt=o("FlaxBigBirdForQuestionAnswering"),vFt=o(" (BigBird model)"),FFt=l(),t8=a("li"),gSe=a("strong"),TFt=o("distilbert"),MFt=o(" \u2014 "),tie=a("a"),EFt=o("FlaxDistilBertForQuestionAnswering"),CFt=o(" (DistilBERT model)"),wFt=l(),a8=a("li"),hSe=a("strong"),AFt=o("electra"),LFt=o(" \u2014 "),aie=a("a"),yFt=o("FlaxElectraForQuestionAnswering"),xFt=o(" (ELECTRA model)"),$Ft=l(),n8=a("li"),uSe=a("strong"),kFt=o("mbart"),SFt=o(" \u2014 "),nie=a("a"),RFt=o("FlaxMBartForQuestionAnswering"),PFt=o(" (mBART model)"),BFt=l(),s8=a("li"),pSe=a("strong"),IFt=o("roberta"),NFt=o(" \u2014 "),sie=a("a"),qFt=o("FlaxRobertaForQuestionAnswering"),jFt=o(" (RoBERTa model)"),DFt=l(),l8=a("li"),_Se=a("strong"),GFt=o("roformer"),OFt=o(" \u2014 "),lie=a("a"),VFt=o("FlaxRoFormerForQuestionAnswering"),XFt=o(" (RoFormer model)"),zFt=l(),i8=a("li"),bSe=a("strong"),QFt=o("xlm-roberta"),WFt=o(" \u2014 "),iie=a("a"),UFt=o("FlaxXLMRobertaForQuestionAnswering"),HFt=o(" (XLM-RoBERTa model)"),JFt=l(),F(d8.$$.fragment),Tto=l(),uf=a("h2"),c8=a("a"),vSe=a("span"),F(IP.$$.fragment),YFt=l(),FSe=a("span"),ZFt=o("FlaxAutoModelForTokenClassification"),Mto=l(),kr=a("div"),F(NP.$$.fragment),KFt=l(),pf=a("p"),eTt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),die=a("a"),oTt=o("from_pretrained()"),rTt=o(" class method or the "),cie=a("a"),tTt=o("from_config()"),aTt=o(` class
method.`),nTt=l(),qP=a("p"),sTt=o("This class cannot be instantiated directly using "),TSe=a("code"),lTt=o("__init__()"),iTt=o(" (throws an error)."),dTt=l(),pa=a("div"),F(jP.$$.fragment),cTt=l(),MSe=a("p"),mTt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fTt=l(),_f=a("p"),gTt=o(`Note:
Loading a model from its configuration file does `),ESe=a("strong"),hTt=o("not"),uTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mie=a("a"),pTt=o("from_pretrained()"),_Tt=o(" to load the model weights."),bTt=l(),F(m8.$$.fragment),vTt=l(),lt=a("div"),F(DP.$$.fragment),FTt=l(),CSe=a("p"),TTt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MTt=l(),Kn=a("p"),ETt=o("The model class to instantiate is selected based on the "),wSe=a("code"),CTt=o("model_type"),wTt=o(` property of the config object (either
passed as an argument or loaded from `),ASe=a("code"),ATt=o("pretrained_model_name_or_path"),LTt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LSe=a("code"),yTt=o("pretrained_model_name_or_path"),xTt=o(":"),$Tt=l(),Xe=a("ul"),f8=a("li"),ySe=a("strong"),kTt=o("albert"),STt=o(" \u2014 "),fie=a("a"),RTt=o("FlaxAlbertForTokenClassification"),PTt=o(" (ALBERT model)"),BTt=l(),g8=a("li"),xSe=a("strong"),ITt=o("bert"),NTt=o(" \u2014 "),gie=a("a"),qTt=o("FlaxBertForTokenClassification"),jTt=o(" (BERT model)"),DTt=l(),h8=a("li"),$Se=a("strong"),GTt=o("big_bird"),OTt=o(" \u2014 "),hie=a("a"),VTt=o("FlaxBigBirdForTokenClassification"),XTt=o(" (BigBird model)"),zTt=l(),u8=a("li"),kSe=a("strong"),QTt=o("distilbert"),WTt=o(" \u2014 "),uie=a("a"),UTt=o("FlaxDistilBertForTokenClassification"),HTt=o(" (DistilBERT model)"),JTt=l(),p8=a("li"),SSe=a("strong"),YTt=o("electra"),ZTt=o(" \u2014 "),pie=a("a"),KTt=o("FlaxElectraForTokenClassification"),eMt=o(" (ELECTRA model)"),oMt=l(),_8=a("li"),RSe=a("strong"),rMt=o("roberta"),tMt=o(" \u2014 "),_ie=a("a"),aMt=o("FlaxRobertaForTokenClassification"),nMt=o(" (RoBERTa model)"),sMt=l(),b8=a("li"),PSe=a("strong"),lMt=o("roformer"),iMt=o(" \u2014 "),bie=a("a"),dMt=o("FlaxRoFormerForTokenClassification"),cMt=o(" (RoFormer model)"),mMt=l(),v8=a("li"),BSe=a("strong"),fMt=o("xlm-roberta"),gMt=o(" \u2014 "),vie=a("a"),hMt=o("FlaxXLMRobertaForTokenClassification"),uMt=o(" (XLM-RoBERTa model)"),pMt=l(),F(F8.$$.fragment),Eto=l(),bf=a("h2"),T8=a("a"),ISe=a("span"),F(GP.$$.fragment),_Mt=l(),NSe=a("span"),bMt=o("FlaxAutoModelForMultipleChoice"),Cto=l(),Sr=a("div"),F(OP.$$.fragment),vMt=l(),vf=a("p"),FMt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fie=a("a"),TMt=o("from_pretrained()"),MMt=o(" class method or the "),Tie=a("a"),EMt=o("from_config()"),CMt=o(` class
method.`),wMt=l(),VP=a("p"),AMt=o("This class cannot be instantiated directly using "),qSe=a("code"),LMt=o("__init__()"),yMt=o(" (throws an error)."),xMt=l(),_a=a("div"),F(XP.$$.fragment),$Mt=l(),jSe=a("p"),kMt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SMt=l(),Ff=a("p"),RMt=o(`Note:
Loading a model from its configuration file does `),DSe=a("strong"),PMt=o("not"),BMt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("a"),IMt=o("from_pretrained()"),NMt=o(" to load the model weights."),qMt=l(),F(M8.$$.fragment),jMt=l(),it=a("div"),F(zP.$$.fragment),DMt=l(),GSe=a("p"),GMt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OMt=l(),es=a("p"),VMt=o("The model class to instantiate is selected based on the "),OSe=a("code"),XMt=o("model_type"),zMt=o(` property of the config object (either
passed as an argument or loaded from `),VSe=a("code"),QMt=o("pretrained_model_name_or_path"),WMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XSe=a("code"),UMt=o("pretrained_model_name_or_path"),HMt=o(":"),JMt=l(),ze=a("ul"),E8=a("li"),zSe=a("strong"),YMt=o("albert"),ZMt=o(" \u2014 "),Eie=a("a"),KMt=o("FlaxAlbertForMultipleChoice"),eEt=o(" (ALBERT model)"),oEt=l(),C8=a("li"),QSe=a("strong"),rEt=o("bert"),tEt=o(" \u2014 "),Cie=a("a"),aEt=o("FlaxBertForMultipleChoice"),nEt=o(" (BERT model)"),sEt=l(),w8=a("li"),WSe=a("strong"),lEt=o("big_bird"),iEt=o(" \u2014 "),wie=a("a"),dEt=o("FlaxBigBirdForMultipleChoice"),cEt=o(" (BigBird model)"),mEt=l(),A8=a("li"),USe=a("strong"),fEt=o("distilbert"),gEt=o(" \u2014 "),Aie=a("a"),hEt=o("FlaxDistilBertForMultipleChoice"),uEt=o(" (DistilBERT model)"),pEt=l(),L8=a("li"),HSe=a("strong"),_Et=o("electra"),bEt=o(" \u2014 "),Lie=a("a"),vEt=o("FlaxElectraForMultipleChoice"),FEt=o(" (ELECTRA model)"),TEt=l(),y8=a("li"),JSe=a("strong"),MEt=o("roberta"),EEt=o(" \u2014 "),yie=a("a"),CEt=o("FlaxRobertaForMultipleChoice"),wEt=o(" (RoBERTa model)"),AEt=l(),x8=a("li"),YSe=a("strong"),LEt=o("roformer"),yEt=o(" \u2014 "),xie=a("a"),xEt=o("FlaxRoFormerForMultipleChoice"),$Et=o(" (RoFormer model)"),kEt=l(),$8=a("li"),ZSe=a("strong"),SEt=o("xlm-roberta"),REt=o(" \u2014 "),$ie=a("a"),PEt=o("FlaxXLMRobertaForMultipleChoice"),BEt=o(" (XLM-RoBERTa model)"),IEt=l(),F(k8.$$.fragment),wto=l(),Tf=a("h2"),S8=a("a"),KSe=a("span"),F(QP.$$.fragment),NEt=l(),eRe=a("span"),qEt=o("FlaxAutoModelForNextSentencePrediction"),Ato=l(),Rr=a("div"),F(WP.$$.fragment),jEt=l(),Mf=a("p"),DEt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kie=a("a"),GEt=o("from_pretrained()"),OEt=o(" class method or the "),Sie=a("a"),VEt=o("from_config()"),XEt=o(` class
method.`),zEt=l(),UP=a("p"),QEt=o("This class cannot be instantiated directly using "),oRe=a("code"),WEt=o("__init__()"),UEt=o(" (throws an error)."),HEt=l(),ba=a("div"),F(HP.$$.fragment),JEt=l(),rRe=a("p"),YEt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZEt=l(),Ef=a("p"),KEt=o(`Note:
Loading a model from its configuration file does `),tRe=a("strong"),e4t=o("not"),o4t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=a("a"),r4t=o("from_pretrained()"),t4t=o(" to load the model weights."),a4t=l(),F(R8.$$.fragment),n4t=l(),dt=a("div"),F(JP.$$.fragment),s4t=l(),aRe=a("p"),l4t=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),i4t=l(),os=a("p"),d4t=o("The model class to instantiate is selected based on the "),nRe=a("code"),c4t=o("model_type"),m4t=o(` property of the config object (either
passed as an argument or loaded from `),sRe=a("code"),f4t=o("pretrained_model_name_or_path"),g4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lRe=a("code"),h4t=o("pretrained_model_name_or_path"),u4t=o(":"),p4t=l(),iRe=a("ul"),P8=a("li"),dRe=a("strong"),_4t=o("bert"),b4t=o(" \u2014 "),Pie=a("a"),v4t=o("FlaxBertForNextSentencePrediction"),F4t=o(" (BERT model)"),T4t=l(),F(B8.$$.fragment),Lto=l(),Cf=a("h2"),I8=a("a"),cRe=a("span"),F(YP.$$.fragment),M4t=l(),mRe=a("span"),E4t=o("FlaxAutoModelForImageClassification"),yto=l(),Pr=a("div"),F(ZP.$$.fragment),C4t=l(),wf=a("p"),w4t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bie=a("a"),A4t=o("from_pretrained()"),L4t=o(" class method or the "),Iie=a("a"),y4t=o("from_config()"),x4t=o(` class
method.`),$4t=l(),KP=a("p"),k4t=o("This class cannot be instantiated directly using "),fRe=a("code"),S4t=o("__init__()"),R4t=o(" (throws an error)."),P4t=l(),va=a("div"),F(eB.$$.fragment),B4t=l(),gRe=a("p"),I4t=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),N4t=l(),Af=a("p"),q4t=o(`Note:
Loading a model from its configuration file does `),hRe=a("strong"),j4t=o("not"),D4t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nie=a("a"),G4t=o("from_pretrained()"),O4t=o(" to load the model weights."),V4t=l(),F(N8.$$.fragment),X4t=l(),ct=a("div"),F(oB.$$.fragment),z4t=l(),uRe=a("p"),Q4t=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W4t=l(),rs=a("p"),U4t=o("The model class to instantiate is selected based on the "),pRe=a("code"),H4t=o("model_type"),J4t=o(` property of the config object (either
passed as an argument or loaded from `),_Re=a("code"),Y4t=o("pretrained_model_name_or_path"),Z4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bRe=a("code"),K4t=o("pretrained_model_name_or_path"),eCt=o(":"),oCt=l(),rB=a("ul"),q8=a("li"),vRe=a("strong"),rCt=o("beit"),tCt=o(" \u2014 "),qie=a("a"),aCt=o("FlaxBeitForImageClassification"),nCt=o(" (BEiT model)"),sCt=l(),j8=a("li"),FRe=a("strong"),lCt=o("vit"),iCt=o(" \u2014 "),jie=a("a"),dCt=o("FlaxViTForImageClassification"),cCt=o(" (ViT model)"),mCt=l(),F(D8.$$.fragment),xto=l(),Lf=a("h2"),G8=a("a"),TRe=a("span"),F(tB.$$.fragment),fCt=l(),MRe=a("span"),gCt=o("FlaxAutoModelForVision2Seq"),$to=l(),Br=a("div"),F(aB.$$.fragment),hCt=l(),yf=a("p"),uCt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Die=a("a"),pCt=o("from_pretrained()"),_Ct=o(" class method or the "),Gie=a("a"),bCt=o("from_config()"),vCt=o(` class
method.`),FCt=l(),nB=a("p"),TCt=o("This class cannot be instantiated directly using "),ERe=a("code"),MCt=o("__init__()"),ECt=o(" (throws an error)."),CCt=l(),Fa=a("div"),F(sB.$$.fragment),wCt=l(),CRe=a("p"),ACt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LCt=l(),xf=a("p"),yCt=o(`Note:
Loading a model from its configuration file does `),wRe=a("strong"),xCt=o("not"),$Ct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=a("a"),kCt=o("from_pretrained()"),SCt=o(" to load the model weights."),RCt=l(),F(O8.$$.fragment),PCt=l(),mt=a("div"),F(lB.$$.fragment),BCt=l(),ARe=a("p"),ICt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NCt=l(),ts=a("p"),qCt=o("The model class to instantiate is selected based on the "),LRe=a("code"),jCt=o("model_type"),DCt=o(` property of the config object (either
passed as an argument or loaded from `),yRe=a("code"),GCt=o("pretrained_model_name_or_path"),OCt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xRe=a("code"),VCt=o("pretrained_model_name_or_path"),XCt=o(":"),zCt=l(),$Re=a("ul"),V8=a("li"),kRe=a("strong"),QCt=o("vision-encoder-decoder"),WCt=o(" \u2014 "),Vie=a("a"),UCt=o("FlaxVisionEncoderDecoderModel"),HCt=o(" (Vision Encoder decoder model)"),JCt=l(),F(X8.$$.fragment),this.h()},l(m){const _=IFa('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var iB=s(u);f=n(iB,"A",{id:!0,class:!0,href:!0});var SRe=s(f);p=n(SRe,"SPAN",{});var RRe=s(p);T(d.$$.fragment,RRe),RRe.forEach(t),SRe.forEach(t),h=i(iB),xo=n(iB,"SPAN",{});var PRe=s(xo);dd=r(PRe,"Auto Classes"),PRe.forEach(t),iB.forEach(t),Rf=i(m),bt=n(m,"P",{});var dB=s(bt);cd=r(dB,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),md=n(dB,"CODE",{});var BRe=s(md);Cx=r(BRe,"from_pretrained()"),BRe.forEach(t),Pf=r(dB,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),dB.forEach(t),Ve=i(m),He=n(m,"P",{});var as=s(He);fd=r(as,"Instantiating one of "),ns=n(as,"A",{href:!0});var IRe=s(ns);wx=r(IRe,"AutoConfig"),IRe.forEach(t),ss=r(as,", "),ls=n(as,"A",{href:!0});var NRe=s(ls);Ax=r(NRe,"AutoModel"),NRe.forEach(t),gd=r(as,`, and
`),is=n(as,"A",{href:!0});var qRe=s(is);Lx=r(qRe,"AutoTokenizer"),qRe.forEach(t),hd=r(as," will directly create a class of the relevant architecture. For instance"),as.forEach(t),Bf=i(m),T(Ja.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var cB=s(Ae);RI=r(cB,"will create a model that is an instance of "),ud=n(cB,"A",{href:!0});var jRe=s(ud);PI=r(jRe,"BertModel"),jRe.forEach(t),BI=r(cB,"."),cB.forEach(t),$o=i(m),Ya=n(m,"P",{});var mB=s(Ya);II=r(mB,"There is one class of "),If=n(mB,"CODE",{});var DRe=s(If);NI=r(DRe,"AutoModel"),DRe.forEach(t),Jno=r(mB," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),mB.forEach(t),poo=i(m),pd=n(m,"H2",{class:!0});var fB=s(pd);Nf=n(fB,"A",{id:!0,class:!0,href:!0});var GRe=s(Nf);Jce=n(GRe,"SPAN",{});var ORe=s(Jce);T(yx.$$.fragment,ORe),ORe.forEach(t),GRe.forEach(t),Yno=i(fB),Yce=n(fB,"SPAN",{});var VRe=s(Yce);Zno=r(VRe,"Extending the Auto Classes"),VRe.forEach(t),fB.forEach(t),_oo=i(m),ds=n(m,"P",{});var $f=s(ds);Kno=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zce=n($f,"CODE",{});var XRe=s(Zce);eso=r(XRe,"NewModel"),XRe.forEach(t),oso=r($f,", make sure you have a "),Kce=n($f,"CODE",{});var zRe=s(Kce);rso=r(zRe,"NewModelConfig"),zRe.forEach(t),tso=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),boo=i(m),T(xx.$$.fragment,m),voo=i(m),qI=n(m,"P",{});var QRe=s(qI);aso=r(QRe,"You will then be able to use the auto classes like you would usually do!"),QRe.forEach(t),Foo=i(m),T(qf.$$.fragment,m),Too=i(m),_d=n(m,"H2",{class:!0});var gB=s(_d);jf=n(gB,"A",{id:!0,class:!0,href:!0});var WRe=s(jf);eme=n(WRe,"SPAN",{});var URe=s(eme);T($x.$$.fragment,URe),URe.forEach(t),WRe.forEach(t),nso=i(gB),ome=n(gB,"SPAN",{});var HRe=s(ome);sso=r(HRe,"AutoConfig"),HRe.forEach(t),gB.forEach(t),Moo=i(m),ko=n(m,"DIV",{class:!0});var pt=s(ko);T(kx.$$.fragment,pt),lso=i(pt),Sx=n(pt,"P",{});var hB=s(Sx);iso=r(hB,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jI=n(hB,"A",{href:!0});var JRe=s(jI);dso=r(JRe,"from_pretrained()"),JRe.forEach(t),cso=r(hB," class method."),hB.forEach(t),mso=i(pt),Rx=n(pt,"P",{});var uB=s(Rx);fso=r(uB,"This class cannot be instantiated directly using "),rme=n(uB,"CODE",{});var YRe=s(rme);gso=r(YRe,"__init__()"),YRe.forEach(t),hso=r(uB," (throws an error)."),uB.forEach(t),uso=i(pt),Ir=n(pt,"DIV",{class:!0});var _t=s(Ir);T(Px.$$.fragment,_t),pso=i(_t),tme=n(_t,"P",{});var ZRe=s(tme);_so=r(ZRe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ZRe.forEach(t),bso=i(_t),bd=n(_t,"P",{});var kf=s(bd);vso=r(kf,"The configuration class to instantiate is selected based on the "),ame=n(kf,"CODE",{});var KRe=s(ame);Fso=r(KRe,"model_type"),KRe.forEach(t),Tso=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nme=n(kf,"CODE",{});var ePe=s(nme);Mso=r(ePe,"pretrained_model_name_or_path"),ePe.forEach(t),Eso=r(kf,":"),kf.forEach(t),Cso=i(_t),A=n(_t,"UL",{});var L=s(A);Df=n(L,"LI",{});var z8=s(Df);sme=n(z8,"STRONG",{});var oPe=s(sme);wso=r(oPe,"albert"),oPe.forEach(t),Aso=r(z8," \u2014 "),DI=n(z8,"A",{href:!0});var rPe=s(DI);Lso=r(rPe,"AlbertConfig"),rPe.forEach(t),yso=r(z8," (ALBERT model)"),z8.forEach(t),xso=i(L),Gf=n(L,"LI",{});var Q8=s(Gf);lme=n(Q8,"STRONG",{});var tPe=s(lme);$so=r(tPe,"bart"),tPe.forEach(t),kso=r(Q8," \u2014 "),GI=n(Q8,"A",{href:!0});var aPe=s(GI);Sso=r(aPe,"BartConfig"),aPe.forEach(t),Rso=r(Q8," (BART model)"),Q8.forEach(t),Pso=i(L),Of=n(L,"LI",{});var W8=s(Of);ime=n(W8,"STRONG",{});var nPe=s(ime);Bso=r(nPe,"beit"),nPe.forEach(t),Iso=r(W8," \u2014 "),OI=n(W8,"A",{href:!0});var sPe=s(OI);Nso=r(sPe,"BeitConfig"),sPe.forEach(t),qso=r(W8," (BEiT model)"),W8.forEach(t),jso=i(L),Vf=n(L,"LI",{});var U8=s(Vf);dme=n(U8,"STRONG",{});var lPe=s(dme);Dso=r(lPe,"bert"),lPe.forEach(t),Gso=r(U8," \u2014 "),VI=n(U8,"A",{href:!0});var iPe=s(VI);Oso=r(iPe,"BertConfig"),iPe.forEach(t),Vso=r(U8," (BERT model)"),U8.forEach(t),Xso=i(L),Xf=n(L,"LI",{});var H8=s(Xf);cme=n(H8,"STRONG",{});var dPe=s(cme);zso=r(dPe,"bert-generation"),dPe.forEach(t),Qso=r(H8," \u2014 "),XI=n(H8,"A",{href:!0});var cPe=s(XI);Wso=r(cPe,"BertGenerationConfig"),cPe.forEach(t),Uso=r(H8," (Bert Generation model)"),H8.forEach(t),Hso=i(L),zf=n(L,"LI",{});var J8=s(zf);mme=n(J8,"STRONG",{});var mPe=s(mme);Jso=r(mPe,"big_bird"),mPe.forEach(t),Yso=r(J8," \u2014 "),zI=n(J8,"A",{href:!0});var fPe=s(zI);Zso=r(fPe,"BigBirdConfig"),fPe.forEach(t),Kso=r(J8," (BigBird model)"),J8.forEach(t),elo=i(L),Qf=n(L,"LI",{});var Y8=s(Qf);fme=n(Y8,"STRONG",{});var gPe=s(fme);olo=r(gPe,"bigbird_pegasus"),gPe.forEach(t),rlo=r(Y8," \u2014 "),QI=n(Y8,"A",{href:!0});var hPe=s(QI);tlo=r(hPe,"BigBirdPegasusConfig"),hPe.forEach(t),alo=r(Y8," (BigBird-Pegasus model)"),Y8.forEach(t),nlo=i(L),Wf=n(L,"LI",{});var Z8=s(Wf);gme=n(Z8,"STRONG",{});var uPe=s(gme);slo=r(uPe,"blenderbot"),uPe.forEach(t),llo=r(Z8," \u2014 "),WI=n(Z8,"A",{href:!0});var pPe=s(WI);ilo=r(pPe,"BlenderbotConfig"),pPe.forEach(t),dlo=r(Z8," (Blenderbot model)"),Z8.forEach(t),clo=i(L),Uf=n(L,"LI",{});var K8=s(Uf);hme=n(K8,"STRONG",{});var _Pe=s(hme);mlo=r(_Pe,"blenderbot-small"),_Pe.forEach(t),flo=r(K8," \u2014 "),UI=n(K8,"A",{href:!0});var bPe=s(UI);glo=r(bPe,"BlenderbotSmallConfig"),bPe.forEach(t),hlo=r(K8," (BlenderbotSmall model)"),K8.forEach(t),ulo=i(L),Hf=n(L,"LI",{});var ey=s(Hf);ume=n(ey,"STRONG",{});var vPe=s(ume);plo=r(vPe,"bloom"),vPe.forEach(t),_lo=r(ey," \u2014 "),HI=n(ey,"A",{href:!0});var FPe=s(HI);blo=r(FPe,"BloomConfig"),FPe.forEach(t),vlo=r(ey," (BLOOM model)"),ey.forEach(t),Flo=i(L),Jf=n(L,"LI",{});var oy=s(Jf);pme=n(oy,"STRONG",{});var TPe=s(pme);Tlo=r(TPe,"camembert"),TPe.forEach(t),Mlo=r(oy," \u2014 "),JI=n(oy,"A",{href:!0});var MPe=s(JI);Elo=r(MPe,"CamembertConfig"),MPe.forEach(t),Clo=r(oy," (CamemBERT model)"),oy.forEach(t),wlo=i(L),Yf=n(L,"LI",{});var ry=s(Yf);_me=n(ry,"STRONG",{});var EPe=s(_me);Alo=r(EPe,"canine"),EPe.forEach(t),Llo=r(ry," \u2014 "),YI=n(ry,"A",{href:!0});var CPe=s(YI);ylo=r(CPe,"CanineConfig"),CPe.forEach(t),xlo=r(ry," (CANINE model)"),ry.forEach(t),$lo=i(L),Zf=n(L,"LI",{});var ty=s(Zf);bme=n(ty,"STRONG",{});var wPe=s(bme);klo=r(wPe,"clip"),wPe.forEach(t),Slo=r(ty," \u2014 "),ZI=n(ty,"A",{href:!0});var APe=s(ZI);Rlo=r(APe,"CLIPConfig"),APe.forEach(t),Plo=r(ty," (CLIP model)"),ty.forEach(t),Blo=i(L),Kf=n(L,"LI",{});var ay=s(Kf);vme=n(ay,"STRONG",{});var LPe=s(vme);Ilo=r(LPe,"codegen"),LPe.forEach(t),Nlo=r(ay," \u2014 "),KI=n(ay,"A",{href:!0});var yPe=s(KI);qlo=r(yPe,"CodeGenConfig"),yPe.forEach(t),jlo=r(ay," (CodeGen model)"),ay.forEach(t),Dlo=i(L),eg=n(L,"LI",{});var ny=s(eg);Fme=n(ny,"STRONG",{});var xPe=s(Fme);Glo=r(xPe,"conditional_detr"),xPe.forEach(t),Olo=r(ny," \u2014 "),eN=n(ny,"A",{href:!0});var $Pe=s(eN);Vlo=r($Pe,"ConditionalDetrConfig"),$Pe.forEach(t),Xlo=r(ny," (Conditional DETR model)"),ny.forEach(t),zlo=i(L),og=n(L,"LI",{});var sy=s(og);Tme=n(sy,"STRONG",{});var kPe=s(Tme);Qlo=r(kPe,"convbert"),kPe.forEach(t),Wlo=r(sy," \u2014 "),oN=n(sy,"A",{href:!0});var SPe=s(oN);Ulo=r(SPe,"ConvBertConfig"),SPe.forEach(t),Hlo=r(sy," (ConvBERT model)"),sy.forEach(t),Jlo=i(L),rg=n(L,"LI",{});var ly=s(rg);Mme=n(ly,"STRONG",{});var RPe=s(Mme);Ylo=r(RPe,"convnext"),RPe.forEach(t),Zlo=r(ly," \u2014 "),rN=n(ly,"A",{href:!0});var PPe=s(rN);Klo=r(PPe,"ConvNextConfig"),PPe.forEach(t),eio=r(ly," (ConvNeXT model)"),ly.forEach(t),oio=i(L),tg=n(L,"LI",{});var iy=s(tg);Eme=n(iy,"STRONG",{});var BPe=s(Eme);rio=r(BPe,"ctrl"),BPe.forEach(t),tio=r(iy," \u2014 "),tN=n(iy,"A",{href:!0});var IPe=s(tN);aio=r(IPe,"CTRLConfig"),IPe.forEach(t),nio=r(iy," (CTRL model)"),iy.forEach(t),sio=i(L),ag=n(L,"LI",{});var dy=s(ag);Cme=n(dy,"STRONG",{});var NPe=s(Cme);lio=r(NPe,"cvt"),NPe.forEach(t),iio=r(dy," \u2014 "),aN=n(dy,"A",{href:!0});var qPe=s(aN);dio=r(qPe,"CvtConfig"),qPe.forEach(t),cio=r(dy," (CvT model)"),dy.forEach(t),mio=i(L),ng=n(L,"LI",{});var cy=s(ng);wme=n(cy,"STRONG",{});var jPe=s(wme);fio=r(jPe,"data2vec-audio"),jPe.forEach(t),gio=r(cy," \u2014 "),nN=n(cy,"A",{href:!0});var DPe=s(nN);hio=r(DPe,"Data2VecAudioConfig"),DPe.forEach(t),uio=r(cy," (Data2VecAudio model)"),cy.forEach(t),pio=i(L),sg=n(L,"LI",{});var my=s(sg);Ame=n(my,"STRONG",{});var GPe=s(Ame);_io=r(GPe,"data2vec-text"),GPe.forEach(t),bio=r(my," \u2014 "),sN=n(my,"A",{href:!0});var OPe=s(sN);vio=r(OPe,"Data2VecTextConfig"),OPe.forEach(t),Fio=r(my," (Data2VecText model)"),my.forEach(t),Tio=i(L),lg=n(L,"LI",{});var fy=s(lg);Lme=n(fy,"STRONG",{});var VPe=s(Lme);Mio=r(VPe,"data2vec-vision"),VPe.forEach(t),Eio=r(fy," \u2014 "),lN=n(fy,"A",{href:!0});var XPe=s(lN);Cio=r(XPe,"Data2VecVisionConfig"),XPe.forEach(t),wio=r(fy," (Data2VecVision model)"),fy.forEach(t),Aio=i(L),ig=n(L,"LI",{});var gy=s(ig);yme=n(gy,"STRONG",{});var zPe=s(yme);Lio=r(zPe,"deberta"),zPe.forEach(t),yio=r(gy," \u2014 "),iN=n(gy,"A",{href:!0});var QPe=s(iN);xio=r(QPe,"DebertaConfig"),QPe.forEach(t),$io=r(gy," (DeBERTa model)"),gy.forEach(t),kio=i(L),dg=n(L,"LI",{});var hy=s(dg);xme=n(hy,"STRONG",{});var WPe=s(xme);Sio=r(WPe,"deberta-v2"),WPe.forEach(t),Rio=r(hy," \u2014 "),dN=n(hy,"A",{href:!0});var UPe=s(dN);Pio=r(UPe,"DebertaV2Config"),UPe.forEach(t),Bio=r(hy," (DeBERTa-v2 model)"),hy.forEach(t),Iio=i(L),cg=n(L,"LI",{});var uy=s(cg);$me=n(uy,"STRONG",{});var HPe=s($me);Nio=r(HPe,"decision_transformer"),HPe.forEach(t),qio=r(uy," \u2014 "),cN=n(uy,"A",{href:!0});var JPe=s(cN);jio=r(JPe,"DecisionTransformerConfig"),JPe.forEach(t),Dio=r(uy," (Decision Transformer model)"),uy.forEach(t),Gio=i(L),mg=n(L,"LI",{});var py=s(mg);kme=n(py,"STRONG",{});var YPe=s(kme);Oio=r(YPe,"deformable_detr"),YPe.forEach(t),Vio=r(py," \u2014 "),mN=n(py,"A",{href:!0});var ZPe=s(mN);Xio=r(ZPe,"DeformableDetrConfig"),ZPe.forEach(t),zio=r(py," (Deformable DETR model)"),py.forEach(t),Qio=i(L),fg=n(L,"LI",{});var _y=s(fg);Sme=n(_y,"STRONG",{});var KPe=s(Sme);Wio=r(KPe,"deit"),KPe.forEach(t),Uio=r(_y," \u2014 "),fN=n(_y,"A",{href:!0});var ZCt=s(fN);Hio=r(ZCt,"DeiTConfig"),ZCt.forEach(t),Jio=r(_y," (DeiT model)"),_y.forEach(t),Yio=i(L),gg=n(L,"LI",{});var eBe=s(gg);Rme=n(eBe,"STRONG",{});var KCt=s(Rme);Zio=r(KCt,"detr"),KCt.forEach(t),Kio=r(eBe," \u2014 "),gN=n(eBe,"A",{href:!0});var e3t=s(gN);edo=r(e3t,"DetrConfig"),e3t.forEach(t),odo=r(eBe," (DETR model)"),eBe.forEach(t),rdo=i(L),hg=n(L,"LI",{});var oBe=s(hg);Pme=n(oBe,"STRONG",{});var o3t=s(Pme);tdo=r(o3t,"distilbert"),o3t.forEach(t),ado=r(oBe," \u2014 "),hN=n(oBe,"A",{href:!0});var r3t=s(hN);ndo=r(r3t,"DistilBertConfig"),r3t.forEach(t),sdo=r(oBe," (DistilBERT model)"),oBe.forEach(t),ldo=i(L),ug=n(L,"LI",{});var rBe=s(ug);Bme=n(rBe,"STRONG",{});var t3t=s(Bme);ido=r(t3t,"donut-swin"),t3t.forEach(t),ddo=r(rBe," \u2014 "),uN=n(rBe,"A",{href:!0});var a3t=s(uN);cdo=r(a3t,"DonutSwinConfig"),a3t.forEach(t),mdo=r(rBe," (DonutSwin model)"),rBe.forEach(t),fdo=i(L),pg=n(L,"LI",{});var tBe=s(pg);Ime=n(tBe,"STRONG",{});var n3t=s(Ime);gdo=r(n3t,"dpr"),n3t.forEach(t),hdo=r(tBe," \u2014 "),pN=n(tBe,"A",{href:!0});var s3t=s(pN);udo=r(s3t,"DPRConfig"),s3t.forEach(t),pdo=r(tBe," (DPR model)"),tBe.forEach(t),_do=i(L),_g=n(L,"LI",{});var aBe=s(_g);Nme=n(aBe,"STRONG",{});var l3t=s(Nme);bdo=r(l3t,"dpt"),l3t.forEach(t),vdo=r(aBe," \u2014 "),_N=n(aBe,"A",{href:!0});var i3t=s(_N);Fdo=r(i3t,"DPTConfig"),i3t.forEach(t),Tdo=r(aBe," (DPT model)"),aBe.forEach(t),Mdo=i(L),bg=n(L,"LI",{});var nBe=s(bg);qme=n(nBe,"STRONG",{});var d3t=s(qme);Edo=r(d3t,"electra"),d3t.forEach(t),Cdo=r(nBe," \u2014 "),bN=n(nBe,"A",{href:!0});var c3t=s(bN);wdo=r(c3t,"ElectraConfig"),c3t.forEach(t),Ado=r(nBe," (ELECTRA model)"),nBe.forEach(t),Ldo=i(L),vg=n(L,"LI",{});var sBe=s(vg);jme=n(sBe,"STRONG",{});var m3t=s(jme);ydo=r(m3t,"encoder-decoder"),m3t.forEach(t),xdo=r(sBe," \u2014 "),vN=n(sBe,"A",{href:!0});var f3t=s(vN);$do=r(f3t,"EncoderDecoderConfig"),f3t.forEach(t),kdo=r(sBe," (Encoder decoder model)"),sBe.forEach(t),Sdo=i(L),Fg=n(L,"LI",{});var lBe=s(Fg);Dme=n(lBe,"STRONG",{});var g3t=s(Dme);Rdo=r(g3t,"ernie"),g3t.forEach(t),Pdo=r(lBe," \u2014 "),FN=n(lBe,"A",{href:!0});var h3t=s(FN);Bdo=r(h3t,"ErnieConfig"),h3t.forEach(t),Ido=r(lBe," (ERNIE model)"),lBe.forEach(t),Ndo=i(L),Tg=n(L,"LI",{});var iBe=s(Tg);Gme=n(iBe,"STRONG",{});var u3t=s(Gme);qdo=r(u3t,"esm"),u3t.forEach(t),jdo=r(iBe," \u2014 "),TN=n(iBe,"A",{href:!0});var p3t=s(TN);Ddo=r(p3t,"EsmConfig"),p3t.forEach(t),Gdo=r(iBe," (ESM model)"),iBe.forEach(t),Odo=i(L),Mg=n(L,"LI",{});var dBe=s(Mg);Ome=n(dBe,"STRONG",{});var _3t=s(Ome);Vdo=r(_3t,"flaubert"),_3t.forEach(t),Xdo=r(dBe," \u2014 "),MN=n(dBe,"A",{href:!0});var b3t=s(MN);zdo=r(b3t,"FlaubertConfig"),b3t.forEach(t),Qdo=r(dBe," (FlauBERT model)"),dBe.forEach(t),Wdo=i(L),Eg=n(L,"LI",{});var cBe=s(Eg);Vme=n(cBe,"STRONG",{});var v3t=s(Vme);Udo=r(v3t,"flava"),v3t.forEach(t),Hdo=r(cBe," \u2014 "),EN=n(cBe,"A",{href:!0});var F3t=s(EN);Jdo=r(F3t,"FlavaConfig"),F3t.forEach(t),Ydo=r(cBe," (FLAVA model)"),cBe.forEach(t),Zdo=i(L),Cg=n(L,"LI",{});var mBe=s(Cg);Xme=n(mBe,"STRONG",{});var T3t=s(Xme);Kdo=r(T3t,"fnet"),T3t.forEach(t),eco=r(mBe," \u2014 "),CN=n(mBe,"A",{href:!0});var M3t=s(CN);oco=r(M3t,"FNetConfig"),M3t.forEach(t),rco=r(mBe," (FNet model)"),mBe.forEach(t),tco=i(L),wg=n(L,"LI",{});var fBe=s(wg);zme=n(fBe,"STRONG",{});var E3t=s(zme);aco=r(E3t,"fsmt"),E3t.forEach(t),nco=r(fBe," \u2014 "),wN=n(fBe,"A",{href:!0});var C3t=s(wN);sco=r(C3t,"FSMTConfig"),C3t.forEach(t),lco=r(fBe," (FairSeq Machine-Translation model)"),fBe.forEach(t),ico=i(L),Ag=n(L,"LI",{});var gBe=s(Ag);Qme=n(gBe,"STRONG",{});var w3t=s(Qme);dco=r(w3t,"funnel"),w3t.forEach(t),cco=r(gBe," \u2014 "),AN=n(gBe,"A",{href:!0});var A3t=s(AN);mco=r(A3t,"FunnelConfig"),A3t.forEach(t),fco=r(gBe," (Funnel Transformer model)"),gBe.forEach(t),gco=i(L),Lg=n(L,"LI",{});var hBe=s(Lg);Wme=n(hBe,"STRONG",{});var L3t=s(Wme);hco=r(L3t,"glpn"),L3t.forEach(t),uco=r(hBe," \u2014 "),LN=n(hBe,"A",{href:!0});var y3t=s(LN);pco=r(y3t,"GLPNConfig"),y3t.forEach(t),_co=r(hBe," (GLPN model)"),hBe.forEach(t),bco=i(L),yg=n(L,"LI",{});var uBe=s(yg);Ume=n(uBe,"STRONG",{});var x3t=s(Ume);vco=r(x3t,"gpt2"),x3t.forEach(t),Fco=r(uBe," \u2014 "),yN=n(uBe,"A",{href:!0});var $3t=s(yN);Tco=r($3t,"GPT2Config"),$3t.forEach(t),Mco=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),Eco=i(L),xg=n(L,"LI",{});var pBe=s(xg);Hme=n(pBe,"STRONG",{});var k3t=s(Hme);Cco=r(k3t,"gpt_neo"),k3t.forEach(t),wco=r(pBe," \u2014 "),xN=n(pBe,"A",{href:!0});var S3t=s(xN);Aco=r(S3t,"GPTNeoConfig"),S3t.forEach(t),Lco=r(pBe," (GPT Neo model)"),pBe.forEach(t),yco=i(L),$g=n(L,"LI",{});var _Be=s($g);Jme=n(_Be,"STRONG",{});var R3t=s(Jme);xco=r(R3t,"gpt_neox"),R3t.forEach(t),$co=r(_Be," \u2014 "),$N=n(_Be,"A",{href:!0});var P3t=s($N);kco=r(P3t,"GPTNeoXConfig"),P3t.forEach(t),Sco=r(_Be," (GPT NeoX model)"),_Be.forEach(t),Rco=i(L),kg=n(L,"LI",{});var bBe=s(kg);Yme=n(bBe,"STRONG",{});var B3t=s(Yme);Pco=r(B3t,"gpt_neox_japanese"),B3t.forEach(t),Bco=r(bBe," \u2014 "),kN=n(bBe,"A",{href:!0});var I3t=s(kN);Ico=r(I3t,"GPTNeoXJapaneseConfig"),I3t.forEach(t),Nco=r(bBe," (GPT NeoX Japanese model)"),bBe.forEach(t),qco=i(L),Sg=n(L,"LI",{});var vBe=s(Sg);Zme=n(vBe,"STRONG",{});var N3t=s(Zme);jco=r(N3t,"gptj"),N3t.forEach(t),Dco=r(vBe," \u2014 "),SN=n(vBe,"A",{href:!0});var q3t=s(SN);Gco=r(q3t,"GPTJConfig"),q3t.forEach(t),Oco=r(vBe," (GPT-J model)"),vBe.forEach(t),Vco=i(L),Rg=n(L,"LI",{});var FBe=s(Rg);Kme=n(FBe,"STRONG",{});var j3t=s(Kme);Xco=r(j3t,"groupvit"),j3t.forEach(t),zco=r(FBe," \u2014 "),RN=n(FBe,"A",{href:!0});var D3t=s(RN);Qco=r(D3t,"GroupViTConfig"),D3t.forEach(t),Wco=r(FBe," (GroupViT model)"),FBe.forEach(t),Uco=i(L),Pg=n(L,"LI",{});var TBe=s(Pg);efe=n(TBe,"STRONG",{});var G3t=s(efe);Hco=r(G3t,"hubert"),G3t.forEach(t),Jco=r(TBe," \u2014 "),PN=n(TBe,"A",{href:!0});var O3t=s(PN);Yco=r(O3t,"HubertConfig"),O3t.forEach(t),Zco=r(TBe," (Hubert model)"),TBe.forEach(t),Kco=i(L),Bg=n(L,"LI",{});var MBe=s(Bg);ofe=n(MBe,"STRONG",{});var V3t=s(ofe);emo=r(V3t,"ibert"),V3t.forEach(t),omo=r(MBe," \u2014 "),BN=n(MBe,"A",{href:!0});var X3t=s(BN);rmo=r(X3t,"IBertConfig"),X3t.forEach(t),tmo=r(MBe," (I-BERT model)"),MBe.forEach(t),amo=i(L),Ig=n(L,"LI",{});var EBe=s(Ig);rfe=n(EBe,"STRONG",{});var z3t=s(rfe);nmo=r(z3t,"imagegpt"),z3t.forEach(t),smo=r(EBe," \u2014 "),IN=n(EBe,"A",{href:!0});var Q3t=s(IN);lmo=r(Q3t,"ImageGPTConfig"),Q3t.forEach(t),imo=r(EBe," (ImageGPT model)"),EBe.forEach(t),dmo=i(L),Ng=n(L,"LI",{});var CBe=s(Ng);tfe=n(CBe,"STRONG",{});var W3t=s(tfe);cmo=r(W3t,"layoutlm"),W3t.forEach(t),mmo=r(CBe," \u2014 "),NN=n(CBe,"A",{href:!0});var U3t=s(NN);fmo=r(U3t,"LayoutLMConfig"),U3t.forEach(t),gmo=r(CBe," (LayoutLM model)"),CBe.forEach(t),hmo=i(L),qg=n(L,"LI",{});var wBe=s(qg);afe=n(wBe,"STRONG",{});var H3t=s(afe);umo=r(H3t,"layoutlmv2"),H3t.forEach(t),pmo=r(wBe," \u2014 "),qN=n(wBe,"A",{href:!0});var J3t=s(qN);_mo=r(J3t,"LayoutLMv2Config"),J3t.forEach(t),bmo=r(wBe," (LayoutLMv2 model)"),wBe.forEach(t),vmo=i(L),jg=n(L,"LI",{});var ABe=s(jg);nfe=n(ABe,"STRONG",{});var Y3t=s(nfe);Fmo=r(Y3t,"layoutlmv3"),Y3t.forEach(t),Tmo=r(ABe," \u2014 "),jN=n(ABe,"A",{href:!0});var Z3t=s(jN);Mmo=r(Z3t,"LayoutLMv3Config"),Z3t.forEach(t),Emo=r(ABe," (LayoutLMv3 model)"),ABe.forEach(t),Cmo=i(L),Dg=n(L,"LI",{});var LBe=s(Dg);sfe=n(LBe,"STRONG",{});var K3t=s(sfe);wmo=r(K3t,"led"),K3t.forEach(t),Amo=r(LBe," \u2014 "),DN=n(LBe,"A",{href:!0});var e5t=s(DN);Lmo=r(e5t,"LEDConfig"),e5t.forEach(t),ymo=r(LBe," (LED model)"),LBe.forEach(t),xmo=i(L),Gg=n(L,"LI",{});var yBe=s(Gg);lfe=n(yBe,"STRONG",{});var o5t=s(lfe);$mo=r(o5t,"levit"),o5t.forEach(t),kmo=r(yBe," \u2014 "),GN=n(yBe,"A",{href:!0});var r5t=s(GN);Smo=r(r5t,"LevitConfig"),r5t.forEach(t),Rmo=r(yBe," (LeViT model)"),yBe.forEach(t),Pmo=i(L),Og=n(L,"LI",{});var xBe=s(Og);ife=n(xBe,"STRONG",{});var t5t=s(ife);Bmo=r(t5t,"longformer"),t5t.forEach(t),Imo=r(xBe," \u2014 "),ON=n(xBe,"A",{href:!0});var a5t=s(ON);Nmo=r(a5t,"LongformerConfig"),a5t.forEach(t),qmo=r(xBe," (Longformer model)"),xBe.forEach(t),jmo=i(L),Vg=n(L,"LI",{});var $Be=s(Vg);dfe=n($Be,"STRONG",{});var n5t=s(dfe);Dmo=r(n5t,"longt5"),n5t.forEach(t),Gmo=r($Be," \u2014 "),VN=n($Be,"A",{href:!0});var s5t=s(VN);Omo=r(s5t,"LongT5Config"),s5t.forEach(t),Vmo=r($Be," (LongT5 model)"),$Be.forEach(t),Xmo=i(L),Xg=n(L,"LI",{});var kBe=s(Xg);cfe=n(kBe,"STRONG",{});var l5t=s(cfe);zmo=r(l5t,"luke"),l5t.forEach(t),Qmo=r(kBe," \u2014 "),XN=n(kBe,"A",{href:!0});var i5t=s(XN);Wmo=r(i5t,"LukeConfig"),i5t.forEach(t),Umo=r(kBe," (LUKE model)"),kBe.forEach(t),Hmo=i(L),zg=n(L,"LI",{});var SBe=s(zg);mfe=n(SBe,"STRONG",{});var d5t=s(mfe);Jmo=r(d5t,"lxmert"),d5t.forEach(t),Ymo=r(SBe," \u2014 "),zN=n(SBe,"A",{href:!0});var c5t=s(zN);Zmo=r(c5t,"LxmertConfig"),c5t.forEach(t),Kmo=r(SBe," (LXMERT model)"),SBe.forEach(t),efo=i(L),Qg=n(L,"LI",{});var RBe=s(Qg);ffe=n(RBe,"STRONG",{});var m5t=s(ffe);ofo=r(m5t,"m2m_100"),m5t.forEach(t),rfo=r(RBe," \u2014 "),QN=n(RBe,"A",{href:!0});var f5t=s(QN);tfo=r(f5t,"M2M100Config"),f5t.forEach(t),afo=r(RBe," (M2M100 model)"),RBe.forEach(t),nfo=i(L),Wg=n(L,"LI",{});var PBe=s(Wg);gfe=n(PBe,"STRONG",{});var g5t=s(gfe);sfo=r(g5t,"marian"),g5t.forEach(t),lfo=r(PBe," \u2014 "),WN=n(PBe,"A",{href:!0});var h5t=s(WN);ifo=r(h5t,"MarianConfig"),h5t.forEach(t),dfo=r(PBe," (Marian model)"),PBe.forEach(t),cfo=i(L),Ug=n(L,"LI",{});var BBe=s(Ug);hfe=n(BBe,"STRONG",{});var u5t=s(hfe);mfo=r(u5t,"markuplm"),u5t.forEach(t),ffo=r(BBe," \u2014 "),UN=n(BBe,"A",{href:!0});var p5t=s(UN);gfo=r(p5t,"MarkupLMConfig"),p5t.forEach(t),hfo=r(BBe," (MarkupLM model)"),BBe.forEach(t),ufo=i(L),Hg=n(L,"LI",{});var IBe=s(Hg);ufe=n(IBe,"STRONG",{});var _5t=s(ufe);pfo=r(_5t,"maskformer"),_5t.forEach(t),_fo=r(IBe," \u2014 "),HN=n(IBe,"A",{href:!0});var b5t=s(HN);bfo=r(b5t,"MaskFormerConfig"),b5t.forEach(t),vfo=r(IBe," (MaskFormer model)"),IBe.forEach(t),Ffo=i(L),Jg=n(L,"LI",{});var NBe=s(Jg);pfe=n(NBe,"STRONG",{});var v5t=s(pfe);Tfo=r(v5t,"mbart"),v5t.forEach(t),Mfo=r(NBe," \u2014 "),JN=n(NBe,"A",{href:!0});var F5t=s(JN);Efo=r(F5t,"MBartConfig"),F5t.forEach(t),Cfo=r(NBe," (mBART model)"),NBe.forEach(t),wfo=i(L),Yg=n(L,"LI",{});var qBe=s(Yg);_fe=n(qBe,"STRONG",{});var T5t=s(_fe);Afo=r(T5t,"mctct"),T5t.forEach(t),Lfo=r(qBe," \u2014 "),YN=n(qBe,"A",{href:!0});var M5t=s(YN);yfo=r(M5t,"MCTCTConfig"),M5t.forEach(t),xfo=r(qBe," (M-CTC-T model)"),qBe.forEach(t),$fo=i(L),Zg=n(L,"LI",{});var jBe=s(Zg);bfe=n(jBe,"STRONG",{});var E5t=s(bfe);kfo=r(E5t,"megatron-bert"),E5t.forEach(t),Sfo=r(jBe," \u2014 "),ZN=n(jBe,"A",{href:!0});var C5t=s(ZN);Rfo=r(C5t,"MegatronBertConfig"),C5t.forEach(t),Pfo=r(jBe," (Megatron-BERT model)"),jBe.forEach(t),Bfo=i(L),Kg=n(L,"LI",{});var DBe=s(Kg);vfe=n(DBe,"STRONG",{});var w5t=s(vfe);Ifo=r(w5t,"mobilebert"),w5t.forEach(t),Nfo=r(DBe," \u2014 "),KN=n(DBe,"A",{href:!0});var A5t=s(KN);qfo=r(A5t,"MobileBertConfig"),A5t.forEach(t),jfo=r(DBe," (MobileBERT model)"),DBe.forEach(t),Dfo=i(L),eh=n(L,"LI",{});var GBe=s(eh);Ffe=n(GBe,"STRONG",{});var L5t=s(Ffe);Gfo=r(L5t,"mobilevit"),L5t.forEach(t),Ofo=r(GBe," \u2014 "),eq=n(GBe,"A",{href:!0});var y5t=s(eq);Vfo=r(y5t,"MobileViTConfig"),y5t.forEach(t),Xfo=r(GBe," (MobileViT model)"),GBe.forEach(t),zfo=i(L),oh=n(L,"LI",{});var OBe=s(oh);Tfe=n(OBe,"STRONG",{});var x5t=s(Tfe);Qfo=r(x5t,"mpnet"),x5t.forEach(t),Wfo=r(OBe," \u2014 "),oq=n(OBe,"A",{href:!0});var $5t=s(oq);Ufo=r($5t,"MPNetConfig"),$5t.forEach(t),Hfo=r(OBe," (MPNet model)"),OBe.forEach(t),Jfo=i(L),rh=n(L,"LI",{});var VBe=s(rh);Mfe=n(VBe,"STRONG",{});var k5t=s(Mfe);Yfo=r(k5t,"mt5"),k5t.forEach(t),Zfo=r(VBe," \u2014 "),rq=n(VBe,"A",{href:!0});var S5t=s(rq);Kfo=r(S5t,"MT5Config"),S5t.forEach(t),ego=r(VBe," (MT5 model)"),VBe.forEach(t),ogo=i(L),th=n(L,"LI",{});var XBe=s(th);Efe=n(XBe,"STRONG",{});var R5t=s(Efe);rgo=r(R5t,"mvp"),R5t.forEach(t),tgo=r(XBe," \u2014 "),tq=n(XBe,"A",{href:!0});var P5t=s(tq);ago=r(P5t,"MvpConfig"),P5t.forEach(t),ngo=r(XBe," (MVP model)"),XBe.forEach(t),sgo=i(L),ah=n(L,"LI",{});var zBe=s(ah);Cfe=n(zBe,"STRONG",{});var B5t=s(Cfe);lgo=r(B5t,"nezha"),B5t.forEach(t),igo=r(zBe," \u2014 "),aq=n(zBe,"A",{href:!0});var I5t=s(aq);dgo=r(I5t,"NezhaConfig"),I5t.forEach(t),cgo=r(zBe," (Nezha model)"),zBe.forEach(t),mgo=i(L),nh=n(L,"LI",{});var QBe=s(nh);wfe=n(QBe,"STRONG",{});var N5t=s(wfe);fgo=r(N5t,"nystromformer"),N5t.forEach(t),ggo=r(QBe," \u2014 "),nq=n(QBe,"A",{href:!0});var q5t=s(nq);hgo=r(q5t,"NystromformerConfig"),q5t.forEach(t),ugo=r(QBe," (Nystr\xF6mformer model)"),QBe.forEach(t),pgo=i(L),sh=n(L,"LI",{});var WBe=s(sh);Afe=n(WBe,"STRONG",{});var j5t=s(Afe);_go=r(j5t,"openai-gpt"),j5t.forEach(t),bgo=r(WBe," \u2014 "),sq=n(WBe,"A",{href:!0});var D5t=s(sq);vgo=r(D5t,"OpenAIGPTConfig"),D5t.forEach(t),Fgo=r(WBe," (OpenAI GPT model)"),WBe.forEach(t),Tgo=i(L),lh=n(L,"LI",{});var UBe=s(lh);Lfe=n(UBe,"STRONG",{});var G5t=s(Lfe);Mgo=r(G5t,"opt"),G5t.forEach(t),Ego=r(UBe," \u2014 "),lq=n(UBe,"A",{href:!0});var O5t=s(lq);Cgo=r(O5t,"OPTConfig"),O5t.forEach(t),wgo=r(UBe," (OPT model)"),UBe.forEach(t),Ago=i(L),ih=n(L,"LI",{});var HBe=s(ih);yfe=n(HBe,"STRONG",{});var V5t=s(yfe);Lgo=r(V5t,"owlvit"),V5t.forEach(t),ygo=r(HBe," \u2014 "),iq=n(HBe,"A",{href:!0});var X5t=s(iq);xgo=r(X5t,"OwlViTConfig"),X5t.forEach(t),$go=r(HBe," (OWL-ViT model)"),HBe.forEach(t),kgo=i(L),dh=n(L,"LI",{});var JBe=s(dh);xfe=n(JBe,"STRONG",{});var z5t=s(xfe);Sgo=r(z5t,"pegasus"),z5t.forEach(t),Rgo=r(JBe," \u2014 "),dq=n(JBe,"A",{href:!0});var Q5t=s(dq);Pgo=r(Q5t,"PegasusConfig"),Q5t.forEach(t),Bgo=r(JBe," (Pegasus model)"),JBe.forEach(t),Igo=i(L),ch=n(L,"LI",{});var YBe=s(ch);$fe=n(YBe,"STRONG",{});var W5t=s($fe);Ngo=r(W5t,"pegasus_x"),W5t.forEach(t),qgo=r(YBe," \u2014 "),cq=n(YBe,"A",{href:!0});var U5t=s(cq);jgo=r(U5t,"PegasusXConfig"),U5t.forEach(t),Dgo=r(YBe," (PEGASUS-X model)"),YBe.forEach(t),Ggo=i(L),mh=n(L,"LI",{});var ZBe=s(mh);kfe=n(ZBe,"STRONG",{});var H5t=s(kfe);Ogo=r(H5t,"perceiver"),H5t.forEach(t),Vgo=r(ZBe," \u2014 "),mq=n(ZBe,"A",{href:!0});var J5t=s(mq);Xgo=r(J5t,"PerceiverConfig"),J5t.forEach(t),zgo=r(ZBe," (Perceiver model)"),ZBe.forEach(t),Qgo=i(L),fh=n(L,"LI",{});var KBe=s(fh);Sfe=n(KBe,"STRONG",{});var Y5t=s(Sfe);Wgo=r(Y5t,"plbart"),Y5t.forEach(t),Ugo=r(KBe," \u2014 "),fq=n(KBe,"A",{href:!0});var Z5t=s(fq);Hgo=r(Z5t,"PLBartConfig"),Z5t.forEach(t),Jgo=r(KBe," (PLBart model)"),KBe.forEach(t),Ygo=i(L),gh=n(L,"LI",{});var eIe=s(gh);Rfe=n(eIe,"STRONG",{});var K5t=s(Rfe);Zgo=r(K5t,"poolformer"),K5t.forEach(t),Kgo=r(eIe," \u2014 "),gq=n(eIe,"A",{href:!0});var e0t=s(gq);eho=r(e0t,"PoolFormerConfig"),e0t.forEach(t),oho=r(eIe," (PoolFormer model)"),eIe.forEach(t),rho=i(L),hh=n(L,"LI",{});var oIe=s(hh);Pfe=n(oIe,"STRONG",{});var o0t=s(Pfe);tho=r(o0t,"prophetnet"),o0t.forEach(t),aho=r(oIe," \u2014 "),hq=n(oIe,"A",{href:!0});var r0t=s(hq);nho=r(r0t,"ProphetNetConfig"),r0t.forEach(t),sho=r(oIe," (ProphetNet model)"),oIe.forEach(t),lho=i(L),uh=n(L,"LI",{});var rIe=s(uh);Bfe=n(rIe,"STRONG",{});var t0t=s(Bfe);iho=r(t0t,"qdqbert"),t0t.forEach(t),dho=r(rIe," \u2014 "),uq=n(rIe,"A",{href:!0});var a0t=s(uq);cho=r(a0t,"QDQBertConfig"),a0t.forEach(t),mho=r(rIe," (QDQBert model)"),rIe.forEach(t),fho=i(L),ph=n(L,"LI",{});var tIe=s(ph);Ife=n(tIe,"STRONG",{});var n0t=s(Ife);gho=r(n0t,"rag"),n0t.forEach(t),hho=r(tIe," \u2014 "),pq=n(tIe,"A",{href:!0});var s0t=s(pq);uho=r(s0t,"RagConfig"),s0t.forEach(t),pho=r(tIe," (RAG model)"),tIe.forEach(t),_ho=i(L),_h=n(L,"LI",{});var aIe=s(_h);Nfe=n(aIe,"STRONG",{});var l0t=s(Nfe);bho=r(l0t,"realm"),l0t.forEach(t),vho=r(aIe," \u2014 "),_q=n(aIe,"A",{href:!0});var i0t=s(_q);Fho=r(i0t,"RealmConfig"),i0t.forEach(t),Tho=r(aIe," (REALM model)"),aIe.forEach(t),Mho=i(L),bh=n(L,"LI",{});var nIe=s(bh);qfe=n(nIe,"STRONG",{});var d0t=s(qfe);Eho=r(d0t,"reformer"),d0t.forEach(t),Cho=r(nIe," \u2014 "),bq=n(nIe,"A",{href:!0});var c0t=s(bq);who=r(c0t,"ReformerConfig"),c0t.forEach(t),Aho=r(nIe," (Reformer model)"),nIe.forEach(t),Lho=i(L),vh=n(L,"LI",{});var sIe=s(vh);jfe=n(sIe,"STRONG",{});var m0t=s(jfe);yho=r(m0t,"regnet"),m0t.forEach(t),xho=r(sIe," \u2014 "),vq=n(sIe,"A",{href:!0});var f0t=s(vq);$ho=r(f0t,"RegNetConfig"),f0t.forEach(t),kho=r(sIe," (RegNet model)"),sIe.forEach(t),Sho=i(L),Fh=n(L,"LI",{});var lIe=s(Fh);Dfe=n(lIe,"STRONG",{});var g0t=s(Dfe);Rho=r(g0t,"rembert"),g0t.forEach(t),Pho=r(lIe," \u2014 "),Fq=n(lIe,"A",{href:!0});var h0t=s(Fq);Bho=r(h0t,"RemBertConfig"),h0t.forEach(t),Iho=r(lIe," (RemBERT model)"),lIe.forEach(t),Nho=i(L),Th=n(L,"LI",{});var iIe=s(Th);Gfe=n(iIe,"STRONG",{});var u0t=s(Gfe);qho=r(u0t,"resnet"),u0t.forEach(t),jho=r(iIe," \u2014 "),Tq=n(iIe,"A",{href:!0});var p0t=s(Tq);Dho=r(p0t,"ResNetConfig"),p0t.forEach(t),Gho=r(iIe," (ResNet model)"),iIe.forEach(t),Oho=i(L),Mh=n(L,"LI",{});var dIe=s(Mh);Ofe=n(dIe,"STRONG",{});var _0t=s(Ofe);Vho=r(_0t,"retribert"),_0t.forEach(t),Xho=r(dIe," \u2014 "),Mq=n(dIe,"A",{href:!0});var b0t=s(Mq);zho=r(b0t,"RetriBertConfig"),b0t.forEach(t),Qho=r(dIe," (RetriBERT model)"),dIe.forEach(t),Who=i(L),Eh=n(L,"LI",{});var cIe=s(Eh);Vfe=n(cIe,"STRONG",{});var v0t=s(Vfe);Uho=r(v0t,"roberta"),v0t.forEach(t),Hho=r(cIe," \u2014 "),Eq=n(cIe,"A",{href:!0});var F0t=s(Eq);Jho=r(F0t,"RobertaConfig"),F0t.forEach(t),Yho=r(cIe," (RoBERTa model)"),cIe.forEach(t),Zho=i(L),Ch=n(L,"LI",{});var mIe=s(Ch);Xfe=n(mIe,"STRONG",{});var T0t=s(Xfe);Kho=r(T0t,"roformer"),T0t.forEach(t),euo=r(mIe," \u2014 "),Cq=n(mIe,"A",{href:!0});var M0t=s(Cq);ouo=r(M0t,"RoFormerConfig"),M0t.forEach(t),ruo=r(mIe," (RoFormer model)"),mIe.forEach(t),tuo=i(L),wh=n(L,"LI",{});var fIe=s(wh);zfe=n(fIe,"STRONG",{});var E0t=s(zfe);auo=r(E0t,"segformer"),E0t.forEach(t),nuo=r(fIe," \u2014 "),wq=n(fIe,"A",{href:!0});var C0t=s(wq);suo=r(C0t,"SegformerConfig"),C0t.forEach(t),luo=r(fIe," (SegFormer model)"),fIe.forEach(t),iuo=i(L),Ah=n(L,"LI",{});var gIe=s(Ah);Qfe=n(gIe,"STRONG",{});var w0t=s(Qfe);duo=r(w0t,"sew"),w0t.forEach(t),cuo=r(gIe," \u2014 "),Aq=n(gIe,"A",{href:!0});var A0t=s(Aq);muo=r(A0t,"SEWConfig"),A0t.forEach(t),fuo=r(gIe," (SEW model)"),gIe.forEach(t),guo=i(L),Lh=n(L,"LI",{});var hIe=s(Lh);Wfe=n(hIe,"STRONG",{});var L0t=s(Wfe);huo=r(L0t,"sew-d"),L0t.forEach(t),uuo=r(hIe," \u2014 "),Lq=n(hIe,"A",{href:!0});var y0t=s(Lq);puo=r(y0t,"SEWDConfig"),y0t.forEach(t),_uo=r(hIe," (SEW-D model)"),hIe.forEach(t),buo=i(L),yh=n(L,"LI",{});var uIe=s(yh);Ufe=n(uIe,"STRONG",{});var x0t=s(Ufe);vuo=r(x0t,"speech-encoder-decoder"),x0t.forEach(t),Fuo=r(uIe," \u2014 "),yq=n(uIe,"A",{href:!0});var $0t=s(yq);Tuo=r($0t,"SpeechEncoderDecoderConfig"),$0t.forEach(t),Muo=r(uIe," (Speech Encoder decoder model)"),uIe.forEach(t),Euo=i(L),xh=n(L,"LI",{});var pIe=s(xh);Hfe=n(pIe,"STRONG",{});var k0t=s(Hfe);Cuo=r(k0t,"speech_to_text"),k0t.forEach(t),wuo=r(pIe," \u2014 "),xq=n(pIe,"A",{href:!0});var S0t=s(xq);Auo=r(S0t,"Speech2TextConfig"),S0t.forEach(t),Luo=r(pIe," (Speech2Text model)"),pIe.forEach(t),yuo=i(L),$h=n(L,"LI",{});var _Ie=s($h);Jfe=n(_Ie,"STRONG",{});var R0t=s(Jfe);xuo=r(R0t,"speech_to_text_2"),R0t.forEach(t),$uo=r(_Ie," \u2014 "),$q=n(_Ie,"A",{href:!0});var P0t=s($q);kuo=r(P0t,"Speech2Text2Config"),P0t.forEach(t),Suo=r(_Ie," (Speech2Text2 model)"),_Ie.forEach(t),Ruo=i(L),kh=n(L,"LI",{});var bIe=s(kh);Yfe=n(bIe,"STRONG",{});var B0t=s(Yfe);Puo=r(B0t,"splinter"),B0t.forEach(t),Buo=r(bIe," \u2014 "),kq=n(bIe,"A",{href:!0});var I0t=s(kq);Iuo=r(I0t,"SplinterConfig"),I0t.forEach(t),Nuo=r(bIe," (Splinter model)"),bIe.forEach(t),quo=i(L),Sh=n(L,"LI",{});var vIe=s(Sh);Zfe=n(vIe,"STRONG",{});var N0t=s(Zfe);juo=r(N0t,"squeezebert"),N0t.forEach(t),Duo=r(vIe," \u2014 "),Sq=n(vIe,"A",{href:!0});var q0t=s(Sq);Guo=r(q0t,"SqueezeBertConfig"),q0t.forEach(t),Ouo=r(vIe," (SqueezeBERT model)"),vIe.forEach(t),Vuo=i(L),Rh=n(L,"LI",{});var FIe=s(Rh);Kfe=n(FIe,"STRONG",{});var j0t=s(Kfe);Xuo=r(j0t,"swin"),j0t.forEach(t),zuo=r(FIe," \u2014 "),Rq=n(FIe,"A",{href:!0});var D0t=s(Rq);Quo=r(D0t,"SwinConfig"),D0t.forEach(t),Wuo=r(FIe," (Swin Transformer model)"),FIe.forEach(t),Uuo=i(L),Ph=n(L,"LI",{});var TIe=s(Ph);ege=n(TIe,"STRONG",{});var G0t=s(ege);Huo=r(G0t,"swinv2"),G0t.forEach(t),Juo=r(TIe," \u2014 "),Pq=n(TIe,"A",{href:!0});var O0t=s(Pq);Yuo=r(O0t,"Swinv2Config"),O0t.forEach(t),Zuo=r(TIe," (Swin Transformer V2 model)"),TIe.forEach(t),Kuo=i(L),Bh=n(L,"LI",{});var MIe=s(Bh);oge=n(MIe,"STRONG",{});var V0t=s(oge);epo=r(V0t,"t5"),V0t.forEach(t),opo=r(MIe," \u2014 "),Bq=n(MIe,"A",{href:!0});var X0t=s(Bq);rpo=r(X0t,"T5Config"),X0t.forEach(t),tpo=r(MIe," (T5 model)"),MIe.forEach(t),apo=i(L),Ih=n(L,"LI",{});var EIe=s(Ih);rge=n(EIe,"STRONG",{});var z0t=s(rge);npo=r(z0t,"tapas"),z0t.forEach(t),spo=r(EIe," \u2014 "),Iq=n(EIe,"A",{href:!0});var Q0t=s(Iq);lpo=r(Q0t,"TapasConfig"),Q0t.forEach(t),ipo=r(EIe," (TAPAS model)"),EIe.forEach(t),dpo=i(L),Nh=n(L,"LI",{});var CIe=s(Nh);tge=n(CIe,"STRONG",{});var W0t=s(tge);cpo=r(W0t,"time_series_transformer"),W0t.forEach(t),mpo=r(CIe," \u2014 "),Nq=n(CIe,"A",{href:!0});var U0t=s(Nq);fpo=r(U0t,"TimeSeriesTransformerConfig"),U0t.forEach(t),gpo=r(CIe," (Time Series Transformer model)"),CIe.forEach(t),hpo=i(L),qh=n(L,"LI",{});var wIe=s(qh);age=n(wIe,"STRONG",{});var H0t=s(age);upo=r(H0t,"trajectory_transformer"),H0t.forEach(t),ppo=r(wIe," \u2014 "),qq=n(wIe,"A",{href:!0});var J0t=s(qq);_po=r(J0t,"TrajectoryTransformerConfig"),J0t.forEach(t),bpo=r(wIe," (Trajectory Transformer model)"),wIe.forEach(t),vpo=i(L),jh=n(L,"LI",{});var AIe=s(jh);nge=n(AIe,"STRONG",{});var Y0t=s(nge);Fpo=r(Y0t,"transfo-xl"),Y0t.forEach(t),Tpo=r(AIe," \u2014 "),jq=n(AIe,"A",{href:!0});var Z0t=s(jq);Mpo=r(Z0t,"TransfoXLConfig"),Z0t.forEach(t),Epo=r(AIe," (Transformer-XL model)"),AIe.forEach(t),Cpo=i(L),Dh=n(L,"LI",{});var LIe=s(Dh);sge=n(LIe,"STRONG",{});var K0t=s(sge);wpo=r(K0t,"trocr"),K0t.forEach(t),Apo=r(LIe," \u2014 "),Dq=n(LIe,"A",{href:!0});var ewt=s(Dq);Lpo=r(ewt,"TrOCRConfig"),ewt.forEach(t),ypo=r(LIe," (TrOCR model)"),LIe.forEach(t),xpo=i(L),Gh=n(L,"LI",{});var yIe=s(Gh);lge=n(yIe,"STRONG",{});var owt=s(lge);$po=r(owt,"unispeech"),owt.forEach(t),kpo=r(yIe," \u2014 "),Gq=n(yIe,"A",{href:!0});var rwt=s(Gq);Spo=r(rwt,"UniSpeechConfig"),rwt.forEach(t),Rpo=r(yIe," (UniSpeech model)"),yIe.forEach(t),Ppo=i(L),Oh=n(L,"LI",{});var xIe=s(Oh);ige=n(xIe,"STRONG",{});var twt=s(ige);Bpo=r(twt,"unispeech-sat"),twt.forEach(t),Ipo=r(xIe," \u2014 "),Oq=n(xIe,"A",{href:!0});var awt=s(Oq);Npo=r(awt,"UniSpeechSatConfig"),awt.forEach(t),qpo=r(xIe," (UniSpeechSat model)"),xIe.forEach(t),jpo=i(L),Vh=n(L,"LI",{});var $Ie=s(Vh);dge=n($Ie,"STRONG",{});var nwt=s(dge);Dpo=r(nwt,"van"),nwt.forEach(t),Gpo=r($Ie," \u2014 "),Vq=n($Ie,"A",{href:!0});var swt=s(Vq);Opo=r(swt,"VanConfig"),swt.forEach(t),Vpo=r($Ie," (VAN model)"),$Ie.forEach(t),Xpo=i(L),Xh=n(L,"LI",{});var kIe=s(Xh);cge=n(kIe,"STRONG",{});var lwt=s(cge);zpo=r(lwt,"videomae"),lwt.forEach(t),Qpo=r(kIe," \u2014 "),Xq=n(kIe,"A",{href:!0});var iwt=s(Xq);Wpo=r(iwt,"VideoMAEConfig"),iwt.forEach(t),Upo=r(kIe," (VideoMAE model)"),kIe.forEach(t),Hpo=i(L),zh=n(L,"LI",{});var SIe=s(zh);mge=n(SIe,"STRONG",{});var dwt=s(mge);Jpo=r(dwt,"vilt"),dwt.forEach(t),Ypo=r(SIe," \u2014 "),zq=n(SIe,"A",{href:!0});var cwt=s(zq);Zpo=r(cwt,"ViltConfig"),cwt.forEach(t),Kpo=r(SIe," (ViLT model)"),SIe.forEach(t),e_o=i(L),Qh=n(L,"LI",{});var RIe=s(Qh);fge=n(RIe,"STRONG",{});var mwt=s(fge);o_o=r(mwt,"vision-encoder-decoder"),mwt.forEach(t),r_o=r(RIe," \u2014 "),Qq=n(RIe,"A",{href:!0});var fwt=s(Qq);t_o=r(fwt,"VisionEncoderDecoderConfig"),fwt.forEach(t),a_o=r(RIe," (Vision Encoder decoder model)"),RIe.forEach(t),n_o=i(L),Wh=n(L,"LI",{});var PIe=s(Wh);gge=n(PIe,"STRONG",{});var gwt=s(gge);s_o=r(gwt,"vision-text-dual-encoder"),gwt.forEach(t),l_o=r(PIe," \u2014 "),Wq=n(PIe,"A",{href:!0});var hwt=s(Wq);i_o=r(hwt,"VisionTextDualEncoderConfig"),hwt.forEach(t),d_o=r(PIe," (VisionTextDualEncoder model)"),PIe.forEach(t),c_o=i(L),Uh=n(L,"LI",{});var BIe=s(Uh);hge=n(BIe,"STRONG",{});var uwt=s(hge);m_o=r(uwt,"visual_bert"),uwt.forEach(t),f_o=r(BIe," \u2014 "),Uq=n(BIe,"A",{href:!0});var pwt=s(Uq);g_o=r(pwt,"VisualBertConfig"),pwt.forEach(t),h_o=r(BIe," (VisualBERT model)"),BIe.forEach(t),u_o=i(L),Hh=n(L,"LI",{});var IIe=s(Hh);uge=n(IIe,"STRONG",{});var _wt=s(uge);p_o=r(_wt,"vit"),_wt.forEach(t),__o=r(IIe," \u2014 "),Hq=n(IIe,"A",{href:!0});var bwt=s(Hq);b_o=r(bwt,"ViTConfig"),bwt.forEach(t),v_o=r(IIe," (ViT model)"),IIe.forEach(t),F_o=i(L),Jh=n(L,"LI",{});var NIe=s(Jh);pge=n(NIe,"STRONG",{});var vwt=s(pge);T_o=r(vwt,"vit_mae"),vwt.forEach(t),M_o=r(NIe," \u2014 "),Jq=n(NIe,"A",{href:!0});var Fwt=s(Jq);E_o=r(Fwt,"ViTMAEConfig"),Fwt.forEach(t),C_o=r(NIe," (ViTMAE model)"),NIe.forEach(t),w_o=i(L),Yh=n(L,"LI",{});var qIe=s(Yh);_ge=n(qIe,"STRONG",{});var Twt=s(_ge);A_o=r(Twt,"vit_msn"),Twt.forEach(t),L_o=r(qIe," \u2014 "),Yq=n(qIe,"A",{href:!0});var Mwt=s(Yq);y_o=r(Mwt,"ViTMSNConfig"),Mwt.forEach(t),x_o=r(qIe," (ViTMSN model)"),qIe.forEach(t),$_o=i(L),Zh=n(L,"LI",{});var jIe=s(Zh);bge=n(jIe,"STRONG",{});var Ewt=s(bge);k_o=r(Ewt,"wav2vec2"),Ewt.forEach(t),S_o=r(jIe," \u2014 "),Zq=n(jIe,"A",{href:!0});var Cwt=s(Zq);R_o=r(Cwt,"Wav2Vec2Config"),Cwt.forEach(t),P_o=r(jIe," (Wav2Vec2 model)"),jIe.forEach(t),B_o=i(L),Kh=n(L,"LI",{});var DIe=s(Kh);vge=n(DIe,"STRONG",{});var wwt=s(vge);I_o=r(wwt,"wav2vec2-conformer"),wwt.forEach(t),N_o=r(DIe," \u2014 "),Kq=n(DIe,"A",{href:!0});var Awt=s(Kq);q_o=r(Awt,"Wav2Vec2ConformerConfig"),Awt.forEach(t),j_o=r(DIe," (Wav2Vec2-Conformer model)"),DIe.forEach(t),D_o=i(L),eu=n(L,"LI",{});var GIe=s(eu);Fge=n(GIe,"STRONG",{});var Lwt=s(Fge);G_o=r(Lwt,"wavlm"),Lwt.forEach(t),O_o=r(GIe," \u2014 "),ej=n(GIe,"A",{href:!0});var ywt=s(ej);V_o=r(ywt,"WavLMConfig"),ywt.forEach(t),X_o=r(GIe," (WavLM model)"),GIe.forEach(t),z_o=i(L),ou=n(L,"LI",{});var OIe=s(ou);Tge=n(OIe,"STRONG",{});var xwt=s(Tge);Q_o=r(xwt,"whisper"),xwt.forEach(t),W_o=r(OIe," \u2014 "),oj=n(OIe,"A",{href:!0});var $wt=s(oj);U_o=r($wt,"WhisperConfig"),$wt.forEach(t),H_o=r(OIe," (Whisper model)"),OIe.forEach(t),J_o=i(L),ru=n(L,"LI",{});var VIe=s(ru);Mge=n(VIe,"STRONG",{});var kwt=s(Mge);Y_o=r(kwt,"xclip"),kwt.forEach(t),Z_o=r(VIe," \u2014 "),rj=n(VIe,"A",{href:!0});var Swt=s(rj);K_o=r(Swt,"XCLIPConfig"),Swt.forEach(t),e1o=r(VIe," (X-CLIP model)"),VIe.forEach(t),o1o=i(L),tu=n(L,"LI",{});var XIe=s(tu);Ege=n(XIe,"STRONG",{});var Rwt=s(Ege);r1o=r(Rwt,"xglm"),Rwt.forEach(t),t1o=r(XIe," \u2014 "),tj=n(XIe,"A",{href:!0});var Pwt=s(tj);a1o=r(Pwt,"XGLMConfig"),Pwt.forEach(t),n1o=r(XIe," (XGLM model)"),XIe.forEach(t),s1o=i(L),au=n(L,"LI",{});var zIe=s(au);Cge=n(zIe,"STRONG",{});var Bwt=s(Cge);l1o=r(Bwt,"xlm"),Bwt.forEach(t),i1o=r(zIe," \u2014 "),aj=n(zIe,"A",{href:!0});var Iwt=s(aj);d1o=r(Iwt,"XLMConfig"),Iwt.forEach(t),c1o=r(zIe," (XLM model)"),zIe.forEach(t),m1o=i(L),nu=n(L,"LI",{});var QIe=s(nu);wge=n(QIe,"STRONG",{});var Nwt=s(wge);f1o=r(Nwt,"xlm-prophetnet"),Nwt.forEach(t),g1o=r(QIe," \u2014 "),nj=n(QIe,"A",{href:!0});var qwt=s(nj);h1o=r(qwt,"XLMProphetNetConfig"),qwt.forEach(t),u1o=r(QIe," (XLM-ProphetNet model)"),QIe.forEach(t),p1o=i(L),su=n(L,"LI",{});var WIe=s(su);Age=n(WIe,"STRONG",{});var jwt=s(Age);_1o=r(jwt,"xlm-roberta"),jwt.forEach(t),b1o=r(WIe," \u2014 "),sj=n(WIe,"A",{href:!0});var Dwt=s(sj);v1o=r(Dwt,"XLMRobertaConfig"),Dwt.forEach(t),F1o=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),T1o=i(L),lu=n(L,"LI",{});var UIe=s(lu);Lge=n(UIe,"STRONG",{});var Gwt=s(Lge);M1o=r(Gwt,"xlm-roberta-xl"),Gwt.forEach(t),E1o=r(UIe," \u2014 "),lj=n(UIe,"A",{href:!0});var Owt=s(lj);C1o=r(Owt,"XLMRobertaXLConfig"),Owt.forEach(t),w1o=r(UIe," (XLM-RoBERTa-XL model)"),UIe.forEach(t),A1o=i(L),iu=n(L,"LI",{});var HIe=s(iu);yge=n(HIe,"STRONG",{});var Vwt=s(yge);L1o=r(Vwt,"xlnet"),Vwt.forEach(t),y1o=r(HIe," \u2014 "),ij=n(HIe,"A",{href:!0});var Xwt=s(ij);x1o=r(Xwt,"XLNetConfig"),Xwt.forEach(t),$1o=r(HIe," (XLNet model)"),HIe.forEach(t),k1o=i(L),du=n(L,"LI",{});var JIe=s(du);xge=n(JIe,"STRONG",{});var zwt=s(xge);S1o=r(zwt,"yolos"),zwt.forEach(t),R1o=r(JIe," \u2014 "),dj=n(JIe,"A",{href:!0});var Qwt=s(dj);P1o=r(Qwt,"YolosConfig"),Qwt.forEach(t),B1o=r(JIe," (YOLOS model)"),JIe.forEach(t),I1o=i(L),cu=n(L,"LI",{});var YIe=s(cu);$ge=n(YIe,"STRONG",{});var Wwt=s($ge);N1o=r(Wwt,"yoso"),Wwt.forEach(t),q1o=r(YIe," \u2014 "),cj=n(YIe,"A",{href:!0});var Uwt=s(cj);j1o=r(Uwt,"YosoConfig"),Uwt.forEach(t),D1o=r(YIe," (YOSO model)"),YIe.forEach(t),L.forEach(t),G1o=i(_t),T(mu.$$.fragment,_t),_t.forEach(t),O1o=i(pt),fu=n(pt,"DIV",{class:!0});var Sto=s(fu);T(Bx.$$.fragment,Sto),V1o=i(Sto),kge=n(Sto,"P",{});var Hwt=s(kge);X1o=r(Hwt,"Register a new configuration for this class."),Hwt.forEach(t),Sto.forEach(t),pt.forEach(t),Eoo=i(m),vd=n(m,"H2",{class:!0});var Rto=s(vd);gu=n(Rto,"A",{id:!0,class:!0,href:!0});var Jwt=s(gu);Sge=n(Jwt,"SPAN",{});var Ywt=s(Sge);T(Ix.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),z1o=i(Rto),Rge=n(Rto,"SPAN",{});var Zwt=s(Rge);Q1o=r(Zwt,"AutoTokenizer"),Zwt.forEach(t),Rto.forEach(t),Coo=i(m),So=n(m,"DIV",{class:!0});var Ll=s(So);T(Nx.$$.fragment,Ll),W1o=i(Ll),qx=n(Ll,"P",{});var Pto=s(qx);U1o=r(Pto,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mj=n(Pto,"A",{href:!0});var Kwt=s(mj);H1o=r(Kwt,"AutoTokenizer.from_pretrained()"),Kwt.forEach(t),J1o=r(Pto," class method."),Pto.forEach(t),Y1o=i(Ll),jx=n(Ll,"P",{});var Bto=s(jx);Z1o=r(Bto,"This class cannot be instantiated directly using "),Pge=n(Bto,"CODE",{});var eAt=s(Pge);K1o=r(eAt,"__init__()"),eAt.forEach(t),e2o=r(Bto," (throws an error)."),Bto.forEach(t),o2o=i(Ll),Nr=n(Ll,"DIV",{class:!0});var yl=s(Nr);T(Dx.$$.fragment,yl),r2o=i(yl),Bge=n(yl,"P",{});var oAt=s(Bge);t2o=r(oAt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oAt.forEach(t),a2o=i(yl),Za=n(yl,"P",{});var by=s(Za);n2o=r(by,"The tokenizer class to instantiate is selected based on the "),Ige=n(by,"CODE",{});var rAt=s(Ige);s2o=r(rAt,"model_type"),rAt.forEach(t),l2o=r(by,` property of the config object (either
passed as an argument or loaded from `),Nge=n(by,"CODE",{});var tAt=s(Nge);i2o=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),d2o=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(by,"CODE",{});var aAt=s(qge);c2o=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),m2o=r(by,":"),by.forEach(t),f2o=i(yl),k=n(yl,"UL",{});var S=s(k);cs=n(S,"LI",{});var pB=s(cs);jge=n(pB,"STRONG",{});var nAt=s(jge);g2o=r(nAt,"albert"),nAt.forEach(t),h2o=r(pB," \u2014 "),fj=n(pB,"A",{href:!0});var sAt=s(fj);u2o=r(sAt,"AlbertTokenizer"),sAt.forEach(t),p2o=r(pB," or "),gj=n(pB,"A",{href:!0});var lAt=s(gj);_2o=r(lAt,"AlbertTokenizerFast"),lAt.forEach(t),b2o=r(pB," (ALBERT model)"),pB.forEach(t),v2o=i(S),ms=n(S,"LI",{});var _B=s(ms);Dge=n(_B,"STRONG",{});var iAt=s(Dge);F2o=r(iAt,"bart"),iAt.forEach(t),T2o=r(_B," \u2014 "),hj=n(_B,"A",{href:!0});var dAt=s(hj);M2o=r(dAt,"BartTokenizer"),dAt.forEach(t),E2o=r(_B," or "),uj=n(_B,"A",{href:!0});var cAt=s(uj);C2o=r(cAt,"BartTokenizerFast"),cAt.forEach(t),w2o=r(_B," (BART model)"),_B.forEach(t),A2o=i(S),fs=n(S,"LI",{});var bB=s(fs);Gge=n(bB,"STRONG",{});var mAt=s(Gge);L2o=r(mAt,"barthez"),mAt.forEach(t),y2o=r(bB," \u2014 "),pj=n(bB,"A",{href:!0});var fAt=s(pj);x2o=r(fAt,"BarthezTokenizer"),fAt.forEach(t),$2o=r(bB," or "),_j=n(bB,"A",{href:!0});var gAt=s(_j);k2o=r(gAt,"BarthezTokenizerFast"),gAt.forEach(t),S2o=r(bB," (BARThez model)"),bB.forEach(t),R2o=i(S),hu=n(S,"LI",{});var ZIe=s(hu);Oge=n(ZIe,"STRONG",{});var hAt=s(Oge);P2o=r(hAt,"bartpho"),hAt.forEach(t),B2o=r(ZIe," \u2014 "),bj=n(ZIe,"A",{href:!0});var uAt=s(bj);I2o=r(uAt,"BartphoTokenizer"),uAt.forEach(t),N2o=r(ZIe," (BARTpho model)"),ZIe.forEach(t),q2o=i(S),gs=n(S,"LI",{});var vB=s(gs);Vge=n(vB,"STRONG",{});var pAt=s(Vge);j2o=r(pAt,"bert"),pAt.forEach(t),D2o=r(vB," \u2014 "),vj=n(vB,"A",{href:!0});var _At=s(vj);G2o=r(_At,"BertTokenizer"),_At.forEach(t),O2o=r(vB," or "),Fj=n(vB,"A",{href:!0});var bAt=s(Fj);V2o=r(bAt,"BertTokenizerFast"),bAt.forEach(t),X2o=r(vB," (BERT model)"),vB.forEach(t),z2o=i(S),uu=n(S,"LI",{});var KIe=s(uu);Xge=n(KIe,"STRONG",{});var vAt=s(Xge);Q2o=r(vAt,"bert-generation"),vAt.forEach(t),W2o=r(KIe," \u2014 "),Tj=n(KIe,"A",{href:!0});var FAt=s(Tj);U2o=r(FAt,"BertGenerationTokenizer"),FAt.forEach(t),H2o=r(KIe," (Bert Generation model)"),KIe.forEach(t),J2o=i(S),pu=n(S,"LI",{});var eNe=s(pu);zge=n(eNe,"STRONG",{});var TAt=s(zge);Y2o=r(TAt,"bert-japanese"),TAt.forEach(t),Z2o=r(eNe," \u2014 "),Mj=n(eNe,"A",{href:!0});var MAt=s(Mj);K2o=r(MAt,"BertJapaneseTokenizer"),MAt.forEach(t),ebo=r(eNe," (BertJapanese model)"),eNe.forEach(t),obo=i(S),_u=n(S,"LI",{});var oNe=s(_u);Qge=n(oNe,"STRONG",{});var EAt=s(Qge);rbo=r(EAt,"bertweet"),EAt.forEach(t),tbo=r(oNe," \u2014 "),Ej=n(oNe,"A",{href:!0});var CAt=s(Ej);abo=r(CAt,"BertweetTokenizer"),CAt.forEach(t),nbo=r(oNe," (BERTweet model)"),oNe.forEach(t),sbo=i(S),hs=n(S,"LI",{});var FB=s(hs);Wge=n(FB,"STRONG",{});var wAt=s(Wge);lbo=r(wAt,"big_bird"),wAt.forEach(t),ibo=r(FB," \u2014 "),Cj=n(FB,"A",{href:!0});var AAt=s(Cj);dbo=r(AAt,"BigBirdTokenizer"),AAt.forEach(t),cbo=r(FB," or "),wj=n(FB,"A",{href:!0});var LAt=s(wj);mbo=r(LAt,"BigBirdTokenizerFast"),LAt.forEach(t),fbo=r(FB," (BigBird model)"),FB.forEach(t),gbo=i(S),us=n(S,"LI",{});var TB=s(us);Uge=n(TB,"STRONG",{});var yAt=s(Uge);hbo=r(yAt,"bigbird_pegasus"),yAt.forEach(t),ubo=r(TB," \u2014 "),Aj=n(TB,"A",{href:!0});var xAt=s(Aj);pbo=r(xAt,"PegasusTokenizer"),xAt.forEach(t),_bo=r(TB," or "),Lj=n(TB,"A",{href:!0});var $At=s(Lj);bbo=r($At,"PegasusTokenizerFast"),$At.forEach(t),vbo=r(TB," (BigBird-Pegasus model)"),TB.forEach(t),Fbo=i(S),ps=n(S,"LI",{});var MB=s(ps);Hge=n(MB,"STRONG",{});var kAt=s(Hge);Tbo=r(kAt,"blenderbot"),kAt.forEach(t),Mbo=r(MB," \u2014 "),yj=n(MB,"A",{href:!0});var SAt=s(yj);Ebo=r(SAt,"BlenderbotTokenizer"),SAt.forEach(t),Cbo=r(MB," or "),xj=n(MB,"A",{href:!0});var RAt=s(xj);wbo=r(RAt,"BlenderbotTokenizerFast"),RAt.forEach(t),Abo=r(MB," (Blenderbot model)"),MB.forEach(t),Lbo=i(S),bu=n(S,"LI",{});var rNe=s(bu);Jge=n(rNe,"STRONG",{});var PAt=s(Jge);ybo=r(PAt,"blenderbot-small"),PAt.forEach(t),xbo=r(rNe," \u2014 "),$j=n(rNe,"A",{href:!0});var BAt=s($j);$bo=r(BAt,"BlenderbotSmallTokenizer"),BAt.forEach(t),kbo=r(rNe," (BlenderbotSmall model)"),rNe.forEach(t),Sbo=i(S),vu=n(S,"LI",{});var tNe=s(vu);Yge=n(tNe,"STRONG",{});var IAt=s(Yge);Rbo=r(IAt,"bloom"),IAt.forEach(t),Pbo=r(tNe," \u2014 "),kj=n(tNe,"A",{href:!0});var NAt=s(kj);Bbo=r(NAt,"BloomTokenizerFast"),NAt.forEach(t),Ibo=r(tNe," (BLOOM model)"),tNe.forEach(t),Nbo=i(S),Fu=n(S,"LI",{});var aNe=s(Fu);Zge=n(aNe,"STRONG",{});var qAt=s(Zge);qbo=r(qAt,"byt5"),qAt.forEach(t),jbo=r(aNe," \u2014 "),Sj=n(aNe,"A",{href:!0});var jAt=s(Sj);Dbo=r(jAt,"ByT5Tokenizer"),jAt.forEach(t),Gbo=r(aNe," (ByT5 model)"),aNe.forEach(t),Obo=i(S),_s=n(S,"LI",{});var EB=s(_s);Kge=n(EB,"STRONG",{});var DAt=s(Kge);Vbo=r(DAt,"camembert"),DAt.forEach(t),Xbo=r(EB," \u2014 "),Rj=n(EB,"A",{href:!0});var GAt=s(Rj);zbo=r(GAt,"CamembertTokenizer"),GAt.forEach(t),Qbo=r(EB," or "),Pj=n(EB,"A",{href:!0});var OAt=s(Pj);Wbo=r(OAt,"CamembertTokenizerFast"),OAt.forEach(t),Ubo=r(EB," (CamemBERT model)"),EB.forEach(t),Hbo=i(S),Tu=n(S,"LI",{});var nNe=s(Tu);ehe=n(nNe,"STRONG",{});var VAt=s(ehe);Jbo=r(VAt,"canine"),VAt.forEach(t),Ybo=r(nNe," \u2014 "),Bj=n(nNe,"A",{href:!0});var XAt=s(Bj);Zbo=r(XAt,"CanineTokenizer"),XAt.forEach(t),Kbo=r(nNe," (CANINE model)"),nNe.forEach(t),evo=i(S),bs=n(S,"LI",{});var CB=s(bs);ohe=n(CB,"STRONG",{});var zAt=s(ohe);ovo=r(zAt,"clip"),zAt.forEach(t),rvo=r(CB," \u2014 "),Ij=n(CB,"A",{href:!0});var QAt=s(Ij);tvo=r(QAt,"CLIPTokenizer"),QAt.forEach(t),avo=r(CB," or "),Nj=n(CB,"A",{href:!0});var WAt=s(Nj);nvo=r(WAt,"CLIPTokenizerFast"),WAt.forEach(t),svo=r(CB," (CLIP model)"),CB.forEach(t),lvo=i(S),vs=n(S,"LI",{});var wB=s(vs);rhe=n(wB,"STRONG",{});var UAt=s(rhe);ivo=r(UAt,"codegen"),UAt.forEach(t),dvo=r(wB," \u2014 "),qj=n(wB,"A",{href:!0});var HAt=s(qj);cvo=r(HAt,"CodeGenTokenizer"),HAt.forEach(t),mvo=r(wB," or "),jj=n(wB,"A",{href:!0});var JAt=s(jj);fvo=r(JAt,"CodeGenTokenizerFast"),JAt.forEach(t),gvo=r(wB," (CodeGen model)"),wB.forEach(t),hvo=i(S),Fs=n(S,"LI",{});var AB=s(Fs);the=n(AB,"STRONG",{});var YAt=s(the);uvo=r(YAt,"convbert"),YAt.forEach(t),pvo=r(AB," \u2014 "),Dj=n(AB,"A",{href:!0});var ZAt=s(Dj);_vo=r(ZAt,"ConvBertTokenizer"),ZAt.forEach(t),bvo=r(AB," or "),Gj=n(AB,"A",{href:!0});var KAt=s(Gj);vvo=r(KAt,"ConvBertTokenizerFast"),KAt.forEach(t),Fvo=r(AB," (ConvBERT model)"),AB.forEach(t),Tvo=i(S),Ts=n(S,"LI",{});var LB=s(Ts);ahe=n(LB,"STRONG",{});var e6t=s(ahe);Mvo=r(e6t,"cpm"),e6t.forEach(t),Evo=r(LB," \u2014 "),Oj=n(LB,"A",{href:!0});var o6t=s(Oj);Cvo=r(o6t,"CpmTokenizer"),o6t.forEach(t),wvo=r(LB," or "),Vj=n(LB,"A",{href:!0});var r6t=s(Vj);Avo=r(r6t,"CpmTokenizerFast"),r6t.forEach(t),Lvo=r(LB," (CPM model)"),LB.forEach(t),yvo=i(S),Mu=n(S,"LI",{});var sNe=s(Mu);nhe=n(sNe,"STRONG",{});var t6t=s(nhe);xvo=r(t6t,"ctrl"),t6t.forEach(t),$vo=r(sNe," \u2014 "),Xj=n(sNe,"A",{href:!0});var a6t=s(Xj);kvo=r(a6t,"CTRLTokenizer"),a6t.forEach(t),Svo=r(sNe," (CTRL model)"),sNe.forEach(t),Rvo=i(S),Ms=n(S,"LI",{});var yB=s(Ms);she=n(yB,"STRONG",{});var n6t=s(she);Pvo=r(n6t,"data2vec-text"),n6t.forEach(t),Bvo=r(yB," \u2014 "),zj=n(yB,"A",{href:!0});var s6t=s(zj);Ivo=r(s6t,"RobertaTokenizer"),s6t.forEach(t),Nvo=r(yB," or "),Qj=n(yB,"A",{href:!0});var l6t=s(Qj);qvo=r(l6t,"RobertaTokenizerFast"),l6t.forEach(t),jvo=r(yB," (Data2VecText model)"),yB.forEach(t),Dvo=i(S),Es=n(S,"LI",{});var xB=s(Es);lhe=n(xB,"STRONG",{});var i6t=s(lhe);Gvo=r(i6t,"deberta"),i6t.forEach(t),Ovo=r(xB," \u2014 "),Wj=n(xB,"A",{href:!0});var d6t=s(Wj);Vvo=r(d6t,"DebertaTokenizer"),d6t.forEach(t),Xvo=r(xB," or "),Uj=n(xB,"A",{href:!0});var c6t=s(Uj);zvo=r(c6t,"DebertaTokenizerFast"),c6t.forEach(t),Qvo=r(xB," (DeBERTa model)"),xB.forEach(t),Wvo=i(S),Cs=n(S,"LI",{});var $B=s(Cs);ihe=n($B,"STRONG",{});var m6t=s(ihe);Uvo=r(m6t,"deberta-v2"),m6t.forEach(t),Hvo=r($B," \u2014 "),Hj=n($B,"A",{href:!0});var f6t=s(Hj);Jvo=r(f6t,"DebertaV2Tokenizer"),f6t.forEach(t),Yvo=r($B," or "),Jj=n($B,"A",{href:!0});var g6t=s(Jj);Zvo=r(g6t,"DebertaV2TokenizerFast"),g6t.forEach(t),Kvo=r($B," (DeBERTa-v2 model)"),$B.forEach(t),eFo=i(S),ws=n(S,"LI",{});var kB=s(ws);dhe=n(kB,"STRONG",{});var h6t=s(dhe);oFo=r(h6t,"distilbert"),h6t.forEach(t),rFo=r(kB," \u2014 "),Yj=n(kB,"A",{href:!0});var u6t=s(Yj);tFo=r(u6t,"DistilBertTokenizer"),u6t.forEach(t),aFo=r(kB," or "),Zj=n(kB,"A",{href:!0});var p6t=s(Zj);nFo=r(p6t,"DistilBertTokenizerFast"),p6t.forEach(t),sFo=r(kB," (DistilBERT model)"),kB.forEach(t),lFo=i(S),As=n(S,"LI",{});var SB=s(As);che=n(SB,"STRONG",{});var _6t=s(che);iFo=r(_6t,"dpr"),_6t.forEach(t),dFo=r(SB," \u2014 "),Kj=n(SB,"A",{href:!0});var b6t=s(Kj);cFo=r(b6t,"DPRQuestionEncoderTokenizer"),b6t.forEach(t),mFo=r(SB," or "),eD=n(SB,"A",{href:!0});var v6t=s(eD);fFo=r(v6t,"DPRQuestionEncoderTokenizerFast"),v6t.forEach(t),gFo=r(SB," (DPR model)"),SB.forEach(t),hFo=i(S),Ls=n(S,"LI",{});var RB=s(Ls);mhe=n(RB,"STRONG",{});var F6t=s(mhe);uFo=r(F6t,"electra"),F6t.forEach(t),pFo=r(RB," \u2014 "),oD=n(RB,"A",{href:!0});var T6t=s(oD);_Fo=r(T6t,"ElectraTokenizer"),T6t.forEach(t),bFo=r(RB," or "),rD=n(RB,"A",{href:!0});var M6t=s(rD);vFo=r(M6t,"ElectraTokenizerFast"),M6t.forEach(t),FFo=r(RB," (ELECTRA model)"),RB.forEach(t),TFo=i(S),ys=n(S,"LI",{});var PB=s(ys);fhe=n(PB,"STRONG",{});var E6t=s(fhe);MFo=r(E6t,"ernie"),E6t.forEach(t),EFo=r(PB," \u2014 "),tD=n(PB,"A",{href:!0});var C6t=s(tD);CFo=r(C6t,"BertTokenizer"),C6t.forEach(t),wFo=r(PB," or "),aD=n(PB,"A",{href:!0});var w6t=s(aD);AFo=r(w6t,"BertTokenizerFast"),w6t.forEach(t),LFo=r(PB," (ERNIE model)"),PB.forEach(t),yFo=i(S),Eu=n(S,"LI",{});var lNe=s(Eu);ghe=n(lNe,"STRONG",{});var A6t=s(ghe);xFo=r(A6t,"flaubert"),A6t.forEach(t),$Fo=r(lNe," \u2014 "),nD=n(lNe,"A",{href:!0});var L6t=s(nD);kFo=r(L6t,"FlaubertTokenizer"),L6t.forEach(t),SFo=r(lNe," (FlauBERT model)"),lNe.forEach(t),RFo=i(S),xs=n(S,"LI",{});var BB=s(xs);hhe=n(BB,"STRONG",{});var y6t=s(hhe);PFo=r(y6t,"fnet"),y6t.forEach(t),BFo=r(BB," \u2014 "),sD=n(BB,"A",{href:!0});var x6t=s(sD);IFo=r(x6t,"FNetTokenizer"),x6t.forEach(t),NFo=r(BB," or "),lD=n(BB,"A",{href:!0});var $6t=s(lD);qFo=r($6t,"FNetTokenizerFast"),$6t.forEach(t),jFo=r(BB," (FNet model)"),BB.forEach(t),DFo=i(S),Cu=n(S,"LI",{});var iNe=s(Cu);uhe=n(iNe,"STRONG",{});var k6t=s(uhe);GFo=r(k6t,"fsmt"),k6t.forEach(t),OFo=r(iNe," \u2014 "),iD=n(iNe,"A",{href:!0});var S6t=s(iD);VFo=r(S6t,"FSMTTokenizer"),S6t.forEach(t),XFo=r(iNe," (FairSeq Machine-Translation model)"),iNe.forEach(t),zFo=i(S),$s=n(S,"LI",{});var IB=s($s);phe=n(IB,"STRONG",{});var R6t=s(phe);QFo=r(R6t,"funnel"),R6t.forEach(t),WFo=r(IB," \u2014 "),dD=n(IB,"A",{href:!0});var P6t=s(dD);UFo=r(P6t,"FunnelTokenizer"),P6t.forEach(t),HFo=r(IB," or "),cD=n(IB,"A",{href:!0});var B6t=s(cD);JFo=r(B6t,"FunnelTokenizerFast"),B6t.forEach(t),YFo=r(IB," (Funnel Transformer model)"),IB.forEach(t),ZFo=i(S),ks=n(S,"LI",{});var NB=s(ks);_he=n(NB,"STRONG",{});var I6t=s(_he);KFo=r(I6t,"gpt2"),I6t.forEach(t),eTo=r(NB," \u2014 "),mD=n(NB,"A",{href:!0});var N6t=s(mD);oTo=r(N6t,"GPT2Tokenizer"),N6t.forEach(t),rTo=r(NB," or "),fD=n(NB,"A",{href:!0});var q6t=s(fD);tTo=r(q6t,"GPT2TokenizerFast"),q6t.forEach(t),aTo=r(NB," (OpenAI GPT-2 model)"),NB.forEach(t),nTo=i(S),Ss=n(S,"LI",{});var qB=s(Ss);bhe=n(qB,"STRONG",{});var j6t=s(bhe);sTo=r(j6t,"gpt_neo"),j6t.forEach(t),lTo=r(qB," \u2014 "),gD=n(qB,"A",{href:!0});var D6t=s(gD);iTo=r(D6t,"GPT2Tokenizer"),D6t.forEach(t),dTo=r(qB," or "),hD=n(qB,"A",{href:!0});var G6t=s(hD);cTo=r(G6t,"GPT2TokenizerFast"),G6t.forEach(t),mTo=r(qB," (GPT Neo model)"),qB.forEach(t),fTo=i(S),wu=n(S,"LI",{});var dNe=s(wu);vhe=n(dNe,"STRONG",{});var O6t=s(vhe);gTo=r(O6t,"gpt_neox"),O6t.forEach(t),hTo=r(dNe," \u2014 "),uD=n(dNe,"A",{href:!0});var V6t=s(uD);uTo=r(V6t,"GPTNeoXTokenizerFast"),V6t.forEach(t),pTo=r(dNe," (GPT NeoX model)"),dNe.forEach(t),_To=i(S),Au=n(S,"LI",{});var cNe=s(Au);Fhe=n(cNe,"STRONG",{});var X6t=s(Fhe);bTo=r(X6t,"gpt_neox_japanese"),X6t.forEach(t),vTo=r(cNe," \u2014 "),pD=n(cNe,"A",{href:!0});var z6t=s(pD);FTo=r(z6t,"GPTNeoXJapaneseTokenizer"),z6t.forEach(t),TTo=r(cNe," (GPT NeoX Japanese model)"),cNe.forEach(t),MTo=i(S),Rs=n(S,"LI",{});var jB=s(Rs);The=n(jB,"STRONG",{});var Q6t=s(The);ETo=r(Q6t,"gptj"),Q6t.forEach(t),CTo=r(jB," \u2014 "),_D=n(jB,"A",{href:!0});var W6t=s(_D);wTo=r(W6t,"GPT2Tokenizer"),W6t.forEach(t),ATo=r(jB," or "),bD=n(jB,"A",{href:!0});var U6t=s(bD);LTo=r(U6t,"GPT2TokenizerFast"),U6t.forEach(t),yTo=r(jB," (GPT-J model)"),jB.forEach(t),xTo=i(S),Ps=n(S,"LI",{});var DB=s(Ps);Mhe=n(DB,"STRONG",{});var H6t=s(Mhe);$To=r(H6t,"groupvit"),H6t.forEach(t),kTo=r(DB," \u2014 "),vD=n(DB,"A",{href:!0});var J6t=s(vD);STo=r(J6t,"CLIPTokenizer"),J6t.forEach(t),RTo=r(DB," or "),FD=n(DB,"A",{href:!0});var Y6t=s(FD);PTo=r(Y6t,"CLIPTokenizerFast"),Y6t.forEach(t),BTo=r(DB," (GroupViT model)"),DB.forEach(t),ITo=i(S),Bs=n(S,"LI",{});var GB=s(Bs);Ehe=n(GB,"STRONG",{});var Z6t=s(Ehe);NTo=r(Z6t,"herbert"),Z6t.forEach(t),qTo=r(GB," \u2014 "),TD=n(GB,"A",{href:!0});var K6t=s(TD);jTo=r(K6t,"HerbertTokenizer"),K6t.forEach(t),DTo=r(GB," or "),MD=n(GB,"A",{href:!0});var e7t=s(MD);GTo=r(e7t,"HerbertTokenizerFast"),e7t.forEach(t),OTo=r(GB," (HerBERT model)"),GB.forEach(t),VTo=i(S),Lu=n(S,"LI",{});var mNe=s(Lu);Che=n(mNe,"STRONG",{});var o7t=s(Che);XTo=r(o7t,"hubert"),o7t.forEach(t),zTo=r(mNe," \u2014 "),ED=n(mNe,"A",{href:!0});var r7t=s(ED);QTo=r(r7t,"Wav2Vec2CTCTokenizer"),r7t.forEach(t),WTo=r(mNe," (Hubert model)"),mNe.forEach(t),UTo=i(S),Is=n(S,"LI",{});var OB=s(Is);whe=n(OB,"STRONG",{});var t7t=s(whe);HTo=r(t7t,"ibert"),t7t.forEach(t),JTo=r(OB," \u2014 "),CD=n(OB,"A",{href:!0});var a7t=s(CD);YTo=r(a7t,"RobertaTokenizer"),a7t.forEach(t),ZTo=r(OB," or "),wD=n(OB,"A",{href:!0});var n7t=s(wD);KTo=r(n7t,"RobertaTokenizerFast"),n7t.forEach(t),eMo=r(OB," (I-BERT model)"),OB.forEach(t),oMo=i(S),Ns=n(S,"LI",{});var VB=s(Ns);Ahe=n(VB,"STRONG",{});var s7t=s(Ahe);rMo=r(s7t,"layoutlm"),s7t.forEach(t),tMo=r(VB," \u2014 "),AD=n(VB,"A",{href:!0});var l7t=s(AD);aMo=r(l7t,"LayoutLMTokenizer"),l7t.forEach(t),nMo=r(VB," or "),LD=n(VB,"A",{href:!0});var i7t=s(LD);sMo=r(i7t,"LayoutLMTokenizerFast"),i7t.forEach(t),lMo=r(VB," (LayoutLM model)"),VB.forEach(t),iMo=i(S),qs=n(S,"LI",{});var XB=s(qs);Lhe=n(XB,"STRONG",{});var d7t=s(Lhe);dMo=r(d7t,"layoutlmv2"),d7t.forEach(t),cMo=r(XB," \u2014 "),yD=n(XB,"A",{href:!0});var c7t=s(yD);mMo=r(c7t,"LayoutLMv2Tokenizer"),c7t.forEach(t),fMo=r(XB," or "),xD=n(XB,"A",{href:!0});var m7t=s(xD);gMo=r(m7t,"LayoutLMv2TokenizerFast"),m7t.forEach(t),hMo=r(XB," (LayoutLMv2 model)"),XB.forEach(t),uMo=i(S),js=n(S,"LI",{});var zB=s(js);yhe=n(zB,"STRONG",{});var f7t=s(yhe);pMo=r(f7t,"layoutlmv3"),f7t.forEach(t),_Mo=r(zB," \u2014 "),$D=n(zB,"A",{href:!0});var g7t=s($D);bMo=r(g7t,"LayoutLMv3Tokenizer"),g7t.forEach(t),vMo=r(zB," or "),kD=n(zB,"A",{href:!0});var h7t=s(kD);FMo=r(h7t,"LayoutLMv3TokenizerFast"),h7t.forEach(t),TMo=r(zB," (LayoutLMv3 model)"),zB.forEach(t),MMo=i(S),Ds=n(S,"LI",{});var QB=s(Ds);xhe=n(QB,"STRONG",{});var u7t=s(xhe);EMo=r(u7t,"layoutxlm"),u7t.forEach(t),CMo=r(QB," \u2014 "),SD=n(QB,"A",{href:!0});var p7t=s(SD);wMo=r(p7t,"LayoutXLMTokenizer"),p7t.forEach(t),AMo=r(QB," or "),RD=n(QB,"A",{href:!0});var _7t=s(RD);LMo=r(_7t,"LayoutXLMTokenizerFast"),_7t.forEach(t),yMo=r(QB," (LayoutXLM model)"),QB.forEach(t),xMo=i(S),Gs=n(S,"LI",{});var WB=s(Gs);$he=n(WB,"STRONG",{});var b7t=s($he);$Mo=r(b7t,"led"),b7t.forEach(t),kMo=r(WB," \u2014 "),PD=n(WB,"A",{href:!0});var v7t=s(PD);SMo=r(v7t,"LEDTokenizer"),v7t.forEach(t),RMo=r(WB," or "),BD=n(WB,"A",{href:!0});var F7t=s(BD);PMo=r(F7t,"LEDTokenizerFast"),F7t.forEach(t),BMo=r(WB," (LED model)"),WB.forEach(t),IMo=i(S),Os=n(S,"LI",{});var UB=s(Os);khe=n(UB,"STRONG",{});var T7t=s(khe);NMo=r(T7t,"longformer"),T7t.forEach(t),qMo=r(UB," \u2014 "),ID=n(UB,"A",{href:!0});var M7t=s(ID);jMo=r(M7t,"LongformerTokenizer"),M7t.forEach(t),DMo=r(UB," or "),ND=n(UB,"A",{href:!0});var E7t=s(ND);GMo=r(E7t,"LongformerTokenizerFast"),E7t.forEach(t),OMo=r(UB," (Longformer model)"),UB.forEach(t),VMo=i(S),Vs=n(S,"LI",{});var HB=s(Vs);She=n(HB,"STRONG",{});var C7t=s(She);XMo=r(C7t,"longt5"),C7t.forEach(t),zMo=r(HB," \u2014 "),qD=n(HB,"A",{href:!0});var w7t=s(qD);QMo=r(w7t,"T5Tokenizer"),w7t.forEach(t),WMo=r(HB," or "),jD=n(HB,"A",{href:!0});var A7t=s(jD);UMo=r(A7t,"T5TokenizerFast"),A7t.forEach(t),HMo=r(HB," (LongT5 model)"),HB.forEach(t),JMo=i(S),yu=n(S,"LI",{});var fNe=s(yu);Rhe=n(fNe,"STRONG",{});var L7t=s(Rhe);YMo=r(L7t,"luke"),L7t.forEach(t),ZMo=r(fNe," \u2014 "),DD=n(fNe,"A",{href:!0});var y7t=s(DD);KMo=r(y7t,"LukeTokenizer"),y7t.forEach(t),eEo=r(fNe," (LUKE model)"),fNe.forEach(t),oEo=i(S),Xs=n(S,"LI",{});var JB=s(Xs);Phe=n(JB,"STRONG",{});var x7t=s(Phe);rEo=r(x7t,"lxmert"),x7t.forEach(t),tEo=r(JB," \u2014 "),GD=n(JB,"A",{href:!0});var $7t=s(GD);aEo=r($7t,"LxmertTokenizer"),$7t.forEach(t),nEo=r(JB," or "),OD=n(JB,"A",{href:!0});var k7t=s(OD);sEo=r(k7t,"LxmertTokenizerFast"),k7t.forEach(t),lEo=r(JB," (LXMERT model)"),JB.forEach(t),iEo=i(S),xu=n(S,"LI",{});var gNe=s(xu);Bhe=n(gNe,"STRONG",{});var S7t=s(Bhe);dEo=r(S7t,"m2m_100"),S7t.forEach(t),cEo=r(gNe," \u2014 "),VD=n(gNe,"A",{href:!0});var R7t=s(VD);mEo=r(R7t,"M2M100Tokenizer"),R7t.forEach(t),fEo=r(gNe," (M2M100 model)"),gNe.forEach(t),gEo=i(S),$u=n(S,"LI",{});var hNe=s($u);Ihe=n(hNe,"STRONG",{});var P7t=s(Ihe);hEo=r(P7t,"marian"),P7t.forEach(t),uEo=r(hNe," \u2014 "),XD=n(hNe,"A",{href:!0});var B7t=s(XD);pEo=r(B7t,"MarianTokenizer"),B7t.forEach(t),_Eo=r(hNe," (Marian model)"),hNe.forEach(t),bEo=i(S),zs=n(S,"LI",{});var YB=s(zs);Nhe=n(YB,"STRONG",{});var I7t=s(Nhe);vEo=r(I7t,"mbart"),I7t.forEach(t),FEo=r(YB," \u2014 "),zD=n(YB,"A",{href:!0});var N7t=s(zD);TEo=r(N7t,"MBartTokenizer"),N7t.forEach(t),MEo=r(YB," or "),QD=n(YB,"A",{href:!0});var q7t=s(QD);EEo=r(q7t,"MBartTokenizerFast"),q7t.forEach(t),CEo=r(YB," (mBART model)"),YB.forEach(t),wEo=i(S),Qs=n(S,"LI",{});var ZB=s(Qs);qhe=n(ZB,"STRONG",{});var j7t=s(qhe);AEo=r(j7t,"mbart50"),j7t.forEach(t),LEo=r(ZB," \u2014 "),WD=n(ZB,"A",{href:!0});var D7t=s(WD);yEo=r(D7t,"MBart50Tokenizer"),D7t.forEach(t),xEo=r(ZB," or "),UD=n(ZB,"A",{href:!0});var G7t=s(UD);$Eo=r(G7t,"MBart50TokenizerFast"),G7t.forEach(t),kEo=r(ZB," (mBART-50 model)"),ZB.forEach(t),SEo=i(S),Ws=n(S,"LI",{});var KB=s(Ws);jhe=n(KB,"STRONG",{});var O7t=s(jhe);REo=r(O7t,"megatron-bert"),O7t.forEach(t),PEo=r(KB," \u2014 "),HD=n(KB,"A",{href:!0});var V7t=s(HD);BEo=r(V7t,"BertTokenizer"),V7t.forEach(t),IEo=r(KB," or "),JD=n(KB,"A",{href:!0});var X7t=s(JD);NEo=r(X7t,"BertTokenizerFast"),X7t.forEach(t),qEo=r(KB," (Megatron-BERT model)"),KB.forEach(t),jEo=i(S),ku=n(S,"LI",{});var uNe=s(ku);Dhe=n(uNe,"STRONG",{});var z7t=s(Dhe);DEo=r(z7t,"mluke"),z7t.forEach(t),GEo=r(uNe," \u2014 "),YD=n(uNe,"A",{href:!0});var Q7t=s(YD);OEo=r(Q7t,"MLukeTokenizer"),Q7t.forEach(t),VEo=r(uNe," (mLUKE model)"),uNe.forEach(t),XEo=i(S),Us=n(S,"LI",{});var eI=s(Us);Ghe=n(eI,"STRONG",{});var W7t=s(Ghe);zEo=r(W7t,"mobilebert"),W7t.forEach(t),QEo=r(eI," \u2014 "),ZD=n(eI,"A",{href:!0});var U7t=s(ZD);WEo=r(U7t,"MobileBertTokenizer"),U7t.forEach(t),UEo=r(eI," or "),KD=n(eI,"A",{href:!0});var H7t=s(KD);HEo=r(H7t,"MobileBertTokenizerFast"),H7t.forEach(t),JEo=r(eI," (MobileBERT model)"),eI.forEach(t),YEo=i(S),Hs=n(S,"LI",{});var oI=s(Hs);Ohe=n(oI,"STRONG",{});var J7t=s(Ohe);ZEo=r(J7t,"mpnet"),J7t.forEach(t),KEo=r(oI," \u2014 "),eG=n(oI,"A",{href:!0});var Y7t=s(eG);e4o=r(Y7t,"MPNetTokenizer"),Y7t.forEach(t),o4o=r(oI," or "),oG=n(oI,"A",{href:!0});var Z7t=s(oG);r4o=r(Z7t,"MPNetTokenizerFast"),Z7t.forEach(t),t4o=r(oI," (MPNet model)"),oI.forEach(t),a4o=i(S),Js=n(S,"LI",{});var rI=s(Js);Vhe=n(rI,"STRONG",{});var K7t=s(Vhe);n4o=r(K7t,"mt5"),K7t.forEach(t),s4o=r(rI," \u2014 "),rG=n(rI,"A",{href:!0});var eLt=s(rG);l4o=r(eLt,"MT5Tokenizer"),eLt.forEach(t),i4o=r(rI," or "),tG=n(rI,"A",{href:!0});var oLt=s(tG);d4o=r(oLt,"MT5TokenizerFast"),oLt.forEach(t),c4o=r(rI," (MT5 model)"),rI.forEach(t),m4o=i(S),Ys=n(S,"LI",{});var tI=s(Ys);Xhe=n(tI,"STRONG",{});var rLt=s(Xhe);f4o=r(rLt,"mvp"),rLt.forEach(t),g4o=r(tI," \u2014 "),aG=n(tI,"A",{href:!0});var tLt=s(aG);h4o=r(tLt,"MvpTokenizer"),tLt.forEach(t),u4o=r(tI," or "),nG=n(tI,"A",{href:!0});var aLt=s(nG);p4o=r(aLt,"MvpTokenizerFast"),aLt.forEach(t),_4o=r(tI," (MVP model)"),tI.forEach(t),b4o=i(S),Zs=n(S,"LI",{});var aI=s(Zs);zhe=n(aI,"STRONG",{});var nLt=s(zhe);v4o=r(nLt,"nezha"),nLt.forEach(t),F4o=r(aI," \u2014 "),sG=n(aI,"A",{href:!0});var sLt=s(sG);T4o=r(sLt,"BertTokenizer"),sLt.forEach(t),M4o=r(aI," or "),lG=n(aI,"A",{href:!0});var lLt=s(lG);E4o=r(lLt,"BertTokenizerFast"),lLt.forEach(t),C4o=r(aI," (Nezha model)"),aI.forEach(t),w4o=i(S),Ks=n(S,"LI",{});var nI=s(Ks);Qhe=n(nI,"STRONG",{});var iLt=s(Qhe);A4o=r(iLt,"nllb"),iLt.forEach(t),L4o=r(nI," \u2014 "),iG=n(nI,"A",{href:!0});var dLt=s(iG);y4o=r(dLt,"NllbTokenizer"),dLt.forEach(t),x4o=r(nI," or "),dG=n(nI,"A",{href:!0});var cLt=s(dG);$4o=r(cLt,"NllbTokenizerFast"),cLt.forEach(t),k4o=r(nI," (NLLB model)"),nI.forEach(t),S4o=i(S),el=n(S,"LI",{});var sI=s(el);Whe=n(sI,"STRONG",{});var mLt=s(Whe);R4o=r(mLt,"nystromformer"),mLt.forEach(t),P4o=r(sI," \u2014 "),cG=n(sI,"A",{href:!0});var fLt=s(cG);B4o=r(fLt,"AlbertTokenizer"),fLt.forEach(t),I4o=r(sI," or "),mG=n(sI,"A",{href:!0});var gLt=s(mG);N4o=r(gLt,"AlbertTokenizerFast"),gLt.forEach(t),q4o=r(sI," (Nystr\xF6mformer model)"),sI.forEach(t),j4o=i(S),ol=n(S,"LI",{});var lI=s(ol);Uhe=n(lI,"STRONG",{});var hLt=s(Uhe);D4o=r(hLt,"openai-gpt"),hLt.forEach(t),G4o=r(lI," \u2014 "),fG=n(lI,"A",{href:!0});var uLt=s(fG);O4o=r(uLt,"OpenAIGPTTokenizer"),uLt.forEach(t),V4o=r(lI," or "),gG=n(lI,"A",{href:!0});var pLt=s(gG);X4o=r(pLt,"OpenAIGPTTokenizerFast"),pLt.forEach(t),z4o=r(lI," (OpenAI GPT model)"),lI.forEach(t),Q4o=i(S),Su=n(S,"LI",{});var pNe=s(Su);Hhe=n(pNe,"STRONG",{});var _Lt=s(Hhe);W4o=r(_Lt,"opt"),_Lt.forEach(t),U4o=r(pNe," \u2014 "),hG=n(pNe,"A",{href:!0});var bLt=s(hG);H4o=r(bLt,"GPT2Tokenizer"),bLt.forEach(t),J4o=r(pNe," (OPT model)"),pNe.forEach(t),Y4o=i(S),rl=n(S,"LI",{});var iI=s(rl);Jhe=n(iI,"STRONG",{});var vLt=s(Jhe);Z4o=r(vLt,"owlvit"),vLt.forEach(t),K4o=r(iI," \u2014 "),uG=n(iI,"A",{href:!0});var FLt=s(uG);eCo=r(FLt,"CLIPTokenizer"),FLt.forEach(t),oCo=r(iI," or "),pG=n(iI,"A",{href:!0});var TLt=s(pG);rCo=r(TLt,"CLIPTokenizerFast"),TLt.forEach(t),tCo=r(iI," (OWL-ViT model)"),iI.forEach(t),aCo=i(S),tl=n(S,"LI",{});var dI=s(tl);Yhe=n(dI,"STRONG",{});var MLt=s(Yhe);nCo=r(MLt,"pegasus"),MLt.forEach(t),sCo=r(dI," \u2014 "),_G=n(dI,"A",{href:!0});var ELt=s(_G);lCo=r(ELt,"PegasusTokenizer"),ELt.forEach(t),iCo=r(dI," or "),bG=n(dI,"A",{href:!0});var CLt=s(bG);dCo=r(CLt,"PegasusTokenizerFast"),CLt.forEach(t),cCo=r(dI," (Pegasus model)"),dI.forEach(t),mCo=i(S),Ru=n(S,"LI",{});var _Ne=s(Ru);Zhe=n(_Ne,"STRONG",{});var wLt=s(Zhe);fCo=r(wLt,"perceiver"),wLt.forEach(t),gCo=r(_Ne," \u2014 "),vG=n(_Ne,"A",{href:!0});var ALt=s(vG);hCo=r(ALt,"PerceiverTokenizer"),ALt.forEach(t),uCo=r(_Ne," (Perceiver model)"),_Ne.forEach(t),pCo=i(S),Pu=n(S,"LI",{});var bNe=s(Pu);Khe=n(bNe,"STRONG",{});var LLt=s(Khe);_Co=r(LLt,"phobert"),LLt.forEach(t),bCo=r(bNe," \u2014 "),FG=n(bNe,"A",{href:!0});var yLt=s(FG);vCo=r(yLt,"PhobertTokenizer"),yLt.forEach(t),FCo=r(bNe," (PhoBERT model)"),bNe.forEach(t),TCo=i(S),Bu=n(S,"LI",{});var vNe=s(Bu);eue=n(vNe,"STRONG",{});var xLt=s(eue);MCo=r(xLt,"plbart"),xLt.forEach(t),ECo=r(vNe," \u2014 "),TG=n(vNe,"A",{href:!0});var $Lt=s(TG);CCo=r($Lt,"PLBartTokenizer"),$Lt.forEach(t),wCo=r(vNe," (PLBart model)"),vNe.forEach(t),ACo=i(S),Iu=n(S,"LI",{});var FNe=s(Iu);oue=n(FNe,"STRONG",{});var kLt=s(oue);LCo=r(kLt,"prophetnet"),kLt.forEach(t),yCo=r(FNe," \u2014 "),MG=n(FNe,"A",{href:!0});var SLt=s(MG);xCo=r(SLt,"ProphetNetTokenizer"),SLt.forEach(t),$Co=r(FNe," (ProphetNet model)"),FNe.forEach(t),kCo=i(S),al=n(S,"LI",{});var cI=s(al);rue=n(cI,"STRONG",{});var RLt=s(rue);SCo=r(RLt,"qdqbert"),RLt.forEach(t),RCo=r(cI," \u2014 "),EG=n(cI,"A",{href:!0});var PLt=s(EG);PCo=r(PLt,"BertTokenizer"),PLt.forEach(t),BCo=r(cI," or "),CG=n(cI,"A",{href:!0});var BLt=s(CG);ICo=r(BLt,"BertTokenizerFast"),BLt.forEach(t),NCo=r(cI," (QDQBert model)"),cI.forEach(t),qCo=i(S),Nu=n(S,"LI",{});var TNe=s(Nu);tue=n(TNe,"STRONG",{});var ILt=s(tue);jCo=r(ILt,"rag"),ILt.forEach(t),DCo=r(TNe," \u2014 "),wG=n(TNe,"A",{href:!0});var NLt=s(wG);GCo=r(NLt,"RagTokenizer"),NLt.forEach(t),OCo=r(TNe," (RAG model)"),TNe.forEach(t),VCo=i(S),nl=n(S,"LI",{});var mI=s(nl);aue=n(mI,"STRONG",{});var qLt=s(aue);XCo=r(qLt,"realm"),qLt.forEach(t),zCo=r(mI," \u2014 "),AG=n(mI,"A",{href:!0});var jLt=s(AG);QCo=r(jLt,"RealmTokenizer"),jLt.forEach(t),WCo=r(mI," or "),LG=n(mI,"A",{href:!0});var DLt=s(LG);UCo=r(DLt,"RealmTokenizerFast"),DLt.forEach(t),HCo=r(mI," (REALM model)"),mI.forEach(t),JCo=i(S),sl=n(S,"LI",{});var fI=s(sl);nue=n(fI,"STRONG",{});var GLt=s(nue);YCo=r(GLt,"reformer"),GLt.forEach(t),ZCo=r(fI," \u2014 "),yG=n(fI,"A",{href:!0});var OLt=s(yG);KCo=r(OLt,"ReformerTokenizer"),OLt.forEach(t),e3o=r(fI," or "),xG=n(fI,"A",{href:!0});var VLt=s(xG);o3o=r(VLt,"ReformerTokenizerFast"),VLt.forEach(t),r3o=r(fI," (Reformer model)"),fI.forEach(t),t3o=i(S),ll=n(S,"LI",{});var gI=s(ll);sue=n(gI,"STRONG",{});var XLt=s(sue);a3o=r(XLt,"rembert"),XLt.forEach(t),n3o=r(gI," \u2014 "),$G=n(gI,"A",{href:!0});var zLt=s($G);s3o=r(zLt,"RemBertTokenizer"),zLt.forEach(t),l3o=r(gI," or "),kG=n(gI,"A",{href:!0});var QLt=s(kG);i3o=r(QLt,"RemBertTokenizerFast"),QLt.forEach(t),d3o=r(gI," (RemBERT model)"),gI.forEach(t),c3o=i(S),il=n(S,"LI",{});var hI=s(il);lue=n(hI,"STRONG",{});var WLt=s(lue);m3o=r(WLt,"retribert"),WLt.forEach(t),f3o=r(hI," \u2014 "),SG=n(hI,"A",{href:!0});var ULt=s(SG);g3o=r(ULt,"RetriBertTokenizer"),ULt.forEach(t),h3o=r(hI," or "),RG=n(hI,"A",{href:!0});var HLt=s(RG);u3o=r(HLt,"RetriBertTokenizerFast"),HLt.forEach(t),p3o=r(hI," (RetriBERT model)"),hI.forEach(t),_3o=i(S),dl=n(S,"LI",{});var uI=s(dl);iue=n(uI,"STRONG",{});var JLt=s(iue);b3o=r(JLt,"roberta"),JLt.forEach(t),v3o=r(uI," \u2014 "),PG=n(uI,"A",{href:!0});var YLt=s(PG);F3o=r(YLt,"RobertaTokenizer"),YLt.forEach(t),T3o=r(uI," or "),BG=n(uI,"A",{href:!0});var ZLt=s(BG);M3o=r(ZLt,"RobertaTokenizerFast"),ZLt.forEach(t),E3o=r(uI," (RoBERTa model)"),uI.forEach(t),C3o=i(S),cl=n(S,"LI",{});var pI=s(cl);due=n(pI,"STRONG",{});var KLt=s(due);w3o=r(KLt,"roformer"),KLt.forEach(t),A3o=r(pI," \u2014 "),IG=n(pI,"A",{href:!0});var e8t=s(IG);L3o=r(e8t,"RoFormerTokenizer"),e8t.forEach(t),y3o=r(pI," or "),NG=n(pI,"A",{href:!0});var o8t=s(NG);x3o=r(o8t,"RoFormerTokenizerFast"),o8t.forEach(t),$3o=r(pI," (RoFormer model)"),pI.forEach(t),k3o=i(S),qu=n(S,"LI",{});var MNe=s(qu);cue=n(MNe,"STRONG",{});var r8t=s(cue);S3o=r(r8t,"speech_to_text"),r8t.forEach(t),R3o=r(MNe," \u2014 "),qG=n(MNe,"A",{href:!0});var t8t=s(qG);P3o=r(t8t,"Speech2TextTokenizer"),t8t.forEach(t),B3o=r(MNe," (Speech2Text model)"),MNe.forEach(t),I3o=i(S),ju=n(S,"LI",{});var ENe=s(ju);mue=n(ENe,"STRONG",{});var a8t=s(mue);N3o=r(a8t,"speech_to_text_2"),a8t.forEach(t),q3o=r(ENe," \u2014 "),jG=n(ENe,"A",{href:!0});var n8t=s(jG);j3o=r(n8t,"Speech2Text2Tokenizer"),n8t.forEach(t),D3o=r(ENe," (Speech2Text2 model)"),ENe.forEach(t),G3o=i(S),ml=n(S,"LI",{});var _I=s(ml);fue=n(_I,"STRONG",{});var s8t=s(fue);O3o=r(s8t,"splinter"),s8t.forEach(t),V3o=r(_I," \u2014 "),DG=n(_I,"A",{href:!0});var l8t=s(DG);X3o=r(l8t,"SplinterTokenizer"),l8t.forEach(t),z3o=r(_I," or "),GG=n(_I,"A",{href:!0});var i8t=s(GG);Q3o=r(i8t,"SplinterTokenizerFast"),i8t.forEach(t),W3o=r(_I," (Splinter model)"),_I.forEach(t),U3o=i(S),fl=n(S,"LI",{});var bI=s(fl);gue=n(bI,"STRONG",{});var d8t=s(gue);H3o=r(d8t,"squeezebert"),d8t.forEach(t),J3o=r(bI," \u2014 "),OG=n(bI,"A",{href:!0});var c8t=s(OG);Y3o=r(c8t,"SqueezeBertTokenizer"),c8t.forEach(t),Z3o=r(bI," or "),VG=n(bI,"A",{href:!0});var m8t=s(VG);K3o=r(m8t,"SqueezeBertTokenizerFast"),m8t.forEach(t),e5o=r(bI," (SqueezeBERT model)"),bI.forEach(t),o5o=i(S),gl=n(S,"LI",{});var vI=s(gl);hue=n(vI,"STRONG",{});var f8t=s(hue);r5o=r(f8t,"t5"),f8t.forEach(t),t5o=r(vI," \u2014 "),XG=n(vI,"A",{href:!0});var g8t=s(XG);a5o=r(g8t,"T5Tokenizer"),g8t.forEach(t),n5o=r(vI," or "),zG=n(vI,"A",{href:!0});var h8t=s(zG);s5o=r(h8t,"T5TokenizerFast"),h8t.forEach(t),l5o=r(vI," (T5 model)"),vI.forEach(t),i5o=i(S),Du=n(S,"LI",{});var CNe=s(Du);uue=n(CNe,"STRONG",{});var u8t=s(uue);d5o=r(u8t,"tapas"),u8t.forEach(t),c5o=r(CNe," \u2014 "),QG=n(CNe,"A",{href:!0});var p8t=s(QG);m5o=r(p8t,"TapasTokenizer"),p8t.forEach(t),f5o=r(CNe," (TAPAS model)"),CNe.forEach(t),g5o=i(S),Gu=n(S,"LI",{});var wNe=s(Gu);pue=n(wNe,"STRONG",{});var _8t=s(pue);h5o=r(_8t,"tapex"),_8t.forEach(t),u5o=r(wNe," \u2014 "),WG=n(wNe,"A",{href:!0});var b8t=s(WG);p5o=r(b8t,"TapexTokenizer"),b8t.forEach(t),_5o=r(wNe," (TAPEX model)"),wNe.forEach(t),b5o=i(S),Ou=n(S,"LI",{});var ANe=s(Ou);_ue=n(ANe,"STRONG",{});var v8t=s(_ue);v5o=r(v8t,"transfo-xl"),v8t.forEach(t),F5o=r(ANe," \u2014 "),UG=n(ANe,"A",{href:!0});var F8t=s(UG);T5o=r(F8t,"TransfoXLTokenizer"),F8t.forEach(t),M5o=r(ANe," (Transformer-XL model)"),ANe.forEach(t),E5o=i(S),hl=n(S,"LI",{});var FI=s(hl);bue=n(FI,"STRONG",{});var T8t=s(bue);C5o=r(T8t,"vilt"),T8t.forEach(t),w5o=r(FI," \u2014 "),HG=n(FI,"A",{href:!0});var M8t=s(HG);A5o=r(M8t,"BertTokenizer"),M8t.forEach(t),L5o=r(FI," or "),JG=n(FI,"A",{href:!0});var E8t=s(JG);y5o=r(E8t,"BertTokenizerFast"),E8t.forEach(t),x5o=r(FI," (ViLT model)"),FI.forEach(t),$5o=i(S),ul=n(S,"LI",{});var TI=s(ul);vue=n(TI,"STRONG",{});var C8t=s(vue);k5o=r(C8t,"visual_bert"),C8t.forEach(t),S5o=r(TI," \u2014 "),YG=n(TI,"A",{href:!0});var w8t=s(YG);R5o=r(w8t,"BertTokenizer"),w8t.forEach(t),P5o=r(TI," or "),ZG=n(TI,"A",{href:!0});var A8t=s(ZG);B5o=r(A8t,"BertTokenizerFast"),A8t.forEach(t),I5o=r(TI," (VisualBERT model)"),TI.forEach(t),N5o=i(S),Vu=n(S,"LI",{});var LNe=s(Vu);Fue=n(LNe,"STRONG",{});var L8t=s(Fue);q5o=r(L8t,"wav2vec2"),L8t.forEach(t),j5o=r(LNe," \u2014 "),KG=n(LNe,"A",{href:!0});var y8t=s(KG);D5o=r(y8t,"Wav2Vec2CTCTokenizer"),y8t.forEach(t),G5o=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),O5o=i(S),Xu=n(S,"LI",{});var yNe=s(Xu);Tue=n(yNe,"STRONG",{});var x8t=s(Tue);V5o=r(x8t,"wav2vec2-conformer"),x8t.forEach(t),X5o=r(yNe," \u2014 "),eO=n(yNe,"A",{href:!0});var $8t=s(eO);z5o=r($8t,"Wav2Vec2CTCTokenizer"),$8t.forEach(t),Q5o=r(yNe," (Wav2Vec2-Conformer model)"),yNe.forEach(t),W5o=i(S),zu=n(S,"LI",{});var xNe=s(zu);Mue=n(xNe,"STRONG",{});var k8t=s(Mue);U5o=r(k8t,"wav2vec2_phoneme"),k8t.forEach(t),H5o=r(xNe," \u2014 "),oO=n(xNe,"A",{href:!0});var S8t=s(oO);J5o=r(S8t,"Wav2Vec2PhonemeCTCTokenizer"),S8t.forEach(t),Y5o=r(xNe," (Wav2Vec2Phoneme model)"),xNe.forEach(t),Z5o=i(S),Qu=n(S,"LI",{});var $Ne=s(Qu);Eue=n($Ne,"STRONG",{});var R8t=s(Eue);K5o=r(R8t,"whisper"),R8t.forEach(t),e0o=r($Ne," \u2014 "),rO=n($Ne,"A",{href:!0});var P8t=s(rO);o0o=r(P8t,"WhisperTokenizer"),P8t.forEach(t),r0o=r($Ne," (Whisper model)"),$Ne.forEach(t),t0o=i(S),pl=n(S,"LI",{});var MI=s(pl);Cue=n(MI,"STRONG",{});var B8t=s(Cue);a0o=r(B8t,"xclip"),B8t.forEach(t),n0o=r(MI," \u2014 "),tO=n(MI,"A",{href:!0});var I8t=s(tO);s0o=r(I8t,"CLIPTokenizer"),I8t.forEach(t),l0o=r(MI," or "),aO=n(MI,"A",{href:!0});var N8t=s(aO);i0o=r(N8t,"CLIPTokenizerFast"),N8t.forEach(t),d0o=r(MI," (X-CLIP model)"),MI.forEach(t),c0o=i(S),_l=n(S,"LI",{});var EI=s(_l);wue=n(EI,"STRONG",{});var q8t=s(wue);m0o=r(q8t,"xglm"),q8t.forEach(t),f0o=r(EI," \u2014 "),nO=n(EI,"A",{href:!0});var j8t=s(nO);g0o=r(j8t,"XGLMTokenizer"),j8t.forEach(t),h0o=r(EI," or "),sO=n(EI,"A",{href:!0});var D8t=s(sO);u0o=r(D8t,"XGLMTokenizerFast"),D8t.forEach(t),p0o=r(EI," (XGLM model)"),EI.forEach(t),_0o=i(S),Wu=n(S,"LI",{});var kNe=s(Wu);Aue=n(kNe,"STRONG",{});var G8t=s(Aue);b0o=r(G8t,"xlm"),G8t.forEach(t),v0o=r(kNe," \u2014 "),lO=n(kNe,"A",{href:!0});var O8t=s(lO);F0o=r(O8t,"XLMTokenizer"),O8t.forEach(t),T0o=r(kNe," (XLM model)"),kNe.forEach(t),M0o=i(S),Uu=n(S,"LI",{});var SNe=s(Uu);Lue=n(SNe,"STRONG",{});var V8t=s(Lue);E0o=r(V8t,"xlm-prophetnet"),V8t.forEach(t),C0o=r(SNe," \u2014 "),iO=n(SNe,"A",{href:!0});var X8t=s(iO);w0o=r(X8t,"XLMProphetNetTokenizer"),X8t.forEach(t),A0o=r(SNe," (XLM-ProphetNet model)"),SNe.forEach(t),L0o=i(S),bl=n(S,"LI",{});var CI=s(bl);yue=n(CI,"STRONG",{});var z8t=s(yue);y0o=r(z8t,"xlm-roberta"),z8t.forEach(t),x0o=r(CI," \u2014 "),dO=n(CI,"A",{href:!0});var Q8t=s(dO);$0o=r(Q8t,"XLMRobertaTokenizer"),Q8t.forEach(t),k0o=r(CI," or "),cO=n(CI,"A",{href:!0});var W8t=s(cO);S0o=r(W8t,"XLMRobertaTokenizerFast"),W8t.forEach(t),R0o=r(CI," (XLM-RoBERTa model)"),CI.forEach(t),P0o=i(S),vl=n(S,"LI",{});var wI=s(vl);xue=n(wI,"STRONG",{});var U8t=s(xue);B0o=r(U8t,"xlm-roberta-xl"),U8t.forEach(t),I0o=r(wI," \u2014 "),mO=n(wI,"A",{href:!0});var H8t=s(mO);N0o=r(H8t,"XLMRobertaTokenizer"),H8t.forEach(t),q0o=r(wI," or "),fO=n(wI,"A",{href:!0});var J8t=s(fO);j0o=r(J8t,"XLMRobertaTokenizerFast"),J8t.forEach(t),D0o=r(wI," (XLM-RoBERTa-XL model)"),wI.forEach(t),G0o=i(S),Fl=n(S,"LI",{});var AI=s(Fl);$ue=n(AI,"STRONG",{});var Y8t=s($ue);O0o=r(Y8t,"xlnet"),Y8t.forEach(t),V0o=r(AI," \u2014 "),gO=n(AI,"A",{href:!0});var Z8t=s(gO);X0o=r(Z8t,"XLNetTokenizer"),Z8t.forEach(t),z0o=r(AI," or "),hO=n(AI,"A",{href:!0});var K8t=s(hO);Q0o=r(K8t,"XLNetTokenizerFast"),K8t.forEach(t),W0o=r(AI," (XLNet model)"),AI.forEach(t),U0o=i(S),Tl=n(S,"LI",{});var LI=s(Tl);kue=n(LI,"STRONG",{});var eyt=s(kue);H0o=r(eyt,"yoso"),eyt.forEach(t),J0o=r(LI," \u2014 "),uO=n(LI,"A",{href:!0});var oyt=s(uO);Y0o=r(oyt,"AlbertTokenizer"),oyt.forEach(t),Z0o=r(LI," or "),pO=n(LI,"A",{href:!0});var ryt=s(pO);K0o=r(ryt,"AlbertTokenizerFast"),ryt.forEach(t),ewo=r(LI," (YOSO model)"),LI.forEach(t),S.forEach(t),owo=i(yl),T(Hu.$$.fragment,yl),yl.forEach(t),rwo=i(Ll),Ju=n(Ll,"DIV",{class:!0});var Ito=s(Ju);T(Gx.$$.fragment,Ito),two=i(Ito),Sue=n(Ito,"P",{});var tyt=s(Sue);awo=r(tyt,"Register a new tokenizer in this mapping."),tyt.forEach(t),Ito.forEach(t),Ll.forEach(t),woo=i(m),Fd=n(m,"H2",{class:!0});var Nto=s(Fd);Yu=n(Nto,"A",{id:!0,class:!0,href:!0});var ayt=s(Yu);Rue=n(ayt,"SPAN",{});var nyt=s(Rue);T(Ox.$$.fragment,nyt),nyt.forEach(t),ayt.forEach(t),nwo=i(Nto),Pue=n(Nto,"SPAN",{});var syt=s(Pue);swo=r(syt,"AutoFeatureExtractor"),syt.forEach(t),Nto.forEach(t),Aoo=i(m),Ro=n(m,"DIV",{class:!0});var xl=s(Ro);T(Vx.$$.fragment,xl),lwo=i(xl),Xx=n(xl,"P",{});var qto=s(Xx);iwo=r(qto,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),_O=n(qto,"A",{href:!0});var lyt=s(_O);dwo=r(lyt,"AutoFeatureExtractor.from_pretrained()"),lyt.forEach(t),cwo=r(qto," class method."),qto.forEach(t),mwo=i(xl),zx=n(xl,"P",{});var jto=s(zx);fwo=r(jto,"This class cannot be instantiated directly using "),Bue=n(jto,"CODE",{});var iyt=s(Bue);gwo=r(iyt,"__init__()"),iyt.forEach(t),hwo=r(jto," (throws an error)."),jto.forEach(t),uwo=i(xl),Ye=n(xl,"DIV",{class:!0});var Ta=s(Ye);T(Qx.$$.fragment,Ta),pwo=i(Ta),Iue=n(Ta,"P",{});var dyt=s(Iue);_wo=r(dyt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dyt.forEach(t),bwo=i(Ta),Ka=n(Ta,"P",{});var vy=s(Ka);vwo=r(vy,"The feature extractor class to instantiate is selected based on the "),Nue=n(vy,"CODE",{});var cyt=s(Nue);Fwo=r(cyt,"model_type"),cyt.forEach(t),Two=r(vy,` property of the config object
(either passed as an argument or loaded from `),que=n(vy,"CODE",{});var myt=s(que);Mwo=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),Ewo=r(vy,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jue=n(vy,"CODE",{});var fyt=s(jue);Cwo=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),wwo=r(vy,":"),vy.forEach(t),Awo=i(Ta),z=n(Ta,"UL",{});var W=s(z);Zu=n(W,"LI",{});var RNe=s(Zu);Due=n(RNe,"STRONG",{});var gyt=s(Due);Lwo=r(gyt,"beit"),gyt.forEach(t),ywo=r(RNe," \u2014 "),bO=n(RNe,"A",{href:!0});var hyt=s(bO);xwo=r(hyt,"BeitFeatureExtractor"),hyt.forEach(t),$wo=r(RNe," (BEiT model)"),RNe.forEach(t),kwo=i(W),Ku=n(W,"LI",{});var PNe=s(Ku);Gue=n(PNe,"STRONG",{});var uyt=s(Gue);Swo=r(uyt,"clip"),uyt.forEach(t),Rwo=r(PNe," \u2014 "),vO=n(PNe,"A",{href:!0});var pyt=s(vO);Pwo=r(pyt,"CLIPFeatureExtractor"),pyt.forEach(t),Bwo=r(PNe," (CLIP model)"),PNe.forEach(t),Iwo=i(W),ep=n(W,"LI",{});var BNe=s(ep);Oue=n(BNe,"STRONG",{});var _yt=s(Oue);Nwo=r(_yt,"conditional_detr"),_yt.forEach(t),qwo=r(BNe," \u2014 "),FO=n(BNe,"A",{href:!0});var byt=s(FO);jwo=r(byt,"ConditionalDetrFeatureExtractor"),byt.forEach(t),Dwo=r(BNe," (Conditional DETR model)"),BNe.forEach(t),Gwo=i(W),op=n(W,"LI",{});var INe=s(op);Vue=n(INe,"STRONG",{});var vyt=s(Vue);Owo=r(vyt,"convnext"),vyt.forEach(t),Vwo=r(INe," \u2014 "),TO=n(INe,"A",{href:!0});var Fyt=s(TO);Xwo=r(Fyt,"ConvNextFeatureExtractor"),Fyt.forEach(t),zwo=r(INe," (ConvNeXT model)"),INe.forEach(t),Qwo=i(W),rp=n(W,"LI",{});var NNe=s(rp);Xue=n(NNe,"STRONG",{});var Tyt=s(Xue);Wwo=r(Tyt,"cvt"),Tyt.forEach(t),Uwo=r(NNe," \u2014 "),MO=n(NNe,"A",{href:!0});var Myt=s(MO);Hwo=r(Myt,"ConvNextFeatureExtractor"),Myt.forEach(t),Jwo=r(NNe," (CvT model)"),NNe.forEach(t),Ywo=i(W),tp=n(W,"LI",{});var qNe=s(tp);zue=n(qNe,"STRONG",{});var Eyt=s(zue);Zwo=r(Eyt,"data2vec-audio"),Eyt.forEach(t),Kwo=r(qNe," \u2014 "),EO=n(qNe,"A",{href:!0});var Cyt=s(EO);eAo=r(Cyt,"Wav2Vec2FeatureExtractor"),Cyt.forEach(t),oAo=r(qNe," (Data2VecAudio model)"),qNe.forEach(t),rAo=i(W),ap=n(W,"LI",{});var jNe=s(ap);Que=n(jNe,"STRONG",{});var wyt=s(Que);tAo=r(wyt,"data2vec-vision"),wyt.forEach(t),aAo=r(jNe," \u2014 "),CO=n(jNe,"A",{href:!0});var Ayt=s(CO);nAo=r(Ayt,"BeitFeatureExtractor"),Ayt.forEach(t),sAo=r(jNe," (Data2VecVision model)"),jNe.forEach(t),lAo=i(W),np=n(W,"LI",{});var DNe=s(np);Wue=n(DNe,"STRONG",{});var Lyt=s(Wue);iAo=r(Lyt,"deformable_detr"),Lyt.forEach(t),dAo=r(DNe," \u2014 "),wO=n(DNe,"A",{href:!0});var yyt=s(wO);cAo=r(yyt,"DeformableDetrFeatureExtractor"),yyt.forEach(t),mAo=r(DNe," (Deformable DETR model)"),DNe.forEach(t),fAo=i(W),sp=n(W,"LI",{});var GNe=s(sp);Uue=n(GNe,"STRONG",{});var xyt=s(Uue);gAo=r(xyt,"deit"),xyt.forEach(t),hAo=r(GNe," \u2014 "),AO=n(GNe,"A",{href:!0});var $yt=s(AO);uAo=r($yt,"DeiTFeatureExtractor"),$yt.forEach(t),pAo=r(GNe," (DeiT model)"),GNe.forEach(t),_Ao=i(W),lp=n(W,"LI",{});var ONe=s(lp);Hue=n(ONe,"STRONG",{});var kyt=s(Hue);bAo=r(kyt,"detr"),kyt.forEach(t),vAo=r(ONe," \u2014 "),LO=n(ONe,"A",{href:!0});var Syt=s(LO);FAo=r(Syt,"DetrFeatureExtractor"),Syt.forEach(t),TAo=r(ONe," (DETR model)"),ONe.forEach(t),MAo=i(W),ip=n(W,"LI",{});var VNe=s(ip);Jue=n(VNe,"STRONG",{});var Ryt=s(Jue);EAo=r(Ryt,"donut"),Ryt.forEach(t),CAo=r(VNe," \u2014 "),yO=n(VNe,"A",{href:!0});var Pyt=s(yO);wAo=r(Pyt,"DonutFeatureExtractor"),Pyt.forEach(t),AAo=r(VNe," (Donut model)"),VNe.forEach(t),LAo=i(W),dp=n(W,"LI",{});var XNe=s(dp);Yue=n(XNe,"STRONG",{});var Byt=s(Yue);yAo=r(Byt,"dpt"),Byt.forEach(t),xAo=r(XNe," \u2014 "),xO=n(XNe,"A",{href:!0});var Iyt=s(xO);$Ao=r(Iyt,"DPTFeatureExtractor"),Iyt.forEach(t),kAo=r(XNe," (DPT model)"),XNe.forEach(t),SAo=i(W),cp=n(W,"LI",{});var zNe=s(cp);Zue=n(zNe,"STRONG",{});var Nyt=s(Zue);RAo=r(Nyt,"flava"),Nyt.forEach(t),PAo=r(zNe," \u2014 "),$O=n(zNe,"A",{href:!0});var qyt=s($O);BAo=r(qyt,"FlavaFeatureExtractor"),qyt.forEach(t),IAo=r(zNe," (FLAVA model)"),zNe.forEach(t),NAo=i(W),mp=n(W,"LI",{});var QNe=s(mp);Kue=n(QNe,"STRONG",{});var jyt=s(Kue);qAo=r(jyt,"glpn"),jyt.forEach(t),jAo=r(QNe," \u2014 "),kO=n(QNe,"A",{href:!0});var Dyt=s(kO);DAo=r(Dyt,"GLPNFeatureExtractor"),Dyt.forEach(t),GAo=r(QNe," (GLPN model)"),QNe.forEach(t),OAo=i(W),fp=n(W,"LI",{});var WNe=s(fp);epe=n(WNe,"STRONG",{});var Gyt=s(epe);VAo=r(Gyt,"groupvit"),Gyt.forEach(t),XAo=r(WNe," \u2014 "),SO=n(WNe,"A",{href:!0});var Oyt=s(SO);zAo=r(Oyt,"CLIPFeatureExtractor"),Oyt.forEach(t),QAo=r(WNe," (GroupViT model)"),WNe.forEach(t),WAo=i(W),gp=n(W,"LI",{});var UNe=s(gp);ope=n(UNe,"STRONG",{});var Vyt=s(ope);UAo=r(Vyt,"hubert"),Vyt.forEach(t),HAo=r(UNe," \u2014 "),RO=n(UNe,"A",{href:!0});var Xyt=s(RO);JAo=r(Xyt,"Wav2Vec2FeatureExtractor"),Xyt.forEach(t),YAo=r(UNe," (Hubert model)"),UNe.forEach(t),ZAo=i(W),hp=n(W,"LI",{});var HNe=s(hp);rpe=n(HNe,"STRONG",{});var zyt=s(rpe);KAo=r(zyt,"imagegpt"),zyt.forEach(t),e6o=r(HNe," \u2014 "),PO=n(HNe,"A",{href:!0});var Qyt=s(PO);o6o=r(Qyt,"ImageGPTFeatureExtractor"),Qyt.forEach(t),r6o=r(HNe," (ImageGPT model)"),HNe.forEach(t),t6o=i(W),up=n(W,"LI",{});var JNe=s(up);tpe=n(JNe,"STRONG",{});var Wyt=s(tpe);a6o=r(Wyt,"layoutlmv2"),Wyt.forEach(t),n6o=r(JNe," \u2014 "),BO=n(JNe,"A",{href:!0});var Uyt=s(BO);s6o=r(Uyt,"LayoutLMv2FeatureExtractor"),Uyt.forEach(t),l6o=r(JNe," (LayoutLMv2 model)"),JNe.forEach(t),i6o=i(W),pp=n(W,"LI",{});var YNe=s(pp);ape=n(YNe,"STRONG",{});var Hyt=s(ape);d6o=r(Hyt,"layoutlmv3"),Hyt.forEach(t),c6o=r(YNe," \u2014 "),IO=n(YNe,"A",{href:!0});var Jyt=s(IO);m6o=r(Jyt,"LayoutLMv3FeatureExtractor"),Jyt.forEach(t),f6o=r(YNe," (LayoutLMv3 model)"),YNe.forEach(t),g6o=i(W),_p=n(W,"LI",{});var ZNe=s(_p);npe=n(ZNe,"STRONG",{});var Yyt=s(npe);h6o=r(Yyt,"levit"),Yyt.forEach(t),u6o=r(ZNe," \u2014 "),NO=n(ZNe,"A",{href:!0});var Zyt=s(NO);p6o=r(Zyt,"LevitFeatureExtractor"),Zyt.forEach(t),_6o=r(ZNe," (LeViT model)"),ZNe.forEach(t),b6o=i(W),bp=n(W,"LI",{});var KNe=s(bp);spe=n(KNe,"STRONG",{});var Kyt=s(spe);v6o=r(Kyt,"maskformer"),Kyt.forEach(t),F6o=r(KNe," \u2014 "),qO=n(KNe,"A",{href:!0});var e9t=s(qO);T6o=r(e9t,"MaskFormerFeatureExtractor"),e9t.forEach(t),M6o=r(KNe," (MaskFormer model)"),KNe.forEach(t),E6o=i(W),vp=n(W,"LI",{});var eqe=s(vp);lpe=n(eqe,"STRONG",{});var o9t=s(lpe);C6o=r(o9t,"mctct"),o9t.forEach(t),w6o=r(eqe," \u2014 "),jO=n(eqe,"A",{href:!0});var r9t=s(jO);A6o=r(r9t,"MCTCTFeatureExtractor"),r9t.forEach(t),L6o=r(eqe," (M-CTC-T model)"),eqe.forEach(t),y6o=i(W),Fp=n(W,"LI",{});var oqe=s(Fp);ipe=n(oqe,"STRONG",{});var t9t=s(ipe);x6o=r(t9t,"mobilevit"),t9t.forEach(t),$6o=r(oqe," \u2014 "),DO=n(oqe,"A",{href:!0});var a9t=s(DO);k6o=r(a9t,"MobileViTFeatureExtractor"),a9t.forEach(t),S6o=r(oqe," (MobileViT model)"),oqe.forEach(t),R6o=i(W),Tp=n(W,"LI",{});var rqe=s(Tp);dpe=n(rqe,"STRONG",{});var n9t=s(dpe);P6o=r(n9t,"owlvit"),n9t.forEach(t),B6o=r(rqe," \u2014 "),GO=n(rqe,"A",{href:!0});var s9t=s(GO);I6o=r(s9t,"OwlViTFeatureExtractor"),s9t.forEach(t),N6o=r(rqe," (OWL-ViT model)"),rqe.forEach(t),q6o=i(W),Mp=n(W,"LI",{});var tqe=s(Mp);cpe=n(tqe,"STRONG",{});var l9t=s(cpe);j6o=r(l9t,"perceiver"),l9t.forEach(t),D6o=r(tqe," \u2014 "),OO=n(tqe,"A",{href:!0});var i9t=s(OO);G6o=r(i9t,"PerceiverFeatureExtractor"),i9t.forEach(t),O6o=r(tqe," (Perceiver model)"),tqe.forEach(t),V6o=i(W),Ep=n(W,"LI",{});var aqe=s(Ep);mpe=n(aqe,"STRONG",{});var d9t=s(mpe);X6o=r(d9t,"poolformer"),d9t.forEach(t),z6o=r(aqe," \u2014 "),VO=n(aqe,"A",{href:!0});var c9t=s(VO);Q6o=r(c9t,"PoolFormerFeatureExtractor"),c9t.forEach(t),W6o=r(aqe," (PoolFormer model)"),aqe.forEach(t),U6o=i(W),Cp=n(W,"LI",{});var nqe=s(Cp);fpe=n(nqe,"STRONG",{});var m9t=s(fpe);H6o=r(m9t,"regnet"),m9t.forEach(t),J6o=r(nqe," \u2014 "),XO=n(nqe,"A",{href:!0});var f9t=s(XO);Y6o=r(f9t,"ConvNextFeatureExtractor"),f9t.forEach(t),Z6o=r(nqe," (RegNet model)"),nqe.forEach(t),K6o=i(W),wp=n(W,"LI",{});var sqe=s(wp);gpe=n(sqe,"STRONG",{});var g9t=s(gpe);e7o=r(g9t,"resnet"),g9t.forEach(t),o7o=r(sqe," \u2014 "),zO=n(sqe,"A",{href:!0});var h9t=s(zO);r7o=r(h9t,"ConvNextFeatureExtractor"),h9t.forEach(t),t7o=r(sqe," (ResNet model)"),sqe.forEach(t),a7o=i(W),Ap=n(W,"LI",{});var lqe=s(Ap);hpe=n(lqe,"STRONG",{});var u9t=s(hpe);n7o=r(u9t,"segformer"),u9t.forEach(t),s7o=r(lqe," \u2014 "),QO=n(lqe,"A",{href:!0});var p9t=s(QO);l7o=r(p9t,"SegformerFeatureExtractor"),p9t.forEach(t),i7o=r(lqe," (SegFormer model)"),lqe.forEach(t),d7o=i(W),Lp=n(W,"LI",{});var iqe=s(Lp);upe=n(iqe,"STRONG",{});var _9t=s(upe);c7o=r(_9t,"speech_to_text"),_9t.forEach(t),m7o=r(iqe," \u2014 "),WO=n(iqe,"A",{href:!0});var b9t=s(WO);f7o=r(b9t,"Speech2TextFeatureExtractor"),b9t.forEach(t),g7o=r(iqe," (Speech2Text model)"),iqe.forEach(t),h7o=i(W),yp=n(W,"LI",{});var dqe=s(yp);ppe=n(dqe,"STRONG",{});var v9t=s(ppe);u7o=r(v9t,"swin"),v9t.forEach(t),p7o=r(dqe," \u2014 "),UO=n(dqe,"A",{href:!0});var F9t=s(UO);_7o=r(F9t,"ViTFeatureExtractor"),F9t.forEach(t),b7o=r(dqe," (Swin Transformer model)"),dqe.forEach(t),v7o=i(W),xp=n(W,"LI",{});var cqe=s(xp);_pe=n(cqe,"STRONG",{});var T9t=s(_pe);F7o=r(T9t,"swinv2"),T9t.forEach(t),T7o=r(cqe," \u2014 "),HO=n(cqe,"A",{href:!0});var M9t=s(HO);M7o=r(M9t,"ViTFeatureExtractor"),M9t.forEach(t),E7o=r(cqe," (Swin Transformer V2 model)"),cqe.forEach(t),C7o=i(W),$p=n(W,"LI",{});var mqe=s($p);bpe=n(mqe,"STRONG",{});var E9t=s(bpe);w7o=r(E9t,"van"),E9t.forEach(t),A7o=r(mqe," \u2014 "),JO=n(mqe,"A",{href:!0});var C9t=s(JO);L7o=r(C9t,"ConvNextFeatureExtractor"),C9t.forEach(t),y7o=r(mqe," (VAN model)"),mqe.forEach(t),x7o=i(W),kp=n(W,"LI",{});var fqe=s(kp);vpe=n(fqe,"STRONG",{});var w9t=s(vpe);$7o=r(w9t,"videomae"),w9t.forEach(t),k7o=r(fqe," \u2014 "),YO=n(fqe,"A",{href:!0});var A9t=s(YO);S7o=r(A9t,"VideoMAEFeatureExtractor"),A9t.forEach(t),R7o=r(fqe," (VideoMAE model)"),fqe.forEach(t),P7o=i(W),Sp=n(W,"LI",{});var gqe=s(Sp);Fpe=n(gqe,"STRONG",{});var L9t=s(Fpe);B7o=r(L9t,"vilt"),L9t.forEach(t),I7o=r(gqe," \u2014 "),ZO=n(gqe,"A",{href:!0});var y9t=s(ZO);N7o=r(y9t,"ViltFeatureExtractor"),y9t.forEach(t),q7o=r(gqe," (ViLT model)"),gqe.forEach(t),j7o=i(W),Rp=n(W,"LI",{});var hqe=s(Rp);Tpe=n(hqe,"STRONG",{});var x9t=s(Tpe);D7o=r(x9t,"vit"),x9t.forEach(t),G7o=r(hqe," \u2014 "),KO=n(hqe,"A",{href:!0});var $9t=s(KO);O7o=r($9t,"ViTFeatureExtractor"),$9t.forEach(t),V7o=r(hqe," (ViT model)"),hqe.forEach(t),X7o=i(W),Pp=n(W,"LI",{});var uqe=s(Pp);Mpe=n(uqe,"STRONG",{});var k9t=s(Mpe);z7o=r(k9t,"vit_mae"),k9t.forEach(t),Q7o=r(uqe," \u2014 "),eV=n(uqe,"A",{href:!0});var S9t=s(eV);W7o=r(S9t,"ViTFeatureExtractor"),S9t.forEach(t),U7o=r(uqe," (ViTMAE model)"),uqe.forEach(t),H7o=i(W),Bp=n(W,"LI",{});var pqe=s(Bp);Epe=n(pqe,"STRONG",{});var R9t=s(Epe);J7o=r(R9t,"vit_msn"),R9t.forEach(t),Y7o=r(pqe," \u2014 "),oV=n(pqe,"A",{href:!0});var P9t=s(oV);Z7o=r(P9t,"ViTFeatureExtractor"),P9t.forEach(t),K7o=r(pqe," (ViTMSN model)"),pqe.forEach(t),eLo=i(W),Ip=n(W,"LI",{});var _qe=s(Ip);Cpe=n(_qe,"STRONG",{});var B9t=s(Cpe);oLo=r(B9t,"wav2vec2"),B9t.forEach(t),rLo=r(_qe," \u2014 "),rV=n(_qe,"A",{href:!0});var I9t=s(rV);tLo=r(I9t,"Wav2Vec2FeatureExtractor"),I9t.forEach(t),aLo=r(_qe," (Wav2Vec2 model)"),_qe.forEach(t),nLo=i(W),Np=n(W,"LI",{});var bqe=s(Np);wpe=n(bqe,"STRONG",{});var N9t=s(wpe);sLo=r(N9t,"wav2vec2-conformer"),N9t.forEach(t),lLo=r(bqe," \u2014 "),tV=n(bqe,"A",{href:!0});var q9t=s(tV);iLo=r(q9t,"Wav2Vec2FeatureExtractor"),q9t.forEach(t),dLo=r(bqe," (Wav2Vec2-Conformer model)"),bqe.forEach(t),cLo=i(W),qp=n(W,"LI",{});var vqe=s(qp);Ape=n(vqe,"STRONG",{});var j9t=s(Ape);mLo=r(j9t,"whisper"),j9t.forEach(t),fLo=r(vqe," \u2014 "),aV=n(vqe,"A",{href:!0});var D9t=s(aV);gLo=r(D9t,"WhisperFeatureExtractor"),D9t.forEach(t),hLo=r(vqe," (Whisper model)"),vqe.forEach(t),uLo=i(W),jp=n(W,"LI",{});var Fqe=s(jp);Lpe=n(Fqe,"STRONG",{});var G9t=s(Lpe);pLo=r(G9t,"xclip"),G9t.forEach(t),_Lo=r(Fqe," \u2014 "),nV=n(Fqe,"A",{href:!0});var O9t=s(nV);bLo=r(O9t,"CLIPFeatureExtractor"),O9t.forEach(t),vLo=r(Fqe," (X-CLIP model)"),Fqe.forEach(t),FLo=i(W),Dp=n(W,"LI",{});var Tqe=s(Dp);ype=n(Tqe,"STRONG",{});var V9t=s(ype);TLo=r(V9t,"yolos"),V9t.forEach(t),MLo=r(Tqe," \u2014 "),sV=n(Tqe,"A",{href:!0});var X9t=s(sV);ELo=r(X9t,"YolosFeatureExtractor"),X9t.forEach(t),CLo=r(Tqe," (YOLOS model)"),Tqe.forEach(t),W.forEach(t),wLo=i(Ta),T(Gp.$$.fragment,Ta),ALo=i(Ta),T(Op.$$.fragment,Ta),Ta.forEach(t),LLo=i(xl),Vp=n(xl,"DIV",{class:!0});var Dto=s(Vp);T(Wx.$$.fragment,Dto),yLo=i(Dto),xpe=n(Dto,"P",{});var z9t=s(xpe);xLo=r(z9t,"Register a new feature extractor for this class."),z9t.forEach(t),Dto.forEach(t),xl.forEach(t),Loo=i(m),Td=n(m,"H2",{class:!0});var Gto=s(Td);Xp=n(Gto,"A",{id:!0,class:!0,href:!0});var Q9t=s(Xp);$pe=n(Q9t,"SPAN",{});var W9t=s($pe);T(Ux.$$.fragment,W9t),W9t.forEach(t),Q9t.forEach(t),$Lo=i(Gto),kpe=n(Gto,"SPAN",{});var U9t=s(kpe);kLo=r(U9t,"AutoProcessor"),U9t.forEach(t),Gto.forEach(t),yoo=i(m),Po=n(m,"DIV",{class:!0});var $l=s(Po);T(Hx.$$.fragment,$l),SLo=i($l),Jx=n($l,"P",{});var Oto=s(Jx);RLo=r(Oto,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lV=n(Oto,"A",{href:!0});var H9t=s(lV);PLo=r(H9t,"AutoProcessor.from_pretrained()"),H9t.forEach(t),BLo=r(Oto," class method."),Oto.forEach(t),ILo=i($l),Yx=n($l,"P",{});var Vto=s(Yx);NLo=r(Vto,"This class cannot be instantiated directly using "),Spe=n(Vto,"CODE",{});var J9t=s(Spe);qLo=r(J9t,"__init__()"),J9t.forEach(t),jLo=r(Vto," (throws an error)."),Vto.forEach(t),DLo=i($l),Ze=n($l,"DIV",{class:!0});var Ma=s(Ze);T(Zx.$$.fragment,Ma),GLo=i(Ma),Rpe=n(Ma,"P",{});var Y9t=s(Rpe);OLo=r(Y9t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Y9t.forEach(t),VLo=i(Ma),Md=n(Ma,"P",{});var Xie=s(Md);XLo=r(Xie,"The processor class to instantiate is selected based on the "),Ppe=n(Xie,"CODE",{});var Z9t=s(Ppe);zLo=r(Z9t,"model_type"),Z9t.forEach(t),QLo=r(Xie,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(Xie,"CODE",{});var K9t=s(Bpe);WLo=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),ULo=r(Xie," if possible):"),Xie.forEach(t),HLo=i(Ma),se=n(Ma,"UL",{});var ie=s(se);zp=n(ie,"LI",{});var Mqe=s(zp);Ipe=n(Mqe,"STRONG",{});var ext=s(Ipe);JLo=r(ext,"clip"),ext.forEach(t),YLo=r(Mqe," \u2014 "),iV=n(Mqe,"A",{href:!0});var oxt=s(iV);ZLo=r(oxt,"CLIPProcessor"),oxt.forEach(t),KLo=r(Mqe," (CLIP model)"),Mqe.forEach(t),e8o=i(ie),Qp=n(ie,"LI",{});var Eqe=s(Qp);Npe=n(Eqe,"STRONG",{});var rxt=s(Npe);o8o=r(rxt,"donut"),rxt.forEach(t),r8o=r(Eqe," \u2014 "),dV=n(Eqe,"A",{href:!0});var txt=s(dV);t8o=r(txt,"DonutProcessor"),txt.forEach(t),a8o=r(Eqe," (Donut model)"),Eqe.forEach(t),n8o=i(ie),Wp=n(ie,"LI",{});var Cqe=s(Wp);qpe=n(Cqe,"STRONG",{});var axt=s(qpe);s8o=r(axt,"flava"),axt.forEach(t),l8o=r(Cqe," \u2014 "),cV=n(Cqe,"A",{href:!0});var nxt=s(cV);i8o=r(nxt,"FlavaProcessor"),nxt.forEach(t),d8o=r(Cqe," (FLAVA model)"),Cqe.forEach(t),c8o=i(ie),Up=n(ie,"LI",{});var wqe=s(Up);jpe=n(wqe,"STRONG",{});var sxt=s(jpe);m8o=r(sxt,"groupvit"),sxt.forEach(t),f8o=r(wqe," \u2014 "),mV=n(wqe,"A",{href:!0});var lxt=s(mV);g8o=r(lxt,"CLIPProcessor"),lxt.forEach(t),h8o=r(wqe," (GroupViT model)"),wqe.forEach(t),u8o=i(ie),Hp=n(ie,"LI",{});var Aqe=s(Hp);Dpe=n(Aqe,"STRONG",{});var ixt=s(Dpe);p8o=r(ixt,"layoutlmv2"),ixt.forEach(t),_8o=r(Aqe," \u2014 "),fV=n(Aqe,"A",{href:!0});var dxt=s(fV);b8o=r(dxt,"LayoutLMv2Processor"),dxt.forEach(t),v8o=r(Aqe," (LayoutLMv2 model)"),Aqe.forEach(t),F8o=i(ie),Jp=n(ie,"LI",{});var Lqe=s(Jp);Gpe=n(Lqe,"STRONG",{});var cxt=s(Gpe);T8o=r(cxt,"layoutlmv3"),cxt.forEach(t),M8o=r(Lqe," \u2014 "),gV=n(Lqe,"A",{href:!0});var mxt=s(gV);E8o=r(mxt,"LayoutLMv3Processor"),mxt.forEach(t),C8o=r(Lqe," (LayoutLMv3 model)"),Lqe.forEach(t),w8o=i(ie),Yp=n(ie,"LI",{});var yqe=s(Yp);Ope=n(yqe,"STRONG",{});var fxt=s(Ope);A8o=r(fxt,"layoutxlm"),fxt.forEach(t),L8o=r(yqe," \u2014 "),hV=n(yqe,"A",{href:!0});var gxt=s(hV);y8o=r(gxt,"LayoutXLMProcessor"),gxt.forEach(t),x8o=r(yqe," (LayoutXLM model)"),yqe.forEach(t),$8o=i(ie),Zp=n(ie,"LI",{});var xqe=s(Zp);Vpe=n(xqe,"STRONG",{});var hxt=s(Vpe);k8o=r(hxt,"markuplm"),hxt.forEach(t),S8o=r(xqe," \u2014 "),uV=n(xqe,"A",{href:!0});var uxt=s(uV);R8o=r(uxt,"MarkupLMProcessor"),uxt.forEach(t),P8o=r(xqe," (MarkupLM model)"),xqe.forEach(t),B8o=i(ie),Kp=n(ie,"LI",{});var $qe=s(Kp);Xpe=n($qe,"STRONG",{});var pxt=s(Xpe);I8o=r(pxt,"owlvit"),pxt.forEach(t),N8o=r($qe," \u2014 "),pV=n($qe,"A",{href:!0});var _xt=s(pV);q8o=r(_xt,"OwlViTProcessor"),_xt.forEach(t),j8o=r($qe," (OWL-ViT model)"),$qe.forEach(t),D8o=i(ie),e_=n(ie,"LI",{});var kqe=s(e_);zpe=n(kqe,"STRONG",{});var bxt=s(zpe);G8o=r(bxt,"sew"),bxt.forEach(t),O8o=r(kqe," \u2014 "),_V=n(kqe,"A",{href:!0});var vxt=s(_V);V8o=r(vxt,"Wav2Vec2Processor"),vxt.forEach(t),X8o=r(kqe," (SEW model)"),kqe.forEach(t),z8o=i(ie),o_=n(ie,"LI",{});var Sqe=s(o_);Qpe=n(Sqe,"STRONG",{});var Fxt=s(Qpe);Q8o=r(Fxt,"sew-d"),Fxt.forEach(t),W8o=r(Sqe," \u2014 "),bV=n(Sqe,"A",{href:!0});var Txt=s(bV);U8o=r(Txt,"Wav2Vec2Processor"),Txt.forEach(t),H8o=r(Sqe," (SEW-D model)"),Sqe.forEach(t),J8o=i(ie),r_=n(ie,"LI",{});var Rqe=s(r_);Wpe=n(Rqe,"STRONG",{});var Mxt=s(Wpe);Y8o=r(Mxt,"speech_to_text"),Mxt.forEach(t),Z8o=r(Rqe," \u2014 "),vV=n(Rqe,"A",{href:!0});var Ext=s(vV);K8o=r(Ext,"Speech2TextProcessor"),Ext.forEach(t),eyo=r(Rqe," (Speech2Text model)"),Rqe.forEach(t),oyo=i(ie),t_=n(ie,"LI",{});var Pqe=s(t_);Upe=n(Pqe,"STRONG",{});var Cxt=s(Upe);ryo=r(Cxt,"speech_to_text_2"),Cxt.forEach(t),tyo=r(Pqe," \u2014 "),FV=n(Pqe,"A",{href:!0});var wxt=s(FV);ayo=r(wxt,"Speech2Text2Processor"),wxt.forEach(t),nyo=r(Pqe," (Speech2Text2 model)"),Pqe.forEach(t),syo=i(ie),a_=n(ie,"LI",{});var Bqe=s(a_);Hpe=n(Bqe,"STRONG",{});var Axt=s(Hpe);lyo=r(Axt,"trocr"),Axt.forEach(t),iyo=r(Bqe," \u2014 "),TV=n(Bqe,"A",{href:!0});var Lxt=s(TV);dyo=r(Lxt,"TrOCRProcessor"),Lxt.forEach(t),cyo=r(Bqe," (TrOCR model)"),Bqe.forEach(t),myo=i(ie),n_=n(ie,"LI",{});var Iqe=s(n_);Jpe=n(Iqe,"STRONG",{});var yxt=s(Jpe);fyo=r(yxt,"unispeech"),yxt.forEach(t),gyo=r(Iqe," \u2014 "),MV=n(Iqe,"A",{href:!0});var xxt=s(MV);hyo=r(xxt,"Wav2Vec2Processor"),xxt.forEach(t),uyo=r(Iqe," (UniSpeech model)"),Iqe.forEach(t),pyo=i(ie),s_=n(ie,"LI",{});var Nqe=s(s_);Ype=n(Nqe,"STRONG",{});var $xt=s(Ype);_yo=r($xt,"unispeech-sat"),$xt.forEach(t),byo=r(Nqe," \u2014 "),EV=n(Nqe,"A",{href:!0});var kxt=s(EV);vyo=r(kxt,"Wav2Vec2Processor"),kxt.forEach(t),Fyo=r(Nqe," (UniSpeechSat model)"),Nqe.forEach(t),Tyo=i(ie),l_=n(ie,"LI",{});var qqe=s(l_);Zpe=n(qqe,"STRONG",{});var Sxt=s(Zpe);Myo=r(Sxt,"vilt"),Sxt.forEach(t),Eyo=r(qqe," \u2014 "),CV=n(qqe,"A",{href:!0});var Rxt=s(CV);Cyo=r(Rxt,"ViltProcessor"),Rxt.forEach(t),wyo=r(qqe," (ViLT model)"),qqe.forEach(t),Ayo=i(ie),i_=n(ie,"LI",{});var jqe=s(i_);Kpe=n(jqe,"STRONG",{});var Pxt=s(Kpe);Lyo=r(Pxt,"vision-text-dual-encoder"),Pxt.forEach(t),yyo=r(jqe," \u2014 "),wV=n(jqe,"A",{href:!0});var Bxt=s(wV);xyo=r(Bxt,"VisionTextDualEncoderProcessor"),Bxt.forEach(t),$yo=r(jqe," (VisionTextDualEncoder model)"),jqe.forEach(t),kyo=i(ie),d_=n(ie,"LI",{});var Dqe=s(d_);e_e=n(Dqe,"STRONG",{});var Ixt=s(e_e);Syo=r(Ixt,"wav2vec2"),Ixt.forEach(t),Ryo=r(Dqe," \u2014 "),AV=n(Dqe,"A",{href:!0});var Nxt=s(AV);Pyo=r(Nxt,"Wav2Vec2Processor"),Nxt.forEach(t),Byo=r(Dqe," (Wav2Vec2 model)"),Dqe.forEach(t),Iyo=i(ie),c_=n(ie,"LI",{});var Gqe=s(c_);o_e=n(Gqe,"STRONG",{});var qxt=s(o_e);Nyo=r(qxt,"wav2vec2-conformer"),qxt.forEach(t),qyo=r(Gqe," \u2014 "),LV=n(Gqe,"A",{href:!0});var jxt=s(LV);jyo=r(jxt,"Wav2Vec2Processor"),jxt.forEach(t),Dyo=r(Gqe," (Wav2Vec2-Conformer model)"),Gqe.forEach(t),Gyo=i(ie),m_=n(ie,"LI",{});var Oqe=s(m_);r_e=n(Oqe,"STRONG",{});var Dxt=s(r_e);Oyo=r(Dxt,"wavlm"),Dxt.forEach(t),Vyo=r(Oqe," \u2014 "),yV=n(Oqe,"A",{href:!0});var Gxt=s(yV);Xyo=r(Gxt,"Wav2Vec2Processor"),Gxt.forEach(t),zyo=r(Oqe," (WavLM model)"),Oqe.forEach(t),Qyo=i(ie),f_=n(ie,"LI",{});var Vqe=s(f_);t_e=n(Vqe,"STRONG",{});var Oxt=s(t_e);Wyo=r(Oxt,"whisper"),Oxt.forEach(t),Uyo=r(Vqe," \u2014 "),xV=n(Vqe,"A",{href:!0});var Vxt=s(xV);Hyo=r(Vxt,"WhisperProcessor"),Vxt.forEach(t),Jyo=r(Vqe," (Whisper model)"),Vqe.forEach(t),Yyo=i(ie),g_=n(ie,"LI",{});var Xqe=s(g_);a_e=n(Xqe,"STRONG",{});var Xxt=s(a_e);Zyo=r(Xxt,"xclip"),Xxt.forEach(t),Kyo=r(Xqe," \u2014 "),$V=n(Xqe,"A",{href:!0});var zxt=s($V);e9o=r(zxt,"CLIPProcessor"),zxt.forEach(t),o9o=r(Xqe," (X-CLIP model)"),Xqe.forEach(t),ie.forEach(t),r9o=i(Ma),T(h_.$$.fragment,Ma),t9o=i(Ma),T(u_.$$.fragment,Ma),Ma.forEach(t),a9o=i($l),p_=n($l,"DIV",{class:!0});var Xto=s(p_);T(Kx.$$.fragment,Xto),n9o=i(Xto),n_e=n(Xto,"P",{});var Qxt=s(n_e);s9o=r(Qxt,"Register a new processor for this class."),Qxt.forEach(t),Xto.forEach(t),$l.forEach(t),xoo=i(m),Ed=n(m,"H2",{class:!0});var zto=s(Ed);__=n(zto,"A",{id:!0,class:!0,href:!0});var Wxt=s(__);s_e=n(Wxt,"SPAN",{});var Uxt=s(s_e);T(e$.$$.fragment,Uxt),Uxt.forEach(t),Wxt.forEach(t),l9o=i(zto),l_e=n(zto,"SPAN",{});var Hxt=s(l_e);i9o=r(Hxt,"AutoModel"),Hxt.forEach(t),zto.forEach(t),$oo=i(m),Bo=n(m,"DIV",{class:!0});var kl=s(Bo);T(o$.$$.fragment,kl),d9o=i(kl),Cd=n(kl,"P",{});var zie=s(Cd);c9o=r(zie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kV=n(zie,"A",{href:!0});var Jxt=s(kV);m9o=r(Jxt,"from_pretrained()"),Jxt.forEach(t),f9o=r(zie," class method or the "),SV=n(zie,"A",{href:!0});var Yxt=s(SV);g9o=r(Yxt,"from_config()"),Yxt.forEach(t),h9o=r(zie,` class
method.`),zie.forEach(t),u9o=i(kl),r$=n(kl,"P",{});var Qto=s(r$);p9o=r(Qto,"This class cannot be instantiated directly using "),i_e=n(Qto,"CODE",{});var Zxt=s(i_e);_9o=r(Zxt,"__init__()"),Zxt.forEach(t),b9o=r(Qto," (throws an error)."),Qto.forEach(t),v9o=i(kl),vt=n(kl,"DIV",{class:!0});var Fy=s(vt);T(t$.$$.fragment,Fy),F9o=i(Fy),d_e=n(Fy,"P",{});var Kxt=s(d_e);T9o=r(Kxt,"Instantiates one of the base model classes of the library from a configuration."),Kxt.forEach(t),M9o=i(Fy),wd=n(Fy,"P",{});var Qie=s(wd);E9o=r(Qie,`Note:
Loading a model from its configuration file does `),c_e=n(Qie,"STRONG",{});var e$t=s(c_e);C9o=r(e$t,"not"),e$t.forEach(t),w9o=r(Qie,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Qie,"A",{href:!0});var o$t=s(RV);A9o=r(o$t,"from_pretrained()"),o$t.forEach(t),L9o=r(Qie," to load the model weights."),Qie.forEach(t),y9o=i(Fy),T(b_.$$.fragment,Fy),Fy.forEach(t),x9o=i(kl),Ke=n(kl,"DIV",{class:!0});var Ea=s(Ke);T(a$.$$.fragment,Ea),$9o=i(Ea),m_e=n(Ea,"P",{});var r$t=s(m_e);k9o=r(r$t,"Instantiate one of the base model classes of the library from a pretrained model."),r$t.forEach(t),S9o=i(Ea),en=n(Ea,"P",{});var Ty=s(en);R9o=r(Ty,"The model class to instantiate is selected based on the "),f_e=n(Ty,"CODE",{});var t$t=s(f_e);P9o=r(t$t,"model_type"),t$t.forEach(t),B9o=r(Ty,` property of the config object (either
passed as an argument or loaded from `),g_e=n(Ty,"CODE",{});var a$t=s(g_e);I9o=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),N9o=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(Ty,"CODE",{});var n$t=s(h_e);q9o=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),j9o=r(Ty,":"),Ty.forEach(t),D9o=i(Ea),y=n(Ea,"UL",{});var x=s(y);v_=n(x,"LI",{});var zqe=s(v_);u_e=n(zqe,"STRONG",{});var s$t=s(u_e);G9o=r(s$t,"albert"),s$t.forEach(t),O9o=r(zqe," \u2014 "),PV=n(zqe,"A",{href:!0});var l$t=s(PV);V9o=r(l$t,"AlbertModel"),l$t.forEach(t),X9o=r(zqe," (ALBERT model)"),zqe.forEach(t),z9o=i(x),F_=n(x,"LI",{});var Qqe=s(F_);p_e=n(Qqe,"STRONG",{});var i$t=s(p_e);Q9o=r(i$t,"bart"),i$t.forEach(t),W9o=r(Qqe," \u2014 "),BV=n(Qqe,"A",{href:!0});var d$t=s(BV);U9o=r(d$t,"BartModel"),d$t.forEach(t),H9o=r(Qqe," (BART model)"),Qqe.forEach(t),J9o=i(x),T_=n(x,"LI",{});var Wqe=s(T_);__e=n(Wqe,"STRONG",{});var c$t=s(__e);Y9o=r(c$t,"beit"),c$t.forEach(t),Z9o=r(Wqe," \u2014 "),IV=n(Wqe,"A",{href:!0});var m$t=s(IV);K9o=r(m$t,"BeitModel"),m$t.forEach(t),exo=r(Wqe," (BEiT model)"),Wqe.forEach(t),oxo=i(x),M_=n(x,"LI",{});var Uqe=s(M_);b_e=n(Uqe,"STRONG",{});var f$t=s(b_e);rxo=r(f$t,"bert"),f$t.forEach(t),txo=r(Uqe," \u2014 "),NV=n(Uqe,"A",{href:!0});var g$t=s(NV);axo=r(g$t,"BertModel"),g$t.forEach(t),nxo=r(Uqe," (BERT model)"),Uqe.forEach(t),sxo=i(x),E_=n(x,"LI",{});var Hqe=s(E_);v_e=n(Hqe,"STRONG",{});var h$t=s(v_e);lxo=r(h$t,"bert-generation"),h$t.forEach(t),ixo=r(Hqe," \u2014 "),qV=n(Hqe,"A",{href:!0});var u$t=s(qV);dxo=r(u$t,"BertGenerationEncoder"),u$t.forEach(t),cxo=r(Hqe," (Bert Generation model)"),Hqe.forEach(t),mxo=i(x),C_=n(x,"LI",{});var Jqe=s(C_);F_e=n(Jqe,"STRONG",{});var p$t=s(F_e);fxo=r(p$t,"big_bird"),p$t.forEach(t),gxo=r(Jqe," \u2014 "),jV=n(Jqe,"A",{href:!0});var _$t=s(jV);hxo=r(_$t,"BigBirdModel"),_$t.forEach(t),uxo=r(Jqe," (BigBird model)"),Jqe.forEach(t),pxo=i(x),w_=n(x,"LI",{});var Yqe=s(w_);T_e=n(Yqe,"STRONG",{});var b$t=s(T_e);_xo=r(b$t,"bigbird_pegasus"),b$t.forEach(t),bxo=r(Yqe," \u2014 "),DV=n(Yqe,"A",{href:!0});var v$t=s(DV);vxo=r(v$t,"BigBirdPegasusModel"),v$t.forEach(t),Fxo=r(Yqe," (BigBird-Pegasus model)"),Yqe.forEach(t),Txo=i(x),A_=n(x,"LI",{});var Zqe=s(A_);M_e=n(Zqe,"STRONG",{});var F$t=s(M_e);Mxo=r(F$t,"blenderbot"),F$t.forEach(t),Exo=r(Zqe," \u2014 "),GV=n(Zqe,"A",{href:!0});var T$t=s(GV);Cxo=r(T$t,"BlenderbotModel"),T$t.forEach(t),wxo=r(Zqe," (Blenderbot model)"),Zqe.forEach(t),Axo=i(x),L_=n(x,"LI",{});var Kqe=s(L_);E_e=n(Kqe,"STRONG",{});var M$t=s(E_e);Lxo=r(M$t,"blenderbot-small"),M$t.forEach(t),yxo=r(Kqe," \u2014 "),OV=n(Kqe,"A",{href:!0});var E$t=s(OV);xxo=r(E$t,"BlenderbotSmallModel"),E$t.forEach(t),$xo=r(Kqe," (BlenderbotSmall model)"),Kqe.forEach(t),kxo=i(x),y_=n(x,"LI",{});var eje=s(y_);C_e=n(eje,"STRONG",{});var C$t=s(C_e);Sxo=r(C$t,"bloom"),C$t.forEach(t),Rxo=r(eje," \u2014 "),VV=n(eje,"A",{href:!0});var w$t=s(VV);Pxo=r(w$t,"BloomModel"),w$t.forEach(t),Bxo=r(eje," (BLOOM model)"),eje.forEach(t),Ixo=i(x),x_=n(x,"LI",{});var oje=s(x_);w_e=n(oje,"STRONG",{});var A$t=s(w_e);Nxo=r(A$t,"camembert"),A$t.forEach(t),qxo=r(oje," \u2014 "),XV=n(oje,"A",{href:!0});var L$t=s(XV);jxo=r(L$t,"CamembertModel"),L$t.forEach(t),Dxo=r(oje," (CamemBERT model)"),oje.forEach(t),Gxo=i(x),$_=n(x,"LI",{});var rje=s($_);A_e=n(rje,"STRONG",{});var y$t=s(A_e);Oxo=r(y$t,"canine"),y$t.forEach(t),Vxo=r(rje," \u2014 "),zV=n(rje,"A",{href:!0});var x$t=s(zV);Xxo=r(x$t,"CanineModel"),x$t.forEach(t),zxo=r(rje," (CANINE model)"),rje.forEach(t),Qxo=i(x),k_=n(x,"LI",{});var tje=s(k_);L_e=n(tje,"STRONG",{});var $$t=s(L_e);Wxo=r($$t,"clip"),$$t.forEach(t),Uxo=r(tje," \u2014 "),QV=n(tje,"A",{href:!0});var k$t=s(QV);Hxo=r(k$t,"CLIPModel"),k$t.forEach(t),Jxo=r(tje," (CLIP model)"),tje.forEach(t),Yxo=i(x),S_=n(x,"LI",{});var aje=s(S_);y_e=n(aje,"STRONG",{});var S$t=s(y_e);Zxo=r(S$t,"codegen"),S$t.forEach(t),Kxo=r(aje," \u2014 "),WV=n(aje,"A",{href:!0});var R$t=s(WV);e$o=r(R$t,"CodeGenModel"),R$t.forEach(t),o$o=r(aje," (CodeGen model)"),aje.forEach(t),r$o=i(x),R_=n(x,"LI",{});var nje=s(R_);x_e=n(nje,"STRONG",{});var P$t=s(x_e);t$o=r(P$t,"conditional_detr"),P$t.forEach(t),a$o=r(nje," \u2014 "),UV=n(nje,"A",{href:!0});var B$t=s(UV);n$o=r(B$t,"ConditionalDetrModel"),B$t.forEach(t),s$o=r(nje," (Conditional DETR model)"),nje.forEach(t),l$o=i(x),P_=n(x,"LI",{});var sje=s(P_);$_e=n(sje,"STRONG",{});var I$t=s($_e);i$o=r(I$t,"convbert"),I$t.forEach(t),d$o=r(sje," \u2014 "),HV=n(sje,"A",{href:!0});var N$t=s(HV);c$o=r(N$t,"ConvBertModel"),N$t.forEach(t),m$o=r(sje," (ConvBERT model)"),sje.forEach(t),f$o=i(x),B_=n(x,"LI",{});var lje=s(B_);k_e=n(lje,"STRONG",{});var q$t=s(k_e);g$o=r(q$t,"convnext"),q$t.forEach(t),h$o=r(lje," \u2014 "),JV=n(lje,"A",{href:!0});var j$t=s(JV);u$o=r(j$t,"ConvNextModel"),j$t.forEach(t),p$o=r(lje," (ConvNeXT model)"),lje.forEach(t),_$o=i(x),I_=n(x,"LI",{});var ije=s(I_);S_e=n(ije,"STRONG",{});var D$t=s(S_e);b$o=r(D$t,"ctrl"),D$t.forEach(t),v$o=r(ije," \u2014 "),YV=n(ije,"A",{href:!0});var G$t=s(YV);F$o=r(G$t,"CTRLModel"),G$t.forEach(t),T$o=r(ije," (CTRL model)"),ije.forEach(t),M$o=i(x),N_=n(x,"LI",{});var dje=s(N_);R_e=n(dje,"STRONG",{});var O$t=s(R_e);E$o=r(O$t,"cvt"),O$t.forEach(t),C$o=r(dje," \u2014 "),ZV=n(dje,"A",{href:!0});var V$t=s(ZV);w$o=r(V$t,"CvtModel"),V$t.forEach(t),A$o=r(dje," (CvT model)"),dje.forEach(t),L$o=i(x),q_=n(x,"LI",{});var cje=s(q_);P_e=n(cje,"STRONG",{});var X$t=s(P_e);y$o=r(X$t,"data2vec-audio"),X$t.forEach(t),x$o=r(cje," \u2014 "),KV=n(cje,"A",{href:!0});var z$t=s(KV);$$o=r(z$t,"Data2VecAudioModel"),z$t.forEach(t),k$o=r(cje," (Data2VecAudio model)"),cje.forEach(t),S$o=i(x),j_=n(x,"LI",{});var mje=s(j_);B_e=n(mje,"STRONG",{});var Q$t=s(B_e);R$o=r(Q$t,"data2vec-text"),Q$t.forEach(t),P$o=r(mje," \u2014 "),eX=n(mje,"A",{href:!0});var W$t=s(eX);B$o=r(W$t,"Data2VecTextModel"),W$t.forEach(t),I$o=r(mje," (Data2VecText model)"),mje.forEach(t),N$o=i(x),D_=n(x,"LI",{});var fje=s(D_);I_e=n(fje,"STRONG",{});var U$t=s(I_e);q$o=r(U$t,"data2vec-vision"),U$t.forEach(t),j$o=r(fje," \u2014 "),oX=n(fje,"A",{href:!0});var H$t=s(oX);D$o=r(H$t,"Data2VecVisionModel"),H$t.forEach(t),G$o=r(fje," (Data2VecVision model)"),fje.forEach(t),O$o=i(x),G_=n(x,"LI",{});var gje=s(G_);N_e=n(gje,"STRONG",{});var J$t=s(N_e);V$o=r(J$t,"deberta"),J$t.forEach(t),X$o=r(gje," \u2014 "),rX=n(gje,"A",{href:!0});var Y$t=s(rX);z$o=r(Y$t,"DebertaModel"),Y$t.forEach(t),Q$o=r(gje," (DeBERTa model)"),gje.forEach(t),W$o=i(x),O_=n(x,"LI",{});var hje=s(O_);q_e=n(hje,"STRONG",{});var Z$t=s(q_e);U$o=r(Z$t,"deberta-v2"),Z$t.forEach(t),H$o=r(hje," \u2014 "),tX=n(hje,"A",{href:!0});var K$t=s(tX);J$o=r(K$t,"DebertaV2Model"),K$t.forEach(t),Y$o=r(hje," (DeBERTa-v2 model)"),hje.forEach(t),Z$o=i(x),V_=n(x,"LI",{});var uje=s(V_);j_e=n(uje,"STRONG",{});var ekt=s(j_e);K$o=r(ekt,"decision_transformer"),ekt.forEach(t),eko=r(uje," \u2014 "),aX=n(uje,"A",{href:!0});var okt=s(aX);oko=r(okt,"DecisionTransformerModel"),okt.forEach(t),rko=r(uje," (Decision Transformer model)"),uje.forEach(t),tko=i(x),X_=n(x,"LI",{});var pje=s(X_);D_e=n(pje,"STRONG",{});var rkt=s(D_e);ako=r(rkt,"deformable_detr"),rkt.forEach(t),nko=r(pje," \u2014 "),nX=n(pje,"A",{href:!0});var tkt=s(nX);sko=r(tkt,"DeformableDetrModel"),tkt.forEach(t),lko=r(pje," (Deformable DETR model)"),pje.forEach(t),iko=i(x),z_=n(x,"LI",{});var _je=s(z_);G_e=n(_je,"STRONG",{});var akt=s(G_e);dko=r(akt,"deit"),akt.forEach(t),cko=r(_je," \u2014 "),sX=n(_je,"A",{href:!0});var nkt=s(sX);mko=r(nkt,"DeiTModel"),nkt.forEach(t),fko=r(_je," (DeiT model)"),_je.forEach(t),gko=i(x),Q_=n(x,"LI",{});var bje=s(Q_);O_e=n(bje,"STRONG",{});var skt=s(O_e);hko=r(skt,"detr"),skt.forEach(t),uko=r(bje," \u2014 "),lX=n(bje,"A",{href:!0});var lkt=s(lX);pko=r(lkt,"DetrModel"),lkt.forEach(t),_ko=r(bje," (DETR model)"),bje.forEach(t),bko=i(x),W_=n(x,"LI",{});var vje=s(W_);V_e=n(vje,"STRONG",{});var ikt=s(V_e);vko=r(ikt,"distilbert"),ikt.forEach(t),Fko=r(vje," \u2014 "),iX=n(vje,"A",{href:!0});var dkt=s(iX);Tko=r(dkt,"DistilBertModel"),dkt.forEach(t),Mko=r(vje," (DistilBERT model)"),vje.forEach(t),Eko=i(x),U_=n(x,"LI",{});var Fje=s(U_);X_e=n(Fje,"STRONG",{});var ckt=s(X_e);Cko=r(ckt,"donut-swin"),ckt.forEach(t),wko=r(Fje," \u2014 "),dX=n(Fje,"A",{href:!0});var mkt=s(dX);Ako=r(mkt,"DonutSwinModel"),mkt.forEach(t),Lko=r(Fje," (DonutSwin model)"),Fje.forEach(t),yko=i(x),H_=n(x,"LI",{});var Tje=s(H_);z_e=n(Tje,"STRONG",{});var fkt=s(z_e);xko=r(fkt,"dpr"),fkt.forEach(t),$ko=r(Tje," \u2014 "),cX=n(Tje,"A",{href:!0});var gkt=s(cX);kko=r(gkt,"DPRQuestionEncoder"),gkt.forEach(t),Sko=r(Tje," (DPR model)"),Tje.forEach(t),Rko=i(x),J_=n(x,"LI",{});var Mje=s(J_);Q_e=n(Mje,"STRONG",{});var hkt=s(Q_e);Pko=r(hkt,"dpt"),hkt.forEach(t),Bko=r(Mje," \u2014 "),mX=n(Mje,"A",{href:!0});var ukt=s(mX);Iko=r(ukt,"DPTModel"),ukt.forEach(t),Nko=r(Mje," (DPT model)"),Mje.forEach(t),qko=i(x),Y_=n(x,"LI",{});var Eje=s(Y_);W_e=n(Eje,"STRONG",{});var pkt=s(W_e);jko=r(pkt,"electra"),pkt.forEach(t),Dko=r(Eje," \u2014 "),fX=n(Eje,"A",{href:!0});var _kt=s(fX);Gko=r(_kt,"ElectraModel"),_kt.forEach(t),Oko=r(Eje," (ELECTRA model)"),Eje.forEach(t),Vko=i(x),Z_=n(x,"LI",{});var Cje=s(Z_);U_e=n(Cje,"STRONG",{});var bkt=s(U_e);Xko=r(bkt,"ernie"),bkt.forEach(t),zko=r(Cje," \u2014 "),gX=n(Cje,"A",{href:!0});var vkt=s(gX);Qko=r(vkt,"ErnieModel"),vkt.forEach(t),Wko=r(Cje," (ERNIE model)"),Cje.forEach(t),Uko=i(x),K_=n(x,"LI",{});var wje=s(K_);H_e=n(wje,"STRONG",{});var Fkt=s(H_e);Hko=r(Fkt,"esm"),Fkt.forEach(t),Jko=r(wje," \u2014 "),hX=n(wje,"A",{href:!0});var Tkt=s(hX);Yko=r(Tkt,"EsmModel"),Tkt.forEach(t),Zko=r(wje," (ESM model)"),wje.forEach(t),Kko=i(x),e1=n(x,"LI",{});var Aje=s(e1);J_e=n(Aje,"STRONG",{});var Mkt=s(J_e);eSo=r(Mkt,"flaubert"),Mkt.forEach(t),oSo=r(Aje," \u2014 "),uX=n(Aje,"A",{href:!0});var Ekt=s(uX);rSo=r(Ekt,"FlaubertModel"),Ekt.forEach(t),tSo=r(Aje," (FlauBERT model)"),Aje.forEach(t),aSo=i(x),o1=n(x,"LI",{});var Lje=s(o1);Y_e=n(Lje,"STRONG",{});var Ckt=s(Y_e);nSo=r(Ckt,"flava"),Ckt.forEach(t),sSo=r(Lje," \u2014 "),pX=n(Lje,"A",{href:!0});var wkt=s(pX);lSo=r(wkt,"FlavaModel"),wkt.forEach(t),iSo=r(Lje," (FLAVA model)"),Lje.forEach(t),dSo=i(x),r1=n(x,"LI",{});var yje=s(r1);Z_e=n(yje,"STRONG",{});var Akt=s(Z_e);cSo=r(Akt,"fnet"),Akt.forEach(t),mSo=r(yje," \u2014 "),_X=n(yje,"A",{href:!0});var Lkt=s(_X);fSo=r(Lkt,"FNetModel"),Lkt.forEach(t),gSo=r(yje," (FNet model)"),yje.forEach(t),hSo=i(x),t1=n(x,"LI",{});var xje=s(t1);K_e=n(xje,"STRONG",{});var ykt=s(K_e);uSo=r(ykt,"fsmt"),ykt.forEach(t),pSo=r(xje," \u2014 "),bX=n(xje,"A",{href:!0});var xkt=s(bX);_So=r(xkt,"FSMTModel"),xkt.forEach(t),bSo=r(xje," (FairSeq Machine-Translation model)"),xje.forEach(t),vSo=i(x),Ml=n(x,"LI",{});var yI=s(Ml);e1e=n(yI,"STRONG",{});var $kt=s(e1e);FSo=r($kt,"funnel"),$kt.forEach(t),TSo=r(yI," \u2014 "),vX=n(yI,"A",{href:!0});var kkt=s(vX);MSo=r(kkt,"FunnelModel"),kkt.forEach(t),ESo=r(yI," or "),FX=n(yI,"A",{href:!0});var Skt=s(FX);CSo=r(Skt,"FunnelBaseModel"),Skt.forEach(t),wSo=r(yI," (Funnel Transformer model)"),yI.forEach(t),ASo=i(x),a1=n(x,"LI",{});var $je=s(a1);o1e=n($je,"STRONG",{});var Rkt=s(o1e);LSo=r(Rkt,"glpn"),Rkt.forEach(t),ySo=r($je," \u2014 "),TX=n($je,"A",{href:!0});var Pkt=s(TX);xSo=r(Pkt,"GLPNModel"),Pkt.forEach(t),$So=r($je," (GLPN model)"),$je.forEach(t),kSo=i(x),n1=n(x,"LI",{});var kje=s(n1);r1e=n(kje,"STRONG",{});var Bkt=s(r1e);SSo=r(Bkt,"gpt2"),Bkt.forEach(t),RSo=r(kje," \u2014 "),MX=n(kje,"A",{href:!0});var Ikt=s(MX);PSo=r(Ikt,"GPT2Model"),Ikt.forEach(t),BSo=r(kje," (OpenAI GPT-2 model)"),kje.forEach(t),ISo=i(x),s1=n(x,"LI",{});var Sje=s(s1);t1e=n(Sje,"STRONG",{});var Nkt=s(t1e);NSo=r(Nkt,"gpt_neo"),Nkt.forEach(t),qSo=r(Sje," \u2014 "),EX=n(Sje,"A",{href:!0});var qkt=s(EX);jSo=r(qkt,"GPTNeoModel"),qkt.forEach(t),DSo=r(Sje," (GPT Neo model)"),Sje.forEach(t),GSo=i(x),l1=n(x,"LI",{});var Rje=s(l1);a1e=n(Rje,"STRONG",{});var jkt=s(a1e);OSo=r(jkt,"gpt_neox"),jkt.forEach(t),VSo=r(Rje," \u2014 "),CX=n(Rje,"A",{href:!0});var Dkt=s(CX);XSo=r(Dkt,"GPTNeoXModel"),Dkt.forEach(t),zSo=r(Rje," (GPT NeoX model)"),Rje.forEach(t),QSo=i(x),i1=n(x,"LI",{});var Pje=s(i1);n1e=n(Pje,"STRONG",{});var Gkt=s(n1e);WSo=r(Gkt,"gpt_neox_japanese"),Gkt.forEach(t),USo=r(Pje," \u2014 "),wX=n(Pje,"A",{href:!0});var Okt=s(wX);HSo=r(Okt,"GPTNeoXJapaneseModel"),Okt.forEach(t),JSo=r(Pje," (GPT NeoX Japanese model)"),Pje.forEach(t),YSo=i(x),d1=n(x,"LI",{});var Bje=s(d1);s1e=n(Bje,"STRONG",{});var Vkt=s(s1e);ZSo=r(Vkt,"gptj"),Vkt.forEach(t),KSo=r(Bje," \u2014 "),AX=n(Bje,"A",{href:!0});var Xkt=s(AX);eRo=r(Xkt,"GPTJModel"),Xkt.forEach(t),oRo=r(Bje," (GPT-J model)"),Bje.forEach(t),rRo=i(x),c1=n(x,"LI",{});var Ije=s(c1);l1e=n(Ije,"STRONG",{});var zkt=s(l1e);tRo=r(zkt,"groupvit"),zkt.forEach(t),aRo=r(Ije," \u2014 "),LX=n(Ije,"A",{href:!0});var Qkt=s(LX);nRo=r(Qkt,"GroupViTModel"),Qkt.forEach(t),sRo=r(Ije," (GroupViT model)"),Ije.forEach(t),lRo=i(x),m1=n(x,"LI",{});var Nje=s(m1);i1e=n(Nje,"STRONG",{});var Wkt=s(i1e);iRo=r(Wkt,"hubert"),Wkt.forEach(t),dRo=r(Nje," \u2014 "),yX=n(Nje,"A",{href:!0});var Ukt=s(yX);cRo=r(Ukt,"HubertModel"),Ukt.forEach(t),mRo=r(Nje," (Hubert model)"),Nje.forEach(t),fRo=i(x),f1=n(x,"LI",{});var qje=s(f1);d1e=n(qje,"STRONG",{});var Hkt=s(d1e);gRo=r(Hkt,"ibert"),Hkt.forEach(t),hRo=r(qje," \u2014 "),xX=n(qje,"A",{href:!0});var Jkt=s(xX);uRo=r(Jkt,"IBertModel"),Jkt.forEach(t),pRo=r(qje," (I-BERT model)"),qje.forEach(t),_Ro=i(x),g1=n(x,"LI",{});var jje=s(g1);c1e=n(jje,"STRONG",{});var Ykt=s(c1e);bRo=r(Ykt,"imagegpt"),Ykt.forEach(t),vRo=r(jje," \u2014 "),$X=n(jje,"A",{href:!0});var Zkt=s($X);FRo=r(Zkt,"ImageGPTModel"),Zkt.forEach(t),TRo=r(jje," (ImageGPT model)"),jje.forEach(t),MRo=i(x),h1=n(x,"LI",{});var Dje=s(h1);m1e=n(Dje,"STRONG",{});var Kkt=s(m1e);ERo=r(Kkt,"layoutlm"),Kkt.forEach(t),CRo=r(Dje," \u2014 "),kX=n(Dje,"A",{href:!0});var eSt=s(kX);wRo=r(eSt,"LayoutLMModel"),eSt.forEach(t),ARo=r(Dje," (LayoutLM model)"),Dje.forEach(t),LRo=i(x),u1=n(x,"LI",{});var Gje=s(u1);f1e=n(Gje,"STRONG",{});var oSt=s(f1e);yRo=r(oSt,"layoutlmv2"),oSt.forEach(t),xRo=r(Gje," \u2014 "),SX=n(Gje,"A",{href:!0});var rSt=s(SX);$Ro=r(rSt,"LayoutLMv2Model"),rSt.forEach(t),kRo=r(Gje," (LayoutLMv2 model)"),Gje.forEach(t),SRo=i(x),p1=n(x,"LI",{});var Oje=s(p1);g1e=n(Oje,"STRONG",{});var tSt=s(g1e);RRo=r(tSt,"layoutlmv3"),tSt.forEach(t),PRo=r(Oje," \u2014 "),RX=n(Oje,"A",{href:!0});var aSt=s(RX);BRo=r(aSt,"LayoutLMv3Model"),aSt.forEach(t),IRo=r(Oje," (LayoutLMv3 model)"),Oje.forEach(t),NRo=i(x),_1=n(x,"LI",{});var Vje=s(_1);h1e=n(Vje,"STRONG",{});var nSt=s(h1e);qRo=r(nSt,"led"),nSt.forEach(t),jRo=r(Vje," \u2014 "),PX=n(Vje,"A",{href:!0});var sSt=s(PX);DRo=r(sSt,"LEDModel"),sSt.forEach(t),GRo=r(Vje," (LED model)"),Vje.forEach(t),ORo=i(x),b1=n(x,"LI",{});var Xje=s(b1);u1e=n(Xje,"STRONG",{});var lSt=s(u1e);VRo=r(lSt,"levit"),lSt.forEach(t),XRo=r(Xje," \u2014 "),BX=n(Xje,"A",{href:!0});var iSt=s(BX);zRo=r(iSt,"LevitModel"),iSt.forEach(t),QRo=r(Xje," (LeViT model)"),Xje.forEach(t),WRo=i(x),v1=n(x,"LI",{});var zje=s(v1);p1e=n(zje,"STRONG",{});var dSt=s(p1e);URo=r(dSt,"longformer"),dSt.forEach(t),HRo=r(zje," \u2014 "),IX=n(zje,"A",{href:!0});var cSt=s(IX);JRo=r(cSt,"LongformerModel"),cSt.forEach(t),YRo=r(zje," (Longformer model)"),zje.forEach(t),ZRo=i(x),F1=n(x,"LI",{});var Qje=s(F1);_1e=n(Qje,"STRONG",{});var mSt=s(_1e);KRo=r(mSt,"longt5"),mSt.forEach(t),ePo=r(Qje," \u2014 "),NX=n(Qje,"A",{href:!0});var fSt=s(NX);oPo=r(fSt,"LongT5Model"),fSt.forEach(t),rPo=r(Qje," (LongT5 model)"),Qje.forEach(t),tPo=i(x),T1=n(x,"LI",{});var Wje=s(T1);b1e=n(Wje,"STRONG",{});var gSt=s(b1e);aPo=r(gSt,"luke"),gSt.forEach(t),nPo=r(Wje," \u2014 "),qX=n(Wje,"A",{href:!0});var hSt=s(qX);sPo=r(hSt,"LukeModel"),hSt.forEach(t),lPo=r(Wje," (LUKE model)"),Wje.forEach(t),iPo=i(x),M1=n(x,"LI",{});var Uje=s(M1);v1e=n(Uje,"STRONG",{});var uSt=s(v1e);dPo=r(uSt,"lxmert"),uSt.forEach(t),cPo=r(Uje," \u2014 "),jX=n(Uje,"A",{href:!0});var pSt=s(jX);mPo=r(pSt,"LxmertModel"),pSt.forEach(t),fPo=r(Uje," (LXMERT model)"),Uje.forEach(t),gPo=i(x),E1=n(x,"LI",{});var Hje=s(E1);F1e=n(Hje,"STRONG",{});var _St=s(F1e);hPo=r(_St,"m2m_100"),_St.forEach(t),uPo=r(Hje," \u2014 "),DX=n(Hje,"A",{href:!0});var bSt=s(DX);pPo=r(bSt,"M2M100Model"),bSt.forEach(t),_Po=r(Hje," (M2M100 model)"),Hje.forEach(t),bPo=i(x),C1=n(x,"LI",{});var Jje=s(C1);T1e=n(Jje,"STRONG",{});var vSt=s(T1e);vPo=r(vSt,"marian"),vSt.forEach(t),FPo=r(Jje," \u2014 "),GX=n(Jje,"A",{href:!0});var FSt=s(GX);TPo=r(FSt,"MarianModel"),FSt.forEach(t),MPo=r(Jje," (Marian model)"),Jje.forEach(t),EPo=i(x),w1=n(x,"LI",{});var Yje=s(w1);M1e=n(Yje,"STRONG",{});var TSt=s(M1e);CPo=r(TSt,"markuplm"),TSt.forEach(t),wPo=r(Yje," \u2014 "),OX=n(Yje,"A",{href:!0});var MSt=s(OX);APo=r(MSt,"MarkupLMModel"),MSt.forEach(t),LPo=r(Yje," (MarkupLM model)"),Yje.forEach(t),yPo=i(x),A1=n(x,"LI",{});var Zje=s(A1);E1e=n(Zje,"STRONG",{});var ESt=s(E1e);xPo=r(ESt,"maskformer"),ESt.forEach(t),$Po=r(Zje," \u2014 "),VX=n(Zje,"A",{href:!0});var CSt=s(VX);kPo=r(CSt,"MaskFormerModel"),CSt.forEach(t),SPo=r(Zje," (MaskFormer model)"),Zje.forEach(t),RPo=i(x),L1=n(x,"LI",{});var Kje=s(L1);C1e=n(Kje,"STRONG",{});var wSt=s(C1e);PPo=r(wSt,"mbart"),wSt.forEach(t),BPo=r(Kje," \u2014 "),XX=n(Kje,"A",{href:!0});var ASt=s(XX);IPo=r(ASt,"MBartModel"),ASt.forEach(t),NPo=r(Kje," (mBART model)"),Kje.forEach(t),qPo=i(x),y1=n(x,"LI",{});var eDe=s(y1);w1e=n(eDe,"STRONG",{});var LSt=s(w1e);jPo=r(LSt,"mctct"),LSt.forEach(t),DPo=r(eDe," \u2014 "),zX=n(eDe,"A",{href:!0});var ySt=s(zX);GPo=r(ySt,"MCTCTModel"),ySt.forEach(t),OPo=r(eDe," (M-CTC-T model)"),eDe.forEach(t),VPo=i(x),x1=n(x,"LI",{});var oDe=s(x1);A1e=n(oDe,"STRONG",{});var xSt=s(A1e);XPo=r(xSt,"megatron-bert"),xSt.forEach(t),zPo=r(oDe," \u2014 "),QX=n(oDe,"A",{href:!0});var $St=s(QX);QPo=r($St,"MegatronBertModel"),$St.forEach(t),WPo=r(oDe," (Megatron-BERT model)"),oDe.forEach(t),UPo=i(x),$1=n(x,"LI",{});var rDe=s($1);L1e=n(rDe,"STRONG",{});var kSt=s(L1e);HPo=r(kSt,"mobilebert"),kSt.forEach(t),JPo=r(rDe," \u2014 "),WX=n(rDe,"A",{href:!0});var SSt=s(WX);YPo=r(SSt,"MobileBertModel"),SSt.forEach(t),ZPo=r(rDe," (MobileBERT model)"),rDe.forEach(t),KPo=i(x),k1=n(x,"LI",{});var tDe=s(k1);y1e=n(tDe,"STRONG",{});var RSt=s(y1e);eBo=r(RSt,"mobilevit"),RSt.forEach(t),oBo=r(tDe," \u2014 "),UX=n(tDe,"A",{href:!0});var PSt=s(UX);rBo=r(PSt,"MobileViTModel"),PSt.forEach(t),tBo=r(tDe," (MobileViT model)"),tDe.forEach(t),aBo=i(x),S1=n(x,"LI",{});var aDe=s(S1);x1e=n(aDe,"STRONG",{});var BSt=s(x1e);nBo=r(BSt,"mpnet"),BSt.forEach(t),sBo=r(aDe," \u2014 "),HX=n(aDe,"A",{href:!0});var ISt=s(HX);lBo=r(ISt,"MPNetModel"),ISt.forEach(t),iBo=r(aDe," (MPNet model)"),aDe.forEach(t),dBo=i(x),R1=n(x,"LI",{});var nDe=s(R1);$1e=n(nDe,"STRONG",{});var NSt=s($1e);cBo=r(NSt,"mt5"),NSt.forEach(t),mBo=r(nDe," \u2014 "),JX=n(nDe,"A",{href:!0});var qSt=s(JX);fBo=r(qSt,"MT5Model"),qSt.forEach(t),gBo=r(nDe," (MT5 model)"),nDe.forEach(t),hBo=i(x),P1=n(x,"LI",{});var sDe=s(P1);k1e=n(sDe,"STRONG",{});var jSt=s(k1e);uBo=r(jSt,"mvp"),jSt.forEach(t),pBo=r(sDe," \u2014 "),YX=n(sDe,"A",{href:!0});var DSt=s(YX);_Bo=r(DSt,"MvpModel"),DSt.forEach(t),bBo=r(sDe," (MVP model)"),sDe.forEach(t),vBo=i(x),B1=n(x,"LI",{});var lDe=s(B1);S1e=n(lDe,"STRONG",{});var GSt=s(S1e);FBo=r(GSt,"nezha"),GSt.forEach(t),TBo=r(lDe," \u2014 "),ZX=n(lDe,"A",{href:!0});var OSt=s(ZX);MBo=r(OSt,"NezhaModel"),OSt.forEach(t),EBo=r(lDe," (Nezha model)"),lDe.forEach(t),CBo=i(x),I1=n(x,"LI",{});var iDe=s(I1);R1e=n(iDe,"STRONG",{});var VSt=s(R1e);wBo=r(VSt,"nllb"),VSt.forEach(t),ABo=r(iDe," \u2014 "),KX=n(iDe,"A",{href:!0});var XSt=s(KX);LBo=r(XSt,"M2M100Model"),XSt.forEach(t),yBo=r(iDe," (NLLB model)"),iDe.forEach(t),xBo=i(x),N1=n(x,"LI",{});var dDe=s(N1);P1e=n(dDe,"STRONG",{});var zSt=s(P1e);$Bo=r(zSt,"nystromformer"),zSt.forEach(t),kBo=r(dDe," \u2014 "),ez=n(dDe,"A",{href:!0});var QSt=s(ez);SBo=r(QSt,"NystromformerModel"),QSt.forEach(t),RBo=r(dDe," (Nystr\xF6mformer model)"),dDe.forEach(t),PBo=i(x),q1=n(x,"LI",{});var cDe=s(q1);B1e=n(cDe,"STRONG",{});var WSt=s(B1e);BBo=r(WSt,"openai-gpt"),WSt.forEach(t),IBo=r(cDe," \u2014 "),oz=n(cDe,"A",{href:!0});var USt=s(oz);NBo=r(USt,"OpenAIGPTModel"),USt.forEach(t),qBo=r(cDe," (OpenAI GPT model)"),cDe.forEach(t),jBo=i(x),j1=n(x,"LI",{});var mDe=s(j1);I1e=n(mDe,"STRONG",{});var HSt=s(I1e);DBo=r(HSt,"opt"),HSt.forEach(t),GBo=r(mDe," \u2014 "),rz=n(mDe,"A",{href:!0});var JSt=s(rz);OBo=r(JSt,"OPTModel"),JSt.forEach(t),VBo=r(mDe," (OPT model)"),mDe.forEach(t),XBo=i(x),D1=n(x,"LI",{});var fDe=s(D1);N1e=n(fDe,"STRONG",{});var YSt=s(N1e);zBo=r(YSt,"owlvit"),YSt.forEach(t),QBo=r(fDe," \u2014 "),tz=n(fDe,"A",{href:!0});var ZSt=s(tz);WBo=r(ZSt,"OwlViTModel"),ZSt.forEach(t),UBo=r(fDe," (OWL-ViT model)"),fDe.forEach(t),HBo=i(x),G1=n(x,"LI",{});var gDe=s(G1);q1e=n(gDe,"STRONG",{});var KSt=s(q1e);JBo=r(KSt,"pegasus"),KSt.forEach(t),YBo=r(gDe," \u2014 "),az=n(gDe,"A",{href:!0});var eRt=s(az);ZBo=r(eRt,"PegasusModel"),eRt.forEach(t),KBo=r(gDe," (Pegasus model)"),gDe.forEach(t),eIo=i(x),O1=n(x,"LI",{});var hDe=s(O1);j1e=n(hDe,"STRONG",{});var oRt=s(j1e);oIo=r(oRt,"pegasus_x"),oRt.forEach(t),rIo=r(hDe," \u2014 "),nz=n(hDe,"A",{href:!0});var rRt=s(nz);tIo=r(rRt,"PegasusXModel"),rRt.forEach(t),aIo=r(hDe," (PEGASUS-X model)"),hDe.forEach(t),nIo=i(x),V1=n(x,"LI",{});var uDe=s(V1);D1e=n(uDe,"STRONG",{});var tRt=s(D1e);sIo=r(tRt,"perceiver"),tRt.forEach(t),lIo=r(uDe," \u2014 "),sz=n(uDe,"A",{href:!0});var aRt=s(sz);iIo=r(aRt,"PerceiverModel"),aRt.forEach(t),dIo=r(uDe," (Perceiver model)"),uDe.forEach(t),cIo=i(x),X1=n(x,"LI",{});var pDe=s(X1);G1e=n(pDe,"STRONG",{});var nRt=s(G1e);mIo=r(nRt,"plbart"),nRt.forEach(t),fIo=r(pDe," \u2014 "),lz=n(pDe,"A",{href:!0});var sRt=s(lz);gIo=r(sRt,"PLBartModel"),sRt.forEach(t),hIo=r(pDe," (PLBart model)"),pDe.forEach(t),uIo=i(x),z1=n(x,"LI",{});var _De=s(z1);O1e=n(_De,"STRONG",{});var lRt=s(O1e);pIo=r(lRt,"poolformer"),lRt.forEach(t),_Io=r(_De," \u2014 "),iz=n(_De,"A",{href:!0});var iRt=s(iz);bIo=r(iRt,"PoolFormerModel"),iRt.forEach(t),vIo=r(_De," (PoolFormer model)"),_De.forEach(t),FIo=i(x),Q1=n(x,"LI",{});var bDe=s(Q1);V1e=n(bDe,"STRONG",{});var dRt=s(V1e);TIo=r(dRt,"prophetnet"),dRt.forEach(t),MIo=r(bDe," \u2014 "),dz=n(bDe,"A",{href:!0});var cRt=s(dz);EIo=r(cRt,"ProphetNetModel"),cRt.forEach(t),CIo=r(bDe," (ProphetNet model)"),bDe.forEach(t),wIo=i(x),W1=n(x,"LI",{});var vDe=s(W1);X1e=n(vDe,"STRONG",{});var mRt=s(X1e);AIo=r(mRt,"qdqbert"),mRt.forEach(t),LIo=r(vDe," \u2014 "),cz=n(vDe,"A",{href:!0});var fRt=s(cz);yIo=r(fRt,"QDQBertModel"),fRt.forEach(t),xIo=r(vDe," (QDQBert model)"),vDe.forEach(t),$Io=i(x),U1=n(x,"LI",{});var FDe=s(U1);z1e=n(FDe,"STRONG",{});var gRt=s(z1e);kIo=r(gRt,"reformer"),gRt.forEach(t),SIo=r(FDe," \u2014 "),mz=n(FDe,"A",{href:!0});var hRt=s(mz);RIo=r(hRt,"ReformerModel"),hRt.forEach(t),PIo=r(FDe," (Reformer model)"),FDe.forEach(t),BIo=i(x),H1=n(x,"LI",{});var TDe=s(H1);Q1e=n(TDe,"STRONG",{});var uRt=s(Q1e);IIo=r(uRt,"regnet"),uRt.forEach(t),NIo=r(TDe," \u2014 "),fz=n(TDe,"A",{href:!0});var pRt=s(fz);qIo=r(pRt,"RegNetModel"),pRt.forEach(t),jIo=r(TDe," (RegNet model)"),TDe.forEach(t),DIo=i(x),J1=n(x,"LI",{});var MDe=s(J1);W1e=n(MDe,"STRONG",{});var _Rt=s(W1e);GIo=r(_Rt,"rembert"),_Rt.forEach(t),OIo=r(MDe," \u2014 "),gz=n(MDe,"A",{href:!0});var bRt=s(gz);VIo=r(bRt,"RemBertModel"),bRt.forEach(t),XIo=r(MDe," (RemBERT model)"),MDe.forEach(t),zIo=i(x),Y1=n(x,"LI",{});var EDe=s(Y1);U1e=n(EDe,"STRONG",{});var vRt=s(U1e);QIo=r(vRt,"resnet"),vRt.forEach(t),WIo=r(EDe," \u2014 "),hz=n(EDe,"A",{href:!0});var FRt=s(hz);UIo=r(FRt,"ResNetModel"),FRt.forEach(t),HIo=r(EDe," (ResNet model)"),EDe.forEach(t),JIo=i(x),Z1=n(x,"LI",{});var CDe=s(Z1);H1e=n(CDe,"STRONG",{});var TRt=s(H1e);YIo=r(TRt,"retribert"),TRt.forEach(t),ZIo=r(CDe," \u2014 "),uz=n(CDe,"A",{href:!0});var MRt=s(uz);KIo=r(MRt,"RetriBertModel"),MRt.forEach(t),eNo=r(CDe," (RetriBERT model)"),CDe.forEach(t),oNo=i(x),K1=n(x,"LI",{});var wDe=s(K1);J1e=n(wDe,"STRONG",{});var ERt=s(J1e);rNo=r(ERt,"roberta"),ERt.forEach(t),tNo=r(wDe," \u2014 "),pz=n(wDe,"A",{href:!0});var CRt=s(pz);aNo=r(CRt,"RobertaModel"),CRt.forEach(t),nNo=r(wDe," (RoBERTa model)"),wDe.forEach(t),sNo=i(x),e2=n(x,"LI",{});var ADe=s(e2);Y1e=n(ADe,"STRONG",{});var wRt=s(Y1e);lNo=r(wRt,"roformer"),wRt.forEach(t),iNo=r(ADe," \u2014 "),_z=n(ADe,"A",{href:!0});var ARt=s(_z);dNo=r(ARt,"RoFormerModel"),ARt.forEach(t),cNo=r(ADe," (RoFormer model)"),ADe.forEach(t),mNo=i(x),o2=n(x,"LI",{});var LDe=s(o2);Z1e=n(LDe,"STRONG",{});var LRt=s(Z1e);fNo=r(LRt,"segformer"),LRt.forEach(t),gNo=r(LDe," \u2014 "),bz=n(LDe,"A",{href:!0});var yRt=s(bz);hNo=r(yRt,"SegformerModel"),yRt.forEach(t),uNo=r(LDe," (SegFormer model)"),LDe.forEach(t),pNo=i(x),r2=n(x,"LI",{});var yDe=s(r2);K1e=n(yDe,"STRONG",{});var xRt=s(K1e);_No=r(xRt,"sew"),xRt.forEach(t),bNo=r(yDe," \u2014 "),vz=n(yDe,"A",{href:!0});var $Rt=s(vz);vNo=r($Rt,"SEWModel"),$Rt.forEach(t),FNo=r(yDe," (SEW model)"),yDe.forEach(t),TNo=i(x),t2=n(x,"LI",{});var xDe=s(t2);e2e=n(xDe,"STRONG",{});var kRt=s(e2e);MNo=r(kRt,"sew-d"),kRt.forEach(t),ENo=r(xDe," \u2014 "),Fz=n(xDe,"A",{href:!0});var SRt=s(Fz);CNo=r(SRt,"SEWDModel"),SRt.forEach(t),wNo=r(xDe," (SEW-D model)"),xDe.forEach(t),ANo=i(x),a2=n(x,"LI",{});var $De=s(a2);o2e=n($De,"STRONG",{});var RRt=s(o2e);LNo=r(RRt,"speech_to_text"),RRt.forEach(t),yNo=r($De," \u2014 "),Tz=n($De,"A",{href:!0});var PRt=s(Tz);xNo=r(PRt,"Speech2TextModel"),PRt.forEach(t),$No=r($De," (Speech2Text model)"),$De.forEach(t),kNo=i(x),n2=n(x,"LI",{});var kDe=s(n2);r2e=n(kDe,"STRONG",{});var BRt=s(r2e);SNo=r(BRt,"splinter"),BRt.forEach(t),RNo=r(kDe," \u2014 "),Mz=n(kDe,"A",{href:!0});var IRt=s(Mz);PNo=r(IRt,"SplinterModel"),IRt.forEach(t),BNo=r(kDe," (Splinter model)"),kDe.forEach(t),INo=i(x),s2=n(x,"LI",{});var SDe=s(s2);t2e=n(SDe,"STRONG",{});var NRt=s(t2e);NNo=r(NRt,"squeezebert"),NRt.forEach(t),qNo=r(SDe," \u2014 "),Ez=n(SDe,"A",{href:!0});var qRt=s(Ez);jNo=r(qRt,"SqueezeBertModel"),qRt.forEach(t),DNo=r(SDe," (SqueezeBERT model)"),SDe.forEach(t),GNo=i(x),l2=n(x,"LI",{});var RDe=s(l2);a2e=n(RDe,"STRONG",{});var jRt=s(a2e);ONo=r(jRt,"swin"),jRt.forEach(t),VNo=r(RDe," \u2014 "),Cz=n(RDe,"A",{href:!0});var DRt=s(Cz);XNo=r(DRt,"SwinModel"),DRt.forEach(t),zNo=r(RDe," (Swin Transformer model)"),RDe.forEach(t),QNo=i(x),i2=n(x,"LI",{});var PDe=s(i2);n2e=n(PDe,"STRONG",{});var GRt=s(n2e);WNo=r(GRt,"swinv2"),GRt.forEach(t),UNo=r(PDe," \u2014 "),wz=n(PDe,"A",{href:!0});var ORt=s(wz);HNo=r(ORt,"Swinv2Model"),ORt.forEach(t),JNo=r(PDe," (Swin Transformer V2 model)"),PDe.forEach(t),YNo=i(x),d2=n(x,"LI",{});var BDe=s(d2);s2e=n(BDe,"STRONG",{});var VRt=s(s2e);ZNo=r(VRt,"t5"),VRt.forEach(t),KNo=r(BDe," \u2014 "),Az=n(BDe,"A",{href:!0});var XRt=s(Az);eqo=r(XRt,"T5Model"),XRt.forEach(t),oqo=r(BDe," (T5 model)"),BDe.forEach(t),rqo=i(x),c2=n(x,"LI",{});var IDe=s(c2);l2e=n(IDe,"STRONG",{});var zRt=s(l2e);tqo=r(zRt,"tapas"),zRt.forEach(t),aqo=r(IDe," \u2014 "),Lz=n(IDe,"A",{href:!0});var QRt=s(Lz);nqo=r(QRt,"TapasModel"),QRt.forEach(t),sqo=r(IDe," (TAPAS model)"),IDe.forEach(t),lqo=i(x),m2=n(x,"LI",{});var NDe=s(m2);i2e=n(NDe,"STRONG",{});var WRt=s(i2e);iqo=r(WRt,"time_series_transformer"),WRt.forEach(t),dqo=r(NDe," \u2014 "),yz=n(NDe,"A",{href:!0});var URt=s(yz);cqo=r(URt,"TimeSeriesTransformerModel"),URt.forEach(t),mqo=r(NDe," (Time Series Transformer model)"),NDe.forEach(t),fqo=i(x),f2=n(x,"LI",{});var qDe=s(f2);d2e=n(qDe,"STRONG",{});var HRt=s(d2e);gqo=r(HRt,"trajectory_transformer"),HRt.forEach(t),hqo=r(qDe," \u2014 "),xz=n(qDe,"A",{href:!0});var JRt=s(xz);uqo=r(JRt,"TrajectoryTransformerModel"),JRt.forEach(t),pqo=r(qDe," (Trajectory Transformer model)"),qDe.forEach(t),_qo=i(x),g2=n(x,"LI",{});var jDe=s(g2);c2e=n(jDe,"STRONG",{});var YRt=s(c2e);bqo=r(YRt,"transfo-xl"),YRt.forEach(t),vqo=r(jDe," \u2014 "),$z=n(jDe,"A",{href:!0});var ZRt=s($z);Fqo=r(ZRt,"TransfoXLModel"),ZRt.forEach(t),Tqo=r(jDe," (Transformer-XL model)"),jDe.forEach(t),Mqo=i(x),h2=n(x,"LI",{});var DDe=s(h2);m2e=n(DDe,"STRONG",{});var KRt=s(m2e);Eqo=r(KRt,"unispeech"),KRt.forEach(t),Cqo=r(DDe," \u2014 "),kz=n(DDe,"A",{href:!0});var ePt=s(kz);wqo=r(ePt,"UniSpeechModel"),ePt.forEach(t),Aqo=r(DDe," (UniSpeech model)"),DDe.forEach(t),Lqo=i(x),u2=n(x,"LI",{});var GDe=s(u2);f2e=n(GDe,"STRONG",{});var oPt=s(f2e);yqo=r(oPt,"unispeech-sat"),oPt.forEach(t),xqo=r(GDe," \u2014 "),Sz=n(GDe,"A",{href:!0});var rPt=s(Sz);$qo=r(rPt,"UniSpeechSatModel"),rPt.forEach(t),kqo=r(GDe," (UniSpeechSat model)"),GDe.forEach(t),Sqo=i(x),p2=n(x,"LI",{});var ODe=s(p2);g2e=n(ODe,"STRONG",{});var tPt=s(g2e);Rqo=r(tPt,"van"),tPt.forEach(t),Pqo=r(ODe," \u2014 "),Rz=n(ODe,"A",{href:!0});var aPt=s(Rz);Bqo=r(aPt,"VanModel"),aPt.forEach(t),Iqo=r(ODe," (VAN model)"),ODe.forEach(t),Nqo=i(x),_2=n(x,"LI",{});var VDe=s(_2);h2e=n(VDe,"STRONG",{});var nPt=s(h2e);qqo=r(nPt,"videomae"),nPt.forEach(t),jqo=r(VDe," \u2014 "),Pz=n(VDe,"A",{href:!0});var sPt=s(Pz);Dqo=r(sPt,"VideoMAEModel"),sPt.forEach(t),Gqo=r(VDe," (VideoMAE model)"),VDe.forEach(t),Oqo=i(x),b2=n(x,"LI",{});var XDe=s(b2);u2e=n(XDe,"STRONG",{});var lPt=s(u2e);Vqo=r(lPt,"vilt"),lPt.forEach(t),Xqo=r(XDe," \u2014 "),Bz=n(XDe,"A",{href:!0});var iPt=s(Bz);zqo=r(iPt,"ViltModel"),iPt.forEach(t),Qqo=r(XDe," (ViLT model)"),XDe.forEach(t),Wqo=i(x),v2=n(x,"LI",{});var zDe=s(v2);p2e=n(zDe,"STRONG",{});var dPt=s(p2e);Uqo=r(dPt,"vision-text-dual-encoder"),dPt.forEach(t),Hqo=r(zDe," \u2014 "),Iz=n(zDe,"A",{href:!0});var cPt=s(Iz);Jqo=r(cPt,"VisionTextDualEncoderModel"),cPt.forEach(t),Yqo=r(zDe," (VisionTextDualEncoder model)"),zDe.forEach(t),Zqo=i(x),F2=n(x,"LI",{});var QDe=s(F2);_2e=n(QDe,"STRONG",{});var mPt=s(_2e);Kqo=r(mPt,"visual_bert"),mPt.forEach(t),ejo=r(QDe," \u2014 "),Nz=n(QDe,"A",{href:!0});var fPt=s(Nz);ojo=r(fPt,"VisualBertModel"),fPt.forEach(t),rjo=r(QDe," (VisualBERT model)"),QDe.forEach(t),tjo=i(x),T2=n(x,"LI",{});var WDe=s(T2);b2e=n(WDe,"STRONG",{});var gPt=s(b2e);ajo=r(gPt,"vit"),gPt.forEach(t),njo=r(WDe," \u2014 "),qz=n(WDe,"A",{href:!0});var hPt=s(qz);sjo=r(hPt,"ViTModel"),hPt.forEach(t),ljo=r(WDe," (ViT model)"),WDe.forEach(t),ijo=i(x),M2=n(x,"LI",{});var UDe=s(M2);v2e=n(UDe,"STRONG",{});var uPt=s(v2e);djo=r(uPt,"vit_mae"),uPt.forEach(t),cjo=r(UDe," \u2014 "),jz=n(UDe,"A",{href:!0});var pPt=s(jz);mjo=r(pPt,"ViTMAEModel"),pPt.forEach(t),fjo=r(UDe," (ViTMAE model)"),UDe.forEach(t),gjo=i(x),E2=n(x,"LI",{});var HDe=s(E2);F2e=n(HDe,"STRONG",{});var _Pt=s(F2e);hjo=r(_Pt,"vit_msn"),_Pt.forEach(t),ujo=r(HDe," \u2014 "),Dz=n(HDe,"A",{href:!0});var bPt=s(Dz);pjo=r(bPt,"ViTMSNModel"),bPt.forEach(t),_jo=r(HDe," (ViTMSN model)"),HDe.forEach(t),bjo=i(x),C2=n(x,"LI",{});var JDe=s(C2);T2e=n(JDe,"STRONG",{});var vPt=s(T2e);vjo=r(vPt,"wav2vec2"),vPt.forEach(t),Fjo=r(JDe," \u2014 "),Gz=n(JDe,"A",{href:!0});var FPt=s(Gz);Tjo=r(FPt,"Wav2Vec2Model"),FPt.forEach(t),Mjo=r(JDe," (Wav2Vec2 model)"),JDe.forEach(t),Ejo=i(x),w2=n(x,"LI",{});var YDe=s(w2);M2e=n(YDe,"STRONG",{});var TPt=s(M2e);Cjo=r(TPt,"wav2vec2-conformer"),TPt.forEach(t),wjo=r(YDe," \u2014 "),Oz=n(YDe,"A",{href:!0});var MPt=s(Oz);Ajo=r(MPt,"Wav2Vec2ConformerModel"),MPt.forEach(t),Ljo=r(YDe," (Wav2Vec2-Conformer model)"),YDe.forEach(t),yjo=i(x),A2=n(x,"LI",{});var ZDe=s(A2);E2e=n(ZDe,"STRONG",{});var EPt=s(E2e);xjo=r(EPt,"wavlm"),EPt.forEach(t),$jo=r(ZDe," \u2014 "),Vz=n(ZDe,"A",{href:!0});var CPt=s(Vz);kjo=r(CPt,"WavLMModel"),CPt.forEach(t),Sjo=r(ZDe," (WavLM model)"),ZDe.forEach(t),Rjo=i(x),L2=n(x,"LI",{});var KDe=s(L2);C2e=n(KDe,"STRONG",{});var wPt=s(C2e);Pjo=r(wPt,"whisper"),wPt.forEach(t),Bjo=r(KDe," \u2014 "),Xz=n(KDe,"A",{href:!0});var APt=s(Xz);Ijo=r(APt,"WhisperModel"),APt.forEach(t),Njo=r(KDe," (Whisper model)"),KDe.forEach(t),qjo=i(x),y2=n(x,"LI",{});var eGe=s(y2);w2e=n(eGe,"STRONG",{});var LPt=s(w2e);jjo=r(LPt,"xclip"),LPt.forEach(t),Djo=r(eGe," \u2014 "),zz=n(eGe,"A",{href:!0});var yPt=s(zz);Gjo=r(yPt,"XCLIPModel"),yPt.forEach(t),Ojo=r(eGe," (X-CLIP model)"),eGe.forEach(t),Vjo=i(x),x2=n(x,"LI",{});var oGe=s(x2);A2e=n(oGe,"STRONG",{});var xPt=s(A2e);Xjo=r(xPt,"xglm"),xPt.forEach(t),zjo=r(oGe," \u2014 "),Qz=n(oGe,"A",{href:!0});var $Pt=s(Qz);Qjo=r($Pt,"XGLMModel"),$Pt.forEach(t),Wjo=r(oGe," (XGLM model)"),oGe.forEach(t),Ujo=i(x),$2=n(x,"LI",{});var rGe=s($2);L2e=n(rGe,"STRONG",{});var kPt=s(L2e);Hjo=r(kPt,"xlm"),kPt.forEach(t),Jjo=r(rGe," \u2014 "),Wz=n(rGe,"A",{href:!0});var SPt=s(Wz);Yjo=r(SPt,"XLMModel"),SPt.forEach(t),Zjo=r(rGe," (XLM model)"),rGe.forEach(t),Kjo=i(x),k2=n(x,"LI",{});var tGe=s(k2);y2e=n(tGe,"STRONG",{});var RPt=s(y2e);eDo=r(RPt,"xlm-prophetnet"),RPt.forEach(t),oDo=r(tGe," \u2014 "),Uz=n(tGe,"A",{href:!0});var PPt=s(Uz);rDo=r(PPt,"XLMProphetNetModel"),PPt.forEach(t),tDo=r(tGe," (XLM-ProphetNet model)"),tGe.forEach(t),aDo=i(x),S2=n(x,"LI",{});var aGe=s(S2);x2e=n(aGe,"STRONG",{});var BPt=s(x2e);nDo=r(BPt,"xlm-roberta"),BPt.forEach(t),sDo=r(aGe," \u2014 "),Hz=n(aGe,"A",{href:!0});var IPt=s(Hz);lDo=r(IPt,"XLMRobertaModel"),IPt.forEach(t),iDo=r(aGe," (XLM-RoBERTa model)"),aGe.forEach(t),dDo=i(x),R2=n(x,"LI",{});var nGe=s(R2);$2e=n(nGe,"STRONG",{});var NPt=s($2e);cDo=r(NPt,"xlm-roberta-xl"),NPt.forEach(t),mDo=r(nGe," \u2014 "),Jz=n(nGe,"A",{href:!0});var qPt=s(Jz);fDo=r(qPt,"XLMRobertaXLModel"),qPt.forEach(t),gDo=r(nGe," (XLM-RoBERTa-XL model)"),nGe.forEach(t),hDo=i(x),P2=n(x,"LI",{});var sGe=s(P2);k2e=n(sGe,"STRONG",{});var jPt=s(k2e);uDo=r(jPt,"xlnet"),jPt.forEach(t),pDo=r(sGe," \u2014 "),Yz=n(sGe,"A",{href:!0});var DPt=s(Yz);_Do=r(DPt,"XLNetModel"),DPt.forEach(t),bDo=r(sGe," (XLNet model)"),sGe.forEach(t),vDo=i(x),B2=n(x,"LI",{});var lGe=s(B2);S2e=n(lGe,"STRONG",{});var GPt=s(S2e);FDo=r(GPt,"yolos"),GPt.forEach(t),TDo=r(lGe," \u2014 "),Zz=n(lGe,"A",{href:!0});var OPt=s(Zz);MDo=r(OPt,"YolosModel"),OPt.forEach(t),EDo=r(lGe," (YOLOS model)"),lGe.forEach(t),CDo=i(x),I2=n(x,"LI",{});var iGe=s(I2);R2e=n(iGe,"STRONG",{});var VPt=s(R2e);wDo=r(VPt,"yoso"),VPt.forEach(t),ADo=r(iGe," \u2014 "),Kz=n(iGe,"A",{href:!0});var XPt=s(Kz);LDo=r(XPt,"YosoModel"),XPt.forEach(t),yDo=r(iGe," (YOSO model)"),iGe.forEach(t),x.forEach(t),xDo=i(Ea),N2=n(Ea,"P",{});var dGe=s(N2);$Do=r(dGe,"The model is set in evaluation mode by default using "),P2e=n(dGe,"CODE",{});var zPt=s(P2e);kDo=r(zPt,"model.eval()"),zPt.forEach(t),SDo=r(dGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(dGe,"CODE",{});var QPt=s(B2e);RDo=r(QPt,"model.train()"),QPt.forEach(t),dGe.forEach(t),PDo=i(Ea),T(q2.$$.fragment,Ea),Ea.forEach(t),kl.forEach(t),koo=i(m),Ad=n(m,"H2",{class:!0});var Wto=s(Ad);j2=n(Wto,"A",{id:!0,class:!0,href:!0});var WPt=s(j2);I2e=n(WPt,"SPAN",{});var UPt=s(I2e);T(n$.$$.fragment,UPt),UPt.forEach(t),WPt.forEach(t),BDo=i(Wto),N2e=n(Wto,"SPAN",{});var HPt=s(N2e);IDo=r(HPt,"AutoModelForPreTraining"),HPt.forEach(t),Wto.forEach(t),Soo=i(m),Io=n(m,"DIV",{class:!0});var Sl=s(Io);T(s$.$$.fragment,Sl),NDo=i(Sl),Ld=n(Sl,"P",{});var Wie=s(Ld);qDo=r(Wie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eQ=n(Wie,"A",{href:!0});var JPt=s(eQ);jDo=r(JPt,"from_pretrained()"),JPt.forEach(t),DDo=r(Wie," class method or the "),oQ=n(Wie,"A",{href:!0});var YPt=s(oQ);GDo=r(YPt,"from_config()"),YPt.forEach(t),ODo=r(Wie,` class
method.`),Wie.forEach(t),VDo=i(Sl),l$=n(Sl,"P",{});var Uto=s(l$);XDo=r(Uto,"This class cannot be instantiated directly using "),q2e=n(Uto,"CODE",{});var ZPt=s(q2e);zDo=r(ZPt,"__init__()"),ZPt.forEach(t),QDo=r(Uto," (throws an error)."),Uto.forEach(t),WDo=i(Sl),Ft=n(Sl,"DIV",{class:!0});var My=s(Ft);T(i$.$$.fragment,My),UDo=i(My),j2e=n(My,"P",{});var KPt=s(j2e);HDo=r(KPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KPt.forEach(t),JDo=i(My),yd=n(My,"P",{});var Uie=s(yd);YDo=r(Uie,`Note:
Loading a model from its configuration file does `),D2e=n(Uie,"STRONG",{});var eBt=s(D2e);ZDo=r(eBt,"not"),eBt.forEach(t),KDo=r(Uie,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(Uie,"A",{href:!0});var oBt=s(rQ);eGo=r(oBt,"from_pretrained()"),oBt.forEach(t),oGo=r(Uie," to load the model weights."),Uie.forEach(t),rGo=i(My),T(D2.$$.fragment,My),My.forEach(t),tGo=i(Sl),eo=n(Sl,"DIV",{class:!0});var Ca=s(eo);T(d$.$$.fragment,Ca),aGo=i(Ca),G2e=n(Ca,"P",{});var rBt=s(G2e);nGo=r(rBt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rBt.forEach(t),sGo=i(Ca),on=n(Ca,"P",{});var Ey=s(on);lGo=r(Ey,"The model class to instantiate is selected based on the "),O2e=n(Ey,"CODE",{});var tBt=s(O2e);iGo=r(tBt,"model_type"),tBt.forEach(t),dGo=r(Ey,` property of the config object (either
passed as an argument or loaded from `),V2e=n(Ey,"CODE",{});var aBt=s(V2e);cGo=r(aBt,"pretrained_model_name_or_path"),aBt.forEach(t),mGo=r(Ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(Ey,"CODE",{});var nBt=s(X2e);fGo=r(nBt,"pretrained_model_name_or_path"),nBt.forEach(t),gGo=r(Ey,":"),Ey.forEach(t),hGo=i(Ca),G=n(Ca,"UL",{});var V=s(G);G2=n(V,"LI",{});var cGe=s(G2);z2e=n(cGe,"STRONG",{});var sBt=s(z2e);uGo=r(sBt,"albert"),sBt.forEach(t),pGo=r(cGe," \u2014 "),tQ=n(cGe,"A",{href:!0});var lBt=s(tQ);_Go=r(lBt,"AlbertForPreTraining"),lBt.forEach(t),bGo=r(cGe," (ALBERT model)"),cGe.forEach(t),vGo=i(V),O2=n(V,"LI",{});var mGe=s(O2);Q2e=n(mGe,"STRONG",{});var iBt=s(Q2e);FGo=r(iBt,"bart"),iBt.forEach(t),TGo=r(mGe," \u2014 "),aQ=n(mGe,"A",{href:!0});var dBt=s(aQ);MGo=r(dBt,"BartForConditionalGeneration"),dBt.forEach(t),EGo=r(mGe," (BART model)"),mGe.forEach(t),CGo=i(V),V2=n(V,"LI",{});var fGe=s(V2);W2e=n(fGe,"STRONG",{});var cBt=s(W2e);wGo=r(cBt,"bert"),cBt.forEach(t),AGo=r(fGe," \u2014 "),nQ=n(fGe,"A",{href:!0});var mBt=s(nQ);LGo=r(mBt,"BertForPreTraining"),mBt.forEach(t),yGo=r(fGe," (BERT model)"),fGe.forEach(t),xGo=i(V),X2=n(V,"LI",{});var gGe=s(X2);U2e=n(gGe,"STRONG",{});var fBt=s(U2e);$Go=r(fBt,"big_bird"),fBt.forEach(t),kGo=r(gGe," \u2014 "),sQ=n(gGe,"A",{href:!0});var gBt=s(sQ);SGo=r(gBt,"BigBirdForPreTraining"),gBt.forEach(t),RGo=r(gGe," (BigBird model)"),gGe.forEach(t),PGo=i(V),z2=n(V,"LI",{});var hGe=s(z2);H2e=n(hGe,"STRONG",{});var hBt=s(H2e);BGo=r(hBt,"bloom"),hBt.forEach(t),IGo=r(hGe," \u2014 "),lQ=n(hGe,"A",{href:!0});var uBt=s(lQ);NGo=r(uBt,"BloomForCausalLM"),uBt.forEach(t),qGo=r(hGe," (BLOOM model)"),hGe.forEach(t),jGo=i(V),Q2=n(V,"LI",{});var uGe=s(Q2);J2e=n(uGe,"STRONG",{});var pBt=s(J2e);DGo=r(pBt,"camembert"),pBt.forEach(t),GGo=r(uGe," \u2014 "),iQ=n(uGe,"A",{href:!0});var _Bt=s(iQ);OGo=r(_Bt,"CamembertForMaskedLM"),_Bt.forEach(t),VGo=r(uGe," (CamemBERT model)"),uGe.forEach(t),XGo=i(V),W2=n(V,"LI",{});var pGe=s(W2);Y2e=n(pGe,"STRONG",{});var bBt=s(Y2e);zGo=r(bBt,"ctrl"),bBt.forEach(t),QGo=r(pGe," \u2014 "),dQ=n(pGe,"A",{href:!0});var vBt=s(dQ);WGo=r(vBt,"CTRLLMHeadModel"),vBt.forEach(t),UGo=r(pGe," (CTRL model)"),pGe.forEach(t),HGo=i(V),U2=n(V,"LI",{});var _Ge=s(U2);Z2e=n(_Ge,"STRONG",{});var FBt=s(Z2e);JGo=r(FBt,"data2vec-text"),FBt.forEach(t),YGo=r(_Ge," \u2014 "),cQ=n(_Ge,"A",{href:!0});var TBt=s(cQ);ZGo=r(TBt,"Data2VecTextForMaskedLM"),TBt.forEach(t),KGo=r(_Ge," (Data2VecText model)"),_Ge.forEach(t),eOo=i(V),H2=n(V,"LI",{});var bGe=s(H2);K2e=n(bGe,"STRONG",{});var MBt=s(K2e);oOo=r(MBt,"deberta"),MBt.forEach(t),rOo=r(bGe," \u2014 "),mQ=n(bGe,"A",{href:!0});var EBt=s(mQ);tOo=r(EBt,"DebertaForMaskedLM"),EBt.forEach(t),aOo=r(bGe," (DeBERTa model)"),bGe.forEach(t),nOo=i(V),J2=n(V,"LI",{});var vGe=s(J2);ebe=n(vGe,"STRONG",{});var CBt=s(ebe);sOo=r(CBt,"deberta-v2"),CBt.forEach(t),lOo=r(vGe," \u2014 "),fQ=n(vGe,"A",{href:!0});var wBt=s(fQ);iOo=r(wBt,"DebertaV2ForMaskedLM"),wBt.forEach(t),dOo=r(vGe," (DeBERTa-v2 model)"),vGe.forEach(t),cOo=i(V),Y2=n(V,"LI",{});var FGe=s(Y2);obe=n(FGe,"STRONG",{});var ABt=s(obe);mOo=r(ABt,"distilbert"),ABt.forEach(t),fOo=r(FGe," \u2014 "),gQ=n(FGe,"A",{href:!0});var LBt=s(gQ);gOo=r(LBt,"DistilBertForMaskedLM"),LBt.forEach(t),hOo=r(FGe," (DistilBERT model)"),FGe.forEach(t),uOo=i(V),Z2=n(V,"LI",{});var TGe=s(Z2);rbe=n(TGe,"STRONG",{});var yBt=s(rbe);pOo=r(yBt,"electra"),yBt.forEach(t),_Oo=r(TGe," \u2014 "),hQ=n(TGe,"A",{href:!0});var xBt=s(hQ);bOo=r(xBt,"ElectraForPreTraining"),xBt.forEach(t),vOo=r(TGe," (ELECTRA model)"),TGe.forEach(t),FOo=i(V),K2=n(V,"LI",{});var MGe=s(K2);tbe=n(MGe,"STRONG",{});var $Bt=s(tbe);TOo=r($Bt,"ernie"),$Bt.forEach(t),MOo=r(MGe," \u2014 "),uQ=n(MGe,"A",{href:!0});var kBt=s(uQ);EOo=r(kBt,"ErnieForPreTraining"),kBt.forEach(t),COo=r(MGe," (ERNIE model)"),MGe.forEach(t),wOo=i(V),eb=n(V,"LI",{});var EGe=s(eb);abe=n(EGe,"STRONG",{});var SBt=s(abe);AOo=r(SBt,"flaubert"),SBt.forEach(t),LOo=r(EGe," \u2014 "),pQ=n(EGe,"A",{href:!0});var RBt=s(pQ);yOo=r(RBt,"FlaubertWithLMHeadModel"),RBt.forEach(t),xOo=r(EGe," (FlauBERT model)"),EGe.forEach(t),$Oo=i(V),ob=n(V,"LI",{});var CGe=s(ob);nbe=n(CGe,"STRONG",{});var PBt=s(nbe);kOo=r(PBt,"flava"),PBt.forEach(t),SOo=r(CGe," \u2014 "),_Q=n(CGe,"A",{href:!0});var BBt=s(_Q);ROo=r(BBt,"FlavaForPreTraining"),BBt.forEach(t),POo=r(CGe," (FLAVA model)"),CGe.forEach(t),BOo=i(V),rb=n(V,"LI",{});var wGe=s(rb);sbe=n(wGe,"STRONG",{});var IBt=s(sbe);IOo=r(IBt,"fnet"),IBt.forEach(t),NOo=r(wGe," \u2014 "),bQ=n(wGe,"A",{href:!0});var NBt=s(bQ);qOo=r(NBt,"FNetForPreTraining"),NBt.forEach(t),jOo=r(wGe," (FNet model)"),wGe.forEach(t),DOo=i(V),tb=n(V,"LI",{});var AGe=s(tb);lbe=n(AGe,"STRONG",{});var qBt=s(lbe);GOo=r(qBt,"fsmt"),qBt.forEach(t),OOo=r(AGe," \u2014 "),vQ=n(AGe,"A",{href:!0});var jBt=s(vQ);VOo=r(jBt,"FSMTForConditionalGeneration"),jBt.forEach(t),XOo=r(AGe," (FairSeq Machine-Translation model)"),AGe.forEach(t),zOo=i(V),ab=n(V,"LI",{});var LGe=s(ab);ibe=n(LGe,"STRONG",{});var DBt=s(ibe);QOo=r(DBt,"funnel"),DBt.forEach(t),WOo=r(LGe," \u2014 "),FQ=n(LGe,"A",{href:!0});var GBt=s(FQ);UOo=r(GBt,"FunnelForPreTraining"),GBt.forEach(t),HOo=r(LGe," (Funnel Transformer model)"),LGe.forEach(t),JOo=i(V),nb=n(V,"LI",{});var yGe=s(nb);dbe=n(yGe,"STRONG",{});var OBt=s(dbe);YOo=r(OBt,"gpt2"),OBt.forEach(t),ZOo=r(yGe," \u2014 "),TQ=n(yGe,"A",{href:!0});var VBt=s(TQ);KOo=r(VBt,"GPT2LMHeadModel"),VBt.forEach(t),eVo=r(yGe," (OpenAI GPT-2 model)"),yGe.forEach(t),oVo=i(V),sb=n(V,"LI",{});var xGe=s(sb);cbe=n(xGe,"STRONG",{});var XBt=s(cbe);rVo=r(XBt,"ibert"),XBt.forEach(t),tVo=r(xGe," \u2014 "),MQ=n(xGe,"A",{href:!0});var zBt=s(MQ);aVo=r(zBt,"IBertForMaskedLM"),zBt.forEach(t),nVo=r(xGe," (I-BERT model)"),xGe.forEach(t),sVo=i(V),lb=n(V,"LI",{});var $Ge=s(lb);mbe=n($Ge,"STRONG",{});var QBt=s(mbe);lVo=r(QBt,"layoutlm"),QBt.forEach(t),iVo=r($Ge," \u2014 "),EQ=n($Ge,"A",{href:!0});var WBt=s(EQ);dVo=r(WBt,"LayoutLMForMaskedLM"),WBt.forEach(t),cVo=r($Ge," (LayoutLM model)"),$Ge.forEach(t),mVo=i(V),ib=n(V,"LI",{});var kGe=s(ib);fbe=n(kGe,"STRONG",{});var UBt=s(fbe);fVo=r(UBt,"longformer"),UBt.forEach(t),gVo=r(kGe," \u2014 "),CQ=n(kGe,"A",{href:!0});var HBt=s(CQ);hVo=r(HBt,"LongformerForMaskedLM"),HBt.forEach(t),uVo=r(kGe," (Longformer model)"),kGe.forEach(t),pVo=i(V),db=n(V,"LI",{});var SGe=s(db);gbe=n(SGe,"STRONG",{});var JBt=s(gbe);_Vo=r(JBt,"luke"),JBt.forEach(t),bVo=r(SGe," \u2014 "),wQ=n(SGe,"A",{href:!0});var YBt=s(wQ);vVo=r(YBt,"LukeForMaskedLM"),YBt.forEach(t),FVo=r(SGe," (LUKE model)"),SGe.forEach(t),TVo=i(V),cb=n(V,"LI",{});var RGe=s(cb);hbe=n(RGe,"STRONG",{});var ZBt=s(hbe);MVo=r(ZBt,"lxmert"),ZBt.forEach(t),EVo=r(RGe," \u2014 "),AQ=n(RGe,"A",{href:!0});var KBt=s(AQ);CVo=r(KBt,"LxmertForPreTraining"),KBt.forEach(t),wVo=r(RGe," (LXMERT model)"),RGe.forEach(t),AVo=i(V),mb=n(V,"LI",{});var PGe=s(mb);ube=n(PGe,"STRONG",{});var eIt=s(ube);LVo=r(eIt,"megatron-bert"),eIt.forEach(t),yVo=r(PGe," \u2014 "),LQ=n(PGe,"A",{href:!0});var oIt=s(LQ);xVo=r(oIt,"MegatronBertForPreTraining"),oIt.forEach(t),$Vo=r(PGe," (Megatron-BERT model)"),PGe.forEach(t),kVo=i(V),fb=n(V,"LI",{});var BGe=s(fb);pbe=n(BGe,"STRONG",{});var rIt=s(pbe);SVo=r(rIt,"mobilebert"),rIt.forEach(t),RVo=r(BGe," \u2014 "),yQ=n(BGe,"A",{href:!0});var tIt=s(yQ);PVo=r(tIt,"MobileBertForPreTraining"),tIt.forEach(t),BVo=r(BGe," (MobileBERT model)"),BGe.forEach(t),IVo=i(V),gb=n(V,"LI",{});var IGe=s(gb);_be=n(IGe,"STRONG",{});var aIt=s(_be);NVo=r(aIt,"mpnet"),aIt.forEach(t),qVo=r(IGe," \u2014 "),xQ=n(IGe,"A",{href:!0});var nIt=s(xQ);jVo=r(nIt,"MPNetForMaskedLM"),nIt.forEach(t),DVo=r(IGe," (MPNet model)"),IGe.forEach(t),GVo=i(V),hb=n(V,"LI",{});var NGe=s(hb);bbe=n(NGe,"STRONG",{});var sIt=s(bbe);OVo=r(sIt,"mvp"),sIt.forEach(t),VVo=r(NGe," \u2014 "),$Q=n(NGe,"A",{href:!0});var lIt=s($Q);XVo=r(lIt,"MvpForConditionalGeneration"),lIt.forEach(t),zVo=r(NGe," (MVP model)"),NGe.forEach(t),QVo=i(V),ub=n(V,"LI",{});var qGe=s(ub);vbe=n(qGe,"STRONG",{});var iIt=s(vbe);WVo=r(iIt,"nezha"),iIt.forEach(t),UVo=r(qGe," \u2014 "),kQ=n(qGe,"A",{href:!0});var dIt=s(kQ);HVo=r(dIt,"NezhaForPreTraining"),dIt.forEach(t),JVo=r(qGe," (Nezha model)"),qGe.forEach(t),YVo=i(V),pb=n(V,"LI",{});var jGe=s(pb);Fbe=n(jGe,"STRONG",{});var cIt=s(Fbe);ZVo=r(cIt,"openai-gpt"),cIt.forEach(t),KVo=r(jGe," \u2014 "),SQ=n(jGe,"A",{href:!0});var mIt=s(SQ);eXo=r(mIt,"OpenAIGPTLMHeadModel"),mIt.forEach(t),oXo=r(jGe," (OpenAI GPT model)"),jGe.forEach(t),rXo=i(V),_b=n(V,"LI",{});var DGe=s(_b);Tbe=n(DGe,"STRONG",{});var fIt=s(Tbe);tXo=r(fIt,"retribert"),fIt.forEach(t),aXo=r(DGe," \u2014 "),RQ=n(DGe,"A",{href:!0});var gIt=s(RQ);nXo=r(gIt,"RetriBertModel"),gIt.forEach(t),sXo=r(DGe," (RetriBERT model)"),DGe.forEach(t),lXo=i(V),bb=n(V,"LI",{});var GGe=s(bb);Mbe=n(GGe,"STRONG",{});var hIt=s(Mbe);iXo=r(hIt,"roberta"),hIt.forEach(t),dXo=r(GGe," \u2014 "),PQ=n(GGe,"A",{href:!0});var uIt=s(PQ);cXo=r(uIt,"RobertaForMaskedLM"),uIt.forEach(t),mXo=r(GGe," (RoBERTa model)"),GGe.forEach(t),fXo=i(V),vb=n(V,"LI",{});var OGe=s(vb);Ebe=n(OGe,"STRONG",{});var pIt=s(Ebe);gXo=r(pIt,"splinter"),pIt.forEach(t),hXo=r(OGe," \u2014 "),BQ=n(OGe,"A",{href:!0});var _It=s(BQ);uXo=r(_It,"SplinterForPreTraining"),_It.forEach(t),pXo=r(OGe," (Splinter model)"),OGe.forEach(t),_Xo=i(V),Fb=n(V,"LI",{});var VGe=s(Fb);Cbe=n(VGe,"STRONG",{});var bIt=s(Cbe);bXo=r(bIt,"squeezebert"),bIt.forEach(t),vXo=r(VGe," \u2014 "),IQ=n(VGe,"A",{href:!0});var vIt=s(IQ);FXo=r(vIt,"SqueezeBertForMaskedLM"),vIt.forEach(t),TXo=r(VGe," (SqueezeBERT model)"),VGe.forEach(t),MXo=i(V),Tb=n(V,"LI",{});var XGe=s(Tb);wbe=n(XGe,"STRONG",{});var FIt=s(wbe);EXo=r(FIt,"t5"),FIt.forEach(t),CXo=r(XGe," \u2014 "),NQ=n(XGe,"A",{href:!0});var TIt=s(NQ);wXo=r(TIt,"T5ForConditionalGeneration"),TIt.forEach(t),AXo=r(XGe," (T5 model)"),XGe.forEach(t),LXo=i(V),Mb=n(V,"LI",{});var zGe=s(Mb);Abe=n(zGe,"STRONG",{});var MIt=s(Abe);yXo=r(MIt,"tapas"),MIt.forEach(t),xXo=r(zGe," \u2014 "),qQ=n(zGe,"A",{href:!0});var EIt=s(qQ);$Xo=r(EIt,"TapasForMaskedLM"),EIt.forEach(t),kXo=r(zGe," (TAPAS model)"),zGe.forEach(t),SXo=i(V),Eb=n(V,"LI",{});var QGe=s(Eb);Lbe=n(QGe,"STRONG",{});var CIt=s(Lbe);RXo=r(CIt,"transfo-xl"),CIt.forEach(t),PXo=r(QGe," \u2014 "),jQ=n(QGe,"A",{href:!0});var wIt=s(jQ);BXo=r(wIt,"TransfoXLLMHeadModel"),wIt.forEach(t),IXo=r(QGe," (Transformer-XL model)"),QGe.forEach(t),NXo=i(V),Cb=n(V,"LI",{});var WGe=s(Cb);ybe=n(WGe,"STRONG",{});var AIt=s(ybe);qXo=r(AIt,"unispeech"),AIt.forEach(t),jXo=r(WGe," \u2014 "),DQ=n(WGe,"A",{href:!0});var LIt=s(DQ);DXo=r(LIt,"UniSpeechForPreTraining"),LIt.forEach(t),GXo=r(WGe," (UniSpeech model)"),WGe.forEach(t),OXo=i(V),wb=n(V,"LI",{});var UGe=s(wb);xbe=n(UGe,"STRONG",{});var yIt=s(xbe);VXo=r(yIt,"unispeech-sat"),yIt.forEach(t),XXo=r(UGe," \u2014 "),GQ=n(UGe,"A",{href:!0});var xIt=s(GQ);zXo=r(xIt,"UniSpeechSatForPreTraining"),xIt.forEach(t),QXo=r(UGe," (UniSpeechSat model)"),UGe.forEach(t),WXo=i(V),Ab=n(V,"LI",{});var HGe=s(Ab);$be=n(HGe,"STRONG",{});var $It=s($be);UXo=r($It,"videomae"),$It.forEach(t),HXo=r(HGe," \u2014 "),OQ=n(HGe,"A",{href:!0});var kIt=s(OQ);JXo=r(kIt,"VideoMAEForPreTraining"),kIt.forEach(t),YXo=r(HGe," (VideoMAE model)"),HGe.forEach(t),ZXo=i(V),Lb=n(V,"LI",{});var JGe=s(Lb);kbe=n(JGe,"STRONG",{});var SIt=s(kbe);KXo=r(SIt,"visual_bert"),SIt.forEach(t),ezo=r(JGe," \u2014 "),VQ=n(JGe,"A",{href:!0});var RIt=s(VQ);ozo=r(RIt,"VisualBertForPreTraining"),RIt.forEach(t),rzo=r(JGe," (VisualBERT model)"),JGe.forEach(t),tzo=i(V),yb=n(V,"LI",{});var YGe=s(yb);Sbe=n(YGe,"STRONG",{});var PIt=s(Sbe);azo=r(PIt,"vit_mae"),PIt.forEach(t),nzo=r(YGe," \u2014 "),XQ=n(YGe,"A",{href:!0});var BIt=s(XQ);szo=r(BIt,"ViTMAEForPreTraining"),BIt.forEach(t),lzo=r(YGe," (ViTMAE model)"),YGe.forEach(t),izo=i(V),xb=n(V,"LI",{});var ZGe=s(xb);Rbe=n(ZGe,"STRONG",{});var IIt=s(Rbe);dzo=r(IIt,"wav2vec2"),IIt.forEach(t),czo=r(ZGe," \u2014 "),zQ=n(ZGe,"A",{href:!0});var NIt=s(zQ);mzo=r(NIt,"Wav2Vec2ForPreTraining"),NIt.forEach(t),fzo=r(ZGe," (Wav2Vec2 model)"),ZGe.forEach(t),gzo=i(V),$b=n(V,"LI",{});var KGe=s($b);Pbe=n(KGe,"STRONG",{});var qIt=s(Pbe);hzo=r(qIt,"wav2vec2-conformer"),qIt.forEach(t),uzo=r(KGe," \u2014 "),QQ=n(KGe,"A",{href:!0});var jIt=s(QQ);pzo=r(jIt,"Wav2Vec2ConformerForPreTraining"),jIt.forEach(t),_zo=r(KGe," (Wav2Vec2-Conformer model)"),KGe.forEach(t),bzo=i(V),kb=n(V,"LI",{});var eOe=s(kb);Bbe=n(eOe,"STRONG",{});var DIt=s(Bbe);vzo=r(DIt,"xlm"),DIt.forEach(t),Fzo=r(eOe," \u2014 "),WQ=n(eOe,"A",{href:!0});var GIt=s(WQ);Tzo=r(GIt,"XLMWithLMHeadModel"),GIt.forEach(t),Mzo=r(eOe," (XLM model)"),eOe.forEach(t),Ezo=i(V),Sb=n(V,"LI",{});var oOe=s(Sb);Ibe=n(oOe,"STRONG",{});var OIt=s(Ibe);Czo=r(OIt,"xlm-roberta"),OIt.forEach(t),wzo=r(oOe," \u2014 "),UQ=n(oOe,"A",{href:!0});var VIt=s(UQ);Azo=r(VIt,"XLMRobertaForMaskedLM"),VIt.forEach(t),Lzo=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),yzo=i(V),Rb=n(V,"LI",{});var rOe=s(Rb);Nbe=n(rOe,"STRONG",{});var XIt=s(Nbe);xzo=r(XIt,"xlm-roberta-xl"),XIt.forEach(t),$zo=r(rOe," \u2014 "),HQ=n(rOe,"A",{href:!0});var zIt=s(HQ);kzo=r(zIt,"XLMRobertaXLForMaskedLM"),zIt.forEach(t),Szo=r(rOe," (XLM-RoBERTa-XL model)"),rOe.forEach(t),Rzo=i(V),Pb=n(V,"LI",{});var tOe=s(Pb);qbe=n(tOe,"STRONG",{});var QIt=s(qbe);Pzo=r(QIt,"xlnet"),QIt.forEach(t),Bzo=r(tOe," \u2014 "),JQ=n(tOe,"A",{href:!0});var WIt=s(JQ);Izo=r(WIt,"XLNetLMHeadModel"),WIt.forEach(t),Nzo=r(tOe," (XLNet model)"),tOe.forEach(t),V.forEach(t),qzo=i(Ca),Bb=n(Ca,"P",{});var aOe=s(Bb);jzo=r(aOe,"The model is set in evaluation mode by default using "),jbe=n(aOe,"CODE",{});var UIt=s(jbe);Dzo=r(UIt,"model.eval()"),UIt.forEach(t),Gzo=r(aOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(aOe,"CODE",{});var HIt=s(Dbe);Ozo=r(HIt,"model.train()"),HIt.forEach(t),aOe.forEach(t),Vzo=i(Ca),T(Ib.$$.fragment,Ca),Ca.forEach(t),Sl.forEach(t),Roo=i(m),xd=n(m,"H2",{class:!0});var Hto=s(xd);Nb=n(Hto,"A",{id:!0,class:!0,href:!0});var JIt=s(Nb);Gbe=n(JIt,"SPAN",{});var YIt=s(Gbe);T(c$.$$.fragment,YIt),YIt.forEach(t),JIt.forEach(t),Xzo=i(Hto),Obe=n(Hto,"SPAN",{});var ZIt=s(Obe);zzo=r(ZIt,"AutoModelForCausalLM"),ZIt.forEach(t),Hto.forEach(t),Poo=i(m),No=n(m,"DIV",{class:!0});var Rl=s(No);T(m$.$$.fragment,Rl),Qzo=i(Rl),$d=n(Rl,"P",{});var Hie=s($d);Wzo=r(Hie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=n(Hie,"A",{href:!0});var KIt=s(YQ);Uzo=r(KIt,"from_pretrained()"),KIt.forEach(t),Hzo=r(Hie," class method or the "),ZQ=n(Hie,"A",{href:!0});var eNt=s(ZQ);Jzo=r(eNt,"from_config()"),eNt.forEach(t),Yzo=r(Hie,` class
method.`),Hie.forEach(t),Zzo=i(Rl),f$=n(Rl,"P",{});var Jto=s(f$);Kzo=r(Jto,"This class cannot be instantiated directly using "),Vbe=n(Jto,"CODE",{});var oNt=s(Vbe);eQo=r(oNt,"__init__()"),oNt.forEach(t),oQo=r(Jto," (throws an error)."),Jto.forEach(t),rQo=i(Rl),Tt=n(Rl,"DIV",{class:!0});var Cy=s(Tt);T(g$.$$.fragment,Cy),tQo=i(Cy),Xbe=n(Cy,"P",{});var rNt=s(Xbe);aQo=r(rNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rNt.forEach(t),nQo=i(Cy),kd=n(Cy,"P",{});var Jie=s(kd);sQo=r(Jie,`Note:
Loading a model from its configuration file does `),zbe=n(Jie,"STRONG",{});var tNt=s(zbe);lQo=r(tNt,"not"),tNt.forEach(t),iQo=r(Jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(Jie,"A",{href:!0});var aNt=s(KQ);dQo=r(aNt,"from_pretrained()"),aNt.forEach(t),cQo=r(Jie," to load the model weights."),Jie.forEach(t),mQo=i(Cy),T(qb.$$.fragment,Cy),Cy.forEach(t),fQo=i(Rl),oo=n(Rl,"DIV",{class:!0});var wa=s(oo);T(h$.$$.fragment,wa),gQo=i(wa),Qbe=n(wa,"P",{});var nNt=s(Qbe);hQo=r(nNt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nNt.forEach(t),uQo=i(wa),rn=n(wa,"P",{});var wy=s(rn);pQo=r(wy,"The model class to instantiate is selected based on the "),Wbe=n(wy,"CODE",{});var sNt=s(Wbe);_Qo=r(sNt,"model_type"),sNt.forEach(t),bQo=r(wy,` property of the config object (either
passed as an argument or loaded from `),Ube=n(wy,"CODE",{});var lNt=s(Ube);vQo=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),FQo=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(wy,"CODE",{});var iNt=s(Hbe);TQo=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),MQo=r(wy,":"),wy.forEach(t),EQo=i(wa),Q=n(wa,"UL",{});var U=s(Q);jb=n(U,"LI",{});var nOe=s(jb);Jbe=n(nOe,"STRONG",{});var dNt=s(Jbe);CQo=r(dNt,"bart"),dNt.forEach(t),wQo=r(nOe," \u2014 "),eW=n(nOe,"A",{href:!0});var cNt=s(eW);AQo=r(cNt,"BartForCausalLM"),cNt.forEach(t),LQo=r(nOe," (BART model)"),nOe.forEach(t),yQo=i(U),Db=n(U,"LI",{});var sOe=s(Db);Ybe=n(sOe,"STRONG",{});var mNt=s(Ybe);xQo=r(mNt,"bert"),mNt.forEach(t),$Qo=r(sOe," \u2014 "),oW=n(sOe,"A",{href:!0});var fNt=s(oW);kQo=r(fNt,"BertLMHeadModel"),fNt.forEach(t),SQo=r(sOe," (BERT model)"),sOe.forEach(t),RQo=i(U),Gb=n(U,"LI",{});var lOe=s(Gb);Zbe=n(lOe,"STRONG",{});var gNt=s(Zbe);PQo=r(gNt,"bert-generation"),gNt.forEach(t),BQo=r(lOe," \u2014 "),rW=n(lOe,"A",{href:!0});var hNt=s(rW);IQo=r(hNt,"BertGenerationDecoder"),hNt.forEach(t),NQo=r(lOe," (Bert Generation model)"),lOe.forEach(t),qQo=i(U),Ob=n(U,"LI",{});var iOe=s(Ob);Kbe=n(iOe,"STRONG",{});var uNt=s(Kbe);jQo=r(uNt,"big_bird"),uNt.forEach(t),DQo=r(iOe," \u2014 "),tW=n(iOe,"A",{href:!0});var pNt=s(tW);GQo=r(pNt,"BigBirdForCausalLM"),pNt.forEach(t),OQo=r(iOe," (BigBird model)"),iOe.forEach(t),VQo=i(U),Vb=n(U,"LI",{});var dOe=s(Vb);eve=n(dOe,"STRONG",{});var _Nt=s(eve);XQo=r(_Nt,"bigbird_pegasus"),_Nt.forEach(t),zQo=r(dOe," \u2014 "),aW=n(dOe,"A",{href:!0});var bNt=s(aW);QQo=r(bNt,"BigBirdPegasusForCausalLM"),bNt.forEach(t),WQo=r(dOe," (BigBird-Pegasus model)"),dOe.forEach(t),UQo=i(U),Xb=n(U,"LI",{});var cOe=s(Xb);ove=n(cOe,"STRONG",{});var vNt=s(ove);HQo=r(vNt,"blenderbot"),vNt.forEach(t),JQo=r(cOe," \u2014 "),nW=n(cOe,"A",{href:!0});var FNt=s(nW);YQo=r(FNt,"BlenderbotForCausalLM"),FNt.forEach(t),ZQo=r(cOe," (Blenderbot model)"),cOe.forEach(t),KQo=i(U),zb=n(U,"LI",{});var mOe=s(zb);rve=n(mOe,"STRONG",{});var TNt=s(rve);eWo=r(TNt,"blenderbot-small"),TNt.forEach(t),oWo=r(mOe," \u2014 "),sW=n(mOe,"A",{href:!0});var MNt=s(sW);rWo=r(MNt,"BlenderbotSmallForCausalLM"),MNt.forEach(t),tWo=r(mOe," (BlenderbotSmall model)"),mOe.forEach(t),aWo=i(U),Qb=n(U,"LI",{});var fOe=s(Qb);tve=n(fOe,"STRONG",{});var ENt=s(tve);nWo=r(ENt,"bloom"),ENt.forEach(t),sWo=r(fOe," \u2014 "),lW=n(fOe,"A",{href:!0});var CNt=s(lW);lWo=r(CNt,"BloomForCausalLM"),CNt.forEach(t),iWo=r(fOe," (BLOOM model)"),fOe.forEach(t),dWo=i(U),Wb=n(U,"LI",{});var gOe=s(Wb);ave=n(gOe,"STRONG",{});var wNt=s(ave);cWo=r(wNt,"camembert"),wNt.forEach(t),mWo=r(gOe," \u2014 "),iW=n(gOe,"A",{href:!0});var ANt=s(iW);fWo=r(ANt,"CamembertForCausalLM"),ANt.forEach(t),gWo=r(gOe," (CamemBERT model)"),gOe.forEach(t),hWo=i(U),Ub=n(U,"LI",{});var hOe=s(Ub);nve=n(hOe,"STRONG",{});var LNt=s(nve);uWo=r(LNt,"codegen"),LNt.forEach(t),pWo=r(hOe," \u2014 "),dW=n(hOe,"A",{href:!0});var yNt=s(dW);_Wo=r(yNt,"CodeGenForCausalLM"),yNt.forEach(t),bWo=r(hOe," (CodeGen model)"),hOe.forEach(t),vWo=i(U),Hb=n(U,"LI",{});var uOe=s(Hb);sve=n(uOe,"STRONG",{});var xNt=s(sve);FWo=r(xNt,"ctrl"),xNt.forEach(t),TWo=r(uOe," \u2014 "),cW=n(uOe,"A",{href:!0});var $Nt=s(cW);MWo=r($Nt,"CTRLLMHeadModel"),$Nt.forEach(t),EWo=r(uOe," (CTRL model)"),uOe.forEach(t),CWo=i(U),Jb=n(U,"LI",{});var pOe=s(Jb);lve=n(pOe,"STRONG",{});var kNt=s(lve);wWo=r(kNt,"data2vec-text"),kNt.forEach(t),AWo=r(pOe," \u2014 "),mW=n(pOe,"A",{href:!0});var SNt=s(mW);LWo=r(SNt,"Data2VecTextForCausalLM"),SNt.forEach(t),yWo=r(pOe," (Data2VecText model)"),pOe.forEach(t),xWo=i(U),Yb=n(U,"LI",{});var _Oe=s(Yb);ive=n(_Oe,"STRONG",{});var RNt=s(ive);$Wo=r(RNt,"electra"),RNt.forEach(t),kWo=r(_Oe," \u2014 "),fW=n(_Oe,"A",{href:!0});var PNt=s(fW);SWo=r(PNt,"ElectraForCausalLM"),PNt.forEach(t),RWo=r(_Oe," (ELECTRA model)"),_Oe.forEach(t),PWo=i(U),Zb=n(U,"LI",{});var bOe=s(Zb);dve=n(bOe,"STRONG",{});var BNt=s(dve);BWo=r(BNt,"ernie"),BNt.forEach(t),IWo=r(bOe," \u2014 "),gW=n(bOe,"A",{href:!0});var INt=s(gW);NWo=r(INt,"ErnieForCausalLM"),INt.forEach(t),qWo=r(bOe," (ERNIE model)"),bOe.forEach(t),jWo=i(U),Kb=n(U,"LI",{});var vOe=s(Kb);cve=n(vOe,"STRONG",{});var NNt=s(cve);DWo=r(NNt,"gpt2"),NNt.forEach(t),GWo=r(vOe," \u2014 "),hW=n(vOe,"A",{href:!0});var qNt=s(hW);OWo=r(qNt,"GPT2LMHeadModel"),qNt.forEach(t),VWo=r(vOe," (OpenAI GPT-2 model)"),vOe.forEach(t),XWo=i(U),ev=n(U,"LI",{});var FOe=s(ev);mve=n(FOe,"STRONG",{});var jNt=s(mve);zWo=r(jNt,"gpt_neo"),jNt.forEach(t),QWo=r(FOe," \u2014 "),uW=n(FOe,"A",{href:!0});var DNt=s(uW);WWo=r(DNt,"GPTNeoForCausalLM"),DNt.forEach(t),UWo=r(FOe," (GPT Neo model)"),FOe.forEach(t),HWo=i(U),ov=n(U,"LI",{});var TOe=s(ov);fve=n(TOe,"STRONG",{});var GNt=s(fve);JWo=r(GNt,"gpt_neox"),GNt.forEach(t),YWo=r(TOe," \u2014 "),pW=n(TOe,"A",{href:!0});var ONt=s(pW);ZWo=r(ONt,"GPTNeoXForCausalLM"),ONt.forEach(t),KWo=r(TOe," (GPT NeoX model)"),TOe.forEach(t),eUo=i(U),rv=n(U,"LI",{});var MOe=s(rv);gve=n(MOe,"STRONG",{});var VNt=s(gve);oUo=r(VNt,"gpt_neox_japanese"),VNt.forEach(t),rUo=r(MOe," \u2014 "),_W=n(MOe,"A",{href:!0});var XNt=s(_W);tUo=r(XNt,"GPTNeoXJapaneseForCausalLM"),XNt.forEach(t),aUo=r(MOe," (GPT NeoX Japanese model)"),MOe.forEach(t),nUo=i(U),tv=n(U,"LI",{});var EOe=s(tv);hve=n(EOe,"STRONG",{});var zNt=s(hve);sUo=r(zNt,"gptj"),zNt.forEach(t),lUo=r(EOe," \u2014 "),bW=n(EOe,"A",{href:!0});var QNt=s(bW);iUo=r(QNt,"GPTJForCausalLM"),QNt.forEach(t),dUo=r(EOe," (GPT-J model)"),EOe.forEach(t),cUo=i(U),av=n(U,"LI",{});var COe=s(av);uve=n(COe,"STRONG",{});var WNt=s(uve);mUo=r(WNt,"marian"),WNt.forEach(t),fUo=r(COe," \u2014 "),vW=n(COe,"A",{href:!0});var UNt=s(vW);gUo=r(UNt,"MarianForCausalLM"),UNt.forEach(t),hUo=r(COe," (Marian model)"),COe.forEach(t),uUo=i(U),nv=n(U,"LI",{});var wOe=s(nv);pve=n(wOe,"STRONG",{});var HNt=s(pve);pUo=r(HNt,"mbart"),HNt.forEach(t),_Uo=r(wOe," \u2014 "),FW=n(wOe,"A",{href:!0});var JNt=s(FW);bUo=r(JNt,"MBartForCausalLM"),JNt.forEach(t),vUo=r(wOe," (mBART model)"),wOe.forEach(t),FUo=i(U),sv=n(U,"LI",{});var AOe=s(sv);_ve=n(AOe,"STRONG",{});var YNt=s(_ve);TUo=r(YNt,"megatron-bert"),YNt.forEach(t),MUo=r(AOe," \u2014 "),TW=n(AOe,"A",{href:!0});var ZNt=s(TW);EUo=r(ZNt,"MegatronBertForCausalLM"),ZNt.forEach(t),CUo=r(AOe," (Megatron-BERT model)"),AOe.forEach(t),wUo=i(U),lv=n(U,"LI",{});var LOe=s(lv);bve=n(LOe,"STRONG",{});var KNt=s(bve);AUo=r(KNt,"mvp"),KNt.forEach(t),LUo=r(LOe," \u2014 "),MW=n(LOe,"A",{href:!0});var eqt=s(MW);yUo=r(eqt,"MvpForCausalLM"),eqt.forEach(t),xUo=r(LOe," (MVP model)"),LOe.forEach(t),$Uo=i(U),iv=n(U,"LI",{});var yOe=s(iv);vve=n(yOe,"STRONG",{});var oqt=s(vve);kUo=r(oqt,"openai-gpt"),oqt.forEach(t),SUo=r(yOe," \u2014 "),EW=n(yOe,"A",{href:!0});var rqt=s(EW);RUo=r(rqt,"OpenAIGPTLMHeadModel"),rqt.forEach(t),PUo=r(yOe," (OpenAI GPT model)"),yOe.forEach(t),BUo=i(U),dv=n(U,"LI",{});var xOe=s(dv);Fve=n(xOe,"STRONG",{});var tqt=s(Fve);IUo=r(tqt,"opt"),tqt.forEach(t),NUo=r(xOe," \u2014 "),CW=n(xOe,"A",{href:!0});var aqt=s(CW);qUo=r(aqt,"OPTForCausalLM"),aqt.forEach(t),jUo=r(xOe," (OPT model)"),xOe.forEach(t),DUo=i(U),cv=n(U,"LI",{});var $Oe=s(cv);Tve=n($Oe,"STRONG",{});var nqt=s(Tve);GUo=r(nqt,"pegasus"),nqt.forEach(t),OUo=r($Oe," \u2014 "),wW=n($Oe,"A",{href:!0});var sqt=s(wW);VUo=r(sqt,"PegasusForCausalLM"),sqt.forEach(t),XUo=r($Oe," (Pegasus model)"),$Oe.forEach(t),zUo=i(U),mv=n(U,"LI",{});var kOe=s(mv);Mve=n(kOe,"STRONG",{});var lqt=s(Mve);QUo=r(lqt,"plbart"),lqt.forEach(t),WUo=r(kOe," \u2014 "),AW=n(kOe,"A",{href:!0});var iqt=s(AW);UUo=r(iqt,"PLBartForCausalLM"),iqt.forEach(t),HUo=r(kOe," (PLBart model)"),kOe.forEach(t),JUo=i(U),fv=n(U,"LI",{});var SOe=s(fv);Eve=n(SOe,"STRONG",{});var dqt=s(Eve);YUo=r(dqt,"prophetnet"),dqt.forEach(t),ZUo=r(SOe," \u2014 "),LW=n(SOe,"A",{href:!0});var cqt=s(LW);KUo=r(cqt,"ProphetNetForCausalLM"),cqt.forEach(t),eHo=r(SOe," (ProphetNet model)"),SOe.forEach(t),oHo=i(U),gv=n(U,"LI",{});var ROe=s(gv);Cve=n(ROe,"STRONG",{});var mqt=s(Cve);rHo=r(mqt,"qdqbert"),mqt.forEach(t),tHo=r(ROe," \u2014 "),yW=n(ROe,"A",{href:!0});var fqt=s(yW);aHo=r(fqt,"QDQBertLMHeadModel"),fqt.forEach(t),nHo=r(ROe," (QDQBert model)"),ROe.forEach(t),sHo=i(U),hv=n(U,"LI",{});var POe=s(hv);wve=n(POe,"STRONG",{});var gqt=s(wve);lHo=r(gqt,"reformer"),gqt.forEach(t),iHo=r(POe," \u2014 "),xW=n(POe,"A",{href:!0});var hqt=s(xW);dHo=r(hqt,"ReformerModelWithLMHead"),hqt.forEach(t),cHo=r(POe," (Reformer model)"),POe.forEach(t),mHo=i(U),uv=n(U,"LI",{});var BOe=s(uv);Ave=n(BOe,"STRONG",{});var uqt=s(Ave);fHo=r(uqt,"rembert"),uqt.forEach(t),gHo=r(BOe," \u2014 "),$W=n(BOe,"A",{href:!0});var pqt=s($W);hHo=r(pqt,"RemBertForCausalLM"),pqt.forEach(t),uHo=r(BOe," (RemBERT model)"),BOe.forEach(t),pHo=i(U),pv=n(U,"LI",{});var IOe=s(pv);Lve=n(IOe,"STRONG",{});var _qt=s(Lve);_Ho=r(_qt,"roberta"),_qt.forEach(t),bHo=r(IOe," \u2014 "),kW=n(IOe,"A",{href:!0});var bqt=s(kW);vHo=r(bqt,"RobertaForCausalLM"),bqt.forEach(t),FHo=r(IOe," (RoBERTa model)"),IOe.forEach(t),THo=i(U),_v=n(U,"LI",{});var NOe=s(_v);yve=n(NOe,"STRONG",{});var vqt=s(yve);MHo=r(vqt,"roformer"),vqt.forEach(t),EHo=r(NOe," \u2014 "),SW=n(NOe,"A",{href:!0});var Fqt=s(SW);CHo=r(Fqt,"RoFormerForCausalLM"),Fqt.forEach(t),wHo=r(NOe," (RoFormer model)"),NOe.forEach(t),AHo=i(U),bv=n(U,"LI",{});var qOe=s(bv);xve=n(qOe,"STRONG",{});var Tqt=s(xve);LHo=r(Tqt,"speech_to_text_2"),Tqt.forEach(t),yHo=r(qOe," \u2014 "),RW=n(qOe,"A",{href:!0});var Mqt=s(RW);xHo=r(Mqt,"Speech2Text2ForCausalLM"),Mqt.forEach(t),$Ho=r(qOe," (Speech2Text2 model)"),qOe.forEach(t),kHo=i(U),vv=n(U,"LI",{});var jOe=s(vv);$ve=n(jOe,"STRONG",{});var Eqt=s($ve);SHo=r(Eqt,"transfo-xl"),Eqt.forEach(t),RHo=r(jOe," \u2014 "),PW=n(jOe,"A",{href:!0});var Cqt=s(PW);PHo=r(Cqt,"TransfoXLLMHeadModel"),Cqt.forEach(t),BHo=r(jOe," (Transformer-XL model)"),jOe.forEach(t),IHo=i(U),Fv=n(U,"LI",{});var DOe=s(Fv);kve=n(DOe,"STRONG",{});var wqt=s(kve);NHo=r(wqt,"trocr"),wqt.forEach(t),qHo=r(DOe," \u2014 "),BW=n(DOe,"A",{href:!0});var Aqt=s(BW);jHo=r(Aqt,"TrOCRForCausalLM"),Aqt.forEach(t),DHo=r(DOe," (TrOCR model)"),DOe.forEach(t),GHo=i(U),Tv=n(U,"LI",{});var GOe=s(Tv);Sve=n(GOe,"STRONG",{});var Lqt=s(Sve);OHo=r(Lqt,"xglm"),Lqt.forEach(t),VHo=r(GOe," \u2014 "),IW=n(GOe,"A",{href:!0});var yqt=s(IW);XHo=r(yqt,"XGLMForCausalLM"),yqt.forEach(t),zHo=r(GOe," (XGLM model)"),GOe.forEach(t),QHo=i(U),Mv=n(U,"LI",{});var OOe=s(Mv);Rve=n(OOe,"STRONG",{});var xqt=s(Rve);WHo=r(xqt,"xlm"),xqt.forEach(t),UHo=r(OOe," \u2014 "),NW=n(OOe,"A",{href:!0});var $qt=s(NW);HHo=r($qt,"XLMWithLMHeadModel"),$qt.forEach(t),JHo=r(OOe," (XLM model)"),OOe.forEach(t),YHo=i(U),Ev=n(U,"LI",{});var VOe=s(Ev);Pve=n(VOe,"STRONG",{});var kqt=s(Pve);ZHo=r(kqt,"xlm-prophetnet"),kqt.forEach(t),KHo=r(VOe," \u2014 "),qW=n(VOe,"A",{href:!0});var Sqt=s(qW);eJo=r(Sqt,"XLMProphetNetForCausalLM"),Sqt.forEach(t),oJo=r(VOe," (XLM-ProphetNet model)"),VOe.forEach(t),rJo=i(U),Cv=n(U,"LI",{});var XOe=s(Cv);Bve=n(XOe,"STRONG",{});var Rqt=s(Bve);tJo=r(Rqt,"xlm-roberta"),Rqt.forEach(t),aJo=r(XOe," \u2014 "),jW=n(XOe,"A",{href:!0});var Pqt=s(jW);nJo=r(Pqt,"XLMRobertaForCausalLM"),Pqt.forEach(t),sJo=r(XOe," (XLM-RoBERTa model)"),XOe.forEach(t),lJo=i(U),wv=n(U,"LI",{});var zOe=s(wv);Ive=n(zOe,"STRONG",{});var Bqt=s(Ive);iJo=r(Bqt,"xlm-roberta-xl"),Bqt.forEach(t),dJo=r(zOe," \u2014 "),DW=n(zOe,"A",{href:!0});var Iqt=s(DW);cJo=r(Iqt,"XLMRobertaXLForCausalLM"),Iqt.forEach(t),mJo=r(zOe," (XLM-RoBERTa-XL model)"),zOe.forEach(t),fJo=i(U),Av=n(U,"LI",{});var QOe=s(Av);Nve=n(QOe,"STRONG",{});var Nqt=s(Nve);gJo=r(Nqt,"xlnet"),Nqt.forEach(t),hJo=r(QOe," \u2014 "),GW=n(QOe,"A",{href:!0});var qqt=s(GW);uJo=r(qqt,"XLNetLMHeadModel"),qqt.forEach(t),pJo=r(QOe," (XLNet model)"),QOe.forEach(t),U.forEach(t),_Jo=i(wa),Lv=n(wa,"P",{});var WOe=s(Lv);bJo=r(WOe,"The model is set in evaluation mode by default using "),qve=n(WOe,"CODE",{});var jqt=s(qve);vJo=r(jqt,"model.eval()"),jqt.forEach(t),FJo=r(WOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=n(WOe,"CODE",{});var Dqt=s(jve);TJo=r(Dqt,"model.train()"),Dqt.forEach(t),WOe.forEach(t),MJo=i(wa),T(yv.$$.fragment,wa),wa.forEach(t),Rl.forEach(t),Boo=i(m),Sd=n(m,"H2",{class:!0});var Yto=s(Sd);xv=n(Yto,"A",{id:!0,class:!0,href:!0});var Gqt=s(xv);Dve=n(Gqt,"SPAN",{});var Oqt=s(Dve);T(u$.$$.fragment,Oqt),Oqt.forEach(t),Gqt.forEach(t),EJo=i(Yto),Gve=n(Yto,"SPAN",{});var Vqt=s(Gve);CJo=r(Vqt,"AutoModelForMaskedLM"),Vqt.forEach(t),Yto.forEach(t),Ioo=i(m),qo=n(m,"DIV",{class:!0});var Pl=s(qo);T(p$.$$.fragment,Pl),wJo=i(Pl),Rd=n(Pl,"P",{});var Yie=s(Rd);AJo=r(Yie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OW=n(Yie,"A",{href:!0});var Xqt=s(OW);LJo=r(Xqt,"from_pretrained()"),Xqt.forEach(t),yJo=r(Yie," class method or the "),VW=n(Yie,"A",{href:!0});var zqt=s(VW);xJo=r(zqt,"from_config()"),zqt.forEach(t),$Jo=r(Yie,` class
method.`),Yie.forEach(t),kJo=i(Pl),_$=n(Pl,"P",{});var Zto=s(_$);SJo=r(Zto,"This class cannot be instantiated directly using "),Ove=n(Zto,"CODE",{});var Qqt=s(Ove);RJo=r(Qqt,"__init__()"),Qqt.forEach(t),PJo=r(Zto," (throws an error)."),Zto.forEach(t),BJo=i(Pl),Mt=n(Pl,"DIV",{class:!0});var Ay=s(Mt);T(b$.$$.fragment,Ay),IJo=i(Ay),Vve=n(Ay,"P",{});var Wqt=s(Vve);NJo=r(Wqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wqt.forEach(t),qJo=i(Ay),Pd=n(Ay,"P",{});var Zie=s(Pd);jJo=r(Zie,`Note:
Loading a model from its configuration file does `),Xve=n(Zie,"STRONG",{});var Uqt=s(Xve);DJo=r(Uqt,"not"),Uqt.forEach(t),GJo=r(Zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(Zie,"A",{href:!0});var Hqt=s(XW);OJo=r(Hqt,"from_pretrained()"),Hqt.forEach(t),VJo=r(Zie," to load the model weights."),Zie.forEach(t),XJo=i(Ay),T($v.$$.fragment,Ay),Ay.forEach(t),zJo=i(Pl),ro=n(Pl,"DIV",{class:!0});var Aa=s(ro);T(v$.$$.fragment,Aa),QJo=i(Aa),zve=n(Aa,"P",{});var Jqt=s(zve);WJo=r(Jqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jqt.forEach(t),UJo=i(Aa),tn=n(Aa,"P",{});var Ly=s(tn);HJo=r(Ly,"The model class to instantiate is selected based on the "),Qve=n(Ly,"CODE",{});var Yqt=s(Qve);JJo=r(Yqt,"model_type"),Yqt.forEach(t),YJo=r(Ly,` property of the config object (either
passed as an argument or loaded from `),Wve=n(Ly,"CODE",{});var Zqt=s(Wve);ZJo=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),KJo=r(Ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(Ly,"CODE",{});var Kqt=s(Uve);eYo=r(Kqt,"pretrained_model_name_or_path"),Kqt.forEach(t),oYo=r(Ly,":"),Ly.forEach(t),rYo=i(Aa),J=n(Aa,"UL",{});var Z=s(J);kv=n(Z,"LI",{});var UOe=s(kv);Hve=n(UOe,"STRONG",{});var ejt=s(Hve);tYo=r(ejt,"albert"),ejt.forEach(t),aYo=r(UOe," \u2014 "),zW=n(UOe,"A",{href:!0});var ojt=s(zW);nYo=r(ojt,"AlbertForMaskedLM"),ojt.forEach(t),sYo=r(UOe," (ALBERT model)"),UOe.forEach(t),lYo=i(Z),Sv=n(Z,"LI",{});var HOe=s(Sv);Jve=n(HOe,"STRONG",{});var rjt=s(Jve);iYo=r(rjt,"bart"),rjt.forEach(t),dYo=r(HOe," \u2014 "),QW=n(HOe,"A",{href:!0});var tjt=s(QW);cYo=r(tjt,"BartForConditionalGeneration"),tjt.forEach(t),mYo=r(HOe," (BART model)"),HOe.forEach(t),fYo=i(Z),Rv=n(Z,"LI",{});var JOe=s(Rv);Yve=n(JOe,"STRONG",{});var ajt=s(Yve);gYo=r(ajt,"bert"),ajt.forEach(t),hYo=r(JOe," \u2014 "),WW=n(JOe,"A",{href:!0});var njt=s(WW);uYo=r(njt,"BertForMaskedLM"),njt.forEach(t),pYo=r(JOe," (BERT model)"),JOe.forEach(t),_Yo=i(Z),Pv=n(Z,"LI",{});var YOe=s(Pv);Zve=n(YOe,"STRONG",{});var sjt=s(Zve);bYo=r(sjt,"big_bird"),sjt.forEach(t),vYo=r(YOe," \u2014 "),UW=n(YOe,"A",{href:!0});var ljt=s(UW);FYo=r(ljt,"BigBirdForMaskedLM"),ljt.forEach(t),TYo=r(YOe," (BigBird model)"),YOe.forEach(t),MYo=i(Z),Bv=n(Z,"LI",{});var ZOe=s(Bv);Kve=n(ZOe,"STRONG",{});var ijt=s(Kve);EYo=r(ijt,"camembert"),ijt.forEach(t),CYo=r(ZOe," \u2014 "),HW=n(ZOe,"A",{href:!0});var djt=s(HW);wYo=r(djt,"CamembertForMaskedLM"),djt.forEach(t),AYo=r(ZOe," (CamemBERT model)"),ZOe.forEach(t),LYo=i(Z),Iv=n(Z,"LI",{});var KOe=s(Iv);eFe=n(KOe,"STRONG",{});var cjt=s(eFe);yYo=r(cjt,"convbert"),cjt.forEach(t),xYo=r(KOe," \u2014 "),JW=n(KOe,"A",{href:!0});var mjt=s(JW);$Yo=r(mjt,"ConvBertForMaskedLM"),mjt.forEach(t),kYo=r(KOe," (ConvBERT model)"),KOe.forEach(t),SYo=i(Z),Nv=n(Z,"LI",{});var eVe=s(Nv);oFe=n(eVe,"STRONG",{});var fjt=s(oFe);RYo=r(fjt,"data2vec-text"),fjt.forEach(t),PYo=r(eVe," \u2014 "),YW=n(eVe,"A",{href:!0});var gjt=s(YW);BYo=r(gjt,"Data2VecTextForMaskedLM"),gjt.forEach(t),IYo=r(eVe," (Data2VecText model)"),eVe.forEach(t),NYo=i(Z),qv=n(Z,"LI",{});var oVe=s(qv);rFe=n(oVe,"STRONG",{});var hjt=s(rFe);qYo=r(hjt,"deberta"),hjt.forEach(t),jYo=r(oVe," \u2014 "),ZW=n(oVe,"A",{href:!0});var ujt=s(ZW);DYo=r(ujt,"DebertaForMaskedLM"),ujt.forEach(t),GYo=r(oVe," (DeBERTa model)"),oVe.forEach(t),OYo=i(Z),jv=n(Z,"LI",{});var rVe=s(jv);tFe=n(rVe,"STRONG",{});var pjt=s(tFe);VYo=r(pjt,"deberta-v2"),pjt.forEach(t),XYo=r(rVe," \u2014 "),KW=n(rVe,"A",{href:!0});var _jt=s(KW);zYo=r(_jt,"DebertaV2ForMaskedLM"),_jt.forEach(t),QYo=r(rVe," (DeBERTa-v2 model)"),rVe.forEach(t),WYo=i(Z),Dv=n(Z,"LI",{});var tVe=s(Dv);aFe=n(tVe,"STRONG",{});var bjt=s(aFe);UYo=r(bjt,"distilbert"),bjt.forEach(t),HYo=r(tVe," \u2014 "),eU=n(tVe,"A",{href:!0});var vjt=s(eU);JYo=r(vjt,"DistilBertForMaskedLM"),vjt.forEach(t),YYo=r(tVe," (DistilBERT model)"),tVe.forEach(t),ZYo=i(Z),Gv=n(Z,"LI",{});var aVe=s(Gv);nFe=n(aVe,"STRONG",{});var Fjt=s(nFe);KYo=r(Fjt,"electra"),Fjt.forEach(t),eZo=r(aVe," \u2014 "),oU=n(aVe,"A",{href:!0});var Tjt=s(oU);oZo=r(Tjt,"ElectraForMaskedLM"),Tjt.forEach(t),rZo=r(aVe," (ELECTRA model)"),aVe.forEach(t),tZo=i(Z),Ov=n(Z,"LI",{});var nVe=s(Ov);sFe=n(nVe,"STRONG",{});var Mjt=s(sFe);aZo=r(Mjt,"ernie"),Mjt.forEach(t),nZo=r(nVe," \u2014 "),rU=n(nVe,"A",{href:!0});var Ejt=s(rU);sZo=r(Ejt,"ErnieForMaskedLM"),Ejt.forEach(t),lZo=r(nVe," (ERNIE model)"),nVe.forEach(t),iZo=i(Z),Vv=n(Z,"LI",{});var sVe=s(Vv);lFe=n(sVe,"STRONG",{});var Cjt=s(lFe);dZo=r(Cjt,"flaubert"),Cjt.forEach(t),cZo=r(sVe," \u2014 "),tU=n(sVe,"A",{href:!0});var wjt=s(tU);mZo=r(wjt,"FlaubertWithLMHeadModel"),wjt.forEach(t),fZo=r(sVe," (FlauBERT model)"),sVe.forEach(t),gZo=i(Z),Xv=n(Z,"LI",{});var lVe=s(Xv);iFe=n(lVe,"STRONG",{});var Ajt=s(iFe);hZo=r(Ajt,"fnet"),Ajt.forEach(t),uZo=r(lVe," \u2014 "),aU=n(lVe,"A",{href:!0});var Ljt=s(aU);pZo=r(Ljt,"FNetForMaskedLM"),Ljt.forEach(t),_Zo=r(lVe," (FNet model)"),lVe.forEach(t),bZo=i(Z),zv=n(Z,"LI",{});var iVe=s(zv);dFe=n(iVe,"STRONG",{});var yjt=s(dFe);vZo=r(yjt,"funnel"),yjt.forEach(t),FZo=r(iVe," \u2014 "),nU=n(iVe,"A",{href:!0});var xjt=s(nU);TZo=r(xjt,"FunnelForMaskedLM"),xjt.forEach(t),MZo=r(iVe," (Funnel Transformer model)"),iVe.forEach(t),EZo=i(Z),Qv=n(Z,"LI",{});var dVe=s(Qv);cFe=n(dVe,"STRONG",{});var $jt=s(cFe);CZo=r($jt,"ibert"),$jt.forEach(t),wZo=r(dVe," \u2014 "),sU=n(dVe,"A",{href:!0});var kjt=s(sU);AZo=r(kjt,"IBertForMaskedLM"),kjt.forEach(t),LZo=r(dVe," (I-BERT model)"),dVe.forEach(t),yZo=i(Z),Wv=n(Z,"LI",{});var cVe=s(Wv);mFe=n(cVe,"STRONG",{});var Sjt=s(mFe);xZo=r(Sjt,"layoutlm"),Sjt.forEach(t),$Zo=r(cVe," \u2014 "),lU=n(cVe,"A",{href:!0});var Rjt=s(lU);kZo=r(Rjt,"LayoutLMForMaskedLM"),Rjt.forEach(t),SZo=r(cVe," (LayoutLM model)"),cVe.forEach(t),RZo=i(Z),Uv=n(Z,"LI",{});var mVe=s(Uv);fFe=n(mVe,"STRONG",{});var Pjt=s(fFe);PZo=r(Pjt,"longformer"),Pjt.forEach(t),BZo=r(mVe," \u2014 "),iU=n(mVe,"A",{href:!0});var Bjt=s(iU);IZo=r(Bjt,"LongformerForMaskedLM"),Bjt.forEach(t),NZo=r(mVe," (Longformer model)"),mVe.forEach(t),qZo=i(Z),Hv=n(Z,"LI",{});var fVe=s(Hv);gFe=n(fVe,"STRONG",{});var Ijt=s(gFe);jZo=r(Ijt,"luke"),Ijt.forEach(t),DZo=r(fVe," \u2014 "),dU=n(fVe,"A",{href:!0});var Njt=s(dU);GZo=r(Njt,"LukeForMaskedLM"),Njt.forEach(t),OZo=r(fVe," (LUKE model)"),fVe.forEach(t),VZo=i(Z),Jv=n(Z,"LI",{});var gVe=s(Jv);hFe=n(gVe,"STRONG",{});var qjt=s(hFe);XZo=r(qjt,"mbart"),qjt.forEach(t),zZo=r(gVe," \u2014 "),cU=n(gVe,"A",{href:!0});var jjt=s(cU);QZo=r(jjt,"MBartForConditionalGeneration"),jjt.forEach(t),WZo=r(gVe," (mBART model)"),gVe.forEach(t),UZo=i(Z),Yv=n(Z,"LI",{});var hVe=s(Yv);uFe=n(hVe,"STRONG",{});var Djt=s(uFe);HZo=r(Djt,"megatron-bert"),Djt.forEach(t),JZo=r(hVe," \u2014 "),mU=n(hVe,"A",{href:!0});var Gjt=s(mU);YZo=r(Gjt,"MegatronBertForMaskedLM"),Gjt.forEach(t),ZZo=r(hVe," (Megatron-BERT model)"),hVe.forEach(t),KZo=i(Z),Zv=n(Z,"LI",{});var uVe=s(Zv);pFe=n(uVe,"STRONG",{});var Ojt=s(pFe);eKo=r(Ojt,"mobilebert"),Ojt.forEach(t),oKo=r(uVe," \u2014 "),fU=n(uVe,"A",{href:!0});var Vjt=s(fU);rKo=r(Vjt,"MobileBertForMaskedLM"),Vjt.forEach(t),tKo=r(uVe," (MobileBERT model)"),uVe.forEach(t),aKo=i(Z),Kv=n(Z,"LI",{});var pVe=s(Kv);_Fe=n(pVe,"STRONG",{});var Xjt=s(_Fe);nKo=r(Xjt,"mpnet"),Xjt.forEach(t),sKo=r(pVe," \u2014 "),gU=n(pVe,"A",{href:!0});var zjt=s(gU);lKo=r(zjt,"MPNetForMaskedLM"),zjt.forEach(t),iKo=r(pVe," (MPNet model)"),pVe.forEach(t),dKo=i(Z),eF=n(Z,"LI",{});var _Ve=s(eF);bFe=n(_Ve,"STRONG",{});var Qjt=s(bFe);cKo=r(Qjt,"mvp"),Qjt.forEach(t),mKo=r(_Ve," \u2014 "),hU=n(_Ve,"A",{href:!0});var Wjt=s(hU);fKo=r(Wjt,"MvpForConditionalGeneration"),Wjt.forEach(t),gKo=r(_Ve," (MVP model)"),_Ve.forEach(t),hKo=i(Z),oF=n(Z,"LI",{});var bVe=s(oF);vFe=n(bVe,"STRONG",{});var Ujt=s(vFe);uKo=r(Ujt,"nezha"),Ujt.forEach(t),pKo=r(bVe," \u2014 "),uU=n(bVe,"A",{href:!0});var Hjt=s(uU);_Ko=r(Hjt,"NezhaForMaskedLM"),Hjt.forEach(t),bKo=r(bVe," (Nezha model)"),bVe.forEach(t),vKo=i(Z),rF=n(Z,"LI",{});var vVe=s(rF);FFe=n(vVe,"STRONG",{});var Jjt=s(FFe);FKo=r(Jjt,"nystromformer"),Jjt.forEach(t),TKo=r(vVe," \u2014 "),pU=n(vVe,"A",{href:!0});var Yjt=s(pU);MKo=r(Yjt,"NystromformerForMaskedLM"),Yjt.forEach(t),EKo=r(vVe," (Nystr\xF6mformer model)"),vVe.forEach(t),CKo=i(Z),tF=n(Z,"LI",{});var FVe=s(tF);TFe=n(FVe,"STRONG",{});var Zjt=s(TFe);wKo=r(Zjt,"perceiver"),Zjt.forEach(t),AKo=r(FVe," \u2014 "),_U=n(FVe,"A",{href:!0});var Kjt=s(_U);LKo=r(Kjt,"PerceiverForMaskedLM"),Kjt.forEach(t),yKo=r(FVe," (Perceiver model)"),FVe.forEach(t),xKo=i(Z),aF=n(Z,"LI",{});var TVe=s(aF);MFe=n(TVe,"STRONG",{});var eDt=s(MFe);$Ko=r(eDt,"qdqbert"),eDt.forEach(t),kKo=r(TVe," \u2014 "),bU=n(TVe,"A",{href:!0});var oDt=s(bU);SKo=r(oDt,"QDQBertForMaskedLM"),oDt.forEach(t),RKo=r(TVe," (QDQBert model)"),TVe.forEach(t),PKo=i(Z),nF=n(Z,"LI",{});var MVe=s(nF);EFe=n(MVe,"STRONG",{});var rDt=s(EFe);BKo=r(rDt,"reformer"),rDt.forEach(t),IKo=r(MVe," \u2014 "),vU=n(MVe,"A",{href:!0});var tDt=s(vU);NKo=r(tDt,"ReformerForMaskedLM"),tDt.forEach(t),qKo=r(MVe," (Reformer model)"),MVe.forEach(t),jKo=i(Z),sF=n(Z,"LI",{});var EVe=s(sF);CFe=n(EVe,"STRONG",{});var aDt=s(CFe);DKo=r(aDt,"rembert"),aDt.forEach(t),GKo=r(EVe," \u2014 "),FU=n(EVe,"A",{href:!0});var nDt=s(FU);OKo=r(nDt,"RemBertForMaskedLM"),nDt.forEach(t),VKo=r(EVe," (RemBERT model)"),EVe.forEach(t),XKo=i(Z),lF=n(Z,"LI",{});var CVe=s(lF);wFe=n(CVe,"STRONG",{});var sDt=s(wFe);zKo=r(sDt,"roberta"),sDt.forEach(t),QKo=r(CVe," \u2014 "),TU=n(CVe,"A",{href:!0});var lDt=s(TU);WKo=r(lDt,"RobertaForMaskedLM"),lDt.forEach(t),UKo=r(CVe," (RoBERTa model)"),CVe.forEach(t),HKo=i(Z),iF=n(Z,"LI",{});var wVe=s(iF);AFe=n(wVe,"STRONG",{});var iDt=s(AFe);JKo=r(iDt,"roformer"),iDt.forEach(t),YKo=r(wVe," \u2014 "),MU=n(wVe,"A",{href:!0});var dDt=s(MU);ZKo=r(dDt,"RoFormerForMaskedLM"),dDt.forEach(t),KKo=r(wVe," (RoFormer model)"),wVe.forEach(t),eer=i(Z),dF=n(Z,"LI",{});var AVe=s(dF);LFe=n(AVe,"STRONG",{});var cDt=s(LFe);oer=r(cDt,"squeezebert"),cDt.forEach(t),rer=r(AVe," \u2014 "),EU=n(AVe,"A",{href:!0});var mDt=s(EU);ter=r(mDt,"SqueezeBertForMaskedLM"),mDt.forEach(t),aer=r(AVe," (SqueezeBERT model)"),AVe.forEach(t),ner=i(Z),cF=n(Z,"LI",{});var LVe=s(cF);yFe=n(LVe,"STRONG",{});var fDt=s(yFe);ser=r(fDt,"tapas"),fDt.forEach(t),ler=r(LVe," \u2014 "),CU=n(LVe,"A",{href:!0});var gDt=s(CU);ier=r(gDt,"TapasForMaskedLM"),gDt.forEach(t),der=r(LVe," (TAPAS model)"),LVe.forEach(t),cer=i(Z),mF=n(Z,"LI",{});var yVe=s(mF);xFe=n(yVe,"STRONG",{});var hDt=s(xFe);mer=r(hDt,"wav2vec2"),hDt.forEach(t),fer=r(yVe," \u2014 "),$Fe=n(yVe,"CODE",{});var uDt=s($Fe);ger=r(uDt,"Wav2Vec2ForMaskedLM"),uDt.forEach(t),her=r(yVe," (Wav2Vec2 model)"),yVe.forEach(t),uer=i(Z),fF=n(Z,"LI",{});var xVe=s(fF);kFe=n(xVe,"STRONG",{});var pDt=s(kFe);per=r(pDt,"xlm"),pDt.forEach(t),_er=r(xVe," \u2014 "),wU=n(xVe,"A",{href:!0});var _Dt=s(wU);ber=r(_Dt,"XLMWithLMHeadModel"),_Dt.forEach(t),ver=r(xVe," (XLM model)"),xVe.forEach(t),Fer=i(Z),gF=n(Z,"LI",{});var $Ve=s(gF);SFe=n($Ve,"STRONG",{});var bDt=s(SFe);Ter=r(bDt,"xlm-roberta"),bDt.forEach(t),Mer=r($Ve," \u2014 "),AU=n($Ve,"A",{href:!0});var vDt=s(AU);Eer=r(vDt,"XLMRobertaForMaskedLM"),vDt.forEach(t),Cer=r($Ve," (XLM-RoBERTa model)"),$Ve.forEach(t),wer=i(Z),hF=n(Z,"LI",{});var kVe=s(hF);RFe=n(kVe,"STRONG",{});var FDt=s(RFe);Aer=r(FDt,"xlm-roberta-xl"),FDt.forEach(t),Ler=r(kVe," \u2014 "),LU=n(kVe,"A",{href:!0});var TDt=s(LU);yer=r(TDt,"XLMRobertaXLForMaskedLM"),TDt.forEach(t),xer=r(kVe," (XLM-RoBERTa-XL model)"),kVe.forEach(t),$er=i(Z),uF=n(Z,"LI",{});var SVe=s(uF);PFe=n(SVe,"STRONG",{});var MDt=s(PFe);ker=r(MDt,"yoso"),MDt.forEach(t),Ser=r(SVe," \u2014 "),yU=n(SVe,"A",{href:!0});var EDt=s(yU);Rer=r(EDt,"YosoForMaskedLM"),EDt.forEach(t),Per=r(SVe," (YOSO model)"),SVe.forEach(t),Z.forEach(t),Ber=i(Aa),pF=n(Aa,"P",{});var RVe=s(pF);Ier=r(RVe,"The model is set in evaluation mode by default using "),BFe=n(RVe,"CODE",{});var CDt=s(BFe);Ner=r(CDt,"model.eval()"),CDt.forEach(t),qer=r(RVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=n(RVe,"CODE",{});var wDt=s(IFe);jer=r(wDt,"model.train()"),wDt.forEach(t),RVe.forEach(t),Der=i(Aa),T(_F.$$.fragment,Aa),Aa.forEach(t),Pl.forEach(t),Noo=i(m),Bd=n(m,"H2",{class:!0});var Kto=s(Bd);bF=n(Kto,"A",{id:!0,class:!0,href:!0});var ADt=s(bF);NFe=n(ADt,"SPAN",{});var LDt=s(NFe);T(F$.$$.fragment,LDt),LDt.forEach(t),ADt.forEach(t),Ger=i(Kto),qFe=n(Kto,"SPAN",{});var yDt=s(qFe);Oer=r(yDt,"AutoModelForSeq2SeqLM"),yDt.forEach(t),Kto.forEach(t),qoo=i(m),jo=n(m,"DIV",{class:!0});var Bl=s(jo);T(T$.$$.fragment,Bl),Ver=i(Bl),Id=n(Bl,"P",{});var Kie=s(Id);Xer=r(Kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xU=n(Kie,"A",{href:!0});var xDt=s(xU);zer=r(xDt,"from_pretrained()"),xDt.forEach(t),Qer=r(Kie," class method or the "),$U=n(Kie,"A",{href:!0});var $Dt=s($U);Wer=r($Dt,"from_config()"),$Dt.forEach(t),Uer=r(Kie,` class
method.`),Kie.forEach(t),Her=i(Bl),M$=n(Bl,"P",{});var eao=s(M$);Jer=r(eao,"This class cannot be instantiated directly using "),jFe=n(eao,"CODE",{});var kDt=s(jFe);Yer=r(kDt,"__init__()"),kDt.forEach(t),Zer=r(eao," (throws an error)."),eao.forEach(t),Ker=i(Bl),Et=n(Bl,"DIV",{class:!0});var yy=s(Et);T(E$.$$.fragment,yy),eor=i(yy),DFe=n(yy,"P",{});var SDt=s(DFe);oor=r(SDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SDt.forEach(t),ror=i(yy),Nd=n(yy,"P",{});var ede=s(Nd);tor=r(ede,`Note:
Loading a model from its configuration file does `),GFe=n(ede,"STRONG",{});var RDt=s(GFe);aor=r(RDt,"not"),RDt.forEach(t),nor=r(ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(ede,"A",{href:!0});var PDt=s(kU);sor=r(PDt,"from_pretrained()"),PDt.forEach(t),lor=r(ede," to load the model weights."),ede.forEach(t),ior=i(yy),T(vF.$$.fragment,yy),yy.forEach(t),dor=i(Bl),to=n(Bl,"DIV",{class:!0});var La=s(to);T(C$.$$.fragment,La),cor=i(La),OFe=n(La,"P",{});var BDt=s(OFe);mor=r(BDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BDt.forEach(t),gor=i(La),an=n(La,"P",{});var xy=s(an);hor=r(xy,"The model class to instantiate is selected based on the "),VFe=n(xy,"CODE",{});var IDt=s(VFe);uor=r(IDt,"model_type"),IDt.forEach(t),por=r(xy,` property of the config object (either
passed as an argument or loaded from `),XFe=n(xy,"CODE",{});var NDt=s(XFe);_or=r(NDt,"pretrained_model_name_or_path"),NDt.forEach(t),bor=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(xy,"CODE",{});var qDt=s(zFe);vor=r(qDt,"pretrained_model_name_or_path"),qDt.forEach(t),For=r(xy,":"),xy.forEach(t),Tor=i(La),fe=n(La,"UL",{});var pe=s(fe);FF=n(pe,"LI",{});var PVe=s(FF);QFe=n(PVe,"STRONG",{});var jDt=s(QFe);Mor=r(jDt,"bart"),jDt.forEach(t),Eor=r(PVe," \u2014 "),SU=n(PVe,"A",{href:!0});var DDt=s(SU);Cor=r(DDt,"BartForConditionalGeneration"),DDt.forEach(t),wor=r(PVe," (BART model)"),PVe.forEach(t),Aor=i(pe),TF=n(pe,"LI",{});var BVe=s(TF);WFe=n(BVe,"STRONG",{});var GDt=s(WFe);Lor=r(GDt,"bigbird_pegasus"),GDt.forEach(t),yor=r(BVe," \u2014 "),RU=n(BVe,"A",{href:!0});var ODt=s(RU);xor=r(ODt,"BigBirdPegasusForConditionalGeneration"),ODt.forEach(t),$or=r(BVe," (BigBird-Pegasus model)"),BVe.forEach(t),kor=i(pe),MF=n(pe,"LI",{});var IVe=s(MF);UFe=n(IVe,"STRONG",{});var VDt=s(UFe);Sor=r(VDt,"blenderbot"),VDt.forEach(t),Ror=r(IVe," \u2014 "),PU=n(IVe,"A",{href:!0});var XDt=s(PU);Por=r(XDt,"BlenderbotForConditionalGeneration"),XDt.forEach(t),Bor=r(IVe," (Blenderbot model)"),IVe.forEach(t),Ior=i(pe),EF=n(pe,"LI",{});var NVe=s(EF);HFe=n(NVe,"STRONG",{});var zDt=s(HFe);Nor=r(zDt,"blenderbot-small"),zDt.forEach(t),qor=r(NVe," \u2014 "),BU=n(NVe,"A",{href:!0});var QDt=s(BU);jor=r(QDt,"BlenderbotSmallForConditionalGeneration"),QDt.forEach(t),Dor=r(NVe," (BlenderbotSmall model)"),NVe.forEach(t),Gor=i(pe),CF=n(pe,"LI",{});var qVe=s(CF);JFe=n(qVe,"STRONG",{});var WDt=s(JFe);Oor=r(WDt,"encoder-decoder"),WDt.forEach(t),Vor=r(qVe," \u2014 "),IU=n(qVe,"A",{href:!0});var UDt=s(IU);Xor=r(UDt,"EncoderDecoderModel"),UDt.forEach(t),zor=r(qVe," (Encoder decoder model)"),qVe.forEach(t),Qor=i(pe),wF=n(pe,"LI",{});var jVe=s(wF);YFe=n(jVe,"STRONG",{});var HDt=s(YFe);Wor=r(HDt,"fsmt"),HDt.forEach(t),Uor=r(jVe," \u2014 "),NU=n(jVe,"A",{href:!0});var JDt=s(NU);Hor=r(JDt,"FSMTForConditionalGeneration"),JDt.forEach(t),Jor=r(jVe," (FairSeq Machine-Translation model)"),jVe.forEach(t),Yor=i(pe),AF=n(pe,"LI",{});var DVe=s(AF);ZFe=n(DVe,"STRONG",{});var YDt=s(ZFe);Zor=r(YDt,"led"),YDt.forEach(t),Kor=r(DVe," \u2014 "),qU=n(DVe,"A",{href:!0});var ZDt=s(qU);err=r(ZDt,"LEDForConditionalGeneration"),ZDt.forEach(t),orr=r(DVe," (LED model)"),DVe.forEach(t),rrr=i(pe),LF=n(pe,"LI",{});var GVe=s(LF);KFe=n(GVe,"STRONG",{});var KDt=s(KFe);trr=r(KDt,"longt5"),KDt.forEach(t),arr=r(GVe," \u2014 "),jU=n(GVe,"A",{href:!0});var eGt=s(jU);nrr=r(eGt,"LongT5ForConditionalGeneration"),eGt.forEach(t),srr=r(GVe," (LongT5 model)"),GVe.forEach(t),lrr=i(pe),yF=n(pe,"LI",{});var OVe=s(yF);eTe=n(OVe,"STRONG",{});var oGt=s(eTe);irr=r(oGt,"m2m_100"),oGt.forEach(t),drr=r(OVe," \u2014 "),DU=n(OVe,"A",{href:!0});var rGt=s(DU);crr=r(rGt,"M2M100ForConditionalGeneration"),rGt.forEach(t),mrr=r(OVe," (M2M100 model)"),OVe.forEach(t),frr=i(pe),xF=n(pe,"LI",{});var VVe=s(xF);oTe=n(VVe,"STRONG",{});var tGt=s(oTe);grr=r(tGt,"marian"),tGt.forEach(t),hrr=r(VVe," \u2014 "),GU=n(VVe,"A",{href:!0});var aGt=s(GU);urr=r(aGt,"MarianMTModel"),aGt.forEach(t),prr=r(VVe," (Marian model)"),VVe.forEach(t),_rr=i(pe),$F=n(pe,"LI",{});var XVe=s($F);rTe=n(XVe,"STRONG",{});var nGt=s(rTe);brr=r(nGt,"mbart"),nGt.forEach(t),vrr=r(XVe," \u2014 "),OU=n(XVe,"A",{href:!0});var sGt=s(OU);Frr=r(sGt,"MBartForConditionalGeneration"),sGt.forEach(t),Trr=r(XVe," (mBART model)"),XVe.forEach(t),Mrr=i(pe),kF=n(pe,"LI",{});var zVe=s(kF);tTe=n(zVe,"STRONG",{});var lGt=s(tTe);Err=r(lGt,"mt5"),lGt.forEach(t),Crr=r(zVe," \u2014 "),VU=n(zVe,"A",{href:!0});var iGt=s(VU);wrr=r(iGt,"MT5ForConditionalGeneration"),iGt.forEach(t),Arr=r(zVe," (MT5 model)"),zVe.forEach(t),Lrr=i(pe),SF=n(pe,"LI",{});var QVe=s(SF);aTe=n(QVe,"STRONG",{});var dGt=s(aTe);yrr=r(dGt,"mvp"),dGt.forEach(t),xrr=r(QVe," \u2014 "),XU=n(QVe,"A",{href:!0});var cGt=s(XU);$rr=r(cGt,"MvpForConditionalGeneration"),cGt.forEach(t),krr=r(QVe," (MVP model)"),QVe.forEach(t),Srr=i(pe),RF=n(pe,"LI",{});var WVe=s(RF);nTe=n(WVe,"STRONG",{});var mGt=s(nTe);Rrr=r(mGt,"nllb"),mGt.forEach(t),Prr=r(WVe," \u2014 "),zU=n(WVe,"A",{href:!0});var fGt=s(zU);Brr=r(fGt,"M2M100ForConditionalGeneration"),fGt.forEach(t),Irr=r(WVe," (NLLB model)"),WVe.forEach(t),Nrr=i(pe),PF=n(pe,"LI",{});var UVe=s(PF);sTe=n(UVe,"STRONG",{});var gGt=s(sTe);qrr=r(gGt,"pegasus"),gGt.forEach(t),jrr=r(UVe," \u2014 "),QU=n(UVe,"A",{href:!0});var hGt=s(QU);Drr=r(hGt,"PegasusForConditionalGeneration"),hGt.forEach(t),Grr=r(UVe," (Pegasus model)"),UVe.forEach(t),Orr=i(pe),BF=n(pe,"LI",{});var HVe=s(BF);lTe=n(HVe,"STRONG",{});var uGt=s(lTe);Vrr=r(uGt,"pegasus_x"),uGt.forEach(t),Xrr=r(HVe," \u2014 "),WU=n(HVe,"A",{href:!0});var pGt=s(WU);zrr=r(pGt,"PegasusXForConditionalGeneration"),pGt.forEach(t),Qrr=r(HVe," (PEGASUS-X model)"),HVe.forEach(t),Wrr=i(pe),IF=n(pe,"LI",{});var JVe=s(IF);iTe=n(JVe,"STRONG",{});var _Gt=s(iTe);Urr=r(_Gt,"plbart"),_Gt.forEach(t),Hrr=r(JVe," \u2014 "),UU=n(JVe,"A",{href:!0});var bGt=s(UU);Jrr=r(bGt,"PLBartForConditionalGeneration"),bGt.forEach(t),Yrr=r(JVe," (PLBart model)"),JVe.forEach(t),Zrr=i(pe),NF=n(pe,"LI",{});var YVe=s(NF);dTe=n(YVe,"STRONG",{});var vGt=s(dTe);Krr=r(vGt,"prophetnet"),vGt.forEach(t),etr=r(YVe," \u2014 "),HU=n(YVe,"A",{href:!0});var FGt=s(HU);otr=r(FGt,"ProphetNetForConditionalGeneration"),FGt.forEach(t),rtr=r(YVe," (ProphetNet model)"),YVe.forEach(t),ttr=i(pe),qF=n(pe,"LI",{});var ZVe=s(qF);cTe=n(ZVe,"STRONG",{});var TGt=s(cTe);atr=r(TGt,"t5"),TGt.forEach(t),ntr=r(ZVe," \u2014 "),JU=n(ZVe,"A",{href:!0});var MGt=s(JU);str=r(MGt,"T5ForConditionalGeneration"),MGt.forEach(t),ltr=r(ZVe," (T5 model)"),ZVe.forEach(t),itr=i(pe),jF=n(pe,"LI",{});var KVe=s(jF);mTe=n(KVe,"STRONG",{});var EGt=s(mTe);dtr=r(EGt,"xlm-prophetnet"),EGt.forEach(t),ctr=r(KVe," \u2014 "),YU=n(KVe,"A",{href:!0});var CGt=s(YU);mtr=r(CGt,"XLMProphetNetForConditionalGeneration"),CGt.forEach(t),ftr=r(KVe," (XLM-ProphetNet model)"),KVe.forEach(t),pe.forEach(t),gtr=i(La),DF=n(La,"P",{});var eXe=s(DF);htr=r(eXe,"The model is set in evaluation mode by default using "),fTe=n(eXe,"CODE",{});var wGt=s(fTe);utr=r(wGt,"model.eval()"),wGt.forEach(t),ptr=r(eXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gTe=n(eXe,"CODE",{});var AGt=s(gTe);_tr=r(AGt,"model.train()"),AGt.forEach(t),eXe.forEach(t),btr=i(La),T(GF.$$.fragment,La),La.forEach(t),Bl.forEach(t),joo=i(m),qd=n(m,"H2",{class:!0});var oao=s(qd);OF=n(oao,"A",{id:!0,class:!0,href:!0});var LGt=s(OF);hTe=n(LGt,"SPAN",{});var yGt=s(hTe);T(w$.$$.fragment,yGt),yGt.forEach(t),LGt.forEach(t),vtr=i(oao),uTe=n(oao,"SPAN",{});var xGt=s(uTe);Ftr=r(xGt,"AutoModelForSequenceClassification"),xGt.forEach(t),oao.forEach(t),Doo=i(m),Do=n(m,"DIV",{class:!0});var Il=s(Do);T(A$.$$.fragment,Il),Ttr=i(Il),jd=n(Il,"P",{});var ode=s(jd);Mtr=r(ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZU=n(ode,"A",{href:!0});var $Gt=s(ZU);Etr=r($Gt,"from_pretrained()"),$Gt.forEach(t),Ctr=r(ode," class method or the "),KU=n(ode,"A",{href:!0});var kGt=s(KU);wtr=r(kGt,"from_config()"),kGt.forEach(t),Atr=r(ode,` class
method.`),ode.forEach(t),Ltr=i(Il),L$=n(Il,"P",{});var rao=s(L$);ytr=r(rao,"This class cannot be instantiated directly using "),pTe=n(rao,"CODE",{});var SGt=s(pTe);xtr=r(SGt,"__init__()"),SGt.forEach(t),$tr=r(rao," (throws an error)."),rao.forEach(t),ktr=i(Il),Ct=n(Il,"DIV",{class:!0});var $y=s(Ct);T(y$.$$.fragment,$y),Str=i($y),_Te=n($y,"P",{});var RGt=s(_Te);Rtr=r(RGt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),RGt.forEach(t),Ptr=i($y),Dd=n($y,"P",{});var rde=s(Dd);Btr=r(rde,`Note:
Loading a model from its configuration file does `),bTe=n(rde,"STRONG",{});var PGt=s(bTe);Itr=r(PGt,"not"),PGt.forEach(t),Ntr=r(rde,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(rde,"A",{href:!0});var BGt=s(eH);qtr=r(BGt,"from_pretrained()"),BGt.forEach(t),jtr=r(rde," to load the model weights."),rde.forEach(t),Dtr=i($y),T(VF.$$.fragment,$y),$y.forEach(t),Gtr=i(Il),ao=n(Il,"DIV",{class:!0});var ya=s(ao);T(x$.$$.fragment,ya),Otr=i(ya),vTe=n(ya,"P",{});var IGt=s(vTe);Vtr=r(IGt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),IGt.forEach(t),Xtr=i(ya),nn=n(ya,"P",{});var ky=s(nn);ztr=r(ky,"The model class to instantiate is selected based on the "),FTe=n(ky,"CODE",{});var NGt=s(FTe);Qtr=r(NGt,"model_type"),NGt.forEach(t),Wtr=r(ky,` property of the config object (either
passed as an argument or loaded from `),TTe=n(ky,"CODE",{});var qGt=s(TTe);Utr=r(qGt,"pretrained_model_name_or_path"),qGt.forEach(t),Htr=r(ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(ky,"CODE",{});var jGt=s(MTe);Jtr=r(jGt,"pretrained_model_name_or_path"),jGt.forEach(t),Ytr=r(ky,":"),ky.forEach(t),Ztr=i(ya),q=n(ya,"UL",{});var D=s(q);XF=n(D,"LI",{});var oXe=s(XF);ETe=n(oXe,"STRONG",{});var DGt=s(ETe);Ktr=r(DGt,"albert"),DGt.forEach(t),ear=r(oXe," \u2014 "),oH=n(oXe,"A",{href:!0});var GGt=s(oH);oar=r(GGt,"AlbertForSequenceClassification"),GGt.forEach(t),rar=r(oXe," (ALBERT model)"),oXe.forEach(t),tar=i(D),zF=n(D,"LI",{});var rXe=s(zF);CTe=n(rXe,"STRONG",{});var OGt=s(CTe);aar=r(OGt,"bart"),OGt.forEach(t),nar=r(rXe," \u2014 "),rH=n(rXe,"A",{href:!0});var VGt=s(rH);sar=r(VGt,"BartForSequenceClassification"),VGt.forEach(t),lar=r(rXe," (BART model)"),rXe.forEach(t),iar=i(D),QF=n(D,"LI",{});var tXe=s(QF);wTe=n(tXe,"STRONG",{});var XGt=s(wTe);dar=r(XGt,"bert"),XGt.forEach(t),car=r(tXe," \u2014 "),tH=n(tXe,"A",{href:!0});var zGt=s(tH);mar=r(zGt,"BertForSequenceClassification"),zGt.forEach(t),far=r(tXe," (BERT model)"),tXe.forEach(t),gar=i(D),WF=n(D,"LI",{});var aXe=s(WF);ATe=n(aXe,"STRONG",{});var QGt=s(ATe);har=r(QGt,"big_bird"),QGt.forEach(t),uar=r(aXe," \u2014 "),aH=n(aXe,"A",{href:!0});var WGt=s(aH);par=r(WGt,"BigBirdForSequenceClassification"),WGt.forEach(t),_ar=r(aXe," (BigBird model)"),aXe.forEach(t),bar=i(D),UF=n(D,"LI",{});var nXe=s(UF);LTe=n(nXe,"STRONG",{});var UGt=s(LTe);Far=r(UGt,"bigbird_pegasus"),UGt.forEach(t),Tar=r(nXe," \u2014 "),nH=n(nXe,"A",{href:!0});var HGt=s(nH);Mar=r(HGt,"BigBirdPegasusForSequenceClassification"),HGt.forEach(t),Ear=r(nXe," (BigBird-Pegasus model)"),nXe.forEach(t),Car=i(D),HF=n(D,"LI",{});var sXe=s(HF);yTe=n(sXe,"STRONG",{});var JGt=s(yTe);war=r(JGt,"bloom"),JGt.forEach(t),Aar=r(sXe," \u2014 "),sH=n(sXe,"A",{href:!0});var YGt=s(sH);Lar=r(YGt,"BloomForSequenceClassification"),YGt.forEach(t),yar=r(sXe," (BLOOM model)"),sXe.forEach(t),xar=i(D),JF=n(D,"LI",{});var lXe=s(JF);xTe=n(lXe,"STRONG",{});var ZGt=s(xTe);$ar=r(ZGt,"camembert"),ZGt.forEach(t),kar=r(lXe," \u2014 "),lH=n(lXe,"A",{href:!0});var KGt=s(lH);Sar=r(KGt,"CamembertForSequenceClassification"),KGt.forEach(t),Rar=r(lXe," (CamemBERT model)"),lXe.forEach(t),Par=i(D),YF=n(D,"LI",{});var iXe=s(YF);$Te=n(iXe,"STRONG",{});var eOt=s($Te);Bar=r(eOt,"canine"),eOt.forEach(t),Iar=r(iXe," \u2014 "),iH=n(iXe,"A",{href:!0});var oOt=s(iH);Nar=r(oOt,"CanineForSequenceClassification"),oOt.forEach(t),qar=r(iXe," (CANINE model)"),iXe.forEach(t),jar=i(D),ZF=n(D,"LI",{});var dXe=s(ZF);kTe=n(dXe,"STRONG",{});var rOt=s(kTe);Dar=r(rOt,"convbert"),rOt.forEach(t),Gar=r(dXe," \u2014 "),dH=n(dXe,"A",{href:!0});var tOt=s(dH);Oar=r(tOt,"ConvBertForSequenceClassification"),tOt.forEach(t),Var=r(dXe," (ConvBERT model)"),dXe.forEach(t),Xar=i(D),KF=n(D,"LI",{});var cXe=s(KF);STe=n(cXe,"STRONG",{});var aOt=s(STe);zar=r(aOt,"ctrl"),aOt.forEach(t),Qar=r(cXe," \u2014 "),cH=n(cXe,"A",{href:!0});var nOt=s(cH);War=r(nOt,"CTRLForSequenceClassification"),nOt.forEach(t),Uar=r(cXe," (CTRL model)"),cXe.forEach(t),Har=i(D),eT=n(D,"LI",{});var mXe=s(eT);RTe=n(mXe,"STRONG",{});var sOt=s(RTe);Jar=r(sOt,"data2vec-text"),sOt.forEach(t),Yar=r(mXe," \u2014 "),mH=n(mXe,"A",{href:!0});var lOt=s(mH);Zar=r(lOt,"Data2VecTextForSequenceClassification"),lOt.forEach(t),Kar=r(mXe," (Data2VecText model)"),mXe.forEach(t),enr=i(D),oT=n(D,"LI",{});var fXe=s(oT);PTe=n(fXe,"STRONG",{});var iOt=s(PTe);onr=r(iOt,"deberta"),iOt.forEach(t),rnr=r(fXe," \u2014 "),fH=n(fXe,"A",{href:!0});var dOt=s(fH);tnr=r(dOt,"DebertaForSequenceClassification"),dOt.forEach(t),anr=r(fXe," (DeBERTa model)"),fXe.forEach(t),nnr=i(D),rT=n(D,"LI",{});var gXe=s(rT);BTe=n(gXe,"STRONG",{});var cOt=s(BTe);snr=r(cOt,"deberta-v2"),cOt.forEach(t),lnr=r(gXe," \u2014 "),gH=n(gXe,"A",{href:!0});var mOt=s(gH);inr=r(mOt,"DebertaV2ForSequenceClassification"),mOt.forEach(t),dnr=r(gXe," (DeBERTa-v2 model)"),gXe.forEach(t),cnr=i(D),tT=n(D,"LI",{});var hXe=s(tT);ITe=n(hXe,"STRONG",{});var fOt=s(ITe);mnr=r(fOt,"distilbert"),fOt.forEach(t),fnr=r(hXe," \u2014 "),hH=n(hXe,"A",{href:!0});var gOt=s(hH);gnr=r(gOt,"DistilBertForSequenceClassification"),gOt.forEach(t),hnr=r(hXe," (DistilBERT model)"),hXe.forEach(t),unr=i(D),aT=n(D,"LI",{});var uXe=s(aT);NTe=n(uXe,"STRONG",{});var hOt=s(NTe);pnr=r(hOt,"electra"),hOt.forEach(t),_nr=r(uXe," \u2014 "),uH=n(uXe,"A",{href:!0});var uOt=s(uH);bnr=r(uOt,"ElectraForSequenceClassification"),uOt.forEach(t),vnr=r(uXe," (ELECTRA model)"),uXe.forEach(t),Fnr=i(D),nT=n(D,"LI",{});var pXe=s(nT);qTe=n(pXe,"STRONG",{});var pOt=s(qTe);Tnr=r(pOt,"ernie"),pOt.forEach(t),Mnr=r(pXe," \u2014 "),pH=n(pXe,"A",{href:!0});var _Ot=s(pH);Enr=r(_Ot,"ErnieForSequenceClassification"),_Ot.forEach(t),Cnr=r(pXe," (ERNIE model)"),pXe.forEach(t),wnr=i(D),sT=n(D,"LI",{});var _Xe=s(sT);jTe=n(_Xe,"STRONG",{});var bOt=s(jTe);Anr=r(bOt,"esm"),bOt.forEach(t),Lnr=r(_Xe," \u2014 "),_H=n(_Xe,"A",{href:!0});var vOt=s(_H);ynr=r(vOt,"EsmForSequenceClassification"),vOt.forEach(t),xnr=r(_Xe," (ESM model)"),_Xe.forEach(t),$nr=i(D),lT=n(D,"LI",{});var bXe=s(lT);DTe=n(bXe,"STRONG",{});var FOt=s(DTe);knr=r(FOt,"flaubert"),FOt.forEach(t),Snr=r(bXe," \u2014 "),bH=n(bXe,"A",{href:!0});var TOt=s(bH);Rnr=r(TOt,"FlaubertForSequenceClassification"),TOt.forEach(t),Pnr=r(bXe," (FlauBERT model)"),bXe.forEach(t),Bnr=i(D),iT=n(D,"LI",{});var vXe=s(iT);GTe=n(vXe,"STRONG",{});var MOt=s(GTe);Inr=r(MOt,"fnet"),MOt.forEach(t),Nnr=r(vXe," \u2014 "),vH=n(vXe,"A",{href:!0});var EOt=s(vH);qnr=r(EOt,"FNetForSequenceClassification"),EOt.forEach(t),jnr=r(vXe," (FNet model)"),vXe.forEach(t),Dnr=i(D),dT=n(D,"LI",{});var FXe=s(dT);OTe=n(FXe,"STRONG",{});var COt=s(OTe);Gnr=r(COt,"funnel"),COt.forEach(t),Onr=r(FXe," \u2014 "),FH=n(FXe,"A",{href:!0});var wOt=s(FH);Vnr=r(wOt,"FunnelForSequenceClassification"),wOt.forEach(t),Xnr=r(FXe," (Funnel Transformer model)"),FXe.forEach(t),znr=i(D),cT=n(D,"LI",{});var TXe=s(cT);VTe=n(TXe,"STRONG",{});var AOt=s(VTe);Qnr=r(AOt,"gpt2"),AOt.forEach(t),Wnr=r(TXe," \u2014 "),TH=n(TXe,"A",{href:!0});var LOt=s(TH);Unr=r(LOt,"GPT2ForSequenceClassification"),LOt.forEach(t),Hnr=r(TXe," (OpenAI GPT-2 model)"),TXe.forEach(t),Jnr=i(D),mT=n(D,"LI",{});var MXe=s(mT);XTe=n(MXe,"STRONG",{});var yOt=s(XTe);Ynr=r(yOt,"gpt_neo"),yOt.forEach(t),Znr=r(MXe," \u2014 "),MH=n(MXe,"A",{href:!0});var xOt=s(MH);Knr=r(xOt,"GPTNeoForSequenceClassification"),xOt.forEach(t),esr=r(MXe," (GPT Neo model)"),MXe.forEach(t),osr=i(D),fT=n(D,"LI",{});var EXe=s(fT);zTe=n(EXe,"STRONG",{});var $Ot=s(zTe);rsr=r($Ot,"gptj"),$Ot.forEach(t),tsr=r(EXe," \u2014 "),EH=n(EXe,"A",{href:!0});var kOt=s(EH);asr=r(kOt,"GPTJForSequenceClassification"),kOt.forEach(t),nsr=r(EXe," (GPT-J model)"),EXe.forEach(t),ssr=i(D),gT=n(D,"LI",{});var CXe=s(gT);QTe=n(CXe,"STRONG",{});var SOt=s(QTe);lsr=r(SOt,"ibert"),SOt.forEach(t),isr=r(CXe," \u2014 "),CH=n(CXe,"A",{href:!0});var ROt=s(CH);dsr=r(ROt,"IBertForSequenceClassification"),ROt.forEach(t),csr=r(CXe," (I-BERT model)"),CXe.forEach(t),msr=i(D),hT=n(D,"LI",{});var wXe=s(hT);WTe=n(wXe,"STRONG",{});var POt=s(WTe);fsr=r(POt,"layoutlm"),POt.forEach(t),gsr=r(wXe," \u2014 "),wH=n(wXe,"A",{href:!0});var BOt=s(wH);hsr=r(BOt,"LayoutLMForSequenceClassification"),BOt.forEach(t),usr=r(wXe," (LayoutLM model)"),wXe.forEach(t),psr=i(D),uT=n(D,"LI",{});var AXe=s(uT);UTe=n(AXe,"STRONG",{});var IOt=s(UTe);_sr=r(IOt,"layoutlmv2"),IOt.forEach(t),bsr=r(AXe," \u2014 "),AH=n(AXe,"A",{href:!0});var NOt=s(AH);vsr=r(NOt,"LayoutLMv2ForSequenceClassification"),NOt.forEach(t),Fsr=r(AXe," (LayoutLMv2 model)"),AXe.forEach(t),Tsr=i(D),pT=n(D,"LI",{});var LXe=s(pT);HTe=n(LXe,"STRONG",{});var qOt=s(HTe);Msr=r(qOt,"layoutlmv3"),qOt.forEach(t),Esr=r(LXe," \u2014 "),LH=n(LXe,"A",{href:!0});var jOt=s(LH);Csr=r(jOt,"LayoutLMv3ForSequenceClassification"),jOt.forEach(t),wsr=r(LXe," (LayoutLMv3 model)"),LXe.forEach(t),Asr=i(D),_T=n(D,"LI",{});var yXe=s(_T);JTe=n(yXe,"STRONG",{});var DOt=s(JTe);Lsr=r(DOt,"led"),DOt.forEach(t),ysr=r(yXe," \u2014 "),yH=n(yXe,"A",{href:!0});var GOt=s(yH);xsr=r(GOt,"LEDForSequenceClassification"),GOt.forEach(t),$sr=r(yXe," (LED model)"),yXe.forEach(t),ksr=i(D),bT=n(D,"LI",{});var xXe=s(bT);YTe=n(xXe,"STRONG",{});var OOt=s(YTe);Ssr=r(OOt,"longformer"),OOt.forEach(t),Rsr=r(xXe," \u2014 "),xH=n(xXe,"A",{href:!0});var VOt=s(xH);Psr=r(VOt,"LongformerForSequenceClassification"),VOt.forEach(t),Bsr=r(xXe," (Longformer model)"),xXe.forEach(t),Isr=i(D),vT=n(D,"LI",{});var $Xe=s(vT);ZTe=n($Xe,"STRONG",{});var XOt=s(ZTe);Nsr=r(XOt,"luke"),XOt.forEach(t),qsr=r($Xe," \u2014 "),$H=n($Xe,"A",{href:!0});var zOt=s($H);jsr=r(zOt,"LukeForSequenceClassification"),zOt.forEach(t),Dsr=r($Xe," (LUKE model)"),$Xe.forEach(t),Gsr=i(D),FT=n(D,"LI",{});var kXe=s(FT);KTe=n(kXe,"STRONG",{});var QOt=s(KTe);Osr=r(QOt,"markuplm"),QOt.forEach(t),Vsr=r(kXe," \u2014 "),kH=n(kXe,"A",{href:!0});var WOt=s(kH);Xsr=r(WOt,"MarkupLMForSequenceClassification"),WOt.forEach(t),zsr=r(kXe," (MarkupLM model)"),kXe.forEach(t),Qsr=i(D),TT=n(D,"LI",{});var SXe=s(TT);eMe=n(SXe,"STRONG",{});var UOt=s(eMe);Wsr=r(UOt,"mbart"),UOt.forEach(t),Usr=r(SXe," \u2014 "),SH=n(SXe,"A",{href:!0});var HOt=s(SH);Hsr=r(HOt,"MBartForSequenceClassification"),HOt.forEach(t),Jsr=r(SXe," (mBART model)"),SXe.forEach(t),Ysr=i(D),MT=n(D,"LI",{});var RXe=s(MT);oMe=n(RXe,"STRONG",{});var JOt=s(oMe);Zsr=r(JOt,"megatron-bert"),JOt.forEach(t),Ksr=r(RXe," \u2014 "),RH=n(RXe,"A",{href:!0});var YOt=s(RH);elr=r(YOt,"MegatronBertForSequenceClassification"),YOt.forEach(t),olr=r(RXe," (Megatron-BERT model)"),RXe.forEach(t),rlr=i(D),ET=n(D,"LI",{});var PXe=s(ET);rMe=n(PXe,"STRONG",{});var ZOt=s(rMe);tlr=r(ZOt,"mobilebert"),ZOt.forEach(t),alr=r(PXe," \u2014 "),PH=n(PXe,"A",{href:!0});var KOt=s(PH);nlr=r(KOt,"MobileBertForSequenceClassification"),KOt.forEach(t),slr=r(PXe," (MobileBERT model)"),PXe.forEach(t),llr=i(D),CT=n(D,"LI",{});var BXe=s(CT);tMe=n(BXe,"STRONG",{});var eVt=s(tMe);ilr=r(eVt,"mpnet"),eVt.forEach(t),dlr=r(BXe," \u2014 "),BH=n(BXe,"A",{href:!0});var oVt=s(BH);clr=r(oVt,"MPNetForSequenceClassification"),oVt.forEach(t),mlr=r(BXe," (MPNet model)"),BXe.forEach(t),flr=i(D),wT=n(D,"LI",{});var IXe=s(wT);aMe=n(IXe,"STRONG",{});var rVt=s(aMe);glr=r(rVt,"mvp"),rVt.forEach(t),hlr=r(IXe," \u2014 "),IH=n(IXe,"A",{href:!0});var tVt=s(IH);ulr=r(tVt,"MvpForSequenceClassification"),tVt.forEach(t),plr=r(IXe," (MVP model)"),IXe.forEach(t),_lr=i(D),AT=n(D,"LI",{});var NXe=s(AT);nMe=n(NXe,"STRONG",{});var aVt=s(nMe);blr=r(aVt,"nezha"),aVt.forEach(t),vlr=r(NXe," \u2014 "),NH=n(NXe,"A",{href:!0});var nVt=s(NH);Flr=r(nVt,"NezhaForSequenceClassification"),nVt.forEach(t),Tlr=r(NXe," (Nezha model)"),NXe.forEach(t),Mlr=i(D),LT=n(D,"LI",{});var qXe=s(LT);sMe=n(qXe,"STRONG",{});var sVt=s(sMe);Elr=r(sVt,"nystromformer"),sVt.forEach(t),Clr=r(qXe," \u2014 "),qH=n(qXe,"A",{href:!0});var lVt=s(qH);wlr=r(lVt,"NystromformerForSequenceClassification"),lVt.forEach(t),Alr=r(qXe," (Nystr\xF6mformer model)"),qXe.forEach(t),Llr=i(D),yT=n(D,"LI",{});var jXe=s(yT);lMe=n(jXe,"STRONG",{});var iVt=s(lMe);ylr=r(iVt,"openai-gpt"),iVt.forEach(t),xlr=r(jXe," \u2014 "),jH=n(jXe,"A",{href:!0});var dVt=s(jH);$lr=r(dVt,"OpenAIGPTForSequenceClassification"),dVt.forEach(t),klr=r(jXe," (OpenAI GPT model)"),jXe.forEach(t),Slr=i(D),xT=n(D,"LI",{});var DXe=s(xT);iMe=n(DXe,"STRONG",{});var cVt=s(iMe);Rlr=r(cVt,"opt"),cVt.forEach(t),Plr=r(DXe," \u2014 "),DH=n(DXe,"A",{href:!0});var mVt=s(DH);Blr=r(mVt,"OPTForSequenceClassification"),mVt.forEach(t),Ilr=r(DXe," (OPT model)"),DXe.forEach(t),Nlr=i(D),$T=n(D,"LI",{});var GXe=s($T);dMe=n(GXe,"STRONG",{});var fVt=s(dMe);qlr=r(fVt,"perceiver"),fVt.forEach(t),jlr=r(GXe," \u2014 "),GH=n(GXe,"A",{href:!0});var gVt=s(GH);Dlr=r(gVt,"PerceiverForSequenceClassification"),gVt.forEach(t),Glr=r(GXe," (Perceiver model)"),GXe.forEach(t),Olr=i(D),kT=n(D,"LI",{});var OXe=s(kT);cMe=n(OXe,"STRONG",{});var hVt=s(cMe);Vlr=r(hVt,"plbart"),hVt.forEach(t),Xlr=r(OXe," \u2014 "),OH=n(OXe,"A",{href:!0});var uVt=s(OH);zlr=r(uVt,"PLBartForSequenceClassification"),uVt.forEach(t),Qlr=r(OXe," (PLBart model)"),OXe.forEach(t),Wlr=i(D),ST=n(D,"LI",{});var VXe=s(ST);mMe=n(VXe,"STRONG",{});var pVt=s(mMe);Ulr=r(pVt,"qdqbert"),pVt.forEach(t),Hlr=r(VXe," \u2014 "),VH=n(VXe,"A",{href:!0});var _Vt=s(VH);Jlr=r(_Vt,"QDQBertForSequenceClassification"),_Vt.forEach(t),Ylr=r(VXe," (QDQBert model)"),VXe.forEach(t),Zlr=i(D),RT=n(D,"LI",{});var XXe=s(RT);fMe=n(XXe,"STRONG",{});var bVt=s(fMe);Klr=r(bVt,"reformer"),bVt.forEach(t),eir=r(XXe," \u2014 "),XH=n(XXe,"A",{href:!0});var vVt=s(XH);oir=r(vVt,"ReformerForSequenceClassification"),vVt.forEach(t),rir=r(XXe," (Reformer model)"),XXe.forEach(t),tir=i(D),PT=n(D,"LI",{});var zXe=s(PT);gMe=n(zXe,"STRONG",{});var FVt=s(gMe);air=r(FVt,"rembert"),FVt.forEach(t),nir=r(zXe," \u2014 "),zH=n(zXe,"A",{href:!0});var TVt=s(zH);sir=r(TVt,"RemBertForSequenceClassification"),TVt.forEach(t),lir=r(zXe," (RemBERT model)"),zXe.forEach(t),iir=i(D),BT=n(D,"LI",{});var QXe=s(BT);hMe=n(QXe,"STRONG",{});var MVt=s(hMe);dir=r(MVt,"roberta"),MVt.forEach(t),cir=r(QXe," \u2014 "),QH=n(QXe,"A",{href:!0});var EVt=s(QH);mir=r(EVt,"RobertaForSequenceClassification"),EVt.forEach(t),fir=r(QXe," (RoBERTa model)"),QXe.forEach(t),gir=i(D),IT=n(D,"LI",{});var WXe=s(IT);uMe=n(WXe,"STRONG",{});var CVt=s(uMe);hir=r(CVt,"roformer"),CVt.forEach(t),uir=r(WXe," \u2014 "),WH=n(WXe,"A",{href:!0});var wVt=s(WH);pir=r(wVt,"RoFormerForSequenceClassification"),wVt.forEach(t),_ir=r(WXe," (RoFormer model)"),WXe.forEach(t),bir=i(D),NT=n(D,"LI",{});var UXe=s(NT);pMe=n(UXe,"STRONG",{});var AVt=s(pMe);vir=r(AVt,"squeezebert"),AVt.forEach(t),Fir=r(UXe," \u2014 "),UH=n(UXe,"A",{href:!0});var LVt=s(UH);Tir=r(LVt,"SqueezeBertForSequenceClassification"),LVt.forEach(t),Mir=r(UXe," (SqueezeBERT model)"),UXe.forEach(t),Eir=i(D),qT=n(D,"LI",{});var HXe=s(qT);_Me=n(HXe,"STRONG",{});var yVt=s(_Me);Cir=r(yVt,"tapas"),yVt.forEach(t),wir=r(HXe," \u2014 "),HH=n(HXe,"A",{href:!0});var xVt=s(HH);Air=r(xVt,"TapasForSequenceClassification"),xVt.forEach(t),Lir=r(HXe," (TAPAS model)"),HXe.forEach(t),yir=i(D),jT=n(D,"LI",{});var JXe=s(jT);bMe=n(JXe,"STRONG",{});var $Vt=s(bMe);xir=r($Vt,"transfo-xl"),$Vt.forEach(t),$ir=r(JXe," \u2014 "),JH=n(JXe,"A",{href:!0});var kVt=s(JH);kir=r(kVt,"TransfoXLForSequenceClassification"),kVt.forEach(t),Sir=r(JXe," (Transformer-XL model)"),JXe.forEach(t),Rir=i(D),DT=n(D,"LI",{});var YXe=s(DT);vMe=n(YXe,"STRONG",{});var SVt=s(vMe);Pir=r(SVt,"xlm"),SVt.forEach(t),Bir=r(YXe," \u2014 "),YH=n(YXe,"A",{href:!0});var RVt=s(YH);Iir=r(RVt,"XLMForSequenceClassification"),RVt.forEach(t),Nir=r(YXe," (XLM model)"),YXe.forEach(t),qir=i(D),GT=n(D,"LI",{});var ZXe=s(GT);FMe=n(ZXe,"STRONG",{});var PVt=s(FMe);jir=r(PVt,"xlm-roberta"),PVt.forEach(t),Dir=r(ZXe," \u2014 "),ZH=n(ZXe,"A",{href:!0});var BVt=s(ZH);Gir=r(BVt,"XLMRobertaForSequenceClassification"),BVt.forEach(t),Oir=r(ZXe," (XLM-RoBERTa model)"),ZXe.forEach(t),Vir=i(D),OT=n(D,"LI",{});var KXe=s(OT);TMe=n(KXe,"STRONG",{});var IVt=s(TMe);Xir=r(IVt,"xlm-roberta-xl"),IVt.forEach(t),zir=r(KXe," \u2014 "),KH=n(KXe,"A",{href:!0});var NVt=s(KH);Qir=r(NVt,"XLMRobertaXLForSequenceClassification"),NVt.forEach(t),Wir=r(KXe," (XLM-RoBERTa-XL model)"),KXe.forEach(t),Uir=i(D),VT=n(D,"LI",{});var eze=s(VT);MMe=n(eze,"STRONG",{});var qVt=s(MMe);Hir=r(qVt,"xlnet"),qVt.forEach(t),Jir=r(eze," \u2014 "),eJ=n(eze,"A",{href:!0});var jVt=s(eJ);Yir=r(jVt,"XLNetForSequenceClassification"),jVt.forEach(t),Zir=r(eze," (XLNet model)"),eze.forEach(t),Kir=i(D),XT=n(D,"LI",{});var oze=s(XT);EMe=n(oze,"STRONG",{});var DVt=s(EMe);edr=r(DVt,"yoso"),DVt.forEach(t),odr=r(oze," \u2014 "),oJ=n(oze,"A",{href:!0});var GVt=s(oJ);rdr=r(GVt,"YosoForSequenceClassification"),GVt.forEach(t),tdr=r(oze," (YOSO model)"),oze.forEach(t),D.forEach(t),adr=i(ya),zT=n(ya,"P",{});var rze=s(zT);ndr=r(rze,"The model is set in evaluation mode by default using "),CMe=n(rze,"CODE",{});var OVt=s(CMe);sdr=r(OVt,"model.eval()"),OVt.forEach(t),ldr=r(rze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wMe=n(rze,"CODE",{});var VVt=s(wMe);idr=r(VVt,"model.train()"),VVt.forEach(t),rze.forEach(t),ddr=i(ya),T(QT.$$.fragment,ya),ya.forEach(t),Il.forEach(t),Goo=i(m),Gd=n(m,"H2",{class:!0});var tao=s(Gd);WT=n(tao,"A",{id:!0,class:!0,href:!0});var XVt=s(WT);AMe=n(XVt,"SPAN",{});var zVt=s(AMe);T($$.$$.fragment,zVt),zVt.forEach(t),XVt.forEach(t),cdr=i(tao),LMe=n(tao,"SPAN",{});var QVt=s(LMe);mdr=r(QVt,"AutoModelForMultipleChoice"),QVt.forEach(t),tao.forEach(t),Ooo=i(m),Go=n(m,"DIV",{class:!0});var Nl=s(Go);T(k$.$$.fragment,Nl),fdr=i(Nl),Od=n(Nl,"P",{});var tde=s(Od);gdr=r(tde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rJ=n(tde,"A",{href:!0});var WVt=s(rJ);hdr=r(WVt,"from_pretrained()"),WVt.forEach(t),udr=r(tde," class method or the "),tJ=n(tde,"A",{href:!0});var UVt=s(tJ);pdr=r(UVt,"from_config()"),UVt.forEach(t),_dr=r(tde,` class
method.`),tde.forEach(t),bdr=i(Nl),S$=n(Nl,"P",{});var aao=s(S$);vdr=r(aao,"This class cannot be instantiated directly using "),yMe=n(aao,"CODE",{});var HVt=s(yMe);Fdr=r(HVt,"__init__()"),HVt.forEach(t),Tdr=r(aao," (throws an error)."),aao.forEach(t),Mdr=i(Nl),wt=n(Nl,"DIV",{class:!0});var Sy=s(wt);T(R$.$$.fragment,Sy),Edr=i(Sy),xMe=n(Sy,"P",{});var JVt=s(xMe);Cdr=r(JVt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JVt.forEach(t),wdr=i(Sy),Vd=n(Sy,"P",{});var ade=s(Vd);Adr=r(ade,`Note:
Loading a model from its configuration file does `),$Me=n(ade,"STRONG",{});var YVt=s($Me);Ldr=r(YVt,"not"),YVt.forEach(t),ydr=r(ade,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(ade,"A",{href:!0});var ZVt=s(aJ);xdr=r(ZVt,"from_pretrained()"),ZVt.forEach(t),$dr=r(ade," to load the model weights."),ade.forEach(t),kdr=i(Sy),T(UT.$$.fragment,Sy),Sy.forEach(t),Sdr=i(Nl),no=n(Nl,"DIV",{class:!0});var xa=s(no);T(P$.$$.fragment,xa),Rdr=i(xa),kMe=n(xa,"P",{});var KVt=s(kMe);Pdr=r(KVt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KVt.forEach(t),Bdr=i(xa),sn=n(xa,"P",{});var Ry=s(sn);Idr=r(Ry,"The model class to instantiate is selected based on the "),SMe=n(Ry,"CODE",{});var eXt=s(SMe);Ndr=r(eXt,"model_type"),eXt.forEach(t),qdr=r(Ry,` property of the config object (either
passed as an argument or loaded from `),RMe=n(Ry,"CODE",{});var oXt=s(RMe);jdr=r(oXt,"pretrained_model_name_or_path"),oXt.forEach(t),Ddr=r(Ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(Ry,"CODE",{});var rXt=s(PMe);Gdr=r(rXt,"pretrained_model_name_or_path"),rXt.forEach(t),Odr=r(Ry,":"),Ry.forEach(t),Vdr=i(xa),K=n(xa,"UL",{});var ee=s(K);HT=n(ee,"LI",{});var tze=s(HT);BMe=n(tze,"STRONG",{});var tXt=s(BMe);Xdr=r(tXt,"albert"),tXt.forEach(t),zdr=r(tze," \u2014 "),nJ=n(tze,"A",{href:!0});var aXt=s(nJ);Qdr=r(aXt,"AlbertForMultipleChoice"),aXt.forEach(t),Wdr=r(tze," (ALBERT model)"),tze.forEach(t),Udr=i(ee),JT=n(ee,"LI",{});var aze=s(JT);IMe=n(aze,"STRONG",{});var nXt=s(IMe);Hdr=r(nXt,"bert"),nXt.forEach(t),Jdr=r(aze," \u2014 "),sJ=n(aze,"A",{href:!0});var sXt=s(sJ);Ydr=r(sXt,"BertForMultipleChoice"),sXt.forEach(t),Zdr=r(aze," (BERT model)"),aze.forEach(t),Kdr=i(ee),YT=n(ee,"LI",{});var nze=s(YT);NMe=n(nze,"STRONG",{});var lXt=s(NMe);ecr=r(lXt,"big_bird"),lXt.forEach(t),ocr=r(nze," \u2014 "),lJ=n(nze,"A",{href:!0});var iXt=s(lJ);rcr=r(iXt,"BigBirdForMultipleChoice"),iXt.forEach(t),tcr=r(nze," (BigBird model)"),nze.forEach(t),acr=i(ee),ZT=n(ee,"LI",{});var sze=s(ZT);qMe=n(sze,"STRONG",{});var dXt=s(qMe);ncr=r(dXt,"camembert"),dXt.forEach(t),scr=r(sze," \u2014 "),iJ=n(sze,"A",{href:!0});var cXt=s(iJ);lcr=r(cXt,"CamembertForMultipleChoice"),cXt.forEach(t),icr=r(sze," (CamemBERT model)"),sze.forEach(t),dcr=i(ee),KT=n(ee,"LI",{});var lze=s(KT);jMe=n(lze,"STRONG",{});var mXt=s(jMe);ccr=r(mXt,"canine"),mXt.forEach(t),mcr=r(lze," \u2014 "),dJ=n(lze,"A",{href:!0});var fXt=s(dJ);fcr=r(fXt,"CanineForMultipleChoice"),fXt.forEach(t),gcr=r(lze," (CANINE model)"),lze.forEach(t),hcr=i(ee),eM=n(ee,"LI",{});var ize=s(eM);DMe=n(ize,"STRONG",{});var gXt=s(DMe);ucr=r(gXt,"convbert"),gXt.forEach(t),pcr=r(ize," \u2014 "),cJ=n(ize,"A",{href:!0});var hXt=s(cJ);_cr=r(hXt,"ConvBertForMultipleChoice"),hXt.forEach(t),bcr=r(ize," (ConvBERT model)"),ize.forEach(t),vcr=i(ee),oM=n(ee,"LI",{});var dze=s(oM);GMe=n(dze,"STRONG",{});var uXt=s(GMe);Fcr=r(uXt,"data2vec-text"),uXt.forEach(t),Tcr=r(dze," \u2014 "),mJ=n(dze,"A",{href:!0});var pXt=s(mJ);Mcr=r(pXt,"Data2VecTextForMultipleChoice"),pXt.forEach(t),Ecr=r(dze," (Data2VecText model)"),dze.forEach(t),Ccr=i(ee),rM=n(ee,"LI",{});var cze=s(rM);OMe=n(cze,"STRONG",{});var _Xt=s(OMe);wcr=r(_Xt,"deberta-v2"),_Xt.forEach(t),Acr=r(cze," \u2014 "),fJ=n(cze,"A",{href:!0});var bXt=s(fJ);Lcr=r(bXt,"DebertaV2ForMultipleChoice"),bXt.forEach(t),ycr=r(cze," (DeBERTa-v2 model)"),cze.forEach(t),xcr=i(ee),tM=n(ee,"LI",{});var mze=s(tM);VMe=n(mze,"STRONG",{});var vXt=s(VMe);$cr=r(vXt,"distilbert"),vXt.forEach(t),kcr=r(mze," \u2014 "),gJ=n(mze,"A",{href:!0});var FXt=s(gJ);Scr=r(FXt,"DistilBertForMultipleChoice"),FXt.forEach(t),Rcr=r(mze," (DistilBERT model)"),mze.forEach(t),Pcr=i(ee),aM=n(ee,"LI",{});var fze=s(aM);XMe=n(fze,"STRONG",{});var TXt=s(XMe);Bcr=r(TXt,"electra"),TXt.forEach(t),Icr=r(fze," \u2014 "),hJ=n(fze,"A",{href:!0});var MXt=s(hJ);Ncr=r(MXt,"ElectraForMultipleChoice"),MXt.forEach(t),qcr=r(fze," (ELECTRA model)"),fze.forEach(t),jcr=i(ee),nM=n(ee,"LI",{});var gze=s(nM);zMe=n(gze,"STRONG",{});var EXt=s(zMe);Dcr=r(EXt,"ernie"),EXt.forEach(t),Gcr=r(gze," \u2014 "),uJ=n(gze,"A",{href:!0});var CXt=s(uJ);Ocr=r(CXt,"ErnieForMultipleChoice"),CXt.forEach(t),Vcr=r(gze," (ERNIE model)"),gze.forEach(t),Xcr=i(ee),sM=n(ee,"LI",{});var hze=s(sM);QMe=n(hze,"STRONG",{});var wXt=s(QMe);zcr=r(wXt,"flaubert"),wXt.forEach(t),Qcr=r(hze," \u2014 "),pJ=n(hze,"A",{href:!0});var AXt=s(pJ);Wcr=r(AXt,"FlaubertForMultipleChoice"),AXt.forEach(t),Ucr=r(hze," (FlauBERT model)"),hze.forEach(t),Hcr=i(ee),lM=n(ee,"LI",{});var uze=s(lM);WMe=n(uze,"STRONG",{});var LXt=s(WMe);Jcr=r(LXt,"fnet"),LXt.forEach(t),Ycr=r(uze," \u2014 "),_J=n(uze,"A",{href:!0});var yXt=s(_J);Zcr=r(yXt,"FNetForMultipleChoice"),yXt.forEach(t),Kcr=r(uze," (FNet model)"),uze.forEach(t),emr=i(ee),iM=n(ee,"LI",{});var pze=s(iM);UMe=n(pze,"STRONG",{});var xXt=s(UMe);omr=r(xXt,"funnel"),xXt.forEach(t),rmr=r(pze," \u2014 "),bJ=n(pze,"A",{href:!0});var $Xt=s(bJ);tmr=r($Xt,"FunnelForMultipleChoice"),$Xt.forEach(t),amr=r(pze," (Funnel Transformer model)"),pze.forEach(t),nmr=i(ee),dM=n(ee,"LI",{});var _ze=s(dM);HMe=n(_ze,"STRONG",{});var kXt=s(HMe);smr=r(kXt,"ibert"),kXt.forEach(t),lmr=r(_ze," \u2014 "),vJ=n(_ze,"A",{href:!0});var SXt=s(vJ);imr=r(SXt,"IBertForMultipleChoice"),SXt.forEach(t),dmr=r(_ze," (I-BERT model)"),_ze.forEach(t),cmr=i(ee),cM=n(ee,"LI",{});var bze=s(cM);JMe=n(bze,"STRONG",{});var RXt=s(JMe);mmr=r(RXt,"longformer"),RXt.forEach(t),fmr=r(bze," \u2014 "),FJ=n(bze,"A",{href:!0});var PXt=s(FJ);gmr=r(PXt,"LongformerForMultipleChoice"),PXt.forEach(t),hmr=r(bze," (Longformer model)"),bze.forEach(t),umr=i(ee),mM=n(ee,"LI",{});var vze=s(mM);YMe=n(vze,"STRONG",{});var BXt=s(YMe);pmr=r(BXt,"luke"),BXt.forEach(t),_mr=r(vze," \u2014 "),TJ=n(vze,"A",{href:!0});var IXt=s(TJ);bmr=r(IXt,"LukeForMultipleChoice"),IXt.forEach(t),vmr=r(vze," (LUKE model)"),vze.forEach(t),Fmr=i(ee),fM=n(ee,"LI",{});var Fze=s(fM);ZMe=n(Fze,"STRONG",{});var NXt=s(ZMe);Tmr=r(NXt,"megatron-bert"),NXt.forEach(t),Mmr=r(Fze," \u2014 "),MJ=n(Fze,"A",{href:!0});var qXt=s(MJ);Emr=r(qXt,"MegatronBertForMultipleChoice"),qXt.forEach(t),Cmr=r(Fze," (Megatron-BERT model)"),Fze.forEach(t),wmr=i(ee),gM=n(ee,"LI",{});var Tze=s(gM);KMe=n(Tze,"STRONG",{});var jXt=s(KMe);Amr=r(jXt,"mobilebert"),jXt.forEach(t),Lmr=r(Tze," \u2014 "),EJ=n(Tze,"A",{href:!0});var DXt=s(EJ);ymr=r(DXt,"MobileBertForMultipleChoice"),DXt.forEach(t),xmr=r(Tze," (MobileBERT model)"),Tze.forEach(t),$mr=i(ee),hM=n(ee,"LI",{});var Mze=s(hM);eEe=n(Mze,"STRONG",{});var GXt=s(eEe);kmr=r(GXt,"mpnet"),GXt.forEach(t),Smr=r(Mze," \u2014 "),CJ=n(Mze,"A",{href:!0});var OXt=s(CJ);Rmr=r(OXt,"MPNetForMultipleChoice"),OXt.forEach(t),Pmr=r(Mze," (MPNet model)"),Mze.forEach(t),Bmr=i(ee),uM=n(ee,"LI",{});var Eze=s(uM);oEe=n(Eze,"STRONG",{});var VXt=s(oEe);Imr=r(VXt,"nezha"),VXt.forEach(t),Nmr=r(Eze," \u2014 "),wJ=n(Eze,"A",{href:!0});var XXt=s(wJ);qmr=r(XXt,"NezhaForMultipleChoice"),XXt.forEach(t),jmr=r(Eze," (Nezha model)"),Eze.forEach(t),Dmr=i(ee),pM=n(ee,"LI",{});var Cze=s(pM);rEe=n(Cze,"STRONG",{});var zXt=s(rEe);Gmr=r(zXt,"nystromformer"),zXt.forEach(t),Omr=r(Cze," \u2014 "),AJ=n(Cze,"A",{href:!0});var QXt=s(AJ);Vmr=r(QXt,"NystromformerForMultipleChoice"),QXt.forEach(t),Xmr=r(Cze," (Nystr\xF6mformer model)"),Cze.forEach(t),zmr=i(ee),_M=n(ee,"LI",{});var wze=s(_M);tEe=n(wze,"STRONG",{});var WXt=s(tEe);Qmr=r(WXt,"qdqbert"),WXt.forEach(t),Wmr=r(wze," \u2014 "),LJ=n(wze,"A",{href:!0});var UXt=s(LJ);Umr=r(UXt,"QDQBertForMultipleChoice"),UXt.forEach(t),Hmr=r(wze," (QDQBert model)"),wze.forEach(t),Jmr=i(ee),bM=n(ee,"LI",{});var Aze=s(bM);aEe=n(Aze,"STRONG",{});var HXt=s(aEe);Ymr=r(HXt,"rembert"),HXt.forEach(t),Zmr=r(Aze," \u2014 "),yJ=n(Aze,"A",{href:!0});var JXt=s(yJ);Kmr=r(JXt,"RemBertForMultipleChoice"),JXt.forEach(t),efr=r(Aze," (RemBERT model)"),Aze.forEach(t),ofr=i(ee),vM=n(ee,"LI",{});var Lze=s(vM);nEe=n(Lze,"STRONG",{});var YXt=s(nEe);rfr=r(YXt,"roberta"),YXt.forEach(t),tfr=r(Lze," \u2014 "),xJ=n(Lze,"A",{href:!0});var ZXt=s(xJ);afr=r(ZXt,"RobertaForMultipleChoice"),ZXt.forEach(t),nfr=r(Lze," (RoBERTa model)"),Lze.forEach(t),sfr=i(ee),FM=n(ee,"LI",{});var yze=s(FM);sEe=n(yze,"STRONG",{});var KXt=s(sEe);lfr=r(KXt,"roformer"),KXt.forEach(t),ifr=r(yze," \u2014 "),$J=n(yze,"A",{href:!0});var ezt=s($J);dfr=r(ezt,"RoFormerForMultipleChoice"),ezt.forEach(t),cfr=r(yze," (RoFormer model)"),yze.forEach(t),mfr=i(ee),TM=n(ee,"LI",{});var xze=s(TM);lEe=n(xze,"STRONG",{});var ozt=s(lEe);ffr=r(ozt,"squeezebert"),ozt.forEach(t),gfr=r(xze," \u2014 "),kJ=n(xze,"A",{href:!0});var rzt=s(kJ);hfr=r(rzt,"SqueezeBertForMultipleChoice"),rzt.forEach(t),ufr=r(xze," (SqueezeBERT model)"),xze.forEach(t),pfr=i(ee),MM=n(ee,"LI",{});var $ze=s(MM);iEe=n($ze,"STRONG",{});var tzt=s(iEe);_fr=r(tzt,"xlm"),tzt.forEach(t),bfr=r($ze," \u2014 "),SJ=n($ze,"A",{href:!0});var azt=s(SJ);vfr=r(azt,"XLMForMultipleChoice"),azt.forEach(t),Ffr=r($ze," (XLM model)"),$ze.forEach(t),Tfr=i(ee),EM=n(ee,"LI",{});var kze=s(EM);dEe=n(kze,"STRONG",{});var nzt=s(dEe);Mfr=r(nzt,"xlm-roberta"),nzt.forEach(t),Efr=r(kze," \u2014 "),RJ=n(kze,"A",{href:!0});var szt=s(RJ);Cfr=r(szt,"XLMRobertaForMultipleChoice"),szt.forEach(t),wfr=r(kze," (XLM-RoBERTa model)"),kze.forEach(t),Afr=i(ee),CM=n(ee,"LI",{});var Sze=s(CM);cEe=n(Sze,"STRONG",{});var lzt=s(cEe);Lfr=r(lzt,"xlm-roberta-xl"),lzt.forEach(t),yfr=r(Sze," \u2014 "),PJ=n(Sze,"A",{href:!0});var izt=s(PJ);xfr=r(izt,"XLMRobertaXLForMultipleChoice"),izt.forEach(t),$fr=r(Sze," (XLM-RoBERTa-XL model)"),Sze.forEach(t),kfr=i(ee),wM=n(ee,"LI",{});var Rze=s(wM);mEe=n(Rze,"STRONG",{});var dzt=s(mEe);Sfr=r(dzt,"xlnet"),dzt.forEach(t),Rfr=r(Rze," \u2014 "),BJ=n(Rze,"A",{href:!0});var czt=s(BJ);Pfr=r(czt,"XLNetForMultipleChoice"),czt.forEach(t),Bfr=r(Rze," (XLNet model)"),Rze.forEach(t),Ifr=i(ee),AM=n(ee,"LI",{});var Pze=s(AM);fEe=n(Pze,"STRONG",{});var mzt=s(fEe);Nfr=r(mzt,"yoso"),mzt.forEach(t),qfr=r(Pze," \u2014 "),IJ=n(Pze,"A",{href:!0});var fzt=s(IJ);jfr=r(fzt,"YosoForMultipleChoice"),fzt.forEach(t),Dfr=r(Pze," (YOSO model)"),Pze.forEach(t),ee.forEach(t),Gfr=i(xa),LM=n(xa,"P",{});var Bze=s(LM);Ofr=r(Bze,"The model is set in evaluation mode by default using "),gEe=n(Bze,"CODE",{});var gzt=s(gEe);Vfr=r(gzt,"model.eval()"),gzt.forEach(t),Xfr=r(Bze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hEe=n(Bze,"CODE",{});var hzt=s(hEe);zfr=r(hzt,"model.train()"),hzt.forEach(t),Bze.forEach(t),Qfr=i(xa),T(yM.$$.fragment,xa),xa.forEach(t),Nl.forEach(t),Voo=i(m),Xd=n(m,"H2",{class:!0});var nao=s(Xd);xM=n(nao,"A",{id:!0,class:!0,href:!0});var uzt=s(xM);uEe=n(uzt,"SPAN",{});var pzt=s(uEe);T(B$.$$.fragment,pzt),pzt.forEach(t),uzt.forEach(t),Wfr=i(nao),pEe=n(nao,"SPAN",{});var _zt=s(pEe);Ufr=r(_zt,"AutoModelForNextSentencePrediction"),_zt.forEach(t),nao.forEach(t),Xoo=i(m),Oo=n(m,"DIV",{class:!0});var ql=s(Oo);T(I$.$$.fragment,ql),Hfr=i(ql),zd=n(ql,"P",{});var nde=s(zd);Jfr=r(nde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NJ=n(nde,"A",{href:!0});var bzt=s(NJ);Yfr=r(bzt,"from_pretrained()"),bzt.forEach(t),Zfr=r(nde," class method or the "),qJ=n(nde,"A",{href:!0});var vzt=s(qJ);Kfr=r(vzt,"from_config()"),vzt.forEach(t),egr=r(nde,` class
method.`),nde.forEach(t),ogr=i(ql),N$=n(ql,"P",{});var sao=s(N$);rgr=r(sao,"This class cannot be instantiated directly using "),_Ee=n(sao,"CODE",{});var Fzt=s(_Ee);tgr=r(Fzt,"__init__()"),Fzt.forEach(t),agr=r(sao," (throws an error)."),sao.forEach(t),ngr=i(ql),At=n(ql,"DIV",{class:!0});var Py=s(At);T(q$.$$.fragment,Py),sgr=i(Py),bEe=n(Py,"P",{});var Tzt=s(bEe);lgr=r(Tzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tzt.forEach(t),igr=i(Py),Qd=n(Py,"P",{});var sde=s(Qd);dgr=r(sde,`Note:
Loading a model from its configuration file does `),vEe=n(sde,"STRONG",{});var Mzt=s(vEe);cgr=r(Mzt,"not"),Mzt.forEach(t),mgr=r(sde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(sde,"A",{href:!0});var Ezt=s(jJ);fgr=r(Ezt,"from_pretrained()"),Ezt.forEach(t),ggr=r(sde," to load the model weights."),sde.forEach(t),hgr=i(Py),T($M.$$.fragment,Py),Py.forEach(t),ugr=i(ql),so=n(ql,"DIV",{class:!0});var $a=s(so);T(j$.$$.fragment,$a),pgr=i($a),FEe=n($a,"P",{});var Czt=s(FEe);_gr=r(Czt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Czt.forEach(t),bgr=i($a),ln=n($a,"P",{});var By=s(ln);vgr=r(By,"The model class to instantiate is selected based on the "),TEe=n(By,"CODE",{});var wzt=s(TEe);Fgr=r(wzt,"model_type"),wzt.forEach(t),Tgr=r(By,` property of the config object (either
passed as an argument or loaded from `),MEe=n(By,"CODE",{});var Azt=s(MEe);Mgr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),Egr=r(By,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EEe=n(By,"CODE",{});var Lzt=s(EEe);Cgr=r(Lzt,"pretrained_model_name_or_path"),Lzt.forEach(t),wgr=r(By,":"),By.forEach(t),Agr=i($a),Ue=n($a,"UL",{});var ft=s(Ue);kM=n(ft,"LI",{});var Ize=s(kM);CEe=n(Ize,"STRONG",{});var yzt=s(CEe);Lgr=r(yzt,"bert"),yzt.forEach(t),ygr=r(Ize," \u2014 "),DJ=n(Ize,"A",{href:!0});var xzt=s(DJ);xgr=r(xzt,"BertForNextSentencePrediction"),xzt.forEach(t),$gr=r(Ize," (BERT model)"),Ize.forEach(t),kgr=i(ft),SM=n(ft,"LI",{});var Nze=s(SM);wEe=n(Nze,"STRONG",{});var $zt=s(wEe);Sgr=r($zt,"ernie"),$zt.forEach(t),Rgr=r(Nze," \u2014 "),GJ=n(Nze,"A",{href:!0});var kzt=s(GJ);Pgr=r(kzt,"ErnieForNextSentencePrediction"),kzt.forEach(t),Bgr=r(Nze," (ERNIE model)"),Nze.forEach(t),Igr=i(ft),RM=n(ft,"LI",{});var qze=s(RM);AEe=n(qze,"STRONG",{});var Szt=s(AEe);Ngr=r(Szt,"fnet"),Szt.forEach(t),qgr=r(qze," \u2014 "),OJ=n(qze,"A",{href:!0});var Rzt=s(OJ);jgr=r(Rzt,"FNetForNextSentencePrediction"),Rzt.forEach(t),Dgr=r(qze," (FNet model)"),qze.forEach(t),Ggr=i(ft),PM=n(ft,"LI",{});var jze=s(PM);LEe=n(jze,"STRONG",{});var Pzt=s(LEe);Ogr=r(Pzt,"megatron-bert"),Pzt.forEach(t),Vgr=r(jze," \u2014 "),VJ=n(jze,"A",{href:!0});var Bzt=s(VJ);Xgr=r(Bzt,"MegatronBertForNextSentencePrediction"),Bzt.forEach(t),zgr=r(jze," (Megatron-BERT model)"),jze.forEach(t),Qgr=i(ft),BM=n(ft,"LI",{});var Dze=s(BM);yEe=n(Dze,"STRONG",{});var Izt=s(yEe);Wgr=r(Izt,"mobilebert"),Izt.forEach(t),Ugr=r(Dze," \u2014 "),XJ=n(Dze,"A",{href:!0});var Nzt=s(XJ);Hgr=r(Nzt,"MobileBertForNextSentencePrediction"),Nzt.forEach(t),Jgr=r(Dze," (MobileBERT model)"),Dze.forEach(t),Ygr=i(ft),IM=n(ft,"LI",{});var Gze=s(IM);xEe=n(Gze,"STRONG",{});var qzt=s(xEe);Zgr=r(qzt,"nezha"),qzt.forEach(t),Kgr=r(Gze," \u2014 "),zJ=n(Gze,"A",{href:!0});var jzt=s(zJ);ehr=r(jzt,"NezhaForNextSentencePrediction"),jzt.forEach(t),ohr=r(Gze," (Nezha model)"),Gze.forEach(t),rhr=i(ft),NM=n(ft,"LI",{});var Oze=s(NM);$Ee=n(Oze,"STRONG",{});var Dzt=s($Ee);thr=r(Dzt,"qdqbert"),Dzt.forEach(t),ahr=r(Oze," \u2014 "),QJ=n(Oze,"A",{href:!0});var Gzt=s(QJ);nhr=r(Gzt,"QDQBertForNextSentencePrediction"),Gzt.forEach(t),shr=r(Oze," (QDQBert model)"),Oze.forEach(t),ft.forEach(t),lhr=i($a),qM=n($a,"P",{});var Vze=s(qM);ihr=r(Vze,"The model is set in evaluation mode by default using "),kEe=n(Vze,"CODE",{});var Ozt=s(kEe);dhr=r(Ozt,"model.eval()"),Ozt.forEach(t),chr=r(Vze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SEe=n(Vze,"CODE",{});var Vzt=s(SEe);mhr=r(Vzt,"model.train()"),Vzt.forEach(t),Vze.forEach(t),fhr=i($a),T(jM.$$.fragment,$a),$a.forEach(t),ql.forEach(t),zoo=i(m),Wd=n(m,"H2",{class:!0});var lao=s(Wd);DM=n(lao,"A",{id:!0,class:!0,href:!0});var Xzt=s(DM);REe=n(Xzt,"SPAN",{});var zzt=s(REe);T(D$.$$.fragment,zzt),zzt.forEach(t),Xzt.forEach(t),ghr=i(lao),PEe=n(lao,"SPAN",{});var Qzt=s(PEe);hhr=r(Qzt,"AutoModelForTokenClassification"),Qzt.forEach(t),lao.forEach(t),Qoo=i(m),Vo=n(m,"DIV",{class:!0});var jl=s(Vo);T(G$.$$.fragment,jl),uhr=i(jl),Ud=n(jl,"P",{});var lde=s(Ud);phr=r(lde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WJ=n(lde,"A",{href:!0});var Wzt=s(WJ);_hr=r(Wzt,"from_pretrained()"),Wzt.forEach(t),bhr=r(lde," class method or the "),UJ=n(lde,"A",{href:!0});var Uzt=s(UJ);vhr=r(Uzt,"from_config()"),Uzt.forEach(t),Fhr=r(lde,` class
method.`),lde.forEach(t),Thr=i(jl),O$=n(jl,"P",{});var iao=s(O$);Mhr=r(iao,"This class cannot be instantiated directly using "),BEe=n(iao,"CODE",{});var Hzt=s(BEe);Ehr=r(Hzt,"__init__()"),Hzt.forEach(t),Chr=r(iao," (throws an error)."),iao.forEach(t),whr=i(jl),Lt=n(jl,"DIV",{class:!0});var Iy=s(Lt);T(V$.$$.fragment,Iy),Ahr=i(Iy),IEe=n(Iy,"P",{});var Jzt=s(IEe);Lhr=r(Jzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jzt.forEach(t),yhr=i(Iy),Hd=n(Iy,"P",{});var ide=s(Hd);xhr=r(ide,`Note:
Loading a model from its configuration file does `),NEe=n(ide,"STRONG",{});var Yzt=s(NEe);$hr=r(Yzt,"not"),Yzt.forEach(t),khr=r(ide,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(ide,"A",{href:!0});var Zzt=s(HJ);Shr=r(Zzt,"from_pretrained()"),Zzt.forEach(t),Rhr=r(ide," to load the model weights."),ide.forEach(t),Phr=i(Iy),T(GM.$$.fragment,Iy),Iy.forEach(t),Bhr=i(jl),lo=n(jl,"DIV",{class:!0});var ka=s(lo);T(X$.$$.fragment,ka),Ihr=i(ka),qEe=n(ka,"P",{});var Kzt=s(qEe);Nhr=r(Kzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Kzt.forEach(t),qhr=i(ka),dn=n(ka,"P",{});var Ny=s(dn);jhr=r(Ny,"The model class to instantiate is selected based on the "),jEe=n(Ny,"CODE",{});var eQt=s(jEe);Dhr=r(eQt,"model_type"),eQt.forEach(t),Ghr=r(Ny,` property of the config object (either
passed as an argument or loaded from `),DEe=n(Ny,"CODE",{});var oQt=s(DEe);Ohr=r(oQt,"pretrained_model_name_or_path"),oQt.forEach(t),Vhr=r(Ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(Ny,"CODE",{});var rQt=s(GEe);Xhr=r(rQt,"pretrained_model_name_or_path"),rQt.forEach(t),zhr=r(Ny,":"),Ny.forEach(t),Qhr=i(ka),H=n(ka,"UL",{});var Y=s(H);OM=n(Y,"LI",{});var Xze=s(OM);OEe=n(Xze,"STRONG",{});var tQt=s(OEe);Whr=r(tQt,"albert"),tQt.forEach(t),Uhr=r(Xze," \u2014 "),JJ=n(Xze,"A",{href:!0});var aQt=s(JJ);Hhr=r(aQt,"AlbertForTokenClassification"),aQt.forEach(t),Jhr=r(Xze," (ALBERT model)"),Xze.forEach(t),Yhr=i(Y),VM=n(Y,"LI",{});var zze=s(VM);VEe=n(zze,"STRONG",{});var nQt=s(VEe);Zhr=r(nQt,"bert"),nQt.forEach(t),Khr=r(zze," \u2014 "),YJ=n(zze,"A",{href:!0});var sQt=s(YJ);eur=r(sQt,"BertForTokenClassification"),sQt.forEach(t),our=r(zze," (BERT model)"),zze.forEach(t),rur=i(Y),XM=n(Y,"LI",{});var Qze=s(XM);XEe=n(Qze,"STRONG",{});var lQt=s(XEe);tur=r(lQt,"big_bird"),lQt.forEach(t),aur=r(Qze," \u2014 "),ZJ=n(Qze,"A",{href:!0});var iQt=s(ZJ);nur=r(iQt,"BigBirdForTokenClassification"),iQt.forEach(t),sur=r(Qze," (BigBird model)"),Qze.forEach(t),lur=i(Y),zM=n(Y,"LI",{});var Wze=s(zM);zEe=n(Wze,"STRONG",{});var dQt=s(zEe);iur=r(dQt,"bloom"),dQt.forEach(t),dur=r(Wze," \u2014 "),KJ=n(Wze,"A",{href:!0});var cQt=s(KJ);cur=r(cQt,"BloomForTokenClassification"),cQt.forEach(t),mur=r(Wze," (BLOOM model)"),Wze.forEach(t),fur=i(Y),QM=n(Y,"LI",{});var Uze=s(QM);QEe=n(Uze,"STRONG",{});var mQt=s(QEe);gur=r(mQt,"camembert"),mQt.forEach(t),hur=r(Uze," \u2014 "),eY=n(Uze,"A",{href:!0});var fQt=s(eY);uur=r(fQt,"CamembertForTokenClassification"),fQt.forEach(t),pur=r(Uze," (CamemBERT model)"),Uze.forEach(t),_ur=i(Y),WM=n(Y,"LI",{});var Hze=s(WM);WEe=n(Hze,"STRONG",{});var gQt=s(WEe);bur=r(gQt,"canine"),gQt.forEach(t),vur=r(Hze," \u2014 "),oY=n(Hze,"A",{href:!0});var hQt=s(oY);Fur=r(hQt,"CanineForTokenClassification"),hQt.forEach(t),Tur=r(Hze," (CANINE model)"),Hze.forEach(t),Mur=i(Y),UM=n(Y,"LI",{});var Jze=s(UM);UEe=n(Jze,"STRONG",{});var uQt=s(UEe);Eur=r(uQt,"convbert"),uQt.forEach(t),Cur=r(Jze," \u2014 "),rY=n(Jze,"A",{href:!0});var pQt=s(rY);wur=r(pQt,"ConvBertForTokenClassification"),pQt.forEach(t),Aur=r(Jze," (ConvBERT model)"),Jze.forEach(t),Lur=i(Y),HM=n(Y,"LI",{});var Yze=s(HM);HEe=n(Yze,"STRONG",{});var _Qt=s(HEe);yur=r(_Qt,"data2vec-text"),_Qt.forEach(t),xur=r(Yze," \u2014 "),tY=n(Yze,"A",{href:!0});var bQt=s(tY);$ur=r(bQt,"Data2VecTextForTokenClassification"),bQt.forEach(t),kur=r(Yze," (Data2VecText model)"),Yze.forEach(t),Sur=i(Y),JM=n(Y,"LI",{});var Zze=s(JM);JEe=n(Zze,"STRONG",{});var vQt=s(JEe);Rur=r(vQt,"deberta"),vQt.forEach(t),Pur=r(Zze," \u2014 "),aY=n(Zze,"A",{href:!0});var FQt=s(aY);Bur=r(FQt,"DebertaForTokenClassification"),FQt.forEach(t),Iur=r(Zze," (DeBERTa model)"),Zze.forEach(t),Nur=i(Y),YM=n(Y,"LI",{});var Kze=s(YM);YEe=n(Kze,"STRONG",{});var TQt=s(YEe);qur=r(TQt,"deberta-v2"),TQt.forEach(t),jur=r(Kze," \u2014 "),nY=n(Kze,"A",{href:!0});var MQt=s(nY);Dur=r(MQt,"DebertaV2ForTokenClassification"),MQt.forEach(t),Gur=r(Kze," (DeBERTa-v2 model)"),Kze.forEach(t),Our=i(Y),ZM=n(Y,"LI",{});var eQe=s(ZM);ZEe=n(eQe,"STRONG",{});var EQt=s(ZEe);Vur=r(EQt,"distilbert"),EQt.forEach(t),Xur=r(eQe," \u2014 "),sY=n(eQe,"A",{href:!0});var CQt=s(sY);zur=r(CQt,"DistilBertForTokenClassification"),CQt.forEach(t),Qur=r(eQe," (DistilBERT model)"),eQe.forEach(t),Wur=i(Y),KM=n(Y,"LI",{});var oQe=s(KM);KEe=n(oQe,"STRONG",{});var wQt=s(KEe);Uur=r(wQt,"electra"),wQt.forEach(t),Hur=r(oQe," \u2014 "),lY=n(oQe,"A",{href:!0});var AQt=s(lY);Jur=r(AQt,"ElectraForTokenClassification"),AQt.forEach(t),Yur=r(oQe," (ELECTRA model)"),oQe.forEach(t),Zur=i(Y),eE=n(Y,"LI",{});var rQe=s(eE);e4e=n(rQe,"STRONG",{});var LQt=s(e4e);Kur=r(LQt,"ernie"),LQt.forEach(t),epr=r(rQe," \u2014 "),iY=n(rQe,"A",{href:!0});var yQt=s(iY);opr=r(yQt,"ErnieForTokenClassification"),yQt.forEach(t),rpr=r(rQe," (ERNIE model)"),rQe.forEach(t),tpr=i(Y),oE=n(Y,"LI",{});var tQe=s(oE);o4e=n(tQe,"STRONG",{});var xQt=s(o4e);apr=r(xQt,"esm"),xQt.forEach(t),npr=r(tQe," \u2014 "),dY=n(tQe,"A",{href:!0});var $Qt=s(dY);spr=r($Qt,"EsmForTokenClassification"),$Qt.forEach(t),lpr=r(tQe," (ESM model)"),tQe.forEach(t),ipr=i(Y),rE=n(Y,"LI",{});var aQe=s(rE);r4e=n(aQe,"STRONG",{});var kQt=s(r4e);dpr=r(kQt,"flaubert"),kQt.forEach(t),cpr=r(aQe," \u2014 "),cY=n(aQe,"A",{href:!0});var SQt=s(cY);mpr=r(SQt,"FlaubertForTokenClassification"),SQt.forEach(t),fpr=r(aQe," (FlauBERT model)"),aQe.forEach(t),gpr=i(Y),tE=n(Y,"LI",{});var nQe=s(tE);t4e=n(nQe,"STRONG",{});var RQt=s(t4e);hpr=r(RQt,"fnet"),RQt.forEach(t),upr=r(nQe," \u2014 "),mY=n(nQe,"A",{href:!0});var PQt=s(mY);ppr=r(PQt,"FNetForTokenClassification"),PQt.forEach(t),_pr=r(nQe," (FNet model)"),nQe.forEach(t),bpr=i(Y),aE=n(Y,"LI",{});var sQe=s(aE);a4e=n(sQe,"STRONG",{});var BQt=s(a4e);vpr=r(BQt,"funnel"),BQt.forEach(t),Fpr=r(sQe," \u2014 "),fY=n(sQe,"A",{href:!0});var IQt=s(fY);Tpr=r(IQt,"FunnelForTokenClassification"),IQt.forEach(t),Mpr=r(sQe," (Funnel Transformer model)"),sQe.forEach(t),Epr=i(Y),nE=n(Y,"LI",{});var lQe=s(nE);n4e=n(lQe,"STRONG",{});var NQt=s(n4e);Cpr=r(NQt,"gpt2"),NQt.forEach(t),wpr=r(lQe," \u2014 "),gY=n(lQe,"A",{href:!0});var qQt=s(gY);Apr=r(qQt,"GPT2ForTokenClassification"),qQt.forEach(t),Lpr=r(lQe," (OpenAI GPT-2 model)"),lQe.forEach(t),ypr=i(Y),sE=n(Y,"LI",{});var iQe=s(sE);s4e=n(iQe,"STRONG",{});var jQt=s(s4e);xpr=r(jQt,"ibert"),jQt.forEach(t),$pr=r(iQe," \u2014 "),hY=n(iQe,"A",{href:!0});var DQt=s(hY);kpr=r(DQt,"IBertForTokenClassification"),DQt.forEach(t),Spr=r(iQe," (I-BERT model)"),iQe.forEach(t),Rpr=i(Y),lE=n(Y,"LI",{});var dQe=s(lE);l4e=n(dQe,"STRONG",{});var GQt=s(l4e);Ppr=r(GQt,"layoutlm"),GQt.forEach(t),Bpr=r(dQe," \u2014 "),uY=n(dQe,"A",{href:!0});var OQt=s(uY);Ipr=r(OQt,"LayoutLMForTokenClassification"),OQt.forEach(t),Npr=r(dQe," (LayoutLM model)"),dQe.forEach(t),qpr=i(Y),iE=n(Y,"LI",{});var cQe=s(iE);i4e=n(cQe,"STRONG",{});var VQt=s(i4e);jpr=r(VQt,"layoutlmv2"),VQt.forEach(t),Dpr=r(cQe," \u2014 "),pY=n(cQe,"A",{href:!0});var XQt=s(pY);Gpr=r(XQt,"LayoutLMv2ForTokenClassification"),XQt.forEach(t),Opr=r(cQe," (LayoutLMv2 model)"),cQe.forEach(t),Vpr=i(Y),dE=n(Y,"LI",{});var mQe=s(dE);d4e=n(mQe,"STRONG",{});var zQt=s(d4e);Xpr=r(zQt,"layoutlmv3"),zQt.forEach(t),zpr=r(mQe," \u2014 "),_Y=n(mQe,"A",{href:!0});var QQt=s(_Y);Qpr=r(QQt,"LayoutLMv3ForTokenClassification"),QQt.forEach(t),Wpr=r(mQe," (LayoutLMv3 model)"),mQe.forEach(t),Upr=i(Y),cE=n(Y,"LI",{});var fQe=s(cE);c4e=n(fQe,"STRONG",{});var WQt=s(c4e);Hpr=r(WQt,"longformer"),WQt.forEach(t),Jpr=r(fQe," \u2014 "),bY=n(fQe,"A",{href:!0});var UQt=s(bY);Ypr=r(UQt,"LongformerForTokenClassification"),UQt.forEach(t),Zpr=r(fQe," (Longformer model)"),fQe.forEach(t),Kpr=i(Y),mE=n(Y,"LI",{});var gQe=s(mE);m4e=n(gQe,"STRONG",{});var HQt=s(m4e);e_r=r(HQt,"luke"),HQt.forEach(t),o_r=r(gQe," \u2014 "),vY=n(gQe,"A",{href:!0});var JQt=s(vY);r_r=r(JQt,"LukeForTokenClassification"),JQt.forEach(t),t_r=r(gQe," (LUKE model)"),gQe.forEach(t),a_r=i(Y),fE=n(Y,"LI",{});var hQe=s(fE);f4e=n(hQe,"STRONG",{});var YQt=s(f4e);n_r=r(YQt,"markuplm"),YQt.forEach(t),s_r=r(hQe," \u2014 "),FY=n(hQe,"A",{href:!0});var ZQt=s(FY);l_r=r(ZQt,"MarkupLMForTokenClassification"),ZQt.forEach(t),i_r=r(hQe," (MarkupLM model)"),hQe.forEach(t),d_r=i(Y),gE=n(Y,"LI",{});var uQe=s(gE);g4e=n(uQe,"STRONG",{});var KQt=s(g4e);c_r=r(KQt,"megatron-bert"),KQt.forEach(t),m_r=r(uQe," \u2014 "),TY=n(uQe,"A",{href:!0});var eWt=s(TY);f_r=r(eWt,"MegatronBertForTokenClassification"),eWt.forEach(t),g_r=r(uQe," (Megatron-BERT model)"),uQe.forEach(t),h_r=i(Y),hE=n(Y,"LI",{});var pQe=s(hE);h4e=n(pQe,"STRONG",{});var oWt=s(h4e);u_r=r(oWt,"mobilebert"),oWt.forEach(t),p_r=r(pQe," \u2014 "),MY=n(pQe,"A",{href:!0});var rWt=s(MY);__r=r(rWt,"MobileBertForTokenClassification"),rWt.forEach(t),b_r=r(pQe," (MobileBERT model)"),pQe.forEach(t),v_r=i(Y),uE=n(Y,"LI",{});var _Qe=s(uE);u4e=n(_Qe,"STRONG",{});var tWt=s(u4e);F_r=r(tWt,"mpnet"),tWt.forEach(t),T_r=r(_Qe," \u2014 "),EY=n(_Qe,"A",{href:!0});var aWt=s(EY);M_r=r(aWt,"MPNetForTokenClassification"),aWt.forEach(t),E_r=r(_Qe," (MPNet model)"),_Qe.forEach(t),C_r=i(Y),pE=n(Y,"LI",{});var bQe=s(pE);p4e=n(bQe,"STRONG",{});var nWt=s(p4e);w_r=r(nWt,"nezha"),nWt.forEach(t),A_r=r(bQe," \u2014 "),CY=n(bQe,"A",{href:!0});var sWt=s(CY);L_r=r(sWt,"NezhaForTokenClassification"),sWt.forEach(t),y_r=r(bQe," (Nezha model)"),bQe.forEach(t),x_r=i(Y),_E=n(Y,"LI",{});var vQe=s(_E);_4e=n(vQe,"STRONG",{});var lWt=s(_4e);$_r=r(lWt,"nystromformer"),lWt.forEach(t),k_r=r(vQe," \u2014 "),wY=n(vQe,"A",{href:!0});var iWt=s(wY);S_r=r(iWt,"NystromformerForTokenClassification"),iWt.forEach(t),R_r=r(vQe," (Nystr\xF6mformer model)"),vQe.forEach(t),P_r=i(Y),bE=n(Y,"LI",{});var FQe=s(bE);b4e=n(FQe,"STRONG",{});var dWt=s(b4e);B_r=r(dWt,"qdqbert"),dWt.forEach(t),I_r=r(FQe," \u2014 "),AY=n(FQe,"A",{href:!0});var cWt=s(AY);N_r=r(cWt,"QDQBertForTokenClassification"),cWt.forEach(t),q_r=r(FQe," (QDQBert model)"),FQe.forEach(t),j_r=i(Y),vE=n(Y,"LI",{});var TQe=s(vE);v4e=n(TQe,"STRONG",{});var mWt=s(v4e);D_r=r(mWt,"rembert"),mWt.forEach(t),G_r=r(TQe," \u2014 "),LY=n(TQe,"A",{href:!0});var fWt=s(LY);O_r=r(fWt,"RemBertForTokenClassification"),fWt.forEach(t),V_r=r(TQe," (RemBERT model)"),TQe.forEach(t),X_r=i(Y),FE=n(Y,"LI",{});var MQe=s(FE);F4e=n(MQe,"STRONG",{});var gWt=s(F4e);z_r=r(gWt,"roberta"),gWt.forEach(t),Q_r=r(MQe," \u2014 "),yY=n(MQe,"A",{href:!0});var hWt=s(yY);W_r=r(hWt,"RobertaForTokenClassification"),hWt.forEach(t),U_r=r(MQe," (RoBERTa model)"),MQe.forEach(t),H_r=i(Y),TE=n(Y,"LI",{});var EQe=s(TE);T4e=n(EQe,"STRONG",{});var uWt=s(T4e);J_r=r(uWt,"roformer"),uWt.forEach(t),Y_r=r(EQe," \u2014 "),xY=n(EQe,"A",{href:!0});var pWt=s(xY);Z_r=r(pWt,"RoFormerForTokenClassification"),pWt.forEach(t),K_r=r(EQe," (RoFormer model)"),EQe.forEach(t),e1r=i(Y),ME=n(Y,"LI",{});var CQe=s(ME);M4e=n(CQe,"STRONG",{});var _Wt=s(M4e);o1r=r(_Wt,"squeezebert"),_Wt.forEach(t),r1r=r(CQe," \u2014 "),$Y=n(CQe,"A",{href:!0});var bWt=s($Y);t1r=r(bWt,"SqueezeBertForTokenClassification"),bWt.forEach(t),a1r=r(CQe," (SqueezeBERT model)"),CQe.forEach(t),n1r=i(Y),EE=n(Y,"LI",{});var wQe=s(EE);E4e=n(wQe,"STRONG",{});var vWt=s(E4e);s1r=r(vWt,"xlm"),vWt.forEach(t),l1r=r(wQe," \u2014 "),kY=n(wQe,"A",{href:!0});var FWt=s(kY);i1r=r(FWt,"XLMForTokenClassification"),FWt.forEach(t),d1r=r(wQe," (XLM model)"),wQe.forEach(t),c1r=i(Y),CE=n(Y,"LI",{});var AQe=s(CE);C4e=n(AQe,"STRONG",{});var TWt=s(C4e);m1r=r(TWt,"xlm-roberta"),TWt.forEach(t),f1r=r(AQe," \u2014 "),SY=n(AQe,"A",{href:!0});var MWt=s(SY);g1r=r(MWt,"XLMRobertaForTokenClassification"),MWt.forEach(t),h1r=r(AQe," (XLM-RoBERTa model)"),AQe.forEach(t),u1r=i(Y),wE=n(Y,"LI",{});var LQe=s(wE);w4e=n(LQe,"STRONG",{});var EWt=s(w4e);p1r=r(EWt,"xlm-roberta-xl"),EWt.forEach(t),_1r=r(LQe," \u2014 "),RY=n(LQe,"A",{href:!0});var CWt=s(RY);b1r=r(CWt,"XLMRobertaXLForTokenClassification"),CWt.forEach(t),v1r=r(LQe," (XLM-RoBERTa-XL model)"),LQe.forEach(t),F1r=i(Y),AE=n(Y,"LI",{});var yQe=s(AE);A4e=n(yQe,"STRONG",{});var wWt=s(A4e);T1r=r(wWt,"xlnet"),wWt.forEach(t),M1r=r(yQe," \u2014 "),PY=n(yQe,"A",{href:!0});var AWt=s(PY);E1r=r(AWt,"XLNetForTokenClassification"),AWt.forEach(t),C1r=r(yQe," (XLNet model)"),yQe.forEach(t),w1r=i(Y),LE=n(Y,"LI",{});var xQe=s(LE);L4e=n(xQe,"STRONG",{});var LWt=s(L4e);A1r=r(LWt,"yoso"),LWt.forEach(t),L1r=r(xQe," \u2014 "),BY=n(xQe,"A",{href:!0});var yWt=s(BY);y1r=r(yWt,"YosoForTokenClassification"),yWt.forEach(t),x1r=r(xQe," (YOSO model)"),xQe.forEach(t),Y.forEach(t),$1r=i(ka),yE=n(ka,"P",{});var $Qe=s(yE);k1r=r($Qe,"The model is set in evaluation mode by default using "),y4e=n($Qe,"CODE",{});var xWt=s(y4e);S1r=r(xWt,"model.eval()"),xWt.forEach(t),R1r=r($Qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x4e=n($Qe,"CODE",{});var $Wt=s(x4e);P1r=r($Wt,"model.train()"),$Wt.forEach(t),$Qe.forEach(t),B1r=i(ka),T(xE.$$.fragment,ka),ka.forEach(t),jl.forEach(t),Woo=i(m),Jd=n(m,"H2",{class:!0});var dao=s(Jd);$E=n(dao,"A",{id:!0,class:!0,href:!0});var kWt=s($E);$4e=n(kWt,"SPAN",{});var SWt=s($4e);T(z$.$$.fragment,SWt),SWt.forEach(t),kWt.forEach(t),I1r=i(dao),k4e=n(dao,"SPAN",{});var RWt=s(k4e);N1r=r(RWt,"AutoModelForQuestionAnswering"),RWt.forEach(t),dao.forEach(t),Uoo=i(m),Xo=n(m,"DIV",{class:!0});var Dl=s(Xo);T(Q$.$$.fragment,Dl),q1r=i(Dl),Yd=n(Dl,"P",{});var dde=s(Yd);j1r=r(dde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=n(dde,"A",{href:!0});var PWt=s(IY);D1r=r(PWt,"from_pretrained()"),PWt.forEach(t),G1r=r(dde," class method or the "),NY=n(dde,"A",{href:!0});var BWt=s(NY);O1r=r(BWt,"from_config()"),BWt.forEach(t),V1r=r(dde,` class
method.`),dde.forEach(t),X1r=i(Dl),W$=n(Dl,"P",{});var cao=s(W$);z1r=r(cao,"This class cannot be instantiated directly using "),S4e=n(cao,"CODE",{});var IWt=s(S4e);Q1r=r(IWt,"__init__()"),IWt.forEach(t),W1r=r(cao," (throws an error)."),cao.forEach(t),U1r=i(Dl),yt=n(Dl,"DIV",{class:!0});var qy=s(yt);T(U$.$$.fragment,qy),H1r=i(qy),R4e=n(qy,"P",{});var NWt=s(R4e);J1r=r(NWt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NWt.forEach(t),Y1r=i(qy),Zd=n(qy,"P",{});var cde=s(Zd);Z1r=r(cde,`Note:
Loading a model from its configuration file does `),P4e=n(cde,"STRONG",{});var qWt=s(P4e);K1r=r(qWt,"not"),qWt.forEach(t),e2r=r(cde,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(cde,"A",{href:!0});var jWt=s(qY);o2r=r(jWt,"from_pretrained()"),jWt.forEach(t),r2r=r(cde," to load the model weights."),cde.forEach(t),t2r=i(qy),T(kE.$$.fragment,qy),qy.forEach(t),a2r=i(Dl),io=n(Dl,"DIV",{class:!0});var Sa=s(io);T(H$.$$.fragment,Sa),n2r=i(Sa),B4e=n(Sa,"P",{});var DWt=s(B4e);s2r=r(DWt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DWt.forEach(t),l2r=i(Sa),cn=n(Sa,"P",{});var jy=s(cn);i2r=r(jy,"The model class to instantiate is selected based on the "),I4e=n(jy,"CODE",{});var GWt=s(I4e);d2r=r(GWt,"model_type"),GWt.forEach(t),c2r=r(jy,` property of the config object (either
passed as an argument or loaded from `),N4e=n(jy,"CODE",{});var OWt=s(N4e);m2r=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),f2r=r(jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(jy,"CODE",{});var VWt=s(q4e);g2r=r(VWt,"pretrained_model_name_or_path"),VWt.forEach(t),h2r=r(jy,":"),jy.forEach(t),u2r=i(Sa),O=n(Sa,"UL",{});var X=s(O);SE=n(X,"LI",{});var kQe=s(SE);j4e=n(kQe,"STRONG",{});var XWt=s(j4e);p2r=r(XWt,"albert"),XWt.forEach(t),_2r=r(kQe," \u2014 "),jY=n(kQe,"A",{href:!0});var zWt=s(jY);b2r=r(zWt,"AlbertForQuestionAnswering"),zWt.forEach(t),v2r=r(kQe," (ALBERT model)"),kQe.forEach(t),F2r=i(X),RE=n(X,"LI",{});var SQe=s(RE);D4e=n(SQe,"STRONG",{});var QWt=s(D4e);T2r=r(QWt,"bart"),QWt.forEach(t),M2r=r(SQe," \u2014 "),DY=n(SQe,"A",{href:!0});var WWt=s(DY);E2r=r(WWt,"BartForQuestionAnswering"),WWt.forEach(t),C2r=r(SQe," (BART model)"),SQe.forEach(t),w2r=i(X),PE=n(X,"LI",{});var RQe=s(PE);G4e=n(RQe,"STRONG",{});var UWt=s(G4e);A2r=r(UWt,"bert"),UWt.forEach(t),L2r=r(RQe," \u2014 "),GY=n(RQe,"A",{href:!0});var HWt=s(GY);y2r=r(HWt,"BertForQuestionAnswering"),HWt.forEach(t),x2r=r(RQe," (BERT model)"),RQe.forEach(t),$2r=i(X),BE=n(X,"LI",{});var PQe=s(BE);O4e=n(PQe,"STRONG",{});var JWt=s(O4e);k2r=r(JWt,"big_bird"),JWt.forEach(t),S2r=r(PQe," \u2014 "),OY=n(PQe,"A",{href:!0});var YWt=s(OY);R2r=r(YWt,"BigBirdForQuestionAnswering"),YWt.forEach(t),P2r=r(PQe," (BigBird model)"),PQe.forEach(t),B2r=i(X),IE=n(X,"LI",{});var BQe=s(IE);V4e=n(BQe,"STRONG",{});var ZWt=s(V4e);I2r=r(ZWt,"bigbird_pegasus"),ZWt.forEach(t),N2r=r(BQe," \u2014 "),VY=n(BQe,"A",{href:!0});var KWt=s(VY);q2r=r(KWt,"BigBirdPegasusForQuestionAnswering"),KWt.forEach(t),j2r=r(BQe," (BigBird-Pegasus model)"),BQe.forEach(t),D2r=i(X),NE=n(X,"LI",{});var IQe=s(NE);X4e=n(IQe,"STRONG",{});var eUt=s(X4e);G2r=r(eUt,"bloom"),eUt.forEach(t),O2r=r(IQe," \u2014 "),XY=n(IQe,"A",{href:!0});var oUt=s(XY);V2r=r(oUt,"BloomForQuestionAnswering"),oUt.forEach(t),X2r=r(IQe," (BLOOM model)"),IQe.forEach(t),z2r=i(X),qE=n(X,"LI",{});var NQe=s(qE);z4e=n(NQe,"STRONG",{});var rUt=s(z4e);Q2r=r(rUt,"camembert"),rUt.forEach(t),W2r=r(NQe," \u2014 "),zY=n(NQe,"A",{href:!0});var tUt=s(zY);U2r=r(tUt,"CamembertForQuestionAnswering"),tUt.forEach(t),H2r=r(NQe," (CamemBERT model)"),NQe.forEach(t),J2r=i(X),jE=n(X,"LI",{});var qQe=s(jE);Q4e=n(qQe,"STRONG",{});var aUt=s(Q4e);Y2r=r(aUt,"canine"),aUt.forEach(t),Z2r=r(qQe," \u2014 "),QY=n(qQe,"A",{href:!0});var nUt=s(QY);K2r=r(nUt,"CanineForQuestionAnswering"),nUt.forEach(t),ebr=r(qQe," (CANINE model)"),qQe.forEach(t),obr=i(X),DE=n(X,"LI",{});var jQe=s(DE);W4e=n(jQe,"STRONG",{});var sUt=s(W4e);rbr=r(sUt,"convbert"),sUt.forEach(t),tbr=r(jQe," \u2014 "),WY=n(jQe,"A",{href:!0});var lUt=s(WY);abr=r(lUt,"ConvBertForQuestionAnswering"),lUt.forEach(t),nbr=r(jQe," (ConvBERT model)"),jQe.forEach(t),sbr=i(X),GE=n(X,"LI",{});var DQe=s(GE);U4e=n(DQe,"STRONG",{});var iUt=s(U4e);lbr=r(iUt,"data2vec-text"),iUt.forEach(t),ibr=r(DQe," \u2014 "),UY=n(DQe,"A",{href:!0});var dUt=s(UY);dbr=r(dUt,"Data2VecTextForQuestionAnswering"),dUt.forEach(t),cbr=r(DQe," (Data2VecText model)"),DQe.forEach(t),mbr=i(X),OE=n(X,"LI",{});var GQe=s(OE);H4e=n(GQe,"STRONG",{});var cUt=s(H4e);fbr=r(cUt,"deberta"),cUt.forEach(t),gbr=r(GQe," \u2014 "),HY=n(GQe,"A",{href:!0});var mUt=s(HY);hbr=r(mUt,"DebertaForQuestionAnswering"),mUt.forEach(t),ubr=r(GQe," (DeBERTa model)"),GQe.forEach(t),pbr=i(X),VE=n(X,"LI",{});var OQe=s(VE);J4e=n(OQe,"STRONG",{});var fUt=s(J4e);_br=r(fUt,"deberta-v2"),fUt.forEach(t),bbr=r(OQe," \u2014 "),JY=n(OQe,"A",{href:!0});var gUt=s(JY);vbr=r(gUt,"DebertaV2ForQuestionAnswering"),gUt.forEach(t),Fbr=r(OQe," (DeBERTa-v2 model)"),OQe.forEach(t),Tbr=i(X),XE=n(X,"LI",{});var VQe=s(XE);Y4e=n(VQe,"STRONG",{});var hUt=s(Y4e);Mbr=r(hUt,"distilbert"),hUt.forEach(t),Ebr=r(VQe," \u2014 "),YY=n(VQe,"A",{href:!0});var uUt=s(YY);Cbr=r(uUt,"DistilBertForQuestionAnswering"),uUt.forEach(t),wbr=r(VQe," (DistilBERT model)"),VQe.forEach(t),Abr=i(X),zE=n(X,"LI",{});var XQe=s(zE);Z4e=n(XQe,"STRONG",{});var pUt=s(Z4e);Lbr=r(pUt,"electra"),pUt.forEach(t),ybr=r(XQe," \u2014 "),ZY=n(XQe,"A",{href:!0});var _Ut=s(ZY);xbr=r(_Ut,"ElectraForQuestionAnswering"),_Ut.forEach(t),$br=r(XQe," (ELECTRA model)"),XQe.forEach(t),kbr=i(X),QE=n(X,"LI",{});var zQe=s(QE);K4e=n(zQe,"STRONG",{});var bUt=s(K4e);Sbr=r(bUt,"ernie"),bUt.forEach(t),Rbr=r(zQe," \u2014 "),KY=n(zQe,"A",{href:!0});var vUt=s(KY);Pbr=r(vUt,"ErnieForQuestionAnswering"),vUt.forEach(t),Bbr=r(zQe," (ERNIE model)"),zQe.forEach(t),Ibr=i(X),WE=n(X,"LI",{});var QQe=s(WE);eCe=n(QQe,"STRONG",{});var FUt=s(eCe);Nbr=r(FUt,"flaubert"),FUt.forEach(t),qbr=r(QQe," \u2014 "),eZ=n(QQe,"A",{href:!0});var TUt=s(eZ);jbr=r(TUt,"FlaubertForQuestionAnsweringSimple"),TUt.forEach(t),Dbr=r(QQe," (FlauBERT model)"),QQe.forEach(t),Gbr=i(X),UE=n(X,"LI",{});var WQe=s(UE);oCe=n(WQe,"STRONG",{});var MUt=s(oCe);Obr=r(MUt,"fnet"),MUt.forEach(t),Vbr=r(WQe," \u2014 "),oZ=n(WQe,"A",{href:!0});var EUt=s(oZ);Xbr=r(EUt,"FNetForQuestionAnswering"),EUt.forEach(t),zbr=r(WQe," (FNet model)"),WQe.forEach(t),Qbr=i(X),HE=n(X,"LI",{});var UQe=s(HE);rCe=n(UQe,"STRONG",{});var CUt=s(rCe);Wbr=r(CUt,"funnel"),CUt.forEach(t),Ubr=r(UQe," \u2014 "),rZ=n(UQe,"A",{href:!0});var wUt=s(rZ);Hbr=r(wUt,"FunnelForQuestionAnswering"),wUt.forEach(t),Jbr=r(UQe," (Funnel Transformer model)"),UQe.forEach(t),Ybr=i(X),JE=n(X,"LI",{});var HQe=s(JE);tCe=n(HQe,"STRONG",{});var AUt=s(tCe);Zbr=r(AUt,"gptj"),AUt.forEach(t),Kbr=r(HQe," \u2014 "),tZ=n(HQe,"A",{href:!0});var LUt=s(tZ);evr=r(LUt,"GPTJForQuestionAnswering"),LUt.forEach(t),ovr=r(HQe," (GPT-J model)"),HQe.forEach(t),rvr=i(X),YE=n(X,"LI",{});var JQe=s(YE);aCe=n(JQe,"STRONG",{});var yUt=s(aCe);tvr=r(yUt,"ibert"),yUt.forEach(t),avr=r(JQe," \u2014 "),aZ=n(JQe,"A",{href:!0});var xUt=s(aZ);nvr=r(xUt,"IBertForQuestionAnswering"),xUt.forEach(t),svr=r(JQe," (I-BERT model)"),JQe.forEach(t),lvr=i(X),ZE=n(X,"LI",{});var YQe=s(ZE);nCe=n(YQe,"STRONG",{});var $Ut=s(nCe);ivr=r($Ut,"layoutlmv2"),$Ut.forEach(t),dvr=r(YQe," \u2014 "),nZ=n(YQe,"A",{href:!0});var kUt=s(nZ);cvr=r(kUt,"LayoutLMv2ForQuestionAnswering"),kUt.forEach(t),mvr=r(YQe," (LayoutLMv2 model)"),YQe.forEach(t),fvr=i(X),KE=n(X,"LI",{});var ZQe=s(KE);sCe=n(ZQe,"STRONG",{});var SUt=s(sCe);gvr=r(SUt,"layoutlmv3"),SUt.forEach(t),hvr=r(ZQe," \u2014 "),sZ=n(ZQe,"A",{href:!0});var RUt=s(sZ);uvr=r(RUt,"LayoutLMv3ForQuestionAnswering"),RUt.forEach(t),pvr=r(ZQe," (LayoutLMv3 model)"),ZQe.forEach(t),_vr=i(X),e4=n(X,"LI",{});var KQe=s(e4);lCe=n(KQe,"STRONG",{});var PUt=s(lCe);bvr=r(PUt,"led"),PUt.forEach(t),vvr=r(KQe," \u2014 "),lZ=n(KQe,"A",{href:!0});var BUt=s(lZ);Fvr=r(BUt,"LEDForQuestionAnswering"),BUt.forEach(t),Tvr=r(KQe," (LED model)"),KQe.forEach(t),Mvr=i(X),o4=n(X,"LI",{});var eWe=s(o4);iCe=n(eWe,"STRONG",{});var IUt=s(iCe);Evr=r(IUt,"longformer"),IUt.forEach(t),Cvr=r(eWe," \u2014 "),iZ=n(eWe,"A",{href:!0});var NUt=s(iZ);wvr=r(NUt,"LongformerForQuestionAnswering"),NUt.forEach(t),Avr=r(eWe," (Longformer model)"),eWe.forEach(t),Lvr=i(X),r4=n(X,"LI",{});var oWe=s(r4);dCe=n(oWe,"STRONG",{});var qUt=s(dCe);yvr=r(qUt,"luke"),qUt.forEach(t),xvr=r(oWe," \u2014 "),dZ=n(oWe,"A",{href:!0});var jUt=s(dZ);$vr=r(jUt,"LukeForQuestionAnswering"),jUt.forEach(t),kvr=r(oWe," (LUKE model)"),oWe.forEach(t),Svr=i(X),t4=n(X,"LI",{});var rWe=s(t4);cCe=n(rWe,"STRONG",{});var DUt=s(cCe);Rvr=r(DUt,"lxmert"),DUt.forEach(t),Pvr=r(rWe," \u2014 "),cZ=n(rWe,"A",{href:!0});var GUt=s(cZ);Bvr=r(GUt,"LxmertForQuestionAnswering"),GUt.forEach(t),Ivr=r(rWe," (LXMERT model)"),rWe.forEach(t),Nvr=i(X),a4=n(X,"LI",{});var tWe=s(a4);mCe=n(tWe,"STRONG",{});var OUt=s(mCe);qvr=r(OUt,"markuplm"),OUt.forEach(t),jvr=r(tWe," \u2014 "),mZ=n(tWe,"A",{href:!0});var VUt=s(mZ);Dvr=r(VUt,"MarkupLMForQuestionAnswering"),VUt.forEach(t),Gvr=r(tWe," (MarkupLM model)"),tWe.forEach(t),Ovr=i(X),n4=n(X,"LI",{});var aWe=s(n4);fCe=n(aWe,"STRONG",{});var XUt=s(fCe);Vvr=r(XUt,"mbart"),XUt.forEach(t),Xvr=r(aWe," \u2014 "),fZ=n(aWe,"A",{href:!0});var zUt=s(fZ);zvr=r(zUt,"MBartForQuestionAnswering"),zUt.forEach(t),Qvr=r(aWe," (mBART model)"),aWe.forEach(t),Wvr=i(X),s4=n(X,"LI",{});var nWe=s(s4);gCe=n(nWe,"STRONG",{});var QUt=s(gCe);Uvr=r(QUt,"megatron-bert"),QUt.forEach(t),Hvr=r(nWe," \u2014 "),gZ=n(nWe,"A",{href:!0});var WUt=s(gZ);Jvr=r(WUt,"MegatronBertForQuestionAnswering"),WUt.forEach(t),Yvr=r(nWe," (Megatron-BERT model)"),nWe.forEach(t),Zvr=i(X),l4=n(X,"LI",{});var sWe=s(l4);hCe=n(sWe,"STRONG",{});var UUt=s(hCe);Kvr=r(UUt,"mobilebert"),UUt.forEach(t),eFr=r(sWe," \u2014 "),hZ=n(sWe,"A",{href:!0});var HUt=s(hZ);oFr=r(HUt,"MobileBertForQuestionAnswering"),HUt.forEach(t),rFr=r(sWe," (MobileBERT model)"),sWe.forEach(t),tFr=i(X),i4=n(X,"LI",{});var lWe=s(i4);uCe=n(lWe,"STRONG",{});var JUt=s(uCe);aFr=r(JUt,"mpnet"),JUt.forEach(t),nFr=r(lWe," \u2014 "),uZ=n(lWe,"A",{href:!0});var YUt=s(uZ);sFr=r(YUt,"MPNetForQuestionAnswering"),YUt.forEach(t),lFr=r(lWe," (MPNet model)"),lWe.forEach(t),iFr=i(X),d4=n(X,"LI",{});var iWe=s(d4);pCe=n(iWe,"STRONG",{});var ZUt=s(pCe);dFr=r(ZUt,"mvp"),ZUt.forEach(t),cFr=r(iWe," \u2014 "),pZ=n(iWe,"A",{href:!0});var KUt=s(pZ);mFr=r(KUt,"MvpForQuestionAnswering"),KUt.forEach(t),fFr=r(iWe," (MVP model)"),iWe.forEach(t),gFr=i(X),c4=n(X,"LI",{});var dWe=s(c4);_Ce=n(dWe,"STRONG",{});var eHt=s(_Ce);hFr=r(eHt,"nezha"),eHt.forEach(t),uFr=r(dWe," \u2014 "),_Z=n(dWe,"A",{href:!0});var oHt=s(_Z);pFr=r(oHt,"NezhaForQuestionAnswering"),oHt.forEach(t),_Fr=r(dWe," (Nezha model)"),dWe.forEach(t),bFr=i(X),m4=n(X,"LI",{});var cWe=s(m4);bCe=n(cWe,"STRONG",{});var rHt=s(bCe);vFr=r(rHt,"nystromformer"),rHt.forEach(t),FFr=r(cWe," \u2014 "),bZ=n(cWe,"A",{href:!0});var tHt=s(bZ);TFr=r(tHt,"NystromformerForQuestionAnswering"),tHt.forEach(t),MFr=r(cWe," (Nystr\xF6mformer model)"),cWe.forEach(t),EFr=i(X),f4=n(X,"LI",{});var mWe=s(f4);vCe=n(mWe,"STRONG",{});var aHt=s(vCe);CFr=r(aHt,"opt"),aHt.forEach(t),wFr=r(mWe," \u2014 "),vZ=n(mWe,"A",{href:!0});var nHt=s(vZ);AFr=r(nHt,"OPTForQuestionAnswering"),nHt.forEach(t),LFr=r(mWe," (OPT model)"),mWe.forEach(t),yFr=i(X),g4=n(X,"LI",{});var fWe=s(g4);FCe=n(fWe,"STRONG",{});var sHt=s(FCe);xFr=r(sHt,"qdqbert"),sHt.forEach(t),$Fr=r(fWe," \u2014 "),FZ=n(fWe,"A",{href:!0});var lHt=s(FZ);kFr=r(lHt,"QDQBertForQuestionAnswering"),lHt.forEach(t),SFr=r(fWe," (QDQBert model)"),fWe.forEach(t),RFr=i(X),h4=n(X,"LI",{});var gWe=s(h4);TCe=n(gWe,"STRONG",{});var iHt=s(TCe);PFr=r(iHt,"reformer"),iHt.forEach(t),BFr=r(gWe," \u2014 "),TZ=n(gWe,"A",{href:!0});var dHt=s(TZ);IFr=r(dHt,"ReformerForQuestionAnswering"),dHt.forEach(t),NFr=r(gWe," (Reformer model)"),gWe.forEach(t),qFr=i(X),u4=n(X,"LI",{});var hWe=s(u4);MCe=n(hWe,"STRONG",{});var cHt=s(MCe);jFr=r(cHt,"rembert"),cHt.forEach(t),DFr=r(hWe," \u2014 "),MZ=n(hWe,"A",{href:!0});var mHt=s(MZ);GFr=r(mHt,"RemBertForQuestionAnswering"),mHt.forEach(t),OFr=r(hWe," (RemBERT model)"),hWe.forEach(t),VFr=i(X),p4=n(X,"LI",{});var uWe=s(p4);ECe=n(uWe,"STRONG",{});var fHt=s(ECe);XFr=r(fHt,"roberta"),fHt.forEach(t),zFr=r(uWe," \u2014 "),EZ=n(uWe,"A",{href:!0});var gHt=s(EZ);QFr=r(gHt,"RobertaForQuestionAnswering"),gHt.forEach(t),WFr=r(uWe," (RoBERTa model)"),uWe.forEach(t),UFr=i(X),_4=n(X,"LI",{});var pWe=s(_4);CCe=n(pWe,"STRONG",{});var hHt=s(CCe);HFr=r(hHt,"roformer"),hHt.forEach(t),JFr=r(pWe," \u2014 "),CZ=n(pWe,"A",{href:!0});var uHt=s(CZ);YFr=r(uHt,"RoFormerForQuestionAnswering"),uHt.forEach(t),ZFr=r(pWe," (RoFormer model)"),pWe.forEach(t),KFr=i(X),b4=n(X,"LI",{});var _We=s(b4);wCe=n(_We,"STRONG",{});var pHt=s(wCe);eTr=r(pHt,"splinter"),pHt.forEach(t),oTr=r(_We," \u2014 "),wZ=n(_We,"A",{href:!0});var _Ht=s(wZ);rTr=r(_Ht,"SplinterForQuestionAnswering"),_Ht.forEach(t),tTr=r(_We," (Splinter model)"),_We.forEach(t),aTr=i(X),v4=n(X,"LI",{});var bWe=s(v4);ACe=n(bWe,"STRONG",{});var bHt=s(ACe);nTr=r(bHt,"squeezebert"),bHt.forEach(t),sTr=r(bWe," \u2014 "),AZ=n(bWe,"A",{href:!0});var vHt=s(AZ);lTr=r(vHt,"SqueezeBertForQuestionAnswering"),vHt.forEach(t),iTr=r(bWe," (SqueezeBERT model)"),bWe.forEach(t),dTr=i(X),F4=n(X,"LI",{});var vWe=s(F4);LCe=n(vWe,"STRONG",{});var FHt=s(LCe);cTr=r(FHt,"xlm"),FHt.forEach(t),mTr=r(vWe," \u2014 "),LZ=n(vWe,"A",{href:!0});var THt=s(LZ);fTr=r(THt,"XLMForQuestionAnsweringSimple"),THt.forEach(t),gTr=r(vWe," (XLM model)"),vWe.forEach(t),hTr=i(X),T4=n(X,"LI",{});var FWe=s(T4);yCe=n(FWe,"STRONG",{});var MHt=s(yCe);uTr=r(MHt,"xlm-roberta"),MHt.forEach(t),pTr=r(FWe," \u2014 "),yZ=n(FWe,"A",{href:!0});var EHt=s(yZ);_Tr=r(EHt,"XLMRobertaForQuestionAnswering"),EHt.forEach(t),bTr=r(FWe," (XLM-RoBERTa model)"),FWe.forEach(t),vTr=i(X),M4=n(X,"LI",{});var TWe=s(M4);xCe=n(TWe,"STRONG",{});var CHt=s(xCe);FTr=r(CHt,"xlm-roberta-xl"),CHt.forEach(t),TTr=r(TWe," \u2014 "),xZ=n(TWe,"A",{href:!0});var wHt=s(xZ);MTr=r(wHt,"XLMRobertaXLForQuestionAnswering"),wHt.forEach(t),ETr=r(TWe," (XLM-RoBERTa-XL model)"),TWe.forEach(t),CTr=i(X),E4=n(X,"LI",{});var MWe=s(E4);$Ce=n(MWe,"STRONG",{});var AHt=s($Ce);wTr=r(AHt,"xlnet"),AHt.forEach(t),ATr=r(MWe," \u2014 "),$Z=n(MWe,"A",{href:!0});var LHt=s($Z);LTr=r(LHt,"XLNetForQuestionAnsweringSimple"),LHt.forEach(t),yTr=r(MWe," (XLNet model)"),MWe.forEach(t),xTr=i(X),C4=n(X,"LI",{});var EWe=s(C4);kCe=n(EWe,"STRONG",{});var yHt=s(kCe);$Tr=r(yHt,"yoso"),yHt.forEach(t),kTr=r(EWe," \u2014 "),kZ=n(EWe,"A",{href:!0});var xHt=s(kZ);STr=r(xHt,"YosoForQuestionAnswering"),xHt.forEach(t),RTr=r(EWe," (YOSO model)"),EWe.forEach(t),X.forEach(t),PTr=i(Sa),w4=n(Sa,"P",{});var CWe=s(w4);BTr=r(CWe,"The model is set in evaluation mode by default using "),SCe=n(CWe,"CODE",{});var $Ht=s(SCe);ITr=r($Ht,"model.eval()"),$Ht.forEach(t),NTr=r(CWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RCe=n(CWe,"CODE",{});var kHt=s(RCe);qTr=r(kHt,"model.train()"),kHt.forEach(t),CWe.forEach(t),jTr=i(Sa),T(A4.$$.fragment,Sa),Sa.forEach(t),Dl.forEach(t),Hoo=i(m),Kd=n(m,"H2",{class:!0});var mao=s(Kd);L4=n(mao,"A",{id:!0,class:!0,href:!0});var SHt=s(L4);PCe=n(SHt,"SPAN",{});var RHt=s(PCe);T(J$.$$.fragment,RHt),RHt.forEach(t),SHt.forEach(t),DTr=i(mao),BCe=n(mao,"SPAN",{});var PHt=s(BCe);GTr=r(PHt,"AutoModelForTableQuestionAnswering"),PHt.forEach(t),mao.forEach(t),Joo=i(m),zo=n(m,"DIV",{class:!0});var Gl=s(zo);T(Y$.$$.fragment,Gl),OTr=i(Gl),ec=n(Gl,"P",{});var mde=s(ec);VTr=r(mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SZ=n(mde,"A",{href:!0});var BHt=s(SZ);XTr=r(BHt,"from_pretrained()"),BHt.forEach(t),zTr=r(mde," class method or the "),RZ=n(mde,"A",{href:!0});var IHt=s(RZ);QTr=r(IHt,"from_config()"),IHt.forEach(t),WTr=r(mde,` class
method.`),mde.forEach(t),UTr=i(Gl),Z$=n(Gl,"P",{});var fao=s(Z$);HTr=r(fao,"This class cannot be instantiated directly using "),ICe=n(fao,"CODE",{});var NHt=s(ICe);JTr=r(NHt,"__init__()"),NHt.forEach(t),YTr=r(fao," (throws an error)."),fao.forEach(t),ZTr=i(Gl),xt=n(Gl,"DIV",{class:!0});var Dy=s(xt);T(K$.$$.fragment,Dy),KTr=i(Dy),NCe=n(Dy,"P",{});var qHt=s(NCe);eMr=r(qHt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qHt.forEach(t),oMr=i(Dy),oc=n(Dy,"P",{});var fde=s(oc);rMr=r(fde,`Note:
Loading a model from its configuration file does `),qCe=n(fde,"STRONG",{});var jHt=s(qCe);tMr=r(jHt,"not"),jHt.forEach(t),aMr=r(fde,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(fde,"A",{href:!0});var DHt=s(PZ);nMr=r(DHt,"from_pretrained()"),DHt.forEach(t),sMr=r(fde," to load the model weights."),fde.forEach(t),lMr=i(Dy),T(y4.$$.fragment,Dy),Dy.forEach(t),iMr=i(Gl),co=n(Gl,"DIV",{class:!0});var Ra=s(co);T(ek.$$.fragment,Ra),dMr=i(Ra),jCe=n(Ra,"P",{});var GHt=s(jCe);cMr=r(GHt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GHt.forEach(t),mMr=i(Ra),mn=n(Ra,"P",{});var Gy=s(mn);fMr=r(Gy,"The model class to instantiate is selected based on the "),DCe=n(Gy,"CODE",{});var OHt=s(DCe);gMr=r(OHt,"model_type"),OHt.forEach(t),hMr=r(Gy,` property of the config object (either
passed as an argument or loaded from `),GCe=n(Gy,"CODE",{});var VHt=s(GCe);uMr=r(VHt,"pretrained_model_name_or_path"),VHt.forEach(t),pMr=r(Gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OCe=n(Gy,"CODE",{});var XHt=s(OCe);_Mr=r(XHt,"pretrained_model_name_or_path"),XHt.forEach(t),bMr=r(Gy,":"),Gy.forEach(t),vMr=i(Ra),VCe=n(Ra,"UL",{});var zHt=s(VCe);x4=n(zHt,"LI",{});var wWe=s(x4);XCe=n(wWe,"STRONG",{});var QHt=s(XCe);FMr=r(QHt,"tapas"),QHt.forEach(t),TMr=r(wWe," \u2014 "),BZ=n(wWe,"A",{href:!0});var WHt=s(BZ);MMr=r(WHt,"TapasForQuestionAnswering"),WHt.forEach(t),EMr=r(wWe," (TAPAS model)"),wWe.forEach(t),zHt.forEach(t),CMr=i(Ra),$4=n(Ra,"P",{});var AWe=s($4);wMr=r(AWe,"The model is set in evaluation mode by default using "),zCe=n(AWe,"CODE",{});var UHt=s(zCe);AMr=r(UHt,"model.eval()"),UHt.forEach(t),LMr=r(AWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QCe=n(AWe,"CODE",{});var HHt=s(QCe);yMr=r(HHt,"model.train()"),HHt.forEach(t),AWe.forEach(t),xMr=i(Ra),T(k4.$$.fragment,Ra),Ra.forEach(t),Gl.forEach(t),Yoo=i(m),rc=n(m,"H2",{class:!0});var gao=s(rc);S4=n(gao,"A",{id:!0,class:!0,href:!0});var JHt=s(S4);WCe=n(JHt,"SPAN",{});var YHt=s(WCe);T(ok.$$.fragment,YHt),YHt.forEach(t),JHt.forEach(t),$Mr=i(gao),UCe=n(gao,"SPAN",{});var ZHt=s(UCe);kMr=r(ZHt,"AutoModelForDocumentQuestionAnswering"),ZHt.forEach(t),gao.forEach(t),Zoo=i(m),Qo=n(m,"DIV",{class:!0});var Ol=s(Qo);T(rk.$$.fragment,Ol),SMr=i(Ol),tc=n(Ol,"P",{});var gde=s(tc);RMr=r(gde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),IZ=n(gde,"A",{href:!0});var KHt=s(IZ);PMr=r(KHt,"from_pretrained()"),KHt.forEach(t),BMr=r(gde," class method or the "),NZ=n(gde,"A",{href:!0});var eJt=s(NZ);IMr=r(eJt,"from_config()"),eJt.forEach(t),NMr=r(gde,` class
method.`),gde.forEach(t),qMr=i(Ol),tk=n(Ol,"P",{});var hao=s(tk);jMr=r(hao,"This class cannot be instantiated directly using "),HCe=n(hao,"CODE",{});var oJt=s(HCe);DMr=r(oJt,"__init__()"),oJt.forEach(t),GMr=r(hao," (throws an error)."),hao.forEach(t),OMr=i(Ol),$t=n(Ol,"DIV",{class:!0});var Oy=s($t);T(ak.$$.fragment,Oy),VMr=i(Oy),JCe=n(Oy,"P",{});var rJt=s(JCe);XMr=r(rJt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),rJt.forEach(t),zMr=i(Oy),ac=n(Oy,"P",{});var hde=s(ac);QMr=r(hde,`Note:
Loading a model from its configuration file does `),YCe=n(hde,"STRONG",{});var tJt=s(YCe);WMr=r(tJt,"not"),tJt.forEach(t),UMr=r(hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(hde,"A",{href:!0});var aJt=s(qZ);HMr=r(aJt,"from_pretrained()"),aJt.forEach(t),JMr=r(hde," to load the model weights."),hde.forEach(t),YMr=i(Oy),T(R4.$$.fragment,Oy),Oy.forEach(t),ZMr=i(Ol),mo=n(Ol,"DIV",{class:!0});var Pa=s(mo);T(nk.$$.fragment,Pa),KMr=i(Pa),ZCe=n(Pa,"P",{});var nJt=s(ZCe);eEr=r(nJt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),nJt.forEach(t),oEr=i(Pa),fn=n(Pa,"P",{});var Vy=s(fn);rEr=r(Vy,"The model class to instantiate is selected based on the "),KCe=n(Vy,"CODE",{});var sJt=s(KCe);tEr=r(sJt,"model_type"),sJt.forEach(t),aEr=r(Vy,` property of the config object (either
passed as an argument or loaded from `),e3e=n(Vy,"CODE",{});var lJt=s(e3e);nEr=r(lJt,"pretrained_model_name_or_path"),lJt.forEach(t),sEr=r(Vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=n(Vy,"CODE",{});var iJt=s(o3e);lEr=r(iJt,"pretrained_model_name_or_path"),iJt.forEach(t),iEr=r(Vy,":"),Vy.forEach(t),dEr=i(Pa),nc=n(Pa,"UL",{});var ude=s(nc);P4=n(ude,"LI",{});var LWe=s(P4);r3e=n(LWe,"STRONG",{});var dJt=s(r3e);cEr=r(dJt,"layoutlm"),dJt.forEach(t),mEr=r(LWe," \u2014 "),jZ=n(LWe,"A",{href:!0});var cJt=s(jZ);fEr=r(cJt,"LayoutLMForQuestionAnswering"),cJt.forEach(t),gEr=r(LWe," (LayoutLM model)"),LWe.forEach(t),hEr=i(ude),B4=n(ude,"LI",{});var yWe=s(B4);t3e=n(yWe,"STRONG",{});var mJt=s(t3e);uEr=r(mJt,"layoutlmv2"),mJt.forEach(t),pEr=r(yWe," \u2014 "),DZ=n(yWe,"A",{href:!0});var fJt=s(DZ);_Er=r(fJt,"LayoutLMv2ForQuestionAnswering"),fJt.forEach(t),bEr=r(yWe," (LayoutLMv2 model)"),yWe.forEach(t),vEr=i(ude),I4=n(ude,"LI",{});var xWe=s(I4);a3e=n(xWe,"STRONG",{});var gJt=s(a3e);FEr=r(gJt,"layoutlmv3"),gJt.forEach(t),TEr=r(xWe," \u2014 "),GZ=n(xWe,"A",{href:!0});var hJt=s(GZ);MEr=r(hJt,"LayoutLMv3ForQuestionAnswering"),hJt.forEach(t),EEr=r(xWe," (LayoutLMv3 model)"),xWe.forEach(t),ude.forEach(t),CEr=i(Pa),N4=n(Pa,"P",{});var $We=s(N4);wEr=r($We,"The model is set in evaluation mode by default using "),n3e=n($We,"CODE",{});var uJt=s(n3e);AEr=r(uJt,"model.eval()"),uJt.forEach(t),LEr=r($We,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s3e=n($We,"CODE",{});var pJt=s(s3e);yEr=r(pJt,"model.train()"),pJt.forEach(t),$We.forEach(t),xEr=i(Pa),T(q4.$$.fragment,Pa),Pa.forEach(t),Ol.forEach(t),Koo=i(m),sc=n(m,"H2",{class:!0});var uao=s(sc);j4=n(uao,"A",{id:!0,class:!0,href:!0});var _Jt=s(j4);l3e=n(_Jt,"SPAN",{});var bJt=s(l3e);T(sk.$$.fragment,bJt),bJt.forEach(t),_Jt.forEach(t),$Er=i(uao),i3e=n(uao,"SPAN",{});var vJt=s(i3e);kEr=r(vJt,"AutoModelForImageClassification"),vJt.forEach(t),uao.forEach(t),ero=i(m),Wo=n(m,"DIV",{class:!0});var Vl=s(Wo);T(lk.$$.fragment,Vl),SEr=i(Vl),lc=n(Vl,"P",{});var pde=s(lc);REr=r(pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OZ=n(pde,"A",{href:!0});var FJt=s(OZ);PEr=r(FJt,"from_pretrained()"),FJt.forEach(t),BEr=r(pde," class method or the "),VZ=n(pde,"A",{href:!0});var TJt=s(VZ);IEr=r(TJt,"from_config()"),TJt.forEach(t),NEr=r(pde,` class
method.`),pde.forEach(t),qEr=i(Vl),ik=n(Vl,"P",{});var pao=s(ik);jEr=r(pao,"This class cannot be instantiated directly using "),d3e=n(pao,"CODE",{});var MJt=s(d3e);DEr=r(MJt,"__init__()"),MJt.forEach(t),GEr=r(pao," (throws an error)."),pao.forEach(t),OEr=i(Vl),kt=n(Vl,"DIV",{class:!0});var Xy=s(kt);T(dk.$$.fragment,Xy),VEr=i(Xy),c3e=n(Xy,"P",{});var EJt=s(c3e);XEr=r(EJt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EJt.forEach(t),zEr=i(Xy),ic=n(Xy,"P",{});var _de=s(ic);QEr=r(_de,`Note:
Loading a model from its configuration file does `),m3e=n(_de,"STRONG",{});var CJt=s(m3e);WEr=r(CJt,"not"),CJt.forEach(t),UEr=r(_de,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(_de,"A",{href:!0});var wJt=s(XZ);HEr=r(wJt,"from_pretrained()"),wJt.forEach(t),JEr=r(_de," to load the model weights."),_de.forEach(t),YEr=i(Xy),T(D4.$$.fragment,Xy),Xy.forEach(t),ZEr=i(Vl),fo=n(Vl,"DIV",{class:!0});var Ba=s(fo);T(ck.$$.fragment,Ba),KEr=i(Ba),f3e=n(Ba,"P",{});var AJt=s(f3e);e4r=r(AJt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AJt.forEach(t),o4r=i(Ba),gn=n(Ba,"P",{});var zy=s(gn);r4r=r(zy,"The model class to instantiate is selected based on the "),g3e=n(zy,"CODE",{});var LJt=s(g3e);t4r=r(LJt,"model_type"),LJt.forEach(t),a4r=r(zy,` property of the config object (either
passed as an argument or loaded from `),h3e=n(zy,"CODE",{});var yJt=s(h3e);n4r=r(yJt,"pretrained_model_name_or_path"),yJt.forEach(t),s4r=r(zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(zy,"CODE",{});var xJt=s(u3e);l4r=r(xJt,"pretrained_model_name_or_path"),xJt.forEach(t),i4r=r(zy,":"),zy.forEach(t),d4r=i(Ba),be=n(Ba,"UL",{});var Fe=s(be);G4=n(Fe,"LI",{});var kWe=s(G4);p3e=n(kWe,"STRONG",{});var $Jt=s(p3e);c4r=r($Jt,"beit"),$Jt.forEach(t),m4r=r(kWe," \u2014 "),zZ=n(kWe,"A",{href:!0});var kJt=s(zZ);f4r=r(kJt,"BeitForImageClassification"),kJt.forEach(t),g4r=r(kWe," (BEiT model)"),kWe.forEach(t),h4r=i(Fe),O4=n(Fe,"LI",{});var SWe=s(O4);_3e=n(SWe,"STRONG",{});var SJt=s(_3e);u4r=r(SJt,"convnext"),SJt.forEach(t),p4r=r(SWe," \u2014 "),QZ=n(SWe,"A",{href:!0});var RJt=s(QZ);_4r=r(RJt,"ConvNextForImageClassification"),RJt.forEach(t),b4r=r(SWe," (ConvNeXT model)"),SWe.forEach(t),v4r=i(Fe),V4=n(Fe,"LI",{});var RWe=s(V4);b3e=n(RWe,"STRONG",{});var PJt=s(b3e);F4r=r(PJt,"cvt"),PJt.forEach(t),T4r=r(RWe," \u2014 "),WZ=n(RWe,"A",{href:!0});var BJt=s(WZ);M4r=r(BJt,"CvtForImageClassification"),BJt.forEach(t),E4r=r(RWe," (CvT model)"),RWe.forEach(t),C4r=i(Fe),X4=n(Fe,"LI",{});var PWe=s(X4);v3e=n(PWe,"STRONG",{});var IJt=s(v3e);w4r=r(IJt,"data2vec-vision"),IJt.forEach(t),A4r=r(PWe," \u2014 "),UZ=n(PWe,"A",{href:!0});var NJt=s(UZ);L4r=r(NJt,"Data2VecVisionForImageClassification"),NJt.forEach(t),y4r=r(PWe," (Data2VecVision model)"),PWe.forEach(t),x4r=i(Fe),El=n(Fe,"LI",{});var xI=s(El);F3e=n(xI,"STRONG",{});var qJt=s(F3e);$4r=r(qJt,"deit"),qJt.forEach(t),k4r=r(xI," \u2014 "),HZ=n(xI,"A",{href:!0});var jJt=s(HZ);S4r=r(jJt,"DeiTForImageClassification"),jJt.forEach(t),R4r=r(xI," or "),JZ=n(xI,"A",{href:!0});var DJt=s(JZ);P4r=r(DJt,"DeiTForImageClassificationWithTeacher"),DJt.forEach(t),B4r=r(xI," (DeiT model)"),xI.forEach(t),I4r=i(Fe),z4=n(Fe,"LI",{});var BWe=s(z4);T3e=n(BWe,"STRONG",{});var GJt=s(T3e);N4r=r(GJt,"imagegpt"),GJt.forEach(t),q4r=r(BWe," \u2014 "),YZ=n(BWe,"A",{href:!0});var OJt=s(YZ);j4r=r(OJt,"ImageGPTForImageClassification"),OJt.forEach(t),D4r=r(BWe," (ImageGPT model)"),BWe.forEach(t),G4r=i(Fe),Cl=n(Fe,"LI",{});var $I=s(Cl);M3e=n($I,"STRONG",{});var VJt=s(M3e);O4r=r(VJt,"levit"),VJt.forEach(t),V4r=r($I," \u2014 "),ZZ=n($I,"A",{href:!0});var XJt=s(ZZ);X4r=r(XJt,"LevitForImageClassification"),XJt.forEach(t),z4r=r($I," or "),KZ=n($I,"A",{href:!0});var zJt=s(KZ);Q4r=r(zJt,"LevitForImageClassificationWithTeacher"),zJt.forEach(t),W4r=r($I," (LeViT model)"),$I.forEach(t),U4r=i(Fe),Q4=n(Fe,"LI",{});var IWe=s(Q4);E3e=n(IWe,"STRONG",{});var QJt=s(E3e);H4r=r(QJt,"mobilevit"),QJt.forEach(t),J4r=r(IWe," \u2014 "),eK=n(IWe,"A",{href:!0});var WJt=s(eK);Y4r=r(WJt,"MobileViTForImageClassification"),WJt.forEach(t),Z4r=r(IWe," (MobileViT model)"),IWe.forEach(t),K4r=i(Fe),St=n(Fe,"LI",{});var Sf=s(St);C3e=n(Sf,"STRONG",{});var UJt=s(C3e);eCr=r(UJt,"perceiver"),UJt.forEach(t),oCr=r(Sf," \u2014 "),oK=n(Sf,"A",{href:!0});var HJt=s(oK);rCr=r(HJt,"PerceiverForImageClassificationLearned"),HJt.forEach(t),tCr=r(Sf," or "),rK=n(Sf,"A",{href:!0});var JJt=s(rK);aCr=r(JJt,"PerceiverForImageClassificationFourier"),JJt.forEach(t),nCr=r(Sf," or "),tK=n(Sf,"A",{href:!0});var YJt=s(tK);sCr=r(YJt,"PerceiverForImageClassificationConvProcessing"),YJt.forEach(t),lCr=r(Sf," (Perceiver model)"),Sf.forEach(t),iCr=i(Fe),W4=n(Fe,"LI",{});var NWe=s(W4);w3e=n(NWe,"STRONG",{});var ZJt=s(w3e);dCr=r(ZJt,"poolformer"),ZJt.forEach(t),cCr=r(NWe," \u2014 "),aK=n(NWe,"A",{href:!0});var KJt=s(aK);mCr=r(KJt,"PoolFormerForImageClassification"),KJt.forEach(t),fCr=r(NWe," (PoolFormer model)"),NWe.forEach(t),gCr=i(Fe),U4=n(Fe,"LI",{});var qWe=s(U4);A3e=n(qWe,"STRONG",{});var eYt=s(A3e);hCr=r(eYt,"regnet"),eYt.forEach(t),uCr=r(qWe," \u2014 "),nK=n(qWe,"A",{href:!0});var oYt=s(nK);pCr=r(oYt,"RegNetForImageClassification"),oYt.forEach(t),_Cr=r(qWe," (RegNet model)"),qWe.forEach(t),bCr=i(Fe),H4=n(Fe,"LI",{});var jWe=s(H4);L3e=n(jWe,"STRONG",{});var rYt=s(L3e);vCr=r(rYt,"resnet"),rYt.forEach(t),FCr=r(jWe," \u2014 "),sK=n(jWe,"A",{href:!0});var tYt=s(sK);TCr=r(tYt,"ResNetForImageClassification"),tYt.forEach(t),MCr=r(jWe," (ResNet model)"),jWe.forEach(t),ECr=i(Fe),J4=n(Fe,"LI",{});var DWe=s(J4);y3e=n(DWe,"STRONG",{});var aYt=s(y3e);CCr=r(aYt,"segformer"),aYt.forEach(t),wCr=r(DWe," \u2014 "),lK=n(DWe,"A",{href:!0});var nYt=s(lK);ACr=r(nYt,"SegformerForImageClassification"),nYt.forEach(t),LCr=r(DWe," (SegFormer model)"),DWe.forEach(t),yCr=i(Fe),Y4=n(Fe,"LI",{});var GWe=s(Y4);x3e=n(GWe,"STRONG",{});var sYt=s(x3e);xCr=r(sYt,"swin"),sYt.forEach(t),$Cr=r(GWe," \u2014 "),iK=n(GWe,"A",{href:!0});var lYt=s(iK);kCr=r(lYt,"SwinForImageClassification"),lYt.forEach(t),SCr=r(GWe," (Swin Transformer model)"),GWe.forEach(t),RCr=i(Fe),Z4=n(Fe,"LI",{});var OWe=s(Z4);$3e=n(OWe,"STRONG",{});var iYt=s($3e);PCr=r(iYt,"swinv2"),iYt.forEach(t),BCr=r(OWe," \u2014 "),dK=n(OWe,"A",{href:!0});var dYt=s(dK);ICr=r(dYt,"Swinv2ForImageClassification"),dYt.forEach(t),NCr=r(OWe," (Swin Transformer V2 model)"),OWe.forEach(t),qCr=i(Fe),K4=n(Fe,"LI",{});var VWe=s(K4);k3e=n(VWe,"STRONG",{});var cYt=s(k3e);jCr=r(cYt,"van"),cYt.forEach(t),DCr=r(VWe," \u2014 "),cK=n(VWe,"A",{href:!0});var mYt=s(cK);GCr=r(mYt,"VanForImageClassification"),mYt.forEach(t),OCr=r(VWe," (VAN model)"),VWe.forEach(t),VCr=i(Fe),eC=n(Fe,"LI",{});var XWe=s(eC);S3e=n(XWe,"STRONG",{});var fYt=s(S3e);XCr=r(fYt,"vit"),fYt.forEach(t),zCr=r(XWe," \u2014 "),mK=n(XWe,"A",{href:!0});var gYt=s(mK);QCr=r(gYt,"ViTForImageClassification"),gYt.forEach(t),WCr=r(XWe," (ViT model)"),XWe.forEach(t),UCr=i(Fe),oC=n(Fe,"LI",{});var zWe=s(oC);R3e=n(zWe,"STRONG",{});var hYt=s(R3e);HCr=r(hYt,"vit_msn"),hYt.forEach(t),JCr=r(zWe," \u2014 "),fK=n(zWe,"A",{href:!0});var uYt=s(fK);YCr=r(uYt,"ViTMSNForImageClassification"),uYt.forEach(t),ZCr=r(zWe," (ViTMSN model)"),zWe.forEach(t),Fe.forEach(t),KCr=i(Ba),rC=n(Ba,"P",{});var QWe=s(rC);e3r=r(QWe,"The model is set in evaluation mode by default using "),P3e=n(QWe,"CODE",{});var pYt=s(P3e);o3r=r(pYt,"model.eval()"),pYt.forEach(t),r3r=r(QWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B3e=n(QWe,"CODE",{});var _Yt=s(B3e);t3r=r(_Yt,"model.train()"),_Yt.forEach(t),QWe.forEach(t),a3r=i(Ba),T(tC.$$.fragment,Ba),Ba.forEach(t),Vl.forEach(t),oro=i(m),dc=n(m,"H2",{class:!0});var _ao=s(dc);aC=n(_ao,"A",{id:!0,class:!0,href:!0});var bYt=s(aC);I3e=n(bYt,"SPAN",{});var vYt=s(I3e);T(mk.$$.fragment,vYt),vYt.forEach(t),bYt.forEach(t),n3r=i(_ao),N3e=n(_ao,"SPAN",{});var FYt=s(N3e);s3r=r(FYt,"AutoModelForVideoClassification"),FYt.forEach(t),_ao.forEach(t),rro=i(m),Uo=n(m,"DIV",{class:!0});var Xl=s(Uo);T(fk.$$.fragment,Xl),l3r=i(Xl),cc=n(Xl,"P",{});var bde=s(cc);i3r=r(bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),gK=n(bde,"A",{href:!0});var TYt=s(gK);d3r=r(TYt,"from_pretrained()"),TYt.forEach(t),c3r=r(bde," class method or the "),hK=n(bde,"A",{href:!0});var MYt=s(hK);m3r=r(MYt,"from_config()"),MYt.forEach(t),f3r=r(bde,` class
method.`),bde.forEach(t),g3r=i(Xl),gk=n(Xl,"P",{});var bao=s(gk);h3r=r(bao,"This class cannot be instantiated directly using "),q3e=n(bao,"CODE",{});var EYt=s(q3e);u3r=r(EYt,"__init__()"),EYt.forEach(t),p3r=r(bao," (throws an error)."),bao.forEach(t),_3r=i(Xl),Rt=n(Xl,"DIV",{class:!0});var Qy=s(Rt);T(hk.$$.fragment,Qy),b3r=i(Qy),j3e=n(Qy,"P",{});var CYt=s(j3e);v3r=r(CYt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),CYt.forEach(t),F3r=i(Qy),mc=n(Qy,"P",{});var vde=s(mc);T3r=r(vde,`Note:
Loading a model from its configuration file does `),D3e=n(vde,"STRONG",{});var wYt=s(D3e);M3r=r(wYt,"not"),wYt.forEach(t),E3r=r(vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(vde,"A",{href:!0});var AYt=s(uK);C3r=r(AYt,"from_pretrained()"),AYt.forEach(t),w3r=r(vde," to load the model weights."),vde.forEach(t),A3r=i(Qy),T(nC.$$.fragment,Qy),Qy.forEach(t),L3r=i(Xl),go=n(Xl,"DIV",{class:!0});var Ia=s(go);T(uk.$$.fragment,Ia),y3r=i(Ia),G3e=n(Ia,"P",{});var LYt=s(G3e);x3r=r(LYt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),LYt.forEach(t),$3r=i(Ia),hn=n(Ia,"P",{});var Wy=s(hn);k3r=r(Wy,"The model class to instantiate is selected based on the "),O3e=n(Wy,"CODE",{});var yYt=s(O3e);S3r=r(yYt,"model_type"),yYt.forEach(t),R3r=r(Wy,` property of the config object (either
passed as an argument or loaded from `),V3e=n(Wy,"CODE",{});var xYt=s(V3e);P3r=r(xYt,"pretrained_model_name_or_path"),xYt.forEach(t),B3r=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(Wy,"CODE",{});var $Yt=s(X3e);I3r=r($Yt,"pretrained_model_name_or_path"),$Yt.forEach(t),N3r=r(Wy,":"),Wy.forEach(t),q3r=i(Ia),z3e=n(Ia,"UL",{});var kYt=s(z3e);sC=n(kYt,"LI",{});var WWe=s(sC);Q3e=n(WWe,"STRONG",{});var SYt=s(Q3e);j3r=r(SYt,"videomae"),SYt.forEach(t),D3r=r(WWe," \u2014 "),pK=n(WWe,"A",{href:!0});var RYt=s(pK);G3r=r(RYt,"VideoMAEForVideoClassification"),RYt.forEach(t),O3r=r(WWe," (VideoMAE model)"),WWe.forEach(t),kYt.forEach(t),V3r=i(Ia),lC=n(Ia,"P",{});var UWe=s(lC);X3r=r(UWe,"The model is set in evaluation mode by default using "),W3e=n(UWe,"CODE",{});var PYt=s(W3e);z3r=r(PYt,"model.eval()"),PYt.forEach(t),Q3r=r(UWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U3e=n(UWe,"CODE",{});var BYt=s(U3e);W3r=r(BYt,"model.train()"),BYt.forEach(t),UWe.forEach(t),U3r=i(Ia),T(iC.$$.fragment,Ia),Ia.forEach(t),Xl.forEach(t),tro=i(m),fc=n(m,"H2",{class:!0});var vao=s(fc);dC=n(vao,"A",{id:!0,class:!0,href:!0});var IYt=s(dC);H3e=n(IYt,"SPAN",{});var NYt=s(H3e);T(pk.$$.fragment,NYt),NYt.forEach(t),IYt.forEach(t),H3r=i(vao),J3e=n(vao,"SPAN",{});var qYt=s(J3e);J3r=r(qYt,"AutoModelForVision2Seq"),qYt.forEach(t),vao.forEach(t),aro=i(m),Ho=n(m,"DIV",{class:!0});var zl=s(Ho);T(_k.$$.fragment,zl),Y3r=i(zl),gc=n(zl,"P",{});var Fde=s(gc);Z3r=r(Fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_K=n(Fde,"A",{href:!0});var jYt=s(_K);K3r=r(jYt,"from_pretrained()"),jYt.forEach(t),e5r=r(Fde," class method or the "),bK=n(Fde,"A",{href:!0});var DYt=s(bK);o5r=r(DYt,"from_config()"),DYt.forEach(t),r5r=r(Fde,` class
method.`),Fde.forEach(t),t5r=i(zl),bk=n(zl,"P",{});var Fao=s(bk);a5r=r(Fao,"This class cannot be instantiated directly using "),Y3e=n(Fao,"CODE",{});var GYt=s(Y3e);n5r=r(GYt,"__init__()"),GYt.forEach(t),s5r=r(Fao," (throws an error)."),Fao.forEach(t),l5r=i(zl),Pt=n(zl,"DIV",{class:!0});var Uy=s(Pt);T(vk.$$.fragment,Uy),i5r=i(Uy),Z3e=n(Uy,"P",{});var OYt=s(Z3e);d5r=r(OYt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OYt.forEach(t),c5r=i(Uy),hc=n(Uy,"P",{});var Tde=s(hc);m5r=r(Tde,`Note:
Loading a model from its configuration file does `),K3e=n(Tde,"STRONG",{});var VYt=s(K3e);f5r=r(VYt,"not"),VYt.forEach(t),g5r=r(Tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Tde,"A",{href:!0});var XYt=s(vK);h5r=r(XYt,"from_pretrained()"),XYt.forEach(t),u5r=r(Tde," to load the model weights."),Tde.forEach(t),p5r=i(Uy),T(cC.$$.fragment,Uy),Uy.forEach(t),_5r=i(zl),ho=n(zl,"DIV",{class:!0});var Na=s(ho);T(Fk.$$.fragment,Na),b5r=i(Na),e5e=n(Na,"P",{});var zYt=s(e5e);v5r=r(zYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zYt.forEach(t),F5r=i(Na),un=n(Na,"P",{});var Hy=s(un);T5r=r(Hy,"The model class to instantiate is selected based on the "),o5e=n(Hy,"CODE",{});var QYt=s(o5e);M5r=r(QYt,"model_type"),QYt.forEach(t),E5r=r(Hy,` property of the config object (either
passed as an argument or loaded from `),r5e=n(Hy,"CODE",{});var WYt=s(r5e);C5r=r(WYt,"pretrained_model_name_or_path"),WYt.forEach(t),w5r=r(Hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(Hy,"CODE",{});var UYt=s(t5e);A5r=r(UYt,"pretrained_model_name_or_path"),UYt.forEach(t),L5r=r(Hy,":"),Hy.forEach(t),y5r=i(Na),a5e=n(Na,"UL",{});var HYt=s(a5e);mC=n(HYt,"LI",{});var HWe=s(mC);n5e=n(HWe,"STRONG",{});var JYt=s(n5e);x5r=r(JYt,"vision-encoder-decoder"),JYt.forEach(t),$5r=r(HWe," \u2014 "),FK=n(HWe,"A",{href:!0});var YYt=s(FK);k5r=r(YYt,"VisionEncoderDecoderModel"),YYt.forEach(t),S5r=r(HWe," (Vision Encoder decoder model)"),HWe.forEach(t),HYt.forEach(t),R5r=i(Na),fC=n(Na,"P",{});var JWe=s(fC);P5r=r(JWe,"The model is set in evaluation mode by default using "),s5e=n(JWe,"CODE",{});var ZYt=s(s5e);B5r=r(ZYt,"model.eval()"),ZYt.forEach(t),I5r=r(JWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l5e=n(JWe,"CODE",{});var KYt=s(l5e);N5r=r(KYt,"model.train()"),KYt.forEach(t),JWe.forEach(t),q5r=i(Na),T(gC.$$.fragment,Na),Na.forEach(t),zl.forEach(t),nro=i(m),uc=n(m,"H2",{class:!0});var Tao=s(uc);hC=n(Tao,"A",{id:!0,class:!0,href:!0});var eZt=s(hC);i5e=n(eZt,"SPAN",{});var oZt=s(i5e);T(Tk.$$.fragment,oZt),oZt.forEach(t),eZt.forEach(t),j5r=i(Tao),d5e=n(Tao,"SPAN",{});var rZt=s(d5e);D5r=r(rZt,"AutoModelForVisualQuestionAnswering"),rZt.forEach(t),Tao.forEach(t),sro=i(m),Jo=n(m,"DIV",{class:!0});var Ql=s(Jo);T(Mk.$$.fragment,Ql),G5r=i(Ql),pc=n(Ql,"P",{});var Mde=s(pc);O5r=r(Mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),TK=n(Mde,"A",{href:!0});var tZt=s(TK);V5r=r(tZt,"from_pretrained()"),tZt.forEach(t),X5r=r(Mde," class method or the "),MK=n(Mde,"A",{href:!0});var aZt=s(MK);z5r=r(aZt,"from_config()"),aZt.forEach(t),Q5r=r(Mde,` class
method.`),Mde.forEach(t),W5r=i(Ql),Ek=n(Ql,"P",{});var Mao=s(Ek);U5r=r(Mao,"This class cannot be instantiated directly using "),c5e=n(Mao,"CODE",{});var nZt=s(c5e);H5r=r(nZt,"__init__()"),nZt.forEach(t),J5r=r(Mao," (throws an error)."),Mao.forEach(t),Y5r=i(Ql),Bt=n(Ql,"DIV",{class:!0});var Jy=s(Bt);T(Ck.$$.fragment,Jy),Z5r=i(Jy),m5e=n(Jy,"P",{});var sZt=s(m5e);K5r=r(sZt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sZt.forEach(t),e0r=i(Jy),_c=n(Jy,"P",{});var Ede=s(_c);o0r=r(Ede,`Note:
Loading a model from its configuration file does `),f5e=n(Ede,"STRONG",{});var lZt=s(f5e);r0r=r(lZt,"not"),lZt.forEach(t),t0r=r(Ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(Ede,"A",{href:!0});var iZt=s(EK);a0r=r(iZt,"from_pretrained()"),iZt.forEach(t),n0r=r(Ede," to load the model weights."),Ede.forEach(t),s0r=i(Jy),T(uC.$$.fragment,Jy),Jy.forEach(t),l0r=i(Ql),uo=n(Ql,"DIV",{class:!0});var qa=s(uo);T(wk.$$.fragment,qa),i0r=i(qa),g5e=n(qa,"P",{});var dZt=s(g5e);d0r=r(dZt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),dZt.forEach(t),c0r=i(qa),pn=n(qa,"P",{});var Yy=s(pn);m0r=r(Yy,"The model class to instantiate is selected based on the "),h5e=n(Yy,"CODE",{});var cZt=s(h5e);f0r=r(cZt,"model_type"),cZt.forEach(t),g0r=r(Yy,` property of the config object (either
passed as an argument or loaded from `),u5e=n(Yy,"CODE",{});var mZt=s(u5e);h0r=r(mZt,"pretrained_model_name_or_path"),mZt.forEach(t),u0r=r(Yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(Yy,"CODE",{});var fZt=s(p5e);p0r=r(fZt,"pretrained_model_name_or_path"),fZt.forEach(t),_0r=r(Yy,":"),Yy.forEach(t),b0r=i(qa),_5e=n(qa,"UL",{});var gZt=s(_5e);pC=n(gZt,"LI",{});var YWe=s(pC);b5e=n(YWe,"STRONG",{});var hZt=s(b5e);v0r=r(hZt,"vilt"),hZt.forEach(t),F0r=r(YWe," \u2014 "),CK=n(YWe,"A",{href:!0});var uZt=s(CK);T0r=r(uZt,"ViltForQuestionAnswering"),uZt.forEach(t),M0r=r(YWe," (ViLT model)"),YWe.forEach(t),gZt.forEach(t),E0r=i(qa),_C=n(qa,"P",{});var ZWe=s(_C);C0r=r(ZWe,"The model is set in evaluation mode by default using "),v5e=n(ZWe,"CODE",{});var pZt=s(v5e);w0r=r(pZt,"model.eval()"),pZt.forEach(t),A0r=r(ZWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F5e=n(ZWe,"CODE",{});var _Zt=s(F5e);L0r=r(_Zt,"model.train()"),_Zt.forEach(t),ZWe.forEach(t),y0r=i(qa),T(bC.$$.fragment,qa),qa.forEach(t),Ql.forEach(t),lro=i(m),bc=n(m,"H2",{class:!0});var Eao=s(bc);vC=n(Eao,"A",{id:!0,class:!0,href:!0});var bZt=s(vC);T5e=n(bZt,"SPAN",{});var vZt=s(T5e);T(Ak.$$.fragment,vZt),vZt.forEach(t),bZt.forEach(t),x0r=i(Eao),M5e=n(Eao,"SPAN",{});var FZt=s(M5e);$0r=r(FZt,"AutoModelForAudioClassification"),FZt.forEach(t),Eao.forEach(t),iro=i(m),Yo=n(m,"DIV",{class:!0});var Wl=s(Yo);T(Lk.$$.fragment,Wl),k0r=i(Wl),vc=n(Wl,"P",{});var Cde=s(vc);S0r=r(Cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wK=n(Cde,"A",{href:!0});var TZt=s(wK);R0r=r(TZt,"from_pretrained()"),TZt.forEach(t),P0r=r(Cde," class method or the "),AK=n(Cde,"A",{href:!0});var MZt=s(AK);B0r=r(MZt,"from_config()"),MZt.forEach(t),I0r=r(Cde,` class
method.`),Cde.forEach(t),N0r=i(Wl),yk=n(Wl,"P",{});var Cao=s(yk);q0r=r(Cao,"This class cannot be instantiated directly using "),E5e=n(Cao,"CODE",{});var EZt=s(E5e);j0r=r(EZt,"__init__()"),EZt.forEach(t),D0r=r(Cao," (throws an error)."),Cao.forEach(t),G0r=i(Wl),It=n(Wl,"DIV",{class:!0});var Zy=s(It);T(xk.$$.fragment,Zy),O0r=i(Zy),C5e=n(Zy,"P",{});var CZt=s(C5e);V0r=r(CZt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),CZt.forEach(t),X0r=i(Zy),Fc=n(Zy,"P",{});var wde=s(Fc);z0r=r(wde,`Note:
Loading a model from its configuration file does `),w5e=n(wde,"STRONG",{});var wZt=s(w5e);Q0r=r(wZt,"not"),wZt.forEach(t),W0r=r(wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(wde,"A",{href:!0});var AZt=s(LK);U0r=r(AZt,"from_pretrained()"),AZt.forEach(t),H0r=r(wde," to load the model weights."),wde.forEach(t),J0r=i(Zy),T(FC.$$.fragment,Zy),Zy.forEach(t),Y0r=i(Wl),po=n(Wl,"DIV",{class:!0});var ja=s(po);T($k.$$.fragment,ja),Z0r=i(ja),A5e=n(ja,"P",{});var LZt=s(A5e);K0r=r(LZt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),LZt.forEach(t),ewr=i(ja),_n=n(ja,"P",{});var Ky=s(_n);owr=r(Ky,"The model class to instantiate is selected based on the "),L5e=n(Ky,"CODE",{});var yZt=s(L5e);rwr=r(yZt,"model_type"),yZt.forEach(t),twr=r(Ky,` property of the config object (either
passed as an argument or loaded from `),y5e=n(Ky,"CODE",{});var xZt=s(y5e);awr=r(xZt,"pretrained_model_name_or_path"),xZt.forEach(t),nwr=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(Ky,"CODE",{});var $Zt=s(x5e);swr=r($Zt,"pretrained_model_name_or_path"),$Zt.forEach(t),lwr=r(Ky,":"),Ky.forEach(t),iwr=i(ja),Pe=n(ja,"UL",{});var Qe=s(Pe);TC=n(Qe,"LI",{});var KWe=s(TC);$5e=n(KWe,"STRONG",{});var kZt=s($5e);dwr=r(kZt,"data2vec-audio"),kZt.forEach(t),cwr=r(KWe," \u2014 "),yK=n(KWe,"A",{href:!0});var SZt=s(yK);mwr=r(SZt,"Data2VecAudioForSequenceClassification"),SZt.forEach(t),fwr=r(KWe," (Data2VecAudio model)"),KWe.forEach(t),gwr=i(Qe),MC=n(Qe,"LI",{});var eUe=s(MC);k5e=n(eUe,"STRONG",{});var RZt=s(k5e);hwr=r(RZt,"hubert"),RZt.forEach(t),uwr=r(eUe," \u2014 "),xK=n(eUe,"A",{href:!0});var PZt=s(xK);pwr=r(PZt,"HubertForSequenceClassification"),PZt.forEach(t),_wr=r(eUe," (Hubert model)"),eUe.forEach(t),bwr=i(Qe),EC=n(Qe,"LI",{});var oUe=s(EC);S5e=n(oUe,"STRONG",{});var BZt=s(S5e);vwr=r(BZt,"sew"),BZt.forEach(t),Fwr=r(oUe," \u2014 "),$K=n(oUe,"A",{href:!0});var IZt=s($K);Twr=r(IZt,"SEWForSequenceClassification"),IZt.forEach(t),Mwr=r(oUe," (SEW model)"),oUe.forEach(t),Ewr=i(Qe),CC=n(Qe,"LI",{});var rUe=s(CC);R5e=n(rUe,"STRONG",{});var NZt=s(R5e);Cwr=r(NZt,"sew-d"),NZt.forEach(t),wwr=r(rUe," \u2014 "),kK=n(rUe,"A",{href:!0});var qZt=s(kK);Awr=r(qZt,"SEWDForSequenceClassification"),qZt.forEach(t),Lwr=r(rUe," (SEW-D model)"),rUe.forEach(t),ywr=i(Qe),wC=n(Qe,"LI",{});var tUe=s(wC);P5e=n(tUe,"STRONG",{});var jZt=s(P5e);xwr=r(jZt,"unispeech"),jZt.forEach(t),$wr=r(tUe," \u2014 "),SK=n(tUe,"A",{href:!0});var DZt=s(SK);kwr=r(DZt,"UniSpeechForSequenceClassification"),DZt.forEach(t),Swr=r(tUe," (UniSpeech model)"),tUe.forEach(t),Rwr=i(Qe),AC=n(Qe,"LI",{});var aUe=s(AC);B5e=n(aUe,"STRONG",{});var GZt=s(B5e);Pwr=r(GZt,"unispeech-sat"),GZt.forEach(t),Bwr=r(aUe," \u2014 "),RK=n(aUe,"A",{href:!0});var OZt=s(RK);Iwr=r(OZt,"UniSpeechSatForSequenceClassification"),OZt.forEach(t),Nwr=r(aUe," (UniSpeechSat model)"),aUe.forEach(t),qwr=i(Qe),LC=n(Qe,"LI",{});var nUe=s(LC);I5e=n(nUe,"STRONG",{});var VZt=s(I5e);jwr=r(VZt,"wav2vec2"),VZt.forEach(t),Dwr=r(nUe," \u2014 "),PK=n(nUe,"A",{href:!0});var XZt=s(PK);Gwr=r(XZt,"Wav2Vec2ForSequenceClassification"),XZt.forEach(t),Owr=r(nUe," (Wav2Vec2 model)"),nUe.forEach(t),Vwr=i(Qe),yC=n(Qe,"LI",{});var sUe=s(yC);N5e=n(sUe,"STRONG",{});var zZt=s(N5e);Xwr=r(zZt,"wav2vec2-conformer"),zZt.forEach(t),zwr=r(sUe," \u2014 "),BK=n(sUe,"A",{href:!0});var QZt=s(BK);Qwr=r(QZt,"Wav2Vec2ConformerForSequenceClassification"),QZt.forEach(t),Wwr=r(sUe," (Wav2Vec2-Conformer model)"),sUe.forEach(t),Uwr=i(Qe),xC=n(Qe,"LI",{});var lUe=s(xC);q5e=n(lUe,"STRONG",{});var WZt=s(q5e);Hwr=r(WZt,"wavlm"),WZt.forEach(t),Jwr=r(lUe," \u2014 "),IK=n(lUe,"A",{href:!0});var UZt=s(IK);Ywr=r(UZt,"WavLMForSequenceClassification"),UZt.forEach(t),Zwr=r(lUe," (WavLM model)"),lUe.forEach(t),Qe.forEach(t),Kwr=i(ja),$C=n(ja,"P",{});var iUe=s($C);eAr=r(iUe,"The model is set in evaluation mode by default using "),j5e=n(iUe,"CODE",{});var HZt=s(j5e);oAr=r(HZt,"model.eval()"),HZt.forEach(t),rAr=r(iUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D5e=n(iUe,"CODE",{});var JZt=s(D5e);tAr=r(JZt,"model.train()"),JZt.forEach(t),iUe.forEach(t),aAr=i(ja),T(kC.$$.fragment,ja),ja.forEach(t),Wl.forEach(t),dro=i(m),Tc=n(m,"H2",{class:!0});var wao=s(Tc);SC=n(wao,"A",{id:!0,class:!0,href:!0});var YZt=s(SC);G5e=n(YZt,"SPAN",{});var ZZt=s(G5e);T(kk.$$.fragment,ZZt),ZZt.forEach(t),YZt.forEach(t),nAr=i(wao),O5e=n(wao,"SPAN",{});var KZt=s(O5e);sAr=r(KZt,"AutoModelForAudioFrameClassification"),KZt.forEach(t),wao.forEach(t),cro=i(m),Zo=n(m,"DIV",{class:!0});var Ul=s(Zo);T(Sk.$$.fragment,Ul),lAr=i(Ul),Mc=n(Ul,"P",{});var Ade=s(Mc);iAr=r(Ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),NK=n(Ade,"A",{href:!0});var eKt=s(NK);dAr=r(eKt,"from_pretrained()"),eKt.forEach(t),cAr=r(Ade," class method or the "),qK=n(Ade,"A",{href:!0});var oKt=s(qK);mAr=r(oKt,"from_config()"),oKt.forEach(t),fAr=r(Ade,` class
method.`),Ade.forEach(t),gAr=i(Ul),Rk=n(Ul,"P",{});var Aao=s(Rk);hAr=r(Aao,"This class cannot be instantiated directly using "),V5e=n(Aao,"CODE",{});var rKt=s(V5e);uAr=r(rKt,"__init__()"),rKt.forEach(t),pAr=r(Aao," (throws an error)."),Aao.forEach(t),_Ar=i(Ul),Nt=n(Ul,"DIV",{class:!0});var e9=s(Nt);T(Pk.$$.fragment,e9),bAr=i(e9),X5e=n(e9,"P",{});var tKt=s(X5e);vAr=r(tKt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tKt.forEach(t),FAr=i(e9),Ec=n(e9,"P",{});var Lde=s(Ec);TAr=r(Lde,`Note:
Loading a model from its configuration file does `),z5e=n(Lde,"STRONG",{});var aKt=s(z5e);MAr=r(aKt,"not"),aKt.forEach(t),EAr=r(Lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Lde,"A",{href:!0});var nKt=s(jK);CAr=r(nKt,"from_pretrained()"),nKt.forEach(t),wAr=r(Lde," to load the model weights."),Lde.forEach(t),AAr=i(e9),T(RC.$$.fragment,e9),e9.forEach(t),LAr=i(Ul),_o=n(Ul,"DIV",{class:!0});var Da=s(_o);T(Bk.$$.fragment,Da),yAr=i(Da),Q5e=n(Da,"P",{});var sKt=s(Q5e);xAr=r(sKt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),sKt.forEach(t),$Ar=i(Da),bn=n(Da,"P",{});var o9=s(bn);kAr=r(o9,"The model class to instantiate is selected based on the "),W5e=n(o9,"CODE",{});var lKt=s(W5e);SAr=r(lKt,"model_type"),lKt.forEach(t),RAr=r(o9,` property of the config object (either
passed as an argument or loaded from `),U5e=n(o9,"CODE",{});var iKt=s(U5e);PAr=r(iKt,"pretrained_model_name_or_path"),iKt.forEach(t),BAr=r(o9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(o9,"CODE",{});var dKt=s(H5e);IAr=r(dKt,"pretrained_model_name_or_path"),dKt.forEach(t),NAr=r(o9,":"),o9.forEach(t),qAr=i(Da),gt=n(Da,"UL",{});var Hl=s(gt);PC=n(Hl,"LI",{});var dUe=s(PC);J5e=n(dUe,"STRONG",{});var cKt=s(J5e);jAr=r(cKt,"data2vec-audio"),cKt.forEach(t),DAr=r(dUe," \u2014 "),DK=n(dUe,"A",{href:!0});var mKt=s(DK);GAr=r(mKt,"Data2VecAudioForAudioFrameClassification"),mKt.forEach(t),OAr=r(dUe," (Data2VecAudio model)"),dUe.forEach(t),VAr=i(Hl),BC=n(Hl,"LI",{});var cUe=s(BC);Y5e=n(cUe,"STRONG",{});var fKt=s(Y5e);XAr=r(fKt,"unispeech-sat"),fKt.forEach(t),zAr=r(cUe," \u2014 "),GK=n(cUe,"A",{href:!0});var gKt=s(GK);QAr=r(gKt,"UniSpeechSatForAudioFrameClassification"),gKt.forEach(t),WAr=r(cUe," (UniSpeechSat model)"),cUe.forEach(t),UAr=i(Hl),IC=n(Hl,"LI",{});var mUe=s(IC);Z5e=n(mUe,"STRONG",{});var hKt=s(Z5e);HAr=r(hKt,"wav2vec2"),hKt.forEach(t),JAr=r(mUe," \u2014 "),OK=n(mUe,"A",{href:!0});var uKt=s(OK);YAr=r(uKt,"Wav2Vec2ForAudioFrameClassification"),uKt.forEach(t),ZAr=r(mUe," (Wav2Vec2 model)"),mUe.forEach(t),KAr=i(Hl),NC=n(Hl,"LI",{});var fUe=s(NC);K5e=n(fUe,"STRONG",{});var pKt=s(K5e);e6r=r(pKt,"wav2vec2-conformer"),pKt.forEach(t),o6r=r(fUe," \u2014 "),VK=n(fUe,"A",{href:!0});var _Kt=s(VK);r6r=r(_Kt,"Wav2Vec2ConformerForAudioFrameClassification"),_Kt.forEach(t),t6r=r(fUe," (Wav2Vec2-Conformer model)"),fUe.forEach(t),a6r=i(Hl),qC=n(Hl,"LI",{});var gUe=s(qC);e0e=n(gUe,"STRONG",{});var bKt=s(e0e);n6r=r(bKt,"wavlm"),bKt.forEach(t),s6r=r(gUe," \u2014 "),XK=n(gUe,"A",{href:!0});var vKt=s(XK);l6r=r(vKt,"WavLMForAudioFrameClassification"),vKt.forEach(t),i6r=r(gUe," (WavLM model)"),gUe.forEach(t),Hl.forEach(t),d6r=i(Da),jC=n(Da,"P",{});var hUe=s(jC);c6r=r(hUe,"The model is set in evaluation mode by default using "),o0e=n(hUe,"CODE",{});var FKt=s(o0e);m6r=r(FKt,"model.eval()"),FKt.forEach(t),f6r=r(hUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r0e=n(hUe,"CODE",{});var TKt=s(r0e);g6r=r(TKt,"model.train()"),TKt.forEach(t),hUe.forEach(t),h6r=i(Da),T(DC.$$.fragment,Da),Da.forEach(t),Ul.forEach(t),mro=i(m),Cc=n(m,"H2",{class:!0});var Lao=s(Cc);GC=n(Lao,"A",{id:!0,class:!0,href:!0});var MKt=s(GC);t0e=n(MKt,"SPAN",{});var EKt=s(t0e);T(Ik.$$.fragment,EKt),EKt.forEach(t),MKt.forEach(t),u6r=i(Lao),a0e=n(Lao,"SPAN",{});var CKt=s(a0e);p6r=r(CKt,"AutoModelForCTC"),CKt.forEach(t),Lao.forEach(t),fro=i(m),Ko=n(m,"DIV",{class:!0});var Jl=s(Ko);T(Nk.$$.fragment,Jl),_6r=i(Jl),wc=n(Jl,"P",{});var yde=s(wc);b6r=r(yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zK=n(yde,"A",{href:!0});var wKt=s(zK);v6r=r(wKt,"from_pretrained()"),wKt.forEach(t),F6r=r(yde," class method or the "),QK=n(yde,"A",{href:!0});var AKt=s(QK);T6r=r(AKt,"from_config()"),AKt.forEach(t),M6r=r(yde,` class
method.`),yde.forEach(t),E6r=i(Jl),qk=n(Jl,"P",{});var yao=s(qk);C6r=r(yao,"This class cannot be instantiated directly using "),n0e=n(yao,"CODE",{});var LKt=s(n0e);w6r=r(LKt,"__init__()"),LKt.forEach(t),A6r=r(yao," (throws an error)."),yao.forEach(t),L6r=i(Jl),qt=n(Jl,"DIV",{class:!0});var r9=s(qt);T(jk.$$.fragment,r9),y6r=i(r9),s0e=n(r9,"P",{});var yKt=s(s0e);x6r=r(yKt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),yKt.forEach(t),$6r=i(r9),Ac=n(r9,"P",{});var xde=s(Ac);k6r=r(xde,`Note:
Loading a model from its configuration file does `),l0e=n(xde,"STRONG",{});var xKt=s(l0e);S6r=r(xKt,"not"),xKt.forEach(t),R6r=r(xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(xde,"A",{href:!0});var $Kt=s(WK);P6r=r($Kt,"from_pretrained()"),$Kt.forEach(t),B6r=r(xde," to load the model weights."),xde.forEach(t),I6r=i(r9),T(OC.$$.fragment,r9),r9.forEach(t),N6r=i(Jl),bo=n(Jl,"DIV",{class:!0});var Ga=s(bo);T(Dk.$$.fragment,Ga),q6r=i(Ga),i0e=n(Ga,"P",{});var kKt=s(i0e);j6r=r(kKt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kKt.forEach(t),D6r=i(Ga),vn=n(Ga,"P",{});var t9=s(vn);G6r=r(t9,"The model class to instantiate is selected based on the "),d0e=n(t9,"CODE",{});var SKt=s(d0e);O6r=r(SKt,"model_type"),SKt.forEach(t),V6r=r(t9,` property of the config object (either
passed as an argument or loaded from `),c0e=n(t9,"CODE",{});var RKt=s(c0e);X6r=r(RKt,"pretrained_model_name_or_path"),RKt.forEach(t),z6r=r(t9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(t9,"CODE",{});var PKt=s(m0e);Q6r=r(PKt,"pretrained_model_name_or_path"),PKt.forEach(t),W6r=r(t9,":"),t9.forEach(t),U6r=i(Ga),Le=n(Ga,"UL",{});var Ie=s(Le);VC=n(Ie,"LI",{});var uUe=s(VC);f0e=n(uUe,"STRONG",{});var BKt=s(f0e);H6r=r(BKt,"data2vec-audio"),BKt.forEach(t),J6r=r(uUe," \u2014 "),UK=n(uUe,"A",{href:!0});var IKt=s(UK);Y6r=r(IKt,"Data2VecAudioForCTC"),IKt.forEach(t),Z6r=r(uUe," (Data2VecAudio model)"),uUe.forEach(t),K6r=i(Ie),XC=n(Ie,"LI",{});var pUe=s(XC);g0e=n(pUe,"STRONG",{});var NKt=s(g0e);e7r=r(NKt,"hubert"),NKt.forEach(t),o7r=r(pUe," \u2014 "),HK=n(pUe,"A",{href:!0});var qKt=s(HK);r7r=r(qKt,"HubertForCTC"),qKt.forEach(t),t7r=r(pUe," (Hubert model)"),pUe.forEach(t),a7r=i(Ie),zC=n(Ie,"LI",{});var _Ue=s(zC);h0e=n(_Ue,"STRONG",{});var jKt=s(h0e);n7r=r(jKt,"mctct"),jKt.forEach(t),s7r=r(_Ue," \u2014 "),JK=n(_Ue,"A",{href:!0});var DKt=s(JK);l7r=r(DKt,"MCTCTForCTC"),DKt.forEach(t),i7r=r(_Ue," (M-CTC-T model)"),_Ue.forEach(t),d7r=i(Ie),QC=n(Ie,"LI",{});var bUe=s(QC);u0e=n(bUe,"STRONG",{});var GKt=s(u0e);c7r=r(GKt,"sew"),GKt.forEach(t),m7r=r(bUe," \u2014 "),YK=n(bUe,"A",{href:!0});var OKt=s(YK);f7r=r(OKt,"SEWForCTC"),OKt.forEach(t),g7r=r(bUe," (SEW model)"),bUe.forEach(t),h7r=i(Ie),WC=n(Ie,"LI",{});var vUe=s(WC);p0e=n(vUe,"STRONG",{});var VKt=s(p0e);u7r=r(VKt,"sew-d"),VKt.forEach(t),p7r=r(vUe," \u2014 "),ZK=n(vUe,"A",{href:!0});var XKt=s(ZK);_7r=r(XKt,"SEWDForCTC"),XKt.forEach(t),b7r=r(vUe," (SEW-D model)"),vUe.forEach(t),v7r=i(Ie),UC=n(Ie,"LI",{});var FUe=s(UC);_0e=n(FUe,"STRONG",{});var zKt=s(_0e);F7r=r(zKt,"unispeech"),zKt.forEach(t),T7r=r(FUe," \u2014 "),KK=n(FUe,"A",{href:!0});var QKt=s(KK);M7r=r(QKt,"UniSpeechForCTC"),QKt.forEach(t),E7r=r(FUe," (UniSpeech model)"),FUe.forEach(t),C7r=i(Ie),HC=n(Ie,"LI",{});var TUe=s(HC);b0e=n(TUe,"STRONG",{});var WKt=s(b0e);w7r=r(WKt,"unispeech-sat"),WKt.forEach(t),A7r=r(TUe," \u2014 "),eee=n(TUe,"A",{href:!0});var UKt=s(eee);L7r=r(UKt,"UniSpeechSatForCTC"),UKt.forEach(t),y7r=r(TUe," (UniSpeechSat model)"),TUe.forEach(t),x7r=i(Ie),JC=n(Ie,"LI",{});var MUe=s(JC);v0e=n(MUe,"STRONG",{});var HKt=s(v0e);$7r=r(HKt,"wav2vec2"),HKt.forEach(t),k7r=r(MUe," \u2014 "),oee=n(MUe,"A",{href:!0});var JKt=s(oee);S7r=r(JKt,"Wav2Vec2ForCTC"),JKt.forEach(t),R7r=r(MUe," (Wav2Vec2 model)"),MUe.forEach(t),P7r=i(Ie),YC=n(Ie,"LI",{});var EUe=s(YC);F0e=n(EUe,"STRONG",{});var YKt=s(F0e);B7r=r(YKt,"wav2vec2-conformer"),YKt.forEach(t),I7r=r(EUe," \u2014 "),ree=n(EUe,"A",{href:!0});var ZKt=s(ree);N7r=r(ZKt,"Wav2Vec2ConformerForCTC"),ZKt.forEach(t),q7r=r(EUe," (Wav2Vec2-Conformer model)"),EUe.forEach(t),j7r=i(Ie),ZC=n(Ie,"LI",{});var CUe=s(ZC);T0e=n(CUe,"STRONG",{});var KKt=s(T0e);D7r=r(KKt,"wavlm"),KKt.forEach(t),G7r=r(CUe," \u2014 "),tee=n(CUe,"A",{href:!0});var eea=s(tee);O7r=r(eea,"WavLMForCTC"),eea.forEach(t),V7r=r(CUe," (WavLM model)"),CUe.forEach(t),Ie.forEach(t),X7r=i(Ga),KC=n(Ga,"P",{});var wUe=s(KC);z7r=r(wUe,"The model is set in evaluation mode by default using "),M0e=n(wUe,"CODE",{});var oea=s(M0e);Q7r=r(oea,"model.eval()"),oea.forEach(t),W7r=r(wUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E0e=n(wUe,"CODE",{});var rea=s(E0e);U7r=r(rea,"model.train()"),rea.forEach(t),wUe.forEach(t),H7r=i(Ga),T(e3.$$.fragment,Ga),Ga.forEach(t),Jl.forEach(t),gro=i(m),Lc=n(m,"H2",{class:!0});var xao=s(Lc);o3=n(xao,"A",{id:!0,class:!0,href:!0});var tea=s(o3);C0e=n(tea,"SPAN",{});var aea=s(C0e);T(Gk.$$.fragment,aea),aea.forEach(t),tea.forEach(t),J7r=i(xao),w0e=n(xao,"SPAN",{});var nea=s(w0e);Y7r=r(nea,"AutoModelForSpeechSeq2Seq"),nea.forEach(t),xao.forEach(t),hro=i(m),er=n(m,"DIV",{class:!0});var Yl=s(er);T(Ok.$$.fragment,Yl),Z7r=i(Yl),yc=n(Yl,"P",{});var $de=s(yc);K7r=r($de,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aee=n($de,"A",{href:!0});var sea=s(aee);eLr=r(sea,"from_pretrained()"),sea.forEach(t),oLr=r($de," class method or the "),nee=n($de,"A",{href:!0});var lea=s(nee);rLr=r(lea,"from_config()"),lea.forEach(t),tLr=r($de,` class
method.`),$de.forEach(t),aLr=i(Yl),Vk=n(Yl,"P",{});var $ao=s(Vk);nLr=r($ao,"This class cannot be instantiated directly using "),A0e=n($ao,"CODE",{});var iea=s(A0e);sLr=r(iea,"__init__()"),iea.forEach(t),lLr=r($ao," (throws an error)."),$ao.forEach(t),iLr=i(Yl),jt=n(Yl,"DIV",{class:!0});var a9=s(jt);T(Xk.$$.fragment,a9),dLr=i(a9),L0e=n(a9,"P",{});var dea=s(L0e);cLr=r(dea,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dea.forEach(t),mLr=i(a9),xc=n(a9,"P",{});var kde=s(xc);fLr=r(kde,`Note:
Loading a model from its configuration file does `),y0e=n(kde,"STRONG",{});var cea=s(y0e);gLr=r(cea,"not"),cea.forEach(t),hLr=r(kde,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(kde,"A",{href:!0});var mea=s(see);uLr=r(mea,"from_pretrained()"),mea.forEach(t),pLr=r(kde," to load the model weights."),kde.forEach(t),_Lr=i(a9),T(r3.$$.fragment,a9),a9.forEach(t),bLr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Oa=s(vo);T(zk.$$.fragment,Oa),vLr=i(Oa),x0e=n(Oa,"P",{});var fea=s(x0e);FLr=r(fea,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fea.forEach(t),TLr=i(Oa),Fn=n(Oa,"P",{});var n9=s(Fn);MLr=r(n9,"The model class to instantiate is selected based on the "),$0e=n(n9,"CODE",{});var gea=s($0e);ELr=r(gea,"model_type"),gea.forEach(t),CLr=r(n9,` property of the config object (either
passed as an argument or loaded from `),k0e=n(n9,"CODE",{});var hea=s(k0e);wLr=r(hea,"pretrained_model_name_or_path"),hea.forEach(t),ALr=r(n9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(n9,"CODE",{});var uea=s(S0e);LLr=r(uea,"pretrained_model_name_or_path"),uea.forEach(t),yLr=r(n9,":"),n9.forEach(t),xLr=i(Oa),$c=n(Oa,"UL",{});var Sde=s($c);t3=n(Sde,"LI",{});var AUe=s(t3);R0e=n(AUe,"STRONG",{});var pea=s(R0e);$Lr=r(pea,"speech-encoder-decoder"),pea.forEach(t),kLr=r(AUe," \u2014 "),lee=n(AUe,"A",{href:!0});var _ea=s(lee);SLr=r(_ea,"SpeechEncoderDecoderModel"),_ea.forEach(t),RLr=r(AUe," (Speech Encoder decoder model)"),AUe.forEach(t),PLr=i(Sde),a3=n(Sde,"LI",{});var LUe=s(a3);P0e=n(LUe,"STRONG",{});var bea=s(P0e);BLr=r(bea,"speech_to_text"),bea.forEach(t),ILr=r(LUe," \u2014 "),iee=n(LUe,"A",{href:!0});var vea=s(iee);NLr=r(vea,"Speech2TextForConditionalGeneration"),vea.forEach(t),qLr=r(LUe," (Speech2Text model)"),LUe.forEach(t),jLr=i(Sde),n3=n(Sde,"LI",{});var yUe=s(n3);B0e=n(yUe,"STRONG",{});var Fea=s(B0e);DLr=r(Fea,"whisper"),Fea.forEach(t),GLr=r(yUe," \u2014 "),dee=n(yUe,"A",{href:!0});var Tea=s(dee);OLr=r(Tea,"WhisperForConditionalGeneration"),Tea.forEach(t),VLr=r(yUe," (Whisper model)"),yUe.forEach(t),Sde.forEach(t),XLr=i(Oa),s3=n(Oa,"P",{});var xUe=s(s3);zLr=r(xUe,"The model is set in evaluation mode by default using "),I0e=n(xUe,"CODE",{});var Mea=s(I0e);QLr=r(Mea,"model.eval()"),Mea.forEach(t),WLr=r(xUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N0e=n(xUe,"CODE",{});var Eea=s(N0e);ULr=r(Eea,"model.train()"),Eea.forEach(t),xUe.forEach(t),HLr=i(Oa),T(l3.$$.fragment,Oa),Oa.forEach(t),Yl.forEach(t),uro=i(m),kc=n(m,"H2",{class:!0});var kao=s(kc);i3=n(kao,"A",{id:!0,class:!0,href:!0});var Cea=s(i3);q0e=n(Cea,"SPAN",{});var wea=s(q0e);T(Qk.$$.fragment,wea),wea.forEach(t),Cea.forEach(t),JLr=i(kao),j0e=n(kao,"SPAN",{});var Aea=s(j0e);YLr=r(Aea,"AutoModelForAudioXVector"),Aea.forEach(t),kao.forEach(t),pro=i(m),or=n(m,"DIV",{class:!0});var Zl=s(or);T(Wk.$$.fragment,Zl),ZLr=i(Zl),Sc=n(Zl,"P",{});var Rde=s(Sc);KLr=r(Rde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cee=n(Rde,"A",{href:!0});var Lea=s(cee);e8r=r(Lea,"from_pretrained()"),Lea.forEach(t),o8r=r(Rde," class method or the "),mee=n(Rde,"A",{href:!0});var yea=s(mee);r8r=r(yea,"from_config()"),yea.forEach(t),t8r=r(Rde,` class
method.`),Rde.forEach(t),a8r=i(Zl),Uk=n(Zl,"P",{});var Sao=s(Uk);n8r=r(Sao,"This class cannot be instantiated directly using "),D0e=n(Sao,"CODE",{});var xea=s(D0e);s8r=r(xea,"__init__()"),xea.forEach(t),l8r=r(Sao," (throws an error)."),Sao.forEach(t),i8r=i(Zl),Dt=n(Zl,"DIV",{class:!0});var s9=s(Dt);T(Hk.$$.fragment,s9),d8r=i(s9),G0e=n(s9,"P",{});var $ea=s(G0e);c8r=r($ea,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$ea.forEach(t),m8r=i(s9),Rc=n(s9,"P",{});var Pde=s(Rc);f8r=r(Pde,`Note:
Loading a model from its configuration file does `),O0e=n(Pde,"STRONG",{});var kea=s(O0e);g8r=r(kea,"not"),kea.forEach(t),h8r=r(Pde,` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=n(Pde,"A",{href:!0});var Sea=s(fee);u8r=r(Sea,"from_pretrained()"),Sea.forEach(t),p8r=r(Pde," to load the model weights."),Pde.forEach(t),_8r=i(s9),T(d3.$$.fragment,s9),s9.forEach(t),b8r=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Va=s(Fo);T(Jk.$$.fragment,Va),v8r=i(Va),V0e=n(Va,"P",{});var Rea=s(V0e);F8r=r(Rea,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rea.forEach(t),T8r=i(Va),Tn=n(Va,"P",{});var l9=s(Tn);M8r=r(l9,"The model class to instantiate is selected based on the "),X0e=n(l9,"CODE",{});var Pea=s(X0e);E8r=r(Pea,"model_type"),Pea.forEach(t),C8r=r(l9,` property of the config object (either
passed as an argument or loaded from `),z0e=n(l9,"CODE",{});var Bea=s(z0e);w8r=r(Bea,"pretrained_model_name_or_path"),Bea.forEach(t),A8r=r(l9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q0e=n(l9,"CODE",{});var Iea=s(Q0e);L8r=r(Iea,"pretrained_model_name_or_path"),Iea.forEach(t),y8r=r(l9,":"),l9.forEach(t),x8r=i(Va),ht=n(Va,"UL",{});var Kl=s(ht);c3=n(Kl,"LI",{});var $Ue=s(c3);W0e=n($Ue,"STRONG",{});var Nea=s(W0e);$8r=r(Nea,"data2vec-audio"),Nea.forEach(t),k8r=r($Ue," \u2014 "),gee=n($Ue,"A",{href:!0});var qea=s(gee);S8r=r(qea,"Data2VecAudioForXVector"),qea.forEach(t),R8r=r($Ue," (Data2VecAudio model)"),$Ue.forEach(t),P8r=i(Kl),m3=n(Kl,"LI",{});var kUe=s(m3);U0e=n(kUe,"STRONG",{});var jea=s(U0e);B8r=r(jea,"unispeech-sat"),jea.forEach(t),I8r=r(kUe," \u2014 "),hee=n(kUe,"A",{href:!0});var Dea=s(hee);N8r=r(Dea,"UniSpeechSatForXVector"),Dea.forEach(t),q8r=r(kUe," (UniSpeechSat model)"),kUe.forEach(t),j8r=i(Kl),f3=n(Kl,"LI",{});var SUe=s(f3);H0e=n(SUe,"STRONG",{});var Gea=s(H0e);D8r=r(Gea,"wav2vec2"),Gea.forEach(t),G8r=r(SUe," \u2014 "),uee=n(SUe,"A",{href:!0});var Oea=s(uee);O8r=r(Oea,"Wav2Vec2ForXVector"),Oea.forEach(t),V8r=r(SUe," (Wav2Vec2 model)"),SUe.forEach(t),X8r=i(Kl),g3=n(Kl,"LI",{});var RUe=s(g3);J0e=n(RUe,"STRONG",{});var Vea=s(J0e);z8r=r(Vea,"wav2vec2-conformer"),Vea.forEach(t),Q8r=r(RUe," \u2014 "),pee=n(RUe,"A",{href:!0});var Xea=s(pee);W8r=r(Xea,"Wav2Vec2ConformerForXVector"),Xea.forEach(t),U8r=r(RUe," (Wav2Vec2-Conformer model)"),RUe.forEach(t),H8r=i(Kl),h3=n(Kl,"LI",{});var PUe=s(h3);Y0e=n(PUe,"STRONG",{});var zea=s(Y0e);J8r=r(zea,"wavlm"),zea.forEach(t),Y8r=r(PUe," \u2014 "),_ee=n(PUe,"A",{href:!0});var Qea=s(_ee);Z8r=r(Qea,"WavLMForXVector"),Qea.forEach(t),K8r=r(PUe," (WavLM model)"),PUe.forEach(t),Kl.forEach(t),eyr=i(Va),u3=n(Va,"P",{});var BUe=s(u3);oyr=r(BUe,"The model is set in evaluation mode by default using "),Z0e=n(BUe,"CODE",{});var Wea=s(Z0e);ryr=r(Wea,"model.eval()"),Wea.forEach(t),tyr=r(BUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K0e=n(BUe,"CODE",{});var Uea=s(K0e);ayr=r(Uea,"model.train()"),Uea.forEach(t),BUe.forEach(t),nyr=i(Va),T(p3.$$.fragment,Va),Va.forEach(t),Zl.forEach(t),_ro=i(m),Pc=n(m,"H2",{class:!0});var Rao=s(Pc);_3=n(Rao,"A",{id:!0,class:!0,href:!0});var Hea=s(_3);ewe=n(Hea,"SPAN",{});var Jea=s(ewe);T(Yk.$$.fragment,Jea),Jea.forEach(t),Hea.forEach(t),syr=i(Rao),owe=n(Rao,"SPAN",{});var Yea=s(owe);lyr=r(Yea,"AutoModelForMaskedImageModeling"),Yea.forEach(t),Rao.forEach(t),bro=i(m),rr=n(m,"DIV",{class:!0});var ei=s(rr);T(Zk.$$.fragment,ei),iyr=i(ei),Bc=n(ei,"P",{});var Bde=s(Bc);dyr=r(Bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bee=n(Bde,"A",{href:!0});var Zea=s(bee);cyr=r(Zea,"from_pretrained()"),Zea.forEach(t),myr=r(Bde," class method or the "),vee=n(Bde,"A",{href:!0});var Kea=s(vee);fyr=r(Kea,"from_config()"),Kea.forEach(t),gyr=r(Bde,` class
method.`),Bde.forEach(t),hyr=i(ei),Kk=n(ei,"P",{});var Pao=s(Kk);uyr=r(Pao,"This class cannot be instantiated directly using "),rwe=n(Pao,"CODE",{});var eoa=s(rwe);pyr=r(eoa,"__init__()"),eoa.forEach(t),_yr=r(Pao," (throws an error)."),Pao.forEach(t),byr=i(ei),Gt=n(ei,"DIV",{class:!0});var i9=s(Gt);T(eS.$$.fragment,i9),vyr=i(i9),twe=n(i9,"P",{});var ooa=s(twe);Fyr=r(ooa,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ooa.forEach(t),Tyr=i(i9),Ic=n(i9,"P",{});var Ide=s(Ic);Myr=r(Ide,`Note:
Loading a model from its configuration file does `),awe=n(Ide,"STRONG",{});var roa=s(awe);Eyr=r(roa,"not"),roa.forEach(t),Cyr=r(Ide,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(Ide,"A",{href:!0});var toa=s(Fee);wyr=r(toa,"from_pretrained()"),toa.forEach(t),Ayr=r(Ide," to load the model weights."),Ide.forEach(t),Lyr=i(i9),T(b3.$$.fragment,i9),i9.forEach(t),yyr=i(ei),To=n(ei,"DIV",{class:!0});var Xa=s(To);T(oS.$$.fragment,Xa),xyr=i(Xa),nwe=n(Xa,"P",{});var aoa=s(nwe);$yr=r(aoa,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aoa.forEach(t),kyr=i(Xa),Mn=n(Xa,"P",{});var d9=s(Mn);Syr=r(d9,"The model class to instantiate is selected based on the "),swe=n(d9,"CODE",{});var noa=s(swe);Ryr=r(noa,"model_type"),noa.forEach(t),Pyr=r(d9,` property of the config object (either
passed as an argument or loaded from `),lwe=n(d9,"CODE",{});var soa=s(lwe);Byr=r(soa,"pretrained_model_name_or_path"),soa.forEach(t),Iyr=r(d9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iwe=n(d9,"CODE",{});var loa=s(iwe);Nyr=r(loa,"pretrained_model_name_or_path"),loa.forEach(t),qyr=r(d9,":"),d9.forEach(t),jyr=i(Xa),En=n(Xa,"UL",{});var c9=s(En);v3=n(c9,"LI",{});var IUe=s(v3);dwe=n(IUe,"STRONG",{});var ioa=s(dwe);Dyr=r(ioa,"deit"),ioa.forEach(t),Gyr=r(IUe," \u2014 "),Tee=n(IUe,"A",{href:!0});var doa=s(Tee);Oyr=r(doa,"DeiTForMaskedImageModeling"),doa.forEach(t),Vyr=r(IUe," (DeiT model)"),IUe.forEach(t),Xyr=i(c9),F3=n(c9,"LI",{});var NUe=s(F3);cwe=n(NUe,"STRONG",{});var coa=s(cwe);zyr=r(coa,"swin"),coa.forEach(t),Qyr=r(NUe," \u2014 "),Mee=n(NUe,"A",{href:!0});var moa=s(Mee);Wyr=r(moa,"SwinForMaskedImageModeling"),moa.forEach(t),Uyr=r(NUe," (Swin Transformer model)"),NUe.forEach(t),Hyr=i(c9),T3=n(c9,"LI",{});var qUe=s(T3);mwe=n(qUe,"STRONG",{});var foa=s(mwe);Jyr=r(foa,"swinv2"),foa.forEach(t),Yyr=r(qUe," \u2014 "),Eee=n(qUe,"A",{href:!0});var goa=s(Eee);Zyr=r(goa,"Swinv2ForMaskedImageModeling"),goa.forEach(t),Kyr=r(qUe," (Swin Transformer V2 model)"),qUe.forEach(t),e9r=i(c9),M3=n(c9,"LI",{});var jUe=s(M3);fwe=n(jUe,"STRONG",{});var hoa=s(fwe);o9r=r(hoa,"vit"),hoa.forEach(t),r9r=r(jUe," \u2014 "),Cee=n(jUe,"A",{href:!0});var uoa=s(Cee);t9r=r(uoa,"ViTForMaskedImageModeling"),uoa.forEach(t),a9r=r(jUe," (ViT model)"),jUe.forEach(t),c9.forEach(t),n9r=i(Xa),E3=n(Xa,"P",{});var DUe=s(E3);s9r=r(DUe,"The model is set in evaluation mode by default using "),gwe=n(DUe,"CODE",{});var poa=s(gwe);l9r=r(poa,"model.eval()"),poa.forEach(t),i9r=r(DUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hwe=n(DUe,"CODE",{});var _oa=s(hwe);d9r=r(_oa,"model.train()"),_oa.forEach(t),DUe.forEach(t),c9r=i(Xa),T(C3.$$.fragment,Xa),Xa.forEach(t),ei.forEach(t),vro=i(m),Nc=n(m,"H2",{class:!0});var Bao=s(Nc);w3=n(Bao,"A",{id:!0,class:!0,href:!0});var boa=s(w3);uwe=n(boa,"SPAN",{});var voa=s(uwe);T(rS.$$.fragment,voa),voa.forEach(t),boa.forEach(t),m9r=i(Bao),pwe=n(Bao,"SPAN",{});var Foa=s(pwe);f9r=r(Foa,"AutoModelForObjectDetection"),Foa.forEach(t),Bao.forEach(t),Fro=i(m),tr=n(m,"DIV",{class:!0});var oi=s(tr);T(tS.$$.fragment,oi),g9r=i(oi),qc=n(oi,"P",{});var Nde=s(qc);h9r=r(Nde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wee=n(Nde,"A",{href:!0});var Toa=s(wee);u9r=r(Toa,"from_pretrained()"),Toa.forEach(t),p9r=r(Nde," class method or the "),Aee=n(Nde,"A",{href:!0});var Moa=s(Aee);_9r=r(Moa,"from_config()"),Moa.forEach(t),b9r=r(Nde,` class
method.`),Nde.forEach(t),v9r=i(oi),aS=n(oi,"P",{});var Iao=s(aS);F9r=r(Iao,"This class cannot be instantiated directly using "),_we=n(Iao,"CODE",{});var Eoa=s(_we);T9r=r(Eoa,"__init__()"),Eoa.forEach(t),M9r=r(Iao," (throws an error)."),Iao.forEach(t),E9r=i(oi),Ot=n(oi,"DIV",{class:!0});var m9=s(Ot);T(nS.$$.fragment,m9),C9r=i(m9),bwe=n(m9,"P",{});var Coa=s(bwe);w9r=r(Coa,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Coa.forEach(t),A9r=i(m9),jc=n(m9,"P",{});var qde=s(jc);L9r=r(qde,`Note:
Loading a model from its configuration file does `),vwe=n(qde,"STRONG",{});var woa=s(vwe);y9r=r(woa,"not"),woa.forEach(t),x9r=r(qde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(qde,"A",{href:!0});var Aoa=s(Lee);$9r=r(Aoa,"from_pretrained()"),Aoa.forEach(t),k9r=r(qde," to load the model weights."),qde.forEach(t),S9r=i(m9),T(A3.$$.fragment,m9),m9.forEach(t),R9r=i(oi),Mo=n(oi,"DIV",{class:!0});var za=s(Mo);T(sS.$$.fragment,za),P9r=i(za),Fwe=n(za,"P",{});var Loa=s(Fwe);B9r=r(Loa,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Loa.forEach(t),I9r=i(za),Cn=n(za,"P",{});var f9=s(Cn);N9r=r(f9,"The model class to instantiate is selected based on the "),Twe=n(f9,"CODE",{});var yoa=s(Twe);q9r=r(yoa,"model_type"),yoa.forEach(t),j9r=r(f9,` property of the config object (either
passed as an argument or loaded from `),Mwe=n(f9,"CODE",{});var xoa=s(Mwe);D9r=r(xoa,"pretrained_model_name_or_path"),xoa.forEach(t),G9r=r(f9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=n(f9,"CODE",{});var $oa=s(Ewe);O9r=r($oa,"pretrained_model_name_or_path"),$oa.forEach(t),V9r=r(f9,":"),f9.forEach(t),X9r=i(za),wn=n(za,"UL",{});var g9=s(wn);L3=n(g9,"LI",{});var GUe=s(L3);Cwe=n(GUe,"STRONG",{});var koa=s(Cwe);z9r=r(koa,"conditional_detr"),koa.forEach(t),Q9r=r(GUe," \u2014 "),yee=n(GUe,"A",{href:!0});var Soa=s(yee);W9r=r(Soa,"ConditionalDetrForObjectDetection"),Soa.forEach(t),U9r=r(GUe," (Conditional DETR model)"),GUe.forEach(t),H9r=i(g9),y3=n(g9,"LI",{});var OUe=s(y3);wwe=n(OUe,"STRONG",{});var Roa=s(wwe);J9r=r(Roa,"deformable_detr"),Roa.forEach(t),Y9r=r(OUe," \u2014 "),xee=n(OUe,"A",{href:!0});var Poa=s(xee);Z9r=r(Poa,"DeformableDetrForObjectDetection"),Poa.forEach(t),K9r=r(OUe," (Deformable DETR model)"),OUe.forEach(t),exr=i(g9),x3=n(g9,"LI",{});var VUe=s(x3);Awe=n(VUe,"STRONG",{});var Boa=s(Awe);oxr=r(Boa,"detr"),Boa.forEach(t),rxr=r(VUe," \u2014 "),$ee=n(VUe,"A",{href:!0});var Ioa=s($ee);txr=r(Ioa,"DetrForObjectDetection"),Ioa.forEach(t),axr=r(VUe," (DETR model)"),VUe.forEach(t),nxr=i(g9),$3=n(g9,"LI",{});var XUe=s($3);Lwe=n(XUe,"STRONG",{});var Noa=s(Lwe);sxr=r(Noa,"yolos"),Noa.forEach(t),lxr=r(XUe," \u2014 "),kee=n(XUe,"A",{href:!0});var qoa=s(kee);ixr=r(qoa,"YolosForObjectDetection"),qoa.forEach(t),dxr=r(XUe," (YOLOS model)"),XUe.forEach(t),g9.forEach(t),cxr=i(za),k3=n(za,"P",{});var zUe=s(k3);mxr=r(zUe,"The model is set in evaluation mode by default using "),ywe=n(zUe,"CODE",{});var joa=s(ywe);fxr=r(joa,"model.eval()"),joa.forEach(t),gxr=r(zUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xwe=n(zUe,"CODE",{});var Doa=s(xwe);hxr=r(Doa,"model.train()"),Doa.forEach(t),zUe.forEach(t),uxr=i(za),T(S3.$$.fragment,za),za.forEach(t),oi.forEach(t),Tro=i(m),Dc=n(m,"H2",{class:!0});var Nao=s(Dc);R3=n(Nao,"A",{id:!0,class:!0,href:!0});var Goa=s(R3);$we=n(Goa,"SPAN",{});var Ooa=s($we);T(lS.$$.fragment,Ooa),Ooa.forEach(t),Goa.forEach(t),pxr=i(Nao),kwe=n(Nao,"SPAN",{});var Voa=s(kwe);_xr=r(Voa,"AutoModelForImageSegmentation"),Voa.forEach(t),Nao.forEach(t),Mro=i(m),ar=n(m,"DIV",{class:!0});var ri=s(ar);T(iS.$$.fragment,ri),bxr=i(ri),Gc=n(ri,"P",{});var jde=s(Gc);vxr=r(jde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),See=n(jde,"A",{href:!0});var Xoa=s(See);Fxr=r(Xoa,"from_pretrained()"),Xoa.forEach(t),Txr=r(jde," class method or the "),Ree=n(jde,"A",{href:!0});var zoa=s(Ree);Mxr=r(zoa,"from_config()"),zoa.forEach(t),Exr=r(jde,` class
method.`),jde.forEach(t),Cxr=i(ri),dS=n(ri,"P",{});var qao=s(dS);wxr=r(qao,"This class cannot be instantiated directly using "),Swe=n(qao,"CODE",{});var Qoa=s(Swe);Axr=r(Qoa,"__init__()"),Qoa.forEach(t),Lxr=r(qao," (throws an error)."),qao.forEach(t),yxr=i(ri),Vt=n(ri,"DIV",{class:!0});var h9=s(Vt);T(cS.$$.fragment,h9),xxr=i(h9),Rwe=n(h9,"P",{});var Woa=s(Rwe);$xr=r(Woa,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Woa.forEach(t),kxr=i(h9),Oc=n(h9,"P",{});var Dde=s(Oc);Sxr=r(Dde,`Note:
Loading a model from its configuration file does `),Pwe=n(Dde,"STRONG",{});var Uoa=s(Pwe);Rxr=r(Uoa,"not"),Uoa.forEach(t),Pxr=r(Dde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(Dde,"A",{href:!0});var Hoa=s(Pee);Bxr=r(Hoa,"from_pretrained()"),Hoa.forEach(t),Ixr=r(Dde," to load the model weights."),Dde.forEach(t),Nxr=i(h9),T(P3.$$.fragment,h9),h9.forEach(t),qxr=i(ri),Eo=n(ri,"DIV",{class:!0});var Qa=s(Eo);T(mS.$$.fragment,Qa),jxr=i(Qa),Bwe=n(Qa,"P",{});var Joa=s(Bwe);Dxr=r(Joa,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Joa.forEach(t),Gxr=i(Qa),An=n(Qa,"P",{});var u9=s(An);Oxr=r(u9,"The model class to instantiate is selected based on the "),Iwe=n(u9,"CODE",{});var Yoa=s(Iwe);Vxr=r(Yoa,"model_type"),Yoa.forEach(t),Xxr=r(u9,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(u9,"CODE",{});var Zoa=s(Nwe);zxr=r(Zoa,"pretrained_model_name_or_path"),Zoa.forEach(t),Qxr=r(u9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=n(u9,"CODE",{});var Koa=s(qwe);Wxr=r(Koa,"pretrained_model_name_or_path"),Koa.forEach(t),Uxr=r(u9,":"),u9.forEach(t),Hxr=i(Qa),jwe=n(Qa,"UL",{});var era=s(jwe);B3=n(era,"LI",{});var QUe=s(B3);Dwe=n(QUe,"STRONG",{});var ora=s(Dwe);Jxr=r(ora,"detr"),ora.forEach(t),Yxr=r(QUe," \u2014 "),Bee=n(QUe,"A",{href:!0});var rra=s(Bee);Zxr=r(rra,"DetrForSegmentation"),rra.forEach(t),Kxr=r(QUe," (DETR model)"),QUe.forEach(t),era.forEach(t),e$r=i(Qa),I3=n(Qa,"P",{});var WUe=s(I3);o$r=r(WUe,"The model is set in evaluation mode by default using "),Gwe=n(WUe,"CODE",{});var tra=s(Gwe);r$r=r(tra,"model.eval()"),tra.forEach(t),t$r=r(WUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Owe=n(WUe,"CODE",{});var ara=s(Owe);a$r=r(ara,"model.train()"),ara.forEach(t),WUe.forEach(t),n$r=i(Qa),T(N3.$$.fragment,Qa),Qa.forEach(t),ri.forEach(t),Ero=i(m),Vc=n(m,"H2",{class:!0});var jao=s(Vc);q3=n(jao,"A",{id:!0,class:!0,href:!0});var nra=s(q3);Vwe=n(nra,"SPAN",{});var sra=s(Vwe);T(fS.$$.fragment,sra),sra.forEach(t),nra.forEach(t),s$r=i(jao),Xwe=n(jao,"SPAN",{});var lra=s(Xwe);l$r=r(lra,"AutoModelForSemanticSegmentation"),lra.forEach(t),jao.forEach(t),Cro=i(m),nr=n(m,"DIV",{class:!0});var ti=s(nr);T(gS.$$.fragment,ti),i$r=i(ti),Xc=n(ti,"P",{});var Gde=s(Xc);d$r=r(Gde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Iee=n(Gde,"A",{href:!0});var ira=s(Iee);c$r=r(ira,"from_pretrained()"),ira.forEach(t),m$r=r(Gde," class method or the "),Nee=n(Gde,"A",{href:!0});var dra=s(Nee);f$r=r(dra,"from_config()"),dra.forEach(t),g$r=r(Gde,` class
method.`),Gde.forEach(t),h$r=i(ti),hS=n(ti,"P",{});var Dao=s(hS);u$r=r(Dao,"This class cannot be instantiated directly using "),zwe=n(Dao,"CODE",{});var cra=s(zwe);p$r=r(cra,"__init__()"),cra.forEach(t),_$r=r(Dao," (throws an error)."),Dao.forEach(t),b$r=i(ti),Xt=n(ti,"DIV",{class:!0});var p9=s(Xt);T(uS.$$.fragment,p9),v$r=i(p9),Qwe=n(p9,"P",{});var mra=s(Qwe);F$r=r(mra,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),mra.forEach(t),T$r=i(p9),zc=n(p9,"P",{});var Ode=s(zc);M$r=r(Ode,`Note:
Loading a model from its configuration file does `),Wwe=n(Ode,"STRONG",{});var fra=s(Wwe);E$r=r(fra,"not"),fra.forEach(t),C$r=r(Ode,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(Ode,"A",{href:!0});var gra=s(qee);w$r=r(gra,"from_pretrained()"),gra.forEach(t),A$r=r(Ode," to load the model weights."),Ode.forEach(t),L$r=i(p9),T(j3.$$.fragment,p9),p9.forEach(t),y$r=i(ti),Co=n(ti,"DIV",{class:!0});var Wa=s(Co);T(pS.$$.fragment,Wa),x$r=i(Wa),Uwe=n(Wa,"P",{});var hra=s(Uwe);$$r=r(hra,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hra.forEach(t),k$r=i(Wa),Ln=n(Wa,"P",{});var _9=s(Ln);S$r=r(_9,"The model class to instantiate is selected based on the "),Hwe=n(_9,"CODE",{});var ura=s(Hwe);R$r=r(ura,"model_type"),ura.forEach(t),P$r=r(_9,` property of the config object (either
passed as an argument or loaded from `),Jwe=n(_9,"CODE",{});var pra=s(Jwe);B$r=r(pra,"pretrained_model_name_or_path"),pra.forEach(t),I$r=r(_9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=n(_9,"CODE",{});var _ra=s(Ywe);N$r=r(_ra,"pretrained_model_name_or_path"),_ra.forEach(t),q$r=r(_9,":"),_9.forEach(t),j$r=i(Wa),ut=n(Wa,"UL",{});var ai=s(ut);D3=n(ai,"LI",{});var UUe=s(D3);Zwe=n(UUe,"STRONG",{});var bra=s(Zwe);D$r=r(bra,"beit"),bra.forEach(t),G$r=r(UUe," \u2014 "),jee=n(UUe,"A",{href:!0});var vra=s(jee);O$r=r(vra,"BeitForSemanticSegmentation"),vra.forEach(t),V$r=r(UUe," (BEiT model)"),UUe.forEach(t),X$r=i(ai),G3=n(ai,"LI",{});var HUe=s(G3);Kwe=n(HUe,"STRONG",{});var Fra=s(Kwe);z$r=r(Fra,"data2vec-vision"),Fra.forEach(t),Q$r=r(HUe," \u2014 "),Dee=n(HUe,"A",{href:!0});var Tra=s(Dee);W$r=r(Tra,"Data2VecVisionForSemanticSegmentation"),Tra.forEach(t),U$r=r(HUe," (Data2VecVision model)"),HUe.forEach(t),H$r=i(ai),O3=n(ai,"LI",{});var JUe=s(O3);eAe=n(JUe,"STRONG",{});var Mra=s(eAe);J$r=r(Mra,"dpt"),Mra.forEach(t),Y$r=r(JUe," \u2014 "),Gee=n(JUe,"A",{href:!0});var Era=s(Gee);Z$r=r(Era,"DPTForSemanticSegmentation"),Era.forEach(t),K$r=r(JUe," (DPT model)"),JUe.forEach(t),ekr=i(ai),V3=n(ai,"LI",{});var YUe=s(V3);oAe=n(YUe,"STRONG",{});var Cra=s(oAe);okr=r(Cra,"mobilevit"),Cra.forEach(t),rkr=r(YUe," \u2014 "),Oee=n(YUe,"A",{href:!0});var wra=s(Oee);tkr=r(wra,"MobileViTForSemanticSegmentation"),wra.forEach(t),akr=r(YUe," (MobileViT model)"),YUe.forEach(t),nkr=i(ai),X3=n(ai,"LI",{});var ZUe=s(X3);rAe=n(ZUe,"STRONG",{});var Ara=s(rAe);skr=r(Ara,"segformer"),Ara.forEach(t),lkr=r(ZUe," \u2014 "),Vee=n(ZUe,"A",{href:!0});var Lra=s(Vee);ikr=r(Lra,"SegformerForSemanticSegmentation"),Lra.forEach(t),dkr=r(ZUe," (SegFormer model)"),ZUe.forEach(t),ai.forEach(t),ckr=i(Wa),z3=n(Wa,"P",{});var KUe=s(z3);mkr=r(KUe,"The model is set in evaluation mode by default using "),tAe=n(KUe,"CODE",{});var yra=s(tAe);fkr=r(yra,"model.eval()"),yra.forEach(t),gkr=r(KUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aAe=n(KUe,"CODE",{});var xra=s(aAe);hkr=r(xra,"model.train()"),xra.forEach(t),KUe.forEach(t),ukr=i(Wa),T(Q3.$$.fragment,Wa),Wa.forEach(t),ti.forEach(t),wro=i(m),Qc=n(m,"H2",{class:!0});var Gao=s(Qc);W3=n(Gao,"A",{id:!0,class:!0,href:!0});var $ra=s(W3);nAe=n($ra,"SPAN",{});var kra=s(nAe);T(_S.$$.fragment,kra),kra.forEach(t),$ra.forEach(t),pkr=i(Gao),sAe=n(Gao,"SPAN",{});var Sra=s(sAe);_kr=r(Sra,"AutoModelForInstanceSegmentation"),Sra.forEach(t),Gao.forEach(t),Aro=i(m),sr=n(m,"DIV",{class:!0});var ni=s(sr);T(bS.$$.fragment,ni),bkr=i(ni),Wc=n(ni,"P",{});var Vde=s(Wc);vkr=r(Vde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Xee=n(Vde,"A",{href:!0});var Rra=s(Xee);Fkr=r(Rra,"from_pretrained()"),Rra.forEach(t),Tkr=r(Vde," class method or the "),zee=n(Vde,"A",{href:!0});var Pra=s(zee);Mkr=r(Pra,"from_config()"),Pra.forEach(t),Ekr=r(Vde,` class
method.`),Vde.forEach(t),Ckr=i(ni),vS=n(ni,"P",{});var Oao=s(vS);wkr=r(Oao,"This class cannot be instantiated directly using "),lAe=n(Oao,"CODE",{});var Bra=s(lAe);Akr=r(Bra,"__init__()"),Bra.forEach(t),Lkr=r(Oao," (throws an error)."),Oao.forEach(t),ykr=i(ni),zt=n(ni,"DIV",{class:!0});var b9=s(zt);T(FS.$$.fragment,b9),xkr=i(b9),iAe=n(b9,"P",{});var Ira=s(iAe);$kr=r(Ira,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ira.forEach(t),kkr=i(b9),Uc=n(b9,"P",{});var Xde=s(Uc);Skr=r(Xde,`Note:
Loading a model from its configuration file does `),dAe=n(Xde,"STRONG",{});var Nra=s(dAe);Rkr=r(Nra,"not"),Nra.forEach(t),Pkr=r(Xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Xde,"A",{href:!0});var qra=s(Qee);Bkr=r(qra,"from_pretrained()"),qra.forEach(t),Ikr=r(Xde," to load the model weights."),Xde.forEach(t),Nkr=i(b9),T(U3.$$.fragment,b9),b9.forEach(t),qkr=i(ni),wo=n(ni,"DIV",{class:!0});var Ua=s(wo);T(TS.$$.fragment,Ua),jkr=i(Ua),cAe=n(Ua,"P",{});var jra=s(cAe);Dkr=r(jra,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jra.forEach(t),Gkr=i(Ua),yn=n(Ua,"P",{});var v9=s(yn);Okr=r(v9,"The model class to instantiate is selected based on the "),mAe=n(v9,"CODE",{});var Dra=s(mAe);Vkr=r(Dra,"model_type"),Dra.forEach(t),Xkr=r(v9,` property of the config object (either
passed as an argument or loaded from `),fAe=n(v9,"CODE",{});var Gra=s(fAe);zkr=r(Gra,"pretrained_model_name_or_path"),Gra.forEach(t),Qkr=r(v9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=n(v9,"CODE",{});var Ora=s(gAe);Wkr=r(Ora,"pretrained_model_name_or_path"),Ora.forEach(t),Ukr=r(v9,":"),v9.forEach(t),Hkr=i(Ua),hAe=n(Ua,"UL",{});var Vra=s(hAe);H3=n(Vra,"LI",{});var eHe=s(H3);uAe=n(eHe,"STRONG",{});var Xra=s(uAe);Jkr=r(Xra,"maskformer"),Xra.forEach(t),Ykr=r(eHe," \u2014 "),Wee=n(eHe,"A",{href:!0});var zra=s(Wee);Zkr=r(zra,"MaskFormerForInstanceSegmentation"),zra.forEach(t),Kkr=r(eHe," (MaskFormer model)"),eHe.forEach(t),Vra.forEach(t),eSr=i(Ua),J3=n(Ua,"P",{});var oHe=s(J3);oSr=r(oHe,"The model is set in evaluation mode by default using "),pAe=n(oHe,"CODE",{});var Qra=s(pAe);rSr=r(Qra,"model.eval()"),Qra.forEach(t),tSr=r(oHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Ae=n(oHe,"CODE",{});var Wra=s(_Ae);aSr=r(Wra,"model.train()"),Wra.forEach(t),oHe.forEach(t),nSr=i(Ua),T(Y3.$$.fragment,Ua),Ua.forEach(t),ni.forEach(t),Lro=i(m),Hc=n(m,"H2",{class:!0});var Vao=s(Hc);Z3=n(Vao,"A",{id:!0,class:!0,href:!0});var Ura=s(Z3);bAe=n(Ura,"SPAN",{});var Hra=s(bAe);T(MS.$$.fragment,Hra),Hra.forEach(t),Ura.forEach(t),sSr=i(Vao),vAe=n(Vao,"SPAN",{});var Jra=s(vAe);lSr=r(Jra,"AutoModelForZeroShotObjectDetection"),Jra.forEach(t),Vao.forEach(t),yro=i(m),lr=n(m,"DIV",{class:!0});var si=s(lr);T(ES.$$.fragment,si),iSr=i(si),Jc=n(si,"P",{});var zde=s(Jc);dSr=r(zde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Uee=n(zde,"A",{href:!0});var Yra=s(Uee);cSr=r(Yra,"from_pretrained()"),Yra.forEach(t),mSr=r(zde," class method or the "),Hee=n(zde,"A",{href:!0});var Zra=s(Hee);fSr=r(Zra,"from_config()"),Zra.forEach(t),gSr=r(zde,` class
method.`),zde.forEach(t),hSr=i(si),CS=n(si,"P",{});var Xao=s(CS);uSr=r(Xao,"This class cannot be instantiated directly using "),FAe=n(Xao,"CODE",{});var Kra=s(FAe);pSr=r(Kra,"__init__()"),Kra.forEach(t),_Sr=r(Xao," (throws an error)."),Xao.forEach(t),bSr=i(si),Qt=n(si,"DIV",{class:!0});var F9=s(Qt);T(wS.$$.fragment,F9),vSr=i(F9),TAe=n(F9,"P",{});var eta=s(TAe);FSr=r(eta,"Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),eta.forEach(t),TSr=i(F9),Yc=n(F9,"P",{});var Qde=s(Yc);MSr=r(Qde,`Note:
Loading a model from its configuration file does `),MAe=n(Qde,"STRONG",{});var ota=s(MAe);ESr=r(ota,"not"),ota.forEach(t),CSr=r(Qde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jee=n(Qde,"A",{href:!0});var rta=s(Jee);wSr=r(rta,"from_pretrained()"),rta.forEach(t),ASr=r(Qde," to load the model weights."),Qde.forEach(t),LSr=i(F9),T(K3.$$.fragment,F9),F9.forEach(t),ySr=i(si),Ao=n(si,"DIV",{class:!0});var Ha=s(Ao);T(AS.$$.fragment,Ha),xSr=i(Ha),EAe=n(Ha,"P",{});var tta=s(EAe);$Sr=r(tta,"Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),tta.forEach(t),kSr=i(Ha),xn=n(Ha,"P",{});var T9=s(xn);SSr=r(T9,"The model class to instantiate is selected based on the "),CAe=n(T9,"CODE",{});var ata=s(CAe);RSr=r(ata,"model_type"),ata.forEach(t),PSr=r(T9,` property of the config object (either
passed as an argument or loaded from `),wAe=n(T9,"CODE",{});var nta=s(wAe);BSr=r(nta,"pretrained_model_name_or_path"),nta.forEach(t),ISr=r(T9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=n(T9,"CODE",{});var sta=s(AAe);NSr=r(sta,"pretrained_model_name_or_path"),sta.forEach(t),qSr=r(T9,":"),T9.forEach(t),jSr=i(Ha),LAe=n(Ha,"UL",{});var lta=s(LAe);e5=n(lta,"LI",{});var rHe=s(e5);yAe=n(rHe,"STRONG",{});var ita=s(yAe);DSr=r(ita,"owlvit"),ita.forEach(t),GSr=r(rHe," \u2014 "),Yee=n(rHe,"A",{href:!0});var dta=s(Yee);OSr=r(dta,"OwlViTForObjectDetection"),dta.forEach(t),VSr=r(rHe," (OWL-ViT model)"),rHe.forEach(t),lta.forEach(t),XSr=i(Ha),o5=n(Ha,"P",{});var tHe=s(o5);zSr=r(tHe,"The model is set in evaluation mode by default using "),xAe=n(tHe,"CODE",{});var cta=s(xAe);QSr=r(cta,"model.eval()"),cta.forEach(t),WSr=r(tHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$Ae=n(tHe,"CODE",{});var mta=s($Ae);USr=r(mta,"model.train()"),mta.forEach(t),tHe.forEach(t),HSr=i(Ha),T(r5.$$.fragment,Ha),Ha.forEach(t),si.forEach(t),xro=i(m),Zc=n(m,"H2",{class:!0});var zao=s(Zc);t5=n(zao,"A",{id:!0,class:!0,href:!0});var fta=s(t5);kAe=n(fta,"SPAN",{});var gta=s(kAe);T(LS.$$.fragment,gta),gta.forEach(t),fta.forEach(t),JSr=i(zao),SAe=n(zao,"SPAN",{});var hta=s(SAe);YSr=r(hta,"TFAutoModel"),hta.forEach(t),zao.forEach(t),$ro=i(m),ir=n(m,"DIV",{class:!0});var li=s(ir);T(yS.$$.fragment,li),ZSr=i(li),Kc=n(li,"P",{});var Wde=s(Kc);KSr=r(Wde,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Zee=n(Wde,"A",{href:!0});var uta=s(Zee);eRr=r(uta,"from_pretrained()"),uta.forEach(t),oRr=r(Wde," class method or the "),Kee=n(Wde,"A",{href:!0});var pta=s(Kee);rRr=r(pta,"from_config()"),pta.forEach(t),tRr=r(Wde,` class
method.`),Wde.forEach(t),aRr=i(li),xS=n(li,"P",{});var Qao=s(xS);nRr=r(Qao,"This class cannot be instantiated directly using "),RAe=n(Qao,"CODE",{});var _ta=s(RAe);sRr=r(_ta,"__init__()"),_ta.forEach(t),lRr=r(Qao," (throws an error)."),Qao.forEach(t),iRr=i(li),Wt=n(li,"DIV",{class:!0});var M9=s(Wt);T($S.$$.fragment,M9),dRr=i(M9),PAe=n(M9,"P",{});var bta=s(PAe);cRr=r(bta,"Instantiates one of the base model classes of the library from a configuration."),bta.forEach(t),mRr=i(M9),em=n(M9,"P",{});var Ude=s(em);fRr=r(Ude,`Note:
Loading a model from its configuration file does `),BAe=n(Ude,"STRONG",{});var vta=s(BAe);gRr=r(vta,"not"),vta.forEach(t),hRr=r(Ude,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(Ude,"A",{href:!0});var Fta=s(eoe);uRr=r(Fta,"from_pretrained()"),Fta.forEach(t),pRr=r(Ude," to load the model weights."),Ude.forEach(t),_Rr=i(M9),T(a5.$$.fragment,M9),M9.forEach(t),bRr=i(li),qr=n(li,"DIV",{class:!0});var ii=s(qr);T(kS.$$.fragment,ii),vRr=i(ii),IAe=n(ii,"P",{});var Tta=s(IAe);FRr=r(Tta,"Instantiate one of the base model classes of the library from a pretrained model."),Tta.forEach(t),TRr=i(ii),$n=n(ii,"P",{});var E9=s($n);MRr=r(E9,"The model class to instantiate is selected based on the "),NAe=n(E9,"CODE",{});var Mta=s(NAe);ERr=r(Mta,"model_type"),Mta.forEach(t),CRr=r(E9,` property of the config object (either
passed as an argument or loaded from `),qAe=n(E9,"CODE",{});var Eta=s(qAe);wRr=r(Eta,"pretrained_model_name_or_path"),Eta.forEach(t),ARr=r(E9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=n(E9,"CODE",{});var Cta=s(jAe);LRr=r(Cta,"pretrained_model_name_or_path"),Cta.forEach(t),yRr=r(E9,":"),E9.forEach(t),xRr=i(ii),B=n(ii,"UL",{});var j=s(B);n5=n(j,"LI",{});var aHe=s(n5);DAe=n(aHe,"STRONG",{});var wta=s(DAe);$Rr=r(wta,"albert"),wta.forEach(t),kRr=r(aHe," \u2014 "),ooe=n(aHe,"A",{href:!0});var Ata=s(ooe);SRr=r(Ata,"TFAlbertModel"),Ata.forEach(t),RRr=r(aHe," (ALBERT model)"),aHe.forEach(t),PRr=i(j),s5=n(j,"LI",{});var nHe=s(s5);GAe=n(nHe,"STRONG",{});var Lta=s(GAe);BRr=r(Lta,"bart"),Lta.forEach(t),IRr=r(nHe," \u2014 "),roe=n(nHe,"A",{href:!0});var yta=s(roe);NRr=r(yta,"TFBartModel"),yta.forEach(t),qRr=r(nHe," (BART model)"),nHe.forEach(t),jRr=i(j),l5=n(j,"LI",{});var sHe=s(l5);OAe=n(sHe,"STRONG",{});var xta=s(OAe);DRr=r(xta,"bert"),xta.forEach(t),GRr=r(sHe," \u2014 "),toe=n(sHe,"A",{href:!0});var $ta=s(toe);ORr=r($ta,"TFBertModel"),$ta.forEach(t),VRr=r(sHe," (BERT model)"),sHe.forEach(t),XRr=i(j),i5=n(j,"LI",{});var lHe=s(i5);VAe=n(lHe,"STRONG",{});var kta=s(VAe);zRr=r(kta,"blenderbot"),kta.forEach(t),QRr=r(lHe," \u2014 "),aoe=n(lHe,"A",{href:!0});var Sta=s(aoe);WRr=r(Sta,"TFBlenderbotModel"),Sta.forEach(t),URr=r(lHe," (Blenderbot model)"),lHe.forEach(t),HRr=i(j),d5=n(j,"LI",{});var iHe=s(d5);XAe=n(iHe,"STRONG",{});var Rta=s(XAe);JRr=r(Rta,"blenderbot-small"),Rta.forEach(t),YRr=r(iHe," \u2014 "),noe=n(iHe,"A",{href:!0});var Pta=s(noe);ZRr=r(Pta,"TFBlenderbotSmallModel"),Pta.forEach(t),KRr=r(iHe," (BlenderbotSmall model)"),iHe.forEach(t),ePr=i(j),c5=n(j,"LI",{});var dHe=s(c5);zAe=n(dHe,"STRONG",{});var Bta=s(zAe);oPr=r(Bta,"camembert"),Bta.forEach(t),rPr=r(dHe," \u2014 "),soe=n(dHe,"A",{href:!0});var Ita=s(soe);tPr=r(Ita,"TFCamembertModel"),Ita.forEach(t),aPr=r(dHe," (CamemBERT model)"),dHe.forEach(t),nPr=i(j),m5=n(j,"LI",{});var cHe=s(m5);QAe=n(cHe,"STRONG",{});var Nta=s(QAe);sPr=r(Nta,"clip"),Nta.forEach(t),lPr=r(cHe," \u2014 "),loe=n(cHe,"A",{href:!0});var qta=s(loe);iPr=r(qta,"TFCLIPModel"),qta.forEach(t),dPr=r(cHe," (CLIP model)"),cHe.forEach(t),cPr=i(j),f5=n(j,"LI",{});var mHe=s(f5);WAe=n(mHe,"STRONG",{});var jta=s(WAe);mPr=r(jta,"convbert"),jta.forEach(t),fPr=r(mHe," \u2014 "),ioe=n(mHe,"A",{href:!0});var Dta=s(ioe);gPr=r(Dta,"TFConvBertModel"),Dta.forEach(t),hPr=r(mHe," (ConvBERT model)"),mHe.forEach(t),uPr=i(j),g5=n(j,"LI",{});var fHe=s(g5);UAe=n(fHe,"STRONG",{});var Gta=s(UAe);pPr=r(Gta,"convnext"),Gta.forEach(t),_Pr=r(fHe," \u2014 "),doe=n(fHe,"A",{href:!0});var Ota=s(doe);bPr=r(Ota,"TFConvNextModel"),Ota.forEach(t),vPr=r(fHe," (ConvNeXT model)"),fHe.forEach(t),FPr=i(j),h5=n(j,"LI",{});var gHe=s(h5);HAe=n(gHe,"STRONG",{});var Vta=s(HAe);TPr=r(Vta,"ctrl"),Vta.forEach(t),MPr=r(gHe," \u2014 "),coe=n(gHe,"A",{href:!0});var Xta=s(coe);EPr=r(Xta,"TFCTRLModel"),Xta.forEach(t),CPr=r(gHe," (CTRL model)"),gHe.forEach(t),wPr=i(j),u5=n(j,"LI",{});var hHe=s(u5);JAe=n(hHe,"STRONG",{});var zta=s(JAe);APr=r(zta,"data2vec-vision"),zta.forEach(t),LPr=r(hHe," \u2014 "),moe=n(hHe,"A",{href:!0});var Qta=s(moe);yPr=r(Qta,"TFData2VecVisionModel"),Qta.forEach(t),xPr=r(hHe," (Data2VecVision model)"),hHe.forEach(t),$Pr=i(j),p5=n(j,"LI",{});var uHe=s(p5);YAe=n(uHe,"STRONG",{});var Wta=s(YAe);kPr=r(Wta,"deberta"),Wta.forEach(t),SPr=r(uHe," \u2014 "),foe=n(uHe,"A",{href:!0});var Uta=s(foe);RPr=r(Uta,"TFDebertaModel"),Uta.forEach(t),PPr=r(uHe," (DeBERTa model)"),uHe.forEach(t),BPr=i(j),_5=n(j,"LI",{});var pHe=s(_5);ZAe=n(pHe,"STRONG",{});var Hta=s(ZAe);IPr=r(Hta,"deberta-v2"),Hta.forEach(t),NPr=r(pHe," \u2014 "),goe=n(pHe,"A",{href:!0});var Jta=s(goe);qPr=r(Jta,"TFDebertaV2Model"),Jta.forEach(t),jPr=r(pHe," (DeBERTa-v2 model)"),pHe.forEach(t),DPr=i(j),b5=n(j,"LI",{});var _He=s(b5);KAe=n(_He,"STRONG",{});var Yta=s(KAe);GPr=r(Yta,"deit"),Yta.forEach(t),OPr=r(_He," \u2014 "),hoe=n(_He,"A",{href:!0});var Zta=s(hoe);VPr=r(Zta,"TFDeiTModel"),Zta.forEach(t),XPr=r(_He," (DeiT model)"),_He.forEach(t),zPr=i(j),v5=n(j,"LI",{});var bHe=s(v5);e6e=n(bHe,"STRONG",{});var Kta=s(e6e);QPr=r(Kta,"distilbert"),Kta.forEach(t),WPr=r(bHe," \u2014 "),uoe=n(bHe,"A",{href:!0});var eaa=s(uoe);UPr=r(eaa,"TFDistilBertModel"),eaa.forEach(t),HPr=r(bHe," (DistilBERT model)"),bHe.forEach(t),JPr=i(j),F5=n(j,"LI",{});var vHe=s(F5);o6e=n(vHe,"STRONG",{});var oaa=s(o6e);YPr=r(oaa,"dpr"),oaa.forEach(t),ZPr=r(vHe," \u2014 "),poe=n(vHe,"A",{href:!0});var raa=s(poe);KPr=r(raa,"TFDPRQuestionEncoder"),raa.forEach(t),eBr=r(vHe," (DPR model)"),vHe.forEach(t),oBr=i(j),T5=n(j,"LI",{});var FHe=s(T5);r6e=n(FHe,"STRONG",{});var taa=s(r6e);rBr=r(taa,"electra"),taa.forEach(t),tBr=r(FHe," \u2014 "),_oe=n(FHe,"A",{href:!0});var aaa=s(_oe);aBr=r(aaa,"TFElectraModel"),aaa.forEach(t),nBr=r(FHe," (ELECTRA model)"),FHe.forEach(t),sBr=i(j),M5=n(j,"LI",{});var THe=s(M5);t6e=n(THe,"STRONG",{});var naa=s(t6e);lBr=r(naa,"flaubert"),naa.forEach(t),iBr=r(THe," \u2014 "),boe=n(THe,"A",{href:!0});var saa=s(boe);dBr=r(saa,"TFFlaubertModel"),saa.forEach(t),cBr=r(THe," (FlauBERT model)"),THe.forEach(t),mBr=i(j),wl=n(j,"LI",{});var kI=s(wl);a6e=n(kI,"STRONG",{});var laa=s(a6e);fBr=r(laa,"funnel"),laa.forEach(t),gBr=r(kI," \u2014 "),voe=n(kI,"A",{href:!0});var iaa=s(voe);hBr=r(iaa,"TFFunnelModel"),iaa.forEach(t),uBr=r(kI," or "),Foe=n(kI,"A",{href:!0});var daa=s(Foe);pBr=r(daa,"TFFunnelBaseModel"),daa.forEach(t),_Br=r(kI," (Funnel Transformer model)"),kI.forEach(t),bBr=i(j),E5=n(j,"LI",{});var MHe=s(E5);n6e=n(MHe,"STRONG",{});var caa=s(n6e);vBr=r(caa,"gpt2"),caa.forEach(t),FBr=r(MHe," \u2014 "),Toe=n(MHe,"A",{href:!0});var maa=s(Toe);TBr=r(maa,"TFGPT2Model"),maa.forEach(t),MBr=r(MHe," (OpenAI GPT-2 model)"),MHe.forEach(t),EBr=i(j),C5=n(j,"LI",{});var EHe=s(C5);s6e=n(EHe,"STRONG",{});var faa=s(s6e);CBr=r(faa,"gptj"),faa.forEach(t),wBr=r(EHe," \u2014 "),Moe=n(EHe,"A",{href:!0});var gaa=s(Moe);ABr=r(gaa,"TFGPTJModel"),gaa.forEach(t),LBr=r(EHe," (GPT-J model)"),EHe.forEach(t),yBr=i(j),w5=n(j,"LI",{});var CHe=s(w5);l6e=n(CHe,"STRONG",{});var haa=s(l6e);xBr=r(haa,"groupvit"),haa.forEach(t),$Br=r(CHe," \u2014 "),Eoe=n(CHe,"A",{href:!0});var uaa=s(Eoe);kBr=r(uaa,"TFGroupViTModel"),uaa.forEach(t),SBr=r(CHe," (GroupViT model)"),CHe.forEach(t),RBr=i(j),A5=n(j,"LI",{});var wHe=s(A5);i6e=n(wHe,"STRONG",{});var paa=s(i6e);PBr=r(paa,"hubert"),paa.forEach(t),BBr=r(wHe," \u2014 "),Coe=n(wHe,"A",{href:!0});var _aa=s(Coe);IBr=r(_aa,"TFHubertModel"),_aa.forEach(t),NBr=r(wHe," (Hubert model)"),wHe.forEach(t),qBr=i(j),L5=n(j,"LI",{});var AHe=s(L5);d6e=n(AHe,"STRONG",{});var baa=s(d6e);jBr=r(baa,"layoutlm"),baa.forEach(t),DBr=r(AHe," \u2014 "),woe=n(AHe,"A",{href:!0});var vaa=s(woe);GBr=r(vaa,"TFLayoutLMModel"),vaa.forEach(t),OBr=r(AHe," (LayoutLM model)"),AHe.forEach(t),VBr=i(j),y5=n(j,"LI",{});var LHe=s(y5);c6e=n(LHe,"STRONG",{});var Faa=s(c6e);XBr=r(Faa,"layoutlmv3"),Faa.forEach(t),zBr=r(LHe," \u2014 "),Aoe=n(LHe,"A",{href:!0});var Taa=s(Aoe);QBr=r(Taa,"TFLayoutLMv3Model"),Taa.forEach(t),WBr=r(LHe," (LayoutLMv3 model)"),LHe.forEach(t),UBr=i(j),x5=n(j,"LI",{});var yHe=s(x5);m6e=n(yHe,"STRONG",{});var Maa=s(m6e);HBr=r(Maa,"led"),Maa.forEach(t),JBr=r(yHe," \u2014 "),Loe=n(yHe,"A",{href:!0});var Eaa=s(Loe);YBr=r(Eaa,"TFLEDModel"),Eaa.forEach(t),ZBr=r(yHe," (LED model)"),yHe.forEach(t),KBr=i(j),$5=n(j,"LI",{});var xHe=s($5);f6e=n(xHe,"STRONG",{});var Caa=s(f6e);eIr=r(Caa,"longformer"),Caa.forEach(t),oIr=r(xHe," \u2014 "),yoe=n(xHe,"A",{href:!0});var waa=s(yoe);rIr=r(waa,"TFLongformerModel"),waa.forEach(t),tIr=r(xHe," (Longformer model)"),xHe.forEach(t),aIr=i(j),k5=n(j,"LI",{});var $He=s(k5);g6e=n($He,"STRONG",{});var Aaa=s(g6e);nIr=r(Aaa,"lxmert"),Aaa.forEach(t),sIr=r($He," \u2014 "),xoe=n($He,"A",{href:!0});var Laa=s(xoe);lIr=r(Laa,"TFLxmertModel"),Laa.forEach(t),iIr=r($He," (LXMERT model)"),$He.forEach(t),dIr=i(j),S5=n(j,"LI",{});var kHe=s(S5);h6e=n(kHe,"STRONG",{});var yaa=s(h6e);cIr=r(yaa,"marian"),yaa.forEach(t),mIr=r(kHe," \u2014 "),$oe=n(kHe,"A",{href:!0});var xaa=s($oe);fIr=r(xaa,"TFMarianModel"),xaa.forEach(t),gIr=r(kHe," (Marian model)"),kHe.forEach(t),hIr=i(j),R5=n(j,"LI",{});var SHe=s(R5);u6e=n(SHe,"STRONG",{});var $aa=s(u6e);uIr=r($aa,"mbart"),$aa.forEach(t),pIr=r(SHe," \u2014 "),koe=n(SHe,"A",{href:!0});var kaa=s(koe);_Ir=r(kaa,"TFMBartModel"),kaa.forEach(t),bIr=r(SHe," (mBART model)"),SHe.forEach(t),vIr=i(j),P5=n(j,"LI",{});var RHe=s(P5);p6e=n(RHe,"STRONG",{});var Saa=s(p6e);FIr=r(Saa,"mobilebert"),Saa.forEach(t),TIr=r(RHe," \u2014 "),Soe=n(RHe,"A",{href:!0});var Raa=s(Soe);MIr=r(Raa,"TFMobileBertModel"),Raa.forEach(t),EIr=r(RHe," (MobileBERT model)"),RHe.forEach(t),CIr=i(j),B5=n(j,"LI",{});var PHe=s(B5);_6e=n(PHe,"STRONG",{});var Paa=s(_6e);wIr=r(Paa,"mobilevit"),Paa.forEach(t),AIr=r(PHe," \u2014 "),Roe=n(PHe,"A",{href:!0});var Baa=s(Roe);LIr=r(Baa,"TFMobileViTModel"),Baa.forEach(t),yIr=r(PHe," (MobileViT model)"),PHe.forEach(t),xIr=i(j),I5=n(j,"LI",{});var BHe=s(I5);b6e=n(BHe,"STRONG",{});var Iaa=s(b6e);$Ir=r(Iaa,"mpnet"),Iaa.forEach(t),kIr=r(BHe," \u2014 "),Poe=n(BHe,"A",{href:!0});var Naa=s(Poe);SIr=r(Naa,"TFMPNetModel"),Naa.forEach(t),RIr=r(BHe," (MPNet model)"),BHe.forEach(t),PIr=i(j),N5=n(j,"LI",{});var IHe=s(N5);v6e=n(IHe,"STRONG",{});var qaa=s(v6e);BIr=r(qaa,"mt5"),qaa.forEach(t),IIr=r(IHe," \u2014 "),Boe=n(IHe,"A",{href:!0});var jaa=s(Boe);NIr=r(jaa,"TFMT5Model"),jaa.forEach(t),qIr=r(IHe," (MT5 model)"),IHe.forEach(t),jIr=i(j),q5=n(j,"LI",{});var NHe=s(q5);F6e=n(NHe,"STRONG",{});var Daa=s(F6e);DIr=r(Daa,"openai-gpt"),Daa.forEach(t),GIr=r(NHe," \u2014 "),Ioe=n(NHe,"A",{href:!0});var Gaa=s(Ioe);OIr=r(Gaa,"TFOpenAIGPTModel"),Gaa.forEach(t),VIr=r(NHe," (OpenAI GPT model)"),NHe.forEach(t),XIr=i(j),j5=n(j,"LI",{});var qHe=s(j5);T6e=n(qHe,"STRONG",{});var Oaa=s(T6e);zIr=r(Oaa,"opt"),Oaa.forEach(t),QIr=r(qHe," \u2014 "),Noe=n(qHe,"A",{href:!0});var Vaa=s(Noe);WIr=r(Vaa,"TFOPTModel"),Vaa.forEach(t),UIr=r(qHe," (OPT model)"),qHe.forEach(t),HIr=i(j),D5=n(j,"LI",{});var jHe=s(D5);M6e=n(jHe,"STRONG",{});var Xaa=s(M6e);JIr=r(Xaa,"pegasus"),Xaa.forEach(t),YIr=r(jHe," \u2014 "),qoe=n(jHe,"A",{href:!0});var zaa=s(qoe);ZIr=r(zaa,"TFPegasusModel"),zaa.forEach(t),KIr=r(jHe," (Pegasus model)"),jHe.forEach(t),eNr=i(j),G5=n(j,"LI",{});var DHe=s(G5);E6e=n(DHe,"STRONG",{});var Qaa=s(E6e);oNr=r(Qaa,"regnet"),Qaa.forEach(t),rNr=r(DHe," \u2014 "),joe=n(DHe,"A",{href:!0});var Waa=s(joe);tNr=r(Waa,"TFRegNetModel"),Waa.forEach(t),aNr=r(DHe," (RegNet model)"),DHe.forEach(t),nNr=i(j),O5=n(j,"LI",{});var GHe=s(O5);C6e=n(GHe,"STRONG",{});var Uaa=s(C6e);sNr=r(Uaa,"rembert"),Uaa.forEach(t),lNr=r(GHe," \u2014 "),Doe=n(GHe,"A",{href:!0});var Haa=s(Doe);iNr=r(Haa,"TFRemBertModel"),Haa.forEach(t),dNr=r(GHe," (RemBERT model)"),GHe.forEach(t),cNr=i(j),V5=n(j,"LI",{});var OHe=s(V5);w6e=n(OHe,"STRONG",{});var Jaa=s(w6e);mNr=r(Jaa,"resnet"),Jaa.forEach(t),fNr=r(OHe," \u2014 "),Goe=n(OHe,"A",{href:!0});var Yaa=s(Goe);gNr=r(Yaa,"TFResNetModel"),Yaa.forEach(t),hNr=r(OHe," (ResNet model)"),OHe.forEach(t),uNr=i(j),X5=n(j,"LI",{});var VHe=s(X5);A6e=n(VHe,"STRONG",{});var Zaa=s(A6e);pNr=r(Zaa,"roberta"),Zaa.forEach(t),_Nr=r(VHe," \u2014 "),Ooe=n(VHe,"A",{href:!0});var Kaa=s(Ooe);bNr=r(Kaa,"TFRobertaModel"),Kaa.forEach(t),vNr=r(VHe," (RoBERTa model)"),VHe.forEach(t),FNr=i(j),z5=n(j,"LI",{});var XHe=s(z5);L6e=n(XHe,"STRONG",{});var ena=s(L6e);TNr=r(ena,"roformer"),ena.forEach(t),MNr=r(XHe," \u2014 "),Voe=n(XHe,"A",{href:!0});var ona=s(Voe);ENr=r(ona,"TFRoFormerModel"),ona.forEach(t),CNr=r(XHe," (RoFormer model)"),XHe.forEach(t),wNr=i(j),Q5=n(j,"LI",{});var zHe=s(Q5);y6e=n(zHe,"STRONG",{});var rna=s(y6e);ANr=r(rna,"segformer"),rna.forEach(t),LNr=r(zHe," \u2014 "),Xoe=n(zHe,"A",{href:!0});var tna=s(Xoe);yNr=r(tna,"TFSegformerModel"),tna.forEach(t),xNr=r(zHe," (SegFormer model)"),zHe.forEach(t),$Nr=i(j),W5=n(j,"LI",{});var QHe=s(W5);x6e=n(QHe,"STRONG",{});var ana=s(x6e);kNr=r(ana,"speech_to_text"),ana.forEach(t),SNr=r(QHe," \u2014 "),zoe=n(QHe,"A",{href:!0});var nna=s(zoe);RNr=r(nna,"TFSpeech2TextModel"),nna.forEach(t),PNr=r(QHe," (Speech2Text model)"),QHe.forEach(t),BNr=i(j),U5=n(j,"LI",{});var WHe=s(U5);$6e=n(WHe,"STRONG",{});var sna=s($6e);INr=r(sna,"swin"),sna.forEach(t),NNr=r(WHe," \u2014 "),Qoe=n(WHe,"A",{href:!0});var lna=s(Qoe);qNr=r(lna,"TFSwinModel"),lna.forEach(t),jNr=r(WHe," (Swin Transformer model)"),WHe.forEach(t),DNr=i(j),H5=n(j,"LI",{});var UHe=s(H5);k6e=n(UHe,"STRONG",{});var ina=s(k6e);GNr=r(ina,"t5"),ina.forEach(t),ONr=r(UHe," \u2014 "),Woe=n(UHe,"A",{href:!0});var dna=s(Woe);VNr=r(dna,"TFT5Model"),dna.forEach(t),XNr=r(UHe," (T5 model)"),UHe.forEach(t),zNr=i(j),J5=n(j,"LI",{});var HHe=s(J5);S6e=n(HHe,"STRONG",{});var cna=s(S6e);QNr=r(cna,"tapas"),cna.forEach(t),WNr=r(HHe," \u2014 "),Uoe=n(HHe,"A",{href:!0});var mna=s(Uoe);UNr=r(mna,"TFTapasModel"),mna.forEach(t),HNr=r(HHe," (TAPAS model)"),HHe.forEach(t),JNr=i(j),Y5=n(j,"LI",{});var JHe=s(Y5);R6e=n(JHe,"STRONG",{});var fna=s(R6e);YNr=r(fna,"transfo-xl"),fna.forEach(t),ZNr=r(JHe," \u2014 "),Hoe=n(JHe,"A",{href:!0});var gna=s(Hoe);KNr=r(gna,"TFTransfoXLModel"),gna.forEach(t),eqr=r(JHe," (Transformer-XL model)"),JHe.forEach(t),oqr=i(j),Z5=n(j,"LI",{});var YHe=s(Z5);P6e=n(YHe,"STRONG",{});var hna=s(P6e);rqr=r(hna,"vit"),hna.forEach(t),tqr=r(YHe," \u2014 "),Joe=n(YHe,"A",{href:!0});var una=s(Joe);aqr=r(una,"TFViTModel"),una.forEach(t),nqr=r(YHe," (ViT model)"),YHe.forEach(t),sqr=i(j),K5=n(j,"LI",{});var ZHe=s(K5);B6e=n(ZHe,"STRONG",{});var pna=s(B6e);lqr=r(pna,"vit_mae"),pna.forEach(t),iqr=r(ZHe," \u2014 "),Yoe=n(ZHe,"A",{href:!0});var _na=s(Yoe);dqr=r(_na,"TFViTMAEModel"),_na.forEach(t),cqr=r(ZHe," (ViTMAE model)"),ZHe.forEach(t),mqr=i(j),e0=n(j,"LI",{});var KHe=s(e0);I6e=n(KHe,"STRONG",{});var bna=s(I6e);fqr=r(bna,"wav2vec2"),bna.forEach(t),gqr=r(KHe," \u2014 "),Zoe=n(KHe,"A",{href:!0});var vna=s(Zoe);hqr=r(vna,"TFWav2Vec2Model"),vna.forEach(t),uqr=r(KHe," (Wav2Vec2 model)"),KHe.forEach(t),pqr=i(j),o0=n(j,"LI",{});var eJe=s(o0);N6e=n(eJe,"STRONG",{});var Fna=s(N6e);_qr=r(Fna,"whisper"),Fna.forEach(t),bqr=r(eJe," \u2014 "),Koe=n(eJe,"A",{href:!0});var Tna=s(Koe);vqr=r(Tna,"TFWhisperModel"),Tna.forEach(t),Fqr=r(eJe," (Whisper model)"),eJe.forEach(t),Tqr=i(j),r0=n(j,"LI",{});var oJe=s(r0);q6e=n(oJe,"STRONG",{});var Mna=s(q6e);Mqr=r(Mna,"xglm"),Mna.forEach(t),Eqr=r(oJe," \u2014 "),ere=n(oJe,"A",{href:!0});var Ena=s(ere);Cqr=r(Ena,"TFXGLMModel"),Ena.forEach(t),wqr=r(oJe," (XGLM model)"),oJe.forEach(t),Aqr=i(j),t0=n(j,"LI",{});var rJe=s(t0);j6e=n(rJe,"STRONG",{});var Cna=s(j6e);Lqr=r(Cna,"xlm"),Cna.forEach(t),yqr=r(rJe," \u2014 "),ore=n(rJe,"A",{href:!0});var wna=s(ore);xqr=r(wna,"TFXLMModel"),wna.forEach(t),$qr=r(rJe," (XLM model)"),rJe.forEach(t),kqr=i(j),a0=n(j,"LI",{});var tJe=s(a0);D6e=n(tJe,"STRONG",{});var Ana=s(D6e);Sqr=r(Ana,"xlm-roberta"),Ana.forEach(t),Rqr=r(tJe," \u2014 "),rre=n(tJe,"A",{href:!0});var Lna=s(rre);Pqr=r(Lna,"TFXLMRobertaModel"),Lna.forEach(t),Bqr=r(tJe," (XLM-RoBERTa model)"),tJe.forEach(t),Iqr=i(j),n0=n(j,"LI",{});var aJe=s(n0);G6e=n(aJe,"STRONG",{});var yna=s(G6e);Nqr=r(yna,"xlnet"),yna.forEach(t),qqr=r(aJe," \u2014 "),tre=n(aJe,"A",{href:!0});var xna=s(tre);jqr=r(xna,"TFXLNetModel"),xna.forEach(t),Dqr=r(aJe," (XLNet model)"),aJe.forEach(t),j.forEach(t),Gqr=i(ii),T(s0.$$.fragment,ii),ii.forEach(t),li.forEach(t),kro=i(m),om=n(m,"H2",{class:!0});var Wao=s(om);l0=n(Wao,"A",{id:!0,class:!0,href:!0});var $na=s(l0);O6e=n($na,"SPAN",{});var kna=s(O6e);T(SS.$$.fragment,kna),kna.forEach(t),$na.forEach(t),Oqr=i(Wao),V6e=n(Wao,"SPAN",{});var Sna=s(V6e);Vqr=r(Sna,"TFAutoModelForPreTraining"),Sna.forEach(t),Wao.forEach(t),Sro=i(m),dr=n(m,"DIV",{class:!0});var di=s(dr);T(RS.$$.fragment,di),Xqr=i(di),rm=n(di,"P",{});var Hde=s(rm);zqr=r(Hde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),are=n(Hde,"A",{href:!0});var Rna=s(are);Qqr=r(Rna,"from_pretrained()"),Rna.forEach(t),Wqr=r(Hde," class method or the "),nre=n(Hde,"A",{href:!0});var Pna=s(nre);Uqr=r(Pna,"from_config()"),Pna.forEach(t),Hqr=r(Hde,` class
method.`),Hde.forEach(t),Jqr=i(di),PS=n(di,"P",{});var Uao=s(PS);Yqr=r(Uao,"This class cannot be instantiated directly using "),X6e=n(Uao,"CODE",{});var Bna=s(X6e);Zqr=r(Bna,"__init__()"),Bna.forEach(t),Kqr=r(Uao," (throws an error)."),Uao.forEach(t),ejr=i(di),Ut=n(di,"DIV",{class:!0});var C9=s(Ut);T(BS.$$.fragment,C9),ojr=i(C9),z6e=n(C9,"P",{});var Ina=s(z6e);rjr=r(Ina,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ina.forEach(t),tjr=i(C9),tm=n(C9,"P",{});var Jde=s(tm);ajr=r(Jde,`Note:
Loading a model from its configuration file does `),Q6e=n(Jde,"STRONG",{});var Nna=s(Q6e);njr=r(Nna,"not"),Nna.forEach(t),sjr=r(Jde,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(Jde,"A",{href:!0});var qna=s(sre);ljr=r(qna,"from_pretrained()"),qna.forEach(t),ijr=r(Jde," to load the model weights."),Jde.forEach(t),djr=i(C9),T(i0.$$.fragment,C9),C9.forEach(t),cjr=i(di),jr=n(di,"DIV",{class:!0});var ci=s(jr);T(IS.$$.fragment,ci),mjr=i(ci),W6e=n(ci,"P",{});var jna=s(W6e);fjr=r(jna,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jna.forEach(t),gjr=i(ci),kn=n(ci,"P",{});var w9=s(kn);hjr=r(w9,"The model class to instantiate is selected based on the "),U6e=n(w9,"CODE",{});var Dna=s(U6e);ujr=r(Dna,"model_type"),Dna.forEach(t),pjr=r(w9,` property of the config object (either
passed as an argument or loaded from `),H6e=n(w9,"CODE",{});var Gna=s(H6e);_jr=r(Gna,"pretrained_model_name_or_path"),Gna.forEach(t),bjr=r(w9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n(w9,"CODE",{});var Ona=s(J6e);vjr=r(Ona,"pretrained_model_name_or_path"),Ona.forEach(t),Fjr=r(w9,":"),w9.forEach(t),Tjr=i(ci),le=n(ci,"UL",{});var de=s(le);d0=n(de,"LI",{});var nJe=s(d0);Y6e=n(nJe,"STRONG",{});var Vna=s(Y6e);Mjr=r(Vna,"albert"),Vna.forEach(t),Ejr=r(nJe," \u2014 "),lre=n(nJe,"A",{href:!0});var Xna=s(lre);Cjr=r(Xna,"TFAlbertForPreTraining"),Xna.forEach(t),wjr=r(nJe," (ALBERT model)"),nJe.forEach(t),Ajr=i(de),c0=n(de,"LI",{});var sJe=s(c0);Z6e=n(sJe,"STRONG",{});var zna=s(Z6e);Ljr=r(zna,"bart"),zna.forEach(t),yjr=r(sJe," \u2014 "),ire=n(sJe,"A",{href:!0});var Qna=s(ire);xjr=r(Qna,"TFBartForConditionalGeneration"),Qna.forEach(t),$jr=r(sJe," (BART model)"),sJe.forEach(t),kjr=i(de),m0=n(de,"LI",{});var lJe=s(m0);K6e=n(lJe,"STRONG",{});var Wna=s(K6e);Sjr=r(Wna,"bert"),Wna.forEach(t),Rjr=r(lJe," \u2014 "),dre=n(lJe,"A",{href:!0});var Una=s(dre);Pjr=r(Una,"TFBertForPreTraining"),Una.forEach(t),Bjr=r(lJe," (BERT model)"),lJe.forEach(t),Ijr=i(de),f0=n(de,"LI",{});var iJe=s(f0);e7e=n(iJe,"STRONG",{});var Hna=s(e7e);Njr=r(Hna,"camembert"),Hna.forEach(t),qjr=r(iJe," \u2014 "),cre=n(iJe,"A",{href:!0});var Jna=s(cre);jjr=r(Jna,"TFCamembertForMaskedLM"),Jna.forEach(t),Djr=r(iJe," (CamemBERT model)"),iJe.forEach(t),Gjr=i(de),g0=n(de,"LI",{});var dJe=s(g0);o7e=n(dJe,"STRONG",{});var Yna=s(o7e);Ojr=r(Yna,"ctrl"),Yna.forEach(t),Vjr=r(dJe," \u2014 "),mre=n(dJe,"A",{href:!0});var Zna=s(mre);Xjr=r(Zna,"TFCTRLLMHeadModel"),Zna.forEach(t),zjr=r(dJe," (CTRL model)"),dJe.forEach(t),Qjr=i(de),h0=n(de,"LI",{});var cJe=s(h0);r7e=n(cJe,"STRONG",{});var Kna=s(r7e);Wjr=r(Kna,"distilbert"),Kna.forEach(t),Ujr=r(cJe," \u2014 "),fre=n(cJe,"A",{href:!0});var esa=s(fre);Hjr=r(esa,"TFDistilBertForMaskedLM"),esa.forEach(t),Jjr=r(cJe," (DistilBERT model)"),cJe.forEach(t),Yjr=i(de),u0=n(de,"LI",{});var mJe=s(u0);t7e=n(mJe,"STRONG",{});var osa=s(t7e);Zjr=r(osa,"electra"),osa.forEach(t),Kjr=r(mJe," \u2014 "),gre=n(mJe,"A",{href:!0});var rsa=s(gre);eDr=r(rsa,"TFElectraForPreTraining"),rsa.forEach(t),oDr=r(mJe," (ELECTRA model)"),mJe.forEach(t),rDr=i(de),p0=n(de,"LI",{});var fJe=s(p0);a7e=n(fJe,"STRONG",{});var tsa=s(a7e);tDr=r(tsa,"flaubert"),tsa.forEach(t),aDr=r(fJe," \u2014 "),hre=n(fJe,"A",{href:!0});var asa=s(hre);nDr=r(asa,"TFFlaubertWithLMHeadModel"),asa.forEach(t),sDr=r(fJe," (FlauBERT model)"),fJe.forEach(t),lDr=i(de),_0=n(de,"LI",{});var gJe=s(_0);n7e=n(gJe,"STRONG",{});var nsa=s(n7e);iDr=r(nsa,"funnel"),nsa.forEach(t),dDr=r(gJe," \u2014 "),ure=n(gJe,"A",{href:!0});var ssa=s(ure);cDr=r(ssa,"TFFunnelForPreTraining"),ssa.forEach(t),mDr=r(gJe," (Funnel Transformer model)"),gJe.forEach(t),fDr=i(de),b0=n(de,"LI",{});var hJe=s(b0);s7e=n(hJe,"STRONG",{});var lsa=s(s7e);gDr=r(lsa,"gpt2"),lsa.forEach(t),hDr=r(hJe," \u2014 "),pre=n(hJe,"A",{href:!0});var isa=s(pre);uDr=r(isa,"TFGPT2LMHeadModel"),isa.forEach(t),pDr=r(hJe," (OpenAI GPT-2 model)"),hJe.forEach(t),_Dr=i(de),v0=n(de,"LI",{});var uJe=s(v0);l7e=n(uJe,"STRONG",{});var dsa=s(l7e);bDr=r(dsa,"layoutlm"),dsa.forEach(t),vDr=r(uJe," \u2014 "),_re=n(uJe,"A",{href:!0});var csa=s(_re);FDr=r(csa,"TFLayoutLMForMaskedLM"),csa.forEach(t),TDr=r(uJe," (LayoutLM model)"),uJe.forEach(t),MDr=i(de),F0=n(de,"LI",{});var pJe=s(F0);i7e=n(pJe,"STRONG",{});var msa=s(i7e);EDr=r(msa,"lxmert"),msa.forEach(t),CDr=r(pJe," \u2014 "),bre=n(pJe,"A",{href:!0});var fsa=s(bre);wDr=r(fsa,"TFLxmertForPreTraining"),fsa.forEach(t),ADr=r(pJe," (LXMERT model)"),pJe.forEach(t),LDr=i(de),T0=n(de,"LI",{});var _Je=s(T0);d7e=n(_Je,"STRONG",{});var gsa=s(d7e);yDr=r(gsa,"mobilebert"),gsa.forEach(t),xDr=r(_Je," \u2014 "),vre=n(_Je,"A",{href:!0});var hsa=s(vre);$Dr=r(hsa,"TFMobileBertForPreTraining"),hsa.forEach(t),kDr=r(_Je," (MobileBERT model)"),_Je.forEach(t),SDr=i(de),M0=n(de,"LI",{});var bJe=s(M0);c7e=n(bJe,"STRONG",{});var usa=s(c7e);RDr=r(usa,"mpnet"),usa.forEach(t),PDr=r(bJe," \u2014 "),Fre=n(bJe,"A",{href:!0});var psa=s(Fre);BDr=r(psa,"TFMPNetForMaskedLM"),psa.forEach(t),IDr=r(bJe," (MPNet model)"),bJe.forEach(t),NDr=i(de),E0=n(de,"LI",{});var vJe=s(E0);m7e=n(vJe,"STRONG",{});var _sa=s(m7e);qDr=r(_sa,"openai-gpt"),_sa.forEach(t),jDr=r(vJe," \u2014 "),Tre=n(vJe,"A",{href:!0});var bsa=s(Tre);DDr=r(bsa,"TFOpenAIGPTLMHeadModel"),bsa.forEach(t),GDr=r(vJe," (OpenAI GPT model)"),vJe.forEach(t),ODr=i(de),C0=n(de,"LI",{});var FJe=s(C0);f7e=n(FJe,"STRONG",{});var vsa=s(f7e);VDr=r(vsa,"roberta"),vsa.forEach(t),XDr=r(FJe," \u2014 "),Mre=n(FJe,"A",{href:!0});var Fsa=s(Mre);zDr=r(Fsa,"TFRobertaForMaskedLM"),Fsa.forEach(t),QDr=r(FJe," (RoBERTa model)"),FJe.forEach(t),WDr=i(de),w0=n(de,"LI",{});var TJe=s(w0);g7e=n(TJe,"STRONG",{});var Tsa=s(g7e);UDr=r(Tsa,"t5"),Tsa.forEach(t),HDr=r(TJe," \u2014 "),Ere=n(TJe,"A",{href:!0});var Msa=s(Ere);JDr=r(Msa,"TFT5ForConditionalGeneration"),Msa.forEach(t),YDr=r(TJe," (T5 model)"),TJe.forEach(t),ZDr=i(de),A0=n(de,"LI",{});var MJe=s(A0);h7e=n(MJe,"STRONG",{});var Esa=s(h7e);KDr=r(Esa,"tapas"),Esa.forEach(t),eGr=r(MJe," \u2014 "),Cre=n(MJe,"A",{href:!0});var Csa=s(Cre);oGr=r(Csa,"TFTapasForMaskedLM"),Csa.forEach(t),rGr=r(MJe," (TAPAS model)"),MJe.forEach(t),tGr=i(de),L0=n(de,"LI",{});var EJe=s(L0);u7e=n(EJe,"STRONG",{});var wsa=s(u7e);aGr=r(wsa,"transfo-xl"),wsa.forEach(t),nGr=r(EJe," \u2014 "),wre=n(EJe,"A",{href:!0});var Asa=s(wre);sGr=r(Asa,"TFTransfoXLLMHeadModel"),Asa.forEach(t),lGr=r(EJe," (Transformer-XL model)"),EJe.forEach(t),iGr=i(de),y0=n(de,"LI",{});var CJe=s(y0);p7e=n(CJe,"STRONG",{});var Lsa=s(p7e);dGr=r(Lsa,"vit_mae"),Lsa.forEach(t),cGr=r(CJe," \u2014 "),Are=n(CJe,"A",{href:!0});var ysa=s(Are);mGr=r(ysa,"TFViTMAEForPreTraining"),ysa.forEach(t),fGr=r(CJe," (ViTMAE model)"),CJe.forEach(t),gGr=i(de),x0=n(de,"LI",{});var wJe=s(x0);_7e=n(wJe,"STRONG",{});var xsa=s(_7e);hGr=r(xsa,"xlm"),xsa.forEach(t),uGr=r(wJe," \u2014 "),Lre=n(wJe,"A",{href:!0});var $sa=s(Lre);pGr=r($sa,"TFXLMWithLMHeadModel"),$sa.forEach(t),_Gr=r(wJe," (XLM model)"),wJe.forEach(t),bGr=i(de),$0=n(de,"LI",{});var AJe=s($0);b7e=n(AJe,"STRONG",{});var ksa=s(b7e);vGr=r(ksa,"xlm-roberta"),ksa.forEach(t),FGr=r(AJe," \u2014 "),yre=n(AJe,"A",{href:!0});var Ssa=s(yre);TGr=r(Ssa,"TFXLMRobertaForMaskedLM"),Ssa.forEach(t),MGr=r(AJe," (XLM-RoBERTa model)"),AJe.forEach(t),EGr=i(de),k0=n(de,"LI",{});var LJe=s(k0);v7e=n(LJe,"STRONG",{});var Rsa=s(v7e);CGr=r(Rsa,"xlnet"),Rsa.forEach(t),wGr=r(LJe," \u2014 "),xre=n(LJe,"A",{href:!0});var Psa=s(xre);AGr=r(Psa,"TFXLNetLMHeadModel"),Psa.forEach(t),LGr=r(LJe," (XLNet model)"),LJe.forEach(t),de.forEach(t),yGr=i(ci),T(S0.$$.fragment,ci),ci.forEach(t),di.forEach(t),Rro=i(m),am=n(m,"H2",{class:!0});var Hao=s(am);R0=n(Hao,"A",{id:!0,class:!0,href:!0});var Bsa=s(R0);F7e=n(Bsa,"SPAN",{});var Isa=s(F7e);T(NS.$$.fragment,Isa),Isa.forEach(t),Bsa.forEach(t),xGr=i(Hao),T7e=n(Hao,"SPAN",{});var Nsa=s(T7e);$Gr=r(Nsa,"TFAutoModelForCausalLM"),Nsa.forEach(t),Hao.forEach(t),Pro=i(m),cr=n(m,"DIV",{class:!0});var mi=s(cr);T(qS.$$.fragment,mi),kGr=i(mi),nm=n(mi,"P",{});var Yde=s(nm);SGr=r(Yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$re=n(Yde,"A",{href:!0});var qsa=s($re);RGr=r(qsa,"from_pretrained()"),qsa.forEach(t),PGr=r(Yde," class method or the "),kre=n(Yde,"A",{href:!0});var jsa=s(kre);BGr=r(jsa,"from_config()"),jsa.forEach(t),IGr=r(Yde,` class
method.`),Yde.forEach(t),NGr=i(mi),jS=n(mi,"P",{});var Jao=s(jS);qGr=r(Jao,"This class cannot be instantiated directly using "),M7e=n(Jao,"CODE",{});var Dsa=s(M7e);jGr=r(Dsa,"__init__()"),Dsa.forEach(t),DGr=r(Jao," (throws an error)."),Jao.forEach(t),GGr=i(mi),Ht=n(mi,"DIV",{class:!0});var A9=s(Ht);T(DS.$$.fragment,A9),OGr=i(A9),E7e=n(A9,"P",{});var Gsa=s(E7e);VGr=r(Gsa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gsa.forEach(t),XGr=i(A9),sm=n(A9,"P",{});var Zde=s(sm);zGr=r(Zde,`Note:
Loading a model from its configuration file does `),C7e=n(Zde,"STRONG",{});var Osa=s(C7e);QGr=r(Osa,"not"),Osa.forEach(t),WGr=r(Zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(Zde,"A",{href:!0});var Vsa=s(Sre);UGr=r(Vsa,"from_pretrained()"),Vsa.forEach(t),HGr=r(Zde," to load the model weights."),Zde.forEach(t),JGr=i(A9),T(P0.$$.fragment,A9),A9.forEach(t),YGr=i(mi),Dr=n(mi,"DIV",{class:!0});var fi=s(Dr);T(GS.$$.fragment,fi),ZGr=i(fi),w7e=n(fi,"P",{});var Xsa=s(w7e);KGr=r(Xsa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xsa.forEach(t),eOr=i(fi),Sn=n(fi,"P",{});var L9=s(Sn);oOr=r(L9,"The model class to instantiate is selected based on the "),A7e=n(L9,"CODE",{});var zsa=s(A7e);rOr=r(zsa,"model_type"),zsa.forEach(t),tOr=r(L9,` property of the config object (either
passed as an argument or loaded from `),L7e=n(L9,"CODE",{});var Qsa=s(L7e);aOr=r(Qsa,"pretrained_model_name_or_path"),Qsa.forEach(t),nOr=r(L9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(L9,"CODE",{});var Wsa=s(y7e);sOr=r(Wsa,"pretrained_model_name_or_path"),Wsa.forEach(t),lOr=r(L9,":"),L9.forEach(t),iOr=i(fi),Me=n(fi,"UL",{});var Ce=s(Me);B0=n(Ce,"LI",{});var yJe=s(B0);x7e=n(yJe,"STRONG",{});var Usa=s(x7e);dOr=r(Usa,"bert"),Usa.forEach(t),cOr=r(yJe," \u2014 "),Rre=n(yJe,"A",{href:!0});var Hsa=s(Rre);mOr=r(Hsa,"TFBertLMHeadModel"),Hsa.forEach(t),fOr=r(yJe," (BERT model)"),yJe.forEach(t),gOr=i(Ce),I0=n(Ce,"LI",{});var xJe=s(I0);$7e=n(xJe,"STRONG",{});var Jsa=s($7e);hOr=r(Jsa,"camembert"),Jsa.forEach(t),uOr=r(xJe," \u2014 "),Pre=n(xJe,"A",{href:!0});var Ysa=s(Pre);pOr=r(Ysa,"TFCamembertForCausalLM"),Ysa.forEach(t),_Or=r(xJe," (CamemBERT model)"),xJe.forEach(t),bOr=i(Ce),N0=n(Ce,"LI",{});var $Je=s(N0);k7e=n($Je,"STRONG",{});var Zsa=s(k7e);vOr=r(Zsa,"ctrl"),Zsa.forEach(t),FOr=r($Je," \u2014 "),Bre=n($Je,"A",{href:!0});var Ksa=s(Bre);TOr=r(Ksa,"TFCTRLLMHeadModel"),Ksa.forEach(t),MOr=r($Je," (CTRL model)"),$Je.forEach(t),EOr=i(Ce),q0=n(Ce,"LI",{});var kJe=s(q0);S7e=n(kJe,"STRONG",{});var ela=s(S7e);COr=r(ela,"gpt2"),ela.forEach(t),wOr=r(kJe," \u2014 "),Ire=n(kJe,"A",{href:!0});var ola=s(Ire);AOr=r(ola,"TFGPT2LMHeadModel"),ola.forEach(t),LOr=r(kJe," (OpenAI GPT-2 model)"),kJe.forEach(t),yOr=i(Ce),j0=n(Ce,"LI",{});var SJe=s(j0);R7e=n(SJe,"STRONG",{});var rla=s(R7e);xOr=r(rla,"gptj"),rla.forEach(t),$Or=r(SJe," \u2014 "),Nre=n(SJe,"A",{href:!0});var tla=s(Nre);kOr=r(tla,"TFGPTJForCausalLM"),tla.forEach(t),SOr=r(SJe," (GPT-J model)"),SJe.forEach(t),ROr=i(Ce),D0=n(Ce,"LI",{});var RJe=s(D0);P7e=n(RJe,"STRONG",{});var ala=s(P7e);POr=r(ala,"openai-gpt"),ala.forEach(t),BOr=r(RJe," \u2014 "),qre=n(RJe,"A",{href:!0});var nla=s(qre);IOr=r(nla,"TFOpenAIGPTLMHeadModel"),nla.forEach(t),NOr=r(RJe," (OpenAI GPT model)"),RJe.forEach(t),qOr=i(Ce),G0=n(Ce,"LI",{});var PJe=s(G0);B7e=n(PJe,"STRONG",{});var sla=s(B7e);jOr=r(sla,"opt"),sla.forEach(t),DOr=r(PJe," \u2014 "),jre=n(PJe,"A",{href:!0});var lla=s(jre);GOr=r(lla,"TFOPTForCausalLM"),lla.forEach(t),OOr=r(PJe," (OPT model)"),PJe.forEach(t),VOr=i(Ce),O0=n(Ce,"LI",{});var BJe=s(O0);I7e=n(BJe,"STRONG",{});var ila=s(I7e);XOr=r(ila,"rembert"),ila.forEach(t),zOr=r(BJe," \u2014 "),Dre=n(BJe,"A",{href:!0});var dla=s(Dre);QOr=r(dla,"TFRemBertForCausalLM"),dla.forEach(t),WOr=r(BJe," (RemBERT model)"),BJe.forEach(t),UOr=i(Ce),V0=n(Ce,"LI",{});var IJe=s(V0);N7e=n(IJe,"STRONG",{});var cla=s(N7e);HOr=r(cla,"roberta"),cla.forEach(t),JOr=r(IJe," \u2014 "),Gre=n(IJe,"A",{href:!0});var mla=s(Gre);YOr=r(mla,"TFRobertaForCausalLM"),mla.forEach(t),ZOr=r(IJe," (RoBERTa model)"),IJe.forEach(t),KOr=i(Ce),X0=n(Ce,"LI",{});var NJe=s(X0);q7e=n(NJe,"STRONG",{});var fla=s(q7e);eVr=r(fla,"roformer"),fla.forEach(t),oVr=r(NJe," \u2014 "),Ore=n(NJe,"A",{href:!0});var gla=s(Ore);rVr=r(gla,"TFRoFormerForCausalLM"),gla.forEach(t),tVr=r(NJe," (RoFormer model)"),NJe.forEach(t),aVr=i(Ce),z0=n(Ce,"LI",{});var qJe=s(z0);j7e=n(qJe,"STRONG",{});var hla=s(j7e);nVr=r(hla,"transfo-xl"),hla.forEach(t),sVr=r(qJe," \u2014 "),Vre=n(qJe,"A",{href:!0});var ula=s(Vre);lVr=r(ula,"TFTransfoXLLMHeadModel"),ula.forEach(t),iVr=r(qJe," (Transformer-XL model)"),qJe.forEach(t),dVr=i(Ce),Q0=n(Ce,"LI",{});var jJe=s(Q0);D7e=n(jJe,"STRONG",{});var pla=s(D7e);cVr=r(pla,"xglm"),pla.forEach(t),mVr=r(jJe," \u2014 "),Xre=n(jJe,"A",{href:!0});var _la=s(Xre);fVr=r(_la,"TFXGLMForCausalLM"),_la.forEach(t),gVr=r(jJe," (XGLM model)"),jJe.forEach(t),hVr=i(Ce),W0=n(Ce,"LI",{});var DJe=s(W0);G7e=n(DJe,"STRONG",{});var bla=s(G7e);uVr=r(bla,"xlm"),bla.forEach(t),pVr=r(DJe," \u2014 "),zre=n(DJe,"A",{href:!0});var vla=s(zre);_Vr=r(vla,"TFXLMWithLMHeadModel"),vla.forEach(t),bVr=r(DJe," (XLM model)"),DJe.forEach(t),vVr=i(Ce),U0=n(Ce,"LI",{});var GJe=s(U0);O7e=n(GJe,"STRONG",{});var Fla=s(O7e);FVr=r(Fla,"xlnet"),Fla.forEach(t),TVr=r(GJe," \u2014 "),Qre=n(GJe,"A",{href:!0});var Tla=s(Qre);MVr=r(Tla,"TFXLNetLMHeadModel"),Tla.forEach(t),EVr=r(GJe," (XLNet model)"),GJe.forEach(t),Ce.forEach(t),CVr=i(fi),T(H0.$$.fragment,fi),fi.forEach(t),mi.forEach(t),Bro=i(m),lm=n(m,"H2",{class:!0});var Yao=s(lm);J0=n(Yao,"A",{id:!0,class:!0,href:!0});var Mla=s(J0);V7e=n(Mla,"SPAN",{});var Ela=s(V7e);T(OS.$$.fragment,Ela),Ela.forEach(t),Mla.forEach(t),wVr=i(Yao),X7e=n(Yao,"SPAN",{});var Cla=s(X7e);AVr=r(Cla,"TFAutoModelForImageClassification"),Cla.forEach(t),Yao.forEach(t),Iro=i(m),mr=n(m,"DIV",{class:!0});var gi=s(mr);T(VS.$$.fragment,gi),LVr=i(gi),im=n(gi,"P",{});var Kde=s(im);yVr=r(Kde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wre=n(Kde,"A",{href:!0});var wla=s(Wre);xVr=r(wla,"from_pretrained()"),wla.forEach(t),$Vr=r(Kde," class method or the "),Ure=n(Kde,"A",{href:!0});var Ala=s(Ure);kVr=r(Ala,"from_config()"),Ala.forEach(t),SVr=r(Kde,` class
method.`),Kde.forEach(t),RVr=i(gi),XS=n(gi,"P",{});var Zao=s(XS);PVr=r(Zao,"This class cannot be instantiated directly using "),z7e=n(Zao,"CODE",{});var Lla=s(z7e);BVr=r(Lla,"__init__()"),Lla.forEach(t),IVr=r(Zao," (throws an error)."),Zao.forEach(t),NVr=i(gi),Jt=n(gi,"DIV",{class:!0});var y9=s(Jt);T(zS.$$.fragment,y9),qVr=i(y9),Q7e=n(y9,"P",{});var yla=s(Q7e);jVr=r(yla,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yla.forEach(t),DVr=i(y9),dm=n(y9,"P",{});var ece=s(dm);GVr=r(ece,`Note:
Loading a model from its configuration file does `),W7e=n(ece,"STRONG",{});var xla=s(W7e);OVr=r(xla,"not"),xla.forEach(t),VVr=r(ece,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hre=n(ece,"A",{href:!0});var $la=s(Hre);XVr=r($la,"from_pretrained()"),$la.forEach(t),zVr=r(ece," to load the model weights."),ece.forEach(t),QVr=i(y9),T(Y0.$$.fragment,y9),y9.forEach(t),WVr=i(gi),Gr=n(gi,"DIV",{class:!0});var hi=s(Gr);T(QS.$$.fragment,hi),UVr=i(hi),U7e=n(hi,"P",{});var kla=s(U7e);HVr=r(kla,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kla.forEach(t),JVr=i(hi),Rn=n(hi,"P",{});var x9=s(Rn);YVr=r(x9,"The model class to instantiate is selected based on the "),H7e=n(x9,"CODE",{});var Sla=s(H7e);ZVr=r(Sla,"model_type"),Sla.forEach(t),KVr=r(x9,` property of the config object (either
passed as an argument or loaded from `),J7e=n(x9,"CODE",{});var Rla=s(J7e);eXr=r(Rla,"pretrained_model_name_or_path"),Rla.forEach(t),oXr=r(x9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(x9,"CODE",{});var Pla=s(Y7e);rXr=r(Pla,"pretrained_model_name_or_path"),Pla.forEach(t),tXr=r(x9,":"),x9.forEach(t),aXr=i(hi),Be=n(hi,"UL",{});var We=s(Be);Z0=n(We,"LI",{});var OJe=s(Z0);Z7e=n(OJe,"STRONG",{});var Bla=s(Z7e);nXr=r(Bla,"convnext"),Bla.forEach(t),sXr=r(OJe," \u2014 "),Jre=n(OJe,"A",{href:!0});var Ila=s(Jre);lXr=r(Ila,"TFConvNextForImageClassification"),Ila.forEach(t),iXr=r(OJe," (ConvNeXT model)"),OJe.forEach(t),dXr=i(We),K0=n(We,"LI",{});var VJe=s(K0);K7e=n(VJe,"STRONG",{});var Nla=s(K7e);cXr=r(Nla,"data2vec-vision"),Nla.forEach(t),mXr=r(VJe," \u2014 "),Yre=n(VJe,"A",{href:!0});var qla=s(Yre);fXr=r(qla,"TFData2VecVisionForImageClassification"),qla.forEach(t),gXr=r(VJe," (Data2VecVision model)"),VJe.forEach(t),hXr=i(We),Al=n(We,"LI",{});var SI=s(Al);eLe=n(SI,"STRONG",{});var jla=s(eLe);uXr=r(jla,"deit"),jla.forEach(t),pXr=r(SI," \u2014 "),Zre=n(SI,"A",{href:!0});var Dla=s(Zre);_Xr=r(Dla,"TFDeiTForImageClassification"),Dla.forEach(t),bXr=r(SI," or "),Kre=n(SI,"A",{href:!0});var Gla=s(Kre);vXr=r(Gla,"TFDeiTForImageClassificationWithTeacher"),Gla.forEach(t),FXr=r(SI," (DeiT model)"),SI.forEach(t),TXr=i(We),ew=n(We,"LI",{});var XJe=s(ew);oLe=n(XJe,"STRONG",{});var Ola=s(oLe);MXr=r(Ola,"mobilevit"),Ola.forEach(t),EXr=r(XJe," \u2014 "),ete=n(XJe,"A",{href:!0});var Vla=s(ete);CXr=r(Vla,"TFMobileViTForImageClassification"),Vla.forEach(t),wXr=r(XJe," (MobileViT model)"),XJe.forEach(t),AXr=i(We),ow=n(We,"LI",{});var zJe=s(ow);rLe=n(zJe,"STRONG",{});var Xla=s(rLe);LXr=r(Xla,"regnet"),Xla.forEach(t),yXr=r(zJe," \u2014 "),ote=n(zJe,"A",{href:!0});var zla=s(ote);xXr=r(zla,"TFRegNetForImageClassification"),zla.forEach(t),$Xr=r(zJe," (RegNet model)"),zJe.forEach(t),kXr=i(We),rw=n(We,"LI",{});var QJe=s(rw);tLe=n(QJe,"STRONG",{});var Qla=s(tLe);SXr=r(Qla,"resnet"),Qla.forEach(t),RXr=r(QJe," \u2014 "),rte=n(QJe,"A",{href:!0});var Wla=s(rte);PXr=r(Wla,"TFResNetForImageClassification"),Wla.forEach(t),BXr=r(QJe," (ResNet model)"),QJe.forEach(t),IXr=i(We),tw=n(We,"LI",{});var WJe=s(tw);aLe=n(WJe,"STRONG",{});var Ula=s(aLe);NXr=r(Ula,"segformer"),Ula.forEach(t),qXr=r(WJe," \u2014 "),tte=n(WJe,"A",{href:!0});var Hla=s(tte);jXr=r(Hla,"TFSegformerForImageClassification"),Hla.forEach(t),DXr=r(WJe," (SegFormer model)"),WJe.forEach(t),GXr=i(We),aw=n(We,"LI",{});var UJe=s(aw);nLe=n(UJe,"STRONG",{});var Jla=s(nLe);OXr=r(Jla,"swin"),Jla.forEach(t),VXr=r(UJe," \u2014 "),ate=n(UJe,"A",{href:!0});var Yla=s(ate);XXr=r(Yla,"TFSwinForImageClassification"),Yla.forEach(t),zXr=r(UJe," (Swin Transformer model)"),UJe.forEach(t),QXr=i(We),nw=n(We,"LI",{});var HJe=s(nw);sLe=n(HJe,"STRONG",{});var Zla=s(sLe);WXr=r(Zla,"vit"),Zla.forEach(t),UXr=r(HJe," \u2014 "),nte=n(HJe,"A",{href:!0});var Kla=s(nte);HXr=r(Kla,"TFViTForImageClassification"),Kla.forEach(t),JXr=r(HJe," (ViT model)"),HJe.forEach(t),We.forEach(t),YXr=i(hi),T(sw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Nro=i(m),cm=n(m,"H2",{class:!0});var Kao=s(cm);lw=n(Kao,"A",{id:!0,class:!0,href:!0});var eia=s(lw);lLe=n(eia,"SPAN",{});var oia=s(lLe);T(WS.$$.fragment,oia),oia.forEach(t),eia.forEach(t),ZXr=i(Kao),iLe=n(Kao,"SPAN",{});var ria=s(iLe);KXr=r(ria,"TFAutoModelForSemanticSegmentation"),ria.forEach(t),Kao.forEach(t),qro=i(m),fr=n(m,"DIV",{class:!0});var ui=s(fr);T(US.$$.fragment,ui),ezr=i(ui),mm=n(ui,"P",{});var oce=s(mm);ozr=r(oce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ste=n(oce,"A",{href:!0});var tia=s(ste);rzr=r(tia,"from_pretrained()"),tia.forEach(t),tzr=r(oce," class method or the "),lte=n(oce,"A",{href:!0});var aia=s(lte);azr=r(aia,"from_config()"),aia.forEach(t),nzr=r(oce,` class
method.`),oce.forEach(t),szr=i(ui),HS=n(ui,"P",{});var eno=s(HS);lzr=r(eno,"This class cannot be instantiated directly using "),dLe=n(eno,"CODE",{});var nia=s(dLe);izr=r(nia,"__init__()"),nia.forEach(t),dzr=r(eno," (throws an error)."),eno.forEach(t),czr=i(ui),Yt=n(ui,"DIV",{class:!0});var $9=s(Yt);T(JS.$$.fragment,$9),mzr=i($9),cLe=n($9,"P",{});var sia=s(cLe);fzr=r(sia,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sia.forEach(t),gzr=i($9),fm=n($9,"P",{});var rce=s(fm);hzr=r(rce,`Note:
Loading a model from its configuration file does `),mLe=n(rce,"STRONG",{});var lia=s(mLe);uzr=r(lia,"not"),lia.forEach(t),pzr=r(rce,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(rce,"A",{href:!0});var iia=s(ite);_zr=r(iia,"from_pretrained()"),iia.forEach(t),bzr=r(rce," to load the model weights."),rce.forEach(t),vzr=i($9),T(iw.$$.fragment,$9),$9.forEach(t),Fzr=i(ui),Or=n(ui,"DIV",{class:!0});var pi=s(Or);T(YS.$$.fragment,pi),Tzr=i(pi),fLe=n(pi,"P",{});var dia=s(fLe);Mzr=r(dia,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),dia.forEach(t),Ezr=i(pi),Pn=n(pi,"P",{});var k9=s(Pn);Czr=r(k9,"The model class to instantiate is selected based on the "),gLe=n(k9,"CODE",{});var cia=s(gLe);wzr=r(cia,"model_type"),cia.forEach(t),Azr=r(k9,` property of the config object (either
passed as an argument or loaded from `),hLe=n(k9,"CODE",{});var mia=s(hLe);Lzr=r(mia,"pretrained_model_name_or_path"),mia.forEach(t),yzr=r(k9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uLe=n(k9,"CODE",{});var fia=s(uLe);xzr=r(fia,"pretrained_model_name_or_path"),fia.forEach(t),$zr=r(k9,":"),k9.forEach(t),kzr=i(pi),gm=n(pi,"UL",{});var tce=s(gm);dw=n(tce,"LI",{});var JJe=s(dw);pLe=n(JJe,"STRONG",{});var gia=s(pLe);Szr=r(gia,"data2vec-vision"),gia.forEach(t),Rzr=r(JJe," \u2014 "),dte=n(JJe,"A",{href:!0});var hia=s(dte);Pzr=r(hia,"TFData2VecVisionForSemanticSegmentation"),hia.forEach(t),Bzr=r(JJe," (Data2VecVision model)"),JJe.forEach(t),Izr=i(tce),cw=n(tce,"LI",{});var YJe=s(cw);_Le=n(YJe,"STRONG",{});var uia=s(_Le);Nzr=r(uia,"mobilevit"),uia.forEach(t),qzr=r(YJe," \u2014 "),cte=n(YJe,"A",{href:!0});var pia=s(cte);jzr=r(pia,"TFMobileViTForSemanticSegmentation"),pia.forEach(t),Dzr=r(YJe," (MobileViT model)"),YJe.forEach(t),Gzr=i(tce),mw=n(tce,"LI",{});var ZJe=s(mw);bLe=n(ZJe,"STRONG",{});var _ia=s(bLe);Ozr=r(_ia,"segformer"),_ia.forEach(t),Vzr=r(ZJe," \u2014 "),mte=n(ZJe,"A",{href:!0});var bia=s(mte);Xzr=r(bia,"TFSegformerForSemanticSegmentation"),bia.forEach(t),zzr=r(ZJe," (SegFormer model)"),ZJe.forEach(t),tce.forEach(t),Qzr=i(pi),T(fw.$$.fragment,pi),pi.forEach(t),ui.forEach(t),jro=i(m),hm=n(m,"H2",{class:!0});var ono=s(hm);gw=n(ono,"A",{id:!0,class:!0,href:!0});var via=s(gw);vLe=n(via,"SPAN",{});var Fia=s(vLe);T(ZS.$$.fragment,Fia),Fia.forEach(t),via.forEach(t),Wzr=i(ono),FLe=n(ono,"SPAN",{});var Tia=s(FLe);Uzr=r(Tia,"TFAutoModelForMaskedLM"),Tia.forEach(t),ono.forEach(t),Dro=i(m),gr=n(m,"DIV",{class:!0});var _i=s(gr);T(KS.$$.fragment,_i),Hzr=i(_i),um=n(_i,"P",{});var ace=s(um);Jzr=r(ace,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fte=n(ace,"A",{href:!0});var Mia=s(fte);Yzr=r(Mia,"from_pretrained()"),Mia.forEach(t),Zzr=r(ace," class method or the "),gte=n(ace,"A",{href:!0});var Eia=s(gte);Kzr=r(Eia,"from_config()"),Eia.forEach(t),eQr=r(ace,` class
method.`),ace.forEach(t),oQr=i(_i),eR=n(_i,"P",{});var rno=s(eR);rQr=r(rno,"This class cannot be instantiated directly using "),TLe=n(rno,"CODE",{});var Cia=s(TLe);tQr=r(Cia,"__init__()"),Cia.forEach(t),aQr=r(rno," (throws an error)."),rno.forEach(t),nQr=i(_i),Zt=n(_i,"DIV",{class:!0});var S9=s(Zt);T(oR.$$.fragment,S9),sQr=i(S9),MLe=n(S9,"P",{});var wia=s(MLe);lQr=r(wia,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wia.forEach(t),iQr=i(S9),pm=n(S9,"P",{});var nce=s(pm);dQr=r(nce,`Note:
Loading a model from its configuration file does `),ELe=n(nce,"STRONG",{});var Aia=s(ELe);cQr=r(Aia,"not"),Aia.forEach(t),mQr=r(nce,` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=n(nce,"A",{href:!0});var Lia=s(hte);fQr=r(Lia,"from_pretrained()"),Lia.forEach(t),gQr=r(nce," to load the model weights."),nce.forEach(t),hQr=i(S9),T(hw.$$.fragment,S9),S9.forEach(t),uQr=i(_i),Vr=n(_i,"DIV",{class:!0});var bi=s(Vr);T(rR.$$.fragment,bi),pQr=i(bi),CLe=n(bi,"P",{});var yia=s(CLe);_Qr=r(yia,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yia.forEach(t),bQr=i(bi),Bn=n(bi,"P",{});var R9=s(Bn);vQr=r(R9,"The model class to instantiate is selected based on the "),wLe=n(R9,"CODE",{});var xia=s(wLe);FQr=r(xia,"model_type"),xia.forEach(t),TQr=r(R9,` property of the config object (either
passed as an argument or loaded from `),ALe=n(R9,"CODE",{});var $ia=s(ALe);MQr=r($ia,"pretrained_model_name_or_path"),$ia.forEach(t),EQr=r(R9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=n(R9,"CODE",{});var kia=s(LLe);CQr=r(kia,"pretrained_model_name_or_path"),kia.forEach(t),wQr=r(R9,":"),R9.forEach(t),AQr=i(bi),ge=n(bi,"UL",{});var _e=s(ge);uw=n(_e,"LI",{});var KJe=s(uw);yLe=n(KJe,"STRONG",{});var Sia=s(yLe);LQr=r(Sia,"albert"),Sia.forEach(t),yQr=r(KJe," \u2014 "),ute=n(KJe,"A",{href:!0});var Ria=s(ute);xQr=r(Ria,"TFAlbertForMaskedLM"),Ria.forEach(t),$Qr=r(KJe," (ALBERT model)"),KJe.forEach(t),kQr=i(_e),pw=n(_e,"LI",{});var eYe=s(pw);xLe=n(eYe,"STRONG",{});var Pia=s(xLe);SQr=r(Pia,"bert"),Pia.forEach(t),RQr=r(eYe," \u2014 "),pte=n(eYe,"A",{href:!0});var Bia=s(pte);PQr=r(Bia,"TFBertForMaskedLM"),Bia.forEach(t),BQr=r(eYe," (BERT model)"),eYe.forEach(t),IQr=i(_e),_w=n(_e,"LI",{});var oYe=s(_w);$Le=n(oYe,"STRONG",{});var Iia=s($Le);NQr=r(Iia,"camembert"),Iia.forEach(t),qQr=r(oYe," \u2014 "),_te=n(oYe,"A",{href:!0});var Nia=s(_te);jQr=r(Nia,"TFCamembertForMaskedLM"),Nia.forEach(t),DQr=r(oYe," (CamemBERT model)"),oYe.forEach(t),GQr=i(_e),bw=n(_e,"LI",{});var rYe=s(bw);kLe=n(rYe,"STRONG",{});var qia=s(kLe);OQr=r(qia,"convbert"),qia.forEach(t),VQr=r(rYe," \u2014 "),bte=n(rYe,"A",{href:!0});var jia=s(bte);XQr=r(jia,"TFConvBertForMaskedLM"),jia.forEach(t),zQr=r(rYe," (ConvBERT model)"),rYe.forEach(t),QQr=i(_e),vw=n(_e,"LI",{});var tYe=s(vw);SLe=n(tYe,"STRONG",{});var Dia=s(SLe);WQr=r(Dia,"deberta"),Dia.forEach(t),UQr=r(tYe," \u2014 "),vte=n(tYe,"A",{href:!0});var Gia=s(vte);HQr=r(Gia,"TFDebertaForMaskedLM"),Gia.forEach(t),JQr=r(tYe," (DeBERTa model)"),tYe.forEach(t),YQr=i(_e),Fw=n(_e,"LI",{});var aYe=s(Fw);RLe=n(aYe,"STRONG",{});var Oia=s(RLe);ZQr=r(Oia,"deberta-v2"),Oia.forEach(t),KQr=r(aYe," \u2014 "),Fte=n(aYe,"A",{href:!0});var Via=s(Fte);eWr=r(Via,"TFDebertaV2ForMaskedLM"),Via.forEach(t),oWr=r(aYe," (DeBERTa-v2 model)"),aYe.forEach(t),rWr=i(_e),Tw=n(_e,"LI",{});var nYe=s(Tw);PLe=n(nYe,"STRONG",{});var Xia=s(PLe);tWr=r(Xia,"distilbert"),Xia.forEach(t),aWr=r(nYe," \u2014 "),Tte=n(nYe,"A",{href:!0});var zia=s(Tte);nWr=r(zia,"TFDistilBertForMaskedLM"),zia.forEach(t),sWr=r(nYe," (DistilBERT model)"),nYe.forEach(t),lWr=i(_e),Mw=n(_e,"LI",{});var sYe=s(Mw);BLe=n(sYe,"STRONG",{});var Qia=s(BLe);iWr=r(Qia,"electra"),Qia.forEach(t),dWr=r(sYe," \u2014 "),Mte=n(sYe,"A",{href:!0});var Wia=s(Mte);cWr=r(Wia,"TFElectraForMaskedLM"),Wia.forEach(t),mWr=r(sYe," (ELECTRA model)"),sYe.forEach(t),fWr=i(_e),Ew=n(_e,"LI",{});var lYe=s(Ew);ILe=n(lYe,"STRONG",{});var Uia=s(ILe);gWr=r(Uia,"flaubert"),Uia.forEach(t),hWr=r(lYe," \u2014 "),Ete=n(lYe,"A",{href:!0});var Hia=s(Ete);uWr=r(Hia,"TFFlaubertWithLMHeadModel"),Hia.forEach(t),pWr=r(lYe," (FlauBERT model)"),lYe.forEach(t),_Wr=i(_e),Cw=n(_e,"LI",{});var iYe=s(Cw);NLe=n(iYe,"STRONG",{});var Jia=s(NLe);bWr=r(Jia,"funnel"),Jia.forEach(t),vWr=r(iYe," \u2014 "),Cte=n(iYe,"A",{href:!0});var Yia=s(Cte);FWr=r(Yia,"TFFunnelForMaskedLM"),Yia.forEach(t),TWr=r(iYe," (Funnel Transformer model)"),iYe.forEach(t),MWr=i(_e),ww=n(_e,"LI",{});var dYe=s(ww);qLe=n(dYe,"STRONG",{});var Zia=s(qLe);EWr=r(Zia,"layoutlm"),Zia.forEach(t),CWr=r(dYe," \u2014 "),wte=n(dYe,"A",{href:!0});var Kia=s(wte);wWr=r(Kia,"TFLayoutLMForMaskedLM"),Kia.forEach(t),AWr=r(dYe," (LayoutLM model)"),dYe.forEach(t),LWr=i(_e),Aw=n(_e,"LI",{});var cYe=s(Aw);jLe=n(cYe,"STRONG",{});var eda=s(jLe);yWr=r(eda,"longformer"),eda.forEach(t),xWr=r(cYe," \u2014 "),Ate=n(cYe,"A",{href:!0});var oda=s(Ate);$Wr=r(oda,"TFLongformerForMaskedLM"),oda.forEach(t),kWr=r(cYe," (Longformer model)"),cYe.forEach(t),SWr=i(_e),Lw=n(_e,"LI",{});var mYe=s(Lw);DLe=n(mYe,"STRONG",{});var rda=s(DLe);RWr=r(rda,"mobilebert"),rda.forEach(t),PWr=r(mYe," \u2014 "),Lte=n(mYe,"A",{href:!0});var tda=s(Lte);BWr=r(tda,"TFMobileBertForMaskedLM"),tda.forEach(t),IWr=r(mYe," (MobileBERT model)"),mYe.forEach(t),NWr=i(_e),yw=n(_e,"LI",{});var fYe=s(yw);GLe=n(fYe,"STRONG",{});var ada=s(GLe);qWr=r(ada,"mpnet"),ada.forEach(t),jWr=r(fYe," \u2014 "),yte=n(fYe,"A",{href:!0});var nda=s(yte);DWr=r(nda,"TFMPNetForMaskedLM"),nda.forEach(t),GWr=r(fYe," (MPNet model)"),fYe.forEach(t),OWr=i(_e),xw=n(_e,"LI",{});var gYe=s(xw);OLe=n(gYe,"STRONG",{});var sda=s(OLe);VWr=r(sda,"rembert"),sda.forEach(t),XWr=r(gYe," \u2014 "),xte=n(gYe,"A",{href:!0});var lda=s(xte);zWr=r(lda,"TFRemBertForMaskedLM"),lda.forEach(t),QWr=r(gYe," (RemBERT model)"),gYe.forEach(t),WWr=i(_e),$w=n(_e,"LI",{});var hYe=s($w);VLe=n(hYe,"STRONG",{});var ida=s(VLe);UWr=r(ida,"roberta"),ida.forEach(t),HWr=r(hYe," \u2014 "),$te=n(hYe,"A",{href:!0});var dda=s($te);JWr=r(dda,"TFRobertaForMaskedLM"),dda.forEach(t),YWr=r(hYe," (RoBERTa model)"),hYe.forEach(t),ZWr=i(_e),kw=n(_e,"LI",{});var uYe=s(kw);XLe=n(uYe,"STRONG",{});var cda=s(XLe);KWr=r(cda,"roformer"),cda.forEach(t),eUr=r(uYe," \u2014 "),kte=n(uYe,"A",{href:!0});var mda=s(kte);oUr=r(mda,"TFRoFormerForMaskedLM"),mda.forEach(t),rUr=r(uYe," (RoFormer model)"),uYe.forEach(t),tUr=i(_e),Sw=n(_e,"LI",{});var pYe=s(Sw);zLe=n(pYe,"STRONG",{});var fda=s(zLe);aUr=r(fda,"tapas"),fda.forEach(t),nUr=r(pYe," \u2014 "),Ste=n(pYe,"A",{href:!0});var gda=s(Ste);sUr=r(gda,"TFTapasForMaskedLM"),gda.forEach(t),lUr=r(pYe," (TAPAS model)"),pYe.forEach(t),iUr=i(_e),Rw=n(_e,"LI",{});var _Ye=s(Rw);QLe=n(_Ye,"STRONG",{});var hda=s(QLe);dUr=r(hda,"xlm"),hda.forEach(t),cUr=r(_Ye," \u2014 "),Rte=n(_Ye,"A",{href:!0});var uda=s(Rte);mUr=r(uda,"TFXLMWithLMHeadModel"),uda.forEach(t),fUr=r(_Ye," (XLM model)"),_Ye.forEach(t),gUr=i(_e),Pw=n(_e,"LI",{});var bYe=s(Pw);WLe=n(bYe,"STRONG",{});var pda=s(WLe);hUr=r(pda,"xlm-roberta"),pda.forEach(t),uUr=r(bYe," \u2014 "),Pte=n(bYe,"A",{href:!0});var _da=s(Pte);pUr=r(_da,"TFXLMRobertaForMaskedLM"),_da.forEach(t),_Ur=r(bYe," (XLM-RoBERTa model)"),bYe.forEach(t),_e.forEach(t),bUr=i(bi),T(Bw.$$.fragment,bi),bi.forEach(t),_i.forEach(t),Gro=i(m),_m=n(m,"H2",{class:!0});var tno=s(_m);Iw=n(tno,"A",{id:!0,class:!0,href:!0});var bda=s(Iw);ULe=n(bda,"SPAN",{});var vda=s(ULe);T(tR.$$.fragment,vda),vda.forEach(t),bda.forEach(t),vUr=i(tno),HLe=n(tno,"SPAN",{});var Fda=s(HLe);FUr=r(Fda,"TFAutoModelForSeq2SeqLM"),Fda.forEach(t),tno.forEach(t),Oro=i(m),hr=n(m,"DIV",{class:!0});var vi=s(hr);T(aR.$$.fragment,vi),TUr=i(vi),bm=n(vi,"P",{});var sce=s(bm);MUr=r(sce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Bte=n(sce,"A",{href:!0});var Tda=s(Bte);EUr=r(Tda,"from_pretrained()"),Tda.forEach(t),CUr=r(sce," class method or the "),Ite=n(sce,"A",{href:!0});var Mda=s(Ite);wUr=r(Mda,"from_config()"),Mda.forEach(t),AUr=r(sce,` class
method.`),sce.forEach(t),LUr=i(vi),nR=n(vi,"P",{});var ano=s(nR);yUr=r(ano,"This class cannot be instantiated directly using "),JLe=n(ano,"CODE",{});var Eda=s(JLe);xUr=r(Eda,"__init__()"),Eda.forEach(t),$Ur=r(ano," (throws an error)."),ano.forEach(t),kUr=i(vi),Kt=n(vi,"DIV",{class:!0});var P9=s(Kt);T(sR.$$.fragment,P9),SUr=i(P9),YLe=n(P9,"P",{});var Cda=s(YLe);RUr=r(Cda,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cda.forEach(t),PUr=i(P9),vm=n(P9,"P",{});var lce=s(vm);BUr=r(lce,`Note:
Loading a model from its configuration file does `),ZLe=n(lce,"STRONG",{});var wda=s(ZLe);IUr=r(wda,"not"),wda.forEach(t),NUr=r(lce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nte=n(lce,"A",{href:!0});var Ada=s(Nte);qUr=r(Ada,"from_pretrained()"),Ada.forEach(t),jUr=r(lce," to load the model weights."),lce.forEach(t),DUr=i(P9),T(Nw.$$.fragment,P9),P9.forEach(t),GUr=i(vi),Xr=n(vi,"DIV",{class:!0});var Fi=s(Xr);T(lR.$$.fragment,Fi),OUr=i(Fi),KLe=n(Fi,"P",{});var Lda=s(KLe);VUr=r(Lda,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lda.forEach(t),XUr=i(Fi),In=n(Fi,"P",{});var B9=s(In);zUr=r(B9,"The model class to instantiate is selected based on the "),e8e=n(B9,"CODE",{});var yda=s(e8e);QUr=r(yda,"model_type"),yda.forEach(t),WUr=r(B9,` property of the config object (either
passed as an argument or loaded from `),o8e=n(B9,"CODE",{});var xda=s(o8e);UUr=r(xda,"pretrained_model_name_or_path"),xda.forEach(t),HUr=r(B9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=n(B9,"CODE",{});var $da=s(r8e);JUr=r($da,"pretrained_model_name_or_path"),$da.forEach(t),YUr=r(B9,":"),B9.forEach(t),ZUr=i(Fi),ye=n(Fi,"UL",{});var Ne=s(ye);qw=n(Ne,"LI",{});var vYe=s(qw);t8e=n(vYe,"STRONG",{});var kda=s(t8e);KUr=r(kda,"bart"),kda.forEach(t),eHr=r(vYe," \u2014 "),qte=n(vYe,"A",{href:!0});var Sda=s(qte);oHr=r(Sda,"TFBartForConditionalGeneration"),Sda.forEach(t),rHr=r(vYe," (BART model)"),vYe.forEach(t),tHr=i(Ne),jw=n(Ne,"LI",{});var FYe=s(jw);a8e=n(FYe,"STRONG",{});var Rda=s(a8e);aHr=r(Rda,"blenderbot"),Rda.forEach(t),nHr=r(FYe," \u2014 "),jte=n(FYe,"A",{href:!0});var Pda=s(jte);sHr=r(Pda,"TFBlenderbotForConditionalGeneration"),Pda.forEach(t),lHr=r(FYe," (Blenderbot model)"),FYe.forEach(t),iHr=i(Ne),Dw=n(Ne,"LI",{});var TYe=s(Dw);n8e=n(TYe,"STRONG",{});var Bda=s(n8e);dHr=r(Bda,"blenderbot-small"),Bda.forEach(t),cHr=r(TYe," \u2014 "),Dte=n(TYe,"A",{href:!0});var Ida=s(Dte);mHr=r(Ida,"TFBlenderbotSmallForConditionalGeneration"),Ida.forEach(t),fHr=r(TYe," (BlenderbotSmall model)"),TYe.forEach(t),gHr=i(Ne),Gw=n(Ne,"LI",{});var MYe=s(Gw);s8e=n(MYe,"STRONG",{});var Nda=s(s8e);hHr=r(Nda,"encoder-decoder"),Nda.forEach(t),uHr=r(MYe," \u2014 "),Gte=n(MYe,"A",{href:!0});var qda=s(Gte);pHr=r(qda,"TFEncoderDecoderModel"),qda.forEach(t),_Hr=r(MYe," (Encoder decoder model)"),MYe.forEach(t),bHr=i(Ne),Ow=n(Ne,"LI",{});var EYe=s(Ow);l8e=n(EYe,"STRONG",{});var jda=s(l8e);vHr=r(jda,"led"),jda.forEach(t),FHr=r(EYe," \u2014 "),Ote=n(EYe,"A",{href:!0});var Dda=s(Ote);THr=r(Dda,"TFLEDForConditionalGeneration"),Dda.forEach(t),MHr=r(EYe," (LED model)"),EYe.forEach(t),EHr=i(Ne),Vw=n(Ne,"LI",{});var CYe=s(Vw);i8e=n(CYe,"STRONG",{});var Gda=s(i8e);CHr=r(Gda,"marian"),Gda.forEach(t),wHr=r(CYe," \u2014 "),Vte=n(CYe,"A",{href:!0});var Oda=s(Vte);AHr=r(Oda,"TFMarianMTModel"),Oda.forEach(t),LHr=r(CYe," (Marian model)"),CYe.forEach(t),yHr=i(Ne),Xw=n(Ne,"LI",{});var wYe=s(Xw);d8e=n(wYe,"STRONG",{});var Vda=s(d8e);xHr=r(Vda,"mbart"),Vda.forEach(t),$Hr=r(wYe," \u2014 "),Xte=n(wYe,"A",{href:!0});var Xda=s(Xte);kHr=r(Xda,"TFMBartForConditionalGeneration"),Xda.forEach(t),SHr=r(wYe," (mBART model)"),wYe.forEach(t),RHr=i(Ne),zw=n(Ne,"LI",{});var AYe=s(zw);c8e=n(AYe,"STRONG",{});var zda=s(c8e);PHr=r(zda,"mt5"),zda.forEach(t),BHr=r(AYe," \u2014 "),zte=n(AYe,"A",{href:!0});var Qda=s(zte);IHr=r(Qda,"TFMT5ForConditionalGeneration"),Qda.forEach(t),NHr=r(AYe," (MT5 model)"),AYe.forEach(t),qHr=i(Ne),Qw=n(Ne,"LI",{});var LYe=s(Qw);m8e=n(LYe,"STRONG",{});var Wda=s(m8e);jHr=r(Wda,"pegasus"),Wda.forEach(t),DHr=r(LYe," \u2014 "),Qte=n(LYe,"A",{href:!0});var Uda=s(Qte);GHr=r(Uda,"TFPegasusForConditionalGeneration"),Uda.forEach(t),OHr=r(LYe," (Pegasus model)"),LYe.forEach(t),VHr=i(Ne),Ww=n(Ne,"LI",{});var yYe=s(Ww);f8e=n(yYe,"STRONG",{});var Hda=s(f8e);XHr=r(Hda,"t5"),Hda.forEach(t),zHr=r(yYe," \u2014 "),Wte=n(yYe,"A",{href:!0});var Jda=s(Wte);QHr=r(Jda,"TFT5ForConditionalGeneration"),Jda.forEach(t),WHr=r(yYe," (T5 model)"),yYe.forEach(t),Ne.forEach(t),UHr=i(Fi),T(Uw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),Vro=i(m),Fm=n(m,"H2",{class:!0});var nno=s(Fm);Hw=n(nno,"A",{id:!0,class:!0,href:!0});var Yda=s(Hw);g8e=n(Yda,"SPAN",{});var Zda=s(g8e);T(iR.$$.fragment,Zda),Zda.forEach(t),Yda.forEach(t),HHr=i(nno),h8e=n(nno,"SPAN",{});var Kda=s(h8e);JHr=r(Kda,"TFAutoModelForSequenceClassification"),Kda.forEach(t),nno.forEach(t),Xro=i(m),ur=n(m,"DIV",{class:!0});var Ti=s(ur);T(dR.$$.fragment,Ti),YHr=i(Ti),Tm=n(Ti,"P",{});var ice=s(Tm);ZHr=r(ice,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ute=n(ice,"A",{href:!0});var eca=s(Ute);KHr=r(eca,"from_pretrained()"),eca.forEach(t),eJr=r(ice," class method or the "),Hte=n(ice,"A",{href:!0});var oca=s(Hte);oJr=r(oca,"from_config()"),oca.forEach(t),rJr=r(ice,` class
method.`),ice.forEach(t),tJr=i(Ti),cR=n(Ti,"P",{});var sno=s(cR);aJr=r(sno,"This class cannot be instantiated directly using "),u8e=n(sno,"CODE",{});var rca=s(u8e);nJr=r(rca,"__init__()"),rca.forEach(t),sJr=r(sno," (throws an error)."),sno.forEach(t),lJr=i(Ti),ea=n(Ti,"DIV",{class:!0});var I9=s(ea);T(mR.$$.fragment,I9),iJr=i(I9),p8e=n(I9,"P",{});var tca=s(p8e);dJr=r(tca,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tca.forEach(t),cJr=i(I9),Mm=n(I9,"P",{});var dce=s(Mm);mJr=r(dce,`Note:
Loading a model from its configuration file does `),_8e=n(dce,"STRONG",{});var aca=s(_8e);fJr=r(aca,"not"),aca.forEach(t),gJr=r(dce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=n(dce,"A",{href:!0});var nca=s(Jte);hJr=r(nca,"from_pretrained()"),nca.forEach(t),uJr=r(dce," to load the model weights."),dce.forEach(t),pJr=i(I9),T(Jw.$$.fragment,I9),I9.forEach(t),_Jr=i(Ti),zr=n(Ti,"DIV",{class:!0});var Mi=s(zr);T(fR.$$.fragment,Mi),bJr=i(Mi),b8e=n(Mi,"P",{});var sca=s(b8e);vJr=r(sca,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sca.forEach(t),FJr=i(Mi),Nn=n(Mi,"P",{});var N9=s(Nn);TJr=r(N9,"The model class to instantiate is selected based on the "),v8e=n(N9,"CODE",{});var lca=s(v8e);MJr=r(lca,"model_type"),lca.forEach(t),EJr=r(N9,` property of the config object (either
passed as an argument or loaded from `),F8e=n(N9,"CODE",{});var ica=s(F8e);CJr=r(ica,"pretrained_model_name_or_path"),ica.forEach(t),wJr=r(N9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=n(N9,"CODE",{});var dca=s(T8e);AJr=r(dca,"pretrained_model_name_or_path"),dca.forEach(t),LJr=r(N9,":"),N9.forEach(t),yJr=i(Mi),re=n(Mi,"UL",{});var ae=s(re);Yw=n(ae,"LI",{});var xYe=s(Yw);M8e=n(xYe,"STRONG",{});var cca=s(M8e);xJr=r(cca,"albert"),cca.forEach(t),$Jr=r(xYe," \u2014 "),Yte=n(xYe,"A",{href:!0});var mca=s(Yte);kJr=r(mca,"TFAlbertForSequenceClassification"),mca.forEach(t),SJr=r(xYe," (ALBERT model)"),xYe.forEach(t),RJr=i(ae),Zw=n(ae,"LI",{});var $Ye=s(Zw);E8e=n($Ye,"STRONG",{});var fca=s(E8e);PJr=r(fca,"bert"),fca.forEach(t),BJr=r($Ye," \u2014 "),Zte=n($Ye,"A",{href:!0});var gca=s(Zte);IJr=r(gca,"TFBertForSequenceClassification"),gca.forEach(t),NJr=r($Ye," (BERT model)"),$Ye.forEach(t),qJr=i(ae),Kw=n(ae,"LI",{});var kYe=s(Kw);C8e=n(kYe,"STRONG",{});var hca=s(C8e);jJr=r(hca,"camembert"),hca.forEach(t),DJr=r(kYe," \u2014 "),Kte=n(kYe,"A",{href:!0});var uca=s(Kte);GJr=r(uca,"TFCamembertForSequenceClassification"),uca.forEach(t),OJr=r(kYe," (CamemBERT model)"),kYe.forEach(t),VJr=i(ae),eA=n(ae,"LI",{});var SYe=s(eA);w8e=n(SYe,"STRONG",{});var pca=s(w8e);XJr=r(pca,"convbert"),pca.forEach(t),zJr=r(SYe," \u2014 "),eae=n(SYe,"A",{href:!0});var _ca=s(eae);QJr=r(_ca,"TFConvBertForSequenceClassification"),_ca.forEach(t),WJr=r(SYe," (ConvBERT model)"),SYe.forEach(t),UJr=i(ae),oA=n(ae,"LI",{});var RYe=s(oA);A8e=n(RYe,"STRONG",{});var bca=s(A8e);HJr=r(bca,"ctrl"),bca.forEach(t),JJr=r(RYe," \u2014 "),oae=n(RYe,"A",{href:!0});var vca=s(oae);YJr=r(vca,"TFCTRLForSequenceClassification"),vca.forEach(t),ZJr=r(RYe," (CTRL model)"),RYe.forEach(t),KJr=i(ae),rA=n(ae,"LI",{});var PYe=s(rA);L8e=n(PYe,"STRONG",{});var Fca=s(L8e);eYr=r(Fca,"deberta"),Fca.forEach(t),oYr=r(PYe," \u2014 "),rae=n(PYe,"A",{href:!0});var Tca=s(rae);rYr=r(Tca,"TFDebertaForSequenceClassification"),Tca.forEach(t),tYr=r(PYe," (DeBERTa model)"),PYe.forEach(t),aYr=i(ae),tA=n(ae,"LI",{});var BYe=s(tA);y8e=n(BYe,"STRONG",{});var Mca=s(y8e);nYr=r(Mca,"deberta-v2"),Mca.forEach(t),sYr=r(BYe," \u2014 "),tae=n(BYe,"A",{href:!0});var Eca=s(tae);lYr=r(Eca,"TFDebertaV2ForSequenceClassification"),Eca.forEach(t),iYr=r(BYe," (DeBERTa-v2 model)"),BYe.forEach(t),dYr=i(ae),aA=n(ae,"LI",{});var IYe=s(aA);x8e=n(IYe,"STRONG",{});var Cca=s(x8e);cYr=r(Cca,"distilbert"),Cca.forEach(t),mYr=r(IYe," \u2014 "),aae=n(IYe,"A",{href:!0});var wca=s(aae);fYr=r(wca,"TFDistilBertForSequenceClassification"),wca.forEach(t),gYr=r(IYe," (DistilBERT model)"),IYe.forEach(t),hYr=i(ae),nA=n(ae,"LI",{});var NYe=s(nA);$8e=n(NYe,"STRONG",{});var Aca=s($8e);uYr=r(Aca,"electra"),Aca.forEach(t),pYr=r(NYe," \u2014 "),nae=n(NYe,"A",{href:!0});var Lca=s(nae);_Yr=r(Lca,"TFElectraForSequenceClassification"),Lca.forEach(t),bYr=r(NYe," (ELECTRA model)"),NYe.forEach(t),vYr=i(ae),sA=n(ae,"LI",{});var qYe=s(sA);k8e=n(qYe,"STRONG",{});var yca=s(k8e);FYr=r(yca,"flaubert"),yca.forEach(t),TYr=r(qYe," \u2014 "),sae=n(qYe,"A",{href:!0});var xca=s(sae);MYr=r(xca,"TFFlaubertForSequenceClassification"),xca.forEach(t),EYr=r(qYe," (FlauBERT model)"),qYe.forEach(t),CYr=i(ae),lA=n(ae,"LI",{});var jYe=s(lA);S8e=n(jYe,"STRONG",{});var $ca=s(S8e);wYr=r($ca,"funnel"),$ca.forEach(t),AYr=r(jYe," \u2014 "),lae=n(jYe,"A",{href:!0});var kca=s(lae);LYr=r(kca,"TFFunnelForSequenceClassification"),kca.forEach(t),yYr=r(jYe," (Funnel Transformer model)"),jYe.forEach(t),xYr=i(ae),iA=n(ae,"LI",{});var DYe=s(iA);R8e=n(DYe,"STRONG",{});var Sca=s(R8e);$Yr=r(Sca,"gpt2"),Sca.forEach(t),kYr=r(DYe," \u2014 "),iae=n(DYe,"A",{href:!0});var Rca=s(iae);SYr=r(Rca,"TFGPT2ForSequenceClassification"),Rca.forEach(t),RYr=r(DYe," (OpenAI GPT-2 model)"),DYe.forEach(t),PYr=i(ae),dA=n(ae,"LI",{});var GYe=s(dA);P8e=n(GYe,"STRONG",{});var Pca=s(P8e);BYr=r(Pca,"gptj"),Pca.forEach(t),IYr=r(GYe," \u2014 "),dae=n(GYe,"A",{href:!0});var Bca=s(dae);NYr=r(Bca,"TFGPTJForSequenceClassification"),Bca.forEach(t),qYr=r(GYe," (GPT-J model)"),GYe.forEach(t),jYr=i(ae),cA=n(ae,"LI",{});var OYe=s(cA);B8e=n(OYe,"STRONG",{});var Ica=s(B8e);DYr=r(Ica,"layoutlm"),Ica.forEach(t),GYr=r(OYe," \u2014 "),cae=n(OYe,"A",{href:!0});var Nca=s(cae);OYr=r(Nca,"TFLayoutLMForSequenceClassification"),Nca.forEach(t),VYr=r(OYe," (LayoutLM model)"),OYe.forEach(t),XYr=i(ae),mA=n(ae,"LI",{});var VYe=s(mA);I8e=n(VYe,"STRONG",{});var qca=s(I8e);zYr=r(qca,"layoutlmv3"),qca.forEach(t),QYr=r(VYe," \u2014 "),mae=n(VYe,"A",{href:!0});var jca=s(mae);WYr=r(jca,"TFLayoutLMv3ForSequenceClassification"),jca.forEach(t),UYr=r(VYe," (LayoutLMv3 model)"),VYe.forEach(t),HYr=i(ae),fA=n(ae,"LI",{});var XYe=s(fA);N8e=n(XYe,"STRONG",{});var Dca=s(N8e);JYr=r(Dca,"longformer"),Dca.forEach(t),YYr=r(XYe," \u2014 "),fae=n(XYe,"A",{href:!0});var Gca=s(fae);ZYr=r(Gca,"TFLongformerForSequenceClassification"),Gca.forEach(t),KYr=r(XYe," (Longformer model)"),XYe.forEach(t),eZr=i(ae),gA=n(ae,"LI",{});var zYe=s(gA);q8e=n(zYe,"STRONG",{});var Oca=s(q8e);oZr=r(Oca,"mobilebert"),Oca.forEach(t),rZr=r(zYe," \u2014 "),gae=n(zYe,"A",{href:!0});var Vca=s(gae);tZr=r(Vca,"TFMobileBertForSequenceClassification"),Vca.forEach(t),aZr=r(zYe," (MobileBERT model)"),zYe.forEach(t),nZr=i(ae),hA=n(ae,"LI",{});var QYe=s(hA);j8e=n(QYe,"STRONG",{});var Xca=s(j8e);sZr=r(Xca,"mpnet"),Xca.forEach(t),lZr=r(QYe," \u2014 "),hae=n(QYe,"A",{href:!0});var zca=s(hae);iZr=r(zca,"TFMPNetForSequenceClassification"),zca.forEach(t),dZr=r(QYe," (MPNet model)"),QYe.forEach(t),cZr=i(ae),uA=n(ae,"LI",{});var WYe=s(uA);D8e=n(WYe,"STRONG",{});var Qca=s(D8e);mZr=r(Qca,"openai-gpt"),Qca.forEach(t),fZr=r(WYe," \u2014 "),uae=n(WYe,"A",{href:!0});var Wca=s(uae);gZr=r(Wca,"TFOpenAIGPTForSequenceClassification"),Wca.forEach(t),hZr=r(WYe," (OpenAI GPT model)"),WYe.forEach(t),uZr=i(ae),pA=n(ae,"LI",{});var UYe=s(pA);G8e=n(UYe,"STRONG",{});var Uca=s(G8e);pZr=r(Uca,"rembert"),Uca.forEach(t),_Zr=r(UYe," \u2014 "),pae=n(UYe,"A",{href:!0});var Hca=s(pae);bZr=r(Hca,"TFRemBertForSequenceClassification"),Hca.forEach(t),vZr=r(UYe," (RemBERT model)"),UYe.forEach(t),FZr=i(ae),_A=n(ae,"LI",{});var HYe=s(_A);O8e=n(HYe,"STRONG",{});var Jca=s(O8e);TZr=r(Jca,"roberta"),Jca.forEach(t),MZr=r(HYe," \u2014 "),_ae=n(HYe,"A",{href:!0});var Yca=s(_ae);EZr=r(Yca,"TFRobertaForSequenceClassification"),Yca.forEach(t),CZr=r(HYe," (RoBERTa model)"),HYe.forEach(t),wZr=i(ae),bA=n(ae,"LI",{});var JYe=s(bA);V8e=n(JYe,"STRONG",{});var Zca=s(V8e);AZr=r(Zca,"roformer"),Zca.forEach(t),LZr=r(JYe," \u2014 "),bae=n(JYe,"A",{href:!0});var Kca=s(bae);yZr=r(Kca,"TFRoFormerForSequenceClassification"),Kca.forEach(t),xZr=r(JYe," (RoFormer model)"),JYe.forEach(t),$Zr=i(ae),vA=n(ae,"LI",{});var YYe=s(vA);X8e=n(YYe,"STRONG",{});var ema=s(X8e);kZr=r(ema,"tapas"),ema.forEach(t),SZr=r(YYe," \u2014 "),vae=n(YYe,"A",{href:!0});var oma=s(vae);RZr=r(oma,"TFTapasForSequenceClassification"),oma.forEach(t),PZr=r(YYe," (TAPAS model)"),YYe.forEach(t),BZr=i(ae),FA=n(ae,"LI",{});var ZYe=s(FA);z8e=n(ZYe,"STRONG",{});var rma=s(z8e);IZr=r(rma,"transfo-xl"),rma.forEach(t),NZr=r(ZYe," \u2014 "),Fae=n(ZYe,"A",{href:!0});var tma=s(Fae);qZr=r(tma,"TFTransfoXLForSequenceClassification"),tma.forEach(t),jZr=r(ZYe," (Transformer-XL model)"),ZYe.forEach(t),DZr=i(ae),TA=n(ae,"LI",{});var KYe=s(TA);Q8e=n(KYe,"STRONG",{});var ama=s(Q8e);GZr=r(ama,"xlm"),ama.forEach(t),OZr=r(KYe," \u2014 "),Tae=n(KYe,"A",{href:!0});var nma=s(Tae);VZr=r(nma,"TFXLMForSequenceClassification"),nma.forEach(t),XZr=r(KYe," (XLM model)"),KYe.forEach(t),zZr=i(ae),MA=n(ae,"LI",{});var eZe=s(MA);W8e=n(eZe,"STRONG",{});var sma=s(W8e);QZr=r(sma,"xlm-roberta"),sma.forEach(t),WZr=r(eZe," \u2014 "),Mae=n(eZe,"A",{href:!0});var lma=s(Mae);UZr=r(lma,"TFXLMRobertaForSequenceClassification"),lma.forEach(t),HZr=r(eZe," (XLM-RoBERTa model)"),eZe.forEach(t),JZr=i(ae),EA=n(ae,"LI",{});var oZe=s(EA);U8e=n(oZe,"STRONG",{});var ima=s(U8e);YZr=r(ima,"xlnet"),ima.forEach(t),ZZr=r(oZe," \u2014 "),Eae=n(oZe,"A",{href:!0});var dma=s(Eae);KZr=r(dma,"TFXLNetForSequenceClassification"),dma.forEach(t),eKr=r(oZe," (XLNet model)"),oZe.forEach(t),ae.forEach(t),oKr=i(Mi),T(CA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),zro=i(m),Em=n(m,"H2",{class:!0});var lno=s(Em);wA=n(lno,"A",{id:!0,class:!0,href:!0});var cma=s(wA);H8e=n(cma,"SPAN",{});var mma=s(H8e);T(gR.$$.fragment,mma),mma.forEach(t),cma.forEach(t),rKr=i(lno),J8e=n(lno,"SPAN",{});var fma=s(J8e);tKr=r(fma,"TFAutoModelForMultipleChoice"),fma.forEach(t),lno.forEach(t),Qro=i(m),pr=n(m,"DIV",{class:!0});var Ei=s(pr);T(hR.$$.fragment,Ei),aKr=i(Ei),Cm=n(Ei,"P",{});var cce=s(Cm);nKr=r(cce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cae=n(cce,"A",{href:!0});var gma=s(Cae);sKr=r(gma,"from_pretrained()"),gma.forEach(t),lKr=r(cce," class method or the "),wae=n(cce,"A",{href:!0});var hma=s(wae);iKr=r(hma,"from_config()"),hma.forEach(t),dKr=r(cce,` class
method.`),cce.forEach(t),cKr=i(Ei),uR=n(Ei,"P",{});var ino=s(uR);mKr=r(ino,"This class cannot be instantiated directly using "),Y8e=n(ino,"CODE",{});var uma=s(Y8e);fKr=r(uma,"__init__()"),uma.forEach(t),gKr=r(ino," (throws an error)."),ino.forEach(t),hKr=i(Ei),oa=n(Ei,"DIV",{class:!0});var q9=s(oa);T(pR.$$.fragment,q9),uKr=i(q9),Z8e=n(q9,"P",{});var pma=s(Z8e);pKr=r(pma,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pma.forEach(t),_Kr=i(q9),wm=n(q9,"P",{});var mce=s(wm);bKr=r(mce,`Note:
Loading a model from its configuration file does `),K8e=n(mce,"STRONG",{});var _ma=s(K8e);vKr=r(_ma,"not"),_ma.forEach(t),FKr=r(mce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aae=n(mce,"A",{href:!0});var bma=s(Aae);TKr=r(bma,"from_pretrained()"),bma.forEach(t),MKr=r(mce," to load the model weights."),mce.forEach(t),EKr=i(q9),T(AA.$$.fragment,q9),q9.forEach(t),CKr=i(Ei),Qr=n(Ei,"DIV",{class:!0});var Ci=s(Qr);T(_R.$$.fragment,Ci),wKr=i(Ci),eye=n(Ci,"P",{});var vma=s(eye);AKr=r(vma,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vma.forEach(t),LKr=i(Ci),qn=n(Ci,"P",{});var j9=s(qn);yKr=r(j9,"The model class to instantiate is selected based on the "),oye=n(j9,"CODE",{});var Fma=s(oye);xKr=r(Fma,"model_type"),Fma.forEach(t),$Kr=r(j9,` property of the config object (either
passed as an argument or loaded from `),rye=n(j9,"CODE",{});var Tma=s(rye);kKr=r(Tma,"pretrained_model_name_or_path"),Tma.forEach(t),SKr=r(j9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tye=n(j9,"CODE",{});var Mma=s(tye);RKr=r(Mma,"pretrained_model_name_or_path"),Mma.forEach(t),PKr=r(j9,":"),j9.forEach(t),BKr=i(Ci),ve=n(Ci,"UL",{});var Te=s(ve);LA=n(Te,"LI",{});var rZe=s(LA);aye=n(rZe,"STRONG",{});var Ema=s(aye);IKr=r(Ema,"albert"),Ema.forEach(t),NKr=r(rZe," \u2014 "),Lae=n(rZe,"A",{href:!0});var Cma=s(Lae);qKr=r(Cma,"TFAlbertForMultipleChoice"),Cma.forEach(t),jKr=r(rZe," (ALBERT model)"),rZe.forEach(t),DKr=i(Te),yA=n(Te,"LI",{});var tZe=s(yA);nye=n(tZe,"STRONG",{});var wma=s(nye);GKr=r(wma,"bert"),wma.forEach(t),OKr=r(tZe," \u2014 "),yae=n(tZe,"A",{href:!0});var Ama=s(yae);VKr=r(Ama,"TFBertForMultipleChoice"),Ama.forEach(t),XKr=r(tZe," (BERT model)"),tZe.forEach(t),zKr=i(Te),xA=n(Te,"LI",{});var aZe=s(xA);sye=n(aZe,"STRONG",{});var Lma=s(sye);QKr=r(Lma,"camembert"),Lma.forEach(t),WKr=r(aZe," \u2014 "),xae=n(aZe,"A",{href:!0});var yma=s(xae);UKr=r(yma,"TFCamembertForMultipleChoice"),yma.forEach(t),HKr=r(aZe," (CamemBERT model)"),aZe.forEach(t),JKr=i(Te),$A=n(Te,"LI",{});var nZe=s($A);lye=n(nZe,"STRONG",{});var xma=s(lye);YKr=r(xma,"convbert"),xma.forEach(t),ZKr=r(nZe," \u2014 "),$ae=n(nZe,"A",{href:!0});var $ma=s($ae);KKr=r($ma,"TFConvBertForMultipleChoice"),$ma.forEach(t),eet=r(nZe," (ConvBERT model)"),nZe.forEach(t),oet=i(Te),kA=n(Te,"LI",{});var sZe=s(kA);iye=n(sZe,"STRONG",{});var kma=s(iye);ret=r(kma,"distilbert"),kma.forEach(t),tet=r(sZe," \u2014 "),kae=n(sZe,"A",{href:!0});var Sma=s(kae);aet=r(Sma,"TFDistilBertForMultipleChoice"),Sma.forEach(t),net=r(sZe," (DistilBERT model)"),sZe.forEach(t),set=i(Te),SA=n(Te,"LI",{});var lZe=s(SA);dye=n(lZe,"STRONG",{});var Rma=s(dye);iet=r(Rma,"electra"),Rma.forEach(t),det=r(lZe," \u2014 "),Sae=n(lZe,"A",{href:!0});var Pma=s(Sae);cet=r(Pma,"TFElectraForMultipleChoice"),Pma.forEach(t),met=r(lZe," (ELECTRA model)"),lZe.forEach(t),fet=i(Te),RA=n(Te,"LI",{});var iZe=s(RA);cye=n(iZe,"STRONG",{});var Bma=s(cye);get=r(Bma,"flaubert"),Bma.forEach(t),het=r(iZe," \u2014 "),Rae=n(iZe,"A",{href:!0});var Ima=s(Rae);uet=r(Ima,"TFFlaubertForMultipleChoice"),Ima.forEach(t),pet=r(iZe," (FlauBERT model)"),iZe.forEach(t),_et=i(Te),PA=n(Te,"LI",{});var dZe=s(PA);mye=n(dZe,"STRONG",{});var Nma=s(mye);bet=r(Nma,"funnel"),Nma.forEach(t),vet=r(dZe," \u2014 "),Pae=n(dZe,"A",{href:!0});var qma=s(Pae);Fet=r(qma,"TFFunnelForMultipleChoice"),qma.forEach(t),Tet=r(dZe," (Funnel Transformer model)"),dZe.forEach(t),Met=i(Te),BA=n(Te,"LI",{});var cZe=s(BA);fye=n(cZe,"STRONG",{});var jma=s(fye);Eet=r(jma,"longformer"),jma.forEach(t),Cet=r(cZe," \u2014 "),Bae=n(cZe,"A",{href:!0});var Dma=s(Bae);wet=r(Dma,"TFLongformerForMultipleChoice"),Dma.forEach(t),Aet=r(cZe," (Longformer model)"),cZe.forEach(t),Let=i(Te),IA=n(Te,"LI",{});var mZe=s(IA);gye=n(mZe,"STRONG",{});var Gma=s(gye);yet=r(Gma,"mobilebert"),Gma.forEach(t),xet=r(mZe," \u2014 "),Iae=n(mZe,"A",{href:!0});var Oma=s(Iae);$et=r(Oma,"TFMobileBertForMultipleChoice"),Oma.forEach(t),ket=r(mZe," (MobileBERT model)"),mZe.forEach(t),Set=i(Te),NA=n(Te,"LI",{});var fZe=s(NA);hye=n(fZe,"STRONG",{});var Vma=s(hye);Ret=r(Vma,"mpnet"),Vma.forEach(t),Pet=r(fZe," \u2014 "),Nae=n(fZe,"A",{href:!0});var Xma=s(Nae);Bet=r(Xma,"TFMPNetForMultipleChoice"),Xma.forEach(t),Iet=r(fZe," (MPNet model)"),fZe.forEach(t),Net=i(Te),qA=n(Te,"LI",{});var gZe=s(qA);uye=n(gZe,"STRONG",{});var zma=s(uye);qet=r(zma,"rembert"),zma.forEach(t),jet=r(gZe," \u2014 "),qae=n(gZe,"A",{href:!0});var Qma=s(qae);Det=r(Qma,"TFRemBertForMultipleChoice"),Qma.forEach(t),Get=r(gZe," (RemBERT model)"),gZe.forEach(t),Oet=i(Te),jA=n(Te,"LI",{});var hZe=s(jA);pye=n(hZe,"STRONG",{});var Wma=s(pye);Vet=r(Wma,"roberta"),Wma.forEach(t),Xet=r(hZe," \u2014 "),jae=n(hZe,"A",{href:!0});var Uma=s(jae);zet=r(Uma,"TFRobertaForMultipleChoice"),Uma.forEach(t),Qet=r(hZe," (RoBERTa model)"),hZe.forEach(t),Wet=i(Te),DA=n(Te,"LI",{});var uZe=s(DA);_ye=n(uZe,"STRONG",{});var Hma=s(_ye);Uet=r(Hma,"roformer"),Hma.forEach(t),Het=r(uZe," \u2014 "),Dae=n(uZe,"A",{href:!0});var Jma=s(Dae);Jet=r(Jma,"TFRoFormerForMultipleChoice"),Jma.forEach(t),Yet=r(uZe," (RoFormer model)"),uZe.forEach(t),Zet=i(Te),GA=n(Te,"LI",{});var pZe=s(GA);bye=n(pZe,"STRONG",{});var Yma=s(bye);Ket=r(Yma,"xlm"),Yma.forEach(t),eot=r(pZe," \u2014 "),Gae=n(pZe,"A",{href:!0});var Zma=s(Gae);oot=r(Zma,"TFXLMForMultipleChoice"),Zma.forEach(t),rot=r(pZe," (XLM model)"),pZe.forEach(t),tot=i(Te),OA=n(Te,"LI",{});var _Ze=s(OA);vye=n(_Ze,"STRONG",{});var Kma=s(vye);aot=r(Kma,"xlm-roberta"),Kma.forEach(t),not=r(_Ze," \u2014 "),Oae=n(_Ze,"A",{href:!0});var efa=s(Oae);sot=r(efa,"TFXLMRobertaForMultipleChoice"),efa.forEach(t),lot=r(_Ze," (XLM-RoBERTa model)"),_Ze.forEach(t),iot=i(Te),VA=n(Te,"LI",{});var bZe=s(VA);Fye=n(bZe,"STRONG",{});var ofa=s(Fye);dot=r(ofa,"xlnet"),ofa.forEach(t),cot=r(bZe," \u2014 "),Vae=n(bZe,"A",{href:!0});var rfa=s(Vae);mot=r(rfa,"TFXLNetForMultipleChoice"),rfa.forEach(t),fot=r(bZe," (XLNet model)"),bZe.forEach(t),Te.forEach(t),got=i(Ci),T(XA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),Wro=i(m),Am=n(m,"H2",{class:!0});var dno=s(Am);zA=n(dno,"A",{id:!0,class:!0,href:!0});var tfa=s(zA);Tye=n(tfa,"SPAN",{});var afa=s(Tye);T(bR.$$.fragment,afa),afa.forEach(t),tfa.forEach(t),hot=i(dno),Mye=n(dno,"SPAN",{});var nfa=s(Mye);uot=r(nfa,"TFAutoModelForNextSentencePrediction"),nfa.forEach(t),dno.forEach(t),Uro=i(m),_r=n(m,"DIV",{class:!0});var wi=s(_r);T(vR.$$.fragment,wi),pot=i(wi),Lm=n(wi,"P",{});var fce=s(Lm);_ot=r(fce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xae=n(fce,"A",{href:!0});var sfa=s(Xae);bot=r(sfa,"from_pretrained()"),sfa.forEach(t),vot=r(fce," class method or the "),zae=n(fce,"A",{href:!0});var lfa=s(zae);Fot=r(lfa,"from_config()"),lfa.forEach(t),Tot=r(fce,` class
method.`),fce.forEach(t),Mot=i(wi),FR=n(wi,"P",{});var cno=s(FR);Eot=r(cno,"This class cannot be instantiated directly using "),Eye=n(cno,"CODE",{});var ifa=s(Eye);Cot=r(ifa,"__init__()"),ifa.forEach(t),wot=r(cno," (throws an error)."),cno.forEach(t),Aot=i(wi),ra=n(wi,"DIV",{class:!0});var D9=s(ra);T(TR.$$.fragment,D9),Lot=i(D9),Cye=n(D9,"P",{});var dfa=s(Cye);yot=r(dfa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dfa.forEach(t),xot=i(D9),ym=n(D9,"P",{});var gce=s(ym);$ot=r(gce,`Note:
Loading a model from its configuration file does `),wye=n(gce,"STRONG",{});var cfa=s(wye);kot=r(cfa,"not"),cfa.forEach(t),Sot=r(gce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=n(gce,"A",{href:!0});var mfa=s(Qae);Rot=r(mfa,"from_pretrained()"),mfa.forEach(t),Pot=r(gce," to load the model weights."),gce.forEach(t),Bot=i(D9),T(QA.$$.fragment,D9),D9.forEach(t),Iot=i(wi),Wr=n(wi,"DIV",{class:!0});var Ai=s(Wr);T(MR.$$.fragment,Ai),Not=i(Ai),Aye=n(Ai,"P",{});var ffa=s(Aye);qot=r(ffa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ffa.forEach(t),jot=i(Ai),jn=n(Ai,"P",{});var G9=s(jn);Dot=r(G9,"The model class to instantiate is selected based on the "),Lye=n(G9,"CODE",{});var gfa=s(Lye);Got=r(gfa,"model_type"),gfa.forEach(t),Oot=r(G9,` property of the config object (either
passed as an argument or loaded from `),yye=n(G9,"CODE",{});var hfa=s(yye);Vot=r(hfa,"pretrained_model_name_or_path"),hfa.forEach(t),Xot=r(G9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=n(G9,"CODE",{});var ufa=s(xye);zot=r(ufa,"pretrained_model_name_or_path"),ufa.forEach(t),Qot=r(G9,":"),G9.forEach(t),Wot=i(Ai),ER=n(Ai,"UL",{});var mno=s(ER);WA=n(mno,"LI",{});var vZe=s(WA);$ye=n(vZe,"STRONG",{});var pfa=s($ye);Uot=r(pfa,"bert"),pfa.forEach(t),Hot=r(vZe," \u2014 "),Wae=n(vZe,"A",{href:!0});var _fa=s(Wae);Jot=r(_fa,"TFBertForNextSentencePrediction"),_fa.forEach(t),Yot=r(vZe," (BERT model)"),vZe.forEach(t),Zot=i(mno),UA=n(mno,"LI",{});var FZe=s(UA);kye=n(FZe,"STRONG",{});var bfa=s(kye);Kot=r(bfa,"mobilebert"),bfa.forEach(t),ert=r(FZe," \u2014 "),Uae=n(FZe,"A",{href:!0});var vfa=s(Uae);ort=r(vfa,"TFMobileBertForNextSentencePrediction"),vfa.forEach(t),rrt=r(FZe," (MobileBERT model)"),FZe.forEach(t),mno.forEach(t),trt=i(Ai),T(HA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),Hro=i(m),xm=n(m,"H2",{class:!0});var fno=s(xm);JA=n(fno,"A",{id:!0,class:!0,href:!0});var Ffa=s(JA);Sye=n(Ffa,"SPAN",{});var Tfa=s(Sye);T(CR.$$.fragment,Tfa),Tfa.forEach(t),Ffa.forEach(t),art=i(fno),Rye=n(fno,"SPAN",{});var Mfa=s(Rye);nrt=r(Mfa,"TFAutoModelForTableQuestionAnswering"),Mfa.forEach(t),fno.forEach(t),Jro=i(m),br=n(m,"DIV",{class:!0});var Li=s(br);T(wR.$$.fragment,Li),srt=i(Li),$m=n(Li,"P",{});var hce=s($m);lrt=r(hce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Hae=n(hce,"A",{href:!0});var Efa=s(Hae);irt=r(Efa,"from_pretrained()"),Efa.forEach(t),drt=r(hce," class method or the "),Jae=n(hce,"A",{href:!0});var Cfa=s(Jae);crt=r(Cfa,"from_config()"),Cfa.forEach(t),mrt=r(hce,` class
method.`),hce.forEach(t),frt=i(Li),AR=n(Li,"P",{});var gno=s(AR);grt=r(gno,"This class cannot be instantiated directly using "),Pye=n(gno,"CODE",{});var wfa=s(Pye);hrt=r(wfa,"__init__()"),wfa.forEach(t),urt=r(gno," (throws an error)."),gno.forEach(t),prt=i(Li),ta=n(Li,"DIV",{class:!0});var O9=s(ta);T(LR.$$.fragment,O9),_rt=i(O9),Bye=n(O9,"P",{});var Afa=s(Bye);brt=r(Afa,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Afa.forEach(t),vrt=i(O9),km=n(O9,"P",{});var uce=s(km);Frt=r(uce,`Note:
Loading a model from its configuration file does `),Iye=n(uce,"STRONG",{});var Lfa=s(Iye);Trt=r(Lfa,"not"),Lfa.forEach(t),Mrt=r(uce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yae=n(uce,"A",{href:!0});var yfa=s(Yae);Ert=r(yfa,"from_pretrained()"),yfa.forEach(t),Crt=r(uce," to load the model weights."),uce.forEach(t),wrt=i(O9),T(YA.$$.fragment,O9),O9.forEach(t),Art=i(Li),Ur=n(Li,"DIV",{class:!0});var yi=s(Ur);T(yR.$$.fragment,yi),Lrt=i(yi),Nye=n(yi,"P",{});var xfa=s(Nye);yrt=r(xfa,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xfa.forEach(t),xrt=i(yi),Dn=n(yi,"P",{});var V9=s(Dn);$rt=r(V9,"The model class to instantiate is selected based on the "),qye=n(V9,"CODE",{});var $fa=s(qye);krt=r($fa,"model_type"),$fa.forEach(t),Srt=r(V9,` property of the config object (either
passed as an argument or loaded from `),jye=n(V9,"CODE",{});var kfa=s(jye);Rrt=r(kfa,"pretrained_model_name_or_path"),kfa.forEach(t),Prt=r(V9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=n(V9,"CODE",{});var Sfa=s(Dye);Brt=r(Sfa,"pretrained_model_name_or_path"),Sfa.forEach(t),Irt=r(V9,":"),V9.forEach(t),Nrt=i(yi),Gye=n(yi,"UL",{});var Rfa=s(Gye);ZA=n(Rfa,"LI",{});var TZe=s(ZA);Oye=n(TZe,"STRONG",{});var Pfa=s(Oye);qrt=r(Pfa,"tapas"),Pfa.forEach(t),jrt=r(TZe," \u2014 "),Zae=n(TZe,"A",{href:!0});var Bfa=s(Zae);Drt=r(Bfa,"TFTapasForQuestionAnswering"),Bfa.forEach(t),Grt=r(TZe," (TAPAS model)"),TZe.forEach(t),Rfa.forEach(t),Ort=i(yi),T(KA.$$.fragment,yi),yi.forEach(t),Li.forEach(t),Yro=i(m),Sm=n(m,"H2",{class:!0});var hno=s(Sm);e6=n(hno,"A",{id:!0,class:!0,href:!0});var Ifa=s(e6);Vye=n(Ifa,"SPAN",{});var Nfa=s(Vye);T(xR.$$.fragment,Nfa),Nfa.forEach(t),Ifa.forEach(t),Vrt=i(hno),Xye=n(hno,"SPAN",{});var qfa=s(Xye);Xrt=r(qfa,"TFAutoModelForDocumentQuestionAnswering"),qfa.forEach(t),hno.forEach(t),Zro=i(m),vr=n(m,"DIV",{class:!0});var xi=s(vr);T($R.$$.fragment,xi),zrt=i(xi),Rm=n(xi,"P",{});var pce=s(Rm);Qrt=r(pce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Kae=n(pce,"A",{href:!0});var jfa=s(Kae);Wrt=r(jfa,"from_pretrained()"),jfa.forEach(t),Urt=r(pce," class method or the "),ene=n(pce,"A",{href:!0});var Dfa=s(ene);Hrt=r(Dfa,"from_config()"),Dfa.forEach(t),Jrt=r(pce,` class
method.`),pce.forEach(t),Yrt=i(xi),kR=n(xi,"P",{});var uno=s(kR);Zrt=r(uno,"This class cannot be instantiated directly using "),zye=n(uno,"CODE",{});var Gfa=s(zye);Krt=r(Gfa,"__init__()"),Gfa.forEach(t),ett=r(uno," (throws an error)."),uno.forEach(t),ott=i(xi),aa=n(xi,"DIV",{class:!0});var X9=s(aa);T(SR.$$.fragment,X9),rtt=i(X9),Qye=n(X9,"P",{});var Ofa=s(Qye);ttt=r(Ofa,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Ofa.forEach(t),att=i(X9),Pm=n(X9,"P",{});var _ce=s(Pm);ntt=r(_ce,`Note:
Loading a model from its configuration file does `),Wye=n(_ce,"STRONG",{});var Vfa=s(Wye);stt=r(Vfa,"not"),Vfa.forEach(t),ltt=r(_ce,` load the model weights. It only affects the
model\u2019s configuration. Use `),one=n(_ce,"A",{href:!0});var Xfa=s(one);itt=r(Xfa,"from_pretrained()"),Xfa.forEach(t),dtt=r(_ce," to load the model weights."),_ce.forEach(t),ctt=i(X9),T(o6.$$.fragment,X9),X9.forEach(t),mtt=i(xi),Hr=n(xi,"DIV",{class:!0});var $i=s(Hr);T(RR.$$.fragment,$i),ftt=i($i),Uye=n($i,"P",{});var zfa=s(Uye);gtt=r(zfa,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),zfa.forEach(t),htt=i($i),Gn=n($i,"P",{});var z9=s(Gn);utt=r(z9,"The model class to instantiate is selected based on the "),Hye=n(z9,"CODE",{});var Qfa=s(Hye);ptt=r(Qfa,"model_type"),Qfa.forEach(t),_tt=r(z9,` property of the config object (either
passed as an argument or loaded from `),Jye=n(z9,"CODE",{});var Wfa=s(Jye);btt=r(Wfa,"pretrained_model_name_or_path"),Wfa.forEach(t),vtt=r(z9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yye=n(z9,"CODE",{});var Ufa=s(Yye);Ftt=r(Ufa,"pretrained_model_name_or_path"),Ufa.forEach(t),Ttt=r(z9,":"),z9.forEach(t),Mtt=i($i),Zye=n($i,"UL",{});var Hfa=s(Zye);r6=n(Hfa,"LI",{});var MZe=s(r6);Kye=n(MZe,"STRONG",{});var Jfa=s(Kye);Ett=r(Jfa,"layoutlm"),Jfa.forEach(t),Ctt=r(MZe," \u2014 "),rne=n(MZe,"A",{href:!0});var Yfa=s(rne);wtt=r(Yfa,"TFLayoutLMForQuestionAnswering"),Yfa.forEach(t),Att=r(MZe," (LayoutLM model)"),MZe.forEach(t),Hfa.forEach(t),Ltt=i($i),T(t6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),Kro=i(m),Bm=n(m,"H2",{class:!0});var pno=s(Bm);a6=n(pno,"A",{id:!0,class:!0,href:!0});var Zfa=s(a6);e9e=n(Zfa,"SPAN",{});var Kfa=s(e9e);T(PR.$$.fragment,Kfa),Kfa.forEach(t),Zfa.forEach(t),ytt=i(pno),o9e=n(pno,"SPAN",{});var ega=s(o9e);xtt=r(ega,"TFAutoModelForTokenClassification"),ega.forEach(t),pno.forEach(t),eto=i(m),Fr=n(m,"DIV",{class:!0});var ki=s(Fr);T(BR.$$.fragment,ki),$tt=i(ki),Im=n(ki,"P",{});var bce=s(Im);ktt=r(bce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tne=n(bce,"A",{href:!0});var oga=s(tne);Stt=r(oga,"from_pretrained()"),oga.forEach(t),Rtt=r(bce," class method or the "),ane=n(bce,"A",{href:!0});var rga=s(ane);Ptt=r(rga,"from_config()"),rga.forEach(t),Btt=r(bce,` class
method.`),bce.forEach(t),Itt=i(ki),IR=n(ki,"P",{});var _no=s(IR);Ntt=r(_no,"This class cannot be instantiated directly using "),r9e=n(_no,"CODE",{});var tga=s(r9e);qtt=r(tga,"__init__()"),tga.forEach(t),jtt=r(_no," (throws an error)."),_no.forEach(t),Dtt=i(ki),na=n(ki,"DIV",{class:!0});var Q9=s(na);T(NR.$$.fragment,Q9),Gtt=i(Q9),t9e=n(Q9,"P",{});var aga=s(t9e);Ott=r(aga,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aga.forEach(t),Vtt=i(Q9),Nm=n(Q9,"P",{});var vce=s(Nm);Xtt=r(vce,`Note:
Loading a model from its configuration file does `),a9e=n(vce,"STRONG",{});var nga=s(a9e);ztt=r(nga,"not"),nga.forEach(t),Qtt=r(vce,` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=n(vce,"A",{href:!0});var sga=s(nne);Wtt=r(sga,"from_pretrained()"),sga.forEach(t),Utt=r(vce," to load the model weights."),vce.forEach(t),Htt=i(Q9),T(n6.$$.fragment,Q9),Q9.forEach(t),Jtt=i(ki),Jr=n(ki,"DIV",{class:!0});var Si=s(Jr);T(qR.$$.fragment,Si),Ytt=i(Si),n9e=n(Si,"P",{});var lga=s(n9e);Ztt=r(lga,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lga.forEach(t),Ktt=i(Si),On=n(Si,"P",{});var W9=s(On);eat=r(W9,"The model class to instantiate is selected based on the "),s9e=n(W9,"CODE",{});var iga=s(s9e);oat=r(iga,"model_type"),iga.forEach(t),rat=r(W9,` property of the config object (either
passed as an argument or loaded from `),l9e=n(W9,"CODE",{});var dga=s(l9e);tat=r(dga,"pretrained_model_name_or_path"),dga.forEach(t),aat=r(W9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=n(W9,"CODE",{});var cga=s(i9e);nat=r(cga,"pretrained_model_name_or_path"),cga.forEach(t),sat=r(W9,":"),W9.forEach(t),lat=i(Si),ce=n(Si,"UL",{});var he=s(ce);s6=n(he,"LI",{});var EZe=s(s6);d9e=n(EZe,"STRONG",{});var mga=s(d9e);iat=r(mga,"albert"),mga.forEach(t),dat=r(EZe," \u2014 "),sne=n(EZe,"A",{href:!0});var fga=s(sne);cat=r(fga,"TFAlbertForTokenClassification"),fga.forEach(t),mat=r(EZe," (ALBERT model)"),EZe.forEach(t),fat=i(he),l6=n(he,"LI",{});var CZe=s(l6);c9e=n(CZe,"STRONG",{});var gga=s(c9e);gat=r(gga,"bert"),gga.forEach(t),hat=r(CZe," \u2014 "),lne=n(CZe,"A",{href:!0});var hga=s(lne);uat=r(hga,"TFBertForTokenClassification"),hga.forEach(t),pat=r(CZe," (BERT model)"),CZe.forEach(t),_at=i(he),i6=n(he,"LI",{});var wZe=s(i6);m9e=n(wZe,"STRONG",{});var uga=s(m9e);bat=r(uga,"camembert"),uga.forEach(t),vat=r(wZe," \u2014 "),ine=n(wZe,"A",{href:!0});var pga=s(ine);Fat=r(pga,"TFCamembertForTokenClassification"),pga.forEach(t),Tat=r(wZe," (CamemBERT model)"),wZe.forEach(t),Mat=i(he),d6=n(he,"LI",{});var AZe=s(d6);f9e=n(AZe,"STRONG",{});var _ga=s(f9e);Eat=r(_ga,"convbert"),_ga.forEach(t),Cat=r(AZe," \u2014 "),dne=n(AZe,"A",{href:!0});var bga=s(dne);wat=r(bga,"TFConvBertForTokenClassification"),bga.forEach(t),Aat=r(AZe," (ConvBERT model)"),AZe.forEach(t),Lat=i(he),c6=n(he,"LI",{});var LZe=s(c6);g9e=n(LZe,"STRONG",{});var vga=s(g9e);yat=r(vga,"deberta"),vga.forEach(t),xat=r(LZe," \u2014 "),cne=n(LZe,"A",{href:!0});var Fga=s(cne);$at=r(Fga,"TFDebertaForTokenClassification"),Fga.forEach(t),kat=r(LZe," (DeBERTa model)"),LZe.forEach(t),Sat=i(he),m6=n(he,"LI",{});var yZe=s(m6);h9e=n(yZe,"STRONG",{});var Tga=s(h9e);Rat=r(Tga,"deberta-v2"),Tga.forEach(t),Pat=r(yZe," \u2014 "),mne=n(yZe,"A",{href:!0});var Mga=s(mne);Bat=r(Mga,"TFDebertaV2ForTokenClassification"),Mga.forEach(t),Iat=r(yZe," (DeBERTa-v2 model)"),yZe.forEach(t),Nat=i(he),f6=n(he,"LI",{});var xZe=s(f6);u9e=n(xZe,"STRONG",{});var Ega=s(u9e);qat=r(Ega,"distilbert"),Ega.forEach(t),jat=r(xZe," \u2014 "),fne=n(xZe,"A",{href:!0});var Cga=s(fne);Dat=r(Cga,"TFDistilBertForTokenClassification"),Cga.forEach(t),Gat=r(xZe," (DistilBERT model)"),xZe.forEach(t),Oat=i(he),g6=n(he,"LI",{});var $Ze=s(g6);p9e=n($Ze,"STRONG",{});var wga=s(p9e);Vat=r(wga,"electra"),wga.forEach(t),Xat=r($Ze," \u2014 "),gne=n($Ze,"A",{href:!0});var Aga=s(gne);zat=r(Aga,"TFElectraForTokenClassification"),Aga.forEach(t),Qat=r($Ze," (ELECTRA model)"),$Ze.forEach(t),Wat=i(he),h6=n(he,"LI",{});var kZe=s(h6);_9e=n(kZe,"STRONG",{});var Lga=s(_9e);Uat=r(Lga,"flaubert"),Lga.forEach(t),Hat=r(kZe," \u2014 "),hne=n(kZe,"A",{href:!0});var yga=s(hne);Jat=r(yga,"TFFlaubertForTokenClassification"),yga.forEach(t),Yat=r(kZe," (FlauBERT model)"),kZe.forEach(t),Zat=i(he),u6=n(he,"LI",{});var SZe=s(u6);b9e=n(SZe,"STRONG",{});var xga=s(b9e);Kat=r(xga,"funnel"),xga.forEach(t),ent=r(SZe," \u2014 "),une=n(SZe,"A",{href:!0});var $ga=s(une);ont=r($ga,"TFFunnelForTokenClassification"),$ga.forEach(t),rnt=r(SZe," (Funnel Transformer model)"),SZe.forEach(t),tnt=i(he),p6=n(he,"LI",{});var RZe=s(p6);v9e=n(RZe,"STRONG",{});var kga=s(v9e);ant=r(kga,"layoutlm"),kga.forEach(t),nnt=r(RZe," \u2014 "),pne=n(RZe,"A",{href:!0});var Sga=s(pne);snt=r(Sga,"TFLayoutLMForTokenClassification"),Sga.forEach(t),lnt=r(RZe," (LayoutLM model)"),RZe.forEach(t),int=i(he),_6=n(he,"LI",{});var PZe=s(_6);F9e=n(PZe,"STRONG",{});var Rga=s(F9e);dnt=r(Rga,"layoutlmv3"),Rga.forEach(t),cnt=r(PZe," \u2014 "),_ne=n(PZe,"A",{href:!0});var Pga=s(_ne);mnt=r(Pga,"TFLayoutLMv3ForTokenClassification"),Pga.forEach(t),fnt=r(PZe," (LayoutLMv3 model)"),PZe.forEach(t),gnt=i(he),b6=n(he,"LI",{});var BZe=s(b6);T9e=n(BZe,"STRONG",{});var Bga=s(T9e);hnt=r(Bga,"longformer"),Bga.forEach(t),unt=r(BZe," \u2014 "),bne=n(BZe,"A",{href:!0});var Iga=s(bne);pnt=r(Iga,"TFLongformerForTokenClassification"),Iga.forEach(t),_nt=r(BZe," (Longformer model)"),BZe.forEach(t),bnt=i(he),v6=n(he,"LI",{});var IZe=s(v6);M9e=n(IZe,"STRONG",{});var Nga=s(M9e);vnt=r(Nga,"mobilebert"),Nga.forEach(t),Fnt=r(IZe," \u2014 "),vne=n(IZe,"A",{href:!0});var qga=s(vne);Tnt=r(qga,"TFMobileBertForTokenClassification"),qga.forEach(t),Mnt=r(IZe," (MobileBERT model)"),IZe.forEach(t),Ent=i(he),F6=n(he,"LI",{});var NZe=s(F6);E9e=n(NZe,"STRONG",{});var jga=s(E9e);Cnt=r(jga,"mpnet"),jga.forEach(t),wnt=r(NZe," \u2014 "),Fne=n(NZe,"A",{href:!0});var Dga=s(Fne);Ant=r(Dga,"TFMPNetForTokenClassification"),Dga.forEach(t),Lnt=r(NZe," (MPNet model)"),NZe.forEach(t),ynt=i(he),T6=n(he,"LI",{});var qZe=s(T6);C9e=n(qZe,"STRONG",{});var Gga=s(C9e);xnt=r(Gga,"rembert"),Gga.forEach(t),$nt=r(qZe," \u2014 "),Tne=n(qZe,"A",{href:!0});var Oga=s(Tne);knt=r(Oga,"TFRemBertForTokenClassification"),Oga.forEach(t),Snt=r(qZe," (RemBERT model)"),qZe.forEach(t),Rnt=i(he),M6=n(he,"LI",{});var jZe=s(M6);w9e=n(jZe,"STRONG",{});var Vga=s(w9e);Pnt=r(Vga,"roberta"),Vga.forEach(t),Bnt=r(jZe," \u2014 "),Mne=n(jZe,"A",{href:!0});var Xga=s(Mne);Int=r(Xga,"TFRobertaForTokenClassification"),Xga.forEach(t),Nnt=r(jZe," (RoBERTa model)"),jZe.forEach(t),qnt=i(he),E6=n(he,"LI",{});var DZe=s(E6);A9e=n(DZe,"STRONG",{});var zga=s(A9e);jnt=r(zga,"roformer"),zga.forEach(t),Dnt=r(DZe," \u2014 "),Ene=n(DZe,"A",{href:!0});var Qga=s(Ene);Gnt=r(Qga,"TFRoFormerForTokenClassification"),Qga.forEach(t),Ont=r(DZe," (RoFormer model)"),DZe.forEach(t),Vnt=i(he),C6=n(he,"LI",{});var GZe=s(C6);L9e=n(GZe,"STRONG",{});var Wga=s(L9e);Xnt=r(Wga,"xlm"),Wga.forEach(t),znt=r(GZe," \u2014 "),Cne=n(GZe,"A",{href:!0});var Uga=s(Cne);Qnt=r(Uga,"TFXLMForTokenClassification"),Uga.forEach(t),Wnt=r(GZe," (XLM model)"),GZe.forEach(t),Unt=i(he),w6=n(he,"LI",{});var OZe=s(w6);y9e=n(OZe,"STRONG",{});var Hga=s(y9e);Hnt=r(Hga,"xlm-roberta"),Hga.forEach(t),Jnt=r(OZe," \u2014 "),wne=n(OZe,"A",{href:!0});var Jga=s(wne);Ynt=r(Jga,"TFXLMRobertaForTokenClassification"),Jga.forEach(t),Znt=r(OZe," (XLM-RoBERTa model)"),OZe.forEach(t),Knt=i(he),A6=n(he,"LI",{});var VZe=s(A6);x9e=n(VZe,"STRONG",{});var Yga=s(x9e);est=r(Yga,"xlnet"),Yga.forEach(t),ost=r(VZe," \u2014 "),Ane=n(VZe,"A",{href:!0});var Zga=s(Ane);rst=r(Zga,"TFXLNetForTokenClassification"),Zga.forEach(t),tst=r(VZe," (XLNet model)"),VZe.forEach(t),he.forEach(t),ast=i(Si),T(L6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),oto=i(m),qm=n(m,"H2",{class:!0});var bno=s(qm);y6=n(bno,"A",{id:!0,class:!0,href:!0});var Kga=s(y6);$9e=n(Kga,"SPAN",{});var eha=s($9e);T(jR.$$.fragment,eha),eha.forEach(t),Kga.forEach(t),nst=i(bno),k9e=n(bno,"SPAN",{});var oha=s(k9e);sst=r(oha,"TFAutoModelForQuestionAnswering"),oha.forEach(t),bno.forEach(t),rto=i(m),Tr=n(m,"DIV",{class:!0});var Ri=s(Tr);T(DR.$$.fragment,Ri),lst=i(Ri),jm=n(Ri,"P",{});var Fce=s(jm);ist=r(Fce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lne=n(Fce,"A",{href:!0});var rha=s(Lne);dst=r(rha,"from_pretrained()"),rha.forEach(t),cst=r(Fce," class method or the "),yne=n(Fce,"A",{href:!0});var tha=s(yne);mst=r(tha,"from_config()"),tha.forEach(t),fst=r(Fce,` class
method.`),Fce.forEach(t),gst=i(Ri),GR=n(Ri,"P",{});var vno=s(GR);hst=r(vno,"This class cannot be instantiated directly using "),S9e=n(vno,"CODE",{});var aha=s(S9e);ust=r(aha,"__init__()"),aha.forEach(t),pst=r(vno," (throws an error)."),vno.forEach(t),_st=i(Ri),sa=n(Ri,"DIV",{class:!0});var U9=s(sa);T(OR.$$.fragment,U9),bst=i(U9),R9e=n(U9,"P",{});var nha=s(R9e);vst=r(nha,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nha.forEach(t),Fst=i(U9),Dm=n(U9,"P",{});var Tce=s(Dm);Tst=r(Tce,`Note:
Loading a model from its configuration file does `),P9e=n(Tce,"STRONG",{});var sha=s(P9e);Mst=r(sha,"not"),sha.forEach(t),Est=r(Tce,` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=n(Tce,"A",{href:!0});var lha=s(xne);Cst=r(lha,"from_pretrained()"),lha.forEach(t),wst=r(Tce," to load the model weights."),Tce.forEach(t),Ast=i(U9),T(x6.$$.fragment,U9),U9.forEach(t),Lst=i(Ri),Yr=n(Ri,"DIV",{class:!0});var Pi=s(Yr);T(VR.$$.fragment,Pi),yst=i(Pi),B9e=n(Pi,"P",{});var iha=s(B9e);xst=r(iha,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iha.forEach(t),$st=i(Pi),Vn=n(Pi,"P",{});var H9=s(Vn);kst=r(H9,"The model class to instantiate is selected based on the "),I9e=n(H9,"CODE",{});var dha=s(I9e);Sst=r(dha,"model_type"),dha.forEach(t),Rst=r(H9,` property of the config object (either
passed as an argument or loaded from `),N9e=n(H9,"CODE",{});var cha=s(N9e);Pst=r(cha,"pretrained_model_name_or_path"),cha.forEach(t),Bst=r(H9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q9e=n(H9,"CODE",{});var mha=s(q9e);Ist=r(mha,"pretrained_model_name_or_path"),mha.forEach(t),Nst=r(H9,":"),H9.forEach(t),qst=i(Pi),me=n(Pi,"UL",{});var ue=s(me);$6=n(ue,"LI",{});var XZe=s($6);j9e=n(XZe,"STRONG",{});var fha=s(j9e);jst=r(fha,"albert"),fha.forEach(t),Dst=r(XZe," \u2014 "),$ne=n(XZe,"A",{href:!0});var gha=s($ne);Gst=r(gha,"TFAlbertForQuestionAnswering"),gha.forEach(t),Ost=r(XZe," (ALBERT model)"),XZe.forEach(t),Vst=i(ue),k6=n(ue,"LI",{});var zZe=s(k6);D9e=n(zZe,"STRONG",{});var hha=s(D9e);Xst=r(hha,"bert"),hha.forEach(t),zst=r(zZe," \u2014 "),kne=n(zZe,"A",{href:!0});var uha=s(kne);Qst=r(uha,"TFBertForQuestionAnswering"),uha.forEach(t),Wst=r(zZe," (BERT model)"),zZe.forEach(t),Ust=i(ue),S6=n(ue,"LI",{});var QZe=s(S6);G9e=n(QZe,"STRONG",{});var pha=s(G9e);Hst=r(pha,"camembert"),pha.forEach(t),Jst=r(QZe," \u2014 "),Sne=n(QZe,"A",{href:!0});var _ha=s(Sne);Yst=r(_ha,"TFCamembertForQuestionAnswering"),_ha.forEach(t),Zst=r(QZe," (CamemBERT model)"),QZe.forEach(t),Kst=i(ue),R6=n(ue,"LI",{});var WZe=s(R6);O9e=n(WZe,"STRONG",{});var bha=s(O9e);elt=r(bha,"convbert"),bha.forEach(t),olt=r(WZe," \u2014 "),Rne=n(WZe,"A",{href:!0});var vha=s(Rne);rlt=r(vha,"TFConvBertForQuestionAnswering"),vha.forEach(t),tlt=r(WZe," (ConvBERT model)"),WZe.forEach(t),alt=i(ue),P6=n(ue,"LI",{});var UZe=s(P6);V9e=n(UZe,"STRONG",{});var Fha=s(V9e);nlt=r(Fha,"deberta"),Fha.forEach(t),slt=r(UZe," \u2014 "),Pne=n(UZe,"A",{href:!0});var Tha=s(Pne);llt=r(Tha,"TFDebertaForQuestionAnswering"),Tha.forEach(t),ilt=r(UZe," (DeBERTa model)"),UZe.forEach(t),dlt=i(ue),B6=n(ue,"LI",{});var HZe=s(B6);X9e=n(HZe,"STRONG",{});var Mha=s(X9e);clt=r(Mha,"deberta-v2"),Mha.forEach(t),mlt=r(HZe," \u2014 "),Bne=n(HZe,"A",{href:!0});var Eha=s(Bne);flt=r(Eha,"TFDebertaV2ForQuestionAnswering"),Eha.forEach(t),glt=r(HZe," (DeBERTa-v2 model)"),HZe.forEach(t),hlt=i(ue),I6=n(ue,"LI",{});var JZe=s(I6);z9e=n(JZe,"STRONG",{});var Cha=s(z9e);ult=r(Cha,"distilbert"),Cha.forEach(t),plt=r(JZe," \u2014 "),Ine=n(JZe,"A",{href:!0});var wha=s(Ine);_lt=r(wha,"TFDistilBertForQuestionAnswering"),wha.forEach(t),blt=r(JZe," (DistilBERT model)"),JZe.forEach(t),vlt=i(ue),N6=n(ue,"LI",{});var YZe=s(N6);Q9e=n(YZe,"STRONG",{});var Aha=s(Q9e);Flt=r(Aha,"electra"),Aha.forEach(t),Tlt=r(YZe," \u2014 "),Nne=n(YZe,"A",{href:!0});var Lha=s(Nne);Mlt=r(Lha,"TFElectraForQuestionAnswering"),Lha.forEach(t),Elt=r(YZe," (ELECTRA model)"),YZe.forEach(t),Clt=i(ue),q6=n(ue,"LI",{});var ZZe=s(q6);W9e=n(ZZe,"STRONG",{});var yha=s(W9e);wlt=r(yha,"flaubert"),yha.forEach(t),Alt=r(ZZe," \u2014 "),qne=n(ZZe,"A",{href:!0});var xha=s(qne);Llt=r(xha,"TFFlaubertForQuestionAnsweringSimple"),xha.forEach(t),ylt=r(ZZe," (FlauBERT model)"),ZZe.forEach(t),xlt=i(ue),j6=n(ue,"LI",{});var KZe=s(j6);U9e=n(KZe,"STRONG",{});var $ha=s(U9e);$lt=r($ha,"funnel"),$ha.forEach(t),klt=r(KZe," \u2014 "),jne=n(KZe,"A",{href:!0});var kha=s(jne);Slt=r(kha,"TFFunnelForQuestionAnswering"),kha.forEach(t),Rlt=r(KZe," (Funnel Transformer model)"),KZe.forEach(t),Plt=i(ue),D6=n(ue,"LI",{});var eKe=s(D6);H9e=n(eKe,"STRONG",{});var Sha=s(H9e);Blt=r(Sha,"gptj"),Sha.forEach(t),Ilt=r(eKe," \u2014 "),Dne=n(eKe,"A",{href:!0});var Rha=s(Dne);Nlt=r(Rha,"TFGPTJForQuestionAnswering"),Rha.forEach(t),qlt=r(eKe," (GPT-J model)"),eKe.forEach(t),jlt=i(ue),G6=n(ue,"LI",{});var oKe=s(G6);J9e=n(oKe,"STRONG",{});var Pha=s(J9e);Dlt=r(Pha,"layoutlmv3"),Pha.forEach(t),Glt=r(oKe," \u2014 "),Gne=n(oKe,"A",{href:!0});var Bha=s(Gne);Olt=r(Bha,"TFLayoutLMv3ForQuestionAnswering"),Bha.forEach(t),Vlt=r(oKe," (LayoutLMv3 model)"),oKe.forEach(t),Xlt=i(ue),O6=n(ue,"LI",{});var rKe=s(O6);Y9e=n(rKe,"STRONG",{});var Iha=s(Y9e);zlt=r(Iha,"longformer"),Iha.forEach(t),Qlt=r(rKe," \u2014 "),One=n(rKe,"A",{href:!0});var Nha=s(One);Wlt=r(Nha,"TFLongformerForQuestionAnswering"),Nha.forEach(t),Ult=r(rKe," (Longformer model)"),rKe.forEach(t),Hlt=i(ue),V6=n(ue,"LI",{});var tKe=s(V6);Z9e=n(tKe,"STRONG",{});var qha=s(Z9e);Jlt=r(qha,"mobilebert"),qha.forEach(t),Ylt=r(tKe," \u2014 "),Vne=n(tKe,"A",{href:!0});var jha=s(Vne);Zlt=r(jha,"TFMobileBertForQuestionAnswering"),jha.forEach(t),Klt=r(tKe," (MobileBERT model)"),tKe.forEach(t),eit=i(ue),X6=n(ue,"LI",{});var aKe=s(X6);K9e=n(aKe,"STRONG",{});var Dha=s(K9e);oit=r(Dha,"mpnet"),Dha.forEach(t),rit=r(aKe," \u2014 "),Xne=n(aKe,"A",{href:!0});var Gha=s(Xne);tit=r(Gha,"TFMPNetForQuestionAnswering"),Gha.forEach(t),ait=r(aKe," (MPNet model)"),aKe.forEach(t),nit=i(ue),z6=n(ue,"LI",{});var nKe=s(z6);exe=n(nKe,"STRONG",{});var Oha=s(exe);sit=r(Oha,"rembert"),Oha.forEach(t),lit=r(nKe," \u2014 "),zne=n(nKe,"A",{href:!0});var Vha=s(zne);iit=r(Vha,"TFRemBertForQuestionAnswering"),Vha.forEach(t),dit=r(nKe," (RemBERT model)"),nKe.forEach(t),cit=i(ue),Q6=n(ue,"LI",{});var sKe=s(Q6);oxe=n(sKe,"STRONG",{});var Xha=s(oxe);mit=r(Xha,"roberta"),Xha.forEach(t),fit=r(sKe," \u2014 "),Qne=n(sKe,"A",{href:!0});var zha=s(Qne);git=r(zha,"TFRobertaForQuestionAnswering"),zha.forEach(t),hit=r(sKe," (RoBERTa model)"),sKe.forEach(t),uit=i(ue),W6=n(ue,"LI",{});var lKe=s(W6);rxe=n(lKe,"STRONG",{});var Qha=s(rxe);pit=r(Qha,"roformer"),Qha.forEach(t),_it=r(lKe," \u2014 "),Wne=n(lKe,"A",{href:!0});var Wha=s(Wne);bit=r(Wha,"TFRoFormerForQuestionAnswering"),Wha.forEach(t),vit=r(lKe," (RoFormer model)"),lKe.forEach(t),Fit=i(ue),U6=n(ue,"LI",{});var iKe=s(U6);txe=n(iKe,"STRONG",{});var Uha=s(txe);Tit=r(Uha,"xlm"),Uha.forEach(t),Mit=r(iKe," \u2014 "),Une=n(iKe,"A",{href:!0});var Hha=s(Une);Eit=r(Hha,"TFXLMForQuestionAnsweringSimple"),Hha.forEach(t),Cit=r(iKe," (XLM model)"),iKe.forEach(t),wit=i(ue),H6=n(ue,"LI",{});var dKe=s(H6);axe=n(dKe,"STRONG",{});var Jha=s(axe);Ait=r(Jha,"xlm-roberta"),Jha.forEach(t),Lit=r(dKe," \u2014 "),Hne=n(dKe,"A",{href:!0});var Yha=s(Hne);yit=r(Yha,"TFXLMRobertaForQuestionAnswering"),Yha.forEach(t),xit=r(dKe," (XLM-RoBERTa model)"),dKe.forEach(t),$it=i(ue),J6=n(ue,"LI",{});var cKe=s(J6);nxe=n(cKe,"STRONG",{});var Zha=s(nxe);kit=r(Zha,"xlnet"),Zha.forEach(t),Sit=r(cKe," \u2014 "),Jne=n(cKe,"A",{href:!0});var Kha=s(Jne);Rit=r(Kha,"TFXLNetForQuestionAnsweringSimple"),Kha.forEach(t),Pit=r(cKe," (XLNet model)"),cKe.forEach(t),ue.forEach(t),Bit=i(Pi),T(Y6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),tto=i(m),Gm=n(m,"H2",{class:!0});var Fno=s(Gm);Z6=n(Fno,"A",{id:!0,class:!0,href:!0});var eua=s(Z6);sxe=n(eua,"SPAN",{});var oua=s(sxe);T(XR.$$.fragment,oua),oua.forEach(t),eua.forEach(t),Iit=i(Fno),lxe=n(Fno,"SPAN",{});var rua=s(lxe);Nit=r(rua,"TFAutoModelForVision2Seq"),rua.forEach(t),Fno.forEach(t),ato=i(m),Mr=n(m,"DIV",{class:!0});var Bi=s(Mr);T(zR.$$.fragment,Bi),qit=i(Bi),Om=n(Bi,"P",{});var Mce=s(Om);jit=r(Mce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yne=n(Mce,"A",{href:!0});var tua=s(Yne);Dit=r(tua,"from_pretrained()"),tua.forEach(t),Git=r(Mce," class method or the "),Zne=n(Mce,"A",{href:!0});var aua=s(Zne);Oit=r(aua,"from_config()"),aua.forEach(t),Vit=r(Mce,` class
method.`),Mce.forEach(t),Xit=i(Bi),QR=n(Bi,"P",{});var Tno=s(QR);zit=r(Tno,"This class cannot be instantiated directly using "),ixe=n(Tno,"CODE",{});var nua=s(ixe);Qit=r(nua,"__init__()"),nua.forEach(t),Wit=r(Tno," (throws an error)."),Tno.forEach(t),Uit=i(Bi),la=n(Bi,"DIV",{class:!0});var J9=s(la);T(WR.$$.fragment,J9),Hit=i(J9),dxe=n(J9,"P",{});var sua=s(dxe);Jit=r(sua,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sua.forEach(t),Yit=i(J9),Vm=n(J9,"P",{});var Ece=s(Vm);Zit=r(Ece,`Note:
Loading a model from its configuration file does `),cxe=n(Ece,"STRONG",{});var lua=s(cxe);Kit=r(lua,"not"),lua.forEach(t),edt=r(Ece,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kne=n(Ece,"A",{href:!0});var iua=s(Kne);odt=r(iua,"from_pretrained()"),iua.forEach(t),rdt=r(Ece," to load the model weights."),Ece.forEach(t),tdt=i(J9),T(K6.$$.fragment,J9),J9.forEach(t),adt=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(UR.$$.fragment,Ii),ndt=i(Ii),mxe=n(Ii,"P",{});var dua=s(mxe);sdt=r(dua,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dua.forEach(t),ldt=i(Ii),Xn=n(Ii,"P",{});var Y9=s(Xn);idt=r(Y9,"The model class to instantiate is selected based on the "),fxe=n(Y9,"CODE",{});var cua=s(fxe);ddt=r(cua,"model_type"),cua.forEach(t),cdt=r(Y9,` property of the config object (either
passed as an argument or loaded from `),gxe=n(Y9,"CODE",{});var mua=s(gxe);mdt=r(mua,"pretrained_model_name_or_path"),mua.forEach(t),fdt=r(Y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hxe=n(Y9,"CODE",{});var fua=s(hxe);gdt=r(fua,"pretrained_model_name_or_path"),fua.forEach(t),hdt=r(Y9,":"),Y9.forEach(t),udt=i(Ii),uxe=n(Ii,"UL",{});var gua=s(uxe);e7=n(gua,"LI",{});var mKe=s(e7);pxe=n(mKe,"STRONG",{});var hua=s(pxe);pdt=r(hua,"vision-encoder-decoder"),hua.forEach(t),_dt=r(mKe," \u2014 "),ese=n(mKe,"A",{href:!0});var uua=s(ese);bdt=r(uua,"TFVisionEncoderDecoderModel"),uua.forEach(t),vdt=r(mKe," (Vision Encoder decoder model)"),mKe.forEach(t),gua.forEach(t),Fdt=i(Ii),T(o7.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),nto=i(m),Xm=n(m,"H2",{class:!0});var Mno=s(Xm);r7=n(Mno,"A",{id:!0,class:!0,href:!0});var pua=s(r7);_xe=n(pua,"SPAN",{});var _ua=s(_xe);T(HR.$$.fragment,_ua),_ua.forEach(t),pua.forEach(t),Tdt=i(Mno),bxe=n(Mno,"SPAN",{});var bua=s(bxe);Mdt=r(bua,"TFAutoModelForSpeechSeq2Seq"),bua.forEach(t),Mno.forEach(t),sto=i(m),Er=n(m,"DIV",{class:!0});var Ni=s(Er);T(JR.$$.fragment,Ni),Edt=i(Ni),zm=n(Ni,"P",{});var Cce=s(zm);Cdt=r(Cce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ose=n(Cce,"A",{href:!0});var vua=s(ose);wdt=r(vua,"from_pretrained()"),vua.forEach(t),Adt=r(Cce," class method or the "),rse=n(Cce,"A",{href:!0});var Fua=s(rse);Ldt=r(Fua,"from_config()"),Fua.forEach(t),ydt=r(Cce,` class
method.`),Cce.forEach(t),xdt=i(Ni),YR=n(Ni,"P",{});var Eno=s(YR);$dt=r(Eno,"This class cannot be instantiated directly using "),vxe=n(Eno,"CODE",{});var Tua=s(vxe);kdt=r(Tua,"__init__()"),Tua.forEach(t),Sdt=r(Eno," (throws an error)."),Eno.forEach(t),Rdt=i(Ni),ia=n(Ni,"DIV",{class:!0});var Z9=s(ia);T(ZR.$$.fragment,Z9),Pdt=i(Z9),Fxe=n(Z9,"P",{});var Mua=s(Fxe);Bdt=r(Mua,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mua.forEach(t),Idt=i(Z9),Qm=n(Z9,"P",{});var wce=s(Qm);Ndt=r(wce,`Note:
Loading a model from its configuration file does `),Txe=n(wce,"STRONG",{});var Eua=s(Txe);qdt=r(Eua,"not"),Eua.forEach(t),jdt=r(wce,` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=n(wce,"A",{href:!0});var Cua=s(tse);Ddt=r(Cua,"from_pretrained()"),Cua.forEach(t),Gdt=r(wce," to load the model weights."),wce.forEach(t),Odt=i(Z9),T(t7.$$.fragment,Z9),Z9.forEach(t),Vdt=i(Ni),Kr=n(Ni,"DIV",{class:!0});var qi=s(Kr);T(KR.$$.fragment,qi),Xdt=i(qi),Mxe=n(qi,"P",{});var wua=s(Mxe);zdt=r(wua,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wua.forEach(t),Qdt=i(qi),zn=n(qi,"P",{});var K9=s(zn);Wdt=r(K9,"The model class to instantiate is selected based on the "),Exe=n(K9,"CODE",{});var Aua=s(Exe);Udt=r(Aua,"model_type"),Aua.forEach(t),Hdt=r(K9,` property of the config object (either
passed as an argument or loaded from `),Cxe=n(K9,"CODE",{});var Lua=s(Cxe);Jdt=r(Lua,"pretrained_model_name_or_path"),Lua.forEach(t),Ydt=r(K9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wxe=n(K9,"CODE",{});var yua=s(wxe);Zdt=r(yua,"pretrained_model_name_or_path"),yua.forEach(t),Kdt=r(K9,":"),K9.forEach(t),ect=i(qi),eP=n(qi,"UL",{});var Cno=s(eP);a7=n(Cno,"LI",{});var fKe=s(a7);Axe=n(fKe,"STRONG",{});var xua=s(Axe);oct=r(xua,"speech_to_text"),xua.forEach(t),rct=r(fKe," \u2014 "),ase=n(fKe,"A",{href:!0});var $ua=s(ase);tct=r($ua,"TFSpeech2TextForConditionalGeneration"),$ua.forEach(t),act=r(fKe," (Speech2Text model)"),fKe.forEach(t),nct=i(Cno),n7=n(Cno,"LI",{});var gKe=s(n7);Lxe=n(gKe,"STRONG",{});var kua=s(Lxe);sct=r(kua,"whisper"),kua.forEach(t),lct=r(gKe," \u2014 "),nse=n(gKe,"A",{href:!0});var Sua=s(nse);ict=r(Sua,"TFWhisperForConditionalGeneration"),Sua.forEach(t),dct=r(gKe," (Whisper model)"),gKe.forEach(t),Cno.forEach(t),cct=i(qi),T(s7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),lto=i(m),Wm=n(m,"H2",{class:!0});var wno=s(Wm);l7=n(wno,"A",{id:!0,class:!0,href:!0});var Rua=s(l7);yxe=n(Rua,"SPAN",{});var Pua=s(yxe);T(oP.$$.fragment,Pua),Pua.forEach(t),Rua.forEach(t),mct=i(wno),xxe=n(wno,"SPAN",{});var Bua=s(xxe);fct=r(Bua,"FlaxAutoModel"),Bua.forEach(t),wno.forEach(t),ito=i(m),Cr=n(m,"DIV",{class:!0});var ji=s(Cr);T(rP.$$.fragment,ji),gct=i(ji),Um=n(ji,"P",{});var Ace=s(Um);hct=r(Ace,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sse=n(Ace,"A",{href:!0});var Iua=s(sse);uct=r(Iua,"from_pretrained()"),Iua.forEach(t),pct=r(Ace," class method or the "),lse=n(Ace,"A",{href:!0});var Nua=s(lse);_ct=r(Nua,"from_config()"),Nua.forEach(t),bct=r(Ace,` class
method.`),Ace.forEach(t),vct=i(ji),tP=n(ji,"P",{});var Ano=s(tP);Fct=r(Ano,"This class cannot be instantiated directly using "),$xe=n(Ano,"CODE",{});var qua=s($xe);Tct=r(qua,"__init__()"),qua.forEach(t),Mct=r(Ano," (throws an error)."),Ano.forEach(t),Ect=i(ji),da=n(ji,"DIV",{class:!0});var ex=s(da);T(aP.$$.fragment,ex),Cct=i(ex),kxe=n(ex,"P",{});var jua=s(kxe);wct=r(jua,"Instantiates one of the base model classes of the library from a configuration."),jua.forEach(t),Act=i(ex),Hm=n(ex,"P",{});var Lce=s(Hm);Lct=r(Lce,`Note:
Loading a model from its configuration file does `),Sxe=n(Lce,"STRONG",{});var Dua=s(Sxe);yct=r(Dua,"not"),Dua.forEach(t),xct=r(Lce,` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=n(Lce,"A",{href:!0});var Gua=s(ise);$ct=r(Gua,"from_pretrained()"),Gua.forEach(t),kct=r(Lce," to load the model weights."),Lce.forEach(t),Sct=i(ex),T(i7.$$.fragment,ex),ex.forEach(t),Rct=i(ji),et=n(ji,"DIV",{class:!0});var Di=s(et);T(nP.$$.fragment,Di),Pct=i(Di),Rxe=n(Di,"P",{});var Oua=s(Rxe);Bct=r(Oua,"Instantiate one of the base model classes of the library from a pretrained model."),Oua.forEach(t),Ict=i(Di),Qn=n(Di,"P",{});var ox=s(Qn);Nct=r(ox,"The model class to instantiate is selected based on the "),Pxe=n(ox,"CODE",{});var Vua=s(Pxe);qct=r(Vua,"model_type"),Vua.forEach(t),jct=r(ox,` property of the config object (either
passed as an argument or loaded from `),Bxe=n(ox,"CODE",{});var Xua=s(Bxe);Dct=r(Xua,"pretrained_model_name_or_path"),Xua.forEach(t),Gct=r(ox,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ixe=n(ox,"CODE",{});var zua=s(Ixe);Oct=r(zua,"pretrained_model_name_or_path"),zua.forEach(t),Vct=r(ox,":"),ox.forEach(t),Xct=i(Di),te=n(Di,"UL",{});var ne=s(te);d7=n(ne,"LI",{});var hKe=s(d7);Nxe=n(hKe,"STRONG",{});var Qua=s(Nxe);zct=r(Qua,"albert"),Qua.forEach(t),Qct=r(hKe," \u2014 "),dse=n(hKe,"A",{href:!0});var Wua=s(dse);Wct=r(Wua,"FlaxAlbertModel"),Wua.forEach(t),Uct=r(hKe," (ALBERT model)"),hKe.forEach(t),Hct=i(ne),c7=n(ne,"LI",{});var uKe=s(c7);qxe=n(uKe,"STRONG",{});var Uua=s(qxe);Jct=r(Uua,"bart"),Uua.forEach(t),Yct=r(uKe," \u2014 "),cse=n(uKe,"A",{href:!0});var Hua=s(cse);Zct=r(Hua,"FlaxBartModel"),Hua.forEach(t),Kct=r(uKe," (BART model)"),uKe.forEach(t),emt=i(ne),m7=n(ne,"LI",{});var pKe=s(m7);jxe=n(pKe,"STRONG",{});var Jua=s(jxe);omt=r(Jua,"beit"),Jua.forEach(t),rmt=r(pKe," \u2014 "),mse=n(pKe,"A",{href:!0});var Yua=s(mse);tmt=r(Yua,"FlaxBeitModel"),Yua.forEach(t),amt=r(pKe," (BEiT model)"),pKe.forEach(t),nmt=i(ne),f7=n(ne,"LI",{});var _Ke=s(f7);Dxe=n(_Ke,"STRONG",{});var Zua=s(Dxe);smt=r(Zua,"bert"),Zua.forEach(t),lmt=r(_Ke," \u2014 "),fse=n(_Ke,"A",{href:!0});var Kua=s(fse);imt=r(Kua,"FlaxBertModel"),Kua.forEach(t),dmt=r(_Ke," (BERT model)"),_Ke.forEach(t),cmt=i(ne),g7=n(ne,"LI",{});var bKe=s(g7);Gxe=n(bKe,"STRONG",{});var epa=s(Gxe);mmt=r(epa,"big_bird"),epa.forEach(t),fmt=r(bKe," \u2014 "),gse=n(bKe,"A",{href:!0});var opa=s(gse);gmt=r(opa,"FlaxBigBirdModel"),opa.forEach(t),hmt=r(bKe," (BigBird model)"),bKe.forEach(t),umt=i(ne),h7=n(ne,"LI",{});var vKe=s(h7);Oxe=n(vKe,"STRONG",{});var rpa=s(Oxe);pmt=r(rpa,"blenderbot"),rpa.forEach(t),_mt=r(vKe," \u2014 "),hse=n(vKe,"A",{href:!0});var tpa=s(hse);bmt=r(tpa,"FlaxBlenderbotModel"),tpa.forEach(t),vmt=r(vKe," (Blenderbot model)"),vKe.forEach(t),Fmt=i(ne),u7=n(ne,"LI",{});var FKe=s(u7);Vxe=n(FKe,"STRONG",{});var apa=s(Vxe);Tmt=r(apa,"blenderbot-small"),apa.forEach(t),Mmt=r(FKe," \u2014 "),use=n(FKe,"A",{href:!0});var npa=s(use);Emt=r(npa,"FlaxBlenderbotSmallModel"),npa.forEach(t),Cmt=r(FKe," (BlenderbotSmall model)"),FKe.forEach(t),wmt=i(ne),p7=n(ne,"LI",{});var TKe=s(p7);Xxe=n(TKe,"STRONG",{});var spa=s(Xxe);Amt=r(spa,"clip"),spa.forEach(t),Lmt=r(TKe," \u2014 "),pse=n(TKe,"A",{href:!0});var lpa=s(pse);ymt=r(lpa,"FlaxCLIPModel"),lpa.forEach(t),xmt=r(TKe," (CLIP model)"),TKe.forEach(t),$mt=i(ne),_7=n(ne,"LI",{});var MKe=s(_7);zxe=n(MKe,"STRONG",{});var ipa=s(zxe);kmt=r(ipa,"distilbert"),ipa.forEach(t),Smt=r(MKe," \u2014 "),_se=n(MKe,"A",{href:!0});var dpa=s(_se);Rmt=r(dpa,"FlaxDistilBertModel"),dpa.forEach(t),Pmt=r(MKe," (DistilBERT model)"),MKe.forEach(t),Bmt=i(ne),b7=n(ne,"LI",{});var EKe=s(b7);Qxe=n(EKe,"STRONG",{});var cpa=s(Qxe);Imt=r(cpa,"electra"),cpa.forEach(t),Nmt=r(EKe," \u2014 "),bse=n(EKe,"A",{href:!0});var mpa=s(bse);qmt=r(mpa,"FlaxElectraModel"),mpa.forEach(t),jmt=r(EKe," (ELECTRA model)"),EKe.forEach(t),Dmt=i(ne),v7=n(ne,"LI",{});var CKe=s(v7);Wxe=n(CKe,"STRONG",{});var fpa=s(Wxe);Gmt=r(fpa,"gpt2"),fpa.forEach(t),Omt=r(CKe," \u2014 "),vse=n(CKe,"A",{href:!0});var gpa=s(vse);Vmt=r(gpa,"FlaxGPT2Model"),gpa.forEach(t),Xmt=r(CKe," (OpenAI GPT-2 model)"),CKe.forEach(t),zmt=i(ne),F7=n(ne,"LI",{});var wKe=s(F7);Uxe=n(wKe,"STRONG",{});var hpa=s(Uxe);Qmt=r(hpa,"gpt_neo"),hpa.forEach(t),Wmt=r(wKe," \u2014 "),Fse=n(wKe,"A",{href:!0});var upa=s(Fse);Umt=r(upa,"FlaxGPTNeoModel"),upa.forEach(t),Hmt=r(wKe," (GPT Neo model)"),wKe.forEach(t),Jmt=i(ne),T7=n(ne,"LI",{});var AKe=s(T7);Hxe=n(AKe,"STRONG",{});var ppa=s(Hxe);Ymt=r(ppa,"gptj"),ppa.forEach(t),Zmt=r(AKe," \u2014 "),Tse=n(AKe,"A",{href:!0});var _pa=s(Tse);Kmt=r(_pa,"FlaxGPTJModel"),_pa.forEach(t),eft=r(AKe," (GPT-J model)"),AKe.forEach(t),oft=i(ne),M7=n(ne,"LI",{});var LKe=s(M7);Jxe=n(LKe,"STRONG",{});var bpa=s(Jxe);rft=r(bpa,"longt5"),bpa.forEach(t),tft=r(LKe," \u2014 "),Mse=n(LKe,"A",{href:!0});var vpa=s(Mse);aft=r(vpa,"FlaxLongT5Model"),vpa.forEach(t),nft=r(LKe," (LongT5 model)"),LKe.forEach(t),sft=i(ne),E7=n(ne,"LI",{});var yKe=s(E7);Yxe=n(yKe,"STRONG",{});var Fpa=s(Yxe);lft=r(Fpa,"marian"),Fpa.forEach(t),ift=r(yKe," \u2014 "),Ese=n(yKe,"A",{href:!0});var Tpa=s(Ese);dft=r(Tpa,"FlaxMarianModel"),Tpa.forEach(t),cft=r(yKe," (Marian model)"),yKe.forEach(t),mft=i(ne),C7=n(ne,"LI",{});var xKe=s(C7);Zxe=n(xKe,"STRONG",{});var Mpa=s(Zxe);fft=r(Mpa,"mbart"),Mpa.forEach(t),gft=r(xKe," \u2014 "),Cse=n(xKe,"A",{href:!0});var Epa=s(Cse);hft=r(Epa,"FlaxMBartModel"),Epa.forEach(t),uft=r(xKe," (mBART model)"),xKe.forEach(t),pft=i(ne),w7=n(ne,"LI",{});var $Ke=s(w7);Kxe=n($Ke,"STRONG",{});var Cpa=s(Kxe);_ft=r(Cpa,"mt5"),Cpa.forEach(t),bft=r($Ke," \u2014 "),wse=n($Ke,"A",{href:!0});var wpa=s(wse);vft=r(wpa,"FlaxMT5Model"),wpa.forEach(t),Fft=r($Ke," (MT5 model)"),$Ke.forEach(t),Tft=i(ne),A7=n(ne,"LI",{});var kKe=s(A7);e$e=n(kKe,"STRONG",{});var Apa=s(e$e);Mft=r(Apa,"opt"),Apa.forEach(t),Eft=r(kKe," \u2014 "),Ase=n(kKe,"A",{href:!0});var Lpa=s(Ase);Cft=r(Lpa,"FlaxOPTModel"),Lpa.forEach(t),wft=r(kKe," (OPT model)"),kKe.forEach(t),Aft=i(ne),L7=n(ne,"LI",{});var SKe=s(L7);o$e=n(SKe,"STRONG",{});var ypa=s(o$e);Lft=r(ypa,"pegasus"),ypa.forEach(t),yft=r(SKe," \u2014 "),Lse=n(SKe,"A",{href:!0});var xpa=s(Lse);xft=r(xpa,"FlaxPegasusModel"),xpa.forEach(t),$ft=r(SKe," (Pegasus model)"),SKe.forEach(t),kft=i(ne),y7=n(ne,"LI",{});var RKe=s(y7);r$e=n(RKe,"STRONG",{});var $pa=s(r$e);Sft=r($pa,"roberta"),$pa.forEach(t),Rft=r(RKe," \u2014 "),yse=n(RKe,"A",{href:!0});var kpa=s(yse);Pft=r(kpa,"FlaxRobertaModel"),kpa.forEach(t),Bft=r(RKe," (RoBERTa model)"),RKe.forEach(t),Ift=i(ne),x7=n(ne,"LI",{});var PKe=s(x7);t$e=n(PKe,"STRONG",{});var Spa=s(t$e);Nft=r(Spa,"roformer"),Spa.forEach(t),qft=r(PKe," \u2014 "),xse=n(PKe,"A",{href:!0});var Rpa=s(xse);jft=r(Rpa,"FlaxRoFormerModel"),Rpa.forEach(t),Dft=r(PKe," (RoFormer model)"),PKe.forEach(t),Gft=i(ne),$7=n(ne,"LI",{});var BKe=s($7);a$e=n(BKe,"STRONG",{});var Ppa=s(a$e);Oft=r(Ppa,"t5"),Ppa.forEach(t),Vft=r(BKe," \u2014 "),$se=n(BKe,"A",{href:!0});var Bpa=s($se);Xft=r(Bpa,"FlaxT5Model"),Bpa.forEach(t),zft=r(BKe," (T5 model)"),BKe.forEach(t),Qft=i(ne),k7=n(ne,"LI",{});var IKe=s(k7);n$e=n(IKe,"STRONG",{});var Ipa=s(n$e);Wft=r(Ipa,"vision-text-dual-encoder"),Ipa.forEach(t),Uft=r(IKe," \u2014 "),kse=n(IKe,"A",{href:!0});var Npa=s(kse);Hft=r(Npa,"FlaxVisionTextDualEncoderModel"),Npa.forEach(t),Jft=r(IKe," (VisionTextDualEncoder model)"),IKe.forEach(t),Yft=i(ne),S7=n(ne,"LI",{});var NKe=s(S7);s$e=n(NKe,"STRONG",{});var qpa=s(s$e);Zft=r(qpa,"vit"),qpa.forEach(t),Kft=r(NKe," \u2014 "),Sse=n(NKe,"A",{href:!0});var jpa=s(Sse);egt=r(jpa,"FlaxViTModel"),jpa.forEach(t),ogt=r(NKe," (ViT model)"),NKe.forEach(t),rgt=i(ne),R7=n(ne,"LI",{});var qKe=s(R7);l$e=n(qKe,"STRONG",{});var Dpa=s(l$e);tgt=r(Dpa,"wav2vec2"),Dpa.forEach(t),agt=r(qKe," \u2014 "),Rse=n(qKe,"A",{href:!0});var Gpa=s(Rse);ngt=r(Gpa,"FlaxWav2Vec2Model"),Gpa.forEach(t),sgt=r(qKe," (Wav2Vec2 model)"),qKe.forEach(t),lgt=i(ne),P7=n(ne,"LI",{});var jKe=s(P7);i$e=n(jKe,"STRONG",{});var Opa=s(i$e);igt=r(Opa,"xglm"),Opa.forEach(t),dgt=r(jKe," \u2014 "),Pse=n(jKe,"A",{href:!0});var Vpa=s(Pse);cgt=r(Vpa,"FlaxXGLMModel"),Vpa.forEach(t),mgt=r(jKe," (XGLM model)"),jKe.forEach(t),fgt=i(ne),B7=n(ne,"LI",{});var DKe=s(B7);d$e=n(DKe,"STRONG",{});var Xpa=s(d$e);ggt=r(Xpa,"xlm-roberta"),Xpa.forEach(t),hgt=r(DKe," \u2014 "),Bse=n(DKe,"A",{href:!0});var zpa=s(Bse);ugt=r(zpa,"FlaxXLMRobertaModel"),zpa.forEach(t),pgt=r(DKe," (XLM-RoBERTa model)"),DKe.forEach(t),ne.forEach(t),_gt=i(Di),T(I7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),dto=i(m),Jm=n(m,"H2",{class:!0});var Lno=s(Jm);N7=n(Lno,"A",{id:!0,class:!0,href:!0});var Qpa=s(N7);c$e=n(Qpa,"SPAN",{});var Wpa=s(c$e);T(sP.$$.fragment,Wpa),Wpa.forEach(t),Qpa.forEach(t),bgt=i(Lno),m$e=n(Lno,"SPAN",{});var Upa=s(m$e);vgt=r(Upa,"FlaxAutoModelForCausalLM"),Upa.forEach(t),Lno.forEach(t),cto=i(m),wr=n(m,"DIV",{class:!0});var Gi=s(wr);T(lP.$$.fragment,Gi),Fgt=i(Gi),Ym=n(Gi,"P",{});var yce=s(Ym);Tgt=r(yce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ise=n(yce,"A",{href:!0});var Hpa=s(Ise);Mgt=r(Hpa,"from_pretrained()"),Hpa.forEach(t),Egt=r(yce," class method or the "),Nse=n(yce,"A",{href:!0});var Jpa=s(Nse);Cgt=r(Jpa,"from_config()"),Jpa.forEach(t),wgt=r(yce,` class
method.`),yce.forEach(t),Agt=i(Gi),iP=n(Gi,"P",{});var yno=s(iP);Lgt=r(yno,"This class cannot be instantiated directly using "),f$e=n(yno,"CODE",{});var Ypa=s(f$e);ygt=r(Ypa,"__init__()"),Ypa.forEach(t),xgt=r(yno," (throws an error)."),yno.forEach(t),$gt=i(Gi),ca=n(Gi,"DIV",{class:!0});var rx=s(ca);T(dP.$$.fragment,rx),kgt=i(rx),g$e=n(rx,"P",{});var Zpa=s(g$e);Sgt=r(Zpa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zpa.forEach(t),Rgt=i(rx),Zm=n(rx,"P",{});var xce=s(Zm);Pgt=r(xce,`Note:
Loading a model from its configuration file does `),h$e=n(xce,"STRONG",{});var Kpa=s(h$e);Bgt=r(Kpa,"not"),Kpa.forEach(t),Igt=r(xce,` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=n(xce,"A",{href:!0});var e_a=s(qse);Ngt=r(e_a,"from_pretrained()"),e_a.forEach(t),qgt=r(xce," to load the model weights."),xce.forEach(t),jgt=i(rx),T(q7.$$.fragment,rx),rx.forEach(t),Dgt=i(Gi),ot=n(Gi,"DIV",{class:!0});var Oi=s(ot);T(cP.$$.fragment,Oi),Ggt=i(Oi),u$e=n(Oi,"P",{});var o_a=s(u$e);Ogt=r(o_a,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o_a.forEach(t),Vgt=i(Oi),Wn=n(Oi,"P",{});var tx=s(Wn);Xgt=r(tx,"The model class to instantiate is selected based on the "),p$e=n(tx,"CODE",{});var r_a=s(p$e);zgt=r(r_a,"model_type"),r_a.forEach(t),Qgt=r(tx,` property of the config object (either
passed as an argument or loaded from `),_$e=n(tx,"CODE",{});var t_a=s(_$e);Wgt=r(t_a,"pretrained_model_name_or_path"),t_a.forEach(t),Ugt=r(tx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b$e=n(tx,"CODE",{});var a_a=s(b$e);Hgt=r(a_a,"pretrained_model_name_or_path"),a_a.forEach(t),Jgt=r(tx,":"),tx.forEach(t),Ygt=i(Oi),xe=n(Oi,"UL",{});var qe=s(xe);j7=n(qe,"LI",{});var GKe=s(j7);v$e=n(GKe,"STRONG",{});var n_a=s(v$e);Zgt=r(n_a,"bart"),n_a.forEach(t),Kgt=r(GKe," \u2014 "),jse=n(GKe,"A",{href:!0});var s_a=s(jse);eht=r(s_a,"FlaxBartForCausalLM"),s_a.forEach(t),oht=r(GKe," (BART model)"),GKe.forEach(t),rht=i(qe),D7=n(qe,"LI",{});var OKe=s(D7);F$e=n(OKe,"STRONG",{});var l_a=s(F$e);tht=r(l_a,"bert"),l_a.forEach(t),aht=r(OKe," \u2014 "),Dse=n(OKe,"A",{href:!0});var i_a=s(Dse);nht=r(i_a,"FlaxBertForCausalLM"),i_a.forEach(t),sht=r(OKe," (BERT model)"),OKe.forEach(t),lht=i(qe),G7=n(qe,"LI",{});var VKe=s(G7);T$e=n(VKe,"STRONG",{});var d_a=s(T$e);iht=r(d_a,"big_bird"),d_a.forEach(t),dht=r(VKe," \u2014 "),Gse=n(VKe,"A",{href:!0});var c_a=s(Gse);cht=r(c_a,"FlaxBigBirdForCausalLM"),c_a.forEach(t),mht=r(VKe," (BigBird model)"),VKe.forEach(t),fht=i(qe),O7=n(qe,"LI",{});var XKe=s(O7);M$e=n(XKe,"STRONG",{});var m_a=s(M$e);ght=r(m_a,"electra"),m_a.forEach(t),hht=r(XKe," \u2014 "),Ose=n(XKe,"A",{href:!0});var f_a=s(Ose);uht=r(f_a,"FlaxElectraForCausalLM"),f_a.forEach(t),pht=r(XKe," (ELECTRA model)"),XKe.forEach(t),_ht=i(qe),V7=n(qe,"LI",{});var zKe=s(V7);E$e=n(zKe,"STRONG",{});var g_a=s(E$e);bht=r(g_a,"gpt2"),g_a.forEach(t),vht=r(zKe," \u2014 "),Vse=n(zKe,"A",{href:!0});var h_a=s(Vse);Fht=r(h_a,"FlaxGPT2LMHeadModel"),h_a.forEach(t),Tht=r(zKe," (OpenAI GPT-2 model)"),zKe.forEach(t),Mht=i(qe),X7=n(qe,"LI",{});var QKe=s(X7);C$e=n(QKe,"STRONG",{});var u_a=s(C$e);Eht=r(u_a,"gpt_neo"),u_a.forEach(t),Cht=r(QKe," \u2014 "),Xse=n(QKe,"A",{href:!0});var p_a=s(Xse);wht=r(p_a,"FlaxGPTNeoForCausalLM"),p_a.forEach(t),Aht=r(QKe," (GPT Neo model)"),QKe.forEach(t),Lht=i(qe),z7=n(qe,"LI",{});var WKe=s(z7);w$e=n(WKe,"STRONG",{});var __a=s(w$e);yht=r(__a,"gptj"),__a.forEach(t),xht=r(WKe," \u2014 "),zse=n(WKe,"A",{href:!0});var b_a=s(zse);$ht=r(b_a,"FlaxGPTJForCausalLM"),b_a.forEach(t),kht=r(WKe," (GPT-J model)"),WKe.forEach(t),Sht=i(qe),Q7=n(qe,"LI",{});var UKe=s(Q7);A$e=n(UKe,"STRONG",{});var v_a=s(A$e);Rht=r(v_a,"opt"),v_a.forEach(t),Pht=r(UKe," \u2014 "),Qse=n(UKe,"A",{href:!0});var F_a=s(Qse);Bht=r(F_a,"FlaxOPTForCausalLM"),F_a.forEach(t),Iht=r(UKe," (OPT model)"),UKe.forEach(t),Nht=i(qe),W7=n(qe,"LI",{});var HKe=s(W7);L$e=n(HKe,"STRONG",{});var T_a=s(L$e);qht=r(T_a,"roberta"),T_a.forEach(t),jht=r(HKe," \u2014 "),Wse=n(HKe,"A",{href:!0});var M_a=s(Wse);Dht=r(M_a,"FlaxRobertaForCausalLM"),M_a.forEach(t),Ght=r(HKe," (RoBERTa model)"),HKe.forEach(t),Oht=i(qe),U7=n(qe,"LI",{});var JKe=s(U7);y$e=n(JKe,"STRONG",{});var E_a=s(y$e);Vht=r(E_a,"xglm"),E_a.forEach(t),Xht=r(JKe," \u2014 "),Use=n(JKe,"A",{href:!0});var C_a=s(Use);zht=r(C_a,"FlaxXGLMForCausalLM"),C_a.forEach(t),Qht=r(JKe," (XGLM model)"),JKe.forEach(t),qe.forEach(t),Wht=i(Oi),T(H7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),mto=i(m),Km=n(m,"H2",{class:!0});var xno=s(Km);J7=n(xno,"A",{id:!0,class:!0,href:!0});var w_a=s(J7);x$e=n(w_a,"SPAN",{});var A_a=s(x$e);T(mP.$$.fragment,A_a),A_a.forEach(t),w_a.forEach(t),Uht=i(xno),$$e=n(xno,"SPAN",{});var L_a=s($$e);Hht=r(L_a,"FlaxAutoModelForPreTraining"),L_a.forEach(t),xno.forEach(t),fto=i(m),Ar=n(m,"DIV",{class:!0});var Vi=s(Ar);T(fP.$$.fragment,Vi),Jht=i(Vi),ef=n(Vi,"P",{});var $ce=s(ef);Yht=r($ce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hse=n($ce,"A",{href:!0});var y_a=s(Hse);Zht=r(y_a,"from_pretrained()"),y_a.forEach(t),Kht=r($ce," class method or the "),Jse=n($ce,"A",{href:!0});var x_a=s(Jse);eut=r(x_a,"from_config()"),x_a.forEach(t),out=r($ce,` class
method.`),$ce.forEach(t),rut=i(Vi),gP=n(Vi,"P",{});var $no=s(gP);tut=r($no,"This class cannot be instantiated directly using "),k$e=n($no,"CODE",{});var $_a=s(k$e);aut=r($_a,"__init__()"),$_a.forEach(t),nut=r($no," (throws an error)."),$no.forEach(t),sut=i(Vi),ma=n(Vi,"DIV",{class:!0});var ax=s(ma);T(hP.$$.fragment,ax),lut=i(ax),S$e=n(ax,"P",{});var k_a=s(S$e);iut=r(k_a,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k_a.forEach(t),dut=i(ax),of=n(ax,"P",{});var kce=s(of);cut=r(kce,`Note:
Loading a model from its configuration file does `),R$e=n(kce,"STRONG",{});var S_a=s(R$e);mut=r(S_a,"not"),S_a.forEach(t),fut=r(kce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yse=n(kce,"A",{href:!0});var R_a=s(Yse);gut=r(R_a,"from_pretrained()"),R_a.forEach(t),hut=r(kce," to load the model weights."),kce.forEach(t),uut=i(ax),T(Y7.$$.fragment,ax),ax.forEach(t),put=i(Vi),rt=n(Vi,"DIV",{class:!0});var Xi=s(rt);T(uP.$$.fragment,Xi),_ut=i(Xi),P$e=n(Xi,"P",{});var P_a=s(P$e);but=r(P_a,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P_a.forEach(t),vut=i(Xi),Un=n(Xi,"P",{});var nx=s(Un);Fut=r(nx,"The model class to instantiate is selected based on the "),B$e=n(nx,"CODE",{});var B_a=s(B$e);Tut=r(B_a,"model_type"),B_a.forEach(t),Mut=r(nx,` property of the config object (either
passed as an argument or loaded from `),I$e=n(nx,"CODE",{});var I_a=s(I$e);Eut=r(I_a,"pretrained_model_name_or_path"),I_a.forEach(t),Cut=r(nx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N$e=n(nx,"CODE",{});var N_a=s(N$e);wut=r(N_a,"pretrained_model_name_or_path"),N_a.forEach(t),Aut=r(nx,":"),nx.forEach(t),Lut=i(Xi),Ee=n(Xi,"UL",{});var we=s(Ee);Z7=n(we,"LI",{});var YKe=s(Z7);q$e=n(YKe,"STRONG",{});var q_a=s(q$e);yut=r(q_a,"albert"),q_a.forEach(t),xut=r(YKe," \u2014 "),Zse=n(YKe,"A",{href:!0});var j_a=s(Zse);$ut=r(j_a,"FlaxAlbertForPreTraining"),j_a.forEach(t),kut=r(YKe," (ALBERT model)"),YKe.forEach(t),Sut=i(we),K7=n(we,"LI",{});var ZKe=s(K7);j$e=n(ZKe,"STRONG",{});var D_a=s(j$e);Rut=r(D_a,"bart"),D_a.forEach(t),Put=r(ZKe," \u2014 "),Kse=n(ZKe,"A",{href:!0});var G_a=s(Kse);But=r(G_a,"FlaxBartForConditionalGeneration"),G_a.forEach(t),Iut=r(ZKe," (BART model)"),ZKe.forEach(t),Nut=i(we),eL=n(we,"LI",{});var KKe=s(eL);D$e=n(KKe,"STRONG",{});var O_a=s(D$e);qut=r(O_a,"bert"),O_a.forEach(t),jut=r(KKe," \u2014 "),ele=n(KKe,"A",{href:!0});var V_a=s(ele);Dut=r(V_a,"FlaxBertForPreTraining"),V_a.forEach(t),Gut=r(KKe," (BERT model)"),KKe.forEach(t),Out=i(we),oL=n(we,"LI",{});var eeo=s(oL);G$e=n(eeo,"STRONG",{});var X_a=s(G$e);Vut=r(X_a,"big_bird"),X_a.forEach(t),Xut=r(eeo," \u2014 "),ole=n(eeo,"A",{href:!0});var z_a=s(ole);zut=r(z_a,"FlaxBigBirdForPreTraining"),z_a.forEach(t),Qut=r(eeo," (BigBird model)"),eeo.forEach(t),Wut=i(we),rL=n(we,"LI",{});var oeo=s(rL);O$e=n(oeo,"STRONG",{});var Q_a=s(O$e);Uut=r(Q_a,"electra"),Q_a.forEach(t),Hut=r(oeo," \u2014 "),rle=n(oeo,"A",{href:!0});var W_a=s(rle);Jut=r(W_a,"FlaxElectraForPreTraining"),W_a.forEach(t),Yut=r(oeo," (ELECTRA model)"),oeo.forEach(t),Zut=i(we),tL=n(we,"LI",{});var reo=s(tL);V$e=n(reo,"STRONG",{});var U_a=s(V$e);Kut=r(U_a,"longt5"),U_a.forEach(t),ept=r(reo," \u2014 "),tle=n(reo,"A",{href:!0});var H_a=s(tle);opt=r(H_a,"FlaxLongT5ForConditionalGeneration"),H_a.forEach(t),rpt=r(reo," (LongT5 model)"),reo.forEach(t),tpt=i(we),aL=n(we,"LI",{});var teo=s(aL);X$e=n(teo,"STRONG",{});var J_a=s(X$e);apt=r(J_a,"mbart"),J_a.forEach(t),npt=r(teo," \u2014 "),ale=n(teo,"A",{href:!0});var Y_a=s(ale);spt=r(Y_a,"FlaxMBartForConditionalGeneration"),Y_a.forEach(t),lpt=r(teo," (mBART model)"),teo.forEach(t),ipt=i(we),nL=n(we,"LI",{});var aeo=s(nL);z$e=n(aeo,"STRONG",{});var Z_a=s(z$e);dpt=r(Z_a,"mt5"),Z_a.forEach(t),cpt=r(aeo," \u2014 "),nle=n(aeo,"A",{href:!0});var K_a=s(nle);mpt=r(K_a,"FlaxMT5ForConditionalGeneration"),K_a.forEach(t),fpt=r(aeo," (MT5 model)"),aeo.forEach(t),gpt=i(we),sL=n(we,"LI",{});var neo=s(sL);Q$e=n(neo,"STRONG",{});var e1a=s(Q$e);hpt=r(e1a,"roberta"),e1a.forEach(t),upt=r(neo," \u2014 "),sle=n(neo,"A",{href:!0});var o1a=s(sle);ppt=r(o1a,"FlaxRobertaForMaskedLM"),o1a.forEach(t),_pt=r(neo," (RoBERTa model)"),neo.forEach(t),bpt=i(we),lL=n(we,"LI",{});var seo=s(lL);W$e=n(seo,"STRONG",{});var r1a=s(W$e);vpt=r(r1a,"roformer"),r1a.forEach(t),Fpt=r(seo," \u2014 "),lle=n(seo,"A",{href:!0});var t1a=s(lle);Tpt=r(t1a,"FlaxRoFormerForMaskedLM"),t1a.forEach(t),Mpt=r(seo," (RoFormer model)"),seo.forEach(t),Ept=i(we),iL=n(we,"LI",{});var leo=s(iL);U$e=n(leo,"STRONG",{});var a1a=s(U$e);Cpt=r(a1a,"t5"),a1a.forEach(t),wpt=r(leo," \u2014 "),ile=n(leo,"A",{href:!0});var n1a=s(ile);Apt=r(n1a,"FlaxT5ForConditionalGeneration"),n1a.forEach(t),Lpt=r(leo," (T5 model)"),leo.forEach(t),ypt=i(we),dL=n(we,"LI",{});var ieo=s(dL);H$e=n(ieo,"STRONG",{});var s1a=s(H$e);xpt=r(s1a,"wav2vec2"),s1a.forEach(t),$pt=r(ieo," \u2014 "),dle=n(ieo,"A",{href:!0});var l1a=s(dle);kpt=r(l1a,"FlaxWav2Vec2ForPreTraining"),l1a.forEach(t),Spt=r(ieo," (Wav2Vec2 model)"),ieo.forEach(t),Rpt=i(we),cL=n(we,"LI",{});var deo=s(cL);J$e=n(deo,"STRONG",{});var i1a=s(J$e);Ppt=r(i1a,"xlm-roberta"),i1a.forEach(t),Bpt=r(deo," \u2014 "),cle=n(deo,"A",{href:!0});var d1a=s(cle);Ipt=r(d1a,"FlaxXLMRobertaForMaskedLM"),d1a.forEach(t),Npt=r(deo," (XLM-RoBERTa model)"),deo.forEach(t),we.forEach(t),qpt=i(Xi),T(mL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),gto=i(m),rf=n(m,"H2",{class:!0});var kno=s(rf);fL=n(kno,"A",{id:!0,class:!0,href:!0});var c1a=s(fL);Y$e=n(c1a,"SPAN",{});var m1a=s(Y$e);T(pP.$$.fragment,m1a),m1a.forEach(t),c1a.forEach(t),jpt=i(kno),Z$e=n(kno,"SPAN",{});var f1a=s(Z$e);Dpt=r(f1a,"FlaxAutoModelForMaskedLM"),f1a.forEach(t),kno.forEach(t),hto=i(m),Lr=n(m,"DIV",{class:!0});var zi=s(Lr);T(_P.$$.fragment,zi),Gpt=i(zi),tf=n(zi,"P",{});var Sce=s(tf);Opt=r(Sce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mle=n(Sce,"A",{href:!0});var g1a=s(mle);Vpt=r(g1a,"from_pretrained()"),g1a.forEach(t),Xpt=r(Sce," class method or the "),fle=n(Sce,"A",{href:!0});var h1a=s(fle);zpt=r(h1a,"from_config()"),h1a.forEach(t),Qpt=r(Sce,` class
method.`),Sce.forEach(t),Wpt=i(zi),bP=n(zi,"P",{});var Sno=s(bP);Upt=r(Sno,"This class cannot be instantiated directly using "),K$e=n(Sno,"CODE",{});var u1a=s(K$e);Hpt=r(u1a,"__init__()"),u1a.forEach(t),Jpt=r(Sno," (throws an error)."),Sno.forEach(t),Ypt=i(zi),fa=n(zi,"DIV",{class:!0});var sx=s(fa);T(vP.$$.fragment,sx),Zpt=i(sx),eke=n(sx,"P",{});var p1a=s(eke);Kpt=r(p1a,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p1a.forEach(t),e_t=i(sx),af=n(sx,"P",{});var Rce=s(af);o_t=r(Rce,`Note:
Loading a model from its configuration file does `),oke=n(Rce,"STRONG",{});var _1a=s(oke);r_t=r(_1a,"not"),_1a.forEach(t),t_t=r(Rce,` load the model weights. It only affects the
model\u2019s configuration. Use `),gle=n(Rce,"A",{href:!0});var b1a=s(gle);a_t=r(b1a,"from_pretrained()"),b1a.forEach(t),n_t=r(Rce," to load the model weights."),Rce.forEach(t),s_t=i(sx),T(gL.$$.fragment,sx),sx.forEach(t),l_t=i(zi),tt=n(zi,"DIV",{class:!0});var Qi=s(tt);T(FP.$$.fragment,Qi),i_t=i(Qi),rke=n(Qi,"P",{});var v1a=s(rke);d_t=r(v1a,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v1a.forEach(t),c_t=i(Qi),Hn=n(Qi,"P",{});var lx=s(Hn);m_t=r(lx,"The model class to instantiate is selected based on the "),tke=n(lx,"CODE",{});var F1a=s(tke);f_t=r(F1a,"model_type"),F1a.forEach(t),g_t=r(lx,` property of the config object (either
passed as an argument or loaded from `),ake=n(lx,"CODE",{});var T1a=s(ake);h_t=r(T1a,"pretrained_model_name_or_path"),T1a.forEach(t),u_t=r(lx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nke=n(lx,"CODE",{});var M1a=s(nke);p_t=r(M1a,"pretrained_model_name_or_path"),M1a.forEach(t),__t=r(lx,":"),lx.forEach(t),b_t=i(Qi),$e=n(Qi,"UL",{});var je=s($e);hL=n(je,"LI",{});var ceo=s(hL);ske=n(ceo,"STRONG",{});var E1a=s(ske);v_t=r(E1a,"albert"),E1a.forEach(t),F_t=r(ceo," \u2014 "),hle=n(ceo,"A",{href:!0});var C1a=s(hle);T_t=r(C1a,"FlaxAlbertForMaskedLM"),C1a.forEach(t),M_t=r(ceo," (ALBERT model)"),ceo.forEach(t),E_t=i(je),uL=n(je,"LI",{});var meo=s(uL);lke=n(meo,"STRONG",{});var w1a=s(lke);C_t=r(w1a,"bart"),w1a.forEach(t),w_t=r(meo," \u2014 "),ule=n(meo,"A",{href:!0});var A1a=s(ule);A_t=r(A1a,"FlaxBartForConditionalGeneration"),A1a.forEach(t),L_t=r(meo," (BART model)"),meo.forEach(t),y_t=i(je),pL=n(je,"LI",{});var feo=s(pL);ike=n(feo,"STRONG",{});var L1a=s(ike);x_t=r(L1a,"bert"),L1a.forEach(t),$_t=r(feo," \u2014 "),ple=n(feo,"A",{href:!0});var y1a=s(ple);k_t=r(y1a,"FlaxBertForMaskedLM"),y1a.forEach(t),S_t=r(feo," (BERT model)"),feo.forEach(t),R_t=i(je),_L=n(je,"LI",{});var geo=s(_L);dke=n(geo,"STRONG",{});var x1a=s(dke);P_t=r(x1a,"big_bird"),x1a.forEach(t),B_t=r(geo," \u2014 "),_le=n(geo,"A",{href:!0});var $1a=s(_le);I_t=r($1a,"FlaxBigBirdForMaskedLM"),$1a.forEach(t),N_t=r(geo," (BigBird model)"),geo.forEach(t),q_t=i(je),bL=n(je,"LI",{});var heo=s(bL);cke=n(heo,"STRONG",{});var k1a=s(cke);j_t=r(k1a,"distilbert"),k1a.forEach(t),D_t=r(heo," \u2014 "),ble=n(heo,"A",{href:!0});var S1a=s(ble);G_t=r(S1a,"FlaxDistilBertForMaskedLM"),S1a.forEach(t),O_t=r(heo," (DistilBERT model)"),heo.forEach(t),V_t=i(je),vL=n(je,"LI",{});var ueo=s(vL);mke=n(ueo,"STRONG",{});var R1a=s(mke);X_t=r(R1a,"electra"),R1a.forEach(t),z_t=r(ueo," \u2014 "),vle=n(ueo,"A",{href:!0});var P1a=s(vle);Q_t=r(P1a,"FlaxElectraForMaskedLM"),P1a.forEach(t),W_t=r(ueo," (ELECTRA model)"),ueo.forEach(t),U_t=i(je),FL=n(je,"LI",{});var peo=s(FL);fke=n(peo,"STRONG",{});var B1a=s(fke);H_t=r(B1a,"mbart"),B1a.forEach(t),J_t=r(peo," \u2014 "),Fle=n(peo,"A",{href:!0});var I1a=s(Fle);Y_t=r(I1a,"FlaxMBartForConditionalGeneration"),I1a.forEach(t),Z_t=r(peo," (mBART model)"),peo.forEach(t),K_t=i(je),TL=n(je,"LI",{});var _eo=s(TL);gke=n(_eo,"STRONG",{});var N1a=s(gke);e1t=r(N1a,"roberta"),N1a.forEach(t),o1t=r(_eo," \u2014 "),Tle=n(_eo,"A",{href:!0});var q1a=s(Tle);r1t=r(q1a,"FlaxRobertaForMaskedLM"),q1a.forEach(t),t1t=r(_eo," (RoBERTa model)"),_eo.forEach(t),a1t=i(je),ML=n(je,"LI",{});var beo=s(ML);hke=n(beo,"STRONG",{});var j1a=s(hke);n1t=r(j1a,"roformer"),j1a.forEach(t),s1t=r(beo," \u2014 "),Mle=n(beo,"A",{href:!0});var D1a=s(Mle);l1t=r(D1a,"FlaxRoFormerForMaskedLM"),D1a.forEach(t),i1t=r(beo," (RoFormer model)"),beo.forEach(t),d1t=i(je),EL=n(je,"LI",{});var veo=s(EL);uke=n(veo,"STRONG",{});var G1a=s(uke);c1t=r(G1a,"xlm-roberta"),G1a.forEach(t),m1t=r(veo," \u2014 "),Ele=n(veo,"A",{href:!0});var O1a=s(Ele);f1t=r(O1a,"FlaxXLMRobertaForMaskedLM"),O1a.forEach(t),g1t=r(veo," (XLM-RoBERTa model)"),veo.forEach(t),je.forEach(t),h1t=i(Qi),T(CL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),uto=i(m),nf=n(m,"H2",{class:!0});var Rno=s(nf);wL=n(Rno,"A",{id:!0,class:!0,href:!0});var V1a=s(wL);pke=n(V1a,"SPAN",{});var X1a=s(pke);T(TP.$$.fragment,X1a),X1a.forEach(t),V1a.forEach(t),u1t=i(Rno),_ke=n(Rno,"SPAN",{});var z1a=s(_ke);p1t=r(z1a,"FlaxAutoModelForSeq2SeqLM"),z1a.forEach(t),Rno.forEach(t),pto=i(m),yr=n(m,"DIV",{class:!0});var Wi=s(yr);T(MP.$$.fragment,Wi),_1t=i(Wi),sf=n(Wi,"P",{});var Pce=s(sf);b1t=r(Pce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cle=n(Pce,"A",{href:!0});var Q1a=s(Cle);v1t=r(Q1a,"from_pretrained()"),Q1a.forEach(t),F1t=r(Pce," class method or the "),wle=n(Pce,"A",{href:!0});var W1a=s(wle);T1t=r(W1a,"from_config()"),W1a.forEach(t),M1t=r(Pce,` class
method.`),Pce.forEach(t),E1t=i(Wi),EP=n(Wi,"P",{});var Pno=s(EP);C1t=r(Pno,"This class cannot be instantiated directly using "),bke=n(Pno,"CODE",{});var U1a=s(bke);w1t=r(U1a,"__init__()"),U1a.forEach(t),A1t=r(Pno," (throws an error)."),Pno.forEach(t),L1t=i(Wi),ga=n(Wi,"DIV",{class:!0});var ix=s(ga);T(CP.$$.fragment,ix),y1t=i(ix),vke=n(ix,"P",{});var H1a=s(vke);x1t=r(H1a,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H1a.forEach(t),$1t=i(ix),lf=n(ix,"P",{});var Bce=s(lf);k1t=r(Bce,`Note:
Loading a model from its configuration file does `),Fke=n(Bce,"STRONG",{});var J1a=s(Fke);S1t=r(J1a,"not"),J1a.forEach(t),R1t=r(Bce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=n(Bce,"A",{href:!0});var Y1a=s(Ale);P1t=r(Y1a,"from_pretrained()"),Y1a.forEach(t),B1t=r(Bce," to load the model weights."),Bce.forEach(t),I1t=i(ix),T(AL.$$.fragment,ix),ix.forEach(t),N1t=i(Wi),at=n(Wi,"DIV",{class:!0});var Ui=s(at);T(wP.$$.fragment,Ui),q1t=i(Ui),Tke=n(Ui,"P",{});var Z1a=s(Tke);j1t=r(Z1a,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z1a.forEach(t),D1t=i(Ui),Jn=n(Ui,"P",{});var dx=s(Jn);G1t=r(dx,"The model class to instantiate is selected based on the "),Mke=n(dx,"CODE",{});var K1a=s(Mke);O1t=r(K1a,"model_type"),K1a.forEach(t),V1t=r(dx,` property of the config object (either
passed as an argument or loaded from `),Eke=n(dx,"CODE",{});var e2a=s(Eke);X1t=r(e2a,"pretrained_model_name_or_path"),e2a.forEach(t),z1t=r(dx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cke=n(dx,"CODE",{});var o2a=s(Cke);Q1t=r(o2a,"pretrained_model_name_or_path"),o2a.forEach(t),W1t=r(dx,":"),dx.forEach(t),U1t=i(Ui),ke=n(Ui,"UL",{});var De=s(ke);LL=n(De,"LI",{});var Feo=s(LL);wke=n(Feo,"STRONG",{});var r2a=s(wke);H1t=r(r2a,"bart"),r2a.forEach(t),J1t=r(Feo," \u2014 "),Lle=n(Feo,"A",{href:!0});var t2a=s(Lle);Y1t=r(t2a,"FlaxBartForConditionalGeneration"),t2a.forEach(t),Z1t=r(Feo," (BART model)"),Feo.forEach(t),K1t=i(De),yL=n(De,"LI",{});var Teo=s(yL);Ake=n(Teo,"STRONG",{});var a2a=s(Ake);e2t=r(a2a,"blenderbot"),a2a.forEach(t),o2t=r(Teo," \u2014 "),yle=n(Teo,"A",{href:!0});var n2a=s(yle);r2t=r(n2a,"FlaxBlenderbotForConditionalGeneration"),n2a.forEach(t),t2t=r(Teo," (Blenderbot model)"),Teo.forEach(t),a2t=i(De),xL=n(De,"LI",{});var Meo=s(xL);Lke=n(Meo,"STRONG",{});var s2a=s(Lke);n2t=r(s2a,"blenderbot-small"),s2a.forEach(t),s2t=r(Meo," \u2014 "),xle=n(Meo,"A",{href:!0});var l2a=s(xle);l2t=r(l2a,"FlaxBlenderbotSmallForConditionalGeneration"),l2a.forEach(t),i2t=r(Meo," (BlenderbotSmall model)"),Meo.forEach(t),d2t=i(De),$L=n(De,"LI",{});var Eeo=s($L);yke=n(Eeo,"STRONG",{});var i2a=s(yke);c2t=r(i2a,"encoder-decoder"),i2a.forEach(t),m2t=r(Eeo," \u2014 "),$le=n(Eeo,"A",{href:!0});var d2a=s($le);f2t=r(d2a,"FlaxEncoderDecoderModel"),d2a.forEach(t),g2t=r(Eeo," (Encoder decoder model)"),Eeo.forEach(t),h2t=i(De),kL=n(De,"LI",{});var Ceo=s(kL);xke=n(Ceo,"STRONG",{});var c2a=s(xke);u2t=r(c2a,"longt5"),c2a.forEach(t),p2t=r(Ceo," \u2014 "),kle=n(Ceo,"A",{href:!0});var m2a=s(kle);_2t=r(m2a,"FlaxLongT5ForConditionalGeneration"),m2a.forEach(t),b2t=r(Ceo," (LongT5 model)"),Ceo.forEach(t),v2t=i(De),SL=n(De,"LI",{});var weo=s(SL);$ke=n(weo,"STRONG",{});var f2a=s($ke);F2t=r(f2a,"marian"),f2a.forEach(t),T2t=r(weo," \u2014 "),Sle=n(weo,"A",{href:!0});var g2a=s(Sle);M2t=r(g2a,"FlaxMarianMTModel"),g2a.forEach(t),E2t=r(weo," (Marian model)"),weo.forEach(t),C2t=i(De),RL=n(De,"LI",{});var Aeo=s(RL);kke=n(Aeo,"STRONG",{});var h2a=s(kke);w2t=r(h2a,"mbart"),h2a.forEach(t),A2t=r(Aeo," \u2014 "),Rle=n(Aeo,"A",{href:!0});var u2a=s(Rle);L2t=r(u2a,"FlaxMBartForConditionalGeneration"),u2a.forEach(t),y2t=r(Aeo," (mBART model)"),Aeo.forEach(t),x2t=i(De),PL=n(De,"LI",{});var Leo=s(PL);Ske=n(Leo,"STRONG",{});var p2a=s(Ske);$2t=r(p2a,"mt5"),p2a.forEach(t),k2t=r(Leo," \u2014 "),Ple=n(Leo,"A",{href:!0});var _2a=s(Ple);S2t=r(_2a,"FlaxMT5ForConditionalGeneration"),_2a.forEach(t),R2t=r(Leo," (MT5 model)"),Leo.forEach(t),P2t=i(De),BL=n(De,"LI",{});var yeo=s(BL);Rke=n(yeo,"STRONG",{});var b2a=s(Rke);B2t=r(b2a,"pegasus"),b2a.forEach(t),I2t=r(yeo," \u2014 "),Ble=n(yeo,"A",{href:!0});var v2a=s(Ble);N2t=r(v2a,"FlaxPegasusForConditionalGeneration"),v2a.forEach(t),q2t=r(yeo," (Pegasus model)"),yeo.forEach(t),j2t=i(De),IL=n(De,"LI",{});var xeo=s(IL);Pke=n(xeo,"STRONG",{});var F2a=s(Pke);D2t=r(F2a,"t5"),F2a.forEach(t),G2t=r(xeo," \u2014 "),Ile=n(xeo,"A",{href:!0});var T2a=s(Ile);O2t=r(T2a,"FlaxT5ForConditionalGeneration"),T2a.forEach(t),V2t=r(xeo," (T5 model)"),xeo.forEach(t),De.forEach(t),X2t=i(Ui),T(NL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),_to=i(m),df=n(m,"H2",{class:!0});var Bno=s(df);qL=n(Bno,"A",{id:!0,class:!0,href:!0});var M2a=s(qL);Bke=n(M2a,"SPAN",{});var E2a=s(Bke);T(AP.$$.fragment,E2a),E2a.forEach(t),M2a.forEach(t),z2t=i(Bno),Ike=n(Bno,"SPAN",{});var C2a=s(Ike);Q2t=r(C2a,"FlaxAutoModelForSequenceClassification"),C2a.forEach(t),Bno.forEach(t),bto=i(m),xr=n(m,"DIV",{class:!0});var Hi=s(xr);T(LP.$$.fragment,Hi),W2t=i(Hi),cf=n(Hi,"P",{});var Ice=s(cf);U2t=r(Ice,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nle=n(Ice,"A",{href:!0});var w2a=s(Nle);H2t=r(w2a,"from_pretrained()"),w2a.forEach(t),J2t=r(Ice," class method or the "),qle=n(Ice,"A",{href:!0});var A2a=s(qle);Y2t=r(A2a,"from_config()"),A2a.forEach(t),Z2t=r(Ice,` class
method.`),Ice.forEach(t),K2t=i(Hi),yP=n(Hi,"P",{});var Ino=s(yP);ebt=r(Ino,"This class cannot be instantiated directly using "),Nke=n(Ino,"CODE",{});var L2a=s(Nke);obt=r(L2a,"__init__()"),L2a.forEach(t),rbt=r(Ino," (throws an error)."),Ino.forEach(t),tbt=i(Hi),ha=n(Hi,"DIV",{class:!0});var cx=s(ha);T(xP.$$.fragment,cx),abt=i(cx),qke=n(cx,"P",{});var y2a=s(qke);nbt=r(y2a,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y2a.forEach(t),sbt=i(cx),mf=n(cx,"P",{});var Nce=s(mf);lbt=r(Nce,`Note:
Loading a model from its configuration file does `),jke=n(Nce,"STRONG",{});var x2a=s(jke);ibt=r(x2a,"not"),x2a.forEach(t),dbt=r(Nce,` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=n(Nce,"A",{href:!0});var $2a=s(jle);cbt=r($2a,"from_pretrained()"),$2a.forEach(t),mbt=r(Nce," to load the model weights."),Nce.forEach(t),fbt=i(cx),T(jL.$$.fragment,cx),cx.forEach(t),gbt=i(Hi),nt=n(Hi,"DIV",{class:!0});var Ji=s(nt);T($P.$$.fragment,Ji),hbt=i(Ji),Dke=n(Ji,"P",{});var k2a=s(Dke);ubt=r(k2a,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k2a.forEach(t),pbt=i(Ji),Yn=n(Ji,"P",{});var mx=s(Yn);_bt=r(mx,"The model class to instantiate is selected based on the "),Gke=n(mx,"CODE",{});var S2a=s(Gke);bbt=r(S2a,"model_type"),S2a.forEach(t),vbt=r(mx,` property of the config object (either
passed as an argument or loaded from `),Oke=n(mx,"CODE",{});var R2a=s(Oke);Fbt=r(R2a,"pretrained_model_name_or_path"),R2a.forEach(t),Tbt=r(mx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vke=n(mx,"CODE",{});var P2a=s(Vke);Mbt=r(P2a,"pretrained_model_name_or_path"),P2a.forEach(t),Ebt=r(mx,":"),mx.forEach(t),Cbt=i(Ji),Se=n(Ji,"UL",{});var Ge=s(Se);DL=n(Ge,"LI",{});var $eo=s(DL);Xke=n($eo,"STRONG",{});var B2a=s(Xke);wbt=r(B2a,"albert"),B2a.forEach(t),Abt=r($eo," \u2014 "),Dle=n($eo,"A",{href:!0});var I2a=s(Dle);Lbt=r(I2a,"FlaxAlbertForSequenceClassification"),I2a.forEach(t),ybt=r($eo," (ALBERT model)"),$eo.forEach(t),xbt=i(Ge),GL=n(Ge,"LI",{});var keo=s(GL);zke=n(keo,"STRONG",{});var N2a=s(zke);$bt=r(N2a,"bart"),N2a.forEach(t),kbt=r(keo," \u2014 "),Gle=n(keo,"A",{href:!0});var q2a=s(Gle);Sbt=r(q2a,"FlaxBartForSequenceClassification"),q2a.forEach(t),Rbt=r(keo," (BART model)"),keo.forEach(t),Pbt=i(Ge),OL=n(Ge,"LI",{});var Seo=s(OL);Qke=n(Seo,"STRONG",{});var j2a=s(Qke);Bbt=r(j2a,"bert"),j2a.forEach(t),Ibt=r(Seo," \u2014 "),Ole=n(Seo,"A",{href:!0});var D2a=s(Ole);Nbt=r(D2a,"FlaxBertForSequenceClassification"),D2a.forEach(t),qbt=r(Seo," (BERT model)"),Seo.forEach(t),jbt=i(Ge),VL=n(Ge,"LI",{});var Reo=s(VL);Wke=n(Reo,"STRONG",{});var G2a=s(Wke);Dbt=r(G2a,"big_bird"),G2a.forEach(t),Gbt=r(Reo," \u2014 "),Vle=n(Reo,"A",{href:!0});var O2a=s(Vle);Obt=r(O2a,"FlaxBigBirdForSequenceClassification"),O2a.forEach(t),Vbt=r(Reo," (BigBird model)"),Reo.forEach(t),Xbt=i(Ge),XL=n(Ge,"LI",{});var Peo=s(XL);Uke=n(Peo,"STRONG",{});var V2a=s(Uke);zbt=r(V2a,"distilbert"),V2a.forEach(t),Qbt=r(Peo," \u2014 "),Xle=n(Peo,"A",{href:!0});var X2a=s(Xle);Wbt=r(X2a,"FlaxDistilBertForSequenceClassification"),X2a.forEach(t),Ubt=r(Peo," (DistilBERT model)"),Peo.forEach(t),Hbt=i(Ge),zL=n(Ge,"LI",{});var Beo=s(zL);Hke=n(Beo,"STRONG",{});var z2a=s(Hke);Jbt=r(z2a,"electra"),z2a.forEach(t),Ybt=r(Beo," \u2014 "),zle=n(Beo,"A",{href:!0});var Q2a=s(zle);Zbt=r(Q2a,"FlaxElectraForSequenceClassification"),Q2a.forEach(t),Kbt=r(Beo," (ELECTRA model)"),Beo.forEach(t),evt=i(Ge),QL=n(Ge,"LI",{});var Ieo=s(QL);Jke=n(Ieo,"STRONG",{});var W2a=s(Jke);ovt=r(W2a,"mbart"),W2a.forEach(t),rvt=r(Ieo," \u2014 "),Qle=n(Ieo,"A",{href:!0});var U2a=s(Qle);tvt=r(U2a,"FlaxMBartForSequenceClassification"),U2a.forEach(t),avt=r(Ieo," (mBART model)"),Ieo.forEach(t),nvt=i(Ge),WL=n(Ge,"LI",{});var Neo=s(WL);Yke=n(Neo,"STRONG",{});var H2a=s(Yke);svt=r(H2a,"roberta"),H2a.forEach(t),lvt=r(Neo," \u2014 "),Wle=n(Neo,"A",{href:!0});var J2a=s(Wle);ivt=r(J2a,"FlaxRobertaForSequenceClassification"),J2a.forEach(t),dvt=r(Neo," (RoBERTa model)"),Neo.forEach(t),cvt=i(Ge),UL=n(Ge,"LI",{});var qeo=s(UL);Zke=n(qeo,"STRONG",{});var Y2a=s(Zke);mvt=r(Y2a,"roformer"),Y2a.forEach(t),fvt=r(qeo," \u2014 "),Ule=n(qeo,"A",{href:!0});var Z2a=s(Ule);gvt=r(Z2a,"FlaxRoFormerForSequenceClassification"),Z2a.forEach(t),hvt=r(qeo," (RoFormer model)"),qeo.forEach(t),uvt=i(Ge),HL=n(Ge,"LI",{});var jeo=s(HL);Kke=n(jeo,"STRONG",{});var K2a=s(Kke);pvt=r(K2a,"xlm-roberta"),K2a.forEach(t),_vt=r(jeo," \u2014 "),Hle=n(jeo,"A",{href:!0});var eba=s(Hle);bvt=r(eba,"FlaxXLMRobertaForSequenceClassification"),eba.forEach(t),vvt=r(jeo," (XLM-RoBERTa model)"),jeo.forEach(t),Ge.forEach(t),Fvt=i(Ji),T(JL.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),vto=i(m),ff=n(m,"H2",{class:!0});var Nno=s(ff);YL=n(Nno,"A",{id:!0,class:!0,href:!0});var oba=s(YL);eSe=n(oba,"SPAN",{});var rba=s(eSe);T(kP.$$.fragment,rba),rba.forEach(t),oba.forEach(t),Tvt=i(Nno),oSe=n(Nno,"SPAN",{});var tba=s(oSe);Mvt=r(tba,"FlaxAutoModelForQuestionAnswering"),tba.forEach(t),Nno.forEach(t),Fto=i(m),$r=n(m,"DIV",{class:!0});var Yi=s($r);T(SP.$$.fragment,Yi),Evt=i(Yi),gf=n(Yi,"P",{});var qce=s(gf);Cvt=r(qce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jle=n(qce,"A",{href:!0});var aba=s(Jle);wvt=r(aba,"from_pretrained()"),aba.forEach(t),Avt=r(qce," class method or the "),Yle=n(qce,"A",{href:!0});var nba=s(Yle);Lvt=r(nba,"from_config()"),nba.forEach(t),yvt=r(qce,` class
method.`),qce.forEach(t),xvt=i(Yi),RP=n(Yi,"P",{});var qno=s(RP);$vt=r(qno,"This class cannot be instantiated directly using "),rSe=n(qno,"CODE",{});var sba=s(rSe);kvt=r(sba,"__init__()"),sba.forEach(t),Svt=r(qno," (throws an error)."),qno.forEach(t),Rvt=i(Yi),ua=n(Yi,"DIV",{class:!0});var fx=s(ua);T(PP.$$.fragment,fx),Pvt=i(fx),tSe=n(fx,"P",{});var lba=s(tSe);Bvt=r(lba,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lba.forEach(t),Ivt=i(fx),hf=n(fx,"P",{});var jce=s(hf);Nvt=r(jce,`Note:
Loading a model from its configuration file does `),aSe=n(jce,"STRONG",{});var iba=s(aSe);qvt=r(iba,"not"),iba.forEach(t),jvt=r(jce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zle=n(jce,"A",{href:!0});var dba=s(Zle);Dvt=r(dba,"from_pretrained()"),dba.forEach(t),Gvt=r(jce," to load the model weights."),jce.forEach(t),Ovt=i(fx),T(ZL.$$.fragment,fx),fx.forEach(t),Vvt=i(Yi),st=n(Yi,"DIV",{class:!0});var Zi=s(st);T(BP.$$.fragment,Zi),Xvt=i(Zi),nSe=n(Zi,"P",{});var cba=s(nSe);zvt=r(cba,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cba.forEach(t),Qvt=i(Zi),Zn=n(Zi,"P",{});var gx=s(Zn);Wvt=r(gx,"The model class to instantiate is selected based on the "),sSe=n(gx,"CODE",{});var mba=s(sSe);Uvt=r(mba,"model_type"),mba.forEach(t),Hvt=r(gx,` property of the config object (either
passed as an argument or loaded from `),lSe=n(gx,"CODE",{});var fba=s(lSe);Jvt=r(fba,"pretrained_model_name_or_path"),fba.forEach(t),Yvt=r(gx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iSe=n(gx,"CODE",{});var gba=s(iSe);Zvt=r(gba,"pretrained_model_name_or_path"),gba.forEach(t),Kvt=r(gx,":"),gx.forEach(t),eFt=i(Zi),Re=n(Zi,"UL",{});var Oe=s(Re);KL=n(Oe,"LI",{});var Deo=s(KL);dSe=n(Deo,"STRONG",{});var hba=s(dSe);oFt=r(hba,"albert"),hba.forEach(t),rFt=r(Deo," \u2014 "),Kle=n(Deo,"A",{href:!0});var uba=s(Kle);tFt=r(uba,"FlaxAlbertForQuestionAnswering"),uba.forEach(t),aFt=r(Deo," (ALBERT model)"),Deo.forEach(t),nFt=i(Oe),e8=n(Oe,"LI",{});var Geo=s(e8);cSe=n(Geo,"STRONG",{});var pba=s(cSe);sFt=r(pba,"bart"),pba.forEach(t),lFt=r(Geo," \u2014 "),eie=n(Geo,"A",{href:!0});var _ba=s(eie);iFt=r(_ba,"FlaxBartForQuestionAnswering"),_ba.forEach(t),dFt=r(Geo," (BART model)"),Geo.forEach(t),cFt=i(Oe),o8=n(Oe,"LI",{});var Oeo=s(o8);mSe=n(Oeo,"STRONG",{});var bba=s(mSe);mFt=r(bba,"bert"),bba.forEach(t),fFt=r(Oeo," \u2014 "),oie=n(Oeo,"A",{href:!0});var vba=s(oie);gFt=r(vba,"FlaxBertForQuestionAnswering"),vba.forEach(t),hFt=r(Oeo," (BERT model)"),Oeo.forEach(t),uFt=i(Oe),r8=n(Oe,"LI",{});var Veo=s(r8);fSe=n(Veo,"STRONG",{});var Fba=s(fSe);pFt=r(Fba,"big_bird"),Fba.forEach(t),_Ft=r(Veo," \u2014 "),rie=n(Veo,"A",{href:!0});var Tba=s(rie);bFt=r(Tba,"FlaxBigBirdForQuestionAnswering"),Tba.forEach(t),vFt=r(Veo," (BigBird model)"),Veo.forEach(t),FFt=i(Oe),t8=n(Oe,"LI",{});var Xeo=s(t8);gSe=n(Xeo,"STRONG",{});var Mba=s(gSe);TFt=r(Mba,"distilbert"),Mba.forEach(t),MFt=r(Xeo," \u2014 "),tie=n(Xeo,"A",{href:!0});var Eba=s(tie);EFt=r(Eba,"FlaxDistilBertForQuestionAnswering"),Eba.forEach(t),CFt=r(Xeo," (DistilBERT model)"),Xeo.forEach(t),wFt=i(Oe),a8=n(Oe,"LI",{});var zeo=s(a8);hSe=n(zeo,"STRONG",{});var Cba=s(hSe);AFt=r(Cba,"electra"),Cba.forEach(t),LFt=r(zeo," \u2014 "),aie=n(zeo,"A",{href:!0});var wba=s(aie);yFt=r(wba,"FlaxElectraForQuestionAnswering"),wba.forEach(t),xFt=r(zeo," (ELECTRA model)"),zeo.forEach(t),$Ft=i(Oe),n8=n(Oe,"LI",{});var Qeo=s(n8);uSe=n(Qeo,"STRONG",{});var Aba=s(uSe);kFt=r(Aba,"mbart"),Aba.forEach(t),SFt=r(Qeo," \u2014 "),nie=n(Qeo,"A",{href:!0});var Lba=s(nie);RFt=r(Lba,"FlaxMBartForQuestionAnswering"),Lba.forEach(t),PFt=r(Qeo," (mBART model)"),Qeo.forEach(t),BFt=i(Oe),s8=n(Oe,"LI",{});var Weo=s(s8);pSe=n(Weo,"STRONG",{});var yba=s(pSe);IFt=r(yba,"roberta"),yba.forEach(t),NFt=r(Weo," \u2014 "),sie=n(Weo,"A",{href:!0});var xba=s(sie);qFt=r(xba,"FlaxRobertaForQuestionAnswering"),xba.forEach(t),jFt=r(Weo," (RoBERTa model)"),Weo.forEach(t),DFt=i(Oe),l8=n(Oe,"LI",{});var Ueo=s(l8);_Se=n(Ueo,"STRONG",{});var $ba=s(_Se);GFt=r($ba,"roformer"),$ba.forEach(t),OFt=r(Ueo," \u2014 "),lie=n(Ueo,"A",{href:!0});var kba=s(lie);VFt=r(kba,"FlaxRoFormerForQuestionAnswering"),kba.forEach(t),XFt=r(Ueo," (RoFormer model)"),Ueo.forEach(t),zFt=i(Oe),i8=n(Oe,"LI",{});var Heo=s(i8);bSe=n(Heo,"STRONG",{});var Sba=s(bSe);QFt=r(Sba,"xlm-roberta"),Sba.forEach(t),WFt=r(Heo," \u2014 "),iie=n(Heo,"A",{href:!0});var Rba=s(iie);UFt=r(Rba,"FlaxXLMRobertaForQuestionAnswering"),Rba.forEach(t),HFt=r(Heo," (XLM-RoBERTa model)"),Heo.forEach(t),Oe.forEach(t),JFt=i(Zi),T(d8.$$.fragment,Zi),Zi.forEach(t),Yi.forEach(t),Tto=i(m),uf=n(m,"H2",{class:!0});var jno=s(uf);c8=n(jno,"A",{id:!0,class:!0,href:!0});var Pba=s(c8);vSe=n(Pba,"SPAN",{});var Bba=s(vSe);T(IP.$$.fragment,Bba),Bba.forEach(t),Pba.forEach(t),YFt=i(jno),FSe=n(jno,"SPAN",{});var Iba=s(FSe);ZFt=r(Iba,"FlaxAutoModelForTokenClassification"),Iba.forEach(t),jno.forEach(t),Mto=i(m),kr=n(m,"DIV",{class:!0});var Ki=s(kr);T(NP.$$.fragment,Ki),KFt=i(Ki),pf=n(Ki,"P",{});var Dce=s(pf);eTt=r(Dce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),die=n(Dce,"A",{href:!0});var Nba=s(die);oTt=r(Nba,"from_pretrained()"),Nba.forEach(t),rTt=r(Dce," class method or the "),cie=n(Dce,"A",{href:!0});var qba=s(cie);tTt=r(qba,"from_config()"),qba.forEach(t),aTt=r(Dce,` class
method.`),Dce.forEach(t),nTt=i(Ki),qP=n(Ki,"P",{});var Dno=s(qP);sTt=r(Dno,"This class cannot be instantiated directly using "),TSe=n(Dno,"CODE",{});var jba=s(TSe);lTt=r(jba,"__init__()"),jba.forEach(t),iTt=r(Dno," (throws an error)."),Dno.forEach(t),dTt=i(Ki),pa=n(Ki,"DIV",{class:!0});var hx=s(pa);T(jP.$$.fragment,hx),cTt=i(hx),MSe=n(hx,"P",{});var Dba=s(MSe);mTt=r(Dba,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dba.forEach(t),fTt=i(hx),_f=n(hx,"P",{});var Gce=s(_f);gTt=r(Gce,`Note:
Loading a model from its configuration file does `),ESe=n(Gce,"STRONG",{});var Gba=s(ESe);hTt=r(Gba,"not"),Gba.forEach(t),uTt=r(Gce,` load the model weights. It only affects the
model\u2019s configuration. Use `),mie=n(Gce,"A",{href:!0});var Oba=s(mie);pTt=r(Oba,"from_pretrained()"),Oba.forEach(t),_Tt=r(Gce," to load the model weights."),Gce.forEach(t),bTt=i(hx),T(m8.$$.fragment,hx),hx.forEach(t),vTt=i(Ki),lt=n(Ki,"DIV",{class:!0});var ed=s(lt);T(DP.$$.fragment,ed),FTt=i(ed),CSe=n(ed,"P",{});var Vba=s(CSe);TTt=r(Vba,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vba.forEach(t),MTt=i(ed),Kn=n(ed,"P",{});var ux=s(Kn);ETt=r(ux,"The model class to instantiate is selected based on the "),wSe=n(ux,"CODE",{});var Xba=s(wSe);CTt=r(Xba,"model_type"),Xba.forEach(t),wTt=r(ux,` property of the config object (either
passed as an argument or loaded from `),ASe=n(ux,"CODE",{});var zba=s(ASe);ATt=r(zba,"pretrained_model_name_or_path"),zba.forEach(t),LTt=r(ux,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LSe=n(ux,"CODE",{});var Qba=s(LSe);yTt=r(Qba,"pretrained_model_name_or_path"),Qba.forEach(t),xTt=r(ux,":"),ux.forEach(t),$Tt=i(ed),Xe=n(ed,"UL",{});var Lo=s(Xe);f8=n(Lo,"LI",{});var Jeo=s(f8);ySe=n(Jeo,"STRONG",{});var Wba=s(ySe);kTt=r(Wba,"albert"),Wba.forEach(t),STt=r(Jeo," \u2014 "),fie=n(Jeo,"A",{href:!0});var Uba=s(fie);RTt=r(Uba,"FlaxAlbertForTokenClassification"),Uba.forEach(t),PTt=r(Jeo," (ALBERT model)"),Jeo.forEach(t),BTt=i(Lo),g8=n(Lo,"LI",{});var Yeo=s(g8);xSe=n(Yeo,"STRONG",{});var Hba=s(xSe);ITt=r(Hba,"bert"),Hba.forEach(t),NTt=r(Yeo," \u2014 "),gie=n(Yeo,"A",{href:!0});var Jba=s(gie);qTt=r(Jba,"FlaxBertForTokenClassification"),Jba.forEach(t),jTt=r(Yeo," (BERT model)"),Yeo.forEach(t),DTt=i(Lo),h8=n(Lo,"LI",{});var Zeo=s(h8);$Se=n(Zeo,"STRONG",{});var Yba=s($Se);GTt=r(Yba,"big_bird"),Yba.forEach(t),OTt=r(Zeo," \u2014 "),hie=n(Zeo,"A",{href:!0});var Zba=s(hie);VTt=r(Zba,"FlaxBigBirdForTokenClassification"),Zba.forEach(t),XTt=r(Zeo," (BigBird model)"),Zeo.forEach(t),zTt=i(Lo),u8=n(Lo,"LI",{});var Keo=s(u8);kSe=n(Keo,"STRONG",{});var Kba=s(kSe);QTt=r(Kba,"distilbert"),Kba.forEach(t),WTt=r(Keo," \u2014 "),uie=n(Keo,"A",{href:!0});var eva=s(uie);UTt=r(eva,"FlaxDistilBertForTokenClassification"),eva.forEach(t),HTt=r(Keo," (DistilBERT model)"),Keo.forEach(t),JTt=i(Lo),p8=n(Lo,"LI",{});var eoo=s(p8);SSe=n(eoo,"STRONG",{});var ova=s(SSe);YTt=r(ova,"electra"),ova.forEach(t),ZTt=r(eoo," \u2014 "),pie=n(eoo,"A",{href:!0});var rva=s(pie);KTt=r(rva,"FlaxElectraForTokenClassification"),rva.forEach(t),eMt=r(eoo," (ELECTRA model)"),eoo.forEach(t),oMt=i(Lo),_8=n(Lo,"LI",{});var ooo=s(_8);RSe=n(ooo,"STRONG",{});var tva=s(RSe);rMt=r(tva,"roberta"),tva.forEach(t),tMt=r(ooo," \u2014 "),_ie=n(ooo,"A",{href:!0});var ava=s(_ie);aMt=r(ava,"FlaxRobertaForTokenClassification"),ava.forEach(t),nMt=r(ooo," (RoBERTa model)"),ooo.forEach(t),sMt=i(Lo),b8=n(Lo,"LI",{});var roo=s(b8);PSe=n(roo,"STRONG",{});var nva=s(PSe);lMt=r(nva,"roformer"),nva.forEach(t),iMt=r(roo," \u2014 "),bie=n(roo,"A",{href:!0});var sva=s(bie);dMt=r(sva,"FlaxRoFormerForTokenClassification"),sva.forEach(t),cMt=r(roo," (RoFormer model)"),roo.forEach(t),mMt=i(Lo),v8=n(Lo,"LI",{});var too=s(v8);BSe=n(too,"STRONG",{});var lva=s(BSe);fMt=r(lva,"xlm-roberta"),lva.forEach(t),gMt=r(too," \u2014 "),vie=n(too,"A",{href:!0});var iva=s(vie);hMt=r(iva,"FlaxXLMRobertaForTokenClassification"),iva.forEach(t),uMt=r(too," (XLM-RoBERTa model)"),too.forEach(t),Lo.forEach(t),pMt=i(ed),T(F8.$$.fragment,ed),ed.forEach(t),Ki.forEach(t),Eto=i(m),bf=n(m,"H2",{class:!0});var Gno=s(bf);T8=n(Gno,"A",{id:!0,class:!0,href:!0});var dva=s(T8);ISe=n(dva,"SPAN",{});var cva=s(ISe);T(GP.$$.fragment,cva),cva.forEach(t),dva.forEach(t),_Mt=i(Gno),NSe=n(Gno,"SPAN",{});var mva=s(NSe);bMt=r(mva,"FlaxAutoModelForMultipleChoice"),mva.forEach(t),Gno.forEach(t),Cto=i(m),Sr=n(m,"DIV",{class:!0});var od=s(Sr);T(OP.$$.fragment,od),vMt=i(od),vf=n(od,"P",{});var Oce=s(vf);FMt=r(Oce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fie=n(Oce,"A",{href:!0});var fva=s(Fie);TMt=r(fva,"from_pretrained()"),fva.forEach(t),MMt=r(Oce," class method or the "),Tie=n(Oce,"A",{href:!0});var gva=s(Tie);EMt=r(gva,"from_config()"),gva.forEach(t),CMt=r(Oce,` class
method.`),Oce.forEach(t),wMt=i(od),VP=n(od,"P",{});var Ono=s(VP);AMt=r(Ono,"This class cannot be instantiated directly using "),qSe=n(Ono,"CODE",{});var hva=s(qSe);LMt=r(hva,"__init__()"),hva.forEach(t),yMt=r(Ono," (throws an error)."),Ono.forEach(t),xMt=i(od),_a=n(od,"DIV",{class:!0});var px=s(_a);T(XP.$$.fragment,px),$Mt=i(px),jSe=n(px,"P",{});var uva=s(jSe);kMt=r(uva,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uva.forEach(t),SMt=i(px),Ff=n(px,"P",{});var Vce=s(Ff);RMt=r(Vce,`Note:
Loading a model from its configuration file does `),DSe=n(Vce,"STRONG",{});var pva=s(DSe);PMt=r(pva,"not"),pva.forEach(t),BMt=r(Vce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=n(Vce,"A",{href:!0});var _va=s(Mie);IMt=r(_va,"from_pretrained()"),_va.forEach(t),NMt=r(Vce," to load the model weights."),Vce.forEach(t),qMt=i(px),T(M8.$$.fragment,px),px.forEach(t),jMt=i(od),it=n(od,"DIV",{class:!0});var rd=s(it);T(zP.$$.fragment,rd),DMt=i(rd),GSe=n(rd,"P",{});var bva=s(GSe);GMt=r(bva,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bva.forEach(t),OMt=i(rd),es=n(rd,"P",{});var _x=s(es);VMt=r(_x,"The model class to instantiate is selected based on the "),OSe=n(_x,"CODE",{});var vva=s(OSe);XMt=r(vva,"model_type"),vva.forEach(t),zMt=r(_x,` property of the config object (either
passed as an argument or loaded from `),VSe=n(_x,"CODE",{});var Fva=s(VSe);QMt=r(Fva,"pretrained_model_name_or_path"),Fva.forEach(t),WMt=r(_x,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XSe=n(_x,"CODE",{});var Tva=s(XSe);UMt=r(Tva,"pretrained_model_name_or_path"),Tva.forEach(t),HMt=r(_x,":"),_x.forEach(t),JMt=i(rd),ze=n(rd,"UL",{});var yo=s(ze);E8=n(yo,"LI",{});var aoo=s(E8);zSe=n(aoo,"STRONG",{});var Mva=s(zSe);YMt=r(Mva,"albert"),Mva.forEach(t),ZMt=r(aoo," \u2014 "),Eie=n(aoo,"A",{href:!0});var Eva=s(Eie);KMt=r(Eva,"FlaxAlbertForMultipleChoice"),Eva.forEach(t),eEt=r(aoo," (ALBERT model)"),aoo.forEach(t),oEt=i(yo),C8=n(yo,"LI",{});var noo=s(C8);QSe=n(noo,"STRONG",{});var Cva=s(QSe);rEt=r(Cva,"bert"),Cva.forEach(t),tEt=r(noo," \u2014 "),Cie=n(noo,"A",{href:!0});var wva=s(Cie);aEt=r(wva,"FlaxBertForMultipleChoice"),wva.forEach(t),nEt=r(noo," (BERT model)"),noo.forEach(t),sEt=i(yo),w8=n(yo,"LI",{});var soo=s(w8);WSe=n(soo,"STRONG",{});var Ava=s(WSe);lEt=r(Ava,"big_bird"),Ava.forEach(t),iEt=r(soo," \u2014 "),wie=n(soo,"A",{href:!0});var Lva=s(wie);dEt=r(Lva,"FlaxBigBirdForMultipleChoice"),Lva.forEach(t),cEt=r(soo," (BigBird model)"),soo.forEach(t),mEt=i(yo),A8=n(yo,"LI",{});var loo=s(A8);USe=n(loo,"STRONG",{});var yva=s(USe);fEt=r(yva,"distilbert"),yva.forEach(t),gEt=r(loo," \u2014 "),Aie=n(loo,"A",{href:!0});var xva=s(Aie);hEt=r(xva,"FlaxDistilBertForMultipleChoice"),xva.forEach(t),uEt=r(loo," (DistilBERT model)"),loo.forEach(t),pEt=i(yo),L8=n(yo,"LI",{});var ioo=s(L8);HSe=n(ioo,"STRONG",{});var $va=s(HSe);_Et=r($va,"electra"),$va.forEach(t),bEt=r(ioo," \u2014 "),Lie=n(ioo,"A",{href:!0});var kva=s(Lie);vEt=r(kva,"FlaxElectraForMultipleChoice"),kva.forEach(t),FEt=r(ioo," (ELECTRA model)"),ioo.forEach(t),TEt=i(yo),y8=n(yo,"LI",{});var doo=s(y8);JSe=n(doo,"STRONG",{});var Sva=s(JSe);MEt=r(Sva,"roberta"),Sva.forEach(t),EEt=r(doo," \u2014 "),yie=n(doo,"A",{href:!0});var Rva=s(yie);CEt=r(Rva,"FlaxRobertaForMultipleChoice"),Rva.forEach(t),wEt=r(doo," (RoBERTa model)"),doo.forEach(t),AEt=i(yo),x8=n(yo,"LI",{});var coo=s(x8);YSe=n(coo,"STRONG",{});var Pva=s(YSe);LEt=r(Pva,"roformer"),Pva.forEach(t),yEt=r(coo," \u2014 "),xie=n(coo,"A",{href:!0});var Bva=s(xie);xEt=r(Bva,"FlaxRoFormerForMultipleChoice"),Bva.forEach(t),$Et=r(coo," (RoFormer model)"),coo.forEach(t),kEt=i(yo),$8=n(yo,"LI",{});var moo=s($8);ZSe=n(moo,"STRONG",{});var Iva=s(ZSe);SEt=r(Iva,"xlm-roberta"),Iva.forEach(t),REt=r(moo," \u2014 "),$ie=n(moo,"A",{href:!0});var Nva=s($ie);PEt=r(Nva,"FlaxXLMRobertaForMultipleChoice"),Nva.forEach(t),BEt=r(moo," (XLM-RoBERTa model)"),moo.forEach(t),yo.forEach(t),IEt=i(rd),T(k8.$$.fragment,rd),rd.forEach(t),od.forEach(t),wto=i(m),Tf=n(m,"H2",{class:!0});var Vno=s(Tf);S8=n(Vno,"A",{id:!0,class:!0,href:!0});var qva=s(S8);KSe=n(qva,"SPAN",{});var jva=s(KSe);T(QP.$$.fragment,jva),jva.forEach(t),qva.forEach(t),NEt=i(Vno),eRe=n(Vno,"SPAN",{});var Dva=s(eRe);qEt=r(Dva,"FlaxAutoModelForNextSentencePrediction"),Dva.forEach(t),Vno.forEach(t),Ato=i(m),Rr=n(m,"DIV",{class:!0});var td=s(Rr);T(WP.$$.fragment,td),jEt=i(td),Mf=n(td,"P",{});var Xce=s(Mf);DEt=r(Xce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kie=n(Xce,"A",{href:!0});var Gva=s(kie);GEt=r(Gva,"from_pretrained()"),Gva.forEach(t),OEt=r(Xce," class method or the "),Sie=n(Xce,"A",{href:!0});var Ova=s(Sie);VEt=r(Ova,"from_config()"),Ova.forEach(t),XEt=r(Xce,` class
method.`),Xce.forEach(t),zEt=i(td),UP=n(td,"P",{});var Xno=s(UP);QEt=r(Xno,"This class cannot be instantiated directly using "),oRe=n(Xno,"CODE",{});var Vva=s(oRe);WEt=r(Vva,"__init__()"),Vva.forEach(t),UEt=r(Xno," (throws an error)."),Xno.forEach(t),HEt=i(td),ba=n(td,"DIV",{class:!0});var bx=s(ba);T(HP.$$.fragment,bx),JEt=i(bx),rRe=n(bx,"P",{});var Xva=s(rRe);YEt=r(Xva,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xva.forEach(t),ZEt=i(bx),Ef=n(bx,"P",{});var zce=s(Ef);KEt=r(zce,`Note:
Loading a model from its configuration file does `),tRe=n(zce,"STRONG",{});var zva=s(tRe);e4t=r(zva,"not"),zva.forEach(t),o4t=r(zce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rie=n(zce,"A",{href:!0});var Qva=s(Rie);r4t=r(Qva,"from_pretrained()"),Qva.forEach(t),t4t=r(zce," to load the model weights."),zce.forEach(t),a4t=i(bx),T(R8.$$.fragment,bx),bx.forEach(t),n4t=i(td),dt=n(td,"DIV",{class:!0});var ad=s(dt);T(JP.$$.fragment,ad),s4t=i(ad),aRe=n(ad,"P",{});var Wva=s(aRe);l4t=r(Wva,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wva.forEach(t),i4t=i(ad),os=n(ad,"P",{});var vx=s(os);d4t=r(vx,"The model class to instantiate is selected based on the "),nRe=n(vx,"CODE",{});var Uva=s(nRe);c4t=r(Uva,"model_type"),Uva.forEach(t),m4t=r(vx,` property of the config object (either
passed as an argument or loaded from `),sRe=n(vx,"CODE",{});var Hva=s(sRe);f4t=r(Hva,"pretrained_model_name_or_path"),Hva.forEach(t),g4t=r(vx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lRe=n(vx,"CODE",{});var Jva=s(lRe);h4t=r(Jva,"pretrained_model_name_or_path"),Jva.forEach(t),u4t=r(vx,":"),vx.forEach(t),p4t=i(ad),iRe=n(ad,"UL",{});var Yva=s(iRe);P8=n(Yva,"LI",{});var foo=s(P8);dRe=n(foo,"STRONG",{});var Zva=s(dRe);_4t=r(Zva,"bert"),Zva.forEach(t),b4t=r(foo," \u2014 "),Pie=n(foo,"A",{href:!0});var Kva=s(Pie);v4t=r(Kva,"FlaxBertForNextSentencePrediction"),Kva.forEach(t),F4t=r(foo," (BERT model)"),foo.forEach(t),Yva.forEach(t),T4t=i(ad),T(B8.$$.fragment,ad),ad.forEach(t),td.forEach(t),Lto=i(m),Cf=n(m,"H2",{class:!0});var zno=s(Cf);I8=n(zno,"A",{id:!0,class:!0,href:!0});var eFa=s(I8);cRe=n(eFa,"SPAN",{});var oFa=s(cRe);T(YP.$$.fragment,oFa),oFa.forEach(t),eFa.forEach(t),M4t=i(zno),mRe=n(zno,"SPAN",{});var rFa=s(mRe);E4t=r(rFa,"FlaxAutoModelForImageClassification"),rFa.forEach(t),zno.forEach(t),yto=i(m),Pr=n(m,"DIV",{class:!0});var nd=s(Pr);T(ZP.$$.fragment,nd),C4t=i(nd),wf=n(nd,"P",{});var Qce=s(wf);w4t=r(Qce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bie=n(Qce,"A",{href:!0});var tFa=s(Bie);A4t=r(tFa,"from_pretrained()"),tFa.forEach(t),L4t=r(Qce," class method or the "),Iie=n(Qce,"A",{href:!0});var aFa=s(Iie);y4t=r(aFa,"from_config()"),aFa.forEach(t),x4t=r(Qce,` class
method.`),Qce.forEach(t),$4t=i(nd),KP=n(nd,"P",{});var Qno=s(KP);k4t=r(Qno,"This class cannot be instantiated directly using "),fRe=n(Qno,"CODE",{});var nFa=s(fRe);S4t=r(nFa,"__init__()"),nFa.forEach(t),R4t=r(Qno," (throws an error)."),Qno.forEach(t),P4t=i(nd),va=n(nd,"DIV",{class:!0});var Fx=s(va);T(eB.$$.fragment,Fx),B4t=i(Fx),gRe=n(Fx,"P",{});var sFa=s(gRe);I4t=r(sFa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sFa.forEach(t),N4t=i(Fx),Af=n(Fx,"P",{});var Wce=s(Af);q4t=r(Wce,`Note:
Loading a model from its configuration file does `),hRe=n(Wce,"STRONG",{});var lFa=s(hRe);j4t=r(lFa,"not"),lFa.forEach(t),D4t=r(Wce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nie=n(Wce,"A",{href:!0});var iFa=s(Nie);G4t=r(iFa,"from_pretrained()"),iFa.forEach(t),O4t=r(Wce," to load the model weights."),Wce.forEach(t),V4t=i(Fx),T(N8.$$.fragment,Fx),Fx.forEach(t),X4t=i(nd),ct=n(nd,"DIV",{class:!0});var sd=s(ct);T(oB.$$.fragment,sd),z4t=i(sd),uRe=n(sd,"P",{});var dFa=s(uRe);Q4t=r(dFa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dFa.forEach(t),W4t=i(sd),rs=n(sd,"P",{});var Tx=s(rs);U4t=r(Tx,"The model class to instantiate is selected based on the "),pRe=n(Tx,"CODE",{});var cFa=s(pRe);H4t=r(cFa,"model_type"),cFa.forEach(t),J4t=r(Tx,` property of the config object (either
passed as an argument or loaded from `),_Re=n(Tx,"CODE",{});var mFa=s(_Re);Y4t=r(mFa,"pretrained_model_name_or_path"),mFa.forEach(t),Z4t=r(Tx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bRe=n(Tx,"CODE",{});var fFa=s(bRe);K4t=r(fFa,"pretrained_model_name_or_path"),fFa.forEach(t),eCt=r(Tx,":"),Tx.forEach(t),oCt=i(sd),rB=n(sd,"UL",{});var Wno=s(rB);q8=n(Wno,"LI",{});var goo=s(q8);vRe=n(goo,"STRONG",{});var gFa=s(vRe);rCt=r(gFa,"beit"),gFa.forEach(t),tCt=r(goo," \u2014 "),qie=n(goo,"A",{href:!0});var hFa=s(qie);aCt=r(hFa,"FlaxBeitForImageClassification"),hFa.forEach(t),nCt=r(goo," (BEiT model)"),goo.forEach(t),sCt=i(Wno),j8=n(Wno,"LI",{});var hoo=s(j8);FRe=n(hoo,"STRONG",{});var uFa=s(FRe);lCt=r(uFa,"vit"),uFa.forEach(t),iCt=r(hoo," \u2014 "),jie=n(hoo,"A",{href:!0});var pFa=s(jie);dCt=r(pFa,"FlaxViTForImageClassification"),pFa.forEach(t),cCt=r(hoo," (ViT model)"),hoo.forEach(t),Wno.forEach(t),mCt=i(sd),T(D8.$$.fragment,sd),sd.forEach(t),nd.forEach(t),xto=i(m),Lf=n(m,"H2",{class:!0});var Uno=s(Lf);G8=n(Uno,"A",{id:!0,class:!0,href:!0});var _Fa=s(G8);TRe=n(_Fa,"SPAN",{});var bFa=s(TRe);T(tB.$$.fragment,bFa),bFa.forEach(t),_Fa.forEach(t),fCt=i(Uno),MRe=n(Uno,"SPAN",{});var vFa=s(MRe);gCt=r(vFa,"FlaxAutoModelForVision2Seq"),vFa.forEach(t),Uno.forEach(t),$to=i(m),Br=n(m,"DIV",{class:!0});var ld=s(Br);T(aB.$$.fragment,ld),hCt=i(ld),yf=n(ld,"P",{});var Uce=s(yf);uCt=r(Uce,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Die=n(Uce,"A",{href:!0});var FFa=s(Die);pCt=r(FFa,"from_pretrained()"),FFa.forEach(t),_Ct=r(Uce," class method or the "),Gie=n(Uce,"A",{href:!0});var TFa=s(Gie);bCt=r(TFa,"from_config()"),TFa.forEach(t),vCt=r(Uce,` class
method.`),Uce.forEach(t),FCt=i(ld),nB=n(ld,"P",{});var Hno=s(nB);TCt=r(Hno,"This class cannot be instantiated directly using "),ERe=n(Hno,"CODE",{});var MFa=s(ERe);MCt=r(MFa,"__init__()"),MFa.forEach(t),ECt=r(Hno," (throws an error)."),Hno.forEach(t),CCt=i(ld),Fa=n(ld,"DIV",{class:!0});var Mx=s(Fa);T(sB.$$.fragment,Mx),wCt=i(Mx),CRe=n(Mx,"P",{});var EFa=s(CRe);ACt=r(EFa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),EFa.forEach(t),LCt=i(Mx),xf=n(Mx,"P",{});var Hce=s(xf);yCt=r(Hce,`Note:
Loading a model from its configuration file does `),wRe=n(Hce,"STRONG",{});var CFa=s(wRe);xCt=r(CFa,"not"),CFa.forEach(t),$Ct=r(Hce,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oie=n(Hce,"A",{href:!0});var wFa=s(Oie);kCt=r(wFa,"from_pretrained()"),wFa.forEach(t),SCt=r(Hce," to load the model weights."),Hce.forEach(t),RCt=i(Mx),T(O8.$$.fragment,Mx),Mx.forEach(t),PCt=i(ld),mt=n(ld,"DIV",{class:!0});var id=s(mt);T(lB.$$.fragment,id),BCt=i(id),ARe=n(id,"P",{});var AFa=s(ARe);ICt=r(AFa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),AFa.forEach(t),NCt=i(id),ts=n(id,"P",{});var Ex=s(ts);qCt=r(Ex,"The model class to instantiate is selected based on the "),LRe=n(Ex,"CODE",{});var LFa=s(LRe);jCt=r(LFa,"model_type"),LFa.forEach(t),DCt=r(Ex,` property of the config object (either
passed as an argument or loaded from `),yRe=n(Ex,"CODE",{});var yFa=s(yRe);GCt=r(yFa,"pretrained_model_name_or_path"),yFa.forEach(t),OCt=r(Ex,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xRe=n(Ex,"CODE",{});var xFa=s(xRe);VCt=r(xFa,"pretrained_model_name_or_path"),xFa.forEach(t),XCt=r(Ex,":"),Ex.forEach(t),zCt=i(id),$Re=n(id,"UL",{});var $Fa=s($Re);V8=n($Fa,"LI",{});var uoo=s(V8);kRe=n(uoo,"STRONG",{});var kFa=s(kRe);QCt=r(kFa,"vision-encoder-decoder"),kFa.forEach(t),WCt=r(uoo," \u2014 "),Vie=n(uoo,"A",{href:!0});var SFa=s(Vie);UCt=r(SFa,"FlaxVisionEncoderDecoderModel"),SFa.forEach(t),HCt=r(uoo," (Vision Encoder decoder model)"),uoo.forEach(t),$Fa.forEach(t),JCt=i(id),T(X8.$$.fragment,id),id.forEach(t),ld.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(UMa)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(ns,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(ls,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(is,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(ud,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(pd,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(_d,"class","relative group"),c(jI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(DI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(WI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(UI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(dN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(cN,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(xN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($N,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(BN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(IN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(NN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(qN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(jN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(DN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(GN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(ON,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(VN,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(XN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(WN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(UN,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig"),c(HN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(JN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(ZN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(KN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(oq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(tq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(aq,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(nq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(iq,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(dq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(cq,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(mq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(fq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(gq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(uq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(pq,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(_q,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(bq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(vq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Fq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Tq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Mq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(Eq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Cq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(wq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Aq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Lq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(yq,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($q,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(Sq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Rq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(Pq,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(Bq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(Iq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(Nq,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig"),c(qq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(jq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Dq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Gq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Oq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Vq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(Xq,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(zq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(Qq,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Wq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Uq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Hq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(Jq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Yq,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),c(Zq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Kq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ej,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(oj,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig"),c(rj,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(tj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(aj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(nj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(sj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(lj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(ij,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(dj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(cj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gu,"id","transformers.AutoTokenizer"),c(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gu,"href","#transformers.AutoTokenizer"),c(vd,"class","relative group"),c(mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(fj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(hj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(pj,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(bj,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Fj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Tj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Mj,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Aj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Lj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(yj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c($j,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(kj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(Sj,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Rj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Bj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(Ij,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(qj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(jj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(Dj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Oj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(Vj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(Xj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(zj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Qj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Wj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Uj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Hj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Jj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(Yj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Zj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Kj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(oD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(tD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(aD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(nD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(sD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(lD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(iD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(dD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(cD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(mD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(pD,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(_D,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TD,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(MD,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(ED,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(LD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(yD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(xD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($D,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(kD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(SD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(RD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(PD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(BD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(ID,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ND,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(jD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(GD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(OD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(XD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(zD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(QD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(WD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(UD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(HD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(JD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(YD,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(KD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(eG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(oG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(tG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(aG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(nG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(sG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(lG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(iG,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(dG,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(cG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(mG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(gG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(hG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(pG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_G,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(FG,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(TG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(MG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(CG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(wG,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(AG,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(LG,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(yG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(xG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c($G,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(kG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(SG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(PG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(NG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(qG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(jG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(GG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(OG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(VG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(zG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(WG,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(UG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(HG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(JG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(YG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(ZG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(KG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oO,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(rO,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperTokenizer"),c(tO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(aO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(sO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(lO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(iO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(dO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(cO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(mO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(fO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(gO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(hO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(pO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ju,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yu,"id","transformers.AutoFeatureExtractor"),c(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yu,"href","#transformers.AutoFeatureExtractor"),c(Fd,"class","relative group"),c(_O,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(bO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(vO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(FO,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(TO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wO,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c(AO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(LO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(yO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(xO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c($O,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(kO,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(SO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(RO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PO,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(BO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(IO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(NO,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(qO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(jO,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(DO,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(GO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(OO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(VO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(XO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(WO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(UO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(JO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(ZO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(KO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aV,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperFeatureExtractor"),c(nV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sV,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoProcessor"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoProcessor"),c(Td,"class","relative group"),c(lV,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(iV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(dV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(cV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(mV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(fV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(gV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(hV,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(uV,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMProcessor"),c(pV,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(_V,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(FV,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(TV,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(MV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CV,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(wV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(AV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xV,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperProcessor"),c($V,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"id","transformers.AutoModel"),c(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(__,"href","#transformers.AutoModel"),c(Ed,"class","relative group"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(BV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(IV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(NV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(qV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(DV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(XV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(zV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(QV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(WV,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(UV,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(HV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(JV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(YV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(KV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(eX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(oX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(rX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(tX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(aX,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(nX,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(sX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(lX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(iX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(dX,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(cX,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(fX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(gX,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(hX,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmModel"),c(uX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(pX,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(_X,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(bX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(vX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(FX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(TX,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(MX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(EX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(CX,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(wX,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(AX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(LX,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(yX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(xX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c($X,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(PX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(BX,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(IX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(NX,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(qX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(jX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(DX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(GX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(OX,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel"),c(VX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(XX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(zX,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(QX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(WX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(UX,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(HX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(JX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(YX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(KX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(ez,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(oz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(rz,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(tz,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(az,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(nz,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(sz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(lz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(iz,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(mz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(fz,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(gz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(hz,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(uz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(pz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(_z,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(bz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(vz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(wz,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(Az,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Lz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(yz,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel"),c(xz,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c($z,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(jz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel"),c(zz,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Uz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Yz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(Zz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j2,"id","transformers.AutoModelForPreTraining"),c(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j2,"href","#transformers.AutoModelForPreTraining"),c(Ad,"class","relative group"),c(eQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(sQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(pQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_Q,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(bQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(vQ,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(TQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(LQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(yQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($Q,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(kQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(SQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RQ,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GQ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(OQ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(VQ,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(XQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(zQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(QQ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(WQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(UQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForCausalLM"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForCausalLM"),c(xd,"class","relative group"),c(YQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(oW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(rW,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(tW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(aW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(nW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(sW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(lW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(dW,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(cW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(fW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(gW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(hW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(pW,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(_W,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(bW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(vW,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(FW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(TW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(MW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(EW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(wW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(AW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(LW,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(xW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c($W,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(kW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(SW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(RW,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(PW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BW,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(IW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(NW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(jW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(DW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(GW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForMaskedLM"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForMaskedLM"),c(Sd,"class","relative group"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(QW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(UW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(YW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ZW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(rU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(tU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(nU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(sU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(iU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(cU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(mU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(fU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(gU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(hU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(uU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(pU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(_U,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(bU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(vU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(FU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(TU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(EU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(wU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(LU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(yU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForSeq2SeqLM"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bd,"class","relative group"),c(xU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(RU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(PU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(BU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(IU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(NU,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(qU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(jU,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(DU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(GU,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(OU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(VU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(XU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(zU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WU,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(UU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(HU,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(JU,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YU,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForSequenceClassification"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForSequenceClassification"),c(qd,"class","relative group"),c(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c($H,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForMultipleChoice"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForMultipleChoice"),c(Gd,"class","relative group"),c(rJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(pJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_J,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(FJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(TJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(MJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(AJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(LJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(xJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c($J,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(kJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(SJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(RJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(PJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(BJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(IJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.AutoModelForNextSentencePrediction"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.AutoModelForNextSentencePrediction"),c(Xd,"class","relative group"),c(NJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(GJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(OJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(VJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(XJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(zJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(QJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForTokenClassification"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForTokenClassification"),c(Wd,"class","relative group"),c(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(YJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(KJ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(eY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(oY,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(rY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(PY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.AutoModelForQuestionAnswering"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.AutoModelForQuestionAnswering"),c(Jd,"class","relative group"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DY,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GY,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VY,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XY,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering"),c(zY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(QY,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(WY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(UY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(JY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(YY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(eZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oZ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aZ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nZ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sZ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(lZ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dZ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(cZ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(mZ,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),c(fZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gZ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(uZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pZ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(_Z,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(bZ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(vZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering"),c(FZ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(TZ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(MZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(EZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(CZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(wZ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(AZ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(yZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(xZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c($Z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(kZ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.AutoModelForTableQuestionAnswering"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Kd,"class","relative group"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S4,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(rc,"class","relative group"),c(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(DZ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(GZ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.AutoModelForImageClassification"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.AutoModelForImageClassification"),c(sc,"class","relative group"),c(OZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(QZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(WZ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(UZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(HZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(JZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(YZ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(ZZ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(KZ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(eK,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(rK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(tK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(aK,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.AutoModelForVideoClassification"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.AutoModelForVideoClassification"),c(dc,"class","relative group"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.AutoModelForVision2Seq"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.AutoModelForVision2Seq"),c(fc,"class","relative group"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.AutoModelForVisualQuestionAnswering"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(uc,"class","relative group"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.AutoModelForAudioClassification"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.AutoModelForAudioClassification"),c(bc,"class","relative group"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(xK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c($K,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(SK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(RK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(PK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(BK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(IK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.AutoModelForAudioFrameClassification"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.AutoModelForAudioFrameClassification"),c(Tc,"class","relative group"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(GK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(OK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(VK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(XK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.AutoModelForCTC"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.AutoModelForCTC"),c(Cc,"class","relative group"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(HK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(JK,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(YK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(ZK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(KK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(eee,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(oee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(ree,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(tee,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(iee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(dee,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.AutoModelForAudioXVector"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.AutoModelForAudioXVector"),c(kc,"class","relative group"),c(cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(hee,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(uee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(pee,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(_ee,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.AutoModelForMaskedImageModeling"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Pc,"class","relative group"),c(bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tee,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Mee,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Eee,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(Cee,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.AutoModelForObjectDetection"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.AutoModelForObjectDetection"),c(Nc,"class","relative group"),c(wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yee,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(xee,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c($ee,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(kee,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.AutoModelForImageSegmentation"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.AutoModelForImageSegmentation"),c(Dc,"class","relative group"),c(See,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.AutoModelForSemanticSegmentation"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Vc,"class","relative group"),c(Iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Dee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Gee,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Oee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(Vee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.AutoModelForInstanceSegmentation"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.AutoModelForInstanceSegmentation"),c(Qc,"class","relative group"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.AutoModelForZeroShotObjectDetection"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.AutoModelForZeroShotObjectDetection"),c(Hc,"class","relative group"),c(Uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yee,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModel"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModel"),c(Zc,"class","relative group"),c(Zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(roe,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(toe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(aoe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(noe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(soe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(loe,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(ioe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(doe,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(coe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(moe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(foe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(goe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hoe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(uoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(poe,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(_oe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(boe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(voe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(Foe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Toe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Moe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(Eoe,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),c(Coe,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(woe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Aoe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(Loe,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(yoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(xoe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c($oe,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(koe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(Soe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Roe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(Poe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Boe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Ioe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Noe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(qoe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(joe,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(Doe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(Goe,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(Ooe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Voe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Xoe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(zoe,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Qoe,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(Woe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Uoe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Hoe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Joe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Yoe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Zoe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Koe,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel"),c(ere,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(ore,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(rre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.TFAutoModelForPreTraining"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.TFAutoModelForPreTraining"),c(om,"class","relative group"),c(are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(ire,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ure,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_re,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bre,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Fre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Tre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Mre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Ere,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Cre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wre,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Are,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Lre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.TFAutoModelForCausalLM"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.TFAutoModelForCausalLM"),c(am,"class","relative group"),c($re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Pre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Bre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Ire,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Nre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jre,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(Dre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Gre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Ore,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Vre,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Xre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(zre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Qre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.TFAutoModelForImageClassification"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.TFAutoModelForImageClassification"),c(lm,"class","relative group"),c(Wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jre,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Yre,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(Zre,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(Kre,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(ete,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(ote,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(rte,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(tte,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(ate,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(nte,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.TFAutoModelForSemanticSegmentation"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(cm,"class","relative group"),c(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(cte,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(mte,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.TFAutoModelForMaskedLM"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.TFAutoModelForMaskedLM"),c(hm,"class","relative group"),c(fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ute,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(pte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(_te,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(vte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Fte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Tte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Mte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Ete,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Cte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(wte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Ate,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Lte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(xte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c($te,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(kte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Ste,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Rte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Pte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_m,"class","relative group"),c(Bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qte,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(jte,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Dte,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Gte,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Ote,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Vte,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(Xte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(zte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Qte,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Wte,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.TFAutoModelForSequenceClassification"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fm,"class","relative group"),c(Ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Zte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Kte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(oae,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(rae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(tae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(aae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(nae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(sae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(lae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(iae,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(dae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(cae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(mae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(fae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uae,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(pae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_ae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vae,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Fae,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Tae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Mae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Eae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wA,"id","transformers.TFAutoModelForMultipleChoice"),c(wA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wA,"href","#transformers.TFAutoModelForMultipleChoice"),c(Em,"class","relative group"),c(Cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(yae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($ae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Sae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Rae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Pae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Bae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Iae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Nae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(qae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Dae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Gae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Oae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Vae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Am,"class","relative group"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Uae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(JA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xm,"class","relative group"),c(Hae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zae,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Sm,"class","relative group"),c(Kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ene,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(one,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rne,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.TFAutoModelForTokenClassification"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.TFAutoModelForTokenClassification"),c(Bm,"class","relative group"),c(tne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ane,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sne,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(lne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ine,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(dne,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(cne,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(mne,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(fne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(gne,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(hne,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(une,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(pne,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(_ne,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(bne,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(vne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Fne,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Tne,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Mne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Ene,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Cne,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(wne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Ane,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y6,"id","transformers.TFAutoModelForQuestionAnswering"),c(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y6,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qm,"class","relative group"),c(Lne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ne,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(kne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Sne,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Rne,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Pne,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Bne,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Ine,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Nne,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(qne,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(jne,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Dne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Gne,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(One,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Vne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Xne,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(zne,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Qne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Wne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Une,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Hne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Jne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.TFAutoModelForVision2Seq"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.TFAutoModelForVision2Seq"),c(Gm,"class","relative group"),c(Yne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ese,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xm,"class","relative group"),c(ose,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ase,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(nse,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.FlaxAutoModel"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.FlaxAutoModel"),c(Wm,"class","relative group"),c(sse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ise,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(mse,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(fse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(gse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hse,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(use,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pse,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(_se,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(vse,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Fse,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Tse,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Mse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Ese,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Cse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Ase,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Lse,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(xse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c($se,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(kse,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Sse,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Rse,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Pse,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Bse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.FlaxAutoModelForCausalLM"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jm,"class","relative group"),c(Ise,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Dse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Gse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Ose,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Vse,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Xse,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zse,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Qse,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Wse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Use,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.FlaxAutoModelForPreTraining"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.FlaxAutoModelForPreTraining"),c(Km,"class","relative group"),c(Hse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Kse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ele,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ole,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tle,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(ale,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nle,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(sle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ile,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(dle,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(cle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fL,"id","transformers.FlaxAutoModelForMaskedLM"),c(fL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fL,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(mle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ule,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ple,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_le,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ble,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(vle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Fle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Tle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Mle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ele,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wL,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(wL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wL,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(Cle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yle,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(xle,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c($le,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kle,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Sle,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Rle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Ple,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ble,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Ile,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qL,"id","transformers.FlaxAutoModelForSequenceClassification"),c(qL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qL,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(Nle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Gle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Ole,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Vle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Xle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Wle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Ule,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Hle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(YL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(ff,"class","relative group"),c(Jle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eie,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aie,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nie,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c8,"id","transformers.FlaxAutoModelForTokenClassification"),c(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c8,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(die,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(uie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(pie,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_ie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T8,"id","transformers.FlaxAutoModelForMultipleChoice"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(Fie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eie,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Cie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wie,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Aie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Lie,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($ie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S8,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(S8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S8,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(kie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pie,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I8,"id","transformers.FlaxAutoModelForImageClassification"),c(I8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I8,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(Bie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qie,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jie,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G8,"id","transformers.FlaxAutoModelForVision2Seq"),c(G8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G8,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Die,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vie,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,xo),e(xo,dd),b(m,Rf,_),b(m,bt,_),e(bt,cd),e(bt,md),e(md,Cx),e(bt,Pf),b(m,Ve,_),b(m,He,_),e(He,fd),e(He,ns),e(ns,wx),e(He,ss),e(He,ls),e(ls,Ax),e(He,gd),e(He,is),e(is,Lx),e(He,hd),b(m,Bf,_),M(Ja,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,RI),e(Ae,ud),e(ud,PI),e(Ae,BI),b(m,$o,_),b(m,Ya,_),e(Ya,II),e(Ya,If),e(If,NI),e(Ya,Jno),b(m,poo,_),b(m,pd,_),e(pd,Nf),e(Nf,Jce),M(yx,Jce,null),e(pd,Yno),e(pd,Yce),e(Yce,Zno),b(m,_oo,_),b(m,ds,_),e(ds,Kno),e(ds,Zce),e(Zce,eso),e(ds,oso),e(ds,Kce),e(Kce,rso),e(ds,tso),b(m,boo,_),M(xx,m,_),b(m,voo,_),b(m,qI,_),e(qI,aso),b(m,Foo,_),M(qf,m,_),b(m,Too,_),b(m,_d,_),e(_d,jf),e(jf,eme),M($x,eme,null),e(_d,nso),e(_d,ome),e(ome,sso),b(m,Moo,_),b(m,ko,_),M(kx,ko,null),e(ko,lso),e(ko,Sx),e(Sx,iso),e(Sx,jI),e(jI,dso),e(Sx,cso),e(ko,mso),e(ko,Rx),e(Rx,fso),e(Rx,rme),e(rme,gso),e(Rx,hso),e(ko,uso),e(ko,Ir),M(Px,Ir,null),e(Ir,pso),e(Ir,tme),e(tme,_so),e(Ir,bso),e(Ir,bd),e(bd,vso),e(bd,ame),e(ame,Fso),e(bd,Tso),e(bd,nme),e(nme,Mso),e(bd,Eso),e(Ir,Cso),e(Ir,A),e(A,Df),e(Df,sme),e(sme,wso),e(Df,Aso),e(Df,DI),e(DI,Lso),e(Df,yso),e(A,xso),e(A,Gf),e(Gf,lme),e(lme,$so),e(Gf,kso),e(Gf,GI),e(GI,Sso),e(Gf,Rso),e(A,Pso),e(A,Of),e(Of,ime),e(ime,Bso),e(Of,Iso),e(Of,OI),e(OI,Nso),e(Of,qso),e(A,jso),e(A,Vf),e(Vf,dme),e(dme,Dso),e(Vf,Gso),e(Vf,VI),e(VI,Oso),e(Vf,Vso),e(A,Xso),e(A,Xf),e(Xf,cme),e(cme,zso),e(Xf,Qso),e(Xf,XI),e(XI,Wso),e(Xf,Uso),e(A,Hso),e(A,zf),e(zf,mme),e(mme,Jso),e(zf,Yso),e(zf,zI),e(zI,Zso),e(zf,Kso),e(A,elo),e(A,Qf),e(Qf,fme),e(fme,olo),e(Qf,rlo),e(Qf,QI),e(QI,tlo),e(Qf,alo),e(A,nlo),e(A,Wf),e(Wf,gme),e(gme,slo),e(Wf,llo),e(Wf,WI),e(WI,ilo),e(Wf,dlo),e(A,clo),e(A,Uf),e(Uf,hme),e(hme,mlo),e(Uf,flo),e(Uf,UI),e(UI,glo),e(Uf,hlo),e(A,ulo),e(A,Hf),e(Hf,ume),e(ume,plo),e(Hf,_lo),e(Hf,HI),e(HI,blo),e(Hf,vlo),e(A,Flo),e(A,Jf),e(Jf,pme),e(pme,Tlo),e(Jf,Mlo),e(Jf,JI),e(JI,Elo),e(Jf,Clo),e(A,wlo),e(A,Yf),e(Yf,_me),e(_me,Alo),e(Yf,Llo),e(Yf,YI),e(YI,ylo),e(Yf,xlo),e(A,$lo),e(A,Zf),e(Zf,bme),e(bme,klo),e(Zf,Slo),e(Zf,ZI),e(ZI,Rlo),e(Zf,Plo),e(A,Blo),e(A,Kf),e(Kf,vme),e(vme,Ilo),e(Kf,Nlo),e(Kf,KI),e(KI,qlo),e(Kf,jlo),e(A,Dlo),e(A,eg),e(eg,Fme),e(Fme,Glo),e(eg,Olo),e(eg,eN),e(eN,Vlo),e(eg,Xlo),e(A,zlo),e(A,og),e(og,Tme),e(Tme,Qlo),e(og,Wlo),e(og,oN),e(oN,Ulo),e(og,Hlo),e(A,Jlo),e(A,rg),e(rg,Mme),e(Mme,Ylo),e(rg,Zlo),e(rg,rN),e(rN,Klo),e(rg,eio),e(A,oio),e(A,tg),e(tg,Eme),e(Eme,rio),e(tg,tio),e(tg,tN),e(tN,aio),e(tg,nio),e(A,sio),e(A,ag),e(ag,Cme),e(Cme,lio),e(ag,iio),e(ag,aN),e(aN,dio),e(ag,cio),e(A,mio),e(A,ng),e(ng,wme),e(wme,fio),e(ng,gio),e(ng,nN),e(nN,hio),e(ng,uio),e(A,pio),e(A,sg),e(sg,Ame),e(Ame,_io),e(sg,bio),e(sg,sN),e(sN,vio),e(sg,Fio),e(A,Tio),e(A,lg),e(lg,Lme),e(Lme,Mio),e(lg,Eio),e(lg,lN),e(lN,Cio),e(lg,wio),e(A,Aio),e(A,ig),e(ig,yme),e(yme,Lio),e(ig,yio),e(ig,iN),e(iN,xio),e(ig,$io),e(A,kio),e(A,dg),e(dg,xme),e(xme,Sio),e(dg,Rio),e(dg,dN),e(dN,Pio),e(dg,Bio),e(A,Iio),e(A,cg),e(cg,$me),e($me,Nio),e(cg,qio),e(cg,cN),e(cN,jio),e(cg,Dio),e(A,Gio),e(A,mg),e(mg,kme),e(kme,Oio),e(mg,Vio),e(mg,mN),e(mN,Xio),e(mg,zio),e(A,Qio),e(A,fg),e(fg,Sme),e(Sme,Wio),e(fg,Uio),e(fg,fN),e(fN,Hio),e(fg,Jio),e(A,Yio),e(A,gg),e(gg,Rme),e(Rme,Zio),e(gg,Kio),e(gg,gN),e(gN,edo),e(gg,odo),e(A,rdo),e(A,hg),e(hg,Pme),e(Pme,tdo),e(hg,ado),e(hg,hN),e(hN,ndo),e(hg,sdo),e(A,ldo),e(A,ug),e(ug,Bme),e(Bme,ido),e(ug,ddo),e(ug,uN),e(uN,cdo),e(ug,mdo),e(A,fdo),e(A,pg),e(pg,Ime),e(Ime,gdo),e(pg,hdo),e(pg,pN),e(pN,udo),e(pg,pdo),e(A,_do),e(A,_g),e(_g,Nme),e(Nme,bdo),e(_g,vdo),e(_g,_N),e(_N,Fdo),e(_g,Tdo),e(A,Mdo),e(A,bg),e(bg,qme),e(qme,Edo),e(bg,Cdo),e(bg,bN),e(bN,wdo),e(bg,Ado),e(A,Ldo),e(A,vg),e(vg,jme),e(jme,ydo),e(vg,xdo),e(vg,vN),e(vN,$do),e(vg,kdo),e(A,Sdo),e(A,Fg),e(Fg,Dme),e(Dme,Rdo),e(Fg,Pdo),e(Fg,FN),e(FN,Bdo),e(Fg,Ido),e(A,Ndo),e(A,Tg),e(Tg,Gme),e(Gme,qdo),e(Tg,jdo),e(Tg,TN),e(TN,Ddo),e(Tg,Gdo),e(A,Odo),e(A,Mg),e(Mg,Ome),e(Ome,Vdo),e(Mg,Xdo),e(Mg,MN),e(MN,zdo),e(Mg,Qdo),e(A,Wdo),e(A,Eg),e(Eg,Vme),e(Vme,Udo),e(Eg,Hdo),e(Eg,EN),e(EN,Jdo),e(Eg,Ydo),e(A,Zdo),e(A,Cg),e(Cg,Xme),e(Xme,Kdo),e(Cg,eco),e(Cg,CN),e(CN,oco),e(Cg,rco),e(A,tco),e(A,wg),e(wg,zme),e(zme,aco),e(wg,nco),e(wg,wN),e(wN,sco),e(wg,lco),e(A,ico),e(A,Ag),e(Ag,Qme),e(Qme,dco),e(Ag,cco),e(Ag,AN),e(AN,mco),e(Ag,fco),e(A,gco),e(A,Lg),e(Lg,Wme),e(Wme,hco),e(Lg,uco),e(Lg,LN),e(LN,pco),e(Lg,_co),e(A,bco),e(A,yg),e(yg,Ume),e(Ume,vco),e(yg,Fco),e(yg,yN),e(yN,Tco),e(yg,Mco),e(A,Eco),e(A,xg),e(xg,Hme),e(Hme,Cco),e(xg,wco),e(xg,xN),e(xN,Aco),e(xg,Lco),e(A,yco),e(A,$g),e($g,Jme),e(Jme,xco),e($g,$co),e($g,$N),e($N,kco),e($g,Sco),e(A,Rco),e(A,kg),e(kg,Yme),e(Yme,Pco),e(kg,Bco),e(kg,kN),e(kN,Ico),e(kg,Nco),e(A,qco),e(A,Sg),e(Sg,Zme),e(Zme,jco),e(Sg,Dco),e(Sg,SN),e(SN,Gco),e(Sg,Oco),e(A,Vco),e(A,Rg),e(Rg,Kme),e(Kme,Xco),e(Rg,zco),e(Rg,RN),e(RN,Qco),e(Rg,Wco),e(A,Uco),e(A,Pg),e(Pg,efe),e(efe,Hco),e(Pg,Jco),e(Pg,PN),e(PN,Yco),e(Pg,Zco),e(A,Kco),e(A,Bg),e(Bg,ofe),e(ofe,emo),e(Bg,omo),e(Bg,BN),e(BN,rmo),e(Bg,tmo),e(A,amo),e(A,Ig),e(Ig,rfe),e(rfe,nmo),e(Ig,smo),e(Ig,IN),e(IN,lmo),e(Ig,imo),e(A,dmo),e(A,Ng),e(Ng,tfe),e(tfe,cmo),e(Ng,mmo),e(Ng,NN),e(NN,fmo),e(Ng,gmo),e(A,hmo),e(A,qg),e(qg,afe),e(afe,umo),e(qg,pmo),e(qg,qN),e(qN,_mo),e(qg,bmo),e(A,vmo),e(A,jg),e(jg,nfe),e(nfe,Fmo),e(jg,Tmo),e(jg,jN),e(jN,Mmo),e(jg,Emo),e(A,Cmo),e(A,Dg),e(Dg,sfe),e(sfe,wmo),e(Dg,Amo),e(Dg,DN),e(DN,Lmo),e(Dg,ymo),e(A,xmo),e(A,Gg),e(Gg,lfe),e(lfe,$mo),e(Gg,kmo),e(Gg,GN),e(GN,Smo),e(Gg,Rmo),e(A,Pmo),e(A,Og),e(Og,ife),e(ife,Bmo),e(Og,Imo),e(Og,ON),e(ON,Nmo),e(Og,qmo),e(A,jmo),e(A,Vg),e(Vg,dfe),e(dfe,Dmo),e(Vg,Gmo),e(Vg,VN),e(VN,Omo),e(Vg,Vmo),e(A,Xmo),e(A,Xg),e(Xg,cfe),e(cfe,zmo),e(Xg,Qmo),e(Xg,XN),e(XN,Wmo),e(Xg,Umo),e(A,Hmo),e(A,zg),e(zg,mfe),e(mfe,Jmo),e(zg,Ymo),e(zg,zN),e(zN,Zmo),e(zg,Kmo),e(A,efo),e(A,Qg),e(Qg,ffe),e(ffe,ofo),e(Qg,rfo),e(Qg,QN),e(QN,tfo),e(Qg,afo),e(A,nfo),e(A,Wg),e(Wg,gfe),e(gfe,sfo),e(Wg,lfo),e(Wg,WN),e(WN,ifo),e(Wg,dfo),e(A,cfo),e(A,Ug),e(Ug,hfe),e(hfe,mfo),e(Ug,ffo),e(Ug,UN),e(UN,gfo),e(Ug,hfo),e(A,ufo),e(A,Hg),e(Hg,ufe),e(ufe,pfo),e(Hg,_fo),e(Hg,HN),e(HN,bfo),e(Hg,vfo),e(A,Ffo),e(A,Jg),e(Jg,pfe),e(pfe,Tfo),e(Jg,Mfo),e(Jg,JN),e(JN,Efo),e(Jg,Cfo),e(A,wfo),e(A,Yg),e(Yg,_fe),e(_fe,Afo),e(Yg,Lfo),e(Yg,YN),e(YN,yfo),e(Yg,xfo),e(A,$fo),e(A,Zg),e(Zg,bfe),e(bfe,kfo),e(Zg,Sfo),e(Zg,ZN),e(ZN,Rfo),e(Zg,Pfo),e(A,Bfo),e(A,Kg),e(Kg,vfe),e(vfe,Ifo),e(Kg,Nfo),e(Kg,KN),e(KN,qfo),e(Kg,jfo),e(A,Dfo),e(A,eh),e(eh,Ffe),e(Ffe,Gfo),e(eh,Ofo),e(eh,eq),e(eq,Vfo),e(eh,Xfo),e(A,zfo),e(A,oh),e(oh,Tfe),e(Tfe,Qfo),e(oh,Wfo),e(oh,oq),e(oq,Ufo),e(oh,Hfo),e(A,Jfo),e(A,rh),e(rh,Mfe),e(Mfe,Yfo),e(rh,Zfo),e(rh,rq),e(rq,Kfo),e(rh,ego),e(A,ogo),e(A,th),e(th,Efe),e(Efe,rgo),e(th,tgo),e(th,tq),e(tq,ago),e(th,ngo),e(A,sgo),e(A,ah),e(ah,Cfe),e(Cfe,lgo),e(ah,igo),e(ah,aq),e(aq,dgo),e(ah,cgo),e(A,mgo),e(A,nh),e(nh,wfe),e(wfe,fgo),e(nh,ggo),e(nh,nq),e(nq,hgo),e(nh,ugo),e(A,pgo),e(A,sh),e(sh,Afe),e(Afe,_go),e(sh,bgo),e(sh,sq),e(sq,vgo),e(sh,Fgo),e(A,Tgo),e(A,lh),e(lh,Lfe),e(Lfe,Mgo),e(lh,Ego),e(lh,lq),e(lq,Cgo),e(lh,wgo),e(A,Ago),e(A,ih),e(ih,yfe),e(yfe,Lgo),e(ih,ygo),e(ih,iq),e(iq,xgo),e(ih,$go),e(A,kgo),e(A,dh),e(dh,xfe),e(xfe,Sgo),e(dh,Rgo),e(dh,dq),e(dq,Pgo),e(dh,Bgo),e(A,Igo),e(A,ch),e(ch,$fe),e($fe,Ngo),e(ch,qgo),e(ch,cq),e(cq,jgo),e(ch,Dgo),e(A,Ggo),e(A,mh),e(mh,kfe),e(kfe,Ogo),e(mh,Vgo),e(mh,mq),e(mq,Xgo),e(mh,zgo),e(A,Qgo),e(A,fh),e(fh,Sfe),e(Sfe,Wgo),e(fh,Ugo),e(fh,fq),e(fq,Hgo),e(fh,Jgo),e(A,Ygo),e(A,gh),e(gh,Rfe),e(Rfe,Zgo),e(gh,Kgo),e(gh,gq),e(gq,eho),e(gh,oho),e(A,rho),e(A,hh),e(hh,Pfe),e(Pfe,tho),e(hh,aho),e(hh,hq),e(hq,nho),e(hh,sho),e(A,lho),e(A,uh),e(uh,Bfe),e(Bfe,iho),e(uh,dho),e(uh,uq),e(uq,cho),e(uh,mho),e(A,fho),e(A,ph),e(ph,Ife),e(Ife,gho),e(ph,hho),e(ph,pq),e(pq,uho),e(ph,pho),e(A,_ho),e(A,_h),e(_h,Nfe),e(Nfe,bho),e(_h,vho),e(_h,_q),e(_q,Fho),e(_h,Tho),e(A,Mho),e(A,bh),e(bh,qfe),e(qfe,Eho),e(bh,Cho),e(bh,bq),e(bq,who),e(bh,Aho),e(A,Lho),e(A,vh),e(vh,jfe),e(jfe,yho),e(vh,xho),e(vh,vq),e(vq,$ho),e(vh,kho),e(A,Sho),e(A,Fh),e(Fh,Dfe),e(Dfe,Rho),e(Fh,Pho),e(Fh,Fq),e(Fq,Bho),e(Fh,Iho),e(A,Nho),e(A,Th),e(Th,Gfe),e(Gfe,qho),e(Th,jho),e(Th,Tq),e(Tq,Dho),e(Th,Gho),e(A,Oho),e(A,Mh),e(Mh,Ofe),e(Ofe,Vho),e(Mh,Xho),e(Mh,Mq),e(Mq,zho),e(Mh,Qho),e(A,Who),e(A,Eh),e(Eh,Vfe),e(Vfe,Uho),e(Eh,Hho),e(Eh,Eq),e(Eq,Jho),e(Eh,Yho),e(A,Zho),e(A,Ch),e(Ch,Xfe),e(Xfe,Kho),e(Ch,euo),e(Ch,Cq),e(Cq,ouo),e(Ch,ruo),e(A,tuo),e(A,wh),e(wh,zfe),e(zfe,auo),e(wh,nuo),e(wh,wq),e(wq,suo),e(wh,luo),e(A,iuo),e(A,Ah),e(Ah,Qfe),e(Qfe,duo),e(Ah,cuo),e(Ah,Aq),e(Aq,muo),e(Ah,fuo),e(A,guo),e(A,Lh),e(Lh,Wfe),e(Wfe,huo),e(Lh,uuo),e(Lh,Lq),e(Lq,puo),e(Lh,_uo),e(A,buo),e(A,yh),e(yh,Ufe),e(Ufe,vuo),e(yh,Fuo),e(yh,yq),e(yq,Tuo),e(yh,Muo),e(A,Euo),e(A,xh),e(xh,Hfe),e(Hfe,Cuo),e(xh,wuo),e(xh,xq),e(xq,Auo),e(xh,Luo),e(A,yuo),e(A,$h),e($h,Jfe),e(Jfe,xuo),e($h,$uo),e($h,$q),e($q,kuo),e($h,Suo),e(A,Ruo),e(A,kh),e(kh,Yfe),e(Yfe,Puo),e(kh,Buo),e(kh,kq),e(kq,Iuo),e(kh,Nuo),e(A,quo),e(A,Sh),e(Sh,Zfe),e(Zfe,juo),e(Sh,Duo),e(Sh,Sq),e(Sq,Guo),e(Sh,Ouo),e(A,Vuo),e(A,Rh),e(Rh,Kfe),e(Kfe,Xuo),e(Rh,zuo),e(Rh,Rq),e(Rq,Quo),e(Rh,Wuo),e(A,Uuo),e(A,Ph),e(Ph,ege),e(ege,Huo),e(Ph,Juo),e(Ph,Pq),e(Pq,Yuo),e(Ph,Zuo),e(A,Kuo),e(A,Bh),e(Bh,oge),e(oge,epo),e(Bh,opo),e(Bh,Bq),e(Bq,rpo),e(Bh,tpo),e(A,apo),e(A,Ih),e(Ih,rge),e(rge,npo),e(Ih,spo),e(Ih,Iq),e(Iq,lpo),e(Ih,ipo),e(A,dpo),e(A,Nh),e(Nh,tge),e(tge,cpo),e(Nh,mpo),e(Nh,Nq),e(Nq,fpo),e(Nh,gpo),e(A,hpo),e(A,qh),e(qh,age),e(age,upo),e(qh,ppo),e(qh,qq),e(qq,_po),e(qh,bpo),e(A,vpo),e(A,jh),e(jh,nge),e(nge,Fpo),e(jh,Tpo),e(jh,jq),e(jq,Mpo),e(jh,Epo),e(A,Cpo),e(A,Dh),e(Dh,sge),e(sge,wpo),e(Dh,Apo),e(Dh,Dq),e(Dq,Lpo),e(Dh,ypo),e(A,xpo),e(A,Gh),e(Gh,lge),e(lge,$po),e(Gh,kpo),e(Gh,Gq),e(Gq,Spo),e(Gh,Rpo),e(A,Ppo),e(A,Oh),e(Oh,ige),e(ige,Bpo),e(Oh,Ipo),e(Oh,Oq),e(Oq,Npo),e(Oh,qpo),e(A,jpo),e(A,Vh),e(Vh,dge),e(dge,Dpo),e(Vh,Gpo),e(Vh,Vq),e(Vq,Opo),e(Vh,Vpo),e(A,Xpo),e(A,Xh),e(Xh,cge),e(cge,zpo),e(Xh,Qpo),e(Xh,Xq),e(Xq,Wpo),e(Xh,Upo),e(A,Hpo),e(A,zh),e(zh,mge),e(mge,Jpo),e(zh,Ypo),e(zh,zq),e(zq,Zpo),e(zh,Kpo),e(A,e_o),e(A,Qh),e(Qh,fge),e(fge,o_o),e(Qh,r_o),e(Qh,Qq),e(Qq,t_o),e(Qh,a_o),e(A,n_o),e(A,Wh),e(Wh,gge),e(gge,s_o),e(Wh,l_o),e(Wh,Wq),e(Wq,i_o),e(Wh,d_o),e(A,c_o),e(A,Uh),e(Uh,hge),e(hge,m_o),e(Uh,f_o),e(Uh,Uq),e(Uq,g_o),e(Uh,h_o),e(A,u_o),e(A,Hh),e(Hh,uge),e(uge,p_o),e(Hh,__o),e(Hh,Hq),e(Hq,b_o),e(Hh,v_o),e(A,F_o),e(A,Jh),e(Jh,pge),e(pge,T_o),e(Jh,M_o),e(Jh,Jq),e(Jq,E_o),e(Jh,C_o),e(A,w_o),e(A,Yh),e(Yh,_ge),e(_ge,A_o),e(Yh,L_o),e(Yh,Yq),e(Yq,y_o),e(Yh,x_o),e(A,$_o),e(A,Zh),e(Zh,bge),e(bge,k_o),e(Zh,S_o),e(Zh,Zq),e(Zq,R_o),e(Zh,P_o),e(A,B_o),e(A,Kh),e(Kh,vge),e(vge,I_o),e(Kh,N_o),e(Kh,Kq),e(Kq,q_o),e(Kh,j_o),e(A,D_o),e(A,eu),e(eu,Fge),e(Fge,G_o),e(eu,O_o),e(eu,ej),e(ej,V_o),e(eu,X_o),e(A,z_o),e(A,ou),e(ou,Tge),e(Tge,Q_o),e(ou,W_o),e(ou,oj),e(oj,U_o),e(ou,H_o),e(A,J_o),e(A,ru),e(ru,Mge),e(Mge,Y_o),e(ru,Z_o),e(ru,rj),e(rj,K_o),e(ru,e1o),e(A,o1o),e(A,tu),e(tu,Ege),e(Ege,r1o),e(tu,t1o),e(tu,tj),e(tj,a1o),e(tu,n1o),e(A,s1o),e(A,au),e(au,Cge),e(Cge,l1o),e(au,i1o),e(au,aj),e(aj,d1o),e(au,c1o),e(A,m1o),e(A,nu),e(nu,wge),e(wge,f1o),e(nu,g1o),e(nu,nj),e(nj,h1o),e(nu,u1o),e(A,p1o),e(A,su),e(su,Age),e(Age,_1o),e(su,b1o),e(su,sj),e(sj,v1o),e(su,F1o),e(A,T1o),e(A,lu),e(lu,Lge),e(Lge,M1o),e(lu,E1o),e(lu,lj),e(lj,C1o),e(lu,w1o),e(A,A1o),e(A,iu),e(iu,yge),e(yge,L1o),e(iu,y1o),e(iu,ij),e(ij,x1o),e(iu,$1o),e(A,k1o),e(A,du),e(du,xge),e(xge,S1o),e(du,R1o),e(du,dj),e(dj,P1o),e(du,B1o),e(A,I1o),e(A,cu),e(cu,$ge),e($ge,N1o),e(cu,q1o),e(cu,cj),e(cj,j1o),e(cu,D1o),e(Ir,G1o),M(mu,Ir,null),e(ko,O1o),e(ko,fu),M(Bx,fu,null),e(fu,V1o),e(fu,kge),e(kge,X1o),b(m,Eoo,_),b(m,vd,_),e(vd,gu),e(gu,Sge),M(Ix,Sge,null),e(vd,z1o),e(vd,Rge),e(Rge,Q1o),b(m,Coo,_),b(m,So,_),M(Nx,So,null),e(So,W1o),e(So,qx),e(qx,U1o),e(qx,mj),e(mj,H1o),e(qx,J1o),e(So,Y1o),e(So,jx),e(jx,Z1o),e(jx,Pge),e(Pge,K1o),e(jx,e2o),e(So,o2o),e(So,Nr),M(Dx,Nr,null),e(Nr,r2o),e(Nr,Bge),e(Bge,t2o),e(Nr,a2o),e(Nr,Za),e(Za,n2o),e(Za,Ige),e(Ige,s2o),e(Za,l2o),e(Za,Nge),e(Nge,i2o),e(Za,d2o),e(Za,qge),e(qge,c2o),e(Za,m2o),e(Nr,f2o),e(Nr,k),e(k,cs),e(cs,jge),e(jge,g2o),e(cs,h2o),e(cs,fj),e(fj,u2o),e(cs,p2o),e(cs,gj),e(gj,_2o),e(cs,b2o),e(k,v2o),e(k,ms),e(ms,Dge),e(Dge,F2o),e(ms,T2o),e(ms,hj),e(hj,M2o),e(ms,E2o),e(ms,uj),e(uj,C2o),e(ms,w2o),e(k,A2o),e(k,fs),e(fs,Gge),e(Gge,L2o),e(fs,y2o),e(fs,pj),e(pj,x2o),e(fs,$2o),e(fs,_j),e(_j,k2o),e(fs,S2o),e(k,R2o),e(k,hu),e(hu,Oge),e(Oge,P2o),e(hu,B2o),e(hu,bj),e(bj,I2o),e(hu,N2o),e(k,q2o),e(k,gs),e(gs,Vge),e(Vge,j2o),e(gs,D2o),e(gs,vj),e(vj,G2o),e(gs,O2o),e(gs,Fj),e(Fj,V2o),e(gs,X2o),e(k,z2o),e(k,uu),e(uu,Xge),e(Xge,Q2o),e(uu,W2o),e(uu,Tj),e(Tj,U2o),e(uu,H2o),e(k,J2o),e(k,pu),e(pu,zge),e(zge,Y2o),e(pu,Z2o),e(pu,Mj),e(Mj,K2o),e(pu,ebo),e(k,obo),e(k,_u),e(_u,Qge),e(Qge,rbo),e(_u,tbo),e(_u,Ej),e(Ej,abo),e(_u,nbo),e(k,sbo),e(k,hs),e(hs,Wge),e(Wge,lbo),e(hs,ibo),e(hs,Cj),e(Cj,dbo),e(hs,cbo),e(hs,wj),e(wj,mbo),e(hs,fbo),e(k,gbo),e(k,us),e(us,Uge),e(Uge,hbo),e(us,ubo),e(us,Aj),e(Aj,pbo),e(us,_bo),e(us,Lj),e(Lj,bbo),e(us,vbo),e(k,Fbo),e(k,ps),e(ps,Hge),e(Hge,Tbo),e(ps,Mbo),e(ps,yj),e(yj,Ebo),e(ps,Cbo),e(ps,xj),e(xj,wbo),e(ps,Abo),e(k,Lbo),e(k,bu),e(bu,Jge),e(Jge,ybo),e(bu,xbo),e(bu,$j),e($j,$bo),e(bu,kbo),e(k,Sbo),e(k,vu),e(vu,Yge),e(Yge,Rbo),e(vu,Pbo),e(vu,kj),e(kj,Bbo),e(vu,Ibo),e(k,Nbo),e(k,Fu),e(Fu,Zge),e(Zge,qbo),e(Fu,jbo),e(Fu,Sj),e(Sj,Dbo),e(Fu,Gbo),e(k,Obo),e(k,_s),e(_s,Kge),e(Kge,Vbo),e(_s,Xbo),e(_s,Rj),e(Rj,zbo),e(_s,Qbo),e(_s,Pj),e(Pj,Wbo),e(_s,Ubo),e(k,Hbo),e(k,Tu),e(Tu,ehe),e(ehe,Jbo),e(Tu,Ybo),e(Tu,Bj),e(Bj,Zbo),e(Tu,Kbo),e(k,evo),e(k,bs),e(bs,ohe),e(ohe,ovo),e(bs,rvo),e(bs,Ij),e(Ij,tvo),e(bs,avo),e(bs,Nj),e(Nj,nvo),e(bs,svo),e(k,lvo),e(k,vs),e(vs,rhe),e(rhe,ivo),e(vs,dvo),e(vs,qj),e(qj,cvo),e(vs,mvo),e(vs,jj),e(jj,fvo),e(vs,gvo),e(k,hvo),e(k,Fs),e(Fs,the),e(the,uvo),e(Fs,pvo),e(Fs,Dj),e(Dj,_vo),e(Fs,bvo),e(Fs,Gj),e(Gj,vvo),e(Fs,Fvo),e(k,Tvo),e(k,Ts),e(Ts,ahe),e(ahe,Mvo),e(Ts,Evo),e(Ts,Oj),e(Oj,Cvo),e(Ts,wvo),e(Ts,Vj),e(Vj,Avo),e(Ts,Lvo),e(k,yvo),e(k,Mu),e(Mu,nhe),e(nhe,xvo),e(Mu,$vo),e(Mu,Xj),e(Xj,kvo),e(Mu,Svo),e(k,Rvo),e(k,Ms),e(Ms,she),e(she,Pvo),e(Ms,Bvo),e(Ms,zj),e(zj,Ivo),e(Ms,Nvo),e(Ms,Qj),e(Qj,qvo),e(Ms,jvo),e(k,Dvo),e(k,Es),e(Es,lhe),e(lhe,Gvo),e(Es,Ovo),e(Es,Wj),e(Wj,Vvo),e(Es,Xvo),e(Es,Uj),e(Uj,zvo),e(Es,Qvo),e(k,Wvo),e(k,Cs),e(Cs,ihe),e(ihe,Uvo),e(Cs,Hvo),e(Cs,Hj),e(Hj,Jvo),e(Cs,Yvo),e(Cs,Jj),e(Jj,Zvo),e(Cs,Kvo),e(k,eFo),e(k,ws),e(ws,dhe),e(dhe,oFo),e(ws,rFo),e(ws,Yj),e(Yj,tFo),e(ws,aFo),e(ws,Zj),e(Zj,nFo),e(ws,sFo),e(k,lFo),e(k,As),e(As,che),e(che,iFo),e(As,dFo),e(As,Kj),e(Kj,cFo),e(As,mFo),e(As,eD),e(eD,fFo),e(As,gFo),e(k,hFo),e(k,Ls),e(Ls,mhe),e(mhe,uFo),e(Ls,pFo),e(Ls,oD),e(oD,_Fo),e(Ls,bFo),e(Ls,rD),e(rD,vFo),e(Ls,FFo),e(k,TFo),e(k,ys),e(ys,fhe),e(fhe,MFo),e(ys,EFo),e(ys,tD),e(tD,CFo),e(ys,wFo),e(ys,aD),e(aD,AFo),e(ys,LFo),e(k,yFo),e(k,Eu),e(Eu,ghe),e(ghe,xFo),e(Eu,$Fo),e(Eu,nD),e(nD,kFo),e(Eu,SFo),e(k,RFo),e(k,xs),e(xs,hhe),e(hhe,PFo),e(xs,BFo),e(xs,sD),e(sD,IFo),e(xs,NFo),e(xs,lD),e(lD,qFo),e(xs,jFo),e(k,DFo),e(k,Cu),e(Cu,uhe),e(uhe,GFo),e(Cu,OFo),e(Cu,iD),e(iD,VFo),e(Cu,XFo),e(k,zFo),e(k,$s),e($s,phe),e(phe,QFo),e($s,WFo),e($s,dD),e(dD,UFo),e($s,HFo),e($s,cD),e(cD,JFo),e($s,YFo),e(k,ZFo),e(k,ks),e(ks,_he),e(_he,KFo),e(ks,eTo),e(ks,mD),e(mD,oTo),e(ks,rTo),e(ks,fD),e(fD,tTo),e(ks,aTo),e(k,nTo),e(k,Ss),e(Ss,bhe),e(bhe,sTo),e(Ss,lTo),e(Ss,gD),e(gD,iTo),e(Ss,dTo),e(Ss,hD),e(hD,cTo),e(Ss,mTo),e(k,fTo),e(k,wu),e(wu,vhe),e(vhe,gTo),e(wu,hTo),e(wu,uD),e(uD,uTo),e(wu,pTo),e(k,_To),e(k,Au),e(Au,Fhe),e(Fhe,bTo),e(Au,vTo),e(Au,pD),e(pD,FTo),e(Au,TTo),e(k,MTo),e(k,Rs),e(Rs,The),e(The,ETo),e(Rs,CTo),e(Rs,_D),e(_D,wTo),e(Rs,ATo),e(Rs,bD),e(bD,LTo),e(Rs,yTo),e(k,xTo),e(k,Ps),e(Ps,Mhe),e(Mhe,$To),e(Ps,kTo),e(Ps,vD),e(vD,STo),e(Ps,RTo),e(Ps,FD),e(FD,PTo),e(Ps,BTo),e(k,ITo),e(k,Bs),e(Bs,Ehe),e(Ehe,NTo),e(Bs,qTo),e(Bs,TD),e(TD,jTo),e(Bs,DTo),e(Bs,MD),e(MD,GTo),e(Bs,OTo),e(k,VTo),e(k,Lu),e(Lu,Che),e(Che,XTo),e(Lu,zTo),e(Lu,ED),e(ED,QTo),e(Lu,WTo),e(k,UTo),e(k,Is),e(Is,whe),e(whe,HTo),e(Is,JTo),e(Is,CD),e(CD,YTo),e(Is,ZTo),e(Is,wD),e(wD,KTo),e(Is,eMo),e(k,oMo),e(k,Ns),e(Ns,Ahe),e(Ahe,rMo),e(Ns,tMo),e(Ns,AD),e(AD,aMo),e(Ns,nMo),e(Ns,LD),e(LD,sMo),e(Ns,lMo),e(k,iMo),e(k,qs),e(qs,Lhe),e(Lhe,dMo),e(qs,cMo),e(qs,yD),e(yD,mMo),e(qs,fMo),e(qs,xD),e(xD,gMo),e(qs,hMo),e(k,uMo),e(k,js),e(js,yhe),e(yhe,pMo),e(js,_Mo),e(js,$D),e($D,bMo),e(js,vMo),e(js,kD),e(kD,FMo),e(js,TMo),e(k,MMo),e(k,Ds),e(Ds,xhe),e(xhe,EMo),e(Ds,CMo),e(Ds,SD),e(SD,wMo),e(Ds,AMo),e(Ds,RD),e(RD,LMo),e(Ds,yMo),e(k,xMo),e(k,Gs),e(Gs,$he),e($he,$Mo),e(Gs,kMo),e(Gs,PD),e(PD,SMo),e(Gs,RMo),e(Gs,BD),e(BD,PMo),e(Gs,BMo),e(k,IMo),e(k,Os),e(Os,khe),e(khe,NMo),e(Os,qMo),e(Os,ID),e(ID,jMo),e(Os,DMo),e(Os,ND),e(ND,GMo),e(Os,OMo),e(k,VMo),e(k,Vs),e(Vs,She),e(She,XMo),e(Vs,zMo),e(Vs,qD),e(qD,QMo),e(Vs,WMo),e(Vs,jD),e(jD,UMo),e(Vs,HMo),e(k,JMo),e(k,yu),e(yu,Rhe),e(Rhe,YMo),e(yu,ZMo),e(yu,DD),e(DD,KMo),e(yu,eEo),e(k,oEo),e(k,Xs),e(Xs,Phe),e(Phe,rEo),e(Xs,tEo),e(Xs,GD),e(GD,aEo),e(Xs,nEo),e(Xs,OD),e(OD,sEo),e(Xs,lEo),e(k,iEo),e(k,xu),e(xu,Bhe),e(Bhe,dEo),e(xu,cEo),e(xu,VD),e(VD,mEo),e(xu,fEo),e(k,gEo),e(k,$u),e($u,Ihe),e(Ihe,hEo),e($u,uEo),e($u,XD),e(XD,pEo),e($u,_Eo),e(k,bEo),e(k,zs),e(zs,Nhe),e(Nhe,vEo),e(zs,FEo),e(zs,zD),e(zD,TEo),e(zs,MEo),e(zs,QD),e(QD,EEo),e(zs,CEo),e(k,wEo),e(k,Qs),e(Qs,qhe),e(qhe,AEo),e(Qs,LEo),e(Qs,WD),e(WD,yEo),e(Qs,xEo),e(Qs,UD),e(UD,$Eo),e(Qs,kEo),e(k,SEo),e(k,Ws),e(Ws,jhe),e(jhe,REo),e(Ws,PEo),e(Ws,HD),e(HD,BEo),e(Ws,IEo),e(Ws,JD),e(JD,NEo),e(Ws,qEo),e(k,jEo),e(k,ku),e(ku,Dhe),e(Dhe,DEo),e(ku,GEo),e(ku,YD),e(YD,OEo),e(ku,VEo),e(k,XEo),e(k,Us),e(Us,Ghe),e(Ghe,zEo),e(Us,QEo),e(Us,ZD),e(ZD,WEo),e(Us,UEo),e(Us,KD),e(KD,HEo),e(Us,JEo),e(k,YEo),e(k,Hs),e(Hs,Ohe),e(Ohe,ZEo),e(Hs,KEo),e(Hs,eG),e(eG,e4o),e(Hs,o4o),e(Hs,oG),e(oG,r4o),e(Hs,t4o),e(k,a4o),e(k,Js),e(Js,Vhe),e(Vhe,n4o),e(Js,s4o),e(Js,rG),e(rG,l4o),e(Js,i4o),e(Js,tG),e(tG,d4o),e(Js,c4o),e(k,m4o),e(k,Ys),e(Ys,Xhe),e(Xhe,f4o),e(Ys,g4o),e(Ys,aG),e(aG,h4o),e(Ys,u4o),e(Ys,nG),e(nG,p4o),e(Ys,_4o),e(k,b4o),e(k,Zs),e(Zs,zhe),e(zhe,v4o),e(Zs,F4o),e(Zs,sG),e(sG,T4o),e(Zs,M4o),e(Zs,lG),e(lG,E4o),e(Zs,C4o),e(k,w4o),e(k,Ks),e(Ks,Qhe),e(Qhe,A4o),e(Ks,L4o),e(Ks,iG),e(iG,y4o),e(Ks,x4o),e(Ks,dG),e(dG,$4o),e(Ks,k4o),e(k,S4o),e(k,el),e(el,Whe),e(Whe,R4o),e(el,P4o),e(el,cG),e(cG,B4o),e(el,I4o),e(el,mG),e(mG,N4o),e(el,q4o),e(k,j4o),e(k,ol),e(ol,Uhe),e(Uhe,D4o),e(ol,G4o),e(ol,fG),e(fG,O4o),e(ol,V4o),e(ol,gG),e(gG,X4o),e(ol,z4o),e(k,Q4o),e(k,Su),e(Su,Hhe),e(Hhe,W4o),e(Su,U4o),e(Su,hG),e(hG,H4o),e(Su,J4o),e(k,Y4o),e(k,rl),e(rl,Jhe),e(Jhe,Z4o),e(rl,K4o),e(rl,uG),e(uG,eCo),e(rl,oCo),e(rl,pG),e(pG,rCo),e(rl,tCo),e(k,aCo),e(k,tl),e(tl,Yhe),e(Yhe,nCo),e(tl,sCo),e(tl,_G),e(_G,lCo),e(tl,iCo),e(tl,bG),e(bG,dCo),e(tl,cCo),e(k,mCo),e(k,Ru),e(Ru,Zhe),e(Zhe,fCo),e(Ru,gCo),e(Ru,vG),e(vG,hCo),e(Ru,uCo),e(k,pCo),e(k,Pu),e(Pu,Khe),e(Khe,_Co),e(Pu,bCo),e(Pu,FG),e(FG,vCo),e(Pu,FCo),e(k,TCo),e(k,Bu),e(Bu,eue),e(eue,MCo),e(Bu,ECo),e(Bu,TG),e(TG,CCo),e(Bu,wCo),e(k,ACo),e(k,Iu),e(Iu,oue),e(oue,LCo),e(Iu,yCo),e(Iu,MG),e(MG,xCo),e(Iu,$Co),e(k,kCo),e(k,al),e(al,rue),e(rue,SCo),e(al,RCo),e(al,EG),e(EG,PCo),e(al,BCo),e(al,CG),e(CG,ICo),e(al,NCo),e(k,qCo),e(k,Nu),e(Nu,tue),e(tue,jCo),e(Nu,DCo),e(Nu,wG),e(wG,GCo),e(Nu,OCo),e(k,VCo),e(k,nl),e(nl,aue),e(aue,XCo),e(nl,zCo),e(nl,AG),e(AG,QCo),e(nl,WCo),e(nl,LG),e(LG,UCo),e(nl,HCo),e(k,JCo),e(k,sl),e(sl,nue),e(nue,YCo),e(sl,ZCo),e(sl,yG),e(yG,KCo),e(sl,e3o),e(sl,xG),e(xG,o3o),e(sl,r3o),e(k,t3o),e(k,ll),e(ll,sue),e(sue,a3o),e(ll,n3o),e(ll,$G),e($G,s3o),e(ll,l3o),e(ll,kG),e(kG,i3o),e(ll,d3o),e(k,c3o),e(k,il),e(il,lue),e(lue,m3o),e(il,f3o),e(il,SG),e(SG,g3o),e(il,h3o),e(il,RG),e(RG,u3o),e(il,p3o),e(k,_3o),e(k,dl),e(dl,iue),e(iue,b3o),e(dl,v3o),e(dl,PG),e(PG,F3o),e(dl,T3o),e(dl,BG),e(BG,M3o),e(dl,E3o),e(k,C3o),e(k,cl),e(cl,due),e(due,w3o),e(cl,A3o),e(cl,IG),e(IG,L3o),e(cl,y3o),e(cl,NG),e(NG,x3o),e(cl,$3o),e(k,k3o),e(k,qu),e(qu,cue),e(cue,S3o),e(qu,R3o),e(qu,qG),e(qG,P3o),e(qu,B3o),e(k,I3o),e(k,ju),e(ju,mue),e(mue,N3o),e(ju,q3o),e(ju,jG),e(jG,j3o),e(ju,D3o),e(k,G3o),e(k,ml),e(ml,fue),e(fue,O3o),e(ml,V3o),e(ml,DG),e(DG,X3o),e(ml,z3o),e(ml,GG),e(GG,Q3o),e(ml,W3o),e(k,U3o),e(k,fl),e(fl,gue),e(gue,H3o),e(fl,J3o),e(fl,OG),e(OG,Y3o),e(fl,Z3o),e(fl,VG),e(VG,K3o),e(fl,e5o),e(k,o5o),e(k,gl),e(gl,hue),e(hue,r5o),e(gl,t5o),e(gl,XG),e(XG,a5o),e(gl,n5o),e(gl,zG),e(zG,s5o),e(gl,l5o),e(k,i5o),e(k,Du),e(Du,uue),e(uue,d5o),e(Du,c5o),e(Du,QG),e(QG,m5o),e(Du,f5o),e(k,g5o),e(k,Gu),e(Gu,pue),e(pue,h5o),e(Gu,u5o),e(Gu,WG),e(WG,p5o),e(Gu,_5o),e(k,b5o),e(k,Ou),e(Ou,_ue),e(_ue,v5o),e(Ou,F5o),e(Ou,UG),e(UG,T5o),e(Ou,M5o),e(k,E5o),e(k,hl),e(hl,bue),e(bue,C5o),e(hl,w5o),e(hl,HG),e(HG,A5o),e(hl,L5o),e(hl,JG),e(JG,y5o),e(hl,x5o),e(k,$5o),e(k,ul),e(ul,vue),e(vue,k5o),e(ul,S5o),e(ul,YG),e(YG,R5o),e(ul,P5o),e(ul,ZG),e(ZG,B5o),e(ul,I5o),e(k,N5o),e(k,Vu),e(Vu,Fue),e(Fue,q5o),e(Vu,j5o),e(Vu,KG),e(KG,D5o),e(Vu,G5o),e(k,O5o),e(k,Xu),e(Xu,Tue),e(Tue,V5o),e(Xu,X5o),e(Xu,eO),e(eO,z5o),e(Xu,Q5o),e(k,W5o),e(k,zu),e(zu,Mue),e(Mue,U5o),e(zu,H5o),e(zu,oO),e(oO,J5o),e(zu,Y5o),e(k,Z5o),e(k,Qu),e(Qu,Eue),e(Eue,K5o),e(Qu,e0o),e(Qu,rO),e(rO,o0o),e(Qu,r0o),e(k,t0o),e(k,pl),e(pl,Cue),e(Cue,a0o),e(pl,n0o),e(pl,tO),e(tO,s0o),e(pl,l0o),e(pl,aO),e(aO,i0o),e(pl,d0o),e(k,c0o),e(k,_l),e(_l,wue),e(wue,m0o),e(_l,f0o),e(_l,nO),e(nO,g0o),e(_l,h0o),e(_l,sO),e(sO,u0o),e(_l,p0o),e(k,_0o),e(k,Wu),e(Wu,Aue),e(Aue,b0o),e(Wu,v0o),e(Wu,lO),e(lO,F0o),e(Wu,T0o),e(k,M0o),e(k,Uu),e(Uu,Lue),e(Lue,E0o),e(Uu,C0o),e(Uu,iO),e(iO,w0o),e(Uu,A0o),e(k,L0o),e(k,bl),e(bl,yue),e(yue,y0o),e(bl,x0o),e(bl,dO),e(dO,$0o),e(bl,k0o),e(bl,cO),e(cO,S0o),e(bl,R0o),e(k,P0o),e(k,vl),e(vl,xue),e(xue,B0o),e(vl,I0o),e(vl,mO),e(mO,N0o),e(vl,q0o),e(vl,fO),e(fO,j0o),e(vl,D0o),e(k,G0o),e(k,Fl),e(Fl,$ue),e($ue,O0o),e(Fl,V0o),e(Fl,gO),e(gO,X0o),e(Fl,z0o),e(Fl,hO),e(hO,Q0o),e(Fl,W0o),e(k,U0o),e(k,Tl),e(Tl,kue),e(kue,H0o),e(Tl,J0o),e(Tl,uO),e(uO,Y0o),e(Tl,Z0o),e(Tl,pO),e(pO,K0o),e(Tl,ewo),e(Nr,owo),M(Hu,Nr,null),e(So,rwo),e(So,Ju),M(Gx,Ju,null),e(Ju,two),e(Ju,Sue),e(Sue,awo),b(m,woo,_),b(m,Fd,_),e(Fd,Yu),e(Yu,Rue),M(Ox,Rue,null),e(Fd,nwo),e(Fd,Pue),e(Pue,swo),b(m,Aoo,_),b(m,Ro,_),M(Vx,Ro,null),e(Ro,lwo),e(Ro,Xx),e(Xx,iwo),e(Xx,_O),e(_O,dwo),e(Xx,cwo),e(Ro,mwo),e(Ro,zx),e(zx,fwo),e(zx,Bue),e(Bue,gwo),e(zx,hwo),e(Ro,uwo),e(Ro,Ye),M(Qx,Ye,null),e(Ye,pwo),e(Ye,Iue),e(Iue,_wo),e(Ye,bwo),e(Ye,Ka),e(Ka,vwo),e(Ka,Nue),e(Nue,Fwo),e(Ka,Two),e(Ka,que),e(que,Mwo),e(Ka,Ewo),e(Ka,jue),e(jue,Cwo),e(Ka,wwo),e(Ye,Awo),e(Ye,z),e(z,Zu),e(Zu,Due),e(Due,Lwo),e(Zu,ywo),e(Zu,bO),e(bO,xwo),e(Zu,$wo),e(z,kwo),e(z,Ku),e(Ku,Gue),e(Gue,Swo),e(Ku,Rwo),e(Ku,vO),e(vO,Pwo),e(Ku,Bwo),e(z,Iwo),e(z,ep),e(ep,Oue),e(Oue,Nwo),e(ep,qwo),e(ep,FO),e(FO,jwo),e(ep,Dwo),e(z,Gwo),e(z,op),e(op,Vue),e(Vue,Owo),e(op,Vwo),e(op,TO),e(TO,Xwo),e(op,zwo),e(z,Qwo),e(z,rp),e(rp,Xue),e(Xue,Wwo),e(rp,Uwo),e(rp,MO),e(MO,Hwo),e(rp,Jwo),e(z,Ywo),e(z,tp),e(tp,zue),e(zue,Zwo),e(tp,Kwo),e(tp,EO),e(EO,eAo),e(tp,oAo),e(z,rAo),e(z,ap),e(ap,Que),e(Que,tAo),e(ap,aAo),e(ap,CO),e(CO,nAo),e(ap,sAo),e(z,lAo),e(z,np),e(np,Wue),e(Wue,iAo),e(np,dAo),e(np,wO),e(wO,cAo),e(np,mAo),e(z,fAo),e(z,sp),e(sp,Uue),e(Uue,gAo),e(sp,hAo),e(sp,AO),e(AO,uAo),e(sp,pAo),e(z,_Ao),e(z,lp),e(lp,Hue),e(Hue,bAo),e(lp,vAo),e(lp,LO),e(LO,FAo),e(lp,TAo),e(z,MAo),e(z,ip),e(ip,Jue),e(Jue,EAo),e(ip,CAo),e(ip,yO),e(yO,wAo),e(ip,AAo),e(z,LAo),e(z,dp),e(dp,Yue),e(Yue,yAo),e(dp,xAo),e(dp,xO),e(xO,$Ao),e(dp,kAo),e(z,SAo),e(z,cp),e(cp,Zue),e(Zue,RAo),e(cp,PAo),e(cp,$O),e($O,BAo),e(cp,IAo),e(z,NAo),e(z,mp),e(mp,Kue),e(Kue,qAo),e(mp,jAo),e(mp,kO),e(kO,DAo),e(mp,GAo),e(z,OAo),e(z,fp),e(fp,epe),e(epe,VAo),e(fp,XAo),e(fp,SO),e(SO,zAo),e(fp,QAo),e(z,WAo),e(z,gp),e(gp,ope),e(ope,UAo),e(gp,HAo),e(gp,RO),e(RO,JAo),e(gp,YAo),e(z,ZAo),e(z,hp),e(hp,rpe),e(rpe,KAo),e(hp,e6o),e(hp,PO),e(PO,o6o),e(hp,r6o),e(z,t6o),e(z,up),e(up,tpe),e(tpe,a6o),e(up,n6o),e(up,BO),e(BO,s6o),e(up,l6o),e(z,i6o),e(z,pp),e(pp,ape),e(ape,d6o),e(pp,c6o),e(pp,IO),e(IO,m6o),e(pp,f6o),e(z,g6o),e(z,_p),e(_p,npe),e(npe,h6o),e(_p,u6o),e(_p,NO),e(NO,p6o),e(_p,_6o),e(z,b6o),e(z,bp),e(bp,spe),e(spe,v6o),e(bp,F6o),e(bp,qO),e(qO,T6o),e(bp,M6o),e(z,E6o),e(z,vp),e(vp,lpe),e(lpe,C6o),e(vp,w6o),e(vp,jO),e(jO,A6o),e(vp,L6o),e(z,y6o),e(z,Fp),e(Fp,ipe),e(ipe,x6o),e(Fp,$6o),e(Fp,DO),e(DO,k6o),e(Fp,S6o),e(z,R6o),e(z,Tp),e(Tp,dpe),e(dpe,P6o),e(Tp,B6o),e(Tp,GO),e(GO,I6o),e(Tp,N6o),e(z,q6o),e(z,Mp),e(Mp,cpe),e(cpe,j6o),e(Mp,D6o),e(Mp,OO),e(OO,G6o),e(Mp,O6o),e(z,V6o),e(z,Ep),e(Ep,mpe),e(mpe,X6o),e(Ep,z6o),e(Ep,VO),e(VO,Q6o),e(Ep,W6o),e(z,U6o),e(z,Cp),e(Cp,fpe),e(fpe,H6o),e(Cp,J6o),e(Cp,XO),e(XO,Y6o),e(Cp,Z6o),e(z,K6o),e(z,wp),e(wp,gpe),e(gpe,e7o),e(wp,o7o),e(wp,zO),e(zO,r7o),e(wp,t7o),e(z,a7o),e(z,Ap),e(Ap,hpe),e(hpe,n7o),e(Ap,s7o),e(Ap,QO),e(QO,l7o),e(Ap,i7o),e(z,d7o),e(z,Lp),e(Lp,upe),e(upe,c7o),e(Lp,m7o),e(Lp,WO),e(WO,f7o),e(Lp,g7o),e(z,h7o),e(z,yp),e(yp,ppe),e(ppe,u7o),e(yp,p7o),e(yp,UO),e(UO,_7o),e(yp,b7o),e(z,v7o),e(z,xp),e(xp,_pe),e(_pe,F7o),e(xp,T7o),e(xp,HO),e(HO,M7o),e(xp,E7o),e(z,C7o),e(z,$p),e($p,bpe),e(bpe,w7o),e($p,A7o),e($p,JO),e(JO,L7o),e($p,y7o),e(z,x7o),e(z,kp),e(kp,vpe),e(vpe,$7o),e(kp,k7o),e(kp,YO),e(YO,S7o),e(kp,R7o),e(z,P7o),e(z,Sp),e(Sp,Fpe),e(Fpe,B7o),e(Sp,I7o),e(Sp,ZO),e(ZO,N7o),e(Sp,q7o),e(z,j7o),e(z,Rp),e(Rp,Tpe),e(Tpe,D7o),e(Rp,G7o),e(Rp,KO),e(KO,O7o),e(Rp,V7o),e(z,X7o),e(z,Pp),e(Pp,Mpe),e(Mpe,z7o),e(Pp,Q7o),e(Pp,eV),e(eV,W7o),e(Pp,U7o),e(z,H7o),e(z,Bp),e(Bp,Epe),e(Epe,J7o),e(Bp,Y7o),e(Bp,oV),e(oV,Z7o),e(Bp,K7o),e(z,eLo),e(z,Ip),e(Ip,Cpe),e(Cpe,oLo),e(Ip,rLo),e(Ip,rV),e(rV,tLo),e(Ip,aLo),e(z,nLo),e(z,Np),e(Np,wpe),e(wpe,sLo),e(Np,lLo),e(Np,tV),e(tV,iLo),e(Np,dLo),e(z,cLo),e(z,qp),e(qp,Ape),e(Ape,mLo),e(qp,fLo),e(qp,aV),e(aV,gLo),e(qp,hLo),e(z,uLo),e(z,jp),e(jp,Lpe),e(Lpe,pLo),e(jp,_Lo),e(jp,nV),e(nV,bLo),e(jp,vLo),e(z,FLo),e(z,Dp),e(Dp,ype),e(ype,TLo),e(Dp,MLo),e(Dp,sV),e(sV,ELo),e(Dp,CLo),e(Ye,wLo),M(Gp,Ye,null),e(Ye,ALo),M(Op,Ye,null),e(Ro,LLo),e(Ro,Vp),M(Wx,Vp,null),e(Vp,yLo),e(Vp,xpe),e(xpe,xLo),b(m,Loo,_),b(m,Td,_),e(Td,Xp),e(Xp,$pe),M(Ux,$pe,null),e(Td,$Lo),e(Td,kpe),e(kpe,kLo),b(m,yoo,_),b(m,Po,_),M(Hx,Po,null),e(Po,SLo),e(Po,Jx),e(Jx,RLo),e(Jx,lV),e(lV,PLo),e(Jx,BLo),e(Po,ILo),e(Po,Yx),e(Yx,NLo),e(Yx,Spe),e(Spe,qLo),e(Yx,jLo),e(Po,DLo),e(Po,Ze),M(Zx,Ze,null),e(Ze,GLo),e(Ze,Rpe),e(Rpe,OLo),e(Ze,VLo),e(Ze,Md),e(Md,XLo),e(Md,Ppe),e(Ppe,zLo),e(Md,QLo),e(Md,Bpe),e(Bpe,WLo),e(Md,ULo),e(Ze,HLo),e(Ze,se),e(se,zp),e(zp,Ipe),e(Ipe,JLo),e(zp,YLo),e(zp,iV),e(iV,ZLo),e(zp,KLo),e(se,e8o),e(se,Qp),e(Qp,Npe),e(Npe,o8o),e(Qp,r8o),e(Qp,dV),e(dV,t8o),e(Qp,a8o),e(se,n8o),e(se,Wp),e(Wp,qpe),e(qpe,s8o),e(Wp,l8o),e(Wp,cV),e(cV,i8o),e(Wp,d8o),e(se,c8o),e(se,Up),e(Up,jpe),e(jpe,m8o),e(Up,f8o),e(Up,mV),e(mV,g8o),e(Up,h8o),e(se,u8o),e(se,Hp),e(Hp,Dpe),e(Dpe,p8o),e(Hp,_8o),e(Hp,fV),e(fV,b8o),e(Hp,v8o),e(se,F8o),e(se,Jp),e(Jp,Gpe),e(Gpe,T8o),e(Jp,M8o),e(Jp,gV),e(gV,E8o),e(Jp,C8o),e(se,w8o),e(se,Yp),e(Yp,Ope),e(Ope,A8o),e(Yp,L8o),e(Yp,hV),e(hV,y8o),e(Yp,x8o),e(se,$8o),e(se,Zp),e(Zp,Vpe),e(Vpe,k8o),e(Zp,S8o),e(Zp,uV),e(uV,R8o),e(Zp,P8o),e(se,B8o),e(se,Kp),e(Kp,Xpe),e(Xpe,I8o),e(Kp,N8o),e(Kp,pV),e(pV,q8o),e(Kp,j8o),e(se,D8o),e(se,e_),e(e_,zpe),e(zpe,G8o),e(e_,O8o),e(e_,_V),e(_V,V8o),e(e_,X8o),e(se,z8o),e(se,o_),e(o_,Qpe),e(Qpe,Q8o),e(o_,W8o),e(o_,bV),e(bV,U8o),e(o_,H8o),e(se,J8o),e(se,r_),e(r_,Wpe),e(Wpe,Y8o),e(r_,Z8o),e(r_,vV),e(vV,K8o),e(r_,eyo),e(se,oyo),e(se,t_),e(t_,Upe),e(Upe,ryo),e(t_,tyo),e(t_,FV),e(FV,ayo),e(t_,nyo),e(se,syo),e(se,a_),e(a_,Hpe),e(Hpe,lyo),e(a_,iyo),e(a_,TV),e(TV,dyo),e(a_,cyo),e(se,myo),e(se,n_),e(n_,Jpe),e(Jpe,fyo),e(n_,gyo),e(n_,MV),e(MV,hyo),e(n_,uyo),e(se,pyo),e(se,s_),e(s_,Ype),e(Ype,_yo),e(s_,byo),e(s_,EV),e(EV,vyo),e(s_,Fyo),e(se,Tyo),e(se,l_),e(l_,Zpe),e(Zpe,Myo),e(l_,Eyo),e(l_,CV),e(CV,Cyo),e(l_,wyo),e(se,Ayo),e(se,i_),e(i_,Kpe),e(Kpe,Lyo),e(i_,yyo),e(i_,wV),e(wV,xyo),e(i_,$yo),e(se,kyo),e(se,d_),e(d_,e_e),e(e_e,Syo),e(d_,Ryo),e(d_,AV),e(AV,Pyo),e(d_,Byo),e(se,Iyo),e(se,c_),e(c_,o_e),e(o_e,Nyo),e(c_,qyo),e(c_,LV),e(LV,jyo),e(c_,Dyo),e(se,Gyo),e(se,m_),e(m_,r_e),e(r_e,Oyo),e(m_,Vyo),e(m_,yV),e(yV,Xyo),e(m_,zyo),e(se,Qyo),e(se,f_),e(f_,t_e),e(t_e,Wyo),e(f_,Uyo),e(f_,xV),e(xV,Hyo),e(f_,Jyo),e(se,Yyo),e(se,g_),e(g_,a_e),e(a_e,Zyo),e(g_,Kyo),e(g_,$V),e($V,e9o),e(g_,o9o),e(Ze,r9o),M(h_,Ze,null),e(Ze,t9o),M(u_,Ze,null),e(Po,a9o),e(Po,p_),M(Kx,p_,null),e(p_,n9o),e(p_,n_e),e(n_e,s9o),b(m,xoo,_),b(m,Ed,_),e(Ed,__),e(__,s_e),M(e$,s_e,null),e(Ed,l9o),e(Ed,l_e),e(l_e,i9o),b(m,$oo,_),b(m,Bo,_),M(o$,Bo,null),e(Bo,d9o),e(Bo,Cd),e(Cd,c9o),e(Cd,kV),e(kV,m9o),e(Cd,f9o),e(Cd,SV),e(SV,g9o),e(Cd,h9o),e(Bo,u9o),e(Bo,r$),e(r$,p9o),e(r$,i_e),e(i_e,_9o),e(r$,b9o),e(Bo,v9o),e(Bo,vt),M(t$,vt,null),e(vt,F9o),e(vt,d_e),e(d_e,T9o),e(vt,M9o),e(vt,wd),e(wd,E9o),e(wd,c_e),e(c_e,C9o),e(wd,w9o),e(wd,RV),e(RV,A9o),e(wd,L9o),e(vt,y9o),M(b_,vt,null),e(Bo,x9o),e(Bo,Ke),M(a$,Ke,null),e(Ke,$9o),e(Ke,m_e),e(m_e,k9o),e(Ke,S9o),e(Ke,en),e(en,R9o),e(en,f_e),e(f_e,P9o),e(en,B9o),e(en,g_e),e(g_e,I9o),e(en,N9o),e(en,h_e),e(h_e,q9o),e(en,j9o),e(Ke,D9o),e(Ke,y),e(y,v_),e(v_,u_e),e(u_e,G9o),e(v_,O9o),e(v_,PV),e(PV,V9o),e(v_,X9o),e(y,z9o),e(y,F_),e(F_,p_e),e(p_e,Q9o),e(F_,W9o),e(F_,BV),e(BV,U9o),e(F_,H9o),e(y,J9o),e(y,T_),e(T_,__e),e(__e,Y9o),e(T_,Z9o),e(T_,IV),e(IV,K9o),e(T_,exo),e(y,oxo),e(y,M_),e(M_,b_e),e(b_e,rxo),e(M_,txo),e(M_,NV),e(NV,axo),e(M_,nxo),e(y,sxo),e(y,E_),e(E_,v_e),e(v_e,lxo),e(E_,ixo),e(E_,qV),e(qV,dxo),e(E_,cxo),e(y,mxo),e(y,C_),e(C_,F_e),e(F_e,fxo),e(C_,gxo),e(C_,jV),e(jV,hxo),e(C_,uxo),e(y,pxo),e(y,w_),e(w_,T_e),e(T_e,_xo),e(w_,bxo),e(w_,DV),e(DV,vxo),e(w_,Fxo),e(y,Txo),e(y,A_),e(A_,M_e),e(M_e,Mxo),e(A_,Exo),e(A_,GV),e(GV,Cxo),e(A_,wxo),e(y,Axo),e(y,L_),e(L_,E_e),e(E_e,Lxo),e(L_,yxo),e(L_,OV),e(OV,xxo),e(L_,$xo),e(y,kxo),e(y,y_),e(y_,C_e),e(C_e,Sxo),e(y_,Rxo),e(y_,VV),e(VV,Pxo),e(y_,Bxo),e(y,Ixo),e(y,x_),e(x_,w_e),e(w_e,Nxo),e(x_,qxo),e(x_,XV),e(XV,jxo),e(x_,Dxo),e(y,Gxo),e(y,$_),e($_,A_e),e(A_e,Oxo),e($_,Vxo),e($_,zV),e(zV,Xxo),e($_,zxo),e(y,Qxo),e(y,k_),e(k_,L_e),e(L_e,Wxo),e(k_,Uxo),e(k_,QV),e(QV,Hxo),e(k_,Jxo),e(y,Yxo),e(y,S_),e(S_,y_e),e(y_e,Zxo),e(S_,Kxo),e(S_,WV),e(WV,e$o),e(S_,o$o),e(y,r$o),e(y,R_),e(R_,x_e),e(x_e,t$o),e(R_,a$o),e(R_,UV),e(UV,n$o),e(R_,s$o),e(y,l$o),e(y,P_),e(P_,$_e),e($_e,i$o),e(P_,d$o),e(P_,HV),e(HV,c$o),e(P_,m$o),e(y,f$o),e(y,B_),e(B_,k_e),e(k_e,g$o),e(B_,h$o),e(B_,JV),e(JV,u$o),e(B_,p$o),e(y,_$o),e(y,I_),e(I_,S_e),e(S_e,b$o),e(I_,v$o),e(I_,YV),e(YV,F$o),e(I_,T$o),e(y,M$o),e(y,N_),e(N_,R_e),e(R_e,E$o),e(N_,C$o),e(N_,ZV),e(ZV,w$o),e(N_,A$o),e(y,L$o),e(y,q_),e(q_,P_e),e(P_e,y$o),e(q_,x$o),e(q_,KV),e(KV,$$o),e(q_,k$o),e(y,S$o),e(y,j_),e(j_,B_e),e(B_e,R$o),e(j_,P$o),e(j_,eX),e(eX,B$o),e(j_,I$o),e(y,N$o),e(y,D_),e(D_,I_e),e(I_e,q$o),e(D_,j$o),e(D_,oX),e(oX,D$o),e(D_,G$o),e(y,O$o),e(y,G_),e(G_,N_e),e(N_e,V$o),e(G_,X$o),e(G_,rX),e(rX,z$o),e(G_,Q$o),e(y,W$o),e(y,O_),e(O_,q_e),e(q_e,U$o),e(O_,H$o),e(O_,tX),e(tX,J$o),e(O_,Y$o),e(y,Z$o),e(y,V_),e(V_,j_e),e(j_e,K$o),e(V_,eko),e(V_,aX),e(aX,oko),e(V_,rko),e(y,tko),e(y,X_),e(X_,D_e),e(D_e,ako),e(X_,nko),e(X_,nX),e(nX,sko),e(X_,lko),e(y,iko),e(y,z_),e(z_,G_e),e(G_e,dko),e(z_,cko),e(z_,sX),e(sX,mko),e(z_,fko),e(y,gko),e(y,Q_),e(Q_,O_e),e(O_e,hko),e(Q_,uko),e(Q_,lX),e(lX,pko),e(Q_,_ko),e(y,bko),e(y,W_),e(W_,V_e),e(V_e,vko),e(W_,Fko),e(W_,iX),e(iX,Tko),e(W_,Mko),e(y,Eko),e(y,U_),e(U_,X_e),e(X_e,Cko),e(U_,wko),e(U_,dX),e(dX,Ako),e(U_,Lko),e(y,yko),e(y,H_),e(H_,z_e),e(z_e,xko),e(H_,$ko),e(H_,cX),e(cX,kko),e(H_,Sko),e(y,Rko),e(y,J_),e(J_,Q_e),e(Q_e,Pko),e(J_,Bko),e(J_,mX),e(mX,Iko),e(J_,Nko),e(y,qko),e(y,Y_),e(Y_,W_e),e(W_e,jko),e(Y_,Dko),e(Y_,fX),e(fX,Gko),e(Y_,Oko),e(y,Vko),e(y,Z_),e(Z_,U_e),e(U_e,Xko),e(Z_,zko),e(Z_,gX),e(gX,Qko),e(Z_,Wko),e(y,Uko),e(y,K_),e(K_,H_e),e(H_e,Hko),e(K_,Jko),e(K_,hX),e(hX,Yko),e(K_,Zko),e(y,Kko),e(y,e1),e(e1,J_e),e(J_e,eSo),e(e1,oSo),e(e1,uX),e(uX,rSo),e(e1,tSo),e(y,aSo),e(y,o1),e(o1,Y_e),e(Y_e,nSo),e(o1,sSo),e(o1,pX),e(pX,lSo),e(o1,iSo),e(y,dSo),e(y,r1),e(r1,Z_e),e(Z_e,cSo),e(r1,mSo),e(r1,_X),e(_X,fSo),e(r1,gSo),e(y,hSo),e(y,t1),e(t1,K_e),e(K_e,uSo),e(t1,pSo),e(t1,bX),e(bX,_So),e(t1,bSo),e(y,vSo),e(y,Ml),e(Ml,e1e),e(e1e,FSo),e(Ml,TSo),e(Ml,vX),e(vX,MSo),e(Ml,ESo),e(Ml,FX),e(FX,CSo),e(Ml,wSo),e(y,ASo),e(y,a1),e(a1,o1e),e(o1e,LSo),e(a1,ySo),e(a1,TX),e(TX,xSo),e(a1,$So),e(y,kSo),e(y,n1),e(n1,r1e),e(r1e,SSo),e(n1,RSo),e(n1,MX),e(MX,PSo),e(n1,BSo),e(y,ISo),e(y,s1),e(s1,t1e),e(t1e,NSo),e(s1,qSo),e(s1,EX),e(EX,jSo),e(s1,DSo),e(y,GSo),e(y,l1),e(l1,a1e),e(a1e,OSo),e(l1,VSo),e(l1,CX),e(CX,XSo),e(l1,zSo),e(y,QSo),e(y,i1),e(i1,n1e),e(n1e,WSo),e(i1,USo),e(i1,wX),e(wX,HSo),e(i1,JSo),e(y,YSo),e(y,d1),e(d1,s1e),e(s1e,ZSo),e(d1,KSo),e(d1,AX),e(AX,eRo),e(d1,oRo),e(y,rRo),e(y,c1),e(c1,l1e),e(l1e,tRo),e(c1,aRo),e(c1,LX),e(LX,nRo),e(c1,sRo),e(y,lRo),e(y,m1),e(m1,i1e),e(i1e,iRo),e(m1,dRo),e(m1,yX),e(yX,cRo),e(m1,mRo),e(y,fRo),e(y,f1),e(f1,d1e),e(d1e,gRo),e(f1,hRo),e(f1,xX),e(xX,uRo),e(f1,pRo),e(y,_Ro),e(y,g1),e(g1,c1e),e(c1e,bRo),e(g1,vRo),e(g1,$X),e($X,FRo),e(g1,TRo),e(y,MRo),e(y,h1),e(h1,m1e),e(m1e,ERo),e(h1,CRo),e(h1,kX),e(kX,wRo),e(h1,ARo),e(y,LRo),e(y,u1),e(u1,f1e),e(f1e,yRo),e(u1,xRo),e(u1,SX),e(SX,$Ro),e(u1,kRo),e(y,SRo),e(y,p1),e(p1,g1e),e(g1e,RRo),e(p1,PRo),e(p1,RX),e(RX,BRo),e(p1,IRo),e(y,NRo),e(y,_1),e(_1,h1e),e(h1e,qRo),e(_1,jRo),e(_1,PX),e(PX,DRo),e(_1,GRo),e(y,ORo),e(y,b1),e(b1,u1e),e(u1e,VRo),e(b1,XRo),e(b1,BX),e(BX,zRo),e(b1,QRo),e(y,WRo),e(y,v1),e(v1,p1e),e(p1e,URo),e(v1,HRo),e(v1,IX),e(IX,JRo),e(v1,YRo),e(y,ZRo),e(y,F1),e(F1,_1e),e(_1e,KRo),e(F1,ePo),e(F1,NX),e(NX,oPo),e(F1,rPo),e(y,tPo),e(y,T1),e(T1,b1e),e(b1e,aPo),e(T1,nPo),e(T1,qX),e(qX,sPo),e(T1,lPo),e(y,iPo),e(y,M1),e(M1,v1e),e(v1e,dPo),e(M1,cPo),e(M1,jX),e(jX,mPo),e(M1,fPo),e(y,gPo),e(y,E1),e(E1,F1e),e(F1e,hPo),e(E1,uPo),e(E1,DX),e(DX,pPo),e(E1,_Po),e(y,bPo),e(y,C1),e(C1,T1e),e(T1e,vPo),e(C1,FPo),e(C1,GX),e(GX,TPo),e(C1,MPo),e(y,EPo),e(y,w1),e(w1,M1e),e(M1e,CPo),e(w1,wPo),e(w1,OX),e(OX,APo),e(w1,LPo),e(y,yPo),e(y,A1),e(A1,E1e),e(E1e,xPo),e(A1,$Po),e(A1,VX),e(VX,kPo),e(A1,SPo),e(y,RPo),e(y,L1),e(L1,C1e),e(C1e,PPo),e(L1,BPo),e(L1,XX),e(XX,IPo),e(L1,NPo),e(y,qPo),e(y,y1),e(y1,w1e),e(w1e,jPo),e(y1,DPo),e(y1,zX),e(zX,GPo),e(y1,OPo),e(y,VPo),e(y,x1),e(x1,A1e),e(A1e,XPo),e(x1,zPo),e(x1,QX),e(QX,QPo),e(x1,WPo),e(y,UPo),e(y,$1),e($1,L1e),e(L1e,HPo),e($1,JPo),e($1,WX),e(WX,YPo),e($1,ZPo),e(y,KPo),e(y,k1),e(k1,y1e),e(y1e,eBo),e(k1,oBo),e(k1,UX),e(UX,rBo),e(k1,tBo),e(y,aBo),e(y,S1),e(S1,x1e),e(x1e,nBo),e(S1,sBo),e(S1,HX),e(HX,lBo),e(S1,iBo),e(y,dBo),e(y,R1),e(R1,$1e),e($1e,cBo),e(R1,mBo),e(R1,JX),e(JX,fBo),e(R1,gBo),e(y,hBo),e(y,P1),e(P1,k1e),e(k1e,uBo),e(P1,pBo),e(P1,YX),e(YX,_Bo),e(P1,bBo),e(y,vBo),e(y,B1),e(B1,S1e),e(S1e,FBo),e(B1,TBo),e(B1,ZX),e(ZX,MBo),e(B1,EBo),e(y,CBo),e(y,I1),e(I1,R1e),e(R1e,wBo),e(I1,ABo),e(I1,KX),e(KX,LBo),e(I1,yBo),e(y,xBo),e(y,N1),e(N1,P1e),e(P1e,$Bo),e(N1,kBo),e(N1,ez),e(ez,SBo),e(N1,RBo),e(y,PBo),e(y,q1),e(q1,B1e),e(B1e,BBo),e(q1,IBo),e(q1,oz),e(oz,NBo),e(q1,qBo),e(y,jBo),e(y,j1),e(j1,I1e),e(I1e,DBo),e(j1,GBo),e(j1,rz),e(rz,OBo),e(j1,VBo),e(y,XBo),e(y,D1),e(D1,N1e),e(N1e,zBo),e(D1,QBo),e(D1,tz),e(tz,WBo),e(D1,UBo),e(y,HBo),e(y,G1),e(G1,q1e),e(q1e,JBo),e(G1,YBo),e(G1,az),e(az,ZBo),e(G1,KBo),e(y,eIo),e(y,O1),e(O1,j1e),e(j1e,oIo),e(O1,rIo),e(O1,nz),e(nz,tIo),e(O1,aIo),e(y,nIo),e(y,V1),e(V1,D1e),e(D1e,sIo),e(V1,lIo),e(V1,sz),e(sz,iIo),e(V1,dIo),e(y,cIo),e(y,X1),e(X1,G1e),e(G1e,mIo),e(X1,fIo),e(X1,lz),e(lz,gIo),e(X1,hIo),e(y,uIo),e(y,z1),e(z1,O1e),e(O1e,pIo),e(z1,_Io),e(z1,iz),e(iz,bIo),e(z1,vIo),e(y,FIo),e(y,Q1),e(Q1,V1e),e(V1e,TIo),e(Q1,MIo),e(Q1,dz),e(dz,EIo),e(Q1,CIo),e(y,wIo),e(y,W1),e(W1,X1e),e(X1e,AIo),e(W1,LIo),e(W1,cz),e(cz,yIo),e(W1,xIo),e(y,$Io),e(y,U1),e(U1,z1e),e(z1e,kIo),e(U1,SIo),e(U1,mz),e(mz,RIo),e(U1,PIo),e(y,BIo),e(y,H1),e(H1,Q1e),e(Q1e,IIo),e(H1,NIo),e(H1,fz),e(fz,qIo),e(H1,jIo),e(y,DIo),e(y,J1),e(J1,W1e),e(W1e,GIo),e(J1,OIo),e(J1,gz),e(gz,VIo),e(J1,XIo),e(y,zIo),e(y,Y1),e(Y1,U1e),e(U1e,QIo),e(Y1,WIo),e(Y1,hz),e(hz,UIo),e(Y1,HIo),e(y,JIo),e(y,Z1),e(Z1,H1e),e(H1e,YIo),e(Z1,ZIo),e(Z1,uz),e(uz,KIo),e(Z1,eNo),e(y,oNo),e(y,K1),e(K1,J1e),e(J1e,rNo),e(K1,tNo),e(K1,pz),e(pz,aNo),e(K1,nNo),e(y,sNo),e(y,e2),e(e2,Y1e),e(Y1e,lNo),e(e2,iNo),e(e2,_z),e(_z,dNo),e(e2,cNo),e(y,mNo),e(y,o2),e(o2,Z1e),e(Z1e,fNo),e(o2,gNo),e(o2,bz),e(bz,hNo),e(o2,uNo),e(y,pNo),e(y,r2),e(r2,K1e),e(K1e,_No),e(r2,bNo),e(r2,vz),e(vz,vNo),e(r2,FNo),e(y,TNo),e(y,t2),e(t2,e2e),e(e2e,MNo),e(t2,ENo),e(t2,Fz),e(Fz,CNo),e(t2,wNo),e(y,ANo),e(y,a2),e(a2,o2e),e(o2e,LNo),e(a2,yNo),e(a2,Tz),e(Tz,xNo),e(a2,$No),e(y,kNo),e(y,n2),e(n2,r2e),e(r2e,SNo),e(n2,RNo),e(n2,Mz),e(Mz,PNo),e(n2,BNo),e(y,INo),e(y,s2),e(s2,t2e),e(t2e,NNo),e(s2,qNo),e(s2,Ez),e(Ez,jNo),e(s2,DNo),e(y,GNo),e(y,l2),e(l2,a2e),e(a2e,ONo),e(l2,VNo),e(l2,Cz),e(Cz,XNo),e(l2,zNo),e(y,QNo),e(y,i2),e(i2,n2e),e(n2e,WNo),e(i2,UNo),e(i2,wz),e(wz,HNo),e(i2,JNo),e(y,YNo),e(y,d2),e(d2,s2e),e(s2e,ZNo),e(d2,KNo),e(d2,Az),e(Az,eqo),e(d2,oqo),e(y,rqo),e(y,c2),e(c2,l2e),e(l2e,tqo),e(c2,aqo),e(c2,Lz),e(Lz,nqo),e(c2,sqo),e(y,lqo),e(y,m2),e(m2,i2e),e(i2e,iqo),e(m2,dqo),e(m2,yz),e(yz,cqo),e(m2,mqo),e(y,fqo),e(y,f2),e(f2,d2e),e(d2e,gqo),e(f2,hqo),e(f2,xz),e(xz,uqo),e(f2,pqo),e(y,_qo),e(y,g2),e(g2,c2e),e(c2e,bqo),e(g2,vqo),e(g2,$z),e($z,Fqo),e(g2,Tqo),e(y,Mqo),e(y,h2),e(h2,m2e),e(m2e,Eqo),e(h2,Cqo),e(h2,kz),e(kz,wqo),e(h2,Aqo),e(y,Lqo),e(y,u2),e(u2,f2e),e(f2e,yqo),e(u2,xqo),e(u2,Sz),e(Sz,$qo),e(u2,kqo),e(y,Sqo),e(y,p2),e(p2,g2e),e(g2e,Rqo),e(p2,Pqo),e(p2,Rz),e(Rz,Bqo),e(p2,Iqo),e(y,Nqo),e(y,_2),e(_2,h2e),e(h2e,qqo),e(_2,jqo),e(_2,Pz),e(Pz,Dqo),e(_2,Gqo),e(y,Oqo),e(y,b2),e(b2,u2e),e(u2e,Vqo),e(b2,Xqo),e(b2,Bz),e(Bz,zqo),e(b2,Qqo),e(y,Wqo),e(y,v2),e(v2,p2e),e(p2e,Uqo),e(v2,Hqo),e(v2,Iz),e(Iz,Jqo),e(v2,Yqo),e(y,Zqo),e(y,F2),e(F2,_2e),e(_2e,Kqo),e(F2,ejo),e(F2,Nz),e(Nz,ojo),e(F2,rjo),e(y,tjo),e(y,T2),e(T2,b2e),e(b2e,ajo),e(T2,njo),e(T2,qz),e(qz,sjo),e(T2,ljo),e(y,ijo),e(y,M2),e(M2,v2e),e(v2e,djo),e(M2,cjo),e(M2,jz),e(jz,mjo),e(M2,fjo),e(y,gjo),e(y,E2),e(E2,F2e),e(F2e,hjo),e(E2,ujo),e(E2,Dz),e(Dz,pjo),e(E2,_jo),e(y,bjo),e(y,C2),e(C2,T2e),e(T2e,vjo),e(C2,Fjo),e(C2,Gz),e(Gz,Tjo),e(C2,Mjo),e(y,Ejo),e(y,w2),e(w2,M2e),e(M2e,Cjo),e(w2,wjo),e(w2,Oz),e(Oz,Ajo),e(w2,Ljo),e(y,yjo),e(y,A2),e(A2,E2e),e(E2e,xjo),e(A2,$jo),e(A2,Vz),e(Vz,kjo),e(A2,Sjo),e(y,Rjo),e(y,L2),e(L2,C2e),e(C2e,Pjo),e(L2,Bjo),e(L2,Xz),e(Xz,Ijo),e(L2,Njo),e(y,qjo),e(y,y2),e(y2,w2e),e(w2e,jjo),e(y2,Djo),e(y2,zz),e(zz,Gjo),e(y2,Ojo),e(y,Vjo),e(y,x2),e(x2,A2e),e(A2e,Xjo),e(x2,zjo),e(x2,Qz),e(Qz,Qjo),e(x2,Wjo),e(y,Ujo),e(y,$2),e($2,L2e),e(L2e,Hjo),e($2,Jjo),e($2,Wz),e(Wz,Yjo),e($2,Zjo),e(y,Kjo),e(y,k2),e(k2,y2e),e(y2e,eDo),e(k2,oDo),e(k2,Uz),e(Uz,rDo),e(k2,tDo),e(y,aDo),e(y,S2),e(S2,x2e),e(x2e,nDo),e(S2,sDo),e(S2,Hz),e(Hz,lDo),e(S2,iDo),e(y,dDo),e(y,R2),e(R2,$2e),e($2e,cDo),e(R2,mDo),e(R2,Jz),e(Jz,fDo),e(R2,gDo),e(y,hDo),e(y,P2),e(P2,k2e),e(k2e,uDo),e(P2,pDo),e(P2,Yz),e(Yz,_Do),e(P2,bDo),e(y,vDo),e(y,B2),e(B2,S2e),e(S2e,FDo),e(B2,TDo),e(B2,Zz),e(Zz,MDo),e(B2,EDo),e(y,CDo),e(y,I2),e(I2,R2e),e(R2e,wDo),e(I2,ADo),e(I2,Kz),e(Kz,LDo),e(I2,yDo),e(Ke,xDo),e(Ke,N2),e(N2,$Do),e(N2,P2e),e(P2e,kDo),e(N2,SDo),e(N2,B2e),e(B2e,RDo),e(Ke,PDo),M(q2,Ke,null),b(m,koo,_),b(m,Ad,_),e(Ad,j2),e(j2,I2e),M(n$,I2e,null),e(Ad,BDo),e(Ad,N2e),e(N2e,IDo),b(m,Soo,_),b(m,Io,_),M(s$,Io,null),e(Io,NDo),e(Io,Ld),e(Ld,qDo),e(Ld,eQ),e(eQ,jDo),e(Ld,DDo),e(Ld,oQ),e(oQ,GDo),e(Ld,ODo),e(Io,VDo),e(Io,l$),e(l$,XDo),e(l$,q2e),e(q2e,zDo),e(l$,QDo),e(Io,WDo),e(Io,Ft),M(i$,Ft,null),e(Ft,UDo),e(Ft,j2e),e(j2e,HDo),e(Ft,JDo),e(Ft,yd),e(yd,YDo),e(yd,D2e),e(D2e,ZDo),e(yd,KDo),e(yd,rQ),e(rQ,eGo),e(yd,oGo),e(Ft,rGo),M(D2,Ft,null),e(Io,tGo),e(Io,eo),M(d$,eo,null),e(eo,aGo),e(eo,G2e),e(G2e,nGo),e(eo,sGo),e(eo,on),e(on,lGo),e(on,O2e),e(O2e,iGo),e(on,dGo),e(on,V2e),e(V2e,cGo),e(on,mGo),e(on,X2e),e(X2e,fGo),e(on,gGo),e(eo,hGo),e(eo,G),e(G,G2),e(G2,z2e),e(z2e,uGo),e(G2,pGo),e(G2,tQ),e(tQ,_Go),e(G2,bGo),e(G,vGo),e(G,O2),e(O2,Q2e),e(Q2e,FGo),e(O2,TGo),e(O2,aQ),e(aQ,MGo),e(O2,EGo),e(G,CGo),e(G,V2),e(V2,W2e),e(W2e,wGo),e(V2,AGo),e(V2,nQ),e(nQ,LGo),e(V2,yGo),e(G,xGo),e(G,X2),e(X2,U2e),e(U2e,$Go),e(X2,kGo),e(X2,sQ),e(sQ,SGo),e(X2,RGo),e(G,PGo),e(G,z2),e(z2,H2e),e(H2e,BGo),e(z2,IGo),e(z2,lQ),e(lQ,NGo),e(z2,qGo),e(G,jGo),e(G,Q2),e(Q2,J2e),e(J2e,DGo),e(Q2,GGo),e(Q2,iQ),e(iQ,OGo),e(Q2,VGo),e(G,XGo),e(G,W2),e(W2,Y2e),e(Y2e,zGo),e(W2,QGo),e(W2,dQ),e(dQ,WGo),e(W2,UGo),e(G,HGo),e(G,U2),e(U2,Z2e),e(Z2e,JGo),e(U2,YGo),e(U2,cQ),e(cQ,ZGo),e(U2,KGo),e(G,eOo),e(G,H2),e(H2,K2e),e(K2e,oOo),e(H2,rOo),e(H2,mQ),e(mQ,tOo),e(H2,aOo),e(G,nOo),e(G,J2),e(J2,ebe),e(ebe,sOo),e(J2,lOo),e(J2,fQ),e(fQ,iOo),e(J2,dOo),e(G,cOo),e(G,Y2),e(Y2,obe),e(obe,mOo),e(Y2,fOo),e(Y2,gQ),e(gQ,gOo),e(Y2,hOo),e(G,uOo),e(G,Z2),e(Z2,rbe),e(rbe,pOo),e(Z2,_Oo),e(Z2,hQ),e(hQ,bOo),e(Z2,vOo),e(G,FOo),e(G,K2),e(K2,tbe),e(tbe,TOo),e(K2,MOo),e(K2,uQ),e(uQ,EOo),e(K2,COo),e(G,wOo),e(G,eb),e(eb,abe),e(abe,AOo),e(eb,LOo),e(eb,pQ),e(pQ,yOo),e(eb,xOo),e(G,$Oo),e(G,ob),e(ob,nbe),e(nbe,kOo),e(ob,SOo),e(ob,_Q),e(_Q,ROo),e(ob,POo),e(G,BOo),e(G,rb),e(rb,sbe),e(sbe,IOo),e(rb,NOo),e(rb,bQ),e(bQ,qOo),e(rb,jOo),e(G,DOo),e(G,tb),e(tb,lbe),e(lbe,GOo),e(tb,OOo),e(tb,vQ),e(vQ,VOo),e(tb,XOo),e(G,zOo),e(G,ab),e(ab,ibe),e(ibe,QOo),e(ab,WOo),e(ab,FQ),e(FQ,UOo),e(ab,HOo),e(G,JOo),e(G,nb),e(nb,dbe),e(dbe,YOo),e(nb,ZOo),e(nb,TQ),e(TQ,KOo),e(nb,eVo),e(G,oVo),e(G,sb),e(sb,cbe),e(cbe,rVo),e(sb,tVo),e(sb,MQ),e(MQ,aVo),e(sb,nVo),e(G,sVo),e(G,lb),e(lb,mbe),e(mbe,lVo),e(lb,iVo),e(lb,EQ),e(EQ,dVo),e(lb,cVo),e(G,mVo),e(G,ib),e(ib,fbe),e(fbe,fVo),e(ib,gVo),e(ib,CQ),e(CQ,hVo),e(ib,uVo),e(G,pVo),e(G,db),e(db,gbe),e(gbe,_Vo),e(db,bVo),e(db,wQ),e(wQ,vVo),e(db,FVo),e(G,TVo),e(G,cb),e(cb,hbe),e(hbe,MVo),e(cb,EVo),e(cb,AQ),e(AQ,CVo),e(cb,wVo),e(G,AVo),e(G,mb),e(mb,ube),e(ube,LVo),e(mb,yVo),e(mb,LQ),e(LQ,xVo),e(mb,$Vo),e(G,kVo),e(G,fb),e(fb,pbe),e(pbe,SVo),e(fb,RVo),e(fb,yQ),e(yQ,PVo),e(fb,BVo),e(G,IVo),e(G,gb),e(gb,_be),e(_be,NVo),e(gb,qVo),e(gb,xQ),e(xQ,jVo),e(gb,DVo),e(G,GVo),e(G,hb),e(hb,bbe),e(bbe,OVo),e(hb,VVo),e(hb,$Q),e($Q,XVo),e(hb,zVo),e(G,QVo),e(G,ub),e(ub,vbe),e(vbe,WVo),e(ub,UVo),e(ub,kQ),e(kQ,HVo),e(ub,JVo),e(G,YVo),e(G,pb),e(pb,Fbe),e(Fbe,ZVo),e(pb,KVo),e(pb,SQ),e(SQ,eXo),e(pb,oXo),e(G,rXo),e(G,_b),e(_b,Tbe),e(Tbe,tXo),e(_b,aXo),e(_b,RQ),e(RQ,nXo),e(_b,sXo),e(G,lXo),e(G,bb),e(bb,Mbe),e(Mbe,iXo),e(bb,dXo),e(bb,PQ),e(PQ,cXo),e(bb,mXo),e(G,fXo),e(G,vb),e(vb,Ebe),e(Ebe,gXo),e(vb,hXo),e(vb,BQ),e(BQ,uXo),e(vb,pXo),e(G,_Xo),e(G,Fb),e(Fb,Cbe),e(Cbe,bXo),e(Fb,vXo),e(Fb,IQ),e(IQ,FXo),e(Fb,TXo),e(G,MXo),e(G,Tb),e(Tb,wbe),e(wbe,EXo),e(Tb,CXo),e(Tb,NQ),e(NQ,wXo),e(Tb,AXo),e(G,LXo),e(G,Mb),e(Mb,Abe),e(Abe,yXo),e(Mb,xXo),e(Mb,qQ),e(qQ,$Xo),e(Mb,kXo),e(G,SXo),e(G,Eb),e(Eb,Lbe),e(Lbe,RXo),e(Eb,PXo),e(Eb,jQ),e(jQ,BXo),e(Eb,IXo),e(G,NXo),e(G,Cb),e(Cb,ybe),e(ybe,qXo),e(Cb,jXo),e(Cb,DQ),e(DQ,DXo),e(Cb,GXo),e(G,OXo),e(G,wb),e(wb,xbe),e(xbe,VXo),e(wb,XXo),e(wb,GQ),e(GQ,zXo),e(wb,QXo),e(G,WXo),e(G,Ab),e(Ab,$be),e($be,UXo),e(Ab,HXo),e(Ab,OQ),e(OQ,JXo),e(Ab,YXo),e(G,ZXo),e(G,Lb),e(Lb,kbe),e(kbe,KXo),e(Lb,ezo),e(Lb,VQ),e(VQ,ozo),e(Lb,rzo),e(G,tzo),e(G,yb),e(yb,Sbe),e(Sbe,azo),e(yb,nzo),e(yb,XQ),e(XQ,szo),e(yb,lzo),e(G,izo),e(G,xb),e(xb,Rbe),e(Rbe,dzo),e(xb,czo),e(xb,zQ),e(zQ,mzo),e(xb,fzo),e(G,gzo),e(G,$b),e($b,Pbe),e(Pbe,hzo),e($b,uzo),e($b,QQ),e(QQ,pzo),e($b,_zo),e(G,bzo),e(G,kb),e(kb,Bbe),e(Bbe,vzo),e(kb,Fzo),e(kb,WQ),e(WQ,Tzo),e(kb,Mzo),e(G,Ezo),e(G,Sb),e(Sb,Ibe),e(Ibe,Czo),e(Sb,wzo),e(Sb,UQ),e(UQ,Azo),e(Sb,Lzo),e(G,yzo),e(G,Rb),e(Rb,Nbe),e(Nbe,xzo),e(Rb,$zo),e(Rb,HQ),e(HQ,kzo),e(Rb,Szo),e(G,Rzo),e(G,Pb),e(Pb,qbe),e(qbe,Pzo),e(Pb,Bzo),e(Pb,JQ),e(JQ,Izo),e(Pb,Nzo),e(eo,qzo),e(eo,Bb),e(Bb,jzo),e(Bb,jbe),e(jbe,Dzo),e(Bb,Gzo),e(Bb,Dbe),e(Dbe,Ozo),e(eo,Vzo),M(Ib,eo,null),b(m,Roo,_),b(m,xd,_),e(xd,Nb),e(Nb,Gbe),M(c$,Gbe,null),e(xd,Xzo),e(xd,Obe),e(Obe,zzo),b(m,Poo,_),b(m,No,_),M(m$,No,null),e(No,Qzo),e(No,$d),e($d,Wzo),e($d,YQ),e(YQ,Uzo),e($d,Hzo),e($d,ZQ),e(ZQ,Jzo),e($d,Yzo),e(No,Zzo),e(No,f$),e(f$,Kzo),e(f$,Vbe),e(Vbe,eQo),e(f$,oQo),e(No,rQo),e(No,Tt),M(g$,Tt,null),e(Tt,tQo),e(Tt,Xbe),e(Xbe,aQo),e(Tt,nQo),e(Tt,kd),e(kd,sQo),e(kd,zbe),e(zbe,lQo),e(kd,iQo),e(kd,KQ),e(KQ,dQo),e(kd,cQo),e(Tt,mQo),M(qb,Tt,null),e(No,fQo),e(No,oo),M(h$,oo,null),e(oo,gQo),e(oo,Qbe),e(Qbe,hQo),e(oo,uQo),e(oo,rn),e(rn,pQo),e(rn,Wbe),e(Wbe,_Qo),e(rn,bQo),e(rn,Ube),e(Ube,vQo),e(rn,FQo),e(rn,Hbe),e(Hbe,TQo),e(rn,MQo),e(oo,EQo),e(oo,Q),e(Q,jb),e(jb,Jbe),e(Jbe,CQo),e(jb,wQo),e(jb,eW),e(eW,AQo),e(jb,LQo),e(Q,yQo),e(Q,Db),e(Db,Ybe),e(Ybe,xQo),e(Db,$Qo),e(Db,oW),e(oW,kQo),e(Db,SQo),e(Q,RQo),e(Q,Gb),e(Gb,Zbe),e(Zbe,PQo),e(Gb,BQo),e(Gb,rW),e(rW,IQo),e(Gb,NQo),e(Q,qQo),e(Q,Ob),e(Ob,Kbe),e(Kbe,jQo),e(Ob,DQo),e(Ob,tW),e(tW,GQo),e(Ob,OQo),e(Q,VQo),e(Q,Vb),e(Vb,eve),e(eve,XQo),e(Vb,zQo),e(Vb,aW),e(aW,QQo),e(Vb,WQo),e(Q,UQo),e(Q,Xb),e(Xb,ove),e(ove,HQo),e(Xb,JQo),e(Xb,nW),e(nW,YQo),e(Xb,ZQo),e(Q,KQo),e(Q,zb),e(zb,rve),e(rve,eWo),e(zb,oWo),e(zb,sW),e(sW,rWo),e(zb,tWo),e(Q,aWo),e(Q,Qb),e(Qb,tve),e(tve,nWo),e(Qb,sWo),e(Qb,lW),e(lW,lWo),e(Qb,iWo),e(Q,dWo),e(Q,Wb),e(Wb,ave),e(ave,cWo),e(Wb,mWo),e(Wb,iW),e(iW,fWo),e(Wb,gWo),e(Q,hWo),e(Q,Ub),e(Ub,nve),e(nve,uWo),e(Ub,pWo),e(Ub,dW),e(dW,_Wo),e(Ub,bWo),e(Q,vWo),e(Q,Hb),e(Hb,sve),e(sve,FWo),e(Hb,TWo),e(Hb,cW),e(cW,MWo),e(Hb,EWo),e(Q,CWo),e(Q,Jb),e(Jb,lve),e(lve,wWo),e(Jb,AWo),e(Jb,mW),e(mW,LWo),e(Jb,yWo),e(Q,xWo),e(Q,Yb),e(Yb,ive),e(ive,$Wo),e(Yb,kWo),e(Yb,fW),e(fW,SWo),e(Yb,RWo),e(Q,PWo),e(Q,Zb),e(Zb,dve),e(dve,BWo),e(Zb,IWo),e(Zb,gW),e(gW,NWo),e(Zb,qWo),e(Q,jWo),e(Q,Kb),e(Kb,cve),e(cve,DWo),e(Kb,GWo),e(Kb,hW),e(hW,OWo),e(Kb,VWo),e(Q,XWo),e(Q,ev),e(ev,mve),e(mve,zWo),e(ev,QWo),e(ev,uW),e(uW,WWo),e(ev,UWo),e(Q,HWo),e(Q,ov),e(ov,fve),e(fve,JWo),e(ov,YWo),e(ov,pW),e(pW,ZWo),e(ov,KWo),e(Q,eUo),e(Q,rv),e(rv,gve),e(gve,oUo),e(rv,rUo),e(rv,_W),e(_W,tUo),e(rv,aUo),e(Q,nUo),e(Q,tv),e(tv,hve),e(hve,sUo),e(tv,lUo),e(tv,bW),e(bW,iUo),e(tv,dUo),e(Q,cUo),e(Q,av),e(av,uve),e(uve,mUo),e(av,fUo),e(av,vW),e(vW,gUo),e(av,hUo),e(Q,uUo),e(Q,nv),e(nv,pve),e(pve,pUo),e(nv,_Uo),e(nv,FW),e(FW,bUo),e(nv,vUo),e(Q,FUo),e(Q,sv),e(sv,_ve),e(_ve,TUo),e(sv,MUo),e(sv,TW),e(TW,EUo),e(sv,CUo),e(Q,wUo),e(Q,lv),e(lv,bve),e(bve,AUo),e(lv,LUo),e(lv,MW),e(MW,yUo),e(lv,xUo),e(Q,$Uo),e(Q,iv),e(iv,vve),e(vve,kUo),e(iv,SUo),e(iv,EW),e(EW,RUo),e(iv,PUo),e(Q,BUo),e(Q,dv),e(dv,Fve),e(Fve,IUo),e(dv,NUo),e(dv,CW),e(CW,qUo),e(dv,jUo),e(Q,DUo),e(Q,cv),e(cv,Tve),e(Tve,GUo),e(cv,OUo),e(cv,wW),e(wW,VUo),e(cv,XUo),e(Q,zUo),e(Q,mv),e(mv,Mve),e(Mve,QUo),e(mv,WUo),e(mv,AW),e(AW,UUo),e(mv,HUo),e(Q,JUo),e(Q,fv),e(fv,Eve),e(Eve,YUo),e(fv,ZUo),e(fv,LW),e(LW,KUo),e(fv,eHo),e(Q,oHo),e(Q,gv),e(gv,Cve),e(Cve,rHo),e(gv,tHo),e(gv,yW),e(yW,aHo),e(gv,nHo),e(Q,sHo),e(Q,hv),e(hv,wve),e(wve,lHo),e(hv,iHo),e(hv,xW),e(xW,dHo),e(hv,cHo),e(Q,mHo),e(Q,uv),e(uv,Ave),e(Ave,fHo),e(uv,gHo),e(uv,$W),e($W,hHo),e(uv,uHo),e(Q,pHo),e(Q,pv),e(pv,Lve),e(Lve,_Ho),e(pv,bHo),e(pv,kW),e(kW,vHo),e(pv,FHo),e(Q,THo),e(Q,_v),e(_v,yve),e(yve,MHo),e(_v,EHo),e(_v,SW),e(SW,CHo),e(_v,wHo),e(Q,AHo),e(Q,bv),e(bv,xve),e(xve,LHo),e(bv,yHo),e(bv,RW),e(RW,xHo),e(bv,$Ho),e(Q,kHo),e(Q,vv),e(vv,$ve),e($ve,SHo),e(vv,RHo),e(vv,PW),e(PW,PHo),e(vv,BHo),e(Q,IHo),e(Q,Fv),e(Fv,kve),e(kve,NHo),e(Fv,qHo),e(Fv,BW),e(BW,jHo),e(Fv,DHo),e(Q,GHo),e(Q,Tv),e(Tv,Sve),e(Sve,OHo),e(Tv,VHo),e(Tv,IW),e(IW,XHo),e(Tv,zHo),e(Q,QHo),e(Q,Mv),e(Mv,Rve),e(Rve,WHo),e(Mv,UHo),e(Mv,NW),e(NW,HHo),e(Mv,JHo),e(Q,YHo),e(Q,Ev),e(Ev,Pve),e(Pve,ZHo),e(Ev,KHo),e(Ev,qW),e(qW,eJo),e(Ev,oJo),e(Q,rJo),e(Q,Cv),e(Cv,Bve),e(Bve,tJo),e(Cv,aJo),e(Cv,jW),e(jW,nJo),e(Cv,sJo),e(Q,lJo),e(Q,wv),e(wv,Ive),e(Ive,iJo),e(wv,dJo),e(wv,DW),e(DW,cJo),e(wv,mJo),e(Q,fJo),e(Q,Av),e(Av,Nve),e(Nve,gJo),e(Av,hJo),e(Av,GW),e(GW,uJo),e(Av,pJo),e(oo,_Jo),e(oo,Lv),e(Lv,bJo),e(Lv,qve),e(qve,vJo),e(Lv,FJo),e(Lv,jve),e(jve,TJo),e(oo,MJo),M(yv,oo,null),b(m,Boo,_),b(m,Sd,_),e(Sd,xv),e(xv,Dve),M(u$,Dve,null),e(Sd,EJo),e(Sd,Gve),e(Gve,CJo),b(m,Ioo,_),b(m,qo,_),M(p$,qo,null),e(qo,wJo),e(qo,Rd),e(Rd,AJo),e(Rd,OW),e(OW,LJo),e(Rd,yJo),e(Rd,VW),e(VW,xJo),e(Rd,$Jo),e(qo,kJo),e(qo,_$),e(_$,SJo),e(_$,Ove),e(Ove,RJo),e(_$,PJo),e(qo,BJo),e(qo,Mt),M(b$,Mt,null),e(Mt,IJo),e(Mt,Vve),e(Vve,NJo),e(Mt,qJo),e(Mt,Pd),e(Pd,jJo),e(Pd,Xve),e(Xve,DJo),e(Pd,GJo),e(Pd,XW),e(XW,OJo),e(Pd,VJo),e(Mt,XJo),M($v,Mt,null),e(qo,zJo),e(qo,ro),M(v$,ro,null),e(ro,QJo),e(ro,zve),e(zve,WJo),e(ro,UJo),e(ro,tn),e(tn,HJo),e(tn,Qve),e(Qve,JJo),e(tn,YJo),e(tn,Wve),e(Wve,ZJo),e(tn,KJo),e(tn,Uve),e(Uve,eYo),e(tn,oYo),e(ro,rYo),e(ro,J),e(J,kv),e(kv,Hve),e(Hve,tYo),e(kv,aYo),e(kv,zW),e(zW,nYo),e(kv,sYo),e(J,lYo),e(J,Sv),e(Sv,Jve),e(Jve,iYo),e(Sv,dYo),e(Sv,QW),e(QW,cYo),e(Sv,mYo),e(J,fYo),e(J,Rv),e(Rv,Yve),e(Yve,gYo),e(Rv,hYo),e(Rv,WW),e(WW,uYo),e(Rv,pYo),e(J,_Yo),e(J,Pv),e(Pv,Zve),e(Zve,bYo),e(Pv,vYo),e(Pv,UW),e(UW,FYo),e(Pv,TYo),e(J,MYo),e(J,Bv),e(Bv,Kve),e(Kve,EYo),e(Bv,CYo),e(Bv,HW),e(HW,wYo),e(Bv,AYo),e(J,LYo),e(J,Iv),e(Iv,eFe),e(eFe,yYo),e(Iv,xYo),e(Iv,JW),e(JW,$Yo),e(Iv,kYo),e(J,SYo),e(J,Nv),e(Nv,oFe),e(oFe,RYo),e(Nv,PYo),e(Nv,YW),e(YW,BYo),e(Nv,IYo),e(J,NYo),e(J,qv),e(qv,rFe),e(rFe,qYo),e(qv,jYo),e(qv,ZW),e(ZW,DYo),e(qv,GYo),e(J,OYo),e(J,jv),e(jv,tFe),e(tFe,VYo),e(jv,XYo),e(jv,KW),e(KW,zYo),e(jv,QYo),e(J,WYo),e(J,Dv),e(Dv,aFe),e(aFe,UYo),e(Dv,HYo),e(Dv,eU),e(eU,JYo),e(Dv,YYo),e(J,ZYo),e(J,Gv),e(Gv,nFe),e(nFe,KYo),e(Gv,eZo),e(Gv,oU),e(oU,oZo),e(Gv,rZo),e(J,tZo),e(J,Ov),e(Ov,sFe),e(sFe,aZo),e(Ov,nZo),e(Ov,rU),e(rU,sZo),e(Ov,lZo),e(J,iZo),e(J,Vv),e(Vv,lFe),e(lFe,dZo),e(Vv,cZo),e(Vv,tU),e(tU,mZo),e(Vv,fZo),e(J,gZo),e(J,Xv),e(Xv,iFe),e(iFe,hZo),e(Xv,uZo),e(Xv,aU),e(aU,pZo),e(Xv,_Zo),e(J,bZo),e(J,zv),e(zv,dFe),e(dFe,vZo),e(zv,FZo),e(zv,nU),e(nU,TZo),e(zv,MZo),e(J,EZo),e(J,Qv),e(Qv,cFe),e(cFe,CZo),e(Qv,wZo),e(Qv,sU),e(sU,AZo),e(Qv,LZo),e(J,yZo),e(J,Wv),e(Wv,mFe),e(mFe,xZo),e(Wv,$Zo),e(Wv,lU),e(lU,kZo),e(Wv,SZo),e(J,RZo),e(J,Uv),e(Uv,fFe),e(fFe,PZo),e(Uv,BZo),e(Uv,iU),e(iU,IZo),e(Uv,NZo),e(J,qZo),e(J,Hv),e(Hv,gFe),e(gFe,jZo),e(Hv,DZo),e(Hv,dU),e(dU,GZo),e(Hv,OZo),e(J,VZo),e(J,Jv),e(Jv,hFe),e(hFe,XZo),e(Jv,zZo),e(Jv,cU),e(cU,QZo),e(Jv,WZo),e(J,UZo),e(J,Yv),e(Yv,uFe),e(uFe,HZo),e(Yv,JZo),e(Yv,mU),e(mU,YZo),e(Yv,ZZo),e(J,KZo),e(J,Zv),e(Zv,pFe),e(pFe,eKo),e(Zv,oKo),e(Zv,fU),e(fU,rKo),e(Zv,tKo),e(J,aKo),e(J,Kv),e(Kv,_Fe),e(_Fe,nKo),e(Kv,sKo),e(Kv,gU),e(gU,lKo),e(Kv,iKo),e(J,dKo),e(J,eF),e(eF,bFe),e(bFe,cKo),e(eF,mKo),e(eF,hU),e(hU,fKo),e(eF,gKo),e(J,hKo),e(J,oF),e(oF,vFe),e(vFe,uKo),e(oF,pKo),e(oF,uU),e(uU,_Ko),e(oF,bKo),e(J,vKo),e(J,rF),e(rF,FFe),e(FFe,FKo),e(rF,TKo),e(rF,pU),e(pU,MKo),e(rF,EKo),e(J,CKo),e(J,tF),e(tF,TFe),e(TFe,wKo),e(tF,AKo),e(tF,_U),e(_U,LKo),e(tF,yKo),e(J,xKo),e(J,aF),e(aF,MFe),e(MFe,$Ko),e(aF,kKo),e(aF,bU),e(bU,SKo),e(aF,RKo),e(J,PKo),e(J,nF),e(nF,EFe),e(EFe,BKo),e(nF,IKo),e(nF,vU),e(vU,NKo),e(nF,qKo),e(J,jKo),e(J,sF),e(sF,CFe),e(CFe,DKo),e(sF,GKo),e(sF,FU),e(FU,OKo),e(sF,VKo),e(J,XKo),e(J,lF),e(lF,wFe),e(wFe,zKo),e(lF,QKo),e(lF,TU),e(TU,WKo),e(lF,UKo),e(J,HKo),e(J,iF),e(iF,AFe),e(AFe,JKo),e(iF,YKo),e(iF,MU),e(MU,ZKo),e(iF,KKo),e(J,eer),e(J,dF),e(dF,LFe),e(LFe,oer),e(dF,rer),e(dF,EU),e(EU,ter),e(dF,aer),e(J,ner),e(J,cF),e(cF,yFe),e(yFe,ser),e(cF,ler),e(cF,CU),e(CU,ier),e(cF,der),e(J,cer),e(J,mF),e(mF,xFe),e(xFe,mer),e(mF,fer),e(mF,$Fe),e($Fe,ger),e(mF,her),e(J,uer),e(J,fF),e(fF,kFe),e(kFe,per),e(fF,_er),e(fF,wU),e(wU,ber),e(fF,ver),e(J,Fer),e(J,gF),e(gF,SFe),e(SFe,Ter),e(gF,Mer),e(gF,AU),e(AU,Eer),e(gF,Cer),e(J,wer),e(J,hF),e(hF,RFe),e(RFe,Aer),e(hF,Ler),e(hF,LU),e(LU,yer),e(hF,xer),e(J,$er),e(J,uF),e(uF,PFe),e(PFe,ker),e(uF,Ser),e(uF,yU),e(yU,Rer),e(uF,Per),e(ro,Ber),e(ro,pF),e(pF,Ier),e(pF,BFe),e(BFe,Ner),e(pF,qer),e(pF,IFe),e(IFe,jer),e(ro,Der),M(_F,ro,null),b(m,Noo,_),b(m,Bd,_),e(Bd,bF),e(bF,NFe),M(F$,NFe,null),e(Bd,Ger),e(Bd,qFe),e(qFe,Oer),b(m,qoo,_),b(m,jo,_),M(T$,jo,null),e(jo,Ver),e(jo,Id),e(Id,Xer),e(Id,xU),e(xU,zer),e(Id,Qer),e(Id,$U),e($U,Wer),e(Id,Uer),e(jo,Her),e(jo,M$),e(M$,Jer),e(M$,jFe),e(jFe,Yer),e(M$,Zer),e(jo,Ker),e(jo,Et),M(E$,Et,null),e(Et,eor),e(Et,DFe),e(DFe,oor),e(Et,ror),e(Et,Nd),e(Nd,tor),e(Nd,GFe),e(GFe,aor),e(Nd,nor),e(Nd,kU),e(kU,sor),e(Nd,lor),e(Et,ior),M(vF,Et,null),e(jo,dor),e(jo,to),M(C$,to,null),e(to,cor),e(to,OFe),e(OFe,mor),e(to,gor),e(to,an),e(an,hor),e(an,VFe),e(VFe,uor),e(an,por),e(an,XFe),e(XFe,_or),e(an,bor),e(an,zFe),e(zFe,vor),e(an,For),e(to,Tor),e(to,fe),e(fe,FF),e(FF,QFe),e(QFe,Mor),e(FF,Eor),e(FF,SU),e(SU,Cor),e(FF,wor),e(fe,Aor),e(fe,TF),e(TF,WFe),e(WFe,Lor),e(TF,yor),e(TF,RU),e(RU,xor),e(TF,$or),e(fe,kor),e(fe,MF),e(MF,UFe),e(UFe,Sor),e(MF,Ror),e(MF,PU),e(PU,Por),e(MF,Bor),e(fe,Ior),e(fe,EF),e(EF,HFe),e(HFe,Nor),e(EF,qor),e(EF,BU),e(BU,jor),e(EF,Dor),e(fe,Gor),e(fe,CF),e(CF,JFe),e(JFe,Oor),e(CF,Vor),e(CF,IU),e(IU,Xor),e(CF,zor),e(fe,Qor),e(fe,wF),e(wF,YFe),e(YFe,Wor),e(wF,Uor),e(wF,NU),e(NU,Hor),e(wF,Jor),e(fe,Yor),e(fe,AF),e(AF,ZFe),e(ZFe,Zor),e(AF,Kor),e(AF,qU),e(qU,err),e(AF,orr),e(fe,rrr),e(fe,LF),e(LF,KFe),e(KFe,trr),e(LF,arr),e(LF,jU),e(jU,nrr),e(LF,srr),e(fe,lrr),e(fe,yF),e(yF,eTe),e(eTe,irr),e(yF,drr),e(yF,DU),e(DU,crr),e(yF,mrr),e(fe,frr),e(fe,xF),e(xF,oTe),e(oTe,grr),e(xF,hrr),e(xF,GU),e(GU,urr),e(xF,prr),e(fe,_rr),e(fe,$F),e($F,rTe),e(rTe,brr),e($F,vrr),e($F,OU),e(OU,Frr),e($F,Trr),e(fe,Mrr),e(fe,kF),e(kF,tTe),e(tTe,Err),e(kF,Crr),e(kF,VU),e(VU,wrr),e(kF,Arr),e(fe,Lrr),e(fe,SF),e(SF,aTe),e(aTe,yrr),e(SF,xrr),e(SF,XU),e(XU,$rr),e(SF,krr),e(fe,Srr),e(fe,RF),e(RF,nTe),e(nTe,Rrr),e(RF,Prr),e(RF,zU),e(zU,Brr),e(RF,Irr),e(fe,Nrr),e(fe,PF),e(PF,sTe),e(sTe,qrr),e(PF,jrr),e(PF,QU),e(QU,Drr),e(PF,Grr),e(fe,Orr),e(fe,BF),e(BF,lTe),e(lTe,Vrr),e(BF,Xrr),e(BF,WU),e(WU,zrr),e(BF,Qrr),e(fe,Wrr),e(fe,IF),e(IF,iTe),e(iTe,Urr),e(IF,Hrr),e(IF,UU),e(UU,Jrr),e(IF,Yrr),e(fe,Zrr),e(fe,NF),e(NF,dTe),e(dTe,Krr),e(NF,etr),e(NF,HU),e(HU,otr),e(NF,rtr),e(fe,ttr),e(fe,qF),e(qF,cTe),e(cTe,atr),e(qF,ntr),e(qF,JU),e(JU,str),e(qF,ltr),e(fe,itr),e(fe,jF),e(jF,mTe),e(mTe,dtr),e(jF,ctr),e(jF,YU),e(YU,mtr),e(jF,ftr),e(to,gtr),e(to,DF),e(DF,htr),e(DF,fTe),e(fTe,utr),e(DF,ptr),e(DF,gTe),e(gTe,_tr),e(to,btr),M(GF,to,null),b(m,joo,_),b(m,qd,_),e(qd,OF),e(OF,hTe),M(w$,hTe,null),e(qd,vtr),e(qd,uTe),e(uTe,Ftr),b(m,Doo,_),b(m,Do,_),M(A$,Do,null),e(Do,Ttr),e(Do,jd),e(jd,Mtr),e(jd,ZU),e(ZU,Etr),e(jd,Ctr),e(jd,KU),e(KU,wtr),e(jd,Atr),e(Do,Ltr),e(Do,L$),e(L$,ytr),e(L$,pTe),e(pTe,xtr),e(L$,$tr),e(Do,ktr),e(Do,Ct),M(y$,Ct,null),e(Ct,Str),e(Ct,_Te),e(_Te,Rtr),e(Ct,Ptr),e(Ct,Dd),e(Dd,Btr),e(Dd,bTe),e(bTe,Itr),e(Dd,Ntr),e(Dd,eH),e(eH,qtr),e(Dd,jtr),e(Ct,Dtr),M(VF,Ct,null),e(Do,Gtr),e(Do,ao),M(x$,ao,null),e(ao,Otr),e(ao,vTe),e(vTe,Vtr),e(ao,Xtr),e(ao,nn),e(nn,ztr),e(nn,FTe),e(FTe,Qtr),e(nn,Wtr),e(nn,TTe),e(TTe,Utr),e(nn,Htr),e(nn,MTe),e(MTe,Jtr),e(nn,Ytr),e(ao,Ztr),e(ao,q),e(q,XF),e(XF,ETe),e(ETe,Ktr),e(XF,ear),e(XF,oH),e(oH,oar),e(XF,rar),e(q,tar),e(q,zF),e(zF,CTe),e(CTe,aar),e(zF,nar),e(zF,rH),e(rH,sar),e(zF,lar),e(q,iar),e(q,QF),e(QF,wTe),e(wTe,dar),e(QF,car),e(QF,tH),e(tH,mar),e(QF,far),e(q,gar),e(q,WF),e(WF,ATe),e(ATe,har),e(WF,uar),e(WF,aH),e(aH,par),e(WF,_ar),e(q,bar),e(q,UF),e(UF,LTe),e(LTe,Far),e(UF,Tar),e(UF,nH),e(nH,Mar),e(UF,Ear),e(q,Car),e(q,HF),e(HF,yTe),e(yTe,war),e(HF,Aar),e(HF,sH),e(sH,Lar),e(HF,yar),e(q,xar),e(q,JF),e(JF,xTe),e(xTe,$ar),e(JF,kar),e(JF,lH),e(lH,Sar),e(JF,Rar),e(q,Par),e(q,YF),e(YF,$Te),e($Te,Bar),e(YF,Iar),e(YF,iH),e(iH,Nar),e(YF,qar),e(q,jar),e(q,ZF),e(ZF,kTe),e(kTe,Dar),e(ZF,Gar),e(ZF,dH),e(dH,Oar),e(ZF,Var),e(q,Xar),e(q,KF),e(KF,STe),e(STe,zar),e(KF,Qar),e(KF,cH),e(cH,War),e(KF,Uar),e(q,Har),e(q,eT),e(eT,RTe),e(RTe,Jar),e(eT,Yar),e(eT,mH),e(mH,Zar),e(eT,Kar),e(q,enr),e(q,oT),e(oT,PTe),e(PTe,onr),e(oT,rnr),e(oT,fH),e(fH,tnr),e(oT,anr),e(q,nnr),e(q,rT),e(rT,BTe),e(BTe,snr),e(rT,lnr),e(rT,gH),e(gH,inr),e(rT,dnr),e(q,cnr),e(q,tT),e(tT,ITe),e(ITe,mnr),e(tT,fnr),e(tT,hH),e(hH,gnr),e(tT,hnr),e(q,unr),e(q,aT),e(aT,NTe),e(NTe,pnr),e(aT,_nr),e(aT,uH),e(uH,bnr),e(aT,vnr),e(q,Fnr),e(q,nT),e(nT,qTe),e(qTe,Tnr),e(nT,Mnr),e(nT,pH),e(pH,Enr),e(nT,Cnr),e(q,wnr),e(q,sT),e(sT,jTe),e(jTe,Anr),e(sT,Lnr),e(sT,_H),e(_H,ynr),e(sT,xnr),e(q,$nr),e(q,lT),e(lT,DTe),e(DTe,knr),e(lT,Snr),e(lT,bH),e(bH,Rnr),e(lT,Pnr),e(q,Bnr),e(q,iT),e(iT,GTe),e(GTe,Inr),e(iT,Nnr),e(iT,vH),e(vH,qnr),e(iT,jnr),e(q,Dnr),e(q,dT),e(dT,OTe),e(OTe,Gnr),e(dT,Onr),e(dT,FH),e(FH,Vnr),e(dT,Xnr),e(q,znr),e(q,cT),e(cT,VTe),e(VTe,Qnr),e(cT,Wnr),e(cT,TH),e(TH,Unr),e(cT,Hnr),e(q,Jnr),e(q,mT),e(mT,XTe),e(XTe,Ynr),e(mT,Znr),e(mT,MH),e(MH,Knr),e(mT,esr),e(q,osr),e(q,fT),e(fT,zTe),e(zTe,rsr),e(fT,tsr),e(fT,EH),e(EH,asr),e(fT,nsr),e(q,ssr),e(q,gT),e(gT,QTe),e(QTe,lsr),e(gT,isr),e(gT,CH),e(CH,dsr),e(gT,csr),e(q,msr),e(q,hT),e(hT,WTe),e(WTe,fsr),e(hT,gsr),e(hT,wH),e(wH,hsr),e(hT,usr),e(q,psr),e(q,uT),e(uT,UTe),e(UTe,_sr),e(uT,bsr),e(uT,AH),e(AH,vsr),e(uT,Fsr),e(q,Tsr),e(q,pT),e(pT,HTe),e(HTe,Msr),e(pT,Esr),e(pT,LH),e(LH,Csr),e(pT,wsr),e(q,Asr),e(q,_T),e(_T,JTe),e(JTe,Lsr),e(_T,ysr),e(_T,yH),e(yH,xsr),e(_T,$sr),e(q,ksr),e(q,bT),e(bT,YTe),e(YTe,Ssr),e(bT,Rsr),e(bT,xH),e(xH,Psr),e(bT,Bsr),e(q,Isr),e(q,vT),e(vT,ZTe),e(ZTe,Nsr),e(vT,qsr),e(vT,$H),e($H,jsr),e(vT,Dsr),e(q,Gsr),e(q,FT),e(FT,KTe),e(KTe,Osr),e(FT,Vsr),e(FT,kH),e(kH,Xsr),e(FT,zsr),e(q,Qsr),e(q,TT),e(TT,eMe),e(eMe,Wsr),e(TT,Usr),e(TT,SH),e(SH,Hsr),e(TT,Jsr),e(q,Ysr),e(q,MT),e(MT,oMe),e(oMe,Zsr),e(MT,Ksr),e(MT,RH),e(RH,elr),e(MT,olr),e(q,rlr),e(q,ET),e(ET,rMe),e(rMe,tlr),e(ET,alr),e(ET,PH),e(PH,nlr),e(ET,slr),e(q,llr),e(q,CT),e(CT,tMe),e(tMe,ilr),e(CT,dlr),e(CT,BH),e(BH,clr),e(CT,mlr),e(q,flr),e(q,wT),e(wT,aMe),e(aMe,glr),e(wT,hlr),e(wT,IH),e(IH,ulr),e(wT,plr),e(q,_lr),e(q,AT),e(AT,nMe),e(nMe,blr),e(AT,vlr),e(AT,NH),e(NH,Flr),e(AT,Tlr),e(q,Mlr),e(q,LT),e(LT,sMe),e(sMe,Elr),e(LT,Clr),e(LT,qH),e(qH,wlr),e(LT,Alr),e(q,Llr),e(q,yT),e(yT,lMe),e(lMe,ylr),e(yT,xlr),e(yT,jH),e(jH,$lr),e(yT,klr),e(q,Slr),e(q,xT),e(xT,iMe),e(iMe,Rlr),e(xT,Plr),e(xT,DH),e(DH,Blr),e(xT,Ilr),e(q,Nlr),e(q,$T),e($T,dMe),e(dMe,qlr),e($T,jlr),e($T,GH),e(GH,Dlr),e($T,Glr),e(q,Olr),e(q,kT),e(kT,cMe),e(cMe,Vlr),e(kT,Xlr),e(kT,OH),e(OH,zlr),e(kT,Qlr),e(q,Wlr),e(q,ST),e(ST,mMe),e(mMe,Ulr),e(ST,Hlr),e(ST,VH),e(VH,Jlr),e(ST,Ylr),e(q,Zlr),e(q,RT),e(RT,fMe),e(fMe,Klr),e(RT,eir),e(RT,XH),e(XH,oir),e(RT,rir),e(q,tir),e(q,PT),e(PT,gMe),e(gMe,air),e(PT,nir),e(PT,zH),e(zH,sir),e(PT,lir),e(q,iir),e(q,BT),e(BT,hMe),e(hMe,dir),e(BT,cir),e(BT,QH),e(QH,mir),e(BT,fir),e(q,gir),e(q,IT),e(IT,uMe),e(uMe,hir),e(IT,uir),e(IT,WH),e(WH,pir),e(IT,_ir),e(q,bir),e(q,NT),e(NT,pMe),e(pMe,vir),e(NT,Fir),e(NT,UH),e(UH,Tir),e(NT,Mir),e(q,Eir),e(q,qT),e(qT,_Me),e(_Me,Cir),e(qT,wir),e(qT,HH),e(HH,Air),e(qT,Lir),e(q,yir),e(q,jT),e(jT,bMe),e(bMe,xir),e(jT,$ir),e(jT,JH),e(JH,kir),e(jT,Sir),e(q,Rir),e(q,DT),e(DT,vMe),e(vMe,Pir),e(DT,Bir),e(DT,YH),e(YH,Iir),e(DT,Nir),e(q,qir),e(q,GT),e(GT,FMe),e(FMe,jir),e(GT,Dir),e(GT,ZH),e(ZH,Gir),e(GT,Oir),e(q,Vir),e(q,OT),e(OT,TMe),e(TMe,Xir),e(OT,zir),e(OT,KH),e(KH,Qir),e(OT,Wir),e(q,Uir),e(q,VT),e(VT,MMe),e(MMe,Hir),e(VT,Jir),e(VT,eJ),e(eJ,Yir),e(VT,Zir),e(q,Kir),e(q,XT),e(XT,EMe),e(EMe,edr),e(XT,odr),e(XT,oJ),e(oJ,rdr),e(XT,tdr),e(ao,adr),e(ao,zT),e(zT,ndr),e(zT,CMe),e(CMe,sdr),e(zT,ldr),e(zT,wMe),e(wMe,idr),e(ao,ddr),M(QT,ao,null),b(m,Goo,_),b(m,Gd,_),e(Gd,WT),e(WT,AMe),M($$,AMe,null),e(Gd,cdr),e(Gd,LMe),e(LMe,mdr),b(m,Ooo,_),b(m,Go,_),M(k$,Go,null),e(Go,fdr),e(Go,Od),e(Od,gdr),e(Od,rJ),e(rJ,hdr),e(Od,udr),e(Od,tJ),e(tJ,pdr),e(Od,_dr),e(Go,bdr),e(Go,S$),e(S$,vdr),e(S$,yMe),e(yMe,Fdr),e(S$,Tdr),e(Go,Mdr),e(Go,wt),M(R$,wt,null),e(wt,Edr),e(wt,xMe),e(xMe,Cdr),e(wt,wdr),e(wt,Vd),e(Vd,Adr),e(Vd,$Me),e($Me,Ldr),e(Vd,ydr),e(Vd,aJ),e(aJ,xdr),e(Vd,$dr),e(wt,kdr),M(UT,wt,null),e(Go,Sdr),e(Go,no),M(P$,no,null),e(no,Rdr),e(no,kMe),e(kMe,Pdr),e(no,Bdr),e(no,sn),e(sn,Idr),e(sn,SMe),e(SMe,Ndr),e(sn,qdr),e(sn,RMe),e(RMe,jdr),e(sn,Ddr),e(sn,PMe),e(PMe,Gdr),e(sn,Odr),e(no,Vdr),e(no,K),e(K,HT),e(HT,BMe),e(BMe,Xdr),e(HT,zdr),e(HT,nJ),e(nJ,Qdr),e(HT,Wdr),e(K,Udr),e(K,JT),e(JT,IMe),e(IMe,Hdr),e(JT,Jdr),e(JT,sJ),e(sJ,Ydr),e(JT,Zdr),e(K,Kdr),e(K,YT),e(YT,NMe),e(NMe,ecr),e(YT,ocr),e(YT,lJ),e(lJ,rcr),e(YT,tcr),e(K,acr),e(K,ZT),e(ZT,qMe),e(qMe,ncr),e(ZT,scr),e(ZT,iJ),e(iJ,lcr),e(ZT,icr),e(K,dcr),e(K,KT),e(KT,jMe),e(jMe,ccr),e(KT,mcr),e(KT,dJ),e(dJ,fcr),e(KT,gcr),e(K,hcr),e(K,eM),e(eM,DMe),e(DMe,ucr),e(eM,pcr),e(eM,cJ),e(cJ,_cr),e(eM,bcr),e(K,vcr),e(K,oM),e(oM,GMe),e(GMe,Fcr),e(oM,Tcr),e(oM,mJ),e(mJ,Mcr),e(oM,Ecr),e(K,Ccr),e(K,rM),e(rM,OMe),e(OMe,wcr),e(rM,Acr),e(rM,fJ),e(fJ,Lcr),e(rM,ycr),e(K,xcr),e(K,tM),e(tM,VMe),e(VMe,$cr),e(tM,kcr),e(tM,gJ),e(gJ,Scr),e(tM,Rcr),e(K,Pcr),e(K,aM),e(aM,XMe),e(XMe,Bcr),e(aM,Icr),e(aM,hJ),e(hJ,Ncr),e(aM,qcr),e(K,jcr),e(K,nM),e(nM,zMe),e(zMe,Dcr),e(nM,Gcr),e(nM,uJ),e(uJ,Ocr),e(nM,Vcr),e(K,Xcr),e(K,sM),e(sM,QMe),e(QMe,zcr),e(sM,Qcr),e(sM,pJ),e(pJ,Wcr),e(sM,Ucr),e(K,Hcr),e(K,lM),e(lM,WMe),e(WMe,Jcr),e(lM,Ycr),e(lM,_J),e(_J,Zcr),e(lM,Kcr),e(K,emr),e(K,iM),e(iM,UMe),e(UMe,omr),e(iM,rmr),e(iM,bJ),e(bJ,tmr),e(iM,amr),e(K,nmr),e(K,dM),e(dM,HMe),e(HMe,smr),e(dM,lmr),e(dM,vJ),e(vJ,imr),e(dM,dmr),e(K,cmr),e(K,cM),e(cM,JMe),e(JMe,mmr),e(cM,fmr),e(cM,FJ),e(FJ,gmr),e(cM,hmr),e(K,umr),e(K,mM),e(mM,YMe),e(YMe,pmr),e(mM,_mr),e(mM,TJ),e(TJ,bmr),e(mM,vmr),e(K,Fmr),e(K,fM),e(fM,ZMe),e(ZMe,Tmr),e(fM,Mmr),e(fM,MJ),e(MJ,Emr),e(fM,Cmr),e(K,wmr),e(K,gM),e(gM,KMe),e(KMe,Amr),e(gM,Lmr),e(gM,EJ),e(EJ,ymr),e(gM,xmr),e(K,$mr),e(K,hM),e(hM,eEe),e(eEe,kmr),e(hM,Smr),e(hM,CJ),e(CJ,Rmr),e(hM,Pmr),e(K,Bmr),e(K,uM),e(uM,oEe),e(oEe,Imr),e(uM,Nmr),e(uM,wJ),e(wJ,qmr),e(uM,jmr),e(K,Dmr),e(K,pM),e(pM,rEe),e(rEe,Gmr),e(pM,Omr),e(pM,AJ),e(AJ,Vmr),e(pM,Xmr),e(K,zmr),e(K,_M),e(_M,tEe),e(tEe,Qmr),e(_M,Wmr),e(_M,LJ),e(LJ,Umr),e(_M,Hmr),e(K,Jmr),e(K,bM),e(bM,aEe),e(aEe,Ymr),e(bM,Zmr),e(bM,yJ),e(yJ,Kmr),e(bM,efr),e(K,ofr),e(K,vM),e(vM,nEe),e(nEe,rfr),e(vM,tfr),e(vM,xJ),e(xJ,afr),e(vM,nfr),e(K,sfr),e(K,FM),e(FM,sEe),e(sEe,lfr),e(FM,ifr),e(FM,$J),e($J,dfr),e(FM,cfr),e(K,mfr),e(K,TM),e(TM,lEe),e(lEe,ffr),e(TM,gfr),e(TM,kJ),e(kJ,hfr),e(TM,ufr),e(K,pfr),e(K,MM),e(MM,iEe),e(iEe,_fr),e(MM,bfr),e(MM,SJ),e(SJ,vfr),e(MM,Ffr),e(K,Tfr),e(K,EM),e(EM,dEe),e(dEe,Mfr),e(EM,Efr),e(EM,RJ),e(RJ,Cfr),e(EM,wfr),e(K,Afr),e(K,CM),e(CM,cEe),e(cEe,Lfr),e(CM,yfr),e(CM,PJ),e(PJ,xfr),e(CM,$fr),e(K,kfr),e(K,wM),e(wM,mEe),e(mEe,Sfr),e(wM,Rfr),e(wM,BJ),e(BJ,Pfr),e(wM,Bfr),e(K,Ifr),e(K,AM),e(AM,fEe),e(fEe,Nfr),e(AM,qfr),e(AM,IJ),e(IJ,jfr),e(AM,Dfr),e(no,Gfr),e(no,LM),e(LM,Ofr),e(LM,gEe),e(gEe,Vfr),e(LM,Xfr),e(LM,hEe),e(hEe,zfr),e(no,Qfr),M(yM,no,null),b(m,Voo,_),b(m,Xd,_),e(Xd,xM),e(xM,uEe),M(B$,uEe,null),e(Xd,Wfr),e(Xd,pEe),e(pEe,Ufr),b(m,Xoo,_),b(m,Oo,_),M(I$,Oo,null),e(Oo,Hfr),e(Oo,zd),e(zd,Jfr),e(zd,NJ),e(NJ,Yfr),e(zd,Zfr),e(zd,qJ),e(qJ,Kfr),e(zd,egr),e(Oo,ogr),e(Oo,N$),e(N$,rgr),e(N$,_Ee),e(_Ee,tgr),e(N$,agr),e(Oo,ngr),e(Oo,At),M(q$,At,null),e(At,sgr),e(At,bEe),e(bEe,lgr),e(At,igr),e(At,Qd),e(Qd,dgr),e(Qd,vEe),e(vEe,cgr),e(Qd,mgr),e(Qd,jJ),e(jJ,fgr),e(Qd,ggr),e(At,hgr),M($M,At,null),e(Oo,ugr),e(Oo,so),M(j$,so,null),e(so,pgr),e(so,FEe),e(FEe,_gr),e(so,bgr),e(so,ln),e(ln,vgr),e(ln,TEe),e(TEe,Fgr),e(ln,Tgr),e(ln,MEe),e(MEe,Mgr),e(ln,Egr),e(ln,EEe),e(EEe,Cgr),e(ln,wgr),e(so,Agr),e(so,Ue),e(Ue,kM),e(kM,CEe),e(CEe,Lgr),e(kM,ygr),e(kM,DJ),e(DJ,xgr),e(kM,$gr),e(Ue,kgr),e(Ue,SM),e(SM,wEe),e(wEe,Sgr),e(SM,Rgr),e(SM,GJ),e(GJ,Pgr),e(SM,Bgr),e(Ue,Igr),e(Ue,RM),e(RM,AEe),e(AEe,Ngr),e(RM,qgr),e(RM,OJ),e(OJ,jgr),e(RM,Dgr),e(Ue,Ggr),e(Ue,PM),e(PM,LEe),e(LEe,Ogr),e(PM,Vgr),e(PM,VJ),e(VJ,Xgr),e(PM,zgr),e(Ue,Qgr),e(Ue,BM),e(BM,yEe),e(yEe,Wgr),e(BM,Ugr),e(BM,XJ),e(XJ,Hgr),e(BM,Jgr),e(Ue,Ygr),e(Ue,IM),e(IM,xEe),e(xEe,Zgr),e(IM,Kgr),e(IM,zJ),e(zJ,ehr),e(IM,ohr),e(Ue,rhr),e(Ue,NM),e(NM,$Ee),e($Ee,thr),e(NM,ahr),e(NM,QJ),e(QJ,nhr),e(NM,shr),e(so,lhr),e(so,qM),e(qM,ihr),e(qM,kEe),e(kEe,dhr),e(qM,chr),e(qM,SEe),e(SEe,mhr),e(so,fhr),M(jM,so,null),b(m,zoo,_),b(m,Wd,_),e(Wd,DM),e(DM,REe),M(D$,REe,null),e(Wd,ghr),e(Wd,PEe),e(PEe,hhr),b(m,Qoo,_),b(m,Vo,_),M(G$,Vo,null),e(Vo,uhr),e(Vo,Ud),e(Ud,phr),e(Ud,WJ),e(WJ,_hr),e(Ud,bhr),e(Ud,UJ),e(UJ,vhr),e(Ud,Fhr),e(Vo,Thr),e(Vo,O$),e(O$,Mhr),e(O$,BEe),e(BEe,Ehr),e(O$,Chr),e(Vo,whr),e(Vo,Lt),M(V$,Lt,null),e(Lt,Ahr),e(Lt,IEe),e(IEe,Lhr),e(Lt,yhr),e(Lt,Hd),e(Hd,xhr),e(Hd,NEe),e(NEe,$hr),e(Hd,khr),e(Hd,HJ),e(HJ,Shr),e(Hd,Rhr),e(Lt,Phr),M(GM,Lt,null),e(Vo,Bhr),e(Vo,lo),M(X$,lo,null),e(lo,Ihr),e(lo,qEe),e(qEe,Nhr),e(lo,qhr),e(lo,dn),e(dn,jhr),e(dn,jEe),e(jEe,Dhr),e(dn,Ghr),e(dn,DEe),e(DEe,Ohr),e(dn,Vhr),e(dn,GEe),e(GEe,Xhr),e(dn,zhr),e(lo,Qhr),e(lo,H),e(H,OM),e(OM,OEe),e(OEe,Whr),e(OM,Uhr),e(OM,JJ),e(JJ,Hhr),e(OM,Jhr),e(H,Yhr),e(H,VM),e(VM,VEe),e(VEe,Zhr),e(VM,Khr),e(VM,YJ),e(YJ,eur),e(VM,our),e(H,rur),e(H,XM),e(XM,XEe),e(XEe,tur),e(XM,aur),e(XM,ZJ),e(ZJ,nur),e(XM,sur),e(H,lur),e(H,zM),e(zM,zEe),e(zEe,iur),e(zM,dur),e(zM,KJ),e(KJ,cur),e(zM,mur),e(H,fur),e(H,QM),e(QM,QEe),e(QEe,gur),e(QM,hur),e(QM,eY),e(eY,uur),e(QM,pur),e(H,_ur),e(H,WM),e(WM,WEe),e(WEe,bur),e(WM,vur),e(WM,oY),e(oY,Fur),e(WM,Tur),e(H,Mur),e(H,UM),e(UM,UEe),e(UEe,Eur),e(UM,Cur),e(UM,rY),e(rY,wur),e(UM,Aur),e(H,Lur),e(H,HM),e(HM,HEe),e(HEe,yur),e(HM,xur),e(HM,tY),e(tY,$ur),e(HM,kur),e(H,Sur),e(H,JM),e(JM,JEe),e(JEe,Rur),e(JM,Pur),e(JM,aY),e(aY,Bur),e(JM,Iur),e(H,Nur),e(H,YM),e(YM,YEe),e(YEe,qur),e(YM,jur),e(YM,nY),e(nY,Dur),e(YM,Gur),e(H,Our),e(H,ZM),e(ZM,ZEe),e(ZEe,Vur),e(ZM,Xur),e(ZM,sY),e(sY,zur),e(ZM,Qur),e(H,Wur),e(H,KM),e(KM,KEe),e(KEe,Uur),e(KM,Hur),e(KM,lY),e(lY,Jur),e(KM,Yur),e(H,Zur),e(H,eE),e(eE,e4e),e(e4e,Kur),e(eE,epr),e(eE,iY),e(iY,opr),e(eE,rpr),e(H,tpr),e(H,oE),e(oE,o4e),e(o4e,apr),e(oE,npr),e(oE,dY),e(dY,spr),e(oE,lpr),e(H,ipr),e(H,rE),e(rE,r4e),e(r4e,dpr),e(rE,cpr),e(rE,cY),e(cY,mpr),e(rE,fpr),e(H,gpr),e(H,tE),e(tE,t4e),e(t4e,hpr),e(tE,upr),e(tE,mY),e(mY,ppr),e(tE,_pr),e(H,bpr),e(H,aE),e(aE,a4e),e(a4e,vpr),e(aE,Fpr),e(aE,fY),e(fY,Tpr),e(aE,Mpr),e(H,Epr),e(H,nE),e(nE,n4e),e(n4e,Cpr),e(nE,wpr),e(nE,gY),e(gY,Apr),e(nE,Lpr),e(H,ypr),e(H,sE),e(sE,s4e),e(s4e,xpr),e(sE,$pr),e(sE,hY),e(hY,kpr),e(sE,Spr),e(H,Rpr),e(H,lE),e(lE,l4e),e(l4e,Ppr),e(lE,Bpr),e(lE,uY),e(uY,Ipr),e(lE,Npr),e(H,qpr),e(H,iE),e(iE,i4e),e(i4e,jpr),e(iE,Dpr),e(iE,pY),e(pY,Gpr),e(iE,Opr),e(H,Vpr),e(H,dE),e(dE,d4e),e(d4e,Xpr),e(dE,zpr),e(dE,_Y),e(_Y,Qpr),e(dE,Wpr),e(H,Upr),e(H,cE),e(cE,c4e),e(c4e,Hpr),e(cE,Jpr),e(cE,bY),e(bY,Ypr),e(cE,Zpr),e(H,Kpr),e(H,mE),e(mE,m4e),e(m4e,e_r),e(mE,o_r),e(mE,vY),e(vY,r_r),e(mE,t_r),e(H,a_r),e(H,fE),e(fE,f4e),e(f4e,n_r),e(fE,s_r),e(fE,FY),e(FY,l_r),e(fE,i_r),e(H,d_r),e(H,gE),e(gE,g4e),e(g4e,c_r),e(gE,m_r),e(gE,TY),e(TY,f_r),e(gE,g_r),e(H,h_r),e(H,hE),e(hE,h4e),e(h4e,u_r),e(hE,p_r),e(hE,MY),e(MY,__r),e(hE,b_r),e(H,v_r),e(H,uE),e(uE,u4e),e(u4e,F_r),e(uE,T_r),e(uE,EY),e(EY,M_r),e(uE,E_r),e(H,C_r),e(H,pE),e(pE,p4e),e(p4e,w_r),e(pE,A_r),e(pE,CY),e(CY,L_r),e(pE,y_r),e(H,x_r),e(H,_E),e(_E,_4e),e(_4e,$_r),e(_E,k_r),e(_E,wY),e(wY,S_r),e(_E,R_r),e(H,P_r),e(H,bE),e(bE,b4e),e(b4e,B_r),e(bE,I_r),e(bE,AY),e(AY,N_r),e(bE,q_r),e(H,j_r),e(H,vE),e(vE,v4e),e(v4e,D_r),e(vE,G_r),e(vE,LY),e(LY,O_r),e(vE,V_r),e(H,X_r),e(H,FE),e(FE,F4e),e(F4e,z_r),e(FE,Q_r),e(FE,yY),e(yY,W_r),e(FE,U_r),e(H,H_r),e(H,TE),e(TE,T4e),e(T4e,J_r),e(TE,Y_r),e(TE,xY),e(xY,Z_r),e(TE,K_r),e(H,e1r),e(H,ME),e(ME,M4e),e(M4e,o1r),e(ME,r1r),e(ME,$Y),e($Y,t1r),e(ME,a1r),e(H,n1r),e(H,EE),e(EE,E4e),e(E4e,s1r),e(EE,l1r),e(EE,kY),e(kY,i1r),e(EE,d1r),e(H,c1r),e(H,CE),e(CE,C4e),e(C4e,m1r),e(CE,f1r),e(CE,SY),e(SY,g1r),e(CE,h1r),e(H,u1r),e(H,wE),e(wE,w4e),e(w4e,p1r),e(wE,_1r),e(wE,RY),e(RY,b1r),e(wE,v1r),e(H,F1r),e(H,AE),e(AE,A4e),e(A4e,T1r),e(AE,M1r),e(AE,PY),e(PY,E1r),e(AE,C1r),e(H,w1r),e(H,LE),e(LE,L4e),e(L4e,A1r),e(LE,L1r),e(LE,BY),e(BY,y1r),e(LE,x1r),e(lo,$1r),e(lo,yE),e(yE,k1r),e(yE,y4e),e(y4e,S1r),e(yE,R1r),e(yE,x4e),e(x4e,P1r),e(lo,B1r),M(xE,lo,null),b(m,Woo,_),b(m,Jd,_),e(Jd,$E),e($E,$4e),M(z$,$4e,null),e(Jd,I1r),e(Jd,k4e),e(k4e,N1r),b(m,Uoo,_),b(m,Xo,_),M(Q$,Xo,null),e(Xo,q1r),e(Xo,Yd),e(Yd,j1r),e(Yd,IY),e(IY,D1r),e(Yd,G1r),e(Yd,NY),e(NY,O1r),e(Yd,V1r),e(Xo,X1r),e(Xo,W$),e(W$,z1r),e(W$,S4e),e(S4e,Q1r),e(W$,W1r),e(Xo,U1r),e(Xo,yt),M(U$,yt,null),e(yt,H1r),e(yt,R4e),e(R4e,J1r),e(yt,Y1r),e(yt,Zd),e(Zd,Z1r),e(Zd,P4e),e(P4e,K1r),e(Zd,e2r),e(Zd,qY),e(qY,o2r),e(Zd,r2r),e(yt,t2r),M(kE,yt,null),e(Xo,a2r),e(Xo,io),M(H$,io,null),e(io,n2r),e(io,B4e),e(B4e,s2r),e(io,l2r),e(io,cn),e(cn,i2r),e(cn,I4e),e(I4e,d2r),e(cn,c2r),e(cn,N4e),e(N4e,m2r),e(cn,f2r),e(cn,q4e),e(q4e,g2r),e(cn,h2r),e(io,u2r),e(io,O),e(O,SE),e(SE,j4e),e(j4e,p2r),e(SE,_2r),e(SE,jY),e(jY,b2r),e(SE,v2r),e(O,F2r),e(O,RE),e(RE,D4e),e(D4e,T2r),e(RE,M2r),e(RE,DY),e(DY,E2r),e(RE,C2r),e(O,w2r),e(O,PE),e(PE,G4e),e(G4e,A2r),e(PE,L2r),e(PE,GY),e(GY,y2r),e(PE,x2r),e(O,$2r),e(O,BE),e(BE,O4e),e(O4e,k2r),e(BE,S2r),e(BE,OY),e(OY,R2r),e(BE,P2r),e(O,B2r),e(O,IE),e(IE,V4e),e(V4e,I2r),e(IE,N2r),e(IE,VY),e(VY,q2r),e(IE,j2r),e(O,D2r),e(O,NE),e(NE,X4e),e(X4e,G2r),e(NE,O2r),e(NE,XY),e(XY,V2r),e(NE,X2r),e(O,z2r),e(O,qE),e(qE,z4e),e(z4e,Q2r),e(qE,W2r),e(qE,zY),e(zY,U2r),e(qE,H2r),e(O,J2r),e(O,jE),e(jE,Q4e),e(Q4e,Y2r),e(jE,Z2r),e(jE,QY),e(QY,K2r),e(jE,ebr),e(O,obr),e(O,DE),e(DE,W4e),e(W4e,rbr),e(DE,tbr),e(DE,WY),e(WY,abr),e(DE,nbr),e(O,sbr),e(O,GE),e(GE,U4e),e(U4e,lbr),e(GE,ibr),e(GE,UY),e(UY,dbr),e(GE,cbr),e(O,mbr),e(O,OE),e(OE,H4e),e(H4e,fbr),e(OE,gbr),e(OE,HY),e(HY,hbr),e(OE,ubr),e(O,pbr),e(O,VE),e(VE,J4e),e(J4e,_br),e(VE,bbr),e(VE,JY),e(JY,vbr),e(VE,Fbr),e(O,Tbr),e(O,XE),e(XE,Y4e),e(Y4e,Mbr),e(XE,Ebr),e(XE,YY),e(YY,Cbr),e(XE,wbr),e(O,Abr),e(O,zE),e(zE,Z4e),e(Z4e,Lbr),e(zE,ybr),e(zE,ZY),e(ZY,xbr),e(zE,$br),e(O,kbr),e(O,QE),e(QE,K4e),e(K4e,Sbr),e(QE,Rbr),e(QE,KY),e(KY,Pbr),e(QE,Bbr),e(O,Ibr),e(O,WE),e(WE,eCe),e(eCe,Nbr),e(WE,qbr),e(WE,eZ),e(eZ,jbr),e(WE,Dbr),e(O,Gbr),e(O,UE),e(UE,oCe),e(oCe,Obr),e(UE,Vbr),e(UE,oZ),e(oZ,Xbr),e(UE,zbr),e(O,Qbr),e(O,HE),e(HE,rCe),e(rCe,Wbr),e(HE,Ubr),e(HE,rZ),e(rZ,Hbr),e(HE,Jbr),e(O,Ybr),e(O,JE),e(JE,tCe),e(tCe,Zbr),e(JE,Kbr),e(JE,tZ),e(tZ,evr),e(JE,ovr),e(O,rvr),e(O,YE),e(YE,aCe),e(aCe,tvr),e(YE,avr),e(YE,aZ),e(aZ,nvr),e(YE,svr),e(O,lvr),e(O,ZE),e(ZE,nCe),e(nCe,ivr),e(ZE,dvr),e(ZE,nZ),e(nZ,cvr),e(ZE,mvr),e(O,fvr),e(O,KE),e(KE,sCe),e(sCe,gvr),e(KE,hvr),e(KE,sZ),e(sZ,uvr),e(KE,pvr),e(O,_vr),e(O,e4),e(e4,lCe),e(lCe,bvr),e(e4,vvr),e(e4,lZ),e(lZ,Fvr),e(e4,Tvr),e(O,Mvr),e(O,o4),e(o4,iCe),e(iCe,Evr),e(o4,Cvr),e(o4,iZ),e(iZ,wvr),e(o4,Avr),e(O,Lvr),e(O,r4),e(r4,dCe),e(dCe,yvr),e(r4,xvr),e(r4,dZ),e(dZ,$vr),e(r4,kvr),e(O,Svr),e(O,t4),e(t4,cCe),e(cCe,Rvr),e(t4,Pvr),e(t4,cZ),e(cZ,Bvr),e(t4,Ivr),e(O,Nvr),e(O,a4),e(a4,mCe),e(mCe,qvr),e(a4,jvr),e(a4,mZ),e(mZ,Dvr),e(a4,Gvr),e(O,Ovr),e(O,n4),e(n4,fCe),e(fCe,Vvr),e(n4,Xvr),e(n4,fZ),e(fZ,zvr),e(n4,Qvr),e(O,Wvr),e(O,s4),e(s4,gCe),e(gCe,Uvr),e(s4,Hvr),e(s4,gZ),e(gZ,Jvr),e(s4,Yvr),e(O,Zvr),e(O,l4),e(l4,hCe),e(hCe,Kvr),e(l4,eFr),e(l4,hZ),e(hZ,oFr),e(l4,rFr),e(O,tFr),e(O,i4),e(i4,uCe),e(uCe,aFr),e(i4,nFr),e(i4,uZ),e(uZ,sFr),e(i4,lFr),e(O,iFr),e(O,d4),e(d4,pCe),e(pCe,dFr),e(d4,cFr),e(d4,pZ),e(pZ,mFr),e(d4,fFr),e(O,gFr),e(O,c4),e(c4,_Ce),e(_Ce,hFr),e(c4,uFr),e(c4,_Z),e(_Z,pFr),e(c4,_Fr),e(O,bFr),e(O,m4),e(m4,bCe),e(bCe,vFr),e(m4,FFr),e(m4,bZ),e(bZ,TFr),e(m4,MFr),e(O,EFr),e(O,f4),e(f4,vCe),e(vCe,CFr),e(f4,wFr),e(f4,vZ),e(vZ,AFr),e(f4,LFr),e(O,yFr),e(O,g4),e(g4,FCe),e(FCe,xFr),e(g4,$Fr),e(g4,FZ),e(FZ,kFr),e(g4,SFr),e(O,RFr),e(O,h4),e(h4,TCe),e(TCe,PFr),e(h4,BFr),e(h4,TZ),e(TZ,IFr),e(h4,NFr),e(O,qFr),e(O,u4),e(u4,MCe),e(MCe,jFr),e(u4,DFr),e(u4,MZ),e(MZ,GFr),e(u4,OFr),e(O,VFr),e(O,p4),e(p4,ECe),e(ECe,XFr),e(p4,zFr),e(p4,EZ),e(EZ,QFr),e(p4,WFr),e(O,UFr),e(O,_4),e(_4,CCe),e(CCe,HFr),e(_4,JFr),e(_4,CZ),e(CZ,YFr),e(_4,ZFr),e(O,KFr),e(O,b4),e(b4,wCe),e(wCe,eTr),e(b4,oTr),e(b4,wZ),e(wZ,rTr),e(b4,tTr),e(O,aTr),e(O,v4),e(v4,ACe),e(ACe,nTr),e(v4,sTr),e(v4,AZ),e(AZ,lTr),e(v4,iTr),e(O,dTr),e(O,F4),e(F4,LCe),e(LCe,cTr),e(F4,mTr),e(F4,LZ),e(LZ,fTr),e(F4,gTr),e(O,hTr),e(O,T4),e(T4,yCe),e(yCe,uTr),e(T4,pTr),e(T4,yZ),e(yZ,_Tr),e(T4,bTr),e(O,vTr),e(O,M4),e(M4,xCe),e(xCe,FTr),e(M4,TTr),e(M4,xZ),e(xZ,MTr),e(M4,ETr),e(O,CTr),e(O,E4),e(E4,$Ce),e($Ce,wTr),e(E4,ATr),e(E4,$Z),e($Z,LTr),e(E4,yTr),e(O,xTr),e(O,C4),e(C4,kCe),e(kCe,$Tr),e(C4,kTr),e(C4,kZ),e(kZ,STr),e(C4,RTr),e(io,PTr),e(io,w4),e(w4,BTr),e(w4,SCe),e(SCe,ITr),e(w4,NTr),e(w4,RCe),e(RCe,qTr),e(io,jTr),M(A4,io,null),b(m,Hoo,_),b(m,Kd,_),e(Kd,L4),e(L4,PCe),M(J$,PCe,null),e(Kd,DTr),e(Kd,BCe),e(BCe,GTr),b(m,Joo,_),b(m,zo,_),M(Y$,zo,null),e(zo,OTr),e(zo,ec),e(ec,VTr),e(ec,SZ),e(SZ,XTr),e(ec,zTr),e(ec,RZ),e(RZ,QTr),e(ec,WTr),e(zo,UTr),e(zo,Z$),e(Z$,HTr),e(Z$,ICe),e(ICe,JTr),e(Z$,YTr),e(zo,ZTr),e(zo,xt),M(K$,xt,null),e(xt,KTr),e(xt,NCe),e(NCe,eMr),e(xt,oMr),e(xt,oc),e(oc,rMr),e(oc,qCe),e(qCe,tMr),e(oc,aMr),e(oc,PZ),e(PZ,nMr),e(oc,sMr),e(xt,lMr),M(y4,xt,null),e(zo,iMr),e(zo,co),M(ek,co,null),e(co,dMr),e(co,jCe),e(jCe,cMr),e(co,mMr),e(co,mn),e(mn,fMr),e(mn,DCe),e(DCe,gMr),e(mn,hMr),e(mn,GCe),e(GCe,uMr),e(mn,pMr),e(mn,OCe),e(OCe,_Mr),e(mn,bMr),e(co,vMr),e(co,VCe),e(VCe,x4),e(x4,XCe),e(XCe,FMr),e(x4,TMr),e(x4,BZ),e(BZ,MMr),e(x4,EMr),e(co,CMr),e(co,$4),e($4,wMr),e($4,zCe),e(zCe,AMr),e($4,LMr),e($4,QCe),e(QCe,yMr),e(co,xMr),M(k4,co,null),b(m,Yoo,_),b(m,rc,_),e(rc,S4),e(S4,WCe),M(ok,WCe,null),e(rc,$Mr),e(rc,UCe),e(UCe,kMr),b(m,Zoo,_),b(m,Qo,_),M(rk,Qo,null),e(Qo,SMr),e(Qo,tc),e(tc,RMr),e(tc,IZ),e(IZ,PMr),e(tc,BMr),e(tc,NZ),e(NZ,IMr),e(tc,NMr),e(Qo,qMr),e(Qo,tk),e(tk,jMr),e(tk,HCe),e(HCe,DMr),e(tk,GMr),e(Qo,OMr),e(Qo,$t),M(ak,$t,null),e($t,VMr),e($t,JCe),e(JCe,XMr),e($t,zMr),e($t,ac),e(ac,QMr),e(ac,YCe),e(YCe,WMr),e(ac,UMr),e(ac,qZ),e(qZ,HMr),e(ac,JMr),e($t,YMr),M(R4,$t,null),e(Qo,ZMr),e(Qo,mo),M(nk,mo,null),e(mo,KMr),e(mo,ZCe),e(ZCe,eEr),e(mo,oEr),e(mo,fn),e(fn,rEr),e(fn,KCe),e(KCe,tEr),e(fn,aEr),e(fn,e3e),e(e3e,nEr),e(fn,sEr),e(fn,o3e),e(o3e,lEr),e(fn,iEr),e(mo,dEr),e(mo,nc),e(nc,P4),e(P4,r3e),e(r3e,cEr),e(P4,mEr),e(P4,jZ),e(jZ,fEr),e(P4,gEr),e(nc,hEr),e(nc,B4),e(B4,t3e),e(t3e,uEr),e(B4,pEr),e(B4,DZ),e(DZ,_Er),e(B4,bEr),e(nc,vEr),e(nc,I4),e(I4,a3e),e(a3e,FEr),e(I4,TEr),e(I4,GZ),e(GZ,MEr),e(I4,EEr),e(mo,CEr),e(mo,N4),e(N4,wEr),e(N4,n3e),e(n3e,AEr),e(N4,LEr),e(N4,s3e),e(s3e,yEr),e(mo,xEr),M(q4,mo,null),b(m,Koo,_),b(m,sc,_),e(sc,j4),e(j4,l3e),M(sk,l3e,null),e(sc,$Er),e(sc,i3e),e(i3e,kEr),b(m,ero,_),b(m,Wo,_),M(lk,Wo,null),e(Wo,SEr),e(Wo,lc),e(lc,REr),e(lc,OZ),e(OZ,PEr),e(lc,BEr),e(lc,VZ),e(VZ,IEr),e(lc,NEr),e(Wo,qEr),e(Wo,ik),e(ik,jEr),e(ik,d3e),e(d3e,DEr),e(ik,GEr),e(Wo,OEr),e(Wo,kt),M(dk,kt,null),e(kt,VEr),e(kt,c3e),e(c3e,XEr),e(kt,zEr),e(kt,ic),e(ic,QEr),e(ic,m3e),e(m3e,WEr),e(ic,UEr),e(ic,XZ),e(XZ,HEr),e(ic,JEr),e(kt,YEr),M(D4,kt,null),e(Wo,ZEr),e(Wo,fo),M(ck,fo,null),e(fo,KEr),e(fo,f3e),e(f3e,e4r),e(fo,o4r),e(fo,gn),e(gn,r4r),e(gn,g3e),e(g3e,t4r),e(gn,a4r),e(gn,h3e),e(h3e,n4r),e(gn,s4r),e(gn,u3e),e(u3e,l4r),e(gn,i4r),e(fo,d4r),e(fo,be),e(be,G4),e(G4,p3e),e(p3e,c4r),e(G4,m4r),e(G4,zZ),e(zZ,f4r),e(G4,g4r),e(be,h4r),e(be,O4),e(O4,_3e),e(_3e,u4r),e(O4,p4r),e(O4,QZ),e(QZ,_4r),e(O4,b4r),e(be,v4r),e(be,V4),e(V4,b3e),e(b3e,F4r),e(V4,T4r),e(V4,WZ),e(WZ,M4r),e(V4,E4r),e(be,C4r),e(be,X4),e(X4,v3e),e(v3e,w4r),e(X4,A4r),e(X4,UZ),e(UZ,L4r),e(X4,y4r),e(be,x4r),e(be,El),e(El,F3e),e(F3e,$4r),e(El,k4r),e(El,HZ),e(HZ,S4r),e(El,R4r),e(El,JZ),e(JZ,P4r),e(El,B4r),e(be,I4r),e(be,z4),e(z4,T3e),e(T3e,N4r),e(z4,q4r),e(z4,YZ),e(YZ,j4r),e(z4,D4r),e(be,G4r),e(be,Cl),e(Cl,M3e),e(M3e,O4r),e(Cl,V4r),e(Cl,ZZ),e(ZZ,X4r),e(Cl,z4r),e(Cl,KZ),e(KZ,Q4r),e(Cl,W4r),e(be,U4r),e(be,Q4),e(Q4,E3e),e(E3e,H4r),e(Q4,J4r),e(Q4,eK),e(eK,Y4r),e(Q4,Z4r),e(be,K4r),e(be,St),e(St,C3e),e(C3e,eCr),e(St,oCr),e(St,oK),e(oK,rCr),e(St,tCr),e(St,rK),e(rK,aCr),e(St,nCr),e(St,tK),e(tK,sCr),e(St,lCr),e(be,iCr),e(be,W4),e(W4,w3e),e(w3e,dCr),e(W4,cCr),e(W4,aK),e(aK,mCr),e(W4,fCr),e(be,gCr),e(be,U4),e(U4,A3e),e(A3e,hCr),e(U4,uCr),e(U4,nK),e(nK,pCr),e(U4,_Cr),e(be,bCr),e(be,H4),e(H4,L3e),e(L3e,vCr),e(H4,FCr),e(H4,sK),e(sK,TCr),e(H4,MCr),e(be,ECr),e(be,J4),e(J4,y3e),e(y3e,CCr),e(J4,wCr),e(J4,lK),e(lK,ACr),e(J4,LCr),e(be,yCr),e(be,Y4),e(Y4,x3e),e(x3e,xCr),e(Y4,$Cr),e(Y4,iK),e(iK,kCr),e(Y4,SCr),e(be,RCr),e(be,Z4),e(Z4,$3e),e($3e,PCr),e(Z4,BCr),e(Z4,dK),e(dK,ICr),e(Z4,NCr),e(be,qCr),e(be,K4),e(K4,k3e),e(k3e,jCr),e(K4,DCr),e(K4,cK),e(cK,GCr),e(K4,OCr),e(be,VCr),e(be,eC),e(eC,S3e),e(S3e,XCr),e(eC,zCr),e(eC,mK),e(mK,QCr),e(eC,WCr),e(be,UCr),e(be,oC),e(oC,R3e),e(R3e,HCr),e(oC,JCr),e(oC,fK),e(fK,YCr),e(oC,ZCr),e(fo,KCr),e(fo,rC),e(rC,e3r),e(rC,P3e),e(P3e,o3r),e(rC,r3r),e(rC,B3e),e(B3e,t3r),e(fo,a3r),M(tC,fo,null),b(m,oro,_),b(m,dc,_),e(dc,aC),e(aC,I3e),M(mk,I3e,null),e(dc,n3r),e(dc,N3e),e(N3e,s3r),b(m,rro,_),b(m,Uo,_),M(fk,Uo,null),e(Uo,l3r),e(Uo,cc),e(cc,i3r),e(cc,gK),e(gK,d3r),e(cc,c3r),e(cc,hK),e(hK,m3r),e(cc,f3r),e(Uo,g3r),e(Uo,gk),e(gk,h3r),e(gk,q3e),e(q3e,u3r),e(gk,p3r),e(Uo,_3r),e(Uo,Rt),M(hk,Rt,null),e(Rt,b3r),e(Rt,j3e),e(j3e,v3r),e(Rt,F3r),e(Rt,mc),e(mc,T3r),e(mc,D3e),e(D3e,M3r),e(mc,E3r),e(mc,uK),e(uK,C3r),e(mc,w3r),e(Rt,A3r),M(nC,Rt,null),e(Uo,L3r),e(Uo,go),M(uk,go,null),e(go,y3r),e(go,G3e),e(G3e,x3r),e(go,$3r),e(go,hn),e(hn,k3r),e(hn,O3e),e(O3e,S3r),e(hn,R3r),e(hn,V3e),e(V3e,P3r),e(hn,B3r),e(hn,X3e),e(X3e,I3r),e(hn,N3r),e(go,q3r),e(go,z3e),e(z3e,sC),e(sC,Q3e),e(Q3e,j3r),e(sC,D3r),e(sC,pK),e(pK,G3r),e(sC,O3r),e(go,V3r),e(go,lC),e(lC,X3r),e(lC,W3e),e(W3e,z3r),e(lC,Q3r),e(lC,U3e),e(U3e,W3r),e(go,U3r),M(iC,go,null),b(m,tro,_),b(m,fc,_),e(fc,dC),e(dC,H3e),M(pk,H3e,null),e(fc,H3r),e(fc,J3e),e(J3e,J3r),b(m,aro,_),b(m,Ho,_),M(_k,Ho,null),e(Ho,Y3r),e(Ho,gc),e(gc,Z3r),e(gc,_K),e(_K,K3r),e(gc,e5r),e(gc,bK),e(bK,o5r),e(gc,r5r),e(Ho,t5r),e(Ho,bk),e(bk,a5r),e(bk,Y3e),e(Y3e,n5r),e(bk,s5r),e(Ho,l5r),e(Ho,Pt),M(vk,Pt,null),e(Pt,i5r),e(Pt,Z3e),e(Z3e,d5r),e(Pt,c5r),e(Pt,hc),e(hc,m5r),e(hc,K3e),e(K3e,f5r),e(hc,g5r),e(hc,vK),e(vK,h5r),e(hc,u5r),e(Pt,p5r),M(cC,Pt,null),e(Ho,_5r),e(Ho,ho),M(Fk,ho,null),e(ho,b5r),e(ho,e5e),e(e5e,v5r),e(ho,F5r),e(ho,un),e(un,T5r),e(un,o5e),e(o5e,M5r),e(un,E5r),e(un,r5e),e(r5e,C5r),e(un,w5r),e(un,t5e),e(t5e,A5r),e(un,L5r),e(ho,y5r),e(ho,a5e),e(a5e,mC),e(mC,n5e),e(n5e,x5r),e(mC,$5r),e(mC,FK),e(FK,k5r),e(mC,S5r),e(ho,R5r),e(ho,fC),e(fC,P5r),e(fC,s5e),e(s5e,B5r),e(fC,I5r),e(fC,l5e),e(l5e,N5r),e(ho,q5r),M(gC,ho,null),b(m,nro,_),b(m,uc,_),e(uc,hC),e(hC,i5e),M(Tk,i5e,null),e(uc,j5r),e(uc,d5e),e(d5e,D5r),b(m,sro,_),b(m,Jo,_),M(Mk,Jo,null),e(Jo,G5r),e(Jo,pc),e(pc,O5r),e(pc,TK),e(TK,V5r),e(pc,X5r),e(pc,MK),e(MK,z5r),e(pc,Q5r),e(Jo,W5r),e(Jo,Ek),e(Ek,U5r),e(Ek,c5e),e(c5e,H5r),e(Ek,J5r),e(Jo,Y5r),e(Jo,Bt),M(Ck,Bt,null),e(Bt,Z5r),e(Bt,m5e),e(m5e,K5r),e(Bt,e0r),e(Bt,_c),e(_c,o0r),e(_c,f5e),e(f5e,r0r),e(_c,t0r),e(_c,EK),e(EK,a0r),e(_c,n0r),e(Bt,s0r),M(uC,Bt,null),e(Jo,l0r),e(Jo,uo),M(wk,uo,null),e(uo,i0r),e(uo,g5e),e(g5e,d0r),e(uo,c0r),e(uo,pn),e(pn,m0r),e(pn,h5e),e(h5e,f0r),e(pn,g0r),e(pn,u5e),e(u5e,h0r),e(pn,u0r),e(pn,p5e),e(p5e,p0r),e(pn,_0r),e(uo,b0r),e(uo,_5e),e(_5e,pC),e(pC,b5e),e(b5e,v0r),e(pC,F0r),e(pC,CK),e(CK,T0r),e(pC,M0r),e(uo,E0r),e(uo,_C),e(_C,C0r),e(_C,v5e),e(v5e,w0r),e(_C,A0r),e(_C,F5e),e(F5e,L0r),e(uo,y0r),M(bC,uo,null),b(m,lro,_),b(m,bc,_),e(bc,vC),e(vC,T5e),M(Ak,T5e,null),e(bc,x0r),e(bc,M5e),e(M5e,$0r),b(m,iro,_),b(m,Yo,_),M(Lk,Yo,null),e(Yo,k0r),e(Yo,vc),e(vc,S0r),e(vc,wK),e(wK,R0r),e(vc,P0r),e(vc,AK),e(AK,B0r),e(vc,I0r),e(Yo,N0r),e(Yo,yk),e(yk,q0r),e(yk,E5e),e(E5e,j0r),e(yk,D0r),e(Yo,G0r),e(Yo,It),M(xk,It,null),e(It,O0r),e(It,C5e),e(C5e,V0r),e(It,X0r),e(It,Fc),e(Fc,z0r),e(Fc,w5e),e(w5e,Q0r),e(Fc,W0r),e(Fc,LK),e(LK,U0r),e(Fc,H0r),e(It,J0r),M(FC,It,null),e(Yo,Y0r),e(Yo,po),M($k,po,null),e(po,Z0r),e(po,A5e),e(A5e,K0r),e(po,ewr),e(po,_n),e(_n,owr),e(_n,L5e),e(L5e,rwr),e(_n,twr),e(_n,y5e),e(y5e,awr),e(_n,nwr),e(_n,x5e),e(x5e,swr),e(_n,lwr),e(po,iwr),e(po,Pe),e(Pe,TC),e(TC,$5e),e($5e,dwr),e(TC,cwr),e(TC,yK),e(yK,mwr),e(TC,fwr),e(Pe,gwr),e(Pe,MC),e(MC,k5e),e(k5e,hwr),e(MC,uwr),e(MC,xK),e(xK,pwr),e(MC,_wr),e(Pe,bwr),e(Pe,EC),e(EC,S5e),e(S5e,vwr),e(EC,Fwr),e(EC,$K),e($K,Twr),e(EC,Mwr),e(Pe,Ewr),e(Pe,CC),e(CC,R5e),e(R5e,Cwr),e(CC,wwr),e(CC,kK),e(kK,Awr),e(CC,Lwr),e(Pe,ywr),e(Pe,wC),e(wC,P5e),e(P5e,xwr),e(wC,$wr),e(wC,SK),e(SK,kwr),e(wC,Swr),e(Pe,Rwr),e(Pe,AC),e(AC,B5e),e(B5e,Pwr),e(AC,Bwr),e(AC,RK),e(RK,Iwr),e(AC,Nwr),e(Pe,qwr),e(Pe,LC),e(LC,I5e),e(I5e,jwr),e(LC,Dwr),e(LC,PK),e(PK,Gwr),e(LC,Owr),e(Pe,Vwr),e(Pe,yC),e(yC,N5e),e(N5e,Xwr),e(yC,zwr),e(yC,BK),e(BK,Qwr),e(yC,Wwr),e(Pe,Uwr),e(Pe,xC),e(xC,q5e),e(q5e,Hwr),e(xC,Jwr),e(xC,IK),e(IK,Ywr),e(xC,Zwr),e(po,Kwr),e(po,$C),e($C,eAr),e($C,j5e),e(j5e,oAr),e($C,rAr),e($C,D5e),e(D5e,tAr),e(po,aAr),M(kC,po,null),b(m,dro,_),b(m,Tc,_),e(Tc,SC),e(SC,G5e),M(kk,G5e,null),e(Tc,nAr),e(Tc,O5e),e(O5e,sAr),b(m,cro,_),b(m,Zo,_),M(Sk,Zo,null),e(Zo,lAr),e(Zo,Mc),e(Mc,iAr),e(Mc,NK),e(NK,dAr),e(Mc,cAr),e(Mc,qK),e(qK,mAr),e(Mc,fAr),e(Zo,gAr),e(Zo,Rk),e(Rk,hAr),e(Rk,V5e),e(V5e,uAr),e(Rk,pAr),e(Zo,_Ar),e(Zo,Nt),M(Pk,Nt,null),e(Nt,bAr),e(Nt,X5e),e(X5e,vAr),e(Nt,FAr),e(Nt,Ec),e(Ec,TAr),e(Ec,z5e),e(z5e,MAr),e(Ec,EAr),e(Ec,jK),e(jK,CAr),e(Ec,wAr),e(Nt,AAr),M(RC,Nt,null),e(Zo,LAr),e(Zo,_o),M(Bk,_o,null),e(_o,yAr),e(_o,Q5e),e(Q5e,xAr),e(_o,$Ar),e(_o,bn),e(bn,kAr),e(bn,W5e),e(W5e,SAr),e(bn,RAr),e(bn,U5e),e(U5e,PAr),e(bn,BAr),e(bn,H5e),e(H5e,IAr),e(bn,NAr),e(_o,qAr),e(_o,gt),e(gt,PC),e(PC,J5e),e(J5e,jAr),e(PC,DAr),e(PC,DK),e(DK,GAr),e(PC,OAr),e(gt,VAr),e(gt,BC),e(BC,Y5e),e(Y5e,XAr),e(BC,zAr),e(BC,GK),e(GK,QAr),e(BC,WAr),e(gt,UAr),e(gt,IC),e(IC,Z5e),e(Z5e,HAr),e(IC,JAr),e(IC,OK),e(OK,YAr),e(IC,ZAr),e(gt,KAr),e(gt,NC),e(NC,K5e),e(K5e,e6r),e(NC,o6r),e(NC,VK),e(VK,r6r),e(NC,t6r),e(gt,a6r),e(gt,qC),e(qC,e0e),e(e0e,n6r),e(qC,s6r),e(qC,XK),e(XK,l6r),e(qC,i6r),e(_o,d6r),e(_o,jC),e(jC,c6r),e(jC,o0e),e(o0e,m6r),e(jC,f6r),e(jC,r0e),e(r0e,g6r),e(_o,h6r),M(DC,_o,null),b(m,mro,_),b(m,Cc,_),e(Cc,GC),e(GC,t0e),M(Ik,t0e,null),e(Cc,u6r),e(Cc,a0e),e(a0e,p6r),b(m,fro,_),b(m,Ko,_),M(Nk,Ko,null),e(Ko,_6r),e(Ko,wc),e(wc,b6r),e(wc,zK),e(zK,v6r),e(wc,F6r),e(wc,QK),e(QK,T6r),e(wc,M6r),e(Ko,E6r),e(Ko,qk),e(qk,C6r),e(qk,n0e),e(n0e,w6r),e(qk,A6r),e(Ko,L6r),e(Ko,qt),M(jk,qt,null),e(qt,y6r),e(qt,s0e),e(s0e,x6r),e(qt,$6r),e(qt,Ac),e(Ac,k6r),e(Ac,l0e),e(l0e,S6r),e(Ac,R6r),e(Ac,WK),e(WK,P6r),e(Ac,B6r),e(qt,I6r),M(OC,qt,null),e(Ko,N6r),e(Ko,bo),M(Dk,bo,null),e(bo,q6r),e(bo,i0e),e(i0e,j6r),e(bo,D6r),e(bo,vn),e(vn,G6r),e(vn,d0e),e(d0e,O6r),e(vn,V6r),e(vn,c0e),e(c0e,X6r),e(vn,z6r),e(vn,m0e),e(m0e,Q6r),e(vn,W6r),e(bo,U6r),e(bo,Le),e(Le,VC),e(VC,f0e),e(f0e,H6r),e(VC,J6r),e(VC,UK),e(UK,Y6r),e(VC,Z6r),e(Le,K6r),e(Le,XC),e(XC,g0e),e(g0e,e7r),e(XC,o7r),e(XC,HK),e(HK,r7r),e(XC,t7r),e(Le,a7r),e(Le,zC),e(zC,h0e),e(h0e,n7r),e(zC,s7r),e(zC,JK),e(JK,l7r),e(zC,i7r),e(Le,d7r),e(Le,QC),e(QC,u0e),e(u0e,c7r),e(QC,m7r),e(QC,YK),e(YK,f7r),e(QC,g7r),e(Le,h7r),e(Le,WC),e(WC,p0e),e(p0e,u7r),e(WC,p7r),e(WC,ZK),e(ZK,_7r),e(WC,b7r),e(Le,v7r),e(Le,UC),e(UC,_0e),e(_0e,F7r),e(UC,T7r),e(UC,KK),e(KK,M7r),e(UC,E7r),e(Le,C7r),e(Le,HC),e(HC,b0e),e(b0e,w7r),e(HC,A7r),e(HC,eee),e(eee,L7r),e(HC,y7r),e(Le,x7r),e(Le,JC),e(JC,v0e),e(v0e,$7r),e(JC,k7r),e(JC,oee),e(oee,S7r),e(JC,R7r),e(Le,P7r),e(Le,YC),e(YC,F0e),e(F0e,B7r),e(YC,I7r),e(YC,ree),e(ree,N7r),e(YC,q7r),e(Le,j7r),e(Le,ZC),e(ZC,T0e),e(T0e,D7r),e(ZC,G7r),e(ZC,tee),e(tee,O7r),e(ZC,V7r),e(bo,X7r),e(bo,KC),e(KC,z7r),e(KC,M0e),e(M0e,Q7r),e(KC,W7r),e(KC,E0e),e(E0e,U7r),e(bo,H7r),M(e3,bo,null),b(m,gro,_),b(m,Lc,_),e(Lc,o3),e(o3,C0e),M(Gk,C0e,null),e(Lc,J7r),e(Lc,w0e),e(w0e,Y7r),b(m,hro,_),b(m,er,_),M(Ok,er,null),e(er,Z7r),e(er,yc),e(yc,K7r),e(yc,aee),e(aee,eLr),e(yc,oLr),e(yc,nee),e(nee,rLr),e(yc,tLr),e(er,aLr),e(er,Vk),e(Vk,nLr),e(Vk,A0e),e(A0e,sLr),e(Vk,lLr),e(er,iLr),e(er,jt),M(Xk,jt,null),e(jt,dLr),e(jt,L0e),e(L0e,cLr),e(jt,mLr),e(jt,xc),e(xc,fLr),e(xc,y0e),e(y0e,gLr),e(xc,hLr),e(xc,see),e(see,uLr),e(xc,pLr),e(jt,_Lr),M(r3,jt,null),e(er,bLr),e(er,vo),M(zk,vo,null),e(vo,vLr),e(vo,x0e),e(x0e,FLr),e(vo,TLr),e(vo,Fn),e(Fn,MLr),e(Fn,$0e),e($0e,ELr),e(Fn,CLr),e(Fn,k0e),e(k0e,wLr),e(Fn,ALr),e(Fn,S0e),e(S0e,LLr),e(Fn,yLr),e(vo,xLr),e(vo,$c),e($c,t3),e(t3,R0e),e(R0e,$Lr),e(t3,kLr),e(t3,lee),e(lee,SLr),e(t3,RLr),e($c,PLr),e($c,a3),e(a3,P0e),e(P0e,BLr),e(a3,ILr),e(a3,iee),e(iee,NLr),e(a3,qLr),e($c,jLr),e($c,n3),e(n3,B0e),e(B0e,DLr),e(n3,GLr),e(n3,dee),e(dee,OLr),e(n3,VLr),e(vo,XLr),e(vo,s3),e(s3,zLr),e(s3,I0e),e(I0e,QLr),e(s3,WLr),e(s3,N0e),e(N0e,ULr),e(vo,HLr),M(l3,vo,null),b(m,uro,_),b(m,kc,_),e(kc,i3),e(i3,q0e),M(Qk,q0e,null),e(kc,JLr),e(kc,j0e),e(j0e,YLr),b(m,pro,_),b(m,or,_),M(Wk,or,null),e(or,ZLr),e(or,Sc),e(Sc,KLr),e(Sc,cee),e(cee,e8r),e(Sc,o8r),e(Sc,mee),e(mee,r8r),e(Sc,t8r),e(or,a8r),e(or,Uk),e(Uk,n8r),e(Uk,D0e),e(D0e,s8r),e(Uk,l8r),e(or,i8r),e(or,Dt),M(Hk,Dt,null),e(Dt,d8r),e(Dt,G0e),e(G0e,c8r),e(Dt,m8r),e(Dt,Rc),e(Rc,f8r),e(Rc,O0e),e(O0e,g8r),e(Rc,h8r),e(Rc,fee),e(fee,u8r),e(Rc,p8r),e(Dt,_8r),M(d3,Dt,null),e(or,b8r),e(or,Fo),M(Jk,Fo,null),e(Fo,v8r),e(Fo,V0e),e(V0e,F8r),e(Fo,T8r),e(Fo,Tn),e(Tn,M8r),e(Tn,X0e),e(X0e,E8r),e(Tn,C8r),e(Tn,z0e),e(z0e,w8r),e(Tn,A8r),e(Tn,Q0e),e(Q0e,L8r),e(Tn,y8r),e(Fo,x8r),e(Fo,ht),e(ht,c3),e(c3,W0e),e(W0e,$8r),e(c3,k8r),e(c3,gee),e(gee,S8r),e(c3,R8r),e(ht,P8r),e(ht,m3),e(m3,U0e),e(U0e,B8r),e(m3,I8r),e(m3,hee),e(hee,N8r),e(m3,q8r),e(ht,j8r),e(ht,f3),e(f3,H0e),e(H0e,D8r),e(f3,G8r),e(f3,uee),e(uee,O8r),e(f3,V8r),e(ht,X8r),e(ht,g3),e(g3,J0e),e(J0e,z8r),e(g3,Q8r),e(g3,pee),e(pee,W8r),e(g3,U8r),e(ht,H8r),e(ht,h3),e(h3,Y0e),e(Y0e,J8r),e(h3,Y8r),e(h3,_ee),e(_ee,Z8r),e(h3,K8r),e(Fo,eyr),e(Fo,u3),e(u3,oyr),e(u3,Z0e),e(Z0e,ryr),e(u3,tyr),e(u3,K0e),e(K0e,ayr),e(Fo,nyr),M(p3,Fo,null),b(m,_ro,_),b(m,Pc,_),e(Pc,_3),e(_3,ewe),M(Yk,ewe,null),e(Pc,syr),e(Pc,owe),e(owe,lyr),b(m,bro,_),b(m,rr,_),M(Zk,rr,null),e(rr,iyr),e(rr,Bc),e(Bc,dyr),e(Bc,bee),e(bee,cyr),e(Bc,myr),e(Bc,vee),e(vee,fyr),e(Bc,gyr),e(rr,hyr),e(rr,Kk),e(Kk,uyr),e(Kk,rwe),e(rwe,pyr),e(Kk,_yr),e(rr,byr),e(rr,Gt),M(eS,Gt,null),e(Gt,vyr),e(Gt,twe),e(twe,Fyr),e(Gt,Tyr),e(Gt,Ic),e(Ic,Myr),e(Ic,awe),e(awe,Eyr),e(Ic,Cyr),e(Ic,Fee),e(Fee,wyr),e(Ic,Ayr),e(Gt,Lyr),M(b3,Gt,null),e(rr,yyr),e(rr,To),M(oS,To,null),e(To,xyr),e(To,nwe),e(nwe,$yr),e(To,kyr),e(To,Mn),e(Mn,Syr),e(Mn,swe),e(swe,Ryr),e(Mn,Pyr),e(Mn,lwe),e(lwe,Byr),e(Mn,Iyr),e(Mn,iwe),e(iwe,Nyr),e(Mn,qyr),e(To,jyr),e(To,En),e(En,v3),e(v3,dwe),e(dwe,Dyr),e(v3,Gyr),e(v3,Tee),e(Tee,Oyr),e(v3,Vyr),e(En,Xyr),e(En,F3),e(F3,cwe),e(cwe,zyr),e(F3,Qyr),e(F3,Mee),e(Mee,Wyr),e(F3,Uyr),e(En,Hyr),e(En,T3),e(T3,mwe),e(mwe,Jyr),e(T3,Yyr),e(T3,Eee),e(Eee,Zyr),e(T3,Kyr),e(En,e9r),e(En,M3),e(M3,fwe),e(fwe,o9r),e(M3,r9r),e(M3,Cee),e(Cee,t9r),e(M3,a9r),e(To,n9r),e(To,E3),e(E3,s9r),e(E3,gwe),e(gwe,l9r),e(E3,i9r),e(E3,hwe),e(hwe,d9r),e(To,c9r),M(C3,To,null),b(m,vro,_),b(m,Nc,_),e(Nc,w3),e(w3,uwe),M(rS,uwe,null),e(Nc,m9r),e(Nc,pwe),e(pwe,f9r),b(m,Fro,_),b(m,tr,_),M(tS,tr,null),e(tr,g9r),e(tr,qc),e(qc,h9r),e(qc,wee),e(wee,u9r),e(qc,p9r),e(qc,Aee),e(Aee,_9r),e(qc,b9r),e(tr,v9r),e(tr,aS),e(aS,F9r),e(aS,_we),e(_we,T9r),e(aS,M9r),e(tr,E9r),e(tr,Ot),M(nS,Ot,null),e(Ot,C9r),e(Ot,bwe),e(bwe,w9r),e(Ot,A9r),e(Ot,jc),e(jc,L9r),e(jc,vwe),e(vwe,y9r),e(jc,x9r),e(jc,Lee),e(Lee,$9r),e(jc,k9r),e(Ot,S9r),M(A3,Ot,null),e(tr,R9r),e(tr,Mo),M(sS,Mo,null),e(Mo,P9r),e(Mo,Fwe),e(Fwe,B9r),e(Mo,I9r),e(Mo,Cn),e(Cn,N9r),e(Cn,Twe),e(Twe,q9r),e(Cn,j9r),e(Cn,Mwe),e(Mwe,D9r),e(Cn,G9r),e(Cn,Ewe),e(Ewe,O9r),e(Cn,V9r),e(Mo,X9r),e(Mo,wn),e(wn,L3),e(L3,Cwe),e(Cwe,z9r),e(L3,Q9r),e(L3,yee),e(yee,W9r),e(L3,U9r),e(wn,H9r),e(wn,y3),e(y3,wwe),e(wwe,J9r),e(y3,Y9r),e(y3,xee),e(xee,Z9r),e(y3,K9r),e(wn,exr),e(wn,x3),e(x3,Awe),e(Awe,oxr),e(x3,rxr),e(x3,$ee),e($ee,txr),e(x3,axr),e(wn,nxr),e(wn,$3),e($3,Lwe),e(Lwe,sxr),e($3,lxr),e($3,kee),e(kee,ixr),e($3,dxr),e(Mo,cxr),e(Mo,k3),e(k3,mxr),e(k3,ywe),e(ywe,fxr),e(k3,gxr),e(k3,xwe),e(xwe,hxr),e(Mo,uxr),M(S3,Mo,null),b(m,Tro,_),b(m,Dc,_),e(Dc,R3),e(R3,$we),M(lS,$we,null),e(Dc,pxr),e(Dc,kwe),e(kwe,_xr),b(m,Mro,_),b(m,ar,_),M(iS,ar,null),e(ar,bxr),e(ar,Gc),e(Gc,vxr),e(Gc,See),e(See,Fxr),e(Gc,Txr),e(Gc,Ree),e(Ree,Mxr),e(Gc,Exr),e(ar,Cxr),e(ar,dS),e(dS,wxr),e(dS,Swe),e(Swe,Axr),e(dS,Lxr),e(ar,yxr),e(ar,Vt),M(cS,Vt,null),e(Vt,xxr),e(Vt,Rwe),e(Rwe,$xr),e(Vt,kxr),e(Vt,Oc),e(Oc,Sxr),e(Oc,Pwe),e(Pwe,Rxr),e(Oc,Pxr),e(Oc,Pee),e(Pee,Bxr),e(Oc,Ixr),e(Vt,Nxr),M(P3,Vt,null),e(ar,qxr),e(ar,Eo),M(mS,Eo,null),e(Eo,jxr),e(Eo,Bwe),e(Bwe,Dxr),e(Eo,Gxr),e(Eo,An),e(An,Oxr),e(An,Iwe),e(Iwe,Vxr),e(An,Xxr),e(An,Nwe),e(Nwe,zxr),e(An,Qxr),e(An,qwe),e(qwe,Wxr),e(An,Uxr),e(Eo,Hxr),e(Eo,jwe),e(jwe,B3),e(B3,Dwe),e(Dwe,Jxr),e(B3,Yxr),e(B3,Bee),e(Bee,Zxr),e(B3,Kxr),e(Eo,e$r),e(Eo,I3),e(I3,o$r),e(I3,Gwe),e(Gwe,r$r),e(I3,t$r),e(I3,Owe),e(Owe,a$r),e(Eo,n$r),M(N3,Eo,null),b(m,Ero,_),b(m,Vc,_),e(Vc,q3),e(q3,Vwe),M(fS,Vwe,null),e(Vc,s$r),e(Vc,Xwe),e(Xwe,l$r),b(m,Cro,_),b(m,nr,_),M(gS,nr,null),e(nr,i$r),e(nr,Xc),e(Xc,d$r),e(Xc,Iee),e(Iee,c$r),e(Xc,m$r),e(Xc,Nee),e(Nee,f$r),e(Xc,g$r),e(nr,h$r),e(nr,hS),e(hS,u$r),e(hS,zwe),e(zwe,p$r),e(hS,_$r),e(nr,b$r),e(nr,Xt),M(uS,Xt,null),e(Xt,v$r),e(Xt,Qwe),e(Qwe,F$r),e(Xt,T$r),e(Xt,zc),e(zc,M$r),e(zc,Wwe),e(Wwe,E$r),e(zc,C$r),e(zc,qee),e(qee,w$r),e(zc,A$r),e(Xt,L$r),M(j3,Xt,null),e(nr,y$r),e(nr,Co),M(pS,Co,null),e(Co,x$r),e(Co,Uwe),e(Uwe,$$r),e(Co,k$r),e(Co,Ln),e(Ln,S$r),e(Ln,Hwe),e(Hwe,R$r),e(Ln,P$r),e(Ln,Jwe),e(Jwe,B$r),e(Ln,I$r),e(Ln,Ywe),e(Ywe,N$r),e(Ln,q$r),e(Co,j$r),e(Co,ut),e(ut,D3),e(D3,Zwe),e(Zwe,D$r),e(D3,G$r),e(D3,jee),e(jee,O$r),e(D3,V$r),e(ut,X$r),e(ut,G3),e(G3,Kwe),e(Kwe,z$r),e(G3,Q$r),e(G3,Dee),e(Dee,W$r),e(G3,U$r),e(ut,H$r),e(ut,O3),e(O3,eAe),e(eAe,J$r),e(O3,Y$r),e(O3,Gee),e(Gee,Z$r),e(O3,K$r),e(ut,ekr),e(ut,V3),e(V3,oAe),e(oAe,okr),e(V3,rkr),e(V3,Oee),e(Oee,tkr),e(V3,akr),e(ut,nkr),e(ut,X3),e(X3,rAe),e(rAe,skr),e(X3,lkr),e(X3,Vee),e(Vee,ikr),e(X3,dkr),e(Co,ckr),e(Co,z3),e(z3,mkr),e(z3,tAe),e(tAe,fkr),e(z3,gkr),e(z3,aAe),e(aAe,hkr),e(Co,ukr),M(Q3,Co,null),b(m,wro,_),b(m,Qc,_),e(Qc,W3),e(W3,nAe),M(_S,nAe,null),e(Qc,pkr),e(Qc,sAe),e(sAe,_kr),b(m,Aro,_),b(m,sr,_),M(bS,sr,null),e(sr,bkr),e(sr,Wc),e(Wc,vkr),e(Wc,Xee),e(Xee,Fkr),e(Wc,Tkr),e(Wc,zee),e(zee,Mkr),e(Wc,Ekr),e(sr,Ckr),e(sr,vS),e(vS,wkr),e(vS,lAe),e(lAe,Akr),e(vS,Lkr),e(sr,ykr),e(sr,zt),M(FS,zt,null),e(zt,xkr),e(zt,iAe),e(iAe,$kr),e(zt,kkr),e(zt,Uc),e(Uc,Skr),e(Uc,dAe),e(dAe,Rkr),e(Uc,Pkr),e(Uc,Qee),e(Qee,Bkr),e(Uc,Ikr),e(zt,Nkr),M(U3,zt,null),e(sr,qkr),e(sr,wo),M(TS,wo,null),e(wo,jkr),e(wo,cAe),e(cAe,Dkr),e(wo,Gkr),e(wo,yn),e(yn,Okr),e(yn,mAe),e(mAe,Vkr),e(yn,Xkr),e(yn,fAe),e(fAe,zkr),e(yn,Qkr),e(yn,gAe),e(gAe,Wkr),e(yn,Ukr),e(wo,Hkr),e(wo,hAe),e(hAe,H3),e(H3,uAe),e(uAe,Jkr),e(H3,Ykr),e(H3,Wee),e(Wee,Zkr),e(H3,Kkr),e(wo,eSr),e(wo,J3),e(J3,oSr),e(J3,pAe),e(pAe,rSr),e(J3,tSr),e(J3,_Ae),e(_Ae,aSr),e(wo,nSr),M(Y3,wo,null),b(m,Lro,_),b(m,Hc,_),e(Hc,Z3),e(Z3,bAe),M(MS,bAe,null),e(Hc,sSr),e(Hc,vAe),e(vAe,lSr),b(m,yro,_),b(m,lr,_),M(ES,lr,null),e(lr,iSr),e(lr,Jc),e(Jc,dSr),e(Jc,Uee),e(Uee,cSr),e(Jc,mSr),e(Jc,Hee),e(Hee,fSr),e(Jc,gSr),e(lr,hSr),e(lr,CS),e(CS,uSr),e(CS,FAe),e(FAe,pSr),e(CS,_Sr),e(lr,bSr),e(lr,Qt),M(wS,Qt,null),e(Qt,vSr),e(Qt,TAe),e(TAe,FSr),e(Qt,TSr),e(Qt,Yc),e(Yc,MSr),e(Yc,MAe),e(MAe,ESr),e(Yc,CSr),e(Yc,Jee),e(Jee,wSr),e(Yc,ASr),e(Qt,LSr),M(K3,Qt,null),e(lr,ySr),e(lr,Ao),M(AS,Ao,null),e(Ao,xSr),e(Ao,EAe),e(EAe,$Sr),e(Ao,kSr),e(Ao,xn),e(xn,SSr),e(xn,CAe),e(CAe,RSr),e(xn,PSr),e(xn,wAe),e(wAe,BSr),e(xn,ISr),e(xn,AAe),e(AAe,NSr),e(xn,qSr),e(Ao,jSr),e(Ao,LAe),e(LAe,e5),e(e5,yAe),e(yAe,DSr),e(e5,GSr),e(e5,Yee),e(Yee,OSr),e(e5,VSr),e(Ao,XSr),e(Ao,o5),e(o5,zSr),e(o5,xAe),e(xAe,QSr),e(o5,WSr),e(o5,$Ae),e($Ae,USr),e(Ao,HSr),M(r5,Ao,null),b(m,xro,_),b(m,Zc,_),e(Zc,t5),e(t5,kAe),M(LS,kAe,null),e(Zc,JSr),e(Zc,SAe),e(SAe,YSr),b(m,$ro,_),b(m,ir,_),M(yS,ir,null),e(ir,ZSr),e(ir,Kc),e(Kc,KSr),e(Kc,Zee),e(Zee,eRr),e(Kc,oRr),e(Kc,Kee),e(Kee,rRr),e(Kc,tRr),e(ir,aRr),e(ir,xS),e(xS,nRr),e(xS,RAe),e(RAe,sRr),e(xS,lRr),e(ir,iRr),e(ir,Wt),M($S,Wt,null),e(Wt,dRr),e(Wt,PAe),e(PAe,cRr),e(Wt,mRr),e(Wt,em),e(em,fRr),e(em,BAe),e(BAe,gRr),e(em,hRr),e(em,eoe),e(eoe,uRr),e(em,pRr),e(Wt,_Rr),M(a5,Wt,null),e(ir,bRr),e(ir,qr),M(kS,qr,null),e(qr,vRr),e(qr,IAe),e(IAe,FRr),e(qr,TRr),e(qr,$n),e($n,MRr),e($n,NAe),e(NAe,ERr),e($n,CRr),e($n,qAe),e(qAe,wRr),e($n,ARr),e($n,jAe),e(jAe,LRr),e($n,yRr),e(qr,xRr),e(qr,B),e(B,n5),e(n5,DAe),e(DAe,$Rr),e(n5,kRr),e(n5,ooe),e(ooe,SRr),e(n5,RRr),e(B,PRr),e(B,s5),e(s5,GAe),e(GAe,BRr),e(s5,IRr),e(s5,roe),e(roe,NRr),e(s5,qRr),e(B,jRr),e(B,l5),e(l5,OAe),e(OAe,DRr),e(l5,GRr),e(l5,toe),e(toe,ORr),e(l5,VRr),e(B,XRr),e(B,i5),e(i5,VAe),e(VAe,zRr),e(i5,QRr),e(i5,aoe),e(aoe,WRr),e(i5,URr),e(B,HRr),e(B,d5),e(d5,XAe),e(XAe,JRr),e(d5,YRr),e(d5,noe),e(noe,ZRr),e(d5,KRr),e(B,ePr),e(B,c5),e(c5,zAe),e(zAe,oPr),e(c5,rPr),e(c5,soe),e(soe,tPr),e(c5,aPr),e(B,nPr),e(B,m5),e(m5,QAe),e(QAe,sPr),e(m5,lPr),e(m5,loe),e(loe,iPr),e(m5,dPr),e(B,cPr),e(B,f5),e(f5,WAe),e(WAe,mPr),e(f5,fPr),e(f5,ioe),e(ioe,gPr),e(f5,hPr),e(B,uPr),e(B,g5),e(g5,UAe),e(UAe,pPr),e(g5,_Pr),e(g5,doe),e(doe,bPr),e(g5,vPr),e(B,FPr),e(B,h5),e(h5,HAe),e(HAe,TPr),e(h5,MPr),e(h5,coe),e(coe,EPr),e(h5,CPr),e(B,wPr),e(B,u5),e(u5,JAe),e(JAe,APr),e(u5,LPr),e(u5,moe),e(moe,yPr),e(u5,xPr),e(B,$Pr),e(B,p5),e(p5,YAe),e(YAe,kPr),e(p5,SPr),e(p5,foe),e(foe,RPr),e(p5,PPr),e(B,BPr),e(B,_5),e(_5,ZAe),e(ZAe,IPr),e(_5,NPr),e(_5,goe),e(goe,qPr),e(_5,jPr),e(B,DPr),e(B,b5),e(b5,KAe),e(KAe,GPr),e(b5,OPr),e(b5,hoe),e(hoe,VPr),e(b5,XPr),e(B,zPr),e(B,v5),e(v5,e6e),e(e6e,QPr),e(v5,WPr),e(v5,uoe),e(uoe,UPr),e(v5,HPr),e(B,JPr),e(B,F5),e(F5,o6e),e(o6e,YPr),e(F5,ZPr),e(F5,poe),e(poe,KPr),e(F5,eBr),e(B,oBr),e(B,T5),e(T5,r6e),e(r6e,rBr),e(T5,tBr),e(T5,_oe),e(_oe,aBr),e(T5,nBr),e(B,sBr),e(B,M5),e(M5,t6e),e(t6e,lBr),e(M5,iBr),e(M5,boe),e(boe,dBr),e(M5,cBr),e(B,mBr),e(B,wl),e(wl,a6e),e(a6e,fBr),e(wl,gBr),e(wl,voe),e(voe,hBr),e(wl,uBr),e(wl,Foe),e(Foe,pBr),e(wl,_Br),e(B,bBr),e(B,E5),e(E5,n6e),e(n6e,vBr),e(E5,FBr),e(E5,Toe),e(Toe,TBr),e(E5,MBr),e(B,EBr),e(B,C5),e(C5,s6e),e(s6e,CBr),e(C5,wBr),e(C5,Moe),e(Moe,ABr),e(C5,LBr),e(B,yBr),e(B,w5),e(w5,l6e),e(l6e,xBr),e(w5,$Br),e(w5,Eoe),e(Eoe,kBr),e(w5,SBr),e(B,RBr),e(B,A5),e(A5,i6e),e(i6e,PBr),e(A5,BBr),e(A5,Coe),e(Coe,IBr),e(A5,NBr),e(B,qBr),e(B,L5),e(L5,d6e),e(d6e,jBr),e(L5,DBr),e(L5,woe),e(woe,GBr),e(L5,OBr),e(B,VBr),e(B,y5),e(y5,c6e),e(c6e,XBr),e(y5,zBr),e(y5,Aoe),e(Aoe,QBr),e(y5,WBr),e(B,UBr),e(B,x5),e(x5,m6e),e(m6e,HBr),e(x5,JBr),e(x5,Loe),e(Loe,YBr),e(x5,ZBr),e(B,KBr),e(B,$5),e($5,f6e),e(f6e,eIr),e($5,oIr),e($5,yoe),e(yoe,rIr),e($5,tIr),e(B,aIr),e(B,k5),e(k5,g6e),e(g6e,nIr),e(k5,sIr),e(k5,xoe),e(xoe,lIr),e(k5,iIr),e(B,dIr),e(B,S5),e(S5,h6e),e(h6e,cIr),e(S5,mIr),e(S5,$oe),e($oe,fIr),e(S5,gIr),e(B,hIr),e(B,R5),e(R5,u6e),e(u6e,uIr),e(R5,pIr),e(R5,koe),e(koe,_Ir),e(R5,bIr),e(B,vIr),e(B,P5),e(P5,p6e),e(p6e,FIr),e(P5,TIr),e(P5,Soe),e(Soe,MIr),e(P5,EIr),e(B,CIr),e(B,B5),e(B5,_6e),e(_6e,wIr),e(B5,AIr),e(B5,Roe),e(Roe,LIr),e(B5,yIr),e(B,xIr),e(B,I5),e(I5,b6e),e(b6e,$Ir),e(I5,kIr),e(I5,Poe),e(Poe,SIr),e(I5,RIr),e(B,PIr),e(B,N5),e(N5,v6e),e(v6e,BIr),e(N5,IIr),e(N5,Boe),e(Boe,NIr),e(N5,qIr),e(B,jIr),e(B,q5),e(q5,F6e),e(F6e,DIr),e(q5,GIr),e(q5,Ioe),e(Ioe,OIr),e(q5,VIr),e(B,XIr),e(B,j5),e(j5,T6e),e(T6e,zIr),e(j5,QIr),e(j5,Noe),e(Noe,WIr),e(j5,UIr),e(B,HIr),e(B,D5),e(D5,M6e),e(M6e,JIr),e(D5,YIr),e(D5,qoe),e(qoe,ZIr),e(D5,KIr),e(B,eNr),e(B,G5),e(G5,E6e),e(E6e,oNr),e(G5,rNr),e(G5,joe),e(joe,tNr),e(G5,aNr),e(B,nNr),e(B,O5),e(O5,C6e),e(C6e,sNr),e(O5,lNr),e(O5,Doe),e(Doe,iNr),e(O5,dNr),e(B,cNr),e(B,V5),e(V5,w6e),e(w6e,mNr),e(V5,fNr),e(V5,Goe),e(Goe,gNr),e(V5,hNr),e(B,uNr),e(B,X5),e(X5,A6e),e(A6e,pNr),e(X5,_Nr),e(X5,Ooe),e(Ooe,bNr),e(X5,vNr),e(B,FNr),e(B,z5),e(z5,L6e),e(L6e,TNr),e(z5,MNr),e(z5,Voe),e(Voe,ENr),e(z5,CNr),e(B,wNr),e(B,Q5),e(Q5,y6e),e(y6e,ANr),e(Q5,LNr),e(Q5,Xoe),e(Xoe,yNr),e(Q5,xNr),e(B,$Nr),e(B,W5),e(W5,x6e),e(x6e,kNr),e(W5,SNr),e(W5,zoe),e(zoe,RNr),e(W5,PNr),e(B,BNr),e(B,U5),e(U5,$6e),e($6e,INr),e(U5,NNr),e(U5,Qoe),e(Qoe,qNr),e(U5,jNr),e(B,DNr),e(B,H5),e(H5,k6e),e(k6e,GNr),e(H5,ONr),e(H5,Woe),e(Woe,VNr),e(H5,XNr),e(B,zNr),e(B,J5),e(J5,S6e),e(S6e,QNr),e(J5,WNr),e(J5,Uoe),e(Uoe,UNr),e(J5,HNr),e(B,JNr),e(B,Y5),e(Y5,R6e),e(R6e,YNr),e(Y5,ZNr),e(Y5,Hoe),e(Hoe,KNr),e(Y5,eqr),e(B,oqr),e(B,Z5),e(Z5,P6e),e(P6e,rqr),e(Z5,tqr),e(Z5,Joe),e(Joe,aqr),e(Z5,nqr),e(B,sqr),e(B,K5),e(K5,B6e),e(B6e,lqr),e(K5,iqr),e(K5,Yoe),e(Yoe,dqr),e(K5,cqr),e(B,mqr),e(B,e0),e(e0,I6e),e(I6e,fqr),e(e0,gqr),e(e0,Zoe),e(Zoe,hqr),e(e0,uqr),e(B,pqr),e(B,o0),e(o0,N6e),e(N6e,_qr),e(o0,bqr),e(o0,Koe),e(Koe,vqr),e(o0,Fqr),e(B,Tqr),e(B,r0),e(r0,q6e),e(q6e,Mqr),e(r0,Eqr),e(r0,ere),e(ere,Cqr),e(r0,wqr),e(B,Aqr),e(B,t0),e(t0,j6e),e(j6e,Lqr),e(t0,yqr),e(t0,ore),e(ore,xqr),e(t0,$qr),e(B,kqr),e(B,a0),e(a0,D6e),e(D6e,Sqr),e(a0,Rqr),e(a0,rre),e(rre,Pqr),e(a0,Bqr),e(B,Iqr),e(B,n0),e(n0,G6e),e(G6e,Nqr),e(n0,qqr),e(n0,tre),e(tre,jqr),e(n0,Dqr),e(qr,Gqr),M(s0,qr,null),b(m,kro,_),b(m,om,_),e(om,l0),e(l0,O6e),M(SS,O6e,null),e(om,Oqr),e(om,V6e),e(V6e,Vqr),b(m,Sro,_),b(m,dr,_),M(RS,dr,null),e(dr,Xqr),e(dr,rm),e(rm,zqr),e(rm,are),e(are,Qqr),e(rm,Wqr),e(rm,nre),e(nre,Uqr),e(rm,Hqr),e(dr,Jqr),e(dr,PS),e(PS,Yqr),e(PS,X6e),e(X6e,Zqr),e(PS,Kqr),e(dr,ejr),e(dr,Ut),M(BS,Ut,null),e(Ut,ojr),e(Ut,z6e),e(z6e,rjr),e(Ut,tjr),e(Ut,tm),e(tm,ajr),e(tm,Q6e),e(Q6e,njr),e(tm,sjr),e(tm,sre),e(sre,ljr),e(tm,ijr),e(Ut,djr),M(i0,Ut,null),e(dr,cjr),e(dr,jr),M(IS,jr,null),e(jr,mjr),e(jr,W6e),e(W6e,fjr),e(jr,gjr),e(jr,kn),e(kn,hjr),e(kn,U6e),e(U6e,ujr),e(kn,pjr),e(kn,H6e),e(H6e,_jr),e(kn,bjr),e(kn,J6e),e(J6e,vjr),e(kn,Fjr),e(jr,Tjr),e(jr,le),e(le,d0),e(d0,Y6e),e(Y6e,Mjr),e(d0,Ejr),e(d0,lre),e(lre,Cjr),e(d0,wjr),e(le,Ajr),e(le,c0),e(c0,Z6e),e(Z6e,Ljr),e(c0,yjr),e(c0,ire),e(ire,xjr),e(c0,$jr),e(le,kjr),e(le,m0),e(m0,K6e),e(K6e,Sjr),e(m0,Rjr),e(m0,dre),e(dre,Pjr),e(m0,Bjr),e(le,Ijr),e(le,f0),e(f0,e7e),e(e7e,Njr),e(f0,qjr),e(f0,cre),e(cre,jjr),e(f0,Djr),e(le,Gjr),e(le,g0),e(g0,o7e),e(o7e,Ojr),e(g0,Vjr),e(g0,mre),e(mre,Xjr),e(g0,zjr),e(le,Qjr),e(le,h0),e(h0,r7e),e(r7e,Wjr),e(h0,Ujr),e(h0,fre),e(fre,Hjr),e(h0,Jjr),e(le,Yjr),e(le,u0),e(u0,t7e),e(t7e,Zjr),e(u0,Kjr),e(u0,gre),e(gre,eDr),e(u0,oDr),e(le,rDr),e(le,p0),e(p0,a7e),e(a7e,tDr),e(p0,aDr),e(p0,hre),e(hre,nDr),e(p0,sDr),e(le,lDr),e(le,_0),e(_0,n7e),e(n7e,iDr),e(_0,dDr),e(_0,ure),e(ure,cDr),e(_0,mDr),e(le,fDr),e(le,b0),e(b0,s7e),e(s7e,gDr),e(b0,hDr),e(b0,pre),e(pre,uDr),e(b0,pDr),e(le,_Dr),e(le,v0),e(v0,l7e),e(l7e,bDr),e(v0,vDr),e(v0,_re),e(_re,FDr),e(v0,TDr),e(le,MDr),e(le,F0),e(F0,i7e),e(i7e,EDr),e(F0,CDr),e(F0,bre),e(bre,wDr),e(F0,ADr),e(le,LDr),e(le,T0),e(T0,d7e),e(d7e,yDr),e(T0,xDr),e(T0,vre),e(vre,$Dr),e(T0,kDr),e(le,SDr),e(le,M0),e(M0,c7e),e(c7e,RDr),e(M0,PDr),e(M0,Fre),e(Fre,BDr),e(M0,IDr),e(le,NDr),e(le,E0),e(E0,m7e),e(m7e,qDr),e(E0,jDr),e(E0,Tre),e(Tre,DDr),e(E0,GDr),e(le,ODr),e(le,C0),e(C0,f7e),e(f7e,VDr),e(C0,XDr),e(C0,Mre),e(Mre,zDr),e(C0,QDr),e(le,WDr),e(le,w0),e(w0,g7e),e(g7e,UDr),e(w0,HDr),e(w0,Ere),e(Ere,JDr),e(w0,YDr),e(le,ZDr),e(le,A0),e(A0,h7e),e(h7e,KDr),e(A0,eGr),e(A0,Cre),e(Cre,oGr),e(A0,rGr),e(le,tGr),e(le,L0),e(L0,u7e),e(u7e,aGr),e(L0,nGr),e(L0,wre),e(wre,sGr),e(L0,lGr),e(le,iGr),e(le,y0),e(y0,p7e),e(p7e,dGr),e(y0,cGr),e(y0,Are),e(Are,mGr),e(y0,fGr),e(le,gGr),e(le,x0),e(x0,_7e),e(_7e,hGr),e(x0,uGr),e(x0,Lre),e(Lre,pGr),e(x0,_Gr),e(le,bGr),e(le,$0),e($0,b7e),e(b7e,vGr),e($0,FGr),e($0,yre),e(yre,TGr),e($0,MGr),e(le,EGr),e(le,k0),e(k0,v7e),e(v7e,CGr),e(k0,wGr),e(k0,xre),e(xre,AGr),e(k0,LGr),e(jr,yGr),M(S0,jr,null),b(m,Rro,_),b(m,am,_),e(am,R0),e(R0,F7e),M(NS,F7e,null),e(am,xGr),e(am,T7e),e(T7e,$Gr),b(m,Pro,_),b(m,cr,_),M(qS,cr,null),e(cr,kGr),e(cr,nm),e(nm,SGr),e(nm,$re),e($re,RGr),e(nm,PGr),e(nm,kre),e(kre,BGr),e(nm,IGr),e(cr,NGr),e(cr,jS),e(jS,qGr),e(jS,M7e),e(M7e,jGr),e(jS,DGr),e(cr,GGr),e(cr,Ht),M(DS,Ht,null),e(Ht,OGr),e(Ht,E7e),e(E7e,VGr),e(Ht,XGr),e(Ht,sm),e(sm,zGr),e(sm,C7e),e(C7e,QGr),e(sm,WGr),e(sm,Sre),e(Sre,UGr),e(sm,HGr),e(Ht,JGr),M(P0,Ht,null),e(cr,YGr),e(cr,Dr),M(GS,Dr,null),e(Dr,ZGr),e(Dr,w7e),e(w7e,KGr),e(Dr,eOr),e(Dr,Sn),e(Sn,oOr),e(Sn,A7e),e(A7e,rOr),e(Sn,tOr),e(Sn,L7e),e(L7e,aOr),e(Sn,nOr),e(Sn,y7e),e(y7e,sOr),e(Sn,lOr),e(Dr,iOr),e(Dr,Me),e(Me,B0),e(B0,x7e),e(x7e,dOr),e(B0,cOr),e(B0,Rre),e(Rre,mOr),e(B0,fOr),e(Me,gOr),e(Me,I0),e(I0,$7e),e($7e,hOr),e(I0,uOr),e(I0,Pre),e(Pre,pOr),e(I0,_Or),e(Me,bOr),e(Me,N0),e(N0,k7e),e(k7e,vOr),e(N0,FOr),e(N0,Bre),e(Bre,TOr),e(N0,MOr),e(Me,EOr),e(Me,q0),e(q0,S7e),e(S7e,COr),e(q0,wOr),e(q0,Ire),e(Ire,AOr),e(q0,LOr),e(Me,yOr),e(Me,j0),e(j0,R7e),e(R7e,xOr),e(j0,$Or),e(j0,Nre),e(Nre,kOr),e(j0,SOr),e(Me,ROr),e(Me,D0),e(D0,P7e),e(P7e,POr),e(D0,BOr),e(D0,qre),e(qre,IOr),e(D0,NOr),e(Me,qOr),e(Me,G0),e(G0,B7e),e(B7e,jOr),e(G0,DOr),e(G0,jre),e(jre,GOr),e(G0,OOr),e(Me,VOr),e(Me,O0),e(O0,I7e),e(I7e,XOr),e(O0,zOr),e(O0,Dre),e(Dre,QOr),e(O0,WOr),e(Me,UOr),e(Me,V0),e(V0,N7e),e(N7e,HOr),e(V0,JOr),e(V0,Gre),e(Gre,YOr),e(V0,ZOr),e(Me,KOr),e(Me,X0),e(X0,q7e),e(q7e,eVr),e(X0,oVr),e(X0,Ore),e(Ore,rVr),e(X0,tVr),e(Me,aVr),e(Me,z0),e(z0,j7e),e(j7e,nVr),e(z0,sVr),e(z0,Vre),e(Vre,lVr),e(z0,iVr),e(Me,dVr),e(Me,Q0),e(Q0,D7e),e(D7e,cVr),e(Q0,mVr),e(Q0,Xre),e(Xre,fVr),e(Q0,gVr),e(Me,hVr),e(Me,W0),e(W0,G7e),e(G7e,uVr),e(W0,pVr),e(W0,zre),e(zre,_Vr),e(W0,bVr),e(Me,vVr),e(Me,U0),e(U0,O7e),e(O7e,FVr),e(U0,TVr),e(U0,Qre),e(Qre,MVr),e(U0,EVr),e(Dr,CVr),M(H0,Dr,null),b(m,Bro,_),b(m,lm,_),e(lm,J0),e(J0,V7e),M(OS,V7e,null),e(lm,wVr),e(lm,X7e),e(X7e,AVr),b(m,Iro,_),b(m,mr,_),M(VS,mr,null),e(mr,LVr),e(mr,im),e(im,yVr),e(im,Wre),e(Wre,xVr),e(im,$Vr),e(im,Ure),e(Ure,kVr),e(im,SVr),e(mr,RVr),e(mr,XS),e(XS,PVr),e(XS,z7e),e(z7e,BVr),e(XS,IVr),e(mr,NVr),e(mr,Jt),M(zS,Jt,null),e(Jt,qVr),e(Jt,Q7e),e(Q7e,jVr),e(Jt,DVr),e(Jt,dm),e(dm,GVr),e(dm,W7e),e(W7e,OVr),e(dm,VVr),e(dm,Hre),e(Hre,XVr),e(dm,zVr),e(Jt,QVr),M(Y0,Jt,null),e(mr,WVr),e(mr,Gr),M(QS,Gr,null),e(Gr,UVr),e(Gr,U7e),e(U7e,HVr),e(Gr,JVr),e(Gr,Rn),e(Rn,YVr),e(Rn,H7e),e(H7e,ZVr),e(Rn,KVr),e(Rn,J7e),e(J7e,eXr),e(Rn,oXr),e(Rn,Y7e),e(Y7e,rXr),e(Rn,tXr),e(Gr,aXr),e(Gr,Be),e(Be,Z0),e(Z0,Z7e),e(Z7e,nXr),e(Z0,sXr),e(Z0,Jre),e(Jre,lXr),e(Z0,iXr),e(Be,dXr),e(Be,K0),e(K0,K7e),e(K7e,cXr),e(K0,mXr),e(K0,Yre),e(Yre,fXr),e(K0,gXr),e(Be,hXr),e(Be,Al),e(Al,eLe),e(eLe,uXr),e(Al,pXr),e(Al,Zre),e(Zre,_Xr),e(Al,bXr),e(Al,Kre),e(Kre,vXr),e(Al,FXr),e(Be,TXr),e(Be,ew),e(ew,oLe),e(oLe,MXr),e(ew,EXr),e(ew,ete),e(ete,CXr),e(ew,wXr),e(Be,AXr),e(Be,ow),e(ow,rLe),e(rLe,LXr),e(ow,yXr),e(ow,ote),e(ote,xXr),e(ow,$Xr),e(Be,kXr),e(Be,rw),e(rw,tLe),e(tLe,SXr),e(rw,RXr),e(rw,rte),e(rte,PXr),e(rw,BXr),e(Be,IXr),e(Be,tw),e(tw,aLe),e(aLe,NXr),e(tw,qXr),e(tw,tte),e(tte,jXr),e(tw,DXr),e(Be,GXr),e(Be,aw),e(aw,nLe),e(nLe,OXr),e(aw,VXr),e(aw,ate),e(ate,XXr),e(aw,zXr),e(Be,QXr),e(Be,nw),e(nw,sLe),e(sLe,WXr),e(nw,UXr),e(nw,nte),e(nte,HXr),e(nw,JXr),e(Gr,YXr),M(sw,Gr,null),b(m,Nro,_),b(m,cm,_),e(cm,lw),e(lw,lLe),M(WS,lLe,null),e(cm,ZXr),e(cm,iLe),e(iLe,KXr),b(m,qro,_),b(m,fr,_),M(US,fr,null),e(fr,ezr),e(fr,mm),e(mm,ozr),e(mm,ste),e(ste,rzr),e(mm,tzr),e(mm,lte),e(lte,azr),e(mm,nzr),e(fr,szr),e(fr,HS),e(HS,lzr),e(HS,dLe),e(dLe,izr),e(HS,dzr),e(fr,czr),e(fr,Yt),M(JS,Yt,null),e(Yt,mzr),e(Yt,cLe),e(cLe,fzr),e(Yt,gzr),e(Yt,fm),e(fm,hzr),e(fm,mLe),e(mLe,uzr),e(fm,pzr),e(fm,ite),e(ite,_zr),e(fm,bzr),e(Yt,vzr),M(iw,Yt,null),e(fr,Fzr),e(fr,Or),M(YS,Or,null),e(Or,Tzr),e(Or,fLe),e(fLe,Mzr),e(Or,Ezr),e(Or,Pn),e(Pn,Czr),e(Pn,gLe),e(gLe,wzr),e(Pn,Azr),e(Pn,hLe),e(hLe,Lzr),e(Pn,yzr),e(Pn,uLe),e(uLe,xzr),e(Pn,$zr),e(Or,kzr),e(Or,gm),e(gm,dw),e(dw,pLe),e(pLe,Szr),e(dw,Rzr),e(dw,dte),e(dte,Pzr),e(dw,Bzr),e(gm,Izr),e(gm,cw),e(cw,_Le),e(_Le,Nzr),e(cw,qzr),e(cw,cte),e(cte,jzr),e(cw,Dzr),e(gm,Gzr),e(gm,mw),e(mw,bLe),e(bLe,Ozr),e(mw,Vzr),e(mw,mte),e(mte,Xzr),e(mw,zzr),e(Or,Qzr),M(fw,Or,null),b(m,jro,_),b(m,hm,_),e(hm,gw),e(gw,vLe),M(ZS,vLe,null),e(hm,Wzr),e(hm,FLe),e(FLe,Uzr),b(m,Dro,_),b(m,gr,_),M(KS,gr,null),e(gr,Hzr),e(gr,um),e(um,Jzr),e(um,fte),e(fte,Yzr),e(um,Zzr),e(um,gte),e(gte,Kzr),e(um,eQr),e(gr,oQr),e(gr,eR),e(eR,rQr),e(eR,TLe),e(TLe,tQr),e(eR,aQr),e(gr,nQr),e(gr,Zt),M(oR,Zt,null),e(Zt,sQr),e(Zt,MLe),e(MLe,lQr),e(Zt,iQr),e(Zt,pm),e(pm,dQr),e(pm,ELe),e(ELe,cQr),e(pm,mQr),e(pm,hte),e(hte,fQr),e(pm,gQr),e(Zt,hQr),M(hw,Zt,null),e(gr,uQr),e(gr,Vr),M(rR,Vr,null),e(Vr,pQr),e(Vr,CLe),e(CLe,_Qr),e(Vr,bQr),e(Vr,Bn),e(Bn,vQr),e(Bn,wLe),e(wLe,FQr),e(Bn,TQr),e(Bn,ALe),e(ALe,MQr),e(Bn,EQr),e(Bn,LLe),e(LLe,CQr),e(Bn,wQr),e(Vr,AQr),e(Vr,ge),e(ge,uw),e(uw,yLe),e(yLe,LQr),e(uw,yQr),e(uw,ute),e(ute,xQr),e(uw,$Qr),e(ge,kQr),e(ge,pw),e(pw,xLe),e(xLe,SQr),e(pw,RQr),e(pw,pte),e(pte,PQr),e(pw,BQr),e(ge,IQr),e(ge,_w),e(_w,$Le),e($Le,NQr),e(_w,qQr),e(_w,_te),e(_te,jQr),e(_w,DQr),e(ge,GQr),e(ge,bw),e(bw,kLe),e(kLe,OQr),e(bw,VQr),e(bw,bte),e(bte,XQr),e(bw,zQr),e(ge,QQr),e(ge,vw),e(vw,SLe),e(SLe,WQr),e(vw,UQr),e(vw,vte),e(vte,HQr),e(vw,JQr),e(ge,YQr),e(ge,Fw),e(Fw,RLe),e(RLe,ZQr),e(Fw,KQr),e(Fw,Fte),e(Fte,eWr),e(Fw,oWr),e(ge,rWr),e(ge,Tw),e(Tw,PLe),e(PLe,tWr),e(Tw,aWr),e(Tw,Tte),e(Tte,nWr),e(Tw,sWr),e(ge,lWr),e(ge,Mw),e(Mw,BLe),e(BLe,iWr),e(Mw,dWr),e(Mw,Mte),e(Mte,cWr),e(Mw,mWr),e(ge,fWr),e(ge,Ew),e(Ew,ILe),e(ILe,gWr),e(Ew,hWr),e(Ew,Ete),e(Ete,uWr),e(Ew,pWr),e(ge,_Wr),e(ge,Cw),e(Cw,NLe),e(NLe,bWr),e(Cw,vWr),e(Cw,Cte),e(Cte,FWr),e(Cw,TWr),e(ge,MWr),e(ge,ww),e(ww,qLe),e(qLe,EWr),e(ww,CWr),e(ww,wte),e(wte,wWr),e(ww,AWr),e(ge,LWr),e(ge,Aw),e(Aw,jLe),e(jLe,yWr),e(Aw,xWr),e(Aw,Ate),e(Ate,$Wr),e(Aw,kWr),e(ge,SWr),e(ge,Lw),e(Lw,DLe),e(DLe,RWr),e(Lw,PWr),e(Lw,Lte),e(Lte,BWr),e(Lw,IWr),e(ge,NWr),e(ge,yw),e(yw,GLe),e(GLe,qWr),e(yw,jWr),e(yw,yte),e(yte,DWr),e(yw,GWr),e(ge,OWr),e(ge,xw),e(xw,OLe),e(OLe,VWr),e(xw,XWr),e(xw,xte),e(xte,zWr),e(xw,QWr),e(ge,WWr),e(ge,$w),e($w,VLe),e(VLe,UWr),e($w,HWr),e($w,$te),e($te,JWr),e($w,YWr),e(ge,ZWr),e(ge,kw),e(kw,XLe),e(XLe,KWr),e(kw,eUr),e(kw,kte),e(kte,oUr),e(kw,rUr),e(ge,tUr),e(ge,Sw),e(Sw,zLe),e(zLe,aUr),e(Sw,nUr),e(Sw,Ste),e(Ste,sUr),e(Sw,lUr),e(ge,iUr),e(ge,Rw),e(Rw,QLe),e(QLe,dUr),e(Rw,cUr),e(Rw,Rte),e(Rte,mUr),e(Rw,fUr),e(ge,gUr),e(ge,Pw),e(Pw,WLe),e(WLe,hUr),e(Pw,uUr),e(Pw,Pte),e(Pte,pUr),e(Pw,_Ur),e(Vr,bUr),M(Bw,Vr,null),b(m,Gro,_),b(m,_m,_),e(_m,Iw),e(Iw,ULe),M(tR,ULe,null),e(_m,vUr),e(_m,HLe),e(HLe,FUr),b(m,Oro,_),b(m,hr,_),M(aR,hr,null),e(hr,TUr),e(hr,bm),e(bm,MUr),e(bm,Bte),e(Bte,EUr),e(bm,CUr),e(bm,Ite),e(Ite,wUr),e(bm,AUr),e(hr,LUr),e(hr,nR),e(nR,yUr),e(nR,JLe),e(JLe,xUr),e(nR,$Ur),e(hr,kUr),e(hr,Kt),M(sR,Kt,null),e(Kt,SUr),e(Kt,YLe),e(YLe,RUr),e(Kt,PUr),e(Kt,vm),e(vm,BUr),e(vm,ZLe),e(ZLe,IUr),e(vm,NUr),e(vm,Nte),e(Nte,qUr),e(vm,jUr),e(Kt,DUr),M(Nw,Kt,null),e(hr,GUr),e(hr,Xr),M(lR,Xr,null),e(Xr,OUr),e(Xr,KLe),e(KLe,VUr),e(Xr,XUr),e(Xr,In),e(In,zUr),e(In,e8e),e(e8e,QUr),e(In,WUr),e(In,o8e),e(o8e,UUr),e(In,HUr),e(In,r8e),e(r8e,JUr),e(In,YUr),e(Xr,ZUr),e(Xr,ye),e(ye,qw),e(qw,t8e),e(t8e,KUr),e(qw,eHr),e(qw,qte),e(qte,oHr),e(qw,rHr),e(ye,tHr),e(ye,jw),e(jw,a8e),e(a8e,aHr),e(jw,nHr),e(jw,jte),e(jte,sHr),e(jw,lHr),e(ye,iHr),e(ye,Dw),e(Dw,n8e),e(n8e,dHr),e(Dw,cHr),e(Dw,Dte),e(Dte,mHr),e(Dw,fHr),e(ye,gHr),e(ye,Gw),e(Gw,s8e),e(s8e,hHr),e(Gw,uHr),e(Gw,Gte),e(Gte,pHr),e(Gw,_Hr),e(ye,bHr),e(ye,Ow),e(Ow,l8e),e(l8e,vHr),e(Ow,FHr),e(Ow,Ote),e(Ote,THr),e(Ow,MHr),e(ye,EHr),e(ye,Vw),e(Vw,i8e),e(i8e,CHr),e(Vw,wHr),e(Vw,Vte),e(Vte,AHr),e(Vw,LHr),e(ye,yHr),e(ye,Xw),e(Xw,d8e),e(d8e,xHr),e(Xw,$Hr),e(Xw,Xte),e(Xte,kHr),e(Xw,SHr),e(ye,RHr),e(ye,zw),e(zw,c8e),e(c8e,PHr),e(zw,BHr),e(zw,zte),e(zte,IHr),e(zw,NHr),e(ye,qHr),e(ye,Qw),e(Qw,m8e),e(m8e,jHr),e(Qw,DHr),e(Qw,Qte),e(Qte,GHr),e(Qw,OHr),e(ye,VHr),e(ye,Ww),e(Ww,f8e),e(f8e,XHr),e(Ww,zHr),e(Ww,Wte),e(Wte,QHr),e(Ww,WHr),e(Xr,UHr),M(Uw,Xr,null),b(m,Vro,_),b(m,Fm,_),e(Fm,Hw),e(Hw,g8e),M(iR,g8e,null),e(Fm,HHr),e(Fm,h8e),e(h8e,JHr),b(m,Xro,_),b(m,ur,_),M(dR,ur,null),e(ur,YHr),e(ur,Tm),e(Tm,ZHr),e(Tm,Ute),e(Ute,KHr),e(Tm,eJr),e(Tm,Hte),e(Hte,oJr),e(Tm,rJr),e(ur,tJr),e(ur,cR),e(cR,aJr),e(cR,u8e),e(u8e,nJr),e(cR,sJr),e(ur,lJr),e(ur,ea),M(mR,ea,null),e(ea,iJr),e(ea,p8e),e(p8e,dJr),e(ea,cJr),e(ea,Mm),e(Mm,mJr),e(Mm,_8e),e(_8e,fJr),e(Mm,gJr),e(Mm,Jte),e(Jte,hJr),e(Mm,uJr),e(ea,pJr),M(Jw,ea,null),e(ur,_Jr),e(ur,zr),M(fR,zr,null),e(zr,bJr),e(zr,b8e),e(b8e,vJr),e(zr,FJr),e(zr,Nn),e(Nn,TJr),e(Nn,v8e),e(v8e,MJr),e(Nn,EJr),e(Nn,F8e),e(F8e,CJr),e(Nn,wJr),e(Nn,T8e),e(T8e,AJr),e(Nn,LJr),e(zr,yJr),e(zr,re),e(re,Yw),e(Yw,M8e),e(M8e,xJr),e(Yw,$Jr),e(Yw,Yte),e(Yte,kJr),e(Yw,SJr),e(re,RJr),e(re,Zw),e(Zw,E8e),e(E8e,PJr),e(Zw,BJr),e(Zw,Zte),e(Zte,IJr),e(Zw,NJr),e(re,qJr),e(re,Kw),e(Kw,C8e),e(C8e,jJr),e(Kw,DJr),e(Kw,Kte),e(Kte,GJr),e(Kw,OJr),e(re,VJr),e(re,eA),e(eA,w8e),e(w8e,XJr),e(eA,zJr),e(eA,eae),e(eae,QJr),e(eA,WJr),e(re,UJr),e(re,oA),e(oA,A8e),e(A8e,HJr),e(oA,JJr),e(oA,oae),e(oae,YJr),e(oA,ZJr),e(re,KJr),e(re,rA),e(rA,L8e),e(L8e,eYr),e(rA,oYr),e(rA,rae),e(rae,rYr),e(rA,tYr),e(re,aYr),e(re,tA),e(tA,y8e),e(y8e,nYr),e(tA,sYr),e(tA,tae),e(tae,lYr),e(tA,iYr),e(re,dYr),e(re,aA),e(aA,x8e),e(x8e,cYr),e(aA,mYr),e(aA,aae),e(aae,fYr),e(aA,gYr),e(re,hYr),e(re,nA),e(nA,$8e),e($8e,uYr),e(nA,pYr),e(nA,nae),e(nae,_Yr),e(nA,bYr),e(re,vYr),e(re,sA),e(sA,k8e),e(k8e,FYr),e(sA,TYr),e(sA,sae),e(sae,MYr),e(sA,EYr),e(re,CYr),e(re,lA),e(lA,S8e),e(S8e,wYr),e(lA,AYr),e(lA,lae),e(lae,LYr),e(lA,yYr),e(re,xYr),e(re,iA),e(iA,R8e),e(R8e,$Yr),e(iA,kYr),e(iA,iae),e(iae,SYr),e(iA,RYr),e(re,PYr),e(re,dA),e(dA,P8e),e(P8e,BYr),e(dA,IYr),e(dA,dae),e(dae,NYr),e(dA,qYr),e(re,jYr),e(re,cA),e(cA,B8e),e(B8e,DYr),e(cA,GYr),e(cA,cae),e(cae,OYr),e(cA,VYr),e(re,XYr),e(re,mA),e(mA,I8e),e(I8e,zYr),e(mA,QYr),e(mA,mae),e(mae,WYr),e(mA,UYr),e(re,HYr),e(re,fA),e(fA,N8e),e(N8e,JYr),e(fA,YYr),e(fA,fae),e(fae,ZYr),e(fA,KYr),e(re,eZr),e(re,gA),e(gA,q8e),e(q8e,oZr),e(gA,rZr),e(gA,gae),e(gae,tZr),e(gA,aZr),e(re,nZr),e(re,hA),e(hA,j8e),e(j8e,sZr),e(hA,lZr),e(hA,hae),e(hae,iZr),e(hA,dZr),e(re,cZr),e(re,uA),e(uA,D8e),e(D8e,mZr),e(uA,fZr),e(uA,uae),e(uae,gZr),e(uA,hZr),e(re,uZr),e(re,pA),e(pA,G8e),e(G8e,pZr),e(pA,_Zr),e(pA,pae),e(pae,bZr),e(pA,vZr),e(re,FZr),e(re,_A),e(_A,O8e),e(O8e,TZr),e(_A,MZr),e(_A,_ae),e(_ae,EZr),e(_A,CZr),e(re,wZr),e(re,bA),e(bA,V8e),e(V8e,AZr),e(bA,LZr),e(bA,bae),e(bae,yZr),e(bA,xZr),e(re,$Zr),e(re,vA),e(vA,X8e),e(X8e,kZr),e(vA,SZr),e(vA,vae),e(vae,RZr),e(vA,PZr),e(re,BZr),e(re,FA),e(FA,z8e),e(z8e,IZr),e(FA,NZr),e(FA,Fae),e(Fae,qZr),e(FA,jZr),e(re,DZr),e(re,TA),e(TA,Q8e),e(Q8e,GZr),e(TA,OZr),e(TA,Tae),e(Tae,VZr),e(TA,XZr),e(re,zZr),e(re,MA),e(MA,W8e),e(W8e,QZr),e(MA,WZr),e(MA,Mae),e(Mae,UZr),e(MA,HZr),e(re,JZr),e(re,EA),e(EA,U8e),e(U8e,YZr),e(EA,ZZr),e(EA,Eae),e(Eae,KZr),e(EA,eKr),e(zr,oKr),M(CA,zr,null),b(m,zro,_),b(m,Em,_),e(Em,wA),e(wA,H8e),M(gR,H8e,null),e(Em,rKr),e(Em,J8e),e(J8e,tKr),b(m,Qro,_),b(m,pr,_),M(hR,pr,null),e(pr,aKr),e(pr,Cm),e(Cm,nKr),e(Cm,Cae),e(Cae,sKr),e(Cm,lKr),e(Cm,wae),e(wae,iKr),e(Cm,dKr),e(pr,cKr),e(pr,uR),e(uR,mKr),e(uR,Y8e),e(Y8e,fKr),e(uR,gKr),e(pr,hKr),e(pr,oa),M(pR,oa,null),e(oa,uKr),e(oa,Z8e),e(Z8e,pKr),e(oa,_Kr),e(oa,wm),e(wm,bKr),e(wm,K8e),e(K8e,vKr),e(wm,FKr),e(wm,Aae),e(Aae,TKr),e(wm,MKr),e(oa,EKr),M(AA,oa,null),e(pr,CKr),e(pr,Qr),M(_R,Qr,null),e(Qr,wKr),e(Qr,eye),e(eye,AKr),e(Qr,LKr),e(Qr,qn),e(qn,yKr),e(qn,oye),e(oye,xKr),e(qn,$Kr),e(qn,rye),e(rye,kKr),e(qn,SKr),e(qn,tye),e(tye,RKr),e(qn,PKr),e(Qr,BKr),e(Qr,ve),e(ve,LA),e(LA,aye),e(aye,IKr),e(LA,NKr),e(LA,Lae),e(Lae,qKr),e(LA,jKr),e(ve,DKr),e(ve,yA),e(yA,nye),e(nye,GKr),e(yA,OKr),e(yA,yae),e(yae,VKr),e(yA,XKr),e(ve,zKr),e(ve,xA),e(xA,sye),e(sye,QKr),e(xA,WKr),e(xA,xae),e(xae,UKr),e(xA,HKr),e(ve,JKr),e(ve,$A),e($A,lye),e(lye,YKr),e($A,ZKr),e($A,$ae),e($ae,KKr),e($A,eet),e(ve,oet),e(ve,kA),e(kA,iye),e(iye,ret),e(kA,tet),e(kA,kae),e(kae,aet),e(kA,net),e(ve,set),e(ve,SA),e(SA,dye),e(dye,iet),e(SA,det),e(SA,Sae),e(Sae,cet),e(SA,met),e(ve,fet),e(ve,RA),e(RA,cye),e(cye,get),e(RA,het),e(RA,Rae),e(Rae,uet),e(RA,pet),e(ve,_et),e(ve,PA),e(PA,mye),e(mye,bet),e(PA,vet),e(PA,Pae),e(Pae,Fet),e(PA,Tet),e(ve,Met),e(ve,BA),e(BA,fye),e(fye,Eet),e(BA,Cet),e(BA,Bae),e(Bae,wet),e(BA,Aet),e(ve,Let),e(ve,IA),e(IA,gye),e(gye,yet),e(IA,xet),e(IA,Iae),e(Iae,$et),e(IA,ket),e(ve,Set),e(ve,NA),e(NA,hye),e(hye,Ret),e(NA,Pet),e(NA,Nae),e(Nae,Bet),e(NA,Iet),e(ve,Net),e(ve,qA),e(qA,uye),e(uye,qet),e(qA,jet),e(qA,qae),e(qae,Det),e(qA,Get),e(ve,Oet),e(ve,jA),e(jA,pye),e(pye,Vet),e(jA,Xet),e(jA,jae),e(jae,zet),e(jA,Qet),e(ve,Wet),e(ve,DA),e(DA,_ye),e(_ye,Uet),e(DA,Het),e(DA,Dae),e(Dae,Jet),e(DA,Yet),e(ve,Zet),e(ve,GA),e(GA,bye),e(bye,Ket),e(GA,eot),e(GA,Gae),e(Gae,oot),e(GA,rot),e(ve,tot),e(ve,OA),e(OA,vye),e(vye,aot),e(OA,not),e(OA,Oae),e(Oae,sot),e(OA,lot),e(ve,iot),e(ve,VA),e(VA,Fye),e(Fye,dot),e(VA,cot),e(VA,Vae),e(Vae,mot),e(VA,fot),e(Qr,got),M(XA,Qr,null),b(m,Wro,_),b(m,Am,_),e(Am,zA),e(zA,Tye),M(bR,Tye,null),e(Am,hot),e(Am,Mye),e(Mye,uot),b(m,Uro,_),b(m,_r,_),M(vR,_r,null),e(_r,pot),e(_r,Lm),e(Lm,_ot),e(Lm,Xae),e(Xae,bot),e(Lm,vot),e(Lm,zae),e(zae,Fot),e(Lm,Tot),e(_r,Mot),e(_r,FR),e(FR,Eot),e(FR,Eye),e(Eye,Cot),e(FR,wot),e(_r,Aot),e(_r,ra),M(TR,ra,null),e(ra,Lot),e(ra,Cye),e(Cye,yot),e(ra,xot),e(ra,ym),e(ym,$ot),e(ym,wye),e(wye,kot),e(ym,Sot),e(ym,Qae),e(Qae,Rot),e(ym,Pot),e(ra,Bot),M(QA,ra,null),e(_r,Iot),e(_r,Wr),M(MR,Wr,null),e(Wr,Not),e(Wr,Aye),e(Aye,qot),e(Wr,jot),e(Wr,jn),e(jn,Dot),e(jn,Lye),e(Lye,Got),e(jn,Oot),e(jn,yye),e(yye,Vot),e(jn,Xot),e(jn,xye),e(xye,zot),e(jn,Qot),e(Wr,Wot),e(Wr,ER),e(ER,WA),e(WA,$ye),e($ye,Uot),e(WA,Hot),e(WA,Wae),e(Wae,Jot),e(WA,Yot),e(ER,Zot),e(ER,UA),e(UA,kye),e(kye,Kot),e(UA,ert),e(UA,Uae),e(Uae,ort),e(UA,rrt),e(Wr,trt),M(HA,Wr,null),b(m,Hro,_),b(m,xm,_),e(xm,JA),e(JA,Sye),M(CR,Sye,null),e(xm,art),e(xm,Rye),e(Rye,nrt),b(m,Jro,_),b(m,br,_),M(wR,br,null),e(br,srt),e(br,$m),e($m,lrt),e($m,Hae),e(Hae,irt),e($m,drt),e($m,Jae),e(Jae,crt),e($m,mrt),e(br,frt),e(br,AR),e(AR,grt),e(AR,Pye),e(Pye,hrt),e(AR,urt),e(br,prt),e(br,ta),M(LR,ta,null),e(ta,_rt),e(ta,Bye),e(Bye,brt),e(ta,vrt),e(ta,km),e(km,Frt),e(km,Iye),e(Iye,Trt),e(km,Mrt),e(km,Yae),e(Yae,Ert),e(km,Crt),e(ta,wrt),M(YA,ta,null),e(br,Art),e(br,Ur),M(yR,Ur,null),e(Ur,Lrt),e(Ur,Nye),e(Nye,yrt),e(Ur,xrt),e(Ur,Dn),e(Dn,$rt),e(Dn,qye),e(qye,krt),e(Dn,Srt),e(Dn,jye),e(jye,Rrt),e(Dn,Prt),e(Dn,Dye),e(Dye,Brt),e(Dn,Irt),e(Ur,Nrt),e(Ur,Gye),e(Gye,ZA),e(ZA,Oye),e(Oye,qrt),e(ZA,jrt),e(ZA,Zae),e(Zae,Drt),e(ZA,Grt),e(Ur,Ort),M(KA,Ur,null),b(m,Yro,_),b(m,Sm,_),e(Sm,e6),e(e6,Vye),M(xR,Vye,null),e(Sm,Vrt),e(Sm,Xye),e(Xye,Xrt),b(m,Zro,_),b(m,vr,_),M($R,vr,null),e(vr,zrt),e(vr,Rm),e(Rm,Qrt),e(Rm,Kae),e(Kae,Wrt),e(Rm,Urt),e(Rm,ene),e(ene,Hrt),e(Rm,Jrt),e(vr,Yrt),e(vr,kR),e(kR,Zrt),e(kR,zye),e(zye,Krt),e(kR,ett),e(vr,ott),e(vr,aa),M(SR,aa,null),e(aa,rtt),e(aa,Qye),e(Qye,ttt),e(aa,att),e(aa,Pm),e(Pm,ntt),e(Pm,Wye),e(Wye,stt),e(Pm,ltt),e(Pm,one),e(one,itt),e(Pm,dtt),e(aa,ctt),M(o6,aa,null),e(vr,mtt),e(vr,Hr),M(RR,Hr,null),e(Hr,ftt),e(Hr,Uye),e(Uye,gtt),e(Hr,htt),e(Hr,Gn),e(Gn,utt),e(Gn,Hye),e(Hye,ptt),e(Gn,_tt),e(Gn,Jye),e(Jye,btt),e(Gn,vtt),e(Gn,Yye),e(Yye,Ftt),e(Gn,Ttt),e(Hr,Mtt),e(Hr,Zye),e(Zye,r6),e(r6,Kye),e(Kye,Ett),e(r6,Ctt),e(r6,rne),e(rne,wtt),e(r6,Att),e(Hr,Ltt),M(t6,Hr,null),b(m,Kro,_),b(m,Bm,_),e(Bm,a6),e(a6,e9e),M(PR,e9e,null),e(Bm,ytt),e(Bm,o9e),e(o9e,xtt),b(m,eto,_),b(m,Fr,_),M(BR,Fr,null),e(Fr,$tt),e(Fr,Im),e(Im,ktt),e(Im,tne),e(tne,Stt),e(Im,Rtt),e(Im,ane),e(ane,Ptt),e(Im,Btt),e(Fr,Itt),e(Fr,IR),e(IR,Ntt),e(IR,r9e),e(r9e,qtt),e(IR,jtt),e(Fr,Dtt),e(Fr,na),M(NR,na,null),e(na,Gtt),e(na,t9e),e(t9e,Ott),e(na,Vtt),e(na,Nm),e(Nm,Xtt),e(Nm,a9e),e(a9e,ztt),e(Nm,Qtt),e(Nm,nne),e(nne,Wtt),e(Nm,Utt),e(na,Htt),M(n6,na,null),e(Fr,Jtt),e(Fr,Jr),M(qR,Jr,null),e(Jr,Ytt),e(Jr,n9e),e(n9e,Ztt),e(Jr,Ktt),e(Jr,On),e(On,eat),e(On,s9e),e(s9e,oat),e(On,rat),e(On,l9e),e(l9e,tat),e(On,aat),e(On,i9e),e(i9e,nat),e(On,sat),e(Jr,lat),e(Jr,ce),e(ce,s6),e(s6,d9e),e(d9e,iat),e(s6,dat),e(s6,sne),e(sne,cat),e(s6,mat),e(ce,fat),e(ce,l6),e(l6,c9e),e(c9e,gat),e(l6,hat),e(l6,lne),e(lne,uat),e(l6,pat),e(ce,_at),e(ce,i6),e(i6,m9e),e(m9e,bat),e(i6,vat),e(i6,ine),e(ine,Fat),e(i6,Tat),e(ce,Mat),e(ce,d6),e(d6,f9e),e(f9e,Eat),e(d6,Cat),e(d6,dne),e(dne,wat),e(d6,Aat),e(ce,Lat),e(ce,c6),e(c6,g9e),e(g9e,yat),e(c6,xat),e(c6,cne),e(cne,$at),e(c6,kat),e(ce,Sat),e(ce,m6),e(m6,h9e),e(h9e,Rat),e(m6,Pat),e(m6,mne),e(mne,Bat),e(m6,Iat),e(ce,Nat),e(ce,f6),e(f6,u9e),e(u9e,qat),e(f6,jat),e(f6,fne),e(fne,Dat),e(f6,Gat),e(ce,Oat),e(ce,g6),e(g6,p9e),e(p9e,Vat),e(g6,Xat),e(g6,gne),e(gne,zat),e(g6,Qat),e(ce,Wat),e(ce,h6),e(h6,_9e),e(_9e,Uat),e(h6,Hat),e(h6,hne),e(hne,Jat),e(h6,Yat),e(ce,Zat),e(ce,u6),e(u6,b9e),e(b9e,Kat),e(u6,ent),e(u6,une),e(une,ont),e(u6,rnt),e(ce,tnt),e(ce,p6),e(p6,v9e),e(v9e,ant),e(p6,nnt),e(p6,pne),e(pne,snt),e(p6,lnt),e(ce,int),e(ce,_6),e(_6,F9e),e(F9e,dnt),e(_6,cnt),e(_6,_ne),e(_ne,mnt),e(_6,fnt),e(ce,gnt),e(ce,b6),e(b6,T9e),e(T9e,hnt),e(b6,unt),e(b6,bne),e(bne,pnt),e(b6,_nt),e(ce,bnt),e(ce,v6),e(v6,M9e),e(M9e,vnt),e(v6,Fnt),e(v6,vne),e(vne,Tnt),e(v6,Mnt),e(ce,Ent),e(ce,F6),e(F6,E9e),e(E9e,Cnt),e(F6,wnt),e(F6,Fne),e(Fne,Ant),e(F6,Lnt),e(ce,ynt),e(ce,T6),e(T6,C9e),e(C9e,xnt),e(T6,$nt),e(T6,Tne),e(Tne,knt),e(T6,Snt),e(ce,Rnt),e(ce,M6),e(M6,w9e),e(w9e,Pnt),e(M6,Bnt),e(M6,Mne),e(Mne,Int),e(M6,Nnt),e(ce,qnt),e(ce,E6),e(E6,A9e),e(A9e,jnt),e(E6,Dnt),e(E6,Ene),e(Ene,Gnt),e(E6,Ont),e(ce,Vnt),e(ce,C6),e(C6,L9e),e(L9e,Xnt),e(C6,znt),e(C6,Cne),e(Cne,Qnt),e(C6,Wnt),e(ce,Unt),e(ce,w6),e(w6,y9e),e(y9e,Hnt),e(w6,Jnt),e(w6,wne),e(wne,Ynt),e(w6,Znt),e(ce,Knt),e(ce,A6),e(A6,x9e),e(x9e,est),e(A6,ost),e(A6,Ane),e(Ane,rst),e(A6,tst),e(Jr,ast),M(L6,Jr,null),b(m,oto,_),b(m,qm,_),e(qm,y6),e(y6,$9e),M(jR,$9e,null),e(qm,nst),e(qm,k9e),e(k9e,sst),b(m,rto,_),b(m,Tr,_),M(DR,Tr,null),e(Tr,lst),e(Tr,jm),e(jm,ist),e(jm,Lne),e(Lne,dst),e(jm,cst),e(jm,yne),e(yne,mst),e(jm,fst),e(Tr,gst),e(Tr,GR),e(GR,hst),e(GR,S9e),e(S9e,ust),e(GR,pst),e(Tr,_st),e(Tr,sa),M(OR,sa,null),e(sa,bst),e(sa,R9e),e(R9e,vst),e(sa,Fst),e(sa,Dm),e(Dm,Tst),e(Dm,P9e),e(P9e,Mst),e(Dm,Est),e(Dm,xne),e(xne,Cst),e(Dm,wst),e(sa,Ast),M(x6,sa,null),e(Tr,Lst),e(Tr,Yr),M(VR,Yr,null),e(Yr,yst),e(Yr,B9e),e(B9e,xst),e(Yr,$st),e(Yr,Vn),e(Vn,kst),e(Vn,I9e),e(I9e,Sst),e(Vn,Rst),e(Vn,N9e),e(N9e,Pst),e(Vn,Bst),e(Vn,q9e),e(q9e,Ist),e(Vn,Nst),e(Yr,qst),e(Yr,me),e(me,$6),e($6,j9e),e(j9e,jst),e($6,Dst),e($6,$ne),e($ne,Gst),e($6,Ost),e(me,Vst),e(me,k6),e(k6,D9e),e(D9e,Xst),e(k6,zst),e(k6,kne),e(kne,Qst),e(k6,Wst),e(me,Ust),e(me,S6),e(S6,G9e),e(G9e,Hst),e(S6,Jst),e(S6,Sne),e(Sne,Yst),e(S6,Zst),e(me,Kst),e(me,R6),e(R6,O9e),e(O9e,elt),e(R6,olt),e(R6,Rne),e(Rne,rlt),e(R6,tlt),e(me,alt),e(me,P6),e(P6,V9e),e(V9e,nlt),e(P6,slt),e(P6,Pne),e(Pne,llt),e(P6,ilt),e(me,dlt),e(me,B6),e(B6,X9e),e(X9e,clt),e(B6,mlt),e(B6,Bne),e(Bne,flt),e(B6,glt),e(me,hlt),e(me,I6),e(I6,z9e),e(z9e,ult),e(I6,plt),e(I6,Ine),e(Ine,_lt),e(I6,blt),e(me,vlt),e(me,N6),e(N6,Q9e),e(Q9e,Flt),e(N6,Tlt),e(N6,Nne),e(Nne,Mlt),e(N6,Elt),e(me,Clt),e(me,q6),e(q6,W9e),e(W9e,wlt),e(q6,Alt),e(q6,qne),e(qne,Llt),e(q6,ylt),e(me,xlt),e(me,j6),e(j6,U9e),e(U9e,$lt),e(j6,klt),e(j6,jne),e(jne,Slt),e(j6,Rlt),e(me,Plt),e(me,D6),e(D6,H9e),e(H9e,Blt),e(D6,Ilt),e(D6,Dne),e(Dne,Nlt),e(D6,qlt),e(me,jlt),e(me,G6),e(G6,J9e),e(J9e,Dlt),e(G6,Glt),e(G6,Gne),e(Gne,Olt),e(G6,Vlt),e(me,Xlt),e(me,O6),e(O6,Y9e),e(Y9e,zlt),e(O6,Qlt),e(O6,One),e(One,Wlt),e(O6,Ult),e(me,Hlt),e(me,V6),e(V6,Z9e),e(Z9e,Jlt),e(V6,Ylt),e(V6,Vne),e(Vne,Zlt),e(V6,Klt),e(me,eit),e(me,X6),e(X6,K9e),e(K9e,oit),e(X6,rit),e(X6,Xne),e(Xne,tit),e(X6,ait),e(me,nit),e(me,z6),e(z6,exe),e(exe,sit),e(z6,lit),e(z6,zne),e(zne,iit),e(z6,dit),e(me,cit),e(me,Q6),e(Q6,oxe),e(oxe,mit),e(Q6,fit),e(Q6,Qne),e(Qne,git),e(Q6,hit),e(me,uit),e(me,W6),e(W6,rxe),e(rxe,pit),e(W6,_it),e(W6,Wne),e(Wne,bit),e(W6,vit),e(me,Fit),e(me,U6),e(U6,txe),e(txe,Tit),e(U6,Mit),e(U6,Une),e(Une,Eit),e(U6,Cit),e(me,wit),e(me,H6),e(H6,axe),e(axe,Ait),e(H6,Lit),e(H6,Hne),e(Hne,yit),e(H6,xit),e(me,$it),e(me,J6),e(J6,nxe),e(nxe,kit),e(J6,Sit),e(J6,Jne),e(Jne,Rit),e(J6,Pit),e(Yr,Bit),M(Y6,Yr,null),b(m,tto,_),b(m,Gm,_),e(Gm,Z6),e(Z6,sxe),M(XR,sxe,null),e(Gm,Iit),e(Gm,lxe),e(lxe,Nit),b(m,ato,_),b(m,Mr,_),M(zR,Mr,null),e(Mr,qit),e(Mr,Om),e(Om,jit),e(Om,Yne),e(Yne,Dit),e(Om,Git),e(Om,Zne),e(Zne,Oit),e(Om,Vit),e(Mr,Xit),e(Mr,QR),e(QR,zit),e(QR,ixe),e(ixe,Qit),e(QR,Wit),e(Mr,Uit),e(Mr,la),M(WR,la,null),e(la,Hit),e(la,dxe),e(dxe,Jit),e(la,Yit),e(la,Vm),e(Vm,Zit),e(Vm,cxe),e(cxe,Kit),e(Vm,edt),e(Vm,Kne),e(Kne,odt),e(Vm,rdt),e(la,tdt),M(K6,la,null),e(Mr,adt),e(Mr,Zr),M(UR,Zr,null),e(Zr,ndt),e(Zr,mxe),e(mxe,sdt),e(Zr,ldt),e(Zr,Xn),e(Xn,idt),e(Xn,fxe),e(fxe,ddt),e(Xn,cdt),e(Xn,gxe),e(gxe,mdt),e(Xn,fdt),e(Xn,hxe),e(hxe,gdt),e(Xn,hdt),e(Zr,udt),e(Zr,uxe),e(uxe,e7),e(e7,pxe),e(pxe,pdt),e(e7,_dt),e(e7,ese),e(ese,bdt),e(e7,vdt),e(Zr,Fdt),M(o7,Zr,null),b(m,nto,_),b(m,Xm,_),e(Xm,r7),e(r7,_xe),M(HR,_xe,null),e(Xm,Tdt),e(Xm,bxe),e(bxe,Mdt),b(m,sto,_),b(m,Er,_),M(JR,Er,null),e(Er,Edt),e(Er,zm),e(zm,Cdt),e(zm,ose),e(ose,wdt),e(zm,Adt),e(zm,rse),e(rse,Ldt),e(zm,ydt),e(Er,xdt),e(Er,YR),e(YR,$dt),e(YR,vxe),e(vxe,kdt),e(YR,Sdt),e(Er,Rdt),e(Er,ia),M(ZR,ia,null),e(ia,Pdt),e(ia,Fxe),e(Fxe,Bdt),e(ia,Idt),e(ia,Qm),e(Qm,Ndt),e(Qm,Txe),e(Txe,qdt),e(Qm,jdt),e(Qm,tse),e(tse,Ddt),e(Qm,Gdt),e(ia,Odt),M(t7,ia,null),e(Er,Vdt),e(Er,Kr),M(KR,Kr,null),e(Kr,Xdt),e(Kr,Mxe),e(Mxe,zdt),e(Kr,Qdt),e(Kr,zn),e(zn,Wdt),e(zn,Exe),e(Exe,Udt),e(zn,Hdt),e(zn,Cxe),e(Cxe,Jdt),e(zn,Ydt),e(zn,wxe),e(wxe,Zdt),e(zn,Kdt),e(Kr,ect),e(Kr,eP),e(eP,a7),e(a7,Axe),e(Axe,oct),e(a7,rct),e(a7,ase),e(ase,tct),e(a7,act),e(eP,nct),e(eP,n7),e(n7,Lxe),e(Lxe,sct),e(n7,lct),e(n7,nse),e(nse,ict),e(n7,dct),e(Kr,cct),M(s7,Kr,null),b(m,lto,_),b(m,Wm,_),e(Wm,l7),e(l7,yxe),M(oP,yxe,null),e(Wm,mct),e(Wm,xxe),e(xxe,fct),b(m,ito,_),b(m,Cr,_),M(rP,Cr,null),e(Cr,gct),e(Cr,Um),e(Um,hct),e(Um,sse),e(sse,uct),e(Um,pct),e(Um,lse),e(lse,_ct),e(Um,bct),e(Cr,vct),e(Cr,tP),e(tP,Fct),e(tP,$xe),e($xe,Tct),e(tP,Mct),e(Cr,Ect),e(Cr,da),M(aP,da,null),e(da,Cct),e(da,kxe),e(kxe,wct),e(da,Act),e(da,Hm),e(Hm,Lct),e(Hm,Sxe),e(Sxe,yct),e(Hm,xct),e(Hm,ise),e(ise,$ct),e(Hm,kct),e(da,Sct),M(i7,da,null),e(Cr,Rct),e(Cr,et),M(nP,et,null),e(et,Pct),e(et,Rxe),e(Rxe,Bct),e(et,Ict),e(et,Qn),e(Qn,Nct),e(Qn,Pxe),e(Pxe,qct),e(Qn,jct),e(Qn,Bxe),e(Bxe,Dct),e(Qn,Gct),e(Qn,Ixe),e(Ixe,Oct),e(Qn,Vct),e(et,Xct),e(et,te),e(te,d7),e(d7,Nxe),e(Nxe,zct),e(d7,Qct),e(d7,dse),e(dse,Wct),e(d7,Uct),e(te,Hct),e(te,c7),e(c7,qxe),e(qxe,Jct),e(c7,Yct),e(c7,cse),e(cse,Zct),e(c7,Kct),e(te,emt),e(te,m7),e(m7,jxe),e(jxe,omt),e(m7,rmt),e(m7,mse),e(mse,tmt),e(m7,amt),e(te,nmt),e(te,f7),e(f7,Dxe),e(Dxe,smt),e(f7,lmt),e(f7,fse),e(fse,imt),e(f7,dmt),e(te,cmt),e(te,g7),e(g7,Gxe),e(Gxe,mmt),e(g7,fmt),e(g7,gse),e(gse,gmt),e(g7,hmt),e(te,umt),e(te,h7),e(h7,Oxe),e(Oxe,pmt),e(h7,_mt),e(h7,hse),e(hse,bmt),e(h7,vmt),e(te,Fmt),e(te,u7),e(u7,Vxe),e(Vxe,Tmt),e(u7,Mmt),e(u7,use),e(use,Emt),e(u7,Cmt),e(te,wmt),e(te,p7),e(p7,Xxe),e(Xxe,Amt),e(p7,Lmt),e(p7,pse),e(pse,ymt),e(p7,xmt),e(te,$mt),e(te,_7),e(_7,zxe),e(zxe,kmt),e(_7,Smt),e(_7,_se),e(_se,Rmt),e(_7,Pmt),e(te,Bmt),e(te,b7),e(b7,Qxe),e(Qxe,Imt),e(b7,Nmt),e(b7,bse),e(bse,qmt),e(b7,jmt),e(te,Dmt),e(te,v7),e(v7,Wxe),e(Wxe,Gmt),e(v7,Omt),e(v7,vse),e(vse,Vmt),e(v7,Xmt),e(te,zmt),e(te,F7),e(F7,Uxe),e(Uxe,Qmt),e(F7,Wmt),e(F7,Fse),e(Fse,Umt),e(F7,Hmt),e(te,Jmt),e(te,T7),e(T7,Hxe),e(Hxe,Ymt),e(T7,Zmt),e(T7,Tse),e(Tse,Kmt),e(T7,eft),e(te,oft),e(te,M7),e(M7,Jxe),e(Jxe,rft),e(M7,tft),e(M7,Mse),e(Mse,aft),e(M7,nft),e(te,sft),e(te,E7),e(E7,Yxe),e(Yxe,lft),e(E7,ift),e(E7,Ese),e(Ese,dft),e(E7,cft),e(te,mft),e(te,C7),e(C7,Zxe),e(Zxe,fft),e(C7,gft),e(C7,Cse),e(Cse,hft),e(C7,uft),e(te,pft),e(te,w7),e(w7,Kxe),e(Kxe,_ft),e(w7,bft),e(w7,wse),e(wse,vft),e(w7,Fft),e(te,Tft),e(te,A7),e(A7,e$e),e(e$e,Mft),e(A7,Eft),e(A7,Ase),e(Ase,Cft),e(A7,wft),e(te,Aft),e(te,L7),e(L7,o$e),e(o$e,Lft),e(L7,yft),e(L7,Lse),e(Lse,xft),e(L7,$ft),e(te,kft),e(te,y7),e(y7,r$e),e(r$e,Sft),e(y7,Rft),e(y7,yse),e(yse,Pft),e(y7,Bft),e(te,Ift),e(te,x7),e(x7,t$e),e(t$e,Nft),e(x7,qft),e(x7,xse),e(xse,jft),e(x7,Dft),e(te,Gft),e(te,$7),e($7,a$e),e(a$e,Oft),e($7,Vft),e($7,$se),e($se,Xft),e($7,zft),e(te,Qft),e(te,k7),e(k7,n$e),e(n$e,Wft),e(k7,Uft),e(k7,kse),e(kse,Hft),e(k7,Jft),e(te,Yft),e(te,S7),e(S7,s$e),e(s$e,Zft),e(S7,Kft),e(S7,Sse),e(Sse,egt),e(S7,ogt),e(te,rgt),e(te,R7),e(R7,l$e),e(l$e,tgt),e(R7,agt),e(R7,Rse),e(Rse,ngt),e(R7,sgt),e(te,lgt),e(te,P7),e(P7,i$e),e(i$e,igt),e(P7,dgt),e(P7,Pse),e(Pse,cgt),e(P7,mgt),e(te,fgt),e(te,B7),e(B7,d$e),e(d$e,ggt),e(B7,hgt),e(B7,Bse),e(Bse,ugt),e(B7,pgt),e(et,_gt),M(I7,et,null),b(m,dto,_),b(m,Jm,_),e(Jm,N7),e(N7,c$e),M(sP,c$e,null),e(Jm,bgt),e(Jm,m$e),e(m$e,vgt),b(m,cto,_),b(m,wr,_),M(lP,wr,null),e(wr,Fgt),e(wr,Ym),e(Ym,Tgt),e(Ym,Ise),e(Ise,Mgt),e(Ym,Egt),e(Ym,Nse),e(Nse,Cgt),e(Ym,wgt),e(wr,Agt),e(wr,iP),e(iP,Lgt),e(iP,f$e),e(f$e,ygt),e(iP,xgt),e(wr,$gt),e(wr,ca),M(dP,ca,null),e(ca,kgt),e(ca,g$e),e(g$e,Sgt),e(ca,Rgt),e(ca,Zm),e(Zm,Pgt),e(Zm,h$e),e(h$e,Bgt),e(Zm,Igt),e(Zm,qse),e(qse,Ngt),e(Zm,qgt),e(ca,jgt),M(q7,ca,null),e(wr,Dgt),e(wr,ot),M(cP,ot,null),e(ot,Ggt),e(ot,u$e),e(u$e,Ogt),e(ot,Vgt),e(ot,Wn),e(Wn,Xgt),e(Wn,p$e),e(p$e,zgt),e(Wn,Qgt),e(Wn,_$e),e(_$e,Wgt),e(Wn,Ugt),e(Wn,b$e),e(b$e,Hgt),e(Wn,Jgt),e(ot,Ygt),e(ot,xe),e(xe,j7),e(j7,v$e),e(v$e,Zgt),e(j7,Kgt),e(j7,jse),e(jse,eht),e(j7,oht),e(xe,rht),e(xe,D7),e(D7,F$e),e(F$e,tht),e(D7,aht),e(D7,Dse),e(Dse,nht),e(D7,sht),e(xe,lht),e(xe,G7),e(G7,T$e),e(T$e,iht),e(G7,dht),e(G7,Gse),e(Gse,cht),e(G7,mht),e(xe,fht),e(xe,O7),e(O7,M$e),e(M$e,ght),e(O7,hht),e(O7,Ose),e(Ose,uht),e(O7,pht),e(xe,_ht),e(xe,V7),e(V7,E$e),e(E$e,bht),e(V7,vht),e(V7,Vse),e(Vse,Fht),e(V7,Tht),e(xe,Mht),e(xe,X7),e(X7,C$e),e(C$e,Eht),e(X7,Cht),e(X7,Xse),e(Xse,wht),e(X7,Aht),e(xe,Lht),e(xe,z7),e(z7,w$e),e(w$e,yht),e(z7,xht),e(z7,zse),e(zse,$ht),e(z7,kht),e(xe,Sht),e(xe,Q7),e(Q7,A$e),e(A$e,Rht),e(Q7,Pht),e(Q7,Qse),e(Qse,Bht),e(Q7,Iht),e(xe,Nht),e(xe,W7),e(W7,L$e),e(L$e,qht),e(W7,jht),e(W7,Wse),e(Wse,Dht),e(W7,Ght),e(xe,Oht),e(xe,U7),e(U7,y$e),e(y$e,Vht),e(U7,Xht),e(U7,Use),e(Use,zht),e(U7,Qht),e(ot,Wht),M(H7,ot,null),b(m,mto,_),b(m,Km,_),e(Km,J7),e(J7,x$e),M(mP,x$e,null),e(Km,Uht),e(Km,$$e),e($$e,Hht),b(m,fto,_),b(m,Ar,_),M(fP,Ar,null),e(Ar,Jht),e(Ar,ef),e(ef,Yht),e(ef,Hse),e(Hse,Zht),e(ef,Kht),e(ef,Jse),e(Jse,eut),e(ef,out),e(Ar,rut),e(Ar,gP),e(gP,tut),e(gP,k$e),e(k$e,aut),e(gP,nut),e(Ar,sut),e(Ar,ma),M(hP,ma,null),e(ma,lut),e(ma,S$e),e(S$e,iut),e(ma,dut),e(ma,of),e(of,cut),e(of,R$e),e(R$e,mut),e(of,fut),e(of,Yse),e(Yse,gut),e(of,hut),e(ma,uut),M(Y7,ma,null),e(Ar,put),e(Ar,rt),M(uP,rt,null),e(rt,_ut),e(rt,P$e),e(P$e,but),e(rt,vut),e(rt,Un),e(Un,Fut),e(Un,B$e),e(B$e,Tut),e(Un,Mut),e(Un,I$e),e(I$e,Eut),e(Un,Cut),e(Un,N$e),e(N$e,wut),e(Un,Aut),e(rt,Lut),e(rt,Ee),e(Ee,Z7),e(Z7,q$e),e(q$e,yut),e(Z7,xut),e(Z7,Zse),e(Zse,$ut),e(Z7,kut),e(Ee,Sut),e(Ee,K7),e(K7,j$e),e(j$e,Rut),e(K7,Put),e(K7,Kse),e(Kse,But),e(K7,Iut),e(Ee,Nut),e(Ee,eL),e(eL,D$e),e(D$e,qut),e(eL,jut),e(eL,ele),e(ele,Dut),e(eL,Gut),e(Ee,Out),e(Ee,oL),e(oL,G$e),e(G$e,Vut),e(oL,Xut),e(oL,ole),e(ole,zut),e(oL,Qut),e(Ee,Wut),e(Ee,rL),e(rL,O$e),e(O$e,Uut),e(rL,Hut),e(rL,rle),e(rle,Jut),e(rL,Yut),e(Ee,Zut),e(Ee,tL),e(tL,V$e),e(V$e,Kut),e(tL,ept),e(tL,tle),e(tle,opt),e(tL,rpt),e(Ee,tpt),e(Ee,aL),e(aL,X$e),e(X$e,apt),e(aL,npt),e(aL,ale),e(ale,spt),e(aL,lpt),e(Ee,ipt),e(Ee,nL),e(nL,z$e),e(z$e,dpt),e(nL,cpt),e(nL,nle),e(nle,mpt),e(nL,fpt),e(Ee,gpt),e(Ee,sL),e(sL,Q$e),e(Q$e,hpt),e(sL,upt),e(sL,sle),e(sle,ppt),e(sL,_pt),e(Ee,bpt),e(Ee,lL),e(lL,W$e),e(W$e,vpt),e(lL,Fpt),e(lL,lle),e(lle,Tpt),e(lL,Mpt),e(Ee,Ept),e(Ee,iL),e(iL,U$e),e(U$e,Cpt),e(iL,wpt),e(iL,ile),e(ile,Apt),e(iL,Lpt),e(Ee,ypt),e(Ee,dL),e(dL,H$e),e(H$e,xpt),e(dL,$pt),e(dL,dle),e(dle,kpt),e(dL,Spt),e(Ee,Rpt),e(Ee,cL),e(cL,J$e),e(J$e,Ppt),e(cL,Bpt),e(cL,cle),e(cle,Ipt),e(cL,Npt),e(rt,qpt),M(mL,rt,null),b(m,gto,_),b(m,rf,_),e(rf,fL),e(fL,Y$e),M(pP,Y$e,null),e(rf,jpt),e(rf,Z$e),e(Z$e,Dpt),b(m,hto,_),b(m,Lr,_),M(_P,Lr,null),e(Lr,Gpt),e(Lr,tf),e(tf,Opt),e(tf,mle),e(mle,Vpt),e(tf,Xpt),e(tf,fle),e(fle,zpt),e(tf,Qpt),e(Lr,Wpt),e(Lr,bP),e(bP,Upt),e(bP,K$e),e(K$e,Hpt),e(bP,Jpt),e(Lr,Ypt),e(Lr,fa),M(vP,fa,null),e(fa,Zpt),e(fa,eke),e(eke,Kpt),e(fa,e_t),e(fa,af),e(af,o_t),e(af,oke),e(oke,r_t),e(af,t_t),e(af,gle),e(gle,a_t),e(af,n_t),e(fa,s_t),M(gL,fa,null),e(Lr,l_t),e(Lr,tt),M(FP,tt,null),e(tt,i_t),e(tt,rke),e(rke,d_t),e(tt,c_t),e(tt,Hn),e(Hn,m_t),e(Hn,tke),e(tke,f_t),e(Hn,g_t),e(Hn,ake),e(ake,h_t),e(Hn,u_t),e(Hn,nke),e(nke,p_t),e(Hn,__t),e(tt,b_t),e(tt,$e),e($e,hL),e(hL,ske),e(ske,v_t),e(hL,F_t),e(hL,hle),e(hle,T_t),e(hL,M_t),e($e,E_t),e($e,uL),e(uL,lke),e(lke,C_t),e(uL,w_t),e(uL,ule),e(ule,A_t),e(uL,L_t),e($e,y_t),e($e,pL),e(pL,ike),e(ike,x_t),e(pL,$_t),e(pL,ple),e(ple,k_t),e(pL,S_t),e($e,R_t),e($e,_L),e(_L,dke),e(dke,P_t),e(_L,B_t),e(_L,_le),e(_le,I_t),e(_L,N_t),e($e,q_t),e($e,bL),e(bL,cke),e(cke,j_t),e(bL,D_t),e(bL,ble),e(ble,G_t),e(bL,O_t),e($e,V_t),e($e,vL),e(vL,mke),e(mke,X_t),e(vL,z_t),e(vL,vle),e(vle,Q_t),e(vL,W_t),e($e,U_t),e($e,FL),e(FL,fke),e(fke,H_t),e(FL,J_t),e(FL,Fle),e(Fle,Y_t),e(FL,Z_t),e($e,K_t),e($e,TL),e(TL,gke),e(gke,e1t),e(TL,o1t),e(TL,Tle),e(Tle,r1t),e(TL,t1t),e($e,a1t),e($e,ML),e(ML,hke),e(hke,n1t),e(ML,s1t),e(ML,Mle),e(Mle,l1t),e(ML,i1t),e($e,d1t),e($e,EL),e(EL,uke),e(uke,c1t),e(EL,m1t),e(EL,Ele),e(Ele,f1t),e(EL,g1t),e(tt,h1t),M(CL,tt,null),b(m,uto,_),b(m,nf,_),e(nf,wL),e(wL,pke),M(TP,pke,null),e(nf,u1t),e(nf,_ke),e(_ke,p1t),b(m,pto,_),b(m,yr,_),M(MP,yr,null),e(yr,_1t),e(yr,sf),e(sf,b1t),e(sf,Cle),e(Cle,v1t),e(sf,F1t),e(sf,wle),e(wle,T1t),e(sf,M1t),e(yr,E1t),e(yr,EP),e(EP,C1t),e(EP,bke),e(bke,w1t),e(EP,A1t),e(yr,L1t),e(yr,ga),M(CP,ga,null),e(ga,y1t),e(ga,vke),e(vke,x1t),e(ga,$1t),e(ga,lf),e(lf,k1t),e(lf,Fke),e(Fke,S1t),e(lf,R1t),e(lf,Ale),e(Ale,P1t),e(lf,B1t),e(ga,I1t),M(AL,ga,null),e(yr,N1t),e(yr,at),M(wP,at,null),e(at,q1t),e(at,Tke),e(Tke,j1t),e(at,D1t),e(at,Jn),e(Jn,G1t),e(Jn,Mke),e(Mke,O1t),e(Jn,V1t),e(Jn,Eke),e(Eke,X1t),e(Jn,z1t),e(Jn,Cke),e(Cke,Q1t),e(Jn,W1t),e(at,U1t),e(at,ke),e(ke,LL),e(LL,wke),e(wke,H1t),e(LL,J1t),e(LL,Lle),e(Lle,Y1t),e(LL,Z1t),e(ke,K1t),e(ke,yL),e(yL,Ake),e(Ake,e2t),e(yL,o2t),e(yL,yle),e(yle,r2t),e(yL,t2t),e(ke,a2t),e(ke,xL),e(xL,Lke),e(Lke,n2t),e(xL,s2t),e(xL,xle),e(xle,l2t),e(xL,i2t),e(ke,d2t),e(ke,$L),e($L,yke),e(yke,c2t),e($L,m2t),e($L,$le),e($le,f2t),e($L,g2t),e(ke,h2t),e(ke,kL),e(kL,xke),e(xke,u2t),e(kL,p2t),e(kL,kle),e(kle,_2t),e(kL,b2t),e(ke,v2t),e(ke,SL),e(SL,$ke),e($ke,F2t),e(SL,T2t),e(SL,Sle),e(Sle,M2t),e(SL,E2t),e(ke,C2t),e(ke,RL),e(RL,kke),e(kke,w2t),e(RL,A2t),e(RL,Rle),e(Rle,L2t),e(RL,y2t),e(ke,x2t),e(ke,PL),e(PL,Ske),e(Ske,$2t),e(PL,k2t),e(PL,Ple),e(Ple,S2t),e(PL,R2t),e(ke,P2t),e(ke,BL),e(BL,Rke),e(Rke,B2t),e(BL,I2t),e(BL,Ble),e(Ble,N2t),e(BL,q2t),e(ke,j2t),e(ke,IL),e(IL,Pke),e(Pke,D2t),e(IL,G2t),e(IL,Ile),e(Ile,O2t),e(IL,V2t),e(at,X2t),M(NL,at,null),b(m,_to,_),b(m,df,_),e(df,qL),e(qL,Bke),M(AP,Bke,null),e(df,z2t),e(df,Ike),e(Ike,Q2t),b(m,bto,_),b(m,xr,_),M(LP,xr,null),e(xr,W2t),e(xr,cf),e(cf,U2t),e(cf,Nle),e(Nle,H2t),e(cf,J2t),e(cf,qle),e(qle,Y2t),e(cf,Z2t),e(xr,K2t),e(xr,yP),e(yP,ebt),e(yP,Nke),e(Nke,obt),e(yP,rbt),e(xr,tbt),e(xr,ha),M(xP,ha,null),e(ha,abt),e(ha,qke),e(qke,nbt),e(ha,sbt),e(ha,mf),e(mf,lbt),e(mf,jke),e(jke,ibt),e(mf,dbt),e(mf,jle),e(jle,cbt),e(mf,mbt),e(ha,fbt),M(jL,ha,null),e(xr,gbt),e(xr,nt),M($P,nt,null),e(nt,hbt),e(nt,Dke),e(Dke,ubt),e(nt,pbt),e(nt,Yn),e(Yn,_bt),e(Yn,Gke),e(Gke,bbt),e(Yn,vbt),e(Yn,Oke),e(Oke,Fbt),e(Yn,Tbt),e(Yn,Vke),e(Vke,Mbt),e(Yn,Ebt),e(nt,Cbt),e(nt,Se),e(Se,DL),e(DL,Xke),e(Xke,wbt),e(DL,Abt),e(DL,Dle),e(Dle,Lbt),e(DL,ybt),e(Se,xbt),e(Se,GL),e(GL,zke),e(zke,$bt),e(GL,kbt),e(GL,Gle),e(Gle,Sbt),e(GL,Rbt),e(Se,Pbt),e(Se,OL),e(OL,Qke),e(Qke,Bbt),e(OL,Ibt),e(OL,Ole),e(Ole,Nbt),e(OL,qbt),e(Se,jbt),e(Se,VL),e(VL,Wke),e(Wke,Dbt),e(VL,Gbt),e(VL,Vle),e(Vle,Obt),e(VL,Vbt),e(Se,Xbt),e(Se,XL),e(XL,Uke),e(Uke,zbt),e(XL,Qbt),e(XL,Xle),e(Xle,Wbt),e(XL,Ubt),e(Se,Hbt),e(Se,zL),e(zL,Hke),e(Hke,Jbt),e(zL,Ybt),e(zL,zle),e(zle,Zbt),e(zL,Kbt),e(Se,evt),e(Se,QL),e(QL,Jke),e(Jke,ovt),e(QL,rvt),e(QL,Qle),e(Qle,tvt),e(QL,avt),e(Se,nvt),e(Se,WL),e(WL,Yke),e(Yke,svt),e(WL,lvt),e(WL,Wle),e(Wle,ivt),e(WL,dvt),e(Se,cvt),e(Se,UL),e(UL,Zke),e(Zke,mvt),e(UL,fvt),e(UL,Ule),e(Ule,gvt),e(UL,hvt),e(Se,uvt),e(Se,HL),e(HL,Kke),e(Kke,pvt),e(HL,_vt),e(HL,Hle),e(Hle,bvt),e(HL,vvt),e(nt,Fvt),M(JL,nt,null),b(m,vto,_),b(m,ff,_),e(ff,YL),e(YL,eSe),M(kP,eSe,null),e(ff,Tvt),e(ff,oSe),e(oSe,Mvt),b(m,Fto,_),b(m,$r,_),M(SP,$r,null),e($r,Evt),e($r,gf),e(gf,Cvt),e(gf,Jle),e(Jle,wvt),e(gf,Avt),e(gf,Yle),e(Yle,Lvt),e(gf,yvt),e($r,xvt),e($r,RP),e(RP,$vt),e(RP,rSe),e(rSe,kvt),e(RP,Svt),e($r,Rvt),e($r,ua),M(PP,ua,null),e(ua,Pvt),e(ua,tSe),e(tSe,Bvt),e(ua,Ivt),e(ua,hf),e(hf,Nvt),e(hf,aSe),e(aSe,qvt),e(hf,jvt),e(hf,Zle),e(Zle,Dvt),e(hf,Gvt),e(ua,Ovt),M(ZL,ua,null),e($r,Vvt),e($r,st),M(BP,st,null),e(st,Xvt),e(st,nSe),e(nSe,zvt),e(st,Qvt),e(st,Zn),e(Zn,Wvt),e(Zn,sSe),e(sSe,Uvt),e(Zn,Hvt),e(Zn,lSe),e(lSe,Jvt),e(Zn,Yvt),e(Zn,iSe),e(iSe,Zvt),e(Zn,Kvt),e(st,eFt),e(st,Re),e(Re,KL),e(KL,dSe),e(dSe,oFt),e(KL,rFt),e(KL,Kle),e(Kle,tFt),e(KL,aFt),e(Re,nFt),e(Re,e8),e(e8,cSe),e(cSe,sFt),e(e8,lFt),e(e8,eie),e(eie,iFt),e(e8,dFt),e(Re,cFt),e(Re,o8),e(o8,mSe),e(mSe,mFt),e(o8,fFt),e(o8,oie),e(oie,gFt),e(o8,hFt),e(Re,uFt),e(Re,r8),e(r8,fSe),e(fSe,pFt),e(r8,_Ft),e(r8,rie),e(rie,bFt),e(r8,vFt),e(Re,FFt),e(Re,t8),e(t8,gSe),e(gSe,TFt),e(t8,MFt),e(t8,tie),e(tie,EFt),e(t8,CFt),e(Re,wFt),e(Re,a8),e(a8,hSe),e(hSe,AFt),e(a8,LFt),e(a8,aie),e(aie,yFt),e(a8,xFt),e(Re,$Ft),e(Re,n8),e(n8,uSe),e(uSe,kFt),e(n8,SFt),e(n8,nie),e(nie,RFt),e(n8,PFt),e(Re,BFt),e(Re,s8),e(s8,pSe),e(pSe,IFt),e(s8,NFt),e(s8,sie),e(sie,qFt),e(s8,jFt),e(Re,DFt),e(Re,l8),e(l8,_Se),e(_Se,GFt),e(l8,OFt),e(l8,lie),e(lie,VFt),e(l8,XFt),e(Re,zFt),e(Re,i8),e(i8,bSe),e(bSe,QFt),e(i8,WFt),e(i8,iie),e(iie,UFt),e(i8,HFt),e(st,JFt),M(d8,st,null),b(m,Tto,_),b(m,uf,_),e(uf,c8),e(c8,vSe),M(IP,vSe,null),e(uf,YFt),e(uf,FSe),e(FSe,ZFt),b(m,Mto,_),b(m,kr,_),M(NP,kr,null),e(kr,KFt),e(kr,pf),e(pf,eTt),e(pf,die),e(die,oTt),e(pf,rTt),e(pf,cie),e(cie,tTt),e(pf,aTt),e(kr,nTt),e(kr,qP),e(qP,sTt),e(qP,TSe),e(TSe,lTt),e(qP,iTt),e(kr,dTt),e(kr,pa),M(jP,pa,null),e(pa,cTt),e(pa,MSe),e(MSe,mTt),e(pa,fTt),e(pa,_f),e(_f,gTt),e(_f,ESe),e(ESe,hTt),e(_f,uTt),e(_f,mie),e(mie,pTt),e(_f,_Tt),e(pa,bTt),M(m8,pa,null),e(kr,vTt),e(kr,lt),M(DP,lt,null),e(lt,FTt),e(lt,CSe),e(CSe,TTt),e(lt,MTt),e(lt,Kn),e(Kn,ETt),e(Kn,wSe),e(wSe,CTt),e(Kn,wTt),e(Kn,ASe),e(ASe,ATt),e(Kn,LTt),e(Kn,LSe),e(LSe,yTt),e(Kn,xTt),e(lt,$Tt),e(lt,Xe),e(Xe,f8),e(f8,ySe),e(ySe,kTt),e(f8,STt),e(f8,fie),e(fie,RTt),e(f8,PTt),e(Xe,BTt),e(Xe,g8),e(g8,xSe),e(xSe,ITt),e(g8,NTt),e(g8,gie),e(gie,qTt),e(g8,jTt),e(Xe,DTt),e(Xe,h8),e(h8,$Se),e($Se,GTt),e(h8,OTt),e(h8,hie),e(hie,VTt),e(h8,XTt),e(Xe,zTt),e(Xe,u8),e(u8,kSe),e(kSe,QTt),e(u8,WTt),e(u8,uie),e(uie,UTt),e(u8,HTt),e(Xe,JTt),e(Xe,p8),e(p8,SSe),e(SSe,YTt),e(p8,ZTt),e(p8,pie),e(pie,KTt),e(p8,eMt),e(Xe,oMt),e(Xe,_8),e(_8,RSe),e(RSe,rMt),e(_8,tMt),e(_8,_ie),e(_ie,aMt),e(_8,nMt),e(Xe,sMt),e(Xe,b8),e(b8,PSe),e(PSe,lMt),e(b8,iMt),e(b8,bie),e(bie,dMt),e(b8,cMt),e(Xe,mMt),e(Xe,v8),e(v8,BSe),e(BSe,fMt),e(v8,gMt),e(v8,vie),e(vie,hMt),e(v8,uMt),e(lt,pMt),M(F8,lt,null),b(m,Eto,_),b(m,bf,_),e(bf,T8),e(T8,ISe),M(GP,ISe,null),e(bf,_Mt),e(bf,NSe),e(NSe,bMt),b(m,Cto,_),b(m,Sr,_),M(OP,Sr,null),e(Sr,vMt),e(Sr,vf),e(vf,FMt),e(vf,Fie),e(Fie,TMt),e(vf,MMt),e(vf,Tie),e(Tie,EMt),e(vf,CMt),e(Sr,wMt),e(Sr,VP),e(VP,AMt),e(VP,qSe),e(qSe,LMt),e(VP,yMt),e(Sr,xMt),e(Sr,_a),M(XP,_a,null),e(_a,$Mt),e(_a,jSe),e(jSe,kMt),e(_a,SMt),e(_a,Ff),e(Ff,RMt),e(Ff,DSe),e(DSe,PMt),e(Ff,BMt),e(Ff,Mie),e(Mie,IMt),e(Ff,NMt),e(_a,qMt),M(M8,_a,null),e(Sr,jMt),e(Sr,it),M(zP,it,null),e(it,DMt),e(it,GSe),e(GSe,GMt),e(it,OMt),e(it,es),e(es,VMt),e(es,OSe),e(OSe,XMt),e(es,zMt),e(es,VSe),e(VSe,QMt),e(es,WMt),e(es,XSe),e(XSe,UMt),e(es,HMt),e(it,JMt),e(it,ze),e(ze,E8),e(E8,zSe),e(zSe,YMt),e(E8,ZMt),e(E8,Eie),e(Eie,KMt),e(E8,eEt),e(ze,oEt),e(ze,C8),e(C8,QSe),e(QSe,rEt),e(C8,tEt),e(C8,Cie),e(Cie,aEt),e(C8,nEt),e(ze,sEt),e(ze,w8),e(w8,WSe),e(WSe,lEt),e(w8,iEt),e(w8,wie),e(wie,dEt),e(w8,cEt),e(ze,mEt),e(ze,A8),e(A8,USe),e(USe,fEt),e(A8,gEt),e(A8,Aie),e(Aie,hEt),e(A8,uEt),e(ze,pEt),e(ze,L8),e(L8,HSe),e(HSe,_Et),e(L8,bEt),e(L8,Lie),e(Lie,vEt),e(L8,FEt),e(ze,TEt),e(ze,y8),e(y8,JSe),e(JSe,MEt),e(y8,EEt),e(y8,yie),e(yie,CEt),e(y8,wEt),e(ze,AEt),e(ze,x8),e(x8,YSe),e(YSe,LEt),e(x8,yEt),e(x8,xie),e(xie,xEt),e(x8,$Et),e(ze,kEt),e(ze,$8),e($8,ZSe),e(ZSe,SEt),e($8,REt),e($8,$ie),e($ie,PEt),e($8,BEt),e(it,IEt),M(k8,it,null),b(m,wto,_),b(m,Tf,_),e(Tf,S8),e(S8,KSe),M(QP,KSe,null),e(Tf,NEt),e(Tf,eRe),e(eRe,qEt),b(m,Ato,_),b(m,Rr,_),M(WP,Rr,null),e(Rr,jEt),e(Rr,Mf),e(Mf,DEt),e(Mf,kie),e(kie,GEt),e(Mf,OEt),e(Mf,Sie),e(Sie,VEt),e(Mf,XEt),e(Rr,zEt),e(Rr,UP),e(UP,QEt),e(UP,oRe),e(oRe,WEt),e(UP,UEt),e(Rr,HEt),e(Rr,ba),M(HP,ba,null),e(ba,JEt),e(ba,rRe),e(rRe,YEt),e(ba,ZEt),e(ba,Ef),e(Ef,KEt),e(Ef,tRe),e(tRe,e4t),e(Ef,o4t),e(Ef,Rie),e(Rie,r4t),e(Ef,t4t),e(ba,a4t),M(R8,ba,null),e(Rr,n4t),e(Rr,dt),M(JP,dt,null),e(dt,s4t),e(dt,aRe),e(aRe,l4t),e(dt,i4t),e(dt,os),e(os,d4t),e(os,nRe),e(nRe,c4t),e(os,m4t),e(os,sRe),e(sRe,f4t),e(os,g4t),e(os,lRe),e(lRe,h4t),e(os,u4t),e(dt,p4t),e(dt,iRe),e(iRe,P8),e(P8,dRe),e(dRe,_4t),e(P8,b4t),e(P8,Pie),e(Pie,v4t),e(P8,F4t),e(dt,T4t),M(B8,dt,null),b(m,Lto,_),b(m,Cf,_),e(Cf,I8),e(I8,cRe),M(YP,cRe,null),e(Cf,M4t),e(Cf,mRe),e(mRe,E4t),b(m,yto,_),b(m,Pr,_),M(ZP,Pr,null),e(Pr,C4t),e(Pr,wf),e(wf,w4t),e(wf,Bie),e(Bie,A4t),e(wf,L4t),e(wf,Iie),e(Iie,y4t),e(wf,x4t),e(Pr,$4t),e(Pr,KP),e(KP,k4t),e(KP,fRe),e(fRe,S4t),e(KP,R4t),e(Pr,P4t),e(Pr,va),M(eB,va,null),e(va,B4t),e(va,gRe),e(gRe,I4t),e(va,N4t),e(va,Af),e(Af,q4t),e(Af,hRe),e(hRe,j4t),e(Af,D4t),e(Af,Nie),e(Nie,G4t),e(Af,O4t),e(va,V4t),M(N8,va,null),e(Pr,X4t),e(Pr,ct),M(oB,ct,null),e(ct,z4t),e(ct,uRe),e(uRe,Q4t),e(ct,W4t),e(ct,rs),e(rs,U4t),e(rs,pRe),e(pRe,H4t),e(rs,J4t),e(rs,_Re),e(_Re,Y4t),e(rs,Z4t),e(rs,bRe),e(bRe,K4t),e(rs,eCt),e(ct,oCt),e(ct,rB),e(rB,q8),e(q8,vRe),e(vRe,rCt),e(q8,tCt),e(q8,qie),e(qie,aCt),e(q8,nCt),e(rB,sCt),e(rB,j8),e(j8,FRe),e(FRe,lCt),e(j8,iCt),e(j8,jie),e(jie,dCt),e(j8,cCt),e(ct,mCt),M(D8,ct,null),b(m,xto,_),b(m,Lf,_),e(Lf,G8),e(G8,TRe),M(tB,TRe,null),e(Lf,fCt),e(Lf,MRe),e(MRe,gCt),b(m,$to,_),b(m,Br,_),M(aB,Br,null),e(Br,hCt),e(Br,yf),e(yf,uCt),e(yf,Die),e(Die,pCt),e(yf,_Ct),e(yf,Gie),e(Gie,bCt),e(yf,vCt),e(Br,FCt),e(Br,nB),e(nB,TCt),e(nB,ERe),e(ERe,MCt),e(nB,ECt),e(Br,CCt),e(Br,Fa),M(sB,Fa,null),e(Fa,wCt),e(Fa,CRe),e(CRe,ACt),e(Fa,LCt),e(Fa,xf),e(xf,yCt),e(xf,wRe),e(wRe,xCt),e(xf,$Ct),e(xf,Oie),e(Oie,kCt),e(xf,SCt),e(Fa,RCt),M(O8,Fa,null),e(Br,PCt),e(Br,mt),M(lB,mt,null),e(mt,BCt),e(mt,ARe),e(ARe,ICt),e(mt,NCt),e(mt,ts),e(ts,qCt),e(ts,LRe),e(LRe,jCt),e(ts,DCt),e(ts,yRe),e(yRe,GCt),e(ts,OCt),e(ts,xRe),e(xRe,VCt),e(ts,XCt),e(mt,zCt),e(mt,$Re),e($Re,V8),e(V8,kRe),e(kRe,QCt),e(V8,WCt),e(V8,Vie),e(Vie,UCt),e(V8,HCt),e(mt,JCt),M(X8,mt,null),kto=!0},p(m,[_]){const iB={};_&2&&(iB.$$scope={dirty:_,ctx:m}),qf.$set(iB);const SRe={};_&2&&(SRe.$$scope={dirty:_,ctx:m}),mu.$set(SRe);const RRe={};_&2&&(RRe.$$scope={dirty:_,ctx:m}),Hu.$set(RRe);const PRe={};_&2&&(PRe.$$scope={dirty:_,ctx:m}),Gp.$set(PRe);const dB={};_&2&&(dB.$$scope={dirty:_,ctx:m}),Op.$set(dB);const BRe={};_&2&&(BRe.$$scope={dirty:_,ctx:m}),h_.$set(BRe);const as={};_&2&&(as.$$scope={dirty:_,ctx:m}),u_.$set(as);const IRe={};_&2&&(IRe.$$scope={dirty:_,ctx:m}),b_.$set(IRe);const NRe={};_&2&&(NRe.$$scope={dirty:_,ctx:m}),q2.$set(NRe);const qRe={};_&2&&(qRe.$$scope={dirty:_,ctx:m}),D2.$set(qRe);const cB={};_&2&&(cB.$$scope={dirty:_,ctx:m}),Ib.$set(cB);const jRe={};_&2&&(jRe.$$scope={dirty:_,ctx:m}),qb.$set(jRe);const mB={};_&2&&(mB.$$scope={dirty:_,ctx:m}),yv.$set(mB);const DRe={};_&2&&(DRe.$$scope={dirty:_,ctx:m}),$v.$set(DRe);const fB={};_&2&&(fB.$$scope={dirty:_,ctx:m}),_F.$set(fB);const GRe={};_&2&&(GRe.$$scope={dirty:_,ctx:m}),vF.$set(GRe);const ORe={};_&2&&(ORe.$$scope={dirty:_,ctx:m}),GF.$set(ORe);const VRe={};_&2&&(VRe.$$scope={dirty:_,ctx:m}),VF.$set(VRe);const $f={};_&2&&($f.$$scope={dirty:_,ctx:m}),QT.$set($f);const XRe={};_&2&&(XRe.$$scope={dirty:_,ctx:m}),UT.$set(XRe);const zRe={};_&2&&(zRe.$$scope={dirty:_,ctx:m}),yM.$set(zRe);const QRe={};_&2&&(QRe.$$scope={dirty:_,ctx:m}),$M.$set(QRe);const gB={};_&2&&(gB.$$scope={dirty:_,ctx:m}),jM.$set(gB);const WRe={};_&2&&(WRe.$$scope={dirty:_,ctx:m}),GM.$set(WRe);const URe={};_&2&&(URe.$$scope={dirty:_,ctx:m}),xE.$set(URe);const HRe={};_&2&&(HRe.$$scope={dirty:_,ctx:m}),kE.$set(HRe);const pt={};_&2&&(pt.$$scope={dirty:_,ctx:m}),A4.$set(pt);const hB={};_&2&&(hB.$$scope={dirty:_,ctx:m}),y4.$set(hB);const JRe={};_&2&&(JRe.$$scope={dirty:_,ctx:m}),k4.$set(JRe);const uB={};_&2&&(uB.$$scope={dirty:_,ctx:m}),R4.$set(uB);const YRe={};_&2&&(YRe.$$scope={dirty:_,ctx:m}),q4.$set(YRe);const _t={};_&2&&(_t.$$scope={dirty:_,ctx:m}),D4.$set(_t);const ZRe={};_&2&&(ZRe.$$scope={dirty:_,ctx:m}),tC.$set(ZRe);const kf={};_&2&&(kf.$$scope={dirty:_,ctx:m}),nC.$set(kf);const KRe={};_&2&&(KRe.$$scope={dirty:_,ctx:m}),iC.$set(KRe);const ePe={};_&2&&(ePe.$$scope={dirty:_,ctx:m}),cC.$set(ePe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),gC.$set(L);const z8={};_&2&&(z8.$$scope={dirty:_,ctx:m}),uC.$set(z8);const oPe={};_&2&&(oPe.$$scope={dirty:_,ctx:m}),bC.$set(oPe);const rPe={};_&2&&(rPe.$$scope={dirty:_,ctx:m}),FC.$set(rPe);const Q8={};_&2&&(Q8.$$scope={dirty:_,ctx:m}),kC.$set(Q8);const tPe={};_&2&&(tPe.$$scope={dirty:_,ctx:m}),RC.$set(tPe);const aPe={};_&2&&(aPe.$$scope={dirty:_,ctx:m}),DC.$set(aPe);const W8={};_&2&&(W8.$$scope={dirty:_,ctx:m}),OC.$set(W8);const nPe={};_&2&&(nPe.$$scope={dirty:_,ctx:m}),e3.$set(nPe);const sPe={};_&2&&(sPe.$$scope={dirty:_,ctx:m}),r3.$set(sPe);const U8={};_&2&&(U8.$$scope={dirty:_,ctx:m}),l3.$set(U8);const lPe={};_&2&&(lPe.$$scope={dirty:_,ctx:m}),d3.$set(lPe);const iPe={};_&2&&(iPe.$$scope={dirty:_,ctx:m}),p3.$set(iPe);const H8={};_&2&&(H8.$$scope={dirty:_,ctx:m}),b3.$set(H8);const dPe={};_&2&&(dPe.$$scope={dirty:_,ctx:m}),C3.$set(dPe);const cPe={};_&2&&(cPe.$$scope={dirty:_,ctx:m}),A3.$set(cPe);const J8={};_&2&&(J8.$$scope={dirty:_,ctx:m}),S3.$set(J8);const mPe={};_&2&&(mPe.$$scope={dirty:_,ctx:m}),P3.$set(mPe);const fPe={};_&2&&(fPe.$$scope={dirty:_,ctx:m}),N3.$set(fPe);const Y8={};_&2&&(Y8.$$scope={dirty:_,ctx:m}),j3.$set(Y8);const gPe={};_&2&&(gPe.$$scope={dirty:_,ctx:m}),Q3.$set(gPe);const hPe={};_&2&&(hPe.$$scope={dirty:_,ctx:m}),U3.$set(hPe);const Z8={};_&2&&(Z8.$$scope={dirty:_,ctx:m}),Y3.$set(Z8);const uPe={};_&2&&(uPe.$$scope={dirty:_,ctx:m}),K3.$set(uPe);const pPe={};_&2&&(pPe.$$scope={dirty:_,ctx:m}),r5.$set(pPe);const K8={};_&2&&(K8.$$scope={dirty:_,ctx:m}),a5.$set(K8);const _Pe={};_&2&&(_Pe.$$scope={dirty:_,ctx:m}),s0.$set(_Pe);const bPe={};_&2&&(bPe.$$scope={dirty:_,ctx:m}),i0.$set(bPe);const ey={};_&2&&(ey.$$scope={dirty:_,ctx:m}),S0.$set(ey);const vPe={};_&2&&(vPe.$$scope={dirty:_,ctx:m}),P0.$set(vPe);const FPe={};_&2&&(FPe.$$scope={dirty:_,ctx:m}),H0.$set(FPe);const oy={};_&2&&(oy.$$scope={dirty:_,ctx:m}),Y0.$set(oy);const TPe={};_&2&&(TPe.$$scope={dirty:_,ctx:m}),sw.$set(TPe);const MPe={};_&2&&(MPe.$$scope={dirty:_,ctx:m}),iw.$set(MPe);const ry={};_&2&&(ry.$$scope={dirty:_,ctx:m}),fw.$set(ry);const EPe={};_&2&&(EPe.$$scope={dirty:_,ctx:m}),hw.$set(EPe);const CPe={};_&2&&(CPe.$$scope={dirty:_,ctx:m}),Bw.$set(CPe);const ty={};_&2&&(ty.$$scope={dirty:_,ctx:m}),Nw.$set(ty);const wPe={};_&2&&(wPe.$$scope={dirty:_,ctx:m}),Uw.$set(wPe);const APe={};_&2&&(APe.$$scope={dirty:_,ctx:m}),Jw.$set(APe);const ay={};_&2&&(ay.$$scope={dirty:_,ctx:m}),CA.$set(ay);const LPe={};_&2&&(LPe.$$scope={dirty:_,ctx:m}),AA.$set(LPe);const yPe={};_&2&&(yPe.$$scope={dirty:_,ctx:m}),XA.$set(yPe);const ny={};_&2&&(ny.$$scope={dirty:_,ctx:m}),QA.$set(ny);const xPe={};_&2&&(xPe.$$scope={dirty:_,ctx:m}),HA.$set(xPe);const $Pe={};_&2&&($Pe.$$scope={dirty:_,ctx:m}),YA.$set($Pe);const sy={};_&2&&(sy.$$scope={dirty:_,ctx:m}),KA.$set(sy);const kPe={};_&2&&(kPe.$$scope={dirty:_,ctx:m}),o6.$set(kPe);const SPe={};_&2&&(SPe.$$scope={dirty:_,ctx:m}),t6.$set(SPe);const ly={};_&2&&(ly.$$scope={dirty:_,ctx:m}),n6.$set(ly);const RPe={};_&2&&(RPe.$$scope={dirty:_,ctx:m}),L6.$set(RPe);const PPe={};_&2&&(PPe.$$scope={dirty:_,ctx:m}),x6.$set(PPe);const iy={};_&2&&(iy.$$scope={dirty:_,ctx:m}),Y6.$set(iy);const BPe={};_&2&&(BPe.$$scope={dirty:_,ctx:m}),K6.$set(BPe);const IPe={};_&2&&(IPe.$$scope={dirty:_,ctx:m}),o7.$set(IPe);const dy={};_&2&&(dy.$$scope={dirty:_,ctx:m}),t7.$set(dy);const NPe={};_&2&&(NPe.$$scope={dirty:_,ctx:m}),s7.$set(NPe);const qPe={};_&2&&(qPe.$$scope={dirty:_,ctx:m}),i7.$set(qPe);const cy={};_&2&&(cy.$$scope={dirty:_,ctx:m}),I7.$set(cy);const jPe={};_&2&&(jPe.$$scope={dirty:_,ctx:m}),q7.$set(jPe);const DPe={};_&2&&(DPe.$$scope={dirty:_,ctx:m}),H7.$set(DPe);const my={};_&2&&(my.$$scope={dirty:_,ctx:m}),Y7.$set(my);const GPe={};_&2&&(GPe.$$scope={dirty:_,ctx:m}),mL.$set(GPe);const OPe={};_&2&&(OPe.$$scope={dirty:_,ctx:m}),gL.$set(OPe);const fy={};_&2&&(fy.$$scope={dirty:_,ctx:m}),CL.$set(fy);const VPe={};_&2&&(VPe.$$scope={dirty:_,ctx:m}),AL.$set(VPe);const XPe={};_&2&&(XPe.$$scope={dirty:_,ctx:m}),NL.$set(XPe);const gy={};_&2&&(gy.$$scope={dirty:_,ctx:m}),jL.$set(gy);const zPe={};_&2&&(zPe.$$scope={dirty:_,ctx:m}),JL.$set(zPe);const QPe={};_&2&&(QPe.$$scope={dirty:_,ctx:m}),ZL.$set(QPe);const hy={};_&2&&(hy.$$scope={dirty:_,ctx:m}),d8.$set(hy);const WPe={};_&2&&(WPe.$$scope={dirty:_,ctx:m}),m8.$set(WPe);const UPe={};_&2&&(UPe.$$scope={dirty:_,ctx:m}),F8.$set(UPe);const uy={};_&2&&(uy.$$scope={dirty:_,ctx:m}),M8.$set(uy);const HPe={};_&2&&(HPe.$$scope={dirty:_,ctx:m}),k8.$set(HPe);const JPe={};_&2&&(JPe.$$scope={dirty:_,ctx:m}),R8.$set(JPe);const py={};_&2&&(py.$$scope={dirty:_,ctx:m}),B8.$set(py);const YPe={};_&2&&(YPe.$$scope={dirty:_,ctx:m}),N8.$set(YPe);const ZPe={};_&2&&(ZPe.$$scope={dirty:_,ctx:m}),D8.$set(ZPe);const _y={};_&2&&(_y.$$scope={dirty:_,ctx:m}),O8.$set(_y);const KPe={};_&2&&(KPe.$$scope={dirty:_,ctx:m}),X8.$set(KPe)},i(m){kto||(E(d.$$.fragment,m),E(Ja.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(qf.$$.fragment,m),E($x.$$.fragment,m),E(kx.$$.fragment,m),E(Px.$$.fragment,m),E(mu.$$.fragment,m),E(Bx.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(Dx.$$.fragment,m),E(Hu.$$.fragment,m),E(Gx.$$.fragment,m),E(Ox.$$.fragment,m),E(Vx.$$.fragment,m),E(Qx.$$.fragment,m),E(Gp.$$.fragment,m),E(Op.$$.fragment,m),E(Wx.$$.fragment,m),E(Ux.$$.fragment,m),E(Hx.$$.fragment,m),E(Zx.$$.fragment,m),E(h_.$$.fragment,m),E(u_.$$.fragment,m),E(Kx.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(b_.$$.fragment,m),E(a$.$$.fragment,m),E(q2.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(D2.$$.fragment,m),E(d$.$$.fragment,m),E(Ib.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(qb.$$.fragment,m),E(h$.$$.fragment,m),E(yv.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E($v.$$.fragment,m),E(v$.$$.fragment,m),E(_F.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(vF.$$.fragment,m),E(C$.$$.fragment,m),E(GF.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(VF.$$.fragment,m),E(x$.$$.fragment,m),E(QT.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(UT.$$.fragment,m),E(P$.$$.fragment,m),E(yM.$$.fragment,m),E(B$.$$.fragment,m),E(I$.$$.fragment,m),E(q$.$$.fragment,m),E($M.$$.fragment,m),E(j$.$$.fragment,m),E(jM.$$.fragment,m),E(D$.$$.fragment,m),E(G$.$$.fragment,m),E(V$.$$.fragment,m),E(GM.$$.fragment,m),E(X$.$$.fragment,m),E(xE.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(U$.$$.fragment,m),E(kE.$$.fragment,m),E(H$.$$.fragment,m),E(A4.$$.fragment,m),E(J$.$$.fragment,m),E(Y$.$$.fragment,m),E(K$.$$.fragment,m),E(y4.$$.fragment,m),E(ek.$$.fragment,m),E(k4.$$.fragment,m),E(ok.$$.fragment,m),E(rk.$$.fragment,m),E(ak.$$.fragment,m),E(R4.$$.fragment,m),E(nk.$$.fragment,m),E(q4.$$.fragment,m),E(sk.$$.fragment,m),E(lk.$$.fragment,m),E(dk.$$.fragment,m),E(D4.$$.fragment,m),E(ck.$$.fragment,m),E(tC.$$.fragment,m),E(mk.$$.fragment,m),E(fk.$$.fragment,m),E(hk.$$.fragment,m),E(nC.$$.fragment,m),E(uk.$$.fragment,m),E(iC.$$.fragment,m),E(pk.$$.fragment,m),E(_k.$$.fragment,m),E(vk.$$.fragment,m),E(cC.$$.fragment,m),E(Fk.$$.fragment,m),E(gC.$$.fragment,m),E(Tk.$$.fragment,m),E(Mk.$$.fragment,m),E(Ck.$$.fragment,m),E(uC.$$.fragment,m),E(wk.$$.fragment,m),E(bC.$$.fragment,m),E(Ak.$$.fragment,m),E(Lk.$$.fragment,m),E(xk.$$.fragment,m),E(FC.$$.fragment,m),E($k.$$.fragment,m),E(kC.$$.fragment,m),E(kk.$$.fragment,m),E(Sk.$$.fragment,m),E(Pk.$$.fragment,m),E(RC.$$.fragment,m),E(Bk.$$.fragment,m),E(DC.$$.fragment,m),E(Ik.$$.fragment,m),E(Nk.$$.fragment,m),E(jk.$$.fragment,m),E(OC.$$.fragment,m),E(Dk.$$.fragment,m),E(e3.$$.fragment,m),E(Gk.$$.fragment,m),E(Ok.$$.fragment,m),E(Xk.$$.fragment,m),E(r3.$$.fragment,m),E(zk.$$.fragment,m),E(l3.$$.fragment,m),E(Qk.$$.fragment,m),E(Wk.$$.fragment,m),E(Hk.$$.fragment,m),E(d3.$$.fragment,m),E(Jk.$$.fragment,m),E(p3.$$.fragment,m),E(Yk.$$.fragment,m),E(Zk.$$.fragment,m),E(eS.$$.fragment,m),E(b3.$$.fragment,m),E(oS.$$.fragment,m),E(C3.$$.fragment,m),E(rS.$$.fragment,m),E(tS.$$.fragment,m),E(nS.$$.fragment,m),E(A3.$$.fragment,m),E(sS.$$.fragment,m),E(S3.$$.fragment,m),E(lS.$$.fragment,m),E(iS.$$.fragment,m),E(cS.$$.fragment,m),E(P3.$$.fragment,m),E(mS.$$.fragment,m),E(N3.$$.fragment,m),E(fS.$$.fragment,m),E(gS.$$.fragment,m),E(uS.$$.fragment,m),E(j3.$$.fragment,m),E(pS.$$.fragment,m),E(Q3.$$.fragment,m),E(_S.$$.fragment,m),E(bS.$$.fragment,m),E(FS.$$.fragment,m),E(U3.$$.fragment,m),E(TS.$$.fragment,m),E(Y3.$$.fragment,m),E(MS.$$.fragment,m),E(ES.$$.fragment,m),E(wS.$$.fragment,m),E(K3.$$.fragment,m),E(AS.$$.fragment,m),E(r5.$$.fragment,m),E(LS.$$.fragment,m),E(yS.$$.fragment,m),E($S.$$.fragment,m),E(a5.$$.fragment,m),E(kS.$$.fragment,m),E(s0.$$.fragment,m),E(SS.$$.fragment,m),E(RS.$$.fragment,m),E(BS.$$.fragment,m),E(i0.$$.fragment,m),E(IS.$$.fragment,m),E(S0.$$.fragment,m),E(NS.$$.fragment,m),E(qS.$$.fragment,m),E(DS.$$.fragment,m),E(P0.$$.fragment,m),E(GS.$$.fragment,m),E(H0.$$.fragment,m),E(OS.$$.fragment,m),E(VS.$$.fragment,m),E(zS.$$.fragment,m),E(Y0.$$.fragment,m),E(QS.$$.fragment,m),E(sw.$$.fragment,m),E(WS.$$.fragment,m),E(US.$$.fragment,m),E(JS.$$.fragment,m),E(iw.$$.fragment,m),E(YS.$$.fragment,m),E(fw.$$.fragment,m),E(ZS.$$.fragment,m),E(KS.$$.fragment,m),E(oR.$$.fragment,m),E(hw.$$.fragment,m),E(rR.$$.fragment,m),E(Bw.$$.fragment,m),E(tR.$$.fragment,m),E(aR.$$.fragment,m),E(sR.$$.fragment,m),E(Nw.$$.fragment,m),E(lR.$$.fragment,m),E(Uw.$$.fragment,m),E(iR.$$.fragment,m),E(dR.$$.fragment,m),E(mR.$$.fragment,m),E(Jw.$$.fragment,m),E(fR.$$.fragment,m),E(CA.$$.fragment,m),E(gR.$$.fragment,m),E(hR.$$.fragment,m),E(pR.$$.fragment,m),E(AA.$$.fragment,m),E(_R.$$.fragment,m),E(XA.$$.fragment,m),E(bR.$$.fragment,m),E(vR.$$.fragment,m),E(TR.$$.fragment,m),E(QA.$$.fragment,m),E(MR.$$.fragment,m),E(HA.$$.fragment,m),E(CR.$$.fragment,m),E(wR.$$.fragment,m),E(LR.$$.fragment,m),E(YA.$$.fragment,m),E(yR.$$.fragment,m),E(KA.$$.fragment,m),E(xR.$$.fragment,m),E($R.$$.fragment,m),E(SR.$$.fragment,m),E(o6.$$.fragment,m),E(RR.$$.fragment,m),E(t6.$$.fragment,m),E(PR.$$.fragment,m),E(BR.$$.fragment,m),E(NR.$$.fragment,m),E(n6.$$.fragment,m),E(qR.$$.fragment,m),E(L6.$$.fragment,m),E(jR.$$.fragment,m),E(DR.$$.fragment,m),E(OR.$$.fragment,m),E(x6.$$.fragment,m),E(VR.$$.fragment,m),E(Y6.$$.fragment,m),E(XR.$$.fragment,m),E(zR.$$.fragment,m),E(WR.$$.fragment,m),E(K6.$$.fragment,m),E(UR.$$.fragment,m),E(o7.$$.fragment,m),E(HR.$$.fragment,m),E(JR.$$.fragment,m),E(ZR.$$.fragment,m),E(t7.$$.fragment,m),E(KR.$$.fragment,m),E(s7.$$.fragment,m),E(oP.$$.fragment,m),E(rP.$$.fragment,m),E(aP.$$.fragment,m),E(i7.$$.fragment,m),E(nP.$$.fragment,m),E(I7.$$.fragment,m),E(sP.$$.fragment,m),E(lP.$$.fragment,m),E(dP.$$.fragment,m),E(q7.$$.fragment,m),E(cP.$$.fragment,m),E(H7.$$.fragment,m),E(mP.$$.fragment,m),E(fP.$$.fragment,m),E(hP.$$.fragment,m),E(Y7.$$.fragment,m),E(uP.$$.fragment,m),E(mL.$$.fragment,m),E(pP.$$.fragment,m),E(_P.$$.fragment,m),E(vP.$$.fragment,m),E(gL.$$.fragment,m),E(FP.$$.fragment,m),E(CL.$$.fragment,m),E(TP.$$.fragment,m),E(MP.$$.fragment,m),E(CP.$$.fragment,m),E(AL.$$.fragment,m),E(wP.$$.fragment,m),E(NL.$$.fragment,m),E(AP.$$.fragment,m),E(LP.$$.fragment,m),E(xP.$$.fragment,m),E(jL.$$.fragment,m),E($P.$$.fragment,m),E(JL.$$.fragment,m),E(kP.$$.fragment,m),E(SP.$$.fragment,m),E(PP.$$.fragment,m),E(ZL.$$.fragment,m),E(BP.$$.fragment,m),E(d8.$$.fragment,m),E(IP.$$.fragment,m),E(NP.$$.fragment,m),E(jP.$$.fragment,m),E(m8.$$.fragment,m),E(DP.$$.fragment,m),E(F8.$$.fragment,m),E(GP.$$.fragment,m),E(OP.$$.fragment,m),E(XP.$$.fragment,m),E(M8.$$.fragment,m),E(zP.$$.fragment,m),E(k8.$$.fragment,m),E(QP.$$.fragment,m),E(WP.$$.fragment,m),E(HP.$$.fragment,m),E(R8.$$.fragment,m),E(JP.$$.fragment,m),E(B8.$$.fragment,m),E(YP.$$.fragment,m),E(ZP.$$.fragment,m),E(eB.$$.fragment,m),E(N8.$$.fragment,m),E(oB.$$.fragment,m),E(D8.$$.fragment,m),E(tB.$$.fragment,m),E(aB.$$.fragment,m),E(sB.$$.fragment,m),E(O8.$$.fragment,m),E(lB.$$.fragment,m),E(X8.$$.fragment,m),kto=!0)},o(m){C(d.$$.fragment,m),C(Ja.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(qf.$$.fragment,m),C($x.$$.fragment,m),C(kx.$$.fragment,m),C(Px.$$.fragment,m),C(mu.$$.fragment,m),C(Bx.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(Dx.$$.fragment,m),C(Hu.$$.fragment,m),C(Gx.$$.fragment,m),C(Ox.$$.fragment,m),C(Vx.$$.fragment,m),C(Qx.$$.fragment,m),C(Gp.$$.fragment,m),C(Op.$$.fragment,m),C(Wx.$$.fragment,m),C(Ux.$$.fragment,m),C(Hx.$$.fragment,m),C(Zx.$$.fragment,m),C(h_.$$.fragment,m),C(u_.$$.fragment,m),C(Kx.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(b_.$$.fragment,m),C(a$.$$.fragment,m),C(q2.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(D2.$$.fragment,m),C(d$.$$.fragment,m),C(Ib.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(qb.$$.fragment,m),C(h$.$$.fragment,m),C(yv.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C($v.$$.fragment,m),C(v$.$$.fragment,m),C(_F.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(vF.$$.fragment,m),C(C$.$$.fragment,m),C(GF.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(VF.$$.fragment,m),C(x$.$$.fragment,m),C(QT.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(UT.$$.fragment,m),C(P$.$$.fragment,m),C(yM.$$.fragment,m),C(B$.$$.fragment,m),C(I$.$$.fragment,m),C(q$.$$.fragment,m),C($M.$$.fragment,m),C(j$.$$.fragment,m),C(jM.$$.fragment,m),C(D$.$$.fragment,m),C(G$.$$.fragment,m),C(V$.$$.fragment,m),C(GM.$$.fragment,m),C(X$.$$.fragment,m),C(xE.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(U$.$$.fragment,m),C(kE.$$.fragment,m),C(H$.$$.fragment,m),C(A4.$$.fragment,m),C(J$.$$.fragment,m),C(Y$.$$.fragment,m),C(K$.$$.fragment,m),C(y4.$$.fragment,m),C(ek.$$.fragment,m),C(k4.$$.fragment,m),C(ok.$$.fragment,m),C(rk.$$.fragment,m),C(ak.$$.fragment,m),C(R4.$$.fragment,m),C(nk.$$.fragment,m),C(q4.$$.fragment,m),C(sk.$$.fragment,m),C(lk.$$.fragment,m),C(dk.$$.fragment,m),C(D4.$$.fragment,m),C(ck.$$.fragment,m),C(tC.$$.fragment,m),C(mk.$$.fragment,m),C(fk.$$.fragment,m),C(hk.$$.fragment,m),C(nC.$$.fragment,m),C(uk.$$.fragment,m),C(iC.$$.fragment,m),C(pk.$$.fragment,m),C(_k.$$.fragment,m),C(vk.$$.fragment,m),C(cC.$$.fragment,m),C(Fk.$$.fragment,m),C(gC.$$.fragment,m),C(Tk.$$.fragment,m),C(Mk.$$.fragment,m),C(Ck.$$.fragment,m),C(uC.$$.fragment,m),C(wk.$$.fragment,m),C(bC.$$.fragment,m),C(Ak.$$.fragment,m),C(Lk.$$.fragment,m),C(xk.$$.fragment,m),C(FC.$$.fragment,m),C($k.$$.fragment,m),C(kC.$$.fragment,m),C(kk.$$.fragment,m),C(Sk.$$.fragment,m),C(Pk.$$.fragment,m),C(RC.$$.fragment,m),C(Bk.$$.fragment,m),C(DC.$$.fragment,m),C(Ik.$$.fragment,m),C(Nk.$$.fragment,m),C(jk.$$.fragment,m),C(OC.$$.fragment,m),C(Dk.$$.fragment,m),C(e3.$$.fragment,m),C(Gk.$$.fragment,m),C(Ok.$$.fragment,m),C(Xk.$$.fragment,m),C(r3.$$.fragment,m),C(zk.$$.fragment,m),C(l3.$$.fragment,m),C(Qk.$$.fragment,m),C(Wk.$$.fragment,m),C(Hk.$$.fragment,m),C(d3.$$.fragment,m),C(Jk.$$.fragment,m),C(p3.$$.fragment,m),C(Yk.$$.fragment,m),C(Zk.$$.fragment,m),C(eS.$$.fragment,m),C(b3.$$.fragment,m),C(oS.$$.fragment,m),C(C3.$$.fragment,m),C(rS.$$.fragment,m),C(tS.$$.fragment,m),C(nS.$$.fragment,m),C(A3.$$.fragment,m),C(sS.$$.fragment,m),C(S3.$$.fragment,m),C(lS.$$.fragment,m),C(iS.$$.fragment,m),C(cS.$$.fragment,m),C(P3.$$.fragment,m),C(mS.$$.fragment,m),C(N3.$$.fragment,m),C(fS.$$.fragment,m),C(gS.$$.fragment,m),C(uS.$$.fragment,m),C(j3.$$.fragment,m),C(pS.$$.fragment,m),C(Q3.$$.fragment,m),C(_S.$$.fragment,m),C(bS.$$.fragment,m),C(FS.$$.fragment,m),C(U3.$$.fragment,m),C(TS.$$.fragment,m),C(Y3.$$.fragment,m),C(MS.$$.fragment,m),C(ES.$$.fragment,m),C(wS.$$.fragment,m),C(K3.$$.fragment,m),C(AS.$$.fragment,m),C(r5.$$.fragment,m),C(LS.$$.fragment,m),C(yS.$$.fragment,m),C($S.$$.fragment,m),C(a5.$$.fragment,m),C(kS.$$.fragment,m),C(s0.$$.fragment,m),C(SS.$$.fragment,m),C(RS.$$.fragment,m),C(BS.$$.fragment,m),C(i0.$$.fragment,m),C(IS.$$.fragment,m),C(S0.$$.fragment,m),C(NS.$$.fragment,m),C(qS.$$.fragment,m),C(DS.$$.fragment,m),C(P0.$$.fragment,m),C(GS.$$.fragment,m),C(H0.$$.fragment,m),C(OS.$$.fragment,m),C(VS.$$.fragment,m),C(zS.$$.fragment,m),C(Y0.$$.fragment,m),C(QS.$$.fragment,m),C(sw.$$.fragment,m),C(WS.$$.fragment,m),C(US.$$.fragment,m),C(JS.$$.fragment,m),C(iw.$$.fragment,m),C(YS.$$.fragment,m),C(fw.$$.fragment,m),C(ZS.$$.fragment,m),C(KS.$$.fragment,m),C(oR.$$.fragment,m),C(hw.$$.fragment,m),C(rR.$$.fragment,m),C(Bw.$$.fragment,m),C(tR.$$.fragment,m),C(aR.$$.fragment,m),C(sR.$$.fragment,m),C(Nw.$$.fragment,m),C(lR.$$.fragment,m),C(Uw.$$.fragment,m),C(iR.$$.fragment,m),C(dR.$$.fragment,m),C(mR.$$.fragment,m),C(Jw.$$.fragment,m),C(fR.$$.fragment,m),C(CA.$$.fragment,m),C(gR.$$.fragment,m),C(hR.$$.fragment,m),C(pR.$$.fragment,m),C(AA.$$.fragment,m),C(_R.$$.fragment,m),C(XA.$$.fragment,m),C(bR.$$.fragment,m),C(vR.$$.fragment,m),C(TR.$$.fragment,m),C(QA.$$.fragment,m),C(MR.$$.fragment,m),C(HA.$$.fragment,m),C(CR.$$.fragment,m),C(wR.$$.fragment,m),C(LR.$$.fragment,m),C(YA.$$.fragment,m),C(yR.$$.fragment,m),C(KA.$$.fragment,m),C(xR.$$.fragment,m),C($R.$$.fragment,m),C(SR.$$.fragment,m),C(o6.$$.fragment,m),C(RR.$$.fragment,m),C(t6.$$.fragment,m),C(PR.$$.fragment,m),C(BR.$$.fragment,m),C(NR.$$.fragment,m),C(n6.$$.fragment,m),C(qR.$$.fragment,m),C(L6.$$.fragment,m),C(jR.$$.fragment,m),C(DR.$$.fragment,m),C(OR.$$.fragment,m),C(x6.$$.fragment,m),C(VR.$$.fragment,m),C(Y6.$$.fragment,m),C(XR.$$.fragment,m),C(zR.$$.fragment,m),C(WR.$$.fragment,m),C(K6.$$.fragment,m),C(UR.$$.fragment,m),C(o7.$$.fragment,m),C(HR.$$.fragment,m),C(JR.$$.fragment,m),C(ZR.$$.fragment,m),C(t7.$$.fragment,m),C(KR.$$.fragment,m),C(s7.$$.fragment,m),C(oP.$$.fragment,m),C(rP.$$.fragment,m),C(aP.$$.fragment,m),C(i7.$$.fragment,m),C(nP.$$.fragment,m),C(I7.$$.fragment,m),C(sP.$$.fragment,m),C(lP.$$.fragment,m),C(dP.$$.fragment,m),C(q7.$$.fragment,m),C(cP.$$.fragment,m),C(H7.$$.fragment,m),C(mP.$$.fragment,m),C(fP.$$.fragment,m),C(hP.$$.fragment,m),C(Y7.$$.fragment,m),C(uP.$$.fragment,m),C(mL.$$.fragment,m),C(pP.$$.fragment,m),C(_P.$$.fragment,m),C(vP.$$.fragment,m),C(gL.$$.fragment,m),C(FP.$$.fragment,m),C(CL.$$.fragment,m),C(TP.$$.fragment,m),C(MP.$$.fragment,m),C(CP.$$.fragment,m),C(AL.$$.fragment,m),C(wP.$$.fragment,m),C(NL.$$.fragment,m),C(AP.$$.fragment,m),C(LP.$$.fragment,m),C(xP.$$.fragment,m),C(jL.$$.fragment,m),C($P.$$.fragment,m),C(JL.$$.fragment,m),C(kP.$$.fragment,m),C(SP.$$.fragment,m),C(PP.$$.fragment,m),C(ZL.$$.fragment,m),C(BP.$$.fragment,m),C(d8.$$.fragment,m),C(IP.$$.fragment,m),C(NP.$$.fragment,m),C(jP.$$.fragment,m),C(m8.$$.fragment,m),C(DP.$$.fragment,m),C(F8.$$.fragment,m),C(GP.$$.fragment,m),C(OP.$$.fragment,m),C(XP.$$.fragment,m),C(M8.$$.fragment,m),C(zP.$$.fragment,m),C(k8.$$.fragment,m),C(QP.$$.fragment,m),C(WP.$$.fragment,m),C(HP.$$.fragment,m),C(R8.$$.fragment,m),C(JP.$$.fragment,m),C(B8.$$.fragment,m),C(YP.$$.fragment,m),C(ZP.$$.fragment,m),C(eB.$$.fragment,m),C(N8.$$.fragment,m),C(oB.$$.fragment,m),C(D8.$$.fragment,m),C(tB.$$.fragment,m),C(aB.$$.fragment,m),C(sB.$$.fragment,m),C(O8.$$.fragment,m),C(lB.$$.fragment,m),C(X8.$$.fragment,m),kto=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Rf),m&&t(bt),m&&t(Ve),m&&t(He),m&&t(Bf),w(Ja,m),m&&t(Je),m&&t(Ae),m&&t($o),m&&t(Ya),m&&t(poo),m&&t(pd),w(yx),m&&t(_oo),m&&t(ds),m&&t(boo),w(xx,m),m&&t(voo),m&&t(qI),m&&t(Foo),w(qf,m),m&&t(Too),m&&t(_d),w($x),m&&t(Moo),m&&t(ko),w(kx),w(Px),w(mu),w(Bx),m&&t(Eoo),m&&t(vd),w(Ix),m&&t(Coo),m&&t(So),w(Nx),w(Dx),w(Hu),w(Gx),m&&t(woo),m&&t(Fd),w(Ox),m&&t(Aoo),m&&t(Ro),w(Vx),w(Qx),w(Gp),w(Op),w(Wx),m&&t(Loo),m&&t(Td),w(Ux),m&&t(yoo),m&&t(Po),w(Hx),w(Zx),w(h_),w(u_),w(Kx),m&&t(xoo),m&&t(Ed),w(e$),m&&t($oo),m&&t(Bo),w(o$),w(t$),w(b_),w(a$),w(q2),m&&t(koo),m&&t(Ad),w(n$),m&&t(Soo),m&&t(Io),w(s$),w(i$),w(D2),w(d$),w(Ib),m&&t(Roo),m&&t(xd),w(c$),m&&t(Poo),m&&t(No),w(m$),w(g$),w(qb),w(h$),w(yv),m&&t(Boo),m&&t(Sd),w(u$),m&&t(Ioo),m&&t(qo),w(p$),w(b$),w($v),w(v$),w(_F),m&&t(Noo),m&&t(Bd),w(F$),m&&t(qoo),m&&t(jo),w(T$),w(E$),w(vF),w(C$),w(GF),m&&t(joo),m&&t(qd),w(w$),m&&t(Doo),m&&t(Do),w(A$),w(y$),w(VF),w(x$),w(QT),m&&t(Goo),m&&t(Gd),w($$),m&&t(Ooo),m&&t(Go),w(k$),w(R$),w(UT),w(P$),w(yM),m&&t(Voo),m&&t(Xd),w(B$),m&&t(Xoo),m&&t(Oo),w(I$),w(q$),w($M),w(j$),w(jM),m&&t(zoo),m&&t(Wd),w(D$),m&&t(Qoo),m&&t(Vo),w(G$),w(V$),w(GM),w(X$),w(xE),m&&t(Woo),m&&t(Jd),w(z$),m&&t(Uoo),m&&t(Xo),w(Q$),w(U$),w(kE),w(H$),w(A4),m&&t(Hoo),m&&t(Kd),w(J$),m&&t(Joo),m&&t(zo),w(Y$),w(K$),w(y4),w(ek),w(k4),m&&t(Yoo),m&&t(rc),w(ok),m&&t(Zoo),m&&t(Qo),w(rk),w(ak),w(R4),w(nk),w(q4),m&&t(Koo),m&&t(sc),w(sk),m&&t(ero),m&&t(Wo),w(lk),w(dk),w(D4),w(ck),w(tC),m&&t(oro),m&&t(dc),w(mk),m&&t(rro),m&&t(Uo),w(fk),w(hk),w(nC),w(uk),w(iC),m&&t(tro),m&&t(fc),w(pk),m&&t(aro),m&&t(Ho),w(_k),w(vk),w(cC),w(Fk),w(gC),m&&t(nro),m&&t(uc),w(Tk),m&&t(sro),m&&t(Jo),w(Mk),w(Ck),w(uC),w(wk),w(bC),m&&t(lro),m&&t(bc),w(Ak),m&&t(iro),m&&t(Yo),w(Lk),w(xk),w(FC),w($k),w(kC),m&&t(dro),m&&t(Tc),w(kk),m&&t(cro),m&&t(Zo),w(Sk),w(Pk),w(RC),w(Bk),w(DC),m&&t(mro),m&&t(Cc),w(Ik),m&&t(fro),m&&t(Ko),w(Nk),w(jk),w(OC),w(Dk),w(e3),m&&t(gro),m&&t(Lc),w(Gk),m&&t(hro),m&&t(er),w(Ok),w(Xk),w(r3),w(zk),w(l3),m&&t(uro),m&&t(kc),w(Qk),m&&t(pro),m&&t(or),w(Wk),w(Hk),w(d3),w(Jk),w(p3),m&&t(_ro),m&&t(Pc),w(Yk),m&&t(bro),m&&t(rr),w(Zk),w(eS),w(b3),w(oS),w(C3),m&&t(vro),m&&t(Nc),w(rS),m&&t(Fro),m&&t(tr),w(tS),w(nS),w(A3),w(sS),w(S3),m&&t(Tro),m&&t(Dc),w(lS),m&&t(Mro),m&&t(ar),w(iS),w(cS),w(P3),w(mS),w(N3),m&&t(Ero),m&&t(Vc),w(fS),m&&t(Cro),m&&t(nr),w(gS),w(uS),w(j3),w(pS),w(Q3),m&&t(wro),m&&t(Qc),w(_S),m&&t(Aro),m&&t(sr),w(bS),w(FS),w(U3),w(TS),w(Y3),m&&t(Lro),m&&t(Hc),w(MS),m&&t(yro),m&&t(lr),w(ES),w(wS),w(K3),w(AS),w(r5),m&&t(xro),m&&t(Zc),w(LS),m&&t($ro),m&&t(ir),w(yS),w($S),w(a5),w(kS),w(s0),m&&t(kro),m&&t(om),w(SS),m&&t(Sro),m&&t(dr),w(RS),w(BS),w(i0),w(IS),w(S0),m&&t(Rro),m&&t(am),w(NS),m&&t(Pro),m&&t(cr),w(qS),w(DS),w(P0),w(GS),w(H0),m&&t(Bro),m&&t(lm),w(OS),m&&t(Iro),m&&t(mr),w(VS),w(zS),w(Y0),w(QS),w(sw),m&&t(Nro),m&&t(cm),w(WS),m&&t(qro),m&&t(fr),w(US),w(JS),w(iw),w(YS),w(fw),m&&t(jro),m&&t(hm),w(ZS),m&&t(Dro),m&&t(gr),w(KS),w(oR),w(hw),w(rR),w(Bw),m&&t(Gro),m&&t(_m),w(tR),m&&t(Oro),m&&t(hr),w(aR),w(sR),w(Nw),w(lR),w(Uw),m&&t(Vro),m&&t(Fm),w(iR),m&&t(Xro),m&&t(ur),w(dR),w(mR),w(Jw),w(fR),w(CA),m&&t(zro),m&&t(Em),w(gR),m&&t(Qro),m&&t(pr),w(hR),w(pR),w(AA),w(_R),w(XA),m&&t(Wro),m&&t(Am),w(bR),m&&t(Uro),m&&t(_r),w(vR),w(TR),w(QA),w(MR),w(HA),m&&t(Hro),m&&t(xm),w(CR),m&&t(Jro),m&&t(br),w(wR),w(LR),w(YA),w(yR),w(KA),m&&t(Yro),m&&t(Sm),w(xR),m&&t(Zro),m&&t(vr),w($R),w(SR),w(o6),w(RR),w(t6),m&&t(Kro),m&&t(Bm),w(PR),m&&t(eto),m&&t(Fr),w(BR),w(NR),w(n6),w(qR),w(L6),m&&t(oto),m&&t(qm),w(jR),m&&t(rto),m&&t(Tr),w(DR),w(OR),w(x6),w(VR),w(Y6),m&&t(tto),m&&t(Gm),w(XR),m&&t(ato),m&&t(Mr),w(zR),w(WR),w(K6),w(UR),w(o7),m&&t(nto),m&&t(Xm),w(HR),m&&t(sto),m&&t(Er),w(JR),w(ZR),w(t7),w(KR),w(s7),m&&t(lto),m&&t(Wm),w(oP),m&&t(ito),m&&t(Cr),w(rP),w(aP),w(i7),w(nP),w(I7),m&&t(dto),m&&t(Jm),w(sP),m&&t(cto),m&&t(wr),w(lP),w(dP),w(q7),w(cP),w(H7),m&&t(mto),m&&t(Km),w(mP),m&&t(fto),m&&t(Ar),w(fP),w(hP),w(Y7),w(uP),w(mL),m&&t(gto),m&&t(rf),w(pP),m&&t(hto),m&&t(Lr),w(_P),w(vP),w(gL),w(FP),w(CL),m&&t(uto),m&&t(nf),w(TP),m&&t(pto),m&&t(yr),w(MP),w(CP),w(AL),w(wP),w(NL),m&&t(_to),m&&t(df),w(AP),m&&t(bto),m&&t(xr),w(LP),w(xP),w(jL),w($P),w(JL),m&&t(vto),m&&t(ff),w(kP),m&&t(Fto),m&&t($r),w(SP),w(PP),w(ZL),w(BP),w(d8),m&&t(Tto),m&&t(uf),w(IP),m&&t(Mto),m&&t(kr),w(NP),w(jP),w(m8),w(DP),w(F8),m&&t(Eto),m&&t(bf),w(GP),m&&t(Cto),m&&t(Sr),w(OP),w(XP),w(M8),w(zP),w(k8),m&&t(wto),m&&t(Tf),w(QP),m&&t(Ato),m&&t(Rr),w(WP),w(HP),w(R8),w(JP),w(B8),m&&t(Lto),m&&t(Cf),w(YP),m&&t(yto),m&&t(Pr),w(ZP),w(eB),w(N8),w(oB),w(D8),m&&t(xto),m&&t(Lf),w(tB),m&&t($to),m&&t(Br),w(aB),w(sB),w(O8),w(lB),w(X8)}}}const UMa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.AutoModelForZeroShotObjectDetection",title:"AutoModelForZeroShotObjectDetection"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function HMa($){return NFa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rEa extends RFa{constructor(g){super();PFa(this,g,HMa,WMa,BFa,{})}}export{rEa as default,UMa as metadata};
